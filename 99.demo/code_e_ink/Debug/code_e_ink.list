
code_e_ink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003568  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003674  08003674  00004674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036a0  080036a0  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  080036a0  080036a0  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080036a0  080036a0  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036a0  080036a0  000046a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080036a4  080036a4  000046a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080036a8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  2000000c  080036b4  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  080036b4  0000512c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ba76  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b6f  00000000  00000000  00010aab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b48  00000000  00000000  00012620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008e0  00000000  00000000  00013168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000174bb  00000000  00000000  00013a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dff9  00000000  00000000  0002af03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008661a  00000000  00000000  00038efc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bf516  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f30  00000000  00000000  000bf55c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000c248c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800365c 	.word	0x0800365c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	0800365c 	.word	0x0800365c

0800014c <decToBcd>:
    HAL_UART_Receive_IT(&huart1,&rxData,1); // Enabling interrupt receive again
  }
}
*/
uint8_t decToBcd(int val)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  return (uint8_t)( (val/10*16) + (val%10) );
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	4a0e      	ldr	r2, [pc, #56]	@ (8000190 <decToBcd+0x44>)
 8000158:	fb82 1203 	smull	r1, r2, r2, r3
 800015c:	1092      	asrs	r2, r2, #2
 800015e:	17db      	asrs	r3, r3, #31
 8000160:	1ad3      	subs	r3, r2, r3
 8000162:	b2db      	uxtb	r3, r3
 8000164:	011b      	lsls	r3, r3, #4
 8000166:	b2d8      	uxtb	r0, r3
 8000168:	687a      	ldr	r2, [r7, #4]
 800016a:	4b09      	ldr	r3, [pc, #36]	@ (8000190 <decToBcd+0x44>)
 800016c:	fb83 1302 	smull	r1, r3, r3, r2
 8000170:	1099      	asrs	r1, r3, #2
 8000172:	17d3      	asrs	r3, r2, #31
 8000174:	1ac9      	subs	r1, r1, r3
 8000176:	460b      	mov	r3, r1
 8000178:	009b      	lsls	r3, r3, #2
 800017a:	440b      	add	r3, r1
 800017c:	005b      	lsls	r3, r3, #1
 800017e:	1ad1      	subs	r1, r2, r3
 8000180:	b2cb      	uxtb	r3, r1
 8000182:	4403      	add	r3, r0
 8000184:	b2db      	uxtb	r3, r3
}
 8000186:	4618      	mov	r0, r3
 8000188:	370c      	adds	r7, #12
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	66666667 	.word	0x66666667

08000194 <bcdToDec>:

int bcdToDec(uint8_t val)
{
 8000194:	b480      	push	{r7}
 8000196:	b083      	sub	sp, #12
 8000198:	af00      	add	r7, sp, #0
 800019a:	4603      	mov	r3, r0
 800019c:	71fb      	strb	r3, [r7, #7]
  return (int)( (val/16*10) + (val%16) );
 800019e:	79fb      	ldrb	r3, [r7, #7]
 80001a0:	091b      	lsrs	r3, r3, #4
 80001a2:	b2db      	uxtb	r3, r3
 80001a4:	461a      	mov	r2, r3
 80001a6:	4613      	mov	r3, r2
 80001a8:	009b      	lsls	r3, r3, #2
 80001aa:	4413      	add	r3, r2
 80001ac:	005b      	lsls	r3, r3, #1
 80001ae:	461a      	mov	r2, r3
 80001b0:	79fb      	ldrb	r3, [r7, #7]
 80001b2:	f003 030f 	and.w	r3, r3, #15
 80001b6:	4413      	add	r3, r2
}
 80001b8:	4618      	mov	r0, r3
 80001ba:	370c      	adds	r7, #12
 80001bc:	46bd      	mov	sp, r7
 80001be:	bc80      	pop	{r7}
 80001c0:	4770      	bx	lr
	...

080001c4 <Set_Time>:

void Set_Time (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom, uint8_t month, uint8_t year)
{
 80001c4:	b590      	push	{r4, r7, lr}
 80001c6:	b089      	sub	sp, #36	@ 0x24
 80001c8:	af04      	add	r7, sp, #16
 80001ca:	4604      	mov	r4, r0
 80001cc:	4608      	mov	r0, r1
 80001ce:	4611      	mov	r1, r2
 80001d0:	461a      	mov	r2, r3
 80001d2:	4623      	mov	r3, r4
 80001d4:	71fb      	strb	r3, [r7, #7]
 80001d6:	4603      	mov	r3, r0
 80001d8:	71bb      	strb	r3, [r7, #6]
 80001da:	460b      	mov	r3, r1
 80001dc:	717b      	strb	r3, [r7, #5]
 80001de:	4613      	mov	r3, r2
 80001e0:	713b      	strb	r3, [r7, #4]
	uint8_t set_time[7];
	set_time[0] = decToBcd(sec);
 80001e2:	79fb      	ldrb	r3, [r7, #7]
 80001e4:	4618      	mov	r0, r3
 80001e6:	f7ff ffb1 	bl	800014c <decToBcd>
 80001ea:	4603      	mov	r3, r0
 80001ec:	723b      	strb	r3, [r7, #8]
	set_time[1] = decToBcd(min);
 80001ee:	79bb      	ldrb	r3, [r7, #6]
 80001f0:	4618      	mov	r0, r3
 80001f2:	f7ff ffab 	bl	800014c <decToBcd>
 80001f6:	4603      	mov	r3, r0
 80001f8:	727b      	strb	r3, [r7, #9]
	set_time[2] = decToBcd(hour);
 80001fa:	797b      	ldrb	r3, [r7, #5]
 80001fc:	4618      	mov	r0, r3
 80001fe:	f7ff ffa5 	bl	800014c <decToBcd>
 8000202:	4603      	mov	r3, r0
 8000204:	72bb      	strb	r3, [r7, #10]
	set_time[3] = decToBcd(dow);
 8000206:	793b      	ldrb	r3, [r7, #4]
 8000208:	4618      	mov	r0, r3
 800020a:	f7ff ff9f 	bl	800014c <decToBcd>
 800020e:	4603      	mov	r3, r0
 8000210:	72fb      	strb	r3, [r7, #11]
	set_time[4] = decToBcd(dom);
 8000212:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000216:	4618      	mov	r0, r3
 8000218:	f7ff ff98 	bl	800014c <decToBcd>
 800021c:	4603      	mov	r3, r0
 800021e:	733b      	strb	r3, [r7, #12]
	set_time[5] = decToBcd(month);
 8000220:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000224:	4618      	mov	r0, r3
 8000226:	f7ff ff91 	bl	800014c <decToBcd>
 800022a:	4603      	mov	r3, r0
 800022c:	737b      	strb	r3, [r7, #13]
	set_time[6] = decToBcd(year);
 800022e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000232:	4618      	mov	r0, r3
 8000234:	f7ff ff8a 	bl	800014c <decToBcd>
 8000238:	4603      	mov	r3, r0
 800023a:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, 0x00, 1, set_time, 7, 1000);
 800023c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000240:	9302      	str	r3, [sp, #8]
 8000242:	2307      	movs	r3, #7
 8000244:	9301      	str	r3, [sp, #4]
 8000246:	f107 0308 	add.w	r3, r7, #8
 800024a:	9300      	str	r3, [sp, #0]
 800024c:	2301      	movs	r3, #1
 800024e:	2200      	movs	r2, #0
 8000250:	2168      	movs	r1, #104	@ 0x68
 8000252:	4803      	ldr	r0, [pc, #12]	@ (8000260 <Set_Time+0x9c>)
 8000254:	f001 f898 	bl	8001388 <HAL_I2C_Mem_Write>
}
 8000258:	bf00      	nop
 800025a:	3714      	adds	r7, #20
 800025c:	46bd      	mov	sp, r7
 800025e:	bd90      	pop	{r4, r7, pc}
 8000260:	20000030 	.word	0x20000030

08000264 <Get_Time>:

void Get_Time (void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b086      	sub	sp, #24
 8000268:	af04      	add	r7, sp, #16
	uint8_t get_time[7];
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, 1, get_time, 7, 1000);
 800026a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800026e:	9302      	str	r3, [sp, #8]
 8000270:	2307      	movs	r3, #7
 8000272:	9301      	str	r3, [sp, #4]
 8000274:	463b      	mov	r3, r7
 8000276:	9300      	str	r3, [sp, #0]
 8000278:	2301      	movs	r3, #1
 800027a:	2200      	movs	r2, #0
 800027c:	2168      	movs	r1, #104	@ 0x68
 800027e:	481f      	ldr	r0, [pc, #124]	@ (80002fc <Get_Time+0x98>)
 8000280:	f001 f97c 	bl	800157c <HAL_I2C_Mem_Read>
	time.seconds = bcdToDec(get_time[0]);
 8000284:	783b      	ldrb	r3, [r7, #0]
 8000286:	4618      	mov	r0, r3
 8000288:	f7ff ff84 	bl	8000194 <bcdToDec>
 800028c:	4603      	mov	r3, r0
 800028e:	b2da      	uxtb	r2, r3
 8000290:	4b1b      	ldr	r3, [pc, #108]	@ (8000300 <Get_Time+0x9c>)
 8000292:	701a      	strb	r2, [r3, #0]
	time.minutes = bcdToDec(get_time[1]);
 8000294:	787b      	ldrb	r3, [r7, #1]
 8000296:	4618      	mov	r0, r3
 8000298:	f7ff ff7c 	bl	8000194 <bcdToDec>
 800029c:	4603      	mov	r3, r0
 800029e:	b2da      	uxtb	r2, r3
 80002a0:	4b17      	ldr	r3, [pc, #92]	@ (8000300 <Get_Time+0x9c>)
 80002a2:	705a      	strb	r2, [r3, #1]
	time.hour = bcdToDec(get_time[2]);
 80002a4:	78bb      	ldrb	r3, [r7, #2]
 80002a6:	4618      	mov	r0, r3
 80002a8:	f7ff ff74 	bl	8000194 <bcdToDec>
 80002ac:	4603      	mov	r3, r0
 80002ae:	b2da      	uxtb	r2, r3
 80002b0:	4b13      	ldr	r3, [pc, #76]	@ (8000300 <Get_Time+0x9c>)
 80002b2:	709a      	strb	r2, [r3, #2]
	time.dayofweek = bcdToDec(get_time[3]);
 80002b4:	78fb      	ldrb	r3, [r7, #3]
 80002b6:	4618      	mov	r0, r3
 80002b8:	f7ff ff6c 	bl	8000194 <bcdToDec>
 80002bc:	4603      	mov	r3, r0
 80002be:	b2da      	uxtb	r2, r3
 80002c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000300 <Get_Time+0x9c>)
 80002c2:	70da      	strb	r2, [r3, #3]
	time.dayofmonth = bcdToDec(get_time[4]);
 80002c4:	793b      	ldrb	r3, [r7, #4]
 80002c6:	4618      	mov	r0, r3
 80002c8:	f7ff ff64 	bl	8000194 <bcdToDec>
 80002cc:	4603      	mov	r3, r0
 80002ce:	b2da      	uxtb	r2, r3
 80002d0:	4b0b      	ldr	r3, [pc, #44]	@ (8000300 <Get_Time+0x9c>)
 80002d2:	711a      	strb	r2, [r3, #4]
	time.month = bcdToDec(get_time[5]);
 80002d4:	797b      	ldrb	r3, [r7, #5]
 80002d6:	4618      	mov	r0, r3
 80002d8:	f7ff ff5c 	bl	8000194 <bcdToDec>
 80002dc:	4603      	mov	r3, r0
 80002de:	b2da      	uxtb	r2, r3
 80002e0:	4b07      	ldr	r3, [pc, #28]	@ (8000300 <Get_Time+0x9c>)
 80002e2:	715a      	strb	r2, [r3, #5]
	time.year = bcdToDec(get_time[6]);
 80002e4:	79bb      	ldrb	r3, [r7, #6]
 80002e6:	4618      	mov	r0, r3
 80002e8:	f7ff ff54 	bl	8000194 <bcdToDec>
 80002ec:	4603      	mov	r3, r0
 80002ee:	b2da      	uxtb	r2, r3
 80002f0:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <Get_Time+0x9c>)
 80002f2:	719a      	strb	r2, [r3, #6]
}
 80002f4:	bf00      	nop
 80002f6:	3708      	adds	r7, #8
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	20000030 	.word	0x20000030
 8000300:	20000028 	.word	0x20000028

08000304 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b086      	sub	sp, #24
 8000308:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800030a:	f000 fb17 	bl	800093c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800030e:	f000 f81f 	bl	8000350 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000312:	f000 f8f1 	bl	80004f8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000316:	f000 f88f 	bl	8000438 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800031a:	f000 f8c3 	bl	80004a4 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800031e:	f000 f85d 	bl	80003dc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  Set_Time
 8000322:	2319      	movs	r3, #25
 8000324:	9302      	str	r3, [sp, #8]
 8000326:	2302      	movs	r3, #2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	231c      	movs	r3, #28
 800032c:	9300      	str	r3, [sp, #0]
 800032e:	2306      	movs	r3, #6
 8000330:	220e      	movs	r2, #14
 8000332:	2103      	movs	r1, #3
 8000334:	2000      	movs	r0, #0
 8000336:	f7ff ff45 	bl	80001c4 <Set_Time>
 	6,  // Day of week
 	28,  // Day of month
 	2,  // Month
 	25  // Year (20**)
   );
 uint32_t previous_time = HAL_GetTick();
 800033a:	f000 fb57 	bl	80009ec <HAL_GetTick>
 800033e:	6078      	str	r0, [r7, #4]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    Get_Time();
 8000340:	f7ff ff90 	bl	8000264 <Get_Time>
	    HAL_Delay(1000);
 8000344:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000348:	f000 fb5a 	bl	8000a00 <HAL_Delay>
	    Get_Time();
 800034c:	bf00      	nop
 800034e:	e7f7      	b.n	8000340 <main+0x3c>

08000350 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b090      	sub	sp, #64	@ 0x40
 8000354:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000356:	f107 0318 	add.w	r3, r7, #24
 800035a:	2228      	movs	r2, #40	@ 0x28
 800035c:	2100      	movs	r1, #0
 800035e:	4618      	mov	r0, r3
 8000360:	f003 f950 	bl	8003604 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000364:	1d3b      	adds	r3, r7, #4
 8000366:	2200      	movs	r2, #0
 8000368:	601a      	str	r2, [r3, #0]
 800036a:	605a      	str	r2, [r3, #4]
 800036c:	609a      	str	r2, [r3, #8]
 800036e:	60da      	str	r2, [r3, #12]
 8000370:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000372:	2301      	movs	r3, #1
 8000374:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000376:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800037a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800037c:	2300      	movs	r3, #0
 800037e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000380:	2301      	movs	r3, #1
 8000382:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000384:	2302      	movs	r3, #2
 8000386:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000388:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800038c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800038e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000392:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000394:	f107 0318 	add.w	r3, r7, #24
 8000398:	4618      	mov	r0, r3
 800039a:	f001 ff17 	bl	80021cc <HAL_RCC_OscConfig>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d001      	beq.n	80003a8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003a4:	f000 f960 	bl	8000668 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003a8:	230f      	movs	r3, #15
 80003aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003ac:	2302      	movs	r3, #2
 80003ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003b0:	2300      	movs	r3, #0
 80003b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80003b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ba:	2300      	movs	r3, #0
 80003bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003be:	1d3b      	adds	r3, r7, #4
 80003c0:	2102      	movs	r1, #2
 80003c2:	4618      	mov	r0, r3
 80003c4:	f002 f984 	bl	80026d0 <HAL_RCC_ClockConfig>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003ce:	f000 f94b 	bl	8000668 <Error_Handler>
  }
}
 80003d2:	bf00      	nop
 80003d4:	3740      	adds	r7, #64	@ 0x40
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
	...

080003dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003e0:	4b12      	ldr	r3, [pc, #72]	@ (800042c <MX_I2C1_Init+0x50>)
 80003e2:	4a13      	ldr	r2, [pc, #76]	@ (8000430 <MX_I2C1_Init+0x54>)
 80003e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80003e6:	4b11      	ldr	r3, [pc, #68]	@ (800042c <MX_I2C1_Init+0x50>)
 80003e8:	4a12      	ldr	r2, [pc, #72]	@ (8000434 <MX_I2C1_Init+0x58>)
 80003ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003ec:	4b0f      	ldr	r3, [pc, #60]	@ (800042c <MX_I2C1_Init+0x50>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80003f2:	4b0e      	ldr	r3, [pc, #56]	@ (800042c <MX_I2C1_Init+0x50>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003f8:	4b0c      	ldr	r3, [pc, #48]	@ (800042c <MX_I2C1_Init+0x50>)
 80003fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80003fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000400:	4b0a      	ldr	r3, [pc, #40]	@ (800042c <MX_I2C1_Init+0x50>)
 8000402:	2200      	movs	r2, #0
 8000404:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000406:	4b09      	ldr	r3, [pc, #36]	@ (800042c <MX_I2C1_Init+0x50>)
 8000408:	2200      	movs	r2, #0
 800040a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800040c:	4b07      	ldr	r3, [pc, #28]	@ (800042c <MX_I2C1_Init+0x50>)
 800040e:	2200      	movs	r2, #0
 8000410:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000412:	4b06      	ldr	r3, [pc, #24]	@ (800042c <MX_I2C1_Init+0x50>)
 8000414:	2200      	movs	r2, #0
 8000416:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000418:	4804      	ldr	r0, [pc, #16]	@ (800042c <MX_I2C1_Init+0x50>)
 800041a:	f000 fe71 	bl	8001100 <HAL_I2C_Init>
 800041e:	4603      	mov	r3, r0
 8000420:	2b00      	cmp	r3, #0
 8000422:	d001      	beq.n	8000428 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000424:	f000 f920 	bl	8000668 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000428:	bf00      	nop
 800042a:	bd80      	pop	{r7, pc}
 800042c:	20000030 	.word	0x20000030
 8000430:	40005400 	.word	0x40005400
 8000434:	000186a0 	.word	0x000186a0

08000438 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800043c:	4b17      	ldr	r3, [pc, #92]	@ (800049c <MX_SPI1_Init+0x64>)
 800043e:	4a18      	ldr	r2, [pc, #96]	@ (80004a0 <MX_SPI1_Init+0x68>)
 8000440:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000442:	4b16      	ldr	r3, [pc, #88]	@ (800049c <MX_SPI1_Init+0x64>)
 8000444:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000448:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800044a:	4b14      	ldr	r3, [pc, #80]	@ (800049c <MX_SPI1_Init+0x64>)
 800044c:	2200      	movs	r2, #0
 800044e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000450:	4b12      	ldr	r3, [pc, #72]	@ (800049c <MX_SPI1_Init+0x64>)
 8000452:	2200      	movs	r2, #0
 8000454:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000456:	4b11      	ldr	r3, [pc, #68]	@ (800049c <MX_SPI1_Init+0x64>)
 8000458:	2200      	movs	r2, #0
 800045a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800045c:	4b0f      	ldr	r3, [pc, #60]	@ (800049c <MX_SPI1_Init+0x64>)
 800045e:	2200      	movs	r2, #0
 8000460:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000462:	4b0e      	ldr	r3, [pc, #56]	@ (800049c <MX_SPI1_Init+0x64>)
 8000464:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000468:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800046a:	4b0c      	ldr	r3, [pc, #48]	@ (800049c <MX_SPI1_Init+0x64>)
 800046c:	2228      	movs	r2, #40	@ 0x28
 800046e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000470:	4b0a      	ldr	r3, [pc, #40]	@ (800049c <MX_SPI1_Init+0x64>)
 8000472:	2200      	movs	r2, #0
 8000474:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000476:	4b09      	ldr	r3, [pc, #36]	@ (800049c <MX_SPI1_Init+0x64>)
 8000478:	2200      	movs	r2, #0
 800047a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800047c:	4b07      	ldr	r3, [pc, #28]	@ (800049c <MX_SPI1_Init+0x64>)
 800047e:	2200      	movs	r2, #0
 8000480:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000482:	4b06      	ldr	r3, [pc, #24]	@ (800049c <MX_SPI1_Init+0x64>)
 8000484:	220a      	movs	r2, #10
 8000486:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000488:	4804      	ldr	r0, [pc, #16]	@ (800049c <MX_SPI1_Init+0x64>)
 800048a:	f002 faaf 	bl	80029ec <HAL_SPI_Init>
 800048e:	4603      	mov	r3, r0
 8000490:	2b00      	cmp	r3, #0
 8000492:	d001      	beq.n	8000498 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000494:	f000 f8e8 	bl	8000668 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000498:	bf00      	nop
 800049a:	bd80      	pop	{r7, pc}
 800049c:	20000084 	.word	0x20000084
 80004a0:	40013000 	.word	0x40013000

080004a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80004a8:	4b11      	ldr	r3, [pc, #68]	@ (80004f0 <MX_USART1_UART_Init+0x4c>)
 80004aa:	4a12      	ldr	r2, [pc, #72]	@ (80004f4 <MX_USART1_UART_Init+0x50>)
 80004ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80004ae:	4b10      	ldr	r3, [pc, #64]	@ (80004f0 <MX_USART1_UART_Init+0x4c>)
 80004b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80004b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004b6:	4b0e      	ldr	r3, [pc, #56]	@ (80004f0 <MX_USART1_UART_Init+0x4c>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004bc:	4b0c      	ldr	r3, [pc, #48]	@ (80004f0 <MX_USART1_UART_Init+0x4c>)
 80004be:	2200      	movs	r2, #0
 80004c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004c2:	4b0b      	ldr	r3, [pc, #44]	@ (80004f0 <MX_USART1_UART_Init+0x4c>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004c8:	4b09      	ldr	r3, [pc, #36]	@ (80004f0 <MX_USART1_UART_Init+0x4c>)
 80004ca:	220c      	movs	r2, #12
 80004cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004ce:	4b08      	ldr	r3, [pc, #32]	@ (80004f0 <MX_USART1_UART_Init+0x4c>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004d4:	4b06      	ldr	r3, [pc, #24]	@ (80004f0 <MX_USART1_UART_Init+0x4c>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004da:	4805      	ldr	r0, [pc, #20]	@ (80004f0 <MX_USART1_UART_Init+0x4c>)
 80004dc:	f002 fb0a 	bl	8002af4 <HAL_UART_Init>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d001      	beq.n	80004ea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80004e6:	f000 f8bf 	bl	8000668 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004ea:	bf00      	nop
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	200000dc 	.word	0x200000dc
 80004f4:	40013800 	.word	0x40013800

080004f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b088      	sub	sp, #32
 80004fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fe:	f107 0310 	add.w	r3, r7, #16
 8000502:	2200      	movs	r2, #0
 8000504:	601a      	str	r2, [r3, #0]
 8000506:	605a      	str	r2, [r3, #4]
 8000508:	609a      	str	r2, [r3, #8]
 800050a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800050c:	4b3b      	ldr	r3, [pc, #236]	@ (80005fc <MX_GPIO_Init+0x104>)
 800050e:	699b      	ldr	r3, [r3, #24]
 8000510:	4a3a      	ldr	r2, [pc, #232]	@ (80005fc <MX_GPIO_Init+0x104>)
 8000512:	f043 0310 	orr.w	r3, r3, #16
 8000516:	6193      	str	r3, [r2, #24]
 8000518:	4b38      	ldr	r3, [pc, #224]	@ (80005fc <MX_GPIO_Init+0x104>)
 800051a:	699b      	ldr	r3, [r3, #24]
 800051c:	f003 0310 	and.w	r3, r3, #16
 8000520:	60fb      	str	r3, [r7, #12]
 8000522:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000524:	4b35      	ldr	r3, [pc, #212]	@ (80005fc <MX_GPIO_Init+0x104>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	4a34      	ldr	r2, [pc, #208]	@ (80005fc <MX_GPIO_Init+0x104>)
 800052a:	f043 0320 	orr.w	r3, r3, #32
 800052e:	6193      	str	r3, [r2, #24]
 8000530:	4b32      	ldr	r3, [pc, #200]	@ (80005fc <MX_GPIO_Init+0x104>)
 8000532:	699b      	ldr	r3, [r3, #24]
 8000534:	f003 0320 	and.w	r3, r3, #32
 8000538:	60bb      	str	r3, [r7, #8]
 800053a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800053c:	4b2f      	ldr	r3, [pc, #188]	@ (80005fc <MX_GPIO_Init+0x104>)
 800053e:	699b      	ldr	r3, [r3, #24]
 8000540:	4a2e      	ldr	r2, [pc, #184]	@ (80005fc <MX_GPIO_Init+0x104>)
 8000542:	f043 0304 	orr.w	r3, r3, #4
 8000546:	6193      	str	r3, [r2, #24]
 8000548:	4b2c      	ldr	r3, [pc, #176]	@ (80005fc <MX_GPIO_Init+0x104>)
 800054a:	699b      	ldr	r3, [r3, #24]
 800054c:	f003 0304 	and.w	r3, r3, #4
 8000550:	607b      	str	r3, [r7, #4]
 8000552:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000554:	4b29      	ldr	r3, [pc, #164]	@ (80005fc <MX_GPIO_Init+0x104>)
 8000556:	699b      	ldr	r3, [r3, #24]
 8000558:	4a28      	ldr	r2, [pc, #160]	@ (80005fc <MX_GPIO_Init+0x104>)
 800055a:	f043 0308 	orr.w	r3, r3, #8
 800055e:	6193      	str	r3, [r2, #24]
 8000560:	4b26      	ldr	r3, [pc, #152]	@ (80005fc <MX_GPIO_Init+0x104>)
 8000562:	699b      	ldr	r3, [r3, #24]
 8000564:	f003 0308 	and.w	r3, r3, #8
 8000568:	603b      	str	r3, [r7, #0]
 800056a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800056c:	2200      	movs	r2, #0
 800056e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000572:	4823      	ldr	r0, [pc, #140]	@ (8000600 <MX_GPIO_Init+0x108>)
 8000574:	f000 fdac 	bl	80010d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_Pin|DC_Pin|SPI_CS_Pin|PWR_Pin, GPIO_PIN_RESET);
 8000578:	2200      	movs	r2, #0
 800057a:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 800057e:	4821      	ldr	r0, [pc, #132]	@ (8000604 <MX_GPIO_Init+0x10c>)
 8000580:	f000 fda6 	bl	80010d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000584:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000588:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800058a:	2301      	movs	r3, #1
 800058c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058e:	2300      	movs	r3, #0
 8000590:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000592:	2302      	movs	r3, #2
 8000594:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000596:	f107 0310 	add.w	r3, r7, #16
 800059a:	4619      	mov	r1, r3
 800059c:	4818      	ldr	r0, [pc, #96]	@ (8000600 <MX_GPIO_Init+0x108>)
 800059e:	f000 fc13 	bl	8000dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUSY_Pin */
  GPIO_InitStruct.Pin = BUSY_Pin;
 80005a2:	2301      	movs	r3, #1
 80005a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005a6:	2300      	movs	r3, #0
 80005a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005aa:	2300      	movs	r3, #0
 80005ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUSY_GPIO_Port, &GPIO_InitStruct);
 80005ae:	f107 0310 	add.w	r3, r7, #16
 80005b2:	4619      	mov	r1, r3
 80005b4:	4813      	ldr	r0, [pc, #76]	@ (8000604 <MX_GPIO_Init+0x10c>)
 80005b6:	f000 fc07 	bl	8000dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RST_Pin DC_Pin SPI_CS_Pin PWR_Pin */
  GPIO_InitStruct.Pin = RST_Pin|DC_Pin|SPI_CS_Pin|PWR_Pin;
 80005ba:	f44f 7387 	mov.w	r3, #270	@ 0x10e
 80005be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c0:	2301      	movs	r3, #1
 80005c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c4:	2300      	movs	r3, #0
 80005c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c8:	2302      	movs	r3, #2
 80005ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005cc:	f107 0310 	add.w	r3, r7, #16
 80005d0:	4619      	mov	r1, r3
 80005d2:	480c      	ldr	r0, [pc, #48]	@ (8000604 <MX_GPIO_Init+0x10c>)
 80005d4:	f000 fbf8 	bl	8000dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80005d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005de:	2300      	movs	r3, #0
 80005e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005e2:	2301      	movs	r3, #1
 80005e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005e6:	f107 0310 	add.w	r3, r7, #16
 80005ea:	4619      	mov	r1, r3
 80005ec:	4806      	ldr	r0, [pc, #24]	@ (8000608 <MX_GPIO_Init+0x110>)
 80005ee:	f000 fbeb 	bl	8000dc8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005f2:	bf00      	nop
 80005f4:	3720      	adds	r7, #32
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40021000 	.word	0x40021000
 8000600:	40011000 	.word	0x40011000
 8000604:	40010800 	.word	0x40010800
 8000608:	40010c00 	.word	0x40010c00

0800060c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a0f      	ldr	r2, [pc, #60]	@ (8000658 <HAL_UART_RxCpltCallback+0x4c>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d117      	bne.n	800064e <HAL_UART_RxCpltCallback+0x42>
  {
    if(rxData==78) // Ascii value of 'N' is 78 (N for NO)
 800061e:	4b0f      	ldr	r3, [pc, #60]	@ (800065c <HAL_UART_RxCpltCallback+0x50>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	2b4e      	cmp	r3, #78	@ 0x4e
 8000624:	d105      	bne.n	8000632 <HAL_UART_RxCpltCallback+0x26>
    {
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8000626:	2200      	movs	r2, #0
 8000628:	2108      	movs	r1, #8
 800062a:	480d      	ldr	r0, [pc, #52]	@ (8000660 <HAL_UART_RxCpltCallback+0x54>)
 800062c:	f000 fd50 	bl	80010d0 <HAL_GPIO_WritePin>
 8000630:	e008      	b.n	8000644 <HAL_UART_RxCpltCallback+0x38>
    }
    else if (rxData==89) // Ascii value of 'Y' is 89 (Y for YES)
 8000632:	4b0a      	ldr	r3, [pc, #40]	@ (800065c <HAL_UART_RxCpltCallback+0x50>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	2b59      	cmp	r3, #89	@ 0x59
 8000638:	d104      	bne.n	8000644 <HAL_UART_RxCpltCallback+0x38>
    {
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 800063a:	2201      	movs	r2, #1
 800063c:	2108      	movs	r1, #8
 800063e:	4808      	ldr	r0, [pc, #32]	@ (8000660 <HAL_UART_RxCpltCallback+0x54>)
 8000640:	f000 fd46 	bl	80010d0 <HAL_GPIO_WritePin>
    }
    HAL_UART_Receive_IT(&huart1,&rxData,1); // Enabling interrupt receive again
 8000644:	2201      	movs	r2, #1
 8000646:	4905      	ldr	r1, [pc, #20]	@ (800065c <HAL_UART_RxCpltCallback+0x50>)
 8000648:	4806      	ldr	r0, [pc, #24]	@ (8000664 <HAL_UART_RxCpltCallback+0x58>)
 800064a:	f002 faa3 	bl	8002b94 <HAL_UART_Receive_IT>
  }
}
 800064e:	bf00      	nop
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40013800 	.word	0x40013800
 800065c:	20000124 	.word	0x20000124
 8000660:	40010c00 	.word	0x40010c00
 8000664:	200000dc 	.word	0x200000dc

08000668 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800066c:	b672      	cpsid	i
}
 800066e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000670:	bf00      	nop
 8000672:	e7fd      	b.n	8000670 <Error_Handler+0x8>

08000674 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000674:	b480      	push	{r7}
 8000676:	b085      	sub	sp, #20
 8000678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800067a:	4b15      	ldr	r3, [pc, #84]	@ (80006d0 <HAL_MspInit+0x5c>)
 800067c:	699b      	ldr	r3, [r3, #24]
 800067e:	4a14      	ldr	r2, [pc, #80]	@ (80006d0 <HAL_MspInit+0x5c>)
 8000680:	f043 0301 	orr.w	r3, r3, #1
 8000684:	6193      	str	r3, [r2, #24]
 8000686:	4b12      	ldr	r3, [pc, #72]	@ (80006d0 <HAL_MspInit+0x5c>)
 8000688:	699b      	ldr	r3, [r3, #24]
 800068a:	f003 0301 	and.w	r3, r3, #1
 800068e:	60bb      	str	r3, [r7, #8]
 8000690:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000692:	4b0f      	ldr	r3, [pc, #60]	@ (80006d0 <HAL_MspInit+0x5c>)
 8000694:	69db      	ldr	r3, [r3, #28]
 8000696:	4a0e      	ldr	r2, [pc, #56]	@ (80006d0 <HAL_MspInit+0x5c>)
 8000698:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800069c:	61d3      	str	r3, [r2, #28]
 800069e:	4b0c      	ldr	r3, [pc, #48]	@ (80006d0 <HAL_MspInit+0x5c>)
 80006a0:	69db      	ldr	r3, [r3, #28]
 80006a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006aa:	4b0a      	ldr	r3, [pc, #40]	@ (80006d4 <HAL_MspInit+0x60>)
 80006ac:	685b      	ldr	r3, [r3, #4]
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	4a04      	ldr	r2, [pc, #16]	@ (80006d4 <HAL_MspInit+0x60>)
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006c6:	bf00      	nop
 80006c8:	3714      	adds	r7, #20
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bc80      	pop	{r7}
 80006ce:	4770      	bx	lr
 80006d0:	40021000 	.word	0x40021000
 80006d4:	40010000 	.word	0x40010000

080006d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b088      	sub	sp, #32
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e0:	f107 0310 	add.w	r3, r7, #16
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4a15      	ldr	r2, [pc, #84]	@ (8000748 <HAL_I2C_MspInit+0x70>)
 80006f4:	4293      	cmp	r3, r2
 80006f6:	d123      	bne.n	8000740 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f8:	4b14      	ldr	r3, [pc, #80]	@ (800074c <HAL_I2C_MspInit+0x74>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	4a13      	ldr	r2, [pc, #76]	@ (800074c <HAL_I2C_MspInit+0x74>)
 80006fe:	f043 0308 	orr.w	r3, r3, #8
 8000702:	6193      	str	r3, [r2, #24]
 8000704:	4b11      	ldr	r3, [pc, #68]	@ (800074c <HAL_I2C_MspInit+0x74>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	f003 0308 	and.w	r3, r3, #8
 800070c:	60fb      	str	r3, [r7, #12]
 800070e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000710:	23c0      	movs	r3, #192	@ 0xc0
 8000712:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000714:	2312      	movs	r3, #18
 8000716:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000718:	2303      	movs	r3, #3
 800071a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800071c:	f107 0310 	add.w	r3, r7, #16
 8000720:	4619      	mov	r1, r3
 8000722:	480b      	ldr	r0, [pc, #44]	@ (8000750 <HAL_I2C_MspInit+0x78>)
 8000724:	f000 fb50 	bl	8000dc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000728:	4b08      	ldr	r3, [pc, #32]	@ (800074c <HAL_I2C_MspInit+0x74>)
 800072a:	69db      	ldr	r3, [r3, #28]
 800072c:	4a07      	ldr	r2, [pc, #28]	@ (800074c <HAL_I2C_MspInit+0x74>)
 800072e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000732:	61d3      	str	r3, [r2, #28]
 8000734:	4b05      	ldr	r3, [pc, #20]	@ (800074c <HAL_I2C_MspInit+0x74>)
 8000736:	69db      	ldr	r3, [r3, #28]
 8000738:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800073c:	60bb      	str	r3, [r7, #8]
 800073e:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000740:	bf00      	nop
 8000742:	3720      	adds	r7, #32
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40005400 	.word	0x40005400
 800074c:	40021000 	.word	0x40021000
 8000750:	40010c00 	.word	0x40010c00

08000754 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b088      	sub	sp, #32
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075c:	f107 0310 	add.w	r3, r7, #16
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4a15      	ldr	r2, [pc, #84]	@ (80007c4 <HAL_SPI_MspInit+0x70>)
 8000770:	4293      	cmp	r3, r2
 8000772:	d123      	bne.n	80007bc <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000774:	4b14      	ldr	r3, [pc, #80]	@ (80007c8 <HAL_SPI_MspInit+0x74>)
 8000776:	699b      	ldr	r3, [r3, #24]
 8000778:	4a13      	ldr	r2, [pc, #76]	@ (80007c8 <HAL_SPI_MspInit+0x74>)
 800077a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800077e:	6193      	str	r3, [r2, #24]
 8000780:	4b11      	ldr	r3, [pc, #68]	@ (80007c8 <HAL_SPI_MspInit+0x74>)
 8000782:	699b      	ldr	r3, [r3, #24]
 8000784:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000788:	60fb      	str	r3, [r7, #12]
 800078a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800078c:	4b0e      	ldr	r3, [pc, #56]	@ (80007c8 <HAL_SPI_MspInit+0x74>)
 800078e:	699b      	ldr	r3, [r3, #24]
 8000790:	4a0d      	ldr	r2, [pc, #52]	@ (80007c8 <HAL_SPI_MspInit+0x74>)
 8000792:	f043 0304 	orr.w	r3, r3, #4
 8000796:	6193      	str	r3, [r2, #24]
 8000798:	4b0b      	ldr	r3, [pc, #44]	@ (80007c8 <HAL_SPI_MspInit+0x74>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	f003 0304 	and.w	r3, r3, #4
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80007a4:	23a0      	movs	r3, #160	@ 0xa0
 80007a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a8:	2302      	movs	r3, #2
 80007aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ac:	2303      	movs	r3, #3
 80007ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b0:	f107 0310 	add.w	r3, r7, #16
 80007b4:	4619      	mov	r1, r3
 80007b6:	4805      	ldr	r0, [pc, #20]	@ (80007cc <HAL_SPI_MspInit+0x78>)
 80007b8:	f000 fb06 	bl	8000dc8 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80007bc:	bf00      	nop
 80007be:	3720      	adds	r7, #32
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40013000 	.word	0x40013000
 80007c8:	40021000 	.word	0x40021000
 80007cc:	40010800 	.word	0x40010800

080007d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b088      	sub	sp, #32
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d8:	f107 0310 	add.w	r3, r7, #16
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4a20      	ldr	r2, [pc, #128]	@ (800086c <HAL_UART_MspInit+0x9c>)
 80007ec:	4293      	cmp	r3, r2
 80007ee:	d139      	bne.n	8000864 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000870 <HAL_UART_MspInit+0xa0>)
 80007f2:	699b      	ldr	r3, [r3, #24]
 80007f4:	4a1e      	ldr	r2, [pc, #120]	@ (8000870 <HAL_UART_MspInit+0xa0>)
 80007f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007fa:	6193      	str	r3, [r2, #24]
 80007fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000870 <HAL_UART_MspInit+0xa0>)
 80007fe:	699b      	ldr	r3, [r3, #24]
 8000800:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000808:	4b19      	ldr	r3, [pc, #100]	@ (8000870 <HAL_UART_MspInit+0xa0>)
 800080a:	699b      	ldr	r3, [r3, #24]
 800080c:	4a18      	ldr	r2, [pc, #96]	@ (8000870 <HAL_UART_MspInit+0xa0>)
 800080e:	f043 0304 	orr.w	r3, r3, #4
 8000812:	6193      	str	r3, [r2, #24]
 8000814:	4b16      	ldr	r3, [pc, #88]	@ (8000870 <HAL_UART_MspInit+0xa0>)
 8000816:	699b      	ldr	r3, [r3, #24]
 8000818:	f003 0304 	and.w	r3, r3, #4
 800081c:	60bb      	str	r3, [r7, #8]
 800081e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000820:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000824:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000826:	2302      	movs	r3, #2
 8000828:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800082a:	2303      	movs	r3, #3
 800082c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082e:	f107 0310 	add.w	r3, r7, #16
 8000832:	4619      	mov	r1, r3
 8000834:	480f      	ldr	r0, [pc, #60]	@ (8000874 <HAL_UART_MspInit+0xa4>)
 8000836:	f000 fac7 	bl	8000dc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800083a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800083e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000840:	2300      	movs	r3, #0
 8000842:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000848:	f107 0310 	add.w	r3, r7, #16
 800084c:	4619      	mov	r1, r3
 800084e:	4809      	ldr	r0, [pc, #36]	@ (8000874 <HAL_UART_MspInit+0xa4>)
 8000850:	f000 faba 	bl	8000dc8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000854:	2200      	movs	r2, #0
 8000856:	2100      	movs	r1, #0
 8000858:	2025      	movs	r0, #37	@ 0x25
 800085a:	f000 f9cc 	bl	8000bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800085e:	2025      	movs	r0, #37	@ 0x25
 8000860:	f000 f9e5 	bl	8000c2e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000864:	bf00      	nop
 8000866:	3720      	adds	r7, #32
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40013800 	.word	0x40013800
 8000870:	40021000 	.word	0x40021000
 8000874:	40010800 	.word	0x40010800

08000878 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800087c:	bf00      	nop
 800087e:	e7fd      	b.n	800087c <NMI_Handler+0x4>

08000880 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000884:	bf00      	nop
 8000886:	e7fd      	b.n	8000884 <HardFault_Handler+0x4>

08000888 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800088c:	bf00      	nop
 800088e:	e7fd      	b.n	800088c <MemManage_Handler+0x4>

08000890 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000894:	bf00      	nop
 8000896:	e7fd      	b.n	8000894 <BusFault_Handler+0x4>

08000898 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800089c:	bf00      	nop
 800089e:	e7fd      	b.n	800089c <UsageFault_Handler+0x4>

080008a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bc80      	pop	{r7}
 80008aa:	4770      	bx	lr

080008ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bc80      	pop	{r7}
 80008b6:	4770      	bx	lr

080008b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	bc80      	pop	{r7}
 80008c2:	4770      	bx	lr

080008c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008c8:	f000 f87e 	bl	80009c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008cc:	bf00      	nop
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80008d4:	4802      	ldr	r0, [pc, #8]	@ (80008e0 <USART1_IRQHandler+0x10>)
 80008d6:	f002 f983 	bl	8002be0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	200000dc 	.word	0x200000dc

080008e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr

080008f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008f0:	f7ff fff8 	bl	80008e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008f4:	480b      	ldr	r0, [pc, #44]	@ (8000924 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80008f6:	490c      	ldr	r1, [pc, #48]	@ (8000928 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80008f8:	4a0c      	ldr	r2, [pc, #48]	@ (800092c <LoopFillZerobss+0x16>)
  movs r3, #0
 80008fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008fc:	e002      	b.n	8000904 <LoopCopyDataInit>

080008fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000900:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000902:	3304      	adds	r3, #4

08000904 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000904:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000906:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000908:	d3f9      	bcc.n	80008fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800090a:	4a09      	ldr	r2, [pc, #36]	@ (8000930 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800090c:	4c09      	ldr	r4, [pc, #36]	@ (8000934 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800090e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000910:	e001      	b.n	8000916 <LoopFillZerobss>

08000912 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000912:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000914:	3204      	adds	r2, #4

08000916 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000916:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000918:	d3fb      	bcc.n	8000912 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800091a:	f002 fe7b 	bl	8003614 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800091e:	f7ff fcf1 	bl	8000304 <main>
  bx lr
 8000922:	4770      	bx	lr
  ldr r0, =_sdata
 8000924:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000928:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800092c:	080036a8 	.word	0x080036a8
  ldr r2, =_sbss
 8000930:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000934:	2000012c 	.word	0x2000012c

08000938 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000938:	e7fe      	b.n	8000938 <ADC1_2_IRQHandler>
	...

0800093c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000940:	4b08      	ldr	r3, [pc, #32]	@ (8000964 <HAL_Init+0x28>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a07      	ldr	r2, [pc, #28]	@ (8000964 <HAL_Init+0x28>)
 8000946:	f043 0310 	orr.w	r3, r3, #16
 800094a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800094c:	2003      	movs	r0, #3
 800094e:	f000 f947 	bl	8000be0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000952:	200f      	movs	r0, #15
 8000954:	f000 f808 	bl	8000968 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000958:	f7ff fe8c 	bl	8000674 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800095c:	2300      	movs	r3, #0
}
 800095e:	4618      	mov	r0, r3
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40022000 	.word	0x40022000

08000968 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000970:	4b12      	ldr	r3, [pc, #72]	@ (80009bc <HAL_InitTick+0x54>)
 8000972:	681a      	ldr	r2, [r3, #0]
 8000974:	4b12      	ldr	r3, [pc, #72]	@ (80009c0 <HAL_InitTick+0x58>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	4619      	mov	r1, r3
 800097a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800097e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000982:	fbb2 f3f3 	udiv	r3, r2, r3
 8000986:	4618      	mov	r0, r3
 8000988:	f000 f95f 	bl	8000c4a <HAL_SYSTICK_Config>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000992:	2301      	movs	r3, #1
 8000994:	e00e      	b.n	80009b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	2b0f      	cmp	r3, #15
 800099a:	d80a      	bhi.n	80009b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800099c:	2200      	movs	r2, #0
 800099e:	6879      	ldr	r1, [r7, #4]
 80009a0:	f04f 30ff 	mov.w	r0, #4294967295
 80009a4:	f000 f927 	bl	8000bf6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009a8:	4a06      	ldr	r2, [pc, #24]	@ (80009c4 <HAL_InitTick+0x5c>)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ae:	2300      	movs	r3, #0
 80009b0:	e000      	b.n	80009b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009b2:	2301      	movs	r3, #1
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20000000 	.word	0x20000000
 80009c0:	20000008 	.word	0x20000008
 80009c4:	20000004 	.word	0x20000004

080009c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009cc:	4b05      	ldr	r3, [pc, #20]	@ (80009e4 <HAL_IncTick+0x1c>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	461a      	mov	r2, r3
 80009d2:	4b05      	ldr	r3, [pc, #20]	@ (80009e8 <HAL_IncTick+0x20>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4413      	add	r3, r2
 80009d8:	4a03      	ldr	r2, [pc, #12]	@ (80009e8 <HAL_IncTick+0x20>)
 80009da:	6013      	str	r3, [r2, #0]
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	bc80      	pop	{r7}
 80009e2:	4770      	bx	lr
 80009e4:	20000008 	.word	0x20000008
 80009e8:	20000128 	.word	0x20000128

080009ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  return uwTick;
 80009f0:	4b02      	ldr	r3, [pc, #8]	@ (80009fc <HAL_GetTick+0x10>)
 80009f2:	681b      	ldr	r3, [r3, #0]
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bc80      	pop	{r7}
 80009fa:	4770      	bx	lr
 80009fc:	20000128 	.word	0x20000128

08000a00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a08:	f7ff fff0 	bl	80009ec <HAL_GetTick>
 8000a0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a18:	d005      	beq.n	8000a26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a44 <HAL_Delay+0x44>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	461a      	mov	r2, r3
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	4413      	add	r3, r2
 8000a24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a26:	bf00      	nop
 8000a28:	f7ff ffe0 	bl	80009ec <HAL_GetTick>
 8000a2c:	4602      	mov	r2, r0
 8000a2e:	68bb      	ldr	r3, [r7, #8]
 8000a30:	1ad3      	subs	r3, r2, r3
 8000a32:	68fa      	ldr	r2, [r7, #12]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	d8f7      	bhi.n	8000a28 <HAL_Delay+0x28>
  {
  }
}
 8000a38:	bf00      	nop
 8000a3a:	bf00      	nop
 8000a3c:	3710      	adds	r7, #16
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000008 	.word	0x20000008

08000a48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b085      	sub	sp, #20
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	f003 0307 	and.w	r3, r3, #7
 8000a56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a58:	4b0c      	ldr	r3, [pc, #48]	@ (8000a8c <__NVIC_SetPriorityGrouping+0x44>)
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a5e:	68ba      	ldr	r2, [r7, #8]
 8000a60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a64:	4013      	ands	r3, r2
 8000a66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a7a:	4a04      	ldr	r2, [pc, #16]	@ (8000a8c <__NVIC_SetPriorityGrouping+0x44>)
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	60d3      	str	r3, [r2, #12]
}
 8000a80:	bf00      	nop
 8000a82:	3714      	adds	r7, #20
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bc80      	pop	{r7}
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	e000ed00 	.word	0xe000ed00

08000a90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a94:	4b04      	ldr	r3, [pc, #16]	@ (8000aa8 <__NVIC_GetPriorityGrouping+0x18>)
 8000a96:	68db      	ldr	r3, [r3, #12]
 8000a98:	0a1b      	lsrs	r3, r3, #8
 8000a9a:	f003 0307 	and.w	r3, r3, #7
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bc80      	pop	{r7}
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	db0b      	blt.n	8000ad6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	f003 021f 	and.w	r2, r3, #31
 8000ac4:	4906      	ldr	r1, [pc, #24]	@ (8000ae0 <__NVIC_EnableIRQ+0x34>)
 8000ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aca:	095b      	lsrs	r3, r3, #5
 8000acc:	2001      	movs	r0, #1
 8000ace:	fa00 f202 	lsl.w	r2, r0, r2
 8000ad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ad6:	bf00      	nop
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bc80      	pop	{r7}
 8000ade:	4770      	bx	lr
 8000ae0:	e000e100 	.word	0xe000e100

08000ae4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	6039      	str	r1, [r7, #0]
 8000aee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	db0a      	blt.n	8000b0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	b2da      	uxtb	r2, r3
 8000afc:	490c      	ldr	r1, [pc, #48]	@ (8000b30 <__NVIC_SetPriority+0x4c>)
 8000afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b02:	0112      	lsls	r2, r2, #4
 8000b04:	b2d2      	uxtb	r2, r2
 8000b06:	440b      	add	r3, r1
 8000b08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b0c:	e00a      	b.n	8000b24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	b2da      	uxtb	r2, r3
 8000b12:	4908      	ldr	r1, [pc, #32]	@ (8000b34 <__NVIC_SetPriority+0x50>)
 8000b14:	79fb      	ldrb	r3, [r7, #7]
 8000b16:	f003 030f 	and.w	r3, r3, #15
 8000b1a:	3b04      	subs	r3, #4
 8000b1c:	0112      	lsls	r2, r2, #4
 8000b1e:	b2d2      	uxtb	r2, r2
 8000b20:	440b      	add	r3, r1
 8000b22:	761a      	strb	r2, [r3, #24]
}
 8000b24:	bf00      	nop
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bc80      	pop	{r7}
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	e000e100 	.word	0xe000e100
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b089      	sub	sp, #36	@ 0x24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60f8      	str	r0, [r7, #12]
 8000b40:	60b9      	str	r1, [r7, #8]
 8000b42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	f003 0307 	and.w	r3, r3, #7
 8000b4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b4c:	69fb      	ldr	r3, [r7, #28]
 8000b4e:	f1c3 0307 	rsb	r3, r3, #7
 8000b52:	2b04      	cmp	r3, #4
 8000b54:	bf28      	it	cs
 8000b56:	2304      	movcs	r3, #4
 8000b58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b5a:	69fb      	ldr	r3, [r7, #28]
 8000b5c:	3304      	adds	r3, #4
 8000b5e:	2b06      	cmp	r3, #6
 8000b60:	d902      	bls.n	8000b68 <NVIC_EncodePriority+0x30>
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	3b03      	subs	r3, #3
 8000b66:	e000      	b.n	8000b6a <NVIC_EncodePriority+0x32>
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b70:	69bb      	ldr	r3, [r7, #24]
 8000b72:	fa02 f303 	lsl.w	r3, r2, r3
 8000b76:	43da      	mvns	r2, r3
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	401a      	ands	r2, r3
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b80:	f04f 31ff 	mov.w	r1, #4294967295
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	fa01 f303 	lsl.w	r3, r1, r3
 8000b8a:	43d9      	mvns	r1, r3
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b90:	4313      	orrs	r3, r2
         );
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3724      	adds	r7, #36	@ 0x24
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bc80      	pop	{r7}
 8000b9a:	4770      	bx	lr

08000b9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	3b01      	subs	r3, #1
 8000ba8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bac:	d301      	bcc.n	8000bb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bae:	2301      	movs	r3, #1
 8000bb0:	e00f      	b.n	8000bd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000bdc <SysTick_Config+0x40>)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	3b01      	subs	r3, #1
 8000bb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bba:	210f      	movs	r1, #15
 8000bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc0:	f7ff ff90 	bl	8000ae4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bc4:	4b05      	ldr	r3, [pc, #20]	@ (8000bdc <SysTick_Config+0x40>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bca:	4b04      	ldr	r3, [pc, #16]	@ (8000bdc <SysTick_Config+0x40>)
 8000bcc:	2207      	movs	r2, #7
 8000bce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bd0:	2300      	movs	r3, #0
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	e000e010 	.word	0xe000e010

08000be0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000be8:	6878      	ldr	r0, [r7, #4]
 8000bea:	f7ff ff2d 	bl	8000a48 <__NVIC_SetPriorityGrouping>
}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b086      	sub	sp, #24
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	60b9      	str	r1, [r7, #8]
 8000c00:	607a      	str	r2, [r7, #4]
 8000c02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c08:	f7ff ff42 	bl	8000a90 <__NVIC_GetPriorityGrouping>
 8000c0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	68b9      	ldr	r1, [r7, #8]
 8000c12:	6978      	ldr	r0, [r7, #20]
 8000c14:	f7ff ff90 	bl	8000b38 <NVIC_EncodePriority>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c1e:	4611      	mov	r1, r2
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff ff5f 	bl	8000ae4 <__NVIC_SetPriority>
}
 8000c26:	bf00      	nop
 8000c28:	3718      	adds	r7, #24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b082      	sub	sp, #8
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	4603      	mov	r3, r0
 8000c36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff ff35 	bl	8000aac <__NVIC_EnableIRQ>
}
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b082      	sub	sp, #8
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	f7ff ffa2 	bl	8000b9c <SysTick_Config>
 8000c58:	4603      	mov	r3, r0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c62:	b480      	push	{r7}
 8000c64:	b085      	sub	sp, #20
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	2b02      	cmp	r3, #2
 8000c78:	d008      	beq.n	8000c8c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2204      	movs	r2, #4
 8000c7e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2200      	movs	r2, #0
 8000c84:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	e020      	b.n	8000cce <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f022 020e 	bic.w	r2, r2, #14
 8000c9a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f022 0201 	bic.w	r2, r2, #1
 8000caa:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	fa01 f202 	lsl.w	r2, r1, r2
 8000cba:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3714      	adds	r7, #20
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bc80      	pop	{r7}
 8000cd6:	4770      	bx	lr

08000cd8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	2b02      	cmp	r3, #2
 8000cee:	d005      	beq.n	8000cfc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2204      	movs	r2, #4
 8000cf4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	73fb      	strb	r3, [r7, #15]
 8000cfa:	e051      	b.n	8000da0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f022 020e 	bic.w	r2, r2, #14
 8000d0a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f022 0201 	bic.w	r2, r2, #1
 8000d1a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a22      	ldr	r2, [pc, #136]	@ (8000dac <HAL_DMA_Abort_IT+0xd4>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d029      	beq.n	8000d7a <HAL_DMA_Abort_IT+0xa2>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a21      	ldr	r2, [pc, #132]	@ (8000db0 <HAL_DMA_Abort_IT+0xd8>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d022      	beq.n	8000d76 <HAL_DMA_Abort_IT+0x9e>
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a1f      	ldr	r2, [pc, #124]	@ (8000db4 <HAL_DMA_Abort_IT+0xdc>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d01a      	beq.n	8000d70 <HAL_DMA_Abort_IT+0x98>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a1e      	ldr	r2, [pc, #120]	@ (8000db8 <HAL_DMA_Abort_IT+0xe0>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d012      	beq.n	8000d6a <HAL_DMA_Abort_IT+0x92>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a1c      	ldr	r2, [pc, #112]	@ (8000dbc <HAL_DMA_Abort_IT+0xe4>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d00a      	beq.n	8000d64 <HAL_DMA_Abort_IT+0x8c>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a1b      	ldr	r2, [pc, #108]	@ (8000dc0 <HAL_DMA_Abort_IT+0xe8>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d102      	bne.n	8000d5e <HAL_DMA_Abort_IT+0x86>
 8000d58:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000d5c:	e00e      	b.n	8000d7c <HAL_DMA_Abort_IT+0xa4>
 8000d5e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000d62:	e00b      	b.n	8000d7c <HAL_DMA_Abort_IT+0xa4>
 8000d64:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d68:	e008      	b.n	8000d7c <HAL_DMA_Abort_IT+0xa4>
 8000d6a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d6e:	e005      	b.n	8000d7c <HAL_DMA_Abort_IT+0xa4>
 8000d70:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d74:	e002      	b.n	8000d7c <HAL_DMA_Abort_IT+0xa4>
 8000d76:	2310      	movs	r3, #16
 8000d78:	e000      	b.n	8000d7c <HAL_DMA_Abort_IT+0xa4>
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	4a11      	ldr	r2, [pc, #68]	@ (8000dc4 <HAL_DMA_Abort_IT+0xec>)
 8000d7e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2201      	movs	r2, #1
 8000d84:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d003      	beq.n	8000da0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	4798      	blx	r3
    } 
  }
  return status;
 8000da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3710      	adds	r7, #16
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40020008 	.word	0x40020008
 8000db0:	4002001c 	.word	0x4002001c
 8000db4:	40020030 	.word	0x40020030
 8000db8:	40020044 	.word	0x40020044
 8000dbc:	40020058 	.word	0x40020058
 8000dc0:	4002006c 	.word	0x4002006c
 8000dc4:	40020000 	.word	0x40020000

08000dc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b08b      	sub	sp, #44	@ 0x2c
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dda:	e169      	b.n	80010b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ddc:	2201      	movs	r2, #1
 8000dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	69fa      	ldr	r2, [r7, #28]
 8000dec:	4013      	ands	r3, r2
 8000dee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	f040 8158 	bne.w	80010aa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	4a9a      	ldr	r2, [pc, #616]	@ (8001068 <HAL_GPIO_Init+0x2a0>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d05e      	beq.n	8000ec2 <HAL_GPIO_Init+0xfa>
 8000e04:	4a98      	ldr	r2, [pc, #608]	@ (8001068 <HAL_GPIO_Init+0x2a0>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d875      	bhi.n	8000ef6 <HAL_GPIO_Init+0x12e>
 8000e0a:	4a98      	ldr	r2, [pc, #608]	@ (800106c <HAL_GPIO_Init+0x2a4>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d058      	beq.n	8000ec2 <HAL_GPIO_Init+0xfa>
 8000e10:	4a96      	ldr	r2, [pc, #600]	@ (800106c <HAL_GPIO_Init+0x2a4>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d86f      	bhi.n	8000ef6 <HAL_GPIO_Init+0x12e>
 8000e16:	4a96      	ldr	r2, [pc, #600]	@ (8001070 <HAL_GPIO_Init+0x2a8>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d052      	beq.n	8000ec2 <HAL_GPIO_Init+0xfa>
 8000e1c:	4a94      	ldr	r2, [pc, #592]	@ (8001070 <HAL_GPIO_Init+0x2a8>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d869      	bhi.n	8000ef6 <HAL_GPIO_Init+0x12e>
 8000e22:	4a94      	ldr	r2, [pc, #592]	@ (8001074 <HAL_GPIO_Init+0x2ac>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d04c      	beq.n	8000ec2 <HAL_GPIO_Init+0xfa>
 8000e28:	4a92      	ldr	r2, [pc, #584]	@ (8001074 <HAL_GPIO_Init+0x2ac>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d863      	bhi.n	8000ef6 <HAL_GPIO_Init+0x12e>
 8000e2e:	4a92      	ldr	r2, [pc, #584]	@ (8001078 <HAL_GPIO_Init+0x2b0>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d046      	beq.n	8000ec2 <HAL_GPIO_Init+0xfa>
 8000e34:	4a90      	ldr	r2, [pc, #576]	@ (8001078 <HAL_GPIO_Init+0x2b0>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d85d      	bhi.n	8000ef6 <HAL_GPIO_Init+0x12e>
 8000e3a:	2b12      	cmp	r3, #18
 8000e3c:	d82a      	bhi.n	8000e94 <HAL_GPIO_Init+0xcc>
 8000e3e:	2b12      	cmp	r3, #18
 8000e40:	d859      	bhi.n	8000ef6 <HAL_GPIO_Init+0x12e>
 8000e42:	a201      	add	r2, pc, #4	@ (adr r2, 8000e48 <HAL_GPIO_Init+0x80>)
 8000e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e48:	08000ec3 	.word	0x08000ec3
 8000e4c:	08000e9d 	.word	0x08000e9d
 8000e50:	08000eaf 	.word	0x08000eaf
 8000e54:	08000ef1 	.word	0x08000ef1
 8000e58:	08000ef7 	.word	0x08000ef7
 8000e5c:	08000ef7 	.word	0x08000ef7
 8000e60:	08000ef7 	.word	0x08000ef7
 8000e64:	08000ef7 	.word	0x08000ef7
 8000e68:	08000ef7 	.word	0x08000ef7
 8000e6c:	08000ef7 	.word	0x08000ef7
 8000e70:	08000ef7 	.word	0x08000ef7
 8000e74:	08000ef7 	.word	0x08000ef7
 8000e78:	08000ef7 	.word	0x08000ef7
 8000e7c:	08000ef7 	.word	0x08000ef7
 8000e80:	08000ef7 	.word	0x08000ef7
 8000e84:	08000ef7 	.word	0x08000ef7
 8000e88:	08000ef7 	.word	0x08000ef7
 8000e8c:	08000ea5 	.word	0x08000ea5
 8000e90:	08000eb9 	.word	0x08000eb9
 8000e94:	4a79      	ldr	r2, [pc, #484]	@ (800107c <HAL_GPIO_Init+0x2b4>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d013      	beq.n	8000ec2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e9a:	e02c      	b.n	8000ef6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	623b      	str	r3, [r7, #32]
          break;
 8000ea2:	e029      	b.n	8000ef8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	3304      	adds	r3, #4
 8000eaa:	623b      	str	r3, [r7, #32]
          break;
 8000eac:	e024      	b.n	8000ef8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	68db      	ldr	r3, [r3, #12]
 8000eb2:	3308      	adds	r3, #8
 8000eb4:	623b      	str	r3, [r7, #32]
          break;
 8000eb6:	e01f      	b.n	8000ef8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	330c      	adds	r3, #12
 8000ebe:	623b      	str	r3, [r7, #32]
          break;
 8000ec0:	e01a      	b.n	8000ef8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d102      	bne.n	8000ed0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000eca:	2304      	movs	r3, #4
 8000ecc:	623b      	str	r3, [r7, #32]
          break;
 8000ece:	e013      	b.n	8000ef8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d105      	bne.n	8000ee4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ed8:	2308      	movs	r3, #8
 8000eda:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	69fa      	ldr	r2, [r7, #28]
 8000ee0:	611a      	str	r2, [r3, #16]
          break;
 8000ee2:	e009      	b.n	8000ef8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ee4:	2308      	movs	r3, #8
 8000ee6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	69fa      	ldr	r2, [r7, #28]
 8000eec:	615a      	str	r2, [r3, #20]
          break;
 8000eee:	e003      	b.n	8000ef8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	623b      	str	r3, [r7, #32]
          break;
 8000ef4:	e000      	b.n	8000ef8 <HAL_GPIO_Init+0x130>
          break;
 8000ef6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	2bff      	cmp	r3, #255	@ 0xff
 8000efc:	d801      	bhi.n	8000f02 <HAL_GPIO_Init+0x13a>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	e001      	b.n	8000f06 <HAL_GPIO_Init+0x13e>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	3304      	adds	r3, #4
 8000f06:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	2bff      	cmp	r3, #255	@ 0xff
 8000f0c:	d802      	bhi.n	8000f14 <HAL_GPIO_Init+0x14c>
 8000f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	e002      	b.n	8000f1a <HAL_GPIO_Init+0x152>
 8000f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f16:	3b08      	subs	r3, #8
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	210f      	movs	r1, #15
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	fa01 f303 	lsl.w	r3, r1, r3
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	401a      	ands	r2, r3
 8000f2c:	6a39      	ldr	r1, [r7, #32]
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	fa01 f303 	lsl.w	r3, r1, r3
 8000f34:	431a      	orrs	r2, r3
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	f000 80b1 	beq.w	80010aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f48:	4b4d      	ldr	r3, [pc, #308]	@ (8001080 <HAL_GPIO_Init+0x2b8>)
 8000f4a:	699b      	ldr	r3, [r3, #24]
 8000f4c:	4a4c      	ldr	r2, [pc, #304]	@ (8001080 <HAL_GPIO_Init+0x2b8>)
 8000f4e:	f043 0301 	orr.w	r3, r3, #1
 8000f52:	6193      	str	r3, [r2, #24]
 8000f54:	4b4a      	ldr	r3, [pc, #296]	@ (8001080 <HAL_GPIO_Init+0x2b8>)
 8000f56:	699b      	ldr	r3, [r3, #24]
 8000f58:	f003 0301 	and.w	r3, r3, #1
 8000f5c:	60bb      	str	r3, [r7, #8]
 8000f5e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f60:	4a48      	ldr	r2, [pc, #288]	@ (8001084 <HAL_GPIO_Init+0x2bc>)
 8000f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f64:	089b      	lsrs	r3, r3, #2
 8000f66:	3302      	adds	r3, #2
 8000f68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f6c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f70:	f003 0303 	and.w	r3, r3, #3
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	220f      	movs	r2, #15
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	68fa      	ldr	r2, [r7, #12]
 8000f80:	4013      	ands	r3, r2
 8000f82:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4a40      	ldr	r2, [pc, #256]	@ (8001088 <HAL_GPIO_Init+0x2c0>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d013      	beq.n	8000fb4 <HAL_GPIO_Init+0x1ec>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4a3f      	ldr	r2, [pc, #252]	@ (800108c <HAL_GPIO_Init+0x2c4>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d00d      	beq.n	8000fb0 <HAL_GPIO_Init+0x1e8>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4a3e      	ldr	r2, [pc, #248]	@ (8001090 <HAL_GPIO_Init+0x2c8>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d007      	beq.n	8000fac <HAL_GPIO_Init+0x1e4>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4a3d      	ldr	r2, [pc, #244]	@ (8001094 <HAL_GPIO_Init+0x2cc>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d101      	bne.n	8000fa8 <HAL_GPIO_Init+0x1e0>
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	e006      	b.n	8000fb6 <HAL_GPIO_Init+0x1ee>
 8000fa8:	2304      	movs	r3, #4
 8000faa:	e004      	b.n	8000fb6 <HAL_GPIO_Init+0x1ee>
 8000fac:	2302      	movs	r3, #2
 8000fae:	e002      	b.n	8000fb6 <HAL_GPIO_Init+0x1ee>
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e000      	b.n	8000fb6 <HAL_GPIO_Init+0x1ee>
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000fb8:	f002 0203 	and.w	r2, r2, #3
 8000fbc:	0092      	lsls	r2, r2, #2
 8000fbe:	4093      	lsls	r3, r2
 8000fc0:	68fa      	ldr	r2, [r7, #12]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000fc6:	492f      	ldr	r1, [pc, #188]	@ (8001084 <HAL_GPIO_Init+0x2bc>)
 8000fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fca:	089b      	lsrs	r3, r3, #2
 8000fcc:	3302      	adds	r3, #2
 8000fce:	68fa      	ldr	r2, [r7, #12]
 8000fd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d006      	beq.n	8000fee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000fe0:	4b2d      	ldr	r3, [pc, #180]	@ (8001098 <HAL_GPIO_Init+0x2d0>)
 8000fe2:	689a      	ldr	r2, [r3, #8]
 8000fe4:	492c      	ldr	r1, [pc, #176]	@ (8001098 <HAL_GPIO_Init+0x2d0>)
 8000fe6:	69bb      	ldr	r3, [r7, #24]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	608b      	str	r3, [r1, #8]
 8000fec:	e006      	b.n	8000ffc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000fee:	4b2a      	ldr	r3, [pc, #168]	@ (8001098 <HAL_GPIO_Init+0x2d0>)
 8000ff0:	689a      	ldr	r2, [r3, #8]
 8000ff2:	69bb      	ldr	r3, [r7, #24]
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	4928      	ldr	r1, [pc, #160]	@ (8001098 <HAL_GPIO_Init+0x2d0>)
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001004:	2b00      	cmp	r3, #0
 8001006:	d006      	beq.n	8001016 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001008:	4b23      	ldr	r3, [pc, #140]	@ (8001098 <HAL_GPIO_Init+0x2d0>)
 800100a:	68da      	ldr	r2, [r3, #12]
 800100c:	4922      	ldr	r1, [pc, #136]	@ (8001098 <HAL_GPIO_Init+0x2d0>)
 800100e:	69bb      	ldr	r3, [r7, #24]
 8001010:	4313      	orrs	r3, r2
 8001012:	60cb      	str	r3, [r1, #12]
 8001014:	e006      	b.n	8001024 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001016:	4b20      	ldr	r3, [pc, #128]	@ (8001098 <HAL_GPIO_Init+0x2d0>)
 8001018:	68da      	ldr	r2, [r3, #12]
 800101a:	69bb      	ldr	r3, [r7, #24]
 800101c:	43db      	mvns	r3, r3
 800101e:	491e      	ldr	r1, [pc, #120]	@ (8001098 <HAL_GPIO_Init+0x2d0>)
 8001020:	4013      	ands	r3, r2
 8001022:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800102c:	2b00      	cmp	r3, #0
 800102e:	d006      	beq.n	800103e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001030:	4b19      	ldr	r3, [pc, #100]	@ (8001098 <HAL_GPIO_Init+0x2d0>)
 8001032:	685a      	ldr	r2, [r3, #4]
 8001034:	4918      	ldr	r1, [pc, #96]	@ (8001098 <HAL_GPIO_Init+0x2d0>)
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	4313      	orrs	r3, r2
 800103a:	604b      	str	r3, [r1, #4]
 800103c:	e006      	b.n	800104c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800103e:	4b16      	ldr	r3, [pc, #88]	@ (8001098 <HAL_GPIO_Init+0x2d0>)
 8001040:	685a      	ldr	r2, [r3, #4]
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	43db      	mvns	r3, r3
 8001046:	4914      	ldr	r1, [pc, #80]	@ (8001098 <HAL_GPIO_Init+0x2d0>)
 8001048:	4013      	ands	r3, r2
 800104a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001054:	2b00      	cmp	r3, #0
 8001056:	d021      	beq.n	800109c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001058:	4b0f      	ldr	r3, [pc, #60]	@ (8001098 <HAL_GPIO_Init+0x2d0>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	490e      	ldr	r1, [pc, #56]	@ (8001098 <HAL_GPIO_Init+0x2d0>)
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	4313      	orrs	r3, r2
 8001062:	600b      	str	r3, [r1, #0]
 8001064:	e021      	b.n	80010aa <HAL_GPIO_Init+0x2e2>
 8001066:	bf00      	nop
 8001068:	10320000 	.word	0x10320000
 800106c:	10310000 	.word	0x10310000
 8001070:	10220000 	.word	0x10220000
 8001074:	10210000 	.word	0x10210000
 8001078:	10120000 	.word	0x10120000
 800107c:	10110000 	.word	0x10110000
 8001080:	40021000 	.word	0x40021000
 8001084:	40010000 	.word	0x40010000
 8001088:	40010800 	.word	0x40010800
 800108c:	40010c00 	.word	0x40010c00
 8001090:	40011000 	.word	0x40011000
 8001094:	40011400 	.word	0x40011400
 8001098:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800109c:	4b0b      	ldr	r3, [pc, #44]	@ (80010cc <HAL_GPIO_Init+0x304>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	43db      	mvns	r3, r3
 80010a4:	4909      	ldr	r1, [pc, #36]	@ (80010cc <HAL_GPIO_Init+0x304>)
 80010a6:	4013      	ands	r3, r2
 80010a8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80010aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ac:	3301      	adds	r3, #1
 80010ae:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b6:	fa22 f303 	lsr.w	r3, r2, r3
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	f47f ae8e 	bne.w	8000ddc <HAL_GPIO_Init+0x14>
  }
}
 80010c0:	bf00      	nop
 80010c2:	bf00      	nop
 80010c4:	372c      	adds	r7, #44	@ 0x2c
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bc80      	pop	{r7}
 80010ca:	4770      	bx	lr
 80010cc:	40010400 	.word	0x40010400

080010d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	460b      	mov	r3, r1
 80010da:	807b      	strh	r3, [r7, #2]
 80010dc:	4613      	mov	r3, r2
 80010de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010e0:	787b      	ldrb	r3, [r7, #1]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d003      	beq.n	80010ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010e6:	887a      	ldrh	r2, [r7, #2]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80010ec:	e003      	b.n	80010f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010ee:	887b      	ldrh	r3, [r7, #2]
 80010f0:	041a      	lsls	r2, r3, #16
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	611a      	str	r2, [r3, #16]
}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc80      	pop	{r7}
 80010fe:	4770      	bx	lr

08001100 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d101      	bne.n	8001112 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e12b      	b.n	800136a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001118:	b2db      	uxtb	r3, r3
 800111a:	2b00      	cmp	r3, #0
 800111c:	d106      	bne.n	800112c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2200      	movs	r2, #0
 8001122:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f7ff fad6 	bl	80006d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2224      	movs	r2, #36	@ 0x24
 8001130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f022 0201 	bic.w	r2, r2, #1
 8001142:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001152:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001162:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001164:	f001 fbfc 	bl	8002960 <HAL_RCC_GetPCLK1Freq>
 8001168:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	4a81      	ldr	r2, [pc, #516]	@ (8001374 <HAL_I2C_Init+0x274>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d807      	bhi.n	8001184 <HAL_I2C_Init+0x84>
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	4a80      	ldr	r2, [pc, #512]	@ (8001378 <HAL_I2C_Init+0x278>)
 8001178:	4293      	cmp	r3, r2
 800117a:	bf94      	ite	ls
 800117c:	2301      	movls	r3, #1
 800117e:	2300      	movhi	r3, #0
 8001180:	b2db      	uxtb	r3, r3
 8001182:	e006      	b.n	8001192 <HAL_I2C_Init+0x92>
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	4a7d      	ldr	r2, [pc, #500]	@ (800137c <HAL_I2C_Init+0x27c>)
 8001188:	4293      	cmp	r3, r2
 800118a:	bf94      	ite	ls
 800118c:	2301      	movls	r3, #1
 800118e:	2300      	movhi	r3, #0
 8001190:	b2db      	uxtb	r3, r3
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e0e7      	b.n	800136a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	4a78      	ldr	r2, [pc, #480]	@ (8001380 <HAL_I2C_Init+0x280>)
 800119e:	fba2 2303 	umull	r2, r3, r2, r3
 80011a2:	0c9b      	lsrs	r3, r3, #18
 80011a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	68ba      	ldr	r2, [r7, #8]
 80011b6:	430a      	orrs	r2, r1
 80011b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	6a1b      	ldr	r3, [r3, #32]
 80011c0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	4a6a      	ldr	r2, [pc, #424]	@ (8001374 <HAL_I2C_Init+0x274>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d802      	bhi.n	80011d4 <HAL_I2C_Init+0xd4>
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	3301      	adds	r3, #1
 80011d2:	e009      	b.n	80011e8 <HAL_I2C_Init+0xe8>
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80011da:	fb02 f303 	mul.w	r3, r2, r3
 80011de:	4a69      	ldr	r2, [pc, #420]	@ (8001384 <HAL_I2C_Init+0x284>)
 80011e0:	fba2 2303 	umull	r2, r3, r2, r3
 80011e4:	099b      	lsrs	r3, r3, #6
 80011e6:	3301      	adds	r3, #1
 80011e8:	687a      	ldr	r2, [r7, #4]
 80011ea:	6812      	ldr	r2, [r2, #0]
 80011ec:	430b      	orrs	r3, r1
 80011ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	69db      	ldr	r3, [r3, #28]
 80011f6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80011fa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	495c      	ldr	r1, [pc, #368]	@ (8001374 <HAL_I2C_Init+0x274>)
 8001204:	428b      	cmp	r3, r1
 8001206:	d819      	bhi.n	800123c <HAL_I2C_Init+0x13c>
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	1e59      	subs	r1, r3, #1
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	fbb1 f3f3 	udiv	r3, r1, r3
 8001216:	1c59      	adds	r1, r3, #1
 8001218:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800121c:	400b      	ands	r3, r1
 800121e:	2b00      	cmp	r3, #0
 8001220:	d00a      	beq.n	8001238 <HAL_I2C_Init+0x138>
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	1e59      	subs	r1, r3, #1
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001230:	3301      	adds	r3, #1
 8001232:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001236:	e051      	b.n	80012dc <HAL_I2C_Init+0x1dc>
 8001238:	2304      	movs	r3, #4
 800123a:	e04f      	b.n	80012dc <HAL_I2C_Init+0x1dc>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d111      	bne.n	8001268 <HAL_I2C_Init+0x168>
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	1e58      	subs	r0, r3, #1
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6859      	ldr	r1, [r3, #4]
 800124c:	460b      	mov	r3, r1
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	440b      	add	r3, r1
 8001252:	fbb0 f3f3 	udiv	r3, r0, r3
 8001256:	3301      	adds	r3, #1
 8001258:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800125c:	2b00      	cmp	r3, #0
 800125e:	bf0c      	ite	eq
 8001260:	2301      	moveq	r3, #1
 8001262:	2300      	movne	r3, #0
 8001264:	b2db      	uxtb	r3, r3
 8001266:	e012      	b.n	800128e <HAL_I2C_Init+0x18e>
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	1e58      	subs	r0, r3, #1
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6859      	ldr	r1, [r3, #4]
 8001270:	460b      	mov	r3, r1
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	440b      	add	r3, r1
 8001276:	0099      	lsls	r1, r3, #2
 8001278:	440b      	add	r3, r1
 800127a:	fbb0 f3f3 	udiv	r3, r0, r3
 800127e:	3301      	adds	r3, #1
 8001280:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001284:	2b00      	cmp	r3, #0
 8001286:	bf0c      	ite	eq
 8001288:	2301      	moveq	r3, #1
 800128a:	2300      	movne	r3, #0
 800128c:	b2db      	uxtb	r3, r3
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <HAL_I2C_Init+0x196>
 8001292:	2301      	movs	r3, #1
 8001294:	e022      	b.n	80012dc <HAL_I2C_Init+0x1dc>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d10e      	bne.n	80012bc <HAL_I2C_Init+0x1bc>
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	1e58      	subs	r0, r3, #1
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6859      	ldr	r1, [r3, #4]
 80012a6:	460b      	mov	r3, r1
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	440b      	add	r3, r1
 80012ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80012b0:	3301      	adds	r3, #1
 80012b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80012ba:	e00f      	b.n	80012dc <HAL_I2C_Init+0x1dc>
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	1e58      	subs	r0, r3, #1
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6859      	ldr	r1, [r3, #4]
 80012c4:	460b      	mov	r3, r1
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	440b      	add	r3, r1
 80012ca:	0099      	lsls	r1, r3, #2
 80012cc:	440b      	add	r3, r1
 80012ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80012d2:	3301      	adds	r3, #1
 80012d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012d8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80012dc:	6879      	ldr	r1, [r7, #4]
 80012de:	6809      	ldr	r1, [r1, #0]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	69da      	ldr	r2, [r3, #28]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6a1b      	ldr	r3, [r3, #32]
 80012f6:	431a      	orrs	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	430a      	orrs	r2, r1
 80012fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800130a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	6911      	ldr	r1, [r2, #16]
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	68d2      	ldr	r2, [r2, #12]
 8001316:	4311      	orrs	r1, r2
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	6812      	ldr	r2, [r2, #0]
 800131c:	430b      	orrs	r3, r1
 800131e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	695a      	ldr	r2, [r3, #20]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	431a      	orrs	r2, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	430a      	orrs	r2, r1
 800133a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f042 0201 	orr.w	r2, r2, #1
 800134a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2200      	movs	r2, #0
 8001350:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2220      	movs	r2, #32
 8001356:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2200      	movs	r2, #0
 800135e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2200      	movs	r2, #0
 8001364:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	000186a0 	.word	0x000186a0
 8001378:	001e847f 	.word	0x001e847f
 800137c:	003d08ff 	.word	0x003d08ff
 8001380:	431bde83 	.word	0x431bde83
 8001384:	10624dd3 	.word	0x10624dd3

08001388 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b088      	sub	sp, #32
 800138c:	af02      	add	r7, sp, #8
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	4608      	mov	r0, r1
 8001392:	4611      	mov	r1, r2
 8001394:	461a      	mov	r2, r3
 8001396:	4603      	mov	r3, r0
 8001398:	817b      	strh	r3, [r7, #10]
 800139a:	460b      	mov	r3, r1
 800139c:	813b      	strh	r3, [r7, #8]
 800139e:	4613      	mov	r3, r2
 80013a0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80013a2:	f7ff fb23 	bl	80009ec <HAL_GetTick>
 80013a6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	2b20      	cmp	r3, #32
 80013b2:	f040 80d9 	bne.w	8001568 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	9300      	str	r3, [sp, #0]
 80013ba:	2319      	movs	r3, #25
 80013bc:	2201      	movs	r2, #1
 80013be:	496d      	ldr	r1, [pc, #436]	@ (8001574 <HAL_I2C_Mem_Write+0x1ec>)
 80013c0:	68f8      	ldr	r0, [r7, #12]
 80013c2:	f000 fccd 	bl	8001d60 <I2C_WaitOnFlagUntilTimeout>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80013cc:	2302      	movs	r3, #2
 80013ce:	e0cc      	b.n	800156a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d101      	bne.n	80013de <HAL_I2C_Mem_Write+0x56>
 80013da:	2302      	movs	r3, #2
 80013dc:	e0c5      	b.n	800156a <HAL_I2C_Mem_Write+0x1e2>
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	2201      	movs	r2, #1
 80013e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0301 	and.w	r3, r3, #1
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d007      	beq.n	8001404 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f042 0201 	orr.w	r2, r2, #1
 8001402:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001412:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	2221      	movs	r2, #33	@ 0x21
 8001418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2240      	movs	r2, #64	@ 0x40
 8001420:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	2200      	movs	r2, #0
 8001428:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	6a3a      	ldr	r2, [r7, #32]
 800142e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001434:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800143a:	b29a      	uxth	r2, r3
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	4a4d      	ldr	r2, [pc, #308]	@ (8001578 <HAL_I2C_Mem_Write+0x1f0>)
 8001444:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001446:	88f8      	ldrh	r0, [r7, #6]
 8001448:	893a      	ldrh	r2, [r7, #8]
 800144a:	8979      	ldrh	r1, [r7, #10]
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	9301      	str	r3, [sp, #4]
 8001450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001452:	9300      	str	r3, [sp, #0]
 8001454:	4603      	mov	r3, r0
 8001456:	68f8      	ldr	r0, [r7, #12]
 8001458:	f000 fb04 	bl	8001a64 <I2C_RequestMemoryWrite>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d052      	beq.n	8001508 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e081      	b.n	800156a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001466:	697a      	ldr	r2, [r7, #20]
 8001468:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800146a:	68f8      	ldr	r0, [r7, #12]
 800146c:	f000 fd92 	bl	8001f94 <I2C_WaitOnTXEFlagUntilTimeout>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d00d      	beq.n	8001492 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147a:	2b04      	cmp	r3, #4
 800147c:	d107      	bne.n	800148e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800148c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e06b      	b.n	800156a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001496:	781a      	ldrb	r2, [r3, #0]
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014a2:	1c5a      	adds	r2, r3, #1
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014ac:	3b01      	subs	r3, #1
 80014ae:	b29a      	uxth	r2, r3
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	3b01      	subs	r3, #1
 80014bc:	b29a      	uxth	r2, r3
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	695b      	ldr	r3, [r3, #20]
 80014c8:	f003 0304 	and.w	r3, r3, #4
 80014cc:	2b04      	cmp	r3, #4
 80014ce:	d11b      	bne.n	8001508 <HAL_I2C_Mem_Write+0x180>
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d017      	beq.n	8001508 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014dc:	781a      	ldrb	r2, [r3, #0]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014e8:	1c5a      	adds	r2, r3, #1
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014f2:	3b01      	subs	r3, #1
 80014f4:	b29a      	uxth	r2, r3
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014fe:	b29b      	uxth	r3, r3
 8001500:	3b01      	subs	r3, #1
 8001502:	b29a      	uxth	r2, r3
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800150c:	2b00      	cmp	r3, #0
 800150e:	d1aa      	bne.n	8001466 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001510:	697a      	ldr	r2, [r7, #20]
 8001512:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001514:	68f8      	ldr	r0, [r7, #12]
 8001516:	f000 fd85 	bl	8002024 <I2C_WaitOnBTFFlagUntilTimeout>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d00d      	beq.n	800153c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001524:	2b04      	cmp	r3, #4
 8001526:	d107      	bne.n	8001538 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001536:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e016      	b.n	800156a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800154a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	2220      	movs	r2, #32
 8001550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2200      	movs	r2, #0
 8001558:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	2200      	movs	r2, #0
 8001560:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001564:	2300      	movs	r3, #0
 8001566:	e000      	b.n	800156a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001568:	2302      	movs	r3, #2
  }
}
 800156a:	4618      	mov	r0, r3
 800156c:	3718      	adds	r7, #24
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	00100002 	.word	0x00100002
 8001578:	ffff0000 	.word	0xffff0000

0800157c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b08c      	sub	sp, #48	@ 0x30
 8001580:	af02      	add	r7, sp, #8
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	4608      	mov	r0, r1
 8001586:	4611      	mov	r1, r2
 8001588:	461a      	mov	r2, r3
 800158a:	4603      	mov	r3, r0
 800158c:	817b      	strh	r3, [r7, #10]
 800158e:	460b      	mov	r3, r1
 8001590:	813b      	strh	r3, [r7, #8]
 8001592:	4613      	mov	r3, r2
 8001594:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001596:	2300      	movs	r3, #0
 8001598:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800159a:	f7ff fa27 	bl	80009ec <HAL_GetTick>
 800159e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	2b20      	cmp	r3, #32
 80015aa:	f040 8250 	bne.w	8001a4e <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80015ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b0:	9300      	str	r3, [sp, #0]
 80015b2:	2319      	movs	r3, #25
 80015b4:	2201      	movs	r2, #1
 80015b6:	4982      	ldr	r1, [pc, #520]	@ (80017c0 <HAL_I2C_Mem_Read+0x244>)
 80015b8:	68f8      	ldr	r0, [r7, #12]
 80015ba:	f000 fbd1 	bl	8001d60 <I2C_WaitOnFlagUntilTimeout>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80015c4:	2302      	movs	r3, #2
 80015c6:	e243      	b.n	8001a50 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d101      	bne.n	80015d6 <HAL_I2C_Mem_Read+0x5a>
 80015d2:	2302      	movs	r3, #2
 80015d4:	e23c      	b.n	8001a50 <HAL_I2C_Mem_Read+0x4d4>
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2201      	movs	r2, #1
 80015da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0301 	and.w	r3, r3, #1
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d007      	beq.n	80015fc <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f042 0201 	orr.w	r2, r2, #1
 80015fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800160a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2222      	movs	r2, #34	@ 0x22
 8001610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2240      	movs	r2, #64	@ 0x40
 8001618:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2200      	movs	r2, #0
 8001620:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001626:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800162c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001632:	b29a      	uxth	r2, r3
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	4a62      	ldr	r2, [pc, #392]	@ (80017c4 <HAL_I2C_Mem_Read+0x248>)
 800163c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800163e:	88f8      	ldrh	r0, [r7, #6]
 8001640:	893a      	ldrh	r2, [r7, #8]
 8001642:	8979      	ldrh	r1, [r7, #10]
 8001644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001646:	9301      	str	r3, [sp, #4]
 8001648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800164a:	9300      	str	r3, [sp, #0]
 800164c:	4603      	mov	r3, r0
 800164e:	68f8      	ldr	r0, [r7, #12]
 8001650:	f000 fa9e 	bl	8001b90 <I2C_RequestMemoryRead>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e1f8      	b.n	8001a50 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001662:	2b00      	cmp	r3, #0
 8001664:	d113      	bne.n	800168e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001666:	2300      	movs	r3, #0
 8001668:	61fb      	str	r3, [r7, #28]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	695b      	ldr	r3, [r3, #20]
 8001670:	61fb      	str	r3, [r7, #28]
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	61fb      	str	r3, [r7, #28]
 800167a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	e1cc      	b.n	8001a28 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001692:	2b01      	cmp	r3, #1
 8001694:	d11e      	bne.n	80016d4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80016a4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80016a6:	b672      	cpsid	i
}
 80016a8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016aa:	2300      	movs	r3, #0
 80016ac:	61bb      	str	r3, [r7, #24]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	695b      	ldr	r3, [r3, #20]
 80016b4:	61bb      	str	r3, [r7, #24]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	61bb      	str	r3, [r7, #24]
 80016be:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80016ce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80016d0:	b662      	cpsie	i
}
 80016d2:	e035      	b.n	8001740 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d11e      	bne.n	800171a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80016ea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80016ec:	b672      	cpsid	i
}
 80016ee:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016f0:	2300      	movs	r3, #0
 80016f2:	617b      	str	r3, [r7, #20]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	695b      	ldr	r3, [r3, #20]
 80016fa:	617b      	str	r3, [r7, #20]
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	699b      	ldr	r3, [r3, #24]
 8001702:	617b      	str	r3, [r7, #20]
 8001704:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001714:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001716:	b662      	cpsie	i
}
 8001718:	e012      	b.n	8001740 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001728:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800172a:	2300      	movs	r3, #0
 800172c:	613b      	str	r3, [r7, #16]
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	695b      	ldr	r3, [r3, #20]
 8001734:	613b      	str	r3, [r7, #16]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	613b      	str	r3, [r7, #16]
 800173e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001740:	e172      	b.n	8001a28 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001746:	2b03      	cmp	r3, #3
 8001748:	f200 811f 	bhi.w	800198a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001750:	2b01      	cmp	r3, #1
 8001752:	d123      	bne.n	800179c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001754:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001756:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001758:	68f8      	ldr	r0, [r7, #12]
 800175a:	f000 fcab 	bl	80020b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e173      	b.n	8001a50 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	691a      	ldr	r2, [r3, #16]
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001772:	b2d2      	uxtb	r2, r2
 8001774:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800177a:	1c5a      	adds	r2, r3, #1
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001784:	3b01      	subs	r3, #1
 8001786:	b29a      	uxth	r2, r3
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001790:	b29b      	uxth	r3, r3
 8001792:	3b01      	subs	r3, #1
 8001794:	b29a      	uxth	r2, r3
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800179a:	e145      	b.n	8001a28 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d152      	bne.n	800184a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80017a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a6:	9300      	str	r3, [sp, #0]
 80017a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017aa:	2200      	movs	r2, #0
 80017ac:	4906      	ldr	r1, [pc, #24]	@ (80017c8 <HAL_I2C_Mem_Read+0x24c>)
 80017ae:	68f8      	ldr	r0, [r7, #12]
 80017b0:	f000 fad6 	bl	8001d60 <I2C_WaitOnFlagUntilTimeout>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d008      	beq.n	80017cc <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e148      	b.n	8001a50 <HAL_I2C_Mem_Read+0x4d4>
 80017be:	bf00      	nop
 80017c0:	00100002 	.word	0x00100002
 80017c4:	ffff0000 	.word	0xffff0000
 80017c8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80017cc:	b672      	cpsid	i
}
 80017ce:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80017de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	691a      	ldr	r2, [r3, #16]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ea:	b2d2      	uxtb	r2, r2
 80017ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017f2:	1c5a      	adds	r2, r3, #1
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017fc:	3b01      	subs	r3, #1
 80017fe:	b29a      	uxth	r2, r3
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001808:	b29b      	uxth	r3, r3
 800180a:	3b01      	subs	r3, #1
 800180c:	b29a      	uxth	r2, r3
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001812:	b662      	cpsie	i
}
 8001814:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	691a      	ldr	r2, [r3, #16]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001820:	b2d2      	uxtb	r2, r2
 8001822:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001828:	1c5a      	adds	r2, r3, #1
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001832:	3b01      	subs	r3, #1
 8001834:	b29a      	uxth	r2, r3
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800183e:	b29b      	uxth	r3, r3
 8001840:	3b01      	subs	r3, #1
 8001842:	b29a      	uxth	r2, r3
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001848:	e0ee      	b.n	8001a28 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800184a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800184c:	9300      	str	r3, [sp, #0]
 800184e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001850:	2200      	movs	r2, #0
 8001852:	4981      	ldr	r1, [pc, #516]	@ (8001a58 <HAL_I2C_Mem_Read+0x4dc>)
 8001854:	68f8      	ldr	r0, [r7, #12]
 8001856:	f000 fa83 	bl	8001d60 <I2C_WaitOnFlagUntilTimeout>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e0f5      	b.n	8001a50 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001872:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001874:	b672      	cpsid	i
}
 8001876:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	691a      	ldr	r2, [r3, #16]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001882:	b2d2      	uxtb	r2, r2
 8001884:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800188a:	1c5a      	adds	r2, r3, #1
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001894:	3b01      	subs	r3, #1
 8001896:	b29a      	uxth	r2, r3
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	3b01      	subs	r3, #1
 80018a4:	b29a      	uxth	r2, r3
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80018aa:	4b6c      	ldr	r3, [pc, #432]	@ (8001a5c <HAL_I2C_Mem_Read+0x4e0>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	08db      	lsrs	r3, r3, #3
 80018b0:	4a6b      	ldr	r2, [pc, #428]	@ (8001a60 <HAL_I2C_Mem_Read+0x4e4>)
 80018b2:	fba2 2303 	umull	r2, r3, r2, r3
 80018b6:	0a1a      	lsrs	r2, r3, #8
 80018b8:	4613      	mov	r3, r2
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	4413      	add	r3, r2
 80018be:	00da      	lsls	r2, r3, #3
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80018c4:	6a3b      	ldr	r3, [r7, #32]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80018ca:	6a3b      	ldr	r3, [r7, #32]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d118      	bne.n	8001902 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2200      	movs	r2, #0
 80018d4:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2220      	movs	r2, #32
 80018da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2200      	movs	r2, #0
 80018e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ea:	f043 0220 	orr.w	r2, r3, #32
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80018f2:	b662      	cpsie	i
}
 80018f4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e0a6      	b.n	8001a50 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	695b      	ldr	r3, [r3, #20]
 8001908:	f003 0304 	and.w	r3, r3, #4
 800190c:	2b04      	cmp	r3, #4
 800190e:	d1d9      	bne.n	80018c4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800191e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	691a      	ldr	r2, [r3, #16]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800192a:	b2d2      	uxtb	r2, r2
 800192c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001932:	1c5a      	adds	r2, r3, #1
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800193c:	3b01      	subs	r3, #1
 800193e:	b29a      	uxth	r2, r3
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001948:	b29b      	uxth	r3, r3
 800194a:	3b01      	subs	r3, #1
 800194c:	b29a      	uxth	r2, r3
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001952:	b662      	cpsie	i
}
 8001954:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	691a      	ldr	r2, [r3, #16]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001960:	b2d2      	uxtb	r2, r2
 8001962:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001968:	1c5a      	adds	r2, r3, #1
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001972:	3b01      	subs	r3, #1
 8001974:	b29a      	uxth	r2, r3
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800197e:	b29b      	uxth	r3, r3
 8001980:	3b01      	subs	r3, #1
 8001982:	b29a      	uxth	r2, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001988:	e04e      	b.n	8001a28 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800198a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800198c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800198e:	68f8      	ldr	r0, [r7, #12]
 8001990:	f000 fb90 	bl	80020b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e058      	b.n	8001a50 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	691a      	ldr	r2, [r3, #16]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019a8:	b2d2      	uxtb	r2, r2
 80019aa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b0:	1c5a      	adds	r2, r3, #1
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019ba:	3b01      	subs	r3, #1
 80019bc:	b29a      	uxth	r2, r3
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	3b01      	subs	r3, #1
 80019ca:	b29a      	uxth	r2, r3
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	695b      	ldr	r3, [r3, #20]
 80019d6:	f003 0304 	and.w	r3, r3, #4
 80019da:	2b04      	cmp	r3, #4
 80019dc:	d124      	bne.n	8001a28 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019e2:	2b03      	cmp	r3, #3
 80019e4:	d107      	bne.n	80019f6 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80019f4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	691a      	ldr	r2, [r3, #16]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a00:	b2d2      	uxtb	r2, r2
 8001a02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a08:	1c5a      	adds	r2, r3, #1
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a12:	3b01      	subs	r3, #1
 8001a14:	b29a      	uxth	r2, r3
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	3b01      	subs	r3, #1
 8001a22:	b29a      	uxth	r2, r3
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	f47f ae88 	bne.w	8001742 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2220      	movs	r2, #32
 8001a36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2200      	movs	r2, #0
 8001a46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	e000      	b.n	8001a50 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8001a4e:	2302      	movs	r3, #2
  }
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3728      	adds	r7, #40	@ 0x28
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	00010004 	.word	0x00010004
 8001a5c:	20000000 	.word	0x20000000
 8001a60:	14f8b589 	.word	0x14f8b589

08001a64 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b088      	sub	sp, #32
 8001a68:	af02      	add	r7, sp, #8
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	4608      	mov	r0, r1
 8001a6e:	4611      	mov	r1, r2
 8001a70:	461a      	mov	r2, r3
 8001a72:	4603      	mov	r3, r0
 8001a74:	817b      	strh	r3, [r7, #10]
 8001a76:	460b      	mov	r3, r1
 8001a78:	813b      	strh	r3, [r7, #8]
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001a8c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a90:	9300      	str	r3, [sp, #0]
 8001a92:	6a3b      	ldr	r3, [r7, #32]
 8001a94:	2200      	movs	r2, #0
 8001a96:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001a9a:	68f8      	ldr	r0, [r7, #12]
 8001a9c:	f000 f960 	bl	8001d60 <I2C_WaitOnFlagUntilTimeout>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d00d      	beq.n	8001ac2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ab0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ab4:	d103      	bne.n	8001abe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001abc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e05f      	b.n	8001b82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001ac2:	897b      	ldrh	r3, [r7, #10]
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001ad0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad4:	6a3a      	ldr	r2, [r7, #32]
 8001ad6:	492d      	ldr	r1, [pc, #180]	@ (8001b8c <I2C_RequestMemoryWrite+0x128>)
 8001ad8:	68f8      	ldr	r0, [r7, #12]
 8001ada:	f000 f9bb 	bl	8001e54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e04c      	b.n	8001b82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	695b      	ldr	r3, [r3, #20]
 8001af2:	617b      	str	r3, [r7, #20]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	617b      	str	r3, [r7, #20]
 8001afc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001afe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b00:	6a39      	ldr	r1, [r7, #32]
 8001b02:	68f8      	ldr	r0, [r7, #12]
 8001b04:	f000 fa46 	bl	8001f94 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d00d      	beq.n	8001b2a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	d107      	bne.n	8001b26 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b24:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e02b      	b.n	8001b82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001b2a:	88fb      	ldrh	r3, [r7, #6]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d105      	bne.n	8001b3c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001b30:	893b      	ldrh	r3, [r7, #8]
 8001b32:	b2da      	uxtb	r2, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	611a      	str	r2, [r3, #16]
 8001b3a:	e021      	b.n	8001b80 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001b3c:	893b      	ldrh	r3, [r7, #8]
 8001b3e:	0a1b      	lsrs	r3, r3, #8
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	b2da      	uxtb	r2, r3
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b4c:	6a39      	ldr	r1, [r7, #32]
 8001b4e:	68f8      	ldr	r0, [r7, #12]
 8001b50:	f000 fa20 	bl	8001f94 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d00d      	beq.n	8001b76 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5e:	2b04      	cmp	r3, #4
 8001b60:	d107      	bne.n	8001b72 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b70:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e005      	b.n	8001b82 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001b76:	893b      	ldrh	r3, [r7, #8]
 8001b78:	b2da      	uxtb	r2, r3
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3718      	adds	r7, #24
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	00010002 	.word	0x00010002

08001b90 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b088      	sub	sp, #32
 8001b94:	af02      	add	r7, sp, #8
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	4608      	mov	r0, r1
 8001b9a:	4611      	mov	r1, r2
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	817b      	strh	r3, [r7, #10]
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	813b      	strh	r3, [r7, #8]
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001bb8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001bc8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bcc:	9300      	str	r3, [sp, #0]
 8001bce:	6a3b      	ldr	r3, [r7, #32]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001bd6:	68f8      	ldr	r0, [r7, #12]
 8001bd8:	f000 f8c2 	bl	8001d60 <I2C_WaitOnFlagUntilTimeout>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d00d      	beq.n	8001bfe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001bf0:	d103      	bne.n	8001bfa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bf8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e0aa      	b.n	8001d54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001bfe:	897b      	ldrh	r3, [r7, #10]
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	461a      	mov	r2, r3
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001c0c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c10:	6a3a      	ldr	r2, [r7, #32]
 8001c12:	4952      	ldr	r1, [pc, #328]	@ (8001d5c <I2C_RequestMemoryRead+0x1cc>)
 8001c14:	68f8      	ldr	r0, [r7, #12]
 8001c16:	f000 f91d 	bl	8001e54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e097      	b.n	8001d54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c24:	2300      	movs	r3, #0
 8001c26:	617b      	str	r3, [r7, #20]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	695b      	ldr	r3, [r3, #20]
 8001c2e:	617b      	str	r3, [r7, #20]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	699b      	ldr	r3, [r3, #24]
 8001c36:	617b      	str	r3, [r7, #20]
 8001c38:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c3c:	6a39      	ldr	r1, [r7, #32]
 8001c3e:	68f8      	ldr	r0, [r7, #12]
 8001c40:	f000 f9a8 	bl	8001f94 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d00d      	beq.n	8001c66 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4e:	2b04      	cmp	r3, #4
 8001c50:	d107      	bne.n	8001c62 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c60:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e076      	b.n	8001d54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001c66:	88fb      	ldrh	r3, [r7, #6]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d105      	bne.n	8001c78 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001c6c:	893b      	ldrh	r3, [r7, #8]
 8001c6e:	b2da      	uxtb	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	611a      	str	r2, [r3, #16]
 8001c76:	e021      	b.n	8001cbc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001c78:	893b      	ldrh	r3, [r7, #8]
 8001c7a:	0a1b      	lsrs	r3, r3, #8
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	b2da      	uxtb	r2, r3
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c88:	6a39      	ldr	r1, [r7, #32]
 8001c8a:	68f8      	ldr	r0, [r7, #12]
 8001c8c:	f000 f982 	bl	8001f94 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d00d      	beq.n	8001cb2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9a:	2b04      	cmp	r3, #4
 8001c9c:	d107      	bne.n	8001cae <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e050      	b.n	8001d54 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001cb2:	893b      	ldrh	r3, [r7, #8]
 8001cb4:	b2da      	uxtb	r2, r3
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cbe:	6a39      	ldr	r1, [r7, #32]
 8001cc0:	68f8      	ldr	r0, [r7, #12]
 8001cc2:	f000 f967 	bl	8001f94 <I2C_WaitOnTXEFlagUntilTimeout>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d00d      	beq.n	8001ce8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd0:	2b04      	cmp	r3, #4
 8001cd2:	d107      	bne.n	8001ce4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ce2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e035      	b.n	8001d54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001cf6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cfa:	9300      	str	r3, [sp, #0]
 8001cfc:	6a3b      	ldr	r3, [r7, #32]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001d04:	68f8      	ldr	r0, [r7, #12]
 8001d06:	f000 f82b 	bl	8001d60 <I2C_WaitOnFlagUntilTimeout>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d00d      	beq.n	8001d2c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d1e:	d103      	bne.n	8001d28 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d26:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e013      	b.n	8001d54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001d2c:	897b      	ldrh	r3, [r7, #10]
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	f043 0301 	orr.w	r3, r3, #1
 8001d34:	b2da      	uxtb	r2, r3
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d3e:	6a3a      	ldr	r2, [r7, #32]
 8001d40:	4906      	ldr	r1, [pc, #24]	@ (8001d5c <I2C_RequestMemoryRead+0x1cc>)
 8001d42:	68f8      	ldr	r0, [r7, #12]
 8001d44:	f000 f886 	bl	8001e54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e000      	b.n	8001d54 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001d52:	2300      	movs	r3, #0
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3718      	adds	r7, #24
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	00010002 	.word	0x00010002

08001d60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	603b      	str	r3, [r7, #0]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d70:	e048      	b.n	8001e04 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d78:	d044      	beq.n	8001e04 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d7a:	f7fe fe37 	bl	80009ec <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	683a      	ldr	r2, [r7, #0]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d302      	bcc.n	8001d90 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d139      	bne.n	8001e04 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	0c1b      	lsrs	r3, r3, #16
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d10d      	bne.n	8001db6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	695b      	ldr	r3, [r3, #20]
 8001da0:	43da      	mvns	r2, r3
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	4013      	ands	r3, r2
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	bf0c      	ite	eq
 8001dac:	2301      	moveq	r3, #1
 8001dae:	2300      	movne	r3, #0
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	461a      	mov	r2, r3
 8001db4:	e00c      	b.n	8001dd0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	43da      	mvns	r2, r3
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	bf0c      	ite	eq
 8001dc8:	2301      	moveq	r3, #1
 8001dca:	2300      	movne	r3, #0
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	461a      	mov	r2, r3
 8001dd0:	79fb      	ldrb	r3, [r7, #7]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d116      	bne.n	8001e04 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2220      	movs	r2, #32
 8001de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df0:	f043 0220 	orr.w	r2, r3, #32
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e023      	b.n	8001e4c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	0c1b      	lsrs	r3, r3, #16
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d10d      	bne.n	8001e2a <I2C_WaitOnFlagUntilTimeout+0xca>
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	695b      	ldr	r3, [r3, #20]
 8001e14:	43da      	mvns	r2, r3
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	bf0c      	ite	eq
 8001e20:	2301      	moveq	r3, #1
 8001e22:	2300      	movne	r3, #0
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	461a      	mov	r2, r3
 8001e28:	e00c      	b.n	8001e44 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	43da      	mvns	r2, r3
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	4013      	ands	r3, r2
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	bf0c      	ite	eq
 8001e3c:	2301      	moveq	r3, #1
 8001e3e:	2300      	movne	r3, #0
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	461a      	mov	r2, r3
 8001e44:	79fb      	ldrb	r3, [r7, #7]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d093      	beq.n	8001d72 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3710      	adds	r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
 8001e60:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e62:	e071      	b.n	8001f48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	695b      	ldr	r3, [r3, #20]
 8001e6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e72:	d123      	bne.n	8001ebc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e82:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001e8c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2200      	movs	r2, #0
 8001e92:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2220      	movs	r2, #32
 8001e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea8:	f043 0204 	orr.w	r2, r3, #4
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e067      	b.n	8001f8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ec2:	d041      	beq.n	8001f48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ec4:	f7fe fd92 	bl	80009ec <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d302      	bcc.n	8001eda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d136      	bne.n	8001f48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	0c1b      	lsrs	r3, r3, #16
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d10c      	bne.n	8001efe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	43da      	mvns	r2, r3
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	bf14      	ite	ne
 8001ef6:	2301      	movne	r3, #1
 8001ef8:	2300      	moveq	r3, #0
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	e00b      	b.n	8001f16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	43da      	mvns	r2, r3
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	bf14      	ite	ne
 8001f10:	2301      	movne	r3, #1
 8001f12:	2300      	moveq	r3, #0
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d016      	beq.n	8001f48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2220      	movs	r2, #32
 8001f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f34:	f043 0220 	orr.w	r2, r3, #32
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e021      	b.n	8001f8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	0c1b      	lsrs	r3, r3, #16
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d10c      	bne.n	8001f6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	695b      	ldr	r3, [r3, #20]
 8001f58:	43da      	mvns	r2, r3
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	bf14      	ite	ne
 8001f64:	2301      	movne	r3, #1
 8001f66:	2300      	moveq	r3, #0
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	e00b      	b.n	8001f84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	43da      	mvns	r2, r3
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	4013      	ands	r3, r2
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	bf14      	ite	ne
 8001f7e:	2301      	movne	r3, #1
 8001f80:	2300      	moveq	r3, #0
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	f47f af6d 	bne.w	8001e64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3710      	adds	r7, #16
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001fa0:	e034      	b.n	800200c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001fa2:	68f8      	ldr	r0, [r7, #12]
 8001fa4:	f000 f8e3 	bl	800216e <I2C_IsAcknowledgeFailed>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e034      	b.n	800201c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fb8:	d028      	beq.n	800200c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fba:	f7fe fd17 	bl	80009ec <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	68ba      	ldr	r2, [r7, #8]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d302      	bcc.n	8001fd0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d11d      	bne.n	800200c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	695b      	ldr	r3, [r3, #20]
 8001fd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fda:	2b80      	cmp	r3, #128	@ 0x80
 8001fdc:	d016      	beq.n	800200c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2220      	movs	r2, #32
 8001fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff8:	f043 0220 	orr.w	r2, r3, #32
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2200      	movs	r2, #0
 8002004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e007      	b.n	800201c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002016:	2b80      	cmp	r3, #128	@ 0x80
 8002018:	d1c3      	bne.n	8001fa2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	3710      	adds	r7, #16
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002030:	e034      	b.n	800209c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002032:	68f8      	ldr	r0, [r7, #12]
 8002034:	f000 f89b 	bl	800216e <I2C_IsAcknowledgeFailed>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e034      	b.n	80020ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002048:	d028      	beq.n	800209c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800204a:	f7fe fccf 	bl	80009ec <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	68ba      	ldr	r2, [r7, #8]
 8002056:	429a      	cmp	r2, r3
 8002058:	d302      	bcc.n	8002060 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d11d      	bne.n	800209c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	f003 0304 	and.w	r3, r3, #4
 800206a:	2b04      	cmp	r3, #4
 800206c:	d016      	beq.n	800209c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2200      	movs	r2, #0
 8002072:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2220      	movs	r2, #32
 8002078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002088:	f043 0220 	orr.w	r2, r3, #32
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e007      	b.n	80020ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	f003 0304 	and.w	r3, r3, #4
 80020a6:	2b04      	cmp	r3, #4
 80020a8:	d1c3      	bne.n	8002032 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3710      	adds	r7, #16
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80020c0:	e049      	b.n	8002156 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	695b      	ldr	r3, [r3, #20]
 80020c8:	f003 0310 	and.w	r3, r3, #16
 80020cc:	2b10      	cmp	r3, #16
 80020ce:	d119      	bne.n	8002104 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f06f 0210 	mvn.w	r2, #16
 80020d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2200      	movs	r2, #0
 80020de:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2220      	movs	r2, #32
 80020e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e030      	b.n	8002166 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002104:	f7fe fc72 	bl	80009ec <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	68ba      	ldr	r2, [r7, #8]
 8002110:	429a      	cmp	r2, r3
 8002112:	d302      	bcc.n	800211a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d11d      	bne.n	8002156 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	695b      	ldr	r3, [r3, #20]
 8002120:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002124:	2b40      	cmp	r3, #64	@ 0x40
 8002126:	d016      	beq.n	8002156 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2200      	movs	r2, #0
 800212c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2220      	movs	r2, #32
 8002132:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002142:	f043 0220 	orr.w	r2, r3, #32
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e007      	b.n	8002166 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	695b      	ldr	r3, [r3, #20]
 800215c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002160:	2b40      	cmp	r3, #64	@ 0x40
 8002162:	d1ae      	bne.n	80020c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800216e:	b480      	push	{r7}
 8002170:	b083      	sub	sp, #12
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	695b      	ldr	r3, [r3, #20]
 800217c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002180:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002184:	d11b      	bne.n	80021be <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800218e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2220      	movs	r2, #32
 800219a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021aa:	f043 0204 	orr.w	r2, r3, #4
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e000      	b.n	80021c0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bc80      	pop	{r7}
 80021c8:	4770      	bx	lr
	...

080021cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e272      	b.n	80026c4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f000 8087 	beq.w	80022fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021ec:	4b92      	ldr	r3, [pc, #584]	@ (8002438 <HAL_RCC_OscConfig+0x26c>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f003 030c 	and.w	r3, r3, #12
 80021f4:	2b04      	cmp	r3, #4
 80021f6:	d00c      	beq.n	8002212 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021f8:	4b8f      	ldr	r3, [pc, #572]	@ (8002438 <HAL_RCC_OscConfig+0x26c>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f003 030c 	and.w	r3, r3, #12
 8002200:	2b08      	cmp	r3, #8
 8002202:	d112      	bne.n	800222a <HAL_RCC_OscConfig+0x5e>
 8002204:	4b8c      	ldr	r3, [pc, #560]	@ (8002438 <HAL_RCC_OscConfig+0x26c>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800220c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002210:	d10b      	bne.n	800222a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002212:	4b89      	ldr	r3, [pc, #548]	@ (8002438 <HAL_RCC_OscConfig+0x26c>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d06c      	beq.n	80022f8 <HAL_RCC_OscConfig+0x12c>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d168      	bne.n	80022f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e24c      	b.n	80026c4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002232:	d106      	bne.n	8002242 <HAL_RCC_OscConfig+0x76>
 8002234:	4b80      	ldr	r3, [pc, #512]	@ (8002438 <HAL_RCC_OscConfig+0x26c>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a7f      	ldr	r2, [pc, #508]	@ (8002438 <HAL_RCC_OscConfig+0x26c>)
 800223a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800223e:	6013      	str	r3, [r2, #0]
 8002240:	e02e      	b.n	80022a0 <HAL_RCC_OscConfig+0xd4>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d10c      	bne.n	8002264 <HAL_RCC_OscConfig+0x98>
 800224a:	4b7b      	ldr	r3, [pc, #492]	@ (8002438 <HAL_RCC_OscConfig+0x26c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a7a      	ldr	r2, [pc, #488]	@ (8002438 <HAL_RCC_OscConfig+0x26c>)
 8002250:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002254:	6013      	str	r3, [r2, #0]
 8002256:	4b78      	ldr	r3, [pc, #480]	@ (8002438 <HAL_RCC_OscConfig+0x26c>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a77      	ldr	r2, [pc, #476]	@ (8002438 <HAL_RCC_OscConfig+0x26c>)
 800225c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002260:	6013      	str	r3, [r2, #0]
 8002262:	e01d      	b.n	80022a0 <HAL_RCC_OscConfig+0xd4>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800226c:	d10c      	bne.n	8002288 <HAL_RCC_OscConfig+0xbc>
 800226e:	4b72      	ldr	r3, [pc, #456]	@ (8002438 <HAL_RCC_OscConfig+0x26c>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a71      	ldr	r2, [pc, #452]	@ (8002438 <HAL_RCC_OscConfig+0x26c>)
 8002274:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002278:	6013      	str	r3, [r2, #0]
 800227a:	4b6f      	ldr	r3, [pc, #444]	@ (8002438 <HAL_RCC_OscConfig+0x26c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a6e      	ldr	r2, [pc, #440]	@ (8002438 <HAL_RCC_OscConfig+0x26c>)
 8002280:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002284:	6013      	str	r3, [r2, #0]
 8002286:	e00b      	b.n	80022a0 <HAL_RCC_OscConfig+0xd4>
 8002288:	4b6b      	ldr	r3, [pc, #428]	@ (8002438 <HAL_RCC_OscConfig+0x26c>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a6a      	ldr	r2, [pc, #424]	@ (8002438 <HAL_RCC_OscConfig+0x26c>)
 800228e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002292:	6013      	str	r3, [r2, #0]
 8002294:	4b68      	ldr	r3, [pc, #416]	@ (8002438 <HAL_RCC_OscConfig+0x26c>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a67      	ldr	r2, [pc, #412]	@ (8002438 <HAL_RCC_OscConfig+0x26c>)
 800229a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800229e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d013      	beq.n	80022d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a8:	f7fe fba0 	bl	80009ec <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022b0:	f7fe fb9c 	bl	80009ec <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b64      	cmp	r3, #100	@ 0x64
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e200      	b.n	80026c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022c2:	4b5d      	ldr	r3, [pc, #372]	@ (8002438 <HAL_RCC_OscConfig+0x26c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d0f0      	beq.n	80022b0 <HAL_RCC_OscConfig+0xe4>
 80022ce:	e014      	b.n	80022fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d0:	f7fe fb8c 	bl	80009ec <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022d8:	f7fe fb88 	bl	80009ec <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b64      	cmp	r3, #100	@ 0x64
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e1ec      	b.n	80026c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ea:	4b53      	ldr	r3, [pc, #332]	@ (8002438 <HAL_RCC_OscConfig+0x26c>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1f0      	bne.n	80022d8 <HAL_RCC_OscConfig+0x10c>
 80022f6:	e000      	b.n	80022fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d063      	beq.n	80023ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002306:	4b4c      	ldr	r3, [pc, #304]	@ (8002438 <HAL_RCC_OscConfig+0x26c>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f003 030c 	and.w	r3, r3, #12
 800230e:	2b00      	cmp	r3, #0
 8002310:	d00b      	beq.n	800232a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002312:	4b49      	ldr	r3, [pc, #292]	@ (8002438 <HAL_RCC_OscConfig+0x26c>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f003 030c 	and.w	r3, r3, #12
 800231a:	2b08      	cmp	r3, #8
 800231c:	d11c      	bne.n	8002358 <HAL_RCC_OscConfig+0x18c>
 800231e:	4b46      	ldr	r3, [pc, #280]	@ (8002438 <HAL_RCC_OscConfig+0x26c>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d116      	bne.n	8002358 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800232a:	4b43      	ldr	r3, [pc, #268]	@ (8002438 <HAL_RCC_OscConfig+0x26c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d005      	beq.n	8002342 <HAL_RCC_OscConfig+0x176>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d001      	beq.n	8002342 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e1c0      	b.n	80026c4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002342:	4b3d      	ldr	r3, [pc, #244]	@ (8002438 <HAL_RCC_OscConfig+0x26c>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	4939      	ldr	r1, [pc, #228]	@ (8002438 <HAL_RCC_OscConfig+0x26c>)
 8002352:	4313      	orrs	r3, r2
 8002354:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002356:	e03a      	b.n	80023ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d020      	beq.n	80023a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002360:	4b36      	ldr	r3, [pc, #216]	@ (800243c <HAL_RCC_OscConfig+0x270>)
 8002362:	2201      	movs	r2, #1
 8002364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002366:	f7fe fb41 	bl	80009ec <HAL_GetTick>
 800236a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800236c:	e008      	b.n	8002380 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800236e:	f7fe fb3d 	bl	80009ec <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d901      	bls.n	8002380 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e1a1      	b.n	80026c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002380:	4b2d      	ldr	r3, [pc, #180]	@ (8002438 <HAL_RCC_OscConfig+0x26c>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0302 	and.w	r3, r3, #2
 8002388:	2b00      	cmp	r3, #0
 800238a:	d0f0      	beq.n	800236e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800238c:	4b2a      	ldr	r3, [pc, #168]	@ (8002438 <HAL_RCC_OscConfig+0x26c>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	695b      	ldr	r3, [r3, #20]
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	4927      	ldr	r1, [pc, #156]	@ (8002438 <HAL_RCC_OscConfig+0x26c>)
 800239c:	4313      	orrs	r3, r2
 800239e:	600b      	str	r3, [r1, #0]
 80023a0:	e015      	b.n	80023ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023a2:	4b26      	ldr	r3, [pc, #152]	@ (800243c <HAL_RCC_OscConfig+0x270>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a8:	f7fe fb20 	bl	80009ec <HAL_GetTick>
 80023ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ae:	e008      	b.n	80023c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023b0:	f7fe fb1c 	bl	80009ec <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e180      	b.n	80026c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023c2:	4b1d      	ldr	r3, [pc, #116]	@ (8002438 <HAL_RCC_OscConfig+0x26c>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1f0      	bne.n	80023b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0308 	and.w	r3, r3, #8
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d03a      	beq.n	8002450 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d019      	beq.n	8002416 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023e2:	4b17      	ldr	r3, [pc, #92]	@ (8002440 <HAL_RCC_OscConfig+0x274>)
 80023e4:	2201      	movs	r2, #1
 80023e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023e8:	f7fe fb00 	bl	80009ec <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ee:	e008      	b.n	8002402 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023f0:	f7fe fafc 	bl	80009ec <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e160      	b.n	80026c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002402:	4b0d      	ldr	r3, [pc, #52]	@ (8002438 <HAL_RCC_OscConfig+0x26c>)
 8002404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d0f0      	beq.n	80023f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800240e:	2001      	movs	r0, #1
 8002410:	f000 face 	bl	80029b0 <RCC_Delay>
 8002414:	e01c      	b.n	8002450 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002416:	4b0a      	ldr	r3, [pc, #40]	@ (8002440 <HAL_RCC_OscConfig+0x274>)
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800241c:	f7fe fae6 	bl	80009ec <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002422:	e00f      	b.n	8002444 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002424:	f7fe fae2 	bl	80009ec <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b02      	cmp	r3, #2
 8002430:	d908      	bls.n	8002444 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e146      	b.n	80026c4 <HAL_RCC_OscConfig+0x4f8>
 8002436:	bf00      	nop
 8002438:	40021000 	.word	0x40021000
 800243c:	42420000 	.word	0x42420000
 8002440:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002444:	4b92      	ldr	r3, [pc, #584]	@ (8002690 <HAL_RCC_OscConfig+0x4c4>)
 8002446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d1e9      	bne.n	8002424 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0304 	and.w	r3, r3, #4
 8002458:	2b00      	cmp	r3, #0
 800245a:	f000 80a6 	beq.w	80025aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800245e:	2300      	movs	r3, #0
 8002460:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002462:	4b8b      	ldr	r3, [pc, #556]	@ (8002690 <HAL_RCC_OscConfig+0x4c4>)
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d10d      	bne.n	800248a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800246e:	4b88      	ldr	r3, [pc, #544]	@ (8002690 <HAL_RCC_OscConfig+0x4c4>)
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	4a87      	ldr	r2, [pc, #540]	@ (8002690 <HAL_RCC_OscConfig+0x4c4>)
 8002474:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002478:	61d3      	str	r3, [r2, #28]
 800247a:	4b85      	ldr	r3, [pc, #532]	@ (8002690 <HAL_RCC_OscConfig+0x4c4>)
 800247c:	69db      	ldr	r3, [r3, #28]
 800247e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002482:	60bb      	str	r3, [r7, #8]
 8002484:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002486:	2301      	movs	r3, #1
 8002488:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800248a:	4b82      	ldr	r3, [pc, #520]	@ (8002694 <HAL_RCC_OscConfig+0x4c8>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002492:	2b00      	cmp	r3, #0
 8002494:	d118      	bne.n	80024c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002496:	4b7f      	ldr	r3, [pc, #508]	@ (8002694 <HAL_RCC_OscConfig+0x4c8>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a7e      	ldr	r2, [pc, #504]	@ (8002694 <HAL_RCC_OscConfig+0x4c8>)
 800249c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024a2:	f7fe faa3 	bl	80009ec <HAL_GetTick>
 80024a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a8:	e008      	b.n	80024bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024aa:	f7fe fa9f 	bl	80009ec <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b64      	cmp	r3, #100	@ 0x64
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e103      	b.n	80026c4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024bc:	4b75      	ldr	r3, [pc, #468]	@ (8002694 <HAL_RCC_OscConfig+0x4c8>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d0f0      	beq.n	80024aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d106      	bne.n	80024de <HAL_RCC_OscConfig+0x312>
 80024d0:	4b6f      	ldr	r3, [pc, #444]	@ (8002690 <HAL_RCC_OscConfig+0x4c4>)
 80024d2:	6a1b      	ldr	r3, [r3, #32]
 80024d4:	4a6e      	ldr	r2, [pc, #440]	@ (8002690 <HAL_RCC_OscConfig+0x4c4>)
 80024d6:	f043 0301 	orr.w	r3, r3, #1
 80024da:	6213      	str	r3, [r2, #32]
 80024dc:	e02d      	b.n	800253a <HAL_RCC_OscConfig+0x36e>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d10c      	bne.n	8002500 <HAL_RCC_OscConfig+0x334>
 80024e6:	4b6a      	ldr	r3, [pc, #424]	@ (8002690 <HAL_RCC_OscConfig+0x4c4>)
 80024e8:	6a1b      	ldr	r3, [r3, #32]
 80024ea:	4a69      	ldr	r2, [pc, #420]	@ (8002690 <HAL_RCC_OscConfig+0x4c4>)
 80024ec:	f023 0301 	bic.w	r3, r3, #1
 80024f0:	6213      	str	r3, [r2, #32]
 80024f2:	4b67      	ldr	r3, [pc, #412]	@ (8002690 <HAL_RCC_OscConfig+0x4c4>)
 80024f4:	6a1b      	ldr	r3, [r3, #32]
 80024f6:	4a66      	ldr	r2, [pc, #408]	@ (8002690 <HAL_RCC_OscConfig+0x4c4>)
 80024f8:	f023 0304 	bic.w	r3, r3, #4
 80024fc:	6213      	str	r3, [r2, #32]
 80024fe:	e01c      	b.n	800253a <HAL_RCC_OscConfig+0x36e>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	2b05      	cmp	r3, #5
 8002506:	d10c      	bne.n	8002522 <HAL_RCC_OscConfig+0x356>
 8002508:	4b61      	ldr	r3, [pc, #388]	@ (8002690 <HAL_RCC_OscConfig+0x4c4>)
 800250a:	6a1b      	ldr	r3, [r3, #32]
 800250c:	4a60      	ldr	r2, [pc, #384]	@ (8002690 <HAL_RCC_OscConfig+0x4c4>)
 800250e:	f043 0304 	orr.w	r3, r3, #4
 8002512:	6213      	str	r3, [r2, #32]
 8002514:	4b5e      	ldr	r3, [pc, #376]	@ (8002690 <HAL_RCC_OscConfig+0x4c4>)
 8002516:	6a1b      	ldr	r3, [r3, #32]
 8002518:	4a5d      	ldr	r2, [pc, #372]	@ (8002690 <HAL_RCC_OscConfig+0x4c4>)
 800251a:	f043 0301 	orr.w	r3, r3, #1
 800251e:	6213      	str	r3, [r2, #32]
 8002520:	e00b      	b.n	800253a <HAL_RCC_OscConfig+0x36e>
 8002522:	4b5b      	ldr	r3, [pc, #364]	@ (8002690 <HAL_RCC_OscConfig+0x4c4>)
 8002524:	6a1b      	ldr	r3, [r3, #32]
 8002526:	4a5a      	ldr	r2, [pc, #360]	@ (8002690 <HAL_RCC_OscConfig+0x4c4>)
 8002528:	f023 0301 	bic.w	r3, r3, #1
 800252c:	6213      	str	r3, [r2, #32]
 800252e:	4b58      	ldr	r3, [pc, #352]	@ (8002690 <HAL_RCC_OscConfig+0x4c4>)
 8002530:	6a1b      	ldr	r3, [r3, #32]
 8002532:	4a57      	ldr	r2, [pc, #348]	@ (8002690 <HAL_RCC_OscConfig+0x4c4>)
 8002534:	f023 0304 	bic.w	r3, r3, #4
 8002538:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d015      	beq.n	800256e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002542:	f7fe fa53 	bl	80009ec <HAL_GetTick>
 8002546:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002548:	e00a      	b.n	8002560 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800254a:	f7fe fa4f 	bl	80009ec <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002558:	4293      	cmp	r3, r2
 800255a:	d901      	bls.n	8002560 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e0b1      	b.n	80026c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002560:	4b4b      	ldr	r3, [pc, #300]	@ (8002690 <HAL_RCC_OscConfig+0x4c4>)
 8002562:	6a1b      	ldr	r3, [r3, #32]
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d0ee      	beq.n	800254a <HAL_RCC_OscConfig+0x37e>
 800256c:	e014      	b.n	8002598 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800256e:	f7fe fa3d 	bl	80009ec <HAL_GetTick>
 8002572:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002574:	e00a      	b.n	800258c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002576:	f7fe fa39 	bl	80009ec <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002584:	4293      	cmp	r3, r2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e09b      	b.n	80026c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800258c:	4b40      	ldr	r3, [pc, #256]	@ (8002690 <HAL_RCC_OscConfig+0x4c4>)
 800258e:	6a1b      	ldr	r3, [r3, #32]
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1ee      	bne.n	8002576 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002598:	7dfb      	ldrb	r3, [r7, #23]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d105      	bne.n	80025aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800259e:	4b3c      	ldr	r3, [pc, #240]	@ (8002690 <HAL_RCC_OscConfig+0x4c4>)
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	4a3b      	ldr	r2, [pc, #236]	@ (8002690 <HAL_RCC_OscConfig+0x4c4>)
 80025a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	69db      	ldr	r3, [r3, #28]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f000 8087 	beq.w	80026c2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025b4:	4b36      	ldr	r3, [pc, #216]	@ (8002690 <HAL_RCC_OscConfig+0x4c4>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f003 030c 	and.w	r3, r3, #12
 80025bc:	2b08      	cmp	r3, #8
 80025be:	d061      	beq.n	8002684 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	69db      	ldr	r3, [r3, #28]
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d146      	bne.n	8002656 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025c8:	4b33      	ldr	r3, [pc, #204]	@ (8002698 <HAL_RCC_OscConfig+0x4cc>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ce:	f7fe fa0d 	bl	80009ec <HAL_GetTick>
 80025d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025d4:	e008      	b.n	80025e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025d6:	f7fe fa09 	bl	80009ec <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d901      	bls.n	80025e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e06d      	b.n	80026c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025e8:	4b29      	ldr	r3, [pc, #164]	@ (8002690 <HAL_RCC_OscConfig+0x4c4>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d1f0      	bne.n	80025d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a1b      	ldr	r3, [r3, #32]
 80025f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025fc:	d108      	bne.n	8002610 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025fe:	4b24      	ldr	r3, [pc, #144]	@ (8002690 <HAL_RCC_OscConfig+0x4c4>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	4921      	ldr	r1, [pc, #132]	@ (8002690 <HAL_RCC_OscConfig+0x4c4>)
 800260c:	4313      	orrs	r3, r2
 800260e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002610:	4b1f      	ldr	r3, [pc, #124]	@ (8002690 <HAL_RCC_OscConfig+0x4c4>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a19      	ldr	r1, [r3, #32]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002620:	430b      	orrs	r3, r1
 8002622:	491b      	ldr	r1, [pc, #108]	@ (8002690 <HAL_RCC_OscConfig+0x4c4>)
 8002624:	4313      	orrs	r3, r2
 8002626:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002628:	4b1b      	ldr	r3, [pc, #108]	@ (8002698 <HAL_RCC_OscConfig+0x4cc>)
 800262a:	2201      	movs	r2, #1
 800262c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800262e:	f7fe f9dd 	bl	80009ec <HAL_GetTick>
 8002632:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002634:	e008      	b.n	8002648 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002636:	f7fe f9d9 	bl	80009ec <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b02      	cmp	r3, #2
 8002642:	d901      	bls.n	8002648 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e03d      	b.n	80026c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002648:	4b11      	ldr	r3, [pc, #68]	@ (8002690 <HAL_RCC_OscConfig+0x4c4>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d0f0      	beq.n	8002636 <HAL_RCC_OscConfig+0x46a>
 8002654:	e035      	b.n	80026c2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002656:	4b10      	ldr	r3, [pc, #64]	@ (8002698 <HAL_RCC_OscConfig+0x4cc>)
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265c:	f7fe f9c6 	bl	80009ec <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002664:	f7fe f9c2 	bl	80009ec <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e026      	b.n	80026c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002676:	4b06      	ldr	r3, [pc, #24]	@ (8002690 <HAL_RCC_OscConfig+0x4c4>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1f0      	bne.n	8002664 <HAL_RCC_OscConfig+0x498>
 8002682:	e01e      	b.n	80026c2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	69db      	ldr	r3, [r3, #28]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d107      	bne.n	800269c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e019      	b.n	80026c4 <HAL_RCC_OscConfig+0x4f8>
 8002690:	40021000 	.word	0x40021000
 8002694:	40007000 	.word	0x40007000
 8002698:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800269c:	4b0b      	ldr	r3, [pc, #44]	@ (80026cc <HAL_RCC_OscConfig+0x500>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a1b      	ldr	r3, [r3, #32]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d106      	bne.n	80026be <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d001      	beq.n	80026c2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e000      	b.n	80026c4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80026c2:	2300      	movs	r3, #0
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3718      	adds	r7, #24
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	40021000 	.word	0x40021000

080026d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d101      	bne.n	80026e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e0d0      	b.n	8002886 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026e4:	4b6a      	ldr	r3, [pc, #424]	@ (8002890 <HAL_RCC_ClockConfig+0x1c0>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0307 	and.w	r3, r3, #7
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d910      	bls.n	8002714 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026f2:	4b67      	ldr	r3, [pc, #412]	@ (8002890 <HAL_RCC_ClockConfig+0x1c0>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f023 0207 	bic.w	r2, r3, #7
 80026fa:	4965      	ldr	r1, [pc, #404]	@ (8002890 <HAL_RCC_ClockConfig+0x1c0>)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	4313      	orrs	r3, r2
 8002700:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002702:	4b63      	ldr	r3, [pc, #396]	@ (8002890 <HAL_RCC_ClockConfig+0x1c0>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0307 	and.w	r3, r3, #7
 800270a:	683a      	ldr	r2, [r7, #0]
 800270c:	429a      	cmp	r2, r3
 800270e:	d001      	beq.n	8002714 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e0b8      	b.n	8002886 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d020      	beq.n	8002762 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0304 	and.w	r3, r3, #4
 8002728:	2b00      	cmp	r3, #0
 800272a:	d005      	beq.n	8002738 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800272c:	4b59      	ldr	r3, [pc, #356]	@ (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	4a58      	ldr	r2, [pc, #352]	@ (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 8002732:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002736:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0308 	and.w	r3, r3, #8
 8002740:	2b00      	cmp	r3, #0
 8002742:	d005      	beq.n	8002750 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002744:	4b53      	ldr	r3, [pc, #332]	@ (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	4a52      	ldr	r2, [pc, #328]	@ (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 800274a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800274e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002750:	4b50      	ldr	r3, [pc, #320]	@ (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	494d      	ldr	r1, [pc, #308]	@ (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 800275e:	4313      	orrs	r3, r2
 8002760:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	2b00      	cmp	r3, #0
 800276c:	d040      	beq.n	80027f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d107      	bne.n	8002786 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002776:	4b47      	ldr	r3, [pc, #284]	@ (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d115      	bne.n	80027ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e07f      	b.n	8002886 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	2b02      	cmp	r3, #2
 800278c:	d107      	bne.n	800279e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800278e:	4b41      	ldr	r3, [pc, #260]	@ (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d109      	bne.n	80027ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e073      	b.n	8002886 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800279e:	4b3d      	ldr	r3, [pc, #244]	@ (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e06b      	b.n	8002886 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027ae:	4b39      	ldr	r3, [pc, #228]	@ (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f023 0203 	bic.w	r2, r3, #3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	4936      	ldr	r1, [pc, #216]	@ (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027c0:	f7fe f914 	bl	80009ec <HAL_GetTick>
 80027c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027c6:	e00a      	b.n	80027de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027c8:	f7fe f910 	bl	80009ec <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e053      	b.n	8002886 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027de:	4b2d      	ldr	r3, [pc, #180]	@ (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f003 020c 	and.w	r2, r3, #12
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d1eb      	bne.n	80027c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027f0:	4b27      	ldr	r3, [pc, #156]	@ (8002890 <HAL_RCC_ClockConfig+0x1c0>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0307 	and.w	r3, r3, #7
 80027f8:	683a      	ldr	r2, [r7, #0]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d210      	bcs.n	8002820 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027fe:	4b24      	ldr	r3, [pc, #144]	@ (8002890 <HAL_RCC_ClockConfig+0x1c0>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f023 0207 	bic.w	r2, r3, #7
 8002806:	4922      	ldr	r1, [pc, #136]	@ (8002890 <HAL_RCC_ClockConfig+0x1c0>)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	4313      	orrs	r3, r2
 800280c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800280e:	4b20      	ldr	r3, [pc, #128]	@ (8002890 <HAL_RCC_ClockConfig+0x1c0>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0307 	and.w	r3, r3, #7
 8002816:	683a      	ldr	r2, [r7, #0]
 8002818:	429a      	cmp	r2, r3
 800281a:	d001      	beq.n	8002820 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e032      	b.n	8002886 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0304 	and.w	r3, r3, #4
 8002828:	2b00      	cmp	r3, #0
 800282a:	d008      	beq.n	800283e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800282c:	4b19      	ldr	r3, [pc, #100]	@ (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	4916      	ldr	r1, [pc, #88]	@ (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 800283a:	4313      	orrs	r3, r2
 800283c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0308 	and.w	r3, r3, #8
 8002846:	2b00      	cmp	r3, #0
 8002848:	d009      	beq.n	800285e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800284a:	4b12      	ldr	r3, [pc, #72]	@ (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	490e      	ldr	r1, [pc, #56]	@ (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 800285a:	4313      	orrs	r3, r2
 800285c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800285e:	f000 f821 	bl	80028a4 <HAL_RCC_GetSysClockFreq>
 8002862:	4602      	mov	r2, r0
 8002864:	4b0b      	ldr	r3, [pc, #44]	@ (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	091b      	lsrs	r3, r3, #4
 800286a:	f003 030f 	and.w	r3, r3, #15
 800286e:	490a      	ldr	r1, [pc, #40]	@ (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 8002870:	5ccb      	ldrb	r3, [r1, r3]
 8002872:	fa22 f303 	lsr.w	r3, r2, r3
 8002876:	4a09      	ldr	r2, [pc, #36]	@ (800289c <HAL_RCC_ClockConfig+0x1cc>)
 8002878:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800287a:	4b09      	ldr	r3, [pc, #36]	@ (80028a0 <HAL_RCC_ClockConfig+0x1d0>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4618      	mov	r0, r3
 8002880:	f7fe f872 	bl	8000968 <HAL_InitTick>

  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	40022000 	.word	0x40022000
 8002894:	40021000 	.word	0x40021000
 8002898:	08003674 	.word	0x08003674
 800289c:	20000000 	.word	0x20000000
 80028a0:	20000004 	.word	0x20000004

080028a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b087      	sub	sp, #28
 80028a8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028aa:	2300      	movs	r3, #0
 80028ac:	60fb      	str	r3, [r7, #12]
 80028ae:	2300      	movs	r3, #0
 80028b0:	60bb      	str	r3, [r7, #8]
 80028b2:	2300      	movs	r3, #0
 80028b4:	617b      	str	r3, [r7, #20]
 80028b6:	2300      	movs	r3, #0
 80028b8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80028ba:	2300      	movs	r3, #0
 80028bc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028be:	4b1e      	ldr	r3, [pc, #120]	@ (8002938 <HAL_RCC_GetSysClockFreq+0x94>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f003 030c 	and.w	r3, r3, #12
 80028ca:	2b04      	cmp	r3, #4
 80028cc:	d002      	beq.n	80028d4 <HAL_RCC_GetSysClockFreq+0x30>
 80028ce:	2b08      	cmp	r3, #8
 80028d0:	d003      	beq.n	80028da <HAL_RCC_GetSysClockFreq+0x36>
 80028d2:	e027      	b.n	8002924 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028d4:	4b19      	ldr	r3, [pc, #100]	@ (800293c <HAL_RCC_GetSysClockFreq+0x98>)
 80028d6:	613b      	str	r3, [r7, #16]
      break;
 80028d8:	e027      	b.n	800292a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	0c9b      	lsrs	r3, r3, #18
 80028de:	f003 030f 	and.w	r3, r3, #15
 80028e2:	4a17      	ldr	r2, [pc, #92]	@ (8002940 <HAL_RCC_GetSysClockFreq+0x9c>)
 80028e4:	5cd3      	ldrb	r3, [r2, r3]
 80028e6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d010      	beq.n	8002914 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028f2:	4b11      	ldr	r3, [pc, #68]	@ (8002938 <HAL_RCC_GetSysClockFreq+0x94>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	0c5b      	lsrs	r3, r3, #17
 80028f8:	f003 0301 	and.w	r3, r3, #1
 80028fc:	4a11      	ldr	r2, [pc, #68]	@ (8002944 <HAL_RCC_GetSysClockFreq+0xa0>)
 80028fe:	5cd3      	ldrb	r3, [r2, r3]
 8002900:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a0d      	ldr	r2, [pc, #52]	@ (800293c <HAL_RCC_GetSysClockFreq+0x98>)
 8002906:	fb03 f202 	mul.w	r2, r3, r2
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002910:	617b      	str	r3, [r7, #20]
 8002912:	e004      	b.n	800291e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a0c      	ldr	r2, [pc, #48]	@ (8002948 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002918:	fb02 f303 	mul.w	r3, r2, r3
 800291c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	613b      	str	r3, [r7, #16]
      break;
 8002922:	e002      	b.n	800292a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002924:	4b05      	ldr	r3, [pc, #20]	@ (800293c <HAL_RCC_GetSysClockFreq+0x98>)
 8002926:	613b      	str	r3, [r7, #16]
      break;
 8002928:	bf00      	nop
    }
  }
  return sysclockfreq;
 800292a:	693b      	ldr	r3, [r7, #16]
}
 800292c:	4618      	mov	r0, r3
 800292e:	371c      	adds	r7, #28
 8002930:	46bd      	mov	sp, r7
 8002932:	bc80      	pop	{r7}
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	40021000 	.word	0x40021000
 800293c:	007a1200 	.word	0x007a1200
 8002940:	0800368c 	.word	0x0800368c
 8002944:	0800369c 	.word	0x0800369c
 8002948:	003d0900 	.word	0x003d0900

0800294c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002950:	4b02      	ldr	r3, [pc, #8]	@ (800295c <HAL_RCC_GetHCLKFreq+0x10>)
 8002952:	681b      	ldr	r3, [r3, #0]
}
 8002954:	4618      	mov	r0, r3
 8002956:	46bd      	mov	sp, r7
 8002958:	bc80      	pop	{r7}
 800295a:	4770      	bx	lr
 800295c:	20000000 	.word	0x20000000

08002960 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002964:	f7ff fff2 	bl	800294c <HAL_RCC_GetHCLKFreq>
 8002968:	4602      	mov	r2, r0
 800296a:	4b05      	ldr	r3, [pc, #20]	@ (8002980 <HAL_RCC_GetPCLK1Freq+0x20>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	0a1b      	lsrs	r3, r3, #8
 8002970:	f003 0307 	and.w	r3, r3, #7
 8002974:	4903      	ldr	r1, [pc, #12]	@ (8002984 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002976:	5ccb      	ldrb	r3, [r1, r3]
 8002978:	fa22 f303 	lsr.w	r3, r2, r3
}
 800297c:	4618      	mov	r0, r3
 800297e:	bd80      	pop	{r7, pc}
 8002980:	40021000 	.word	0x40021000
 8002984:	08003684 	.word	0x08003684

08002988 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800298c:	f7ff ffde 	bl	800294c <HAL_RCC_GetHCLKFreq>
 8002990:	4602      	mov	r2, r0
 8002992:	4b05      	ldr	r3, [pc, #20]	@ (80029a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	0adb      	lsrs	r3, r3, #11
 8002998:	f003 0307 	and.w	r3, r3, #7
 800299c:	4903      	ldr	r1, [pc, #12]	@ (80029ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800299e:	5ccb      	ldrb	r3, [r1, r3]
 80029a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	40021000 	.word	0x40021000
 80029ac:	08003684 	.word	0x08003684

080029b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029b8:	4b0a      	ldr	r3, [pc, #40]	@ (80029e4 <RCC_Delay+0x34>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a0a      	ldr	r2, [pc, #40]	@ (80029e8 <RCC_Delay+0x38>)
 80029be:	fba2 2303 	umull	r2, r3, r2, r3
 80029c2:	0a5b      	lsrs	r3, r3, #9
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	fb02 f303 	mul.w	r3, r2, r3
 80029ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029cc:	bf00      	nop
  }
  while (Delay --);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	1e5a      	subs	r2, r3, #1
 80029d2:	60fa      	str	r2, [r7, #12]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1f9      	bne.n	80029cc <RCC_Delay+0x1c>
}
 80029d8:	bf00      	nop
 80029da:	bf00      	nop
 80029dc:	3714      	adds	r7, #20
 80029de:	46bd      	mov	sp, r7
 80029e0:	bc80      	pop	{r7}
 80029e2:	4770      	bx	lr
 80029e4:	20000000 	.word	0x20000000
 80029e8:	10624dd3 	.word	0x10624dd3

080029ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d101      	bne.n	80029fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e076      	b.n	8002aec <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d108      	bne.n	8002a18 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a0e:	d009      	beq.n	8002a24 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	61da      	str	r2, [r3, #28]
 8002a16:	e005      	b.n	8002a24 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d106      	bne.n	8002a44 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f7fd fe88 	bl	8000754 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2202      	movs	r2, #2
 8002a48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a5a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002a6c:	431a      	orrs	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a76:	431a      	orrs	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	431a      	orrs	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	431a      	orrs	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a94:	431a      	orrs	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	69db      	ldr	r3, [r3, #28]
 8002a9a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a1b      	ldr	r3, [r3, #32]
 8002aa4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aa8:	ea42 0103 	orr.w	r1, r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ab0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	0c1a      	lsrs	r2, r3, #16
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f002 0204 	and.w	r2, r2, #4
 8002aca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	69da      	ldr	r2, [r3, #28]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ada:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3708      	adds	r7, #8
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e042      	b.n	8002b8c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d106      	bne.n	8002b20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f7fd fe58 	bl	80007d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2224      	movs	r2, #36	@ 0x24
 8002b24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68da      	ldr	r2, [r3, #12]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002b36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f000 fcd5 	bl	80034e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	691a      	ldr	r2, [r3, #16]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002b4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	695a      	ldr	r2, [r3, #20]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002b5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68da      	ldr	r2, [r3, #12]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002b6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2220      	movs	r2, #32
 8002b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2220      	movs	r2, #32
 8002b80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b20      	cmp	r3, #32
 8002bac:	d112      	bne.n	8002bd4 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d002      	beq.n	8002bba <HAL_UART_Receive_IT+0x26>
 8002bb4:	88fb      	ldrh	r3, [r7, #6]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e00b      	b.n	8002bd6 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002bc4:	88fb      	ldrh	r3, [r7, #6]
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	68b9      	ldr	r1, [r7, #8]
 8002bca:	68f8      	ldr	r0, [r7, #12]
 8002bcc:	f000 fab7 	bl	800313e <UART_Start_Receive_IT>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	e000      	b.n	8002bd6 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002bd4:	2302      	movs	r3, #2
  }
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
	...

08002be0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b0ba      	sub	sp, #232	@ 0xe8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002c06:	2300      	movs	r3, #0
 8002c08:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002c12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c16:	f003 030f 	and.w	r3, r3, #15
 8002c1a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002c1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d10f      	bne.n	8002c46 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c2a:	f003 0320 	and.w	r3, r3, #32
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d009      	beq.n	8002c46 <HAL_UART_IRQHandler+0x66>
 8002c32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c36:	f003 0320 	and.w	r3, r3, #32
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d003      	beq.n	8002c46 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 fb93 	bl	800336a <UART_Receive_IT>
      return;
 8002c44:	e25b      	b.n	80030fe <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002c46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f000 80de 	beq.w	8002e0c <HAL_UART_IRQHandler+0x22c>
 8002c50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d106      	bne.n	8002c6a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002c5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c60:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f000 80d1 	beq.w	8002e0c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00b      	beq.n	8002c8e <HAL_UART_IRQHandler+0xae>
 8002c76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d005      	beq.n	8002c8e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c86:	f043 0201 	orr.w	r2, r3, #1
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c92:	f003 0304 	and.w	r3, r3, #4
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00b      	beq.n	8002cb2 <HAL_UART_IRQHandler+0xd2>
 8002c9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d005      	beq.n	8002cb2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002caa:	f043 0202 	orr.w	r2, r3, #2
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00b      	beq.n	8002cd6 <HAL_UART_IRQHandler+0xf6>
 8002cbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d005      	beq.n	8002cd6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cce:	f043 0204 	orr.w	r2, r3, #4
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cda:	f003 0308 	and.w	r3, r3, #8
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d011      	beq.n	8002d06 <HAL_UART_IRQHandler+0x126>
 8002ce2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ce6:	f003 0320 	and.w	r3, r3, #32
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d105      	bne.n	8002cfa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002cee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d005      	beq.n	8002d06 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cfe:	f043 0208 	orr.w	r2, r3, #8
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f000 81f2 	beq.w	80030f4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d14:	f003 0320 	and.w	r3, r3, #32
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d008      	beq.n	8002d2e <HAL_UART_IRQHandler+0x14e>
 8002d1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d20:	f003 0320 	and.w	r3, r3, #32
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d002      	beq.n	8002d2e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f000 fb1e 	bl	800336a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	695b      	ldr	r3, [r3, #20]
 8002d34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	bf14      	ite	ne
 8002d3c:	2301      	movne	r3, #1
 8002d3e:	2300      	moveq	r3, #0
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d4a:	f003 0308 	and.w	r3, r3, #8
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d103      	bne.n	8002d5a <HAL_UART_IRQHandler+0x17a>
 8002d52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d04f      	beq.n	8002dfa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 fa28 	bl	80031b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d041      	beq.n	8002df2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	3314      	adds	r3, #20
 8002d74:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d78:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002d7c:	e853 3f00 	ldrex	r3, [r3]
 8002d80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002d84:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002d88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d8c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	3314      	adds	r3, #20
 8002d96:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002d9a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002d9e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002da2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002da6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002daa:	e841 2300 	strex	r3, r2, [r1]
 8002dae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002db2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1d9      	bne.n	8002d6e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d013      	beq.n	8002dea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dc6:	4a7e      	ldr	r2, [pc, #504]	@ (8002fc0 <HAL_UART_IRQHandler+0x3e0>)
 8002dc8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7fd ff82 	bl	8000cd8 <HAL_DMA_Abort_IT>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d016      	beq.n	8002e08 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002de4:	4610      	mov	r0, r2
 8002de6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002de8:	e00e      	b.n	8002e08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 f993 	bl	8003116 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002df0:	e00a      	b.n	8002e08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 f98f 	bl	8003116 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002df8:	e006      	b.n	8002e08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 f98b 	bl	8003116 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002e06:	e175      	b.n	80030f4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e08:	bf00      	nop
    return;
 8002e0a:	e173      	b.n	80030f4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	f040 814f 	bne.w	80030b4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002e16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e1a:	f003 0310 	and.w	r3, r3, #16
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f000 8148 	beq.w	80030b4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002e24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e28:	f003 0310 	and.w	r3, r3, #16
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f000 8141 	beq.w	80030b4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e32:	2300      	movs	r3, #0
 8002e34:	60bb      	str	r3, [r7, #8]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	60bb      	str	r3, [r7, #8]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	60bb      	str	r3, [r7, #8]
 8002e46:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f000 80b6 	beq.w	8002fc4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002e64:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f000 8145 	beq.w	80030f8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002e72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002e76:	429a      	cmp	r2, r3
 8002e78:	f080 813e 	bcs.w	80030f8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002e82:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	2b20      	cmp	r3, #32
 8002e8c:	f000 8088 	beq.w	8002fa0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	330c      	adds	r3, #12
 8002e96:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e9a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002e9e:	e853 3f00 	ldrex	r3, [r3]
 8002ea2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002ea6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002eaa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002eae:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	330c      	adds	r3, #12
 8002eb8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002ebc:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002ec0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ec4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002ec8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002ecc:	e841 2300 	strex	r3, r2, [r1]
 8002ed0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002ed4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d1d9      	bne.n	8002e90 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	3314      	adds	r3, #20
 8002ee2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ee4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ee6:	e853 3f00 	ldrex	r3, [r3]
 8002eea:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002eec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002eee:	f023 0301 	bic.w	r3, r3, #1
 8002ef2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	3314      	adds	r3, #20
 8002efc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002f00:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002f04:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f06:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002f08:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002f0c:	e841 2300 	strex	r3, r2, [r1]
 8002f10:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002f12:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d1e1      	bne.n	8002edc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	3314      	adds	r3, #20
 8002f1e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f20:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f22:	e853 3f00 	ldrex	r3, [r3]
 8002f26:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002f28:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f2e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	3314      	adds	r3, #20
 8002f38:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002f3c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002f3e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f40:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002f42:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002f44:	e841 2300 	strex	r3, r2, [r1]
 8002f48:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002f4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1e3      	bne.n	8002f18 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2220      	movs	r2, #32
 8002f54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	330c      	adds	r3, #12
 8002f64:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f68:	e853 3f00 	ldrex	r3, [r3]
 8002f6c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002f6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f70:	f023 0310 	bic.w	r3, r3, #16
 8002f74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	330c      	adds	r3, #12
 8002f7e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002f82:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002f84:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f86:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002f88:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002f8a:	e841 2300 	strex	r3, r2, [r1]
 8002f8e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002f90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d1e3      	bne.n	8002f5e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7fd fe61 	bl	8000c62 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2202      	movs	r2, #2
 8002fa4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 f8b6 	bl	8003128 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002fbc:	e09c      	b.n	80030f8 <HAL_UART_IRQHandler+0x518>
 8002fbe:	bf00      	nop
 8002fc0:	08003275 	.word	0x08003275
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	f000 808e 	beq.w	80030fc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002fe0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f000 8089 	beq.w	80030fc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	330c      	adds	r3, #12
 8002ff0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ff4:	e853 3f00 	ldrex	r3, [r3]
 8002ff8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002ffa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ffc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003000:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	330c      	adds	r3, #12
 800300a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800300e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003010:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003012:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003014:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003016:	e841 2300 	strex	r3, r2, [r1]
 800301a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800301c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1e3      	bne.n	8002fea <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	3314      	adds	r3, #20
 8003028:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800302a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800302c:	e853 3f00 	ldrex	r3, [r3]
 8003030:	623b      	str	r3, [r7, #32]
   return(result);
 8003032:	6a3b      	ldr	r3, [r7, #32]
 8003034:	f023 0301 	bic.w	r3, r3, #1
 8003038:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	3314      	adds	r3, #20
 8003042:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003046:	633a      	str	r2, [r7, #48]	@ 0x30
 8003048:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800304a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800304c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800304e:	e841 2300 	strex	r3, r2, [r1]
 8003052:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1e3      	bne.n	8003022 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2220      	movs	r2, #32
 800305e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	330c      	adds	r3, #12
 800306e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	e853 3f00 	ldrex	r3, [r3]
 8003076:	60fb      	str	r3, [r7, #12]
   return(result);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f023 0310 	bic.w	r3, r3, #16
 800307e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	330c      	adds	r3, #12
 8003088:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800308c:	61fa      	str	r2, [r7, #28]
 800308e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003090:	69b9      	ldr	r1, [r7, #24]
 8003092:	69fa      	ldr	r2, [r7, #28]
 8003094:	e841 2300 	strex	r3, r2, [r1]
 8003098:	617b      	str	r3, [r7, #20]
   return(result);
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1e3      	bne.n	8003068 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2202      	movs	r2, #2
 80030a4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80030a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80030aa:	4619      	mov	r1, r3
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 f83b 	bl	8003128 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80030b2:	e023      	b.n	80030fc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80030b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d009      	beq.n	80030d4 <HAL_UART_IRQHandler+0x4f4>
 80030c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d003      	beq.n	80030d4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f000 f8e5 	bl	800329c <UART_Transmit_IT>
    return;
 80030d2:	e014      	b.n	80030fe <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80030d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d00e      	beq.n	80030fe <HAL_UART_IRQHandler+0x51e>
 80030e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d008      	beq.n	80030fe <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f000 f924 	bl	800333a <UART_EndTransmit_IT>
    return;
 80030f2:	e004      	b.n	80030fe <HAL_UART_IRQHandler+0x51e>
    return;
 80030f4:	bf00      	nop
 80030f6:	e002      	b.n	80030fe <HAL_UART_IRQHandler+0x51e>
      return;
 80030f8:	bf00      	nop
 80030fa:	e000      	b.n	80030fe <HAL_UART_IRQHandler+0x51e>
      return;
 80030fc:	bf00      	nop
  }
}
 80030fe:	37e8      	adds	r7, #232	@ 0xe8
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	bc80      	pop	{r7}
 8003114:	4770      	bx	lr

08003116 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003116:	b480      	push	{r7}
 8003118:	b083      	sub	sp, #12
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800311e:	bf00      	nop
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	bc80      	pop	{r7}
 8003126:	4770      	bx	lr

08003128 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	460b      	mov	r3, r1
 8003132:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003134:	bf00      	nop
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	bc80      	pop	{r7}
 800313c:	4770      	bx	lr

0800313e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800313e:	b480      	push	{r7}
 8003140:	b085      	sub	sp, #20
 8003142:	af00      	add	r7, sp, #0
 8003144:	60f8      	str	r0, [r7, #12]
 8003146:	60b9      	str	r1, [r7, #8]
 8003148:	4613      	mov	r3, r2
 800314a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	68ba      	ldr	r2, [r7, #8]
 8003150:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	88fa      	ldrh	r2, [r7, #6]
 8003156:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	88fa      	ldrh	r2, [r7, #6]
 800315c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2222      	movs	r2, #34	@ 0x22
 8003168:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d007      	beq.n	8003184 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	68da      	ldr	r2, [r3, #12]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003182:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	695a      	ldr	r2, [r3, #20]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f042 0201 	orr.w	r2, r2, #1
 8003192:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68da      	ldr	r2, [r3, #12]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f042 0220 	orr.w	r2, r2, #32
 80031a2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3714      	adds	r7, #20
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bc80      	pop	{r7}
 80031ae:	4770      	bx	lr

080031b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b095      	sub	sp, #84	@ 0x54
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	330c      	adds	r3, #12
 80031be:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031c2:	e853 3f00 	ldrex	r3, [r3]
 80031c6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80031c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80031ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	330c      	adds	r3, #12
 80031d6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80031d8:	643a      	str	r2, [r7, #64]	@ 0x40
 80031da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031dc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80031de:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80031e0:	e841 2300 	strex	r3, r2, [r1]
 80031e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80031e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d1e5      	bne.n	80031b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	3314      	adds	r3, #20
 80031f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031f4:	6a3b      	ldr	r3, [r7, #32]
 80031f6:	e853 3f00 	ldrex	r3, [r3]
 80031fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	f023 0301 	bic.w	r3, r3, #1
 8003202:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	3314      	adds	r3, #20
 800320a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800320c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800320e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003210:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003212:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003214:	e841 2300 	strex	r3, r2, [r1]
 8003218:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800321a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1e5      	bne.n	80031ec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003224:	2b01      	cmp	r3, #1
 8003226:	d119      	bne.n	800325c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	330c      	adds	r3, #12
 800322e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	e853 3f00 	ldrex	r3, [r3]
 8003236:	60bb      	str	r3, [r7, #8]
   return(result);
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	f023 0310 	bic.w	r3, r3, #16
 800323e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	330c      	adds	r3, #12
 8003246:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003248:	61ba      	str	r2, [r7, #24]
 800324a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800324c:	6979      	ldr	r1, [r7, #20]
 800324e:	69ba      	ldr	r2, [r7, #24]
 8003250:	e841 2300 	strex	r3, r2, [r1]
 8003254:	613b      	str	r3, [r7, #16]
   return(result);
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d1e5      	bne.n	8003228 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2220      	movs	r2, #32
 8003260:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800326a:	bf00      	nop
 800326c:	3754      	adds	r7, #84	@ 0x54
 800326e:	46bd      	mov	sp, r7
 8003270:	bc80      	pop	{r7}
 8003272:	4770      	bx	lr

08003274 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003280:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f7ff ff41 	bl	8003116 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003294:	bf00      	nop
 8003296:	3710      	adds	r7, #16
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	2b21      	cmp	r3, #33	@ 0x21
 80032ae:	d13e      	bne.n	800332e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032b8:	d114      	bne.n	80032e4 <UART_Transmit_IT+0x48>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d110      	bne.n	80032e4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a1b      	ldr	r3, [r3, #32]
 80032c6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	881b      	ldrh	r3, [r3, #0]
 80032cc:	461a      	mov	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032d6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a1b      	ldr	r3, [r3, #32]
 80032dc:	1c9a      	adds	r2, r3, #2
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	621a      	str	r2, [r3, #32]
 80032e2:	e008      	b.n	80032f6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a1b      	ldr	r3, [r3, #32]
 80032e8:	1c59      	adds	r1, r3, #1
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	6211      	str	r1, [r2, #32]
 80032ee:	781a      	ldrb	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	3b01      	subs	r3, #1
 80032fe:	b29b      	uxth	r3, r3
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	4619      	mov	r1, r3
 8003304:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003306:	2b00      	cmp	r3, #0
 8003308:	d10f      	bne.n	800332a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68da      	ldr	r2, [r3, #12]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003318:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68da      	ldr	r2, [r3, #12]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003328:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800332a:	2300      	movs	r3, #0
 800332c:	e000      	b.n	8003330 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800332e:	2302      	movs	r3, #2
  }
}
 8003330:	4618      	mov	r0, r3
 8003332:	3714      	adds	r7, #20
 8003334:	46bd      	mov	sp, r7
 8003336:	bc80      	pop	{r7}
 8003338:	4770      	bx	lr

0800333a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b082      	sub	sp, #8
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68da      	ldr	r2, [r3, #12]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003350:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2220      	movs	r2, #32
 8003356:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f7ff fed2 	bl	8003104 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3708      	adds	r7, #8
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800336a:	b580      	push	{r7, lr}
 800336c:	b08c      	sub	sp, #48	@ 0x30
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b22      	cmp	r3, #34	@ 0x22
 800337c:	f040 80ae 	bne.w	80034dc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003388:	d117      	bne.n	80033ba <UART_Receive_IT+0x50>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d113      	bne.n	80033ba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003392:	2300      	movs	r3, #0
 8003394:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800339a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033a8:	b29a      	uxth	r2, r3
 80033aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033ac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033b2:	1c9a      	adds	r2, r3, #2
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	629a      	str	r2, [r3, #40]	@ 0x28
 80033b8:	e026      	b.n	8003408 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033be:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80033c0:	2300      	movs	r3, #0
 80033c2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033cc:	d007      	beq.n	80033de <UART_Receive_IT+0x74>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d10a      	bne.n	80033ec <UART_Receive_IT+0x82>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d106      	bne.n	80033ec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	b2da      	uxtb	r2, r3
 80033e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033e8:	701a      	strb	r2, [r3, #0]
 80033ea:	e008      	b.n	80033fe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80033f8:	b2da      	uxtb	r2, r3
 80033fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033fc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003402:	1c5a      	adds	r2, r3, #1
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800340c:	b29b      	uxth	r3, r3
 800340e:	3b01      	subs	r3, #1
 8003410:	b29b      	uxth	r3, r3
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	4619      	mov	r1, r3
 8003416:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003418:	2b00      	cmp	r3, #0
 800341a:	d15d      	bne.n	80034d8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68da      	ldr	r2, [r3, #12]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f022 0220 	bic.w	r2, r2, #32
 800342a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68da      	ldr	r2, [r3, #12]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800343a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	695a      	ldr	r2, [r3, #20]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f022 0201 	bic.w	r2, r2, #1
 800344a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2220      	movs	r2, #32
 8003450:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800345e:	2b01      	cmp	r3, #1
 8003460:	d135      	bne.n	80034ce <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	330c      	adds	r3, #12
 800346e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	e853 3f00 	ldrex	r3, [r3]
 8003476:	613b      	str	r3, [r7, #16]
   return(result);
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	f023 0310 	bic.w	r3, r3, #16
 800347e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	330c      	adds	r3, #12
 8003486:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003488:	623a      	str	r2, [r7, #32]
 800348a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800348c:	69f9      	ldr	r1, [r7, #28]
 800348e:	6a3a      	ldr	r2, [r7, #32]
 8003490:	e841 2300 	strex	r3, r2, [r1]
 8003494:	61bb      	str	r3, [r7, #24]
   return(result);
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1e5      	bne.n	8003468 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0310 	and.w	r3, r3, #16
 80034a6:	2b10      	cmp	r3, #16
 80034a8:	d10a      	bne.n	80034c0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80034aa:	2300      	movs	r3, #0
 80034ac:	60fb      	str	r3, [r7, #12]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	60fb      	str	r3, [r7, #12]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	60fb      	str	r3, [r7, #12]
 80034be:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80034c4:	4619      	mov	r1, r3
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f7ff fe2e 	bl	8003128 <HAL_UARTEx_RxEventCallback>
 80034cc:	e002      	b.n	80034d4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7fd f89c 	bl	800060c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80034d4:	2300      	movs	r3, #0
 80034d6:	e002      	b.n	80034de <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80034d8:	2300      	movs	r3, #0
 80034da:	e000      	b.n	80034de <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80034dc:	2302      	movs	r3, #2
  }
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3730      	adds	r7, #48	@ 0x30
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
	...

080034e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	68da      	ldr	r2, [r3, #12]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	430a      	orrs	r2, r1
 8003504:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	689a      	ldr	r2, [r3, #8]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	431a      	orrs	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	695b      	ldr	r3, [r3, #20]
 8003514:	4313      	orrs	r3, r2
 8003516:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003522:	f023 030c 	bic.w	r3, r3, #12
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	6812      	ldr	r2, [r2, #0]
 800352a:	68b9      	ldr	r1, [r7, #8]
 800352c:	430b      	orrs	r3, r1
 800352e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	699a      	ldr	r2, [r3, #24]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	430a      	orrs	r2, r1
 8003544:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a2c      	ldr	r2, [pc, #176]	@ (80035fc <UART_SetConfig+0x114>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d103      	bne.n	8003558 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003550:	f7ff fa1a 	bl	8002988 <HAL_RCC_GetPCLK2Freq>
 8003554:	60f8      	str	r0, [r7, #12]
 8003556:	e002      	b.n	800355e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003558:	f7ff fa02 	bl	8002960 <HAL_RCC_GetPCLK1Freq>
 800355c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	4613      	mov	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	4413      	add	r3, r2
 8003566:	009a      	lsls	r2, r3, #2
 8003568:	441a      	add	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	fbb2 f3f3 	udiv	r3, r2, r3
 8003574:	4a22      	ldr	r2, [pc, #136]	@ (8003600 <UART_SetConfig+0x118>)
 8003576:	fba2 2303 	umull	r2, r3, r2, r3
 800357a:	095b      	lsrs	r3, r3, #5
 800357c:	0119      	lsls	r1, r3, #4
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	4613      	mov	r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	4413      	add	r3, r2
 8003586:	009a      	lsls	r2, r3, #2
 8003588:	441a      	add	r2, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	fbb2 f2f3 	udiv	r2, r2, r3
 8003594:	4b1a      	ldr	r3, [pc, #104]	@ (8003600 <UART_SetConfig+0x118>)
 8003596:	fba3 0302 	umull	r0, r3, r3, r2
 800359a:	095b      	lsrs	r3, r3, #5
 800359c:	2064      	movs	r0, #100	@ 0x64
 800359e:	fb00 f303 	mul.w	r3, r0, r3
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	011b      	lsls	r3, r3, #4
 80035a6:	3332      	adds	r3, #50	@ 0x32
 80035a8:	4a15      	ldr	r2, [pc, #84]	@ (8003600 <UART_SetConfig+0x118>)
 80035aa:	fba2 2303 	umull	r2, r3, r2, r3
 80035ae:	095b      	lsrs	r3, r3, #5
 80035b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035b4:	4419      	add	r1, r3
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	4613      	mov	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	4413      	add	r3, r2
 80035be:	009a      	lsls	r2, r3, #2
 80035c0:	441a      	add	r2, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80035cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003600 <UART_SetConfig+0x118>)
 80035ce:	fba3 0302 	umull	r0, r3, r3, r2
 80035d2:	095b      	lsrs	r3, r3, #5
 80035d4:	2064      	movs	r0, #100	@ 0x64
 80035d6:	fb00 f303 	mul.w	r3, r0, r3
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	011b      	lsls	r3, r3, #4
 80035de:	3332      	adds	r3, #50	@ 0x32
 80035e0:	4a07      	ldr	r2, [pc, #28]	@ (8003600 <UART_SetConfig+0x118>)
 80035e2:	fba2 2303 	umull	r2, r3, r2, r3
 80035e6:	095b      	lsrs	r3, r3, #5
 80035e8:	f003 020f 	and.w	r2, r3, #15
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	440a      	add	r2, r1
 80035f2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80035f4:	bf00      	nop
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	40013800 	.word	0x40013800
 8003600:	51eb851f 	.word	0x51eb851f

08003604 <memset>:
 8003604:	4603      	mov	r3, r0
 8003606:	4402      	add	r2, r0
 8003608:	4293      	cmp	r3, r2
 800360a:	d100      	bne.n	800360e <memset+0xa>
 800360c:	4770      	bx	lr
 800360e:	f803 1b01 	strb.w	r1, [r3], #1
 8003612:	e7f9      	b.n	8003608 <memset+0x4>

08003614 <__libc_init_array>:
 8003614:	b570      	push	{r4, r5, r6, lr}
 8003616:	2600      	movs	r6, #0
 8003618:	4d0c      	ldr	r5, [pc, #48]	@ (800364c <__libc_init_array+0x38>)
 800361a:	4c0d      	ldr	r4, [pc, #52]	@ (8003650 <__libc_init_array+0x3c>)
 800361c:	1b64      	subs	r4, r4, r5
 800361e:	10a4      	asrs	r4, r4, #2
 8003620:	42a6      	cmp	r6, r4
 8003622:	d109      	bne.n	8003638 <__libc_init_array+0x24>
 8003624:	f000 f81a 	bl	800365c <_init>
 8003628:	2600      	movs	r6, #0
 800362a:	4d0a      	ldr	r5, [pc, #40]	@ (8003654 <__libc_init_array+0x40>)
 800362c:	4c0a      	ldr	r4, [pc, #40]	@ (8003658 <__libc_init_array+0x44>)
 800362e:	1b64      	subs	r4, r4, r5
 8003630:	10a4      	asrs	r4, r4, #2
 8003632:	42a6      	cmp	r6, r4
 8003634:	d105      	bne.n	8003642 <__libc_init_array+0x2e>
 8003636:	bd70      	pop	{r4, r5, r6, pc}
 8003638:	f855 3b04 	ldr.w	r3, [r5], #4
 800363c:	4798      	blx	r3
 800363e:	3601      	adds	r6, #1
 8003640:	e7ee      	b.n	8003620 <__libc_init_array+0xc>
 8003642:	f855 3b04 	ldr.w	r3, [r5], #4
 8003646:	4798      	blx	r3
 8003648:	3601      	adds	r6, #1
 800364a:	e7f2      	b.n	8003632 <__libc_init_array+0x1e>
 800364c:	080036a0 	.word	0x080036a0
 8003650:	080036a0 	.word	0x080036a0
 8003654:	080036a0 	.word	0x080036a0
 8003658:	080036a4 	.word	0x080036a4

0800365c <_init>:
 800365c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800365e:	bf00      	nop
 8003660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003662:	bc08      	pop	{r3}
 8003664:	469e      	mov	lr, r3
 8003666:	4770      	bx	lr

08003668 <_fini>:
 8003668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800366a:	bf00      	nop
 800366c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800366e:	bc08      	pop	{r3}
 8003670:	469e      	mov	lr, r3
 8003672:	4770      	bx	lr
