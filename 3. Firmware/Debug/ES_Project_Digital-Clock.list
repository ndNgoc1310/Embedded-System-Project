
ES_Project_Digital-Clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004850  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  0800495c  0800495c  0000595c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004988  08004988  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004988  08004988  0000605c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004988  08004988  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004988  08004988  00005988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800498c  0800498c  0000598c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004990  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  2000005c  080049ec  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  080049ec  0000619c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d54f  00000000  00000000  00006085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024e0  00000000  00000000  000135d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd8  00000000  00000000  00015ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000946  00000000  00000000  00016690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018327  00000000  00000000  00016fd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010784  00000000  00000000  0002f2fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089cd5  00000000  00000000  0003fa81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c9756  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f90  00000000  00000000  000c979c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  000cc72c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004944 	.word	0x08004944

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08004944 	.word	0x08004944

0800014c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000152:	1d3b      	adds	r3, r7, #4
 8000154:	2200      	movs	r2, #0
 8000156:	601a      	str	r2, [r3, #0]
 8000158:	605a      	str	r2, [r3, #4]
 800015a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800015c:	4b18      	ldr	r3, [pc, #96]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800015e:	4a19      	ldr	r2, [pc, #100]	@ (80001c4 <MX_ADC1_Init+0x78>)
 8000160:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000162:	4b17      	ldr	r3, [pc, #92]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000164:	2200      	movs	r2, #0
 8000166:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000168:	4b15      	ldr	r3, [pc, #84]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800016a:	2200      	movs	r2, #0
 800016c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800016e:	4b14      	ldr	r3, [pc, #80]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000170:	2200      	movs	r2, #0
 8000172:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000174:	4b12      	ldr	r3, [pc, #72]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000176:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800017a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800017c:	4b10      	ldr	r3, [pc, #64]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800017e:	2200      	movs	r2, #0
 8000180:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000182:	4b0f      	ldr	r3, [pc, #60]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000184:	2201      	movs	r2, #1
 8000186:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000188:	480d      	ldr	r0, [pc, #52]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800018a:	f001 f989 	bl	80014a0 <HAL_ADC_Init>
 800018e:	4603      	mov	r3, r0
 8000190:	2b00      	cmp	r3, #0
 8000192:	d001      	beq.n	8000198 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000194:	f000 ffbc 	bl	8001110 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000198:	2304      	movs	r3, #4
 800019a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800019c:	2301      	movs	r3, #1
 800019e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001a0:	2300      	movs	r3, #0
 80001a2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	4619      	mov	r1, r3
 80001a8:	4805      	ldr	r0, [pc, #20]	@ (80001c0 <MX_ADC1_Init+0x74>)
 80001aa:	f001 fbdb 	bl	8001964 <HAL_ADC_ConfigChannel>
 80001ae:	4603      	mov	r3, r0
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d001      	beq.n	80001b8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80001b4:	f000 ffac 	bl	8001110 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80001b8:	bf00      	nop
 80001ba:	3710      	adds	r7, #16
 80001bc:	46bd      	mov	sp, r7
 80001be:	bd80      	pop	{r7, pc}
 80001c0:	20000078 	.word	0x20000078
 80001c4:	40012400 	.word	0x40012400

080001c8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b088      	sub	sp, #32
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001d0:	f107 0310 	add.w	r3, r7, #16
 80001d4:	2200      	movs	r2, #0
 80001d6:	601a      	str	r2, [r3, #0]
 80001d8:	605a      	str	r2, [r3, #4]
 80001da:	609a      	str	r2, [r3, #8]
 80001dc:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	4a18      	ldr	r2, [pc, #96]	@ (8000244 <HAL_ADC_MspInit+0x7c>)
 80001e4:	4293      	cmp	r3, r2
 80001e6:	d129      	bne.n	800023c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80001e8:	4b17      	ldr	r3, [pc, #92]	@ (8000248 <HAL_ADC_MspInit+0x80>)
 80001ea:	699b      	ldr	r3, [r3, #24]
 80001ec:	4a16      	ldr	r2, [pc, #88]	@ (8000248 <HAL_ADC_MspInit+0x80>)
 80001ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80001f2:	6193      	str	r3, [r2, #24]
 80001f4:	4b14      	ldr	r3, [pc, #80]	@ (8000248 <HAL_ADC_MspInit+0x80>)
 80001f6:	699b      	ldr	r3, [r3, #24]
 80001f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80001fc:	60fb      	str	r3, [r7, #12]
 80001fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000200:	4b11      	ldr	r3, [pc, #68]	@ (8000248 <HAL_ADC_MspInit+0x80>)
 8000202:	699b      	ldr	r3, [r3, #24]
 8000204:	4a10      	ldr	r2, [pc, #64]	@ (8000248 <HAL_ADC_MspInit+0x80>)
 8000206:	f043 0304 	orr.w	r3, r3, #4
 800020a:	6193      	str	r3, [r2, #24]
 800020c:	4b0e      	ldr	r3, [pc, #56]	@ (8000248 <HAL_ADC_MspInit+0x80>)
 800020e:	699b      	ldr	r3, [r3, #24]
 8000210:	f003 0304 	and.w	r3, r3, #4
 8000214:	60bb      	str	r3, [r7, #8]
 8000216:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000218:	2310      	movs	r3, #16
 800021a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800021c:	2303      	movs	r3, #3
 800021e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000220:	f107 0310 	add.w	r3, r7, #16
 8000224:	4619      	mov	r1, r3
 8000226:	4809      	ldr	r0, [pc, #36]	@ (800024c <HAL_ADC_MspInit+0x84>)
 8000228:	f001 fef8 	bl	800201c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800022c:	2200      	movs	r2, #0
 800022e:	2100      	movs	r1, #0
 8000230:	2012      	movs	r0, #18
 8000232:	f001 fe0a 	bl	8001e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000236:	2012      	movs	r0, #18
 8000238:	f001 fe23 	bl	8001e82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800023c:	bf00      	nop
 800023e:	3720      	adds	r7, #32
 8000240:	46bd      	mov	sp, r7
 8000242:	bd80      	pop	{r7, pc}
 8000244:	40012400 	.word	0x40012400
 8000248:	40021000 	.word	0x40021000
 800024c:	40010800 	.word	0x40010800

08000250 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b088      	sub	sp, #32
 8000254:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000256:	f107 0310 	add.w	r3, r7, #16
 800025a:	2200      	movs	r2, #0
 800025c:	601a      	str	r2, [r3, #0]
 800025e:	605a      	str	r2, [r3, #4]
 8000260:	609a      	str	r2, [r3, #8]
 8000262:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000264:	4b28      	ldr	r3, [pc, #160]	@ (8000308 <MX_GPIO_Init+0xb8>)
 8000266:	699b      	ldr	r3, [r3, #24]
 8000268:	4a27      	ldr	r2, [pc, #156]	@ (8000308 <MX_GPIO_Init+0xb8>)
 800026a:	f043 0320 	orr.w	r3, r3, #32
 800026e:	6193      	str	r3, [r2, #24]
 8000270:	4b25      	ldr	r3, [pc, #148]	@ (8000308 <MX_GPIO_Init+0xb8>)
 8000272:	699b      	ldr	r3, [r3, #24]
 8000274:	f003 0320 	and.w	r3, r3, #32
 8000278:	60fb      	str	r3, [r7, #12]
 800027a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800027c:	4b22      	ldr	r3, [pc, #136]	@ (8000308 <MX_GPIO_Init+0xb8>)
 800027e:	699b      	ldr	r3, [r3, #24]
 8000280:	4a21      	ldr	r2, [pc, #132]	@ (8000308 <MX_GPIO_Init+0xb8>)
 8000282:	f043 0304 	orr.w	r3, r3, #4
 8000286:	6193      	str	r3, [r2, #24]
 8000288:	4b1f      	ldr	r3, [pc, #124]	@ (8000308 <MX_GPIO_Init+0xb8>)
 800028a:	699b      	ldr	r3, [r3, #24]
 800028c:	f003 0304 	and.w	r3, r3, #4
 8000290:	60bb      	str	r3, [r7, #8]
 8000292:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000294:	4b1c      	ldr	r3, [pc, #112]	@ (8000308 <MX_GPIO_Init+0xb8>)
 8000296:	699b      	ldr	r3, [r3, #24]
 8000298:	4a1b      	ldr	r2, [pc, #108]	@ (8000308 <MX_GPIO_Init+0xb8>)
 800029a:	f043 0308 	orr.w	r3, r3, #8
 800029e:	6193      	str	r3, [r2, #24]
 80002a0:	4b19      	ldr	r3, [pc, #100]	@ (8000308 <MX_GPIO_Init+0xb8>)
 80002a2:	699b      	ldr	r3, [r3, #24]
 80002a4:	f003 0308 	and.w	r3, r3, #8
 80002a8:	607b      	str	r3, [r7, #4]
 80002aa:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : BUTTON1_IN12_Pin BUTTON2_IN13_Pin BUTTON3_IN14_Pin BUTTON4_IN15_Pin
                           RTC_IN5_Pin */
  GPIO_InitStruct.Pin = BUTTON1_IN12_Pin|BUTTON2_IN13_Pin|BUTTON3_IN14_Pin|BUTTON4_IN15_Pin
 80002ac:	f24f 0320 	movw	r3, #61472	@ 0xf020
 80002b0:	613b      	str	r3, [r7, #16]
                          |RTC_IN5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80002b2:	4b16      	ldr	r3, [pc, #88]	@ (800030c <MX_GPIO_Init+0xbc>)
 80002b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002b6:	2301      	movs	r3, #1
 80002b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002ba:	f107 0310 	add.w	r3, r7, #16
 80002be:	4619      	mov	r1, r3
 80002c0:	4813      	ldr	r0, [pc, #76]	@ (8000310 <MX_GPIO_Init+0xc0>)
 80002c2:	f001 feab 	bl	800201c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON5_IN8_Pin */
  GPIO_InitStruct.Pin = BUTTON5_IN8_Pin;
 80002c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80002ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80002cc:	4b0f      	ldr	r3, [pc, #60]	@ (800030c <MX_GPIO_Init+0xbc>)
 80002ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002d0:	2301      	movs	r3, #1
 80002d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON5_IN8_GPIO_Port, &GPIO_InitStruct);
 80002d4:	f107 0310 	add.w	r3, r7, #16
 80002d8:	4619      	mov	r1, r3
 80002da:	480e      	ldr	r0, [pc, #56]	@ (8000314 <MX_GPIO_Init+0xc4>)
 80002dc:	f001 fe9e 	bl	800201c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80002e0:	2200      	movs	r2, #0
 80002e2:	2100      	movs	r1, #0
 80002e4:	2017      	movs	r0, #23
 80002e6:	f001 fdb0 	bl	8001e4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80002ea:	2017      	movs	r0, #23
 80002ec:	f001 fdc9 	bl	8001e82 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80002f0:	2200      	movs	r2, #0
 80002f2:	2100      	movs	r1, #0
 80002f4:	2028      	movs	r0, #40	@ 0x28
 80002f6:	f001 fda8 	bl	8001e4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80002fa:	2028      	movs	r0, #40	@ 0x28
 80002fc:	f001 fdc1 	bl	8001e82 <HAL_NVIC_EnableIRQ>

}
 8000300:	bf00      	nop
 8000302:	3720      	adds	r7, #32
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}
 8000308:	40021000 	.word	0x40021000
 800030c:	10210000 	.word	0x10210000
 8000310:	40010c00 	.word	0x40010c00
 8000314:	40010800 	.word	0x40010800

08000318 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800031c:	4b12      	ldr	r3, [pc, #72]	@ (8000368 <MX_I2C1_Init+0x50>)
 800031e:	4a13      	ldr	r2, [pc, #76]	@ (800036c <MX_I2C1_Init+0x54>)
 8000320:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000322:	4b11      	ldr	r3, [pc, #68]	@ (8000368 <MX_I2C1_Init+0x50>)
 8000324:	4a12      	ldr	r2, [pc, #72]	@ (8000370 <MX_I2C1_Init+0x58>)
 8000326:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000328:	4b0f      	ldr	r3, [pc, #60]	@ (8000368 <MX_I2C1_Init+0x50>)
 800032a:	2200      	movs	r2, #0
 800032c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800032e:	4b0e      	ldr	r3, [pc, #56]	@ (8000368 <MX_I2C1_Init+0x50>)
 8000330:	2200      	movs	r2, #0
 8000332:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000334:	4b0c      	ldr	r3, [pc, #48]	@ (8000368 <MX_I2C1_Init+0x50>)
 8000336:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800033a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800033c:	4b0a      	ldr	r3, [pc, #40]	@ (8000368 <MX_I2C1_Init+0x50>)
 800033e:	2200      	movs	r2, #0
 8000340:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000342:	4b09      	ldr	r3, [pc, #36]	@ (8000368 <MX_I2C1_Init+0x50>)
 8000344:	2200      	movs	r2, #0
 8000346:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000348:	4b07      	ldr	r3, [pc, #28]	@ (8000368 <MX_I2C1_Init+0x50>)
 800034a:	2200      	movs	r2, #0
 800034c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800034e:	4b06      	ldr	r3, [pc, #24]	@ (8000368 <MX_I2C1_Init+0x50>)
 8000350:	2200      	movs	r2, #0
 8000352:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000354:	4804      	ldr	r0, [pc, #16]	@ (8000368 <MX_I2C1_Init+0x50>)
 8000356:	f002 f815 	bl	8002384 <HAL_I2C_Init>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d001      	beq.n	8000364 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000360:	f000 fed6 	bl	8001110 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000364:	bf00      	nop
 8000366:	bd80      	pop	{r7, pc}
 8000368:	200000a8 	.word	0x200000a8
 800036c:	40005400 	.word	0x40005400
 8000370:	00061a80 	.word	0x00061a80

08000374 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b088      	sub	sp, #32
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800037c:	f107 0310 	add.w	r3, r7, #16
 8000380:	2200      	movs	r2, #0
 8000382:	601a      	str	r2, [r3, #0]
 8000384:	605a      	str	r2, [r3, #4]
 8000386:	609a      	str	r2, [r3, #8]
 8000388:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	4a15      	ldr	r2, [pc, #84]	@ (80003e4 <HAL_I2C_MspInit+0x70>)
 8000390:	4293      	cmp	r3, r2
 8000392:	d123      	bne.n	80003dc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000394:	4b14      	ldr	r3, [pc, #80]	@ (80003e8 <HAL_I2C_MspInit+0x74>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	4a13      	ldr	r2, [pc, #76]	@ (80003e8 <HAL_I2C_MspInit+0x74>)
 800039a:	f043 0308 	orr.w	r3, r3, #8
 800039e:	6193      	str	r3, [r2, #24]
 80003a0:	4b11      	ldr	r3, [pc, #68]	@ (80003e8 <HAL_I2C_MspInit+0x74>)
 80003a2:	699b      	ldr	r3, [r3, #24]
 80003a4:	f003 0308 	and.w	r3, r3, #8
 80003a8:	60fb      	str	r3, [r7, #12]
 80003aa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80003ac:	23c0      	movs	r3, #192	@ 0xc0
 80003ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80003b0:	2312      	movs	r3, #18
 80003b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003b4:	2303      	movs	r3, #3
 80003b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003b8:	f107 0310 	add.w	r3, r7, #16
 80003bc:	4619      	mov	r1, r3
 80003be:	480b      	ldr	r0, [pc, #44]	@ (80003ec <HAL_I2C_MspInit+0x78>)
 80003c0:	f001 fe2c 	bl	800201c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80003c4:	4b08      	ldr	r3, [pc, #32]	@ (80003e8 <HAL_I2C_MspInit+0x74>)
 80003c6:	69db      	ldr	r3, [r3, #28]
 80003c8:	4a07      	ldr	r2, [pc, #28]	@ (80003e8 <HAL_I2C_MspInit+0x74>)
 80003ca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80003ce:	61d3      	str	r3, [r2, #28]
 80003d0:	4b05      	ldr	r3, [pc, #20]	@ (80003e8 <HAL_I2C_MspInit+0x74>)
 80003d2:	69db      	ldr	r3, [r3, #28]
 80003d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80003d8:	60bb      	str	r3, [r7, #8]
 80003da:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80003dc:	bf00      	nop
 80003de:	3720      	adds	r7, #32
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	40005400 	.word	0x40005400
 80003e8:	40021000 	.word	0x40021000
 80003ec:	40010c00 	.word	0x40010c00

080003f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003f2:	b089      	sub	sp, #36	@ 0x24
 80003f4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003f6:	f000 ffcd 	bl	8001394 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003fa:	f000 fa59 	bl	80008b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003fe:	f7ff ff27 	bl	8000250 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000402:	f7ff ff89 	bl	8000318 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000406:	f7ff fea1 	bl	800014c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800040a:	f000 ff1f 	bl	800124c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // Initialize RTC module (Run only once after reset the RTC module)
  //    void Time_Init(uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom, uint8_t month, uint8_t year)
  Time_Init
 800040e:	2319      	movs	r3, #25
 8000410:	9302      	str	r3, [sp, #8]
 8000412:	2304      	movs	r3, #4
 8000414:	9301      	str	r3, [sp, #4]
 8000416:	230a      	movs	r3, #10
 8000418:	9300      	str	r3, [sp, #0]
 800041a:	2305      	movs	r3, #5
 800041c:	220f      	movs	r2, #15
 800041e:	2101      	movs	r1, #1
 8000420:	2000      	movs	r0, #0
 8000422:	f000 fc45 	bl	8000cb0 <Time_Init>
  //   Alarm_Clear(i);
  // }

  // Store values of a single alarm to the next available address on the EEPROM module
  //    void Alarm_Set (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow_dom, bool dy_dt, bool on_off, uint8_t slot)
  Alarm_Set
 8000426:	2301      	movs	r3, #1
 8000428:	9302      	str	r3, [sp, #8]
 800042a:	2300      	movs	r3, #0
 800042c:	9301      	str	r3, [sp, #4]
 800042e:	2300      	movs	r3, #0
 8000430:	9300      	str	r3, [sp, #0]
 8000432:	2309      	movs	r3, #9
 8000434:	2216      	movs	r2, #22
 8000436:	2114      	movs	r1, #20
 8000438:	200a      	movs	r0, #10
 800043a:	f000 fc65 	bl	8000d08 <Alarm_Set>
    false, // true = ON, false = OFF 
     1     // Slot number of the alarm in the EEPROM module (0-9)
  );  

  // Initially retrieve the alarm values from the EEPROM module
  for (int i = 0; i <= 10; i++)
 800043e:	2300      	movs	r3, #0
 8000440:	60fb      	str	r3, [r7, #12]
 8000442:	e00c      	b.n	800045e <main+0x6e>
  {
    Alarm_Get(i, &alarm_get_data[i]);
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	b2da      	uxtb	r2, r3
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	009b      	lsls	r3, r3, #2
 800044c:	499b      	ldr	r1, [pc, #620]	@ (80006bc <main+0x2cc>)
 800044e:	440b      	add	r3, r1
 8000450:	4619      	mov	r1, r3
 8000452:	4610      	mov	r0, r2
 8000454:	f000 fca8 	bl	8000da8 <Alarm_Get>
  for (int i = 0; i <= 10; i++)
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	3301      	adds	r3, #1
 800045c:	60fb      	str	r3, [r7, #12]
 800045e:	68fb      	ldr	r3, [r7, #12]
 8000460:	2b0a      	cmp	r3, #10
 8000462:	ddef      	ble.n	8000444 <main+0x54>
  }

  // Initialize the UART module to receive data
  //    HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size);
  HAL_UART_Receive_IT(&huart1, uart_rx_data, 2);
 8000464:	2202      	movs	r2, #2
 8000466:	4996      	ldr	r1, [pc, #600]	@ (80006c0 <main+0x2d0>)
 8000468:	4896      	ldr	r0, [pc, #600]	@ (80006c4 <main+0x2d4>)
 800046a:	f003 fd07 	bl	8003e7c <HAL_UART_Receive_IT>

  // Initialize the ADC module to monitor battery voltage
  //    HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc);
  HAL_ADC_Start_IT(&hadc1);
 800046e:	4896      	ldr	r0, [pc, #600]	@ (80006c8 <main+0x2d8>)
 8000470:	f001 f8ee 	bl	8001650 <HAL_ADC_Start_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    // Check if the Button 1 Interrupt Flag is set (Button 1 Interrupt Flag) on PB12
    if (button1.int_flag)
 8000474:	4b95      	ldr	r3, [pc, #596]	@ (80006cc <main+0x2dc>)
 8000476:	7b1b      	ldrb	r3, [r3, #12]
 8000478:	b2db      	uxtb	r3, r3
 800047a:	2b00      	cmp	r3, #0
 800047c:	d01a      	beq.n	80004b4 <main+0xc4>
    {
      // Handle button 1 press event
      //    void Button_Debounce(BUTTON *button)
      Button_Debounce(&button1);
 800047e:	4893      	ldr	r0, [pc, #588]	@ (80006cc <main+0x2dc>)
 8000480:	f000 fd4e 	bl	8000f20 <Button_Debounce>

      // Check if the button is pressed (LOW)
      if (button1.press_flag)
 8000484:	4b91      	ldr	r3, [pc, #580]	@ (80006cc <main+0x2dc>)
 8000486:	7b5b      	ldrb	r3, [r3, #13]
 8000488:	b2db      	uxtb	r3, r3
 800048a:	2b00      	cmp	r3, #0
 800048c:	d00f      	beq.n	80004ae <main+0xbe>
        //      3: day of the week, or date of the month
        //      4: selection: date of month, day of week, not used
        //      5: ON/OFF state of the alarm
        //      6: slot number of the alarm in the EEPROM module (0-9)
        
        if (debug_button_counter[0] < 6)
 800048e:	4b90      	ldr	r3, [pc, #576]	@ (80006d0 <main+0x2e0>)
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	b2db      	uxtb	r3, r3
 8000494:	2b05      	cmp	r3, #5
 8000496:	d807      	bhi.n	80004a8 <main+0xb8>
        {
          debug_button_counter[0] += 1;
 8000498:	4b8d      	ldr	r3, [pc, #564]	@ (80006d0 <main+0x2e0>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	b2db      	uxtb	r3, r3
 800049e:	3301      	adds	r3, #1
 80004a0:	b2da      	uxtb	r2, r3
 80004a2:	4b8b      	ldr	r3, [pc, #556]	@ (80006d0 <main+0x2e0>)
 80004a4:	701a      	strb	r2, [r3, #0]
 80004a6:	e002      	b.n	80004ae <main+0xbe>
        }
        else
        {
          debug_button_counter[0] = 0;
 80004a8:	4b89      	ldr	r3, [pc, #548]	@ (80006d0 <main+0x2e0>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	701a      	strb	r2, [r3, #0]
        }
      }
    
      // Reset the Button 1 Press Flag
      button1.press_flag = false;
 80004ae:	4b87      	ldr	r3, [pc, #540]	@ (80006cc <main+0x2dc>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	735a      	strb	r2, [r3, #13]
    }

    // Check if the Button 2 Interrupt Flag is set (Button 2 Interrupt Flag) on PB13
    if (button2.int_flag)
 80004b4:	4b87      	ldr	r3, [pc, #540]	@ (80006d4 <main+0x2e4>)
 80004b6:	7b1b      	ldrb	r3, [r3, #12]
 80004b8:	b2db      	uxtb	r3, r3
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	f000 8094 	beq.w	80005e8 <main+0x1f8>
    {
      // Handle button 2 press event
      //    void Button_Debounce(BUTTON *button)
      Button_Debounce(&button2);
 80004c0:	4884      	ldr	r0, [pc, #528]	@ (80006d4 <main+0x2e4>)
 80004c2:	f000 fd2d 	bl	8000f20 <Button_Debounce>

      // Check if the button is pressed (LOW)
      if (button2.press_flag)
 80004c6:	4b83      	ldr	r3, [pc, #524]	@ (80006d4 <main+0x2e4>)
 80004c8:	7b5b      	ldrb	r3, [r3, #13]
 80004ca:	b2db      	uxtb	r3, r3
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	f000 8088 	beq.w	80005e2 <main+0x1f2>
      {
        // Debugging: Track the number of button presses
        debug_button_counter[1] += 1;
 80004d2:	4b7f      	ldr	r3, [pc, #508]	@ (80006d0 <main+0x2e0>)
 80004d4:	785b      	ldrb	r3, [r3, #1]
 80004d6:	b2db      	uxtb	r3, r3
 80004d8:	3301      	adds	r3, #1
 80004da:	b2da      	uxtb	r2, r3
 80004dc:	4b7c      	ldr	r3, [pc, #496]	@ (80006d0 <main+0x2e0>)
 80004de:	705a      	strb	r2, [r3, #1]

        // Debugging: Increment the alarm value based on the button press count
        switch (debug_button_counter[0])
 80004e0:	4b7b      	ldr	r3, [pc, #492]	@ (80006d0 <main+0x2e0>)
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	b2db      	uxtb	r3, r3
 80004e6:	2b06      	cmp	r3, #6
 80004e8:	d87a      	bhi.n	80005e0 <main+0x1f0>
 80004ea:	a201      	add	r2, pc, #4	@ (adr r2, 80004f0 <main+0x100>)
 80004ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004f0:	0800050d 	.word	0x0800050d
 80004f4:	0800052b 	.word	0x0800052b
 80004f8:	08000549 	.word	0x08000549
 80004fc:	08000567 	.word	0x08000567
 8000500:	08000585 	.word	0x08000585
 8000504:	080005a3 	.word	0x080005a3
 8000508:	080005c3 	.word	0x080005c3
        {
          case 0:
            // Debugging: Increment the seconds value of the alarm
            if (debug_alarm_select.second < 59)
 800050c:	4b72      	ldr	r3, [pc, #456]	@ (80006d8 <main+0x2e8>)
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	2b3a      	cmp	r3, #58	@ 0x3a
 8000512:	d806      	bhi.n	8000522 <main+0x132>
            {
              debug_alarm_select.second += 1;
 8000514:	4b70      	ldr	r3, [pc, #448]	@ (80006d8 <main+0x2e8>)
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	3301      	adds	r3, #1
 800051a:	b2da      	uxtb	r2, r3
 800051c:	4b6e      	ldr	r3, [pc, #440]	@ (80006d8 <main+0x2e8>)
 800051e:	701a      	strb	r2, [r3, #0]
            }
            else
            {
              debug_alarm_select.second = 0;
            }
          break;
 8000520:	e05f      	b.n	80005e2 <main+0x1f2>
              debug_alarm_select.second = 0;
 8000522:	4b6d      	ldr	r3, [pc, #436]	@ (80006d8 <main+0x2e8>)
 8000524:	2200      	movs	r2, #0
 8000526:	701a      	strb	r2, [r3, #0]
          break;
 8000528:	e05b      	b.n	80005e2 <main+0x1f2>
          
          case 1:
            // Debugging: Increment the minutes value of the alarm
            if (debug_alarm_select.minute < 59)
 800052a:	4b6b      	ldr	r3, [pc, #428]	@ (80006d8 <main+0x2e8>)
 800052c:	785b      	ldrb	r3, [r3, #1]
 800052e:	2b3a      	cmp	r3, #58	@ 0x3a
 8000530:	d806      	bhi.n	8000540 <main+0x150>
            {
              debug_alarm_select.minute += 1;
 8000532:	4b69      	ldr	r3, [pc, #420]	@ (80006d8 <main+0x2e8>)
 8000534:	785b      	ldrb	r3, [r3, #1]
 8000536:	3301      	adds	r3, #1
 8000538:	b2da      	uxtb	r2, r3
 800053a:	4b67      	ldr	r3, [pc, #412]	@ (80006d8 <main+0x2e8>)
 800053c:	705a      	strb	r2, [r3, #1]
            }
            else
            {
              debug_alarm_select.minute = 0;
            }
          break;
 800053e:	e050      	b.n	80005e2 <main+0x1f2>
              debug_alarm_select.minute = 0;
 8000540:	4b65      	ldr	r3, [pc, #404]	@ (80006d8 <main+0x2e8>)
 8000542:	2200      	movs	r2, #0
 8000544:	705a      	strb	r2, [r3, #1]
          break;
 8000546:	e04c      	b.n	80005e2 <main+0x1f2>

          case 2:
            // Debugging: Increment the hours value of the alarm
            if (debug_alarm_select.hour < 23)
 8000548:	4b63      	ldr	r3, [pc, #396]	@ (80006d8 <main+0x2e8>)
 800054a:	789b      	ldrb	r3, [r3, #2]
 800054c:	2b16      	cmp	r3, #22
 800054e:	d806      	bhi.n	800055e <main+0x16e>
            {
              debug_alarm_select.hour += 1;
 8000550:	4b61      	ldr	r3, [pc, #388]	@ (80006d8 <main+0x2e8>)
 8000552:	789b      	ldrb	r3, [r3, #2]
 8000554:	3301      	adds	r3, #1
 8000556:	b2da      	uxtb	r2, r3
 8000558:	4b5f      	ldr	r3, [pc, #380]	@ (80006d8 <main+0x2e8>)
 800055a:	709a      	strb	r2, [r3, #2]
            }
            else
            {
              debug_alarm_select.hour = 0;
            }
          break;
 800055c:	e041      	b.n	80005e2 <main+0x1f2>
              debug_alarm_select.hour = 0;
 800055e:	4b5e      	ldr	r3, [pc, #376]	@ (80006d8 <main+0x2e8>)
 8000560:	2200      	movs	r2, #0
 8000562:	709a      	strb	r2, [r3, #2]
          break;
 8000564:	e03d      	b.n	80005e2 <main+0x1f2>

          case 3:
            // Debugging: Increment the day of the week or date of the month value of the alarm
            if (debug_alarm_select.dow_dom < 31)
 8000566:	4b5c      	ldr	r3, [pc, #368]	@ (80006d8 <main+0x2e8>)
 8000568:	78db      	ldrb	r3, [r3, #3]
 800056a:	2b1e      	cmp	r3, #30
 800056c:	d806      	bhi.n	800057c <main+0x18c>
            {
              debug_alarm_select.dow_dom += 1;
 800056e:	4b5a      	ldr	r3, [pc, #360]	@ (80006d8 <main+0x2e8>)
 8000570:	78db      	ldrb	r3, [r3, #3]
 8000572:	3301      	adds	r3, #1
 8000574:	b2da      	uxtb	r2, r3
 8000576:	4b58      	ldr	r3, [pc, #352]	@ (80006d8 <main+0x2e8>)
 8000578:	70da      	strb	r2, [r3, #3]
            }
            else
            {
              debug_alarm_select.dow_dom = 0;
            }
          break;
 800057a:	e032      	b.n	80005e2 <main+0x1f2>
              debug_alarm_select.dow_dom = 0;
 800057c:	4b56      	ldr	r3, [pc, #344]	@ (80006d8 <main+0x2e8>)
 800057e:	2200      	movs	r2, #0
 8000580:	70da      	strb	r2, [r3, #3]
          break;
 8000582:	e02e      	b.n	80005e2 <main+0x1f2>

          case 4:
            // Debugging: Increment the selection value of the alarm (date of month, day of week, not used)
            if (debug_alarm_select.dy_dt < 2)
 8000584:	4b54      	ldr	r3, [pc, #336]	@ (80006d8 <main+0x2e8>)
 8000586:	791b      	ldrb	r3, [r3, #4]
 8000588:	2b01      	cmp	r3, #1
 800058a:	d806      	bhi.n	800059a <main+0x1aa>
            {
              debug_alarm_select.dy_dt += 1;
 800058c:	4b52      	ldr	r3, [pc, #328]	@ (80006d8 <main+0x2e8>)
 800058e:	791b      	ldrb	r3, [r3, #4]
 8000590:	3301      	adds	r3, #1
 8000592:	b2da      	uxtb	r2, r3
 8000594:	4b50      	ldr	r3, [pc, #320]	@ (80006d8 <main+0x2e8>)
 8000596:	711a      	strb	r2, [r3, #4]
            }
            else
            {
              debug_alarm_select.dy_dt = 0;
            }
          break;
 8000598:	e023      	b.n	80005e2 <main+0x1f2>
              debug_alarm_select.dy_dt = 0;
 800059a:	4b4f      	ldr	r3, [pc, #316]	@ (80006d8 <main+0x2e8>)
 800059c:	2200      	movs	r2, #0
 800059e:	711a      	strb	r2, [r3, #4]
          break;
 80005a0:	e01f      	b.n	80005e2 <main+0x1f2>

          case 5:
            // Debugging: Toggle the ON/OFF state of the alarm
            debug_alarm_select.on_off = !debug_alarm_select.on_off;
 80005a2:	4b4d      	ldr	r3, [pc, #308]	@ (80006d8 <main+0x2e8>)
 80005a4:	795b      	ldrb	r3, [r3, #5]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	bf14      	ite	ne
 80005aa:	2301      	movne	r3, #1
 80005ac:	2300      	moveq	r3, #0
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	f083 0301 	eor.w	r3, r3, #1
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	f003 0301 	and.w	r3, r3, #1
 80005ba:	b2da      	uxtb	r2, r3
 80005bc:	4b46      	ldr	r3, [pc, #280]	@ (80006d8 <main+0x2e8>)
 80005be:	715a      	strb	r2, [r3, #5]
          break;
 80005c0:	e00f      	b.n	80005e2 <main+0x1f2>

          case 6:
            // Debugging: Increment the slot number of the alarm in the EEPROM module
           if (debug_alarm_select.slot < 9)
 80005c2:	4b45      	ldr	r3, [pc, #276]	@ (80006d8 <main+0x2e8>)
 80005c4:	799b      	ldrb	r3, [r3, #6]
 80005c6:	2b08      	cmp	r3, #8
 80005c8:	d806      	bhi.n	80005d8 <main+0x1e8>
            {
              debug_alarm_select.slot += 1;
 80005ca:	4b43      	ldr	r3, [pc, #268]	@ (80006d8 <main+0x2e8>)
 80005cc:	799b      	ldrb	r3, [r3, #6]
 80005ce:	3301      	adds	r3, #1
 80005d0:	b2da      	uxtb	r2, r3
 80005d2:	4b41      	ldr	r3, [pc, #260]	@ (80006d8 <main+0x2e8>)
 80005d4:	719a      	strb	r2, [r3, #6]
            }
            else
            {
              debug_alarm_select.slot = 0;
            }
          break;
 80005d6:	e004      	b.n	80005e2 <main+0x1f2>
              debug_alarm_select.slot = 0;
 80005d8:	4b3f      	ldr	r3, [pc, #252]	@ (80006d8 <main+0x2e8>)
 80005da:	2200      	movs	r2, #0
 80005dc:	719a      	strb	r2, [r3, #6]
          break;
 80005de:	e000      	b.n	80005e2 <main+0x1f2>

          default:
            // No operation needed for default case
          break;
 80005e0:	bf00      	nop
        }
      }
    
      // Reset the Button 2 Press Flag
      button2.press_flag = false;
 80005e2:	4b3c      	ldr	r3, [pc, #240]	@ (80006d4 <main+0x2e4>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	735a      	strb	r2, [r3, #13]
    }

    // Check if the Button 3 Interrupt Flag is set (Button 3 Interrupt Flag) on PB14
    if (button3.int_flag)
 80005e8:	4b3c      	ldr	r3, [pc, #240]	@ (80006dc <main+0x2ec>)
 80005ea:	7b1b      	ldrb	r3, [r3, #12]
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	f000 80a8 	beq.w	8000744 <main+0x354>
    {
      // Handle button 3 press event
      //    void Button_Debounce(BUTTON *button)
      Button_Debounce(&button3);
 80005f4:	4839      	ldr	r0, [pc, #228]	@ (80006dc <main+0x2ec>)
 80005f6:	f000 fc93 	bl	8000f20 <Button_Debounce>

      // Check if the button is pressed (LOW)
      if (button3.press_flag)
 80005fa:	4b38      	ldr	r3, [pc, #224]	@ (80006dc <main+0x2ec>)
 80005fc:	7b5b      	ldrb	r3, [r3, #13]
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	2b00      	cmp	r3, #0
 8000602:	f000 809c 	beq.w	800073e <main+0x34e>
      {
        // Debugging: Track the number of button presses
        debug_button_counter[2] += 1;
 8000606:	4b32      	ldr	r3, [pc, #200]	@ (80006d0 <main+0x2e0>)
 8000608:	789b      	ldrb	r3, [r3, #2]
 800060a:	b2db      	uxtb	r3, r3
 800060c:	3301      	adds	r3, #1
 800060e:	b2da      	uxtb	r2, r3
 8000610:	4b2f      	ldr	r3, [pc, #188]	@ (80006d0 <main+0x2e0>)
 8000612:	709a      	strb	r2, [r3, #2]

        switch(debug_button_counter[0])
 8000614:	4b2e      	ldr	r3, [pc, #184]	@ (80006d0 <main+0x2e0>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	b2db      	uxtb	r3, r3
 800061a:	2b06      	cmp	r3, #6
 800061c:	f200 808e 	bhi.w	800073c <main+0x34c>
 8000620:	a201      	add	r2, pc, #4	@ (adr r2, 8000628 <main+0x238>)
 8000622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000626:	bf00      	nop
 8000628:	08000645 	.word	0x08000645
 800062c:	08000663 	.word	0x08000663
 8000630:	08000681 	.word	0x08000681
 8000634:	0800069f 	.word	0x0800069f
 8000638:	080006e1 	.word	0x080006e1
 800063c:	080006ff 	.word	0x080006ff
 8000640:	0800071f 	.word	0x0800071f
        {
          case 0:
            // Debugging: Decrement the seconds value of the alarm
            if (debug_alarm_select.second > 0)
 8000644:	4b24      	ldr	r3, [pc, #144]	@ (80006d8 <main+0x2e8>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d006      	beq.n	800065a <main+0x26a>
            {
              debug_alarm_select.second -= 1;
 800064c:	4b22      	ldr	r3, [pc, #136]	@ (80006d8 <main+0x2e8>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	3b01      	subs	r3, #1
 8000652:	b2da      	uxtb	r2, r3
 8000654:	4b20      	ldr	r3, [pc, #128]	@ (80006d8 <main+0x2e8>)
 8000656:	701a      	strb	r2, [r3, #0]
            }
            else
            {
              debug_alarm_select.second = 59;
            }
          break;
 8000658:	e071      	b.n	800073e <main+0x34e>
              debug_alarm_select.second = 59;
 800065a:	4b1f      	ldr	r3, [pc, #124]	@ (80006d8 <main+0x2e8>)
 800065c:	223b      	movs	r2, #59	@ 0x3b
 800065e:	701a      	strb	r2, [r3, #0]
          break;
 8000660:	e06d      	b.n	800073e <main+0x34e>

          case 1:
            // Debugging: Decrement the minutes value of the alarm
            if (debug_alarm_select.minute > 0)
 8000662:	4b1d      	ldr	r3, [pc, #116]	@ (80006d8 <main+0x2e8>)
 8000664:	785b      	ldrb	r3, [r3, #1]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d006      	beq.n	8000678 <main+0x288>
            {
              debug_alarm_select.minute -= 1;
 800066a:	4b1b      	ldr	r3, [pc, #108]	@ (80006d8 <main+0x2e8>)
 800066c:	785b      	ldrb	r3, [r3, #1]
 800066e:	3b01      	subs	r3, #1
 8000670:	b2da      	uxtb	r2, r3
 8000672:	4b19      	ldr	r3, [pc, #100]	@ (80006d8 <main+0x2e8>)
 8000674:	705a      	strb	r2, [r3, #1]
            }
            else
            {
              debug_alarm_select.minute = 59;
            }
          break;
 8000676:	e062      	b.n	800073e <main+0x34e>
              debug_alarm_select.minute = 59;
 8000678:	4b17      	ldr	r3, [pc, #92]	@ (80006d8 <main+0x2e8>)
 800067a:	223b      	movs	r2, #59	@ 0x3b
 800067c:	705a      	strb	r2, [r3, #1]
          break;
 800067e:	e05e      	b.n	800073e <main+0x34e>

          case 2:
            // Debugging: Decrement the hours value of the alarm
            if (debug_alarm_select.hour > 0)
 8000680:	4b15      	ldr	r3, [pc, #84]	@ (80006d8 <main+0x2e8>)
 8000682:	789b      	ldrb	r3, [r3, #2]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d006      	beq.n	8000696 <main+0x2a6>
            {
              debug_alarm_select.hour -= 1;
 8000688:	4b13      	ldr	r3, [pc, #76]	@ (80006d8 <main+0x2e8>)
 800068a:	789b      	ldrb	r3, [r3, #2]
 800068c:	3b01      	subs	r3, #1
 800068e:	b2da      	uxtb	r2, r3
 8000690:	4b11      	ldr	r3, [pc, #68]	@ (80006d8 <main+0x2e8>)
 8000692:	709a      	strb	r2, [r3, #2]
            }
            else
            {
              debug_alarm_select.hour = 23;
            }
          break;
 8000694:	e053      	b.n	800073e <main+0x34e>
              debug_alarm_select.hour = 23;
 8000696:	4b10      	ldr	r3, [pc, #64]	@ (80006d8 <main+0x2e8>)
 8000698:	2217      	movs	r2, #23
 800069a:	709a      	strb	r2, [r3, #2]
          break;
 800069c:	e04f      	b.n	800073e <main+0x34e>

          case 3:
            // Debugging: Decrement the day of the week or date of the month value of the alarm
            if (debug_alarm_select.dow_dom > 0)
 800069e:	4b0e      	ldr	r3, [pc, #56]	@ (80006d8 <main+0x2e8>)
 80006a0:	78db      	ldrb	r3, [r3, #3]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d006      	beq.n	80006b4 <main+0x2c4>
            {
              debug_alarm_select.dow_dom -= 1;
 80006a6:	4b0c      	ldr	r3, [pc, #48]	@ (80006d8 <main+0x2e8>)
 80006a8:	78db      	ldrb	r3, [r3, #3]
 80006aa:	3b01      	subs	r3, #1
 80006ac:	b2da      	uxtb	r2, r3
 80006ae:	4b0a      	ldr	r3, [pc, #40]	@ (80006d8 <main+0x2e8>)
 80006b0:	70da      	strb	r2, [r3, #3]
            }
            else
            {
              debug_alarm_select.dow_dom = 31;
            }
          break;
 80006b2:	e044      	b.n	800073e <main+0x34e>
              debug_alarm_select.dow_dom = 31;
 80006b4:	4b08      	ldr	r3, [pc, #32]	@ (80006d8 <main+0x2e8>)
 80006b6:	221f      	movs	r2, #31
 80006b8:	70da      	strb	r2, [r3, #3]
          break;
 80006ba:	e040      	b.n	800073e <main+0x34e>
 80006bc:	20000104 	.word	0x20000104
 80006c0:	2000014c 	.word	0x2000014c
 80006c4:	20000150 	.word	0x20000150
 80006c8:	20000078 	.word	0x20000078
 80006cc:	20000000 	.word	0x20000000
 80006d0:	20000134 	.word	0x20000134
 80006d4:	20000010 	.word	0x20000010
 80006d8:	2000013c 	.word	0x2000013c
 80006dc:	20000020 	.word	0x20000020

          case 4:
            // Debugging: Decrement the selection value of the alarm (date of month, day of week, not used)
            if (debug_alarm_select.dy_dt > 0)
 80006e0:	4b65      	ldr	r3, [pc, #404]	@ (8000878 <main+0x488>)
 80006e2:	791b      	ldrb	r3, [r3, #4]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d006      	beq.n	80006f6 <main+0x306>
            {
              debug_alarm_select.dy_dt -= 1;
 80006e8:	4b63      	ldr	r3, [pc, #396]	@ (8000878 <main+0x488>)
 80006ea:	791b      	ldrb	r3, [r3, #4]
 80006ec:	3b01      	subs	r3, #1
 80006ee:	b2da      	uxtb	r2, r3
 80006f0:	4b61      	ldr	r3, [pc, #388]	@ (8000878 <main+0x488>)
 80006f2:	711a      	strb	r2, [r3, #4]
            }
            else
            {
              debug_alarm_select.dy_dt = 2;
            }
          break;
 80006f4:	e023      	b.n	800073e <main+0x34e>
              debug_alarm_select.dy_dt = 2;
 80006f6:	4b60      	ldr	r3, [pc, #384]	@ (8000878 <main+0x488>)
 80006f8:	2202      	movs	r2, #2
 80006fa:	711a      	strb	r2, [r3, #4]
          break;
 80006fc:	e01f      	b.n	800073e <main+0x34e>

          case 5:
            // Debugging: Toggle the ON/OFF state of the alarm
            debug_alarm_select.on_off = !debug_alarm_select.on_off;
 80006fe:	4b5e      	ldr	r3, [pc, #376]	@ (8000878 <main+0x488>)
 8000700:	795b      	ldrb	r3, [r3, #5]
 8000702:	2b00      	cmp	r3, #0
 8000704:	bf14      	ite	ne
 8000706:	2301      	movne	r3, #1
 8000708:	2300      	moveq	r3, #0
 800070a:	b2db      	uxtb	r3, r3
 800070c:	f083 0301 	eor.w	r3, r3, #1
 8000710:	b2db      	uxtb	r3, r3
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	b2da      	uxtb	r2, r3
 8000718:	4b57      	ldr	r3, [pc, #348]	@ (8000878 <main+0x488>)
 800071a:	715a      	strb	r2, [r3, #5]
          break;
 800071c:	e00f      	b.n	800073e <main+0x34e>

          case 6:
            // Debugging: Decrement the slot number of the alarm in the EEPROM module
            if (debug_alarm_select.slot > 0)
 800071e:	4b56      	ldr	r3, [pc, #344]	@ (8000878 <main+0x488>)
 8000720:	799b      	ldrb	r3, [r3, #6]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d006      	beq.n	8000734 <main+0x344>
            {
              debug_alarm_select.slot -= 1;
 8000726:	4b54      	ldr	r3, [pc, #336]	@ (8000878 <main+0x488>)
 8000728:	799b      	ldrb	r3, [r3, #6]
 800072a:	3b01      	subs	r3, #1
 800072c:	b2da      	uxtb	r2, r3
 800072e:	4b52      	ldr	r3, [pc, #328]	@ (8000878 <main+0x488>)
 8000730:	719a      	strb	r2, [r3, #6]
            }
            else
            {
              debug_alarm_select.slot = 9;
            }
          break;
 8000732:	e004      	b.n	800073e <main+0x34e>
              debug_alarm_select.slot = 9;
 8000734:	4b50      	ldr	r3, [pc, #320]	@ (8000878 <main+0x488>)
 8000736:	2209      	movs	r2, #9
 8000738:	719a      	strb	r2, [r3, #6]
          break;
 800073a:	e000      	b.n	800073e <main+0x34e>

          default:
            // No operation needed for default case
          break;
 800073c:	bf00      	nop
        }
      }
    
      // Reset the Button 3 Press Flag
      button3.press_flag = false;
 800073e:	4b4f      	ldr	r3, [pc, #316]	@ (800087c <main+0x48c>)
 8000740:	2200      	movs	r2, #0
 8000742:	735a      	strb	r2, [r3, #13]
    }

    // Check if the Button 4 Interrupt Flag is set (Button 4 Interrupt Flag) on PB15
    if (button4.int_flag)
 8000744:	4b4e      	ldr	r3, [pc, #312]	@ (8000880 <main+0x490>)
 8000746:	7b1b      	ldrb	r3, [r3, #12]
 8000748:	b2db      	uxtb	r3, r3
 800074a:	2b00      	cmp	r3, #0
 800074c:	d032      	beq.n	80007b4 <main+0x3c4>
    {
      // Handle button 4 press event
      //    void Button_Debounce(BUTTON *button)
      Button_Debounce(&button4);
 800074e:	484c      	ldr	r0, [pc, #304]	@ (8000880 <main+0x490>)
 8000750:	f000 fbe6 	bl	8000f20 <Button_Debounce>

      // Check if the button is pressed (LOW)
      if (button4.press_flag)
 8000754:	4b4a      	ldr	r3, [pc, #296]	@ (8000880 <main+0x490>)
 8000756:	7b5b      	ldrb	r3, [r3, #13]
 8000758:	b2db      	uxtb	r3, r3
 800075a:	2b00      	cmp	r3, #0
 800075c:	d027      	beq.n	80007ae <main+0x3be>
      {
        // Debugging: Track the number of button presses
        debug_button_counter[3] += 1;
 800075e:	4b49      	ldr	r3, [pc, #292]	@ (8000884 <main+0x494>)
 8000760:	78db      	ldrb	r3, [r3, #3]
 8000762:	b2db      	uxtb	r3, r3
 8000764:	3301      	adds	r3, #1
 8000766:	b2da      	uxtb	r2, r3
 8000768:	4b46      	ldr	r3, [pc, #280]	@ (8000884 <main+0x494>)
 800076a:	70da      	strb	r2, [r3, #3]

        // Debugging: Store the alarm values to the EEPROM module
        //   void Alarm_Set (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow_dom, uint8_t dy_dt, bool on_off, uint8_t slot)
        Alarm_Set
 800076c:	4b42      	ldr	r3, [pc, #264]	@ (8000878 <main+0x488>)
 800076e:	7818      	ldrb	r0, [r3, #0]
 8000770:	4b41      	ldr	r3, [pc, #260]	@ (8000878 <main+0x488>)
 8000772:	785c      	ldrb	r4, [r3, #1]
 8000774:	4b40      	ldr	r3, [pc, #256]	@ (8000878 <main+0x488>)
 8000776:	789d      	ldrb	r5, [r3, #2]
 8000778:	4b3f      	ldr	r3, [pc, #252]	@ (8000878 <main+0x488>)
 800077a:	78de      	ldrb	r6, [r3, #3]
 800077c:	4b3e      	ldr	r3, [pc, #248]	@ (8000878 <main+0x488>)
 800077e:	791b      	ldrb	r3, [r3, #4]
 8000780:	4a3d      	ldr	r2, [pc, #244]	@ (8000878 <main+0x488>)
 8000782:	7952      	ldrb	r2, [r2, #5]
 8000784:	493c      	ldr	r1, [pc, #240]	@ (8000878 <main+0x488>)
 8000786:	7989      	ldrb	r1, [r1, #6]
 8000788:	9102      	str	r1, [sp, #8]
 800078a:	9201      	str	r2, [sp, #4]
 800078c:	9300      	str	r3, [sp, #0]
 800078e:	4633      	mov	r3, r6
 8000790:	462a      	mov	r2, r5
 8000792:	4621      	mov	r1, r4
 8000794:	f000 fab8 	bl	8000d08 <Alarm_Set>
          debug_alarm_select.dy_dt,  // Select: 0 = date of month, 1 = day of week, 2 = not used
          debug_alarm_select.on_off, // true = ON, false = OFF 
          debug_alarm_select.slot    // Slot number of the alarm in the EEPROM module (0-9)
        );

        Alarm_Get(debug_alarm_select.slot, &alarm_get_data[debug_alarm_select.slot]);
 8000798:	4b37      	ldr	r3, [pc, #220]	@ (8000878 <main+0x488>)
 800079a:	799a      	ldrb	r2, [r3, #6]
 800079c:	4b36      	ldr	r3, [pc, #216]	@ (8000878 <main+0x488>)
 800079e:	799b      	ldrb	r3, [r3, #6]
 80007a0:	009b      	lsls	r3, r3, #2
 80007a2:	4939      	ldr	r1, [pc, #228]	@ (8000888 <main+0x498>)
 80007a4:	440b      	add	r3, r1
 80007a6:	4619      	mov	r1, r3
 80007a8:	4610      	mov	r0, r2
 80007aa:	f000 fafd 	bl	8000da8 <Alarm_Get>
      }
    
      // Reset the Button 4 Press Flag
      button4.press_flag = false;
 80007ae:	4b34      	ldr	r3, [pc, #208]	@ (8000880 <main+0x490>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	735a      	strb	r2, [r3, #13]
    }

    // Check if the Button 5 Interrupt Flag is set (Button 5 Interrupt Flag) on PA8
    if (button5.int_flag)
 80007b4:	4b35      	ldr	r3, [pc, #212]	@ (800088c <main+0x49c>)
 80007b6:	7b1b      	ldrb	r3, [r3, #12]
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d032      	beq.n	8000824 <main+0x434>
    {
      // Handle button 5 press event
      //    void Button_Debounce(BUTTON *button)
      Button_Debounce(&button5);
 80007be:	4833      	ldr	r0, [pc, #204]	@ (800088c <main+0x49c>)
 80007c0:	f000 fbae 	bl	8000f20 <Button_Debounce>

      // Check if the button is pressed (LOW)
      if (button5.press_flag)
 80007c4:	4b31      	ldr	r3, [pc, #196]	@ (800088c <main+0x49c>)
 80007c6:	7b5b      	ldrb	r3, [r3, #13]
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d027      	beq.n	800081e <main+0x42e>
      {
        // Debugging: Track the number of button presses
        debug_button_counter[4] += 1;
 80007ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000884 <main+0x494>)
 80007d0:	791b      	ldrb	r3, [r3, #4]
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	3301      	adds	r3, #1
 80007d6:	b2da      	uxtb	r2, r3
 80007d8:	4b2a      	ldr	r3, [pc, #168]	@ (8000884 <main+0x494>)
 80007da:	711a      	strb	r2, [r3, #4]

        // Debugging: Clear all alarms in the EEPROM module
        for (int i = 0; i < 10; i++)
 80007dc:	2300      	movs	r3, #0
 80007de:	60bb      	str	r3, [r7, #8]
 80007e0:	e007      	b.n	80007f2 <main+0x402>
        {
          Alarm_Clear(i);
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	4618      	mov	r0, r3
 80007e8:	f000 fb0c 	bl	8000e04 <Alarm_Clear>
        for (int i = 0; i < 10; i++)
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	3301      	adds	r3, #1
 80007f0:	60bb      	str	r3, [r7, #8]
 80007f2:	68bb      	ldr	r3, [r7, #8]
 80007f4:	2b09      	cmp	r3, #9
 80007f6:	ddf4      	ble.n	80007e2 <main+0x3f2>
        }

        for (int i = 0; i <= 10; i++)
 80007f8:	2300      	movs	r3, #0
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	e00c      	b.n	8000818 <main+0x428>
        {
          Alarm_Get(i, &alarm_get_data[i]);
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	b2da      	uxtb	r2, r3
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	009b      	lsls	r3, r3, #2
 8000806:	4920      	ldr	r1, [pc, #128]	@ (8000888 <main+0x498>)
 8000808:	440b      	add	r3, r1
 800080a:	4619      	mov	r1, r3
 800080c:	4610      	mov	r0, r2
 800080e:	f000 facb 	bl	8000da8 <Alarm_Get>
        for (int i = 0; i <= 10; i++)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	3301      	adds	r3, #1
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2b0a      	cmp	r3, #10
 800081c:	ddef      	ble.n	80007fe <main+0x40e>
        }
      }
    
      // Reset the Button 5 Press Flag
      button5.press_flag = false;
 800081e:	4b1b      	ldr	r3, [pc, #108]	@ (800088c <main+0x49c>)
 8000820:	2200      	movs	r2, #0
 8000822:	735a      	strb	r2, [r3, #13]
    }

    // Check if the RTC Interrupt Flag is set (RTC Interrupt Flag) on PB4 (Activated every second)
    if (rtc_int_flag)
 8000824:	4b1a      	ldr	r3, [pc, #104]	@ (8000890 <main+0x4a0>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	b2db      	uxtb	r3, r3
 800082a:	2b00      	cmp	r3, #0
 800082c:	d009      	beq.n	8000842 <main+0x452>
    {
      // Retrieve the time values from the RTC module
      Time_Get(&time_get_data);
 800082e:	4819      	ldr	r0, [pc, #100]	@ (8000894 <main+0x4a4>)
 8000830:	f000 f926 	bl	8000a80 <Time_Get>
      
      // Check the alarms
      //   void Alarm_Check (ALARM *alarm_check_data, TIME *time_get_data)
      Alarm_Check(&alarm_check_data, &time_get_data);
 8000834:	4917      	ldr	r1, [pc, #92]	@ (8000894 <main+0x4a4>)
 8000836:	4818      	ldr	r0, [pc, #96]	@ (8000898 <main+0x4a8>)
 8000838:	f000 fb06 	bl	8000e48 <Alarm_Check>

      // Reset the RTC Interrupt Flag
      rtc_int_flag = false;
 800083c:	4b14      	ldr	r3, [pc, #80]	@ (8000890 <main+0x4a0>)
 800083e:	2200      	movs	r2, #0
 8000840:	701a      	strb	r2, [r3, #0]
    }

    // Check if the ADC interrupt flag is set (ADC Valid Flag)
    if (adc_valid_flag)
 8000842:	4b16      	ldr	r3, [pc, #88]	@ (800089c <main+0x4ac>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	b2db      	uxtb	r3, r3
 8000848:	2b00      	cmp	r3, #0
 800084a:	d005      	beq.n	8000858 <main+0x468>
	  {
      // Re-enable the ADC interrupt to continue monitoring ADC values
      HAL_ADC_Start_IT(&hadc1);
 800084c:	4814      	ldr	r0, [pc, #80]	@ (80008a0 <main+0x4b0>)
 800084e:	f000 feff 	bl	8001650 <HAL_ADC_Start_IT>

      // Delay for 100ms to allow the ADC to stabilize
      HAL_Delay(100);
 8000852:	2064      	movs	r0, #100	@ 0x64
 8000854:	f000 fe00 	bl	8001458 <HAL_Delay>
	  }

    // Check if the UART interrupt flag is set (UART Receive Flag)
    if (uart_rx_flag)
 8000858:	4b12      	ldr	r3, [pc, #72]	@ (80008a4 <main+0x4b4>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	b2db      	uxtb	r3, r3
 800085e:	2b00      	cmp	r3, #0
 8000860:	f43f ae08 	beq.w	8000474 <main+0x84>
	  {
      // Re-enable the UART interrupt to continue receiving data
      HAL_UART_Receive_IT(&huart1,uart_rx_data,2); 
 8000864:	2202      	movs	r2, #2
 8000866:	4910      	ldr	r1, [pc, #64]	@ (80008a8 <main+0x4b8>)
 8000868:	4810      	ldr	r0, [pc, #64]	@ (80008ac <main+0x4bc>)
 800086a:	f003 fb07 	bl	8003e7c <HAL_UART_Receive_IT>
      
      // Delay for 100ms to allow the UART to stabilize
      HAL_Delay(100);
 800086e:	2064      	movs	r0, #100	@ 0x64
 8000870:	f000 fdf2 	bl	8001458 <HAL_Delay>
    if (button1.int_flag)
 8000874:	e5fe      	b.n	8000474 <main+0x84>
 8000876:	bf00      	nop
 8000878:	2000013c 	.word	0x2000013c
 800087c:	20000020 	.word	0x20000020
 8000880:	20000030 	.word	0x20000030
 8000884:	20000134 	.word	0x20000134
 8000888:	20000104 	.word	0x20000104
 800088c:	20000040 	.word	0x20000040
 8000890:	20000130 	.word	0x20000130
 8000894:	200000fc 	.word	0x200000fc
 8000898:	2000012c 	.word	0x2000012c
 800089c:	20000143 	.word	0x20000143
 80008a0:	20000078 	.word	0x20000078
 80008a4:	20000148 	.word	0x20000148
 80008a8:	2000014c 	.word	0x2000014c
 80008ac:	20000150 	.word	0x20000150

080008b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b094      	sub	sp, #80	@ 0x50
 80008b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008ba:	2228      	movs	r2, #40	@ 0x28
 80008bc:	2100      	movs	r1, #0
 80008be:	4618      	mov	r0, r3
 80008c0:	f004 f814 	bl	80048ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008d4:	1d3b      	adds	r3, r7, #4
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008e0:	2301      	movs	r3, #1
 80008e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80008ea:	2300      	movs	r3, #0
 80008ec:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008ee:	2301      	movs	r3, #1
 80008f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008f2:	2302      	movs	r3, #2
 80008f4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008f6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80008fc:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000900:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000902:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000906:	4618      	mov	r0, r3
 8000908:	f002 fda2 	bl	8003450 <HAL_RCC_OscConfig>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000912:	f000 fbfd 	bl	8001110 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000916:	230f      	movs	r3, #15
 8000918:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800091a:	2302      	movs	r3, #2
 800091c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800091e:	2300      	movs	r3, #0
 8000920:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000922:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000926:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000928:	2300      	movs	r3, #0
 800092a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800092c:	f107 0314 	add.w	r3, r7, #20
 8000930:	2102      	movs	r1, #2
 8000932:	4618      	mov	r0, r3
 8000934:	f003 f80e 	bl	8003954 <HAL_RCC_ClockConfig>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800093e:	f000 fbe7 	bl	8001110 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000942:	2302      	movs	r3, #2
 8000944:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000946:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800094a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800094c:	1d3b      	adds	r3, r7, #4
 800094e:	4618      	mov	r0, r3
 8000950:	f003 f98e 	bl	8003c70 <HAL_RCCEx_PeriphCLKConfig>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800095a:	f000 fbd9 	bl	8001110 <Error_Handler>
  }
}
 800095e:	bf00      	nop
 8000960:	3750      	adds	r7, #80	@ 0x50
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
	...

08000968 <Dec_To_BCD>:
  * @brief  Convert a normal decimal number to Binary Coded Decimal (BCD).
  * @param  val: Decimal number to be converted.
  * @retval uint8_t: BCD representation of the input decimal number.
  */
uint8_t Dec_To_BCD(int val)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  return (uint8_t)( (val/10*16) + (val%10) );
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	4a0e      	ldr	r2, [pc, #56]	@ (80009ac <Dec_To_BCD+0x44>)
 8000974:	fb82 1203 	smull	r1, r2, r2, r3
 8000978:	1092      	asrs	r2, r2, #2
 800097a:	17db      	asrs	r3, r3, #31
 800097c:	1ad3      	subs	r3, r2, r3
 800097e:	b2db      	uxtb	r3, r3
 8000980:	011b      	lsls	r3, r3, #4
 8000982:	b2d8      	uxtb	r0, r3
 8000984:	687a      	ldr	r2, [r7, #4]
 8000986:	4b09      	ldr	r3, [pc, #36]	@ (80009ac <Dec_To_BCD+0x44>)
 8000988:	fb83 1302 	smull	r1, r3, r3, r2
 800098c:	1099      	asrs	r1, r3, #2
 800098e:	17d3      	asrs	r3, r2, #31
 8000990:	1ac9      	subs	r1, r1, r3
 8000992:	460b      	mov	r3, r1
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	440b      	add	r3, r1
 8000998:	005b      	lsls	r3, r3, #1
 800099a:	1ad1      	subs	r1, r2, r3
 800099c:	b2cb      	uxtb	r3, r1
 800099e:	4403      	add	r3, r0
 80009a0:	b2db      	uxtb	r3, r3
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bc80      	pop	{r7}
 80009aa:	4770      	bx	lr
 80009ac:	66666667 	.word	0x66666667

080009b0 <BCD_To_Dec>:
  * @brief  Convert a Binary Coded Decimal (BCD) value to a normal decimal number.
  * @param  val: BCD value to be converted.
  * @retval int: Decimal representation of the input BCD value.
  */
int BCD_To_Dec(uint8_t val)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	71fb      	strb	r3, [r7, #7]
  return (int)( (val/16*10) + (val%16) );
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	091b      	lsrs	r3, r3, #4
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	461a      	mov	r2, r3
 80009c2:	4613      	mov	r3, r2
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	4413      	add	r3, r2
 80009c8:	005b      	lsls	r3, r3, #1
 80009ca:	461a      	mov	r2, r3
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	f003 030f 	and.w	r3, r3, #15
 80009d2:	4413      	add	r3, r2
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	370c      	adds	r7, #12
 80009d8:	46bd      	mov	sp, r7
 80009da:	bc80      	pop	{r7}
 80009dc:	4770      	bx	lr
	...

080009e0 <Time_Set>:
  * @param  month: Month: 1-12
  * @param  year: Year: 0-99 (0 = 2000, 1 = 2001, ..., 99 = 2099)
  * @retval None
*/
void Time_Set (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom, uint8_t month, uint8_t year)
{
 80009e0:	b590      	push	{r4, r7, lr}
 80009e2:	b089      	sub	sp, #36	@ 0x24
 80009e4:	af04      	add	r7, sp, #16
 80009e6:	4604      	mov	r4, r0
 80009e8:	4608      	mov	r0, r1
 80009ea:	4611      	mov	r1, r2
 80009ec:	461a      	mov	r2, r3
 80009ee:	4623      	mov	r3, r4
 80009f0:	71fb      	strb	r3, [r7, #7]
 80009f2:	4603      	mov	r3, r0
 80009f4:	71bb      	strb	r3, [r7, #6]
 80009f6:	460b      	mov	r3, r1
 80009f8:	717b      	strb	r3, [r7, #5]
 80009fa:	4613      	mov	r3, r2
 80009fc:	713b      	strb	r3, [r7, #4]
	// A blank array (7 slots) to contain the time values
  uint8_t setTime[7];

  // Store the time values (converted in to BCD code) into the blank array
	setTime[0] = Dec_To_BCD(sec);
 80009fe:	79fb      	ldrb	r3, [r7, #7]
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff ffb1 	bl	8000968 <Dec_To_BCD>
 8000a06:	4603      	mov	r3, r0
 8000a08:	723b      	strb	r3, [r7, #8]
	setTime[1] = Dec_To_BCD(min);
 8000a0a:	79bb      	ldrb	r3, [r7, #6]
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff ffab 	bl	8000968 <Dec_To_BCD>
 8000a12:	4603      	mov	r3, r0
 8000a14:	727b      	strb	r3, [r7, #9]
	setTime[2] = Dec_To_BCD(hour);
 8000a16:	797b      	ldrb	r3, [r7, #5]
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff ffa5 	bl	8000968 <Dec_To_BCD>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	72bb      	strb	r3, [r7, #10]
	setTime[3] = Dec_To_BCD(dow);
 8000a22:	793b      	ldrb	r3, [r7, #4]
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff ff9f 	bl	8000968 <Dec_To_BCD>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	72fb      	strb	r3, [r7, #11]
	setTime[4] = Dec_To_BCD(dom);
 8000a2e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000a32:	4618      	mov	r0, r3
 8000a34:	f7ff ff98 	bl	8000968 <Dec_To_BCD>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	733b      	strb	r3, [r7, #12]
	setTime[5] = Dec_To_BCD(month);
 8000a3c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff ff91 	bl	8000968 <Dec_To_BCD>
 8000a46:	4603      	mov	r3, r0
 8000a48:	737b      	strb	r3, [r7, #13]
	setTime[6] = Dec_To_BCD(year);
 8000a4a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff ff8a 	bl	8000968 <Dec_To_BCD>
 8000a54:	4603      	mov	r3, r0
 8000a56:	73bb      	strb	r3, [r7, #14]

  // Send the array containing the time values to the RTC module through I2C interface at address 00h - 06h (size of value: 7 bytes)
  // HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
  //    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);	
  HAL_I2C_Mem_Write(DS3231_I2C, DS3231_ADDR, 0x00, 1, setTime, sizeof(setTime), 1000);
 8000a58:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a5c:	9302      	str	r3, [sp, #8]
 8000a5e:	2307      	movs	r3, #7
 8000a60:	9301      	str	r3, [sp, #4]
 8000a62:	f107 0308 	add.w	r3, r7, #8
 8000a66:	9300      	str	r3, [sp, #0]
 8000a68:	2301      	movs	r3, #1
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	21d0      	movs	r1, #208	@ 0xd0
 8000a6e:	4803      	ldr	r0, [pc, #12]	@ (8000a7c <Time_Set+0x9c>)
 8000a70:	f001 fdcc 	bl	800260c <HAL_I2C_Mem_Write>
}
 8000a74:	bf00      	nop
 8000a76:	3714      	adds	r7, #20
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd90      	pop	{r4, r7, pc}
 8000a7c:	200000a8 	.word	0x200000a8

08000a80 <Time_Get>:
  * @brief  Get time from the RTC module through I2C interface.
  * @param  time_get_data: Pointer to a TIME structure to store the retrieved time values.
  * @retval None
*/
void Time_Get (volatile TIME *time_get_data)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b088      	sub	sp, #32
 8000a84:	af04      	add	r7, sp, #16
 8000a86:	6078      	str	r0, [r7, #4]
  uint8_t getTime[7];

  // Receive the time values from the RTC module through I2C interface, then store them into the blank array (size of value: 7 bytes)
  // HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
  //    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);  
  HAL_I2C_Mem_Read(DS3231_I2C, DS3231_ADDR, 0x00, 1, getTime, sizeof(getTime), 1000);
 8000a88:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a8c:	9302      	str	r3, [sp, #8]
 8000a8e:	2307      	movs	r3, #7
 8000a90:	9301      	str	r3, [sp, #4]
 8000a92:	f107 0308 	add.w	r3, r7, #8
 8000a96:	9300      	str	r3, [sp, #0]
 8000a98:	2301      	movs	r3, #1
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	21d0      	movs	r1, #208	@ 0xd0
 8000a9e:	481f      	ldr	r0, [pc, #124]	@ (8000b1c <Time_Get+0x9c>)
 8000aa0:	f001 feae 	bl	8002800 <HAL_I2C_Mem_Read>

  // Store the time values (converted from BCD code to decimal) into the time variable
	time_get_data->second       = BCD_To_Dec(getTime[0]);
 8000aa4:	7a3b      	ldrb	r3, [r7, #8]
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff ff82 	bl	80009b0 <BCD_To_Dec>
 8000aac:	4603      	mov	r3, r0
 8000aae:	b2da      	uxtb	r2, r3
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	701a      	strb	r2, [r3, #0]
	time_get_data->minute       = BCD_To_Dec(getTime[1]);
 8000ab4:	7a7b      	ldrb	r3, [r7, #9]
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f7ff ff7a 	bl	80009b0 <BCD_To_Dec>
 8000abc:	4603      	mov	r3, r0
 8000abe:	b2da      	uxtb	r2, r3
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	705a      	strb	r2, [r3, #1]
	time_get_data->hour         = BCD_To_Dec(getTime[2]);
 8000ac4:	7abb      	ldrb	r3, [r7, #10]
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f7ff ff72 	bl	80009b0 <BCD_To_Dec>
 8000acc:	4603      	mov	r3, r0
 8000ace:	b2da      	uxtb	r2, r3
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	709a      	strb	r2, [r3, #2]
	time_get_data->dayofweek    = BCD_To_Dec(getTime[3]);
 8000ad4:	7afb      	ldrb	r3, [r7, #11]
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f7ff ff6a 	bl	80009b0 <BCD_To_Dec>
 8000adc:	4603      	mov	r3, r0
 8000ade:	b2da      	uxtb	r2, r3
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	70da      	strb	r2, [r3, #3]
	time_get_data->dateofmonth  = BCD_To_Dec(getTime[4]);
 8000ae4:	7b3b      	ldrb	r3, [r7, #12]
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f7ff ff62 	bl	80009b0 <BCD_To_Dec>
 8000aec:	4603      	mov	r3, r0
 8000aee:	b2da      	uxtb	r2, r3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	711a      	strb	r2, [r3, #4]
	time_get_data->month        = BCD_To_Dec(getTime[5]);
 8000af4:	7b7b      	ldrb	r3, [r7, #13]
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff ff5a 	bl	80009b0 <BCD_To_Dec>
 8000afc:	4603      	mov	r3, r0
 8000afe:	b2da      	uxtb	r2, r3
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	715a      	strb	r2, [r3, #5]
	time_get_data->year         = BCD_To_Dec(getTime[6]);
 8000b04:	7bbb      	ldrb	r3, [r7, #14]
 8000b06:	4618      	mov	r0, r3
 8000b08:	f7ff ff52 	bl	80009b0 <BCD_To_Dec>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	b2da      	uxtb	r2, r3
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	719a      	strb	r2, [r3, #6]
}
 8000b14:	bf00      	nop
 8000b16:	3710      	adds	r7, #16
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	200000a8 	.word	0x200000a8

08000b20 <Time_Ctrl>:
  * @param  dow_dom: Day of the week or date of the month (1-7 or 1-31).
  * @param  dy_dt: Day of week or date of month (1 = day of week, 0 = date of month, 0 = not used).
  * @retval None
*/
void Time_Ctrl (uint8_t mode, uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow_dom, bool dy_dt)
{
 8000b20:	b590      	push	{r4, r7, lr}
 8000b22:	b08b      	sub	sp, #44	@ 0x2c
 8000b24:	af04      	add	r7, sp, #16
 8000b26:	4604      	mov	r4, r0
 8000b28:	4608      	mov	r0, r1
 8000b2a:	4611      	mov	r1, r2
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	4623      	mov	r3, r4
 8000b30:	71fb      	strb	r3, [r7, #7]
 8000b32:	4603      	mov	r3, r0
 8000b34:	71bb      	strb	r3, [r7, #6]
 8000b36:	460b      	mov	r3, r1
 8000b38:	717b      	strb	r3, [r7, #5]
 8000b3a:	4613      	mov	r3, r2
 8000b3c:	713b      	strb	r3, [r7, #4]
  // A blank array (4 slots) to contain the RTC alarm settings
  uint8_t ctrlTime[4];

  // A mask bit to set the Control register in the RTC module
  //    Address 0Eh: A1IE = 1
  uint8_t ctrlAlarm = 1; 
 8000b3e:	2301      	movs	r3, #1
 8000b40:	73fb      	strb	r3, [r7, #15]

  // A mask bit to set the alarm modes (Bit 7) in the RTC module
  uint8_t maskBit = 128;
 8000b42:	2380      	movs	r3, #128	@ 0x80
 8000b44:	75fb      	strb	r3, [r7, #23]

  // A mask bit for selection of [day of week] or [date of month] (Bit 6) in the RTC module
  //    If the input [day of week]/ [date of month] selection is 1, the mask bit will be 64.
  uint8_t dyDt = (dy_dt == true) ? 64 : 0;
 8000b46:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <Time_Ctrl+0x32>
 8000b4e:	2340      	movs	r3, #64	@ 0x40
 8000b50:	e000      	b.n	8000b54 <Time_Ctrl+0x34>
 8000b52:	2300      	movs	r3, #0
 8000b54:	75bb      	strb	r3, [r7, #22]

  // Store the RTC alarm time settings (converted into BCD code) into the blank array
  ctrlTime[0] = Dec_To_BCD(sec);
 8000b56:	79bb      	ldrb	r3, [r7, #6]
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff ff05 	bl	8000968 <Dec_To_BCD>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	743b      	strb	r3, [r7, #16]
	ctrlTime[1] = Dec_To_BCD(min);
 8000b62:	797b      	ldrb	r3, [r7, #5]
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff feff 	bl	8000968 <Dec_To_BCD>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	747b      	strb	r3, [r7, #17]
	ctrlTime[2] = Dec_To_BCD(hour);
 8000b6e:	793b      	ldrb	r3, [r7, #4]
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff fef9 	bl	8000968 <Dec_To_BCD>
 8000b76:	4603      	mov	r3, r0
 8000b78:	74bb      	strb	r3, [r7, #18]
	ctrlTime[3] = Dec_To_BCD(dow_dom);
 8000b7a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff fef2 	bl	8000968 <Dec_To_BCD>
 8000b84:	4603      	mov	r3, r0
 8000b86:	74fb      	strb	r3, [r7, #19]
  //      1    : Alarm when seconds match
  //      2    : Alarm when minutes and seconds match
  //      3    : Alarm when hours, minutes, and seconds match
  //      4    : Alarm when date, hours, minutes, and seconds match
  //      5    : Alarm when day, hours, minutes, and seconds match
  switch (mode)
 8000b88:	79fb      	ldrb	r3, [r7, #7]
 8000b8a:	2b05      	cmp	r3, #5
 8000b8c:	d865      	bhi.n	8000c5a <Time_Ctrl+0x13a>
 8000b8e:	a201      	add	r2, pc, #4	@ (adr r2, 8000b94 <Time_Ctrl+0x74>)
 8000b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b94:	08000bad 	.word	0x08000bad
 8000b98:	08000bd7 	.word	0x08000bd7
 8000b9c:	08000bfb 	.word	0x08000bfb
 8000ba0:	08000c19 	.word	0x08000c19
 8000ba4:	08000c31 	.word	0x08000c31
 8000ba8:	08000c43 	.word	0x08000c43
  {
    case 0:
      // Alarm mask bit: A1M4:A1M1 = b1111, DY/DT = X
      ctrlTime[0] += maskBit;
 8000bac:	7c3a      	ldrb	r2, [r7, #16]
 8000bae:	7dfb      	ldrb	r3, [r7, #23]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	743b      	strb	r3, [r7, #16]
      ctrlTime[1] += maskBit;
 8000bb6:	7c7a      	ldrb	r2, [r7, #17]
 8000bb8:	7dfb      	ldrb	r3, [r7, #23]
 8000bba:	4413      	add	r3, r2
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	747b      	strb	r3, [r7, #17]
      ctrlTime[2] += maskBit;
 8000bc0:	7cba      	ldrb	r2, [r7, #18]
 8000bc2:	7dfb      	ldrb	r3, [r7, #23]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	74bb      	strb	r3, [r7, #18]
      ctrlTime[3] += maskBit;
 8000bca:	7cfa      	ldrb	r2, [r7, #19]
 8000bcc:	7dfb      	ldrb	r3, [r7, #23]
 8000bce:	4413      	add	r3, r2
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	74fb      	strb	r3, [r7, #19]
      break;
 8000bd4:	e04a      	b.n	8000c6c <Time_Ctrl+0x14c>
    case 1:
      // Alarm mask bit: A1M4:A1M1 = b1110, DY/DT = X
      ctrlTime[0] += 0;
 8000bd6:	7c3b      	ldrb	r3, [r7, #16]
 8000bd8:	743b      	strb	r3, [r7, #16]
      ctrlTime[1] += maskBit;
 8000bda:	7c7a      	ldrb	r2, [r7, #17]
 8000bdc:	7dfb      	ldrb	r3, [r7, #23]
 8000bde:	4413      	add	r3, r2
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	747b      	strb	r3, [r7, #17]
      ctrlTime[2] += maskBit;
 8000be4:	7cba      	ldrb	r2, [r7, #18]
 8000be6:	7dfb      	ldrb	r3, [r7, #23]
 8000be8:	4413      	add	r3, r2
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	74bb      	strb	r3, [r7, #18]
      ctrlTime[3] += maskBit;
 8000bee:	7cfa      	ldrb	r2, [r7, #19]
 8000bf0:	7dfb      	ldrb	r3, [r7, #23]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	74fb      	strb	r3, [r7, #19]
      break;
 8000bf8:	e038      	b.n	8000c6c <Time_Ctrl+0x14c>
    case 2:
      // Alarm mask bit: A1M4:A1M1 = b1100, DY/DT = X
      ctrlTime[0] += 0;
 8000bfa:	7c3b      	ldrb	r3, [r7, #16]
 8000bfc:	743b      	strb	r3, [r7, #16]
      ctrlTime[1] += 0;
 8000bfe:	7c7b      	ldrb	r3, [r7, #17]
 8000c00:	747b      	strb	r3, [r7, #17]
      ctrlTime[2] += maskBit;
 8000c02:	7cba      	ldrb	r2, [r7, #18]
 8000c04:	7dfb      	ldrb	r3, [r7, #23]
 8000c06:	4413      	add	r3, r2
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	74bb      	strb	r3, [r7, #18]
      ctrlTime[3] += maskBit;
 8000c0c:	7cfa      	ldrb	r2, [r7, #19]
 8000c0e:	7dfb      	ldrb	r3, [r7, #23]
 8000c10:	4413      	add	r3, r2
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	74fb      	strb	r3, [r7, #19]
      break;
 8000c16:	e029      	b.n	8000c6c <Time_Ctrl+0x14c>
    case 3:
      // Alarm mask bit: A1M4:A1M1 = b1000, DY/DT = X
      ctrlTime[0] += 0;
 8000c18:	7c3b      	ldrb	r3, [r7, #16]
 8000c1a:	743b      	strb	r3, [r7, #16]
      ctrlTime[1] += 0;
 8000c1c:	7c7b      	ldrb	r3, [r7, #17]
 8000c1e:	747b      	strb	r3, [r7, #17]
      ctrlTime[2] += 0;
 8000c20:	7cbb      	ldrb	r3, [r7, #18]
 8000c22:	74bb      	strb	r3, [r7, #18]
      ctrlTime[3] += maskBit;
 8000c24:	7cfa      	ldrb	r2, [r7, #19]
 8000c26:	7dfb      	ldrb	r3, [r7, #23]
 8000c28:	4413      	add	r3, r2
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	74fb      	strb	r3, [r7, #19]
      break;
 8000c2e:	e01d      	b.n	8000c6c <Time_Ctrl+0x14c>
    case 4:
      // Alarm mask bit: A1M4:A1M1 = b0000, DY/DT = 0
      ctrlTime[0] += 0;
 8000c30:	7c3b      	ldrb	r3, [r7, #16]
 8000c32:	743b      	strb	r3, [r7, #16]
      ctrlTime[1] += 0;
 8000c34:	7c7b      	ldrb	r3, [r7, #17]
 8000c36:	747b      	strb	r3, [r7, #17]
      ctrlTime[2] += 0;
 8000c38:	7cbb      	ldrb	r3, [r7, #18]
 8000c3a:	74bb      	strb	r3, [r7, #18]
      ctrlTime[3] += 0;
 8000c3c:	7cfb      	ldrb	r3, [r7, #19]
 8000c3e:	74fb      	strb	r3, [r7, #19]
      break;
 8000c40:	e014      	b.n	8000c6c <Time_Ctrl+0x14c>
    case 5:
      // Alarm mask bit: A1M4:A1M1 = b0000, DY/DT = 1
      ctrlTime[0] += 0;
 8000c42:	7c3b      	ldrb	r3, [r7, #16]
 8000c44:	743b      	strb	r3, [r7, #16]
      ctrlTime[1] += 0;
 8000c46:	7c7b      	ldrb	r3, [r7, #17]
 8000c48:	747b      	strb	r3, [r7, #17]
      ctrlTime[2] += 0;
 8000c4a:	7cbb      	ldrb	r3, [r7, #18]
 8000c4c:	74bb      	strb	r3, [r7, #18]
      ctrlTime[3] += dyDt;
 8000c4e:	7cfa      	ldrb	r2, [r7, #19]
 8000c50:	7dbb      	ldrb	r3, [r7, #22]
 8000c52:	4413      	add	r3, r2
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	74fb      	strb	r3, [r7, #19]
      break;
 8000c58:	e008      	b.n	8000c6c <Time_Ctrl+0x14c>
    default:
      // Alarm mask bit: A1M4:A1M1 = b0000, DY/DT = 0
      ctrlTime[0] += 0;
 8000c5a:	7c3b      	ldrb	r3, [r7, #16]
 8000c5c:	743b      	strb	r3, [r7, #16]
      ctrlTime[1] += 0;
 8000c5e:	7c7b      	ldrb	r3, [r7, #17]
 8000c60:	747b      	strb	r3, [r7, #17]
      ctrlTime[2] += 0;
 8000c62:	7cbb      	ldrb	r3, [r7, #18]
 8000c64:	74bb      	strb	r3, [r7, #18]
      ctrlTime[3] += 0;
 8000c66:	7cfb      	ldrb	r3, [r7, #19]
 8000c68:	74fb      	strb	r3, [r7, #19]
      break;
 8000c6a:	bf00      	nop
  }

  // Send the array containing the RTC alarm mode setting to the RTC module through I2C interface at address 07h - 0Ah (size of value: 4 bytes)
  // HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
  //    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);	  
  HAL_I2C_Mem_Write(DS3231_I2C, DS3231_ADDR, 0x07, 1, ctrlTime, sizeof(ctrlTime), 1000);
 8000c6c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c70:	9302      	str	r3, [sp, #8]
 8000c72:	2304      	movs	r3, #4
 8000c74:	9301      	str	r3, [sp, #4]
 8000c76:	f107 0310 	add.w	r3, r7, #16
 8000c7a:	9300      	str	r3, [sp, #0]
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	2207      	movs	r2, #7
 8000c80:	21d0      	movs	r1, #208	@ 0xd0
 8000c82:	480a      	ldr	r0, [pc, #40]	@ (8000cac <Time_Ctrl+0x18c>)
 8000c84:	f001 fcc2 	bl	800260c <HAL_I2C_Mem_Write>

  // Send the alarm control mask bits to the RTC module through I2C interface at address 0Eh (size of value: 1 byte)
  // HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
  //    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);	  
  HAL_I2C_Mem_Write(DS3231_I2C, DS3231_ADDR, 0x0E, 1, &ctrlAlarm, sizeof(ctrlAlarm), 1000);
 8000c88:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c8c:	9302      	str	r3, [sp, #8]
 8000c8e:	2301      	movs	r3, #1
 8000c90:	9301      	str	r3, [sp, #4]
 8000c92:	f107 030f 	add.w	r3, r7, #15
 8000c96:	9300      	str	r3, [sp, #0]
 8000c98:	2301      	movs	r3, #1
 8000c9a:	220e      	movs	r2, #14
 8000c9c:	21d0      	movs	r1, #208	@ 0xd0
 8000c9e:	4803      	ldr	r0, [pc, #12]	@ (8000cac <Time_Ctrl+0x18c>)
 8000ca0:	f001 fcb4 	bl	800260c <HAL_I2C_Mem_Write>
}
 8000ca4:	bf00      	nop
 8000ca6:	371c      	adds	r7, #28
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd90      	pop	{r4, r7, pc}
 8000cac:	200000a8 	.word	0x200000a8

08000cb0 <Time_Init>:
  * @param  month: Month: 1-12
  * @param  year: Year: 0-99 (0 = 2000, 1 = 2001, ..., 99 = 2099)
  * @retval None
*/
void Time_Init (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom, uint8_t month, uint8_t year)
{
 8000cb0:	b590      	push	{r4, r7, lr}
 8000cb2:	b087      	sub	sp, #28
 8000cb4:	af04      	add	r7, sp, #16
 8000cb6:	4604      	mov	r4, r0
 8000cb8:	4608      	mov	r0, r1
 8000cba:	4611      	mov	r1, r2
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	4623      	mov	r3, r4
 8000cc0:	71fb      	strb	r3, [r7, #7]
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	71bb      	strb	r3, [r7, #6]
 8000cc6:	460b      	mov	r3, r1
 8000cc8:	717b      	strb	r3, [r7, #5]
 8000cca:	4613      	mov	r3, r2
 8000ccc:	713b      	strb	r3, [r7, #4]
  // This function is intended for initial setup of the RTC module after a reset.
  // It should not be called repeatedly unless reinitialization is required.
  //    Time_Set (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom, uint8_t month, uint8_t year)
  Time_Set (sec, min, hour, dow, dom, month, year);
 8000cce:	793c      	ldrb	r4, [r7, #4]
 8000cd0:	797a      	ldrb	r2, [r7, #5]
 8000cd2:	79b9      	ldrb	r1, [r7, #6]
 8000cd4:	79f8      	ldrb	r0, [r7, #7]
 8000cd6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000cda:	9302      	str	r3, [sp, #8]
 8000cdc:	7f3b      	ldrb	r3, [r7, #28]
 8000cde:	9301      	str	r3, [sp, #4]
 8000ce0:	7e3b      	ldrb	r3, [r7, #24]
 8000ce2:	9300      	str	r3, [sp, #0]
 8000ce4:	4623      	mov	r3, r4
 8000ce6:	f7ff fe7b 	bl	80009e0 <Time_Set>
  //        2    : Alarm when minutes and seconds match
  //        3    : Alarm when hours, minutes, and seconds match
  //        4    : Alarm when date, hours, minutes, and seconds match
  //        5    : Alarm when day, hours, minutes, and seconds match
  //      For mode 0, the remaining input are don't-care values
  Time_Ctrl 
 8000cea:	2300      	movs	r3, #0
 8000cec:	9301      	str	r3, [sp, #4]
 8000cee:	2300      	movs	r3, #0
 8000cf0:	9300      	str	r3, [sp, #0]
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	2000      	movs	r0, #0
 8000cfa:	f7ff ff11 	bl	8000b20 <Time_Ctrl>
     0, // Minutes: 0-59
     0, // Hours: 0-23
     0, // Day of the week: 1-7 (1 = Sunday, 2 = Monday, ..., 7 = Saturday), or Date of the month: 1-31
     0  // Select: 1 = day of week, 0 = date of month
  );   
}
 8000cfe:	bf00      	nop
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd90      	pop	{r4, r7, pc}
	...

08000d08 <Alarm_Set>:
  * @param  on_off: On/ Off state of the alarm (1 = ON, 0 = OFF)
  * @param  slot: Slot number of the alarm in the EEPROM module (0-9)
  * @retval None
*/
void Alarm_Set (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow_dom, uint8_t dy_dt, bool on_off, uint8_t slot)
{
 8000d08:	b590      	push	{r4, r7, lr}
 8000d0a:	b089      	sub	sp, #36	@ 0x24
 8000d0c:	af04      	add	r7, sp, #16
 8000d0e:	4604      	mov	r4, r0
 8000d10:	4608      	mov	r0, r1
 8000d12:	4611      	mov	r1, r2
 8000d14:	461a      	mov	r2, r3
 8000d16:	4623      	mov	r3, r4
 8000d18:	71fb      	strb	r3, [r7, #7]
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	71bb      	strb	r3, [r7, #6]
 8000d1e:	460b      	mov	r3, r1
 8000d20:	717b      	strb	r3, [r7, #5]
 8000d22:	4613      	mov	r3, r2
 8000d24:	713b      	strb	r3, [r7, #4]
  // Internal address of the alarm in the EEPROM module (0-8192, or 13 bits)
  uint16_t address = slot * 4;
 8000d26:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000d2a:	b29b      	uxth	r3, r3
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	81fb      	strh	r3, [r7, #14]

  // Add an ON/OFF (1 bit) signal into the alarm package by using the MSB of the second register
  if (on_off)
 8000d30:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d002      	beq.n	8000d3e <Alarm_Set+0x36>
  {
    sec += (1 << 7);
 8000d38:	79fb      	ldrb	r3, [r7, #7]
 8000d3a:	3b80      	subs	r3, #128	@ 0x80
 8000d3c:	71fb      	strb	r3, [r7, #7]
  }

  // Add a [day of week] or [date of month] (1 bit) signal into the alarm package by using bit 6 of the dow_dom register
  switch (dy_dt)
 8000d3e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d42:	2b02      	cmp	r3, #2
 8000d44:	d00e      	beq.n	8000d64 <Alarm_Set+0x5c>
 8000d46:	2b02      	cmp	r3, #2
 8000d48:	dc0e      	bgt.n	8000d68 <Alarm_Set+0x60>
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d002      	beq.n	8000d54 <Alarm_Set+0x4c>
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d004      	beq.n	8000d5c <Alarm_Set+0x54>
      dow_dom += 0;
    break;

    default:
      dow_dom += 0;
    break;
 8000d52:	e009      	b.n	8000d68 <Alarm_Set+0x60>
      dow_dom += (1 << 7);
 8000d54:	793b      	ldrb	r3, [r7, #4]
 8000d56:	3b80      	subs	r3, #128	@ 0x80
 8000d58:	713b      	strb	r3, [r7, #4]
    break;
 8000d5a:	e006      	b.n	8000d6a <Alarm_Set+0x62>
      dow_dom += ((1 << 7) | (1 << 6));
 8000d5c:	793b      	ldrb	r3, [r7, #4]
 8000d5e:	3b40      	subs	r3, #64	@ 0x40
 8000d60:	713b      	strb	r3, [r7, #4]
    break;
 8000d62:	e002      	b.n	8000d6a <Alarm_Set+0x62>
    break;
 8000d64:	bf00      	nop
 8000d66:	e000      	b.n	8000d6a <Alarm_Set+0x62>
    break;
 8000d68:	bf00      	nop

  // A blank array (4 slots) to contain the alarm values
  uint8_t setAlarm[4];
  
  // Store the alarm values into the blank array
  setAlarm[0] = sec;
 8000d6a:	79fb      	ldrb	r3, [r7, #7]
 8000d6c:	723b      	strb	r3, [r7, #8]
  setAlarm[1] = min;
 8000d6e:	79bb      	ldrb	r3, [r7, #6]
 8000d70:	727b      	strb	r3, [r7, #9]
  setAlarm[2] = hour;
 8000d72:	797b      	ldrb	r3, [r7, #5]
 8000d74:	72bb      	strb	r3, [r7, #10]
  setAlarm[3] = dow_dom;
 8000d76:	793b      	ldrb	r3, [r7, #4]
 8000d78:	72fb      	strb	r3, [r7, #11]

  // HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
  //    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);
  HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, address, 1, setAlarm, sizeof(setAlarm), 1000);
 8000d7a:	89fa      	ldrh	r2, [r7, #14]
 8000d7c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d80:	9302      	str	r3, [sp, #8]
 8000d82:	2304      	movs	r3, #4
 8000d84:	9301      	str	r3, [sp, #4]
 8000d86:	f107 0308 	add.w	r3, r7, #8
 8000d8a:	9300      	str	r3, [sp, #0]
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	21a0      	movs	r1, #160	@ 0xa0
 8000d90:	4804      	ldr	r0, [pc, #16]	@ (8000da4 <Alarm_Set+0x9c>)
 8000d92:	f001 fc3b 	bl	800260c <HAL_I2C_Mem_Write>
  //     +  8 [2nd Word Address Byte]   + 1 [ACK from Client]      +
  //     + {8 [1st Data Word]           + 1 [ACK from Client]} * 4 + 
  //     +  1 [Stop Condition by Host] 
  //     =  65 cycles  
  //    Neccesary delay time = 65 cycles / 400 kHz = 162.5 us = ~ 0.17 ms
  HAL_Delay(1);
 8000d96:	2001      	movs	r0, #1
 8000d98:	f000 fb5e 	bl	8001458 <HAL_Delay>
}
 8000d9c:	bf00      	nop
 8000d9e:	3714      	adds	r7, #20
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd90      	pop	{r4, r7, pc}
 8000da4:	200000a8 	.word	0x200000a8

08000da8 <Alarm_Get>:
  * @param  slot: Slot number of the alarm in the EEPROM module (0-9)
  * @param  alarm_get_data: Pointer to an ALARM structure to store the retrieved alarm values
  * @retval None
*/
void Alarm_Get (uint8_t slot, volatile ALARM *alarm_get_data)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b088      	sub	sp, #32
 8000dac:	af04      	add	r7, sp, #16
 8000dae:	4603      	mov	r3, r0
 8000db0:	6039      	str	r1, [r7, #0]
 8000db2:	71fb      	strb	r3, [r7, #7]
  // Address of the alarm in the EEPROM module (0-8192, or 13 bits)
  uint16_t address = slot * 4;
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	b29b      	uxth	r3, r3
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	81fb      	strh	r3, [r7, #14]
  // A blank array (4 slots) to contain the alarm values received from the EEPROM module
  uint8_t getAlarm[4];

  // HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
  //    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);
  HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, address, 1, getAlarm, sizeof(getAlarm), 1000);
 8000dbc:	89fa      	ldrh	r2, [r7, #14]
 8000dbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dc2:	9302      	str	r3, [sp, #8]
 8000dc4:	2304      	movs	r3, #4
 8000dc6:	9301      	str	r3, [sp, #4]
 8000dc8:	f107 0308 	add.w	r3, r7, #8
 8000dcc:	9300      	str	r3, [sp, #0]
 8000dce:	2301      	movs	r3, #1
 8000dd0:	21a0      	movs	r1, #160	@ 0xa0
 8000dd2:	480b      	ldr	r0, [pc, #44]	@ (8000e00 <Alarm_Get+0x58>)
 8000dd4:	f001 fd14 	bl	8002800 <HAL_I2C_Mem_Read>
  //     +  8 [Device Address Byte]     + 1 [ACK from Client]      +
  //     + {8 [1st Data Word]           + 1 [ACK from Client]} * 4 + 
  //     +  1 [Stop Condition by Host] 
  //     =  75 cycles
  //    Neccesary delay time = 75 cycles / 400 kHz = 187.5 us = ~ 0.19 ms
  HAL_Delay(1);
 8000dd8:	2001      	movs	r0, #1
 8000dda:	f000 fb3d 	bl	8001458 <HAL_Delay>

  // Store the alarm values into the alarm variable
  alarm_get_data->second  = getAlarm[0];
 8000dde:	7a3a      	ldrb	r2, [r7, #8]
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	701a      	strb	r2, [r3, #0]
  alarm_get_data->minute  = getAlarm[1];
 8000de4:	7a7a      	ldrb	r2, [r7, #9]
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	705a      	strb	r2, [r3, #1]
  alarm_get_data->hour    = getAlarm[2];
 8000dea:	7aba      	ldrb	r2, [r7, #10]
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	709a      	strb	r2, [r3, #2]
  alarm_get_data->dow_dom = getAlarm[3];
 8000df0:	7afa      	ldrb	r2, [r7, #11]
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	70da      	strb	r2, [r3, #3]
}
 8000df6:	bf00      	nop
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	200000a8 	.word	0x200000a8

08000e04 <Alarm_Clear>:
  * @brief  Clear a single alarm from the EEPROM module.
  * @param  slot: Slot number of the alarm in the EEPROM module (0-9)
  * @retval None
*/
void Alarm_Clear (uint8_t slot)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b088      	sub	sp, #32
 8000e08:	af04      	add	r7, sp, #16
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]
  // Address of the alarm in the EEPROM module (0-8192, or 13 bits)
  uint16_t address = slot * 4;
 8000e0e:	79fb      	ldrb	r3, [r7, #7]
 8000e10:	b29b      	uxth	r3, r3
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	81fb      	strh	r3, [r7, #14]

  // A blank array (4 slots) to contain the alarm values to be cleared
  uint8_t clearAlarm[4] = {0, 0, 0, 0};
 8000e16:	2300      	movs	r3, #0
 8000e18:	60bb      	str	r3, [r7, #8]

  // HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
  //    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);
  HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, address, 1, clearAlarm, sizeof(clearAlarm), 1000);
 8000e1a:	89fa      	ldrh	r2, [r7, #14]
 8000e1c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e20:	9302      	str	r3, [sp, #8]
 8000e22:	2304      	movs	r3, #4
 8000e24:	9301      	str	r3, [sp, #4]
 8000e26:	f107 0308 	add.w	r3, r7, #8
 8000e2a:	9300      	str	r3, [sp, #0]
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	21a0      	movs	r1, #160	@ 0xa0
 8000e30:	4804      	ldr	r0, [pc, #16]	@ (8000e44 <Alarm_Clear+0x40>)
 8000e32:	f001 fbeb 	bl	800260c <HAL_I2C_Mem_Write>
  //     +  8 [2nd Word Address Byte]   + 1 [ACK from Client]      +
  //     + {8 [1st Data Word]           + 1 [ACK from Client]} * 4 + 
  //     +  1 [Stop Condition by Host] 
  //     =  65 cycles  
  //    Neccesary delay time = 65 cycles / 400 kHz = 162.5 us = ~ 0.17 ms
  HAL_Delay(1);
 8000e36:	2001      	movs	r0, #1
 8000e38:	f000 fb0e 	bl	8001458 <HAL_Delay>
}
 8000e3c:	bf00      	nop
 8000e3e:	3710      	adds	r7, #16
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	200000a8 	.word	0x200000a8

08000e48 <Alarm_Check>:
  * @param  time_get_data: Pointer to a TIME structure to store the current time values
  * @retval None
  * @note   This function compares the current time with all alarms stored in the EEPROM module.
*/
void Alarm_Check (volatile ALARM *alarm_check_data, volatile TIME *time_get_data)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	6039      	str	r1, [r7, #0]
  // Compare the current time with all alarms stored in the EEPROM module
  for (int i = 0; i <= ALARM_SLOT_NUM; i++)
 8000e52:	2300      	movs	r3, #0
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	bf00      	nop
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	2b0a      	cmp	r3, #10
 8000e5c:	dc4e      	bgt.n	8000efc <Alarm_Check+0xb4>
  {
    // Retrieve the alarm values from the EEPROM module
    //    void Alarm_Get (uint8_t address, ALARM *alarm_get_data)
    Alarm_Get(i, alarm_check_data);
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	6879      	ldr	r1, [r7, #4]
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff ff9f 	bl	8000da8 <Alarm_Get>

    // Check if the alarm is at ON or OFF state by checking the MSB of the second register
    if (!(alarm_check_data->second >= (1 << 7)))
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	b25b      	sxtb	r3, r3
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	da44      	bge.n	8000f00 <Alarm_Check+0xb8>
      break;
    }

    // Check if the current time matches the alarm time (day of week or date of month)
    //    by first check if the alarm is at [day of week] or [date of month] mode by examining the MSB of the dow_dom register
    if (alarm_check_data->dow_dom >= (1 << 7))
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	78db      	ldrb	r3, [r3, #3]
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	b25b      	sxtb	r3, r3
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	da1b      	bge.n	8000eba <Alarm_Check+0x72>
    {
      // Check if the alarm is at the [day of week] mode by checking the mask bit (bit 6) of the dow_dom register
      if ((alarm_check_data->dow_dom & 0x7F) >= (1 << 6))
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	78db      	ldrb	r3, [r3, #3]
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d00a      	beq.n	8000ea6 <Alarm_Check+0x5e>
      {
        // Check if the [day of week] matches the current time
        //    by unmasking the MSB and bit 6 of the dow_dom register to get the original value of the dow_dom register
        if ((alarm_check_data->dow_dom & 0x3F) != time_get_data->dayofweek)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	78db      	ldrb	r3, [r3, #3]
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000e9a:	683a      	ldr	r2, [r7, #0]
 8000e9c:	78d2      	ldrb	r2, [r2, #3]
 8000e9e:	b2d2      	uxtb	r2, r2
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d00a      	beq.n	8000eba <Alarm_Check+0x72>
        {
          // Skip if the current time does NOT match the alarm time (day of week)
          break;
 8000ea4:	e035      	b.n	8000f12 <Alarm_Check+0xca>
      }
      else
      {
        // Check if the [date of month] matches the current time
        //    by unmasking the MSB of the dow_dom register to get the original value of the dow_dom register
        if ((alarm_check_data->dow_dom & 0x7F) != time_get_data->dateofmonth)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	78db      	ldrb	r3, [r3, #3]
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000eb0:	683a      	ldr	r2, [r7, #0]
 8000eb2:	7912      	ldrb	r2, [r2, #4]
 8000eb4:	b2d2      	uxtb	r2, r2
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d124      	bne.n	8000f04 <Alarm_Check+0xbc>
        }
      }
    }

    // Check if the current time matches the alarm time (hour)
    if (alarm_check_data->hour != time_get_data->hour)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	789b      	ldrb	r3, [r3, #2]
 8000ebe:	b2da      	uxtb	r2, r3
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	789b      	ldrb	r3, [r3, #2]
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	429a      	cmp	r2, r3
 8000ec8:	d11e      	bne.n	8000f08 <Alarm_Check+0xc0>
      // Skip if the current time does NOT match the alarm time (hour)
      break;
    }

    // Check if the current time matches the alarm time (minute)
    if (alarm_check_data->minute != time_get_data->minute)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	785b      	ldrb	r3, [r3, #1]
 8000ece:	b2da      	uxtb	r2, r3
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	785b      	ldrb	r3, [r3, #1]
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	d118      	bne.n	8000f0c <Alarm_Check+0xc4>
      break;
    }

    // Check if the current time matches the alarm time (second)
    //    by unmasking the MSB of the second register to get the original value of the second register
    if ((alarm_check_data->second & 0x7F) != time_get_data->second)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000ee4:	683a      	ldr	r2, [r7, #0]
 8000ee6:	7812      	ldrb	r2, [r2, #0]
 8000ee8:	b2d2      	uxtb	r2, r2
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d110      	bne.n	8000f10 <Alarm_Check+0xc8>
      // Skip if the current time does NOT match the alarm time (second)
      break;
    }

    // If all the above checks pass, the alarm is activated
    debug_alarm_activate_ctr += 1;
 8000eee:	4b0b      	ldr	r3, [pc, #44]	@ (8000f1c <Alarm_Check+0xd4>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	b2da      	uxtb	r2, r3
 8000ef6:	4b09      	ldr	r3, [pc, #36]	@ (8000f1c <Alarm_Check+0xd4>)
 8000ef8:	701a      	strb	r2, [r3, #0]
    break;
 8000efa:	e00a      	b.n	8000f12 <Alarm_Check+0xca>
  }

}
 8000efc:	bf00      	nop
 8000efe:	e008      	b.n	8000f12 <Alarm_Check+0xca>
      break;
 8000f00:	bf00      	nop
 8000f02:	e006      	b.n	8000f12 <Alarm_Check+0xca>
          break;
 8000f04:	bf00      	nop
 8000f06:	e004      	b.n	8000f12 <Alarm_Check+0xca>
      break;
 8000f08:	bf00      	nop
 8000f0a:	e002      	b.n	8000f12 <Alarm_Check+0xca>
      break;
 8000f0c:	bf00      	nop
 8000f0e:	e000      	b.n	8000f12 <Alarm_Check+0xca>
      break;
 8000f10:	bf00      	nop
}
 8000f12:	bf00      	nop
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000131 	.word	0x20000131

08000f20 <Button_Debounce>:
  * @brief  Debounce the button state and handle button press events.
  * @param  button: Pointer to a BUTTON structure representing the button to be debounced.
  * @retval None
*/
void Button_Debounce(BUTTON *button)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  // Check button state and handle debouncing
  switch (button->state)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	799b      	ldrb	r3, [r3, #6]
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d032      	beq.n	8000f96 <Button_Debounce+0x76>
 8000f30:	2b02      	cmp	r3, #2
 8000f32:	dc47      	bgt.n	8000fc4 <Button_Debounce+0xa4>
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d002      	beq.n	8000f3e <Button_Debounce+0x1e>
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d00e      	beq.n	8000f5a <Button_Debounce+0x3a>
        button->int_flag = false;
      }

    break;
  }
}
 8000f3c:	e042      	b.n	8000fc4 <Button_Debounce+0xa4>
      if (button->int_flag) 
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	7b1b      	ldrb	r3, [r3, #12]
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d038      	beq.n	8000fba <Button_Debounce+0x9a>
        button->start_tick = HAL_GetTick();
 8000f48:	f000 fa7c 	bl	8001444 <HAL_GetTick>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	609a      	str	r2, [r3, #8]
        button->state = BUTTON_STATE_WAITING;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2201      	movs	r2, #1
 8000f56:	719a      	strb	r2, [r3, #6]
    break;
 8000f58:	e02f      	b.n	8000fba <Button_Debounce+0x9a>
      if (HAL_GetTick() - button->start_tick >= DEBOUNCE_DELAY_MS) 
 8000f5a:	f000 fa73 	bl	8001444 <HAL_GetTick>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	2b0e      	cmp	r3, #14
 8000f68:	d929      	bls.n	8000fbe <Button_Debounce+0x9e>
        if (HAL_GPIO_ReadPin(button->gpio_port, button->gpio_pin) == GPIO_PIN_RESET) 
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	889b      	ldrh	r3, [r3, #4]
 8000f72:	4619      	mov	r1, r3
 8000f74:	4610      	mov	r0, r2
 8000f76:	f001 f9d5 	bl	8002324 <HAL_GPIO_ReadPin>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d106      	bne.n	8000f8e <Button_Debounce+0x6e>
          button->press_flag = true;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2201      	movs	r2, #1
 8000f84:	735a      	strb	r2, [r3, #13]
          button->state = BUTTON_STATE_LOW;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2202      	movs	r2, #2
 8000f8a:	719a      	strb	r2, [r3, #6]
    break;
 8000f8c:	e017      	b.n	8000fbe <Button_Debounce+0x9e>
          button->state = BUTTON_STATE_HIGH; // False alarm
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	719a      	strb	r2, [r3, #6]
    break;
 8000f94:	e013      	b.n	8000fbe <Button_Debounce+0x9e>
      if (HAL_GPIO_ReadPin(button->gpio_port, button->gpio_pin) == GPIO_PIN_SET) 
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	889b      	ldrh	r3, [r3, #4]
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4610      	mov	r0, r2
 8000fa2:	f001 f9bf 	bl	8002324 <HAL_GPIO_ReadPin>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d10a      	bne.n	8000fc2 <Button_Debounce+0xa2>
        button->state = BUTTON_STATE_HIGH;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	719a      	strb	r2, [r3, #6]
        button->int_flag = false;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	731a      	strb	r2, [r3, #12]
    break;
 8000fb8:	e003      	b.n	8000fc2 <Button_Debounce+0xa2>
    break;
 8000fba:	bf00      	nop
 8000fbc:	e002      	b.n	8000fc4 <Button_Debounce+0xa4>
    break;
 8000fbe:	bf00      	nop
 8000fc0:	e000      	b.n	8000fc4 <Button_Debounce+0xa4>
    break;
 8000fc2:	bf00      	nop
}
 8000fc4:	bf00      	nop
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <HAL_GPIO_EXTI_Callback>:
  * @brief  Callback function to handle GPIO interrupts.
  * @param  GPIO_Pin: The pin number of the GPIO that triggered the interrupt.
  * @retval None
*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8000fd6:	88fb      	ldrh	r3, [r7, #6]
 8000fd8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000fdc:	d02a      	beq.n	8001034 <HAL_GPIO_EXTI_Callback+0x68>
 8000fde:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000fe2:	dc2f      	bgt.n	8001044 <HAL_GPIO_EXTI_Callback+0x78>
 8000fe4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000fe8:	d020      	beq.n	800102c <HAL_GPIO_EXTI_Callback+0x60>
 8000fea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000fee:	dc29      	bgt.n	8001044 <HAL_GPIO_EXTI_Callback+0x78>
 8000ff0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000ff4:	d016      	beq.n	8001024 <HAL_GPIO_EXTI_Callback+0x58>
 8000ff6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000ffa:	dc23      	bgt.n	8001044 <HAL_GPIO_EXTI_Callback+0x78>
 8000ffc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001000:	d00c      	beq.n	800101c <HAL_GPIO_EXTI_Callback+0x50>
 8001002:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001006:	dc1d      	bgt.n	8001044 <HAL_GPIO_EXTI_Callback+0x78>
 8001008:	2b20      	cmp	r3, #32
 800100a:	d003      	beq.n	8001014 <HAL_GPIO_EXTI_Callback+0x48>
 800100c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001010:	d014      	beq.n	800103c <HAL_GPIO_EXTI_Callback+0x70>
      button5.int_flag = true;
    break;  

    default:
      // Handle other GPIO interrupts if necessary
    break;
 8001012:	e017      	b.n	8001044 <HAL_GPIO_EXTI_Callback+0x78>
      rtc_int_flag = true;
 8001014:	4b0e      	ldr	r3, [pc, #56]	@ (8001050 <HAL_GPIO_EXTI_Callback+0x84>)
 8001016:	2201      	movs	r2, #1
 8001018:	701a      	strb	r2, [r3, #0]
    break;
 800101a:	e014      	b.n	8001046 <HAL_GPIO_EXTI_Callback+0x7a>
      button1.int_flag = true;
 800101c:	4b0d      	ldr	r3, [pc, #52]	@ (8001054 <HAL_GPIO_EXTI_Callback+0x88>)
 800101e:	2201      	movs	r2, #1
 8001020:	731a      	strb	r2, [r3, #12]
    break;
 8001022:	e010      	b.n	8001046 <HAL_GPIO_EXTI_Callback+0x7a>
      button2.int_flag = true;
 8001024:	4b0c      	ldr	r3, [pc, #48]	@ (8001058 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001026:	2201      	movs	r2, #1
 8001028:	731a      	strb	r2, [r3, #12]
    break;
 800102a:	e00c      	b.n	8001046 <HAL_GPIO_EXTI_Callback+0x7a>
      button3.int_flag = true;
 800102c:	4b0b      	ldr	r3, [pc, #44]	@ (800105c <HAL_GPIO_EXTI_Callback+0x90>)
 800102e:	2201      	movs	r2, #1
 8001030:	731a      	strb	r2, [r3, #12]
    break;
 8001032:	e008      	b.n	8001046 <HAL_GPIO_EXTI_Callback+0x7a>
      button4.int_flag = true;
 8001034:	4b0a      	ldr	r3, [pc, #40]	@ (8001060 <HAL_GPIO_EXTI_Callback+0x94>)
 8001036:	2201      	movs	r2, #1
 8001038:	731a      	strb	r2, [r3, #12]
    break;  
 800103a:	e004      	b.n	8001046 <HAL_GPIO_EXTI_Callback+0x7a>
      button5.int_flag = true;
 800103c:	4b09      	ldr	r3, [pc, #36]	@ (8001064 <HAL_GPIO_EXTI_Callback+0x98>)
 800103e:	2201      	movs	r2, #1
 8001040:	731a      	strb	r2, [r3, #12]
    break;  
 8001042:	e000      	b.n	8001046 <HAL_GPIO_EXTI_Callback+0x7a>
    break;
 8001044:	bf00      	nop
  }
}
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr
 8001050:	20000130 	.word	0x20000130
 8001054:	20000000 	.word	0x20000000
 8001058:	20000010 	.word	0x20000010
 800105c:	20000020 	.word	0x20000020
 8001060:	20000030 	.word	0x20000030
 8001064:	20000040 	.word	0x20000040

08001068 <HAL_UART_RxCpltCallback>:
  * @brief  Callback function to handle UART interrupts.
  * @param  huart: Pointer to the UART handle.
  * @retval None
*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  // Verify the UART instance to ensure the callback is for USART1
  // If the UART instance is USART1, store the received data into the uart_rx_data array
  if(huart->Instance == USART1)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a09      	ldr	r2, [pc, #36]	@ (800109c <HAL_UART_RxCpltCallback+0x34>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d10a      	bne.n	8001090 <HAL_UART_RxCpltCallback+0x28>
  {
    // Store the received data into the uart_rx_data array
    uart_rx_hour = uart_rx_data[0];
 800107a:	4b09      	ldr	r3, [pc, #36]	@ (80010a0 <HAL_UART_RxCpltCallback+0x38>)
 800107c:	781a      	ldrb	r2, [r3, #0]
 800107e:	4b09      	ldr	r3, [pc, #36]	@ (80010a4 <HAL_UART_RxCpltCallback+0x3c>)
 8001080:	701a      	strb	r2, [r3, #0]
    uart_rx_minute = uart_rx_data[1];
 8001082:	4b07      	ldr	r3, [pc, #28]	@ (80010a0 <HAL_UART_RxCpltCallback+0x38>)
 8001084:	785a      	ldrb	r2, [r3, #1]
 8001086:	4b08      	ldr	r3, [pc, #32]	@ (80010a8 <HAL_UART_RxCpltCallback+0x40>)
 8001088:	701a      	strb	r2, [r3, #0]

    // Set the UART receive flag
    uart_rx_flag = 1;
 800108a:	4b08      	ldr	r3, [pc, #32]	@ (80010ac <HAL_UART_RxCpltCallback+0x44>)
 800108c:	2201      	movs	r2, #1
 800108e:	701a      	strb	r2, [r3, #0]
  }
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	bc80      	pop	{r7}
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	40013800 	.word	0x40013800
 80010a0:	2000014c 	.word	0x2000014c
 80010a4:	2000014e 	.word	0x2000014e
 80010a8:	2000014f 	.word	0x2000014f
 80010ac:	20000148 	.word	0x20000148

080010b0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Callback function to handle ADC conversion complete interrupts.
  * @param  hadc: Pointer to the ADC handle.
  * @retval None
*/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	// Verify the ADC instance to ensure the callback is for ADC1
  // If the ADC instance is ADC1, get the ADC value and calculate the battery percentage
  if (hadc == &hadc1)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4a10      	ldr	r2, [pc, #64]	@ (80010fc <HAL_ADC_ConvCpltCallback+0x4c>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d119      	bne.n	80010f4 <HAL_ADC_ConvCpltCallback+0x44>
	{
    // Get the ADC value
    adc_data = HAL_ADC_GetValue(&hadc1);
 80010c0:	480e      	ldr	r0, [pc, #56]	@ (80010fc <HAL_ADC_ConvCpltCallback+0x4c>)
 80010c2:	f000 fb7b 	bl	80017bc <HAL_ADC_GetValue>
 80010c6:	4603      	mov	r3, r0
 80010c8:	b29a      	uxth	r2, r3
 80010ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001100 <HAL_ADC_ConvCpltCallback+0x50>)
 80010cc:	801a      	strh	r2, [r3, #0]

    // Set the ADC valid flag
    adc_valid_flag = 1;
 80010ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001104 <HAL_ADC_ConvCpltCallback+0x54>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	701a      	strb	r2, [r3, #0]

    // Calculate the battery percentage
    battery_percentage = adc_data * 100 / 4095;
 80010d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001100 <HAL_ADC_ConvCpltCallback+0x50>)
 80010d6:	881b      	ldrh	r3, [r3, #0]
 80010d8:	461a      	mov	r2, r3
 80010da:	2364      	movs	r3, #100	@ 0x64
 80010dc:	fb02 f303 	mul.w	r3, r2, r3
 80010e0:	4a09      	ldr	r2, [pc, #36]	@ (8001108 <HAL_ADC_ConvCpltCallback+0x58>)
 80010e2:	fb82 1203 	smull	r1, r2, r2, r3
 80010e6:	441a      	add	r2, r3
 80010e8:	12d2      	asrs	r2, r2, #11
 80010ea:	17db      	asrs	r3, r3, #31
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	b29a      	uxth	r2, r3
 80010f0:	4b06      	ldr	r3, [pc, #24]	@ (800110c <HAL_ADC_ConvCpltCallback+0x5c>)
 80010f2:	801a      	strh	r2, [r3, #0]
	}
}
 80010f4:	bf00      	nop
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000078 	.word	0x20000078
 8001100:	20000144 	.word	0x20000144
 8001104:	20000143 	.word	0x20000143
 8001108:	80080081 	.word	0x80080081
 800110c:	20000146 	.word	0x20000146

08001110 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001114:	b672      	cpsid	i
}
 8001116:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001118:	bf00      	nop
 800111a:	e7fd      	b.n	8001118 <Error_Handler+0x8>

0800111c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001122:	4b15      	ldr	r3, [pc, #84]	@ (8001178 <HAL_MspInit+0x5c>)
 8001124:	699b      	ldr	r3, [r3, #24]
 8001126:	4a14      	ldr	r2, [pc, #80]	@ (8001178 <HAL_MspInit+0x5c>)
 8001128:	f043 0301 	orr.w	r3, r3, #1
 800112c:	6193      	str	r3, [r2, #24]
 800112e:	4b12      	ldr	r3, [pc, #72]	@ (8001178 <HAL_MspInit+0x5c>)
 8001130:	699b      	ldr	r3, [r3, #24]
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	60bb      	str	r3, [r7, #8]
 8001138:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800113a:	4b0f      	ldr	r3, [pc, #60]	@ (8001178 <HAL_MspInit+0x5c>)
 800113c:	69db      	ldr	r3, [r3, #28]
 800113e:	4a0e      	ldr	r2, [pc, #56]	@ (8001178 <HAL_MspInit+0x5c>)
 8001140:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001144:	61d3      	str	r3, [r2, #28]
 8001146:	4b0c      	ldr	r3, [pc, #48]	@ (8001178 <HAL_MspInit+0x5c>)
 8001148:	69db      	ldr	r3, [r3, #28]
 800114a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001152:	4b0a      	ldr	r3, [pc, #40]	@ (800117c <HAL_MspInit+0x60>)
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	4a04      	ldr	r2, [pc, #16]	@ (800117c <HAL_MspInit+0x60>)
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800116e:	bf00      	nop
 8001170:	3714      	adds	r7, #20
 8001172:	46bd      	mov	sp, r7
 8001174:	bc80      	pop	{r7}
 8001176:	4770      	bx	lr
 8001178:	40021000 	.word	0x40021000
 800117c:	40010000 	.word	0x40010000

08001180 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001184:	bf00      	nop
 8001186:	e7fd      	b.n	8001184 <NMI_Handler+0x4>

08001188 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800118c:	bf00      	nop
 800118e:	e7fd      	b.n	800118c <HardFault_Handler+0x4>

08001190 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001194:	bf00      	nop
 8001196:	e7fd      	b.n	8001194 <MemManage_Handler+0x4>

08001198 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800119c:	bf00      	nop
 800119e:	e7fd      	b.n	800119c <BusFault_Handler+0x4>

080011a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a4:	bf00      	nop
 80011a6:	e7fd      	b.n	80011a4 <UsageFault_Handler+0x4>

080011a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bc80      	pop	{r7}
 80011b2:	4770      	bx	lr

080011b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011b8:	bf00      	nop
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc80      	pop	{r7}
 80011be:	4770      	bx	lr

080011c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011c4:	bf00      	nop
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc80      	pop	{r7}
 80011ca:	4770      	bx	lr

080011cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011d0:	f000 f926 	bl	8001420 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80011dc:	4802      	ldr	r0, [pc, #8]	@ (80011e8 <ADC1_2_IRQHandler+0x10>)
 80011de:	f000 faf9 	bl	80017d4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000078 	.word	0x20000078

080011ec <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RTC_IN5_Pin);
 80011f0:	2020      	movs	r0, #32
 80011f2:	f001 f8af 	bl	8002354 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON5_IN8_Pin);
 80011f6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80011fa:	f001 f8ab 	bl	8002354 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
	...

08001204 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001208:	4802      	ldr	r0, [pc, #8]	@ (8001214 <USART1_IRQHandler+0x10>)
 800120a:	f002 fe5d 	bl	8003ec8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000150 	.word	0x20000150

08001218 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON1_IN12_Pin);
 800121c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001220:	f001 f898 	bl	8002354 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON2_IN13_Pin);
 8001224:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001228:	f001 f894 	bl	8002354 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON3_IN14_Pin);
 800122c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001230:	f001 f890 	bl	8002354 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON4_IN15_Pin);
 8001234:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001238:	f001 f88c 	bl	8002354 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800123c:	bf00      	nop
 800123e:	bd80      	pop	{r7, pc}

08001240 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	bc80      	pop	{r7}
 800124a:	4770      	bx	lr

0800124c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001250:	4b11      	ldr	r3, [pc, #68]	@ (8001298 <MX_USART1_UART_Init+0x4c>)
 8001252:	4a12      	ldr	r2, [pc, #72]	@ (800129c <MX_USART1_UART_Init+0x50>)
 8001254:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001256:	4b10      	ldr	r3, [pc, #64]	@ (8001298 <MX_USART1_UART_Init+0x4c>)
 8001258:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800125c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800125e:	4b0e      	ldr	r3, [pc, #56]	@ (8001298 <MX_USART1_UART_Init+0x4c>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001264:	4b0c      	ldr	r3, [pc, #48]	@ (8001298 <MX_USART1_UART_Init+0x4c>)
 8001266:	2200      	movs	r2, #0
 8001268:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800126a:	4b0b      	ldr	r3, [pc, #44]	@ (8001298 <MX_USART1_UART_Init+0x4c>)
 800126c:	2200      	movs	r2, #0
 800126e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001270:	4b09      	ldr	r3, [pc, #36]	@ (8001298 <MX_USART1_UART_Init+0x4c>)
 8001272:	220c      	movs	r2, #12
 8001274:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001276:	4b08      	ldr	r3, [pc, #32]	@ (8001298 <MX_USART1_UART_Init+0x4c>)
 8001278:	2200      	movs	r2, #0
 800127a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800127c:	4b06      	ldr	r3, [pc, #24]	@ (8001298 <MX_USART1_UART_Init+0x4c>)
 800127e:	2200      	movs	r2, #0
 8001280:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001282:	4805      	ldr	r0, [pc, #20]	@ (8001298 <MX_USART1_UART_Init+0x4c>)
 8001284:	f002 fdaa 	bl	8003ddc <HAL_UART_Init>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800128e:	f7ff ff3f 	bl	8001110 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000150 	.word	0x20000150
 800129c:	40013800 	.word	0x40013800

080012a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b088      	sub	sp, #32
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a8:	f107 0310 	add.w	r3, r7, #16
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a20      	ldr	r2, [pc, #128]	@ (800133c <HAL_UART_MspInit+0x9c>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d139      	bne.n	8001334 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001340 <HAL_UART_MspInit+0xa0>)
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	4a1e      	ldr	r2, [pc, #120]	@ (8001340 <HAL_UART_MspInit+0xa0>)
 80012c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012ca:	6193      	str	r3, [r2, #24]
 80012cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001340 <HAL_UART_MspInit+0xa0>)
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d8:	4b19      	ldr	r3, [pc, #100]	@ (8001340 <HAL_UART_MspInit+0xa0>)
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	4a18      	ldr	r2, [pc, #96]	@ (8001340 <HAL_UART_MspInit+0xa0>)
 80012de:	f043 0304 	orr.w	r3, r3, #4
 80012e2:	6193      	str	r3, [r2, #24]
 80012e4:	4b16      	ldr	r3, [pc, #88]	@ (8001340 <HAL_UART_MspInit+0xa0>)
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	f003 0304 	and.w	r3, r3, #4
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f6:	2302      	movs	r3, #2
 80012f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012fa:	2303      	movs	r3, #3
 80012fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fe:	f107 0310 	add.w	r3, r7, #16
 8001302:	4619      	mov	r1, r3
 8001304:	480f      	ldr	r0, [pc, #60]	@ (8001344 <HAL_UART_MspInit+0xa4>)
 8001306:	f000 fe89 	bl	800201c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800130a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800130e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001318:	f107 0310 	add.w	r3, r7, #16
 800131c:	4619      	mov	r1, r3
 800131e:	4809      	ldr	r0, [pc, #36]	@ (8001344 <HAL_UART_MspInit+0xa4>)
 8001320:	f000 fe7c 	bl	800201c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001324:	2200      	movs	r2, #0
 8001326:	2100      	movs	r1, #0
 8001328:	2025      	movs	r0, #37	@ 0x25
 800132a:	f000 fd8e 	bl	8001e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800132e:	2025      	movs	r0, #37	@ 0x25
 8001330:	f000 fda7 	bl	8001e82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001334:	bf00      	nop
 8001336:	3720      	adds	r7, #32
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40013800 	.word	0x40013800
 8001340:	40021000 	.word	0x40021000
 8001344:	40010800 	.word	0x40010800

08001348 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001348:	f7ff ff7a 	bl	8001240 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800134c:	480b      	ldr	r0, [pc, #44]	@ (800137c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800134e:	490c      	ldr	r1, [pc, #48]	@ (8001380 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001350:	4a0c      	ldr	r2, [pc, #48]	@ (8001384 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001352:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001354:	e002      	b.n	800135c <LoopCopyDataInit>

08001356 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001356:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001358:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800135a:	3304      	adds	r3, #4

0800135c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800135c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800135e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001360:	d3f9      	bcc.n	8001356 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001362:	4a09      	ldr	r2, [pc, #36]	@ (8001388 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001364:	4c09      	ldr	r4, [pc, #36]	@ (800138c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001366:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001368:	e001      	b.n	800136e <LoopFillZerobss>

0800136a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800136a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800136c:	3204      	adds	r2, #4

0800136e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800136e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001370:	d3fb      	bcc.n	800136a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001372:	f003 fac3 	bl	80048fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001376:	f7ff f83b 	bl	80003f0 <main>
  bx lr
 800137a:	4770      	bx	lr
  ldr r0, =_sdata
 800137c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001380:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001384:	08004990 	.word	0x08004990
  ldr r2, =_sbss
 8001388:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800138c:	2000019c 	.word	0x2000019c

08001390 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001390:	e7fe      	b.n	8001390 <CAN1_RX1_IRQHandler>
	...

08001394 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001398:	4b08      	ldr	r3, [pc, #32]	@ (80013bc <HAL_Init+0x28>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a07      	ldr	r2, [pc, #28]	@ (80013bc <HAL_Init+0x28>)
 800139e:	f043 0310 	orr.w	r3, r3, #16
 80013a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013a4:	2003      	movs	r0, #3
 80013a6:	f000 fd45 	bl	8001e34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013aa:	200f      	movs	r0, #15
 80013ac:	f000 f808 	bl	80013c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013b0:	f7ff feb4 	bl	800111c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40022000 	.word	0x40022000

080013c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013c8:	4b12      	ldr	r3, [pc, #72]	@ (8001414 <HAL_InitTick+0x54>)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	4b12      	ldr	r3, [pc, #72]	@ (8001418 <HAL_InitTick+0x58>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	4619      	mov	r1, r3
 80013d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013da:	fbb2 f3f3 	udiv	r3, r2, r3
 80013de:	4618      	mov	r0, r3
 80013e0:	f000 fd5d 	bl	8001e9e <HAL_SYSTICK_Config>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e00e      	b.n	800140c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2b0f      	cmp	r3, #15
 80013f2:	d80a      	bhi.n	800140a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013f4:	2200      	movs	r2, #0
 80013f6:	6879      	ldr	r1, [r7, #4]
 80013f8:	f04f 30ff 	mov.w	r0, #4294967295
 80013fc:	f000 fd25 	bl	8001e4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001400:	4a06      	ldr	r2, [pc, #24]	@ (800141c <HAL_InitTick+0x5c>)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001406:	2300      	movs	r3, #0
 8001408:	e000      	b.n	800140c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
}
 800140c:	4618      	mov	r0, r3
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20000050 	.word	0x20000050
 8001418:	20000058 	.word	0x20000058
 800141c:	20000054 	.word	0x20000054

08001420 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001424:	4b05      	ldr	r3, [pc, #20]	@ (800143c <HAL_IncTick+0x1c>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	461a      	mov	r2, r3
 800142a:	4b05      	ldr	r3, [pc, #20]	@ (8001440 <HAL_IncTick+0x20>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4413      	add	r3, r2
 8001430:	4a03      	ldr	r2, [pc, #12]	@ (8001440 <HAL_IncTick+0x20>)
 8001432:	6013      	str	r3, [r2, #0]
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr
 800143c:	20000058 	.word	0x20000058
 8001440:	20000198 	.word	0x20000198

08001444 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  return uwTick;
 8001448:	4b02      	ldr	r3, [pc, #8]	@ (8001454 <HAL_GetTick+0x10>)
 800144a:	681b      	ldr	r3, [r3, #0]
}
 800144c:	4618      	mov	r0, r3
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr
 8001454:	20000198 	.word	0x20000198

08001458 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001460:	f7ff fff0 	bl	8001444 <HAL_GetTick>
 8001464:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001470:	d005      	beq.n	800147e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001472:	4b0a      	ldr	r3, [pc, #40]	@ (800149c <HAL_Delay+0x44>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	461a      	mov	r2, r3
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	4413      	add	r3, r2
 800147c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800147e:	bf00      	nop
 8001480:	f7ff ffe0 	bl	8001444 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	68fa      	ldr	r2, [r7, #12]
 800148c:	429a      	cmp	r2, r3
 800148e:	d8f7      	bhi.n	8001480 <HAL_Delay+0x28>
  {
  }
}
 8001490:	bf00      	nop
 8001492:	bf00      	nop
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	20000058 	.word	0x20000058

080014a0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014a8:	2300      	movs	r3, #0
 80014aa:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80014ac:	2300      	movs	r3, #0
 80014ae:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80014b0:	2300      	movs	r3, #0
 80014b2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80014b4:	2300      	movs	r3, #0
 80014b6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d101      	bne.n	80014c2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e0be      	b.n	8001640 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d109      	bne.n	80014e4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2200      	movs	r2, #0
 80014d4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2200      	movs	r2, #0
 80014da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f7fe fe72 	bl	80001c8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f000 fb8f 	bl	8001c08 <ADC_ConversionStop_Disable>
 80014ea:	4603      	mov	r3, r0
 80014ec:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014f2:	f003 0310 	and.w	r3, r3, #16
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	f040 8099 	bne.w	800162e <HAL_ADC_Init+0x18e>
 80014fc:	7dfb      	ldrb	r3, [r7, #23]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	f040 8095 	bne.w	800162e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001508:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800150c:	f023 0302 	bic.w	r3, r3, #2
 8001510:	f043 0202 	orr.w	r2, r3, #2
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001520:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	7b1b      	ldrb	r3, [r3, #12]
 8001526:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001528:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800152a:	68ba      	ldr	r2, [r7, #8]
 800152c:	4313      	orrs	r3, r2
 800152e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001538:	d003      	beq.n	8001542 <HAL_ADC_Init+0xa2>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d102      	bne.n	8001548 <HAL_ADC_Init+0xa8>
 8001542:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001546:	e000      	b.n	800154a <HAL_ADC_Init+0xaa>
 8001548:	2300      	movs	r3, #0
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	4313      	orrs	r3, r2
 800154e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	7d1b      	ldrb	r3, [r3, #20]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d119      	bne.n	800158c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	7b1b      	ldrb	r3, [r3, #12]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d109      	bne.n	8001574 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	3b01      	subs	r3, #1
 8001566:	035a      	lsls	r2, r3, #13
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	4313      	orrs	r3, r2
 800156c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001570:	613b      	str	r3, [r7, #16]
 8001572:	e00b      	b.n	800158c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001578:	f043 0220 	orr.w	r2, r3, #32
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001584:	f043 0201 	orr.w	r2, r3, #1
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	430a      	orrs	r2, r1
 800159e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	689a      	ldr	r2, [r3, #8]
 80015a6:	4b28      	ldr	r3, [pc, #160]	@ (8001648 <HAL_ADC_Init+0x1a8>)
 80015a8:	4013      	ands	r3, r2
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	6812      	ldr	r2, [r2, #0]
 80015ae:	68b9      	ldr	r1, [r7, #8]
 80015b0:	430b      	orrs	r3, r1
 80015b2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80015bc:	d003      	beq.n	80015c6 <HAL_ADC_Init+0x126>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d104      	bne.n	80015d0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	691b      	ldr	r3, [r3, #16]
 80015ca:	3b01      	subs	r3, #1
 80015cc:	051b      	lsls	r3, r3, #20
 80015ce:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015d6:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	68fa      	ldr	r2, [r7, #12]
 80015e0:	430a      	orrs	r2, r1
 80015e2:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	689a      	ldr	r2, [r3, #8]
 80015ea:	4b18      	ldr	r3, [pc, #96]	@ (800164c <HAL_ADC_Init+0x1ac>)
 80015ec:	4013      	ands	r3, r2
 80015ee:	68ba      	ldr	r2, [r7, #8]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d10b      	bne.n	800160c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015fe:	f023 0303 	bic.w	r3, r3, #3
 8001602:	f043 0201 	orr.w	r2, r3, #1
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800160a:	e018      	b.n	800163e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001610:	f023 0312 	bic.w	r3, r3, #18
 8001614:	f043 0210 	orr.w	r2, r3, #16
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001620:	f043 0201 	orr.w	r2, r3, #1
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800162c:	e007      	b.n	800163e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001632:	f043 0210 	orr.w	r2, r3, #16
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800163e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001640:	4618      	mov	r0, r3
 8001642:	3718      	adds	r7, #24
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	ffe1f7fd 	.word	0xffe1f7fd
 800164c:	ff1f0efe 	.word	0xff1f0efe

08001650 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001658:	2300      	movs	r3, #0
 800165a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001662:	2b01      	cmp	r3, #1
 8001664:	d101      	bne.n	800166a <HAL_ADC_Start_IT+0x1a>
 8001666:	2302      	movs	r3, #2
 8001668:	e0a0      	b.n	80017ac <HAL_ADC_Start_IT+0x15c>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2201      	movs	r2, #1
 800166e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f000 fa6e 	bl	8001b54 <ADC_Enable>
 8001678:	4603      	mov	r3, r0
 800167a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800167c:	7bfb      	ldrb	r3, [r7, #15]
 800167e:	2b00      	cmp	r3, #0
 8001680:	f040 808f 	bne.w	80017a2 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001688:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800168c:	f023 0301 	bic.w	r3, r3, #1
 8001690:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a45      	ldr	r2, [pc, #276]	@ (80017b4 <HAL_ADC_Start_IT+0x164>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d105      	bne.n	80016ae <HAL_ADC_Start_IT+0x5e>
 80016a2:	4b45      	ldr	r3, [pc, #276]	@ (80017b8 <HAL_ADC_Start_IT+0x168>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d115      	bne.n	80016da <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016b2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d026      	beq.n	8001716 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016cc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80016d0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80016d8:	e01d      	b.n	8001716 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016de:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a33      	ldr	r2, [pc, #204]	@ (80017b8 <HAL_ADC_Start_IT+0x168>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d004      	beq.n	80016fa <HAL_ADC_Start_IT+0xaa>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a2f      	ldr	r2, [pc, #188]	@ (80017b4 <HAL_ADC_Start_IT+0x164>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d10d      	bne.n	8001716 <HAL_ADC_Start_IT+0xc6>
 80016fa:	4b2f      	ldr	r3, [pc, #188]	@ (80017b8 <HAL_ADC_Start_IT+0x168>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001702:	2b00      	cmp	r3, #0
 8001704:	d007      	beq.n	8001716 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800170a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800170e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800171a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d006      	beq.n	8001730 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001726:	f023 0206 	bic.w	r2, r3, #6
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800172e:	e002      	b.n	8001736 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f06f 0202 	mvn.w	r2, #2
 8001746:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	685a      	ldr	r2, [r3, #4]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f042 0220 	orr.w	r2, r2, #32
 8001756:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001762:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001766:	d113      	bne.n	8001790 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800176c:	4a11      	ldr	r2, [pc, #68]	@ (80017b4 <HAL_ADC_Start_IT+0x164>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d105      	bne.n	800177e <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001772:	4b11      	ldr	r3, [pc, #68]	@ (80017b8 <HAL_ADC_Start_IT+0x168>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800177a:	2b00      	cmp	r3, #0
 800177c:	d108      	bne.n	8001790 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	689a      	ldr	r2, [r3, #8]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 800178c:	609a      	str	r2, [r3, #8]
 800178e:	e00c      	b.n	80017aa <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	689a      	ldr	r2, [r3, #8]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	e003      	b.n	80017aa <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 80017aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3710      	adds	r7, #16
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	40012800 	.word	0x40012800
 80017b8:	40012400 	.word	0x40012400

080017bc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bc80      	pop	{r7}
 80017d2:	4770      	bx	lr

080017d4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	f003 0320 	and.w	r3, r3, #32
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d03e      	beq.n	8001874 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d039      	beq.n	8001874 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001804:	f003 0310 	and.w	r3, r3, #16
 8001808:	2b00      	cmp	r3, #0
 800180a:	d105      	bne.n	8001818 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001810:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001822:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001826:	d11d      	bne.n	8001864 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800182c:	2b00      	cmp	r3, #0
 800182e:	d119      	bne.n	8001864 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	685a      	ldr	r2, [r3, #4]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f022 0220 	bic.w	r2, r2, #32
 800183e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001844:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001850:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d105      	bne.n	8001864 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800185c:	f043 0201 	orr.w	r2, r3, #1
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f7ff fc23 	bl	80010b0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f06f 0212 	mvn.w	r2, #18
 8001872:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800187a:	2b00      	cmp	r3, #0
 800187c:	d04d      	beq.n	800191a <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f003 0304 	and.w	r3, r3, #4
 8001884:	2b00      	cmp	r3, #0
 8001886:	d048      	beq.n	800191a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800188c:	f003 0310 	and.w	r3, r3, #16
 8001890:	2b00      	cmp	r3, #0
 8001892:	d105      	bne.n	80018a0 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001898:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80018aa:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 80018ae:	d012      	beq.n	80018d6 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d125      	bne.n	800190a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80018c8:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80018cc:	d11d      	bne.n	800190a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d119      	bne.n	800190a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	685a      	ldr	r2, [r3, #4]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80018e4:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ea:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d105      	bne.n	800190a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001902:	f043 0201 	orr.w	r2, r3, #1
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f000 f9bd 	bl	8001c8a <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f06f 020c 	mvn.w	r2, #12
 8001918:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001920:	2b00      	cmp	r3, #0
 8001922:	d012      	beq.n	800194a <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	2b00      	cmp	r3, #0
 800192c:	d00d      	beq.n	800194a <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001932:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f000 f809 	bl	8001952 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f06f 0201 	mvn.w	r2, #1
 8001948:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800194a:	bf00      	nop
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001952:	b480      	push	{r7}
 8001954:	b083      	sub	sp, #12
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr

08001964 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800196e:	2300      	movs	r3, #0
 8001970:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001972:	2300      	movs	r3, #0
 8001974:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800197c:	2b01      	cmp	r3, #1
 800197e:	d101      	bne.n	8001984 <HAL_ADC_ConfigChannel+0x20>
 8001980:	2302      	movs	r3, #2
 8001982:	e0dc      	b.n	8001b3e <HAL_ADC_ConfigChannel+0x1da>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2201      	movs	r2, #1
 8001988:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	2b06      	cmp	r3, #6
 8001992:	d81c      	bhi.n	80019ce <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685a      	ldr	r2, [r3, #4]
 800199e:	4613      	mov	r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	4413      	add	r3, r2
 80019a4:	3b05      	subs	r3, #5
 80019a6:	221f      	movs	r2, #31
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	43db      	mvns	r3, r3
 80019ae:	4019      	ands	r1, r3
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	6818      	ldr	r0, [r3, #0]
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685a      	ldr	r2, [r3, #4]
 80019b8:	4613      	mov	r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	4413      	add	r3, r2
 80019be:	3b05      	subs	r3, #5
 80019c0:	fa00 f203 	lsl.w	r2, r0, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	430a      	orrs	r2, r1
 80019ca:	635a      	str	r2, [r3, #52]	@ 0x34
 80019cc:	e03c      	b.n	8001a48 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	2b0c      	cmp	r3, #12
 80019d4:	d81c      	bhi.n	8001a10 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685a      	ldr	r2, [r3, #4]
 80019e0:	4613      	mov	r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	4413      	add	r3, r2
 80019e6:	3b23      	subs	r3, #35	@ 0x23
 80019e8:	221f      	movs	r2, #31
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	43db      	mvns	r3, r3
 80019f0:	4019      	ands	r1, r3
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	6818      	ldr	r0, [r3, #0]
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685a      	ldr	r2, [r3, #4]
 80019fa:	4613      	mov	r3, r2
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	4413      	add	r3, r2
 8001a00:	3b23      	subs	r3, #35	@ 0x23
 8001a02:	fa00 f203 	lsl.w	r2, r0, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a0e:	e01b      	b.n	8001a48 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685a      	ldr	r2, [r3, #4]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	4413      	add	r3, r2
 8001a20:	3b41      	subs	r3, #65	@ 0x41
 8001a22:	221f      	movs	r2, #31
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	4019      	ands	r1, r3
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	6818      	ldr	r0, [r3, #0]
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685a      	ldr	r2, [r3, #4]
 8001a34:	4613      	mov	r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4413      	add	r3, r2
 8001a3a:	3b41      	subs	r3, #65	@ 0x41
 8001a3c:	fa00 f203 	lsl.w	r2, r0, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	430a      	orrs	r2, r1
 8001a46:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2b09      	cmp	r3, #9
 8001a4e:	d91c      	bls.n	8001a8a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	68d9      	ldr	r1, [r3, #12]
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	4413      	add	r3, r2
 8001a60:	3b1e      	subs	r3, #30
 8001a62:	2207      	movs	r2, #7
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	4019      	ands	r1, r3
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	6898      	ldr	r0, [r3, #8]
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	4613      	mov	r3, r2
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	4413      	add	r3, r2
 8001a7a:	3b1e      	subs	r3, #30
 8001a7c:	fa00 f203 	lsl.w	r2, r0, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	430a      	orrs	r2, r1
 8001a86:	60da      	str	r2, [r3, #12]
 8001a88:	e019      	b.n	8001abe <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	6919      	ldr	r1, [r3, #16]
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	4613      	mov	r3, r2
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	4413      	add	r3, r2
 8001a9a:	2207      	movs	r2, #7
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	4019      	ands	r1, r3
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	6898      	ldr	r0, [r3, #8]
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	4613      	mov	r3, r2
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	4413      	add	r3, r2
 8001ab2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	430a      	orrs	r2, r1
 8001abc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2b10      	cmp	r3, #16
 8001ac4:	d003      	beq.n	8001ace <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001aca:	2b11      	cmp	r3, #17
 8001acc:	d132      	bne.n	8001b34 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a1d      	ldr	r2, [pc, #116]	@ (8001b48 <HAL_ADC_ConfigChannel+0x1e4>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d125      	bne.n	8001b24 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d126      	bne.n	8001b34 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	689a      	ldr	r2, [r3, #8]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001af4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2b10      	cmp	r3, #16
 8001afc:	d11a      	bne.n	8001b34 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001afe:	4b13      	ldr	r3, [pc, #76]	@ (8001b4c <HAL_ADC_ConfigChannel+0x1e8>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a13      	ldr	r2, [pc, #76]	@ (8001b50 <HAL_ADC_ConfigChannel+0x1ec>)
 8001b04:	fba2 2303 	umull	r2, r3, r2, r3
 8001b08:	0c9a      	lsrs	r2, r3, #18
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	4413      	add	r3, r2
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b14:	e002      	b.n	8001b1c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	3b01      	subs	r3, #1
 8001b1a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d1f9      	bne.n	8001b16 <HAL_ADC_ConfigChannel+0x1b2>
 8001b22:	e007      	b.n	8001b34 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b28:	f043 0220 	orr.w	r2, r3, #32
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3714      	adds	r7, #20
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr
 8001b48:	40012400 	.word	0x40012400
 8001b4c:	20000050 	.word	0x20000050
 8001b50:	431bde83 	.word	0x431bde83

08001b54 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001b60:	2300      	movs	r3, #0
 8001b62:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d040      	beq.n	8001bf4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	689a      	ldr	r2, [r3, #8]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f042 0201 	orr.w	r2, r2, #1
 8001b80:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b82:	4b1f      	ldr	r3, [pc, #124]	@ (8001c00 <ADC_Enable+0xac>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a1f      	ldr	r2, [pc, #124]	@ (8001c04 <ADC_Enable+0xb0>)
 8001b88:	fba2 2303 	umull	r2, r3, r2, r3
 8001b8c:	0c9b      	lsrs	r3, r3, #18
 8001b8e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001b90:	e002      	b.n	8001b98 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	3b01      	subs	r3, #1
 8001b96:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d1f9      	bne.n	8001b92 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b9e:	f7ff fc51 	bl	8001444 <HAL_GetTick>
 8001ba2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001ba4:	e01f      	b.n	8001be6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ba6:	f7ff fc4d 	bl	8001444 <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d918      	bls.n	8001be6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d011      	beq.n	8001be6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bc6:	f043 0210 	orr.w	r2, r3, #16
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bd2:	f043 0201 	orr.w	r2, r3, #1
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e007      	b.n	8001bf6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f003 0301 	and.w	r3, r3, #1
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d1d8      	bne.n	8001ba6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20000050 	.word	0x20000050
 8001c04:	431bde83 	.word	0x431bde83

08001c08 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c10:	2300      	movs	r3, #0
 8001c12:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d12e      	bne.n	8001c80 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	689a      	ldr	r2, [r3, #8]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f022 0201 	bic.w	r2, r2, #1
 8001c30:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001c32:	f7ff fc07 	bl	8001444 <HAL_GetTick>
 8001c36:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001c38:	e01b      	b.n	8001c72 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001c3a:	f7ff fc03 	bl	8001444 <HAL_GetTick>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d914      	bls.n	8001c72 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d10d      	bne.n	8001c72 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c5a:	f043 0210 	orr.w	r2, r3, #16
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c66:	f043 0201 	orr.w	r2, r3, #1
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e007      	b.n	8001c82 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d0dc      	beq.n	8001c3a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	b083      	sub	sp, #12
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bc80      	pop	{r7}
 8001c9a:	4770      	bx	lr

08001c9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f003 0307 	and.w	r3, r3, #7
 8001caa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cac:	4b0c      	ldr	r3, [pc, #48]	@ (8001ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cb2:	68ba      	ldr	r2, [r7, #8]
 8001cb4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cb8:	4013      	ands	r3, r2
 8001cba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cc4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ccc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cce:	4a04      	ldr	r2, [pc, #16]	@ (8001ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	60d3      	str	r3, [r2, #12]
}
 8001cd4:	bf00      	nop
 8001cd6:	3714      	adds	r7, #20
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bc80      	pop	{r7}
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	e000ed00 	.word	0xe000ed00

08001ce4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ce8:	4b04      	ldr	r3, [pc, #16]	@ (8001cfc <__NVIC_GetPriorityGrouping+0x18>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	0a1b      	lsrs	r3, r3, #8
 8001cee:	f003 0307 	and.w	r3, r3, #7
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bc80      	pop	{r7}
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	e000ed00 	.word	0xe000ed00

08001d00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	db0b      	blt.n	8001d2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d12:	79fb      	ldrb	r3, [r7, #7]
 8001d14:	f003 021f 	and.w	r2, r3, #31
 8001d18:	4906      	ldr	r1, [pc, #24]	@ (8001d34 <__NVIC_EnableIRQ+0x34>)
 8001d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1e:	095b      	lsrs	r3, r3, #5
 8001d20:	2001      	movs	r0, #1
 8001d22:	fa00 f202 	lsl.w	r2, r0, r2
 8001d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bc80      	pop	{r7}
 8001d32:	4770      	bx	lr
 8001d34:	e000e100 	.word	0xe000e100

08001d38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	6039      	str	r1, [r7, #0]
 8001d42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	db0a      	blt.n	8001d62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	b2da      	uxtb	r2, r3
 8001d50:	490c      	ldr	r1, [pc, #48]	@ (8001d84 <__NVIC_SetPriority+0x4c>)
 8001d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d56:	0112      	lsls	r2, r2, #4
 8001d58:	b2d2      	uxtb	r2, r2
 8001d5a:	440b      	add	r3, r1
 8001d5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d60:	e00a      	b.n	8001d78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	b2da      	uxtb	r2, r3
 8001d66:	4908      	ldr	r1, [pc, #32]	@ (8001d88 <__NVIC_SetPriority+0x50>)
 8001d68:	79fb      	ldrb	r3, [r7, #7]
 8001d6a:	f003 030f 	and.w	r3, r3, #15
 8001d6e:	3b04      	subs	r3, #4
 8001d70:	0112      	lsls	r2, r2, #4
 8001d72:	b2d2      	uxtb	r2, r2
 8001d74:	440b      	add	r3, r1
 8001d76:	761a      	strb	r2, [r3, #24]
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bc80      	pop	{r7}
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	e000e100 	.word	0xe000e100
 8001d88:	e000ed00 	.word	0xe000ed00

08001d8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b089      	sub	sp, #36	@ 0x24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	f1c3 0307 	rsb	r3, r3, #7
 8001da6:	2b04      	cmp	r3, #4
 8001da8:	bf28      	it	cs
 8001daa:	2304      	movcs	r3, #4
 8001dac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	3304      	adds	r3, #4
 8001db2:	2b06      	cmp	r3, #6
 8001db4:	d902      	bls.n	8001dbc <NVIC_EncodePriority+0x30>
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	3b03      	subs	r3, #3
 8001dba:	e000      	b.n	8001dbe <NVIC_EncodePriority+0x32>
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	43da      	mvns	r2, r3
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	401a      	ands	r2, r3
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	fa01 f303 	lsl.w	r3, r1, r3
 8001dde:	43d9      	mvns	r1, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de4:	4313      	orrs	r3, r2
         );
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3724      	adds	r7, #36	@ 0x24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr

08001df0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e00:	d301      	bcc.n	8001e06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e02:	2301      	movs	r3, #1
 8001e04:	e00f      	b.n	8001e26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e06:	4a0a      	ldr	r2, [pc, #40]	@ (8001e30 <SysTick_Config+0x40>)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e0e:	210f      	movs	r1, #15
 8001e10:	f04f 30ff 	mov.w	r0, #4294967295
 8001e14:	f7ff ff90 	bl	8001d38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e18:	4b05      	ldr	r3, [pc, #20]	@ (8001e30 <SysTick_Config+0x40>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e1e:	4b04      	ldr	r3, [pc, #16]	@ (8001e30 <SysTick_Config+0x40>)
 8001e20:	2207      	movs	r2, #7
 8001e22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	e000e010 	.word	0xe000e010

08001e34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f7ff ff2d 	bl	8001c9c <__NVIC_SetPriorityGrouping>
}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b086      	sub	sp, #24
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	4603      	mov	r3, r0
 8001e52:	60b9      	str	r1, [r7, #8]
 8001e54:	607a      	str	r2, [r7, #4]
 8001e56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e5c:	f7ff ff42 	bl	8001ce4 <__NVIC_GetPriorityGrouping>
 8001e60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	68b9      	ldr	r1, [r7, #8]
 8001e66:	6978      	ldr	r0, [r7, #20]
 8001e68:	f7ff ff90 	bl	8001d8c <NVIC_EncodePriority>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e72:	4611      	mov	r1, r2
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff ff5f 	bl	8001d38 <__NVIC_SetPriority>
}
 8001e7a:	bf00      	nop
 8001e7c:	3718      	adds	r7, #24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b082      	sub	sp, #8
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	4603      	mov	r3, r0
 8001e8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff ff35 	bl	8001d00 <__NVIC_EnableIRQ>
}
 8001e96:	bf00      	nop
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b082      	sub	sp, #8
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f7ff ffa2 	bl	8001df0 <SysTick_Config>
 8001eac:	4603      	mov	r3, r0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	b085      	sub	sp, #20
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d008      	beq.n	8001ee0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2204      	movs	r2, #4
 8001ed2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e020      	b.n	8001f22 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f022 020e 	bic.w	r2, r2, #14
 8001eee:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f022 0201 	bic.w	r2, r2, #1
 8001efe:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f08:	2101      	movs	r1, #1
 8001f0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f0e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3714      	adds	r7, #20
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bc80      	pop	{r7}
 8001f2a:	4770      	bx	lr

08001f2c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f34:	2300      	movs	r3, #0
 8001f36:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d005      	beq.n	8001f50 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2204      	movs	r2, #4
 8001f48:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	73fb      	strb	r3, [r7, #15]
 8001f4e:	e051      	b.n	8001ff4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f022 020e 	bic.w	r2, r2, #14
 8001f5e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f022 0201 	bic.w	r2, r2, #1
 8001f6e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a22      	ldr	r2, [pc, #136]	@ (8002000 <HAL_DMA_Abort_IT+0xd4>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d029      	beq.n	8001fce <HAL_DMA_Abort_IT+0xa2>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a21      	ldr	r2, [pc, #132]	@ (8002004 <HAL_DMA_Abort_IT+0xd8>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d022      	beq.n	8001fca <HAL_DMA_Abort_IT+0x9e>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a1f      	ldr	r2, [pc, #124]	@ (8002008 <HAL_DMA_Abort_IT+0xdc>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d01a      	beq.n	8001fc4 <HAL_DMA_Abort_IT+0x98>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a1e      	ldr	r2, [pc, #120]	@ (800200c <HAL_DMA_Abort_IT+0xe0>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d012      	beq.n	8001fbe <HAL_DMA_Abort_IT+0x92>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a1c      	ldr	r2, [pc, #112]	@ (8002010 <HAL_DMA_Abort_IT+0xe4>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d00a      	beq.n	8001fb8 <HAL_DMA_Abort_IT+0x8c>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a1b      	ldr	r2, [pc, #108]	@ (8002014 <HAL_DMA_Abort_IT+0xe8>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d102      	bne.n	8001fb2 <HAL_DMA_Abort_IT+0x86>
 8001fac:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001fb0:	e00e      	b.n	8001fd0 <HAL_DMA_Abort_IT+0xa4>
 8001fb2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001fb6:	e00b      	b.n	8001fd0 <HAL_DMA_Abort_IT+0xa4>
 8001fb8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001fbc:	e008      	b.n	8001fd0 <HAL_DMA_Abort_IT+0xa4>
 8001fbe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fc2:	e005      	b.n	8001fd0 <HAL_DMA_Abort_IT+0xa4>
 8001fc4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fc8:	e002      	b.n	8001fd0 <HAL_DMA_Abort_IT+0xa4>
 8001fca:	2310      	movs	r3, #16
 8001fcc:	e000      	b.n	8001fd0 <HAL_DMA_Abort_IT+0xa4>
 8001fce:	2301      	movs	r3, #1
 8001fd0:	4a11      	ldr	r2, [pc, #68]	@ (8002018 <HAL_DMA_Abort_IT+0xec>)
 8001fd2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d003      	beq.n	8001ff4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	4798      	blx	r3
    } 
  }
  return status;
 8001ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3710      	adds	r7, #16
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40020008 	.word	0x40020008
 8002004:	4002001c 	.word	0x4002001c
 8002008:	40020030 	.word	0x40020030
 800200c:	40020044 	.word	0x40020044
 8002010:	40020058 	.word	0x40020058
 8002014:	4002006c 	.word	0x4002006c
 8002018:	40020000 	.word	0x40020000

0800201c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800201c:	b480      	push	{r7}
 800201e:	b08b      	sub	sp, #44	@ 0x2c
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002026:	2300      	movs	r3, #0
 8002028:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800202a:	2300      	movs	r3, #0
 800202c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800202e:	e169      	b.n	8002304 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002030:	2201      	movs	r2, #1
 8002032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	69fa      	ldr	r2, [r7, #28]
 8002040:	4013      	ands	r3, r2
 8002042:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	429a      	cmp	r2, r3
 800204a:	f040 8158 	bne.w	80022fe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	4a9a      	ldr	r2, [pc, #616]	@ (80022bc <HAL_GPIO_Init+0x2a0>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d05e      	beq.n	8002116 <HAL_GPIO_Init+0xfa>
 8002058:	4a98      	ldr	r2, [pc, #608]	@ (80022bc <HAL_GPIO_Init+0x2a0>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d875      	bhi.n	800214a <HAL_GPIO_Init+0x12e>
 800205e:	4a98      	ldr	r2, [pc, #608]	@ (80022c0 <HAL_GPIO_Init+0x2a4>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d058      	beq.n	8002116 <HAL_GPIO_Init+0xfa>
 8002064:	4a96      	ldr	r2, [pc, #600]	@ (80022c0 <HAL_GPIO_Init+0x2a4>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d86f      	bhi.n	800214a <HAL_GPIO_Init+0x12e>
 800206a:	4a96      	ldr	r2, [pc, #600]	@ (80022c4 <HAL_GPIO_Init+0x2a8>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d052      	beq.n	8002116 <HAL_GPIO_Init+0xfa>
 8002070:	4a94      	ldr	r2, [pc, #592]	@ (80022c4 <HAL_GPIO_Init+0x2a8>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d869      	bhi.n	800214a <HAL_GPIO_Init+0x12e>
 8002076:	4a94      	ldr	r2, [pc, #592]	@ (80022c8 <HAL_GPIO_Init+0x2ac>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d04c      	beq.n	8002116 <HAL_GPIO_Init+0xfa>
 800207c:	4a92      	ldr	r2, [pc, #584]	@ (80022c8 <HAL_GPIO_Init+0x2ac>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d863      	bhi.n	800214a <HAL_GPIO_Init+0x12e>
 8002082:	4a92      	ldr	r2, [pc, #584]	@ (80022cc <HAL_GPIO_Init+0x2b0>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d046      	beq.n	8002116 <HAL_GPIO_Init+0xfa>
 8002088:	4a90      	ldr	r2, [pc, #576]	@ (80022cc <HAL_GPIO_Init+0x2b0>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d85d      	bhi.n	800214a <HAL_GPIO_Init+0x12e>
 800208e:	2b12      	cmp	r3, #18
 8002090:	d82a      	bhi.n	80020e8 <HAL_GPIO_Init+0xcc>
 8002092:	2b12      	cmp	r3, #18
 8002094:	d859      	bhi.n	800214a <HAL_GPIO_Init+0x12e>
 8002096:	a201      	add	r2, pc, #4	@ (adr r2, 800209c <HAL_GPIO_Init+0x80>)
 8002098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800209c:	08002117 	.word	0x08002117
 80020a0:	080020f1 	.word	0x080020f1
 80020a4:	08002103 	.word	0x08002103
 80020a8:	08002145 	.word	0x08002145
 80020ac:	0800214b 	.word	0x0800214b
 80020b0:	0800214b 	.word	0x0800214b
 80020b4:	0800214b 	.word	0x0800214b
 80020b8:	0800214b 	.word	0x0800214b
 80020bc:	0800214b 	.word	0x0800214b
 80020c0:	0800214b 	.word	0x0800214b
 80020c4:	0800214b 	.word	0x0800214b
 80020c8:	0800214b 	.word	0x0800214b
 80020cc:	0800214b 	.word	0x0800214b
 80020d0:	0800214b 	.word	0x0800214b
 80020d4:	0800214b 	.word	0x0800214b
 80020d8:	0800214b 	.word	0x0800214b
 80020dc:	0800214b 	.word	0x0800214b
 80020e0:	080020f9 	.word	0x080020f9
 80020e4:	0800210d 	.word	0x0800210d
 80020e8:	4a79      	ldr	r2, [pc, #484]	@ (80022d0 <HAL_GPIO_Init+0x2b4>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d013      	beq.n	8002116 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80020ee:	e02c      	b.n	800214a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	623b      	str	r3, [r7, #32]
          break;
 80020f6:	e029      	b.n	800214c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	3304      	adds	r3, #4
 80020fe:	623b      	str	r3, [r7, #32]
          break;
 8002100:	e024      	b.n	800214c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	3308      	adds	r3, #8
 8002108:	623b      	str	r3, [r7, #32]
          break;
 800210a:	e01f      	b.n	800214c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	330c      	adds	r3, #12
 8002112:	623b      	str	r3, [r7, #32]
          break;
 8002114:	e01a      	b.n	800214c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d102      	bne.n	8002124 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800211e:	2304      	movs	r3, #4
 8002120:	623b      	str	r3, [r7, #32]
          break;
 8002122:	e013      	b.n	800214c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d105      	bne.n	8002138 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800212c:	2308      	movs	r3, #8
 800212e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	69fa      	ldr	r2, [r7, #28]
 8002134:	611a      	str	r2, [r3, #16]
          break;
 8002136:	e009      	b.n	800214c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002138:	2308      	movs	r3, #8
 800213a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	69fa      	ldr	r2, [r7, #28]
 8002140:	615a      	str	r2, [r3, #20]
          break;
 8002142:	e003      	b.n	800214c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002144:	2300      	movs	r3, #0
 8002146:	623b      	str	r3, [r7, #32]
          break;
 8002148:	e000      	b.n	800214c <HAL_GPIO_Init+0x130>
          break;
 800214a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	2bff      	cmp	r3, #255	@ 0xff
 8002150:	d801      	bhi.n	8002156 <HAL_GPIO_Init+0x13a>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	e001      	b.n	800215a <HAL_GPIO_Init+0x13e>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	3304      	adds	r3, #4
 800215a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	2bff      	cmp	r3, #255	@ 0xff
 8002160:	d802      	bhi.n	8002168 <HAL_GPIO_Init+0x14c>
 8002162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	e002      	b.n	800216e <HAL_GPIO_Init+0x152>
 8002168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800216a:	3b08      	subs	r3, #8
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	210f      	movs	r1, #15
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	fa01 f303 	lsl.w	r3, r1, r3
 800217c:	43db      	mvns	r3, r3
 800217e:	401a      	ands	r2, r3
 8002180:	6a39      	ldr	r1, [r7, #32]
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	fa01 f303 	lsl.w	r3, r1, r3
 8002188:	431a      	orrs	r2, r3
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002196:	2b00      	cmp	r3, #0
 8002198:	f000 80b1 	beq.w	80022fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800219c:	4b4d      	ldr	r3, [pc, #308]	@ (80022d4 <HAL_GPIO_Init+0x2b8>)
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	4a4c      	ldr	r2, [pc, #304]	@ (80022d4 <HAL_GPIO_Init+0x2b8>)
 80021a2:	f043 0301 	orr.w	r3, r3, #1
 80021a6:	6193      	str	r3, [r2, #24]
 80021a8:	4b4a      	ldr	r3, [pc, #296]	@ (80022d4 <HAL_GPIO_Init+0x2b8>)
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	f003 0301 	and.w	r3, r3, #1
 80021b0:	60bb      	str	r3, [r7, #8]
 80021b2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021b4:	4a48      	ldr	r2, [pc, #288]	@ (80022d8 <HAL_GPIO_Init+0x2bc>)
 80021b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b8:	089b      	lsrs	r3, r3, #2
 80021ba:	3302      	adds	r3, #2
 80021bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021c0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c4:	f003 0303 	and.w	r3, r3, #3
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	220f      	movs	r2, #15
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	43db      	mvns	r3, r3
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	4013      	ands	r3, r2
 80021d6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a40      	ldr	r2, [pc, #256]	@ (80022dc <HAL_GPIO_Init+0x2c0>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d013      	beq.n	8002208 <HAL_GPIO_Init+0x1ec>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a3f      	ldr	r2, [pc, #252]	@ (80022e0 <HAL_GPIO_Init+0x2c4>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d00d      	beq.n	8002204 <HAL_GPIO_Init+0x1e8>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a3e      	ldr	r2, [pc, #248]	@ (80022e4 <HAL_GPIO_Init+0x2c8>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d007      	beq.n	8002200 <HAL_GPIO_Init+0x1e4>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a3d      	ldr	r2, [pc, #244]	@ (80022e8 <HAL_GPIO_Init+0x2cc>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d101      	bne.n	80021fc <HAL_GPIO_Init+0x1e0>
 80021f8:	2303      	movs	r3, #3
 80021fa:	e006      	b.n	800220a <HAL_GPIO_Init+0x1ee>
 80021fc:	2304      	movs	r3, #4
 80021fe:	e004      	b.n	800220a <HAL_GPIO_Init+0x1ee>
 8002200:	2302      	movs	r3, #2
 8002202:	e002      	b.n	800220a <HAL_GPIO_Init+0x1ee>
 8002204:	2301      	movs	r3, #1
 8002206:	e000      	b.n	800220a <HAL_GPIO_Init+0x1ee>
 8002208:	2300      	movs	r3, #0
 800220a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800220c:	f002 0203 	and.w	r2, r2, #3
 8002210:	0092      	lsls	r2, r2, #2
 8002212:	4093      	lsls	r3, r2
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	4313      	orrs	r3, r2
 8002218:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800221a:	492f      	ldr	r1, [pc, #188]	@ (80022d8 <HAL_GPIO_Init+0x2bc>)
 800221c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800221e:	089b      	lsrs	r3, r3, #2
 8002220:	3302      	adds	r3, #2
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d006      	beq.n	8002242 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002234:	4b2d      	ldr	r3, [pc, #180]	@ (80022ec <HAL_GPIO_Init+0x2d0>)
 8002236:	689a      	ldr	r2, [r3, #8]
 8002238:	492c      	ldr	r1, [pc, #176]	@ (80022ec <HAL_GPIO_Init+0x2d0>)
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	4313      	orrs	r3, r2
 800223e:	608b      	str	r3, [r1, #8]
 8002240:	e006      	b.n	8002250 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002242:	4b2a      	ldr	r3, [pc, #168]	@ (80022ec <HAL_GPIO_Init+0x2d0>)
 8002244:	689a      	ldr	r2, [r3, #8]
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	43db      	mvns	r3, r3
 800224a:	4928      	ldr	r1, [pc, #160]	@ (80022ec <HAL_GPIO_Init+0x2d0>)
 800224c:	4013      	ands	r3, r2
 800224e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d006      	beq.n	800226a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800225c:	4b23      	ldr	r3, [pc, #140]	@ (80022ec <HAL_GPIO_Init+0x2d0>)
 800225e:	68da      	ldr	r2, [r3, #12]
 8002260:	4922      	ldr	r1, [pc, #136]	@ (80022ec <HAL_GPIO_Init+0x2d0>)
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	4313      	orrs	r3, r2
 8002266:	60cb      	str	r3, [r1, #12]
 8002268:	e006      	b.n	8002278 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800226a:	4b20      	ldr	r3, [pc, #128]	@ (80022ec <HAL_GPIO_Init+0x2d0>)
 800226c:	68da      	ldr	r2, [r3, #12]
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	43db      	mvns	r3, r3
 8002272:	491e      	ldr	r1, [pc, #120]	@ (80022ec <HAL_GPIO_Init+0x2d0>)
 8002274:	4013      	ands	r3, r2
 8002276:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d006      	beq.n	8002292 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002284:	4b19      	ldr	r3, [pc, #100]	@ (80022ec <HAL_GPIO_Init+0x2d0>)
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	4918      	ldr	r1, [pc, #96]	@ (80022ec <HAL_GPIO_Init+0x2d0>)
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	4313      	orrs	r3, r2
 800228e:	604b      	str	r3, [r1, #4]
 8002290:	e006      	b.n	80022a0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002292:	4b16      	ldr	r3, [pc, #88]	@ (80022ec <HAL_GPIO_Init+0x2d0>)
 8002294:	685a      	ldr	r2, [r3, #4]
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	43db      	mvns	r3, r3
 800229a:	4914      	ldr	r1, [pc, #80]	@ (80022ec <HAL_GPIO_Init+0x2d0>)
 800229c:	4013      	ands	r3, r2
 800229e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d021      	beq.n	80022f0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80022ac:	4b0f      	ldr	r3, [pc, #60]	@ (80022ec <HAL_GPIO_Init+0x2d0>)
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	490e      	ldr	r1, [pc, #56]	@ (80022ec <HAL_GPIO_Init+0x2d0>)
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	600b      	str	r3, [r1, #0]
 80022b8:	e021      	b.n	80022fe <HAL_GPIO_Init+0x2e2>
 80022ba:	bf00      	nop
 80022bc:	10320000 	.word	0x10320000
 80022c0:	10310000 	.word	0x10310000
 80022c4:	10220000 	.word	0x10220000
 80022c8:	10210000 	.word	0x10210000
 80022cc:	10120000 	.word	0x10120000
 80022d0:	10110000 	.word	0x10110000
 80022d4:	40021000 	.word	0x40021000
 80022d8:	40010000 	.word	0x40010000
 80022dc:	40010800 	.word	0x40010800
 80022e0:	40010c00 	.word	0x40010c00
 80022e4:	40011000 	.word	0x40011000
 80022e8:	40011400 	.word	0x40011400
 80022ec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80022f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002320 <HAL_GPIO_Init+0x304>)
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	43db      	mvns	r3, r3
 80022f8:	4909      	ldr	r1, [pc, #36]	@ (8002320 <HAL_GPIO_Init+0x304>)
 80022fa:	4013      	ands	r3, r2
 80022fc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80022fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002300:	3301      	adds	r3, #1
 8002302:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800230a:	fa22 f303 	lsr.w	r3, r2, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	f47f ae8e 	bne.w	8002030 <HAL_GPIO_Init+0x14>
  }
}
 8002314:	bf00      	nop
 8002316:	bf00      	nop
 8002318:	372c      	adds	r7, #44	@ 0x2c
 800231a:	46bd      	mov	sp, r7
 800231c:	bc80      	pop	{r7}
 800231e:	4770      	bx	lr
 8002320:	40010400 	.word	0x40010400

08002324 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	460b      	mov	r3, r1
 800232e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689a      	ldr	r2, [r3, #8]
 8002334:	887b      	ldrh	r3, [r7, #2]
 8002336:	4013      	ands	r3, r2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d002      	beq.n	8002342 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800233c:	2301      	movs	r3, #1
 800233e:	73fb      	strb	r3, [r7, #15]
 8002340:	e001      	b.n	8002346 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002342:	2300      	movs	r3, #0
 8002344:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002346:	7bfb      	ldrb	r3, [r7, #15]
}
 8002348:	4618      	mov	r0, r3
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	bc80      	pop	{r7}
 8002350:	4770      	bx	lr
	...

08002354 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	4603      	mov	r3, r0
 800235c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800235e:	4b08      	ldr	r3, [pc, #32]	@ (8002380 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002360:	695a      	ldr	r2, [r3, #20]
 8002362:	88fb      	ldrh	r3, [r7, #6]
 8002364:	4013      	ands	r3, r2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d006      	beq.n	8002378 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800236a:	4a05      	ldr	r2, [pc, #20]	@ (8002380 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800236c:	88fb      	ldrh	r3, [r7, #6]
 800236e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002370:	88fb      	ldrh	r3, [r7, #6]
 8002372:	4618      	mov	r0, r3
 8002374:	f7fe fe2a 	bl	8000fcc <HAL_GPIO_EXTI_Callback>
  }
}
 8002378:	bf00      	nop
 800237a:	3708      	adds	r7, #8
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40010400 	.word	0x40010400

08002384 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e12b      	b.n	80025ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d106      	bne.n	80023b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f7fd ffe2 	bl	8000374 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2224      	movs	r2, #36	@ 0x24
 80023b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f022 0201 	bic.w	r2, r2, #1
 80023c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80023d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80023e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80023e8:	f001 fbfc 	bl	8003be4 <HAL_RCC_GetPCLK1Freq>
 80023ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	4a81      	ldr	r2, [pc, #516]	@ (80025f8 <HAL_I2C_Init+0x274>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d807      	bhi.n	8002408 <HAL_I2C_Init+0x84>
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	4a80      	ldr	r2, [pc, #512]	@ (80025fc <HAL_I2C_Init+0x278>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	bf94      	ite	ls
 8002400:	2301      	movls	r3, #1
 8002402:	2300      	movhi	r3, #0
 8002404:	b2db      	uxtb	r3, r3
 8002406:	e006      	b.n	8002416 <HAL_I2C_Init+0x92>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	4a7d      	ldr	r2, [pc, #500]	@ (8002600 <HAL_I2C_Init+0x27c>)
 800240c:	4293      	cmp	r3, r2
 800240e:	bf94      	ite	ls
 8002410:	2301      	movls	r3, #1
 8002412:	2300      	movhi	r3, #0
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e0e7      	b.n	80025ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	4a78      	ldr	r2, [pc, #480]	@ (8002604 <HAL_I2C_Init+0x280>)
 8002422:	fba2 2303 	umull	r2, r3, r2, r3
 8002426:	0c9b      	lsrs	r3, r3, #18
 8002428:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	68ba      	ldr	r2, [r7, #8]
 800243a:	430a      	orrs	r2, r1
 800243c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	6a1b      	ldr	r3, [r3, #32]
 8002444:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	4a6a      	ldr	r2, [pc, #424]	@ (80025f8 <HAL_I2C_Init+0x274>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d802      	bhi.n	8002458 <HAL_I2C_Init+0xd4>
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	3301      	adds	r3, #1
 8002456:	e009      	b.n	800246c <HAL_I2C_Init+0xe8>
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800245e:	fb02 f303 	mul.w	r3, r2, r3
 8002462:	4a69      	ldr	r2, [pc, #420]	@ (8002608 <HAL_I2C_Init+0x284>)
 8002464:	fba2 2303 	umull	r2, r3, r2, r3
 8002468:	099b      	lsrs	r3, r3, #6
 800246a:	3301      	adds	r3, #1
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	6812      	ldr	r2, [r2, #0]
 8002470:	430b      	orrs	r3, r1
 8002472:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	69db      	ldr	r3, [r3, #28]
 800247a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800247e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	495c      	ldr	r1, [pc, #368]	@ (80025f8 <HAL_I2C_Init+0x274>)
 8002488:	428b      	cmp	r3, r1
 800248a:	d819      	bhi.n	80024c0 <HAL_I2C_Init+0x13c>
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	1e59      	subs	r1, r3, #1
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	fbb1 f3f3 	udiv	r3, r1, r3
 800249a:	1c59      	adds	r1, r3, #1
 800249c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80024a0:	400b      	ands	r3, r1
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00a      	beq.n	80024bc <HAL_I2C_Init+0x138>
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	1e59      	subs	r1, r3, #1
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80024b4:	3301      	adds	r3, #1
 80024b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024ba:	e051      	b.n	8002560 <HAL_I2C_Init+0x1dc>
 80024bc:	2304      	movs	r3, #4
 80024be:	e04f      	b.n	8002560 <HAL_I2C_Init+0x1dc>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d111      	bne.n	80024ec <HAL_I2C_Init+0x168>
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	1e58      	subs	r0, r3, #1
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6859      	ldr	r1, [r3, #4]
 80024d0:	460b      	mov	r3, r1
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	440b      	add	r3, r1
 80024d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80024da:	3301      	adds	r3, #1
 80024dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	bf0c      	ite	eq
 80024e4:	2301      	moveq	r3, #1
 80024e6:	2300      	movne	r3, #0
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	e012      	b.n	8002512 <HAL_I2C_Init+0x18e>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	1e58      	subs	r0, r3, #1
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6859      	ldr	r1, [r3, #4]
 80024f4:	460b      	mov	r3, r1
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	440b      	add	r3, r1
 80024fa:	0099      	lsls	r1, r3, #2
 80024fc:	440b      	add	r3, r1
 80024fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002502:	3301      	adds	r3, #1
 8002504:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002508:	2b00      	cmp	r3, #0
 800250a:	bf0c      	ite	eq
 800250c:	2301      	moveq	r3, #1
 800250e:	2300      	movne	r3, #0
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <HAL_I2C_Init+0x196>
 8002516:	2301      	movs	r3, #1
 8002518:	e022      	b.n	8002560 <HAL_I2C_Init+0x1dc>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d10e      	bne.n	8002540 <HAL_I2C_Init+0x1bc>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	1e58      	subs	r0, r3, #1
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6859      	ldr	r1, [r3, #4]
 800252a:	460b      	mov	r3, r1
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	440b      	add	r3, r1
 8002530:	fbb0 f3f3 	udiv	r3, r0, r3
 8002534:	3301      	adds	r3, #1
 8002536:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800253a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800253e:	e00f      	b.n	8002560 <HAL_I2C_Init+0x1dc>
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	1e58      	subs	r0, r3, #1
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6859      	ldr	r1, [r3, #4]
 8002548:	460b      	mov	r3, r1
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	440b      	add	r3, r1
 800254e:	0099      	lsls	r1, r3, #2
 8002550:	440b      	add	r3, r1
 8002552:	fbb0 f3f3 	udiv	r3, r0, r3
 8002556:	3301      	adds	r3, #1
 8002558:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800255c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002560:	6879      	ldr	r1, [r7, #4]
 8002562:	6809      	ldr	r1, [r1, #0]
 8002564:	4313      	orrs	r3, r2
 8002566:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	69da      	ldr	r2, [r3, #28]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a1b      	ldr	r3, [r3, #32]
 800257a:	431a      	orrs	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	430a      	orrs	r2, r1
 8002582:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800258e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	6911      	ldr	r1, [r2, #16]
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	68d2      	ldr	r2, [r2, #12]
 800259a:	4311      	orrs	r1, r2
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	6812      	ldr	r2, [r2, #0]
 80025a0:	430b      	orrs	r3, r1
 80025a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	695a      	ldr	r2, [r3, #20]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	431a      	orrs	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	430a      	orrs	r2, r1
 80025be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f042 0201 	orr.w	r2, r2, #1
 80025ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2220      	movs	r2, #32
 80025da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	000186a0 	.word	0x000186a0
 80025fc:	001e847f 	.word	0x001e847f
 8002600:	003d08ff 	.word	0x003d08ff
 8002604:	431bde83 	.word	0x431bde83
 8002608:	10624dd3 	.word	0x10624dd3

0800260c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b088      	sub	sp, #32
 8002610:	af02      	add	r7, sp, #8
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	4608      	mov	r0, r1
 8002616:	4611      	mov	r1, r2
 8002618:	461a      	mov	r2, r3
 800261a:	4603      	mov	r3, r0
 800261c:	817b      	strh	r3, [r7, #10]
 800261e:	460b      	mov	r3, r1
 8002620:	813b      	strh	r3, [r7, #8]
 8002622:	4613      	mov	r3, r2
 8002624:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002626:	f7fe ff0d 	bl	8001444 <HAL_GetTick>
 800262a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2b20      	cmp	r3, #32
 8002636:	f040 80d9 	bne.w	80027ec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	9300      	str	r3, [sp, #0]
 800263e:	2319      	movs	r3, #25
 8002640:	2201      	movs	r2, #1
 8002642:	496d      	ldr	r1, [pc, #436]	@ (80027f8 <HAL_I2C_Mem_Write+0x1ec>)
 8002644:	68f8      	ldr	r0, [r7, #12]
 8002646:	f000 fccd 	bl	8002fe4 <I2C_WaitOnFlagUntilTimeout>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002650:	2302      	movs	r3, #2
 8002652:	e0cc      	b.n	80027ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800265a:	2b01      	cmp	r3, #1
 800265c:	d101      	bne.n	8002662 <HAL_I2C_Mem_Write+0x56>
 800265e:	2302      	movs	r3, #2
 8002660:	e0c5      	b.n	80027ee <HAL_I2C_Mem_Write+0x1e2>
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2201      	movs	r2, #1
 8002666:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0301 	and.w	r3, r3, #1
 8002674:	2b01      	cmp	r3, #1
 8002676:	d007      	beq.n	8002688 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f042 0201 	orr.w	r2, r2, #1
 8002686:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002696:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2221      	movs	r2, #33	@ 0x21
 800269c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2240      	movs	r2, #64	@ 0x40
 80026a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6a3a      	ldr	r2, [r7, #32]
 80026b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80026b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026be:	b29a      	uxth	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	4a4d      	ldr	r2, [pc, #308]	@ (80027fc <HAL_I2C_Mem_Write+0x1f0>)
 80026c8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026ca:	88f8      	ldrh	r0, [r7, #6]
 80026cc:	893a      	ldrh	r2, [r7, #8]
 80026ce:	8979      	ldrh	r1, [r7, #10]
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	9301      	str	r3, [sp, #4]
 80026d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026d6:	9300      	str	r3, [sp, #0]
 80026d8:	4603      	mov	r3, r0
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	f000 fb04 	bl	8002ce8 <I2C_RequestMemoryWrite>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d052      	beq.n	800278c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e081      	b.n	80027ee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80026ee:	68f8      	ldr	r0, [r7, #12]
 80026f0:	f000 fd92 	bl	8003218 <I2C_WaitOnTXEFlagUntilTimeout>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00d      	beq.n	8002716 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fe:	2b04      	cmp	r3, #4
 8002700:	d107      	bne.n	8002712 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002710:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e06b      	b.n	80027ee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800271a:	781a      	ldrb	r2, [r3, #0]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002726:	1c5a      	adds	r2, r3, #1
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002730:	3b01      	subs	r3, #1
 8002732:	b29a      	uxth	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800273c:	b29b      	uxth	r3, r3
 800273e:	3b01      	subs	r3, #1
 8002740:	b29a      	uxth	r2, r3
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	695b      	ldr	r3, [r3, #20]
 800274c:	f003 0304 	and.w	r3, r3, #4
 8002750:	2b04      	cmp	r3, #4
 8002752:	d11b      	bne.n	800278c <HAL_I2C_Mem_Write+0x180>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002758:	2b00      	cmp	r3, #0
 800275a:	d017      	beq.n	800278c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002760:	781a      	ldrb	r2, [r3, #0]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800276c:	1c5a      	adds	r2, r3, #1
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002776:	3b01      	subs	r3, #1
 8002778:	b29a      	uxth	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002782:	b29b      	uxth	r3, r3
 8002784:	3b01      	subs	r3, #1
 8002786:	b29a      	uxth	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1aa      	bne.n	80026ea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002794:	697a      	ldr	r2, [r7, #20]
 8002796:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f000 fd85 	bl	80032a8 <I2C_WaitOnBTFFlagUntilTimeout>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d00d      	beq.n	80027c0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a8:	2b04      	cmp	r3, #4
 80027aa:	d107      	bne.n	80027bc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027ba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e016      	b.n	80027ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2220      	movs	r2, #32
 80027d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80027e8:	2300      	movs	r3, #0
 80027ea:	e000      	b.n	80027ee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80027ec:	2302      	movs	r3, #2
  }
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3718      	adds	r7, #24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	00100002 	.word	0x00100002
 80027fc:	ffff0000 	.word	0xffff0000

08002800 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b08c      	sub	sp, #48	@ 0x30
 8002804:	af02      	add	r7, sp, #8
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	4608      	mov	r0, r1
 800280a:	4611      	mov	r1, r2
 800280c:	461a      	mov	r2, r3
 800280e:	4603      	mov	r3, r0
 8002810:	817b      	strh	r3, [r7, #10]
 8002812:	460b      	mov	r3, r1
 8002814:	813b      	strh	r3, [r7, #8]
 8002816:	4613      	mov	r3, r2
 8002818:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800281a:	2300      	movs	r3, #0
 800281c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800281e:	f7fe fe11 	bl	8001444 <HAL_GetTick>
 8002822:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800282a:	b2db      	uxtb	r3, r3
 800282c:	2b20      	cmp	r3, #32
 800282e:	f040 8250 	bne.w	8002cd2 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002834:	9300      	str	r3, [sp, #0]
 8002836:	2319      	movs	r3, #25
 8002838:	2201      	movs	r2, #1
 800283a:	4982      	ldr	r1, [pc, #520]	@ (8002a44 <HAL_I2C_Mem_Read+0x244>)
 800283c:	68f8      	ldr	r0, [r7, #12]
 800283e:	f000 fbd1 	bl	8002fe4 <I2C_WaitOnFlagUntilTimeout>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002848:	2302      	movs	r3, #2
 800284a:	e243      	b.n	8002cd4 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002852:	2b01      	cmp	r3, #1
 8002854:	d101      	bne.n	800285a <HAL_I2C_Mem_Read+0x5a>
 8002856:	2302      	movs	r3, #2
 8002858:	e23c      	b.n	8002cd4 <HAL_I2C_Mem_Read+0x4d4>
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2201      	movs	r2, #1
 800285e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	2b01      	cmp	r3, #1
 800286e:	d007      	beq.n	8002880 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f042 0201 	orr.w	r2, r2, #1
 800287e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800288e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2222      	movs	r2, #34	@ 0x22
 8002894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2240      	movs	r2, #64	@ 0x40
 800289c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80028aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80028b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	4a62      	ldr	r2, [pc, #392]	@ (8002a48 <HAL_I2C_Mem_Read+0x248>)
 80028c0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028c2:	88f8      	ldrh	r0, [r7, #6]
 80028c4:	893a      	ldrh	r2, [r7, #8]
 80028c6:	8979      	ldrh	r1, [r7, #10]
 80028c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ca:	9301      	str	r3, [sp, #4]
 80028cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028ce:	9300      	str	r3, [sp, #0]
 80028d0:	4603      	mov	r3, r0
 80028d2:	68f8      	ldr	r0, [r7, #12]
 80028d4:	f000 fa9e 	bl	8002e14 <I2C_RequestMemoryRead>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e1f8      	b.n	8002cd4 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d113      	bne.n	8002912 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028ea:	2300      	movs	r3, #0
 80028ec:	61fb      	str	r3, [r7, #28]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	695b      	ldr	r3, [r3, #20]
 80028f4:	61fb      	str	r3, [r7, #28]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	61fb      	str	r3, [r7, #28]
 80028fe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	e1cc      	b.n	8002cac <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002916:	2b01      	cmp	r3, #1
 8002918:	d11e      	bne.n	8002958 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002928:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800292a:	b672      	cpsid	i
}
 800292c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800292e:	2300      	movs	r3, #0
 8002930:	61bb      	str	r3, [r7, #24]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	695b      	ldr	r3, [r3, #20]
 8002938:	61bb      	str	r3, [r7, #24]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	61bb      	str	r3, [r7, #24]
 8002942:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002952:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002954:	b662      	cpsie	i
}
 8002956:	e035      	b.n	80029c4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800295c:	2b02      	cmp	r3, #2
 800295e:	d11e      	bne.n	800299e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800296e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002970:	b672      	cpsid	i
}
 8002972:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002974:	2300      	movs	r3, #0
 8002976:	617b      	str	r3, [r7, #20]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	617b      	str	r3, [r7, #20]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	617b      	str	r3, [r7, #20]
 8002988:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002998:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800299a:	b662      	cpsie	i
}
 800299c:	e012      	b.n	80029c4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80029ac:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029ae:	2300      	movs	r3, #0
 80029b0:	613b      	str	r3, [r7, #16]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	695b      	ldr	r3, [r3, #20]
 80029b8:	613b      	str	r3, [r7, #16]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	613b      	str	r3, [r7, #16]
 80029c2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80029c4:	e172      	b.n	8002cac <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029ca:	2b03      	cmp	r3, #3
 80029cc:	f200 811f 	bhi.w	8002c0e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d123      	bne.n	8002a20 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029da:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80029dc:	68f8      	ldr	r0, [r7, #12]
 80029de:	f000 fcab 	bl	8003338 <I2C_WaitOnRXNEFlagUntilTimeout>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e173      	b.n	8002cd4 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	691a      	ldr	r2, [r3, #16]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029fe:	1c5a      	adds	r2, r3, #1
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	3b01      	subs	r3, #1
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002a1e:	e145      	b.n	8002cac <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d152      	bne.n	8002ace <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a2a:	9300      	str	r3, [sp, #0]
 8002a2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a2e:	2200      	movs	r2, #0
 8002a30:	4906      	ldr	r1, [pc, #24]	@ (8002a4c <HAL_I2C_Mem_Read+0x24c>)
 8002a32:	68f8      	ldr	r0, [r7, #12]
 8002a34:	f000 fad6 	bl	8002fe4 <I2C_WaitOnFlagUntilTimeout>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d008      	beq.n	8002a50 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e148      	b.n	8002cd4 <HAL_I2C_Mem_Read+0x4d4>
 8002a42:	bf00      	nop
 8002a44:	00100002 	.word	0x00100002
 8002a48:	ffff0000 	.word	0xffff0000
 8002a4c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002a50:	b672      	cpsid	i
}
 8002a52:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	691a      	ldr	r2, [r3, #16]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a6e:	b2d2      	uxtb	r2, r2
 8002a70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a76:	1c5a      	adds	r2, r3, #1
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a80:	3b01      	subs	r3, #1
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	b29a      	uxth	r2, r3
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002a96:	b662      	cpsie	i
}
 8002a98:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	691a      	ldr	r2, [r3, #16]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa4:	b2d2      	uxtb	r2, r2
 8002aa6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aac:	1c5a      	adds	r2, r3, #1
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	3b01      	subs	r3, #1
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002acc:	e0ee      	b.n	8002cac <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad0:	9300      	str	r3, [sp, #0]
 8002ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	4981      	ldr	r1, [pc, #516]	@ (8002cdc <HAL_I2C_Mem_Read+0x4dc>)
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	f000 fa83 	bl	8002fe4 <I2C_WaitOnFlagUntilTimeout>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d001      	beq.n	8002ae8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e0f5      	b.n	8002cd4 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002af6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002af8:	b672      	cpsid	i
}
 8002afa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	691a      	ldr	r2, [r3, #16]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b06:	b2d2      	uxtb	r2, r2
 8002b08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b0e:	1c5a      	adds	r2, r3, #1
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	b29a      	uxth	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	3b01      	subs	r3, #1
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002b2e:	4b6c      	ldr	r3, [pc, #432]	@ (8002ce0 <HAL_I2C_Mem_Read+0x4e0>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	08db      	lsrs	r3, r3, #3
 8002b34:	4a6b      	ldr	r2, [pc, #428]	@ (8002ce4 <HAL_I2C_Mem_Read+0x4e4>)
 8002b36:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3a:	0a1a      	lsrs	r2, r3, #8
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	4413      	add	r3, r2
 8002b42:	00da      	lsls	r2, r3, #3
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002b48:	6a3b      	ldr	r3, [r7, #32]
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002b4e:	6a3b      	ldr	r3, [r7, #32]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d118      	bne.n	8002b86 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2220      	movs	r2, #32
 8002b5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6e:	f043 0220 	orr.w	r2, r3, #32
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002b76:	b662      	cpsie	i
}
 8002b78:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e0a6      	b.n	8002cd4 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	695b      	ldr	r3, [r3, #20]
 8002b8c:	f003 0304 	and.w	r3, r3, #4
 8002b90:	2b04      	cmp	r3, #4
 8002b92:	d1d9      	bne.n	8002b48 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ba2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	691a      	ldr	r2, [r3, #16]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bae:	b2d2      	uxtb	r2, r2
 8002bb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb6:	1c5a      	adds	r2, r3, #1
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bc0:	3b01      	subs	r3, #1
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002bd6:	b662      	cpsie	i
}
 8002bd8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	691a      	ldr	r2, [r3, #16]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be4:	b2d2      	uxtb	r2, r2
 8002be6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bec:	1c5a      	adds	r2, r3, #1
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	b29a      	uxth	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	3b01      	subs	r3, #1
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002c0c:	e04e      	b.n	8002cac <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c10:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f000 fb90 	bl	8003338 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e058      	b.n	8002cd4 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	691a      	ldr	r2, [r3, #16]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c2c:	b2d2      	uxtb	r2, r2
 8002c2e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c34:	1c5a      	adds	r2, r3, #1
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	b29a      	uxth	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	f003 0304 	and.w	r3, r3, #4
 8002c5e:	2b04      	cmp	r3, #4
 8002c60:	d124      	bne.n	8002cac <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c66:	2b03      	cmp	r3, #3
 8002c68:	d107      	bne.n	8002c7a <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c78:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	691a      	ldr	r2, [r3, #16]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c84:	b2d2      	uxtb	r2, r2
 8002c86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c8c:	1c5a      	adds	r2, r3, #1
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c96:	3b01      	subs	r3, #1
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	3b01      	subs	r3, #1
 8002ca6:	b29a      	uxth	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f47f ae88 	bne.w	80029c6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2220      	movs	r2, #32
 8002cba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	e000      	b.n	8002cd4 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8002cd2:	2302      	movs	r3, #2
  }
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3728      	adds	r7, #40	@ 0x28
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	00010004 	.word	0x00010004
 8002ce0:	20000050 	.word	0x20000050
 8002ce4:	14f8b589 	.word	0x14f8b589

08002ce8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b088      	sub	sp, #32
 8002cec:	af02      	add	r7, sp, #8
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	4608      	mov	r0, r1
 8002cf2:	4611      	mov	r1, r2
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	817b      	strh	r3, [r7, #10]
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	813b      	strh	r3, [r7, #8]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d10:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d14:	9300      	str	r3, [sp, #0]
 8002d16:	6a3b      	ldr	r3, [r7, #32]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f000 f960 	bl	8002fe4 <I2C_WaitOnFlagUntilTimeout>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00d      	beq.n	8002d46 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d38:	d103      	bne.n	8002d42 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d40:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e05f      	b.n	8002e06 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d46:	897b      	ldrh	r3, [r7, #10]
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002d54:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d58:	6a3a      	ldr	r2, [r7, #32]
 8002d5a:	492d      	ldr	r1, [pc, #180]	@ (8002e10 <I2C_RequestMemoryWrite+0x128>)
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	f000 f9bb 	bl	80030d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e04c      	b.n	8002e06 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	617b      	str	r3, [r7, #20]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	617b      	str	r3, [r7, #20]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	617b      	str	r3, [r7, #20]
 8002d80:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d84:	6a39      	ldr	r1, [r7, #32]
 8002d86:	68f8      	ldr	r0, [r7, #12]
 8002d88:	f000 fa46 	bl	8003218 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00d      	beq.n	8002dae <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d96:	2b04      	cmp	r3, #4
 8002d98:	d107      	bne.n	8002daa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002da8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e02b      	b.n	8002e06 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002dae:	88fb      	ldrh	r3, [r7, #6]
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d105      	bne.n	8002dc0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002db4:	893b      	ldrh	r3, [r7, #8]
 8002db6:	b2da      	uxtb	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	611a      	str	r2, [r3, #16]
 8002dbe:	e021      	b.n	8002e04 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002dc0:	893b      	ldrh	r3, [r7, #8]
 8002dc2:	0a1b      	lsrs	r3, r3, #8
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	b2da      	uxtb	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dd0:	6a39      	ldr	r1, [r7, #32]
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	f000 fa20 	bl	8003218 <I2C_WaitOnTXEFlagUntilTimeout>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00d      	beq.n	8002dfa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de2:	2b04      	cmp	r3, #4
 8002de4:	d107      	bne.n	8002df6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002df4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e005      	b.n	8002e06 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002dfa:	893b      	ldrh	r3, [r7, #8]
 8002dfc:	b2da      	uxtb	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3718      	adds	r7, #24
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	00010002 	.word	0x00010002

08002e14 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b088      	sub	sp, #32
 8002e18:	af02      	add	r7, sp, #8
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	4608      	mov	r0, r1
 8002e1e:	4611      	mov	r1, r2
 8002e20:	461a      	mov	r2, r3
 8002e22:	4603      	mov	r3, r0
 8002e24:	817b      	strh	r3, [r7, #10]
 8002e26:	460b      	mov	r3, r1
 8002e28:	813b      	strh	r3, [r7, #8]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002e3c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e4c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e50:	9300      	str	r3, [sp, #0]
 8002e52:	6a3b      	ldr	r3, [r7, #32]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	f000 f8c2 	bl	8002fe4 <I2C_WaitOnFlagUntilTimeout>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00d      	beq.n	8002e82 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e74:	d103      	bne.n	8002e7e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e7c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e0aa      	b.n	8002fd8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e82:	897b      	ldrh	r3, [r7, #10]
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	461a      	mov	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002e90:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e94:	6a3a      	ldr	r2, [r7, #32]
 8002e96:	4952      	ldr	r1, [pc, #328]	@ (8002fe0 <I2C_RequestMemoryRead+0x1cc>)
 8002e98:	68f8      	ldr	r0, [r7, #12]
 8002e9a:	f000 f91d 	bl	80030d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d001      	beq.n	8002ea8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e097      	b.n	8002fd8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	617b      	str	r3, [r7, #20]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	617b      	str	r3, [r7, #20]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	617b      	str	r3, [r7, #20]
 8002ebc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ebe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ec0:	6a39      	ldr	r1, [r7, #32]
 8002ec2:	68f8      	ldr	r0, [r7, #12]
 8002ec4:	f000 f9a8 	bl	8003218 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00d      	beq.n	8002eea <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed2:	2b04      	cmp	r3, #4
 8002ed4:	d107      	bne.n	8002ee6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ee4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e076      	b.n	8002fd8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002eea:	88fb      	ldrh	r3, [r7, #6]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d105      	bne.n	8002efc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ef0:	893b      	ldrh	r3, [r7, #8]
 8002ef2:	b2da      	uxtb	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	611a      	str	r2, [r3, #16]
 8002efa:	e021      	b.n	8002f40 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002efc:	893b      	ldrh	r3, [r7, #8]
 8002efe:	0a1b      	lsrs	r3, r3, #8
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	b2da      	uxtb	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f0c:	6a39      	ldr	r1, [r7, #32]
 8002f0e:	68f8      	ldr	r0, [r7, #12]
 8002f10:	f000 f982 	bl	8003218 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00d      	beq.n	8002f36 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f1e:	2b04      	cmp	r3, #4
 8002f20:	d107      	bne.n	8002f32 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f30:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e050      	b.n	8002fd8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f36:	893b      	ldrh	r3, [r7, #8]
 8002f38:	b2da      	uxtb	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f42:	6a39      	ldr	r1, [r7, #32]
 8002f44:	68f8      	ldr	r0, [r7, #12]
 8002f46:	f000 f967 	bl	8003218 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00d      	beq.n	8002f6c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f54:	2b04      	cmp	r3, #4
 8002f56:	d107      	bne.n	8002f68 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f66:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e035      	b.n	8002fd8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f7a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f7e:	9300      	str	r3, [sp, #0]
 8002f80:	6a3b      	ldr	r3, [r7, #32]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002f88:	68f8      	ldr	r0, [r7, #12]
 8002f8a:	f000 f82b 	bl	8002fe4 <I2C_WaitOnFlagUntilTimeout>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00d      	beq.n	8002fb0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fa2:	d103      	bne.n	8002fac <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002faa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e013      	b.n	8002fd8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002fb0:	897b      	ldrh	r3, [r7, #10]
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	f043 0301 	orr.w	r3, r3, #1
 8002fb8:	b2da      	uxtb	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc2:	6a3a      	ldr	r2, [r7, #32]
 8002fc4:	4906      	ldr	r1, [pc, #24]	@ (8002fe0 <I2C_RequestMemoryRead+0x1cc>)
 8002fc6:	68f8      	ldr	r0, [r7, #12]
 8002fc8:	f000 f886 	bl	80030d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e000      	b.n	8002fd8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002fd6:	2300      	movs	r3, #0
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3718      	adds	r7, #24
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	00010002 	.word	0x00010002

08002fe4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	603b      	str	r3, [r7, #0]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ff4:	e048      	b.n	8003088 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ffc:	d044      	beq.n	8003088 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ffe:	f7fe fa21 	bl	8001444 <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	683a      	ldr	r2, [r7, #0]
 800300a:	429a      	cmp	r2, r3
 800300c:	d302      	bcc.n	8003014 <I2C_WaitOnFlagUntilTimeout+0x30>
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d139      	bne.n	8003088 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	0c1b      	lsrs	r3, r3, #16
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b01      	cmp	r3, #1
 800301c:	d10d      	bne.n	800303a <I2C_WaitOnFlagUntilTimeout+0x56>
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	695b      	ldr	r3, [r3, #20]
 8003024:	43da      	mvns	r2, r3
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	4013      	ands	r3, r2
 800302a:	b29b      	uxth	r3, r3
 800302c:	2b00      	cmp	r3, #0
 800302e:	bf0c      	ite	eq
 8003030:	2301      	moveq	r3, #1
 8003032:	2300      	movne	r3, #0
 8003034:	b2db      	uxtb	r3, r3
 8003036:	461a      	mov	r2, r3
 8003038:	e00c      	b.n	8003054 <I2C_WaitOnFlagUntilTimeout+0x70>
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	43da      	mvns	r2, r3
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	4013      	ands	r3, r2
 8003046:	b29b      	uxth	r3, r3
 8003048:	2b00      	cmp	r3, #0
 800304a:	bf0c      	ite	eq
 800304c:	2301      	moveq	r3, #1
 800304e:	2300      	movne	r3, #0
 8003050:	b2db      	uxtb	r3, r3
 8003052:	461a      	mov	r2, r3
 8003054:	79fb      	ldrb	r3, [r7, #7]
 8003056:	429a      	cmp	r2, r3
 8003058:	d116      	bne.n	8003088 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2220      	movs	r2, #32
 8003064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003074:	f043 0220 	orr.w	r2, r3, #32
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e023      	b.n	80030d0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	0c1b      	lsrs	r3, r3, #16
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b01      	cmp	r3, #1
 8003090:	d10d      	bne.n	80030ae <I2C_WaitOnFlagUntilTimeout+0xca>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	695b      	ldr	r3, [r3, #20]
 8003098:	43da      	mvns	r2, r3
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	4013      	ands	r3, r2
 800309e:	b29b      	uxth	r3, r3
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	bf0c      	ite	eq
 80030a4:	2301      	moveq	r3, #1
 80030a6:	2300      	movne	r3, #0
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	461a      	mov	r2, r3
 80030ac:	e00c      	b.n	80030c8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	43da      	mvns	r2, r3
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	4013      	ands	r3, r2
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	2b00      	cmp	r3, #0
 80030be:	bf0c      	ite	eq
 80030c0:	2301      	moveq	r3, #1
 80030c2:	2300      	movne	r3, #0
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	461a      	mov	r2, r3
 80030c8:	79fb      	ldrb	r3, [r7, #7]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d093      	beq.n	8002ff6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3710      	adds	r7, #16
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]
 80030e4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030e6:	e071      	b.n	80031cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030f6:	d123      	bne.n	8003140 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003106:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003110:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2220      	movs	r2, #32
 800311c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800312c:	f043 0204 	orr.w	r2, r3, #4
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2200      	movs	r2, #0
 8003138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e067      	b.n	8003210 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003146:	d041      	beq.n	80031cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003148:	f7fe f97c 	bl	8001444 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	429a      	cmp	r2, r3
 8003156:	d302      	bcc.n	800315e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d136      	bne.n	80031cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	0c1b      	lsrs	r3, r3, #16
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b01      	cmp	r3, #1
 8003166:	d10c      	bne.n	8003182 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	43da      	mvns	r2, r3
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	4013      	ands	r3, r2
 8003174:	b29b      	uxth	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	bf14      	ite	ne
 800317a:	2301      	movne	r3, #1
 800317c:	2300      	moveq	r3, #0
 800317e:	b2db      	uxtb	r3, r3
 8003180:	e00b      	b.n	800319a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	699b      	ldr	r3, [r3, #24]
 8003188:	43da      	mvns	r2, r3
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	4013      	ands	r3, r2
 800318e:	b29b      	uxth	r3, r3
 8003190:	2b00      	cmp	r3, #0
 8003192:	bf14      	ite	ne
 8003194:	2301      	movne	r3, #1
 8003196:	2300      	moveq	r3, #0
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	d016      	beq.n	80031cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2220      	movs	r2, #32
 80031a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b8:	f043 0220 	orr.w	r2, r3, #32
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e021      	b.n	8003210 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	0c1b      	lsrs	r3, r3, #16
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d10c      	bne.n	80031f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	695b      	ldr	r3, [r3, #20]
 80031dc:	43da      	mvns	r2, r3
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	4013      	ands	r3, r2
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	bf14      	ite	ne
 80031e8:	2301      	movne	r3, #1
 80031ea:	2300      	moveq	r3, #0
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	e00b      	b.n	8003208 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	43da      	mvns	r2, r3
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	4013      	ands	r3, r2
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	bf14      	ite	ne
 8003202:	2301      	movne	r3, #1
 8003204:	2300      	moveq	r3, #0
 8003206:	b2db      	uxtb	r3, r3
 8003208:	2b00      	cmp	r3, #0
 800320a:	f47f af6d 	bne.w	80030e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3710      	adds	r7, #16
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003224:	e034      	b.n	8003290 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003226:	68f8      	ldr	r0, [r7, #12]
 8003228:	f000 f8e3 	bl	80033f2 <I2C_IsAcknowledgeFailed>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e034      	b.n	80032a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800323c:	d028      	beq.n	8003290 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800323e:	f7fe f901 	bl	8001444 <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	68ba      	ldr	r2, [r7, #8]
 800324a:	429a      	cmp	r2, r3
 800324c:	d302      	bcc.n	8003254 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d11d      	bne.n	8003290 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800325e:	2b80      	cmp	r3, #128	@ 0x80
 8003260:	d016      	beq.n	8003290 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2220      	movs	r2, #32
 800326c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327c:	f043 0220 	orr.w	r2, r3, #32
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e007      	b.n	80032a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800329a:	2b80      	cmp	r3, #128	@ 0x80
 800329c:	d1c3      	bne.n	8003226 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3710      	adds	r7, #16
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032b4:	e034      	b.n	8003320 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032b6:	68f8      	ldr	r0, [r7, #12]
 80032b8:	f000 f89b 	bl	80033f2 <I2C_IsAcknowledgeFailed>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e034      	b.n	8003330 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032cc:	d028      	beq.n	8003320 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ce:	f7fe f8b9 	bl	8001444 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	68ba      	ldr	r2, [r7, #8]
 80032da:	429a      	cmp	r2, r3
 80032dc:	d302      	bcc.n	80032e4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d11d      	bne.n	8003320 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	f003 0304 	and.w	r3, r3, #4
 80032ee:	2b04      	cmp	r3, #4
 80032f0:	d016      	beq.n	8003320 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2200      	movs	r2, #0
 80032f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2220      	movs	r2, #32
 80032fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800330c:	f043 0220 	orr.w	r2, r3, #32
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e007      	b.n	8003330 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	f003 0304 	and.w	r3, r3, #4
 800332a:	2b04      	cmp	r3, #4
 800332c:	d1c3      	bne.n	80032b6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800332e:	2300      	movs	r3, #0
}
 8003330:	4618      	mov	r0, r3
 8003332:	3710      	adds	r7, #16
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003344:	e049      	b.n	80033da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	695b      	ldr	r3, [r3, #20]
 800334c:	f003 0310 	and.w	r3, r3, #16
 8003350:	2b10      	cmp	r3, #16
 8003352:	d119      	bne.n	8003388 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f06f 0210 	mvn.w	r2, #16
 800335c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2200      	movs	r2, #0
 8003362:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2220      	movs	r2, #32
 8003368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e030      	b.n	80033ea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003388:	f7fe f85c 	bl	8001444 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	68ba      	ldr	r2, [r7, #8]
 8003394:	429a      	cmp	r2, r3
 8003396:	d302      	bcc.n	800339e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d11d      	bne.n	80033da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	695b      	ldr	r3, [r3, #20]
 80033a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033a8:	2b40      	cmp	r3, #64	@ 0x40
 80033aa:	d016      	beq.n	80033da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2220      	movs	r2, #32
 80033b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c6:	f043 0220 	orr.w	r2, r3, #32
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e007      	b.n	80033ea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	695b      	ldr	r3, [r3, #20]
 80033e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033e4:	2b40      	cmp	r3, #64	@ 0x40
 80033e6:	d1ae      	bne.n	8003346 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3710      	adds	r7, #16
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80033f2:	b480      	push	{r7}
 80033f4:	b083      	sub	sp, #12
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	695b      	ldr	r3, [r3, #20]
 8003400:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003404:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003408:	d11b      	bne.n	8003442 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003412:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2220      	movs	r2, #32
 800341e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342e:	f043 0204 	orr.w	r2, r3, #4
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e000      	b.n	8003444 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003442:	2300      	movs	r3, #0
}
 8003444:	4618      	mov	r0, r3
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	bc80      	pop	{r7}
 800344c:	4770      	bx	lr
	...

08003450 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e272      	b.n	8003948 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	2b00      	cmp	r3, #0
 800346c:	f000 8087 	beq.w	800357e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003470:	4b92      	ldr	r3, [pc, #584]	@ (80036bc <HAL_RCC_OscConfig+0x26c>)
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f003 030c 	and.w	r3, r3, #12
 8003478:	2b04      	cmp	r3, #4
 800347a:	d00c      	beq.n	8003496 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800347c:	4b8f      	ldr	r3, [pc, #572]	@ (80036bc <HAL_RCC_OscConfig+0x26c>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f003 030c 	and.w	r3, r3, #12
 8003484:	2b08      	cmp	r3, #8
 8003486:	d112      	bne.n	80034ae <HAL_RCC_OscConfig+0x5e>
 8003488:	4b8c      	ldr	r3, [pc, #560]	@ (80036bc <HAL_RCC_OscConfig+0x26c>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003490:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003494:	d10b      	bne.n	80034ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003496:	4b89      	ldr	r3, [pc, #548]	@ (80036bc <HAL_RCC_OscConfig+0x26c>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d06c      	beq.n	800357c <HAL_RCC_OscConfig+0x12c>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d168      	bne.n	800357c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e24c      	b.n	8003948 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034b6:	d106      	bne.n	80034c6 <HAL_RCC_OscConfig+0x76>
 80034b8:	4b80      	ldr	r3, [pc, #512]	@ (80036bc <HAL_RCC_OscConfig+0x26c>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a7f      	ldr	r2, [pc, #508]	@ (80036bc <HAL_RCC_OscConfig+0x26c>)
 80034be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034c2:	6013      	str	r3, [r2, #0]
 80034c4:	e02e      	b.n	8003524 <HAL_RCC_OscConfig+0xd4>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10c      	bne.n	80034e8 <HAL_RCC_OscConfig+0x98>
 80034ce:	4b7b      	ldr	r3, [pc, #492]	@ (80036bc <HAL_RCC_OscConfig+0x26c>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a7a      	ldr	r2, [pc, #488]	@ (80036bc <HAL_RCC_OscConfig+0x26c>)
 80034d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034d8:	6013      	str	r3, [r2, #0]
 80034da:	4b78      	ldr	r3, [pc, #480]	@ (80036bc <HAL_RCC_OscConfig+0x26c>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a77      	ldr	r2, [pc, #476]	@ (80036bc <HAL_RCC_OscConfig+0x26c>)
 80034e0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034e4:	6013      	str	r3, [r2, #0]
 80034e6:	e01d      	b.n	8003524 <HAL_RCC_OscConfig+0xd4>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80034f0:	d10c      	bne.n	800350c <HAL_RCC_OscConfig+0xbc>
 80034f2:	4b72      	ldr	r3, [pc, #456]	@ (80036bc <HAL_RCC_OscConfig+0x26c>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a71      	ldr	r2, [pc, #452]	@ (80036bc <HAL_RCC_OscConfig+0x26c>)
 80034f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034fc:	6013      	str	r3, [r2, #0]
 80034fe:	4b6f      	ldr	r3, [pc, #444]	@ (80036bc <HAL_RCC_OscConfig+0x26c>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a6e      	ldr	r2, [pc, #440]	@ (80036bc <HAL_RCC_OscConfig+0x26c>)
 8003504:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003508:	6013      	str	r3, [r2, #0]
 800350a:	e00b      	b.n	8003524 <HAL_RCC_OscConfig+0xd4>
 800350c:	4b6b      	ldr	r3, [pc, #428]	@ (80036bc <HAL_RCC_OscConfig+0x26c>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a6a      	ldr	r2, [pc, #424]	@ (80036bc <HAL_RCC_OscConfig+0x26c>)
 8003512:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003516:	6013      	str	r3, [r2, #0]
 8003518:	4b68      	ldr	r3, [pc, #416]	@ (80036bc <HAL_RCC_OscConfig+0x26c>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a67      	ldr	r2, [pc, #412]	@ (80036bc <HAL_RCC_OscConfig+0x26c>)
 800351e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003522:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d013      	beq.n	8003554 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800352c:	f7fd ff8a 	bl	8001444 <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003532:	e008      	b.n	8003546 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003534:	f7fd ff86 	bl	8001444 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b64      	cmp	r3, #100	@ 0x64
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e200      	b.n	8003948 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003546:	4b5d      	ldr	r3, [pc, #372]	@ (80036bc <HAL_RCC_OscConfig+0x26c>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d0f0      	beq.n	8003534 <HAL_RCC_OscConfig+0xe4>
 8003552:	e014      	b.n	800357e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003554:	f7fd ff76 	bl	8001444 <HAL_GetTick>
 8003558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800355a:	e008      	b.n	800356e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800355c:	f7fd ff72 	bl	8001444 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b64      	cmp	r3, #100	@ 0x64
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e1ec      	b.n	8003948 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800356e:	4b53      	ldr	r3, [pc, #332]	@ (80036bc <HAL_RCC_OscConfig+0x26c>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1f0      	bne.n	800355c <HAL_RCC_OscConfig+0x10c>
 800357a:	e000      	b.n	800357e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800357c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d063      	beq.n	8003652 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800358a:	4b4c      	ldr	r3, [pc, #304]	@ (80036bc <HAL_RCC_OscConfig+0x26c>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f003 030c 	and.w	r3, r3, #12
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00b      	beq.n	80035ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003596:	4b49      	ldr	r3, [pc, #292]	@ (80036bc <HAL_RCC_OscConfig+0x26c>)
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f003 030c 	and.w	r3, r3, #12
 800359e:	2b08      	cmp	r3, #8
 80035a0:	d11c      	bne.n	80035dc <HAL_RCC_OscConfig+0x18c>
 80035a2:	4b46      	ldr	r3, [pc, #280]	@ (80036bc <HAL_RCC_OscConfig+0x26c>)
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d116      	bne.n	80035dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ae:	4b43      	ldr	r3, [pc, #268]	@ (80036bc <HAL_RCC_OscConfig+0x26c>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d005      	beq.n	80035c6 <HAL_RCC_OscConfig+0x176>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d001      	beq.n	80035c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e1c0      	b.n	8003948 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035c6:	4b3d      	ldr	r3, [pc, #244]	@ (80036bc <HAL_RCC_OscConfig+0x26c>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	4939      	ldr	r1, [pc, #228]	@ (80036bc <HAL_RCC_OscConfig+0x26c>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035da:	e03a      	b.n	8003652 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d020      	beq.n	8003626 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035e4:	4b36      	ldr	r3, [pc, #216]	@ (80036c0 <HAL_RCC_OscConfig+0x270>)
 80035e6:	2201      	movs	r2, #1
 80035e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ea:	f7fd ff2b 	bl	8001444 <HAL_GetTick>
 80035ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035f0:	e008      	b.n	8003604 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035f2:	f7fd ff27 	bl	8001444 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d901      	bls.n	8003604 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e1a1      	b.n	8003948 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003604:	4b2d      	ldr	r3, [pc, #180]	@ (80036bc <HAL_RCC_OscConfig+0x26c>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0302 	and.w	r3, r3, #2
 800360c:	2b00      	cmp	r3, #0
 800360e:	d0f0      	beq.n	80035f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003610:	4b2a      	ldr	r3, [pc, #168]	@ (80036bc <HAL_RCC_OscConfig+0x26c>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	695b      	ldr	r3, [r3, #20]
 800361c:	00db      	lsls	r3, r3, #3
 800361e:	4927      	ldr	r1, [pc, #156]	@ (80036bc <HAL_RCC_OscConfig+0x26c>)
 8003620:	4313      	orrs	r3, r2
 8003622:	600b      	str	r3, [r1, #0]
 8003624:	e015      	b.n	8003652 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003626:	4b26      	ldr	r3, [pc, #152]	@ (80036c0 <HAL_RCC_OscConfig+0x270>)
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800362c:	f7fd ff0a 	bl	8001444 <HAL_GetTick>
 8003630:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003632:	e008      	b.n	8003646 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003634:	f7fd ff06 	bl	8001444 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b02      	cmp	r3, #2
 8003640:	d901      	bls.n	8003646 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e180      	b.n	8003948 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003646:	4b1d      	ldr	r3, [pc, #116]	@ (80036bc <HAL_RCC_OscConfig+0x26c>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d1f0      	bne.n	8003634 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0308 	and.w	r3, r3, #8
 800365a:	2b00      	cmp	r3, #0
 800365c:	d03a      	beq.n	80036d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	699b      	ldr	r3, [r3, #24]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d019      	beq.n	800369a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003666:	4b17      	ldr	r3, [pc, #92]	@ (80036c4 <HAL_RCC_OscConfig+0x274>)
 8003668:	2201      	movs	r2, #1
 800366a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800366c:	f7fd feea 	bl	8001444 <HAL_GetTick>
 8003670:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003672:	e008      	b.n	8003686 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003674:	f7fd fee6 	bl	8001444 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b02      	cmp	r3, #2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e160      	b.n	8003948 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003686:	4b0d      	ldr	r3, [pc, #52]	@ (80036bc <HAL_RCC_OscConfig+0x26c>)
 8003688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d0f0      	beq.n	8003674 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003692:	2001      	movs	r0, #1
 8003694:	f000 face 	bl	8003c34 <RCC_Delay>
 8003698:	e01c      	b.n	80036d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800369a:	4b0a      	ldr	r3, [pc, #40]	@ (80036c4 <HAL_RCC_OscConfig+0x274>)
 800369c:	2200      	movs	r2, #0
 800369e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036a0:	f7fd fed0 	bl	8001444 <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036a6:	e00f      	b.n	80036c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036a8:	f7fd fecc 	bl	8001444 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d908      	bls.n	80036c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e146      	b.n	8003948 <HAL_RCC_OscConfig+0x4f8>
 80036ba:	bf00      	nop
 80036bc:	40021000 	.word	0x40021000
 80036c0:	42420000 	.word	0x42420000
 80036c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036c8:	4b92      	ldr	r3, [pc, #584]	@ (8003914 <HAL_RCC_OscConfig+0x4c4>)
 80036ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1e9      	bne.n	80036a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0304 	and.w	r3, r3, #4
 80036dc:	2b00      	cmp	r3, #0
 80036de:	f000 80a6 	beq.w	800382e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036e2:	2300      	movs	r3, #0
 80036e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036e6:	4b8b      	ldr	r3, [pc, #556]	@ (8003914 <HAL_RCC_OscConfig+0x4c4>)
 80036e8:	69db      	ldr	r3, [r3, #28]
 80036ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d10d      	bne.n	800370e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036f2:	4b88      	ldr	r3, [pc, #544]	@ (8003914 <HAL_RCC_OscConfig+0x4c4>)
 80036f4:	69db      	ldr	r3, [r3, #28]
 80036f6:	4a87      	ldr	r2, [pc, #540]	@ (8003914 <HAL_RCC_OscConfig+0x4c4>)
 80036f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036fc:	61d3      	str	r3, [r2, #28]
 80036fe:	4b85      	ldr	r3, [pc, #532]	@ (8003914 <HAL_RCC_OscConfig+0x4c4>)
 8003700:	69db      	ldr	r3, [r3, #28]
 8003702:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003706:	60bb      	str	r3, [r7, #8]
 8003708:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800370a:	2301      	movs	r3, #1
 800370c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800370e:	4b82      	ldr	r3, [pc, #520]	@ (8003918 <HAL_RCC_OscConfig+0x4c8>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003716:	2b00      	cmp	r3, #0
 8003718:	d118      	bne.n	800374c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800371a:	4b7f      	ldr	r3, [pc, #508]	@ (8003918 <HAL_RCC_OscConfig+0x4c8>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a7e      	ldr	r2, [pc, #504]	@ (8003918 <HAL_RCC_OscConfig+0x4c8>)
 8003720:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003724:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003726:	f7fd fe8d 	bl	8001444 <HAL_GetTick>
 800372a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800372c:	e008      	b.n	8003740 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800372e:	f7fd fe89 	bl	8001444 <HAL_GetTick>
 8003732:	4602      	mov	r2, r0
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	2b64      	cmp	r3, #100	@ 0x64
 800373a:	d901      	bls.n	8003740 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800373c:	2303      	movs	r3, #3
 800373e:	e103      	b.n	8003948 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003740:	4b75      	ldr	r3, [pc, #468]	@ (8003918 <HAL_RCC_OscConfig+0x4c8>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003748:	2b00      	cmp	r3, #0
 800374a:	d0f0      	beq.n	800372e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	2b01      	cmp	r3, #1
 8003752:	d106      	bne.n	8003762 <HAL_RCC_OscConfig+0x312>
 8003754:	4b6f      	ldr	r3, [pc, #444]	@ (8003914 <HAL_RCC_OscConfig+0x4c4>)
 8003756:	6a1b      	ldr	r3, [r3, #32]
 8003758:	4a6e      	ldr	r2, [pc, #440]	@ (8003914 <HAL_RCC_OscConfig+0x4c4>)
 800375a:	f043 0301 	orr.w	r3, r3, #1
 800375e:	6213      	str	r3, [r2, #32]
 8003760:	e02d      	b.n	80037be <HAL_RCC_OscConfig+0x36e>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10c      	bne.n	8003784 <HAL_RCC_OscConfig+0x334>
 800376a:	4b6a      	ldr	r3, [pc, #424]	@ (8003914 <HAL_RCC_OscConfig+0x4c4>)
 800376c:	6a1b      	ldr	r3, [r3, #32]
 800376e:	4a69      	ldr	r2, [pc, #420]	@ (8003914 <HAL_RCC_OscConfig+0x4c4>)
 8003770:	f023 0301 	bic.w	r3, r3, #1
 8003774:	6213      	str	r3, [r2, #32]
 8003776:	4b67      	ldr	r3, [pc, #412]	@ (8003914 <HAL_RCC_OscConfig+0x4c4>)
 8003778:	6a1b      	ldr	r3, [r3, #32]
 800377a:	4a66      	ldr	r2, [pc, #408]	@ (8003914 <HAL_RCC_OscConfig+0x4c4>)
 800377c:	f023 0304 	bic.w	r3, r3, #4
 8003780:	6213      	str	r3, [r2, #32]
 8003782:	e01c      	b.n	80037be <HAL_RCC_OscConfig+0x36e>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	2b05      	cmp	r3, #5
 800378a:	d10c      	bne.n	80037a6 <HAL_RCC_OscConfig+0x356>
 800378c:	4b61      	ldr	r3, [pc, #388]	@ (8003914 <HAL_RCC_OscConfig+0x4c4>)
 800378e:	6a1b      	ldr	r3, [r3, #32]
 8003790:	4a60      	ldr	r2, [pc, #384]	@ (8003914 <HAL_RCC_OscConfig+0x4c4>)
 8003792:	f043 0304 	orr.w	r3, r3, #4
 8003796:	6213      	str	r3, [r2, #32]
 8003798:	4b5e      	ldr	r3, [pc, #376]	@ (8003914 <HAL_RCC_OscConfig+0x4c4>)
 800379a:	6a1b      	ldr	r3, [r3, #32]
 800379c:	4a5d      	ldr	r2, [pc, #372]	@ (8003914 <HAL_RCC_OscConfig+0x4c4>)
 800379e:	f043 0301 	orr.w	r3, r3, #1
 80037a2:	6213      	str	r3, [r2, #32]
 80037a4:	e00b      	b.n	80037be <HAL_RCC_OscConfig+0x36e>
 80037a6:	4b5b      	ldr	r3, [pc, #364]	@ (8003914 <HAL_RCC_OscConfig+0x4c4>)
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	4a5a      	ldr	r2, [pc, #360]	@ (8003914 <HAL_RCC_OscConfig+0x4c4>)
 80037ac:	f023 0301 	bic.w	r3, r3, #1
 80037b0:	6213      	str	r3, [r2, #32]
 80037b2:	4b58      	ldr	r3, [pc, #352]	@ (8003914 <HAL_RCC_OscConfig+0x4c4>)
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	4a57      	ldr	r2, [pc, #348]	@ (8003914 <HAL_RCC_OscConfig+0x4c4>)
 80037b8:	f023 0304 	bic.w	r3, r3, #4
 80037bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d015      	beq.n	80037f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037c6:	f7fd fe3d 	bl	8001444 <HAL_GetTick>
 80037ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037cc:	e00a      	b.n	80037e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037ce:	f7fd fe39 	bl	8001444 <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037dc:	4293      	cmp	r3, r2
 80037de:	d901      	bls.n	80037e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e0b1      	b.n	8003948 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037e4:	4b4b      	ldr	r3, [pc, #300]	@ (8003914 <HAL_RCC_OscConfig+0x4c4>)
 80037e6:	6a1b      	ldr	r3, [r3, #32]
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d0ee      	beq.n	80037ce <HAL_RCC_OscConfig+0x37e>
 80037f0:	e014      	b.n	800381c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037f2:	f7fd fe27 	bl	8001444 <HAL_GetTick>
 80037f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037f8:	e00a      	b.n	8003810 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037fa:	f7fd fe23 	bl	8001444 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003808:	4293      	cmp	r3, r2
 800380a:	d901      	bls.n	8003810 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e09b      	b.n	8003948 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003810:	4b40      	ldr	r3, [pc, #256]	@ (8003914 <HAL_RCC_OscConfig+0x4c4>)
 8003812:	6a1b      	ldr	r3, [r3, #32]
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	2b00      	cmp	r3, #0
 800381a:	d1ee      	bne.n	80037fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800381c:	7dfb      	ldrb	r3, [r7, #23]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d105      	bne.n	800382e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003822:	4b3c      	ldr	r3, [pc, #240]	@ (8003914 <HAL_RCC_OscConfig+0x4c4>)
 8003824:	69db      	ldr	r3, [r3, #28]
 8003826:	4a3b      	ldr	r2, [pc, #236]	@ (8003914 <HAL_RCC_OscConfig+0x4c4>)
 8003828:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800382c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	69db      	ldr	r3, [r3, #28]
 8003832:	2b00      	cmp	r3, #0
 8003834:	f000 8087 	beq.w	8003946 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003838:	4b36      	ldr	r3, [pc, #216]	@ (8003914 <HAL_RCC_OscConfig+0x4c4>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f003 030c 	and.w	r3, r3, #12
 8003840:	2b08      	cmp	r3, #8
 8003842:	d061      	beq.n	8003908 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	69db      	ldr	r3, [r3, #28]
 8003848:	2b02      	cmp	r3, #2
 800384a:	d146      	bne.n	80038da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800384c:	4b33      	ldr	r3, [pc, #204]	@ (800391c <HAL_RCC_OscConfig+0x4cc>)
 800384e:	2200      	movs	r2, #0
 8003850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003852:	f7fd fdf7 	bl	8001444 <HAL_GetTick>
 8003856:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003858:	e008      	b.n	800386c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800385a:	f7fd fdf3 	bl	8001444 <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	2b02      	cmp	r3, #2
 8003866:	d901      	bls.n	800386c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e06d      	b.n	8003948 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800386c:	4b29      	ldr	r3, [pc, #164]	@ (8003914 <HAL_RCC_OscConfig+0x4c4>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1f0      	bne.n	800385a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003880:	d108      	bne.n	8003894 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003882:	4b24      	ldr	r3, [pc, #144]	@ (8003914 <HAL_RCC_OscConfig+0x4c4>)
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	4921      	ldr	r1, [pc, #132]	@ (8003914 <HAL_RCC_OscConfig+0x4c4>)
 8003890:	4313      	orrs	r3, r2
 8003892:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003894:	4b1f      	ldr	r3, [pc, #124]	@ (8003914 <HAL_RCC_OscConfig+0x4c4>)
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a19      	ldr	r1, [r3, #32]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a4:	430b      	orrs	r3, r1
 80038a6:	491b      	ldr	r1, [pc, #108]	@ (8003914 <HAL_RCC_OscConfig+0x4c4>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038ac:	4b1b      	ldr	r3, [pc, #108]	@ (800391c <HAL_RCC_OscConfig+0x4cc>)
 80038ae:	2201      	movs	r2, #1
 80038b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b2:	f7fd fdc7 	bl	8001444 <HAL_GetTick>
 80038b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038b8:	e008      	b.n	80038cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038ba:	f7fd fdc3 	bl	8001444 <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d901      	bls.n	80038cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e03d      	b.n	8003948 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038cc:	4b11      	ldr	r3, [pc, #68]	@ (8003914 <HAL_RCC_OscConfig+0x4c4>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d0f0      	beq.n	80038ba <HAL_RCC_OscConfig+0x46a>
 80038d8:	e035      	b.n	8003946 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038da:	4b10      	ldr	r3, [pc, #64]	@ (800391c <HAL_RCC_OscConfig+0x4cc>)
 80038dc:	2200      	movs	r2, #0
 80038de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e0:	f7fd fdb0 	bl	8001444 <HAL_GetTick>
 80038e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038e6:	e008      	b.n	80038fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038e8:	f7fd fdac 	bl	8001444 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d901      	bls.n	80038fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e026      	b.n	8003948 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038fa:	4b06      	ldr	r3, [pc, #24]	@ (8003914 <HAL_RCC_OscConfig+0x4c4>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1f0      	bne.n	80038e8 <HAL_RCC_OscConfig+0x498>
 8003906:	e01e      	b.n	8003946 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	69db      	ldr	r3, [r3, #28]
 800390c:	2b01      	cmp	r3, #1
 800390e:	d107      	bne.n	8003920 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e019      	b.n	8003948 <HAL_RCC_OscConfig+0x4f8>
 8003914:	40021000 	.word	0x40021000
 8003918:	40007000 	.word	0x40007000
 800391c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003920:	4b0b      	ldr	r3, [pc, #44]	@ (8003950 <HAL_RCC_OscConfig+0x500>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a1b      	ldr	r3, [r3, #32]
 8003930:	429a      	cmp	r2, r3
 8003932:	d106      	bne.n	8003942 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800393e:	429a      	cmp	r2, r3
 8003940:	d001      	beq.n	8003946 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e000      	b.n	8003948 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	3718      	adds	r7, #24
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	40021000 	.word	0x40021000

08003954 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d101      	bne.n	8003968 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e0d0      	b.n	8003b0a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003968:	4b6a      	ldr	r3, [pc, #424]	@ (8003b14 <HAL_RCC_ClockConfig+0x1c0>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0307 	and.w	r3, r3, #7
 8003970:	683a      	ldr	r2, [r7, #0]
 8003972:	429a      	cmp	r2, r3
 8003974:	d910      	bls.n	8003998 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003976:	4b67      	ldr	r3, [pc, #412]	@ (8003b14 <HAL_RCC_ClockConfig+0x1c0>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f023 0207 	bic.w	r2, r3, #7
 800397e:	4965      	ldr	r1, [pc, #404]	@ (8003b14 <HAL_RCC_ClockConfig+0x1c0>)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	4313      	orrs	r3, r2
 8003984:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003986:	4b63      	ldr	r3, [pc, #396]	@ (8003b14 <HAL_RCC_ClockConfig+0x1c0>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0307 	and.w	r3, r3, #7
 800398e:	683a      	ldr	r2, [r7, #0]
 8003990:	429a      	cmp	r2, r3
 8003992:	d001      	beq.n	8003998 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e0b8      	b.n	8003b0a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0302 	and.w	r3, r3, #2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d020      	beq.n	80039e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0304 	and.w	r3, r3, #4
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d005      	beq.n	80039bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039b0:	4b59      	ldr	r3, [pc, #356]	@ (8003b18 <HAL_RCC_ClockConfig+0x1c4>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	4a58      	ldr	r2, [pc, #352]	@ (8003b18 <HAL_RCC_ClockConfig+0x1c4>)
 80039b6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80039ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0308 	and.w	r3, r3, #8
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d005      	beq.n	80039d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039c8:	4b53      	ldr	r3, [pc, #332]	@ (8003b18 <HAL_RCC_ClockConfig+0x1c4>)
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	4a52      	ldr	r2, [pc, #328]	@ (8003b18 <HAL_RCC_ClockConfig+0x1c4>)
 80039ce:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80039d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039d4:	4b50      	ldr	r3, [pc, #320]	@ (8003b18 <HAL_RCC_ClockConfig+0x1c4>)
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	494d      	ldr	r1, [pc, #308]	@ (8003b18 <HAL_RCC_ClockConfig+0x1c4>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d040      	beq.n	8003a74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d107      	bne.n	8003a0a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039fa:	4b47      	ldr	r3, [pc, #284]	@ (8003b18 <HAL_RCC_ClockConfig+0x1c4>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d115      	bne.n	8003a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e07f      	b.n	8003b0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d107      	bne.n	8003a22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a12:	4b41      	ldr	r3, [pc, #260]	@ (8003b18 <HAL_RCC_ClockConfig+0x1c4>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d109      	bne.n	8003a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e073      	b.n	8003b0a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a22:	4b3d      	ldr	r3, [pc, #244]	@ (8003b18 <HAL_RCC_ClockConfig+0x1c4>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0302 	and.w	r3, r3, #2
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d101      	bne.n	8003a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e06b      	b.n	8003b0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a32:	4b39      	ldr	r3, [pc, #228]	@ (8003b18 <HAL_RCC_ClockConfig+0x1c4>)
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f023 0203 	bic.w	r2, r3, #3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	4936      	ldr	r1, [pc, #216]	@ (8003b18 <HAL_RCC_ClockConfig+0x1c4>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a44:	f7fd fcfe 	bl	8001444 <HAL_GetTick>
 8003a48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a4a:	e00a      	b.n	8003a62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a4c:	f7fd fcfa 	bl	8001444 <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d901      	bls.n	8003a62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e053      	b.n	8003b0a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a62:	4b2d      	ldr	r3, [pc, #180]	@ (8003b18 <HAL_RCC_ClockConfig+0x1c4>)
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f003 020c 	and.w	r2, r3, #12
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d1eb      	bne.n	8003a4c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a74:	4b27      	ldr	r3, [pc, #156]	@ (8003b14 <HAL_RCC_ClockConfig+0x1c0>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0307 	and.w	r3, r3, #7
 8003a7c:	683a      	ldr	r2, [r7, #0]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d210      	bcs.n	8003aa4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a82:	4b24      	ldr	r3, [pc, #144]	@ (8003b14 <HAL_RCC_ClockConfig+0x1c0>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f023 0207 	bic.w	r2, r3, #7
 8003a8a:	4922      	ldr	r1, [pc, #136]	@ (8003b14 <HAL_RCC_ClockConfig+0x1c0>)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a92:	4b20      	ldr	r3, [pc, #128]	@ (8003b14 <HAL_RCC_ClockConfig+0x1c0>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0307 	and.w	r3, r3, #7
 8003a9a:	683a      	ldr	r2, [r7, #0]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d001      	beq.n	8003aa4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e032      	b.n	8003b0a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0304 	and.w	r3, r3, #4
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d008      	beq.n	8003ac2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ab0:	4b19      	ldr	r3, [pc, #100]	@ (8003b18 <HAL_RCC_ClockConfig+0x1c4>)
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	4916      	ldr	r1, [pc, #88]	@ (8003b18 <HAL_RCC_ClockConfig+0x1c4>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0308 	and.w	r3, r3, #8
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d009      	beq.n	8003ae2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ace:	4b12      	ldr	r3, [pc, #72]	@ (8003b18 <HAL_RCC_ClockConfig+0x1c4>)
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	00db      	lsls	r3, r3, #3
 8003adc:	490e      	ldr	r1, [pc, #56]	@ (8003b18 <HAL_RCC_ClockConfig+0x1c4>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ae2:	f000 f821 	bl	8003b28 <HAL_RCC_GetSysClockFreq>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8003b18 <HAL_RCC_ClockConfig+0x1c4>)
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	091b      	lsrs	r3, r3, #4
 8003aee:	f003 030f 	and.w	r3, r3, #15
 8003af2:	490a      	ldr	r1, [pc, #40]	@ (8003b1c <HAL_RCC_ClockConfig+0x1c8>)
 8003af4:	5ccb      	ldrb	r3, [r1, r3]
 8003af6:	fa22 f303 	lsr.w	r3, r2, r3
 8003afa:	4a09      	ldr	r2, [pc, #36]	@ (8003b20 <HAL_RCC_ClockConfig+0x1cc>)
 8003afc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003afe:	4b09      	ldr	r3, [pc, #36]	@ (8003b24 <HAL_RCC_ClockConfig+0x1d0>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7fd fc5c 	bl	80013c0 <HAL_InitTick>

  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	40022000 	.word	0x40022000
 8003b18:	40021000 	.word	0x40021000
 8003b1c:	0800495c 	.word	0x0800495c
 8003b20:	20000050 	.word	0x20000050
 8003b24:	20000054 	.word	0x20000054

08003b28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b087      	sub	sp, #28
 8003b2c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	60fb      	str	r3, [r7, #12]
 8003b32:	2300      	movs	r3, #0
 8003b34:	60bb      	str	r3, [r7, #8]
 8003b36:	2300      	movs	r3, #0
 8003b38:	617b      	str	r3, [r7, #20]
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003b42:	4b1e      	ldr	r3, [pc, #120]	@ (8003bbc <HAL_RCC_GetSysClockFreq+0x94>)
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f003 030c 	and.w	r3, r3, #12
 8003b4e:	2b04      	cmp	r3, #4
 8003b50:	d002      	beq.n	8003b58 <HAL_RCC_GetSysClockFreq+0x30>
 8003b52:	2b08      	cmp	r3, #8
 8003b54:	d003      	beq.n	8003b5e <HAL_RCC_GetSysClockFreq+0x36>
 8003b56:	e027      	b.n	8003ba8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b58:	4b19      	ldr	r3, [pc, #100]	@ (8003bc0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b5a:	613b      	str	r3, [r7, #16]
      break;
 8003b5c:	e027      	b.n	8003bae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	0c9b      	lsrs	r3, r3, #18
 8003b62:	f003 030f 	and.w	r3, r3, #15
 8003b66:	4a17      	ldr	r2, [pc, #92]	@ (8003bc4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003b68:	5cd3      	ldrb	r3, [r2, r3]
 8003b6a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d010      	beq.n	8003b98 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003b76:	4b11      	ldr	r3, [pc, #68]	@ (8003bbc <HAL_RCC_GetSysClockFreq+0x94>)
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	0c5b      	lsrs	r3, r3, #17
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	4a11      	ldr	r2, [pc, #68]	@ (8003bc8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003b82:	5cd3      	ldrb	r3, [r2, r3]
 8003b84:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a0d      	ldr	r2, [pc, #52]	@ (8003bc0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b8a:	fb03 f202 	mul.w	r2, r3, r2
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b94:	617b      	str	r3, [r7, #20]
 8003b96:	e004      	b.n	8003ba2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a0c      	ldr	r2, [pc, #48]	@ (8003bcc <HAL_RCC_GetSysClockFreq+0xa4>)
 8003b9c:	fb02 f303 	mul.w	r3, r2, r3
 8003ba0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	613b      	str	r3, [r7, #16]
      break;
 8003ba6:	e002      	b.n	8003bae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ba8:	4b05      	ldr	r3, [pc, #20]	@ (8003bc0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003baa:	613b      	str	r3, [r7, #16]
      break;
 8003bac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bae:	693b      	ldr	r3, [r7, #16]
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	371c      	adds	r7, #28
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bc80      	pop	{r7}
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	40021000 	.word	0x40021000
 8003bc0:	007a1200 	.word	0x007a1200
 8003bc4:	08004974 	.word	0x08004974
 8003bc8:	08004984 	.word	0x08004984
 8003bcc:	003d0900 	.word	0x003d0900

08003bd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bd4:	4b02      	ldr	r3, [pc, #8]	@ (8003be0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bc80      	pop	{r7}
 8003bde:	4770      	bx	lr
 8003be0:	20000050 	.word	0x20000050

08003be4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003be8:	f7ff fff2 	bl	8003bd0 <HAL_RCC_GetHCLKFreq>
 8003bec:	4602      	mov	r2, r0
 8003bee:	4b05      	ldr	r3, [pc, #20]	@ (8003c04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	0a1b      	lsrs	r3, r3, #8
 8003bf4:	f003 0307 	and.w	r3, r3, #7
 8003bf8:	4903      	ldr	r1, [pc, #12]	@ (8003c08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bfa:	5ccb      	ldrb	r3, [r1, r3]
 8003bfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	40021000 	.word	0x40021000
 8003c08:	0800496c 	.word	0x0800496c

08003c0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c10:	f7ff ffde 	bl	8003bd0 <HAL_RCC_GetHCLKFreq>
 8003c14:	4602      	mov	r2, r0
 8003c16:	4b05      	ldr	r3, [pc, #20]	@ (8003c2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	0adb      	lsrs	r3, r3, #11
 8003c1c:	f003 0307 	and.w	r3, r3, #7
 8003c20:	4903      	ldr	r1, [pc, #12]	@ (8003c30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c22:	5ccb      	ldrb	r3, [r1, r3]
 8003c24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	40021000 	.word	0x40021000
 8003c30:	0800496c 	.word	0x0800496c

08003c34 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8003c68 <RCC_Delay+0x34>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a0a      	ldr	r2, [pc, #40]	@ (8003c6c <RCC_Delay+0x38>)
 8003c42:	fba2 2303 	umull	r2, r3, r2, r3
 8003c46:	0a5b      	lsrs	r3, r3, #9
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	fb02 f303 	mul.w	r3, r2, r3
 8003c4e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003c50:	bf00      	nop
  }
  while (Delay --);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	1e5a      	subs	r2, r3, #1
 8003c56:	60fa      	str	r2, [r7, #12]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1f9      	bne.n	8003c50 <RCC_Delay+0x1c>
}
 8003c5c:	bf00      	nop
 8003c5e:	bf00      	nop
 8003c60:	3714      	adds	r7, #20
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bc80      	pop	{r7}
 8003c66:	4770      	bx	lr
 8003c68:	20000050 	.word	0x20000050
 8003c6c:	10624dd3 	.word	0x10624dd3

08003c70 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	613b      	str	r3, [r7, #16]
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d07d      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c90:	4b4f      	ldr	r3, [pc, #316]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c92:	69db      	ldr	r3, [r3, #28]
 8003c94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d10d      	bne.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c9c:	4b4c      	ldr	r3, [pc, #304]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c9e:	69db      	ldr	r3, [r3, #28]
 8003ca0:	4a4b      	ldr	r2, [pc, #300]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ca2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ca6:	61d3      	str	r3, [r2, #28]
 8003ca8:	4b49      	ldr	r3, [pc, #292]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003caa:	69db      	ldr	r3, [r3, #28]
 8003cac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cb0:	60bb      	str	r3, [r7, #8]
 8003cb2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cb8:	4b46      	ldr	r3, [pc, #280]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d118      	bne.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cc4:	4b43      	ldr	r3, [pc, #268]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a42      	ldr	r2, [pc, #264]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cd0:	f7fd fbb8 	bl	8001444 <HAL_GetTick>
 8003cd4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cd6:	e008      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cd8:	f7fd fbb4 	bl	8001444 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b64      	cmp	r3, #100	@ 0x64
 8003ce4:	d901      	bls.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e06d      	b.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cea:	4b3a      	ldr	r3, [pc, #232]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d0f0      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003cf6:	4b36      	ldr	r3, [pc, #216]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cf8:	6a1b      	ldr	r3, [r3, #32]
 8003cfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cfe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d02e      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d027      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d14:	4b2e      	ldr	r3, [pc, #184]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d16:	6a1b      	ldr	r3, [r3, #32]
 8003d18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d1c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d1e:	4b2e      	ldr	r3, [pc, #184]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d20:	2201      	movs	r2, #1
 8003d22:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d24:	4b2c      	ldr	r3, [pc, #176]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003d2a:	4a29      	ldr	r2, [pc, #164]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d014      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d3a:	f7fd fb83 	bl	8001444 <HAL_GetTick>
 8003d3e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d40:	e00a      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d42:	f7fd fb7f 	bl	8001444 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d901      	bls.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e036      	b.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d58:	4b1d      	ldr	r3, [pc, #116]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d5a:	6a1b      	ldr	r3, [r3, #32]
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d0ee      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d64:	4b1a      	ldr	r3, [pc, #104]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d66:	6a1b      	ldr	r3, [r3, #32]
 8003d68:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	4917      	ldr	r1, [pc, #92]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d76:	7dfb      	ldrb	r3, [r7, #23]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d105      	bne.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d7c:	4b14      	ldr	r3, [pc, #80]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d7e:	69db      	ldr	r3, [r3, #28]
 8003d80:	4a13      	ldr	r2, [pc, #76]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d86:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0302 	and.w	r3, r3, #2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d008      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d94:	4b0e      	ldr	r3, [pc, #56]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	490b      	ldr	r1, [pc, #44]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0310 	and.w	r3, r3, #16
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d008      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003db2:	4b07      	ldr	r3, [pc, #28]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	4904      	ldr	r1, [pc, #16]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3718      	adds	r7, #24
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	40021000 	.word	0x40021000
 8003dd4:	40007000 	.word	0x40007000
 8003dd8:	42420440 	.word	0x42420440

08003ddc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d101      	bne.n	8003dee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e042      	b.n	8003e74 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d106      	bne.n	8003e08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f7fd fa4c 	bl	80012a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2224      	movs	r2, #36	@ 0x24
 8003e0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68da      	ldr	r2, [r3, #12]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f000 fcd5 	bl	80047d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	691a      	ldr	r2, [r3, #16]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	695a      	ldr	r2, [r3, #20]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68da      	ldr	r2, [r3, #12]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2220      	movs	r2, #32
 8003e60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2220      	movs	r2, #32
 8003e68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3708      	adds	r7, #8
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	4613      	mov	r3, r2
 8003e88:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2b20      	cmp	r3, #32
 8003e94:	d112      	bne.n	8003ebc <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d002      	beq.n	8003ea2 <HAL_UART_Receive_IT+0x26>
 8003e9c:	88fb      	ldrh	r3, [r7, #6]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d101      	bne.n	8003ea6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e00b      	b.n	8003ebe <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003eac:	88fb      	ldrh	r3, [r7, #6]
 8003eae:	461a      	mov	r2, r3
 8003eb0:	68b9      	ldr	r1, [r7, #8]
 8003eb2:	68f8      	ldr	r0, [r7, #12]
 8003eb4:	f000 fab7 	bl	8004426 <UART_Start_Receive_IT>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	e000      	b.n	8003ebe <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003ebc:	2302      	movs	r3, #2
  }
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
	...

08003ec8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b0ba      	sub	sp, #232	@ 0xe8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003efe:	f003 030f 	and.w	r3, r3, #15
 8003f02:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003f06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d10f      	bne.n	8003f2e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f12:	f003 0320 	and.w	r3, r3, #32
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d009      	beq.n	8003f2e <HAL_UART_IRQHandler+0x66>
 8003f1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f1e:	f003 0320 	and.w	r3, r3, #32
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d003      	beq.n	8003f2e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 fb93 	bl	8004652 <UART_Receive_IT>
      return;
 8003f2c:	e25b      	b.n	80043e6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003f2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	f000 80de 	beq.w	80040f4 <HAL_UART_IRQHandler+0x22c>
 8003f38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f3c:	f003 0301 	and.w	r3, r3, #1
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d106      	bne.n	8003f52 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f48:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f000 80d1 	beq.w	80040f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00b      	beq.n	8003f76 <HAL_UART_IRQHandler+0xae>
 8003f5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d005      	beq.n	8003f76 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f6e:	f043 0201 	orr.w	r2, r3, #1
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f7a:	f003 0304 	and.w	r3, r3, #4
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00b      	beq.n	8003f9a <HAL_UART_IRQHandler+0xd2>
 8003f82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d005      	beq.n	8003f9a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f92:	f043 0202 	orr.w	r2, r3, #2
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00b      	beq.n	8003fbe <HAL_UART_IRQHandler+0xf6>
 8003fa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d005      	beq.n	8003fbe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fb6:	f043 0204 	orr.w	r2, r3, #4
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003fbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fc2:	f003 0308 	and.w	r3, r3, #8
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d011      	beq.n	8003fee <HAL_UART_IRQHandler+0x126>
 8003fca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fce:	f003 0320 	and.w	r3, r3, #32
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d105      	bne.n	8003fe2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003fd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003fda:	f003 0301 	and.w	r3, r3, #1
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d005      	beq.n	8003fee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fe6:	f043 0208 	orr.w	r2, r3, #8
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	f000 81f2 	beq.w	80043dc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ff8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ffc:	f003 0320 	and.w	r3, r3, #32
 8004000:	2b00      	cmp	r3, #0
 8004002:	d008      	beq.n	8004016 <HAL_UART_IRQHandler+0x14e>
 8004004:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004008:	f003 0320 	and.w	r3, r3, #32
 800400c:	2b00      	cmp	r3, #0
 800400e:	d002      	beq.n	8004016 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 fb1e 	bl	8004652 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	695b      	ldr	r3, [r3, #20]
 800401c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004020:	2b00      	cmp	r3, #0
 8004022:	bf14      	ite	ne
 8004024:	2301      	movne	r3, #1
 8004026:	2300      	moveq	r3, #0
 8004028:	b2db      	uxtb	r3, r3
 800402a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004032:	f003 0308 	and.w	r3, r3, #8
 8004036:	2b00      	cmp	r3, #0
 8004038:	d103      	bne.n	8004042 <HAL_UART_IRQHandler+0x17a>
 800403a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800403e:	2b00      	cmp	r3, #0
 8004040:	d04f      	beq.n	80040e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 fa28 	bl	8004498 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004052:	2b00      	cmp	r3, #0
 8004054:	d041      	beq.n	80040da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	3314      	adds	r3, #20
 800405c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004060:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004064:	e853 3f00 	ldrex	r3, [r3]
 8004068:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800406c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004070:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004074:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	3314      	adds	r3, #20
 800407e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004082:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004086:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800408a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800408e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004092:	e841 2300 	strex	r3, r2, [r1]
 8004096:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800409a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1d9      	bne.n	8004056 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d013      	beq.n	80040d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040ae:	4a7e      	ldr	r2, [pc, #504]	@ (80042a8 <HAL_UART_IRQHandler+0x3e0>)
 80040b0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040b6:	4618      	mov	r0, r3
 80040b8:	f7fd ff38 	bl	8001f2c <HAL_DMA_Abort_IT>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d016      	beq.n	80040f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80040cc:	4610      	mov	r0, r2
 80040ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040d0:	e00e      	b.n	80040f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 f993 	bl	80043fe <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040d8:	e00a      	b.n	80040f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 f98f 	bl	80043fe <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040e0:	e006      	b.n	80040f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 f98b 	bl	80043fe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80040ee:	e175      	b.n	80043dc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040f0:	bf00      	nop
    return;
 80040f2:	e173      	b.n	80043dc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	f040 814f 	bne.w	800439c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80040fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004102:	f003 0310 	and.w	r3, r3, #16
 8004106:	2b00      	cmp	r3, #0
 8004108:	f000 8148 	beq.w	800439c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800410c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004110:	f003 0310 	and.w	r3, r3, #16
 8004114:	2b00      	cmp	r3, #0
 8004116:	f000 8141 	beq.w	800439c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800411a:	2300      	movs	r3, #0
 800411c:	60bb      	str	r3, [r7, #8]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	60bb      	str	r3, [r7, #8]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	60bb      	str	r3, [r7, #8]
 800412e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800413a:	2b00      	cmp	r3, #0
 800413c:	f000 80b6 	beq.w	80042ac <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800414c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004150:	2b00      	cmp	r3, #0
 8004152:	f000 8145 	beq.w	80043e0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800415a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800415e:	429a      	cmp	r2, r3
 8004160:	f080 813e 	bcs.w	80043e0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800416a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	2b20      	cmp	r3, #32
 8004174:	f000 8088 	beq.w	8004288 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	330c      	adds	r3, #12
 800417e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004182:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004186:	e853 3f00 	ldrex	r3, [r3]
 800418a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800418e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004192:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004196:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	330c      	adds	r3, #12
 80041a0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80041a4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80041a8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ac:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80041b0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80041b4:	e841 2300 	strex	r3, r2, [r1]
 80041b8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80041bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d1d9      	bne.n	8004178 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	3314      	adds	r3, #20
 80041ca:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80041ce:	e853 3f00 	ldrex	r3, [r3]
 80041d2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80041d4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80041d6:	f023 0301 	bic.w	r3, r3, #1
 80041da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	3314      	adds	r3, #20
 80041e4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80041e8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80041ec:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ee:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80041f0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80041f4:	e841 2300 	strex	r3, r2, [r1]
 80041f8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80041fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1e1      	bne.n	80041c4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	3314      	adds	r3, #20
 8004206:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004208:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800420a:	e853 3f00 	ldrex	r3, [r3]
 800420e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004210:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004212:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004216:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	3314      	adds	r3, #20
 8004220:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004224:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004226:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004228:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800422a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800422c:	e841 2300 	strex	r3, r2, [r1]
 8004230:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004232:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1e3      	bne.n	8004200 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2220      	movs	r2, #32
 800423c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	330c      	adds	r3, #12
 800424c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800424e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004250:	e853 3f00 	ldrex	r3, [r3]
 8004254:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004256:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004258:	f023 0310 	bic.w	r3, r3, #16
 800425c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	330c      	adds	r3, #12
 8004266:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800426a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800426c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800426e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004270:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004272:	e841 2300 	strex	r3, r2, [r1]
 8004276:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004278:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1e3      	bne.n	8004246 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004282:	4618      	mov	r0, r3
 8004284:	f7fd fe17 	bl	8001eb6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2202      	movs	r2, #2
 800428c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004296:	b29b      	uxth	r3, r3
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	b29b      	uxth	r3, r3
 800429c:	4619      	mov	r1, r3
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 f8b6 	bl	8004410 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80042a4:	e09c      	b.n	80043e0 <HAL_UART_IRQHandler+0x518>
 80042a6:	bf00      	nop
 80042a8:	0800455d 	.word	0x0800455d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	f000 808e 	beq.w	80043e4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80042c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f000 8089 	beq.w	80043e4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	330c      	adds	r3, #12
 80042d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042dc:	e853 3f00 	ldrex	r3, [r3]
 80042e0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80042e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042e8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	330c      	adds	r3, #12
 80042f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80042f6:	647a      	str	r2, [r7, #68]	@ 0x44
 80042f8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042fa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80042fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042fe:	e841 2300 	strex	r3, r2, [r1]
 8004302:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004304:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004306:	2b00      	cmp	r3, #0
 8004308:	d1e3      	bne.n	80042d2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	3314      	adds	r3, #20
 8004310:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004314:	e853 3f00 	ldrex	r3, [r3]
 8004318:	623b      	str	r3, [r7, #32]
   return(result);
 800431a:	6a3b      	ldr	r3, [r7, #32]
 800431c:	f023 0301 	bic.w	r3, r3, #1
 8004320:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	3314      	adds	r3, #20
 800432a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800432e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004330:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004332:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004334:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004336:	e841 2300 	strex	r3, r2, [r1]
 800433a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800433c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1e3      	bne.n	800430a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2220      	movs	r2, #32
 8004346:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	330c      	adds	r3, #12
 8004356:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	e853 3f00 	ldrex	r3, [r3]
 800435e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f023 0310 	bic.w	r3, r3, #16
 8004366:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	330c      	adds	r3, #12
 8004370:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004374:	61fa      	str	r2, [r7, #28]
 8004376:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004378:	69b9      	ldr	r1, [r7, #24]
 800437a:	69fa      	ldr	r2, [r7, #28]
 800437c:	e841 2300 	strex	r3, r2, [r1]
 8004380:	617b      	str	r3, [r7, #20]
   return(result);
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d1e3      	bne.n	8004350 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2202      	movs	r2, #2
 800438c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800438e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004392:	4619      	mov	r1, r3
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 f83b 	bl	8004410 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800439a:	e023      	b.n	80043e4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800439c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d009      	beq.n	80043bc <HAL_UART_IRQHandler+0x4f4>
 80043a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d003      	beq.n	80043bc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 f8e5 	bl	8004584 <UART_Transmit_IT>
    return;
 80043ba:	e014      	b.n	80043e6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80043bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d00e      	beq.n	80043e6 <HAL_UART_IRQHandler+0x51e>
 80043c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d008      	beq.n	80043e6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f000 f924 	bl	8004622 <UART_EndTransmit_IT>
    return;
 80043da:	e004      	b.n	80043e6 <HAL_UART_IRQHandler+0x51e>
    return;
 80043dc:	bf00      	nop
 80043de:	e002      	b.n	80043e6 <HAL_UART_IRQHandler+0x51e>
      return;
 80043e0:	bf00      	nop
 80043e2:	e000      	b.n	80043e6 <HAL_UART_IRQHandler+0x51e>
      return;
 80043e4:	bf00      	nop
  }
}
 80043e6:	37e8      	adds	r7, #232	@ 0xe8
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80043f4:	bf00      	nop
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bc80      	pop	{r7}
 80043fc:	4770      	bx	lr

080043fe <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80043fe:	b480      	push	{r7}
 8004400:	b083      	sub	sp, #12
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004406:	bf00      	nop
 8004408:	370c      	adds	r7, #12
 800440a:	46bd      	mov	sp, r7
 800440c:	bc80      	pop	{r7}
 800440e:	4770      	bx	lr

08004410 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	460b      	mov	r3, r1
 800441a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800441c:	bf00      	nop
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	bc80      	pop	{r7}
 8004424:	4770      	bx	lr

08004426 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004426:	b480      	push	{r7}
 8004428:	b085      	sub	sp, #20
 800442a:	af00      	add	r7, sp, #0
 800442c:	60f8      	str	r0, [r7, #12]
 800442e:	60b9      	str	r1, [r7, #8]
 8004430:	4613      	mov	r3, r2
 8004432:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	68ba      	ldr	r2, [r7, #8]
 8004438:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	88fa      	ldrh	r2, [r7, #6]
 800443e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	88fa      	ldrh	r2, [r7, #6]
 8004444:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2222      	movs	r2, #34	@ 0x22
 8004450:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d007      	beq.n	800446c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68da      	ldr	r2, [r3, #12]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800446a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	695a      	ldr	r2, [r3, #20]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f042 0201 	orr.w	r2, r2, #1
 800447a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	68da      	ldr	r2, [r3, #12]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f042 0220 	orr.w	r2, r2, #32
 800448a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3714      	adds	r7, #20
 8004492:	46bd      	mov	sp, r7
 8004494:	bc80      	pop	{r7}
 8004496:	4770      	bx	lr

08004498 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004498:	b480      	push	{r7}
 800449a:	b095      	sub	sp, #84	@ 0x54
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	330c      	adds	r3, #12
 80044a6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044aa:	e853 3f00 	ldrex	r3, [r3]
 80044ae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80044b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80044b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	330c      	adds	r3, #12
 80044be:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80044c0:	643a      	str	r2, [r7, #64]	@ 0x40
 80044c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80044c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80044c8:	e841 2300 	strex	r3, r2, [r1]
 80044cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80044ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d1e5      	bne.n	80044a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	3314      	adds	r3, #20
 80044da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044dc:	6a3b      	ldr	r3, [r7, #32]
 80044de:	e853 3f00 	ldrex	r3, [r3]
 80044e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	f023 0301 	bic.w	r3, r3, #1
 80044ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	3314      	adds	r3, #20
 80044f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044fc:	e841 2300 	strex	r3, r2, [r1]
 8004500:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004504:	2b00      	cmp	r3, #0
 8004506:	d1e5      	bne.n	80044d4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800450c:	2b01      	cmp	r3, #1
 800450e:	d119      	bne.n	8004544 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	330c      	adds	r3, #12
 8004516:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	e853 3f00 	ldrex	r3, [r3]
 800451e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	f023 0310 	bic.w	r3, r3, #16
 8004526:	647b      	str	r3, [r7, #68]	@ 0x44
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	330c      	adds	r3, #12
 800452e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004530:	61ba      	str	r2, [r7, #24]
 8004532:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004534:	6979      	ldr	r1, [r7, #20]
 8004536:	69ba      	ldr	r2, [r7, #24]
 8004538:	e841 2300 	strex	r3, r2, [r1]
 800453c:	613b      	str	r3, [r7, #16]
   return(result);
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d1e5      	bne.n	8004510 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2220      	movs	r2, #32
 8004548:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004552:	bf00      	nop
 8004554:	3754      	adds	r7, #84	@ 0x54
 8004556:	46bd      	mov	sp, r7
 8004558:	bc80      	pop	{r7}
 800455a:	4770      	bx	lr

0800455c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004568:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2200      	movs	r2, #0
 800456e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2200      	movs	r2, #0
 8004574:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004576:	68f8      	ldr	r0, [r7, #12]
 8004578:	f7ff ff41 	bl	80043fe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800457c:	bf00      	nop
 800457e:	3710      	adds	r7, #16
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004584:	b480      	push	{r7}
 8004586:	b085      	sub	sp, #20
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004592:	b2db      	uxtb	r3, r3
 8004594:	2b21      	cmp	r3, #33	@ 0x21
 8004596:	d13e      	bne.n	8004616 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045a0:	d114      	bne.n	80045cc <UART_Transmit_IT+0x48>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d110      	bne.n	80045cc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a1b      	ldr	r3, [r3, #32]
 80045ae:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	881b      	ldrh	r3, [r3, #0]
 80045b4:	461a      	mov	r2, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045be:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a1b      	ldr	r3, [r3, #32]
 80045c4:	1c9a      	adds	r2, r3, #2
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	621a      	str	r2, [r3, #32]
 80045ca:	e008      	b.n	80045de <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a1b      	ldr	r3, [r3, #32]
 80045d0:	1c59      	adds	r1, r3, #1
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	6211      	str	r1, [r2, #32]
 80045d6:	781a      	ldrb	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	3b01      	subs	r3, #1
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	4619      	mov	r1, r3
 80045ec:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10f      	bne.n	8004612 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68da      	ldr	r2, [r3, #12]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004600:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68da      	ldr	r2, [r3, #12]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004610:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004612:	2300      	movs	r3, #0
 8004614:	e000      	b.n	8004618 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004616:	2302      	movs	r3, #2
  }
}
 8004618:	4618      	mov	r0, r3
 800461a:	3714      	adds	r7, #20
 800461c:	46bd      	mov	sp, r7
 800461e:	bc80      	pop	{r7}
 8004620:	4770      	bx	lr

08004622 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004622:	b580      	push	{r7, lr}
 8004624:	b082      	sub	sp, #8
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68da      	ldr	r2, [r3, #12]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004638:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2220      	movs	r2, #32
 800463e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f7ff fed2 	bl	80043ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3708      	adds	r7, #8
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}

08004652 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004652:	b580      	push	{r7, lr}
 8004654:	b08c      	sub	sp, #48	@ 0x30
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b22      	cmp	r3, #34	@ 0x22
 8004664:	f040 80ae 	bne.w	80047c4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004670:	d117      	bne.n	80046a2 <UART_Receive_IT+0x50>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d113      	bne.n	80046a2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800467a:	2300      	movs	r3, #0
 800467c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004682:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	b29b      	uxth	r3, r3
 800468c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004690:	b29a      	uxth	r2, r3
 8004692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004694:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800469a:	1c9a      	adds	r2, r3, #2
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	629a      	str	r2, [r3, #40]	@ 0x28
 80046a0:	e026      	b.n	80046f0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80046a8:	2300      	movs	r3, #0
 80046aa:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046b4:	d007      	beq.n	80046c6 <UART_Receive_IT+0x74>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d10a      	bne.n	80046d4 <UART_Receive_IT+0x82>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d106      	bne.n	80046d4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	b2da      	uxtb	r2, r3
 80046ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046d0:	701a      	strb	r2, [r3, #0]
 80046d2:	e008      	b.n	80046e6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046e0:	b2da      	uxtb	r2, r3
 80046e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046e4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ea:	1c5a      	adds	r2, r3, #1
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	3b01      	subs	r3, #1
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	4619      	mov	r1, r3
 80046fe:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004700:	2b00      	cmp	r3, #0
 8004702:	d15d      	bne.n	80047c0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68da      	ldr	r2, [r3, #12]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f022 0220 	bic.w	r2, r2, #32
 8004712:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68da      	ldr	r2, [r3, #12]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004722:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	695a      	ldr	r2, [r3, #20]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f022 0201 	bic.w	r2, r2, #1
 8004732:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2220      	movs	r2, #32
 8004738:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004746:	2b01      	cmp	r3, #1
 8004748:	d135      	bne.n	80047b6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	330c      	adds	r3, #12
 8004756:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	e853 3f00 	ldrex	r3, [r3]
 800475e:	613b      	str	r3, [r7, #16]
   return(result);
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	f023 0310 	bic.w	r3, r3, #16
 8004766:	627b      	str	r3, [r7, #36]	@ 0x24
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	330c      	adds	r3, #12
 800476e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004770:	623a      	str	r2, [r7, #32]
 8004772:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004774:	69f9      	ldr	r1, [r7, #28]
 8004776:	6a3a      	ldr	r2, [r7, #32]
 8004778:	e841 2300 	strex	r3, r2, [r1]
 800477c:	61bb      	str	r3, [r7, #24]
   return(result);
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d1e5      	bne.n	8004750 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0310 	and.w	r3, r3, #16
 800478e:	2b10      	cmp	r3, #16
 8004790:	d10a      	bne.n	80047a8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004792:	2300      	movs	r3, #0
 8004794:	60fb      	str	r3, [r7, #12]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	60fb      	str	r3, [r7, #12]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	60fb      	str	r3, [r7, #12]
 80047a6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80047ac:	4619      	mov	r1, r3
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f7ff fe2e 	bl	8004410 <HAL_UARTEx_RxEventCallback>
 80047b4:	e002      	b.n	80047bc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f7fc fc56 	bl	8001068 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80047bc:	2300      	movs	r3, #0
 80047be:	e002      	b.n	80047c6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80047c0:	2300      	movs	r3, #0
 80047c2:	e000      	b.n	80047c6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80047c4:	2302      	movs	r3, #2
  }
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3730      	adds	r7, #48	@ 0x30
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
	...

080047d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	68da      	ldr	r2, [r3, #12]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	430a      	orrs	r2, r1
 80047ec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	689a      	ldr	r2, [r3, #8]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	431a      	orrs	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	695b      	ldr	r3, [r3, #20]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800480a:	f023 030c 	bic.w	r3, r3, #12
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	6812      	ldr	r2, [r2, #0]
 8004812:	68b9      	ldr	r1, [r7, #8]
 8004814:	430b      	orrs	r3, r1
 8004816:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	695b      	ldr	r3, [r3, #20]
 800481e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	699a      	ldr	r2, [r3, #24]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	430a      	orrs	r2, r1
 800482c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a2c      	ldr	r2, [pc, #176]	@ (80048e4 <UART_SetConfig+0x114>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d103      	bne.n	8004840 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004838:	f7ff f9e8 	bl	8003c0c <HAL_RCC_GetPCLK2Freq>
 800483c:	60f8      	str	r0, [r7, #12]
 800483e:	e002      	b.n	8004846 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004840:	f7ff f9d0 	bl	8003be4 <HAL_RCC_GetPCLK1Freq>
 8004844:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	4613      	mov	r3, r2
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	4413      	add	r3, r2
 800484e:	009a      	lsls	r2, r3, #2
 8004850:	441a      	add	r2, r3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	fbb2 f3f3 	udiv	r3, r2, r3
 800485c:	4a22      	ldr	r2, [pc, #136]	@ (80048e8 <UART_SetConfig+0x118>)
 800485e:	fba2 2303 	umull	r2, r3, r2, r3
 8004862:	095b      	lsrs	r3, r3, #5
 8004864:	0119      	lsls	r1, r3, #4
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	4613      	mov	r3, r2
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	4413      	add	r3, r2
 800486e:	009a      	lsls	r2, r3, #2
 8004870:	441a      	add	r2, r3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	fbb2 f2f3 	udiv	r2, r2, r3
 800487c:	4b1a      	ldr	r3, [pc, #104]	@ (80048e8 <UART_SetConfig+0x118>)
 800487e:	fba3 0302 	umull	r0, r3, r3, r2
 8004882:	095b      	lsrs	r3, r3, #5
 8004884:	2064      	movs	r0, #100	@ 0x64
 8004886:	fb00 f303 	mul.w	r3, r0, r3
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	011b      	lsls	r3, r3, #4
 800488e:	3332      	adds	r3, #50	@ 0x32
 8004890:	4a15      	ldr	r2, [pc, #84]	@ (80048e8 <UART_SetConfig+0x118>)
 8004892:	fba2 2303 	umull	r2, r3, r2, r3
 8004896:	095b      	lsrs	r3, r3, #5
 8004898:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800489c:	4419      	add	r1, r3
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	4613      	mov	r3, r2
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	4413      	add	r3, r2
 80048a6:	009a      	lsls	r2, r3, #2
 80048a8:	441a      	add	r2, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80048b4:	4b0c      	ldr	r3, [pc, #48]	@ (80048e8 <UART_SetConfig+0x118>)
 80048b6:	fba3 0302 	umull	r0, r3, r3, r2
 80048ba:	095b      	lsrs	r3, r3, #5
 80048bc:	2064      	movs	r0, #100	@ 0x64
 80048be:	fb00 f303 	mul.w	r3, r0, r3
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	011b      	lsls	r3, r3, #4
 80048c6:	3332      	adds	r3, #50	@ 0x32
 80048c8:	4a07      	ldr	r2, [pc, #28]	@ (80048e8 <UART_SetConfig+0x118>)
 80048ca:	fba2 2303 	umull	r2, r3, r2, r3
 80048ce:	095b      	lsrs	r3, r3, #5
 80048d0:	f003 020f 	and.w	r2, r3, #15
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	440a      	add	r2, r1
 80048da:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80048dc:	bf00      	nop
 80048de:	3710      	adds	r7, #16
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	40013800 	.word	0x40013800
 80048e8:	51eb851f 	.word	0x51eb851f

080048ec <memset>:
 80048ec:	4603      	mov	r3, r0
 80048ee:	4402      	add	r2, r0
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d100      	bne.n	80048f6 <memset+0xa>
 80048f4:	4770      	bx	lr
 80048f6:	f803 1b01 	strb.w	r1, [r3], #1
 80048fa:	e7f9      	b.n	80048f0 <memset+0x4>

080048fc <__libc_init_array>:
 80048fc:	b570      	push	{r4, r5, r6, lr}
 80048fe:	2600      	movs	r6, #0
 8004900:	4d0c      	ldr	r5, [pc, #48]	@ (8004934 <__libc_init_array+0x38>)
 8004902:	4c0d      	ldr	r4, [pc, #52]	@ (8004938 <__libc_init_array+0x3c>)
 8004904:	1b64      	subs	r4, r4, r5
 8004906:	10a4      	asrs	r4, r4, #2
 8004908:	42a6      	cmp	r6, r4
 800490a:	d109      	bne.n	8004920 <__libc_init_array+0x24>
 800490c:	f000 f81a 	bl	8004944 <_init>
 8004910:	2600      	movs	r6, #0
 8004912:	4d0a      	ldr	r5, [pc, #40]	@ (800493c <__libc_init_array+0x40>)
 8004914:	4c0a      	ldr	r4, [pc, #40]	@ (8004940 <__libc_init_array+0x44>)
 8004916:	1b64      	subs	r4, r4, r5
 8004918:	10a4      	asrs	r4, r4, #2
 800491a:	42a6      	cmp	r6, r4
 800491c:	d105      	bne.n	800492a <__libc_init_array+0x2e>
 800491e:	bd70      	pop	{r4, r5, r6, pc}
 8004920:	f855 3b04 	ldr.w	r3, [r5], #4
 8004924:	4798      	blx	r3
 8004926:	3601      	adds	r6, #1
 8004928:	e7ee      	b.n	8004908 <__libc_init_array+0xc>
 800492a:	f855 3b04 	ldr.w	r3, [r5], #4
 800492e:	4798      	blx	r3
 8004930:	3601      	adds	r6, #1
 8004932:	e7f2      	b.n	800491a <__libc_init_array+0x1e>
 8004934:	08004988 	.word	0x08004988
 8004938:	08004988 	.word	0x08004988
 800493c:	08004988 	.word	0x08004988
 8004940:	0800498c 	.word	0x0800498c

08004944 <_init>:
 8004944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004946:	bf00      	nop
 8004948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800494a:	bc08      	pop	{r3}
 800494c:	469e      	mov	lr, r3
 800494e:	4770      	bx	lr

08004950 <_fini>:
 8004950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004952:	bf00      	nop
 8004954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004956:	bc08      	pop	{r3}
 8004958:	469e      	mov	lr, r3
 800495a:	4770      	bx	lr
