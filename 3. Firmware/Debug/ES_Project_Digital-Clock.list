
ES_Project_Digital-Clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076fc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002064  08007808  08007808  00008808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800986c  0800986c  0000b2a8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800986c  0800986c  0000b2a8  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800986c  0800986c  0000b2a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800986c  0800986c  0000a86c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009870  08009870  0000a870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002a8  20000000  08009874  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  200002a8  08009b1c  0000b2a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005bc  08009b1c  0000b5bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b2a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012671  00000000  00000000  0000b2d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035cb  00000000  00000000  0001d942  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001140  00000000  00000000  00020f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d44  00000000  00000000  00022050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aa65  00000000  00000000  00022d94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000194b8  00000000  00000000  0003d7f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f67e  00000000  00000000  00056cb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e632f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b5c  00000000  00000000  000e6374  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  000eaed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200002a8 	.word	0x200002a8
 8000128:	00000000 	.word	0x00000000
 800012c:	080077f0 	.word	0x080077f0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200002ac 	.word	0x200002ac
 8000148:	080077f0 	.word	0x080077f0

0800014c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000152:	1d3b      	adds	r3, r7, #4
 8000154:	2200      	movs	r2, #0
 8000156:	601a      	str	r2, [r3, #0]
 8000158:	605a      	str	r2, [r3, #4]
 800015a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800015c:	4b18      	ldr	r3, [pc, #96]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800015e:	4a19      	ldr	r2, [pc, #100]	@ (80001c4 <MX_ADC1_Init+0x78>)
 8000160:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000162:	4b17      	ldr	r3, [pc, #92]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000164:	2200      	movs	r2, #0
 8000166:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000168:	4b15      	ldr	r3, [pc, #84]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800016a:	2200      	movs	r2, #0
 800016c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800016e:	4b14      	ldr	r3, [pc, #80]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000170:	2200      	movs	r2, #0
 8000172:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000174:	4b12      	ldr	r3, [pc, #72]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000176:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800017a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800017c:	4b10      	ldr	r3, [pc, #64]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800017e:	2200      	movs	r2, #0
 8000180:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000182:	4b0f      	ldr	r3, [pc, #60]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000184:	2201      	movs	r2, #1
 8000186:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000188:	480d      	ldr	r0, [pc, #52]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800018a:	f002 f9d7 	bl	800253c <HAL_ADC_Init>
 800018e:	4603      	mov	r3, r0
 8000190:	2b00      	cmp	r3, #0
 8000192:	d001      	beq.n	8000198 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000194:	f001 fef6 	bl	8001f84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000198:	2304      	movs	r3, #4
 800019a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800019c:	2301      	movs	r3, #1
 800019e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001a0:	2300      	movs	r3, #0
 80001a2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	4619      	mov	r1, r3
 80001a8:	4805      	ldr	r0, [pc, #20]	@ (80001c0 <MX_ADC1_Init+0x74>)
 80001aa:	f002 fc29 	bl	8002a00 <HAL_ADC_ConfigChannel>
 80001ae:	4603      	mov	r3, r0
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d001      	beq.n	80001b8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80001b4:	f001 fee6 	bl	8001f84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80001b8:	bf00      	nop
 80001ba:	3710      	adds	r7, #16
 80001bc:	46bd      	mov	sp, r7
 80001be:	bd80      	pop	{r7, pc}
 80001c0:	200002c4 	.word	0x200002c4
 80001c4:	40012400 	.word	0x40012400

080001c8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b088      	sub	sp, #32
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001d0:	f107 0310 	add.w	r3, r7, #16
 80001d4:	2200      	movs	r2, #0
 80001d6:	601a      	str	r2, [r3, #0]
 80001d8:	605a      	str	r2, [r3, #4]
 80001da:	609a      	str	r2, [r3, #8]
 80001dc:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	4a18      	ldr	r2, [pc, #96]	@ (8000244 <HAL_ADC_MspInit+0x7c>)
 80001e4:	4293      	cmp	r3, r2
 80001e6:	d129      	bne.n	800023c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80001e8:	4b17      	ldr	r3, [pc, #92]	@ (8000248 <HAL_ADC_MspInit+0x80>)
 80001ea:	699b      	ldr	r3, [r3, #24]
 80001ec:	4a16      	ldr	r2, [pc, #88]	@ (8000248 <HAL_ADC_MspInit+0x80>)
 80001ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80001f2:	6193      	str	r3, [r2, #24]
 80001f4:	4b14      	ldr	r3, [pc, #80]	@ (8000248 <HAL_ADC_MspInit+0x80>)
 80001f6:	699b      	ldr	r3, [r3, #24]
 80001f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80001fc:	60fb      	str	r3, [r7, #12]
 80001fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000200:	4b11      	ldr	r3, [pc, #68]	@ (8000248 <HAL_ADC_MspInit+0x80>)
 8000202:	699b      	ldr	r3, [r3, #24]
 8000204:	4a10      	ldr	r2, [pc, #64]	@ (8000248 <HAL_ADC_MspInit+0x80>)
 8000206:	f043 0304 	orr.w	r3, r3, #4
 800020a:	6193      	str	r3, [r2, #24]
 800020c:	4b0e      	ldr	r3, [pc, #56]	@ (8000248 <HAL_ADC_MspInit+0x80>)
 800020e:	699b      	ldr	r3, [r3, #24]
 8000210:	f003 0304 	and.w	r3, r3, #4
 8000214:	60bb      	str	r3, [r7, #8]
 8000216:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000218:	2310      	movs	r3, #16
 800021a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800021c:	2303      	movs	r3, #3
 800021e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000220:	f107 0310 	add.w	r3, r7, #16
 8000224:	4619      	mov	r1, r3
 8000226:	4809      	ldr	r0, [pc, #36]	@ (800024c <HAL_ADC_MspInit+0x84>)
 8000228:	f002 ff46 	bl	80030b8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800022c:	2200      	movs	r2, #0
 800022e:	2100      	movs	r1, #0
 8000230:	2012      	movs	r0, #18
 8000232:	f002 fe58 	bl	8002ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000236:	2012      	movs	r0, #18
 8000238:	f002 fe71 	bl	8002f1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800023c:	bf00      	nop
 800023e:	3720      	adds	r7, #32
 8000240:	46bd      	mov	sp, r7
 8000242:	bd80      	pop	{r7, pc}
 8000244:	40012400 	.word	0x40012400
 8000248:	40021000 	.word	0x40021000
 800024c:	40010800 	.word	0x40010800

08000250 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b088      	sub	sp, #32
 8000254:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000256:	f107 0310 	add.w	r3, r7, #16
 800025a:	2200      	movs	r2, #0
 800025c:	601a      	str	r2, [r3, #0]
 800025e:	605a      	str	r2, [r3, #4]
 8000260:	609a      	str	r2, [r3, #8]
 8000262:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000264:	4b47      	ldr	r3, [pc, #284]	@ (8000384 <MX_GPIO_Init+0x134>)
 8000266:	699b      	ldr	r3, [r3, #24]
 8000268:	4a46      	ldr	r2, [pc, #280]	@ (8000384 <MX_GPIO_Init+0x134>)
 800026a:	f043 0320 	orr.w	r3, r3, #32
 800026e:	6193      	str	r3, [r2, #24]
 8000270:	4b44      	ldr	r3, [pc, #272]	@ (8000384 <MX_GPIO_Init+0x134>)
 8000272:	699b      	ldr	r3, [r3, #24]
 8000274:	f003 0320 	and.w	r3, r3, #32
 8000278:	60fb      	str	r3, [r7, #12]
 800027a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800027c:	4b41      	ldr	r3, [pc, #260]	@ (8000384 <MX_GPIO_Init+0x134>)
 800027e:	699b      	ldr	r3, [r3, #24]
 8000280:	4a40      	ldr	r2, [pc, #256]	@ (8000384 <MX_GPIO_Init+0x134>)
 8000282:	f043 0304 	orr.w	r3, r3, #4
 8000286:	6193      	str	r3, [r2, #24]
 8000288:	4b3e      	ldr	r3, [pc, #248]	@ (8000384 <MX_GPIO_Init+0x134>)
 800028a:	699b      	ldr	r3, [r3, #24]
 800028c:	f003 0304 	and.w	r3, r3, #4
 8000290:	60bb      	str	r3, [r7, #8]
 8000292:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000294:	4b3b      	ldr	r3, [pc, #236]	@ (8000384 <MX_GPIO_Init+0x134>)
 8000296:	699b      	ldr	r3, [r3, #24]
 8000298:	4a3a      	ldr	r2, [pc, #232]	@ (8000384 <MX_GPIO_Init+0x134>)
 800029a:	f043 0308 	orr.w	r3, r3, #8
 800029e:	6193      	str	r3, [r2, #24]
 80002a0:	4b38      	ldr	r3, [pc, #224]	@ (8000384 <MX_GPIO_Init+0x134>)
 80002a2:	699b      	ldr	r3, [r3, #24]
 80002a4:	f003 0308 	and.w	r3, r3, #8
 80002a8:	607b      	str	r3, [r7, #4]
 80002aa:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_Pin|DC_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 80002ac:	2200      	movs	r2, #0
 80002ae:	210e      	movs	r1, #14
 80002b0:	4835      	ldr	r0, [pc, #212]	@ (8000388 <MX_GPIO_Init+0x138>)
 80002b2:	f003 f89c 	bl	80033ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BUZZER_Pin|PWR_Pin, GPIO_PIN_RESET);
 80002b6:	2200      	movs	r2, #0
 80002b8:	2103      	movs	r1, #3
 80002ba:	4834      	ldr	r0, [pc, #208]	@ (800038c <MX_GPIO_Init+0x13c>)
 80002bc:	f003 f897 	bl	80033ee <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUSY_Pin PA6 */
  GPIO_InitStruct.Pin = BUSY_Pin|GPIO_PIN_6;
 80002c0:	2341      	movs	r3, #65	@ 0x41
 80002c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002c4:	2300      	movs	r3, #0
 80002c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002c8:	2300      	movs	r3, #0
 80002ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002cc:	f107 0310 	add.w	r3, r7, #16
 80002d0:	4619      	mov	r1, r3
 80002d2:	482d      	ldr	r0, [pc, #180]	@ (8000388 <MX_GPIO_Init+0x138>)
 80002d4:	f002 fef0 	bl	80030b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RST_Pin DC_Pin SPI_CS_Pin */
  GPIO_InitStruct.Pin = RST_Pin|DC_Pin|SPI_CS_Pin;
 80002d8:	230e      	movs	r3, #14
 80002da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002dc:	2301      	movs	r3, #1
 80002de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002e0:	2300      	movs	r3, #0
 80002e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002e4:	2302      	movs	r3, #2
 80002e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002e8:	f107 0310 	add.w	r3, r7, #16
 80002ec:	4619      	mov	r1, r3
 80002ee:	4826      	ldr	r0, [pc, #152]	@ (8000388 <MX_GPIO_Init+0x138>)
 80002f0:	f002 fee2 	bl	80030b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZER_Pin PWR_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin|PWR_Pin;
 80002f4:	2303      	movs	r3, #3
 80002f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002f8:	2301      	movs	r3, #1
 80002fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002fc:	2300      	movs	r3, #0
 80002fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000300:	2302      	movs	r3, #2
 8000302:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000304:	f107 0310 	add.w	r3, r7, #16
 8000308:	4619      	mov	r1, r3
 800030a:	4820      	ldr	r0, [pc, #128]	@ (800038c <MX_GPIO_Init+0x13c>)
 800030c:	f002 fed4 	bl	80030b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON0_IN12_Pin BUTTON1_IN13_Pin BUTTON2_IN14_Pin BUTTON3_IN15_Pin */
  GPIO_InitStruct.Pin = BUTTON0_IN12_Pin|BUTTON1_IN13_Pin|BUTTON2_IN14_Pin|BUTTON3_IN15_Pin;
 8000310:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000314:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000316:	4b1e      	ldr	r3, [pc, #120]	@ (8000390 <MX_GPIO_Init+0x140>)
 8000318:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800031a:	2302      	movs	r3, #2
 800031c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800031e:	f107 0310 	add.w	r3, r7, #16
 8000322:	4619      	mov	r1, r3
 8000324:	4819      	ldr	r0, [pc, #100]	@ (800038c <MX_GPIO_Init+0x13c>)
 8000326:	f002 fec7 	bl	80030b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON4_IN8_Pin */
  GPIO_InitStruct.Pin = BUTTON4_IN8_Pin;
 800032a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800032e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000330:	4b17      	ldr	r3, [pc, #92]	@ (8000390 <MX_GPIO_Init+0x140>)
 8000332:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000334:	2302      	movs	r3, #2
 8000336:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON4_IN8_GPIO_Port, &GPIO_InitStruct);
 8000338:	f107 0310 	add.w	r3, r7, #16
 800033c:	4619      	mov	r1, r3
 800033e:	4812      	ldr	r0, [pc, #72]	@ (8000388 <MX_GPIO_Init+0x138>)
 8000340:	f002 feba 	bl	80030b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RTC_IN5_Pin */
  GPIO_InitStruct.Pin = RTC_IN5_Pin;
 8000344:	2320      	movs	r3, #32
 8000346:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000348:	4b12      	ldr	r3, [pc, #72]	@ (8000394 <MX_GPIO_Init+0x144>)
 800034a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800034c:	2301      	movs	r3, #1
 800034e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RTC_IN5_GPIO_Port, &GPIO_InitStruct);
 8000350:	f107 0310 	add.w	r3, r7, #16
 8000354:	4619      	mov	r1, r3
 8000356:	480d      	ldr	r0, [pc, #52]	@ (800038c <MX_GPIO_Init+0x13c>)
 8000358:	f002 feae 	bl	80030b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800035c:	2200      	movs	r2, #0
 800035e:	2100      	movs	r1, #0
 8000360:	2017      	movs	r0, #23
 8000362:	f002 fdc0 	bl	8002ee6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000366:	2017      	movs	r0, #23
 8000368:	f002 fdd9 	bl	8002f1e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800036c:	2200      	movs	r2, #0
 800036e:	2100      	movs	r1, #0
 8000370:	2028      	movs	r0, #40	@ 0x28
 8000372:	f002 fdb8 	bl	8002ee6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000376:	2028      	movs	r0, #40	@ 0x28
 8000378:	f002 fdd1 	bl	8002f1e <HAL_NVIC_EnableIRQ>

}
 800037c:	bf00      	nop
 800037e:	3720      	adds	r7, #32
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}
 8000384:	40021000 	.word	0x40021000
 8000388:	40010800 	.word	0x40010800
 800038c:	40010c00 	.word	0x40010c00
 8000390:	10110000 	.word	0x10110000
 8000394:	10210000 	.word	0x10210000

08000398 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800039c:	4b12      	ldr	r3, [pc, #72]	@ (80003e8 <MX_I2C1_Init+0x50>)
 800039e:	4a13      	ldr	r2, [pc, #76]	@ (80003ec <MX_I2C1_Init+0x54>)
 80003a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80003a2:	4b11      	ldr	r3, [pc, #68]	@ (80003e8 <MX_I2C1_Init+0x50>)
 80003a4:	4a12      	ldr	r2, [pc, #72]	@ (80003f0 <MX_I2C1_Init+0x58>)
 80003a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003a8:	4b0f      	ldr	r3, [pc, #60]	@ (80003e8 <MX_I2C1_Init+0x50>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80003ae:	4b0e      	ldr	r3, [pc, #56]	@ (80003e8 <MX_I2C1_Init+0x50>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003b4:	4b0c      	ldr	r3, [pc, #48]	@ (80003e8 <MX_I2C1_Init+0x50>)
 80003b6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80003ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003bc:	4b0a      	ldr	r3, [pc, #40]	@ (80003e8 <MX_I2C1_Init+0x50>)
 80003be:	2200      	movs	r2, #0
 80003c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80003c2:	4b09      	ldr	r3, [pc, #36]	@ (80003e8 <MX_I2C1_Init+0x50>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003c8:	4b07      	ldr	r3, [pc, #28]	@ (80003e8 <MX_I2C1_Init+0x50>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003ce:	4b06      	ldr	r3, [pc, #24]	@ (80003e8 <MX_I2C1_Init+0x50>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003d4:	4804      	ldr	r0, [pc, #16]	@ (80003e8 <MX_I2C1_Init+0x50>)
 80003d6:	f003 f83b 	bl	8003450 <HAL_I2C_Init>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d001      	beq.n	80003e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80003e0:	f001 fdd0 	bl	8001f84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003e4:	bf00      	nop
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	200002f4 	.word	0x200002f4
 80003ec:	40005400 	.word	0x40005400
 80003f0:	00061a80 	.word	0x00061a80

080003f4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b088      	sub	sp, #32
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003fc:	f107 0310 	add.w	r3, r7, #16
 8000400:	2200      	movs	r2, #0
 8000402:	601a      	str	r2, [r3, #0]
 8000404:	605a      	str	r2, [r3, #4]
 8000406:	609a      	str	r2, [r3, #8]
 8000408:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	4a15      	ldr	r2, [pc, #84]	@ (8000464 <HAL_I2C_MspInit+0x70>)
 8000410:	4293      	cmp	r3, r2
 8000412:	d123      	bne.n	800045c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000414:	4b14      	ldr	r3, [pc, #80]	@ (8000468 <HAL_I2C_MspInit+0x74>)
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	4a13      	ldr	r2, [pc, #76]	@ (8000468 <HAL_I2C_MspInit+0x74>)
 800041a:	f043 0308 	orr.w	r3, r3, #8
 800041e:	6193      	str	r3, [r2, #24]
 8000420:	4b11      	ldr	r3, [pc, #68]	@ (8000468 <HAL_I2C_MspInit+0x74>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	f003 0308 	and.w	r3, r3, #8
 8000428:	60fb      	str	r3, [r7, #12]
 800042a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800042c:	23c0      	movs	r3, #192	@ 0xc0
 800042e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000430:	2312      	movs	r3, #18
 8000432:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000434:	2303      	movs	r3, #3
 8000436:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000438:	f107 0310 	add.w	r3, r7, #16
 800043c:	4619      	mov	r1, r3
 800043e:	480b      	ldr	r0, [pc, #44]	@ (800046c <HAL_I2C_MspInit+0x78>)
 8000440:	f002 fe3a 	bl	80030b8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000444:	4b08      	ldr	r3, [pc, #32]	@ (8000468 <HAL_I2C_MspInit+0x74>)
 8000446:	69db      	ldr	r3, [r3, #28]
 8000448:	4a07      	ldr	r2, [pc, #28]	@ (8000468 <HAL_I2C_MspInit+0x74>)
 800044a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800044e:	61d3      	str	r3, [r2, #28]
 8000450:	4b05      	ldr	r3, [pc, #20]	@ (8000468 <HAL_I2C_MspInit+0x74>)
 8000452:	69db      	ldr	r3, [r3, #28]
 8000454:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000458:	60bb      	str	r3, [r7, #8]
 800045a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800045c:	bf00      	nop
 800045e:	3720      	adds	r7, #32
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	40005400 	.word	0x40005400
 8000468:	40021000 	.word	0x40021000
 800046c:	40010c00 	.word	0x40010c00

08000470 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000472:	b08b      	sub	sp, #44	@ 0x2c
 8000474:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000476:	f001 ffdb 	bl	8002430 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800047a:	f000 f8c9 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800047e:	f7ff fee7 	bl	8000250 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000482:	f7ff ff89 	bl	8000398 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000486:	f7ff fe61 	bl	800014c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800048a:	f001 ff2d 	bl	80022e8 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 800048e:	f001 fd7f 	bl	8001f90 <MX_SPI1_Init>
//     4, // Month: 1-12
//    25  // Year: 0-99 (0 = 2000, 1 = 2001, ..., 99 = 2099)
//  );

  // Initialize RTC module (Run only once after reset the RTC).
  Time_Ctrl 
 8000492:	2300      	movs	r3, #0
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2300      	movs	r3, #0
 8000498:	9300      	str	r3, [sp, #0]
 800049a:	2300      	movs	r3, #0
 800049c:	2200      	movs	r2, #0
 800049e:	2100      	movs	r1, #0
 80004a0:	2000      	movs	r0, #0
 80004a2:	f000 f9f5 	bl	8000890 <Time_Ctrl>
     0, // Day of the week: 1-7 (1 = Sunday, 2 = Monday, ..., 7 = Saturday), or Date of the month: 1-31
     0  // Select: 1 = day of week, 0 = date of month
  );   

  // Initially retrieve the time values from the RTC module
  Time_Get(&time_get_data);
 80004a6:	484f      	ldr	r0, [pc, #316]	@ (80005e4 <main+0x174>)
 80004a8:	f000 f99e 	bl	80007e8 <Time_Get>
  //   false, // true = ON, false = OFF 
  //    1     // Slot number of the alarm in the EEPROM module (0-9)
  // );  

  // Initially retrieve the alarm slot pointer data from the EEPROM module
  Alarm_Slot_Pointer_Get();
 80004ac:	f000 fbcc 	bl	8000c48 <Alarm_Slot_Pointer_Get>

  // Initially retrieve the alarm values from the EEPROM module and send to system memory
  for (int i = 0; i < alarm_slot_ptr; i++)
 80004b0:	2300      	movs	r3, #0
 80004b2:	61fb      	str	r3, [r7, #28]
 80004b4:	e00e      	b.n	80004d4 <main+0x64>
  {
    Alarm_Get(i, &alarm_get_data[i]);
 80004b6:	69fb      	ldr	r3, [r7, #28]
 80004b8:	b2d8      	uxtb	r0, r3
 80004ba:	69fa      	ldr	r2, [r7, #28]
 80004bc:	4613      	mov	r3, r2
 80004be:	005b      	lsls	r3, r3, #1
 80004c0:	4413      	add	r3, r2
 80004c2:	005b      	lsls	r3, r3, #1
 80004c4:	4a48      	ldr	r2, [pc, #288]	@ (80005e8 <main+0x178>)
 80004c6:	4413      	add	r3, r2
 80004c8:	4619      	mov	r1, r3
 80004ca:	f000 fb2b 	bl	8000b24 <Alarm_Get>
  for (int i = 0; i < alarm_slot_ptr; i++)
 80004ce:	69fb      	ldr	r3, [r7, #28]
 80004d0:	3301      	adds	r3, #1
 80004d2:	61fb      	str	r3, [r7, #28]
 80004d4:	4b45      	ldr	r3, [pc, #276]	@ (80005ec <main+0x17c>)
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	461a      	mov	r2, r3
 80004da:	69fb      	ldr	r3, [r7, #28]
 80004dc:	4293      	cmp	r3, r2
 80004de:	dbea      	blt.n	80004b6 <main+0x46>

  // Set the initial system parameters to current time values and default settings for convenience
  system_param_data =
  (SYSTEM_PARAM_DATA)
  {
    time_get_data.minute,       // Minutes: 0-59
 80004e0:	4b40      	ldr	r3, [pc, #256]	@ (80005e4 <main+0x174>)
 80004e2:	785b      	ldrb	r3, [r3, #1]
 80004e4:	fa5f fc83 	uxtb.w	ip, r3
    time_get_data.hour,         // Hours: 0-23
 80004e8:	4b3e      	ldr	r3, [pc, #248]	@ (80005e4 <main+0x174>)
 80004ea:	789b      	ldrb	r3, [r3, #2]
 80004ec:	b2de      	uxtb	r6, r3
    time_get_data.dayofweek,    // Day of the week: 1-7 (1 = Sunday, 2 = Monday, ..., 7 = Saturday)
 80004ee:	4b3d      	ldr	r3, [pc, #244]	@ (80005e4 <main+0x174>)
 80004f0:	78db      	ldrb	r3, [r3, #3]
 80004f2:	b2dd      	uxtb	r5, r3
    time_get_data.dateofmonth,  // Date of the month: 1-31
 80004f4:	4b3b      	ldr	r3, [pc, #236]	@ (80005e4 <main+0x174>)
 80004f6:	791b      	ldrb	r3, [r3, #4]
 80004f8:	b2dc      	uxtb	r4, r3
    time_get_data.month,        // Month: 1-12
 80004fa:	4b3a      	ldr	r3, [pc, #232]	@ (80005e4 <main+0x174>)
 80004fc:	795b      	ldrb	r3, [r3, #5]
 80004fe:	b2d8      	uxtb	r0, r3
    time_get_data.year,         // Year: 0-99 (0 = 2000, 1 = 2001, ..., 99 = 2099)
 8000500:	4b38      	ldr	r3, [pc, #224]	@ (80005e4 <main+0x174>)
 8000502:	799b      	ldrb	r3, [r3, #6]
 8000504:	b2d9      	uxtb	r1, r3
    NOT_USED_MODE,              // Select: DAY_OF_WEEK_MODE, DATE_OF_MONTH_MODE, NOT_USED_MODE
    time_get_data.dayofweek,    // Day of the week: 1-7 (1 = Sunday, 2 = Monday, ..., 7 = Saturday), or Date of the month: 1-31
 8000506:	4b37      	ldr	r3, [pc, #220]	@ (80005e4 <main+0x174>)
 8000508:	78db      	ldrb	r3, [r3, #3]
 800050a:	b2da      	uxtb	r2, r3
  system_param_data =
 800050c:	4b38      	ldr	r3, [pc, #224]	@ (80005f0 <main+0x180>)
 800050e:	f883 c000 	strb.w	ip, [r3]
 8000512:	4b37      	ldr	r3, [pc, #220]	@ (80005f0 <main+0x180>)
 8000514:	705e      	strb	r6, [r3, #1]
 8000516:	4b36      	ldr	r3, [pc, #216]	@ (80005f0 <main+0x180>)
 8000518:	709d      	strb	r5, [r3, #2]
 800051a:	4b35      	ldr	r3, [pc, #212]	@ (80005f0 <main+0x180>)
 800051c:	70dc      	strb	r4, [r3, #3]
 800051e:	4b34      	ldr	r3, [pc, #208]	@ (80005f0 <main+0x180>)
 8000520:	7118      	strb	r0, [r3, #4]
 8000522:	4b33      	ldr	r3, [pc, #204]	@ (80005f0 <main+0x180>)
 8000524:	7159      	strb	r1, [r3, #5]
 8000526:	4b32      	ldr	r3, [pc, #200]	@ (80005f0 <main+0x180>)
 8000528:	2102      	movs	r1, #2
 800052a:	7199      	strb	r1, [r3, #6]
 800052c:	4b30      	ldr	r3, [pc, #192]	@ (80005f0 <main+0x180>)
 800052e:	71da      	strb	r2, [r3, #7]
 8000530:	4b2f      	ldr	r3, [pc, #188]	@ (80005f0 <main+0x180>)
 8000532:	2201      	movs	r2, #1
 8000534:	721a      	strb	r2, [r3, #8]
    true                        // true = ON, false = OFF
  };

  // Initialize the UART module to receive data
  //    HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size);
  HAL_UART_Receive_IT(&huart1, uart_rx_data, 2);
 8000536:	2202      	movs	r2, #2
 8000538:	492e      	ldr	r1, [pc, #184]	@ (80005f4 <main+0x184>)
 800053a:	482f      	ldr	r0, [pc, #188]	@ (80005f8 <main+0x188>)
 800053c:	f004 ff85 	bl	800544a <HAL_UART_Receive_IT>

  // Initialize the ADC module to monitor battery voltage
  //    HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc);
  HAL_ADC_Start_IT(&hadc1);
 8000540:	482e      	ldr	r0, [pc, #184]	@ (80005fc <main+0x18c>)
 8000542:	f002 f8d3 	bl	80026ec <HAL_ADC_Start_IT>
    
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    Button_Handle();
 8000546:	f000 fc93 	bl	8000e70 <Button_Handle>
    int a;
    a = 1;
 800054a:	2301      	movs	r3, #1
 800054c:	60fb      	str	r3, [r7, #12]

    TIME_DATA time_get;
    

    // Check if the RTC Interrupt Flag is set (RTC Interrupt Flag) on PB4 (Activated every second)
    if (rtc_int_flag)
 800054e:	4b2c      	ldr	r3, [pc, #176]	@ (8000600 <main+0x190>)
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	b2db      	uxtb	r3, r3
 8000554:	2b00      	cmp	r3, #0
 8000556:	d02c      	beq.n	80005b2 <main+0x142>
    {
      // Retrieve the time values from the RTC module
      Time_Get(&time_get_data);
 8000558:	4822      	ldr	r0, [pc, #136]	@ (80005e4 <main+0x174>)
 800055a:	f000 f945 	bl	80007e8 <Time_Get>
      
      // Check the alarms
      //   void Alarm_Check (volatile TIME_DATA *time_get_data)
      Alarm_Check(&time_get_data);
 800055e:	4821      	ldr	r0, [pc, #132]	@ (80005e4 <main+0x174>)
 8000560:	f000 fb8c 	bl	8000c7c <Alarm_Check>

      // Reset the RTC Interrupt Flag
      rtc_int_flag = false;
 8000564:	4b26      	ldr	r3, [pc, #152]	@ (8000600 <main+0x190>)
 8000566:	2200      	movs	r2, #0
 8000568:	701a      	strb	r2, [r3, #0]

      // Toggle the debug RTC interrupt flag for debugging purposes
      debug_rtc_int = !debug_rtc_int;
 800056a:	4b26      	ldr	r3, [pc, #152]	@ (8000604 <main+0x194>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	b2db      	uxtb	r3, r3
 8000570:	2b00      	cmp	r3, #0
 8000572:	bf14      	ite	ne
 8000574:	2301      	movne	r3, #1
 8000576:	2300      	moveq	r3, #0
 8000578:	b2db      	uxtb	r3, r3
 800057a:	f083 0301 	eor.w	r3, r3, #1
 800057e:	b2db      	uxtb	r3, r3
 8000580:	f003 0301 	and.w	r3, r3, #1
 8000584:	b2da      	uxtb	r2, r3
 8000586:	4b1f      	ldr	r3, [pc, #124]	@ (8000604 <main+0x194>)
 8000588:	701a      	strb	r2, [r3, #0]

      time_get = (TIME_DATA) time_get_data;    
 800058a:	4a16      	ldr	r2, [pc, #88]	@ (80005e4 <main+0x174>)
 800058c:	1d3b      	adds	r3, r7, #4
 800058e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000592:	6018      	str	r0, [r3, #0]
 8000594:	3304      	adds	r3, #4
 8000596:	8019      	strh	r1, [r3, #0]
 8000598:	3302      	adds	r3, #2
 800059a:	0c0a      	lsrs	r2, r1, #16
 800059c:	701a      	strb	r2, [r3, #0]
      default_mode(&a, &time_get.hour, &time_get.minute, &time_get.second);
 800059e:	1d3c      	adds	r4, r7, #4
 80005a0:	1d3b      	adds	r3, r7, #4
 80005a2:	1c5a      	adds	r2, r3, #1
 80005a4:	1d3b      	adds	r3, r7, #4
 80005a6:	1c99      	adds	r1, r3, #2
 80005a8:	f107 000c 	add.w	r0, r7, #12
 80005ac:	4623      	mov	r3, r4
 80005ae:	f005 ff13 	bl	80063d8 <default_mode>
    }

    // Check if the ADC interrupt flag is set (ADC Valid Flag)
    if (adc_valid_flag)
 80005b2:	4b15      	ldr	r3, [pc, #84]	@ (8000608 <main+0x198>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d005      	beq.n	80005c8 <main+0x158>
	  {
      // Re-enable the ADC interrupt to continue monitoring ADC values
      HAL_ADC_Start_IT(&hadc1);
 80005bc:	480f      	ldr	r0, [pc, #60]	@ (80005fc <main+0x18c>)
 80005be:	f002 f895 	bl	80026ec <HAL_ADC_Start_IT>

      // Delay for 100ms to allow the ADC to stabilize
      HAL_Delay(100);
 80005c2:	2064      	movs	r0, #100	@ 0x64
 80005c4:	f001 ff96 	bl	80024f4 <HAL_Delay>
	  }

    // Check if the UART interrupt flag is set (UART Receive Flag)
    if (uart_rx_flag)
 80005c8:	4b10      	ldr	r3, [pc, #64]	@ (800060c <main+0x19c>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d0b9      	beq.n	8000546 <main+0xd6>
	  {
      // Re-enable the UART interrupt to continue receiving data
      HAL_UART_Receive_IT(&huart1,uart_rx_data,2); 
 80005d2:	2202      	movs	r2, #2
 80005d4:	4907      	ldr	r1, [pc, #28]	@ (80005f4 <main+0x184>)
 80005d6:	4808      	ldr	r0, [pc, #32]	@ (80005f8 <main+0x188>)
 80005d8:	f004 ff37 	bl	800544a <HAL_UART_Receive_IT>
      
      // Delay for 100ms to allow the UART to stabilize
      HAL_Delay(100);
 80005dc:	2064      	movs	r0, #100	@ 0x64
 80005de:	f001 ff89 	bl	80024f4 <HAL_Delay>
  {
 80005e2:	e7b0      	b.n	8000546 <main+0xd6>
 80005e4:	20000358 	.word	0x20000358
 80005e8:	20000360 	.word	0x20000360
 80005ec:	2000039c 	.word	0x2000039c
 80005f0:	2000034c 	.word	0x2000034c
 80005f4:	200003ac 	.word	0x200003ac
 80005f8:	2000040c 	.word	0x2000040c
 80005fc:	200002c4 	.word	0x200002c4
 8000600:	2000039d 	.word	0x2000039d
 8000604:	2000039f 	.word	0x2000039f
 8000608:	200003a5 	.word	0x200003a5
 800060c:	200003aa 	.word	0x200003aa

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b094      	sub	sp, #80	@ 0x50
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800061a:	2228      	movs	r2, #40	@ 0x28
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f006 fee6 	bl	80073f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	f107 0314 	add.w	r3, r7, #20
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000640:	2301      	movs	r3, #1
 8000642:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000644:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000648:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800064a:	2300      	movs	r3, #0
 800064c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800064e:	2301      	movs	r3, #1
 8000650:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000652:	2302      	movs	r3, #2
 8000654:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000656:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800065a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800065c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000660:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000662:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000666:	4618      	mov	r0, r3
 8000668:	f003 ff58 	bl	800451c <HAL_RCC_OscConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000672:	f001 fc87 	bl	8001f84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000676:	230f      	movs	r3, #15
 8000678:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067a:	2302      	movs	r3, #2
 800067c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000682:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000686:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800068c:	f107 0314 	add.w	r3, r7, #20
 8000690:	2102      	movs	r1, #2
 8000692:	4618      	mov	r0, r3
 8000694:	f004 f9c4 	bl	8004a20 <HAL_RCC_ClockConfig>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800069e:	f001 fc71 	bl	8001f84 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80006a2:	2302      	movs	r3, #2
 80006a4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80006a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80006aa:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006ac:	1d3b      	adds	r3, r7, #4
 80006ae:	4618      	mov	r0, r3
 80006b0:	f004 fb44 	bl	8004d3c <HAL_RCCEx_PeriphCLKConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006ba:	f001 fc63 	bl	8001f84 <Error_Handler>
  }
}
 80006be:	bf00      	nop
 80006c0:	3750      	adds	r7, #80	@ 0x50
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
	...

080006c8 <Dec_To_BCD>:
  * @brief  Convert a normal decimal number to Binary Coded Decimal (BCD).
  * @param  val: Decimal number to be converted.
  * @retval uint8_t: BCD representation of the input decimal number.
  */
uint8_t Dec_To_BCD(int val)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  return (uint8_t)( (val/10*16) + (val%10) );
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	4a0e      	ldr	r2, [pc, #56]	@ (800070c <Dec_To_BCD+0x44>)
 80006d4:	fb82 1203 	smull	r1, r2, r2, r3
 80006d8:	1092      	asrs	r2, r2, #2
 80006da:	17db      	asrs	r3, r3, #31
 80006dc:	1ad3      	subs	r3, r2, r3
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	011b      	lsls	r3, r3, #4
 80006e2:	b2d8      	uxtb	r0, r3
 80006e4:	687a      	ldr	r2, [r7, #4]
 80006e6:	4b09      	ldr	r3, [pc, #36]	@ (800070c <Dec_To_BCD+0x44>)
 80006e8:	fb83 1302 	smull	r1, r3, r3, r2
 80006ec:	1099      	asrs	r1, r3, #2
 80006ee:	17d3      	asrs	r3, r2, #31
 80006f0:	1ac9      	subs	r1, r1, r3
 80006f2:	460b      	mov	r3, r1
 80006f4:	009b      	lsls	r3, r3, #2
 80006f6:	440b      	add	r3, r1
 80006f8:	005b      	lsls	r3, r3, #1
 80006fa:	1ad1      	subs	r1, r2, r3
 80006fc:	b2cb      	uxtb	r3, r1
 80006fe:	4403      	add	r3, r0
 8000700:	b2db      	uxtb	r3, r3
}
 8000702:	4618      	mov	r0, r3
 8000704:	370c      	adds	r7, #12
 8000706:	46bd      	mov	sp, r7
 8000708:	bc80      	pop	{r7}
 800070a:	4770      	bx	lr
 800070c:	66666667 	.word	0x66666667

08000710 <BCD_To_Dec>:
  * @brief  Convert a Binary Coded Decimal (BCD) value to a normal decimal number.
  * @param  val: BCD value to be converted.
  * @retval int: Decimal representation of the input BCD value.
  */
int BCD_To_Dec(uint8_t val)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	71fb      	strb	r3, [r7, #7]
  return (int)( (val/16*10) + (val%16) );
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	091b      	lsrs	r3, r3, #4
 800071e:	b2db      	uxtb	r3, r3
 8000720:	461a      	mov	r2, r3
 8000722:	4613      	mov	r3, r2
 8000724:	009b      	lsls	r3, r3, #2
 8000726:	4413      	add	r3, r2
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	461a      	mov	r2, r3
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	f003 030f 	and.w	r3, r3, #15
 8000732:	4413      	add	r3, r2
}
 8000734:	4618      	mov	r0, r3
 8000736:	370c      	adds	r7, #12
 8000738:	46bd      	mov	sp, r7
 800073a:	bc80      	pop	{r7}
 800073c:	4770      	bx	lr
	...

08000740 <Time_Set>:
  * @param  month: Month: 1-12
  * @param  year: Year: 0-99 (0 = 2000, 1 = 2001, ..., 99 = 2099)
  * @retval None
*/
void Time_Set (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom, uint8_t month, uint8_t year)
{
 8000740:	b590      	push	{r4, r7, lr}
 8000742:	b089      	sub	sp, #36	@ 0x24
 8000744:	af04      	add	r7, sp, #16
 8000746:	4604      	mov	r4, r0
 8000748:	4608      	mov	r0, r1
 800074a:	4611      	mov	r1, r2
 800074c:	461a      	mov	r2, r3
 800074e:	4623      	mov	r3, r4
 8000750:	71fb      	strb	r3, [r7, #7]
 8000752:	4603      	mov	r3, r0
 8000754:	71bb      	strb	r3, [r7, #6]
 8000756:	460b      	mov	r3, r1
 8000758:	717b      	strb	r3, [r7, #5]
 800075a:	4613      	mov	r3, r2
 800075c:	713b      	strb	r3, [r7, #4]
	// A blank array (7 slots) to contain the time values
  uint8_t setTime[7];

  // Store the time values (converted in to BCD code) into the blank array
	setTime[0] = Dec_To_BCD(sec);
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff ffb1 	bl	80006c8 <Dec_To_BCD>
 8000766:	4603      	mov	r3, r0
 8000768:	723b      	strb	r3, [r7, #8]
	setTime[1] = Dec_To_BCD(min);
 800076a:	79bb      	ldrb	r3, [r7, #6]
 800076c:	4618      	mov	r0, r3
 800076e:	f7ff ffab 	bl	80006c8 <Dec_To_BCD>
 8000772:	4603      	mov	r3, r0
 8000774:	727b      	strb	r3, [r7, #9]
	setTime[2] = Dec_To_BCD(hour);
 8000776:	797b      	ldrb	r3, [r7, #5]
 8000778:	4618      	mov	r0, r3
 800077a:	f7ff ffa5 	bl	80006c8 <Dec_To_BCD>
 800077e:	4603      	mov	r3, r0
 8000780:	72bb      	strb	r3, [r7, #10]
	setTime[3] = Dec_To_BCD(dow);
 8000782:	793b      	ldrb	r3, [r7, #4]
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff ff9f 	bl	80006c8 <Dec_To_BCD>
 800078a:	4603      	mov	r3, r0
 800078c:	72fb      	strb	r3, [r7, #11]
	setTime[4] = Dec_To_BCD(dom);
 800078e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000792:	4618      	mov	r0, r3
 8000794:	f7ff ff98 	bl	80006c8 <Dec_To_BCD>
 8000798:	4603      	mov	r3, r0
 800079a:	733b      	strb	r3, [r7, #12]
	setTime[5] = Dec_To_BCD(month);
 800079c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80007a0:	4618      	mov	r0, r3
 80007a2:	f7ff ff91 	bl	80006c8 <Dec_To_BCD>
 80007a6:	4603      	mov	r3, r0
 80007a8:	737b      	strb	r3, [r7, #13]
	setTime[6] = Dec_To_BCD(year);
 80007aa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80007ae:	4618      	mov	r0, r3
 80007b0:	f7ff ff8a 	bl	80006c8 <Dec_To_BCD>
 80007b4:	4603      	mov	r3, r0
 80007b6:	73bb      	strb	r3, [r7, #14]

  // Send the array containing the time values to the RTC module through I2C interface at address 00h - 06h (size of value: 7 bytes)
  // HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
  //    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);	
  HAL_I2C_Mem_Write(DS3231_I2C, DS3231_ADDR, 0x00, 1, setTime, sizeof(setTime), 1000);
 80007b8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007bc:	9302      	str	r3, [sp, #8]
 80007be:	2307      	movs	r3, #7
 80007c0:	9301      	str	r3, [sp, #4]
 80007c2:	f107 0308 	add.w	r3, r7, #8
 80007c6:	9300      	str	r3, [sp, #0]
 80007c8:	2301      	movs	r3, #1
 80007ca:	2200      	movs	r2, #0
 80007cc:	21d0      	movs	r1, #208	@ 0xd0
 80007ce:	4805      	ldr	r0, [pc, #20]	@ (80007e4 <Time_Set+0xa4>)
 80007d0:	f002 ff82 	bl	80036d8 <HAL_I2C_Mem_Write>

  // Delay for 1ms to allow the RTC module to process the data
  HAL_Delay(1);
 80007d4:	2001      	movs	r0, #1
 80007d6:	f001 fe8d 	bl	80024f4 <HAL_Delay>
}
 80007da:	bf00      	nop
 80007dc:	3714      	adds	r7, #20
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd90      	pop	{r4, r7, pc}
 80007e2:	bf00      	nop
 80007e4:	200002f4 	.word	0x200002f4

080007e8 <Time_Get>:
  * @brief  Get time from the RTC module through I2C interface.
  * @param  time_get_data: Pointer to a TIME structure to store the retrieved time values.
  * @retval None
*/
void Time_Get (volatile TIME_DATA *time_get_data)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b088      	sub	sp, #32
 80007ec:	af04      	add	r7, sp, #16
 80007ee:	6078      	str	r0, [r7, #4]
  uint8_t getTime[7];

  // Receive the time values from the RTC module through I2C interface, then store them into the blank array (size of value: 7 bytes)
  // HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
  //    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);  
  HAL_I2C_Mem_Read(DS3231_I2C, DS3231_ADDR, 0x00, 1, getTime, sizeof(getTime), 1000);
 80007f0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007f4:	9302      	str	r3, [sp, #8]
 80007f6:	2307      	movs	r3, #7
 80007f8:	9301      	str	r3, [sp, #4]
 80007fa:	f107 0308 	add.w	r3, r7, #8
 80007fe:	9300      	str	r3, [sp, #0]
 8000800:	2301      	movs	r3, #1
 8000802:	2200      	movs	r2, #0
 8000804:	21d0      	movs	r1, #208	@ 0xd0
 8000806:	4821      	ldr	r0, [pc, #132]	@ (800088c <Time_Get+0xa4>)
 8000808:	f003 f860 	bl	80038cc <HAL_I2C_Mem_Read>

  // Delay for 1ms to allow the RTC module to process the data
  HAL_Delay(1);
 800080c:	2001      	movs	r0, #1
 800080e:	f001 fe71 	bl	80024f4 <HAL_Delay>

  // Store the time values (converted from BCD code to decimal) into the time variable
	time_get_data->second       = BCD_To_Dec(getTime[0]);
 8000812:	7a3b      	ldrb	r3, [r7, #8]
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff ff7b 	bl	8000710 <BCD_To_Dec>
 800081a:	4603      	mov	r3, r0
 800081c:	b2da      	uxtb	r2, r3
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	701a      	strb	r2, [r3, #0]
	time_get_data->minute       = BCD_To_Dec(getTime[1]);
 8000822:	7a7b      	ldrb	r3, [r7, #9]
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff ff73 	bl	8000710 <BCD_To_Dec>
 800082a:	4603      	mov	r3, r0
 800082c:	b2da      	uxtb	r2, r3
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	705a      	strb	r2, [r3, #1]
	time_get_data->hour         = BCD_To_Dec(getTime[2]);
 8000832:	7abb      	ldrb	r3, [r7, #10]
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff ff6b 	bl	8000710 <BCD_To_Dec>
 800083a:	4603      	mov	r3, r0
 800083c:	b2da      	uxtb	r2, r3
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	709a      	strb	r2, [r3, #2]
	time_get_data->dayofweek    = BCD_To_Dec(getTime[3]);
 8000842:	7afb      	ldrb	r3, [r7, #11]
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff ff63 	bl	8000710 <BCD_To_Dec>
 800084a:	4603      	mov	r3, r0
 800084c:	b2da      	uxtb	r2, r3
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	70da      	strb	r2, [r3, #3]
	time_get_data->dateofmonth  = BCD_To_Dec(getTime[4]);
 8000852:	7b3b      	ldrb	r3, [r7, #12]
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff ff5b 	bl	8000710 <BCD_To_Dec>
 800085a:	4603      	mov	r3, r0
 800085c:	b2da      	uxtb	r2, r3
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	711a      	strb	r2, [r3, #4]
	time_get_data->month        = BCD_To_Dec(getTime[5]);
 8000862:	7b7b      	ldrb	r3, [r7, #13]
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff ff53 	bl	8000710 <BCD_To_Dec>
 800086a:	4603      	mov	r3, r0
 800086c:	b2da      	uxtb	r2, r3
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	715a      	strb	r2, [r3, #5]
	time_get_data->year         = BCD_To_Dec(getTime[6]);
 8000872:	7bbb      	ldrb	r3, [r7, #14]
 8000874:	4618      	mov	r0, r3
 8000876:	f7ff ff4b 	bl	8000710 <BCD_To_Dec>
 800087a:	4603      	mov	r3, r0
 800087c:	b2da      	uxtb	r2, r3
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	719a      	strb	r2, [r3, #6]
}
 8000882:	bf00      	nop
 8000884:	3710      	adds	r7, #16
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	200002f4 	.word	0x200002f4

08000890 <Time_Ctrl>:
  * @param  dow_dom: Day of the week or date of the month (1-7 or 1-31).
  * @param  dy_dt: Day of week or date of month (1 = day of week, 0 = date of month, 0 = not used).
  * @retval None
*/
void Time_Ctrl (uint8_t mode, uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow_dom, bool dy_dt)
{
 8000890:	b590      	push	{r4, r7, lr}
 8000892:	b08b      	sub	sp, #44	@ 0x2c
 8000894:	af04      	add	r7, sp, #16
 8000896:	4604      	mov	r4, r0
 8000898:	4608      	mov	r0, r1
 800089a:	4611      	mov	r1, r2
 800089c:	461a      	mov	r2, r3
 800089e:	4623      	mov	r3, r4
 80008a0:	71fb      	strb	r3, [r7, #7]
 80008a2:	4603      	mov	r3, r0
 80008a4:	71bb      	strb	r3, [r7, #6]
 80008a6:	460b      	mov	r3, r1
 80008a8:	717b      	strb	r3, [r7, #5]
 80008aa:	4613      	mov	r3, r2
 80008ac:	713b      	strb	r3, [r7, #4]
  // A blank array (4 slots) to contain the RTC alarm settings
  uint8_t ctrlTime[4];

  // A mask bit to set the Control register in the RTC module
  //    Address 0Eh: A1IE = 1
  uint8_t ctrlAlarm = 1; 
 80008ae:	2301      	movs	r3, #1
 80008b0:	73fb      	strb	r3, [r7, #15]

  // A mask bit to set the alarm modes (Bit 7) in the RTC module
  uint8_t maskBit = 128;
 80008b2:	2380      	movs	r3, #128	@ 0x80
 80008b4:	75fb      	strb	r3, [r7, #23]

  // A mask bit for selection of [day of week] or [date of month] (Bit 6) in the RTC module
  //    If the input [day of week]/ [date of month] selection is 1, the mask bit will be 64.
  uint8_t dyDt = (dy_dt == true) ? 64 : 0;
 80008b6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <Time_Ctrl+0x32>
 80008be:	2340      	movs	r3, #64	@ 0x40
 80008c0:	e000      	b.n	80008c4 <Time_Ctrl+0x34>
 80008c2:	2300      	movs	r3, #0
 80008c4:	75bb      	strb	r3, [r7, #22]

  // Store the RTC alarm time settings (converted into BCD code) into the blank array
  ctrlTime[0] = Dec_To_BCD(sec);
 80008c6:	79bb      	ldrb	r3, [r7, #6]
 80008c8:	4618      	mov	r0, r3
 80008ca:	f7ff fefd 	bl	80006c8 <Dec_To_BCD>
 80008ce:	4603      	mov	r3, r0
 80008d0:	743b      	strb	r3, [r7, #16]
	ctrlTime[1] = Dec_To_BCD(min);
 80008d2:	797b      	ldrb	r3, [r7, #5]
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff fef7 	bl	80006c8 <Dec_To_BCD>
 80008da:	4603      	mov	r3, r0
 80008dc:	747b      	strb	r3, [r7, #17]
	ctrlTime[2] = Dec_To_BCD(hour);
 80008de:	793b      	ldrb	r3, [r7, #4]
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff fef1 	bl	80006c8 <Dec_To_BCD>
 80008e6:	4603      	mov	r3, r0
 80008e8:	74bb      	strb	r3, [r7, #18]
	ctrlTime[3] = Dec_To_BCD(dow_dom);
 80008ea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80008ee:	4618      	mov	r0, r3
 80008f0:	f7ff feea 	bl	80006c8 <Dec_To_BCD>
 80008f4:	4603      	mov	r3, r0
 80008f6:	74fb      	strb	r3, [r7, #19]
  //      1    : Alarm when seconds match
  //      2    : Alarm when minutes and seconds match
  //      3    : Alarm when hours, minutes, and seconds match
  //      4    : Alarm when date, hours, minutes, and seconds match
  //      5    : Alarm when day, hours, minutes, and seconds match
  switch (mode)
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	2b05      	cmp	r3, #5
 80008fc:	d865      	bhi.n	80009ca <Time_Ctrl+0x13a>
 80008fe:	a201      	add	r2, pc, #4	@ (adr r2, 8000904 <Time_Ctrl+0x74>)
 8000900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000904:	0800091d 	.word	0x0800091d
 8000908:	08000947 	.word	0x08000947
 800090c:	0800096b 	.word	0x0800096b
 8000910:	08000989 	.word	0x08000989
 8000914:	080009a1 	.word	0x080009a1
 8000918:	080009b3 	.word	0x080009b3
  {
    case 0:
      // Alarm mask bit: A1M4:A1M1 = b1111, DY/DT = X
      ctrlTime[0] += maskBit;
 800091c:	7c3a      	ldrb	r2, [r7, #16]
 800091e:	7dfb      	ldrb	r3, [r7, #23]
 8000920:	4413      	add	r3, r2
 8000922:	b2db      	uxtb	r3, r3
 8000924:	743b      	strb	r3, [r7, #16]
      ctrlTime[1] += maskBit;
 8000926:	7c7a      	ldrb	r2, [r7, #17]
 8000928:	7dfb      	ldrb	r3, [r7, #23]
 800092a:	4413      	add	r3, r2
 800092c:	b2db      	uxtb	r3, r3
 800092e:	747b      	strb	r3, [r7, #17]
      ctrlTime[2] += maskBit;
 8000930:	7cba      	ldrb	r2, [r7, #18]
 8000932:	7dfb      	ldrb	r3, [r7, #23]
 8000934:	4413      	add	r3, r2
 8000936:	b2db      	uxtb	r3, r3
 8000938:	74bb      	strb	r3, [r7, #18]
      ctrlTime[3] += maskBit;
 800093a:	7cfa      	ldrb	r2, [r7, #19]
 800093c:	7dfb      	ldrb	r3, [r7, #23]
 800093e:	4413      	add	r3, r2
 8000940:	b2db      	uxtb	r3, r3
 8000942:	74fb      	strb	r3, [r7, #19]
      break;
 8000944:	e04a      	b.n	80009dc <Time_Ctrl+0x14c>
    case 1:
      // Alarm mask bit: A1M4:A1M1 = b1110, DY/DT = X
      ctrlTime[0] += 0;
 8000946:	7c3b      	ldrb	r3, [r7, #16]
 8000948:	743b      	strb	r3, [r7, #16]
      ctrlTime[1] += maskBit;
 800094a:	7c7a      	ldrb	r2, [r7, #17]
 800094c:	7dfb      	ldrb	r3, [r7, #23]
 800094e:	4413      	add	r3, r2
 8000950:	b2db      	uxtb	r3, r3
 8000952:	747b      	strb	r3, [r7, #17]
      ctrlTime[2] += maskBit;
 8000954:	7cba      	ldrb	r2, [r7, #18]
 8000956:	7dfb      	ldrb	r3, [r7, #23]
 8000958:	4413      	add	r3, r2
 800095a:	b2db      	uxtb	r3, r3
 800095c:	74bb      	strb	r3, [r7, #18]
      ctrlTime[3] += maskBit;
 800095e:	7cfa      	ldrb	r2, [r7, #19]
 8000960:	7dfb      	ldrb	r3, [r7, #23]
 8000962:	4413      	add	r3, r2
 8000964:	b2db      	uxtb	r3, r3
 8000966:	74fb      	strb	r3, [r7, #19]
      break;
 8000968:	e038      	b.n	80009dc <Time_Ctrl+0x14c>
    case 2:
      // Alarm mask bit: A1M4:A1M1 = b1100, DY/DT = X
      ctrlTime[0] += 0;
 800096a:	7c3b      	ldrb	r3, [r7, #16]
 800096c:	743b      	strb	r3, [r7, #16]
      ctrlTime[1] += 0;
 800096e:	7c7b      	ldrb	r3, [r7, #17]
 8000970:	747b      	strb	r3, [r7, #17]
      ctrlTime[2] += maskBit;
 8000972:	7cba      	ldrb	r2, [r7, #18]
 8000974:	7dfb      	ldrb	r3, [r7, #23]
 8000976:	4413      	add	r3, r2
 8000978:	b2db      	uxtb	r3, r3
 800097a:	74bb      	strb	r3, [r7, #18]
      ctrlTime[3] += maskBit;
 800097c:	7cfa      	ldrb	r2, [r7, #19]
 800097e:	7dfb      	ldrb	r3, [r7, #23]
 8000980:	4413      	add	r3, r2
 8000982:	b2db      	uxtb	r3, r3
 8000984:	74fb      	strb	r3, [r7, #19]
      break;
 8000986:	e029      	b.n	80009dc <Time_Ctrl+0x14c>
    case 3:
      // Alarm mask bit: A1M4:A1M1 = b1000, DY/DT = X
      ctrlTime[0] += 0;
 8000988:	7c3b      	ldrb	r3, [r7, #16]
 800098a:	743b      	strb	r3, [r7, #16]
      ctrlTime[1] += 0;
 800098c:	7c7b      	ldrb	r3, [r7, #17]
 800098e:	747b      	strb	r3, [r7, #17]
      ctrlTime[2] += 0;
 8000990:	7cbb      	ldrb	r3, [r7, #18]
 8000992:	74bb      	strb	r3, [r7, #18]
      ctrlTime[3] += maskBit;
 8000994:	7cfa      	ldrb	r2, [r7, #19]
 8000996:	7dfb      	ldrb	r3, [r7, #23]
 8000998:	4413      	add	r3, r2
 800099a:	b2db      	uxtb	r3, r3
 800099c:	74fb      	strb	r3, [r7, #19]
      break;
 800099e:	e01d      	b.n	80009dc <Time_Ctrl+0x14c>
    case 4:
      // Alarm mask bit: A1M4:A1M1 = b0000, DY/DT = 0
      ctrlTime[0] += 0;
 80009a0:	7c3b      	ldrb	r3, [r7, #16]
 80009a2:	743b      	strb	r3, [r7, #16]
      ctrlTime[1] += 0;
 80009a4:	7c7b      	ldrb	r3, [r7, #17]
 80009a6:	747b      	strb	r3, [r7, #17]
      ctrlTime[2] += 0;
 80009a8:	7cbb      	ldrb	r3, [r7, #18]
 80009aa:	74bb      	strb	r3, [r7, #18]
      ctrlTime[3] += 0;
 80009ac:	7cfb      	ldrb	r3, [r7, #19]
 80009ae:	74fb      	strb	r3, [r7, #19]
      break;
 80009b0:	e014      	b.n	80009dc <Time_Ctrl+0x14c>
    case 5:
      // Alarm mask bit: A1M4:A1M1 = b0000, DY/DT = 1
      ctrlTime[0] += 0;
 80009b2:	7c3b      	ldrb	r3, [r7, #16]
 80009b4:	743b      	strb	r3, [r7, #16]
      ctrlTime[1] += 0;
 80009b6:	7c7b      	ldrb	r3, [r7, #17]
 80009b8:	747b      	strb	r3, [r7, #17]
      ctrlTime[2] += 0;
 80009ba:	7cbb      	ldrb	r3, [r7, #18]
 80009bc:	74bb      	strb	r3, [r7, #18]
      ctrlTime[3] += dyDt;
 80009be:	7cfa      	ldrb	r2, [r7, #19]
 80009c0:	7dbb      	ldrb	r3, [r7, #22]
 80009c2:	4413      	add	r3, r2
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	74fb      	strb	r3, [r7, #19]
      break;
 80009c8:	e008      	b.n	80009dc <Time_Ctrl+0x14c>
    default:
      // Alarm mask bit: A1M4:A1M1 = b0000, DY/DT = 0
      ctrlTime[0] += 0;
 80009ca:	7c3b      	ldrb	r3, [r7, #16]
 80009cc:	743b      	strb	r3, [r7, #16]
      ctrlTime[1] += 0;
 80009ce:	7c7b      	ldrb	r3, [r7, #17]
 80009d0:	747b      	strb	r3, [r7, #17]
      ctrlTime[2] += 0;
 80009d2:	7cbb      	ldrb	r3, [r7, #18]
 80009d4:	74bb      	strb	r3, [r7, #18]
      ctrlTime[3] += 0;
 80009d6:	7cfb      	ldrb	r3, [r7, #19]
 80009d8:	74fb      	strb	r3, [r7, #19]
      break;
 80009da:	bf00      	nop
  }

  // Send the array containing the RTC alarm mode setting to the RTC module through I2C interface at address 07h - 0Ah (size of value: 4 bytes)
  // HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
  //    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);	  
  HAL_I2C_Mem_Write(DS3231_I2C, DS3231_ADDR, 0x07, 1, ctrlTime, sizeof(ctrlTime), 1000);
 80009dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009e0:	9302      	str	r3, [sp, #8]
 80009e2:	2304      	movs	r3, #4
 80009e4:	9301      	str	r3, [sp, #4]
 80009e6:	f107 0310 	add.w	r3, r7, #16
 80009ea:	9300      	str	r3, [sp, #0]
 80009ec:	2301      	movs	r3, #1
 80009ee:	2207      	movs	r2, #7
 80009f0:	21d0      	movs	r1, #208	@ 0xd0
 80009f2:	480d      	ldr	r0, [pc, #52]	@ (8000a28 <Time_Ctrl+0x198>)
 80009f4:	f002 fe70 	bl	80036d8 <HAL_I2C_Mem_Write>

  // Delay for 1ms to allow the RTC module to process the data
  HAL_Delay(1);
 80009f8:	2001      	movs	r0, #1
 80009fa:	f001 fd7b 	bl	80024f4 <HAL_Delay>

  // Send the alarm control mask bits to the RTC module through I2C interface at address 0Eh (size of value: 1 byte)
  // HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
  //    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);	  
  HAL_I2C_Mem_Write(DS3231_I2C, DS3231_ADDR, 0x0E, 1, &ctrlAlarm, sizeof(ctrlAlarm), 1000);
 80009fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a02:	9302      	str	r3, [sp, #8]
 8000a04:	2301      	movs	r3, #1
 8000a06:	9301      	str	r3, [sp, #4]
 8000a08:	f107 030f 	add.w	r3, r7, #15
 8000a0c:	9300      	str	r3, [sp, #0]
 8000a0e:	2301      	movs	r3, #1
 8000a10:	220e      	movs	r2, #14
 8000a12:	21d0      	movs	r1, #208	@ 0xd0
 8000a14:	4804      	ldr	r0, [pc, #16]	@ (8000a28 <Time_Ctrl+0x198>)
 8000a16:	f002 fe5f 	bl	80036d8 <HAL_I2C_Mem_Write>

  // Delay for 1ms to allow the RTC module to process the data
  HAL_Delay(1);
 8000a1a:	2001      	movs	r0, #1
 8000a1c:	f001 fd6a 	bl	80024f4 <HAL_Delay>
}
 8000a20:	bf00      	nop
 8000a22:	371c      	adds	r7, #28
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd90      	pop	{r4, r7, pc}
 8000a28:	200002f4 	.word	0x200002f4

08000a2c <Time_Init>:
  * @param  month: Month: 1-12
  * @param  year: Year: 0-99 (0 = 2000, 1 = 2001, ..., 99 = 2099)
  * @retval None
*/
void Time_Init (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom, uint8_t month, uint8_t year)
{
 8000a2c:	b590      	push	{r4, r7, lr}
 8000a2e:	b087      	sub	sp, #28
 8000a30:	af04      	add	r7, sp, #16
 8000a32:	4604      	mov	r4, r0
 8000a34:	4608      	mov	r0, r1
 8000a36:	4611      	mov	r1, r2
 8000a38:	461a      	mov	r2, r3
 8000a3a:	4623      	mov	r3, r4
 8000a3c:	71fb      	strb	r3, [r7, #7]
 8000a3e:	4603      	mov	r3, r0
 8000a40:	71bb      	strb	r3, [r7, #6]
 8000a42:	460b      	mov	r3, r1
 8000a44:	717b      	strb	r3, [r7, #5]
 8000a46:	4613      	mov	r3, r2
 8000a48:	713b      	strb	r3, [r7, #4]
  // This function is intended for initial setup of the RTC module after a reset.
  // It should not be called repeatedly unless reinitialization is required.
  //    Time_Set (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom, uint8_t month, uint8_t year)
  Time_Set (sec, min, hour, dow, dom, month, year);
 8000a4a:	793c      	ldrb	r4, [r7, #4]
 8000a4c:	797a      	ldrb	r2, [r7, #5]
 8000a4e:	79b9      	ldrb	r1, [r7, #6]
 8000a50:	79f8      	ldrb	r0, [r7, #7]
 8000a52:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000a56:	9302      	str	r3, [sp, #8]
 8000a58:	7f3b      	ldrb	r3, [r7, #28]
 8000a5a:	9301      	str	r3, [sp, #4]
 8000a5c:	7e3b      	ldrb	r3, [r7, #24]
 8000a5e:	9300      	str	r3, [sp, #0]
 8000a60:	4623      	mov	r3, r4
 8000a62:	f7ff fe6d 	bl	8000740 <Time_Set>
  //        2    : Alarm when minutes and seconds match
  //        3    : Alarm when hours, minutes, and seconds match
  //        4    : Alarm when date, hours, minutes, and seconds match
  //        5    : Alarm when day, hours, minutes, and seconds match
  //      For mode 0, the remaining input are don't-care values
  Time_Ctrl 
 8000a66:	2300      	movs	r3, #0
 8000a68:	9301      	str	r3, [sp, #4]
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	9300      	str	r3, [sp, #0]
 8000a6e:	2300      	movs	r3, #0
 8000a70:	2200      	movs	r2, #0
 8000a72:	2100      	movs	r1, #0
 8000a74:	2000      	movs	r0, #0
 8000a76:	f7ff ff0b 	bl	8000890 <Time_Ctrl>
     0, // Minutes: 0-59
     0, // Hours: 0-23
     0, // Day of the week: 1-7 (1 = Sunday, 2 = Monday, ..., 7 = Saturday), or Date of the month: 1-31
     0  // Select: 1 = day of week, 0 = date of month
  );   
}
 8000a7a:	bf00      	nop
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd90      	pop	{r4, r7, pc}
	...

08000a84 <Alarm_Set>:
  * @param  on_off: On/ Off state of the alarm (1 = ON, 0 = OFF)
  * @param  slot: Slot number of the alarm in the EEPROM module (0-9)
  * @retval None
*/
void Alarm_Set (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow_dom, ALARM_DY_DT_MODE dy_dt, bool on_off, uint8_t slot)
{
 8000a84:	b590      	push	{r4, r7, lr}
 8000a86:	b089      	sub	sp, #36	@ 0x24
 8000a88:	af04      	add	r7, sp, #16
 8000a8a:	4604      	mov	r4, r0
 8000a8c:	4608      	mov	r0, r1
 8000a8e:	4611      	mov	r1, r2
 8000a90:	461a      	mov	r2, r3
 8000a92:	4623      	mov	r3, r4
 8000a94:	71fb      	strb	r3, [r7, #7]
 8000a96:	4603      	mov	r3, r0
 8000a98:	71bb      	strb	r3, [r7, #6]
 8000a9a:	460b      	mov	r3, r1
 8000a9c:	717b      	strb	r3, [r7, #5]
 8000a9e:	4613      	mov	r3, r2
 8000aa0:	713b      	strb	r3, [r7, #4]
  // Internal address of the alarm in the EEPROM module (0-8192, or 13 bits)
  uint16_t address = slot * 4;
 8000aa2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000aa6:	b29b      	uxth	r3, r3
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	81fb      	strh	r3, [r7, #14]

  // Add an ON/OFF (1 bit) signal into the alarm package by using the MSB of the second register
  if (on_off)
 8000aac:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d002      	beq.n	8000aba <Alarm_Set+0x36>
  {
    sec += (1 << 7);
 8000ab4:	79fb      	ldrb	r3, [r7, #7]
 8000ab6:	3b80      	subs	r3, #128	@ 0x80
 8000ab8:	71fb      	strb	r3, [r7, #7]
  }

  // Add a [day of week] or [date of month] (1 bit) signal into the alarm package by using bit 6 of the dow_dom register
  switch (dy_dt)
 8000aba:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000abe:	2b02      	cmp	r3, #2
 8000ac0:	d00d      	beq.n	8000ade <Alarm_Set+0x5a>
 8000ac2:	2b02      	cmp	r3, #2
 8000ac4:	dc0d      	bgt.n	8000ae2 <Alarm_Set+0x5e>
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d005      	beq.n	8000ad6 <Alarm_Set+0x52>
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d109      	bne.n	8000ae2 <Alarm_Set+0x5e>
  {
    // Date of the month
    case DATE_OF_MONTH_MODE:
      // Decoding: [Bit 7] = 1, [Bit 6] = 0
      dow_dom += (1 << 7);
 8000ace:	793b      	ldrb	r3, [r7, #4]
 8000ad0:	3b80      	subs	r3, #128	@ 0x80
 8000ad2:	713b      	strb	r3, [r7, #4]
      break;
 8000ad4:	e006      	b.n	8000ae4 <Alarm_Set+0x60>

    // Day of the week
    case DAY_OF_WEEK_MODE:
      // Decoding: [Bit 7] = 1, [Bit 6] = 1
      dow_dom += ((1 << 7) | (1 << 6));
 8000ad6:	793b      	ldrb	r3, [r7, #4]
 8000ad8:	3b40      	subs	r3, #64	@ 0x40
 8000ada:	713b      	strb	r3, [r7, #4]
      break;
 8000adc:	e002      	b.n	8000ae4 <Alarm_Set+0x60>

    // Not used
    case NOT_USED_MODE:
      // Decoding: [Bit 7] = 0, [Bit 6] = 0
      dow_dom += 0;
      break;
 8000ade:	bf00      	nop
 8000ae0:	e000      	b.n	8000ae4 <Alarm_Set+0x60>

    default:
      dow_dom += 0;
      break;
 8000ae2:	bf00      	nop

  // A blank array (4 slots) to contain the alarm values
  uint8_t setAlarm[4];
  
  // Store the alarm values into the blank array
  setAlarm[0] = sec;
 8000ae4:	79fb      	ldrb	r3, [r7, #7]
 8000ae6:	723b      	strb	r3, [r7, #8]
  setAlarm[1] = min;
 8000ae8:	79bb      	ldrb	r3, [r7, #6]
 8000aea:	727b      	strb	r3, [r7, #9]
  setAlarm[2] = hour;
 8000aec:	797b      	ldrb	r3, [r7, #5]
 8000aee:	72bb      	strb	r3, [r7, #10]
  setAlarm[3] = dow_dom;
 8000af0:	793b      	ldrb	r3, [r7, #4]
 8000af2:	72fb      	strb	r3, [r7, #11]

  // HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
  //    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);
  HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, address, 1, setAlarm, sizeof(setAlarm), 1000);
 8000af4:	89fa      	ldrh	r2, [r7, #14]
 8000af6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000afa:	9302      	str	r3, [sp, #8]
 8000afc:	2304      	movs	r3, #4
 8000afe:	9301      	str	r3, [sp, #4]
 8000b00:	f107 0308 	add.w	r3, r7, #8
 8000b04:	9300      	str	r3, [sp, #0]
 8000b06:	2301      	movs	r3, #1
 8000b08:	21a0      	movs	r1, #160	@ 0xa0
 8000b0a:	4805      	ldr	r0, [pc, #20]	@ (8000b20 <Alarm_Set+0x9c>)
 8000b0c:	f002 fde4 	bl	80036d8 <HAL_I2C_Mem_Write>
  //     +  8 [2nd Word Address Byte]   + 1 [ACK from Client]      +
  //     + {8 [1st Data Word]           + 1 [ACK from Client]} * 4 + 
  //     +  1 [Stop Condition by Host] 
  //     =  65 cycles  
  //    Neccesary delay time = 65 cycles / 400 kHz = 162.5 us = ~ 0.17 ms
  HAL_Delay(1);
 8000b10:	2001      	movs	r0, #1
 8000b12:	f001 fcef 	bl	80024f4 <HAL_Delay>
}
 8000b16:	bf00      	nop
 8000b18:	3714      	adds	r7, #20
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd90      	pop	{r4, r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	200002f4 	.word	0x200002f4

08000b24 <Alarm_Get>:
  * @param  slot: Slot number of the alarm in the EEPROM module (0-9)
  * @param  alarm_get_data: Pointer to an ALARM_DATA structure to store the retrieved alarm values
  * @retval None
*/
void Alarm_Get (uint8_t slot, volatile ALARM_DATA *alarm_get_data)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b088      	sub	sp, #32
 8000b28:	af04      	add	r7, sp, #16
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	6039      	str	r1, [r7, #0]
 8000b2e:	71fb      	strb	r3, [r7, #7]
  // Address of the alarm in the EEPROM module (0-8192, or 13 bits)
  uint16_t address = slot * 4;
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	b29b      	uxth	r3, r3
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	81fb      	strh	r3, [r7, #14]
  // A blank array (4 slots) to contain the alarm values received from the EEPROM module
  uint8_t getAlarm[4];

  // HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
  //    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);
  HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, address, 1, getAlarm, sizeof(getAlarm), 1000);
 8000b38:	89fa      	ldrh	r2, [r7, #14]
 8000b3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b3e:	9302      	str	r3, [sp, #8]
 8000b40:	2304      	movs	r3, #4
 8000b42:	9301      	str	r3, [sp, #4]
 8000b44:	f107 0308 	add.w	r3, r7, #8
 8000b48:	9300      	str	r3, [sp, #0]
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	21a0      	movs	r1, #160	@ 0xa0
 8000b4e:	481f      	ldr	r0, [pc, #124]	@ (8000bcc <Alarm_Get+0xa8>)
 8000b50:	f002 febc 	bl	80038cc <HAL_I2C_Mem_Read>
  //     +  8 [Device Address Byte]     + 1 [ACK from Client]      +
  //     + {8 [1st Data Word]           + 1 [ACK from Client]} * 4 + 
  //     +  1 [Stop Condition by Host] 
  //     =  75 cycles
  //    Neccesary delay time = 75 cycles / 400 kHz = 187.5 us = ~ 0.19 ms
  HAL_Delay(1);
 8000b54:	2001      	movs	r0, #1
 8000b56:	f001 fccd 	bl	80024f4 <HAL_Delay>

  // Store the alarm values into the alarm variable
  alarm_get_data->second = 0;
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	701a      	strb	r2, [r3, #0]
  alarm_get_data->minute = getAlarm[1];
 8000b60:	7a7a      	ldrb	r2, [r7, #9]
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	705a      	strb	r2, [r3, #1]
  alarm_get_data->hour = getAlarm[2];
 8000b66:	7aba      	ldrb	r2, [r7, #10]
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	709a      	strb	r2, [r3, #2]
  
  if (getAlarm[3] >= (1 << 7))
 8000b6c:	7afb      	ldrb	r3, [r7, #11]
 8000b6e:	b25b      	sxtb	r3, r3
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	da18      	bge.n	8000ba6 <Alarm_Get+0x82>
  {
    if ((getAlarm[3] & 0x7F) >= (1 << 6))
 8000b74:	7afb      	ldrb	r3, [r7, #11]
 8000b76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d009      	beq.n	8000b92 <Alarm_Get+0x6e>
    {
      alarm_get_data->dy_dt = DAY_OF_WEEK_MODE;
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	2200      	movs	r2, #0
 8000b82:	70da      	strb	r2, [r3, #3]
      alarm_get_data->dow_dom = getAlarm[3] & 0x3F;
 8000b84:	7afb      	ldrb	r3, [r7, #11]
 8000b86:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000b8a:	b2da      	uxtb	r2, r3
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	711a      	strb	r2, [r3, #4]
 8000b90:	e00c      	b.n	8000bac <Alarm_Get+0x88>
    }
    else 
    {
      alarm_get_data->dy_dt = DATE_OF_MONTH_MODE;
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	2201      	movs	r2, #1
 8000b96:	70da      	strb	r2, [r3, #3]
      alarm_get_data->dow_dom = getAlarm[3] & 0x7F;
 8000b98:	7afb      	ldrb	r3, [r7, #11]
 8000b9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000b9e:	b2da      	uxtb	r2, r3
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	711a      	strb	r2, [r3, #4]
 8000ba4:	e002      	b.n	8000bac <Alarm_Get+0x88>
    }
  }
  else alarm_get_data->dy_dt = NOT_USED_MODE;
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	2202      	movs	r2, #2
 8000baa:	70da      	strb	r2, [r3, #3]

  if (getAlarm[0] >= (1 << 7)) alarm_get_data->on_off = true;
 8000bac:	7a3b      	ldrb	r3, [r7, #8]
 8000bae:	b25b      	sxtb	r3, r3
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	da03      	bge.n	8000bbc <Alarm_Get+0x98>
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	715a      	strb	r2, [r3, #5]
  else alarm_get_data->on_off = false;
}
 8000bba:	e002      	b.n	8000bc2 <Alarm_Get+0x9e>
  else alarm_get_data->on_off = false;
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	715a      	strb	r2, [r3, #5]
}
 8000bc2:	bf00      	nop
 8000bc4:	3710      	adds	r7, #16
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	200002f4 	.word	0x200002f4

08000bd0 <Alarm_Clear>:
  * @brief  Clear a single alarm from the EEPROM module.
  * @param  slot: Slot number of the alarm in the EEPROM module (0-9)
  * @retval None
*/
void Alarm_Clear (uint8_t slot)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b088      	sub	sp, #32
 8000bd4:	af04      	add	r7, sp, #16
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	71fb      	strb	r3, [r7, #7]
  // Address of the alarm in the EEPROM module (0-8192, or 13 bits)
  uint16_t address = slot * 4;
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	b29b      	uxth	r3, r3
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	81fb      	strh	r3, [r7, #14]

  // A blank array (4 slots) to contain the alarm values to be cleared
  uint8_t clearAlarm[4] = {0, 0, 0, 0};
 8000be2:	2300      	movs	r3, #0
 8000be4:	60bb      	str	r3, [r7, #8]

  // HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
  //    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);
  HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, address, 1, clearAlarm, sizeof(clearAlarm), 1000);
 8000be6:	89fa      	ldrh	r2, [r7, #14]
 8000be8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bec:	9302      	str	r3, [sp, #8]
 8000bee:	2304      	movs	r3, #4
 8000bf0:	9301      	str	r3, [sp, #4]
 8000bf2:	f107 0308 	add.w	r3, r7, #8
 8000bf6:	9300      	str	r3, [sp, #0]
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	21a0      	movs	r1, #160	@ 0xa0
 8000bfc:	4804      	ldr	r0, [pc, #16]	@ (8000c10 <Alarm_Clear+0x40>)
 8000bfe:	f002 fd6b 	bl	80036d8 <HAL_I2C_Mem_Write>
  //     +  8 [2nd Word Address Byte]   + 1 [ACK from Client]      +
  //     + {8 [1st Data Word]           + 1 [ACK from Client]} * 4 + 
  //     +  1 [Stop Condition by Host] 
  //     =  65 cycles  
  //    Neccesary delay time = 65 cycles / 400 kHz = 162.5 us = ~ 0.17 ms
  HAL_Delay(1);
 8000c02:	2001      	movs	r0, #1
 8000c04:	f001 fc76 	bl	80024f4 <HAL_Delay>
}
 8000c08:	bf00      	nop
 8000c0a:	3710      	adds	r7, #16
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	200002f4 	.word	0x200002f4

08000c14 <Alarm_Slot_Pointer_Set>:
/**
 * @brief Save the data of pointer for the alarm slot to EEPROM module.
  * @retval None
 */
void Alarm_Slot_Pointer_Set (void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af04      	add	r7, sp, #16
  // HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
  //    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);
  HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, ALARM_SLOT_PTR_ADDR, 1, &alarm_slot_ptr, sizeof(alarm_slot_ptr), 1000);
 8000c1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c1e:	9302      	str	r3, [sp, #8]
 8000c20:	2301      	movs	r3, #1
 8000c22:	9301      	str	r3, [sp, #4]
 8000c24:	4b06      	ldr	r3, [pc, #24]	@ (8000c40 <Alarm_Slot_Pointer_Set+0x2c>)
 8000c26:	9300      	str	r3, [sp, #0]
 8000c28:	2301      	movs	r3, #1
 8000c2a:	2228      	movs	r2, #40	@ 0x28
 8000c2c:	21a0      	movs	r1, #160	@ 0xa0
 8000c2e:	4805      	ldr	r0, [pc, #20]	@ (8000c44 <Alarm_Slot_Pointer_Set+0x30>)
 8000c30:	f002 fd52 	bl	80036d8 <HAL_I2C_Mem_Write>
  //     +  8 [2nd Word Address Byte]   + 1 [ACK from Client]  +
  //     +  8 [1st Data Word]           + 1 [ACK from Client]} + 
  //     +  1 [Stop Condition by Host] 
  //     =  38 cycles  
  //    Neccesary delay time = 65 cycles / 400 kHz = 95 us = ~ 0.01 ms
  HAL_Delay(1);
 8000c34:	2001      	movs	r0, #1
 8000c36:	f001 fc5d 	bl	80024f4 <HAL_Delay>
}
 8000c3a:	bf00      	nop
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	2000039c 	.word	0x2000039c
 8000c44:	200002f4 	.word	0x200002f4

08000c48 <Alarm_Slot_Pointer_Get>:
/**
 * @brief Retrieve the data of pointer for the alarm slot from EEPROM module.
  * @retval None
 */
void Alarm_Slot_Pointer_Get (void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af04      	add	r7, sp, #16
  // HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
  //    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);
  HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, ALARM_SLOT_PTR_ADDR, 1, &alarm_slot_ptr, sizeof(alarm_slot_ptr), 1000);
 8000c4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c52:	9302      	str	r3, [sp, #8]
 8000c54:	2301      	movs	r3, #1
 8000c56:	9301      	str	r3, [sp, #4]
 8000c58:	4b06      	ldr	r3, [pc, #24]	@ (8000c74 <Alarm_Slot_Pointer_Get+0x2c>)
 8000c5a:	9300      	str	r3, [sp, #0]
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	2228      	movs	r2, #40	@ 0x28
 8000c60:	21a0      	movs	r1, #160	@ 0xa0
 8000c62:	4805      	ldr	r0, [pc, #20]	@ (8000c78 <Alarm_Slot_Pointer_Get+0x30>)
 8000c64:	f002 fe32 	bl	80038cc <HAL_I2C_Mem_Read>
  //     +  8 [Device Address Byte]     + 1 [ACK from Client]  +
  //     +  8 [1st Data Word]           + 1 [ACK from Client]} + 
  //     +  1 [Stop Condition by Host] 
  //     =  48 cycles
  //    Neccesary delay time = 75 cycles / 400 kHz = 0.12 ms
  HAL_Delay(1);
 8000c68:	2001      	movs	r0, #1
 8000c6a:	f001 fc43 	bl	80024f4 <HAL_Delay>
}
 8000c6e:	bf00      	nop
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	2000039c 	.word	0x2000039c
 8000c78:	200002f4 	.word	0x200002f4

08000c7c <Alarm_Check>:
  * @param  time_get_data: Pointer to a TIME structure to store the current time values
  * @retval None
  * @note   This function compares the current time with all alarms stored in the EEPROM module.
*/
void Alarm_Check (volatile TIME_DATA *time_get_data)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  volatile ALARM_DATA alarmCheckData = {0};
 8000c84:	f107 030c 	add.w	r3, r7, #12
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	809a      	strh	r2, [r3, #4]

  // Compare the current time with all available alarms in the EEPROM module
  for (int i = 0; i < alarm_slot_ptr; i++)
 8000c8e:	2300      	movs	r3, #0
 8000c90:	617b      	str	r3, [r7, #20]
 8000c92:	e04e      	b.n	8000d32 <Alarm_Check+0xb6>
  {
    // Retrieve the alarm values from the EEPROM module
    //    void Alarm_Get (uint8_t slot, ALARM_DATA *alarm_get_data)
    Alarm_Get(i, &alarmCheckData);
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	f107 020c 	add.w	r2, r7, #12
 8000c9c:	4611      	mov	r1, r2
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff ff40 	bl	8000b24 <Alarm_Get>

    // Check if the alarm is at ON or OFF state by checking the MSB of the second register
    if (!alarmCheckData.on_off)
 8000ca4:	7c7b      	ldrb	r3, [r7, #17]
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	f083 0301 	eor.w	r3, r3, #1
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d131      	bne.n	8000d16 <Alarm_Check+0x9a>
      // Skip if the alarm is OFF
      continue;
    }

    // Check if the current time matches the alarm time (day of week)
    if ((alarmCheckData.dy_dt == DAY_OF_WEEK_MODE)
 8000cb2:	7bfb      	ldrb	r3, [r7, #15]
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d106      	bne.n	8000cc8 <Alarm_Check+0x4c>
    &&  (alarmCheckData.dow_dom != time_get_data->dayofweek))
 8000cba:	7c3b      	ldrb	r3, [r7, #16]
 8000cbc:	b2da      	uxtb	r2, r3
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	78db      	ldrb	r3, [r3, #3]
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d128      	bne.n	8000d1a <Alarm_Check+0x9e>
      // Skip if the current time does NOT match the alarm time (day of week)
      continue;
    }

    // Check if the current time matches the alarm time (date of month)
    if ((alarmCheckData.dy_dt == DATE_OF_MONTH_MODE)
 8000cc8:	7bfb      	ldrb	r3, [r7, #15]
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d106      	bne.n	8000cde <Alarm_Check+0x62>
    &&  (alarmCheckData.dow_dom != time_get_data->dateofmonth))
 8000cd0:	7c3b      	ldrb	r3, [r7, #16]
 8000cd2:	b2da      	uxtb	r2, r3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	791b      	ldrb	r3, [r3, #4]
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	429a      	cmp	r2, r3
 8000cdc:	d11f      	bne.n	8000d1e <Alarm_Check+0xa2>
      // Skip if the current time does NOT match the alarm time (date of month)
      continue;
    }

    // Check if the current time matches the alarm time (hour)
    if (alarmCheckData.hour != time_get_data->hour)
 8000cde:	7bbb      	ldrb	r3, [r7, #14]
 8000ce0:	b2da      	uxtb	r2, r3
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	789b      	ldrb	r3, [r3, #2]
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	d11a      	bne.n	8000d22 <Alarm_Check+0xa6>
      // Skip if the current time does NOT match the alarm time (hour)
      continue;
    }

    // Check if the current time matches the alarm time (minute)
    if (alarmCheckData.minute != time_get_data->minute)
 8000cec:	7b7b      	ldrb	r3, [r7, #13]
 8000cee:	b2da      	uxtb	r2, r3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	785b      	ldrb	r3, [r3, #1]
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	429a      	cmp	r2, r3
 8000cf8:	d115      	bne.n	8000d26 <Alarm_Check+0xaa>
      // Skip if the current time does NOT match the alarm time (minute)
      continue;
    }

    // Check if the current time matches the alarm time (second)
    if (alarmCheckData.second != time_get_data->second)
 8000cfa:	7b3b      	ldrb	r3, [r7, #12]
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d110      	bne.n	8000d2a <Alarm_Check+0xae>
      // Skip if the current time does NOT match the alarm time (second)
      continue;
    }

    // If all the above checks pass, the alarm is activated
    debug_alarm_activate_ctr++;
 8000d08:	4b0f      	ldr	r3, [pc, #60]	@ (8000d48 <Alarm_Check+0xcc>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	b2da      	uxtb	r2, r3
 8000d10:	4b0d      	ldr	r3, [pc, #52]	@ (8000d48 <Alarm_Check+0xcc>)
 8000d12:	701a      	strb	r2, [r3, #0]

    // Stop checking time matching
    // to make sure that only one alarm can be activated at a time
    break;
 8000d14:	e014      	b.n	8000d40 <Alarm_Check+0xc4>
      continue;
 8000d16:	bf00      	nop
 8000d18:	e008      	b.n	8000d2c <Alarm_Check+0xb0>
      continue;
 8000d1a:	bf00      	nop
 8000d1c:	e006      	b.n	8000d2c <Alarm_Check+0xb0>
      continue;
 8000d1e:	bf00      	nop
 8000d20:	e004      	b.n	8000d2c <Alarm_Check+0xb0>
      continue;
 8000d22:	bf00      	nop
 8000d24:	e002      	b.n	8000d2c <Alarm_Check+0xb0>
      continue;
 8000d26:	bf00      	nop
 8000d28:	e000      	b.n	8000d2c <Alarm_Check+0xb0>
      continue;
 8000d2a:	bf00      	nop
  for (int i = 0; i < alarm_slot_ptr; i++)
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	3301      	adds	r3, #1
 8000d30:	617b      	str	r3, [r7, #20]
 8000d32:	4b06      	ldr	r3, [pc, #24]	@ (8000d4c <Alarm_Check+0xd0>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	461a      	mov	r2, r3
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	dbaa      	blt.n	8000c94 <Alarm_Check+0x18>
  }
}
 8000d3e:	bf00      	nop
 8000d40:	bf00      	nop
 8000d42:	3718      	adds	r7, #24
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	2000039e 	.word	0x2000039e
 8000d4c:	2000039c 	.word	0x2000039c

08000d50 <Button_Debounce>:
  * * @param  button->hold_latch: 
  * * @param  button->start_tick: Start time of the button press event (in milliseconds).
  * @retval None
*/
void Button_Debounce(BUTTON_DATA *button)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  // Handle button state transitions and debounce logic
  switch (button->state)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	79db      	ldrb	r3, [r3, #7]
 8000d5c:	2b02      	cmp	r3, #2
 8000d5e:	d03b      	beq.n	8000dd8 <Button_Debounce+0x88>
 8000d60:	2b02      	cmp	r3, #2
 8000d62:	dc6c      	bgt.n	8000e3e <Button_Debounce+0xee>
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d002      	beq.n	8000d6e <Button_Debounce+0x1e>
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d017      	beq.n	8000d9c <Button_Debounce+0x4c>
 8000d6c:	e067      	b.n	8000e3e <Button_Debounce+0xee>
  {
    // Initial state: Button is released (HIGH)
    case BUTTON_RELEASED:

      button->press_flag = false;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2200      	movs	r2, #0
 8000d72:	735a      	strb	r2, [r3, #13]
      button->hold_flag = false;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2200      	movs	r2, #0
 8000d78:	739a      	strb	r2, [r3, #14]
      button->latch = false;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	73da      	strb	r2, [r3, #15]
    
      // Check if interrupt flag is set
      if (button->int_flag) 
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	7b1b      	ldrb	r3, [r3, #12]
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d069      	beq.n	8000e5e <Button_Debounce+0x10e>
      {
        // Record the start time for debounce
        button->start_tick = HAL_GetTick();
 8000d8a:	f001 fba9 	bl	80024e0 <HAL_GetTick>
 8000d8e:	4602      	mov	r2, r0
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	609a      	str	r2, [r3, #8]

        // Transition to waiting state
        button->state = BUTTON_WAITING;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2201      	movs	r2, #1
 8000d98:	71da      	strb	r2, [r3, #7]
      }
      break;
 8000d9a:	e060      	b.n	8000e5e <Button_Debounce+0x10e>

    // Waiting state: Button is pressed (LOW) but not yet confirmed
    case BUTTON_WAITING:
      // Check if debounce delay has passed
      if (HAL_GetTick() - button->start_tick >= BUTTON_DEBOUNCE_DELAY) 
 8000d9c:	f001 fba0 	bl	80024e0 <HAL_GetTick>
 8000da0:	4602      	mov	r2, r0
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	689b      	ldr	r3, [r3, #8]
 8000da6:	1ad3      	subs	r3, r2, r3
 8000da8:	2b1d      	cmp	r3, #29
 8000daa:	d95a      	bls.n	8000e62 <Button_Debounce+0x112>
      {
        // Check if button is still pressed (LOW state) after debounce delay
        if (HAL_GPIO_ReadPin(button->gpio_port, button->gpio_pin) == BUTTON_ACTIVE) 
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	889b      	ldrh	r3, [r3, #4]
 8000db4:	4619      	mov	r1, r3
 8000db6:	4610      	mov	r0, r2
 8000db8:	f002 fb02 	bl	80033c0 <HAL_GPIO_ReadPin>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d103      	bne.n	8000dca <Button_Debounce+0x7a>
        {
          // Transition to pressed state
          button->state = BUTTON_PRESSED;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2202      	movs	r2, #2
 8000dc6:	71da      	strb	r2, [r3, #7]
          // Reset interrupt flag and return to released state
          button->int_flag = false;  
          button->state = BUTTON_RELEASED;
        }
      }
      break;
 8000dc8:	e04b      	b.n	8000e62 <Button_Debounce+0x112>
          button->int_flag = false;  
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2200      	movs	r2, #0
 8000dce:	731a      	strb	r2, [r3, #12]
          button->state = BUTTON_RELEASED;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	71da      	strb	r2, [r3, #7]
      break;
 8000dd6:	e044      	b.n	8000e62 <Button_Debounce+0x112>
    
    // Pressed state: Button is pressed (LOW)
    case BUTTON_PRESSED:
      // Check if button is released (HIGH state)
      if (HAL_GPIO_ReadPin(button->gpio_port, button->gpio_pin) != BUTTON_ACTIVE) 
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	889b      	ldrh	r3, [r3, #4]
 8000de0:	4619      	mov	r1, r3
 8000de2:	4610      	mov	r0, r2
 8000de4:	f002 faec 	bl	80033c0 <HAL_GPIO_ReadPin>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d012      	beq.n	8000e14 <Button_Debounce+0xc4>
      {
        // Check if press duration is less than hold threshold
        if (HAL_GetTick() - button->start_tick < BUTTON_HOLD_TH)
 8000dee:	f001 fb77 	bl	80024e0 <HAL_GetTick>
 8000df2:	4602      	mov	r2, r0
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	689b      	ldr	r3, [r3, #8]
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8000dfe:	d202      	bcs.n	8000e06 <Button_Debounce+0xb6>
        {
          // Set press flag for short press
          button->press_flag = true;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2201      	movs	r2, #1
 8000e04:	735a      	strb	r2, [r3, #13]
        }
      
        // Reset interrupt flag and return to released state
        button->int_flag = false;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2200      	movs	r2, #0
 8000e0a:	731a      	strb	r2, [r3, #12]

        //button->latch = false;
        button->state = BUTTON_RELEASED;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	71da      	strb	r2, [r3, #7]
      else if ((HAL_GetTick() - button->start_tick >= BUTTON_HOLD_TH) && !button->hold_flag)
      {
        // Set hold flag for long press
        button->hold_flag = true;
      }
      break;
 8000e12:	e028      	b.n	8000e66 <Button_Debounce+0x116>
      else if ((HAL_GetTick() - button->start_tick >= BUTTON_HOLD_TH) && !button->hold_flag)
 8000e14:	f001 fb64 	bl	80024e0 <HAL_GetTick>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	1ad3      	subs	r3, r2, r3
 8000e20:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8000e24:	d31f      	bcc.n	8000e66 <Button_Debounce+0x116>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	7b9b      	ldrb	r3, [r3, #14]
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	f083 0301 	eor.w	r3, r3, #1
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d017      	beq.n	8000e66 <Button_Debounce+0x116>
        button->hold_flag = true;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2201      	movs	r2, #1
 8000e3a:	739a      	strb	r2, [r3, #14]
      break;
 8000e3c:	e013      	b.n	8000e66 <Button_Debounce+0x116>

    default:
      // Reset all flags and return to released state
      button->state = BUTTON_RELEASED;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2200      	movs	r2, #0
 8000e42:	71da      	strb	r2, [r3, #7]
      button->int_flag = false;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2200      	movs	r2, #0
 8000e48:	731a      	strb	r2, [r3, #12]
      button->press_flag = false;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	735a      	strb	r2, [r3, #13]
      button->hold_flag = false;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2200      	movs	r2, #0
 8000e54:	739a      	strb	r2, [r3, #14]
      button->latch = false;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2200      	movs	r2, #0
 8000e5a:	73da      	strb	r2, [r3, #15]
      break;
 8000e5c:	e004      	b.n	8000e68 <Button_Debounce+0x118>
      break;
 8000e5e:	bf00      	nop
 8000e60:	e002      	b.n	8000e68 <Button_Debounce+0x118>
      break;
 8000e62:	bf00      	nop
 8000e64:	e000      	b.n	8000e68 <Button_Debounce+0x118>
      break;
 8000e66:	bf00      	nop
  }
}
 8000e68:	bf00      	nop
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <Button_Handle>:
/**
 * @brief  Button interrupt handler function to be called in main loop
 * @retval None
 */
void Button_Handle (void) 
{
 8000e70:	b590      	push	{r4, r7, lr}
 8000e72:	b087      	sub	sp, #28
 8000e74:	af00      	add	r7, sp, #0
  // An empty button variable containing reset values for button pointer initiallization
  BUTTON_DATA buttonReset = {GPIOB, BUTTON0_IN12_Pin, 0, BUTTON_RELEASED, 0, false, false, false, false};
 8000e76:	4b5d      	ldr	r3, [pc, #372]	@ (8000fec <Button_Handle+0x17c>)
 8000e78:	463c      	mov	r4, r7
 8000e7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  // Initially point to an empty button variable
  BUTTON_DATA *button = &buttonReset;
 8000e80:	463b      	mov	r3, r7
 8000e82:	617b      	str	r3, [r7, #20]

  // Perform button debouncing to filter out noise
  Button_Debounce(&button0);
 8000e84:	485a      	ldr	r0, [pc, #360]	@ (8000ff0 <Button_Handle+0x180>)
 8000e86:	f7ff ff63 	bl	8000d50 <Button_Debounce>
  Button_Debounce(&button1);
 8000e8a:	485a      	ldr	r0, [pc, #360]	@ (8000ff4 <Button_Handle+0x184>)
 8000e8c:	f7ff ff60 	bl	8000d50 <Button_Debounce>
  Button_Debounce(&button2);
 8000e90:	4859      	ldr	r0, [pc, #356]	@ (8000ff8 <Button_Handle+0x188>)
 8000e92:	f7ff ff5d 	bl	8000d50 <Button_Debounce>
  Button_Debounce(&button3);
 8000e96:	4859      	ldr	r0, [pc, #356]	@ (8000ffc <Button_Handle+0x18c>)
 8000e98:	f7ff ff5a 	bl	8000d50 <Button_Debounce>
  Button_Debounce(&button4);
 8000e9c:	4858      	ldr	r0, [pc, #352]	@ (8001000 <Button_Handle+0x190>)
 8000e9e:	f7ff ff57 	bl	8000d50 <Button_Debounce>

  
  if      (button0.press_flag || button0.hold_flag) button = &button0;
 8000ea2:	4b53      	ldr	r3, [pc, #332]	@ (8000ff0 <Button_Handle+0x180>)
 8000ea4:	7b5b      	ldrb	r3, [r3, #13]
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d104      	bne.n	8000eb6 <Button_Handle+0x46>
 8000eac:	4b50      	ldr	r3, [pc, #320]	@ (8000ff0 <Button_Handle+0x180>)
 8000eae:	7b9b      	ldrb	r3, [r3, #14]
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d002      	beq.n	8000ebc <Button_Handle+0x4c>
 8000eb6:	4b4e      	ldr	r3, [pc, #312]	@ (8000ff0 <Button_Handle+0x180>)
 8000eb8:	617b      	str	r3, [r7, #20]
 8000eba:	e032      	b.n	8000f22 <Button_Handle+0xb2>
  else if (button1.press_flag || button1.hold_flag) button = &button1;
 8000ebc:	4b4d      	ldr	r3, [pc, #308]	@ (8000ff4 <Button_Handle+0x184>)
 8000ebe:	7b5b      	ldrb	r3, [r3, #13]
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d104      	bne.n	8000ed0 <Button_Handle+0x60>
 8000ec6:	4b4b      	ldr	r3, [pc, #300]	@ (8000ff4 <Button_Handle+0x184>)
 8000ec8:	7b9b      	ldrb	r3, [r3, #14]
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d002      	beq.n	8000ed6 <Button_Handle+0x66>
 8000ed0:	4b48      	ldr	r3, [pc, #288]	@ (8000ff4 <Button_Handle+0x184>)
 8000ed2:	617b      	str	r3, [r7, #20]
 8000ed4:	e025      	b.n	8000f22 <Button_Handle+0xb2>
  else if (button2.press_flag || button2.hold_flag) button = &button2;
 8000ed6:	4b48      	ldr	r3, [pc, #288]	@ (8000ff8 <Button_Handle+0x188>)
 8000ed8:	7b5b      	ldrb	r3, [r3, #13]
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d104      	bne.n	8000eea <Button_Handle+0x7a>
 8000ee0:	4b45      	ldr	r3, [pc, #276]	@ (8000ff8 <Button_Handle+0x188>)
 8000ee2:	7b9b      	ldrb	r3, [r3, #14]
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d002      	beq.n	8000ef0 <Button_Handle+0x80>
 8000eea:	4b43      	ldr	r3, [pc, #268]	@ (8000ff8 <Button_Handle+0x188>)
 8000eec:	617b      	str	r3, [r7, #20]
 8000eee:	e018      	b.n	8000f22 <Button_Handle+0xb2>
  else if (button3.press_flag || button3.hold_flag) button = &button3;
 8000ef0:	4b42      	ldr	r3, [pc, #264]	@ (8000ffc <Button_Handle+0x18c>)
 8000ef2:	7b5b      	ldrb	r3, [r3, #13]
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d104      	bne.n	8000f04 <Button_Handle+0x94>
 8000efa:	4b40      	ldr	r3, [pc, #256]	@ (8000ffc <Button_Handle+0x18c>)
 8000efc:	7b9b      	ldrb	r3, [r3, #14]
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d002      	beq.n	8000f0a <Button_Handle+0x9a>
 8000f04:	4b3d      	ldr	r3, [pc, #244]	@ (8000ffc <Button_Handle+0x18c>)
 8000f06:	617b      	str	r3, [r7, #20]
 8000f08:	e00b      	b.n	8000f22 <Button_Handle+0xb2>
  else if (button4.press_flag || button4.hold_flag) button = &button4;
 8000f0a:	4b3d      	ldr	r3, [pc, #244]	@ (8001000 <Button_Handle+0x190>)
 8000f0c:	7b5b      	ldrb	r3, [r3, #13]
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d104      	bne.n	8000f1e <Button_Handle+0xae>
 8000f14:	4b3a      	ldr	r3, [pc, #232]	@ (8001000 <Button_Handle+0x190>)
 8000f16:	7b9b      	ldrb	r3, [r3, #14]
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <Button_Handle+0xb2>
 8000f1e:	4b38      	ldr	r3, [pc, #224]	@ (8001000 <Button_Handle+0x190>)
 8000f20:	617b      	str	r3, [r7, #20]
  

  // Debugging: Initialize the start tick for button hold detection
  uint32_t startTick = 0;
 8000f22:	2300      	movs	r3, #0
 8000f24:	613b      	str	r3, [r7, #16]
  
  // Debugging: Check if the button is pressed or held by increment its counter in activation
  if (button->press_flag)
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	7b5b      	ldrb	r3, [r3, #13]
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d009      	beq.n	8000f44 <Button_Handle+0xd4>
  {
    // Increment the debug counter for the button
    debug_button_counter[button->index]++;
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	799b      	ldrb	r3, [r3, #6]
 8000f34:	4a33      	ldr	r2, [pc, #204]	@ (8001004 <Button_Handle+0x194>)
 8000f36:	5cd2      	ldrb	r2, [r2, r3]
 8000f38:	b2d2      	uxtb	r2, r2
 8000f3a:	3201      	adds	r2, #1
 8000f3c:	b2d1      	uxtb	r1, r2
 8000f3e:	4a31      	ldr	r2, [pc, #196]	@ (8001004 <Button_Handle+0x194>)
 8000f40:	54d1      	strb	r1, [r2, r3]
 8000f42:	e017      	b.n	8000f74 <Button_Handle+0x104>
  }
  else if (button->hold_flag)
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	7b9b      	ldrb	r3, [r3, #14]
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d012      	beq.n	8000f74 <Button_Handle+0x104>
  {
    // Check if the button is held down for a certain duration
    if (HAL_GetTick() - startTick >= BUTTON_HOLD_CYCLE) 
 8000f4e:	f001 fac7 	bl	80024e0 <HAL_GetTick>
 8000f52:	4602      	mov	r2, r0
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	2bf9      	cmp	r3, #249	@ 0xf9
 8000f5a:	d90b      	bls.n	8000f74 <Button_Handle+0x104>
    {
      // Increment the debug counter for the button
      debug_button_counter[button->index]++;
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	799b      	ldrb	r3, [r3, #6]
 8000f60:	4a28      	ldr	r2, [pc, #160]	@ (8001004 <Button_Handle+0x194>)
 8000f62:	5cd2      	ldrb	r2, [r2, r3]
 8000f64:	b2d2      	uxtb	r2, r2
 8000f66:	3201      	adds	r2, #1
 8000f68:	b2d1      	uxtb	r1, r2
 8000f6a:	4a26      	ldr	r2, [pc, #152]	@ (8001004 <Button_Handle+0x194>)
 8000f6c:	54d1      	strb	r1, [r2, r3]

      // Reset the start tick for the next hold cycle
      startTick = HAL_GetTick();
 8000f6e:	f001 fab7 	bl	80024e0 <HAL_GetTick>
 8000f72:	6138      	str	r0, [r7, #16]
    }
  }

  // Check if the button is pressed or held
  if (button->press_flag || button->hold_flag) 
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	7b5b      	ldrb	r3, [r3, #13]
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d104      	bne.n	8000f88 <Button_Handle+0x118>
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	7b9b      	ldrb	r3, [r3, #14]
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d02c      	beq.n	8000fe2 <Button_Handle+0x172>
  {
    // Handle button actions based on the current system mode
    switch (system_state.mode) 
 8000f88:	4b1f      	ldr	r3, [pc, #124]	@ (8001008 <Button_Handle+0x198>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2b05      	cmp	r3, #5
 8000f8e:	d827      	bhi.n	8000fe0 <Button_Handle+0x170>
 8000f90:	a201      	add	r2, pc, #4	@ (adr r2, 8000f98 <Button_Handle+0x128>)
 8000f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f96:	bf00      	nop
 8000f98:	08000fb1 	.word	0x08000fb1
 8000f9c:	08000fb9 	.word	0x08000fb9
 8000fa0:	08000fc1 	.word	0x08000fc1
 8000fa4:	08000fc9 	.word	0x08000fc9
 8000fa8:	08000fd1 	.word	0x08000fd1
 8000fac:	08000fd9 	.word	0x08000fd9
    {
      case DEFAULT_MODE: 
        System_Default_Mode_Handle (button);
 8000fb0:	6978      	ldr	r0, [r7, #20]
 8000fb2:	f000 f82b 	bl	800100c <System_Default_Mode_Handle>
        break;
 8000fb6:	e014      	b.n	8000fe2 <Button_Handle+0x172>

      case TIME_SETUP_MODE: 
        System_Time_Setup_Mode_Handle (button);
 8000fb8:	6978      	ldr	r0, [r7, #20]
 8000fba:	f000 f88d 	bl	80010d8 <System_Time_Setup_Mode_Handle>
        break;
 8000fbe:	e010      	b.n	8000fe2 <Button_Handle+0x172>
      
      case ALARM_SETUP_MODE: 
        System_Alarm_Setup_Mode_Handle (button);
 8000fc0:	6978      	ldr	r0, [r7, #20]
 8000fc2:	f000 fa85 	bl	80014d0 <System_Alarm_Setup_Mode_Handle>
        break;
 8000fc6:	e00c      	b.n	8000fe2 <Button_Handle+0x172>

      case ALARM_VIEW_MODE: 
        System_Alarm_View_Mode_Handle (button);
 8000fc8:	6978      	ldr	r0, [r7, #20]
 8000fca:	f000 fd13 	bl	80019f4 <System_Alarm_View_Mode_Handle>
        break;
 8000fce:	e008      	b.n	8000fe2 <Button_Handle+0x172>

      case ALARM_ACTIVE_MODE: 
        System_Alarm_Active_Mode_Handle (button);
 8000fd0:	6978      	ldr	r0, [r7, #20]
 8000fd2:	f000 fe63 	bl	8001c9c <System_Alarm_Active_Mode_Handle>
        break;
 8000fd6:	e004      	b.n	8000fe2 <Button_Handle+0x172>

      case SYSTEM_OPTIONS_MODE:
        System_Options_Mode_Handle (button);
 8000fd8:	6978      	ldr	r0, [r7, #20]
 8000fda:	f000 fecd 	bl	8001d78 <System_Options_Mode_Handle>
        break;
 8000fde:	e000      	b.n	8000fe2 <Button_Handle+0x172>

      default:
        break;
 8000fe0:	bf00      	nop
    }
  }
}
 8000fe2:	bf00      	nop
 8000fe4:	371c      	adds	r7, #28
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd90      	pop	{r4, r7, pc}
 8000fea:	bf00      	nop
 8000fec:	08007808 	.word	0x08007808
 8000ff0:	20000000 	.word	0x20000000
 8000ff4:	20000010 	.word	0x20000010
 8000ff8:	20000020 	.word	0x20000020
 8000ffc:	20000030 	.word	0x20000030
 8001000:	20000040 	.word	0x20000040
 8001004:	200003a0 	.word	0x200003a0
 8001008:	20000348 	.word	0x20000348

0800100c <System_Default_Mode_Handle>:
 * @brief  Handles the default system mode based on button actions.
 * @param  button: Pointer to the BUTTON_DATA structure containing button state and index.
 * @retval None
 */
void System_Default_Mode_Handle (BUTTON_DATA *button)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  switch (button->index) 
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	799b      	ldrb	r3, [r3, #6]
 8001018:	2b04      	cmp	r3, #4
 800101a:	d850      	bhi.n	80010be <System_Default_Mode_Handle+0xb2>
 800101c:	a201      	add	r2, pc, #4	@ (adr r2, 8001024 <System_Default_Mode_Handle+0x18>)
 800101e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001022:	bf00      	nop
 8001024:	08001039 	.word	0x08001039
 8001028:	08001063 	.word	0x08001063
 800102c:	08001073 	.word	0x08001073
 8001030:	08001083 	.word	0x08001083
 8001034:	080010a1 	.word	0x080010a1
  {
    // Button 0: If pressed, cycle through the modes; if held, do nothing (reserved for future use)
    case 0:
      if      (button->press_flag)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	7b5b      	ldrb	r3, [r3, #13]
 800103c:	b2db      	uxtb	r3, r3
 800103e:	2b00      	cmp	r3, #0
 8001040:	d00c      	beq.n	800105c <System_Default_Mode_Handle+0x50>
      {
        system_state.mode = (system_state.mode < (SYSTEM_MODE_NUM - 1)) ? (system_state.mode + 1) : 0;
 8001042:	4b24      	ldr	r3, [pc, #144]	@ (80010d4 <System_Default_Mode_Handle+0xc8>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	2b04      	cmp	r3, #4
 8001048:	d804      	bhi.n	8001054 <System_Default_Mode_Handle+0x48>
 800104a:	4b22      	ldr	r3, [pc, #136]	@ (80010d4 <System_Default_Mode_Handle+0xc8>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	3301      	adds	r3, #1
 8001050:	b2db      	uxtb	r3, r3
 8001052:	e000      	b.n	8001056 <System_Default_Mode_Handle+0x4a>
 8001054:	2300      	movs	r3, #0
 8001056:	4a1f      	ldr	r2, [pc, #124]	@ (80010d4 <System_Default_Mode_Handle+0xc8>)
 8001058:	7013      	strb	r3, [r2, #0]

      else if (button->hold_flag)
      {
        // Reserved
      }
      break;
 800105a:	e035      	b.n	80010c8 <System_Default_Mode_Handle+0xbc>
      else if (button->hold_flag)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	7b9b      	ldrb	r3, [r3, #14]
      break;
 8001060:	e032      	b.n	80010c8 <System_Default_Mode_Handle+0xbc>
    
    // Button 1: Reserved for future use
    case 1: 
      if (button->press_flag)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	7b5b      	ldrb	r3, [r3, #13]
 8001066:	b2db      	uxtb	r3, r3
 8001068:	2b00      	cmp	r3, #0
 800106a:	d12a      	bne.n	80010c2 <System_Default_Mode_Handle+0xb6>
      {
        // Reserved
      }
      else if (button->hold_flag)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	7b9b      	ldrb	r3, [r3, #14]
      {
        // Reserved
      }
      break;
 8001070:	e027      	b.n	80010c2 <System_Default_Mode_Handle+0xb6>

    // Button 2: Reserved for future use
    case 2: 
      if (button->press_flag)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	7b5b      	ldrb	r3, [r3, #13]
 8001076:	b2db      	uxtb	r3, r3
 8001078:	2b00      	cmp	r3, #0
 800107a:	d124      	bne.n	80010c6 <System_Default_Mode_Handle+0xba>
      {
        // Reserved
      }
      else if (button->hold_flag)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	7b9b      	ldrb	r3, [r3, #14]
      {
        // Reserved
      }
      break;
 8001080:	e021      	b.n	80010c6 <System_Default_Mode_Handle+0xba>
    
    // Button 3: If pressed, quick jump to Time Setup; if held, do nothing (reserved for future use)
    case 3:
      if (button->press_flag) 
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	7b5b      	ldrb	r3, [r3, #13]
 8001086:	b2db      	uxtb	r3, r3
 8001088:	2b00      	cmp	r3, #0
 800108a:	d006      	beq.n	800109a <System_Default_Mode_Handle+0x8e>
      {
        // Quick jump to Time Setup
        system_state.mode = TIME_SETUP_MODE;
 800108c:	4b11      	ldr	r3, [pc, #68]	@ (80010d4 <System_Default_Mode_Handle+0xc8>)
 800108e:	2201      	movs	r2, #1
 8001090:	701a      	strb	r2, [r3, #0]

        // Set the parameter select to the first parameter
        system_state.param_select = SET_MINUTE;
 8001092:	4b10      	ldr	r3, [pc, #64]	@ (80010d4 <System_Default_Mode_Handle+0xc8>)
 8001094:	2200      	movs	r2, #0
 8001096:	709a      	strb	r2, [r3, #2]
      }
      else if (button->hold_flag)
      {
        // Reserved
      }
      break;
 8001098:	e016      	b.n	80010c8 <System_Default_Mode_Handle+0xbc>
      else if (button->hold_flag)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	7b9b      	ldrb	r3, [r3, #14]
      break;
 800109e:	e013      	b.n	80010c8 <System_Default_Mode_Handle+0xbc>

    // Button 4: If pressed, quick jump to Alarm Setup; if held, do nothing (reserved for future use)
    case 4:
      if (button->press_flag)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	7b5b      	ldrb	r3, [r3, #13]
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d006      	beq.n	80010b8 <System_Default_Mode_Handle+0xac>
      {
        // Quick jump to Alarm Setup
        system_state.mode = ALARM_SETUP_MODE;
 80010aa:	4b0a      	ldr	r3, [pc, #40]	@ (80010d4 <System_Default_Mode_Handle+0xc8>)
 80010ac:	2202      	movs	r2, #2
 80010ae:	701a      	strb	r2, [r3, #0]

        // Set the parameter select to the first parameter
        system_state.param_select = SET_MINUTE;
 80010b0:	4b08      	ldr	r3, [pc, #32]	@ (80010d4 <System_Default_Mode_Handle+0xc8>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	709a      	strb	r2, [r3, #2]
      }
      else if (button->hold_flag)
      {
        // Reserved
      }
      break;
 80010b6:	e007      	b.n	80010c8 <System_Default_Mode_Handle+0xbc>
      else if (button->hold_flag)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	7b9b      	ldrb	r3, [r3, #14]
      break;
 80010bc:	e004      	b.n	80010c8 <System_Default_Mode_Handle+0xbc>

    default: 
      break;
 80010be:	bf00      	nop
 80010c0:	e002      	b.n	80010c8 <System_Default_Mode_Handle+0xbc>
      break;
 80010c2:	bf00      	nop
 80010c4:	e000      	b.n	80010c8 <System_Default_Mode_Handle+0xbc>
      break;
 80010c6:	bf00      	nop
  }
}
 80010c8:	bf00      	nop
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bc80      	pop	{r7}
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	20000348 	.word	0x20000348

080010d8 <System_Time_Setup_Mode_Handle>:
 * @brief  Handles the time setup mode based on button actions.
 * @param  button: Pointer to the BUTTON structure containing button state and index.
 * @retval None
 */
void System_Time_Setup_Mode_Handle (BUTTON_DATA *button)
{
 80010d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010da:	b091      	sub	sp, #68	@ 0x44
 80010dc:	af04      	add	r7, sp, #16
 80010de:	6078      	str	r0, [r7, #4]
  switch (button->index) 
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	799b      	ldrb	r3, [r3, #6]
 80010e4:	2b04      	cmp	r3, #4
 80010e6:	f200 81e2 	bhi.w	80014ae <System_Time_Setup_Mode_Handle+0x3d6>
 80010ea:	a201      	add	r2, pc, #4	@ (adr r2, 80010f0 <System_Time_Setup_Mode_Handle+0x18>)
 80010ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f0:	08001105 	.word	0x08001105
 80010f4:	080011ab 	.word	0x080011ab
 80010f8:	080012cd 	.word	0x080012cd
 80010fc:	0800140d 	.word	0x0800140d
 8001100:	08001481 	.word	0x08001481
  {
    // Button 0: If pressed, cycle through the system modes; if held, set the mode to default
    case 0:
      // If pressed, cycle through the time system modes, but the temporary setting data is still retained (avoid accidental press)
      if (button->press_flag)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	7b5b      	ldrb	r3, [r3, #13]
 8001108:	b2db      	uxtb	r3, r3
 800110a:	2b00      	cmp	r3, #0
 800110c:	d00c      	beq.n	8001128 <System_Time_Setup_Mode_Handle+0x50>
      {
        system_state.mode = (system_state.mode < (SYSTEM_MODE_NUM - 1)) ? (system_state.mode + 1) : 0;
 800110e:	4ba6      	ldr	r3, [pc, #664]	@ (80013a8 <System_Time_Setup_Mode_Handle+0x2d0>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	2b04      	cmp	r3, #4
 8001114:	d804      	bhi.n	8001120 <System_Time_Setup_Mode_Handle+0x48>
 8001116:	4ba4      	ldr	r3, [pc, #656]	@ (80013a8 <System_Time_Setup_Mode_Handle+0x2d0>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	3301      	adds	r3, #1
 800111c:	b2db      	uxtb	r3, r3
 800111e:	e000      	b.n	8001122 <System_Time_Setup_Mode_Handle+0x4a>
 8001120:	2300      	movs	r3, #0
 8001122:	4aa1      	ldr	r2, [pc, #644]	@ (80013a8 <System_Time_Setup_Mode_Handle+0x2d0>)
 8001124:	7013      	strb	r3, [r2, #0]
          NOT_USED_MODE,              // Select: DAY_OF_WEEK_MODE, DATE_OF_MONTH_MODE, NOT_USED_MODE
          time_get_data.dayofweek,    // Day of the week: 1-7 (1 = Sunday, 2 = Monday, ..., 7 = Saturday), or Date of the month: 1-31
          true                        // true = ON, false = OFF
        };
      }
      break;
 8001126:	e1c4      	b.n	80014b2 <System_Time_Setup_Mode_Handle+0x3da>
      else if (button->hold_flag && !button->latch)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	7b9b      	ldrb	r3, [r3, #14]
 800112c:	b2db      	uxtb	r3, r3
 800112e:	2b00      	cmp	r3, #0
 8001130:	f000 81bf 	beq.w	80014b2 <System_Time_Setup_Mode_Handle+0x3da>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	7bdb      	ldrb	r3, [r3, #15]
 8001138:	b2db      	uxtb	r3, r3
 800113a:	f083 0301 	eor.w	r3, r3, #1
 800113e:	b2db      	uxtb	r3, r3
 8001140:	2b00      	cmp	r3, #0
 8001142:	f000 81b6 	beq.w	80014b2 <System_Time_Setup_Mode_Handle+0x3da>
        system_state.mode = DEFAULT_MODE; 
 8001146:	4b98      	ldr	r3, [pc, #608]	@ (80013a8 <System_Time_Setup_Mode_Handle+0x2d0>)
 8001148:	2200      	movs	r2, #0
 800114a:	701a      	strb	r2, [r3, #0]
        button->latch = true;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2201      	movs	r2, #1
 8001150:	73da      	strb	r2, [r3, #15]
          time_get_data.minute,       // Minutes: 0-59
 8001152:	4b96      	ldr	r3, [pc, #600]	@ (80013ac <System_Time_Setup_Mode_Handle+0x2d4>)
 8001154:	785b      	ldrb	r3, [r3, #1]
 8001156:	fa5f fc83 	uxtb.w	ip, r3
          time_get_data.hour,         // Hours: 0-23
 800115a:	4b94      	ldr	r3, [pc, #592]	@ (80013ac <System_Time_Setup_Mode_Handle+0x2d4>)
 800115c:	789b      	ldrb	r3, [r3, #2]
 800115e:	b2de      	uxtb	r6, r3
          time_get_data.dayofweek,    // Day of the week: 1-7 (1 = Sunday, 2 = Monday, ..., 7 = Saturday)
 8001160:	4b92      	ldr	r3, [pc, #584]	@ (80013ac <System_Time_Setup_Mode_Handle+0x2d4>)
 8001162:	78db      	ldrb	r3, [r3, #3]
 8001164:	b2dd      	uxtb	r5, r3
          time_get_data.dateofmonth,  // Date of the month: 1-31
 8001166:	4b91      	ldr	r3, [pc, #580]	@ (80013ac <System_Time_Setup_Mode_Handle+0x2d4>)
 8001168:	791b      	ldrb	r3, [r3, #4]
 800116a:	b2dc      	uxtb	r4, r3
          time_get_data.month,        // Month: 1-12
 800116c:	4b8f      	ldr	r3, [pc, #572]	@ (80013ac <System_Time_Setup_Mode_Handle+0x2d4>)
 800116e:	795b      	ldrb	r3, [r3, #5]
 8001170:	b2d8      	uxtb	r0, r3
          time_get_data.year,         // Year: 0-99 (0 = 2000, 1 = 2001, ..., 99 = 2099)
 8001172:	4b8e      	ldr	r3, [pc, #568]	@ (80013ac <System_Time_Setup_Mode_Handle+0x2d4>)
 8001174:	799b      	ldrb	r3, [r3, #6]
 8001176:	b2d9      	uxtb	r1, r3
          time_get_data.dayofweek,    // Day of the week: 1-7 (1 = Sunday, 2 = Monday, ..., 7 = Saturday), or Date of the month: 1-31
 8001178:	4b8c      	ldr	r3, [pc, #560]	@ (80013ac <System_Time_Setup_Mode_Handle+0x2d4>)
 800117a:	78db      	ldrb	r3, [r3, #3]
 800117c:	b2da      	uxtb	r2, r3
        system_param_data =
 800117e:	4b8c      	ldr	r3, [pc, #560]	@ (80013b0 <System_Time_Setup_Mode_Handle+0x2d8>)
 8001180:	f883 c000 	strb.w	ip, [r3]
 8001184:	4b8a      	ldr	r3, [pc, #552]	@ (80013b0 <System_Time_Setup_Mode_Handle+0x2d8>)
 8001186:	705e      	strb	r6, [r3, #1]
 8001188:	4b89      	ldr	r3, [pc, #548]	@ (80013b0 <System_Time_Setup_Mode_Handle+0x2d8>)
 800118a:	709d      	strb	r5, [r3, #2]
 800118c:	4b88      	ldr	r3, [pc, #544]	@ (80013b0 <System_Time_Setup_Mode_Handle+0x2d8>)
 800118e:	70dc      	strb	r4, [r3, #3]
 8001190:	4b87      	ldr	r3, [pc, #540]	@ (80013b0 <System_Time_Setup_Mode_Handle+0x2d8>)
 8001192:	7118      	strb	r0, [r3, #4]
 8001194:	4b86      	ldr	r3, [pc, #536]	@ (80013b0 <System_Time_Setup_Mode_Handle+0x2d8>)
 8001196:	7159      	strb	r1, [r3, #5]
 8001198:	4b85      	ldr	r3, [pc, #532]	@ (80013b0 <System_Time_Setup_Mode_Handle+0x2d8>)
 800119a:	2102      	movs	r1, #2
 800119c:	7199      	strb	r1, [r3, #6]
 800119e:	4b84      	ldr	r3, [pc, #528]	@ (80013b0 <System_Time_Setup_Mode_Handle+0x2d8>)
 80011a0:	71da      	strb	r2, [r3, #7]
 80011a2:	4b83      	ldr	r3, [pc, #524]	@ (80013b0 <System_Time_Setup_Mode_Handle+0x2d8>)
 80011a4:	2201      	movs	r2, #1
 80011a6:	721a      	strb	r2, [r3, #8]
      break;
 80011a8:	e183      	b.n	80014b2 <System_Time_Setup_Mode_Handle+0x3da>
    
    // Button 1: If pressed, increment the selected parameter; if held, increment continuously
    case 1: 
      // Pointer to the selected parameter, its maximum value, and minimum value
      uint8_t *paramPtr1 = NULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
      uint8_t maxValue1 = 0;    
 80011ae:	2300      	movs	r3, #0
 80011b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
      uint8_t minValue1 = 0;  
 80011b4:	2300      	movs	r3, #0
 80011b6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

      // Determine the parameter to increment based on the current selection
      switch (system_state.param_select)
 80011ba:	4b7b      	ldr	r3, [pc, #492]	@ (80013a8 <System_Time_Setup_Mode_Handle+0x2d0>)
 80011bc:	789b      	ldrb	r3, [r3, #2]
 80011be:	2b05      	cmp	r3, #5
 80011c0:	d844      	bhi.n	800124c <System_Time_Setup_Mode_Handle+0x174>
 80011c2:	a201      	add	r2, pc, #4	@ (adr r2, 80011c8 <System_Time_Setup_Mode_Handle+0xf0>)
 80011c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011c8:	080011e1 	.word	0x080011e1
 80011cc:	080011f3 	.word	0x080011f3
 80011d0:	08001205 	.word	0x08001205
 80011d4:	08001217 	.word	0x08001217
 80011d8:	08001229 	.word	0x08001229
 80011dc:	0800123b 	.word	0x0800123b
      {
        case SET_MINUTE:  paramPtr1 = &system_param_data.minute;  maxValue1 = 59; minValue1 = 0; break;
 80011e0:	4b73      	ldr	r3, [pc, #460]	@ (80013b0 <System_Time_Setup_Mode_Handle+0x2d8>)
 80011e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80011e4:	233b      	movs	r3, #59	@ 0x3b
 80011e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80011ea:	2300      	movs	r3, #0
 80011ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80011f0:	e02d      	b.n	800124e <System_Time_Setup_Mode_Handle+0x176>
        case SET_HOUR:    paramPtr1 = &system_param_data.hour;    maxValue1 = 23; minValue1 = 0; break;
 80011f2:	4b70      	ldr	r3, [pc, #448]	@ (80013b4 <System_Time_Setup_Mode_Handle+0x2dc>)
 80011f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80011f6:	2317      	movs	r3, #23
 80011f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80011fc:	2300      	movs	r3, #0
 80011fe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8001202:	e024      	b.n	800124e <System_Time_Setup_Mode_Handle+0x176>
        case SET_DOW:     paramPtr1 = &system_param_data.dow;     maxValue1 = 7;  minValue1 = 1; break;
 8001204:	4b6c      	ldr	r3, [pc, #432]	@ (80013b8 <System_Time_Setup_Mode_Handle+0x2e0>)
 8001206:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001208:	2307      	movs	r3, #7
 800120a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800120e:	2301      	movs	r3, #1
 8001210:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8001214:	e01b      	b.n	800124e <System_Time_Setup_Mode_Handle+0x176>
        case SET_DOM:     paramPtr1 = &system_param_data.dom;     maxValue1 = 31; minValue1 = 1; break;
 8001216:	4b69      	ldr	r3, [pc, #420]	@ (80013bc <System_Time_Setup_Mode_Handle+0x2e4>)
 8001218:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800121a:	231f      	movs	r3, #31
 800121c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001220:	2301      	movs	r3, #1
 8001222:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8001226:	e012      	b.n	800124e <System_Time_Setup_Mode_Handle+0x176>
        case SET_MONTH:   paramPtr1 = &system_param_data.month;   maxValue1 = 12; minValue1 = 1; break;
 8001228:	4b65      	ldr	r3, [pc, #404]	@ (80013c0 <System_Time_Setup_Mode_Handle+0x2e8>)
 800122a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800122c:	230c      	movs	r3, #12
 800122e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001232:	2301      	movs	r3, #1
 8001234:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8001238:	e009      	b.n	800124e <System_Time_Setup_Mode_Handle+0x176>
        case SET_YEAR:    paramPtr1 = &system_param_data.year;    maxValue1 = 99; minValue1 = 0; break;
 800123a:	4b62      	ldr	r3, [pc, #392]	@ (80013c4 <System_Time_Setup_Mode_Handle+0x2ec>)
 800123c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800123e:	2363      	movs	r3, #99	@ 0x63
 8001240:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001244:	2300      	movs	r3, #0
 8001246:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800124a:	e000      	b.n	800124e <System_Time_Setup_Mode_Handle+0x176>
        default: break;
 800124c:	bf00      	nop
      }

      // Initialize the start tick for button 1 hold detection
      uint32_t startTick1 = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	61bb      	str	r3, [r7, #24]

      // Check if the button is pressed or held
      if (button->press_flag) 
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	7b5b      	ldrb	r3, [r3, #13]
 8001256:	b2db      	uxtb	r3, r3
 8001258:	2b00      	cmp	r3, #0
 800125a:	d013      	beq.n	8001284 <System_Time_Setup_Mode_Handle+0x1ac>
      {
        // Increment the selected parameter value once for a button press
        if (paramPtr1) 
 800125c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800125e:	2b00      	cmp	r3, #0
 8001260:	f000 8129 	beq.w	80014b6 <System_Time_Setup_Mode_Handle+0x3de>
        {
          // Increment the parameter value, wrapping around if necessary
          *paramPtr1 = (*paramPtr1 < maxValue1) ? (*paramPtr1 + 1) : minValue1;
 8001264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800126c:	429a      	cmp	r2, r3
 800126e:	d904      	bls.n	800127a <System_Time_Setup_Mode_Handle+0x1a2>
 8001270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	3301      	adds	r3, #1
 8001276:	b2db      	uxtb	r3, r3
 8001278:	e001      	b.n	800127e <System_Time_Setup_Mode_Handle+0x1a6>
 800127a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800127e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001280:	7013      	strb	r3, [r2, #0]

          // Update the start tick for the next hold cycle
          startTick1 = HAL_GetTick();
        }
      } 
      break;
 8001282:	e118      	b.n	80014b6 <System_Time_Setup_Mode_Handle+0x3de>
      else if (button->hold_flag) 
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	7b9b      	ldrb	r3, [r3, #14]
 8001288:	b2db      	uxtb	r3, r3
 800128a:	2b00      	cmp	r3, #0
 800128c:	f000 8113 	beq.w	80014b6 <System_Time_Setup_Mode_Handle+0x3de>
        if (HAL_GetTick() - startTick1 >= BUTTON_HOLD_CYCLE) 
 8001290:	f001 f926 	bl	80024e0 <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	2bf9      	cmp	r3, #249	@ 0xf9
 800129c:	f240 810b 	bls.w	80014b6 <System_Time_Setup_Mode_Handle+0x3de>
          if (paramPtr1) 
 80012a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d00e      	beq.n	80012c4 <System_Time_Setup_Mode_Handle+0x1ec>
            *paramPtr1 = (*paramPtr1 < maxValue1) ? (*paramPtr1 + 1) : minValue1;
 80012a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d904      	bls.n	80012bc <System_Time_Setup_Mode_Handle+0x1e4>
 80012b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	3301      	adds	r3, #1
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	e001      	b.n	80012c0 <System_Time_Setup_Mode_Handle+0x1e8>
 80012bc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80012c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80012c2:	7013      	strb	r3, [r2, #0]
          startTick1 = HAL_GetTick();
 80012c4:	f001 f90c 	bl	80024e0 <HAL_GetTick>
 80012c8:	61b8      	str	r0, [r7, #24]
      break;
 80012ca:	e0f4      	b.n	80014b6 <System_Time_Setup_Mode_Handle+0x3de>
    
      // Button 2: If pressed, decrement the selected parameter; if held, decrement continuously
      case 2: 
        // Pointer to the selected parameter, its maximum value, and minimum value
        uint8_t *paramPtr2 = NULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	627b      	str	r3, [r7, #36]	@ 0x24
        uint8_t maxValue2 = 0;    
 80012d0:	2300      	movs	r3, #0
 80012d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        uint8_t minValue2 = 0;  
 80012d6:	2300      	movs	r3, #0
 80012d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

        // Determine the parameter to decrement based on the current selection
        switch (system_state.param_select)
 80012dc:	4b32      	ldr	r3, [pc, #200]	@ (80013a8 <System_Time_Setup_Mode_Handle+0x2d0>)
 80012de:	789b      	ldrb	r3, [r3, #2]
 80012e0:	2b05      	cmp	r3, #5
 80012e2:	d845      	bhi.n	8001370 <System_Time_Setup_Mode_Handle+0x298>
 80012e4:	a201      	add	r2, pc, #4	@ (adr r2, 80012ec <System_Time_Setup_Mode_Handle+0x214>)
 80012e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ea:	bf00      	nop
 80012ec:	08001305 	.word	0x08001305
 80012f0:	08001317 	.word	0x08001317
 80012f4:	08001329 	.word	0x08001329
 80012f8:	0800133b 	.word	0x0800133b
 80012fc:	0800134d 	.word	0x0800134d
 8001300:	0800135f 	.word	0x0800135f
        {
          case SET_MINUTE:  paramPtr2 = &system_param_data.minute;  maxValue2 = 59; minValue2 = 0; break;
 8001304:	4b2a      	ldr	r3, [pc, #168]	@ (80013b0 <System_Time_Setup_Mode_Handle+0x2d8>)
 8001306:	627b      	str	r3, [r7, #36]	@ 0x24
 8001308:	233b      	movs	r3, #59	@ 0x3b
 800130a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800130e:	2300      	movs	r3, #0
 8001310:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001314:	e02d      	b.n	8001372 <System_Time_Setup_Mode_Handle+0x29a>
          case SET_HOUR:    paramPtr2 = &system_param_data.hour;    maxValue2 = 23; minValue2 = 0; break;
 8001316:	4b27      	ldr	r3, [pc, #156]	@ (80013b4 <System_Time_Setup_Mode_Handle+0x2dc>)
 8001318:	627b      	str	r3, [r7, #36]	@ 0x24
 800131a:	2317      	movs	r3, #23
 800131c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001320:	2300      	movs	r3, #0
 8001322:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001326:	e024      	b.n	8001372 <System_Time_Setup_Mode_Handle+0x29a>
          case SET_DOW:     paramPtr2 = &system_param_data.dow;     maxValue2 = 7;  minValue2 = 1; break;
 8001328:	4b23      	ldr	r3, [pc, #140]	@ (80013b8 <System_Time_Setup_Mode_Handle+0x2e0>)
 800132a:	627b      	str	r3, [r7, #36]	@ 0x24
 800132c:	2307      	movs	r3, #7
 800132e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001332:	2301      	movs	r3, #1
 8001334:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001338:	e01b      	b.n	8001372 <System_Time_Setup_Mode_Handle+0x29a>
          case SET_DOM:     paramPtr2 = &system_param_data.dom;     maxValue2 = 31; minValue2 = 1; break;
 800133a:	4b20      	ldr	r3, [pc, #128]	@ (80013bc <System_Time_Setup_Mode_Handle+0x2e4>)
 800133c:	627b      	str	r3, [r7, #36]	@ 0x24
 800133e:	231f      	movs	r3, #31
 8001340:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001344:	2301      	movs	r3, #1
 8001346:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800134a:	e012      	b.n	8001372 <System_Time_Setup_Mode_Handle+0x29a>
          case SET_MONTH:   paramPtr2 = &system_param_data.month;   maxValue2 = 12; minValue2 = 1; break;
 800134c:	4b1c      	ldr	r3, [pc, #112]	@ (80013c0 <System_Time_Setup_Mode_Handle+0x2e8>)
 800134e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001350:	230c      	movs	r3, #12
 8001352:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001356:	2301      	movs	r3, #1
 8001358:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800135c:	e009      	b.n	8001372 <System_Time_Setup_Mode_Handle+0x29a>
          case SET_YEAR:    paramPtr2 = &system_param_data.year;    maxValue2 = 99; minValue2 = 0; break;
 800135e:	4b19      	ldr	r3, [pc, #100]	@ (80013c4 <System_Time_Setup_Mode_Handle+0x2ec>)
 8001360:	627b      	str	r3, [r7, #36]	@ 0x24
 8001362:	2363      	movs	r3, #99	@ 0x63
 8001364:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001368:	2300      	movs	r3, #0
 800136a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800136e:	e000      	b.n	8001372 <System_Time_Setup_Mode_Handle+0x29a>
          default: break;
 8001370:	bf00      	nop
        }

        // Initialize the start tick for button 2 hold detection
        uint32_t startTick2 = 0;
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]

        // Check if the button is pressed or held
        if (button->press_flag) 
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	7b5b      	ldrb	r3, [r3, #13]
 800137a:	b2db      	uxtb	r3, r3
 800137c:	2b00      	cmp	r3, #0
 800137e:	d023      	beq.n	80013c8 <System_Time_Setup_Mode_Handle+0x2f0>
        {
          // Decrement the selected parameter value once for a button press
          if (paramPtr2) 
 8001380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001382:	2b00      	cmp	r3, #0
 8001384:	f000 8099 	beq.w	80014ba <System_Time_Setup_Mode_Handle+0x3e2>
          {
            // Decrement the parameter value, wrapping around if necessary
            *paramPtr2 = (*paramPtr2 > minValue2) ? (*paramPtr2 - 1) : maxValue2;
 8001388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8001390:	429a      	cmp	r2, r3
 8001392:	d204      	bcs.n	800139e <System_Time_Setup_Mode_Handle+0x2c6>
 8001394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	3b01      	subs	r3, #1
 800139a:	b2db      	uxtb	r3, r3
 800139c:	e001      	b.n	80013a2 <System_Time_Setup_Mode_Handle+0x2ca>
 800139e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80013a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013a4:	7013      	strb	r3, [r2, #0]

            // Update the start tick for the next hold cycle
            startTick2 = HAL_GetTick();
          }
        } 
        break;
 80013a6:	e088      	b.n	80014ba <System_Time_Setup_Mode_Handle+0x3e2>
 80013a8:	20000348 	.word	0x20000348
 80013ac:	20000358 	.word	0x20000358
 80013b0:	2000034c 	.word	0x2000034c
 80013b4:	2000034d 	.word	0x2000034d
 80013b8:	2000034e 	.word	0x2000034e
 80013bc:	2000034f 	.word	0x2000034f
 80013c0:	20000350 	.word	0x20000350
 80013c4:	20000351 	.word	0x20000351
        else if (button->hold_flag) 
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	7b9b      	ldrb	r3, [r3, #14]
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d073      	beq.n	80014ba <System_Time_Setup_Mode_Handle+0x3e2>
          if (HAL_GetTick() - startTick2 >= BUTTON_HOLD_CYCLE) 
 80013d2:	f001 f885 	bl	80024e0 <HAL_GetTick>
 80013d6:	4602      	mov	r2, r0
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	2bf9      	cmp	r3, #249	@ 0xf9
 80013de:	d96c      	bls.n	80014ba <System_Time_Setup_Mode_Handle+0x3e2>
            if (paramPtr2) 
 80013e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d00e      	beq.n	8001404 <System_Time_Setup_Mode_Handle+0x32c>
              *paramPtr2 = (*paramPtr2 > minValue2) ? (*paramPtr2 - 1) : maxValue2;
 80013e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d204      	bcs.n	80013fc <System_Time_Setup_Mode_Handle+0x324>
 80013f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	3b01      	subs	r3, #1
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	e001      	b.n	8001400 <System_Time_Setup_Mode_Handle+0x328>
 80013fc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001400:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001402:	7013      	strb	r3, [r2, #0]
            startTick2 = HAL_GetTick();
 8001404:	f001 f86c 	bl	80024e0 <HAL_GetTick>
 8001408:	61f8      	str	r0, [r7, #28]
        break;
 800140a:	e056      	b.n	80014ba <System_Time_Setup_Mode_Handle+0x3e2>
    
    // Button 3: If pressed, move to the next field; if held, set the time using the current parameter values
    case 3: 
      // If the button is pressed, move to the next parameter field, wrapping around if necessary
      if(button->press_flag)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	7b5b      	ldrb	r3, [r3, #13]
 8001410:	b2db      	uxtb	r3, r3
 8001412:	2b00      	cmp	r3, #0
 8001414:	d00e      	beq.n	8001434 <System_Time_Setup_Mode_Handle+0x35c>
      {
        if (system_state.param_select == SET_YEAR)
 8001416:	4b2c      	ldr	r3, [pc, #176]	@ (80014c8 <System_Time_Setup_Mode_Handle+0x3f0>)
 8001418:	789b      	ldrb	r3, [r3, #2]
 800141a:	2b05      	cmp	r3, #5
 800141c:	d103      	bne.n	8001426 <System_Time_Setup_Mode_Handle+0x34e>
        {
          system_state.param_select = SET_MINUTE;
 800141e:	4b2a      	ldr	r3, [pc, #168]	@ (80014c8 <System_Time_Setup_Mode_Handle+0x3f0>)
 8001420:	2200      	movs	r2, #0
 8001422:	709a      	strb	r2, [r3, #2]

        button->latch = true;

        break;
      }
      break;
 8001424:	e04b      	b.n	80014be <System_Time_Setup_Mode_Handle+0x3e6>
          system_state.param_select += 1;
 8001426:	4b28      	ldr	r3, [pc, #160]	@ (80014c8 <System_Time_Setup_Mode_Handle+0x3f0>)
 8001428:	789b      	ldrb	r3, [r3, #2]
 800142a:	3301      	adds	r3, #1
 800142c:	b2da      	uxtb	r2, r3
 800142e:	4b26      	ldr	r3, [pc, #152]	@ (80014c8 <System_Time_Setup_Mode_Handle+0x3f0>)
 8001430:	709a      	strb	r2, [r3, #2]
      break;
 8001432:	e044      	b.n	80014be <System_Time_Setup_Mode_Handle+0x3e6>
      else if (button->hold_flag && !button->latch) 
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	7b9b      	ldrb	r3, [r3, #14]
 8001438:	b2db      	uxtb	r3, r3
 800143a:	2b00      	cmp	r3, #0
 800143c:	d03f      	beq.n	80014be <System_Time_Setup_Mode_Handle+0x3e6>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	7bdb      	ldrb	r3, [r3, #15]
 8001442:	b2db      	uxtb	r3, r3
 8001444:	f083 0301 	eor.w	r3, r3, #1
 8001448:	b2db      	uxtb	r3, r3
 800144a:	2b00      	cmp	r3, #0
 800144c:	d037      	beq.n	80014be <System_Time_Setup_Mode_Handle+0x3e6>
        Time_Init
 800144e:	4b1f      	ldr	r3, [pc, #124]	@ (80014cc <System_Time_Setup_Mode_Handle+0x3f4>)
 8001450:	7818      	ldrb	r0, [r3, #0]
 8001452:	4b1e      	ldr	r3, [pc, #120]	@ (80014cc <System_Time_Setup_Mode_Handle+0x3f4>)
 8001454:	785c      	ldrb	r4, [r3, #1]
 8001456:	4b1d      	ldr	r3, [pc, #116]	@ (80014cc <System_Time_Setup_Mode_Handle+0x3f4>)
 8001458:	789d      	ldrb	r5, [r3, #2]
 800145a:	4b1c      	ldr	r3, [pc, #112]	@ (80014cc <System_Time_Setup_Mode_Handle+0x3f4>)
 800145c:	78db      	ldrb	r3, [r3, #3]
 800145e:	4a1b      	ldr	r2, [pc, #108]	@ (80014cc <System_Time_Setup_Mode_Handle+0x3f4>)
 8001460:	7912      	ldrb	r2, [r2, #4]
 8001462:	491a      	ldr	r1, [pc, #104]	@ (80014cc <System_Time_Setup_Mode_Handle+0x3f4>)
 8001464:	7949      	ldrb	r1, [r1, #5]
 8001466:	9102      	str	r1, [sp, #8]
 8001468:	9201      	str	r2, [sp, #4]
 800146a:	9300      	str	r3, [sp, #0]
 800146c:	462b      	mov	r3, r5
 800146e:	4622      	mov	r2, r4
 8001470:	4601      	mov	r1, r0
 8001472:	2000      	movs	r0, #0
 8001474:	f7ff fada 	bl	8000a2c <Time_Init>
        button->latch = true;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2201      	movs	r2, #1
 800147c:	73da      	strb	r2, [r3, #15]
        break;
 800147e:	e01f      	b.n	80014c0 <System_Time_Setup_Mode_Handle+0x3e8>

    // Button 4: If pressed, move to the previous field; if held, do nothing (reserved for future use)
    case 4: 
      // If the button is pressed, move to the previous parameter field, wrapping around if necessary
      if (button->press_flag)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	7b5b      	ldrb	r3, [r3, #13]
 8001484:	b2db      	uxtb	r3, r3
 8001486:	2b00      	cmp	r3, #0
 8001488:	d00e      	beq.n	80014a8 <System_Time_Setup_Mode_Handle+0x3d0>
      {
        if (system_state.param_select == SET_MINUTE)
 800148a:	4b0f      	ldr	r3, [pc, #60]	@ (80014c8 <System_Time_Setup_Mode_Handle+0x3f0>)
 800148c:	789b      	ldrb	r3, [r3, #2]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d103      	bne.n	800149a <System_Time_Setup_Mode_Handle+0x3c2>
        {
          system_state.param_select = SET_YEAR;
 8001492:	4b0d      	ldr	r3, [pc, #52]	@ (80014c8 <System_Time_Setup_Mode_Handle+0x3f0>)
 8001494:	2205      	movs	r2, #5
 8001496:	709a      	strb	r2, [r3, #2]
      // If the button is held down, do nothing (reserved for future use)
      else if (button->hold_flag) 
      {
        // Reserved
      }
      break;
 8001498:	e012      	b.n	80014c0 <System_Time_Setup_Mode_Handle+0x3e8>
          system_state.param_select -= 1;
 800149a:	4b0b      	ldr	r3, [pc, #44]	@ (80014c8 <System_Time_Setup_Mode_Handle+0x3f0>)
 800149c:	789b      	ldrb	r3, [r3, #2]
 800149e:	3b01      	subs	r3, #1
 80014a0:	b2da      	uxtb	r2, r3
 80014a2:	4b09      	ldr	r3, [pc, #36]	@ (80014c8 <System_Time_Setup_Mode_Handle+0x3f0>)
 80014a4:	709a      	strb	r2, [r3, #2]
      break;
 80014a6:	e00b      	b.n	80014c0 <System_Time_Setup_Mode_Handle+0x3e8>
      else if (button->hold_flag) 
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	7b9b      	ldrb	r3, [r3, #14]
      break;
 80014ac:	e008      	b.n	80014c0 <System_Time_Setup_Mode_Handle+0x3e8>

    default: 
      break;
 80014ae:	bf00      	nop
 80014b0:	e006      	b.n	80014c0 <System_Time_Setup_Mode_Handle+0x3e8>
      break;
 80014b2:	bf00      	nop
 80014b4:	e004      	b.n	80014c0 <System_Time_Setup_Mode_Handle+0x3e8>
      break;
 80014b6:	bf00      	nop
 80014b8:	e002      	b.n	80014c0 <System_Time_Setup_Mode_Handle+0x3e8>
        break;
 80014ba:	bf00      	nop
 80014bc:	e000      	b.n	80014c0 <System_Time_Setup_Mode_Handle+0x3e8>
      break;
 80014be:	bf00      	nop
  }
}
 80014c0:	bf00      	nop
 80014c2:	3734      	adds	r7, #52	@ 0x34
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014c8:	20000348 	.word	0x20000348
 80014cc:	2000034c 	.word	0x2000034c

080014d0 <System_Alarm_Setup_Mode_Handle>:
 * @brief  Handles the alarm setup mode based on button actions.
 * @param  button: Pointer to the BUTTON structure containing button state and index.
 * @retval None
 */
void System_Alarm_Setup_Mode_Handle (BUTTON_DATA *button)
{
 80014d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014d2:	b091      	sub	sp, #68	@ 0x44
 80014d4:	af04      	add	r7, sp, #16
 80014d6:	6078      	str	r0, [r7, #4]
  switch (button->index) 
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	799b      	ldrb	r3, [r3, #6]
 80014dc:	2b04      	cmp	r3, #4
 80014de:	f200 826d 	bhi.w	80019bc <System_Alarm_Setup_Mode_Handle+0x4ec>
 80014e2:	a201      	add	r2, pc, #4	@ (adr r2, 80014e8 <System_Alarm_Setup_Mode_Handle+0x18>)
 80014e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014e8:	080014fd 	.word	0x080014fd
 80014ec:	080015a3 	.word	0x080015a3
 80014f0:	080016d5 	.word	0x080016d5
 80014f4:	08001873 	.word	0x08001873
 80014f8:	08001935 	.word	0x08001935
  {
    // Button 0: If pressed, cycle through the system modes; if held, set the mode to default
    case 0:
      // If pressed, cycle through the time system modes, but the temporary setting data is still retained (avoid accidental press)
      if (button->press_flag)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	7b5b      	ldrb	r3, [r3, #13]
 8001500:	b2db      	uxtb	r3, r3
 8001502:	2b00      	cmp	r3, #0
 8001504:	d00c      	beq.n	8001520 <System_Alarm_Setup_Mode_Handle+0x50>
      {
        system_state.mode = (system_state.mode < (SYSTEM_MODE_NUM - 1)) ? (system_state.mode + 1) : 0;
 8001506:	4b9e      	ldr	r3, [pc, #632]	@ (8001780 <System_Alarm_Setup_Mode_Handle+0x2b0>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	2b04      	cmp	r3, #4
 800150c:	d804      	bhi.n	8001518 <System_Alarm_Setup_Mode_Handle+0x48>
 800150e:	4b9c      	ldr	r3, [pc, #624]	@ (8001780 <System_Alarm_Setup_Mode_Handle+0x2b0>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	3301      	adds	r3, #1
 8001514:	b2db      	uxtb	r3, r3
 8001516:	e000      	b.n	800151a <System_Alarm_Setup_Mode_Handle+0x4a>
 8001518:	2300      	movs	r3, #0
 800151a:	4a99      	ldr	r2, [pc, #612]	@ (8001780 <System_Alarm_Setup_Mode_Handle+0x2b0>)
 800151c:	7013      	strb	r3, [r2, #0]
          NOT_USED_MODE,              // Select: DAY_OF_WEEK_MODE, DATE_OF_MONTH_MODE, NOT_USED_MODE
          time_get_data.dayofweek,    // Day of the week: 1-7 (1 = Sunday, 2 = Monday, ..., 7 = Saturday), or Date of the month: 1-31
          true                        // true = ON, false = OFF
        };
      }
      break;
 800151e:	e24f      	b.n	80019c0 <System_Alarm_Setup_Mode_Handle+0x4f0>
      else if (button->hold_flag && !button->latch)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	7b9b      	ldrb	r3, [r3, #14]
 8001524:	b2db      	uxtb	r3, r3
 8001526:	2b00      	cmp	r3, #0
 8001528:	f000 824a 	beq.w	80019c0 <System_Alarm_Setup_Mode_Handle+0x4f0>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	7bdb      	ldrb	r3, [r3, #15]
 8001530:	b2db      	uxtb	r3, r3
 8001532:	f083 0301 	eor.w	r3, r3, #1
 8001536:	b2db      	uxtb	r3, r3
 8001538:	2b00      	cmp	r3, #0
 800153a:	f000 8241 	beq.w	80019c0 <System_Alarm_Setup_Mode_Handle+0x4f0>
        system_state.mode = DEFAULT_MODE; 
 800153e:	4b90      	ldr	r3, [pc, #576]	@ (8001780 <System_Alarm_Setup_Mode_Handle+0x2b0>)
 8001540:	2200      	movs	r2, #0
 8001542:	701a      	strb	r2, [r3, #0]
        button->latch = true;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2201      	movs	r2, #1
 8001548:	73da      	strb	r2, [r3, #15]
          time_get_data.minute,       // Minutes: 0-59
 800154a:	4b8e      	ldr	r3, [pc, #568]	@ (8001784 <System_Alarm_Setup_Mode_Handle+0x2b4>)
 800154c:	785b      	ldrb	r3, [r3, #1]
 800154e:	fa5f fc83 	uxtb.w	ip, r3
          time_get_data.hour,         // Hours: 0-23
 8001552:	4b8c      	ldr	r3, [pc, #560]	@ (8001784 <System_Alarm_Setup_Mode_Handle+0x2b4>)
 8001554:	789b      	ldrb	r3, [r3, #2]
 8001556:	b2de      	uxtb	r6, r3
          time_get_data.dayofweek,    // Day of the week: 1-7 (1 = Sunday, 2 = Monday, ..., 7 = Saturday)
 8001558:	4b8a      	ldr	r3, [pc, #552]	@ (8001784 <System_Alarm_Setup_Mode_Handle+0x2b4>)
 800155a:	78db      	ldrb	r3, [r3, #3]
 800155c:	b2dd      	uxtb	r5, r3
          time_get_data.dateofmonth,  // Date of the month: 1-31
 800155e:	4b89      	ldr	r3, [pc, #548]	@ (8001784 <System_Alarm_Setup_Mode_Handle+0x2b4>)
 8001560:	791b      	ldrb	r3, [r3, #4]
 8001562:	b2dc      	uxtb	r4, r3
          time_get_data.month,        // Month: 1-12
 8001564:	4b87      	ldr	r3, [pc, #540]	@ (8001784 <System_Alarm_Setup_Mode_Handle+0x2b4>)
 8001566:	795b      	ldrb	r3, [r3, #5]
 8001568:	b2d8      	uxtb	r0, r3
          time_get_data.year,         // Year: 0-99 (0 = 2000, 1 = 2001, ..., 99 = 2099)
 800156a:	4b86      	ldr	r3, [pc, #536]	@ (8001784 <System_Alarm_Setup_Mode_Handle+0x2b4>)
 800156c:	799b      	ldrb	r3, [r3, #6]
 800156e:	b2d9      	uxtb	r1, r3
          time_get_data.dayofweek,    // Day of the week: 1-7 (1 = Sunday, 2 = Monday, ..., 7 = Saturday), or Date of the month: 1-31
 8001570:	4b84      	ldr	r3, [pc, #528]	@ (8001784 <System_Alarm_Setup_Mode_Handle+0x2b4>)
 8001572:	78db      	ldrb	r3, [r3, #3]
 8001574:	b2da      	uxtb	r2, r3
        system_param_data =
 8001576:	4b84      	ldr	r3, [pc, #528]	@ (8001788 <System_Alarm_Setup_Mode_Handle+0x2b8>)
 8001578:	f883 c000 	strb.w	ip, [r3]
 800157c:	4b82      	ldr	r3, [pc, #520]	@ (8001788 <System_Alarm_Setup_Mode_Handle+0x2b8>)
 800157e:	705e      	strb	r6, [r3, #1]
 8001580:	4b81      	ldr	r3, [pc, #516]	@ (8001788 <System_Alarm_Setup_Mode_Handle+0x2b8>)
 8001582:	709d      	strb	r5, [r3, #2]
 8001584:	4b80      	ldr	r3, [pc, #512]	@ (8001788 <System_Alarm_Setup_Mode_Handle+0x2b8>)
 8001586:	70dc      	strb	r4, [r3, #3]
 8001588:	4b7f      	ldr	r3, [pc, #508]	@ (8001788 <System_Alarm_Setup_Mode_Handle+0x2b8>)
 800158a:	7118      	strb	r0, [r3, #4]
 800158c:	4b7e      	ldr	r3, [pc, #504]	@ (8001788 <System_Alarm_Setup_Mode_Handle+0x2b8>)
 800158e:	7159      	strb	r1, [r3, #5]
 8001590:	4b7d      	ldr	r3, [pc, #500]	@ (8001788 <System_Alarm_Setup_Mode_Handle+0x2b8>)
 8001592:	2102      	movs	r1, #2
 8001594:	7199      	strb	r1, [r3, #6]
 8001596:	4b7c      	ldr	r3, [pc, #496]	@ (8001788 <System_Alarm_Setup_Mode_Handle+0x2b8>)
 8001598:	71da      	strb	r2, [r3, #7]
 800159a:	4b7b      	ldr	r3, [pc, #492]	@ (8001788 <System_Alarm_Setup_Mode_Handle+0x2b8>)
 800159c:	2201      	movs	r2, #1
 800159e:	721a      	strb	r2, [r3, #8]
      break;
 80015a0:	e20e      	b.n	80019c0 <System_Alarm_Setup_Mode_Handle+0x4f0>

    // Button 1: If pressed, increment the selected parameter; if held, increment continuously
    case 1: 
      // Pointer to the selected parameter, its maximum value, and minimum value
      uint8_t *paramPtr1 = NULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      uint8_t maxValue1 = 0;    
 80015a6:	2300      	movs	r3, #0
 80015a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
      uint8_t minValue1 = 0;  
 80015ac:	2300      	movs	r3, #0
 80015ae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

      // Determine the parameter to increment based on the current selection
      switch (system_state.param_select)
 80015b2:	4b73      	ldr	r3, [pc, #460]	@ (8001780 <System_Alarm_Setup_Mode_Handle+0x2b0>)
 80015b4:	789b      	ldrb	r3, [r3, #2]
 80015b6:	2b08      	cmp	r3, #8
 80015b8:	d848      	bhi.n	800164c <System_Alarm_Setup_Mode_Handle+0x17c>
 80015ba:	a201      	add	r2, pc, #4	@ (adr r2, 80015c0 <System_Alarm_Setup_Mode_Handle+0xf0>)
 80015bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015c0:	080015e5 	.word	0x080015e5
 80015c4:	080015f7 	.word	0x080015f7
 80015c8:	0800164d 	.word	0x0800164d
 80015cc:	0800164d 	.word	0x0800164d
 80015d0:	0800164d 	.word	0x0800164d
 80015d4:	0800164d 	.word	0x0800164d
 80015d8:	08001609 	.word	0x08001609
 80015dc:	0800161b 	.word	0x0800161b
 80015e0:	0800162d 	.word	0x0800162d
      {
        case SET_MINUTE:  paramPtr1 = &system_param_data.minute;  maxValue1 = 59; minValue1 = 0; break;
 80015e4:	4b68      	ldr	r3, [pc, #416]	@ (8001788 <System_Alarm_Setup_Mode_Handle+0x2b8>)
 80015e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80015e8:	233b      	movs	r3, #59	@ 0x3b
 80015ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80015ee:	2300      	movs	r3, #0
 80015f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80015f4:	e02b      	b.n	800164e <System_Alarm_Setup_Mode_Handle+0x17e>
        case SET_HOUR:    paramPtr1 = &system_param_data.hour;    maxValue1 = 23; minValue1 = 0; break;
 80015f6:	4b65      	ldr	r3, [pc, #404]	@ (800178c <System_Alarm_Setup_Mode_Handle+0x2bc>)
 80015f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80015fa:	2317      	movs	r3, #23
 80015fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001600:	2300      	movs	r3, #0
 8001602:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8001606:	e022      	b.n	800164e <System_Alarm_Setup_Mode_Handle+0x17e>
        case SET_DY_DT:   paramPtr1 = (uint8_t *)&system_param_data.dy_dt; maxValue1 = 2; minValue1 = 0; break;
 8001608:	4b61      	ldr	r3, [pc, #388]	@ (8001790 <System_Alarm_Setup_Mode_Handle+0x2c0>)
 800160a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800160c:	2302      	movs	r3, #2
 800160e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001612:	2300      	movs	r3, #0
 8001614:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8001618:	e019      	b.n	800164e <System_Alarm_Setup_Mode_Handle+0x17e>
        case SET_DOW_DOM: paramPtr1 = &system_param_data.dow_dom; maxValue1 = 31; minValue1 = 1; break;
 800161a:	4b5e      	ldr	r3, [pc, #376]	@ (8001794 <System_Alarm_Setup_Mode_Handle+0x2c4>)
 800161c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800161e:	231f      	movs	r3, #31
 8001620:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001624:	2301      	movs	r3, #1
 8001626:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800162a:	e010      	b.n	800164e <System_Alarm_Setup_Mode_Handle+0x17e>
        case SET_ON_OFF:  system_param_data.on_off = !system_param_data.on_off;                  break;
 800162c:	4b56      	ldr	r3, [pc, #344]	@ (8001788 <System_Alarm_Setup_Mode_Handle+0x2b8>)
 800162e:	7a1b      	ldrb	r3, [r3, #8]
 8001630:	2b00      	cmp	r3, #0
 8001632:	bf14      	ite	ne
 8001634:	2301      	movne	r3, #1
 8001636:	2300      	moveq	r3, #0
 8001638:	b2db      	uxtb	r3, r3
 800163a:	f083 0301 	eor.w	r3, r3, #1
 800163e:	b2db      	uxtb	r3, r3
 8001640:	f003 0301 	and.w	r3, r3, #1
 8001644:	b2da      	uxtb	r2, r3
 8001646:	4b50      	ldr	r3, [pc, #320]	@ (8001788 <System_Alarm_Setup_Mode_Handle+0x2b8>)
 8001648:	721a      	strb	r2, [r3, #8]
 800164a:	e000      	b.n	800164e <System_Alarm_Setup_Mode_Handle+0x17e>
        default: break;
 800164c:	bf00      	nop
      }

      if (system_state.param_select == SET_ON_OFF)
 800164e:	4b4c      	ldr	r3, [pc, #304]	@ (8001780 <System_Alarm_Setup_Mode_Handle+0x2b0>)
 8001650:	789b      	ldrb	r3, [r3, #2]
 8001652:	2b08      	cmp	r3, #8
 8001654:	f000 81b6 	beq.w	80019c4 <System_Alarm_Setup_Mode_Handle+0x4f4>
      {
        break;
      }

      // Initialize the start tick for button 1 hold detection
      uint32_t startTick1 = 0;
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]
      
      // Check if the button is pressed or held
      if (button->press_flag) 
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	7b5b      	ldrb	r3, [r3, #13]
 8001660:	b2db      	uxtb	r3, r3
 8001662:	2b00      	cmp	r3, #0
 8001664:	d013      	beq.n	800168e <System_Alarm_Setup_Mode_Handle+0x1be>
      {
        // Increment the selected parameter value once for a button press
        if (paramPtr1) 
 8001666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001668:	2b00      	cmp	r3, #0
 800166a:	f000 81ad 	beq.w	80019c8 <System_Alarm_Setup_Mode_Handle+0x4f8>
        {
          // Increment the parameter value, wrapping around if necessary
          *paramPtr1 = (*paramPtr1 < maxValue1) ? (*paramPtr1 + 1) : minValue1;
 800166e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8001676:	429a      	cmp	r2, r3
 8001678:	d904      	bls.n	8001684 <System_Alarm_Setup_Mode_Handle+0x1b4>
 800167a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	3301      	adds	r3, #1
 8001680:	b2db      	uxtb	r3, r3
 8001682:	e001      	b.n	8001688 <System_Alarm_Setup_Mode_Handle+0x1b8>
 8001684:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001688:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800168a:	7013      	strb	r3, [r2, #0]

        // Update the start tick for the next hold cycle
        startTick1 = HAL_GetTick();
      } 
      
      break;
 800168c:	e19c      	b.n	80019c8 <System_Alarm_Setup_Mode_Handle+0x4f8>
      else if (button->hold_flag) 
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	7b9b      	ldrb	r3, [r3, #14]
 8001692:	b2db      	uxtb	r3, r3
 8001694:	2b00      	cmp	r3, #0
 8001696:	f000 8197 	beq.w	80019c8 <System_Alarm_Setup_Mode_Handle+0x4f8>
        if (HAL_GetTick() - startTick1 >= BUTTON_HOLD_CYCLE) 
 800169a:	f000 ff21 	bl	80024e0 <HAL_GetTick>
 800169e:	4602      	mov	r2, r0
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	2bf9      	cmp	r3, #249	@ 0xf9
 80016a6:	d911      	bls.n	80016cc <System_Alarm_Setup_Mode_Handle+0x1fc>
          if (paramPtr1) 
 80016a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d00e      	beq.n	80016cc <System_Alarm_Setup_Mode_Handle+0x1fc>
            *paramPtr1 = (*paramPtr1 < maxValue1) ? (*paramPtr1 + 1) : minValue1;
 80016ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d904      	bls.n	80016c4 <System_Alarm_Setup_Mode_Handle+0x1f4>
 80016ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	3301      	adds	r3, #1
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	e001      	b.n	80016c8 <System_Alarm_Setup_Mode_Handle+0x1f8>
 80016c4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80016c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016ca:	7013      	strb	r3, [r2, #0]
        startTick1 = HAL_GetTick();
 80016cc:	f000 ff08 	bl	80024e0 <HAL_GetTick>
 80016d0:	6178      	str	r0, [r7, #20]
      break;
 80016d2:	e179      	b.n	80019c8 <System_Alarm_Setup_Mode_Handle+0x4f8>

      case 2: // BTN2: Decrement current value or scroll slots
      {
        // Pointer to the selected parameter, its maximum value, and minimum value
        uint8_t *paramPtr2 = NULL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	627b      	str	r3, [r7, #36]	@ 0x24
        uint8_t maxValue2 = 0;    
 80016d8:	2300      	movs	r3, #0
 80016da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        uint8_t minValue2 = 0;  
 80016de:	2300      	movs	r3, #0
 80016e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

        // Determine the parameter to decrement based on the current selection
        switch (system_state.param_select)
 80016e4:	4b26      	ldr	r3, [pc, #152]	@ (8001780 <System_Alarm_Setup_Mode_Handle+0x2b0>)
 80016e6:	789b      	ldrb	r3, [r3, #2]
 80016e8:	2b08      	cmp	r3, #8
 80016ea:	d855      	bhi.n	8001798 <System_Alarm_Setup_Mode_Handle+0x2c8>
 80016ec:	a201      	add	r2, pc, #4	@ (adr r2, 80016f4 <System_Alarm_Setup_Mode_Handle+0x224>)
 80016ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f2:	bf00      	nop
 80016f4:	08001719 	.word	0x08001719
 80016f8:	0800172b 	.word	0x0800172b
 80016fc:	08001799 	.word	0x08001799
 8001700:	08001799 	.word	0x08001799
 8001704:	08001799 	.word	0x08001799
 8001708:	08001799 	.word	0x08001799
 800170c:	0800173d 	.word	0x0800173d
 8001710:	0800174f 	.word	0x0800174f
 8001714:	08001761 	.word	0x08001761
        {
          case SET_MINUTE:  paramPtr2 = &system_param_data.minute;  maxValue2 = 59; minValue2 = 0; break;
 8001718:	4b1b      	ldr	r3, [pc, #108]	@ (8001788 <System_Alarm_Setup_Mode_Handle+0x2b8>)
 800171a:	627b      	str	r3, [r7, #36]	@ 0x24
 800171c:	233b      	movs	r3, #59	@ 0x3b
 800171e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001722:	2300      	movs	r3, #0
 8001724:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001728:	e037      	b.n	800179a <System_Alarm_Setup_Mode_Handle+0x2ca>
          case SET_HOUR:    paramPtr2 = &system_param_data.hour;    maxValue2 = 23; minValue2 = 0; break;
 800172a:	4b18      	ldr	r3, [pc, #96]	@ (800178c <System_Alarm_Setup_Mode_Handle+0x2bc>)
 800172c:	627b      	str	r3, [r7, #36]	@ 0x24
 800172e:	2317      	movs	r3, #23
 8001730:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001734:	2300      	movs	r3, #0
 8001736:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800173a:	e02e      	b.n	800179a <System_Alarm_Setup_Mode_Handle+0x2ca>
          case SET_DY_DT:   paramPtr2 = (uint8_t *)&system_param_data.dy_dt; maxValue2 = 2; minValue2 = 0; break;
 800173c:	4b14      	ldr	r3, [pc, #80]	@ (8001790 <System_Alarm_Setup_Mode_Handle+0x2c0>)
 800173e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001740:	2302      	movs	r3, #2
 8001742:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001746:	2300      	movs	r3, #0
 8001748:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800174c:	e025      	b.n	800179a <System_Alarm_Setup_Mode_Handle+0x2ca>
          case SET_DOW_DOM: paramPtr2 = &system_param_data.dow_dom; maxValue2 = 31; minValue2 = 1; break;
 800174e:	4b11      	ldr	r3, [pc, #68]	@ (8001794 <System_Alarm_Setup_Mode_Handle+0x2c4>)
 8001750:	627b      	str	r3, [r7, #36]	@ 0x24
 8001752:	231f      	movs	r3, #31
 8001754:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001758:	2301      	movs	r3, #1
 800175a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800175e:	e01c      	b.n	800179a <System_Alarm_Setup_Mode_Handle+0x2ca>
          case SET_ON_OFF:  system_param_data.on_off = !system_param_data.on_off;                  break;
 8001760:	4b09      	ldr	r3, [pc, #36]	@ (8001788 <System_Alarm_Setup_Mode_Handle+0x2b8>)
 8001762:	7a1b      	ldrb	r3, [r3, #8]
 8001764:	2b00      	cmp	r3, #0
 8001766:	bf14      	ite	ne
 8001768:	2301      	movne	r3, #1
 800176a:	2300      	moveq	r3, #0
 800176c:	b2db      	uxtb	r3, r3
 800176e:	f083 0301 	eor.w	r3, r3, #1
 8001772:	b2db      	uxtb	r3, r3
 8001774:	f003 0301 	and.w	r3, r3, #1
 8001778:	b2da      	uxtb	r2, r3
 800177a:	4b03      	ldr	r3, [pc, #12]	@ (8001788 <System_Alarm_Setup_Mode_Handle+0x2b8>)
 800177c:	721a      	strb	r2, [r3, #8]
 800177e:	e00c      	b.n	800179a <System_Alarm_Setup_Mode_Handle+0x2ca>
 8001780:	20000348 	.word	0x20000348
 8001784:	20000358 	.word	0x20000358
 8001788:	2000034c 	.word	0x2000034c
 800178c:	2000034d 	.word	0x2000034d
 8001790:	20000352 	.word	0x20000352
 8001794:	20000353 	.word	0x20000353
          default: break;
 8001798:	bf00      	nop
        }

        if (system_state.param_select == SET_ON_OFF)
 800179a:	4b92      	ldr	r3, [pc, #584]	@ (80019e4 <System_Alarm_Setup_Mode_Handle+0x514>)
 800179c:	789b      	ldrb	r3, [r3, #2]
 800179e:	2b08      	cmp	r3, #8
 80017a0:	f000 8114 	beq.w	80019cc <System_Alarm_Setup_Mode_Handle+0x4fc>
        {
          break;
        }

        // Initialize the start tick for button 2 hold detection
        uint32_t startTick2 = 0;
 80017a4:	2300      	movs	r3, #0
 80017a6:	61bb      	str	r3, [r7, #24]

        // Check if the button is pressed or held
        if (button->press_flag) 
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	7b5b      	ldrb	r3, [r3, #13]
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d027      	beq.n	8001802 <System_Alarm_Setup_Mode_Handle+0x332>
        {
          // Check if the selected parameter is ON/OFF
          if (system_state.param_select == SET_ON_OFF) 
 80017b2:	4b8c      	ldr	r3, [pc, #560]	@ (80019e4 <System_Alarm_Setup_Mode_Handle+0x514>)
 80017b4:	789b      	ldrb	r3, [r3, #2]
 80017b6:	2b08      	cmp	r3, #8
 80017b8:	d10f      	bne.n	80017da <System_Alarm_Setup_Mode_Handle+0x30a>
          {
            // Toggle the on/off state of the alarm
            system_param_data.on_off = !system_param_data.on_off;
 80017ba:	4b8b      	ldr	r3, [pc, #556]	@ (80019e8 <System_Alarm_Setup_Mode_Handle+0x518>)
 80017bc:	7a1b      	ldrb	r3, [r3, #8]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	bf14      	ite	ne
 80017c2:	2301      	movne	r3, #1
 80017c4:	2300      	moveq	r3, #0
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	f083 0301 	eor.w	r3, r3, #1
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	b2da      	uxtb	r2, r3
 80017d4:	4b84      	ldr	r3, [pc, #528]	@ (80019e8 <System_Alarm_Setup_Mode_Handle+0x518>)
 80017d6:	721a      	strb	r2, [r3, #8]
            // Update the start tick for the next hold cycle
            startTick2 = HAL_GetTick();
          }
        } 

        break;
 80017d8:	e0fa      	b.n	80019d0 <System_Alarm_Setup_Mode_Handle+0x500>
            if (paramPtr2) 
 80017da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017dc:	2b00      	cmp	r3, #0
 80017de:	f000 80f7 	beq.w	80019d0 <System_Alarm_Setup_Mode_Handle+0x500>
              *paramPtr2 = (*paramPtr2 > minValue2) ? (*paramPtr2 - 1) : maxValue2;
 80017e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d204      	bcs.n	80017f8 <System_Alarm_Setup_Mode_Handle+0x328>
 80017ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	3b01      	subs	r3, #1
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	e001      	b.n	80017fc <System_Alarm_Setup_Mode_Handle+0x32c>
 80017f8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80017fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017fe:	7013      	strb	r3, [r2, #0]
        break;
 8001800:	e0e6      	b.n	80019d0 <System_Alarm_Setup_Mode_Handle+0x500>
        else if (button->hold_flag) 
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	7b9b      	ldrb	r3, [r3, #14]
 8001806:	b2db      	uxtb	r3, r3
 8001808:	2b00      	cmp	r3, #0
 800180a:	f000 80e1 	beq.w	80019d0 <System_Alarm_Setup_Mode_Handle+0x500>
          if (HAL_GetTick() - startTick2 >= BUTTON_HOLD_CYCLE) 
 800180e:	f000 fe67 	bl	80024e0 <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2bf9      	cmp	r3, #249	@ 0xf9
 800181a:	f240 80d9 	bls.w	80019d0 <System_Alarm_Setup_Mode_Handle+0x500>
            if (system_state.param_select == SET_ON_OFF) 
 800181e:	4b71      	ldr	r3, [pc, #452]	@ (80019e4 <System_Alarm_Setup_Mode_Handle+0x514>)
 8001820:	789b      	ldrb	r3, [r3, #2]
 8001822:	2b08      	cmp	r3, #8
 8001824:	d10f      	bne.n	8001846 <System_Alarm_Setup_Mode_Handle+0x376>
              system_param_data.on_off = !system_param_data.on_off;
 8001826:	4b70      	ldr	r3, [pc, #448]	@ (80019e8 <System_Alarm_Setup_Mode_Handle+0x518>)
 8001828:	7a1b      	ldrb	r3, [r3, #8]
 800182a:	2b00      	cmp	r3, #0
 800182c:	bf14      	ite	ne
 800182e:	2301      	movne	r3, #1
 8001830:	2300      	moveq	r3, #0
 8001832:	b2db      	uxtb	r3, r3
 8001834:	f083 0301 	eor.w	r3, r3, #1
 8001838:	b2db      	uxtb	r3, r3
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	b2da      	uxtb	r2, r3
 8001840:	4b69      	ldr	r3, [pc, #420]	@ (80019e8 <System_Alarm_Setup_Mode_Handle+0x518>)
 8001842:	721a      	strb	r2, [r3, #8]
 8001844:	e011      	b.n	800186a <System_Alarm_Setup_Mode_Handle+0x39a>
              if (paramPtr2) 
 8001846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001848:	2b00      	cmp	r3, #0
 800184a:	d00e      	beq.n	800186a <System_Alarm_Setup_Mode_Handle+0x39a>
                *paramPtr2 = (*paramPtr2 > minValue2) ? (*paramPtr2 - 1) : maxValue2;
 800184c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8001854:	429a      	cmp	r2, r3
 8001856:	d204      	bcs.n	8001862 <System_Alarm_Setup_Mode_Handle+0x392>
 8001858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	3b01      	subs	r3, #1
 800185e:	b2db      	uxtb	r3, r3
 8001860:	e001      	b.n	8001866 <System_Alarm_Setup_Mode_Handle+0x396>
 8001862:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001866:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001868:	7013      	strb	r3, [r2, #0]
            startTick2 = HAL_GetTick();
 800186a:	f000 fe39 	bl	80024e0 <HAL_GetTick>
 800186e:	61b8      	str	r0, [r7, #24]
        break;
 8001870:	e0ae      	b.n	80019d0 <System_Alarm_Setup_Mode_Handle+0x500>
      }
    
    // Button 3: If pressed, move to the next field; if held, save the alarm and return to default mode
    case 3:
      // If the button is pressed, move to the next parameter field, wrapping around if necessary  
      if (button->press_flag)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	7b5b      	ldrb	r3, [r3, #13]
 8001876:	b2db      	uxtb	r3, r3
 8001878:	2b00      	cmp	r3, #0
 800187a:	d016      	beq.n	80018aa <System_Alarm_Setup_Mode_Handle+0x3da>
      {
        if      (system_state.param_select == SET_HOUR)
 800187c:	4b59      	ldr	r3, [pc, #356]	@ (80019e4 <System_Alarm_Setup_Mode_Handle+0x514>)
 800187e:	789b      	ldrb	r3, [r3, #2]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d103      	bne.n	800188c <System_Alarm_Setup_Mode_Handle+0x3bc>
        {
          system_state.param_select = SET_DY_DT;
 8001884:	4b57      	ldr	r3, [pc, #348]	@ (80019e4 <System_Alarm_Setup_Mode_Handle+0x514>)
 8001886:	2206      	movs	r2, #6
 8001888:	709a      	strb	r2, [r3, #2]

        // Reset the button latch to avoid function replication
        button->latch = true;

      }
      break;
 800188a:	e0a3      	b.n	80019d4 <System_Alarm_Setup_Mode_Handle+0x504>
        else if (system_state.param_select == SET_ON_OFF)
 800188c:	4b55      	ldr	r3, [pc, #340]	@ (80019e4 <System_Alarm_Setup_Mode_Handle+0x514>)
 800188e:	789b      	ldrb	r3, [r3, #2]
 8001890:	2b08      	cmp	r3, #8
 8001892:	d103      	bne.n	800189c <System_Alarm_Setup_Mode_Handle+0x3cc>
          system_state.param_select = SET_MINUTE;
 8001894:	4b53      	ldr	r3, [pc, #332]	@ (80019e4 <System_Alarm_Setup_Mode_Handle+0x514>)
 8001896:	2200      	movs	r2, #0
 8001898:	709a      	strb	r2, [r3, #2]
      break;
 800189a:	e09b      	b.n	80019d4 <System_Alarm_Setup_Mode_Handle+0x504>
          system_state.param_select += 1;
 800189c:	4b51      	ldr	r3, [pc, #324]	@ (80019e4 <System_Alarm_Setup_Mode_Handle+0x514>)
 800189e:	789b      	ldrb	r3, [r3, #2]
 80018a0:	3301      	adds	r3, #1
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	4b4f      	ldr	r3, [pc, #316]	@ (80019e4 <System_Alarm_Setup_Mode_Handle+0x514>)
 80018a6:	709a      	strb	r2, [r3, #2]
      break;
 80018a8:	e094      	b.n	80019d4 <System_Alarm_Setup_Mode_Handle+0x504>
      else if (button->hold_flag && !button->latch) 
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	7b9b      	ldrb	r3, [r3, #14]
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	f000 808f 	beq.w	80019d4 <System_Alarm_Setup_Mode_Handle+0x504>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	7bdb      	ldrb	r3, [r3, #15]
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	f083 0301 	eor.w	r3, r3, #1
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f000 8086 	beq.w	80019d4 <System_Alarm_Setup_Mode_Handle+0x504>
        Alarm_Set
 80018c8:	4b47      	ldr	r3, [pc, #284]	@ (80019e8 <System_Alarm_Setup_Mode_Handle+0x518>)
 80018ca:	7818      	ldrb	r0, [r3, #0]
 80018cc:	4b46      	ldr	r3, [pc, #280]	@ (80019e8 <System_Alarm_Setup_Mode_Handle+0x518>)
 80018ce:	785c      	ldrb	r4, [r3, #1]
 80018d0:	4b45      	ldr	r3, [pc, #276]	@ (80019e8 <System_Alarm_Setup_Mode_Handle+0x518>)
 80018d2:	79dd      	ldrb	r5, [r3, #7]
 80018d4:	4b44      	ldr	r3, [pc, #272]	@ (80019e8 <System_Alarm_Setup_Mode_Handle+0x518>)
 80018d6:	799b      	ldrb	r3, [r3, #6]
 80018d8:	4a43      	ldr	r2, [pc, #268]	@ (80019e8 <System_Alarm_Setup_Mode_Handle+0x518>)
 80018da:	7a12      	ldrb	r2, [r2, #8]
 80018dc:	4943      	ldr	r1, [pc, #268]	@ (80019ec <System_Alarm_Setup_Mode_Handle+0x51c>)
 80018de:	7809      	ldrb	r1, [r1, #0]
 80018e0:	9102      	str	r1, [sp, #8]
 80018e2:	9201      	str	r2, [sp, #4]
 80018e4:	9300      	str	r3, [sp, #0]
 80018e6:	462b      	mov	r3, r5
 80018e8:	4622      	mov	r2, r4
 80018ea:	4601      	mov	r1, r0
 80018ec:	2000      	movs	r0, #0
 80018ee:	f7ff f8c9 	bl	8000a84 <Alarm_Set>
        Alarm_Get(alarm_slot_ptr, &alarm_get_data[alarm_slot_ptr]);
 80018f2:	4b3e      	ldr	r3, [pc, #248]	@ (80019ec <System_Alarm_Setup_Mode_Handle+0x51c>)
 80018f4:	781a      	ldrb	r2, [r3, #0]
 80018f6:	4b3d      	ldr	r3, [pc, #244]	@ (80019ec <System_Alarm_Setup_Mode_Handle+0x51c>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	4619      	mov	r1, r3
 80018fc:	460b      	mov	r3, r1
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	440b      	add	r3, r1
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	493a      	ldr	r1, [pc, #232]	@ (80019f0 <System_Alarm_Setup_Mode_Handle+0x520>)
 8001906:	440b      	add	r3, r1
 8001908:	4619      	mov	r1, r3
 800190a:	4610      	mov	r0, r2
 800190c:	f7ff f90a 	bl	8000b24 <Alarm_Get>
        alarm_slot_ptr = (alarm_slot_ptr < ALARM_SLOT_NUM) ? (alarm_slot_ptr + 1) : 0;
 8001910:	4b36      	ldr	r3, [pc, #216]	@ (80019ec <System_Alarm_Setup_Mode_Handle+0x51c>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b09      	cmp	r3, #9
 8001916:	d804      	bhi.n	8001922 <System_Alarm_Setup_Mode_Handle+0x452>
 8001918:	4b34      	ldr	r3, [pc, #208]	@ (80019ec <System_Alarm_Setup_Mode_Handle+0x51c>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	3301      	adds	r3, #1
 800191e:	b2db      	uxtb	r3, r3
 8001920:	e000      	b.n	8001924 <System_Alarm_Setup_Mode_Handle+0x454>
 8001922:	2300      	movs	r3, #0
 8001924:	4a31      	ldr	r2, [pc, #196]	@ (80019ec <System_Alarm_Setup_Mode_Handle+0x51c>)
 8001926:	7013      	strb	r3, [r2, #0]
        Alarm_Slot_Pointer_Set();
 8001928:	f7ff f974 	bl	8000c14 <Alarm_Slot_Pointer_Set>
        button->latch = true;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2201      	movs	r2, #1
 8001930:	73da      	strb	r2, [r3, #15]
      break;
 8001932:	e04f      	b.n	80019d4 <System_Alarm_Setup_Mode_Handle+0x504>

    case 4: // BTN4: Go back to previous field
      if      (button->press_flag) 
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	7b5b      	ldrb	r3, [r3, #13]
 8001938:	b2db      	uxtb	r3, r3
 800193a:	2b00      	cmp	r3, #0
 800193c:	d016      	beq.n	800196c <System_Alarm_Setup_Mode_Handle+0x49c>
      {
        if      (system_state.param_select == SET_DY_DT)
 800193e:	4b29      	ldr	r3, [pc, #164]	@ (80019e4 <System_Alarm_Setup_Mode_Handle+0x514>)
 8001940:	789b      	ldrb	r3, [r3, #2]
 8001942:	2b06      	cmp	r3, #6
 8001944:	d103      	bne.n	800194e <System_Alarm_Setup_Mode_Handle+0x47e>
        {
          system_state.param_select = SET_HOUR;
 8001946:	4b27      	ldr	r3, [pc, #156]	@ (80019e4 <System_Alarm_Setup_Mode_Handle+0x514>)
 8001948:	2201      	movs	r2, #1
 800194a:	709a      	strb	r2, [r3, #2]

        // Reset the alarm slot pointer
        alarm_slot_ptr = 0;
        Alarm_Slot_Pointer_Set();
      }
      break;
 800194c:	e044      	b.n	80019d8 <System_Alarm_Setup_Mode_Handle+0x508>
        else if (system_state.param_select == SET_MINUTE)
 800194e:	4b25      	ldr	r3, [pc, #148]	@ (80019e4 <System_Alarm_Setup_Mode_Handle+0x514>)
 8001950:	789b      	ldrb	r3, [r3, #2]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d103      	bne.n	800195e <System_Alarm_Setup_Mode_Handle+0x48e>
          system_state.param_select = SET_ON_OFF;
 8001956:	4b23      	ldr	r3, [pc, #140]	@ (80019e4 <System_Alarm_Setup_Mode_Handle+0x514>)
 8001958:	2208      	movs	r2, #8
 800195a:	709a      	strb	r2, [r3, #2]
      break;
 800195c:	e03c      	b.n	80019d8 <System_Alarm_Setup_Mode_Handle+0x508>
          system_state.param_select -= 1;
 800195e:	4b21      	ldr	r3, [pc, #132]	@ (80019e4 <System_Alarm_Setup_Mode_Handle+0x514>)
 8001960:	789b      	ldrb	r3, [r3, #2]
 8001962:	3b01      	subs	r3, #1
 8001964:	b2da      	uxtb	r2, r3
 8001966:	4b1f      	ldr	r3, [pc, #124]	@ (80019e4 <System_Alarm_Setup_Mode_Handle+0x514>)
 8001968:	709a      	strb	r2, [r3, #2]
      break;
 800196a:	e035      	b.n	80019d8 <System_Alarm_Setup_Mode_Handle+0x508>
      else if (button->hold_flag)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	7b9b      	ldrb	r3, [r3, #14]
 8001970:	b2db      	uxtb	r3, r3
 8001972:	2b00      	cmp	r3, #0
 8001974:	d030      	beq.n	80019d8 <System_Alarm_Setup_Mode_Handle+0x508>
        for (int i = 0; i < alarm_slot_ptr; i++)
 8001976:	2300      	movs	r3, #0
 8001978:	61fb      	str	r3, [r7, #28]
 800197a:	e013      	b.n	80019a4 <System_Alarm_Setup_Mode_Handle+0x4d4>
          Alarm_Clear(i);
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	b2db      	uxtb	r3, r3
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff f925 	bl	8000bd0 <Alarm_Clear>
          Alarm_Get(i, &alarm_get_data[i]);
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	b2d8      	uxtb	r0, r3
 800198a:	69fa      	ldr	r2, [r7, #28]
 800198c:	4613      	mov	r3, r2
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	4413      	add	r3, r2
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	4a16      	ldr	r2, [pc, #88]	@ (80019f0 <System_Alarm_Setup_Mode_Handle+0x520>)
 8001996:	4413      	add	r3, r2
 8001998:	4619      	mov	r1, r3
 800199a:	f7ff f8c3 	bl	8000b24 <Alarm_Get>
        for (int i = 0; i < alarm_slot_ptr; i++)
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	3301      	adds	r3, #1
 80019a2:	61fb      	str	r3, [r7, #28]
 80019a4:	4b11      	ldr	r3, [pc, #68]	@ (80019ec <System_Alarm_Setup_Mode_Handle+0x51c>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	461a      	mov	r2, r3
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	4293      	cmp	r3, r2
 80019ae:	dbe5      	blt.n	800197c <System_Alarm_Setup_Mode_Handle+0x4ac>
        alarm_slot_ptr = 0;
 80019b0:	4b0e      	ldr	r3, [pc, #56]	@ (80019ec <System_Alarm_Setup_Mode_Handle+0x51c>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	701a      	strb	r2, [r3, #0]
        Alarm_Slot_Pointer_Set();
 80019b6:	f7ff f92d 	bl	8000c14 <Alarm_Slot_Pointer_Set>
      break;
 80019ba:	e00d      	b.n	80019d8 <System_Alarm_Setup_Mode_Handle+0x508>

    default:
      // Reserved for future use
      break;
 80019bc:	bf00      	nop
 80019be:	e00c      	b.n	80019da <System_Alarm_Setup_Mode_Handle+0x50a>
      break;
 80019c0:	bf00      	nop
 80019c2:	e00a      	b.n	80019da <System_Alarm_Setup_Mode_Handle+0x50a>
        break;
 80019c4:	bf00      	nop
 80019c6:	e008      	b.n	80019da <System_Alarm_Setup_Mode_Handle+0x50a>
      break;
 80019c8:	bf00      	nop
 80019ca:	e006      	b.n	80019da <System_Alarm_Setup_Mode_Handle+0x50a>
          break;
 80019cc:	bf00      	nop
 80019ce:	e004      	b.n	80019da <System_Alarm_Setup_Mode_Handle+0x50a>
        break;
 80019d0:	bf00      	nop
 80019d2:	e002      	b.n	80019da <System_Alarm_Setup_Mode_Handle+0x50a>
      break;
 80019d4:	bf00      	nop
 80019d6:	e000      	b.n	80019da <System_Alarm_Setup_Mode_Handle+0x50a>
      break;
 80019d8:	bf00      	nop
  }
}
 80019da:	bf00      	nop
 80019dc:	3734      	adds	r7, #52	@ 0x34
 80019de:	46bd      	mov	sp, r7
 80019e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019e2:	bf00      	nop
 80019e4:	20000348 	.word	0x20000348
 80019e8:	2000034c 	.word	0x2000034c
 80019ec:	2000039c 	.word	0x2000039c
 80019f0:	20000360 	.word	0x20000360

080019f4 <System_Alarm_View_Mode_Handle>:
 * @brief  Handles the alarm view mode based on button actions.
 * @param  button: Pointer to the BUTTON structure containing button state and index.
 * @retval None
 */
void System_Alarm_View_Mode_Handle (BUTTON_DATA *button)
{ 
 80019f4:	b5b0      	push	{r4, r5, r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af04      	add	r7, sp, #16
 80019fa:	6078      	str	r0, [r7, #4]
  // Initially reset system cursor
  system_state.cursor = 0;
 80019fc:	4ba4      	ldr	r3, [pc, #656]	@ (8001c90 <System_Alarm_View_Mode_Handle+0x29c>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	70da      	strb	r2, [r3, #3]
  
  // Handle button actions in alarm view mode
  switch (button->index) 
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	799b      	ldrb	r3, [r3, #6]
 8001a06:	2b04      	cmp	r3, #4
 8001a08:	f200 8136 	bhi.w	8001c78 <System_Alarm_View_Mode_Handle+0x284>
 8001a0c:	a201      	add	r2, pc, #4	@ (adr r2, 8001a14 <System_Alarm_View_Mode_Handle+0x20>)
 8001a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a12:	bf00      	nop
 8001a14:	08001a29 	.word	0x08001a29
 8001a18:	08001a79 	.word	0x08001a79
 8001a1c:	08001aa3 	.word	0x08001aa3
 8001a20:	08001acd 	.word	0x08001acd
 8001a24:	08001c69 	.word	0x08001c69
  {
    // Button 0: If pressed, cycle through the time setup fields; if held, set the mode to default
    case 0:
      // If pressed, cycle through the time setup fields
      if (button->press_flag)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	7b5b      	ldrb	r3, [r3, #13]
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d00c      	beq.n	8001a4c <System_Alarm_View_Mode_Handle+0x58>
      {
        system_state.mode = (system_state.mode < (SYSTEM_MODE_NUM - 1)) ? (system_state.mode + 1) : 0;
 8001a32:	4b97      	ldr	r3, [pc, #604]	@ (8001c90 <System_Alarm_View_Mode_Handle+0x29c>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	2b04      	cmp	r3, #4
 8001a38:	d804      	bhi.n	8001a44 <System_Alarm_View_Mode_Handle+0x50>
 8001a3a:	4b95      	ldr	r3, [pc, #596]	@ (8001c90 <System_Alarm_View_Mode_Handle+0x29c>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	e000      	b.n	8001a46 <System_Alarm_View_Mode_Handle+0x52>
 8001a44:	2300      	movs	r3, #0
 8001a46:	4a92      	ldr	r2, [pc, #584]	@ (8001c90 <System_Alarm_View_Mode_Handle+0x29c>)
 8001a48:	7013      	strb	r3, [r2, #0]
      else if (button->hold_flag && !button->latch)
      {
        system_state.mode = DEFAULT_MODE; 
        button->latch = true;
      }
      break;
 8001a4a:	e117      	b.n	8001c7c <System_Alarm_View_Mode_Handle+0x288>
      else if (button->hold_flag && !button->latch)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	7b9b      	ldrb	r3, [r3, #14]
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	f000 8112 	beq.w	8001c7c <System_Alarm_View_Mode_Handle+0x288>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	7bdb      	ldrb	r3, [r3, #15]
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	f083 0301 	eor.w	r3, r3, #1
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	f000 8109 	beq.w	8001c7c <System_Alarm_View_Mode_Handle+0x288>
        system_state.mode = DEFAULT_MODE; 
 8001a6a:	4b89      	ldr	r3, [pc, #548]	@ (8001c90 <System_Alarm_View_Mode_Handle+0x29c>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	701a      	strb	r2, [r3, #0]
        button->latch = true;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2201      	movs	r2, #1
 8001a74:	73da      	strb	r2, [r3, #15]
      break;
 8001a76:	e101      	b.n	8001c7c <System_Alarm_View_Mode_Handle+0x288>

    // Button 1: If pressed, increment the selection cursor
    case 1:
      if      (button->press_flag)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	7b5b      	ldrb	r3, [r3, #13]
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d00c      	beq.n	8001a9c <System_Alarm_View_Mode_Handle+0xa8>
      {
        system_state.cursor = (system_state.cursor < (SYSTEM_CURSOR_MAX - 1)) ? (system_state.cursor + 1) : 0;
 8001a82:	4b83      	ldr	r3, [pc, #524]	@ (8001c90 <System_Alarm_View_Mode_Handle+0x29c>)
 8001a84:	78db      	ldrb	r3, [r3, #3]
 8001a86:	2b07      	cmp	r3, #7
 8001a88:	d804      	bhi.n	8001a94 <System_Alarm_View_Mode_Handle+0xa0>
 8001a8a:	4b81      	ldr	r3, [pc, #516]	@ (8001c90 <System_Alarm_View_Mode_Handle+0x29c>)
 8001a8c:	78db      	ldrb	r3, [r3, #3]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	e000      	b.n	8001a96 <System_Alarm_View_Mode_Handle+0xa2>
 8001a94:	2300      	movs	r3, #0
 8001a96:	4a7e      	ldr	r2, [pc, #504]	@ (8001c90 <System_Alarm_View_Mode_Handle+0x29c>)
 8001a98:	70d3      	strb	r3, [r2, #3]
      }
      else if (button->hold_flag)
      {

      }
      break;
 8001a9a:	e0f4      	b.n	8001c86 <System_Alarm_View_Mode_Handle+0x292>
      else if (button->hold_flag)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	7b9b      	ldrb	r3, [r3, #14]
      break;
 8001aa0:	e0f1      	b.n	8001c86 <System_Alarm_View_Mode_Handle+0x292>

    // Button 2: If pressed, decrement the selection cursor
    case 2:
      if      (button->press_flag)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	7b5b      	ldrb	r3, [r3, #13]
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d00c      	beq.n	8001ac6 <System_Alarm_View_Mode_Handle+0xd2>
      {
        system_state.cursor = (system_state.cursor > 0) ? (system_state.cursor - 1) : SYSTEM_CURSOR_MAX;
 8001aac:	4b78      	ldr	r3, [pc, #480]	@ (8001c90 <System_Alarm_View_Mode_Handle+0x29c>)
 8001aae:	78db      	ldrb	r3, [r3, #3]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d004      	beq.n	8001abe <System_Alarm_View_Mode_Handle+0xca>
 8001ab4:	4b76      	ldr	r3, [pc, #472]	@ (8001c90 <System_Alarm_View_Mode_Handle+0x29c>)
 8001ab6:	78db      	ldrb	r3, [r3, #3]
 8001ab8:	3b01      	subs	r3, #1
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	e000      	b.n	8001ac0 <System_Alarm_View_Mode_Handle+0xcc>
 8001abe:	2309      	movs	r3, #9
 8001ac0:	4a73      	ldr	r2, [pc, #460]	@ (8001c90 <System_Alarm_View_Mode_Handle+0x29c>)
 8001ac2:	70d3      	strb	r3, [r2, #3]
      }
      else if (button->hold_flag)
      {

      }
      break;
 8001ac4:	e0df      	b.n	8001c86 <System_Alarm_View_Mode_Handle+0x292>
      else if (button->hold_flag)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	7b9b      	ldrb	r3, [r3, #14]
      break;
 8001aca:	e0dc      	b.n	8001c86 <System_Alarm_View_Mode_Handle+0x292>
    
    case 3:
      if      (button->press_flag)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	7b5b      	ldrb	r3, [r3, #13]
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d079      	beq.n	8001bca <System_Alarm_View_Mode_Handle+0x1d6>
      {
        // Retrieve the selected alarm data to system parameter data
        system_param_data.minute  = alarm_get_data[system_state.cursor].minute;
 8001ad6:	4b6e      	ldr	r3, [pc, #440]	@ (8001c90 <System_Alarm_View_Mode_Handle+0x29c>)
 8001ad8:	78db      	ldrb	r3, [r3, #3]
 8001ada:	4619      	mov	r1, r3
 8001adc:	4a6d      	ldr	r2, [pc, #436]	@ (8001c94 <System_Alarm_View_Mode_Handle+0x2a0>)
 8001ade:	460b      	mov	r3, r1
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	440b      	add	r3, r1
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	4413      	add	r3, r2
 8001ae8:	3301      	adds	r3, #1
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	b2da      	uxtb	r2, r3
 8001aee:	4b6a      	ldr	r3, [pc, #424]	@ (8001c98 <System_Alarm_View_Mode_Handle+0x2a4>)
 8001af0:	701a      	strb	r2, [r3, #0]
        system_param_data.hour    = alarm_get_data[system_state.cursor].hour;
 8001af2:	4b67      	ldr	r3, [pc, #412]	@ (8001c90 <System_Alarm_View_Mode_Handle+0x29c>)
 8001af4:	78db      	ldrb	r3, [r3, #3]
 8001af6:	4619      	mov	r1, r3
 8001af8:	4a66      	ldr	r2, [pc, #408]	@ (8001c94 <System_Alarm_View_Mode_Handle+0x2a0>)
 8001afa:	460b      	mov	r3, r1
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	440b      	add	r3, r1
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	4413      	add	r3, r2
 8001b04:	3302      	adds	r3, #2
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	b2da      	uxtb	r2, r3
 8001b0a:	4b63      	ldr	r3, [pc, #396]	@ (8001c98 <System_Alarm_View_Mode_Handle+0x2a4>)
 8001b0c:	705a      	strb	r2, [r3, #1]
        system_param_data.dy_dt   = alarm_get_data[system_state.cursor].dy_dt;
 8001b0e:	4b60      	ldr	r3, [pc, #384]	@ (8001c90 <System_Alarm_View_Mode_Handle+0x29c>)
 8001b10:	78db      	ldrb	r3, [r3, #3]
 8001b12:	4619      	mov	r1, r3
 8001b14:	4a5f      	ldr	r2, [pc, #380]	@ (8001c94 <System_Alarm_View_Mode_Handle+0x2a0>)
 8001b16:	460b      	mov	r3, r1
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	440b      	add	r3, r1
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	4413      	add	r3, r2
 8001b20:	3303      	adds	r3, #3
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	b2da      	uxtb	r2, r3
 8001b26:	4b5c      	ldr	r3, [pc, #368]	@ (8001c98 <System_Alarm_View_Mode_Handle+0x2a4>)
 8001b28:	719a      	strb	r2, [r3, #6]
        system_param_data.dow_dom = alarm_get_data[system_state.cursor].dow_dom;
 8001b2a:	4b59      	ldr	r3, [pc, #356]	@ (8001c90 <System_Alarm_View_Mode_Handle+0x29c>)
 8001b2c:	78db      	ldrb	r3, [r3, #3]
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4a58      	ldr	r2, [pc, #352]	@ (8001c94 <System_Alarm_View_Mode_Handle+0x2a0>)
 8001b32:	460b      	mov	r3, r1
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	440b      	add	r3, r1
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	4413      	add	r3, r2
 8001b3c:	3304      	adds	r3, #4
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	4b55      	ldr	r3, [pc, #340]	@ (8001c98 <System_Alarm_View_Mode_Handle+0x2a4>)
 8001b44:	71da      	strb	r2, [r3, #7]
        system_param_data.on_off  = alarm_get_data[system_state.cursor].on_off;
 8001b46:	4b52      	ldr	r3, [pc, #328]	@ (8001c90 <System_Alarm_View_Mode_Handle+0x29c>)
 8001b48:	78db      	ldrb	r3, [r3, #3]
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4a51      	ldr	r2, [pc, #324]	@ (8001c94 <System_Alarm_View_Mode_Handle+0x2a0>)
 8001b4e:	460b      	mov	r3, r1
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	440b      	add	r3, r1
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	4413      	add	r3, r2
 8001b58:	3305      	adds	r3, #5
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	4b4e      	ldr	r3, [pc, #312]	@ (8001c98 <System_Alarm_View_Mode_Handle+0x2a4>)
 8001b60:	721a      	strb	r2, [r3, #8]

        // Toggle ON/OFF data
        system_param_data.on_off = !system_param_data.on_off;
 8001b62:	4b4d      	ldr	r3, [pc, #308]	@ (8001c98 <System_Alarm_View_Mode_Handle+0x2a4>)
 8001b64:	7a1b      	ldrb	r3, [r3, #8]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	bf14      	ite	ne
 8001b6a:	2301      	movne	r3, #1
 8001b6c:	2300      	moveq	r3, #0
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	f083 0301 	eor.w	r3, r3, #1
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	b2da      	uxtb	r2, r3
 8001b7c:	4b46      	ldr	r3, [pc, #280]	@ (8001c98 <System_Alarm_View_Mode_Handle+0x2a4>)
 8001b7e:	721a      	strb	r2, [r3, #8]

        // Save the modified alarm to the EEPROM module
        //    void Alarm_Set (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow_dom, ALARM_DY_DT_MODE dy_dt, uint8_t on_off, uint8_t slot)
        Alarm_Set
 8001b80:	4b45      	ldr	r3, [pc, #276]	@ (8001c98 <System_Alarm_View_Mode_Handle+0x2a4>)
 8001b82:	7818      	ldrb	r0, [r3, #0]
 8001b84:	4b44      	ldr	r3, [pc, #272]	@ (8001c98 <System_Alarm_View_Mode_Handle+0x2a4>)
 8001b86:	785c      	ldrb	r4, [r3, #1]
 8001b88:	4b43      	ldr	r3, [pc, #268]	@ (8001c98 <System_Alarm_View_Mode_Handle+0x2a4>)
 8001b8a:	79dd      	ldrb	r5, [r3, #7]
 8001b8c:	4b42      	ldr	r3, [pc, #264]	@ (8001c98 <System_Alarm_View_Mode_Handle+0x2a4>)
 8001b8e:	799b      	ldrb	r3, [r3, #6]
 8001b90:	4a41      	ldr	r2, [pc, #260]	@ (8001c98 <System_Alarm_View_Mode_Handle+0x2a4>)
 8001b92:	7a12      	ldrb	r2, [r2, #8]
 8001b94:	493e      	ldr	r1, [pc, #248]	@ (8001c90 <System_Alarm_View_Mode_Handle+0x29c>)
 8001b96:	78c9      	ldrb	r1, [r1, #3]
 8001b98:	9102      	str	r1, [sp, #8]
 8001b9a:	9201      	str	r2, [sp, #4]
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	462b      	mov	r3, r5
 8001ba0:	4622      	mov	r2, r4
 8001ba2:	4601      	mov	r1, r0
 8001ba4:	2000      	movs	r0, #0
 8001ba6:	f7fe ff6d 	bl	8000a84 <Alarm_Set>
          system_param_data.on_off,
          system_state.cursor   
        );

        // Update the newly set alarm data
        Alarm_Get(system_state.cursor, &alarm_get_data[system_state.cursor]);
 8001baa:	4b39      	ldr	r3, [pc, #228]	@ (8001c90 <System_Alarm_View_Mode_Handle+0x29c>)
 8001bac:	78da      	ldrb	r2, [r3, #3]
 8001bae:	4b38      	ldr	r3, [pc, #224]	@ (8001c90 <System_Alarm_View_Mode_Handle+0x29c>)
 8001bb0:	78db      	ldrb	r3, [r3, #3]
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	440b      	add	r3, r1
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	4935      	ldr	r1, [pc, #212]	@ (8001c94 <System_Alarm_View_Mode_Handle+0x2a0>)
 8001bbe:	440b      	add	r3, r1
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4610      	mov	r0, r2
 8001bc4:	f7fe ffae 	bl	8000b24 <Alarm_Get>
        system_param_data.on_off  = alarm_get_data[system_state.cursor].on_off;

        // System switches to Alarm Setup Mode
        system_state.mode = ALARM_SETUP_MODE;
      }
      break;
 8001bc8:	e05a      	b.n	8001c80 <System_Alarm_View_Mode_Handle+0x28c>
      else if (button->hold_flag)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	7b9b      	ldrb	r3, [r3, #14]
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d055      	beq.n	8001c80 <System_Alarm_View_Mode_Handle+0x28c>
        system_param_data.minute  = alarm_get_data[system_state.cursor].minute;
 8001bd4:	4b2e      	ldr	r3, [pc, #184]	@ (8001c90 <System_Alarm_View_Mode_Handle+0x29c>)
 8001bd6:	78db      	ldrb	r3, [r3, #3]
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4a2e      	ldr	r2, [pc, #184]	@ (8001c94 <System_Alarm_View_Mode_Handle+0x2a0>)
 8001bdc:	460b      	mov	r3, r1
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	440b      	add	r3, r1
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	4413      	add	r3, r2
 8001be6:	3301      	adds	r3, #1
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	b2da      	uxtb	r2, r3
 8001bec:	4b2a      	ldr	r3, [pc, #168]	@ (8001c98 <System_Alarm_View_Mode_Handle+0x2a4>)
 8001bee:	701a      	strb	r2, [r3, #0]
        system_param_data.hour    = alarm_get_data[system_state.cursor].hour;
 8001bf0:	4b27      	ldr	r3, [pc, #156]	@ (8001c90 <System_Alarm_View_Mode_Handle+0x29c>)
 8001bf2:	78db      	ldrb	r3, [r3, #3]
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4a27      	ldr	r2, [pc, #156]	@ (8001c94 <System_Alarm_View_Mode_Handle+0x2a0>)
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	440b      	add	r3, r1
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	4413      	add	r3, r2
 8001c02:	3302      	adds	r3, #2
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	b2da      	uxtb	r2, r3
 8001c08:	4b23      	ldr	r3, [pc, #140]	@ (8001c98 <System_Alarm_View_Mode_Handle+0x2a4>)
 8001c0a:	705a      	strb	r2, [r3, #1]
        system_param_data.dy_dt   = alarm_get_data[system_state.cursor].dy_dt;
 8001c0c:	4b20      	ldr	r3, [pc, #128]	@ (8001c90 <System_Alarm_View_Mode_Handle+0x29c>)
 8001c0e:	78db      	ldrb	r3, [r3, #3]
 8001c10:	4619      	mov	r1, r3
 8001c12:	4a20      	ldr	r2, [pc, #128]	@ (8001c94 <System_Alarm_View_Mode_Handle+0x2a0>)
 8001c14:	460b      	mov	r3, r1
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	440b      	add	r3, r1
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	4413      	add	r3, r2
 8001c1e:	3303      	adds	r3, #3
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	b2da      	uxtb	r2, r3
 8001c24:	4b1c      	ldr	r3, [pc, #112]	@ (8001c98 <System_Alarm_View_Mode_Handle+0x2a4>)
 8001c26:	719a      	strb	r2, [r3, #6]
        system_param_data.dow_dom = alarm_get_data[system_state.cursor].dow_dom;
 8001c28:	4b19      	ldr	r3, [pc, #100]	@ (8001c90 <System_Alarm_View_Mode_Handle+0x29c>)
 8001c2a:	78db      	ldrb	r3, [r3, #3]
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4a19      	ldr	r2, [pc, #100]	@ (8001c94 <System_Alarm_View_Mode_Handle+0x2a0>)
 8001c30:	460b      	mov	r3, r1
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	440b      	add	r3, r1
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	4413      	add	r3, r2
 8001c3a:	3304      	adds	r3, #4
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	b2da      	uxtb	r2, r3
 8001c40:	4b15      	ldr	r3, [pc, #84]	@ (8001c98 <System_Alarm_View_Mode_Handle+0x2a4>)
 8001c42:	71da      	strb	r2, [r3, #7]
        system_param_data.on_off  = alarm_get_data[system_state.cursor].on_off;
 8001c44:	4b12      	ldr	r3, [pc, #72]	@ (8001c90 <System_Alarm_View_Mode_Handle+0x29c>)
 8001c46:	78db      	ldrb	r3, [r3, #3]
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4a12      	ldr	r2, [pc, #72]	@ (8001c94 <System_Alarm_View_Mode_Handle+0x2a0>)
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	440b      	add	r3, r1
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	4413      	add	r3, r2
 8001c56:	3305      	adds	r3, #5
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	b2da      	uxtb	r2, r3
 8001c5c:	4b0e      	ldr	r3, [pc, #56]	@ (8001c98 <System_Alarm_View_Mode_Handle+0x2a4>)
 8001c5e:	721a      	strb	r2, [r3, #8]
        system_state.mode = ALARM_SETUP_MODE;
 8001c60:	4b0b      	ldr	r3, [pc, #44]	@ (8001c90 <System_Alarm_View_Mode_Handle+0x29c>)
 8001c62:	2202      	movs	r2, #2
 8001c64:	701a      	strb	r2, [r3, #0]
      break;
 8001c66:	e00b      	b.n	8001c80 <System_Alarm_View_Mode_Handle+0x28c>

    case 4: 
      if      (button->press_flag)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	7b5b      	ldrb	r3, [r3, #13]
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d108      	bne.n	8001c84 <System_Alarm_View_Mode_Handle+0x290>
      {

      }
      else if (button->hold_flag)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	7b9b      	ldrb	r3, [r3, #14]
      {

      }
      break;
 8001c76:	e005      	b.n	8001c84 <System_Alarm_View_Mode_Handle+0x290>

    default: 
      break;
 8001c78:	bf00      	nop
 8001c7a:	e004      	b.n	8001c86 <System_Alarm_View_Mode_Handle+0x292>
      break;
 8001c7c:	bf00      	nop
 8001c7e:	e002      	b.n	8001c86 <System_Alarm_View_Mode_Handle+0x292>
      break;
 8001c80:	bf00      	nop
 8001c82:	e000      	b.n	8001c86 <System_Alarm_View_Mode_Handle+0x292>
      break;
 8001c84:	bf00      	nop
  }
}
 8001c86:	bf00      	nop
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bdb0      	pop	{r4, r5, r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	20000348 	.word	0x20000348
 8001c94:	20000360 	.word	0x20000360
 8001c98:	2000034c 	.word	0x2000034c

08001c9c <System_Alarm_Active_Mode_Handle>:
 * @brief  Handles the alarm active mode based on button actions.
 * @param  button: Pointer to the BUTTON structure containing button state and index.
 * @retval None
 */
void System_Alarm_Active_Mode_Handle (BUTTON_DATA *button)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  // Handle button actions in alarm active mode
  switch (button->index) 
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	799b      	ldrb	r3, [r3, #6]
 8001ca8:	2b04      	cmp	r3, #4
 8001caa:	d853      	bhi.n	8001d54 <System_Alarm_Active_Mode_Handle+0xb8>
 8001cac:	a201      	add	r2, pc, #4	@ (adr r2, 8001cb4 <System_Alarm_Active_Mode_Handle+0x18>)
 8001cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cb2:	bf00      	nop
 8001cb4:	08001cc9 	.word	0x08001cc9
 8001cb8:	08001d15 	.word	0x08001d15
 8001cbc:	08001d25 	.word	0x08001d25
 8001cc0:	08001d35 	.word	0x08001d35
 8001cc4:	08001d45 	.word	0x08001d45
  {
    // Button 0: If pressed, cycle through the time setup fields; if held, set the mode to default
    case 0:
      // If pressed, cycle through the time setup fields
      if (button->press_flag)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	7b5b      	ldrb	r3, [r3, #13]
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d00c      	beq.n	8001cec <System_Alarm_Active_Mode_Handle+0x50>
      {
        system_state.mode = (system_state.mode < (SYSTEM_MODE_NUM - 1)) ? (system_state.mode + 1) : 0;
 8001cd2:	4b28      	ldr	r3, [pc, #160]	@ (8001d74 <System_Alarm_Active_Mode_Handle+0xd8>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	2b04      	cmp	r3, #4
 8001cd8:	d804      	bhi.n	8001ce4 <System_Alarm_Active_Mode_Handle+0x48>
 8001cda:	4b26      	ldr	r3, [pc, #152]	@ (8001d74 <System_Alarm_Active_Mode_Handle+0xd8>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	e000      	b.n	8001ce6 <System_Alarm_Active_Mode_Handle+0x4a>
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	4a23      	ldr	r2, [pc, #140]	@ (8001d74 <System_Alarm_Active_Mode_Handle+0xd8>)
 8001ce8:	7013      	strb	r3, [r2, #0]
      else if (button->hold_flag && !button->latch)
      {
        system_state.mode = DEFAULT_MODE; 
        button->latch = true;
      }
      break;
 8001cea:	e035      	b.n	8001d58 <System_Alarm_Active_Mode_Handle+0xbc>
      else if (button->hold_flag && !button->latch)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	7b9b      	ldrb	r3, [r3, #14]
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d030      	beq.n	8001d58 <System_Alarm_Active_Mode_Handle+0xbc>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	7bdb      	ldrb	r3, [r3, #15]
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	f083 0301 	eor.w	r3, r3, #1
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d028      	beq.n	8001d58 <System_Alarm_Active_Mode_Handle+0xbc>
        system_state.mode = DEFAULT_MODE; 
 8001d06:	4b1b      	ldr	r3, [pc, #108]	@ (8001d74 <System_Alarm_Active_Mode_Handle+0xd8>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	701a      	strb	r2, [r3, #0]
        button->latch = true;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	73da      	strb	r2, [r3, #15]
      break;
 8001d12:	e021      	b.n	8001d58 <System_Alarm_Active_Mode_Handle+0xbc>

    case 1:
      if      (button->press_flag)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	7b5b      	ldrb	r3, [r3, #13]
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d11e      	bne.n	8001d5c <System_Alarm_Active_Mode_Handle+0xc0>
      {

      }
      else if (button->hold_flag)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	7b9b      	ldrb	r3, [r3, #14]
      {

      }
      break;
 8001d22:	e01b      	b.n	8001d5c <System_Alarm_Active_Mode_Handle+0xc0>

    case 2:
      if      (button->press_flag)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	7b5b      	ldrb	r3, [r3, #13]
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d118      	bne.n	8001d60 <System_Alarm_Active_Mode_Handle+0xc4>
      {

      }
      else if (button->hold_flag)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	7b9b      	ldrb	r3, [r3, #14]
      {

      }
      break;
 8001d32:	e015      	b.n	8001d60 <System_Alarm_Active_Mode_Handle+0xc4>
    
    case 3:
      if      (button->press_flag)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	7b5b      	ldrb	r3, [r3, #13]
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d112      	bne.n	8001d64 <System_Alarm_Active_Mode_Handle+0xc8>
      {

      }
      else if (button->hold_flag)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	7b9b      	ldrb	r3, [r3, #14]
      {

      }
      break;
 8001d42:	e00f      	b.n	8001d64 <System_Alarm_Active_Mode_Handle+0xc8>

    case 4: 
      if      (button->press_flag)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	7b5b      	ldrb	r3, [r3, #13]
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d10c      	bne.n	8001d68 <System_Alarm_Active_Mode_Handle+0xcc>
      {

      }
      else if (button->hold_flag)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	7b9b      	ldrb	r3, [r3, #14]
      {

      }
      break;
 8001d52:	e009      	b.n	8001d68 <System_Alarm_Active_Mode_Handle+0xcc>

    default: 
      break;
 8001d54:	bf00      	nop
 8001d56:	e008      	b.n	8001d6a <System_Alarm_Active_Mode_Handle+0xce>
      break;
 8001d58:	bf00      	nop
 8001d5a:	e006      	b.n	8001d6a <System_Alarm_Active_Mode_Handle+0xce>
      break;
 8001d5c:	bf00      	nop
 8001d5e:	e004      	b.n	8001d6a <System_Alarm_Active_Mode_Handle+0xce>
      break;
 8001d60:	bf00      	nop
 8001d62:	e002      	b.n	8001d6a <System_Alarm_Active_Mode_Handle+0xce>
      break;
 8001d64:	bf00      	nop
 8001d66:	e000      	b.n	8001d6a <System_Alarm_Active_Mode_Handle+0xce>
      break;
 8001d68:	bf00      	nop
  }
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bc80      	pop	{r7}
 8001d72:	4770      	bx	lr
 8001d74:	20000348 	.word	0x20000348

08001d78 <System_Options_Mode_Handle>:
 * @brief  Handles the system options mode based on button actions.
 * @param  button: Pointer to the BUTTON structure containing button state and index.
 * @retval None
 */
void System_Options_Mode_Handle (BUTTON_DATA *button)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  // Handle button actions in system options mode
  switch (button->index) 
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	799b      	ldrb	r3, [r3, #6]
 8001d84:	2b04      	cmp	r3, #4
 8001d86:	d848      	bhi.n	8001e1a <System_Options_Mode_Handle+0xa2>
 8001d88:	a201      	add	r2, pc, #4	@ (adr r2, 8001d90 <System_Options_Mode_Handle+0x18>)
 8001d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d8e:	bf00      	nop
 8001d90:	08001da5 	.word	0x08001da5
 8001d94:	08001ddb 	.word	0x08001ddb
 8001d98:	08001deb 	.word	0x08001deb
 8001d9c:	08001dfb 	.word	0x08001dfb
 8001da0:	08001e0b 	.word	0x08001e0b
  {
    // Button 0: If pressed, cycle through the time setup fields; if held, set the mode to default
    case 0:
      // If pressed, cycle through the time setup fields
      if      (button->press_flag)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	7b5b      	ldrb	r3, [r3, #13]
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d00c      	beq.n	8001dc8 <System_Options_Mode_Handle+0x50>
      {
        system_state.mode = (system_state.mode < (SYSTEM_MODE_NUM - 1)) ? (system_state.mode + 1) : 0;
 8001dae:	4b23      	ldr	r3, [pc, #140]	@ (8001e3c <System_Options_Mode_Handle+0xc4>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	2b04      	cmp	r3, #4
 8001db4:	d804      	bhi.n	8001dc0 <System_Options_Mode_Handle+0x48>
 8001db6:	4b21      	ldr	r3, [pc, #132]	@ (8001e3c <System_Options_Mode_Handle+0xc4>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	e000      	b.n	8001dc2 <System_Options_Mode_Handle+0x4a>
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	4a1e      	ldr	r2, [pc, #120]	@ (8001e3c <System_Options_Mode_Handle+0xc4>)
 8001dc4:	7013      	strb	r3, [r2, #0]
      // If held, set the mode to default
      else if (button->hold_flag)
      {
        system_state.mode = DEFAULT_MODE;
      }
      break;
 8001dc6:	e02a      	b.n	8001e1e <System_Options_Mode_Handle+0xa6>
      else if (button->hold_flag)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	7b9b      	ldrb	r3, [r3, #14]
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d025      	beq.n	8001e1e <System_Options_Mode_Handle+0xa6>
        system_state.mode = DEFAULT_MODE;
 8001dd2:	4b1a      	ldr	r3, [pc, #104]	@ (8001e3c <System_Options_Mode_Handle+0xc4>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	701a      	strb	r2, [r3, #0]
      break;
 8001dd8:	e021      	b.n	8001e1e <System_Options_Mode_Handle+0xa6>

    case 1:
      if      (button->press_flag)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	7b5b      	ldrb	r3, [r3, #13]
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d11e      	bne.n	8001e22 <System_Options_Mode_Handle+0xaa>
      {

      }
      else if (button->hold_flag)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	7b9b      	ldrb	r3, [r3, #14]
      {

      }
      break;
 8001de8:	e01b      	b.n	8001e22 <System_Options_Mode_Handle+0xaa>

    case 2:
      if      (button->press_flag)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	7b5b      	ldrb	r3, [r3, #13]
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d118      	bne.n	8001e26 <System_Options_Mode_Handle+0xae>
      {

      }
      else if (button->hold_flag)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	7b9b      	ldrb	r3, [r3, #14]
      {

      }
      break;
 8001df8:	e015      	b.n	8001e26 <System_Options_Mode_Handle+0xae>
    
    case 3:
      if      (button->press_flag)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	7b5b      	ldrb	r3, [r3, #13]
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d112      	bne.n	8001e2a <System_Options_Mode_Handle+0xb2>
      {

      }
      else if (button->hold_flag)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	7b9b      	ldrb	r3, [r3, #14]
      {

      }
      break;
 8001e08:	e00f      	b.n	8001e2a <System_Options_Mode_Handle+0xb2>

    case 4: 
      if      (button->press_flag)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	7b5b      	ldrb	r3, [r3, #13]
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d10c      	bne.n	8001e2e <System_Options_Mode_Handle+0xb6>
      {

      }
      else if (button->hold_flag)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	7b9b      	ldrb	r3, [r3, #14]
      {

      }
      break;
 8001e18:	e009      	b.n	8001e2e <System_Options_Mode_Handle+0xb6>

    default: 
      break;
 8001e1a:	bf00      	nop
 8001e1c:	e008      	b.n	8001e30 <System_Options_Mode_Handle+0xb8>
      break;
 8001e1e:	bf00      	nop
 8001e20:	e006      	b.n	8001e30 <System_Options_Mode_Handle+0xb8>
      break;
 8001e22:	bf00      	nop
 8001e24:	e004      	b.n	8001e30 <System_Options_Mode_Handle+0xb8>
      break;
 8001e26:	bf00      	nop
 8001e28:	e002      	b.n	8001e30 <System_Options_Mode_Handle+0xb8>
      break;
 8001e2a:	bf00      	nop
 8001e2c:	e000      	b.n	8001e30 <System_Options_Mode_Handle+0xb8>
      break;
 8001e2e:	bf00      	nop
  }
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bc80      	pop	{r7}
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	20000348 	.word	0x20000348

08001e40 <HAL_GPIO_EXTI_Callback>:
  * @brief  Callback function to handle GPIO interrupts.
  * @param  GPIO_Pin: The pin number of the GPIO that triggered the interrupt.
  * @retval None
*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	4603      	mov	r3, r0
 8001e48:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8001e4a:	88fb      	ldrh	r3, [r7, #6]
 8001e4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001e50:	d02a      	beq.n	8001ea8 <HAL_GPIO_EXTI_Callback+0x68>
 8001e52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001e56:	dc2f      	bgt.n	8001eb8 <HAL_GPIO_EXTI_Callback+0x78>
 8001e58:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001e5c:	d020      	beq.n	8001ea0 <HAL_GPIO_EXTI_Callback+0x60>
 8001e5e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001e62:	dc29      	bgt.n	8001eb8 <HAL_GPIO_EXTI_Callback+0x78>
 8001e64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e68:	d016      	beq.n	8001e98 <HAL_GPIO_EXTI_Callback+0x58>
 8001e6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e6e:	dc23      	bgt.n	8001eb8 <HAL_GPIO_EXTI_Callback+0x78>
 8001e70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e74:	d00c      	beq.n	8001e90 <HAL_GPIO_EXTI_Callback+0x50>
 8001e76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e7a:	dc1d      	bgt.n	8001eb8 <HAL_GPIO_EXTI_Callback+0x78>
 8001e7c:	2b20      	cmp	r3, #32
 8001e7e:	d003      	beq.n	8001e88 <HAL_GPIO_EXTI_Callback+0x48>
 8001e80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e84:	d014      	beq.n	8001eb0 <HAL_GPIO_EXTI_Callback+0x70>
      button4.int_flag = true;
      break;  

    default:
      // Handle other GPIO interrupts if necessary
      break;
 8001e86:	e017      	b.n	8001eb8 <HAL_GPIO_EXTI_Callback+0x78>
      rtc_int_flag = true;
 8001e88:	4b0e      	ldr	r3, [pc, #56]	@ (8001ec4 <HAL_GPIO_EXTI_Callback+0x84>)
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	701a      	strb	r2, [r3, #0]
      break;
 8001e8e:	e014      	b.n	8001eba <HAL_GPIO_EXTI_Callback+0x7a>
      button0.int_flag = true;
 8001e90:	4b0d      	ldr	r3, [pc, #52]	@ (8001ec8 <HAL_GPIO_EXTI_Callback+0x88>)
 8001e92:	2201      	movs	r2, #1
 8001e94:	731a      	strb	r2, [r3, #12]
      break;
 8001e96:	e010      	b.n	8001eba <HAL_GPIO_EXTI_Callback+0x7a>
      button1.int_flag = true;
 8001e98:	4b0c      	ldr	r3, [pc, #48]	@ (8001ecc <HAL_GPIO_EXTI_Callback+0x8c>)
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	731a      	strb	r2, [r3, #12]
      break;
 8001e9e:	e00c      	b.n	8001eba <HAL_GPIO_EXTI_Callback+0x7a>
      button2.int_flag = true;
 8001ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ed0 <HAL_GPIO_EXTI_Callback+0x90>)
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	731a      	strb	r2, [r3, #12]
      break;
 8001ea6:	e008      	b.n	8001eba <HAL_GPIO_EXTI_Callback+0x7a>
      button3.int_flag = true;
 8001ea8:	4b0a      	ldr	r3, [pc, #40]	@ (8001ed4 <HAL_GPIO_EXTI_Callback+0x94>)
 8001eaa:	2201      	movs	r2, #1
 8001eac:	731a      	strb	r2, [r3, #12]
      break;  
 8001eae:	e004      	b.n	8001eba <HAL_GPIO_EXTI_Callback+0x7a>
      button4.int_flag = true;
 8001eb0:	4b09      	ldr	r3, [pc, #36]	@ (8001ed8 <HAL_GPIO_EXTI_Callback+0x98>)
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	731a      	strb	r2, [r3, #12]
      break;  
 8001eb6:	e000      	b.n	8001eba <HAL_GPIO_EXTI_Callback+0x7a>
      break;
 8001eb8:	bf00      	nop
  }
}
 8001eba:	bf00      	nop
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc80      	pop	{r7}
 8001ec2:	4770      	bx	lr
 8001ec4:	2000039d 	.word	0x2000039d
 8001ec8:	20000000 	.word	0x20000000
 8001ecc:	20000010 	.word	0x20000010
 8001ed0:	20000020 	.word	0x20000020
 8001ed4:	20000030 	.word	0x20000030
 8001ed8:	20000040 	.word	0x20000040

08001edc <HAL_UART_RxCpltCallback>:
  * @brief  Callback function to handle UART interrupts.
  * @param  huart: Pointer to the UART handle.
  * @retval None
*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  // Verify the UART instance to ensure the callback is for USART1
  // If the UART instance is USART1, store the received data into the uart_rx_data array
  if(huart->Instance == USART1)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a09      	ldr	r2, [pc, #36]	@ (8001f10 <HAL_UART_RxCpltCallback+0x34>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d10a      	bne.n	8001f04 <HAL_UART_RxCpltCallback+0x28>
  {
    // Store the received data into the uart_rx_data array
    uart_rx_hour = uart_rx_data[0];
 8001eee:	4b09      	ldr	r3, [pc, #36]	@ (8001f14 <HAL_UART_RxCpltCallback+0x38>)
 8001ef0:	781a      	ldrb	r2, [r3, #0]
 8001ef2:	4b09      	ldr	r3, [pc, #36]	@ (8001f18 <HAL_UART_RxCpltCallback+0x3c>)
 8001ef4:	701a      	strb	r2, [r3, #0]
    uart_rx_minute = uart_rx_data[1];
 8001ef6:	4b07      	ldr	r3, [pc, #28]	@ (8001f14 <HAL_UART_RxCpltCallback+0x38>)
 8001ef8:	785a      	ldrb	r2, [r3, #1]
 8001efa:	4b08      	ldr	r3, [pc, #32]	@ (8001f1c <HAL_UART_RxCpltCallback+0x40>)
 8001efc:	701a      	strb	r2, [r3, #0]

    // Set the UART receive flag
    uart_rx_flag = 1;
 8001efe:	4b08      	ldr	r3, [pc, #32]	@ (8001f20 <HAL_UART_RxCpltCallback+0x44>)
 8001f00:	2201      	movs	r2, #1
 8001f02:	701a      	strb	r2, [r3, #0]
  }
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bc80      	pop	{r7}
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	40013800 	.word	0x40013800
 8001f14:	200003ac 	.word	0x200003ac
 8001f18:	200003ae 	.word	0x200003ae
 8001f1c:	200003af 	.word	0x200003af
 8001f20:	200003aa 	.word	0x200003aa

08001f24 <HAL_ADC_ConvCpltCallback>:
  * @brief  Callback function to handle ADC conversion complete interrupts.
  * @param  hadc: Pointer to the ADC handle.
  * @retval None
*/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
	// Verify the ADC instance to ensure the callback is for ADC1
  // If the ADC instance is ADC1, get the ADC value and calculate the battery percentage
  if (hadc == &hadc1)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a10      	ldr	r2, [pc, #64]	@ (8001f70 <HAL_ADC_ConvCpltCallback+0x4c>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d119      	bne.n	8001f68 <HAL_ADC_ConvCpltCallback+0x44>
	{
    // Get the ADC value
    adc_data = HAL_ADC_GetValue(&hadc1);
 8001f34:	480e      	ldr	r0, [pc, #56]	@ (8001f70 <HAL_ADC_ConvCpltCallback+0x4c>)
 8001f36:	f000 fc8f 	bl	8002858 <HAL_ADC_GetValue>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	b29a      	uxth	r2, r3
 8001f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8001f74 <HAL_ADC_ConvCpltCallback+0x50>)
 8001f40:	801a      	strh	r2, [r3, #0]

    // Set the ADC valid flag
    adc_valid_flag = 1;
 8001f42:	4b0d      	ldr	r3, [pc, #52]	@ (8001f78 <HAL_ADC_ConvCpltCallback+0x54>)
 8001f44:	2201      	movs	r2, #1
 8001f46:	701a      	strb	r2, [r3, #0]

    // Calculate the battery percentage
    battery_percentage = adc_data * 100 / 4095;
 8001f48:	4b0a      	ldr	r3, [pc, #40]	@ (8001f74 <HAL_ADC_ConvCpltCallback+0x50>)
 8001f4a:	881b      	ldrh	r3, [r3, #0]
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	2364      	movs	r3, #100	@ 0x64
 8001f50:	fb02 f303 	mul.w	r3, r2, r3
 8001f54:	4a09      	ldr	r2, [pc, #36]	@ (8001f7c <HAL_ADC_ConvCpltCallback+0x58>)
 8001f56:	fb82 1203 	smull	r1, r2, r2, r3
 8001f5a:	441a      	add	r2, r3
 8001f5c:	12d2      	asrs	r2, r2, #11
 8001f5e:	17db      	asrs	r3, r3, #31
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	b29a      	uxth	r2, r3
 8001f64:	4b06      	ldr	r3, [pc, #24]	@ (8001f80 <HAL_ADC_ConvCpltCallback+0x5c>)
 8001f66:	801a      	strh	r2, [r3, #0]
	}
}
 8001f68:	bf00      	nop
 8001f6a:	3708      	adds	r7, #8
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	200002c4 	.word	0x200002c4
 8001f74:	200003a6 	.word	0x200003a6
 8001f78:	200003a5 	.word	0x200003a5
 8001f7c:	80080081 	.word	0x80080081
 8001f80:	200003a8 	.word	0x200003a8

08001f84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f88:	b672      	cpsid	i
}
 8001f8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f8c:	bf00      	nop
 8001f8e:	e7fd      	b.n	8001f8c <Error_Handler+0x8>

08001f90 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001f94:	4b17      	ldr	r3, [pc, #92]	@ (8001ff4 <MX_SPI1_Init+0x64>)
 8001f96:	4a18      	ldr	r2, [pc, #96]	@ (8001ff8 <MX_SPI1_Init+0x68>)
 8001f98:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f9a:	4b16      	ldr	r3, [pc, #88]	@ (8001ff4 <MX_SPI1_Init+0x64>)
 8001f9c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001fa0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001fa2:	4b14      	ldr	r3, [pc, #80]	@ (8001ff4 <MX_SPI1_Init+0x64>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fa8:	4b12      	ldr	r3, [pc, #72]	@ (8001ff4 <MX_SPI1_Init+0x64>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fae:	4b11      	ldr	r3, [pc, #68]	@ (8001ff4 <MX_SPI1_Init+0x64>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fb4:	4b0f      	ldr	r3, [pc, #60]	@ (8001ff4 <MX_SPI1_Init+0x64>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001fba:	4b0e      	ldr	r3, [pc, #56]	@ (8001ff4 <MX_SPI1_Init+0x64>)
 8001fbc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fc0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001fc2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff4 <MX_SPI1_Init+0x64>)
 8001fc4:	2228      	movs	r2, #40	@ 0x28
 8001fc6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8001ff4 <MX_SPI1_Init+0x64>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fce:	4b09      	ldr	r3, [pc, #36]	@ (8001ff4 <MX_SPI1_Init+0x64>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fd4:	4b07      	ldr	r3, [pc, #28]	@ (8001ff4 <MX_SPI1_Init+0x64>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001fda:	4b06      	ldr	r3, [pc, #24]	@ (8001ff4 <MX_SPI1_Init+0x64>)
 8001fdc:	220a      	movs	r2, #10
 8001fde:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001fe0:	4804      	ldr	r0, [pc, #16]	@ (8001ff4 <MX_SPI1_Init+0x64>)
 8001fe2:	f002 ff61 	bl	8004ea8 <HAL_SPI_Init>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001fec:	f7ff ffca 	bl	8001f84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ff0:	bf00      	nop
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	200003b0 	.word	0x200003b0
 8001ff8:	40013000 	.word	0x40013000

08001ffc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b088      	sub	sp, #32
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002004:	f107 0310 	add.w	r3, r7, #16
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	605a      	str	r2, [r3, #4]
 800200e:	609a      	str	r2, [r3, #8]
 8002010:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a15      	ldr	r2, [pc, #84]	@ (800206c <HAL_SPI_MspInit+0x70>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d123      	bne.n	8002064 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800201c:	4b14      	ldr	r3, [pc, #80]	@ (8002070 <HAL_SPI_MspInit+0x74>)
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	4a13      	ldr	r2, [pc, #76]	@ (8002070 <HAL_SPI_MspInit+0x74>)
 8002022:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002026:	6193      	str	r3, [r2, #24]
 8002028:	4b11      	ldr	r3, [pc, #68]	@ (8002070 <HAL_SPI_MspInit+0x74>)
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002030:	60fb      	str	r3, [r7, #12]
 8002032:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002034:	4b0e      	ldr	r3, [pc, #56]	@ (8002070 <HAL_SPI_MspInit+0x74>)
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	4a0d      	ldr	r2, [pc, #52]	@ (8002070 <HAL_SPI_MspInit+0x74>)
 800203a:	f043 0304 	orr.w	r3, r3, #4
 800203e:	6193      	str	r3, [r2, #24]
 8002040:	4b0b      	ldr	r3, [pc, #44]	@ (8002070 <HAL_SPI_MspInit+0x74>)
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	f003 0304 	and.w	r3, r3, #4
 8002048:	60bb      	str	r3, [r7, #8]
 800204a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|DIN_Pin;
 800204c:	23a0      	movs	r3, #160	@ 0xa0
 800204e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002050:	2302      	movs	r3, #2
 8002052:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002054:	2303      	movs	r3, #3
 8002056:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002058:	f107 0310 	add.w	r3, r7, #16
 800205c:	4619      	mov	r1, r3
 800205e:	4805      	ldr	r0, [pc, #20]	@ (8002074 <HAL_SPI_MspInit+0x78>)
 8002060:	f001 f82a 	bl	80030b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002064:	bf00      	nop
 8002066:	3720      	adds	r7, #32
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40013000 	.word	0x40013000
 8002070:	40021000 	.word	0x40021000
 8002074:	40010800 	.word	0x40010800

08002078 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800207e:	4b15      	ldr	r3, [pc, #84]	@ (80020d4 <HAL_MspInit+0x5c>)
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	4a14      	ldr	r2, [pc, #80]	@ (80020d4 <HAL_MspInit+0x5c>)
 8002084:	f043 0301 	orr.w	r3, r3, #1
 8002088:	6193      	str	r3, [r2, #24]
 800208a:	4b12      	ldr	r3, [pc, #72]	@ (80020d4 <HAL_MspInit+0x5c>)
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	60bb      	str	r3, [r7, #8]
 8002094:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002096:	4b0f      	ldr	r3, [pc, #60]	@ (80020d4 <HAL_MspInit+0x5c>)
 8002098:	69db      	ldr	r3, [r3, #28]
 800209a:	4a0e      	ldr	r2, [pc, #56]	@ (80020d4 <HAL_MspInit+0x5c>)
 800209c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020a0:	61d3      	str	r3, [r2, #28]
 80020a2:	4b0c      	ldr	r3, [pc, #48]	@ (80020d4 <HAL_MspInit+0x5c>)
 80020a4:	69db      	ldr	r3, [r3, #28]
 80020a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020aa:	607b      	str	r3, [r7, #4]
 80020ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80020ae:	4b0a      	ldr	r3, [pc, #40]	@ (80020d8 <HAL_MspInit+0x60>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80020ba:	60fb      	str	r3, [r7, #12]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80020c2:	60fb      	str	r3, [r7, #12]
 80020c4:	4a04      	ldr	r2, [pc, #16]	@ (80020d8 <HAL_MspInit+0x60>)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020ca:	bf00      	nop
 80020cc:	3714      	adds	r7, #20
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bc80      	pop	{r7}
 80020d2:	4770      	bx	lr
 80020d4:	40021000 	.word	0x40021000
 80020d8:	40010000 	.word	0x40010000

080020dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020e0:	bf00      	nop
 80020e2:	e7fd      	b.n	80020e0 <NMI_Handler+0x4>

080020e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020e8:	bf00      	nop
 80020ea:	e7fd      	b.n	80020e8 <HardFault_Handler+0x4>

080020ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020f0:	bf00      	nop
 80020f2:	e7fd      	b.n	80020f0 <MemManage_Handler+0x4>

080020f4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020f8:	bf00      	nop
 80020fa:	e7fd      	b.n	80020f8 <BusFault_Handler+0x4>

080020fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002100:	bf00      	nop
 8002102:	e7fd      	b.n	8002100 <UsageFault_Handler+0x4>

08002104 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002108:	bf00      	nop
 800210a:	46bd      	mov	sp, r7
 800210c:	bc80      	pop	{r7}
 800210e:	4770      	bx	lr

08002110 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002114:	bf00      	nop
 8002116:	46bd      	mov	sp, r7
 8002118:	bc80      	pop	{r7}
 800211a:	4770      	bx	lr

0800211c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002120:	bf00      	nop
 8002122:	46bd      	mov	sp, r7
 8002124:	bc80      	pop	{r7}
 8002126:	4770      	bx	lr

08002128 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800212c:	f000 f9c6 	bl	80024bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002130:	bf00      	nop
 8002132:	bd80      	pop	{r7, pc}

08002134 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002138:	4802      	ldr	r0, [pc, #8]	@ (8002144 <ADC1_2_IRQHandler+0x10>)
 800213a:	f000 fb99 	bl	8002870 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800213e:	bf00      	nop
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	200002c4 	.word	0x200002c4

08002148 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RTC_IN5_Pin);
 800214c:	2020      	movs	r0, #32
 800214e:	f001 f967 	bl	8003420 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON4_IN8_Pin);
 8002152:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002156:	f001 f963 	bl	8003420 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800215a:	bf00      	nop
 800215c:	bd80      	pop	{r7, pc}
	...

08002160 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002164:	4802      	ldr	r0, [pc, #8]	@ (8002170 <USART1_IRQHandler+0x10>)
 8002166:	f003 f995 	bl	8005494 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800216a:	bf00      	nop
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	2000040c 	.word	0x2000040c

08002174 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON0_IN12_Pin);
 8002178:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800217c:	f001 f950 	bl	8003420 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON1_IN13_Pin);
 8002180:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002184:	f001 f94c 	bl	8003420 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON2_IN14_Pin);
 8002188:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800218c:	f001 f948 	bl	8003420 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON3_IN15_Pin);
 8002190:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002194:	f001 f944 	bl	8003420 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002198:	bf00      	nop
 800219a:	bd80      	pop	{r7, pc}

0800219c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021a8:	2300      	movs	r3, #0
 80021aa:	617b      	str	r3, [r7, #20]
 80021ac:	e00a      	b.n	80021c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021ae:	f3af 8000 	nop.w
 80021b2:	4601      	mov	r1, r0
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	1c5a      	adds	r2, r3, #1
 80021b8:	60ba      	str	r2, [r7, #8]
 80021ba:	b2ca      	uxtb	r2, r1
 80021bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	3301      	adds	r3, #1
 80021c2:	617b      	str	r3, [r7, #20]
 80021c4:	697a      	ldr	r2, [r7, #20]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	dbf0      	blt.n	80021ae <_read+0x12>
  }

  return len;
 80021cc:	687b      	ldr	r3, [r7, #4]
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3718      	adds	r7, #24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b086      	sub	sp, #24
 80021da:	af00      	add	r7, sp, #0
 80021dc:	60f8      	str	r0, [r7, #12]
 80021de:	60b9      	str	r1, [r7, #8]
 80021e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021e2:	2300      	movs	r3, #0
 80021e4:	617b      	str	r3, [r7, #20]
 80021e6:	e009      	b.n	80021fc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	1c5a      	adds	r2, r3, #1
 80021ec:	60ba      	str	r2, [r7, #8]
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	3301      	adds	r3, #1
 80021fa:	617b      	str	r3, [r7, #20]
 80021fc:	697a      	ldr	r2, [r7, #20]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	429a      	cmp	r2, r3
 8002202:	dbf1      	blt.n	80021e8 <_write+0x12>
  }
  return len;
 8002204:	687b      	ldr	r3, [r7, #4]
}
 8002206:	4618      	mov	r0, r3
 8002208:	3718      	adds	r7, #24
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <_close>:

int _close(int file)
{
 800220e:	b480      	push	{r7}
 8002210:	b083      	sub	sp, #12
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002216:	f04f 33ff 	mov.w	r3, #4294967295
}
 800221a:	4618      	mov	r0, r3
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	bc80      	pop	{r7}
 8002222:	4770      	bx	lr

08002224 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002234:	605a      	str	r2, [r3, #4]
  return 0;
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	bc80      	pop	{r7}
 8002240:	4770      	bx	lr

08002242 <_isatty>:

int _isatty(int file)
{
 8002242:	b480      	push	{r7}
 8002244:	b083      	sub	sp, #12
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800224a:	2301      	movs	r3, #1
}
 800224c:	4618      	mov	r0, r3
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	bc80      	pop	{r7}
 8002254:	4770      	bx	lr

08002256 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002256:	b480      	push	{r7}
 8002258:	b085      	sub	sp, #20
 800225a:	af00      	add	r7, sp, #0
 800225c:	60f8      	str	r0, [r7, #12]
 800225e:	60b9      	str	r1, [r7, #8]
 8002260:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002262:	2300      	movs	r3, #0
}
 8002264:	4618      	mov	r0, r3
 8002266:	3714      	adds	r7, #20
 8002268:	46bd      	mov	sp, r7
 800226a:	bc80      	pop	{r7}
 800226c:	4770      	bx	lr
	...

08002270 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002278:	4a14      	ldr	r2, [pc, #80]	@ (80022cc <_sbrk+0x5c>)
 800227a:	4b15      	ldr	r3, [pc, #84]	@ (80022d0 <_sbrk+0x60>)
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002284:	4b13      	ldr	r3, [pc, #76]	@ (80022d4 <_sbrk+0x64>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d102      	bne.n	8002292 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800228c:	4b11      	ldr	r3, [pc, #68]	@ (80022d4 <_sbrk+0x64>)
 800228e:	4a12      	ldr	r2, [pc, #72]	@ (80022d8 <_sbrk+0x68>)
 8002290:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002292:	4b10      	ldr	r3, [pc, #64]	@ (80022d4 <_sbrk+0x64>)
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4413      	add	r3, r2
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	429a      	cmp	r2, r3
 800229e:	d207      	bcs.n	80022b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022a0:	f005 f904 	bl	80074ac <__errno>
 80022a4:	4603      	mov	r3, r0
 80022a6:	220c      	movs	r2, #12
 80022a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022aa:	f04f 33ff 	mov.w	r3, #4294967295
 80022ae:	e009      	b.n	80022c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022b0:	4b08      	ldr	r3, [pc, #32]	@ (80022d4 <_sbrk+0x64>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022b6:	4b07      	ldr	r3, [pc, #28]	@ (80022d4 <_sbrk+0x64>)
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4413      	add	r3, r2
 80022be:	4a05      	ldr	r2, [pc, #20]	@ (80022d4 <_sbrk+0x64>)
 80022c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022c2:	68fb      	ldr	r3, [r7, #12]
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3718      	adds	r7, #24
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	20005000 	.word	0x20005000
 80022d0:	00000400 	.word	0x00000400
 80022d4:	20000408 	.word	0x20000408
 80022d8:	200005c0 	.word	0x200005c0

080022dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022e0:	bf00      	nop
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	4770      	bx	lr

080022e8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80022ec:	4b11      	ldr	r3, [pc, #68]	@ (8002334 <MX_USART1_UART_Init+0x4c>)
 80022ee:	4a12      	ldr	r2, [pc, #72]	@ (8002338 <MX_USART1_UART_Init+0x50>)
 80022f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80022f2:	4b10      	ldr	r3, [pc, #64]	@ (8002334 <MX_USART1_UART_Init+0x4c>)
 80022f4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80022f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002334 <MX_USART1_UART_Init+0x4c>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002300:	4b0c      	ldr	r3, [pc, #48]	@ (8002334 <MX_USART1_UART_Init+0x4c>)
 8002302:	2200      	movs	r2, #0
 8002304:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002306:	4b0b      	ldr	r3, [pc, #44]	@ (8002334 <MX_USART1_UART_Init+0x4c>)
 8002308:	2200      	movs	r2, #0
 800230a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800230c:	4b09      	ldr	r3, [pc, #36]	@ (8002334 <MX_USART1_UART_Init+0x4c>)
 800230e:	220c      	movs	r2, #12
 8002310:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002312:	4b08      	ldr	r3, [pc, #32]	@ (8002334 <MX_USART1_UART_Init+0x4c>)
 8002314:	2200      	movs	r2, #0
 8002316:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002318:	4b06      	ldr	r3, [pc, #24]	@ (8002334 <MX_USART1_UART_Init+0x4c>)
 800231a:	2200      	movs	r2, #0
 800231c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800231e:	4805      	ldr	r0, [pc, #20]	@ (8002334 <MX_USART1_UART_Init+0x4c>)
 8002320:	f003 f843 	bl	80053aa <HAL_UART_Init>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800232a:	f7ff fe2b 	bl	8001f84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800232e:	bf00      	nop
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	2000040c 	.word	0x2000040c
 8002338:	40013800 	.word	0x40013800

0800233c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b088      	sub	sp, #32
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002344:	f107 0310 	add.w	r3, r7, #16
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	605a      	str	r2, [r3, #4]
 800234e:	609a      	str	r2, [r3, #8]
 8002350:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a20      	ldr	r2, [pc, #128]	@ (80023d8 <HAL_UART_MspInit+0x9c>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d139      	bne.n	80023d0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800235c:	4b1f      	ldr	r3, [pc, #124]	@ (80023dc <HAL_UART_MspInit+0xa0>)
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	4a1e      	ldr	r2, [pc, #120]	@ (80023dc <HAL_UART_MspInit+0xa0>)
 8002362:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002366:	6193      	str	r3, [r2, #24]
 8002368:	4b1c      	ldr	r3, [pc, #112]	@ (80023dc <HAL_UART_MspInit+0xa0>)
 800236a:	699b      	ldr	r3, [r3, #24]
 800236c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002370:	60fb      	str	r3, [r7, #12]
 8002372:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002374:	4b19      	ldr	r3, [pc, #100]	@ (80023dc <HAL_UART_MspInit+0xa0>)
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	4a18      	ldr	r2, [pc, #96]	@ (80023dc <HAL_UART_MspInit+0xa0>)
 800237a:	f043 0304 	orr.w	r3, r3, #4
 800237e:	6193      	str	r3, [r2, #24]
 8002380:	4b16      	ldr	r3, [pc, #88]	@ (80023dc <HAL_UART_MspInit+0xa0>)
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	f003 0304 	and.w	r3, r3, #4
 8002388:	60bb      	str	r3, [r7, #8]
 800238a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800238c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002390:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002392:	2302      	movs	r3, #2
 8002394:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002396:	2303      	movs	r3, #3
 8002398:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800239a:	f107 0310 	add.w	r3, r7, #16
 800239e:	4619      	mov	r1, r3
 80023a0:	480f      	ldr	r0, [pc, #60]	@ (80023e0 <HAL_UART_MspInit+0xa4>)
 80023a2:	f000 fe89 	bl	80030b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80023a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80023aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023ac:	2300      	movs	r3, #0
 80023ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b0:	2300      	movs	r3, #0
 80023b2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b4:	f107 0310 	add.w	r3, r7, #16
 80023b8:	4619      	mov	r1, r3
 80023ba:	4809      	ldr	r0, [pc, #36]	@ (80023e0 <HAL_UART_MspInit+0xa4>)
 80023bc:	f000 fe7c 	bl	80030b8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80023c0:	2200      	movs	r2, #0
 80023c2:	2100      	movs	r1, #0
 80023c4:	2025      	movs	r0, #37	@ 0x25
 80023c6:	f000 fd8e 	bl	8002ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80023ca:	2025      	movs	r0, #37	@ 0x25
 80023cc:	f000 fda7 	bl	8002f1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80023d0:	bf00      	nop
 80023d2:	3720      	adds	r7, #32
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40013800 	.word	0x40013800
 80023dc:	40021000 	.word	0x40021000
 80023e0:	40010800 	.word	0x40010800

080023e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80023e4:	f7ff ff7a 	bl	80022dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023e8:	480b      	ldr	r0, [pc, #44]	@ (8002418 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80023ea:	490c      	ldr	r1, [pc, #48]	@ (800241c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80023ec:	4a0c      	ldr	r2, [pc, #48]	@ (8002420 <LoopFillZerobss+0x16>)
  movs r3, #0
 80023ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023f0:	e002      	b.n	80023f8 <LoopCopyDataInit>

080023f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023f6:	3304      	adds	r3, #4

080023f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023fc:	d3f9      	bcc.n	80023f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023fe:	4a09      	ldr	r2, [pc, #36]	@ (8002424 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002400:	4c09      	ldr	r4, [pc, #36]	@ (8002428 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002402:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002404:	e001      	b.n	800240a <LoopFillZerobss>

08002406 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002406:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002408:	3204      	adds	r2, #4

0800240a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800240a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800240c:	d3fb      	bcc.n	8002406 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800240e:	f005 f853 	bl	80074b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002412:	f7fe f82d 	bl	8000470 <main>
  bx lr
 8002416:	4770      	bx	lr
  ldr r0, =_sdata
 8002418:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800241c:	200002a8 	.word	0x200002a8
  ldr r2, =_sidata
 8002420:	08009874 	.word	0x08009874
  ldr r2, =_sbss
 8002424:	200002a8 	.word	0x200002a8
  ldr r4, =_ebss
 8002428:	200005bc 	.word	0x200005bc

0800242c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800242c:	e7fe      	b.n	800242c <CAN1_RX1_IRQHandler>
	...

08002430 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002434:	4b08      	ldr	r3, [pc, #32]	@ (8002458 <HAL_Init+0x28>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a07      	ldr	r2, [pc, #28]	@ (8002458 <HAL_Init+0x28>)
 800243a:	f043 0310 	orr.w	r3, r3, #16
 800243e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002440:	2003      	movs	r0, #3
 8002442:	f000 fd45 	bl	8002ed0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002446:	200f      	movs	r0, #15
 8002448:	f000 f808 	bl	800245c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800244c:	f7ff fe14 	bl	8002078 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	40022000 	.word	0x40022000

0800245c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002464:	4b12      	ldr	r3, [pc, #72]	@ (80024b0 <HAL_InitTick+0x54>)
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	4b12      	ldr	r3, [pc, #72]	@ (80024b4 <HAL_InitTick+0x58>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	4619      	mov	r1, r3
 800246e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002472:	fbb3 f3f1 	udiv	r3, r3, r1
 8002476:	fbb2 f3f3 	udiv	r3, r2, r3
 800247a:	4618      	mov	r0, r3
 800247c:	f000 fd5d 	bl	8002f3a <HAL_SYSTICK_Config>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e00e      	b.n	80024a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2b0f      	cmp	r3, #15
 800248e:	d80a      	bhi.n	80024a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002490:	2200      	movs	r2, #0
 8002492:	6879      	ldr	r1, [r7, #4]
 8002494:	f04f 30ff 	mov.w	r0, #4294967295
 8002498:	f000 fd25 	bl	8002ee6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800249c:	4a06      	ldr	r2, [pc, #24]	@ (80024b8 <HAL_InitTick+0x5c>)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024a2:	2300      	movs	r3, #0
 80024a4:	e000      	b.n	80024a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3708      	adds	r7, #8
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	20000050 	.word	0x20000050
 80024b4:	20000058 	.word	0x20000058
 80024b8:	20000054 	.word	0x20000054

080024bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024c0:	4b05      	ldr	r3, [pc, #20]	@ (80024d8 <HAL_IncTick+0x1c>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	461a      	mov	r2, r3
 80024c6:	4b05      	ldr	r3, [pc, #20]	@ (80024dc <HAL_IncTick+0x20>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4413      	add	r3, r2
 80024cc:	4a03      	ldr	r2, [pc, #12]	@ (80024dc <HAL_IncTick+0x20>)
 80024ce:	6013      	str	r3, [r2, #0]
}
 80024d0:	bf00      	nop
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bc80      	pop	{r7}
 80024d6:	4770      	bx	lr
 80024d8:	20000058 	.word	0x20000058
 80024dc:	20000454 	.word	0x20000454

080024e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  return uwTick;
 80024e4:	4b02      	ldr	r3, [pc, #8]	@ (80024f0 <HAL_GetTick+0x10>)
 80024e6:	681b      	ldr	r3, [r3, #0]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bc80      	pop	{r7}
 80024ee:	4770      	bx	lr
 80024f0:	20000454 	.word	0x20000454

080024f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024fc:	f7ff fff0 	bl	80024e0 <HAL_GetTick>
 8002500:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800250c:	d005      	beq.n	800251a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800250e:	4b0a      	ldr	r3, [pc, #40]	@ (8002538 <HAL_Delay+0x44>)
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	461a      	mov	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	4413      	add	r3, r2
 8002518:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800251a:	bf00      	nop
 800251c:	f7ff ffe0 	bl	80024e0 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	429a      	cmp	r2, r3
 800252a:	d8f7      	bhi.n	800251c <HAL_Delay+0x28>
  {
  }
}
 800252c:	bf00      	nop
 800252e:	bf00      	nop
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	20000058 	.word	0x20000058

0800253c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b086      	sub	sp, #24
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002544:	2300      	movs	r3, #0
 8002546:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002548:	2300      	movs	r3, #0
 800254a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800254c:	2300      	movs	r3, #0
 800254e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002550:	2300      	movs	r3, #0
 8002552:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d101      	bne.n	800255e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e0be      	b.n	80026dc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002568:	2b00      	cmp	r3, #0
 800256a:	d109      	bne.n	8002580 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f7fd fe24 	bl	80001c8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 fb8f 	bl	8002ca4 <ADC_ConversionStop_Disable>
 8002586:	4603      	mov	r3, r0
 8002588:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800258e:	f003 0310 	and.w	r3, r3, #16
 8002592:	2b00      	cmp	r3, #0
 8002594:	f040 8099 	bne.w	80026ca <HAL_ADC_Init+0x18e>
 8002598:	7dfb      	ldrb	r3, [r7, #23]
 800259a:	2b00      	cmp	r3, #0
 800259c:	f040 8095 	bne.w	80026ca <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025a4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80025a8:	f023 0302 	bic.w	r3, r3, #2
 80025ac:	f043 0202 	orr.w	r2, r3, #2
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80025bc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	7b1b      	ldrb	r3, [r3, #12]
 80025c2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80025c4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80025c6:	68ba      	ldr	r2, [r7, #8]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80025d4:	d003      	beq.n	80025de <HAL_ADC_Init+0xa2>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d102      	bne.n	80025e4 <HAL_ADC_Init+0xa8>
 80025de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025e2:	e000      	b.n	80025e6 <HAL_ADC_Init+0xaa>
 80025e4:	2300      	movs	r3, #0
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	7d1b      	ldrb	r3, [r3, #20]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d119      	bne.n	8002628 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	7b1b      	ldrb	r3, [r3, #12]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d109      	bne.n	8002610 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	3b01      	subs	r3, #1
 8002602:	035a      	lsls	r2, r3, #13
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	4313      	orrs	r3, r2
 8002608:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800260c:	613b      	str	r3, [r7, #16]
 800260e:	e00b      	b.n	8002628 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002614:	f043 0220 	orr.w	r2, r3, #32
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002620:	f043 0201 	orr.w	r2, r3, #1
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	430a      	orrs	r2, r1
 800263a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	689a      	ldr	r2, [r3, #8]
 8002642:	4b28      	ldr	r3, [pc, #160]	@ (80026e4 <HAL_ADC_Init+0x1a8>)
 8002644:	4013      	ands	r3, r2
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	6812      	ldr	r2, [r2, #0]
 800264a:	68b9      	ldr	r1, [r7, #8]
 800264c:	430b      	orrs	r3, r1
 800264e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002658:	d003      	beq.n	8002662 <HAL_ADC_Init+0x126>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d104      	bne.n	800266c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	3b01      	subs	r3, #1
 8002668:	051b      	lsls	r3, r3, #20
 800266a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002672:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	430a      	orrs	r2, r1
 800267e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	689a      	ldr	r2, [r3, #8]
 8002686:	4b18      	ldr	r3, [pc, #96]	@ (80026e8 <HAL_ADC_Init+0x1ac>)
 8002688:	4013      	ands	r3, r2
 800268a:	68ba      	ldr	r2, [r7, #8]
 800268c:	429a      	cmp	r2, r3
 800268e:	d10b      	bne.n	80026a8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800269a:	f023 0303 	bic.w	r3, r3, #3
 800269e:	f043 0201 	orr.w	r2, r3, #1
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80026a6:	e018      	b.n	80026da <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ac:	f023 0312 	bic.w	r3, r3, #18
 80026b0:	f043 0210 	orr.w	r2, r3, #16
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026bc:	f043 0201 	orr.w	r2, r3, #1
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80026c8:	e007      	b.n	80026da <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ce:	f043 0210 	orr.w	r2, r3, #16
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80026da:	7dfb      	ldrb	r3, [r7, #23]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3718      	adds	r7, #24
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	ffe1f7fd 	.word	0xffe1f7fd
 80026e8:	ff1f0efe 	.word	0xff1f0efe

080026ec <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026f4:	2300      	movs	r3, #0
 80026f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d101      	bne.n	8002706 <HAL_ADC_Start_IT+0x1a>
 8002702:	2302      	movs	r3, #2
 8002704:	e0a0      	b.n	8002848 <HAL_ADC_Start_IT+0x15c>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2201      	movs	r2, #1
 800270a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 fa6e 	bl	8002bf0 <ADC_Enable>
 8002714:	4603      	mov	r3, r0
 8002716:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002718:	7bfb      	ldrb	r3, [r7, #15]
 800271a:	2b00      	cmp	r3, #0
 800271c:	f040 808f 	bne.w	800283e <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002724:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002728:	f023 0301 	bic.w	r3, r3, #1
 800272c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a45      	ldr	r2, [pc, #276]	@ (8002850 <HAL_ADC_Start_IT+0x164>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d105      	bne.n	800274a <HAL_ADC_Start_IT+0x5e>
 800273e:	4b45      	ldr	r3, [pc, #276]	@ (8002854 <HAL_ADC_Start_IT+0x168>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d115      	bne.n	8002776 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800274e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002760:	2b00      	cmp	r3, #0
 8002762:	d026      	beq.n	80027b2 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002768:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800276c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002774:	e01d      	b.n	80027b2 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800277a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a33      	ldr	r2, [pc, #204]	@ (8002854 <HAL_ADC_Start_IT+0x168>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d004      	beq.n	8002796 <HAL_ADC_Start_IT+0xaa>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a2f      	ldr	r2, [pc, #188]	@ (8002850 <HAL_ADC_Start_IT+0x164>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d10d      	bne.n	80027b2 <HAL_ADC_Start_IT+0xc6>
 8002796:	4b2f      	ldr	r3, [pc, #188]	@ (8002854 <HAL_ADC_Start_IT+0x168>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d007      	beq.n	80027b2 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027a6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80027aa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d006      	beq.n	80027cc <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027c2:	f023 0206 	bic.w	r2, r3, #6
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80027ca:	e002      	b.n	80027d2 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f06f 0202 	mvn.w	r2, #2
 80027e2:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	685a      	ldr	r2, [r3, #4]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f042 0220 	orr.w	r2, r2, #32
 80027f2:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80027fe:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002802:	d113      	bne.n	800282c <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002808:	4a11      	ldr	r2, [pc, #68]	@ (8002850 <HAL_ADC_Start_IT+0x164>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d105      	bne.n	800281a <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800280e:	4b11      	ldr	r3, [pc, #68]	@ (8002854 <HAL_ADC_Start_IT+0x168>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002816:	2b00      	cmp	r3, #0
 8002818:	d108      	bne.n	800282c <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	689a      	ldr	r2, [r3, #8]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002828:	609a      	str	r2, [r3, #8]
 800282a:	e00c      	b.n	8002846 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	689a      	ldr	r2, [r3, #8]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800283a:	609a      	str	r2, [r3, #8]
 800283c:	e003      	b.n	8002846 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002846:	7bfb      	ldrb	r3, [r7, #15]
}
 8002848:	4618      	mov	r0, r3
 800284a:	3710      	adds	r7, #16
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40012800 	.word	0x40012800
 8002854:	40012400 	.word	0x40012400

08002858 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002866:	4618      	mov	r0, r3
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	bc80      	pop	{r7}
 800286e:	4770      	bx	lr

08002870 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	f003 0320 	and.w	r3, r3, #32
 800288e:	2b00      	cmp	r3, #0
 8002890:	d03e      	beq.n	8002910 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d039      	beq.n	8002910 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028a0:	f003 0310 	and.w	r3, r3, #16
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d105      	bne.n	80028b4 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ac:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80028be:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80028c2:	d11d      	bne.n	8002900 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d119      	bne.n	8002900 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	685a      	ldr	r2, [r3, #4]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f022 0220 	bic.w	r2, r2, #32
 80028da:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d105      	bne.n	8002900 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028f8:	f043 0201 	orr.w	r2, r3, #1
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f7ff fb0f 	bl	8001f24 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f06f 0212 	mvn.w	r2, #18
 800290e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002916:	2b00      	cmp	r3, #0
 8002918:	d04d      	beq.n	80029b6 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f003 0304 	and.w	r3, r3, #4
 8002920:	2b00      	cmp	r3, #0
 8002922:	d048      	beq.n	80029b6 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002928:	f003 0310 	and.w	r3, r3, #16
 800292c:	2b00      	cmp	r3, #0
 800292e:	d105      	bne.n	800293c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002934:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8002946:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 800294a:	d012      	beq.n	8002972 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002956:	2b00      	cmp	r3, #0
 8002958:	d125      	bne.n	80029a6 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002964:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002968:	d11d      	bne.n	80029a6 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800296e:	2b00      	cmp	r3, #0
 8002970:	d119      	bne.n	80029a6 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	685a      	ldr	r2, [r3, #4]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002980:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002986:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002992:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002996:	2b00      	cmp	r3, #0
 8002998:	d105      	bne.n	80029a6 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800299e:	f043 0201 	orr.w	r2, r3, #1
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 f9bd 	bl	8002d26 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f06f 020c 	mvn.w	r2, #12
 80029b4:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d012      	beq.n	80029e6 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d00d      	beq.n	80029e6 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ce:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 f809 	bl	80029ee <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f06f 0201 	mvn.w	r2, #1
 80029e4:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80029e6:	bf00      	nop
 80029e8:	3710      	adds	r7, #16
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80029ee:	b480      	push	{r7}
 80029f0:	b083      	sub	sp, #12
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80029f6:	bf00      	nop
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr

08002a00 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d101      	bne.n	8002a20 <HAL_ADC_ConfigChannel+0x20>
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	e0dc      	b.n	8002bda <HAL_ADC_ConfigChannel+0x1da>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	2b06      	cmp	r3, #6
 8002a2e:	d81c      	bhi.n	8002a6a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	685a      	ldr	r2, [r3, #4]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	4413      	add	r3, r2
 8002a40:	3b05      	subs	r3, #5
 8002a42:	221f      	movs	r2, #31
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	4019      	ands	r1, r3
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	6818      	ldr	r0, [r3, #0]
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685a      	ldr	r2, [r3, #4]
 8002a54:	4613      	mov	r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	4413      	add	r3, r2
 8002a5a:	3b05      	subs	r3, #5
 8002a5c:	fa00 f203 	lsl.w	r2, r0, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	430a      	orrs	r2, r1
 8002a66:	635a      	str	r2, [r3, #52]	@ 0x34
 8002a68:	e03c      	b.n	8002ae4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	2b0c      	cmp	r3, #12
 8002a70:	d81c      	bhi.n	8002aac <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685a      	ldr	r2, [r3, #4]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	4413      	add	r3, r2
 8002a82:	3b23      	subs	r3, #35	@ 0x23
 8002a84:	221f      	movs	r2, #31
 8002a86:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8a:	43db      	mvns	r3, r3
 8002a8c:	4019      	ands	r1, r3
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	6818      	ldr	r0, [r3, #0]
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685a      	ldr	r2, [r3, #4]
 8002a96:	4613      	mov	r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	4413      	add	r3, r2
 8002a9c:	3b23      	subs	r3, #35	@ 0x23
 8002a9e:	fa00 f203 	lsl.w	r2, r0, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	631a      	str	r2, [r3, #48]	@ 0x30
 8002aaa:	e01b      	b.n	8002ae4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685a      	ldr	r2, [r3, #4]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	4413      	add	r3, r2
 8002abc:	3b41      	subs	r3, #65	@ 0x41
 8002abe:	221f      	movs	r2, #31
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	43db      	mvns	r3, r3
 8002ac6:	4019      	ands	r1, r3
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	6818      	ldr	r0, [r3, #0]
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685a      	ldr	r2, [r3, #4]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	4413      	add	r3, r2
 8002ad6:	3b41      	subs	r3, #65	@ 0x41
 8002ad8:	fa00 f203 	lsl.w	r2, r0, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2b09      	cmp	r3, #9
 8002aea:	d91c      	bls.n	8002b26 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68d9      	ldr	r1, [r3, #12]
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	4613      	mov	r3, r2
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	4413      	add	r3, r2
 8002afc:	3b1e      	subs	r3, #30
 8002afe:	2207      	movs	r2, #7
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	43db      	mvns	r3, r3
 8002b06:	4019      	ands	r1, r3
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	6898      	ldr	r0, [r3, #8]
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	4613      	mov	r3, r2
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	4413      	add	r3, r2
 8002b16:	3b1e      	subs	r3, #30
 8002b18:	fa00 f203 	lsl.w	r2, r0, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	430a      	orrs	r2, r1
 8002b22:	60da      	str	r2, [r3, #12]
 8002b24:	e019      	b.n	8002b5a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	6919      	ldr	r1, [r3, #16]
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	4613      	mov	r3, r2
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	4413      	add	r3, r2
 8002b36:	2207      	movs	r2, #7
 8002b38:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	4019      	ands	r1, r3
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	6898      	ldr	r0, [r3, #8]
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	4413      	add	r3, r2
 8002b4e:	fa00 f203 	lsl.w	r2, r0, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	430a      	orrs	r2, r1
 8002b58:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2b10      	cmp	r3, #16
 8002b60:	d003      	beq.n	8002b6a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002b66:	2b11      	cmp	r3, #17
 8002b68:	d132      	bne.n	8002bd0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a1d      	ldr	r2, [pc, #116]	@ (8002be4 <HAL_ADC_ConfigChannel+0x1e4>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d125      	bne.n	8002bc0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d126      	bne.n	8002bd0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	689a      	ldr	r2, [r3, #8]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002b90:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2b10      	cmp	r3, #16
 8002b98:	d11a      	bne.n	8002bd0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b9a:	4b13      	ldr	r3, [pc, #76]	@ (8002be8 <HAL_ADC_ConfigChannel+0x1e8>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a13      	ldr	r2, [pc, #76]	@ (8002bec <HAL_ADC_ConfigChannel+0x1ec>)
 8002ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba4:	0c9a      	lsrs	r2, r3, #18
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	4413      	add	r3, r2
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002bb0:	e002      	b.n	8002bb8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1f9      	bne.n	8002bb2 <HAL_ADC_ConfigChannel+0x1b2>
 8002bbe:	e007      	b.n	8002bd0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bc4:	f043 0220 	orr.w	r2, r3, #32
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3714      	adds	r7, #20
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bc80      	pop	{r7}
 8002be2:	4770      	bx	lr
 8002be4:	40012400 	.word	0x40012400
 8002be8:	20000050 	.word	0x20000050
 8002bec:	431bde83 	.word	0x431bde83

08002bf0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d040      	beq.n	8002c90 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	689a      	ldr	r2, [r3, #8]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f042 0201 	orr.w	r2, r2, #1
 8002c1c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002c1e:	4b1f      	ldr	r3, [pc, #124]	@ (8002c9c <ADC_Enable+0xac>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a1f      	ldr	r2, [pc, #124]	@ (8002ca0 <ADC_Enable+0xb0>)
 8002c24:	fba2 2303 	umull	r2, r3, r2, r3
 8002c28:	0c9b      	lsrs	r3, r3, #18
 8002c2a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002c2c:	e002      	b.n	8002c34 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	3b01      	subs	r3, #1
 8002c32:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1f9      	bne.n	8002c2e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c3a:	f7ff fc51 	bl	80024e0 <HAL_GetTick>
 8002c3e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002c40:	e01f      	b.n	8002c82 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c42:	f7ff fc4d 	bl	80024e0 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d918      	bls.n	8002c82 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d011      	beq.n	8002c82 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c62:	f043 0210 	orr.w	r2, r3, #16
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c6e:	f043 0201 	orr.w	r2, r3, #1
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e007      	b.n	8002c92 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d1d8      	bne.n	8002c42 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	20000050 	.word	0x20000050
 8002ca0:	431bde83 	.word	0x431bde83

08002ca4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cac:	2300      	movs	r3, #0
 8002cae:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d12e      	bne.n	8002d1c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	689a      	ldr	r2, [r3, #8]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f022 0201 	bic.w	r2, r2, #1
 8002ccc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002cce:	f7ff fc07 	bl	80024e0 <HAL_GetTick>
 8002cd2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002cd4:	e01b      	b.n	8002d0e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002cd6:	f7ff fc03 	bl	80024e0 <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d914      	bls.n	8002d0e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d10d      	bne.n	8002d0e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cf6:	f043 0210 	orr.w	r2, r3, #16
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d02:	f043 0201 	orr.w	r2, r3, #1
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e007      	b.n	8002d1e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f003 0301 	and.w	r3, r3, #1
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d0dc      	beq.n	8002cd6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002d26:	b480      	push	{r7}
 8002d28:	b083      	sub	sp, #12
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002d2e:	bf00      	nop
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bc80      	pop	{r7}
 8002d36:	4770      	bx	lr

08002d38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b085      	sub	sp, #20
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f003 0307 	and.w	r3, r3, #7
 8002d46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d48:	4b0c      	ldr	r3, [pc, #48]	@ (8002d7c <__NVIC_SetPriorityGrouping+0x44>)
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d4e:	68ba      	ldr	r2, [r7, #8]
 8002d50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d54:	4013      	ands	r3, r2
 8002d56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d6a:	4a04      	ldr	r2, [pc, #16]	@ (8002d7c <__NVIC_SetPriorityGrouping+0x44>)
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	60d3      	str	r3, [r2, #12]
}
 8002d70:	bf00      	nop
 8002d72:	3714      	adds	r7, #20
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bc80      	pop	{r7}
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	e000ed00 	.word	0xe000ed00

08002d80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d84:	4b04      	ldr	r3, [pc, #16]	@ (8002d98 <__NVIC_GetPriorityGrouping+0x18>)
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	0a1b      	lsrs	r3, r3, #8
 8002d8a:	f003 0307 	and.w	r3, r3, #7
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bc80      	pop	{r7}
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	e000ed00 	.word	0xe000ed00

08002d9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	4603      	mov	r3, r0
 8002da4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	db0b      	blt.n	8002dc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dae:	79fb      	ldrb	r3, [r7, #7]
 8002db0:	f003 021f 	and.w	r2, r3, #31
 8002db4:	4906      	ldr	r1, [pc, #24]	@ (8002dd0 <__NVIC_EnableIRQ+0x34>)
 8002db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dba:	095b      	lsrs	r3, r3, #5
 8002dbc:	2001      	movs	r0, #1
 8002dbe:	fa00 f202 	lsl.w	r2, r0, r2
 8002dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002dc6:	bf00      	nop
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bc80      	pop	{r7}
 8002dce:	4770      	bx	lr
 8002dd0:	e000e100 	.word	0xe000e100

08002dd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	4603      	mov	r3, r0
 8002ddc:	6039      	str	r1, [r7, #0]
 8002dde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	db0a      	blt.n	8002dfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	b2da      	uxtb	r2, r3
 8002dec:	490c      	ldr	r1, [pc, #48]	@ (8002e20 <__NVIC_SetPriority+0x4c>)
 8002dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df2:	0112      	lsls	r2, r2, #4
 8002df4:	b2d2      	uxtb	r2, r2
 8002df6:	440b      	add	r3, r1
 8002df8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dfc:	e00a      	b.n	8002e14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	b2da      	uxtb	r2, r3
 8002e02:	4908      	ldr	r1, [pc, #32]	@ (8002e24 <__NVIC_SetPriority+0x50>)
 8002e04:	79fb      	ldrb	r3, [r7, #7]
 8002e06:	f003 030f 	and.w	r3, r3, #15
 8002e0a:	3b04      	subs	r3, #4
 8002e0c:	0112      	lsls	r2, r2, #4
 8002e0e:	b2d2      	uxtb	r2, r2
 8002e10:	440b      	add	r3, r1
 8002e12:	761a      	strb	r2, [r3, #24]
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bc80      	pop	{r7}
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	e000e100 	.word	0xe000e100
 8002e24:	e000ed00 	.word	0xe000ed00

08002e28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b089      	sub	sp, #36	@ 0x24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f003 0307 	and.w	r3, r3, #7
 8002e3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	f1c3 0307 	rsb	r3, r3, #7
 8002e42:	2b04      	cmp	r3, #4
 8002e44:	bf28      	it	cs
 8002e46:	2304      	movcs	r3, #4
 8002e48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	3304      	adds	r3, #4
 8002e4e:	2b06      	cmp	r3, #6
 8002e50:	d902      	bls.n	8002e58 <NVIC_EncodePriority+0x30>
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	3b03      	subs	r3, #3
 8002e56:	e000      	b.n	8002e5a <NVIC_EncodePriority+0x32>
 8002e58:	2300      	movs	r3, #0
 8002e5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	fa02 f303 	lsl.w	r3, r2, r3
 8002e66:	43da      	mvns	r2, r3
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	401a      	ands	r2, r3
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e70:	f04f 31ff 	mov.w	r1, #4294967295
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	fa01 f303 	lsl.w	r3, r1, r3
 8002e7a:	43d9      	mvns	r1, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e80:	4313      	orrs	r3, r2
         );
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3724      	adds	r7, #36	@ 0x24
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bc80      	pop	{r7}
 8002e8a:	4770      	bx	lr

08002e8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	3b01      	subs	r3, #1
 8002e98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e9c:	d301      	bcc.n	8002ea2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e00f      	b.n	8002ec2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ea2:	4a0a      	ldr	r2, [pc, #40]	@ (8002ecc <SysTick_Config+0x40>)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002eaa:	210f      	movs	r1, #15
 8002eac:	f04f 30ff 	mov.w	r0, #4294967295
 8002eb0:	f7ff ff90 	bl	8002dd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002eb4:	4b05      	ldr	r3, [pc, #20]	@ (8002ecc <SysTick_Config+0x40>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eba:	4b04      	ldr	r3, [pc, #16]	@ (8002ecc <SysTick_Config+0x40>)
 8002ebc:	2207      	movs	r2, #7
 8002ebe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	e000e010 	.word	0xe000e010

08002ed0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f7ff ff2d 	bl	8002d38 <__NVIC_SetPriorityGrouping>
}
 8002ede:	bf00      	nop
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b086      	sub	sp, #24
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	4603      	mov	r3, r0
 8002eee:	60b9      	str	r1, [r7, #8]
 8002ef0:	607a      	str	r2, [r7, #4]
 8002ef2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ef8:	f7ff ff42 	bl	8002d80 <__NVIC_GetPriorityGrouping>
 8002efc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	68b9      	ldr	r1, [r7, #8]
 8002f02:	6978      	ldr	r0, [r7, #20]
 8002f04:	f7ff ff90 	bl	8002e28 <NVIC_EncodePriority>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f0e:	4611      	mov	r1, r2
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7ff ff5f 	bl	8002dd4 <__NVIC_SetPriority>
}
 8002f16:	bf00      	nop
 8002f18:	3718      	adds	r7, #24
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f1e:	b580      	push	{r7, lr}
 8002f20:	b082      	sub	sp, #8
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	4603      	mov	r3, r0
 8002f26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7ff ff35 	bl	8002d9c <__NVIC_EnableIRQ>
}
 8002f32:	bf00      	nop
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b082      	sub	sp, #8
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f7ff ffa2 	bl	8002e8c <SysTick_Config>
 8002f48:	4603      	mov	r3, r0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f52:	b480      	push	{r7}
 8002f54:	b085      	sub	sp, #20
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d008      	beq.n	8002f7c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2204      	movs	r2, #4
 8002f6e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e020      	b.n	8002fbe <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f022 020e 	bic.w	r2, r2, #14
 8002f8a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f022 0201 	bic.w	r2, r2, #1
 8002f9a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fa4:	2101      	movs	r1, #1
 8002fa6:	fa01 f202 	lsl.w	r2, r1, r2
 8002faa:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3714      	adds	r7, #20
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bc80      	pop	{r7}
 8002fc6:	4770      	bx	lr

08002fc8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d005      	beq.n	8002fec <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2204      	movs	r2, #4
 8002fe4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	73fb      	strb	r3, [r7, #15]
 8002fea:	e051      	b.n	8003090 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f022 020e 	bic.w	r2, r2, #14
 8002ffa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f022 0201 	bic.w	r2, r2, #1
 800300a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a22      	ldr	r2, [pc, #136]	@ (800309c <HAL_DMA_Abort_IT+0xd4>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d029      	beq.n	800306a <HAL_DMA_Abort_IT+0xa2>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a21      	ldr	r2, [pc, #132]	@ (80030a0 <HAL_DMA_Abort_IT+0xd8>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d022      	beq.n	8003066 <HAL_DMA_Abort_IT+0x9e>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a1f      	ldr	r2, [pc, #124]	@ (80030a4 <HAL_DMA_Abort_IT+0xdc>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d01a      	beq.n	8003060 <HAL_DMA_Abort_IT+0x98>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a1e      	ldr	r2, [pc, #120]	@ (80030a8 <HAL_DMA_Abort_IT+0xe0>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d012      	beq.n	800305a <HAL_DMA_Abort_IT+0x92>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a1c      	ldr	r2, [pc, #112]	@ (80030ac <HAL_DMA_Abort_IT+0xe4>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d00a      	beq.n	8003054 <HAL_DMA_Abort_IT+0x8c>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a1b      	ldr	r2, [pc, #108]	@ (80030b0 <HAL_DMA_Abort_IT+0xe8>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d102      	bne.n	800304e <HAL_DMA_Abort_IT+0x86>
 8003048:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800304c:	e00e      	b.n	800306c <HAL_DMA_Abort_IT+0xa4>
 800304e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003052:	e00b      	b.n	800306c <HAL_DMA_Abort_IT+0xa4>
 8003054:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003058:	e008      	b.n	800306c <HAL_DMA_Abort_IT+0xa4>
 800305a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800305e:	e005      	b.n	800306c <HAL_DMA_Abort_IT+0xa4>
 8003060:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003064:	e002      	b.n	800306c <HAL_DMA_Abort_IT+0xa4>
 8003066:	2310      	movs	r3, #16
 8003068:	e000      	b.n	800306c <HAL_DMA_Abort_IT+0xa4>
 800306a:	2301      	movs	r3, #1
 800306c:	4a11      	ldr	r2, [pc, #68]	@ (80030b4 <HAL_DMA_Abort_IT+0xec>)
 800306e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003084:	2b00      	cmp	r3, #0
 8003086:	d003      	beq.n	8003090 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	4798      	blx	r3
    } 
  }
  return status;
 8003090:	7bfb      	ldrb	r3, [r7, #15]
}
 8003092:	4618      	mov	r0, r3
 8003094:	3710      	adds	r7, #16
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	40020008 	.word	0x40020008
 80030a0:	4002001c 	.word	0x4002001c
 80030a4:	40020030 	.word	0x40020030
 80030a8:	40020044 	.word	0x40020044
 80030ac:	40020058 	.word	0x40020058
 80030b0:	4002006c 	.word	0x4002006c
 80030b4:	40020000 	.word	0x40020000

080030b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b08b      	sub	sp, #44	@ 0x2c
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030c2:	2300      	movs	r3, #0
 80030c4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80030c6:	2300      	movs	r3, #0
 80030c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030ca:	e169      	b.n	80033a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80030cc:	2201      	movs	r2, #1
 80030ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d0:	fa02 f303 	lsl.w	r3, r2, r3
 80030d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	69fa      	ldr	r2, [r7, #28]
 80030dc:	4013      	ands	r3, r2
 80030de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	f040 8158 	bne.w	800339a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	4a9a      	ldr	r2, [pc, #616]	@ (8003358 <HAL_GPIO_Init+0x2a0>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d05e      	beq.n	80031b2 <HAL_GPIO_Init+0xfa>
 80030f4:	4a98      	ldr	r2, [pc, #608]	@ (8003358 <HAL_GPIO_Init+0x2a0>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d875      	bhi.n	80031e6 <HAL_GPIO_Init+0x12e>
 80030fa:	4a98      	ldr	r2, [pc, #608]	@ (800335c <HAL_GPIO_Init+0x2a4>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d058      	beq.n	80031b2 <HAL_GPIO_Init+0xfa>
 8003100:	4a96      	ldr	r2, [pc, #600]	@ (800335c <HAL_GPIO_Init+0x2a4>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d86f      	bhi.n	80031e6 <HAL_GPIO_Init+0x12e>
 8003106:	4a96      	ldr	r2, [pc, #600]	@ (8003360 <HAL_GPIO_Init+0x2a8>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d052      	beq.n	80031b2 <HAL_GPIO_Init+0xfa>
 800310c:	4a94      	ldr	r2, [pc, #592]	@ (8003360 <HAL_GPIO_Init+0x2a8>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d869      	bhi.n	80031e6 <HAL_GPIO_Init+0x12e>
 8003112:	4a94      	ldr	r2, [pc, #592]	@ (8003364 <HAL_GPIO_Init+0x2ac>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d04c      	beq.n	80031b2 <HAL_GPIO_Init+0xfa>
 8003118:	4a92      	ldr	r2, [pc, #584]	@ (8003364 <HAL_GPIO_Init+0x2ac>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d863      	bhi.n	80031e6 <HAL_GPIO_Init+0x12e>
 800311e:	4a92      	ldr	r2, [pc, #584]	@ (8003368 <HAL_GPIO_Init+0x2b0>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d046      	beq.n	80031b2 <HAL_GPIO_Init+0xfa>
 8003124:	4a90      	ldr	r2, [pc, #576]	@ (8003368 <HAL_GPIO_Init+0x2b0>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d85d      	bhi.n	80031e6 <HAL_GPIO_Init+0x12e>
 800312a:	2b12      	cmp	r3, #18
 800312c:	d82a      	bhi.n	8003184 <HAL_GPIO_Init+0xcc>
 800312e:	2b12      	cmp	r3, #18
 8003130:	d859      	bhi.n	80031e6 <HAL_GPIO_Init+0x12e>
 8003132:	a201      	add	r2, pc, #4	@ (adr r2, 8003138 <HAL_GPIO_Init+0x80>)
 8003134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003138:	080031b3 	.word	0x080031b3
 800313c:	0800318d 	.word	0x0800318d
 8003140:	0800319f 	.word	0x0800319f
 8003144:	080031e1 	.word	0x080031e1
 8003148:	080031e7 	.word	0x080031e7
 800314c:	080031e7 	.word	0x080031e7
 8003150:	080031e7 	.word	0x080031e7
 8003154:	080031e7 	.word	0x080031e7
 8003158:	080031e7 	.word	0x080031e7
 800315c:	080031e7 	.word	0x080031e7
 8003160:	080031e7 	.word	0x080031e7
 8003164:	080031e7 	.word	0x080031e7
 8003168:	080031e7 	.word	0x080031e7
 800316c:	080031e7 	.word	0x080031e7
 8003170:	080031e7 	.word	0x080031e7
 8003174:	080031e7 	.word	0x080031e7
 8003178:	080031e7 	.word	0x080031e7
 800317c:	08003195 	.word	0x08003195
 8003180:	080031a9 	.word	0x080031a9
 8003184:	4a79      	ldr	r2, [pc, #484]	@ (800336c <HAL_GPIO_Init+0x2b4>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d013      	beq.n	80031b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800318a:	e02c      	b.n	80031e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	623b      	str	r3, [r7, #32]
          break;
 8003192:	e029      	b.n	80031e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	3304      	adds	r3, #4
 800319a:	623b      	str	r3, [r7, #32]
          break;
 800319c:	e024      	b.n	80031e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	3308      	adds	r3, #8
 80031a4:	623b      	str	r3, [r7, #32]
          break;
 80031a6:	e01f      	b.n	80031e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	330c      	adds	r3, #12
 80031ae:	623b      	str	r3, [r7, #32]
          break;
 80031b0:	e01a      	b.n	80031e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d102      	bne.n	80031c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80031ba:	2304      	movs	r3, #4
 80031bc:	623b      	str	r3, [r7, #32]
          break;
 80031be:	e013      	b.n	80031e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d105      	bne.n	80031d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031c8:	2308      	movs	r3, #8
 80031ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	69fa      	ldr	r2, [r7, #28]
 80031d0:	611a      	str	r2, [r3, #16]
          break;
 80031d2:	e009      	b.n	80031e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031d4:	2308      	movs	r3, #8
 80031d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	69fa      	ldr	r2, [r7, #28]
 80031dc:	615a      	str	r2, [r3, #20]
          break;
 80031de:	e003      	b.n	80031e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80031e0:	2300      	movs	r3, #0
 80031e2:	623b      	str	r3, [r7, #32]
          break;
 80031e4:	e000      	b.n	80031e8 <HAL_GPIO_Init+0x130>
          break;
 80031e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	2bff      	cmp	r3, #255	@ 0xff
 80031ec:	d801      	bhi.n	80031f2 <HAL_GPIO_Init+0x13a>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	e001      	b.n	80031f6 <HAL_GPIO_Init+0x13e>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	3304      	adds	r3, #4
 80031f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	2bff      	cmp	r3, #255	@ 0xff
 80031fc:	d802      	bhi.n	8003204 <HAL_GPIO_Init+0x14c>
 80031fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	e002      	b.n	800320a <HAL_GPIO_Init+0x152>
 8003204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003206:	3b08      	subs	r3, #8
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	210f      	movs	r1, #15
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	fa01 f303 	lsl.w	r3, r1, r3
 8003218:	43db      	mvns	r3, r3
 800321a:	401a      	ands	r2, r3
 800321c:	6a39      	ldr	r1, [r7, #32]
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	fa01 f303 	lsl.w	r3, r1, r3
 8003224:	431a      	orrs	r2, r3
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003232:	2b00      	cmp	r3, #0
 8003234:	f000 80b1 	beq.w	800339a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003238:	4b4d      	ldr	r3, [pc, #308]	@ (8003370 <HAL_GPIO_Init+0x2b8>)
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	4a4c      	ldr	r2, [pc, #304]	@ (8003370 <HAL_GPIO_Init+0x2b8>)
 800323e:	f043 0301 	orr.w	r3, r3, #1
 8003242:	6193      	str	r3, [r2, #24]
 8003244:	4b4a      	ldr	r3, [pc, #296]	@ (8003370 <HAL_GPIO_Init+0x2b8>)
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	f003 0301 	and.w	r3, r3, #1
 800324c:	60bb      	str	r3, [r7, #8]
 800324e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003250:	4a48      	ldr	r2, [pc, #288]	@ (8003374 <HAL_GPIO_Init+0x2bc>)
 8003252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003254:	089b      	lsrs	r3, r3, #2
 8003256:	3302      	adds	r3, #2
 8003258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800325c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800325e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003260:	f003 0303 	and.w	r3, r3, #3
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	220f      	movs	r2, #15
 8003268:	fa02 f303 	lsl.w	r3, r2, r3
 800326c:	43db      	mvns	r3, r3
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	4013      	ands	r3, r2
 8003272:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	4a40      	ldr	r2, [pc, #256]	@ (8003378 <HAL_GPIO_Init+0x2c0>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d013      	beq.n	80032a4 <HAL_GPIO_Init+0x1ec>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4a3f      	ldr	r2, [pc, #252]	@ (800337c <HAL_GPIO_Init+0x2c4>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d00d      	beq.n	80032a0 <HAL_GPIO_Init+0x1e8>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a3e      	ldr	r2, [pc, #248]	@ (8003380 <HAL_GPIO_Init+0x2c8>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d007      	beq.n	800329c <HAL_GPIO_Init+0x1e4>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a3d      	ldr	r2, [pc, #244]	@ (8003384 <HAL_GPIO_Init+0x2cc>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d101      	bne.n	8003298 <HAL_GPIO_Init+0x1e0>
 8003294:	2303      	movs	r3, #3
 8003296:	e006      	b.n	80032a6 <HAL_GPIO_Init+0x1ee>
 8003298:	2304      	movs	r3, #4
 800329a:	e004      	b.n	80032a6 <HAL_GPIO_Init+0x1ee>
 800329c:	2302      	movs	r3, #2
 800329e:	e002      	b.n	80032a6 <HAL_GPIO_Init+0x1ee>
 80032a0:	2301      	movs	r3, #1
 80032a2:	e000      	b.n	80032a6 <HAL_GPIO_Init+0x1ee>
 80032a4:	2300      	movs	r3, #0
 80032a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032a8:	f002 0203 	and.w	r2, r2, #3
 80032ac:	0092      	lsls	r2, r2, #2
 80032ae:	4093      	lsls	r3, r2
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80032b6:	492f      	ldr	r1, [pc, #188]	@ (8003374 <HAL_GPIO_Init+0x2bc>)
 80032b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ba:	089b      	lsrs	r3, r3, #2
 80032bc:	3302      	adds	r3, #2
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d006      	beq.n	80032de <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80032d0:	4b2d      	ldr	r3, [pc, #180]	@ (8003388 <HAL_GPIO_Init+0x2d0>)
 80032d2:	689a      	ldr	r2, [r3, #8]
 80032d4:	492c      	ldr	r1, [pc, #176]	@ (8003388 <HAL_GPIO_Init+0x2d0>)
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	4313      	orrs	r3, r2
 80032da:	608b      	str	r3, [r1, #8]
 80032dc:	e006      	b.n	80032ec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80032de:	4b2a      	ldr	r3, [pc, #168]	@ (8003388 <HAL_GPIO_Init+0x2d0>)
 80032e0:	689a      	ldr	r2, [r3, #8]
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	43db      	mvns	r3, r3
 80032e6:	4928      	ldr	r1, [pc, #160]	@ (8003388 <HAL_GPIO_Init+0x2d0>)
 80032e8:	4013      	ands	r3, r2
 80032ea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d006      	beq.n	8003306 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80032f8:	4b23      	ldr	r3, [pc, #140]	@ (8003388 <HAL_GPIO_Init+0x2d0>)
 80032fa:	68da      	ldr	r2, [r3, #12]
 80032fc:	4922      	ldr	r1, [pc, #136]	@ (8003388 <HAL_GPIO_Init+0x2d0>)
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	4313      	orrs	r3, r2
 8003302:	60cb      	str	r3, [r1, #12]
 8003304:	e006      	b.n	8003314 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003306:	4b20      	ldr	r3, [pc, #128]	@ (8003388 <HAL_GPIO_Init+0x2d0>)
 8003308:	68da      	ldr	r2, [r3, #12]
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	43db      	mvns	r3, r3
 800330e:	491e      	ldr	r1, [pc, #120]	@ (8003388 <HAL_GPIO_Init+0x2d0>)
 8003310:	4013      	ands	r3, r2
 8003312:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d006      	beq.n	800332e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003320:	4b19      	ldr	r3, [pc, #100]	@ (8003388 <HAL_GPIO_Init+0x2d0>)
 8003322:	685a      	ldr	r2, [r3, #4]
 8003324:	4918      	ldr	r1, [pc, #96]	@ (8003388 <HAL_GPIO_Init+0x2d0>)
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	4313      	orrs	r3, r2
 800332a:	604b      	str	r3, [r1, #4]
 800332c:	e006      	b.n	800333c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800332e:	4b16      	ldr	r3, [pc, #88]	@ (8003388 <HAL_GPIO_Init+0x2d0>)
 8003330:	685a      	ldr	r2, [r3, #4]
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	43db      	mvns	r3, r3
 8003336:	4914      	ldr	r1, [pc, #80]	@ (8003388 <HAL_GPIO_Init+0x2d0>)
 8003338:	4013      	ands	r3, r2
 800333a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d021      	beq.n	800338c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003348:	4b0f      	ldr	r3, [pc, #60]	@ (8003388 <HAL_GPIO_Init+0x2d0>)
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	490e      	ldr	r1, [pc, #56]	@ (8003388 <HAL_GPIO_Init+0x2d0>)
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	4313      	orrs	r3, r2
 8003352:	600b      	str	r3, [r1, #0]
 8003354:	e021      	b.n	800339a <HAL_GPIO_Init+0x2e2>
 8003356:	bf00      	nop
 8003358:	10320000 	.word	0x10320000
 800335c:	10310000 	.word	0x10310000
 8003360:	10220000 	.word	0x10220000
 8003364:	10210000 	.word	0x10210000
 8003368:	10120000 	.word	0x10120000
 800336c:	10110000 	.word	0x10110000
 8003370:	40021000 	.word	0x40021000
 8003374:	40010000 	.word	0x40010000
 8003378:	40010800 	.word	0x40010800
 800337c:	40010c00 	.word	0x40010c00
 8003380:	40011000 	.word	0x40011000
 8003384:	40011400 	.word	0x40011400
 8003388:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800338c:	4b0b      	ldr	r3, [pc, #44]	@ (80033bc <HAL_GPIO_Init+0x304>)
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	43db      	mvns	r3, r3
 8003394:	4909      	ldr	r1, [pc, #36]	@ (80033bc <HAL_GPIO_Init+0x304>)
 8003396:	4013      	ands	r3, r2
 8003398:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800339a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800339c:	3301      	adds	r3, #1
 800339e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a6:	fa22 f303 	lsr.w	r3, r2, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	f47f ae8e 	bne.w	80030cc <HAL_GPIO_Init+0x14>
  }
}
 80033b0:	bf00      	nop
 80033b2:	bf00      	nop
 80033b4:	372c      	adds	r7, #44	@ 0x2c
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bc80      	pop	{r7}
 80033ba:	4770      	bx	lr
 80033bc:	40010400 	.word	0x40010400

080033c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b085      	sub	sp, #20
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	460b      	mov	r3, r1
 80033ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	689a      	ldr	r2, [r3, #8]
 80033d0:	887b      	ldrh	r3, [r7, #2]
 80033d2:	4013      	ands	r3, r2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d002      	beq.n	80033de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80033d8:	2301      	movs	r3, #1
 80033da:	73fb      	strb	r3, [r7, #15]
 80033dc:	e001      	b.n	80033e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033de:	2300      	movs	r3, #0
 80033e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80033e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3714      	adds	r7, #20
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bc80      	pop	{r7}
 80033ec:	4770      	bx	lr

080033ee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033ee:	b480      	push	{r7}
 80033f0:	b083      	sub	sp, #12
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
 80033f6:	460b      	mov	r3, r1
 80033f8:	807b      	strh	r3, [r7, #2]
 80033fa:	4613      	mov	r3, r2
 80033fc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033fe:	787b      	ldrb	r3, [r7, #1]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d003      	beq.n	800340c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003404:	887a      	ldrh	r2, [r7, #2]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800340a:	e003      	b.n	8003414 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800340c:	887b      	ldrh	r3, [r7, #2]
 800340e:	041a      	lsls	r2, r3, #16
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	611a      	str	r2, [r3, #16]
}
 8003414:	bf00      	nop
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	bc80      	pop	{r7}
 800341c:	4770      	bx	lr
	...

08003420 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	4603      	mov	r3, r0
 8003428:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800342a:	4b08      	ldr	r3, [pc, #32]	@ (800344c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800342c:	695a      	ldr	r2, [r3, #20]
 800342e:	88fb      	ldrh	r3, [r7, #6]
 8003430:	4013      	ands	r3, r2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d006      	beq.n	8003444 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003436:	4a05      	ldr	r2, [pc, #20]	@ (800344c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003438:	88fb      	ldrh	r3, [r7, #6]
 800343a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800343c:	88fb      	ldrh	r3, [r7, #6]
 800343e:	4618      	mov	r0, r3
 8003440:	f7fe fcfe 	bl	8001e40 <HAL_GPIO_EXTI_Callback>
  }
}
 8003444:	bf00      	nop
 8003446:	3708      	adds	r7, #8
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	40010400 	.word	0x40010400

08003450 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e12b      	b.n	80036ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b00      	cmp	r3, #0
 800346c:	d106      	bne.n	800347c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f7fc ffbc 	bl	80003f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2224      	movs	r2, #36	@ 0x24
 8003480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f022 0201 	bic.w	r2, r2, #1
 8003492:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80034a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80034b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80034b4:	f001 fbfc 	bl	8004cb0 <HAL_RCC_GetPCLK1Freq>
 80034b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	4a81      	ldr	r2, [pc, #516]	@ (80036c4 <HAL_I2C_Init+0x274>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d807      	bhi.n	80034d4 <HAL_I2C_Init+0x84>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	4a80      	ldr	r2, [pc, #512]	@ (80036c8 <HAL_I2C_Init+0x278>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	bf94      	ite	ls
 80034cc:	2301      	movls	r3, #1
 80034ce:	2300      	movhi	r3, #0
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	e006      	b.n	80034e2 <HAL_I2C_Init+0x92>
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	4a7d      	ldr	r2, [pc, #500]	@ (80036cc <HAL_I2C_Init+0x27c>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	bf94      	ite	ls
 80034dc:	2301      	movls	r3, #1
 80034de:	2300      	movhi	r3, #0
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e0e7      	b.n	80036ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	4a78      	ldr	r2, [pc, #480]	@ (80036d0 <HAL_I2C_Init+0x280>)
 80034ee:	fba2 2303 	umull	r2, r3, r2, r3
 80034f2:	0c9b      	lsrs	r3, r3, #18
 80034f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68ba      	ldr	r2, [r7, #8]
 8003506:	430a      	orrs	r2, r1
 8003508:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	6a1b      	ldr	r3, [r3, #32]
 8003510:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	4a6a      	ldr	r2, [pc, #424]	@ (80036c4 <HAL_I2C_Init+0x274>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d802      	bhi.n	8003524 <HAL_I2C_Init+0xd4>
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	3301      	adds	r3, #1
 8003522:	e009      	b.n	8003538 <HAL_I2C_Init+0xe8>
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800352a:	fb02 f303 	mul.w	r3, r2, r3
 800352e:	4a69      	ldr	r2, [pc, #420]	@ (80036d4 <HAL_I2C_Init+0x284>)
 8003530:	fba2 2303 	umull	r2, r3, r2, r3
 8003534:	099b      	lsrs	r3, r3, #6
 8003536:	3301      	adds	r3, #1
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	6812      	ldr	r2, [r2, #0]
 800353c:	430b      	orrs	r3, r1
 800353e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	69db      	ldr	r3, [r3, #28]
 8003546:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800354a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	495c      	ldr	r1, [pc, #368]	@ (80036c4 <HAL_I2C_Init+0x274>)
 8003554:	428b      	cmp	r3, r1
 8003556:	d819      	bhi.n	800358c <HAL_I2C_Init+0x13c>
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	1e59      	subs	r1, r3, #1
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	005b      	lsls	r3, r3, #1
 8003562:	fbb1 f3f3 	udiv	r3, r1, r3
 8003566:	1c59      	adds	r1, r3, #1
 8003568:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800356c:	400b      	ands	r3, r1
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00a      	beq.n	8003588 <HAL_I2C_Init+0x138>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	1e59      	subs	r1, r3, #1
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003580:	3301      	adds	r3, #1
 8003582:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003586:	e051      	b.n	800362c <HAL_I2C_Init+0x1dc>
 8003588:	2304      	movs	r3, #4
 800358a:	e04f      	b.n	800362c <HAL_I2C_Init+0x1dc>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d111      	bne.n	80035b8 <HAL_I2C_Init+0x168>
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	1e58      	subs	r0, r3, #1
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6859      	ldr	r1, [r3, #4]
 800359c:	460b      	mov	r3, r1
 800359e:	005b      	lsls	r3, r3, #1
 80035a0:	440b      	add	r3, r1
 80035a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80035a6:	3301      	adds	r3, #1
 80035a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	bf0c      	ite	eq
 80035b0:	2301      	moveq	r3, #1
 80035b2:	2300      	movne	r3, #0
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	e012      	b.n	80035de <HAL_I2C_Init+0x18e>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	1e58      	subs	r0, r3, #1
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6859      	ldr	r1, [r3, #4]
 80035c0:	460b      	mov	r3, r1
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	440b      	add	r3, r1
 80035c6:	0099      	lsls	r1, r3, #2
 80035c8:	440b      	add	r3, r1
 80035ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80035ce:	3301      	adds	r3, #1
 80035d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	bf0c      	ite	eq
 80035d8:	2301      	moveq	r3, #1
 80035da:	2300      	movne	r3, #0
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d001      	beq.n	80035e6 <HAL_I2C_Init+0x196>
 80035e2:	2301      	movs	r3, #1
 80035e4:	e022      	b.n	800362c <HAL_I2C_Init+0x1dc>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d10e      	bne.n	800360c <HAL_I2C_Init+0x1bc>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	1e58      	subs	r0, r3, #1
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6859      	ldr	r1, [r3, #4]
 80035f6:	460b      	mov	r3, r1
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	440b      	add	r3, r1
 80035fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003600:	3301      	adds	r3, #1
 8003602:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003606:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800360a:	e00f      	b.n	800362c <HAL_I2C_Init+0x1dc>
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	1e58      	subs	r0, r3, #1
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6859      	ldr	r1, [r3, #4]
 8003614:	460b      	mov	r3, r1
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	440b      	add	r3, r1
 800361a:	0099      	lsls	r1, r3, #2
 800361c:	440b      	add	r3, r1
 800361e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003622:	3301      	adds	r3, #1
 8003624:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003628:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800362c:	6879      	ldr	r1, [r7, #4]
 800362e:	6809      	ldr	r1, [r1, #0]
 8003630:	4313      	orrs	r3, r2
 8003632:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	69da      	ldr	r2, [r3, #28]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a1b      	ldr	r3, [r3, #32]
 8003646:	431a      	orrs	r2, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	430a      	orrs	r2, r1
 800364e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800365a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	6911      	ldr	r1, [r2, #16]
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	68d2      	ldr	r2, [r2, #12]
 8003666:	4311      	orrs	r1, r2
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	6812      	ldr	r2, [r2, #0]
 800366c:	430b      	orrs	r3, r1
 800366e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	695a      	ldr	r2, [r3, #20]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	431a      	orrs	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	430a      	orrs	r2, r1
 800368a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f042 0201 	orr.w	r2, r2, #1
 800369a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2220      	movs	r2, #32
 80036a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	000186a0 	.word	0x000186a0
 80036c8:	001e847f 	.word	0x001e847f
 80036cc:	003d08ff 	.word	0x003d08ff
 80036d0:	431bde83 	.word	0x431bde83
 80036d4:	10624dd3 	.word	0x10624dd3

080036d8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b088      	sub	sp, #32
 80036dc:	af02      	add	r7, sp, #8
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	4608      	mov	r0, r1
 80036e2:	4611      	mov	r1, r2
 80036e4:	461a      	mov	r2, r3
 80036e6:	4603      	mov	r3, r0
 80036e8:	817b      	strh	r3, [r7, #10]
 80036ea:	460b      	mov	r3, r1
 80036ec:	813b      	strh	r3, [r7, #8]
 80036ee:	4613      	mov	r3, r2
 80036f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80036f2:	f7fe fef5 	bl	80024e0 <HAL_GetTick>
 80036f6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	2b20      	cmp	r3, #32
 8003702:	f040 80d9 	bne.w	80038b8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	9300      	str	r3, [sp, #0]
 800370a:	2319      	movs	r3, #25
 800370c:	2201      	movs	r2, #1
 800370e:	496d      	ldr	r1, [pc, #436]	@ (80038c4 <HAL_I2C_Mem_Write+0x1ec>)
 8003710:	68f8      	ldr	r0, [r7, #12]
 8003712:	f000 fccd 	bl	80040b0 <I2C_WaitOnFlagUntilTimeout>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d001      	beq.n	8003720 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800371c:	2302      	movs	r3, #2
 800371e:	e0cc      	b.n	80038ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003726:	2b01      	cmp	r3, #1
 8003728:	d101      	bne.n	800372e <HAL_I2C_Mem_Write+0x56>
 800372a:	2302      	movs	r3, #2
 800372c:	e0c5      	b.n	80038ba <HAL_I2C_Mem_Write+0x1e2>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2201      	movs	r2, #1
 8003732:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0301 	and.w	r3, r3, #1
 8003740:	2b01      	cmp	r3, #1
 8003742:	d007      	beq.n	8003754 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f042 0201 	orr.w	r2, r2, #1
 8003752:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003762:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2221      	movs	r2, #33	@ 0x21
 8003768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2240      	movs	r2, #64	@ 0x40
 8003770:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2200      	movs	r2, #0
 8003778:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6a3a      	ldr	r2, [r7, #32]
 800377e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003784:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800378a:	b29a      	uxth	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	4a4d      	ldr	r2, [pc, #308]	@ (80038c8 <HAL_I2C_Mem_Write+0x1f0>)
 8003794:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003796:	88f8      	ldrh	r0, [r7, #6]
 8003798:	893a      	ldrh	r2, [r7, #8]
 800379a:	8979      	ldrh	r1, [r7, #10]
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	9301      	str	r3, [sp, #4]
 80037a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037a2:	9300      	str	r3, [sp, #0]
 80037a4:	4603      	mov	r3, r0
 80037a6:	68f8      	ldr	r0, [r7, #12]
 80037a8:	f000 fb04 	bl	8003db4 <I2C_RequestMemoryWrite>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d052      	beq.n	8003858 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e081      	b.n	80038ba <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037b6:	697a      	ldr	r2, [r7, #20]
 80037b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f000 fd92 	bl	80042e4 <I2C_WaitOnTXEFlagUntilTimeout>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00d      	beq.n	80037e2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ca:	2b04      	cmp	r3, #4
 80037cc:	d107      	bne.n	80037de <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e06b      	b.n	80038ba <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e6:	781a      	ldrb	r2, [r3, #0]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f2:	1c5a      	adds	r2, r3, #1
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037fc:	3b01      	subs	r3, #1
 80037fe:	b29a      	uxth	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003808:	b29b      	uxth	r3, r3
 800380a:	3b01      	subs	r3, #1
 800380c:	b29a      	uxth	r2, r3
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	695b      	ldr	r3, [r3, #20]
 8003818:	f003 0304 	and.w	r3, r3, #4
 800381c:	2b04      	cmp	r3, #4
 800381e:	d11b      	bne.n	8003858 <HAL_I2C_Mem_Write+0x180>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003824:	2b00      	cmp	r3, #0
 8003826:	d017      	beq.n	8003858 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800382c:	781a      	ldrb	r2, [r3, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003838:	1c5a      	adds	r2, r3, #1
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003842:	3b01      	subs	r3, #1
 8003844:	b29a      	uxth	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800384e:	b29b      	uxth	r3, r3
 8003850:	3b01      	subs	r3, #1
 8003852:	b29a      	uxth	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1aa      	bne.n	80037b6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003860:	697a      	ldr	r2, [r7, #20]
 8003862:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f000 fd85 	bl	8004374 <I2C_WaitOnBTFFlagUntilTimeout>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00d      	beq.n	800388c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003874:	2b04      	cmp	r3, #4
 8003876:	d107      	bne.n	8003888 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003886:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e016      	b.n	80038ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800389a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2220      	movs	r2, #32
 80038a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80038b4:	2300      	movs	r3, #0
 80038b6:	e000      	b.n	80038ba <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80038b8:	2302      	movs	r3, #2
  }
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3718      	adds	r7, #24
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	00100002 	.word	0x00100002
 80038c8:	ffff0000 	.word	0xffff0000

080038cc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b08c      	sub	sp, #48	@ 0x30
 80038d0:	af02      	add	r7, sp, #8
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	4608      	mov	r0, r1
 80038d6:	4611      	mov	r1, r2
 80038d8:	461a      	mov	r2, r3
 80038da:	4603      	mov	r3, r0
 80038dc:	817b      	strh	r3, [r7, #10]
 80038de:	460b      	mov	r3, r1
 80038e0:	813b      	strh	r3, [r7, #8]
 80038e2:	4613      	mov	r3, r2
 80038e4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80038e6:	2300      	movs	r3, #0
 80038e8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80038ea:	f7fe fdf9 	bl	80024e0 <HAL_GetTick>
 80038ee:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	2b20      	cmp	r3, #32
 80038fa:	f040 8250 	bne.w	8003d9e <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003900:	9300      	str	r3, [sp, #0]
 8003902:	2319      	movs	r3, #25
 8003904:	2201      	movs	r2, #1
 8003906:	4982      	ldr	r1, [pc, #520]	@ (8003b10 <HAL_I2C_Mem_Read+0x244>)
 8003908:	68f8      	ldr	r0, [r7, #12]
 800390a:	f000 fbd1 	bl	80040b0 <I2C_WaitOnFlagUntilTimeout>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d001      	beq.n	8003918 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003914:	2302      	movs	r3, #2
 8003916:	e243      	b.n	8003da0 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800391e:	2b01      	cmp	r3, #1
 8003920:	d101      	bne.n	8003926 <HAL_I2C_Mem_Read+0x5a>
 8003922:	2302      	movs	r3, #2
 8003924:	e23c      	b.n	8003da0 <HAL_I2C_Mem_Read+0x4d4>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0301 	and.w	r3, r3, #1
 8003938:	2b01      	cmp	r3, #1
 800393a:	d007      	beq.n	800394c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f042 0201 	orr.w	r2, r2, #1
 800394a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800395a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2222      	movs	r2, #34	@ 0x22
 8003960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2240      	movs	r2, #64	@ 0x40
 8003968:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003976:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800397c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003982:	b29a      	uxth	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	4a62      	ldr	r2, [pc, #392]	@ (8003b14 <HAL_I2C_Mem_Read+0x248>)
 800398c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800398e:	88f8      	ldrh	r0, [r7, #6]
 8003990:	893a      	ldrh	r2, [r7, #8]
 8003992:	8979      	ldrh	r1, [r7, #10]
 8003994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003996:	9301      	str	r3, [sp, #4]
 8003998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800399a:	9300      	str	r3, [sp, #0]
 800399c:	4603      	mov	r3, r0
 800399e:	68f8      	ldr	r0, [r7, #12]
 80039a0:	f000 fa9e 	bl	8003ee0 <I2C_RequestMemoryRead>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d001      	beq.n	80039ae <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e1f8      	b.n	8003da0 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d113      	bne.n	80039de <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039b6:	2300      	movs	r3, #0
 80039b8:	61fb      	str	r3, [r7, #28]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	695b      	ldr	r3, [r3, #20]
 80039c0:	61fb      	str	r3, [r7, #28]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	61fb      	str	r3, [r7, #28]
 80039ca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039da:	601a      	str	r2, [r3, #0]
 80039dc:	e1cc      	b.n	8003d78 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d11e      	bne.n	8003a24 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039f4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80039f6:	b672      	cpsid	i
}
 80039f8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039fa:	2300      	movs	r3, #0
 80039fc:	61bb      	str	r3, [r7, #24]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	695b      	ldr	r3, [r3, #20]
 8003a04:	61bb      	str	r3, [r7, #24]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	61bb      	str	r3, [r7, #24]
 8003a0e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a1e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003a20:	b662      	cpsie	i
}
 8003a22:	e035      	b.n	8003a90 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d11e      	bne.n	8003a6a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a3a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a3c:	b672      	cpsid	i
}
 8003a3e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a40:	2300      	movs	r3, #0
 8003a42:	617b      	str	r3, [r7, #20]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	617b      	str	r3, [r7, #20]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	617b      	str	r3, [r7, #20]
 8003a54:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a64:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003a66:	b662      	cpsie	i
}
 8003a68:	e012      	b.n	8003a90 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003a78:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	613b      	str	r3, [r7, #16]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	695b      	ldr	r3, [r3, #20]
 8003a84:	613b      	str	r3, [r7, #16]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	613b      	str	r3, [r7, #16]
 8003a8e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003a90:	e172      	b.n	8003d78 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a96:	2b03      	cmp	r3, #3
 8003a98:	f200 811f 	bhi.w	8003cda <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d123      	bne.n	8003aec <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aa4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003aa6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003aa8:	68f8      	ldr	r0, [r7, #12]
 8003aaa:	f000 fcab 	bl	8004404 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d001      	beq.n	8003ab8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e173      	b.n	8003da0 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	691a      	ldr	r2, [r3, #16]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac2:	b2d2      	uxtb	r2, r2
 8003ac4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aca:	1c5a      	adds	r2, r3, #1
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	b29a      	uxth	r2, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003aea:	e145      	b.n	8003d78 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d152      	bne.n	8003b9a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af6:	9300      	str	r3, [sp, #0]
 8003af8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003afa:	2200      	movs	r2, #0
 8003afc:	4906      	ldr	r1, [pc, #24]	@ (8003b18 <HAL_I2C_Mem_Read+0x24c>)
 8003afe:	68f8      	ldr	r0, [r7, #12]
 8003b00:	f000 fad6 	bl	80040b0 <I2C_WaitOnFlagUntilTimeout>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d008      	beq.n	8003b1c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e148      	b.n	8003da0 <HAL_I2C_Mem_Read+0x4d4>
 8003b0e:	bf00      	nop
 8003b10:	00100002 	.word	0x00100002
 8003b14:	ffff0000 	.word	0xffff0000
 8003b18:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003b1c:	b672      	cpsid	i
}
 8003b1e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	691a      	ldr	r2, [r3, #16]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b3a:	b2d2      	uxtb	r2, r2
 8003b3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b42:	1c5a      	adds	r2, r3, #1
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	b29a      	uxth	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003b62:	b662      	cpsie	i
}
 8003b64:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	691a      	ldr	r2, [r3, #16]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b70:	b2d2      	uxtb	r2, r2
 8003b72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b78:	1c5a      	adds	r2, r3, #1
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b82:	3b01      	subs	r3, #1
 8003b84:	b29a      	uxth	r2, r3
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	3b01      	subs	r3, #1
 8003b92:	b29a      	uxth	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003b98:	e0ee      	b.n	8003d78 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b9c:	9300      	str	r3, [sp, #0]
 8003b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	4981      	ldr	r1, [pc, #516]	@ (8003da8 <HAL_I2C_Mem_Read+0x4dc>)
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f000 fa83 	bl	80040b0 <I2C_WaitOnFlagUntilTimeout>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d001      	beq.n	8003bb4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e0f5      	b.n	8003da0 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bc2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003bc4:	b672      	cpsid	i
}
 8003bc6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	691a      	ldr	r2, [r3, #16]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd2:	b2d2      	uxtb	r2, r2
 8003bd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bda:	1c5a      	adds	r2, r3, #1
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003be4:	3b01      	subs	r3, #1
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	b29a      	uxth	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003bfa:	4b6c      	ldr	r3, [pc, #432]	@ (8003dac <HAL_I2C_Mem_Read+0x4e0>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	08db      	lsrs	r3, r3, #3
 8003c00:	4a6b      	ldr	r2, [pc, #428]	@ (8003db0 <HAL_I2C_Mem_Read+0x4e4>)
 8003c02:	fba2 2303 	umull	r2, r3, r2, r3
 8003c06:	0a1a      	lsrs	r2, r3, #8
 8003c08:	4613      	mov	r3, r2
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	4413      	add	r3, r2
 8003c0e:	00da      	lsls	r2, r3, #3
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003c14:	6a3b      	ldr	r3, [r7, #32]
 8003c16:	3b01      	subs	r3, #1
 8003c18:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003c1a:	6a3b      	ldr	r3, [r7, #32]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d118      	bne.n	8003c52 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2200      	movs	r2, #0
 8003c24:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2220      	movs	r2, #32
 8003c2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c3a:	f043 0220 	orr.w	r2, r3, #32
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003c42:	b662      	cpsie	i
}
 8003c44:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e0a6      	b.n	8003da0 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	695b      	ldr	r3, [r3, #20]
 8003c58:	f003 0304 	and.w	r3, r3, #4
 8003c5c:	2b04      	cmp	r3, #4
 8003c5e:	d1d9      	bne.n	8003c14 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	691a      	ldr	r2, [r3, #16]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c7a:	b2d2      	uxtb	r2, r2
 8003c7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c82:	1c5a      	adds	r2, r3, #1
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003ca2:	b662      	cpsie	i
}
 8003ca4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	691a      	ldr	r2, [r3, #16]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb0:	b2d2      	uxtb	r2, r2
 8003cb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb8:	1c5a      	adds	r2, r3, #1
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	b29a      	uxth	r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	b29a      	uxth	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003cd8:	e04e      	b.n	8003d78 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cdc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003cde:	68f8      	ldr	r0, [r7, #12]
 8003ce0:	f000 fb90 	bl	8004404 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d001      	beq.n	8003cee <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e058      	b.n	8003da0 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	691a      	ldr	r2, [r3, #16]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf8:	b2d2      	uxtb	r2, r2
 8003cfa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d00:	1c5a      	adds	r2, r3, #1
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	b29a      	uxth	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	b29a      	uxth	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	f003 0304 	and.w	r3, r3, #4
 8003d2a:	2b04      	cmp	r3, #4
 8003d2c:	d124      	bne.n	8003d78 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d32:	2b03      	cmp	r3, #3
 8003d34:	d107      	bne.n	8003d46 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d44:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	691a      	ldr	r2, [r3, #16]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d50:	b2d2      	uxtb	r2, r2
 8003d52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d58:	1c5a      	adds	r2, r3, #1
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d62:	3b01      	subs	r3, #1
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	3b01      	subs	r3, #1
 8003d72:	b29a      	uxth	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f47f ae88 	bne.w	8003a92 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2220      	movs	r2, #32
 8003d86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	e000      	b.n	8003da0 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8003d9e:	2302      	movs	r3, #2
  }
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3728      	adds	r7, #40	@ 0x28
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	00010004 	.word	0x00010004
 8003dac:	20000050 	.word	0x20000050
 8003db0:	14f8b589 	.word	0x14f8b589

08003db4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b088      	sub	sp, #32
 8003db8:	af02      	add	r7, sp, #8
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	4608      	mov	r0, r1
 8003dbe:	4611      	mov	r1, r2
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	817b      	strh	r3, [r7, #10]
 8003dc6:	460b      	mov	r3, r1
 8003dc8:	813b      	strh	r3, [r7, #8]
 8003dca:	4613      	mov	r3, r2
 8003dcc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ddc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de0:	9300      	str	r3, [sp, #0]
 8003de2:	6a3b      	ldr	r3, [r7, #32]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003dea:	68f8      	ldr	r0, [r7, #12]
 8003dec:	f000 f960 	bl	80040b0 <I2C_WaitOnFlagUntilTimeout>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00d      	beq.n	8003e12 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e04:	d103      	bne.n	8003e0e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e0c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e05f      	b.n	8003ed2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e12:	897b      	ldrh	r3, [r7, #10]
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	461a      	mov	r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003e20:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e24:	6a3a      	ldr	r2, [r7, #32]
 8003e26:	492d      	ldr	r1, [pc, #180]	@ (8003edc <I2C_RequestMemoryWrite+0x128>)
 8003e28:	68f8      	ldr	r0, [r7, #12]
 8003e2a:	f000 f9bb 	bl	80041a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d001      	beq.n	8003e38 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e04c      	b.n	8003ed2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e38:	2300      	movs	r3, #0
 8003e3a:	617b      	str	r3, [r7, #20]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	617b      	str	r3, [r7, #20]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	617b      	str	r3, [r7, #20]
 8003e4c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e50:	6a39      	ldr	r1, [r7, #32]
 8003e52:	68f8      	ldr	r0, [r7, #12]
 8003e54:	f000 fa46 	bl	80042e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00d      	beq.n	8003e7a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e62:	2b04      	cmp	r3, #4
 8003e64:	d107      	bne.n	8003e76 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e74:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e02b      	b.n	8003ed2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e7a:	88fb      	ldrh	r3, [r7, #6]
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d105      	bne.n	8003e8c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e80:	893b      	ldrh	r3, [r7, #8]
 8003e82:	b2da      	uxtb	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	611a      	str	r2, [r3, #16]
 8003e8a:	e021      	b.n	8003ed0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003e8c:	893b      	ldrh	r3, [r7, #8]
 8003e8e:	0a1b      	lsrs	r3, r3, #8
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	b2da      	uxtb	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e9c:	6a39      	ldr	r1, [r7, #32]
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f000 fa20 	bl	80042e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00d      	beq.n	8003ec6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eae:	2b04      	cmp	r3, #4
 8003eb0:	d107      	bne.n	8003ec2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ec0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e005      	b.n	8003ed2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ec6:	893b      	ldrh	r3, [r7, #8]
 8003ec8:	b2da      	uxtb	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3718      	adds	r7, #24
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	00010002 	.word	0x00010002

08003ee0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b088      	sub	sp, #32
 8003ee4:	af02      	add	r7, sp, #8
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	4608      	mov	r0, r1
 8003eea:	4611      	mov	r1, r2
 8003eec:	461a      	mov	r2, r3
 8003eee:	4603      	mov	r3, r0
 8003ef0:	817b      	strh	r3, [r7, #10]
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	813b      	strh	r3, [r7, #8]
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003f08:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f18:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f1c:	9300      	str	r3, [sp, #0]
 8003f1e:	6a3b      	ldr	r3, [r7, #32]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003f26:	68f8      	ldr	r0, [r7, #12]
 8003f28:	f000 f8c2 	bl	80040b0 <I2C_WaitOnFlagUntilTimeout>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00d      	beq.n	8003f4e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f40:	d103      	bne.n	8003f4a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f48:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e0aa      	b.n	80040a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f4e:	897b      	ldrh	r3, [r7, #10]
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	461a      	mov	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003f5c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f60:	6a3a      	ldr	r2, [r7, #32]
 8003f62:	4952      	ldr	r1, [pc, #328]	@ (80040ac <I2C_RequestMemoryRead+0x1cc>)
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	f000 f91d 	bl	80041a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d001      	beq.n	8003f74 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e097      	b.n	80040a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f74:	2300      	movs	r3, #0
 8003f76:	617b      	str	r3, [r7, #20]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	617b      	str	r3, [r7, #20]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	617b      	str	r3, [r7, #20]
 8003f88:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f8c:	6a39      	ldr	r1, [r7, #32]
 8003f8e:	68f8      	ldr	r0, [r7, #12]
 8003f90:	f000 f9a8 	bl	80042e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00d      	beq.n	8003fb6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f9e:	2b04      	cmp	r3, #4
 8003fa0:	d107      	bne.n	8003fb2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fb0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e076      	b.n	80040a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003fb6:	88fb      	ldrh	r3, [r7, #6]
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d105      	bne.n	8003fc8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003fbc:	893b      	ldrh	r3, [r7, #8]
 8003fbe:	b2da      	uxtb	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	611a      	str	r2, [r3, #16]
 8003fc6:	e021      	b.n	800400c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003fc8:	893b      	ldrh	r3, [r7, #8]
 8003fca:	0a1b      	lsrs	r3, r3, #8
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	b2da      	uxtb	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fd8:	6a39      	ldr	r1, [r7, #32]
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	f000 f982 	bl	80042e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00d      	beq.n	8004002 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fea:	2b04      	cmp	r3, #4
 8003fec:	d107      	bne.n	8003ffe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ffc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e050      	b.n	80040a4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004002:	893b      	ldrh	r3, [r7, #8]
 8004004:	b2da      	uxtb	r2, r3
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800400c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800400e:	6a39      	ldr	r1, [r7, #32]
 8004010:	68f8      	ldr	r0, [r7, #12]
 8004012:	f000 f967 	bl	80042e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00d      	beq.n	8004038 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004020:	2b04      	cmp	r3, #4
 8004022:	d107      	bne.n	8004034 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004032:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e035      	b.n	80040a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004046:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404a:	9300      	str	r3, [sp, #0]
 800404c:	6a3b      	ldr	r3, [r7, #32]
 800404e:	2200      	movs	r2, #0
 8004050:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004054:	68f8      	ldr	r0, [r7, #12]
 8004056:	f000 f82b 	bl	80040b0 <I2C_WaitOnFlagUntilTimeout>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00d      	beq.n	800407c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800406a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800406e:	d103      	bne.n	8004078 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004076:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e013      	b.n	80040a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800407c:	897b      	ldrh	r3, [r7, #10]
 800407e:	b2db      	uxtb	r3, r3
 8004080:	f043 0301 	orr.w	r3, r3, #1
 8004084:	b2da      	uxtb	r2, r3
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800408c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800408e:	6a3a      	ldr	r2, [r7, #32]
 8004090:	4906      	ldr	r1, [pc, #24]	@ (80040ac <I2C_RequestMemoryRead+0x1cc>)
 8004092:	68f8      	ldr	r0, [r7, #12]
 8004094:	f000 f886 	bl	80041a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d001      	beq.n	80040a2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e000      	b.n	80040a4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80040a2:	2300      	movs	r3, #0
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3718      	adds	r7, #24
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	00010002 	.word	0x00010002

080040b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	603b      	str	r3, [r7, #0]
 80040bc:	4613      	mov	r3, r2
 80040be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040c0:	e048      	b.n	8004154 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c8:	d044      	beq.n	8004154 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ca:	f7fe fa09 	bl	80024e0 <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	683a      	ldr	r2, [r7, #0]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d302      	bcc.n	80040e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d139      	bne.n	8004154 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	0c1b      	lsrs	r3, r3, #16
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d10d      	bne.n	8004106 <I2C_WaitOnFlagUntilTimeout+0x56>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	695b      	ldr	r3, [r3, #20]
 80040f0:	43da      	mvns	r2, r3
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	4013      	ands	r3, r2
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	bf0c      	ite	eq
 80040fc:	2301      	moveq	r3, #1
 80040fe:	2300      	movne	r3, #0
 8004100:	b2db      	uxtb	r3, r3
 8004102:	461a      	mov	r2, r3
 8004104:	e00c      	b.n	8004120 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	43da      	mvns	r2, r3
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	4013      	ands	r3, r2
 8004112:	b29b      	uxth	r3, r3
 8004114:	2b00      	cmp	r3, #0
 8004116:	bf0c      	ite	eq
 8004118:	2301      	moveq	r3, #1
 800411a:	2300      	movne	r3, #0
 800411c:	b2db      	uxtb	r3, r3
 800411e:	461a      	mov	r2, r3
 8004120:	79fb      	ldrb	r3, [r7, #7]
 8004122:	429a      	cmp	r2, r3
 8004124:	d116      	bne.n	8004154 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2220      	movs	r2, #32
 8004130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2200      	movs	r2, #0
 8004138:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004140:	f043 0220 	orr.w	r2, r3, #32
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e023      	b.n	800419c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	0c1b      	lsrs	r3, r3, #16
 8004158:	b2db      	uxtb	r3, r3
 800415a:	2b01      	cmp	r3, #1
 800415c:	d10d      	bne.n	800417a <I2C_WaitOnFlagUntilTimeout+0xca>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	695b      	ldr	r3, [r3, #20]
 8004164:	43da      	mvns	r2, r3
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	4013      	ands	r3, r2
 800416a:	b29b      	uxth	r3, r3
 800416c:	2b00      	cmp	r3, #0
 800416e:	bf0c      	ite	eq
 8004170:	2301      	moveq	r3, #1
 8004172:	2300      	movne	r3, #0
 8004174:	b2db      	uxtb	r3, r3
 8004176:	461a      	mov	r2, r3
 8004178:	e00c      	b.n	8004194 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	699b      	ldr	r3, [r3, #24]
 8004180:	43da      	mvns	r2, r3
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	4013      	ands	r3, r2
 8004186:	b29b      	uxth	r3, r3
 8004188:	2b00      	cmp	r3, #0
 800418a:	bf0c      	ite	eq
 800418c:	2301      	moveq	r3, #1
 800418e:	2300      	movne	r3, #0
 8004190:	b2db      	uxtb	r3, r3
 8004192:	461a      	mov	r2, r3
 8004194:	79fb      	ldrb	r3, [r7, #7]
 8004196:	429a      	cmp	r2, r3
 8004198:	d093      	beq.n	80040c2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	3710      	adds	r7, #16
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]
 80041b0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041b2:	e071      	b.n	8004298 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041c2:	d123      	bne.n	800420c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041d2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80041dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2220      	movs	r2, #32
 80041e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f8:	f043 0204 	orr.w	r2, r3, #4
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e067      	b.n	80042dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004212:	d041      	beq.n	8004298 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004214:	f7fe f964 	bl	80024e0 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	429a      	cmp	r2, r3
 8004222:	d302      	bcc.n	800422a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d136      	bne.n	8004298 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	0c1b      	lsrs	r3, r3, #16
 800422e:	b2db      	uxtb	r3, r3
 8004230:	2b01      	cmp	r3, #1
 8004232:	d10c      	bne.n	800424e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	43da      	mvns	r2, r3
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	4013      	ands	r3, r2
 8004240:	b29b      	uxth	r3, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	bf14      	ite	ne
 8004246:	2301      	movne	r3, #1
 8004248:	2300      	moveq	r3, #0
 800424a:	b2db      	uxtb	r3, r3
 800424c:	e00b      	b.n	8004266 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	699b      	ldr	r3, [r3, #24]
 8004254:	43da      	mvns	r2, r3
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	4013      	ands	r3, r2
 800425a:	b29b      	uxth	r3, r3
 800425c:	2b00      	cmp	r3, #0
 800425e:	bf14      	ite	ne
 8004260:	2301      	movne	r3, #1
 8004262:	2300      	moveq	r3, #0
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d016      	beq.n	8004298 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2200      	movs	r2, #0
 800426e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2220      	movs	r2, #32
 8004274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004284:	f043 0220 	orr.w	r2, r3, #32
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e021      	b.n	80042dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	0c1b      	lsrs	r3, r3, #16
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d10c      	bne.n	80042bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	695b      	ldr	r3, [r3, #20]
 80042a8:	43da      	mvns	r2, r3
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	4013      	ands	r3, r2
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	bf14      	ite	ne
 80042b4:	2301      	movne	r3, #1
 80042b6:	2300      	moveq	r3, #0
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	e00b      	b.n	80042d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	43da      	mvns	r2, r3
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	4013      	ands	r3, r2
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	bf14      	ite	ne
 80042ce:	2301      	movne	r3, #1
 80042d0:	2300      	moveq	r3, #0
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	f47f af6d 	bne.w	80041b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80042da:	2300      	movs	r3, #0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3710      	adds	r7, #16
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042f0:	e034      	b.n	800435c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042f2:	68f8      	ldr	r0, [r7, #12]
 80042f4:	f000 f8e3 	bl	80044be <I2C_IsAcknowledgeFailed>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d001      	beq.n	8004302 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e034      	b.n	800436c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004308:	d028      	beq.n	800435c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800430a:	f7fe f8e9 	bl	80024e0 <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	68ba      	ldr	r2, [r7, #8]
 8004316:	429a      	cmp	r2, r3
 8004318:	d302      	bcc.n	8004320 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d11d      	bne.n	800435c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	695b      	ldr	r3, [r3, #20]
 8004326:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800432a:	2b80      	cmp	r3, #128	@ 0x80
 800432c:	d016      	beq.n	800435c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2220      	movs	r2, #32
 8004338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004348:	f043 0220 	orr.w	r2, r3, #32
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2200      	movs	r2, #0
 8004354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e007      	b.n	800436c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004366:	2b80      	cmp	r3, #128	@ 0x80
 8004368:	d1c3      	bne.n	80042f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800436a:	2300      	movs	r3, #0
}
 800436c:	4618      	mov	r0, r3
 800436e:	3710      	adds	r7, #16
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004380:	e034      	b.n	80043ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	f000 f89b 	bl	80044be <I2C_IsAcknowledgeFailed>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d001      	beq.n	8004392 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e034      	b.n	80043fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004398:	d028      	beq.n	80043ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800439a:	f7fe f8a1 	bl	80024e0 <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	68ba      	ldr	r2, [r7, #8]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d302      	bcc.n	80043b0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d11d      	bne.n	80043ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	f003 0304 	and.w	r3, r3, #4
 80043ba:	2b04      	cmp	r3, #4
 80043bc:	d016      	beq.n	80043ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2220      	movs	r2, #32
 80043c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d8:	f043 0220 	orr.w	r2, r3, #32
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e007      	b.n	80043fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	f003 0304 	and.w	r3, r3, #4
 80043f6:	2b04      	cmp	r3, #4
 80043f8:	d1c3      	bne.n	8004382 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3710      	adds	r7, #16
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004410:	e049      	b.n	80044a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	695b      	ldr	r3, [r3, #20]
 8004418:	f003 0310 	and.w	r3, r3, #16
 800441c:	2b10      	cmp	r3, #16
 800441e:	d119      	bne.n	8004454 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f06f 0210 	mvn.w	r2, #16
 8004428:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2200      	movs	r2, #0
 800442e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2220      	movs	r2, #32
 8004434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2200      	movs	r2, #0
 800443c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e030      	b.n	80044b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004454:	f7fe f844 	bl	80024e0 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	68ba      	ldr	r2, [r7, #8]
 8004460:	429a      	cmp	r2, r3
 8004462:	d302      	bcc.n	800446a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d11d      	bne.n	80044a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	695b      	ldr	r3, [r3, #20]
 8004470:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004474:	2b40      	cmp	r3, #64	@ 0x40
 8004476:	d016      	beq.n	80044a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2220      	movs	r2, #32
 8004482:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004492:	f043 0220 	orr.w	r2, r3, #32
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e007      	b.n	80044b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	695b      	ldr	r3, [r3, #20]
 80044ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044b0:	2b40      	cmp	r3, #64	@ 0x40
 80044b2:	d1ae      	bne.n	8004412 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3710      	adds	r7, #16
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}

080044be <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80044be:	b480      	push	{r7}
 80044c0:	b083      	sub	sp, #12
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	695b      	ldr	r3, [r3, #20]
 80044cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044d4:	d11b      	bne.n	800450e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80044de:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2220      	movs	r2, #32
 80044ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044fa:	f043 0204 	orr.w	r2, r3, #4
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e000      	b.n	8004510 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	bc80      	pop	{r7}
 8004518:	4770      	bx	lr
	...

0800451c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b086      	sub	sp, #24
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d101      	bne.n	800452e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e272      	b.n	8004a14 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0301 	and.w	r3, r3, #1
 8004536:	2b00      	cmp	r3, #0
 8004538:	f000 8087 	beq.w	800464a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800453c:	4b92      	ldr	r3, [pc, #584]	@ (8004788 <HAL_RCC_OscConfig+0x26c>)
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f003 030c 	and.w	r3, r3, #12
 8004544:	2b04      	cmp	r3, #4
 8004546:	d00c      	beq.n	8004562 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004548:	4b8f      	ldr	r3, [pc, #572]	@ (8004788 <HAL_RCC_OscConfig+0x26c>)
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f003 030c 	and.w	r3, r3, #12
 8004550:	2b08      	cmp	r3, #8
 8004552:	d112      	bne.n	800457a <HAL_RCC_OscConfig+0x5e>
 8004554:	4b8c      	ldr	r3, [pc, #560]	@ (8004788 <HAL_RCC_OscConfig+0x26c>)
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800455c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004560:	d10b      	bne.n	800457a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004562:	4b89      	ldr	r3, [pc, #548]	@ (8004788 <HAL_RCC_OscConfig+0x26c>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d06c      	beq.n	8004648 <HAL_RCC_OscConfig+0x12c>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d168      	bne.n	8004648 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e24c      	b.n	8004a14 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004582:	d106      	bne.n	8004592 <HAL_RCC_OscConfig+0x76>
 8004584:	4b80      	ldr	r3, [pc, #512]	@ (8004788 <HAL_RCC_OscConfig+0x26c>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a7f      	ldr	r2, [pc, #508]	@ (8004788 <HAL_RCC_OscConfig+0x26c>)
 800458a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800458e:	6013      	str	r3, [r2, #0]
 8004590:	e02e      	b.n	80045f0 <HAL_RCC_OscConfig+0xd4>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d10c      	bne.n	80045b4 <HAL_RCC_OscConfig+0x98>
 800459a:	4b7b      	ldr	r3, [pc, #492]	@ (8004788 <HAL_RCC_OscConfig+0x26c>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a7a      	ldr	r2, [pc, #488]	@ (8004788 <HAL_RCC_OscConfig+0x26c>)
 80045a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045a4:	6013      	str	r3, [r2, #0]
 80045a6:	4b78      	ldr	r3, [pc, #480]	@ (8004788 <HAL_RCC_OscConfig+0x26c>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a77      	ldr	r2, [pc, #476]	@ (8004788 <HAL_RCC_OscConfig+0x26c>)
 80045ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80045b0:	6013      	str	r3, [r2, #0]
 80045b2:	e01d      	b.n	80045f0 <HAL_RCC_OscConfig+0xd4>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80045bc:	d10c      	bne.n	80045d8 <HAL_RCC_OscConfig+0xbc>
 80045be:	4b72      	ldr	r3, [pc, #456]	@ (8004788 <HAL_RCC_OscConfig+0x26c>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a71      	ldr	r2, [pc, #452]	@ (8004788 <HAL_RCC_OscConfig+0x26c>)
 80045c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045c8:	6013      	str	r3, [r2, #0]
 80045ca:	4b6f      	ldr	r3, [pc, #444]	@ (8004788 <HAL_RCC_OscConfig+0x26c>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a6e      	ldr	r2, [pc, #440]	@ (8004788 <HAL_RCC_OscConfig+0x26c>)
 80045d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045d4:	6013      	str	r3, [r2, #0]
 80045d6:	e00b      	b.n	80045f0 <HAL_RCC_OscConfig+0xd4>
 80045d8:	4b6b      	ldr	r3, [pc, #428]	@ (8004788 <HAL_RCC_OscConfig+0x26c>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a6a      	ldr	r2, [pc, #424]	@ (8004788 <HAL_RCC_OscConfig+0x26c>)
 80045de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045e2:	6013      	str	r3, [r2, #0]
 80045e4:	4b68      	ldr	r3, [pc, #416]	@ (8004788 <HAL_RCC_OscConfig+0x26c>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a67      	ldr	r2, [pc, #412]	@ (8004788 <HAL_RCC_OscConfig+0x26c>)
 80045ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80045ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d013      	beq.n	8004620 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045f8:	f7fd ff72 	bl	80024e0 <HAL_GetTick>
 80045fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045fe:	e008      	b.n	8004612 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004600:	f7fd ff6e 	bl	80024e0 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	2b64      	cmp	r3, #100	@ 0x64
 800460c:	d901      	bls.n	8004612 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e200      	b.n	8004a14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004612:	4b5d      	ldr	r3, [pc, #372]	@ (8004788 <HAL_RCC_OscConfig+0x26c>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d0f0      	beq.n	8004600 <HAL_RCC_OscConfig+0xe4>
 800461e:	e014      	b.n	800464a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004620:	f7fd ff5e 	bl	80024e0 <HAL_GetTick>
 8004624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004626:	e008      	b.n	800463a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004628:	f7fd ff5a 	bl	80024e0 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	2b64      	cmp	r3, #100	@ 0x64
 8004634:	d901      	bls.n	800463a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e1ec      	b.n	8004a14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800463a:	4b53      	ldr	r3, [pc, #332]	@ (8004788 <HAL_RCC_OscConfig+0x26c>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1f0      	bne.n	8004628 <HAL_RCC_OscConfig+0x10c>
 8004646:	e000      	b.n	800464a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004648:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0302 	and.w	r3, r3, #2
 8004652:	2b00      	cmp	r3, #0
 8004654:	d063      	beq.n	800471e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004656:	4b4c      	ldr	r3, [pc, #304]	@ (8004788 <HAL_RCC_OscConfig+0x26c>)
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f003 030c 	and.w	r3, r3, #12
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00b      	beq.n	800467a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004662:	4b49      	ldr	r3, [pc, #292]	@ (8004788 <HAL_RCC_OscConfig+0x26c>)
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f003 030c 	and.w	r3, r3, #12
 800466a:	2b08      	cmp	r3, #8
 800466c:	d11c      	bne.n	80046a8 <HAL_RCC_OscConfig+0x18c>
 800466e:	4b46      	ldr	r3, [pc, #280]	@ (8004788 <HAL_RCC_OscConfig+0x26c>)
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d116      	bne.n	80046a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800467a:	4b43      	ldr	r3, [pc, #268]	@ (8004788 <HAL_RCC_OscConfig+0x26c>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0302 	and.w	r3, r3, #2
 8004682:	2b00      	cmp	r3, #0
 8004684:	d005      	beq.n	8004692 <HAL_RCC_OscConfig+0x176>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	2b01      	cmp	r3, #1
 800468c:	d001      	beq.n	8004692 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e1c0      	b.n	8004a14 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004692:	4b3d      	ldr	r3, [pc, #244]	@ (8004788 <HAL_RCC_OscConfig+0x26c>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	00db      	lsls	r3, r3, #3
 80046a0:	4939      	ldr	r1, [pc, #228]	@ (8004788 <HAL_RCC_OscConfig+0x26c>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046a6:	e03a      	b.n	800471e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d020      	beq.n	80046f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046b0:	4b36      	ldr	r3, [pc, #216]	@ (800478c <HAL_RCC_OscConfig+0x270>)
 80046b2:	2201      	movs	r2, #1
 80046b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b6:	f7fd ff13 	bl	80024e0 <HAL_GetTick>
 80046ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046bc:	e008      	b.n	80046d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046be:	f7fd ff0f 	bl	80024e0 <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d901      	bls.n	80046d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	e1a1      	b.n	8004a14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046d0:	4b2d      	ldr	r3, [pc, #180]	@ (8004788 <HAL_RCC_OscConfig+0x26c>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0302 	and.w	r3, r3, #2
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d0f0      	beq.n	80046be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046dc:	4b2a      	ldr	r3, [pc, #168]	@ (8004788 <HAL_RCC_OscConfig+0x26c>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	695b      	ldr	r3, [r3, #20]
 80046e8:	00db      	lsls	r3, r3, #3
 80046ea:	4927      	ldr	r1, [pc, #156]	@ (8004788 <HAL_RCC_OscConfig+0x26c>)
 80046ec:	4313      	orrs	r3, r2
 80046ee:	600b      	str	r3, [r1, #0]
 80046f0:	e015      	b.n	800471e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046f2:	4b26      	ldr	r3, [pc, #152]	@ (800478c <HAL_RCC_OscConfig+0x270>)
 80046f4:	2200      	movs	r2, #0
 80046f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f8:	f7fd fef2 	bl	80024e0 <HAL_GetTick>
 80046fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046fe:	e008      	b.n	8004712 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004700:	f7fd feee 	bl	80024e0 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	2b02      	cmp	r3, #2
 800470c:	d901      	bls.n	8004712 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e180      	b.n	8004a14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004712:	4b1d      	ldr	r3, [pc, #116]	@ (8004788 <HAL_RCC_OscConfig+0x26c>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0302 	and.w	r3, r3, #2
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1f0      	bne.n	8004700 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0308 	and.w	r3, r3, #8
 8004726:	2b00      	cmp	r3, #0
 8004728:	d03a      	beq.n	80047a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d019      	beq.n	8004766 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004732:	4b17      	ldr	r3, [pc, #92]	@ (8004790 <HAL_RCC_OscConfig+0x274>)
 8004734:	2201      	movs	r2, #1
 8004736:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004738:	f7fd fed2 	bl	80024e0 <HAL_GetTick>
 800473c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800473e:	e008      	b.n	8004752 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004740:	f7fd fece 	bl	80024e0 <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	2b02      	cmp	r3, #2
 800474c:	d901      	bls.n	8004752 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e160      	b.n	8004a14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004752:	4b0d      	ldr	r3, [pc, #52]	@ (8004788 <HAL_RCC_OscConfig+0x26c>)
 8004754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004756:	f003 0302 	and.w	r3, r3, #2
 800475a:	2b00      	cmp	r3, #0
 800475c:	d0f0      	beq.n	8004740 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800475e:	2001      	movs	r0, #1
 8004760:	f000 face 	bl	8004d00 <RCC_Delay>
 8004764:	e01c      	b.n	80047a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004766:	4b0a      	ldr	r3, [pc, #40]	@ (8004790 <HAL_RCC_OscConfig+0x274>)
 8004768:	2200      	movs	r2, #0
 800476a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800476c:	f7fd feb8 	bl	80024e0 <HAL_GetTick>
 8004770:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004772:	e00f      	b.n	8004794 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004774:	f7fd feb4 	bl	80024e0 <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	2b02      	cmp	r3, #2
 8004780:	d908      	bls.n	8004794 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e146      	b.n	8004a14 <HAL_RCC_OscConfig+0x4f8>
 8004786:	bf00      	nop
 8004788:	40021000 	.word	0x40021000
 800478c:	42420000 	.word	0x42420000
 8004790:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004794:	4b92      	ldr	r3, [pc, #584]	@ (80049e0 <HAL_RCC_OscConfig+0x4c4>)
 8004796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004798:	f003 0302 	and.w	r3, r3, #2
 800479c:	2b00      	cmp	r3, #0
 800479e:	d1e9      	bne.n	8004774 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0304 	and.w	r3, r3, #4
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	f000 80a6 	beq.w	80048fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047ae:	2300      	movs	r3, #0
 80047b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047b2:	4b8b      	ldr	r3, [pc, #556]	@ (80049e0 <HAL_RCC_OscConfig+0x4c4>)
 80047b4:	69db      	ldr	r3, [r3, #28]
 80047b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d10d      	bne.n	80047da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047be:	4b88      	ldr	r3, [pc, #544]	@ (80049e0 <HAL_RCC_OscConfig+0x4c4>)
 80047c0:	69db      	ldr	r3, [r3, #28]
 80047c2:	4a87      	ldr	r2, [pc, #540]	@ (80049e0 <HAL_RCC_OscConfig+0x4c4>)
 80047c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047c8:	61d3      	str	r3, [r2, #28]
 80047ca:	4b85      	ldr	r3, [pc, #532]	@ (80049e0 <HAL_RCC_OscConfig+0x4c4>)
 80047cc:	69db      	ldr	r3, [r3, #28]
 80047ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047d2:	60bb      	str	r3, [r7, #8]
 80047d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047d6:	2301      	movs	r3, #1
 80047d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047da:	4b82      	ldr	r3, [pc, #520]	@ (80049e4 <HAL_RCC_OscConfig+0x4c8>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d118      	bne.n	8004818 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047e6:	4b7f      	ldr	r3, [pc, #508]	@ (80049e4 <HAL_RCC_OscConfig+0x4c8>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a7e      	ldr	r2, [pc, #504]	@ (80049e4 <HAL_RCC_OscConfig+0x4c8>)
 80047ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047f2:	f7fd fe75 	bl	80024e0 <HAL_GetTick>
 80047f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047f8:	e008      	b.n	800480c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047fa:	f7fd fe71 	bl	80024e0 <HAL_GetTick>
 80047fe:	4602      	mov	r2, r0
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	2b64      	cmp	r3, #100	@ 0x64
 8004806:	d901      	bls.n	800480c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e103      	b.n	8004a14 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800480c:	4b75      	ldr	r3, [pc, #468]	@ (80049e4 <HAL_RCC_OscConfig+0x4c8>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004814:	2b00      	cmp	r3, #0
 8004816:	d0f0      	beq.n	80047fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	2b01      	cmp	r3, #1
 800481e:	d106      	bne.n	800482e <HAL_RCC_OscConfig+0x312>
 8004820:	4b6f      	ldr	r3, [pc, #444]	@ (80049e0 <HAL_RCC_OscConfig+0x4c4>)
 8004822:	6a1b      	ldr	r3, [r3, #32]
 8004824:	4a6e      	ldr	r2, [pc, #440]	@ (80049e0 <HAL_RCC_OscConfig+0x4c4>)
 8004826:	f043 0301 	orr.w	r3, r3, #1
 800482a:	6213      	str	r3, [r2, #32]
 800482c:	e02d      	b.n	800488a <HAL_RCC_OscConfig+0x36e>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d10c      	bne.n	8004850 <HAL_RCC_OscConfig+0x334>
 8004836:	4b6a      	ldr	r3, [pc, #424]	@ (80049e0 <HAL_RCC_OscConfig+0x4c4>)
 8004838:	6a1b      	ldr	r3, [r3, #32]
 800483a:	4a69      	ldr	r2, [pc, #420]	@ (80049e0 <HAL_RCC_OscConfig+0x4c4>)
 800483c:	f023 0301 	bic.w	r3, r3, #1
 8004840:	6213      	str	r3, [r2, #32]
 8004842:	4b67      	ldr	r3, [pc, #412]	@ (80049e0 <HAL_RCC_OscConfig+0x4c4>)
 8004844:	6a1b      	ldr	r3, [r3, #32]
 8004846:	4a66      	ldr	r2, [pc, #408]	@ (80049e0 <HAL_RCC_OscConfig+0x4c4>)
 8004848:	f023 0304 	bic.w	r3, r3, #4
 800484c:	6213      	str	r3, [r2, #32]
 800484e:	e01c      	b.n	800488a <HAL_RCC_OscConfig+0x36e>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	2b05      	cmp	r3, #5
 8004856:	d10c      	bne.n	8004872 <HAL_RCC_OscConfig+0x356>
 8004858:	4b61      	ldr	r3, [pc, #388]	@ (80049e0 <HAL_RCC_OscConfig+0x4c4>)
 800485a:	6a1b      	ldr	r3, [r3, #32]
 800485c:	4a60      	ldr	r2, [pc, #384]	@ (80049e0 <HAL_RCC_OscConfig+0x4c4>)
 800485e:	f043 0304 	orr.w	r3, r3, #4
 8004862:	6213      	str	r3, [r2, #32]
 8004864:	4b5e      	ldr	r3, [pc, #376]	@ (80049e0 <HAL_RCC_OscConfig+0x4c4>)
 8004866:	6a1b      	ldr	r3, [r3, #32]
 8004868:	4a5d      	ldr	r2, [pc, #372]	@ (80049e0 <HAL_RCC_OscConfig+0x4c4>)
 800486a:	f043 0301 	orr.w	r3, r3, #1
 800486e:	6213      	str	r3, [r2, #32]
 8004870:	e00b      	b.n	800488a <HAL_RCC_OscConfig+0x36e>
 8004872:	4b5b      	ldr	r3, [pc, #364]	@ (80049e0 <HAL_RCC_OscConfig+0x4c4>)
 8004874:	6a1b      	ldr	r3, [r3, #32]
 8004876:	4a5a      	ldr	r2, [pc, #360]	@ (80049e0 <HAL_RCC_OscConfig+0x4c4>)
 8004878:	f023 0301 	bic.w	r3, r3, #1
 800487c:	6213      	str	r3, [r2, #32]
 800487e:	4b58      	ldr	r3, [pc, #352]	@ (80049e0 <HAL_RCC_OscConfig+0x4c4>)
 8004880:	6a1b      	ldr	r3, [r3, #32]
 8004882:	4a57      	ldr	r2, [pc, #348]	@ (80049e0 <HAL_RCC_OscConfig+0x4c4>)
 8004884:	f023 0304 	bic.w	r3, r3, #4
 8004888:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d015      	beq.n	80048be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004892:	f7fd fe25 	bl	80024e0 <HAL_GetTick>
 8004896:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004898:	e00a      	b.n	80048b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800489a:	f7fd fe21 	bl	80024e0 <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d901      	bls.n	80048b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e0b1      	b.n	8004a14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048b0:	4b4b      	ldr	r3, [pc, #300]	@ (80049e0 <HAL_RCC_OscConfig+0x4c4>)
 80048b2:	6a1b      	ldr	r3, [r3, #32]
 80048b4:	f003 0302 	and.w	r3, r3, #2
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d0ee      	beq.n	800489a <HAL_RCC_OscConfig+0x37e>
 80048bc:	e014      	b.n	80048e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048be:	f7fd fe0f 	bl	80024e0 <HAL_GetTick>
 80048c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048c4:	e00a      	b.n	80048dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048c6:	f7fd fe0b 	bl	80024e0 <HAL_GetTick>
 80048ca:	4602      	mov	r2, r0
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d901      	bls.n	80048dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e09b      	b.n	8004a14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048dc:	4b40      	ldr	r3, [pc, #256]	@ (80049e0 <HAL_RCC_OscConfig+0x4c4>)
 80048de:	6a1b      	ldr	r3, [r3, #32]
 80048e0:	f003 0302 	and.w	r3, r3, #2
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d1ee      	bne.n	80048c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80048e8:	7dfb      	ldrb	r3, [r7, #23]
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d105      	bne.n	80048fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048ee:	4b3c      	ldr	r3, [pc, #240]	@ (80049e0 <HAL_RCC_OscConfig+0x4c4>)
 80048f0:	69db      	ldr	r3, [r3, #28]
 80048f2:	4a3b      	ldr	r2, [pc, #236]	@ (80049e0 <HAL_RCC_OscConfig+0x4c4>)
 80048f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	69db      	ldr	r3, [r3, #28]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	f000 8087 	beq.w	8004a12 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004904:	4b36      	ldr	r3, [pc, #216]	@ (80049e0 <HAL_RCC_OscConfig+0x4c4>)
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f003 030c 	and.w	r3, r3, #12
 800490c:	2b08      	cmp	r3, #8
 800490e:	d061      	beq.n	80049d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	69db      	ldr	r3, [r3, #28]
 8004914:	2b02      	cmp	r3, #2
 8004916:	d146      	bne.n	80049a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004918:	4b33      	ldr	r3, [pc, #204]	@ (80049e8 <HAL_RCC_OscConfig+0x4cc>)
 800491a:	2200      	movs	r2, #0
 800491c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800491e:	f7fd fddf 	bl	80024e0 <HAL_GetTick>
 8004922:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004924:	e008      	b.n	8004938 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004926:	f7fd fddb 	bl	80024e0 <HAL_GetTick>
 800492a:	4602      	mov	r2, r0
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	2b02      	cmp	r3, #2
 8004932:	d901      	bls.n	8004938 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	e06d      	b.n	8004a14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004938:	4b29      	ldr	r3, [pc, #164]	@ (80049e0 <HAL_RCC_OscConfig+0x4c4>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004940:	2b00      	cmp	r3, #0
 8004942:	d1f0      	bne.n	8004926 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a1b      	ldr	r3, [r3, #32]
 8004948:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800494c:	d108      	bne.n	8004960 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800494e:	4b24      	ldr	r3, [pc, #144]	@ (80049e0 <HAL_RCC_OscConfig+0x4c4>)
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	4921      	ldr	r1, [pc, #132]	@ (80049e0 <HAL_RCC_OscConfig+0x4c4>)
 800495c:	4313      	orrs	r3, r2
 800495e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004960:	4b1f      	ldr	r3, [pc, #124]	@ (80049e0 <HAL_RCC_OscConfig+0x4c4>)
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a19      	ldr	r1, [r3, #32]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004970:	430b      	orrs	r3, r1
 8004972:	491b      	ldr	r1, [pc, #108]	@ (80049e0 <HAL_RCC_OscConfig+0x4c4>)
 8004974:	4313      	orrs	r3, r2
 8004976:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004978:	4b1b      	ldr	r3, [pc, #108]	@ (80049e8 <HAL_RCC_OscConfig+0x4cc>)
 800497a:	2201      	movs	r2, #1
 800497c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800497e:	f7fd fdaf 	bl	80024e0 <HAL_GetTick>
 8004982:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004984:	e008      	b.n	8004998 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004986:	f7fd fdab 	bl	80024e0 <HAL_GetTick>
 800498a:	4602      	mov	r2, r0
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	2b02      	cmp	r3, #2
 8004992:	d901      	bls.n	8004998 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e03d      	b.n	8004a14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004998:	4b11      	ldr	r3, [pc, #68]	@ (80049e0 <HAL_RCC_OscConfig+0x4c4>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d0f0      	beq.n	8004986 <HAL_RCC_OscConfig+0x46a>
 80049a4:	e035      	b.n	8004a12 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049a6:	4b10      	ldr	r3, [pc, #64]	@ (80049e8 <HAL_RCC_OscConfig+0x4cc>)
 80049a8:	2200      	movs	r2, #0
 80049aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049ac:	f7fd fd98 	bl	80024e0 <HAL_GetTick>
 80049b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049b2:	e008      	b.n	80049c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049b4:	f7fd fd94 	bl	80024e0 <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d901      	bls.n	80049c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e026      	b.n	8004a14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049c6:	4b06      	ldr	r3, [pc, #24]	@ (80049e0 <HAL_RCC_OscConfig+0x4c4>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d1f0      	bne.n	80049b4 <HAL_RCC_OscConfig+0x498>
 80049d2:	e01e      	b.n	8004a12 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	69db      	ldr	r3, [r3, #28]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d107      	bne.n	80049ec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e019      	b.n	8004a14 <HAL_RCC_OscConfig+0x4f8>
 80049e0:	40021000 	.word	0x40021000
 80049e4:	40007000 	.word	0x40007000
 80049e8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80049ec:	4b0b      	ldr	r3, [pc, #44]	@ (8004a1c <HAL_RCC_OscConfig+0x500>)
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a1b      	ldr	r3, [r3, #32]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d106      	bne.n	8004a0e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d001      	beq.n	8004a12 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e000      	b.n	8004a14 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3718      	adds	r7, #24
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	40021000 	.word	0x40021000

08004a20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d101      	bne.n	8004a34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e0d0      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a34:	4b6a      	ldr	r3, [pc, #424]	@ (8004be0 <HAL_RCC_ClockConfig+0x1c0>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0307 	and.w	r3, r3, #7
 8004a3c:	683a      	ldr	r2, [r7, #0]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d910      	bls.n	8004a64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a42:	4b67      	ldr	r3, [pc, #412]	@ (8004be0 <HAL_RCC_ClockConfig+0x1c0>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f023 0207 	bic.w	r2, r3, #7
 8004a4a:	4965      	ldr	r1, [pc, #404]	@ (8004be0 <HAL_RCC_ClockConfig+0x1c0>)
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a52:	4b63      	ldr	r3, [pc, #396]	@ (8004be0 <HAL_RCC_ClockConfig+0x1c0>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0307 	and.w	r3, r3, #7
 8004a5a:	683a      	ldr	r2, [r7, #0]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d001      	beq.n	8004a64 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e0b8      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0302 	and.w	r3, r3, #2
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d020      	beq.n	8004ab2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0304 	and.w	r3, r3, #4
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d005      	beq.n	8004a88 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a7c:	4b59      	ldr	r3, [pc, #356]	@ (8004be4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	4a58      	ldr	r2, [pc, #352]	@ (8004be4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a82:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004a86:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0308 	and.w	r3, r3, #8
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d005      	beq.n	8004aa0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a94:	4b53      	ldr	r3, [pc, #332]	@ (8004be4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	4a52      	ldr	r2, [pc, #328]	@ (8004be4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a9a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004a9e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004aa0:	4b50      	ldr	r3, [pc, #320]	@ (8004be4 <HAL_RCC_ClockConfig+0x1c4>)
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	494d      	ldr	r1, [pc, #308]	@ (8004be4 <HAL_RCC_ClockConfig+0x1c4>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d040      	beq.n	8004b40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d107      	bne.n	8004ad6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ac6:	4b47      	ldr	r3, [pc, #284]	@ (8004be4 <HAL_RCC_ClockConfig+0x1c4>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d115      	bne.n	8004afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e07f      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d107      	bne.n	8004aee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ade:	4b41      	ldr	r3, [pc, #260]	@ (8004be4 <HAL_RCC_ClockConfig+0x1c4>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d109      	bne.n	8004afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e073      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aee:	4b3d      	ldr	r3, [pc, #244]	@ (8004be4 <HAL_RCC_ClockConfig+0x1c4>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0302 	and.w	r3, r3, #2
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d101      	bne.n	8004afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e06b      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004afe:	4b39      	ldr	r3, [pc, #228]	@ (8004be4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f023 0203 	bic.w	r2, r3, #3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	4936      	ldr	r1, [pc, #216]	@ (8004be4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b10:	f7fd fce6 	bl	80024e0 <HAL_GetTick>
 8004b14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b16:	e00a      	b.n	8004b2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b18:	f7fd fce2 	bl	80024e0 <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d901      	bls.n	8004b2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e053      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b2e:	4b2d      	ldr	r3, [pc, #180]	@ (8004be4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f003 020c 	and.w	r2, r3, #12
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d1eb      	bne.n	8004b18 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b40:	4b27      	ldr	r3, [pc, #156]	@ (8004be0 <HAL_RCC_ClockConfig+0x1c0>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0307 	and.w	r3, r3, #7
 8004b48:	683a      	ldr	r2, [r7, #0]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d210      	bcs.n	8004b70 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b4e:	4b24      	ldr	r3, [pc, #144]	@ (8004be0 <HAL_RCC_ClockConfig+0x1c0>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f023 0207 	bic.w	r2, r3, #7
 8004b56:	4922      	ldr	r1, [pc, #136]	@ (8004be0 <HAL_RCC_ClockConfig+0x1c0>)
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b5e:	4b20      	ldr	r3, [pc, #128]	@ (8004be0 <HAL_RCC_ClockConfig+0x1c0>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0307 	and.w	r3, r3, #7
 8004b66:	683a      	ldr	r2, [r7, #0]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d001      	beq.n	8004b70 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e032      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0304 	and.w	r3, r3, #4
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d008      	beq.n	8004b8e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b7c:	4b19      	ldr	r3, [pc, #100]	@ (8004be4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	4916      	ldr	r1, [pc, #88]	@ (8004be4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0308 	and.w	r3, r3, #8
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d009      	beq.n	8004bae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b9a:	4b12      	ldr	r3, [pc, #72]	@ (8004be4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	00db      	lsls	r3, r3, #3
 8004ba8:	490e      	ldr	r1, [pc, #56]	@ (8004be4 <HAL_RCC_ClockConfig+0x1c4>)
 8004baa:	4313      	orrs	r3, r2
 8004bac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004bae:	f000 f821 	bl	8004bf4 <HAL_RCC_GetSysClockFreq>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	4b0b      	ldr	r3, [pc, #44]	@ (8004be4 <HAL_RCC_ClockConfig+0x1c4>)
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	091b      	lsrs	r3, r3, #4
 8004bba:	f003 030f 	and.w	r3, r3, #15
 8004bbe:	490a      	ldr	r1, [pc, #40]	@ (8004be8 <HAL_RCC_ClockConfig+0x1c8>)
 8004bc0:	5ccb      	ldrb	r3, [r1, r3]
 8004bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8004bc6:	4a09      	ldr	r2, [pc, #36]	@ (8004bec <HAL_RCC_ClockConfig+0x1cc>)
 8004bc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004bca:	4b09      	ldr	r3, [pc, #36]	@ (8004bf0 <HAL_RCC_ClockConfig+0x1d0>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7fd fc44 	bl	800245c <HAL_InitTick>

  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3710      	adds	r7, #16
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	40022000 	.word	0x40022000
 8004be4:	40021000 	.word	0x40021000
 8004be8:	08007d88 	.word	0x08007d88
 8004bec:	20000050 	.word	0x20000050
 8004bf0:	20000054 	.word	0x20000054

08004bf4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b087      	sub	sp, #28
 8004bf8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	60fb      	str	r3, [r7, #12]
 8004bfe:	2300      	movs	r3, #0
 8004c00:	60bb      	str	r3, [r7, #8]
 8004c02:	2300      	movs	r3, #0
 8004c04:	617b      	str	r3, [r7, #20]
 8004c06:	2300      	movs	r3, #0
 8004c08:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004c0e:	4b1e      	ldr	r3, [pc, #120]	@ (8004c88 <HAL_RCC_GetSysClockFreq+0x94>)
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f003 030c 	and.w	r3, r3, #12
 8004c1a:	2b04      	cmp	r3, #4
 8004c1c:	d002      	beq.n	8004c24 <HAL_RCC_GetSysClockFreq+0x30>
 8004c1e:	2b08      	cmp	r3, #8
 8004c20:	d003      	beq.n	8004c2a <HAL_RCC_GetSysClockFreq+0x36>
 8004c22:	e027      	b.n	8004c74 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004c24:	4b19      	ldr	r3, [pc, #100]	@ (8004c8c <HAL_RCC_GetSysClockFreq+0x98>)
 8004c26:	613b      	str	r3, [r7, #16]
      break;
 8004c28:	e027      	b.n	8004c7a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	0c9b      	lsrs	r3, r3, #18
 8004c2e:	f003 030f 	and.w	r3, r3, #15
 8004c32:	4a17      	ldr	r2, [pc, #92]	@ (8004c90 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004c34:	5cd3      	ldrb	r3, [r2, r3]
 8004c36:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d010      	beq.n	8004c64 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004c42:	4b11      	ldr	r3, [pc, #68]	@ (8004c88 <HAL_RCC_GetSysClockFreq+0x94>)
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	0c5b      	lsrs	r3, r3, #17
 8004c48:	f003 0301 	and.w	r3, r3, #1
 8004c4c:	4a11      	ldr	r2, [pc, #68]	@ (8004c94 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004c4e:	5cd3      	ldrb	r3, [r2, r3]
 8004c50:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a0d      	ldr	r2, [pc, #52]	@ (8004c8c <HAL_RCC_GetSysClockFreq+0x98>)
 8004c56:	fb03 f202 	mul.w	r2, r3, r2
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c60:	617b      	str	r3, [r7, #20]
 8004c62:	e004      	b.n	8004c6e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a0c      	ldr	r2, [pc, #48]	@ (8004c98 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004c68:	fb02 f303 	mul.w	r3, r2, r3
 8004c6c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	613b      	str	r3, [r7, #16]
      break;
 8004c72:	e002      	b.n	8004c7a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004c74:	4b05      	ldr	r3, [pc, #20]	@ (8004c8c <HAL_RCC_GetSysClockFreq+0x98>)
 8004c76:	613b      	str	r3, [r7, #16]
      break;
 8004c78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c7a:	693b      	ldr	r3, [r7, #16]
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	371c      	adds	r7, #28
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bc80      	pop	{r7}
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	40021000 	.word	0x40021000
 8004c8c:	007a1200 	.word	0x007a1200
 8004c90:	08007da0 	.word	0x08007da0
 8004c94:	08007db0 	.word	0x08007db0
 8004c98:	003d0900 	.word	0x003d0900

08004c9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ca0:	4b02      	ldr	r3, [pc, #8]	@ (8004cac <HAL_RCC_GetHCLKFreq+0x10>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bc80      	pop	{r7}
 8004caa:	4770      	bx	lr
 8004cac:	20000050 	.word	0x20000050

08004cb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004cb4:	f7ff fff2 	bl	8004c9c <HAL_RCC_GetHCLKFreq>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	4b05      	ldr	r3, [pc, #20]	@ (8004cd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	0a1b      	lsrs	r3, r3, #8
 8004cc0:	f003 0307 	and.w	r3, r3, #7
 8004cc4:	4903      	ldr	r1, [pc, #12]	@ (8004cd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cc6:	5ccb      	ldrb	r3, [r1, r3]
 8004cc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	40021000 	.word	0x40021000
 8004cd4:	08007d98 	.word	0x08007d98

08004cd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004cdc:	f7ff ffde 	bl	8004c9c <HAL_RCC_GetHCLKFreq>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	4b05      	ldr	r3, [pc, #20]	@ (8004cf8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	0adb      	lsrs	r3, r3, #11
 8004ce8:	f003 0307 	and.w	r3, r3, #7
 8004cec:	4903      	ldr	r1, [pc, #12]	@ (8004cfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cee:	5ccb      	ldrb	r3, [r1, r3]
 8004cf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	40021000 	.word	0x40021000
 8004cfc:	08007d98 	.word	0x08007d98

08004d00 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b085      	sub	sp, #20
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004d08:	4b0a      	ldr	r3, [pc, #40]	@ (8004d34 <RCC_Delay+0x34>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a0a      	ldr	r2, [pc, #40]	@ (8004d38 <RCC_Delay+0x38>)
 8004d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d12:	0a5b      	lsrs	r3, r3, #9
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	fb02 f303 	mul.w	r3, r2, r3
 8004d1a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004d1c:	bf00      	nop
  }
  while (Delay --);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	1e5a      	subs	r2, r3, #1
 8004d22:	60fa      	str	r2, [r7, #12]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d1f9      	bne.n	8004d1c <RCC_Delay+0x1c>
}
 8004d28:	bf00      	nop
 8004d2a:	bf00      	nop
 8004d2c:	3714      	adds	r7, #20
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bc80      	pop	{r7}
 8004d32:	4770      	bx	lr
 8004d34:	20000050 	.word	0x20000050
 8004d38:	10624dd3 	.word	0x10624dd3

08004d3c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b086      	sub	sp, #24
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004d44:	2300      	movs	r3, #0
 8004d46:	613b      	str	r3, [r7, #16]
 8004d48:	2300      	movs	r3, #0
 8004d4a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0301 	and.w	r3, r3, #1
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d07d      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d5c:	4b4f      	ldr	r3, [pc, #316]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d5e:	69db      	ldr	r3, [r3, #28]
 8004d60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d10d      	bne.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d68:	4b4c      	ldr	r3, [pc, #304]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d6a:	69db      	ldr	r3, [r3, #28]
 8004d6c:	4a4b      	ldr	r2, [pc, #300]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d72:	61d3      	str	r3, [r2, #28]
 8004d74:	4b49      	ldr	r3, [pc, #292]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d76:	69db      	ldr	r3, [r3, #28]
 8004d78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d7c:	60bb      	str	r3, [r7, #8]
 8004d7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d80:	2301      	movs	r3, #1
 8004d82:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d84:	4b46      	ldr	r3, [pc, #280]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d118      	bne.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d90:	4b43      	ldr	r3, [pc, #268]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a42      	ldr	r2, [pc, #264]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d9a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d9c:	f7fd fba0 	bl	80024e0 <HAL_GetTick>
 8004da0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004da2:	e008      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004da4:	f7fd fb9c 	bl	80024e0 <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	2b64      	cmp	r3, #100	@ 0x64
 8004db0:	d901      	bls.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e06d      	b.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004db6:	4b3a      	ldr	r3, [pc, #232]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d0f0      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004dc2:	4b36      	ldr	r3, [pc, #216]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dc4:	6a1b      	ldr	r3, [r3, #32]
 8004dc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004dca:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d02e      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d027      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004de0:	4b2e      	ldr	r3, [pc, #184]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004de2:	6a1b      	ldr	r3, [r3, #32]
 8004de4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004de8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004dea:	4b2e      	ldr	r3, [pc, #184]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004dec:	2201      	movs	r2, #1
 8004dee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004df0:	4b2c      	ldr	r3, [pc, #176]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004df2:	2200      	movs	r2, #0
 8004df4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004df6:	4a29      	ldr	r2, [pc, #164]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f003 0301 	and.w	r3, r3, #1
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d014      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e06:	f7fd fb6b 	bl	80024e0 <HAL_GetTick>
 8004e0a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e0c:	e00a      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e0e:	f7fd fb67 	bl	80024e0 <HAL_GetTick>
 8004e12:	4602      	mov	r2, r0
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d901      	bls.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e036      	b.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e24:	4b1d      	ldr	r3, [pc, #116]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e26:	6a1b      	ldr	r3, [r3, #32]
 8004e28:	f003 0302 	and.w	r3, r3, #2
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d0ee      	beq.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e30:	4b1a      	ldr	r3, [pc, #104]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e32:	6a1b      	ldr	r3, [r3, #32]
 8004e34:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	4917      	ldr	r1, [pc, #92]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004e42:	7dfb      	ldrb	r3, [r7, #23]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d105      	bne.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e48:	4b14      	ldr	r3, [pc, #80]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e4a:	69db      	ldr	r3, [r3, #28]
 8004e4c:	4a13      	ldr	r2, [pc, #76]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e52:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0302 	and.w	r3, r3, #2
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d008      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e60:	4b0e      	ldr	r3, [pc, #56]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	490b      	ldr	r1, [pc, #44]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0310 	and.w	r3, r3, #16
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d008      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e7e:	4b07      	ldr	r3, [pc, #28]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	4904      	ldr	r1, [pc, #16]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3718      	adds	r7, #24
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	40021000 	.word	0x40021000
 8004ea0:	40007000 	.word	0x40007000
 8004ea4:	42420440 	.word	0x42420440

08004ea8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d101      	bne.n	8004eba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e076      	b.n	8004fa8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d108      	bne.n	8004ed4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004eca:	d009      	beq.n	8004ee0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	61da      	str	r2, [r3, #28]
 8004ed2:	e005      	b.n	8004ee0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d106      	bne.n	8004f00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f7fd f87e 	bl	8001ffc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2202      	movs	r2, #2
 8004f04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f16:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004f28:	431a      	orrs	r2, r3
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f32:	431a      	orrs	r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	f003 0302 	and.w	r3, r3, #2
 8004f3c:	431a      	orrs	r2, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	f003 0301 	and.w	r3, r3, #1
 8004f46:	431a      	orrs	r2, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	699b      	ldr	r3, [r3, #24]
 8004f4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f50:	431a      	orrs	r2, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	69db      	ldr	r3, [r3, #28]
 8004f56:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f5a:	431a      	orrs	r2, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a1b      	ldr	r3, [r3, #32]
 8004f60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f64:	ea42 0103 	orr.w	r1, r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f6c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	430a      	orrs	r2, r1
 8004f76:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	699b      	ldr	r3, [r3, #24]
 8004f7c:	0c1a      	lsrs	r2, r3, #16
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f002 0204 	and.w	r2, r2, #4
 8004f86:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	69da      	ldr	r2, [r3, #28]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f96:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004fa6:	2300      	movs	r3, #0
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3708      	adds	r7, #8
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b088      	sub	sp, #32
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	60f8      	str	r0, [r7, #12]
 8004fb8:	60b9      	str	r1, [r7, #8]
 8004fba:	603b      	str	r3, [r7, #0]
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004fc0:	f7fd fa8e 	bl	80024e0 <HAL_GetTick>
 8004fc4:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004fc6:	88fb      	ldrh	r3, [r7, #6]
 8004fc8:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d001      	beq.n	8004fda <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004fd6:	2302      	movs	r3, #2
 8004fd8:	e12a      	b.n	8005230 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d002      	beq.n	8004fe6 <HAL_SPI_Transmit+0x36>
 8004fe0:	88fb      	ldrh	r3, [r7, #6]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d101      	bne.n	8004fea <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e122      	b.n	8005230 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d101      	bne.n	8004ff8 <HAL_SPI_Transmit+0x48>
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	e11b      	b.n	8005230 <HAL_SPI_Transmit+0x280>
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2203      	movs	r2, #3
 8005004:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2200      	movs	r2, #0
 800500c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	68ba      	ldr	r2, [r7, #8]
 8005012:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	88fa      	ldrh	r2, [r7, #6]
 8005018:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	88fa      	ldrh	r2, [r7, #6]
 800501e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2200      	movs	r2, #0
 8005024:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2200      	movs	r2, #0
 800502a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2200      	movs	r2, #0
 8005030:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2200      	movs	r2, #0
 8005036:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2200      	movs	r2, #0
 800503c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005046:	d10f      	bne.n	8005068 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005056:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005066:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005072:	2b40      	cmp	r3, #64	@ 0x40
 8005074:	d007      	beq.n	8005086 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005084:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800508e:	d152      	bne.n	8005136 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d002      	beq.n	800509e <HAL_SPI_Transmit+0xee>
 8005098:	8b7b      	ldrh	r3, [r7, #26]
 800509a:	2b01      	cmp	r3, #1
 800509c:	d145      	bne.n	800512a <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050a2:	881a      	ldrh	r2, [r3, #0]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ae:	1c9a      	adds	r2, r3, #2
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	3b01      	subs	r3, #1
 80050bc:	b29a      	uxth	r2, r3
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80050c2:	e032      	b.n	800512a <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	f003 0302 	and.w	r3, r3, #2
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d112      	bne.n	80050f8 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050d6:	881a      	ldrh	r2, [r3, #0]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050e2:	1c9a      	adds	r2, r3, #2
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	3b01      	subs	r3, #1
 80050f0:	b29a      	uxth	r2, r3
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80050f6:	e018      	b.n	800512a <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050f8:	f7fd f9f2 	bl	80024e0 <HAL_GetTick>
 80050fc:	4602      	mov	r2, r0
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	683a      	ldr	r2, [r7, #0]
 8005104:	429a      	cmp	r2, r3
 8005106:	d803      	bhi.n	8005110 <HAL_SPI_Transmit+0x160>
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800510e:	d102      	bne.n	8005116 <HAL_SPI_Transmit+0x166>
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d109      	bne.n	800512a <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2201      	movs	r2, #1
 800511a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2200      	movs	r2, #0
 8005122:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	e082      	b.n	8005230 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800512e:	b29b      	uxth	r3, r3
 8005130:	2b00      	cmp	r3, #0
 8005132:	d1c7      	bne.n	80050c4 <HAL_SPI_Transmit+0x114>
 8005134:	e053      	b.n	80051de <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d002      	beq.n	8005144 <HAL_SPI_Transmit+0x194>
 800513e:	8b7b      	ldrh	r3, [r7, #26]
 8005140:	2b01      	cmp	r3, #1
 8005142:	d147      	bne.n	80051d4 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	330c      	adds	r3, #12
 800514e:	7812      	ldrb	r2, [r2, #0]
 8005150:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005156:	1c5a      	adds	r2, r3, #1
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005160:	b29b      	uxth	r3, r3
 8005162:	3b01      	subs	r3, #1
 8005164:	b29a      	uxth	r2, r3
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800516a:	e033      	b.n	80051d4 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	f003 0302 	and.w	r3, r3, #2
 8005176:	2b02      	cmp	r3, #2
 8005178:	d113      	bne.n	80051a2 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	330c      	adds	r3, #12
 8005184:	7812      	ldrb	r2, [r2, #0]
 8005186:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800518c:	1c5a      	adds	r2, r3, #1
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005196:	b29b      	uxth	r3, r3
 8005198:	3b01      	subs	r3, #1
 800519a:	b29a      	uxth	r2, r3
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	86da      	strh	r2, [r3, #54]	@ 0x36
 80051a0:	e018      	b.n	80051d4 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051a2:	f7fd f99d 	bl	80024e0 <HAL_GetTick>
 80051a6:	4602      	mov	r2, r0
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	683a      	ldr	r2, [r7, #0]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d803      	bhi.n	80051ba <HAL_SPI_Transmit+0x20a>
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051b8:	d102      	bne.n	80051c0 <HAL_SPI_Transmit+0x210>
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d109      	bne.n	80051d4 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	e02d      	b.n	8005230 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051d8:	b29b      	uxth	r3, r3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d1c6      	bne.n	800516c <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80051de:	69fa      	ldr	r2, [r7, #28]
 80051e0:	6839      	ldr	r1, [r7, #0]
 80051e2:	68f8      	ldr	r0, [r7, #12]
 80051e4:	f000 f8b0 	bl	8005348 <SPI_EndRxTxTransaction>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d002      	beq.n	80051f4 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2220      	movs	r2, #32
 80051f2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d10a      	bne.n	8005212 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051fc:	2300      	movs	r3, #0
 80051fe:	617b      	str	r3, [r7, #20]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	617b      	str	r3, [r7, #20]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	617b      	str	r3, [r7, #20]
 8005210:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2201      	movs	r2, #1
 8005216:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005226:	2b00      	cmp	r3, #0
 8005228:	d001      	beq.n	800522e <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e000      	b.n	8005230 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800522e:	2300      	movs	r3, #0
  }
}
 8005230:	4618      	mov	r0, r3
 8005232:	3720      	adds	r7, #32
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b088      	sub	sp, #32
 800523c:	af00      	add	r7, sp, #0
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	603b      	str	r3, [r7, #0]
 8005244:	4613      	mov	r3, r2
 8005246:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005248:	f7fd f94a 	bl	80024e0 <HAL_GetTick>
 800524c:	4602      	mov	r2, r0
 800524e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005250:	1a9b      	subs	r3, r3, r2
 8005252:	683a      	ldr	r2, [r7, #0]
 8005254:	4413      	add	r3, r2
 8005256:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005258:	f7fd f942 	bl	80024e0 <HAL_GetTick>
 800525c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800525e:	4b39      	ldr	r3, [pc, #228]	@ (8005344 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	015b      	lsls	r3, r3, #5
 8005264:	0d1b      	lsrs	r3, r3, #20
 8005266:	69fa      	ldr	r2, [r7, #28]
 8005268:	fb02 f303 	mul.w	r3, r2, r3
 800526c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800526e:	e054      	b.n	800531a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005276:	d050      	beq.n	800531a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005278:	f7fd f932 	bl	80024e0 <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	69bb      	ldr	r3, [r7, #24]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	69fa      	ldr	r2, [r7, #28]
 8005284:	429a      	cmp	r2, r3
 8005286:	d902      	bls.n	800528e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d13d      	bne.n	800530a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	685a      	ldr	r2, [r3, #4]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800529c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80052a6:	d111      	bne.n	80052cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052b0:	d004      	beq.n	80052bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052ba:	d107      	bne.n	80052cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80052ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052d4:	d10f      	bne.n	80052f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80052e4:	601a      	str	r2, [r3, #0]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80052f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2201      	movs	r2, #1
 80052fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2200      	movs	r2, #0
 8005302:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e017      	b.n	800533a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d101      	bne.n	8005314 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005310:	2300      	movs	r3, #0
 8005312:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	3b01      	subs	r3, #1
 8005318:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	689a      	ldr	r2, [r3, #8]
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	4013      	ands	r3, r2
 8005324:	68ba      	ldr	r2, [r7, #8]
 8005326:	429a      	cmp	r2, r3
 8005328:	bf0c      	ite	eq
 800532a:	2301      	moveq	r3, #1
 800532c:	2300      	movne	r3, #0
 800532e:	b2db      	uxtb	r3, r3
 8005330:	461a      	mov	r2, r3
 8005332:	79fb      	ldrb	r3, [r7, #7]
 8005334:	429a      	cmp	r2, r3
 8005336:	d19b      	bne.n	8005270 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	3720      	adds	r7, #32
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	20000050 	.word	0x20000050

08005348 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b086      	sub	sp, #24
 800534c:	af02      	add	r7, sp, #8
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	9300      	str	r3, [sp, #0]
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	2201      	movs	r2, #1
 800535c:	2102      	movs	r1, #2
 800535e:	68f8      	ldr	r0, [r7, #12]
 8005360:	f7ff ff6a 	bl	8005238 <SPI_WaitFlagStateUntilTimeout>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d007      	beq.n	800537a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800536e:	f043 0220 	orr.w	r2, r3, #32
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	e013      	b.n	80053a2 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	9300      	str	r3, [sp, #0]
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	2200      	movs	r2, #0
 8005382:	2180      	movs	r1, #128	@ 0x80
 8005384:	68f8      	ldr	r0, [r7, #12]
 8005386:	f7ff ff57 	bl	8005238 <SPI_WaitFlagStateUntilTimeout>
 800538a:	4603      	mov	r3, r0
 800538c:	2b00      	cmp	r3, #0
 800538e:	d007      	beq.n	80053a0 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005394:	f043 0220 	orr.w	r2, r3, #32
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800539c:	2303      	movs	r3, #3
 800539e:	e000      	b.n	80053a2 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3710      	adds	r7, #16
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}

080053aa <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053aa:	b580      	push	{r7, lr}
 80053ac:	b082      	sub	sp, #8
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d101      	bne.n	80053bc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e042      	b.n	8005442 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d106      	bne.n	80053d6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f7fc ffb3 	bl	800233c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2224      	movs	r2, #36	@ 0x24
 80053da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68da      	ldr	r2, [r3, #12]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80053ec:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 fcd4 	bl	8005d9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	691a      	ldr	r2, [r3, #16]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005402:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	695a      	ldr	r2, [r3, #20]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005412:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68da      	ldr	r2, [r3, #12]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005422:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2220      	movs	r2, #32
 800542e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2220      	movs	r2, #32
 8005436:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005440:	2300      	movs	r3, #0
}
 8005442:	4618      	mov	r0, r3
 8005444:	3708      	adds	r7, #8
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}

0800544a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800544a:	b580      	push	{r7, lr}
 800544c:	b084      	sub	sp, #16
 800544e:	af00      	add	r7, sp, #0
 8005450:	60f8      	str	r0, [r7, #12]
 8005452:	60b9      	str	r1, [r7, #8]
 8005454:	4613      	mov	r3, r2
 8005456:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800545e:	b2db      	uxtb	r3, r3
 8005460:	2b20      	cmp	r3, #32
 8005462:	d112      	bne.n	800548a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d002      	beq.n	8005470 <HAL_UART_Receive_IT+0x26>
 800546a:	88fb      	ldrh	r3, [r7, #6]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d101      	bne.n	8005474 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	e00b      	b.n	800548c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2200      	movs	r2, #0
 8005478:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800547a:	88fb      	ldrh	r3, [r7, #6]
 800547c:	461a      	mov	r2, r3
 800547e:	68b9      	ldr	r1, [r7, #8]
 8005480:	68f8      	ldr	r0, [r7, #12]
 8005482:	f000 fab6 	bl	80059f2 <UART_Start_Receive_IT>
 8005486:	4603      	mov	r3, r0
 8005488:	e000      	b.n	800548c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800548a:	2302      	movs	r3, #2
  }
}
 800548c:	4618      	mov	r0, r3
 800548e:	3710      	adds	r7, #16
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b0ba      	sub	sp, #232	@ 0xe8
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	695b      	ldr	r3, [r3, #20]
 80054b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80054ba:	2300      	movs	r3, #0
 80054bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80054c0:	2300      	movs	r3, #0
 80054c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80054c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054ca:	f003 030f 	and.w	r3, r3, #15
 80054ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80054d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d10f      	bne.n	80054fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80054da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054de:	f003 0320 	and.w	r3, r3, #32
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d009      	beq.n	80054fa <HAL_UART_IRQHandler+0x66>
 80054e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054ea:	f003 0320 	and.w	r3, r3, #32
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d003      	beq.n	80054fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 fb93 	bl	8005c1e <UART_Receive_IT>
      return;
 80054f8:	e25b      	b.n	80059b2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80054fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80054fe:	2b00      	cmp	r3, #0
 8005500:	f000 80de 	beq.w	80056c0 <HAL_UART_IRQHandler+0x22c>
 8005504:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005508:	f003 0301 	and.w	r3, r3, #1
 800550c:	2b00      	cmp	r3, #0
 800550e:	d106      	bne.n	800551e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005514:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005518:	2b00      	cmp	r3, #0
 800551a:	f000 80d1 	beq.w	80056c0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800551e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005522:	f003 0301 	and.w	r3, r3, #1
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00b      	beq.n	8005542 <HAL_UART_IRQHandler+0xae>
 800552a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800552e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005532:	2b00      	cmp	r3, #0
 8005534:	d005      	beq.n	8005542 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800553a:	f043 0201 	orr.w	r2, r3, #1
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005546:	f003 0304 	and.w	r3, r3, #4
 800554a:	2b00      	cmp	r3, #0
 800554c:	d00b      	beq.n	8005566 <HAL_UART_IRQHandler+0xd2>
 800554e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005552:	f003 0301 	and.w	r3, r3, #1
 8005556:	2b00      	cmp	r3, #0
 8005558:	d005      	beq.n	8005566 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800555e:	f043 0202 	orr.w	r2, r3, #2
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800556a:	f003 0302 	and.w	r3, r3, #2
 800556e:	2b00      	cmp	r3, #0
 8005570:	d00b      	beq.n	800558a <HAL_UART_IRQHandler+0xf6>
 8005572:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005576:	f003 0301 	and.w	r3, r3, #1
 800557a:	2b00      	cmp	r3, #0
 800557c:	d005      	beq.n	800558a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005582:	f043 0204 	orr.w	r2, r3, #4
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800558a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800558e:	f003 0308 	and.w	r3, r3, #8
 8005592:	2b00      	cmp	r3, #0
 8005594:	d011      	beq.n	80055ba <HAL_UART_IRQHandler+0x126>
 8005596:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800559a:	f003 0320 	and.w	r3, r3, #32
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d105      	bne.n	80055ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80055a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055a6:	f003 0301 	and.w	r3, r3, #1
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d005      	beq.n	80055ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055b2:	f043 0208 	orr.w	r2, r3, #8
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055be:	2b00      	cmp	r3, #0
 80055c0:	f000 81f2 	beq.w	80059a8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80055c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055c8:	f003 0320 	and.w	r3, r3, #32
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d008      	beq.n	80055e2 <HAL_UART_IRQHandler+0x14e>
 80055d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055d4:	f003 0320 	and.w	r3, r3, #32
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d002      	beq.n	80055e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 fb1e 	bl	8005c1e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	695b      	ldr	r3, [r3, #20]
 80055e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	bf14      	ite	ne
 80055f0:	2301      	movne	r3, #1
 80055f2:	2300      	moveq	r3, #0
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055fe:	f003 0308 	and.w	r3, r3, #8
 8005602:	2b00      	cmp	r3, #0
 8005604:	d103      	bne.n	800560e <HAL_UART_IRQHandler+0x17a>
 8005606:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800560a:	2b00      	cmp	r3, #0
 800560c:	d04f      	beq.n	80056ae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 fa28 	bl	8005a64 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	695b      	ldr	r3, [r3, #20]
 800561a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800561e:	2b00      	cmp	r3, #0
 8005620:	d041      	beq.n	80056a6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	3314      	adds	r3, #20
 8005628:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800562c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005630:	e853 3f00 	ldrex	r3, [r3]
 8005634:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005638:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800563c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005640:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	3314      	adds	r3, #20
 800564a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800564e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005652:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005656:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800565a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800565e:	e841 2300 	strex	r3, r2, [r1]
 8005662:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005666:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d1d9      	bne.n	8005622 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005672:	2b00      	cmp	r3, #0
 8005674:	d013      	beq.n	800569e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800567a:	4a7e      	ldr	r2, [pc, #504]	@ (8005874 <HAL_UART_IRQHandler+0x3e0>)
 800567c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005682:	4618      	mov	r0, r3
 8005684:	f7fd fca0 	bl	8002fc8 <HAL_DMA_Abort_IT>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d016      	beq.n	80056bc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005692:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005698:	4610      	mov	r0, r2
 800569a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800569c:	e00e      	b.n	80056bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 f993 	bl	80059ca <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056a4:	e00a      	b.n	80056bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 f98f 	bl	80059ca <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056ac:	e006      	b.n	80056bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 f98b 	bl	80059ca <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80056ba:	e175      	b.n	80059a8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056bc:	bf00      	nop
    return;
 80056be:	e173      	b.n	80059a8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	f040 814f 	bne.w	8005968 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80056ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056ce:	f003 0310 	and.w	r3, r3, #16
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	f000 8148 	beq.w	8005968 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80056d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056dc:	f003 0310 	and.w	r3, r3, #16
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	f000 8141 	beq.w	8005968 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80056e6:	2300      	movs	r3, #0
 80056e8:	60bb      	str	r3, [r7, #8]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	60bb      	str	r3, [r7, #8]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	60bb      	str	r3, [r7, #8]
 80056fa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	695b      	ldr	r3, [r3, #20]
 8005702:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005706:	2b00      	cmp	r3, #0
 8005708:	f000 80b6 	beq.w	8005878 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005718:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800571c:	2b00      	cmp	r3, #0
 800571e:	f000 8145 	beq.w	80059ac <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005726:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800572a:	429a      	cmp	r2, r3
 800572c:	f080 813e 	bcs.w	80059ac <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005736:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	2b20      	cmp	r3, #32
 8005740:	f000 8088 	beq.w	8005854 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	330c      	adds	r3, #12
 800574a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800574e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005752:	e853 3f00 	ldrex	r3, [r3]
 8005756:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800575a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800575e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005762:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	330c      	adds	r3, #12
 800576c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005770:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005774:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005778:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800577c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005780:	e841 2300 	strex	r3, r2, [r1]
 8005784:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005788:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800578c:	2b00      	cmp	r3, #0
 800578e:	d1d9      	bne.n	8005744 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	3314      	adds	r3, #20
 8005796:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005798:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800579a:	e853 3f00 	ldrex	r3, [r3]
 800579e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80057a0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80057a2:	f023 0301 	bic.w	r3, r3, #1
 80057a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	3314      	adds	r3, #20
 80057b0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80057b4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80057b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ba:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80057bc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80057c0:	e841 2300 	strex	r3, r2, [r1]
 80057c4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80057c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d1e1      	bne.n	8005790 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	3314      	adds	r3, #20
 80057d2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80057d6:	e853 3f00 	ldrex	r3, [r3]
 80057da:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80057dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80057de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	3314      	adds	r3, #20
 80057ec:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80057f0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80057f2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80057f6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80057f8:	e841 2300 	strex	r3, r2, [r1]
 80057fc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80057fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005800:	2b00      	cmp	r3, #0
 8005802:	d1e3      	bne.n	80057cc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2220      	movs	r2, #32
 8005808:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	330c      	adds	r3, #12
 8005818:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800581a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800581c:	e853 3f00 	ldrex	r3, [r3]
 8005820:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005822:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005824:	f023 0310 	bic.w	r3, r3, #16
 8005828:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	330c      	adds	r3, #12
 8005832:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005836:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005838:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800583a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800583c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800583e:	e841 2300 	strex	r3, r2, [r1]
 8005842:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005844:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005846:	2b00      	cmp	r3, #0
 8005848:	d1e3      	bne.n	8005812 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800584e:	4618      	mov	r0, r3
 8005850:	f7fd fb7f 	bl	8002f52 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2202      	movs	r2, #2
 8005858:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005862:	b29b      	uxth	r3, r3
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	b29b      	uxth	r3, r3
 8005868:	4619      	mov	r1, r3
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 f8b6 	bl	80059dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005870:	e09c      	b.n	80059ac <HAL_UART_IRQHandler+0x518>
 8005872:	bf00      	nop
 8005874:	08005b29 	.word	0x08005b29
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005880:	b29b      	uxth	r3, r3
 8005882:	1ad3      	subs	r3, r2, r3
 8005884:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800588c:	b29b      	uxth	r3, r3
 800588e:	2b00      	cmp	r3, #0
 8005890:	f000 808e 	beq.w	80059b0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005894:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005898:	2b00      	cmp	r3, #0
 800589a:	f000 8089 	beq.w	80059b0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	330c      	adds	r3, #12
 80058a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058a8:	e853 3f00 	ldrex	r3, [r3]
 80058ac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80058ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058b4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	330c      	adds	r3, #12
 80058be:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80058c2:	647a      	str	r2, [r7, #68]	@ 0x44
 80058c4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80058c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80058ca:	e841 2300 	strex	r3, r2, [r1]
 80058ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80058d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d1e3      	bne.n	800589e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	3314      	adds	r3, #20
 80058dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e0:	e853 3f00 	ldrex	r3, [r3]
 80058e4:	623b      	str	r3, [r7, #32]
   return(result);
 80058e6:	6a3b      	ldr	r3, [r7, #32]
 80058e8:	f023 0301 	bic.w	r3, r3, #1
 80058ec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	3314      	adds	r3, #20
 80058f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80058fa:	633a      	str	r2, [r7, #48]	@ 0x30
 80058fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005900:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005902:	e841 2300 	strex	r3, r2, [r1]
 8005906:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800590a:	2b00      	cmp	r3, #0
 800590c:	d1e3      	bne.n	80058d6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2220      	movs	r2, #32
 8005912:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	330c      	adds	r3, #12
 8005922:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	e853 3f00 	ldrex	r3, [r3]
 800592a:	60fb      	str	r3, [r7, #12]
   return(result);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f023 0310 	bic.w	r3, r3, #16
 8005932:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	330c      	adds	r3, #12
 800593c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005940:	61fa      	str	r2, [r7, #28]
 8005942:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005944:	69b9      	ldr	r1, [r7, #24]
 8005946:	69fa      	ldr	r2, [r7, #28]
 8005948:	e841 2300 	strex	r3, r2, [r1]
 800594c:	617b      	str	r3, [r7, #20]
   return(result);
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d1e3      	bne.n	800591c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2202      	movs	r2, #2
 8005958:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800595a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800595e:	4619      	mov	r1, r3
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f000 f83b 	bl	80059dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005966:	e023      	b.n	80059b0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005968:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800596c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005970:	2b00      	cmp	r3, #0
 8005972:	d009      	beq.n	8005988 <HAL_UART_IRQHandler+0x4f4>
 8005974:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005978:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800597c:	2b00      	cmp	r3, #0
 800597e:	d003      	beq.n	8005988 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 f8e5 	bl	8005b50 <UART_Transmit_IT>
    return;
 8005986:	e014      	b.n	80059b2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005988:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800598c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005990:	2b00      	cmp	r3, #0
 8005992:	d00e      	beq.n	80059b2 <HAL_UART_IRQHandler+0x51e>
 8005994:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005998:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800599c:	2b00      	cmp	r3, #0
 800599e:	d008      	beq.n	80059b2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f000 f924 	bl	8005bee <UART_EndTransmit_IT>
    return;
 80059a6:	e004      	b.n	80059b2 <HAL_UART_IRQHandler+0x51e>
    return;
 80059a8:	bf00      	nop
 80059aa:	e002      	b.n	80059b2 <HAL_UART_IRQHandler+0x51e>
      return;
 80059ac:	bf00      	nop
 80059ae:	e000      	b.n	80059b2 <HAL_UART_IRQHandler+0x51e>
      return;
 80059b0:	bf00      	nop
  }
}
 80059b2:	37e8      	adds	r7, #232	@ 0xe8
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80059c0:	bf00      	nop
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bc80      	pop	{r7}
 80059c8:	4770      	bx	lr

080059ca <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80059ca:	b480      	push	{r7}
 80059cc:	b083      	sub	sp, #12
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80059d2:	bf00      	nop
 80059d4:	370c      	adds	r7, #12
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bc80      	pop	{r7}
 80059da:	4770      	bx	lr

080059dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	460b      	mov	r3, r1
 80059e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80059e8:	bf00      	nop
 80059ea:	370c      	adds	r7, #12
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bc80      	pop	{r7}
 80059f0:	4770      	bx	lr

080059f2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059f2:	b480      	push	{r7}
 80059f4:	b085      	sub	sp, #20
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	60f8      	str	r0, [r7, #12]
 80059fa:	60b9      	str	r1, [r7, #8]
 80059fc:	4613      	mov	r3, r2
 80059fe:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	68ba      	ldr	r2, [r7, #8]
 8005a04:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	88fa      	ldrh	r2, [r7, #6]
 8005a0a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	88fa      	ldrh	r2, [r7, #6]
 8005a10:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2200      	movs	r2, #0
 8005a16:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2222      	movs	r2, #34	@ 0x22
 8005a1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d007      	beq.n	8005a38 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68da      	ldr	r2, [r3, #12]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a36:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	695a      	ldr	r2, [r3, #20]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f042 0201 	orr.w	r2, r2, #1
 8005a46:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68da      	ldr	r2, [r3, #12]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f042 0220 	orr.w	r2, r2, #32
 8005a56:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005a58:	2300      	movs	r3, #0
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3714      	adds	r7, #20
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bc80      	pop	{r7}
 8005a62:	4770      	bx	lr

08005a64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b095      	sub	sp, #84	@ 0x54
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	330c      	adds	r3, #12
 8005a72:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a76:	e853 3f00 	ldrex	r3, [r3]
 8005a7a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a7e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	330c      	adds	r3, #12
 8005a8a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005a8c:	643a      	str	r2, [r7, #64]	@ 0x40
 8005a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a90:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005a92:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a94:	e841 2300 	strex	r3, r2, [r1]
 8005a98:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005a9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d1e5      	bne.n	8005a6c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	3314      	adds	r3, #20
 8005aa6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa8:	6a3b      	ldr	r3, [r7, #32]
 8005aaa:	e853 3f00 	ldrex	r3, [r3]
 8005aae:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	f023 0301 	bic.w	r3, r3, #1
 8005ab6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	3314      	adds	r3, #20
 8005abe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ac0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ac6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ac8:	e841 2300 	strex	r3, r2, [r1]
 8005acc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d1e5      	bne.n	8005aa0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d119      	bne.n	8005b10 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	330c      	adds	r3, #12
 8005ae2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	e853 3f00 	ldrex	r3, [r3]
 8005aea:	60bb      	str	r3, [r7, #8]
   return(result);
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	f023 0310 	bic.w	r3, r3, #16
 8005af2:	647b      	str	r3, [r7, #68]	@ 0x44
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	330c      	adds	r3, #12
 8005afa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005afc:	61ba      	str	r2, [r7, #24]
 8005afe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b00:	6979      	ldr	r1, [r7, #20]
 8005b02:	69ba      	ldr	r2, [r7, #24]
 8005b04:	e841 2300 	strex	r3, r2, [r1]
 8005b08:	613b      	str	r3, [r7, #16]
   return(result);
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d1e5      	bne.n	8005adc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2220      	movs	r2, #32
 8005b14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005b1e:	bf00      	nop
 8005b20:	3754      	adds	r7, #84	@ 0x54
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bc80      	pop	{r7}
 8005b26:	4770      	bx	lr

08005b28 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b34:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b42:	68f8      	ldr	r0, [r7, #12]
 8005b44:	f7ff ff41 	bl	80059ca <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b48:	bf00      	nop
 8005b4a:	3710      	adds	r7, #16
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b085      	sub	sp, #20
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	2b21      	cmp	r3, #33	@ 0x21
 8005b62:	d13e      	bne.n	8005be2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b6c:	d114      	bne.n	8005b98 <UART_Transmit_IT+0x48>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d110      	bne.n	8005b98 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a1b      	ldr	r3, [r3, #32]
 8005b7a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	881b      	ldrh	r3, [r3, #0]
 8005b80:	461a      	mov	r2, r3
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b8a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6a1b      	ldr	r3, [r3, #32]
 8005b90:	1c9a      	adds	r2, r3, #2
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	621a      	str	r2, [r3, #32]
 8005b96:	e008      	b.n	8005baa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6a1b      	ldr	r3, [r3, #32]
 8005b9c:	1c59      	adds	r1, r3, #1
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	6211      	str	r1, [r2, #32]
 8005ba2:	781a      	ldrb	r2, [r3, #0]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d10f      	bne.n	8005bde <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	68da      	ldr	r2, [r3, #12]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005bcc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	68da      	ldr	r2, [r3, #12]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005bdc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005bde:	2300      	movs	r3, #0
 8005be0:	e000      	b.n	8005be4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005be2:	2302      	movs	r3, #2
  }
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3714      	adds	r7, #20
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bc80      	pop	{r7}
 8005bec:	4770      	bx	lr

08005bee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005bee:	b580      	push	{r7, lr}
 8005bf0:	b082      	sub	sp, #8
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68da      	ldr	r2, [r3, #12]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c04:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2220      	movs	r2, #32
 8005c0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f7ff fed2 	bl	80059b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005c14:	2300      	movs	r3, #0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3708      	adds	r7, #8
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}

08005c1e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005c1e:	b580      	push	{r7, lr}
 8005c20:	b08c      	sub	sp, #48	@ 0x30
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	2b22      	cmp	r3, #34	@ 0x22
 8005c30:	f040 80ae 	bne.w	8005d90 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c3c:	d117      	bne.n	8005c6e <UART_Receive_IT+0x50>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	691b      	ldr	r3, [r3, #16]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d113      	bne.n	8005c6e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005c46:	2300      	movs	r3, #0
 8005c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c5c:	b29a      	uxth	r2, r3
 8005c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c60:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c66:	1c9a      	adds	r2, r3, #2
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	629a      	str	r2, [r3, #40]	@ 0x28
 8005c6c:	e026      	b.n	8005cbc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c72:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005c74:	2300      	movs	r3, #0
 8005c76:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c80:	d007      	beq.n	8005c92 <UART_Receive_IT+0x74>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d10a      	bne.n	8005ca0 <UART_Receive_IT+0x82>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d106      	bne.n	8005ca0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	b2da      	uxtb	r2, r3
 8005c9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c9c:	701a      	strb	r2, [r3, #0]
 8005c9e:	e008      	b.n	8005cb2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005cac:	b2da      	uxtb	r2, r3
 8005cae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cb0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cb6:	1c5a      	adds	r2, r3, #1
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	3b01      	subs	r3, #1
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	4619      	mov	r1, r3
 8005cca:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d15d      	bne.n	8005d8c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	68da      	ldr	r2, [r3, #12]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f022 0220 	bic.w	r2, r2, #32
 8005cde:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68da      	ldr	r2, [r3, #12]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005cee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	695a      	ldr	r2, [r3, #20]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f022 0201 	bic.w	r2, r2, #1
 8005cfe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2220      	movs	r2, #32
 8005d04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d135      	bne.n	8005d82 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	330c      	adds	r3, #12
 8005d22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	e853 3f00 	ldrex	r3, [r3]
 8005d2a:	613b      	str	r3, [r7, #16]
   return(result);
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	f023 0310 	bic.w	r3, r3, #16
 8005d32:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	330c      	adds	r3, #12
 8005d3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d3c:	623a      	str	r2, [r7, #32]
 8005d3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d40:	69f9      	ldr	r1, [r7, #28]
 8005d42:	6a3a      	ldr	r2, [r7, #32]
 8005d44:	e841 2300 	strex	r3, r2, [r1]
 8005d48:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d1e5      	bne.n	8005d1c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 0310 	and.w	r3, r3, #16
 8005d5a:	2b10      	cmp	r3, #16
 8005d5c:	d10a      	bne.n	8005d74 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d5e:	2300      	movs	r3, #0
 8005d60:	60fb      	str	r3, [r7, #12]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	60fb      	str	r3, [r7, #12]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	60fb      	str	r3, [r7, #12]
 8005d72:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005d78:	4619      	mov	r1, r3
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f7ff fe2e 	bl	80059dc <HAL_UARTEx_RxEventCallback>
 8005d80:	e002      	b.n	8005d88 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f7fc f8aa 	bl	8001edc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	e002      	b.n	8005d92 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	e000      	b.n	8005d92 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005d90:	2302      	movs	r3, #2
  }
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3730      	adds	r7, #48	@ 0x30
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
	...

08005d9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	68da      	ldr	r2, [r3, #12]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	430a      	orrs	r2, r1
 8005db8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	689a      	ldr	r2, [r3, #8]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	431a      	orrs	r2, r3
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	695b      	ldr	r3, [r3, #20]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005dd6:	f023 030c 	bic.w	r3, r3, #12
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	6812      	ldr	r2, [r2, #0]
 8005dde:	68b9      	ldr	r1, [r7, #8]
 8005de0:	430b      	orrs	r3, r1
 8005de2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	695b      	ldr	r3, [r3, #20]
 8005dea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	699a      	ldr	r2, [r3, #24]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	430a      	orrs	r2, r1
 8005df8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a2c      	ldr	r2, [pc, #176]	@ (8005eb0 <UART_SetConfig+0x114>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d103      	bne.n	8005e0c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005e04:	f7fe ff68 	bl	8004cd8 <HAL_RCC_GetPCLK2Freq>
 8005e08:	60f8      	str	r0, [r7, #12]
 8005e0a:	e002      	b.n	8005e12 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005e0c:	f7fe ff50 	bl	8004cb0 <HAL_RCC_GetPCLK1Freq>
 8005e10:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e12:	68fa      	ldr	r2, [r7, #12]
 8005e14:	4613      	mov	r3, r2
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	4413      	add	r3, r2
 8005e1a:	009a      	lsls	r2, r3, #2
 8005e1c:	441a      	add	r2, r3
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e28:	4a22      	ldr	r2, [pc, #136]	@ (8005eb4 <UART_SetConfig+0x118>)
 8005e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e2e:	095b      	lsrs	r3, r3, #5
 8005e30:	0119      	lsls	r1, r3, #4
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	4613      	mov	r3, r2
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	4413      	add	r3, r2
 8005e3a:	009a      	lsls	r2, r3, #2
 8005e3c:	441a      	add	r2, r3
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e48:	4b1a      	ldr	r3, [pc, #104]	@ (8005eb4 <UART_SetConfig+0x118>)
 8005e4a:	fba3 0302 	umull	r0, r3, r3, r2
 8005e4e:	095b      	lsrs	r3, r3, #5
 8005e50:	2064      	movs	r0, #100	@ 0x64
 8005e52:	fb00 f303 	mul.w	r3, r0, r3
 8005e56:	1ad3      	subs	r3, r2, r3
 8005e58:	011b      	lsls	r3, r3, #4
 8005e5a:	3332      	adds	r3, #50	@ 0x32
 8005e5c:	4a15      	ldr	r2, [pc, #84]	@ (8005eb4 <UART_SetConfig+0x118>)
 8005e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e62:	095b      	lsrs	r3, r3, #5
 8005e64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005e68:	4419      	add	r1, r3
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	4413      	add	r3, r2
 8005e72:	009a      	lsls	r2, r3, #2
 8005e74:	441a      	add	r2, r3
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e80:	4b0c      	ldr	r3, [pc, #48]	@ (8005eb4 <UART_SetConfig+0x118>)
 8005e82:	fba3 0302 	umull	r0, r3, r3, r2
 8005e86:	095b      	lsrs	r3, r3, #5
 8005e88:	2064      	movs	r0, #100	@ 0x64
 8005e8a:	fb00 f303 	mul.w	r3, r0, r3
 8005e8e:	1ad3      	subs	r3, r2, r3
 8005e90:	011b      	lsls	r3, r3, #4
 8005e92:	3332      	adds	r3, #50	@ 0x32
 8005e94:	4a07      	ldr	r2, [pc, #28]	@ (8005eb4 <UART_SetConfig+0x118>)
 8005e96:	fba2 2303 	umull	r2, r3, r2, r3
 8005e9a:	095b      	lsrs	r3, r3, #5
 8005e9c:	f003 020f 	and.w	r2, r3, #15
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	440a      	add	r2, r1
 8005ea6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005ea8:	bf00      	nop
 8005eaa:	3710      	adds	r7, #16
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}
 8005eb0:	40013800 	.word	0x40013800
 8005eb4:	51eb851f 	.word	0x51eb851f

08005eb8 <DEV_SPI_WriteByte>:
#include "DEV_Config.h"
#include "stm32f1xx_hal_spi.h"

extern SPI_HandleTypeDef hspi1;
void DEV_SPI_WriteByte(UBYTE value)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b082      	sub	sp, #8
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&hspi1, &value, 1, 1000);
 8005ec2:	1df9      	adds	r1, r7, #7
 8005ec4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005ec8:	2201      	movs	r2, #1
 8005eca:	4803      	ldr	r0, [pc, #12]	@ (8005ed8 <DEV_SPI_WriteByte+0x20>)
 8005ecc:	f7ff f870 	bl	8004fb0 <HAL_SPI_Transmit>
}
 8005ed0:	bf00      	nop
 8005ed2:	3708      	adds	r7, #8
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	200003b0 	.word	0x200003b0

08005edc <EPD_2IN9_V2_Reset>:
/******************************************************************************
function :	Software reset
parameter:
******************************************************************************/
static void EPD_2IN9_V2_Reset(void)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	2102      	movs	r1, #2
 8005ee4:	480b      	ldr	r0, [pc, #44]	@ (8005f14 <EPD_2IN9_V2_Reset+0x38>)
 8005ee6:	f7fd fa82 	bl	80033ee <HAL_GPIO_WritePin>
    DEV_Delay_ms(10);
 8005eea:	200a      	movs	r0, #10
 8005eec:	f7fc fb02 	bl	80024f4 <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 0);
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	2102      	movs	r1, #2
 8005ef4:	4807      	ldr	r0, [pc, #28]	@ (8005f14 <EPD_2IN9_V2_Reset+0x38>)
 8005ef6:	f7fd fa7a 	bl	80033ee <HAL_GPIO_WritePin>
    DEV_Delay_ms(2);
 8005efa:	2002      	movs	r0, #2
 8005efc:	f7fc fafa 	bl	80024f4 <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8005f00:	2201      	movs	r2, #1
 8005f02:	2102      	movs	r1, #2
 8005f04:	4803      	ldr	r0, [pc, #12]	@ (8005f14 <EPD_2IN9_V2_Reset+0x38>)
 8005f06:	f7fd fa72 	bl	80033ee <HAL_GPIO_WritePin>
    DEV_Delay_ms(10);
 8005f0a:	200a      	movs	r0, #10
 8005f0c:	f7fc faf2 	bl	80024f4 <HAL_Delay>
}
 8005f10:	bf00      	nop
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	40010800 	.word	0x40010800

08005f18 <EPD_2IN9_V2_SendCommand>:
function :	send command
parameter:
     Reg : Command register
******************************************************************************/
static void EPD_2IN9_V2_SendCommand(UBYTE Reg)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	4603      	mov	r3, r0
 8005f20:	71fb      	strb	r3, [r7, #7]
    DEV_Digital_Write(EPD_DC_PIN, 0);
 8005f22:	2200      	movs	r2, #0
 8005f24:	2104      	movs	r1, #4
 8005f26:	480a      	ldr	r0, [pc, #40]	@ (8005f50 <EPD_2IN9_V2_SendCommand+0x38>)
 8005f28:	f7fd fa61 	bl	80033ee <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	2108      	movs	r1, #8
 8005f30:	4807      	ldr	r0, [pc, #28]	@ (8005f50 <EPD_2IN9_V2_SendCommand+0x38>)
 8005f32:	f7fd fa5c 	bl	80033ee <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Reg);
 8005f36:	79fb      	ldrb	r3, [r7, #7]
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f7ff ffbd 	bl	8005eb8 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8005f3e:	2201      	movs	r2, #1
 8005f40:	2108      	movs	r1, #8
 8005f42:	4803      	ldr	r0, [pc, #12]	@ (8005f50 <EPD_2IN9_V2_SendCommand+0x38>)
 8005f44:	f7fd fa53 	bl	80033ee <HAL_GPIO_WritePin>
}
 8005f48:	bf00      	nop
 8005f4a:	3708      	adds	r7, #8
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	40010800 	.word	0x40010800

08005f54 <EPD_2IN9_V2_SendData>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void EPD_2IN9_V2_SendData(UBYTE Data)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	71fb      	strb	r3, [r7, #7]
    DEV_Digital_Write(EPD_DC_PIN, 1);
 8005f5e:	2201      	movs	r2, #1
 8005f60:	2104      	movs	r1, #4
 8005f62:	480a      	ldr	r0, [pc, #40]	@ (8005f8c <EPD_2IN9_V2_SendData+0x38>)
 8005f64:	f7fd fa43 	bl	80033ee <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8005f68:	2200      	movs	r2, #0
 8005f6a:	2108      	movs	r1, #8
 8005f6c:	4807      	ldr	r0, [pc, #28]	@ (8005f8c <EPD_2IN9_V2_SendData+0x38>)
 8005f6e:	f7fd fa3e 	bl	80033ee <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Data);
 8005f72:	79fb      	ldrb	r3, [r7, #7]
 8005f74:	4618      	mov	r0, r3
 8005f76:	f7ff ff9f 	bl	8005eb8 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	2108      	movs	r1, #8
 8005f7e:	4803      	ldr	r0, [pc, #12]	@ (8005f8c <EPD_2IN9_V2_SendData+0x38>)
 8005f80:	f7fd fa35 	bl	80033ee <HAL_GPIO_WritePin>
}
 8005f84:	bf00      	nop
 8005f86:	3708      	adds	r7, #8
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}
 8005f8c:	40010800 	.word	0x40010800

08005f90 <EPD_2IN9_V2_ReadBusy>:
/******************************************************************************
function :	Wait until the busy_pin goes LOW
parameter:
******************************************************************************/
void EPD_2IN9_V2_ReadBusy(void)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	af00      	add	r7, sp, #0
    Debug("e-Paper busy\r\n");
 8005f94:	480b      	ldr	r0, [pc, #44]	@ (8005fc4 <EPD_2IN9_V2_ReadBusy+0x34>)
 8005f96:	f001 f94b 	bl	8007230 <puts>
	while(1)
	{	 //=1 BUSY
		if(DEV_Digital_Read(EPD_BUSY_PIN)==0) 
 8005f9a:	2101      	movs	r1, #1
 8005f9c:	480a      	ldr	r0, [pc, #40]	@ (8005fc8 <EPD_2IN9_V2_ReadBusy+0x38>)
 8005f9e:	f7fd fa0f 	bl	80033c0 <HAL_GPIO_ReadPin>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d003      	beq.n	8005fb0 <EPD_2IN9_V2_ReadBusy+0x20>
			break;
		DEV_Delay_ms(50);
 8005fa8:	2032      	movs	r0, #50	@ 0x32
 8005faa:	f7fc faa3 	bl	80024f4 <HAL_Delay>
		if(DEV_Digital_Read(EPD_BUSY_PIN)==0) 
 8005fae:	e7f4      	b.n	8005f9a <EPD_2IN9_V2_ReadBusy+0xa>
			break;
 8005fb0:	bf00      	nop
	}
	DEV_Delay_ms(50);
 8005fb2:	2032      	movs	r0, #50	@ 0x32
 8005fb4:	f7fc fa9e 	bl	80024f4 <HAL_Delay>
    Debug("e-Paper busy release\r\n");
 8005fb8:	4804      	ldr	r0, [pc, #16]	@ (8005fcc <EPD_2IN9_V2_ReadBusy+0x3c>)
 8005fba:	f001 f939 	bl	8007230 <puts>
}
 8005fbe:	bf00      	nop
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	08007818 	.word	0x08007818
 8005fc8:	40010800 	.word	0x40010800
 8005fcc:	08007830 	.word	0x08007830

08005fd0 <EPD_2IN9_V2_LUT>:

static void EPD_2IN9_V2_LUT(UBYTE *lut)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b084      	sub	sp, #16
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
	UBYTE count;
	EPD_2IN9_V2_SendCommand(0x32);
 8005fd8:	2032      	movs	r0, #50	@ 0x32
 8005fda:	f7ff ff9d 	bl	8005f18 <EPD_2IN9_V2_SendCommand>
	for(count=0; count<153; count++) 
 8005fde:	2300      	movs	r3, #0
 8005fe0:	73fb      	strb	r3, [r7, #15]
 8005fe2:	e009      	b.n	8005ff8 <EPD_2IN9_V2_LUT+0x28>
		EPD_2IN9_V2_SendData(lut[count]); 
 8005fe4:	7bfb      	ldrb	r3, [r7, #15]
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	4413      	add	r3, r2
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	4618      	mov	r0, r3
 8005fee:	f7ff ffb1 	bl	8005f54 <EPD_2IN9_V2_SendData>
	for(count=0; count<153; count++) 
 8005ff2:	7bfb      	ldrb	r3, [r7, #15]
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	73fb      	strb	r3, [r7, #15]
 8005ff8:	7bfb      	ldrb	r3, [r7, #15]
 8005ffa:	2b98      	cmp	r3, #152	@ 0x98
 8005ffc:	d9f2      	bls.n	8005fe4 <EPD_2IN9_V2_LUT+0x14>
	EPD_2IN9_V2_ReadBusy();
 8005ffe:	f7ff ffc7 	bl	8005f90 <EPD_2IN9_V2_ReadBusy>
}
 8006002:	bf00      	nop
 8006004:	3710      	adds	r7, #16
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}

0800600a <EPD_2IN9_V2_LUT_by_host>:

static void EPD_2IN9_V2_LUT_by_host(UBYTE *lut)
{
 800600a:	b580      	push	{r7, lr}
 800600c:	b082      	sub	sp, #8
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]
	EPD_2IN9_V2_LUT((UBYTE *)lut);			//lut
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f7ff ffdc 	bl	8005fd0 <EPD_2IN9_V2_LUT>
	EPD_2IN9_V2_SendCommand(0x3f);
 8006018:	203f      	movs	r0, #63	@ 0x3f
 800601a:	f7ff ff7d 	bl	8005f18 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(*(lut+153));
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	3399      	adds	r3, #153	@ 0x99
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	4618      	mov	r0, r3
 8006026:	f7ff ff95 	bl	8005f54 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendCommand(0x03);	// gate voltage
 800602a:	2003      	movs	r0, #3
 800602c:	f7ff ff74 	bl	8005f18 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(*(lut+154));
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	339a      	adds	r3, #154	@ 0x9a
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	4618      	mov	r0, r3
 8006038:	f7ff ff8c 	bl	8005f54 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendCommand(0x04);	// source voltage
 800603c:	2004      	movs	r0, #4
 800603e:	f7ff ff6b 	bl	8005f18 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(*(lut+155));	// VSH
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	339b      	adds	r3, #155	@ 0x9b
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	4618      	mov	r0, r3
 800604a:	f7ff ff83 	bl	8005f54 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(*(lut+156));	// VSH2
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	339c      	adds	r3, #156	@ 0x9c
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	4618      	mov	r0, r3
 8006056:	f7ff ff7d 	bl	8005f54 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(*(lut+157));	// VSL
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	339d      	adds	r3, #157	@ 0x9d
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	4618      	mov	r0, r3
 8006062:	f7ff ff77 	bl	8005f54 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendCommand(0x2c);		// VCOM
 8006066:	202c      	movs	r0, #44	@ 0x2c
 8006068:	f7ff ff56 	bl	8005f18 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(*(lut+158));
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	339e      	adds	r3, #158	@ 0x9e
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	4618      	mov	r0, r3
 8006074:	f7ff ff6e 	bl	8005f54 <EPD_2IN9_V2_SendData>
	
}
 8006078:	bf00      	nop
 800607a:	3708      	adds	r7, #8
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <EPD_2IN9_V2_TurnOnDisplay>:
/******************************************************************************
function :	Turn On Display
parameter:
******************************************************************************/
static void EPD_2IN9_V2_TurnOnDisplay(void)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	af00      	add	r7, sp, #0
	EPD_2IN9_V2_SendCommand(0x22); //Display Update Control
 8006084:	2022      	movs	r0, #34	@ 0x22
 8006086:	f7ff ff47 	bl	8005f18 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(0xc7);
 800608a:	20c7      	movs	r0, #199	@ 0xc7
 800608c:	f7ff ff62 	bl	8005f54 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendCommand(0x20); //Activate Display Update Sequence
 8006090:	2020      	movs	r0, #32
 8006092:	f7ff ff41 	bl	8005f18 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_ReadBusy();
 8006096:	f7ff ff7b 	bl	8005f90 <EPD_2IN9_V2_ReadBusy>
}
 800609a:	bf00      	nop
 800609c:	bd80      	pop	{r7, pc}

0800609e <EPD_2IN9_V2_TurnOnDisplay_Partial>:

static void EPD_2IN9_V2_TurnOnDisplay_Partial(void)
{
 800609e:	b580      	push	{r7, lr}
 80060a0:	af00      	add	r7, sp, #0
	EPD_2IN9_V2_SendCommand(0x22); //Display Update Control
 80060a2:	2022      	movs	r0, #34	@ 0x22
 80060a4:	f7ff ff38 	bl	8005f18 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(0x0F);   
 80060a8:	200f      	movs	r0, #15
 80060aa:	f7ff ff53 	bl	8005f54 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendCommand(0x20); //Activate Display Update Sequence
 80060ae:	2020      	movs	r0, #32
 80060b0:	f7ff ff32 	bl	8005f18 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_ReadBusy();
 80060b4:	f7ff ff6c 	bl	8005f90 <EPD_2IN9_V2_ReadBusy>
}
 80060b8:	bf00      	nop
 80060ba:	bd80      	pop	{r7, pc}

080060bc <EPD_2IN9_V2_SetWindows>:
/******************************************************************************
function :	Setting the display window
parameter:
******************************************************************************/
static void EPD_2IN9_V2_SetWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend)
{
 80060bc:	b590      	push	{r4, r7, lr}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	4604      	mov	r4, r0
 80060c4:	4608      	mov	r0, r1
 80060c6:	4611      	mov	r1, r2
 80060c8:	461a      	mov	r2, r3
 80060ca:	4623      	mov	r3, r4
 80060cc:	80fb      	strh	r3, [r7, #6]
 80060ce:	4603      	mov	r3, r0
 80060d0:	80bb      	strh	r3, [r7, #4]
 80060d2:	460b      	mov	r3, r1
 80060d4:	807b      	strh	r3, [r7, #2]
 80060d6:	4613      	mov	r3, r2
 80060d8:	803b      	strh	r3, [r7, #0]
    EPD_2IN9_V2_SendCommand(0x44); // SET_RAM_X_ADDRESS_START_END_POSITION
 80060da:	2044      	movs	r0, #68	@ 0x44
 80060dc:	f7ff ff1c 	bl	8005f18 <EPD_2IN9_V2_SendCommand>
    EPD_2IN9_V2_SendData((Xstart>>3) & 0xFF);
 80060e0:	88fb      	ldrh	r3, [r7, #6]
 80060e2:	08db      	lsrs	r3, r3, #3
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	4618      	mov	r0, r3
 80060ea:	f7ff ff33 	bl	8005f54 <EPD_2IN9_V2_SendData>
    EPD_2IN9_V2_SendData((Xend>>3) & 0xFF);
 80060ee:	887b      	ldrh	r3, [r7, #2]
 80060f0:	08db      	lsrs	r3, r3, #3
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	4618      	mov	r0, r3
 80060f8:	f7ff ff2c 	bl	8005f54 <EPD_2IN9_V2_SendData>
	
    EPD_2IN9_V2_SendCommand(0x45); // SET_RAM_Y_ADDRESS_START_END_POSITION
 80060fc:	2045      	movs	r0, #69	@ 0x45
 80060fe:	f7ff ff0b 	bl	8005f18 <EPD_2IN9_V2_SendCommand>
    EPD_2IN9_V2_SendData(Ystart & 0xFF);
 8006102:	88bb      	ldrh	r3, [r7, #4]
 8006104:	b2db      	uxtb	r3, r3
 8006106:	4618      	mov	r0, r3
 8006108:	f7ff ff24 	bl	8005f54 <EPD_2IN9_V2_SendData>
    EPD_2IN9_V2_SendData((Ystart >> 8) & 0xFF);
 800610c:	88bb      	ldrh	r3, [r7, #4]
 800610e:	0a1b      	lsrs	r3, r3, #8
 8006110:	b29b      	uxth	r3, r3
 8006112:	b2db      	uxtb	r3, r3
 8006114:	4618      	mov	r0, r3
 8006116:	f7ff ff1d 	bl	8005f54 <EPD_2IN9_V2_SendData>
    EPD_2IN9_V2_SendData(Yend & 0xFF);
 800611a:	883b      	ldrh	r3, [r7, #0]
 800611c:	b2db      	uxtb	r3, r3
 800611e:	4618      	mov	r0, r3
 8006120:	f7ff ff18 	bl	8005f54 <EPD_2IN9_V2_SendData>
    EPD_2IN9_V2_SendData((Yend >> 8) & 0xFF);
 8006124:	883b      	ldrh	r3, [r7, #0]
 8006126:	0a1b      	lsrs	r3, r3, #8
 8006128:	b29b      	uxth	r3, r3
 800612a:	b2db      	uxtb	r3, r3
 800612c:	4618      	mov	r0, r3
 800612e:	f7ff ff11 	bl	8005f54 <EPD_2IN9_V2_SendData>
}
 8006132:	bf00      	nop
 8006134:	370c      	adds	r7, #12
 8006136:	46bd      	mov	sp, r7
 8006138:	bd90      	pop	{r4, r7, pc}

0800613a <EPD_2IN9_V2_SetCursor>:
/******************************************************************************
function :	Set Cursor
parameter:
******************************************************************************/
static void EPD_2IN9_V2_SetCursor(UWORD Xstart, UWORD Ystart)
{
 800613a:	b580      	push	{r7, lr}
 800613c:	b082      	sub	sp, #8
 800613e:	af00      	add	r7, sp, #0
 8006140:	4603      	mov	r3, r0
 8006142:	460a      	mov	r2, r1
 8006144:	80fb      	strh	r3, [r7, #6]
 8006146:	4613      	mov	r3, r2
 8006148:	80bb      	strh	r3, [r7, #4]
    EPD_2IN9_V2_SendCommand(0x4E); // SET_RAM_X_ADDRESS_COUNTER
 800614a:	204e      	movs	r0, #78	@ 0x4e
 800614c:	f7ff fee4 	bl	8005f18 <EPD_2IN9_V2_SendCommand>
    EPD_2IN9_V2_SendData(Xstart & 0xFF);
 8006150:	88fb      	ldrh	r3, [r7, #6]
 8006152:	b2db      	uxtb	r3, r3
 8006154:	4618      	mov	r0, r3
 8006156:	f7ff fefd 	bl	8005f54 <EPD_2IN9_V2_SendData>

    EPD_2IN9_V2_SendCommand(0x4F); // SET_RAM_Y_ADDRESS_COUNTER
 800615a:	204f      	movs	r0, #79	@ 0x4f
 800615c:	f7ff fedc 	bl	8005f18 <EPD_2IN9_V2_SendCommand>
    EPD_2IN9_V2_SendData(Ystart & 0xFF);
 8006160:	88bb      	ldrh	r3, [r7, #4]
 8006162:	b2db      	uxtb	r3, r3
 8006164:	4618      	mov	r0, r3
 8006166:	f7ff fef5 	bl	8005f54 <EPD_2IN9_V2_SendData>
    EPD_2IN9_V2_SendData((Ystart >> 8) & 0xFF);
 800616a:	88bb      	ldrh	r3, [r7, #4]
 800616c:	0a1b      	lsrs	r3, r3, #8
 800616e:	b29b      	uxth	r3, r3
 8006170:	b2db      	uxtb	r3, r3
 8006172:	4618      	mov	r0, r3
 8006174:	f7ff feee 	bl	8005f54 <EPD_2IN9_V2_SendData>
}
 8006178:	bf00      	nop
 800617a:	3708      	adds	r7, #8
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <EPD_2IN9_V2_Init>:
/******************************************************************************
function :	Initialize the e-Paper register
parameter:
******************************************************************************/
void EPD_2IN9_V2_Init(void)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	af00      	add	r7, sp, #0
	EPD_2IN9_V2_Reset();
 8006184:	f7ff feaa 	bl	8005edc <EPD_2IN9_V2_Reset>
	DEV_Delay_ms(100);
 8006188:	2064      	movs	r0, #100	@ 0x64
 800618a:	f7fc f9b3 	bl	80024f4 <HAL_Delay>

	EPD_2IN9_V2_ReadBusy();   
 800618e:	f7ff feff 	bl	8005f90 <EPD_2IN9_V2_ReadBusy>
	EPD_2IN9_V2_SendCommand(0x12); // soft reset
 8006192:	2012      	movs	r0, #18
 8006194:	f7ff fec0 	bl	8005f18 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_ReadBusy();
 8006198:	f7ff fefa 	bl	8005f90 <EPD_2IN9_V2_ReadBusy>
	
	EPD_2IN9_V2_SendCommand(0x01); //Driver output control      
 800619c:	2001      	movs	r0, #1
 800619e:	f7ff febb 	bl	8005f18 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(0x27);
 80061a2:	2027      	movs	r0, #39	@ 0x27
 80061a4:	f7ff fed6 	bl	8005f54 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x01);
 80061a8:	2001      	movs	r0, #1
 80061aa:	f7ff fed3 	bl	8005f54 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x00);
 80061ae:	2000      	movs	r0, #0
 80061b0:	f7ff fed0 	bl	8005f54 <EPD_2IN9_V2_SendData>
	
	EPD_2IN9_V2_SendCommand(0x11); //data entry mode       
 80061b4:	2011      	movs	r0, #17
 80061b6:	f7ff feaf 	bl	8005f18 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(0x03);
 80061ba:	2003      	movs	r0, #3
 80061bc:	f7ff feca 	bl	8005f54 <EPD_2IN9_V2_SendData>
	
	EPD_2IN9_V2_SetWindows(0, 0, EPD_2IN9_V2_WIDTH-1, EPD_2IN9_V2_HEIGHT-1);
 80061c0:	f240 1327 	movw	r3, #295	@ 0x127
 80061c4:	227f      	movs	r2, #127	@ 0x7f
 80061c6:	2100      	movs	r1, #0
 80061c8:	2000      	movs	r0, #0
 80061ca:	f7ff ff77 	bl	80060bc <EPD_2IN9_V2_SetWindows>
	
	EPD_2IN9_V2_SendCommand(0x21); //  Display update control
 80061ce:	2021      	movs	r0, #33	@ 0x21
 80061d0:	f7ff fea2 	bl	8005f18 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(0x00);
 80061d4:	2000      	movs	r0, #0
 80061d6:	f7ff febd 	bl	8005f54 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x80);	
 80061da:	2080      	movs	r0, #128	@ 0x80
 80061dc:	f7ff feba 	bl	8005f54 <EPD_2IN9_V2_SendData>
	
	EPD_2IN9_V2_SetCursor(0, 0);
 80061e0:	2100      	movs	r1, #0
 80061e2:	2000      	movs	r0, #0
 80061e4:	f7ff ffa9 	bl	800613a <EPD_2IN9_V2_SetCursor>
	EPD_2IN9_V2_ReadBusy();	
 80061e8:	f7ff fed2 	bl	8005f90 <EPD_2IN9_V2_ReadBusy>
	
	EPD_2IN9_V2_LUT_by_host(WS_20_30);
 80061ec:	4802      	ldr	r0, [pc, #8]	@ (80061f8 <EPD_2IN9_V2_Init+0x78>)
 80061ee:	f7ff ff0c 	bl	800600a <EPD_2IN9_V2_LUT_by_host>
}
 80061f2:	bf00      	nop
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	200000fc 	.word	0x200000fc

080061fc <EPD_2IN9_V2_Init_Fast>:

void EPD_2IN9_V2_Init_Fast(void)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	af00      	add	r7, sp, #0
	EPD_2IN9_V2_Reset();
 8006200:	f7ff fe6c 	bl	8005edc <EPD_2IN9_V2_Reset>
	DEV_Delay_ms(100);
 8006204:	2064      	movs	r0, #100	@ 0x64
 8006206:	f7fc f975 	bl	80024f4 <HAL_Delay>

	EPD_2IN9_V2_ReadBusy();   
 800620a:	f7ff fec1 	bl	8005f90 <EPD_2IN9_V2_ReadBusy>
	EPD_2IN9_V2_SendCommand(0x12); // soft reset
 800620e:	2012      	movs	r0, #18
 8006210:	f7ff fe82 	bl	8005f18 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_ReadBusy();
 8006214:	f7ff febc 	bl	8005f90 <EPD_2IN9_V2_ReadBusy>
	
	EPD_2IN9_V2_SendCommand(0x01); //Driver output control      
 8006218:	2001      	movs	r0, #1
 800621a:	f7ff fe7d 	bl	8005f18 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(0x27);
 800621e:	2027      	movs	r0, #39	@ 0x27
 8006220:	f7ff fe98 	bl	8005f54 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x01);
 8006224:	2001      	movs	r0, #1
 8006226:	f7ff fe95 	bl	8005f54 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x00);
 800622a:	2000      	movs	r0, #0
 800622c:	f7ff fe92 	bl	8005f54 <EPD_2IN9_V2_SendData>
	
	EPD_2IN9_V2_SendCommand(0x11); //data entry mode       
 8006230:	2011      	movs	r0, #17
 8006232:	f7ff fe71 	bl	8005f18 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(0x03);
 8006236:	2003      	movs	r0, #3
 8006238:	f7ff fe8c 	bl	8005f54 <EPD_2IN9_V2_SendData>
	
	EPD_2IN9_V2_SetWindows(0, 0, EPD_2IN9_V2_WIDTH-1, EPD_2IN9_V2_HEIGHT-1);
 800623c:	f240 1327 	movw	r3, #295	@ 0x127
 8006240:	227f      	movs	r2, #127	@ 0x7f
 8006242:	2100      	movs	r1, #0
 8006244:	2000      	movs	r0, #0
 8006246:	f7ff ff39 	bl	80060bc <EPD_2IN9_V2_SetWindows>
	
    EPD_2IN9_V2_SendCommand(0x3C);       
 800624a:	203c      	movs	r0, #60	@ 0x3c
 800624c:	f7ff fe64 	bl	8005f18 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(0x05);
 8006250:	2005      	movs	r0, #5
 8006252:	f7ff fe7f 	bl	8005f54 <EPD_2IN9_V2_SendData>

	EPD_2IN9_V2_SendCommand(0x21); //  Display update control
 8006256:	2021      	movs	r0, #33	@ 0x21
 8006258:	f7ff fe5e 	bl	8005f18 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(0x00);
 800625c:	2000      	movs	r0, #0
 800625e:	f7ff fe79 	bl	8005f54 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x80);	
 8006262:	2080      	movs	r0, #128	@ 0x80
 8006264:	f7ff fe76 	bl	8005f54 <EPD_2IN9_V2_SendData>
	
	EPD_2IN9_V2_SetCursor(0, 0);
 8006268:	2100      	movs	r1, #0
 800626a:	2000      	movs	r0, #0
 800626c:	f7ff ff65 	bl	800613a <EPD_2IN9_V2_SetCursor>
	EPD_2IN9_V2_ReadBusy();	
 8006270:	f7ff fe8e 	bl	8005f90 <EPD_2IN9_V2_ReadBusy>
	
	EPD_2IN9_V2_LUT_by_host(WF_FULL);
 8006274:	4802      	ldr	r0, [pc, #8]	@ (8006280 <EPD_2IN9_V2_Init_Fast+0x84>)
 8006276:	f7ff fec8 	bl	800600a <EPD_2IN9_V2_LUT_by_host>
}
 800627a:	bf00      	nop
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	2000019c 	.word	0x2000019c

08006284 <EPD_2IN9_V2_Clear>:
/******************************************************************************
function :	Clear screen
parameter:
******************************************************************************/
void EPD_2IN9_V2_Clear(void)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b082      	sub	sp, #8
 8006288:	af00      	add	r7, sp, #0
	UWORD i;
	
	EPD_2IN9_V2_SendCommand(0x24);   //write RAM for black(0)/white (1)
 800628a:	2024      	movs	r0, #36	@ 0x24
 800628c:	f7ff fe44 	bl	8005f18 <EPD_2IN9_V2_SendCommand>
	for(i=0;i<4736;i++)
 8006290:	2300      	movs	r3, #0
 8006292:	80fb      	strh	r3, [r7, #6]
 8006294:	e005      	b.n	80062a2 <EPD_2IN9_V2_Clear+0x1e>
	{
		EPD_2IN9_V2_SendData(0xff);
 8006296:	20ff      	movs	r0, #255	@ 0xff
 8006298:	f7ff fe5c 	bl	8005f54 <EPD_2IN9_V2_SendData>
	for(i=0;i<4736;i++)
 800629c:	88fb      	ldrh	r3, [r7, #6]
 800629e:	3301      	adds	r3, #1
 80062a0:	80fb      	strh	r3, [r7, #6]
 80062a2:	88fb      	ldrh	r3, [r7, #6]
 80062a4:	f5b3 5f94 	cmp.w	r3, #4736	@ 0x1280
 80062a8:	d3f5      	bcc.n	8006296 <EPD_2IN9_V2_Clear+0x12>
	}

	EPD_2IN9_V2_SendCommand(0x26);   //write RAM for black(0)/white (1)
 80062aa:	2026      	movs	r0, #38	@ 0x26
 80062ac:	f7ff fe34 	bl	8005f18 <EPD_2IN9_V2_SendCommand>
	for(i=0;i<4736;i++)
 80062b0:	2300      	movs	r3, #0
 80062b2:	80fb      	strh	r3, [r7, #6]
 80062b4:	e005      	b.n	80062c2 <EPD_2IN9_V2_Clear+0x3e>
	{
		EPD_2IN9_V2_SendData(0xff);
 80062b6:	20ff      	movs	r0, #255	@ 0xff
 80062b8:	f7ff fe4c 	bl	8005f54 <EPD_2IN9_V2_SendData>
	for(i=0;i<4736;i++)
 80062bc:	88fb      	ldrh	r3, [r7, #6]
 80062be:	3301      	adds	r3, #1
 80062c0:	80fb      	strh	r3, [r7, #6]
 80062c2:	88fb      	ldrh	r3, [r7, #6]
 80062c4:	f5b3 5f94 	cmp.w	r3, #4736	@ 0x1280
 80062c8:	d3f5      	bcc.n	80062b6 <EPD_2IN9_V2_Clear+0x32>
	}
	EPD_2IN9_V2_TurnOnDisplay();
 80062ca:	f7ff fed9 	bl	8006080 <EPD_2IN9_V2_TurnOnDisplay>
}
 80062ce:	bf00      	nop
 80062d0:	3708      	adds	r7, #8
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
	...

080062d8 <EPD_2IN9_V2_Display_Partial>:

    EPD_2IN9_V2_TurnOnDisplay();
}

void EPD_2IN9_V2_Display_Partial(UBYTE *Image)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b084      	sub	sp, #16
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
	UWORD i;

//Reset
    DEV_Digital_Write(EPD_RST_PIN, 0);
 80062e0:	2200      	movs	r2, #0
 80062e2:	2102      	movs	r1, #2
 80062e4:	4833      	ldr	r0, [pc, #204]	@ (80063b4 <EPD_2IN9_V2_Display_Partial+0xdc>)
 80062e6:	f7fd f882 	bl	80033ee <HAL_GPIO_WritePin>
    DEV_Delay_ms(1);
 80062ea:	2001      	movs	r0, #1
 80062ec:	f7fc f902 	bl	80024f4 <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 80062f0:	2201      	movs	r2, #1
 80062f2:	2102      	movs	r1, #2
 80062f4:	482f      	ldr	r0, [pc, #188]	@ (80063b4 <EPD_2IN9_V2_Display_Partial+0xdc>)
 80062f6:	f7fd f87a 	bl	80033ee <HAL_GPIO_WritePin>
    DEV_Delay_ms(2);
 80062fa:	2002      	movs	r0, #2
 80062fc:	f7fc f8fa 	bl	80024f4 <HAL_Delay>

	EPD_2IN9_V2_LUT(_WF_PARTIAL_2IN9);
 8006300:	482d      	ldr	r0, [pc, #180]	@ (80063b8 <EPD_2IN9_V2_Display_Partial+0xe0>)
 8006302:	f7ff fe65 	bl	8005fd0 <EPD_2IN9_V2_LUT>
	EPD_2IN9_V2_SendCommand(0x37); 
 8006306:	2037      	movs	r0, #55	@ 0x37
 8006308:	f7ff fe06 	bl	8005f18 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(0x00);  
 800630c:	2000      	movs	r0, #0
 800630e:	f7ff fe21 	bl	8005f54 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x00);  
 8006312:	2000      	movs	r0, #0
 8006314:	f7ff fe1e 	bl	8005f54 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x00);  
 8006318:	2000      	movs	r0, #0
 800631a:	f7ff fe1b 	bl	8005f54 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x00); 
 800631e:	2000      	movs	r0, #0
 8006320:	f7ff fe18 	bl	8005f54 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x00);  
 8006324:	2000      	movs	r0, #0
 8006326:	f7ff fe15 	bl	8005f54 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x40);  
 800632a:	2040      	movs	r0, #64	@ 0x40
 800632c:	f7ff fe12 	bl	8005f54 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x00);  
 8006330:	2000      	movs	r0, #0
 8006332:	f7ff fe0f 	bl	8005f54 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x00);   
 8006336:	2000      	movs	r0, #0
 8006338:	f7ff fe0c 	bl	8005f54 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x00);  
 800633c:	2000      	movs	r0, #0
 800633e:	f7ff fe09 	bl	8005f54 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x00);
 8006342:	2000      	movs	r0, #0
 8006344:	f7ff fe06 	bl	8005f54 <EPD_2IN9_V2_SendData>

	EPD_2IN9_V2_SendCommand(0x3C); //BorderWavefrom
 8006348:	203c      	movs	r0, #60	@ 0x3c
 800634a:	f7ff fde5 	bl	8005f18 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(0x80);	
 800634e:	2080      	movs	r0, #128	@ 0x80
 8006350:	f7ff fe00 	bl	8005f54 <EPD_2IN9_V2_SendData>

	EPD_2IN9_V2_SendCommand(0x22); 
 8006354:	2022      	movs	r0, #34	@ 0x22
 8006356:	f7ff fddf 	bl	8005f18 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(0xC0);   
 800635a:	20c0      	movs	r0, #192	@ 0xc0
 800635c:	f7ff fdfa 	bl	8005f54 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendCommand(0x20); 
 8006360:	2020      	movs	r0, #32
 8006362:	f7ff fdd9 	bl	8005f18 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_ReadBusy();  
 8006366:	f7ff fe13 	bl	8005f90 <EPD_2IN9_V2_ReadBusy>
	
	EPD_2IN9_V2_SetWindows(0, 0, EPD_2IN9_V2_WIDTH-1, EPD_2IN9_V2_HEIGHT-1);
 800636a:	f240 1327 	movw	r3, #295	@ 0x127
 800636e:	227f      	movs	r2, #127	@ 0x7f
 8006370:	2100      	movs	r1, #0
 8006372:	2000      	movs	r0, #0
 8006374:	f7ff fea2 	bl	80060bc <EPD_2IN9_V2_SetWindows>
	EPD_2IN9_V2_SetCursor(0, 0);
 8006378:	2100      	movs	r1, #0
 800637a:	2000      	movs	r0, #0
 800637c:	f7ff fedd 	bl	800613a <EPD_2IN9_V2_SetCursor>

	EPD_2IN9_V2_SendCommand(0x24);   //Write Black and White image to RAM
 8006380:	2024      	movs	r0, #36	@ 0x24
 8006382:	f7ff fdc9 	bl	8005f18 <EPD_2IN9_V2_SendCommand>
	for(i=0;i<4736;i++)
 8006386:	2300      	movs	r3, #0
 8006388:	81fb      	strh	r3, [r7, #14]
 800638a:	e009      	b.n	80063a0 <EPD_2IN9_V2_Display_Partial+0xc8>
	{
		EPD_2IN9_V2_SendData(Image[i]);
 800638c:	89fb      	ldrh	r3, [r7, #14]
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	4413      	add	r3, r2
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	4618      	mov	r0, r3
 8006396:	f7ff fddd 	bl	8005f54 <EPD_2IN9_V2_SendData>
	for(i=0;i<4736;i++)
 800639a:	89fb      	ldrh	r3, [r7, #14]
 800639c:	3301      	adds	r3, #1
 800639e:	81fb      	strh	r3, [r7, #14]
 80063a0:	89fb      	ldrh	r3, [r7, #14]
 80063a2:	f5b3 5f94 	cmp.w	r3, #4736	@ 0x1280
 80063a6:	d3f1      	bcc.n	800638c <EPD_2IN9_V2_Display_Partial+0xb4>
	} 
	EPD_2IN9_V2_TurnOnDisplay_Partial();
 80063a8:	f7ff fe79 	bl	800609e <EPD_2IN9_V2_TurnOnDisplay_Partial>
}
 80063ac:	bf00      	nop
 80063ae:	3710      	adds	r7, #16
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}
 80063b4:	40010800 	.word	0x40010800
 80063b8:	2000005c 	.word	0x2000005c

080063bc <EPD_2IN9_V2_Sleep>:
/******************************************************************************
function :	Enter sleep mode
parameter:
******************************************************************************/
void EPD_2IN9_V2_Sleep(void)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	af00      	add	r7, sp, #0
	EPD_2IN9_V2_SendCommand(0x10); //enter deep sleep
 80063c0:	2010      	movs	r0, #16
 80063c2:	f7ff fda9 	bl	8005f18 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(0x01); 
 80063c6:	2001      	movs	r0, #1
 80063c8:	f7ff fdc4 	bl	8005f54 <EPD_2IN9_V2_SendData>
	DEV_Delay_ms(100);
 80063cc:	2064      	movs	r0, #100	@ 0x64
 80063ce:	f7fc f891 	bl	80024f4 <HAL_Delay>
}
 80063d2:	bf00      	nop
 80063d4:	bd80      	pop	{r7, pc}
	...

080063d8 <default_mode>:
    return 0;
}

// it is the screen display time with the list of name
void default_mode(int *flag_main_screen, uint8_t *hour, uint8_t *minute, uint8_t *second)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b08a      	sub	sp, #40	@ 0x28
 80063dc:	af02      	add	r7, sp, #8
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	607a      	str	r2, [r7, #4]
 80063e4:	603b      	str	r3, [r7, #0]
	UBYTE *BlackImage;

	UWORD Imagesize = ((EPD_2IN9_V2_WIDTH % 8 == 0)? (EPD_2IN9_V2_WIDTH / 8 ): (EPD_2IN9_V2_WIDTH / 8 + 1)) * EPD_2IN9_V2_HEIGHT;
 80063e6:	f44f 5394 	mov.w	r3, #4736	@ 0x1280
 80063ea:	83bb      	strh	r3, [r7, #28]
    if((BlackImage = (UBYTE *)malloc(Imagesize)) == NULL) {
 80063ec:	8bbb      	ldrh	r3, [r7, #28]
 80063ee:	4618      	mov	r0, r3
 80063f0:	f000 fd48 	bl	8006e84 <malloc>
 80063f4:	4603      	mov	r3, r0
 80063f6:	61bb      	str	r3, [r7, #24]
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d102      	bne.n	8006404 <default_mode+0x2c>
        printf("Failed to apply for black memory...\r\n");
 80063fe:	485a      	ldr	r0, [pc, #360]	@ (8006568 <default_mode+0x190>)
 8006400:	f000 ff16 	bl	8007230 <puts>
    }

	EPD_2IN9_V2_Init();
 8006404:	f7ff febc 	bl	8006180 <EPD_2IN9_V2_Init>

		EPD_2IN9_V2_Init();
 8006408:	f7ff feba 	bl	8006180 <EPD_2IN9_V2_Init>
    	EPD_2IN9_V2_Clear();
 800640c:	f7ff ff3a 	bl	8006284 <EPD_2IN9_V2_Clear>
    	EPD_2IN9_V2_Init_Fast();
 8006410:	f7ff fef4 	bl	80061fc <EPD_2IN9_V2_Init_Fast>
        Paint_ClearWindows(0, 0, EPD_2IN9_V2_HEIGHT, EPD_2IN9_V2_WIDTH, WHITE);
 8006414:	23ff      	movs	r3, #255	@ 0xff
 8006416:	9300      	str	r3, [sp, #0]
 8006418:	2380      	movs	r3, #128	@ 0x80
 800641a:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800641e:	2100      	movs	r1, #0
 8006420:	2000      	movs	r0, #0
 8006422:	f000 fb0b 	bl	8006a3c <Paint_ClearWindows>

    	Paint_NewImage(BlackImage, EPD_2IN9_V2_WIDTH, EPD_2IN9_V2_HEIGHT, 90, WHITE);
 8006426:	23ff      	movs	r3, #255	@ 0xff
 8006428:	9300      	str	r3, [sp, #0]
 800642a:	235a      	movs	r3, #90	@ 0x5a
 800642c:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8006430:	2180      	movs	r1, #128	@ 0x80
 8006432:	69b8      	ldr	r0, [r7, #24]
 8006434:	f000 f8aa 	bl	800658c <Paint_NewImage>
    	printf("Drawing\r\n");
 8006438:	484c      	ldr	r0, [pc, #304]	@ (800656c <default_mode+0x194>)
 800643a:	f000 fef9 	bl	8007230 <puts>
    	//1.Select Image
    	Paint_SelectImage(BlackImage);
 800643e:	69b8      	ldr	r0, [r7, #24]
 8006440:	f000 f8f8 	bl	8006634 <Paint_SelectImage>
    	Paint_Clear(WHITE);
 8006444:	20ff      	movs	r0, #255	@ 0xff
 8006446:	f000 fa51 	bl	80068ec <Paint_Clear>

    	// 2.Drawing on the image
    	printf("Drawing:BlackImage\r\n");
 800644a:	4849      	ldr	r0, [pc, #292]	@ (8006570 <default_mode+0x198>)
 800644c:	f000 fef0 	bl	8007230 <puts>

    	Paint_DrawString_EN(10, 0, "Duy Ngoc - 2251036", &Font16, BLACK, WHITE);
 8006450:	23ff      	movs	r3, #255	@ 0xff
 8006452:	9301      	str	r3, [sp, #4]
 8006454:	2300      	movs	r3, #0
 8006456:	9300      	str	r3, [sp, #0]
 8006458:	4b46      	ldr	r3, [pc, #280]	@ (8006574 <default_mode+0x19c>)
 800645a:	4a47      	ldr	r2, [pc, #284]	@ (8006578 <default_mode+0x1a0>)
 800645c:	2100      	movs	r1, #0
 800645e:	200a      	movs	r0, #10
 8006460:	f000 fbc2 	bl	8006be8 <Paint_DrawString_EN>
    	Paint_DrawString_EN(10, 30, "Trung Nam - 2251032", &Font16, BLACK, WHITE);
 8006464:	23ff      	movs	r3, #255	@ 0xff
 8006466:	9301      	str	r3, [sp, #4]
 8006468:	2300      	movs	r3, #0
 800646a:	9300      	str	r3, [sp, #0]
 800646c:	4b41      	ldr	r3, [pc, #260]	@ (8006574 <default_mode+0x19c>)
 800646e:	4a43      	ldr	r2, [pc, #268]	@ (800657c <default_mode+0x1a4>)
 8006470:	211e      	movs	r1, #30
 8006472:	200a      	movs	r0, #10
 8006474:	f000 fbb8 	bl	8006be8 <Paint_DrawString_EN>
    	Paint_DrawString_EN(10, 60, "Hung Minh - 2251030", &Font16, BLACK, WHITE);
 8006478:	23ff      	movs	r3, #255	@ 0xff
 800647a:	9301      	str	r3, [sp, #4]
 800647c:	2300      	movs	r3, #0
 800647e:	9300      	str	r3, [sp, #0]
 8006480:	4b3c      	ldr	r3, [pc, #240]	@ (8006574 <default_mode+0x19c>)
 8006482:	4a3f      	ldr	r2, [pc, #252]	@ (8006580 <default_mode+0x1a8>)
 8006484:	213c      	movs	r1, #60	@ 0x3c
 8006486:	200a      	movs	r0, #10
 8006488:	f000 fbae 	bl	8006be8 <Paint_DrawString_EN>
//
//      Paint_ClearWindows(150, 80, 150 + Font20.Width * 7, 80 + Font20.Height, WHITE);
//      Paint_DrawTime(150, 80, &sPaint_time, &Font20, WHITE, BLACK);
//      EPD_2IN9_V2_Display_Partial(BlackImage);

	Paint_NewImage(BlackImage, EPD_2IN9_V2_WIDTH, EPD_2IN9_V2_HEIGHT, 90, WHITE);
 800648c:	23ff      	movs	r3, #255	@ 0xff
 800648e:	9300      	str	r3, [sp, #0]
 8006490:	235a      	movs	r3, #90	@ 0x5a
 8006492:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8006496:	2180      	movs	r1, #128	@ 0x80
 8006498:	69b8      	ldr	r0, [r7, #24]
 800649a:	f000 f877 	bl	800658c <Paint_NewImage>
	EPD_2IN9_V2_Display_Partial(BlackImage);
 800649e:	69b8      	ldr	r0, [r7, #24]
 80064a0:	f7ff ff1a 	bl	80062d8 <EPD_2IN9_V2_Display_Partial>

    printf("Partial refresh\r\n");
 80064a4:	4837      	ldr	r0, [pc, #220]	@ (8006584 <default_mode+0x1ac>)
 80064a6:	f000 fec3 	bl	8007230 <puts>
    Paint_SelectImage(BlackImage);
 80064aa:	69b8      	ldr	r0, [r7, #24]
 80064ac:	f000 f8c2 	bl	8006634 <Paint_SelectImage>

    PAINT_TIME sPaint_time;
    sPaint_time.Hour = 12;
 80064b0:	230c      	movs	r3, #12
 80064b2:	753b      	strb	r3, [r7, #20]
    sPaint_time.Min = 34;
 80064b4:	2322      	movs	r3, #34	@ 0x22
 80064b6:	757b      	strb	r3, [r7, #21]
    sPaint_time.Sec = *second;
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	75bb      	strb	r3, [r7, #22]
    UBYTE num = 10;
 80064be:	230a      	movs	r3, #10
 80064c0:	77fb      	strb	r3, [r7, #31]
    for (;;) {
        sPaint_time.Sec = sPaint_time.Sec + 1;
 80064c2:	7dbb      	ldrb	r3, [r7, #22]
 80064c4:	3301      	adds	r3, #1
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	75bb      	strb	r3, [r7, #22]
        if (sPaint_time.Sec == 60) {
 80064ca:	7dbb      	ldrb	r3, [r7, #22]
 80064cc:	2b3c      	cmp	r3, #60	@ 0x3c
 80064ce:	d117      	bne.n	8006500 <default_mode+0x128>
            sPaint_time.Min = sPaint_time.Min + 1;
 80064d0:	7d7b      	ldrb	r3, [r7, #21]
 80064d2:	3301      	adds	r3, #1
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	757b      	strb	r3, [r7, #21]
            sPaint_time.Sec = 0;
 80064d8:	2300      	movs	r3, #0
 80064da:	75bb      	strb	r3, [r7, #22]
            if (sPaint_time.Min == 60) {
 80064dc:	7d7b      	ldrb	r3, [r7, #21]
 80064de:	2b3c      	cmp	r3, #60	@ 0x3c
 80064e0:	d10e      	bne.n	8006500 <default_mode+0x128>
                sPaint_time.Hour =  sPaint_time.Hour + 1;
 80064e2:	7d3b      	ldrb	r3, [r7, #20]
 80064e4:	3301      	adds	r3, #1
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	753b      	strb	r3, [r7, #20]
                sPaint_time.Min = 0;
 80064ea:	2300      	movs	r3, #0
 80064ec:	757b      	strb	r3, [r7, #21]
                if (sPaint_time.Hour == 24) {
 80064ee:	7d3b      	ldrb	r3, [r7, #20]
 80064f0:	2b18      	cmp	r3, #24
 80064f2:	d105      	bne.n	8006500 <default_mode+0x128>
                    sPaint_time.Hour = 0;
 80064f4:	2300      	movs	r3, #0
 80064f6:	753b      	strb	r3, [r7, #20]
                    sPaint_time.Min = 0;
 80064f8:	2300      	movs	r3, #0
 80064fa:	757b      	strb	r3, [r7, #21]
                    sPaint_time.Sec = 0;
 80064fc:	2300      	movs	r3, #0
 80064fe:	75bb      	strb	r3, [r7, #22]
                }
            }
        }
        Paint_ClearWindows(150, 80, 150 + Font20.Width * 7, 80 + Font20.Height, WHITE);
 8006500:	4b21      	ldr	r3, [pc, #132]	@ (8006588 <default_mode+0x1b0>)
 8006502:	889b      	ldrh	r3, [r3, #4]
 8006504:	461a      	mov	r2, r3
 8006506:	00d2      	lsls	r2, r2, #3
 8006508:	1ad3      	subs	r3, r2, r3
 800650a:	b29b      	uxth	r3, r3
 800650c:	3396      	adds	r3, #150	@ 0x96
 800650e:	b29a      	uxth	r2, r3
 8006510:	4b1d      	ldr	r3, [pc, #116]	@ (8006588 <default_mode+0x1b0>)
 8006512:	88db      	ldrh	r3, [r3, #6]
 8006514:	3350      	adds	r3, #80	@ 0x50
 8006516:	b29b      	uxth	r3, r3
 8006518:	21ff      	movs	r1, #255	@ 0xff
 800651a:	9100      	str	r1, [sp, #0]
 800651c:	2150      	movs	r1, #80	@ 0x50
 800651e:	2096      	movs	r0, #150	@ 0x96
 8006520:	f000 fa8c 	bl	8006a3c <Paint_ClearWindows>
        Paint_DrawTime(150, 80, &sPaint_time, &Font20, WHITE, BLACK);
 8006524:	f107 0210 	add.w	r2, r7, #16
 8006528:	2300      	movs	r3, #0
 800652a:	9301      	str	r3, [sp, #4]
 800652c:	23ff      	movs	r3, #255	@ 0xff
 800652e:	9300      	str	r3, [sp, #0]
 8006530:	4b15      	ldr	r3, [pc, #84]	@ (8006588 <default_mode+0x1b0>)
 8006532:	2150      	movs	r1, #80	@ 0x50
 8006534:	2096      	movs	r0, #150	@ 0x96
 8006536:	f000 fbab 	bl	8006c90 <Paint_DrawTime>

        num = num - 1;
 800653a:	7ffb      	ldrb	r3, [r7, #31]
 800653c:	3b01      	subs	r3, #1
 800653e:	77fb      	strb	r3, [r7, #31]
        if(num == 0) {
 8006540:	7ffb      	ldrb	r3, [r7, #31]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d003      	beq.n	800654e <default_mode+0x176>
            break;
        }
		EPD_2IN9_V2_Display_Partial(BlackImage);
 8006546:	69b8      	ldr	r0, [r7, #24]
 8006548:	f7ff fec6 	bl	80062d8 <EPD_2IN9_V2_Display_Partial>
        sPaint_time.Sec = sPaint_time.Sec + 1;
 800654c:	e7b9      	b.n	80064c2 <default_mode+0xea>
            break;
 800654e:	bf00      	nop
    }
      EPD_2IN9_V2_Sleep();
 8006550:	f7ff ff34 	bl	80063bc <EPD_2IN9_V2_Sleep>
      *flag_main_screen = 0;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2200      	movs	r2, #0
 8006558:	601a      	str	r2, [r3, #0]
      free(BlackImage);
 800655a:	69b8      	ldr	r0, [r7, #24]
 800655c:	f000 fc9a 	bl	8006e94 <free>
}
 8006560:	bf00      	nop
 8006562:	3720      	adds	r7, #32
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}
 8006568:	08007884 	.word	0x08007884
 800656c:	080078d4 	.word	0x080078d4
 8006570:	080078e0 	.word	0x080078e0
 8006574:	2000023c 	.word	0x2000023c
 8006578:	080078f4 	.word	0x080078f4
 800657c:	08007908 	.word	0x08007908
 8006580:	0800791c 	.word	0x0800791c
 8006584:	08007930 	.word	0x08007930
 8006588:	20000244 	.word	0x20000244

0800658c <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UBYTE *image, UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 800658c:	b480      	push	{r7}
 800658e:	b085      	sub	sp, #20
 8006590:	af00      	add	r7, sp, #0
 8006592:	60f8      	str	r0, [r7, #12]
 8006594:	4608      	mov	r0, r1
 8006596:	4611      	mov	r1, r2
 8006598:	461a      	mov	r2, r3
 800659a:	4603      	mov	r3, r0
 800659c:	817b      	strh	r3, [r7, #10]
 800659e:	460b      	mov	r3, r1
 80065a0:	813b      	strh	r3, [r7, #8]
 80065a2:	4613      	mov	r3, r2
 80065a4:	80fb      	strh	r3, [r7, #6]
    Paint.Image = NULL;
 80065a6:	4b22      	ldr	r3, [pc, #136]	@ (8006630 <Paint_NewImage+0xa4>)
 80065a8:	2200      	movs	r2, #0
 80065aa:	601a      	str	r2, [r3, #0]
    Paint.Image = image;
 80065ac:	4a20      	ldr	r2, [pc, #128]	@ (8006630 <Paint_NewImage+0xa4>)
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6013      	str	r3, [r2, #0]

    Paint.WidthMemory = Width;
 80065b2:	4a1f      	ldr	r2, [pc, #124]	@ (8006630 <Paint_NewImage+0xa4>)
 80065b4:	897b      	ldrh	r3, [r7, #10]
 80065b6:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 80065b8:	4a1d      	ldr	r2, [pc, #116]	@ (8006630 <Paint_NewImage+0xa4>)
 80065ba:	893b      	ldrh	r3, [r7, #8]
 80065bc:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 80065be:	4a1c      	ldr	r2, [pc, #112]	@ (8006630 <Paint_NewImage+0xa4>)
 80065c0:	8b3b      	ldrh	r3, [r7, #24]
 80065c2:	8193      	strh	r3, [r2, #12]
	Paint.Scale = 2;
 80065c4:	4b1a      	ldr	r3, [pc, #104]	@ (8006630 <Paint_NewImage+0xa4>)
 80065c6:	2202      	movs	r2, #2
 80065c8:	82da      	strh	r2, [r3, #22]
		
    Paint.WidthByte = (Width % 8 == 0)? (Width / 8 ): (Width / 8 + 1);
 80065ca:	897b      	ldrh	r3, [r7, #10]
 80065cc:	f003 0307 	and.w	r3, r3, #7
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d103      	bne.n	80065de <Paint_NewImage+0x52>
 80065d6:	897b      	ldrh	r3, [r7, #10]
 80065d8:	08db      	lsrs	r3, r3, #3
 80065da:	b29b      	uxth	r3, r3
 80065dc:	e004      	b.n	80065e8 <Paint_NewImage+0x5c>
 80065de:	897b      	ldrh	r3, [r7, #10]
 80065e0:	08db      	lsrs	r3, r3, #3
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	3301      	adds	r3, #1
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	4a11      	ldr	r2, [pc, #68]	@ (8006630 <Paint_NewImage+0xa4>)
 80065ea:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 80065ec:	4a10      	ldr	r2, [pc, #64]	@ (8006630 <Paint_NewImage+0xa4>)
 80065ee:	893b      	ldrh	r3, [r7, #8]
 80065f0:	8293      	strh	r3, [r2, #20]
//    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
//    printf(" EPD_WIDTH / 8 = %d\r\n",  122 / 8);
   
    Paint.Rotate = Rotate;
 80065f2:	4a0f      	ldr	r2, [pc, #60]	@ (8006630 <Paint_NewImage+0xa4>)
 80065f4:	88fb      	ldrh	r3, [r7, #6]
 80065f6:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 80065f8:	4b0d      	ldr	r3, [pc, #52]	@ (8006630 <Paint_NewImage+0xa4>)
 80065fa:	2200      	movs	r2, #0
 80065fc:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 80065fe:	88fb      	ldrh	r3, [r7, #6]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d002      	beq.n	800660a <Paint_NewImage+0x7e>
 8006604:	88fb      	ldrh	r3, [r7, #6]
 8006606:	2bb4      	cmp	r3, #180	@ 0xb4
 8006608:	d106      	bne.n	8006618 <Paint_NewImage+0x8c>
        Paint.Width = Width;
 800660a:	4a09      	ldr	r2, [pc, #36]	@ (8006630 <Paint_NewImage+0xa4>)
 800660c:	897b      	ldrh	r3, [r7, #10]
 800660e:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 8006610:	4a07      	ldr	r2, [pc, #28]	@ (8006630 <Paint_NewImage+0xa4>)
 8006612:	893b      	ldrh	r3, [r7, #8]
 8006614:	80d3      	strh	r3, [r2, #6]
 8006616:	e006      	b.n	8006626 <Paint_NewImage+0x9a>
    } else {
        Paint.Width = Height;
 8006618:	4a05      	ldr	r2, [pc, #20]	@ (8006630 <Paint_NewImage+0xa4>)
 800661a:	893b      	ldrh	r3, [r7, #8]
 800661c:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 800661e:	4a04      	ldr	r2, [pc, #16]	@ (8006630 <Paint_NewImage+0xa4>)
 8006620:	897b      	ldrh	r3, [r7, #10]
 8006622:	80d3      	strh	r3, [r2, #6]
    }
}
 8006624:	bf00      	nop
 8006626:	bf00      	nop
 8006628:	3714      	adds	r7, #20
 800662a:	46bd      	mov	sp, r7
 800662c:	bc80      	pop	{r7}
 800662e:	4770      	bx	lr
 8006630:	20000458 	.word	0x20000458

08006634 <Paint_SelectImage>:
function: Select Image
parameter:
    image : Pointer to the image cache
******************************************************************************/
void Paint_SelectImage(UBYTE *image)
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
    Paint.Image = image;
 800663c:	4a03      	ldr	r2, [pc, #12]	@ (800664c <Paint_SelectImage+0x18>)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6013      	str	r3, [r2, #0]
}
 8006642:	bf00      	nop
 8006644:	370c      	adds	r7, #12
 8006646:	46bd      	mov	sp, r7
 8006648:	bc80      	pop	{r7}
 800664a:	4770      	bx	lr
 800664c:	20000458 	.word	0x20000458

08006650 <Paint_SetPixel>:
    Xpoint : At point X
    Ypoint : At point Y
    Color  : Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b08a      	sub	sp, #40	@ 0x28
 8006654:	af00      	add	r7, sp, #0
 8006656:	4603      	mov	r3, r0
 8006658:	80fb      	strh	r3, [r7, #6]
 800665a:	460b      	mov	r3, r1
 800665c:	80bb      	strh	r3, [r7, #4]
 800665e:	4613      	mov	r3, r2
 8006660:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 8006662:	4ba0      	ldr	r3, [pc, #640]	@ (80068e4 <Paint_SetPixel+0x294>)
 8006664:	889b      	ldrh	r3, [r3, #4]
 8006666:	88fa      	ldrh	r2, [r7, #6]
 8006668:	429a      	cmp	r2, r3
 800666a:	d804      	bhi.n	8006676 <Paint_SetPixel+0x26>
 800666c:	4b9d      	ldr	r3, [pc, #628]	@ (80068e4 <Paint_SetPixel+0x294>)
 800666e:	88db      	ldrh	r3, [r3, #6]
 8006670:	88ba      	ldrh	r2, [r7, #4]
 8006672:	429a      	cmp	r2, r3
 8006674:	d903      	bls.n	800667e <Paint_SetPixel+0x2e>
        Debug("Exceeding display boundaries\r\n");
 8006676:	489c      	ldr	r0, [pc, #624]	@ (80068e8 <Paint_SetPixel+0x298>)
 8006678:	f000 fdda 	bl	8007230 <puts>
        return;
 800667c:	e12e      	b.n	80068dc <Paint_SetPixel+0x28c>
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 800667e:	4b99      	ldr	r3, [pc, #612]	@ (80068e4 <Paint_SetPixel+0x294>)
 8006680:	89db      	ldrh	r3, [r3, #14]
 8006682:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8006686:	d02b      	beq.n	80066e0 <Paint_SetPixel+0x90>
 8006688:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800668c:	f300 8123 	bgt.w	80068d6 <Paint_SetPixel+0x286>
 8006690:	2bb4      	cmp	r3, #180	@ 0xb4
 8006692:	d016      	beq.n	80066c2 <Paint_SetPixel+0x72>
 8006694:	2bb4      	cmp	r3, #180	@ 0xb4
 8006696:	f300 811e 	bgt.w	80068d6 <Paint_SetPixel+0x286>
 800669a:	2b00      	cmp	r3, #0
 800669c:	d002      	beq.n	80066a4 <Paint_SetPixel+0x54>
 800669e:	2b5a      	cmp	r3, #90	@ 0x5a
 80066a0:	d005      	beq.n	80066ae <Paint_SetPixel+0x5e>
    case 270:
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;
    default:
        return;
 80066a2:	e118      	b.n	80068d6 <Paint_SetPixel+0x286>
        X = Xpoint;
 80066a4:	88fb      	ldrh	r3, [r7, #6]
 80066a6:	84fb      	strh	r3, [r7, #38]	@ 0x26
        Y = Ypoint;  
 80066a8:	88bb      	ldrh	r3, [r7, #4]
 80066aa:	84bb      	strh	r3, [r7, #36]	@ 0x24
        break;
 80066ac:	e022      	b.n	80066f4 <Paint_SetPixel+0xa4>
        X = Paint.WidthMemory - Ypoint - 1;
 80066ae:	4b8d      	ldr	r3, [pc, #564]	@ (80068e4 <Paint_SetPixel+0x294>)
 80066b0:	891a      	ldrh	r2, [r3, #8]
 80066b2:	88bb      	ldrh	r3, [r7, #4]
 80066b4:	1ad3      	subs	r3, r2, r3
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	3b01      	subs	r3, #1
 80066ba:	84fb      	strh	r3, [r7, #38]	@ 0x26
        Y = Xpoint;
 80066bc:	88fb      	ldrh	r3, [r7, #6]
 80066be:	84bb      	strh	r3, [r7, #36]	@ 0x24
        break;
 80066c0:	e018      	b.n	80066f4 <Paint_SetPixel+0xa4>
        X = Paint.WidthMemory - Xpoint - 1;
 80066c2:	4b88      	ldr	r3, [pc, #544]	@ (80068e4 <Paint_SetPixel+0x294>)
 80066c4:	891a      	ldrh	r2, [r3, #8]
 80066c6:	88fb      	ldrh	r3, [r7, #6]
 80066c8:	1ad3      	subs	r3, r2, r3
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	3b01      	subs	r3, #1
 80066ce:	84fb      	strh	r3, [r7, #38]	@ 0x26
        Y = Paint.HeightMemory - Ypoint - 1;
 80066d0:	4b84      	ldr	r3, [pc, #528]	@ (80068e4 <Paint_SetPixel+0x294>)
 80066d2:	895a      	ldrh	r2, [r3, #10]
 80066d4:	88bb      	ldrh	r3, [r7, #4]
 80066d6:	1ad3      	subs	r3, r2, r3
 80066d8:	b29b      	uxth	r3, r3
 80066da:	3b01      	subs	r3, #1
 80066dc:	84bb      	strh	r3, [r7, #36]	@ 0x24
        break;
 80066de:	e009      	b.n	80066f4 <Paint_SetPixel+0xa4>
        X = Ypoint;
 80066e0:	88bb      	ldrh	r3, [r7, #4]
 80066e2:	84fb      	strh	r3, [r7, #38]	@ 0x26
        Y = Paint.HeightMemory - Xpoint - 1;
 80066e4:	4b7f      	ldr	r3, [pc, #508]	@ (80068e4 <Paint_SetPixel+0x294>)
 80066e6:	895a      	ldrh	r2, [r3, #10]
 80066e8:	88fb      	ldrh	r3, [r7, #6]
 80066ea:	1ad3      	subs	r3, r2, r3
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	3b01      	subs	r3, #1
 80066f0:	84bb      	strh	r3, [r7, #36]	@ 0x24
        break;
 80066f2:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 80066f4:	4b7b      	ldr	r3, [pc, #492]	@ (80068e4 <Paint_SetPixel+0x294>)
 80066f6:	8a1b      	ldrh	r3, [r3, #16]
 80066f8:	2b03      	cmp	r3, #3
 80066fa:	f200 80ee 	bhi.w	80068da <Paint_SetPixel+0x28a>
 80066fe:	a201      	add	r2, pc, #4	@ (adr r2, 8006704 <Paint_SetPixel+0xb4>)
 8006700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006704:	08006753 	.word	0x08006753
 8006708:	08006715 	.word	0x08006715
 800670c:	08006725 	.word	0x08006725
 8006710:	08006735 	.word	0x08006735
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 8006714:	4b73      	ldr	r3, [pc, #460]	@ (80068e4 <Paint_SetPixel+0x294>)
 8006716:	891a      	ldrh	r2, [r3, #8]
 8006718:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800671a:	1ad3      	subs	r3, r2, r3
 800671c:	b29b      	uxth	r3, r3
 800671e:	3b01      	subs	r3, #1
 8006720:	84fb      	strh	r3, [r7, #38]	@ 0x26
        break;
 8006722:	e017      	b.n	8006754 <Paint_SetPixel+0x104>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 8006724:	4b6f      	ldr	r3, [pc, #444]	@ (80068e4 <Paint_SetPixel+0x294>)
 8006726:	895a      	ldrh	r2, [r3, #10]
 8006728:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800672a:	1ad3      	subs	r3, r2, r3
 800672c:	b29b      	uxth	r3, r3
 800672e:	3b01      	subs	r3, #1
 8006730:	84bb      	strh	r3, [r7, #36]	@ 0x24
        break;
 8006732:	e00f      	b.n	8006754 <Paint_SetPixel+0x104>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 8006734:	4b6b      	ldr	r3, [pc, #428]	@ (80068e4 <Paint_SetPixel+0x294>)
 8006736:	891a      	ldrh	r2, [r3, #8]
 8006738:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800673a:	1ad3      	subs	r3, r2, r3
 800673c:	b29b      	uxth	r3, r3
 800673e:	3b01      	subs	r3, #1
 8006740:	84fb      	strh	r3, [r7, #38]	@ 0x26
        Y = Paint.HeightMemory - Y - 1;
 8006742:	4b68      	ldr	r3, [pc, #416]	@ (80068e4 <Paint_SetPixel+0x294>)
 8006744:	895a      	ldrh	r2, [r3, #10]
 8006746:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006748:	1ad3      	subs	r3, r2, r3
 800674a:	b29b      	uxth	r3, r3
 800674c:	3b01      	subs	r3, #1
 800674e:	84bb      	strh	r3, [r7, #36]	@ 0x24
        break;
 8006750:	e000      	b.n	8006754 <Paint_SetPixel+0x104>
        break;
 8006752:	bf00      	nop
    default:
        return;
    }

    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 8006754:	4b63      	ldr	r3, [pc, #396]	@ (80068e4 <Paint_SetPixel+0x294>)
 8006756:	891b      	ldrh	r3, [r3, #8]
 8006758:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800675a:	429a      	cmp	r2, r3
 800675c:	d804      	bhi.n	8006768 <Paint_SetPixel+0x118>
 800675e:	4b61      	ldr	r3, [pc, #388]	@ (80068e4 <Paint_SetPixel+0x294>)
 8006760:	895b      	ldrh	r3, [r3, #10]
 8006762:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006764:	429a      	cmp	r2, r3
 8006766:	d903      	bls.n	8006770 <Paint_SetPixel+0x120>
        Debug("Exceeding display boundaries\r\n");
 8006768:	485f      	ldr	r0, [pc, #380]	@ (80068e8 <Paint_SetPixel+0x298>)
 800676a:	f000 fd61 	bl	8007230 <puts>
        return;
 800676e:	e0b5      	b.n	80068dc <Paint_SetPixel+0x28c>
    }
    
    if(Paint.Scale == 2){
 8006770:	4b5c      	ldr	r3, [pc, #368]	@ (80068e4 <Paint_SetPixel+0x294>)
 8006772:	8adb      	ldrh	r3, [r3, #22]
 8006774:	2b02      	cmp	r3, #2
 8006776:	d138      	bne.n	80067ea <Paint_SetPixel+0x19a>
        UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
 8006778:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800677a:	08db      	lsrs	r3, r3, #3
 800677c:	b29b      	uxth	r3, r3
 800677e:	4619      	mov	r1, r3
 8006780:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006782:	4a58      	ldr	r2, [pc, #352]	@ (80068e4 <Paint_SetPixel+0x294>)
 8006784:	8a52      	ldrh	r2, [r2, #18]
 8006786:	fb02 f303 	mul.w	r3, r2, r3
 800678a:	440b      	add	r3, r1
 800678c:	613b      	str	r3, [r7, #16]
        UBYTE Rdata = Paint.Image[Addr];
 800678e:	4b55      	ldr	r3, [pc, #340]	@ (80068e4 <Paint_SetPixel+0x294>)
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	4413      	add	r3, r2
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	73fb      	strb	r3, [r7, #15]
        if(Color == BLACK)
 800679a:	887b      	ldrh	r3, [r7, #2]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d112      	bne.n	80067c6 <Paint_SetPixel+0x176>
            Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 80067a0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80067a2:	f003 0307 	and.w	r3, r3, #7
 80067a6:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80067aa:	fa42 f303 	asr.w	r3, r2, r3
 80067ae:	b25a      	sxtb	r2, r3
 80067b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067b4:	4013      	ands	r3, r2
 80067b6:	b259      	sxtb	r1, r3
 80067b8:	4b4a      	ldr	r3, [pc, #296]	@ (80068e4 <Paint_SetPixel+0x294>)
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	4413      	add	r3, r2
 80067c0:	b2ca      	uxtb	r2, r1
 80067c2:	701a      	strb	r2, [r3, #0]
 80067c4:	e08a      	b.n	80068dc <Paint_SetPixel+0x28c>
        else
            Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
 80067c6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80067c8:	f003 0307 	and.w	r3, r3, #7
 80067cc:	2280      	movs	r2, #128	@ 0x80
 80067ce:	fa42 f303 	asr.w	r3, r2, r3
 80067d2:	b25a      	sxtb	r2, r3
 80067d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067d8:	4313      	orrs	r3, r2
 80067da:	b259      	sxtb	r1, r3
 80067dc:	4b41      	ldr	r3, [pc, #260]	@ (80068e4 <Paint_SetPixel+0x294>)
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	4413      	add	r3, r2
 80067e4:	b2ca      	uxtb	r2, r1
 80067e6:	701a      	strb	r2, [r3, #0]
 80067e8:	e078      	b.n	80068dc <Paint_SetPixel+0x28c>
    }else if(Paint.Scale == 4){
 80067ea:	4b3e      	ldr	r3, [pc, #248]	@ (80068e4 <Paint_SetPixel+0x294>)
 80067ec:	8adb      	ldrh	r3, [r3, #22]
 80067ee:	2b04      	cmp	r3, #4
 80067f0:	d136      	bne.n	8006860 <Paint_SetPixel+0x210>
        UDOUBLE Addr = X / 4 + Y * Paint.WidthByte;
 80067f2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80067f4:	089b      	lsrs	r3, r3, #2
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	4619      	mov	r1, r3
 80067fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80067fc:	4a39      	ldr	r2, [pc, #228]	@ (80068e4 <Paint_SetPixel+0x294>)
 80067fe:	8a52      	ldrh	r2, [r2, #18]
 8006800:	fb02 f303 	mul.w	r3, r2, r3
 8006804:	440b      	add	r3, r1
 8006806:	61bb      	str	r3, [r7, #24]
        Color = Color % 4;//Guaranteed color scale is 4  --- 0~3
 8006808:	887b      	ldrh	r3, [r7, #2]
 800680a:	f003 0303 	and.w	r3, r3, #3
 800680e:	807b      	strh	r3, [r7, #2]
        UBYTE Rdata = Paint.Image[Addr];
 8006810:	4b34      	ldr	r3, [pc, #208]	@ (80068e4 <Paint_SetPixel+0x294>)
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	69bb      	ldr	r3, [r7, #24]
 8006816:	4413      	add	r3, r2
 8006818:	781b      	ldrb	r3, [r3, #0]
 800681a:	75fb      	strb	r3, [r7, #23]
        
        Rdata = Rdata & (~(0xC0 >> ((X % 4)*2)));
 800681c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800681e:	f003 0303 	and.w	r3, r3, #3
 8006822:	005b      	lsls	r3, r3, #1
 8006824:	f06f 02c0 	mvn.w	r2, #192	@ 0xc0
 8006828:	fa42 f303 	asr.w	r3, r2, r3
 800682c:	b25a      	sxtb	r2, r3
 800682e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006832:	4013      	ands	r3, r2
 8006834:	b25b      	sxtb	r3, r3
 8006836:	75fb      	strb	r3, [r7, #23]
        Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4)*2));
 8006838:	887b      	ldrh	r3, [r7, #2]
 800683a:	019a      	lsls	r2, r3, #6
 800683c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800683e:	f003 0303 	and.w	r3, r3, #3
 8006842:	005b      	lsls	r3, r3, #1
 8006844:	fa42 f303 	asr.w	r3, r2, r3
 8006848:	b25a      	sxtb	r2, r3
 800684a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800684e:	4313      	orrs	r3, r2
 8006850:	b259      	sxtb	r1, r3
 8006852:	4b24      	ldr	r3, [pc, #144]	@ (80068e4 <Paint_SetPixel+0x294>)
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	69bb      	ldr	r3, [r7, #24]
 8006858:	4413      	add	r3, r2
 800685a:	b2ca      	uxtb	r2, r1
 800685c:	701a      	strb	r2, [r3, #0]
 800685e:	e03d      	b.n	80068dc <Paint_SetPixel+0x28c>
    }else if(Paint.Scale == 6 || Paint.Scale == 7){
 8006860:	4b20      	ldr	r3, [pc, #128]	@ (80068e4 <Paint_SetPixel+0x294>)
 8006862:	8adb      	ldrh	r3, [r3, #22]
 8006864:	2b06      	cmp	r3, #6
 8006866:	d003      	beq.n	8006870 <Paint_SetPixel+0x220>
 8006868:	4b1e      	ldr	r3, [pc, #120]	@ (80068e4 <Paint_SetPixel+0x294>)
 800686a:	8adb      	ldrh	r3, [r3, #22]
 800686c:	2b07      	cmp	r3, #7
 800686e:	d135      	bne.n	80068dc <Paint_SetPixel+0x28c>
		UDOUBLE Addr = X / 2  + Y * Paint.WidthByte;
 8006870:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006872:	085b      	lsrs	r3, r3, #1
 8006874:	b29b      	uxth	r3, r3
 8006876:	4619      	mov	r1, r3
 8006878:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800687a:	4a1a      	ldr	r2, [pc, #104]	@ (80068e4 <Paint_SetPixel+0x294>)
 800687c:	8a52      	ldrh	r2, [r2, #18]
 800687e:	fb02 f303 	mul.w	r3, r2, r3
 8006882:	440b      	add	r3, r1
 8006884:	623b      	str	r3, [r7, #32]
		UBYTE Rdata = Paint.Image[Addr];
 8006886:	4b17      	ldr	r3, [pc, #92]	@ (80068e4 <Paint_SetPixel+0x294>)
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	6a3b      	ldr	r3, [r7, #32]
 800688c:	4413      	add	r3, r2
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	77fb      	strb	r3, [r7, #31]
		Rdata = Rdata & (~(0xF0 >> ((X % 2)*4)));//Clear first, then set value
 8006892:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006894:	f003 0301 	and.w	r3, r3, #1
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	f06f 02f0 	mvn.w	r2, #240	@ 0xf0
 800689e:	fa42 f303 	asr.w	r3, r2, r3
 80068a2:	b25a      	sxtb	r2, r3
 80068a4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80068a8:	4013      	ands	r3, r2
 80068aa:	b25b      	sxtb	r3, r3
 80068ac:	77fb      	strb	r3, [r7, #31]
		Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2)*4));
 80068ae:	887b      	ldrh	r3, [r7, #2]
 80068b0:	011a      	lsls	r2, r3, #4
 80068b2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80068b4:	f003 0301 	and.w	r3, r3, #1
 80068b8:	009b      	lsls	r3, r3, #2
 80068ba:	fa42 f303 	asr.w	r3, r2, r3
 80068be:	b25a      	sxtb	r2, r3
 80068c0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80068c4:	4313      	orrs	r3, r2
 80068c6:	b259      	sxtb	r1, r3
 80068c8:	4b06      	ldr	r3, [pc, #24]	@ (80068e4 <Paint_SetPixel+0x294>)
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	6a3b      	ldr	r3, [r7, #32]
 80068ce:	4413      	add	r3, r2
 80068d0:	b2ca      	uxtb	r2, r1
 80068d2:	701a      	strb	r2, [r3, #0]
 80068d4:	e002      	b.n	80068dc <Paint_SetPixel+0x28c>
        return;
 80068d6:	bf00      	nop
 80068d8:	e000      	b.n	80068dc <Paint_SetPixel+0x28c>
        return;
 80068da:	bf00      	nop
		//printf("Add =  %d ,data = %d\r\n",Addr,Rdata);
		}
}
 80068dc:	3728      	adds	r7, #40	@ 0x28
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	20000458 	.word	0x20000458
 80068e8:	08007b58 	.word	0x08007b58

080068ec <Paint_Clear>:
function: Clear the color of the picture
parameter:
    Color : Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b089      	sub	sp, #36	@ 0x24
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	4603      	mov	r3, r0
 80068f4:	80fb      	strh	r3, [r7, #6]
	if(Paint.Scale == 2) {
 80068f6:	4b50      	ldr	r3, [pc, #320]	@ (8006a38 <Paint_Clear+0x14c>)
 80068f8:	8adb      	ldrh	r3, [r3, #22]
 80068fa:	2b02      	cmp	r3, #2
 80068fc:	d125      	bne.n	800694a <Paint_Clear+0x5e>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 80068fe:	2300      	movs	r3, #0
 8006900:	83fb      	strh	r3, [r7, #30]
 8006902:	e01c      	b.n	800693e <Paint_Clear+0x52>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8006904:	2300      	movs	r3, #0
 8006906:	83bb      	strh	r3, [r7, #28]
 8006908:	e011      	b.n	800692e <Paint_Clear+0x42>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 800690a:	8bba      	ldrh	r2, [r7, #28]
 800690c:	8bfb      	ldrh	r3, [r7, #30]
 800690e:	494a      	ldr	r1, [pc, #296]	@ (8006a38 <Paint_Clear+0x14c>)
 8006910:	8a49      	ldrh	r1, [r1, #18]
 8006912:	fb01 f303 	mul.w	r3, r1, r3
 8006916:	4413      	add	r3, r2
 8006918:	60bb      	str	r3, [r7, #8]
				Paint.Image[Addr] = Color;
 800691a:	4b47      	ldr	r3, [pc, #284]	@ (8006a38 <Paint_Clear+0x14c>)
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	4413      	add	r3, r2
 8006922:	88fa      	ldrh	r2, [r7, #6]
 8006924:	b2d2      	uxtb	r2, r2
 8006926:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8006928:	8bbb      	ldrh	r3, [r7, #28]
 800692a:	3301      	adds	r3, #1
 800692c:	83bb      	strh	r3, [r7, #28]
 800692e:	4b42      	ldr	r3, [pc, #264]	@ (8006a38 <Paint_Clear+0x14c>)
 8006930:	8a5b      	ldrh	r3, [r3, #18]
 8006932:	8bba      	ldrh	r2, [r7, #28]
 8006934:	429a      	cmp	r2, r3
 8006936:	d3e8      	bcc.n	800690a <Paint_Clear+0x1e>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8006938:	8bfb      	ldrh	r3, [r7, #30]
 800693a:	3301      	adds	r3, #1
 800693c:	83fb      	strh	r3, [r7, #30]
 800693e:	4b3e      	ldr	r3, [pc, #248]	@ (8006a38 <Paint_Clear+0x14c>)
 8006940:	8a9b      	ldrh	r3, [r3, #20]
 8006942:	8bfa      	ldrh	r2, [r7, #30]
 8006944:	429a      	cmp	r2, r3
 8006946:	d3dd      	bcc.n	8006904 <Paint_Clear+0x18>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
				Paint.Image[Addr] = (Color<<4)|Color;
			}
		}		
	}
}
 8006948:	e070      	b.n	8006a2c <Paint_Clear+0x140>
    }else if(Paint.Scale == 4) {
 800694a:	4b3b      	ldr	r3, [pc, #236]	@ (8006a38 <Paint_Clear+0x14c>)
 800694c:	8adb      	ldrh	r3, [r3, #22]
 800694e:	2b04      	cmp	r3, #4
 8006950:	d138      	bne.n	80069c4 <Paint_Clear+0xd8>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8006952:	2300      	movs	r3, #0
 8006954:	837b      	strh	r3, [r7, #26]
 8006956:	e02f      	b.n	80069b8 <Paint_Clear+0xcc>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 8006958:	2300      	movs	r3, #0
 800695a:	833b      	strh	r3, [r7, #24]
 800695c:	e024      	b.n	80069a8 <Paint_Clear+0xbc>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 800695e:	8b3a      	ldrh	r2, [r7, #24]
 8006960:	8b7b      	ldrh	r3, [r7, #26]
 8006962:	4935      	ldr	r1, [pc, #212]	@ (8006a38 <Paint_Clear+0x14c>)
 8006964:	8a49      	ldrh	r1, [r1, #18]
 8006966:	fb01 f303 	mul.w	r3, r1, r3
 800696a:	4413      	add	r3, r2
 800696c:	60fb      	str	r3, [r7, #12]
				Paint.Image[Addr] = (Color<<6)|(Color<<4)|(Color<<2)|Color;
 800696e:	88fb      	ldrh	r3, [r7, #6]
 8006970:	b25b      	sxtb	r3, r3
 8006972:	019b      	lsls	r3, r3, #6
 8006974:	b25a      	sxtb	r2, r3
 8006976:	88fb      	ldrh	r3, [r7, #6]
 8006978:	b25b      	sxtb	r3, r3
 800697a:	011b      	lsls	r3, r3, #4
 800697c:	b25b      	sxtb	r3, r3
 800697e:	4313      	orrs	r3, r2
 8006980:	b25a      	sxtb	r2, r3
 8006982:	88fb      	ldrh	r3, [r7, #6]
 8006984:	b25b      	sxtb	r3, r3
 8006986:	009b      	lsls	r3, r3, #2
 8006988:	b25b      	sxtb	r3, r3
 800698a:	4313      	orrs	r3, r2
 800698c:	b25a      	sxtb	r2, r3
 800698e:	88fb      	ldrh	r3, [r7, #6]
 8006990:	b25b      	sxtb	r3, r3
 8006992:	4313      	orrs	r3, r2
 8006994:	b259      	sxtb	r1, r3
 8006996:	4b28      	ldr	r3, [pc, #160]	@ (8006a38 <Paint_Clear+0x14c>)
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	4413      	add	r3, r2
 800699e:	b2ca      	uxtb	r2, r1
 80069a0:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 80069a2:	8b3b      	ldrh	r3, [r7, #24]
 80069a4:	3301      	adds	r3, #1
 80069a6:	833b      	strh	r3, [r7, #24]
 80069a8:	4b23      	ldr	r3, [pc, #140]	@ (8006a38 <Paint_Clear+0x14c>)
 80069aa:	8a5b      	ldrh	r3, [r3, #18]
 80069ac:	8b3a      	ldrh	r2, [r7, #24]
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d3d5      	bcc.n	800695e <Paint_Clear+0x72>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 80069b2:	8b7b      	ldrh	r3, [r7, #26]
 80069b4:	3301      	adds	r3, #1
 80069b6:	837b      	strh	r3, [r7, #26]
 80069b8:	4b1f      	ldr	r3, [pc, #124]	@ (8006a38 <Paint_Clear+0x14c>)
 80069ba:	8a9b      	ldrh	r3, [r3, #20]
 80069bc:	8b7a      	ldrh	r2, [r7, #26]
 80069be:	429a      	cmp	r2, r3
 80069c0:	d3ca      	bcc.n	8006958 <Paint_Clear+0x6c>
}
 80069c2:	e033      	b.n	8006a2c <Paint_Clear+0x140>
	}else if(Paint.Scale == 6 || Paint.Scale == 7) {
 80069c4:	4b1c      	ldr	r3, [pc, #112]	@ (8006a38 <Paint_Clear+0x14c>)
 80069c6:	8adb      	ldrh	r3, [r3, #22]
 80069c8:	2b06      	cmp	r3, #6
 80069ca:	d003      	beq.n	80069d4 <Paint_Clear+0xe8>
 80069cc:	4b1a      	ldr	r3, [pc, #104]	@ (8006a38 <Paint_Clear+0x14c>)
 80069ce:	8adb      	ldrh	r3, [r3, #22]
 80069d0:	2b07      	cmp	r3, #7
 80069d2:	d12b      	bne.n	8006a2c <Paint_Clear+0x140>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 80069d4:	2300      	movs	r3, #0
 80069d6:	82fb      	strh	r3, [r7, #22]
 80069d8:	e023      	b.n	8006a22 <Paint_Clear+0x136>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 80069da:	2300      	movs	r3, #0
 80069dc:	82bb      	strh	r3, [r7, #20]
 80069de:	e018      	b.n	8006a12 <Paint_Clear+0x126>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 80069e0:	8aba      	ldrh	r2, [r7, #20]
 80069e2:	8afb      	ldrh	r3, [r7, #22]
 80069e4:	4914      	ldr	r1, [pc, #80]	@ (8006a38 <Paint_Clear+0x14c>)
 80069e6:	8a49      	ldrh	r1, [r1, #18]
 80069e8:	fb01 f303 	mul.w	r3, r1, r3
 80069ec:	4413      	add	r3, r2
 80069ee:	613b      	str	r3, [r7, #16]
				Paint.Image[Addr] = (Color<<4)|Color;
 80069f0:	88fb      	ldrh	r3, [r7, #6]
 80069f2:	b25b      	sxtb	r3, r3
 80069f4:	011b      	lsls	r3, r3, #4
 80069f6:	b25a      	sxtb	r2, r3
 80069f8:	88fb      	ldrh	r3, [r7, #6]
 80069fa:	b25b      	sxtb	r3, r3
 80069fc:	4313      	orrs	r3, r2
 80069fe:	b259      	sxtb	r1, r3
 8006a00:	4b0d      	ldr	r3, [pc, #52]	@ (8006a38 <Paint_Clear+0x14c>)
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	4413      	add	r3, r2
 8006a08:	b2ca      	uxtb	r2, r1
 8006a0a:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 8006a0c:	8abb      	ldrh	r3, [r7, #20]
 8006a0e:	3301      	adds	r3, #1
 8006a10:	82bb      	strh	r3, [r7, #20]
 8006a12:	4b09      	ldr	r3, [pc, #36]	@ (8006a38 <Paint_Clear+0x14c>)
 8006a14:	8a5b      	ldrh	r3, [r3, #18]
 8006a16:	8aba      	ldrh	r2, [r7, #20]
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d3e1      	bcc.n	80069e0 <Paint_Clear+0xf4>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8006a1c:	8afb      	ldrh	r3, [r7, #22]
 8006a1e:	3301      	adds	r3, #1
 8006a20:	82fb      	strh	r3, [r7, #22]
 8006a22:	4b05      	ldr	r3, [pc, #20]	@ (8006a38 <Paint_Clear+0x14c>)
 8006a24:	8a9b      	ldrh	r3, [r3, #20]
 8006a26:	8afa      	ldrh	r2, [r7, #22]
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d3d6      	bcc.n	80069da <Paint_Clear+0xee>
}
 8006a2c:	bf00      	nop
 8006a2e:	3724      	adds	r7, #36	@ 0x24
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bc80      	pop	{r7}
 8006a34:	4770      	bx	lr
 8006a36:	bf00      	nop
 8006a38:	20000458 	.word	0x20000458

08006a3c <Paint_ClearWindows>:
    Xend   : x end point
    Yend   : y end point
    Color  : Painted colors
******************************************************************************/
void Paint_ClearWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, UWORD Color)
{
 8006a3c:	b590      	push	{r4, r7, lr}
 8006a3e:	b085      	sub	sp, #20
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	4604      	mov	r4, r0
 8006a44:	4608      	mov	r0, r1
 8006a46:	4611      	mov	r1, r2
 8006a48:	461a      	mov	r2, r3
 8006a4a:	4623      	mov	r3, r4
 8006a4c:	80fb      	strh	r3, [r7, #6]
 8006a4e:	4603      	mov	r3, r0
 8006a50:	80bb      	strh	r3, [r7, #4]
 8006a52:	460b      	mov	r3, r1
 8006a54:	807b      	strh	r3, [r7, #2]
 8006a56:	4613      	mov	r3, r2
 8006a58:	803b      	strh	r3, [r7, #0]
    UWORD X, Y;
    for (Y = Ystart; Y < Yend; Y++) {
 8006a5a:	88bb      	ldrh	r3, [r7, #4]
 8006a5c:	81bb      	strh	r3, [r7, #12]
 8006a5e:	e012      	b.n	8006a86 <Paint_ClearWindows+0x4a>
        for (X = Xstart; X < Xend; X++) {//8 pixel =  1 byte
 8006a60:	88fb      	ldrh	r3, [r7, #6]
 8006a62:	81fb      	strh	r3, [r7, #14]
 8006a64:	e008      	b.n	8006a78 <Paint_ClearWindows+0x3c>
            Paint_SetPixel(X, Y, Color);
 8006a66:	8c3a      	ldrh	r2, [r7, #32]
 8006a68:	89b9      	ldrh	r1, [r7, #12]
 8006a6a:	89fb      	ldrh	r3, [r7, #14]
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f7ff fdef 	bl	8006650 <Paint_SetPixel>
        for (X = Xstart; X < Xend; X++) {//8 pixel =  1 byte
 8006a72:	89fb      	ldrh	r3, [r7, #14]
 8006a74:	3301      	adds	r3, #1
 8006a76:	81fb      	strh	r3, [r7, #14]
 8006a78:	89fa      	ldrh	r2, [r7, #14]
 8006a7a:	887b      	ldrh	r3, [r7, #2]
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d3f2      	bcc.n	8006a66 <Paint_ClearWindows+0x2a>
    for (Y = Ystart; Y < Yend; Y++) {
 8006a80:	89bb      	ldrh	r3, [r7, #12]
 8006a82:	3301      	adds	r3, #1
 8006a84:	81bb      	strh	r3, [r7, #12]
 8006a86:	89ba      	ldrh	r2, [r7, #12]
 8006a88:	883b      	ldrh	r3, [r7, #0]
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d3e8      	bcc.n	8006a60 <Paint_ClearWindows+0x24>
        }
    }
}
 8006a8e:	bf00      	nop
 8006a90:	bf00      	nop
 8006a92:	3714      	adds	r7, #20
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd90      	pop	{r4, r7, pc}

08006a98 <Paint_DrawChar>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b088      	sub	sp, #32
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	607b      	str	r3, [r7, #4]
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	81fb      	strh	r3, [r7, #14]
 8006aa4:	460b      	mov	r3, r1
 8006aa6:	81bb      	strh	r3, [r7, #12]
 8006aa8:	4613      	mov	r3, r2
 8006aaa:	72fb      	strb	r3, [r7, #11]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8006aac:	4b4c      	ldr	r3, [pc, #304]	@ (8006be0 <Paint_DrawChar+0x148>)
 8006aae:	889b      	ldrh	r3, [r3, #4]
 8006ab0:	89fa      	ldrh	r2, [r7, #14]
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d804      	bhi.n	8006ac0 <Paint_DrawChar+0x28>
 8006ab6:	4b4a      	ldr	r3, [pc, #296]	@ (8006be0 <Paint_DrawChar+0x148>)
 8006ab8:	88db      	ldrh	r3, [r3, #6]
 8006aba:	89ba      	ldrh	r2, [r7, #12]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d903      	bls.n	8006ac8 <Paint_DrawChar+0x30>
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 8006ac0:	4848      	ldr	r0, [pc, #288]	@ (8006be4 <Paint_DrawChar+0x14c>)
 8006ac2:	f000 fbb5 	bl	8007230 <puts>
        return;
 8006ac6:	e087      	b.n	8006bd8 <Paint_DrawChar+0x140>
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8006ac8:	7afb      	ldrb	r3, [r7, #11]
 8006aca:	3b20      	subs	r3, #32
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	88d2      	ldrh	r2, [r2, #6]
 8006ad0:	fb02 f303 	mul.w	r3, r2, r3
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	8892      	ldrh	r2, [r2, #4]
 8006ad8:	08d2      	lsrs	r2, r2, #3
 8006ada:	b292      	uxth	r2, r2
 8006adc:	4611      	mov	r1, r2
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	8892      	ldrh	r2, [r2, #4]
 8006ae2:	f002 0207 	and.w	r2, r2, #7
 8006ae6:	b292      	uxth	r2, r2
 8006ae8:	2a00      	cmp	r2, #0
 8006aea:	bf14      	ite	ne
 8006aec:	2201      	movne	r2, #1
 8006aee:	2200      	moveq	r2, #0
 8006af0:	b2d2      	uxtb	r2, r2
 8006af2:	440a      	add	r2, r1
 8006af4:	fb02 f303 	mul.w	r3, r2, r3
 8006af8:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	4413      	add	r3, r2
 8006b02:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 8006b04:	2300      	movs	r3, #0
 8006b06:	83fb      	strh	r3, [r7, #30]
 8006b08:	e061      	b.n	8006bce <Paint_DrawChar+0x136>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	83bb      	strh	r3, [r7, #28]
 8006b0e:	e04c      	b.n	8006baa <Paint_DrawChar+0x112>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 8006b10:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006b12:	2bff      	cmp	r3, #255	@ 0xff
 8006b14:	d118      	bne.n	8006b48 <Paint_DrawChar+0xb0>
                if (*ptr & (0x80 >> (Column % 8)))
 8006b16:	69bb      	ldr	r3, [r7, #24]
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	4619      	mov	r1, r3
 8006b1c:	8bbb      	ldrh	r3, [r7, #28]
 8006b1e:	f003 0307 	and.w	r3, r3, #7
 8006b22:	2280      	movs	r2, #128	@ 0x80
 8006b24:	fa42 f303 	asr.w	r3, r2, r3
 8006b28:	400b      	ands	r3, r1
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d031      	beq.n	8006b92 <Paint_DrawChar+0xfa>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8006b2e:	89fa      	ldrh	r2, [r7, #14]
 8006b30:	8bbb      	ldrh	r3, [r7, #28]
 8006b32:	4413      	add	r3, r2
 8006b34:	b298      	uxth	r0, r3
 8006b36:	89ba      	ldrh	r2, [r7, #12]
 8006b38:	8bfb      	ldrh	r3, [r7, #30]
 8006b3a:	4413      	add	r3, r2
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006b40:	4619      	mov	r1, r3
 8006b42:	f7ff fd85 	bl	8006650 <Paint_SetPixel>
 8006b46:	e024      	b.n	8006b92 <Paint_DrawChar+0xfa>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 8006b48:	69bb      	ldr	r3, [r7, #24]
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	8bbb      	ldrh	r3, [r7, #28]
 8006b50:	f003 0307 	and.w	r3, r3, #7
 8006b54:	2280      	movs	r2, #128	@ 0x80
 8006b56:	fa42 f303 	asr.w	r3, r2, r3
 8006b5a:	400b      	ands	r3, r1
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d00c      	beq.n	8006b7a <Paint_DrawChar+0xe2>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8006b60:	89fa      	ldrh	r2, [r7, #14]
 8006b62:	8bbb      	ldrh	r3, [r7, #28]
 8006b64:	4413      	add	r3, r2
 8006b66:	b298      	uxth	r0, r3
 8006b68:	89ba      	ldrh	r2, [r7, #12]
 8006b6a:	8bfb      	ldrh	r3, [r7, #30]
 8006b6c:	4413      	add	r3, r2
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006b72:	4619      	mov	r1, r3
 8006b74:	f7ff fd6c 	bl	8006650 <Paint_SetPixel>
 8006b78:	e00b      	b.n	8006b92 <Paint_DrawChar+0xfa>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 8006b7a:	89fa      	ldrh	r2, [r7, #14]
 8006b7c:	8bbb      	ldrh	r3, [r7, #28]
 8006b7e:	4413      	add	r3, r2
 8006b80:	b298      	uxth	r0, r3
 8006b82:	89ba      	ldrh	r2, [r7, #12]
 8006b84:	8bfb      	ldrh	r3, [r7, #30]
 8006b86:	4413      	add	r3, r2
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	f7ff fd5f 	bl	8006650 <Paint_SetPixel>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 8006b92:	8bbb      	ldrh	r3, [r7, #28]
 8006b94:	f003 0307 	and.w	r3, r3, #7
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	2b07      	cmp	r3, #7
 8006b9c:	d102      	bne.n	8006ba4 <Paint_DrawChar+0x10c>
                ptr++;
 8006b9e:	69bb      	ldr	r3, [r7, #24]
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8006ba4:	8bbb      	ldrh	r3, [r7, #28]
 8006ba6:	3301      	adds	r3, #1
 8006ba8:	83bb      	strh	r3, [r7, #28]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	889b      	ldrh	r3, [r3, #4]
 8006bae:	8bba      	ldrh	r2, [r7, #28]
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d3ad      	bcc.n	8006b10 <Paint_DrawChar+0x78>
        }// Write a line
        if (Font->Width % 8 != 0)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	889b      	ldrh	r3, [r3, #4]
 8006bb8:	f003 0307 	and.w	r3, r3, #7
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d002      	beq.n	8006bc8 <Paint_DrawChar+0x130>
            ptr++;
 8006bc2:	69bb      	ldr	r3, [r7, #24]
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 8006bc8:	8bfb      	ldrh	r3, [r7, #30]
 8006bca:	3301      	adds	r3, #1
 8006bcc:	83fb      	strh	r3, [r7, #30]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	88db      	ldrh	r3, [r3, #6]
 8006bd2:	8bfa      	ldrh	r2, [r7, #30]
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d398      	bcc.n	8006b0a <Paint_DrawChar+0x72>
    }// Write all
}
 8006bd8:	3720      	adds	r7, #32
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
 8006bde:	bf00      	nop
 8006be0:	20000458 	.word	0x20000458
 8006be4:	08007cbc 	.word	0x08007cbc

08006be8 <Paint_DrawString_EN>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b088      	sub	sp, #32
 8006bec:	af02      	add	r7, sp, #8
 8006bee:	60ba      	str	r2, [r7, #8]
 8006bf0:	607b      	str	r3, [r7, #4]
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	81fb      	strh	r3, [r7, #14]
 8006bf6:	460b      	mov	r3, r1
 8006bf8:	81bb      	strh	r3, [r7, #12]
    UWORD Xpoint = Xstart;
 8006bfa:	89fb      	ldrh	r3, [r7, #14]
 8006bfc:	82fb      	strh	r3, [r7, #22]
    UWORD Ypoint = Ystart;
 8006bfe:	89bb      	ldrh	r3, [r7, #12]
 8006c00:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 8006c02:	4b21      	ldr	r3, [pc, #132]	@ (8006c88 <Paint_DrawString_EN+0xa0>)
 8006c04:	889b      	ldrh	r3, [r3, #4]
 8006c06:	89fa      	ldrh	r2, [r7, #14]
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d804      	bhi.n	8006c16 <Paint_DrawString_EN+0x2e>
 8006c0c:	4b1e      	ldr	r3, [pc, #120]	@ (8006c88 <Paint_DrawString_EN+0xa0>)
 8006c0e:	88db      	ldrh	r3, [r3, #6]
 8006c10:	89ba      	ldrh	r2, [r7, #12]
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d931      	bls.n	8006c7a <Paint_DrawString_EN+0x92>
        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 8006c16:	481d      	ldr	r0, [pc, #116]	@ (8006c8c <Paint_DrawString_EN+0xa4>)
 8006c18:	f000 fb0a 	bl	8007230 <puts>
        return;
 8006c1c:	e031      	b.n	8006c82 <Paint_DrawString_EN+0x9a>
    }

    while (* pString != '\0') {
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 8006c1e:	8afb      	ldrh	r3, [r7, #22]
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	8892      	ldrh	r2, [r2, #4]
 8006c24:	4413      	add	r3, r2
 8006c26:	4a18      	ldr	r2, [pc, #96]	@ (8006c88 <Paint_DrawString_EN+0xa0>)
 8006c28:	8892      	ldrh	r2, [r2, #4]
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	dd06      	ble.n	8006c3c <Paint_DrawString_EN+0x54>
            Xpoint = Xstart;
 8006c2e:	89fb      	ldrh	r3, [r7, #14]
 8006c30:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	88da      	ldrh	r2, [r3, #6]
 8006c36:	8abb      	ldrh	r3, [r7, #20]
 8006c38:	4413      	add	r3, r2
 8006c3a:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 8006c3c:	8abb      	ldrh	r3, [r7, #20]
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	88d2      	ldrh	r2, [r2, #6]
 8006c42:	4413      	add	r3, r2
 8006c44:	4a10      	ldr	r2, [pc, #64]	@ (8006c88 <Paint_DrawString_EN+0xa0>)
 8006c46:	88d2      	ldrh	r2, [r2, #6]
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	dd03      	ble.n	8006c54 <Paint_DrawString_EN+0x6c>
            Xpoint = Xstart;
 8006c4c:	89fb      	ldrh	r3, [r7, #14]
 8006c4e:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 8006c50:	89bb      	ldrh	r3, [r7, #12]
 8006c52:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	781a      	ldrb	r2, [r3, #0]
 8006c58:	8ab9      	ldrh	r1, [r7, #20]
 8006c5a:	8af8      	ldrh	r0, [r7, #22]
 8006c5c:	8c3b      	ldrh	r3, [r7, #32]
 8006c5e:	9301      	str	r3, [sp, #4]
 8006c60:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006c62:	9300      	str	r3, [sp, #0]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f7ff ff17 	bl	8006a98 <Paint_DrawChar>

        //The next character of the address
        pString ++;
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	3301      	adds	r3, #1
 8006c6e:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	889a      	ldrh	r2, [r3, #4]
 8006c74:	8afb      	ldrh	r3, [r7, #22]
 8006c76:	4413      	add	r3, r2
 8006c78:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0') {
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	781b      	ldrb	r3, [r3, #0]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d1cd      	bne.n	8006c1e <Paint_DrawString_EN+0x36>
    }
}
 8006c82:	3718      	adds	r7, #24
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}
 8006c88:	20000458 	.word	0x20000458
 8006c8c:	08007cfc 	.word	0x08007cfc

08006c90 <Paint_DrawTime>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawTime(UWORD Xstart, UWORD Ystart, PAINT_TIME *pTime, sFONT* Font,
                    UWORD Color_Foreground, UWORD Color_Background)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b08a      	sub	sp, #40	@ 0x28
 8006c94:	af02      	add	r7, sp, #8
 8006c96:	60ba      	str	r2, [r7, #8]
 8006c98:	607b      	str	r3, [r7, #4]
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	81fb      	strh	r3, [r7, #14]
 8006c9e:	460b      	mov	r3, r1
 8006ca0:	81bb      	strh	r3, [r7, #12]
    uint8_t value[10] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};
 8006ca2:	4a76      	ldr	r2, [pc, #472]	@ (8006e7c <Paint_DrawTime+0x1ec>)
 8006ca4:	f107 0314 	add.w	r3, r7, #20
 8006ca8:	ca07      	ldmia	r2, {r0, r1, r2}
 8006caa:	c303      	stmia	r3!, {r0, r1}
 8006cac:	801a      	strh	r2, [r3, #0]

    UWORD Dx = Font->Width;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	889b      	ldrh	r3, [r3, #4]
 8006cb2:	83fb      	strh	r3, [r7, #30]

    //Write data into the cache
    Paint_DrawChar(Xstart                           , Ystart, value[pTime->Hour / 10], Font, Color_Background, Color_Foreground);
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	791b      	ldrb	r3, [r3, #4]
 8006cb8:	4a71      	ldr	r2, [pc, #452]	@ (8006e80 <Paint_DrawTime+0x1f0>)
 8006cba:	fba2 2303 	umull	r2, r3, r2, r3
 8006cbe:	08db      	lsrs	r3, r3, #3
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	3320      	adds	r3, #32
 8006cc4:	443b      	add	r3, r7
 8006cc6:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8006cca:	89b9      	ldrh	r1, [r7, #12]
 8006ccc:	89f8      	ldrh	r0, [r7, #14]
 8006cce:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006cd0:	9301      	str	r3, [sp, #4]
 8006cd2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006cd4:	9300      	str	r3, [sp, #0]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f7ff fede 	bl	8006a98 <Paint_DrawChar>
    Paint_DrawChar(Xstart + Dx                      , Ystart, value[pTime->Hour % 10], Font, Color_Background, Color_Foreground);
 8006cdc:	89fa      	ldrh	r2, [r7, #14]
 8006cde:	8bfb      	ldrh	r3, [r7, #30]
 8006ce0:	4413      	add	r3, r2
 8006ce2:	b298      	uxth	r0, r3
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	791a      	ldrb	r2, [r3, #4]
 8006ce8:	4b65      	ldr	r3, [pc, #404]	@ (8006e80 <Paint_DrawTime+0x1f0>)
 8006cea:	fba3 1302 	umull	r1, r3, r3, r2
 8006cee:	08d9      	lsrs	r1, r3, #3
 8006cf0:	460b      	mov	r3, r1
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	440b      	add	r3, r1
 8006cf6:	005b      	lsls	r3, r3, #1
 8006cf8:	1ad3      	subs	r3, r2, r3
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	3320      	adds	r3, #32
 8006cfe:	443b      	add	r3, r7
 8006d00:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8006d04:	89b9      	ldrh	r1, [r7, #12]
 8006d06:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006d08:	9301      	str	r3, [sp, #4]
 8006d0a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006d0c:	9300      	str	r3, [sp, #0]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f7ff fec2 	bl	8006a98 <Paint_DrawChar>
    Paint_DrawChar(Xstart + Dx  + Dx / 4 + Dx / 2   , Ystart, ':'                    , Font, Color_Background, Color_Foreground);
 8006d14:	89fa      	ldrh	r2, [r7, #14]
 8006d16:	8bfb      	ldrh	r3, [r7, #30]
 8006d18:	4413      	add	r3, r2
 8006d1a:	b29a      	uxth	r2, r3
 8006d1c:	8bfb      	ldrh	r3, [r7, #30]
 8006d1e:	089b      	lsrs	r3, r3, #2
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	4413      	add	r3, r2
 8006d24:	b29a      	uxth	r2, r3
 8006d26:	8bfb      	ldrh	r3, [r7, #30]
 8006d28:	085b      	lsrs	r3, r3, #1
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	4413      	add	r3, r2
 8006d2e:	b298      	uxth	r0, r3
 8006d30:	89b9      	ldrh	r1, [r7, #12]
 8006d32:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006d34:	9301      	str	r3, [sp, #4]
 8006d36:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006d38:	9300      	str	r3, [sp, #0]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	223a      	movs	r2, #58	@ 0x3a
 8006d3e:	f7ff feab 	bl	8006a98 <Paint_DrawChar>
    Paint_DrawChar(Xstart + Dx * 2 + Dx / 2         , Ystart, value[pTime->Min / 10] , Font, Color_Background, Color_Foreground);
 8006d42:	8bfb      	ldrh	r3, [r7, #30]
 8006d44:	005b      	lsls	r3, r3, #1
 8006d46:	b29a      	uxth	r2, r3
 8006d48:	89fb      	ldrh	r3, [r7, #14]
 8006d4a:	4413      	add	r3, r2
 8006d4c:	b29a      	uxth	r2, r3
 8006d4e:	8bfb      	ldrh	r3, [r7, #30]
 8006d50:	085b      	lsrs	r3, r3, #1
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	4413      	add	r3, r2
 8006d56:	b298      	uxth	r0, r3
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	795b      	ldrb	r3, [r3, #5]
 8006d5c:	4a48      	ldr	r2, [pc, #288]	@ (8006e80 <Paint_DrawTime+0x1f0>)
 8006d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d62:	08db      	lsrs	r3, r3, #3
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	3320      	adds	r3, #32
 8006d68:	443b      	add	r3, r7
 8006d6a:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8006d6e:	89b9      	ldrh	r1, [r7, #12]
 8006d70:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006d72:	9301      	str	r3, [sp, #4]
 8006d74:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006d76:	9300      	str	r3, [sp, #0]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f7ff fe8d 	bl	8006a98 <Paint_DrawChar>
    Paint_DrawChar(Xstart + Dx * 3 + Dx / 2         , Ystart, value[pTime->Min % 10] , Font, Color_Background, Color_Foreground);
 8006d7e:	8bfb      	ldrh	r3, [r7, #30]
 8006d80:	461a      	mov	r2, r3
 8006d82:	0052      	lsls	r2, r2, #1
 8006d84:	4413      	add	r3, r2
 8006d86:	b29a      	uxth	r2, r3
 8006d88:	89fb      	ldrh	r3, [r7, #14]
 8006d8a:	4413      	add	r3, r2
 8006d8c:	b29a      	uxth	r2, r3
 8006d8e:	8bfb      	ldrh	r3, [r7, #30]
 8006d90:	085b      	lsrs	r3, r3, #1
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	4413      	add	r3, r2
 8006d96:	b298      	uxth	r0, r3
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	795a      	ldrb	r2, [r3, #5]
 8006d9c:	4b38      	ldr	r3, [pc, #224]	@ (8006e80 <Paint_DrawTime+0x1f0>)
 8006d9e:	fba3 1302 	umull	r1, r3, r3, r2
 8006da2:	08d9      	lsrs	r1, r3, #3
 8006da4:	460b      	mov	r3, r1
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	440b      	add	r3, r1
 8006daa:	005b      	lsls	r3, r3, #1
 8006dac:	1ad3      	subs	r3, r2, r3
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	3320      	adds	r3, #32
 8006db2:	443b      	add	r3, r7
 8006db4:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8006db8:	89b9      	ldrh	r1, [r7, #12]
 8006dba:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006dbc:	9301      	str	r3, [sp, #4]
 8006dbe:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006dc0:	9300      	str	r3, [sp, #0]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f7ff fe68 	bl	8006a98 <Paint_DrawChar>
    Paint_DrawChar(Xstart + Dx * 4 + Dx / 2 - Dx / 4, Ystart, ':'                    , Font, Color_Background, Color_Foreground);
 8006dc8:	8bfb      	ldrh	r3, [r7, #30]
 8006dca:	009b      	lsls	r3, r3, #2
 8006dcc:	b29a      	uxth	r2, r3
 8006dce:	89fb      	ldrh	r3, [r7, #14]
 8006dd0:	4413      	add	r3, r2
 8006dd2:	b29a      	uxth	r2, r3
 8006dd4:	8bfb      	ldrh	r3, [r7, #30]
 8006dd6:	085b      	lsrs	r3, r3, #1
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	4413      	add	r3, r2
 8006ddc:	b29a      	uxth	r2, r3
 8006dde:	8bfb      	ldrh	r3, [r7, #30]
 8006de0:	089b      	lsrs	r3, r3, #2
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	1ad3      	subs	r3, r2, r3
 8006de6:	b298      	uxth	r0, r3
 8006de8:	89b9      	ldrh	r1, [r7, #12]
 8006dea:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006dec:	9301      	str	r3, [sp, #4]
 8006dee:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006df0:	9300      	str	r3, [sp, #0]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	223a      	movs	r2, #58	@ 0x3a
 8006df6:	f7ff fe4f 	bl	8006a98 <Paint_DrawChar>
    Paint_DrawChar(Xstart + Dx * 5                  , Ystart, value[pTime->Sec / 10] , Font, Color_Background, Color_Foreground);
 8006dfa:	8bfb      	ldrh	r3, [r7, #30]
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	0092      	lsls	r2, r2, #2
 8006e00:	4413      	add	r3, r2
 8006e02:	b29a      	uxth	r2, r3
 8006e04:	89fb      	ldrh	r3, [r7, #14]
 8006e06:	4413      	add	r3, r2
 8006e08:	b298      	uxth	r0, r3
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	799b      	ldrb	r3, [r3, #6]
 8006e0e:	4a1c      	ldr	r2, [pc, #112]	@ (8006e80 <Paint_DrawTime+0x1f0>)
 8006e10:	fba2 2303 	umull	r2, r3, r2, r3
 8006e14:	08db      	lsrs	r3, r3, #3
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	3320      	adds	r3, #32
 8006e1a:	443b      	add	r3, r7
 8006e1c:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8006e20:	89b9      	ldrh	r1, [r7, #12]
 8006e22:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006e24:	9301      	str	r3, [sp, #4]
 8006e26:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006e28:	9300      	str	r3, [sp, #0]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f7ff fe34 	bl	8006a98 <Paint_DrawChar>
    Paint_DrawChar(Xstart + Dx * 6                  , Ystart, value[pTime->Sec % 10] , Font, Color_Background, Color_Foreground);
 8006e30:	8bfb      	ldrh	r3, [r7, #30]
 8006e32:	461a      	mov	r2, r3
 8006e34:	0052      	lsls	r2, r2, #1
 8006e36:	4413      	add	r3, r2
 8006e38:	005b      	lsls	r3, r3, #1
 8006e3a:	b29a      	uxth	r2, r3
 8006e3c:	89fb      	ldrh	r3, [r7, #14]
 8006e3e:	4413      	add	r3, r2
 8006e40:	b298      	uxth	r0, r3
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	799a      	ldrb	r2, [r3, #6]
 8006e46:	4b0e      	ldr	r3, [pc, #56]	@ (8006e80 <Paint_DrawTime+0x1f0>)
 8006e48:	fba3 1302 	umull	r1, r3, r3, r2
 8006e4c:	08d9      	lsrs	r1, r3, #3
 8006e4e:	460b      	mov	r3, r1
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	440b      	add	r3, r1
 8006e54:	005b      	lsls	r3, r3, #1
 8006e56:	1ad3      	subs	r3, r2, r3
 8006e58:	b2db      	uxtb	r3, r3
 8006e5a:	3320      	adds	r3, #32
 8006e5c:	443b      	add	r3, r7
 8006e5e:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8006e62:	89b9      	ldrh	r1, [r7, #12]
 8006e64:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006e66:	9301      	str	r3, [sp, #4]
 8006e68:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006e6a:	9300      	str	r3, [sp, #0]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f7ff fe13 	bl	8006a98 <Paint_DrawChar>
}
 8006e72:	bf00      	nop
 8006e74:	3720      	adds	r7, #32
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	bf00      	nop
 8006e7c:	08007d7c 	.word	0x08007d7c
 8006e80:	cccccccd 	.word	0xcccccccd

08006e84 <malloc>:
 8006e84:	4b02      	ldr	r3, [pc, #8]	@ (8006e90 <malloc+0xc>)
 8006e86:	4601      	mov	r1, r0
 8006e88:	6818      	ldr	r0, [r3, #0]
 8006e8a:	f000 b82d 	b.w	8006ee8 <_malloc_r>
 8006e8e:	bf00      	nop
 8006e90:	20000258 	.word	0x20000258

08006e94 <free>:
 8006e94:	4b02      	ldr	r3, [pc, #8]	@ (8006ea0 <free+0xc>)
 8006e96:	4601      	mov	r1, r0
 8006e98:	6818      	ldr	r0, [r3, #0]
 8006e9a:	f000 bb35 	b.w	8007508 <_free_r>
 8006e9e:	bf00      	nop
 8006ea0:	20000258 	.word	0x20000258

08006ea4 <sbrk_aligned>:
 8006ea4:	b570      	push	{r4, r5, r6, lr}
 8006ea6:	4e0f      	ldr	r6, [pc, #60]	@ (8006ee4 <sbrk_aligned+0x40>)
 8006ea8:	460c      	mov	r4, r1
 8006eaa:	6831      	ldr	r1, [r6, #0]
 8006eac:	4605      	mov	r5, r0
 8006eae:	b911      	cbnz	r1, 8006eb6 <sbrk_aligned+0x12>
 8006eb0:	f000 fada 	bl	8007468 <_sbrk_r>
 8006eb4:	6030      	str	r0, [r6, #0]
 8006eb6:	4621      	mov	r1, r4
 8006eb8:	4628      	mov	r0, r5
 8006eba:	f000 fad5 	bl	8007468 <_sbrk_r>
 8006ebe:	1c43      	adds	r3, r0, #1
 8006ec0:	d103      	bne.n	8006eca <sbrk_aligned+0x26>
 8006ec2:	f04f 34ff 	mov.w	r4, #4294967295
 8006ec6:	4620      	mov	r0, r4
 8006ec8:	bd70      	pop	{r4, r5, r6, pc}
 8006eca:	1cc4      	adds	r4, r0, #3
 8006ecc:	f024 0403 	bic.w	r4, r4, #3
 8006ed0:	42a0      	cmp	r0, r4
 8006ed2:	d0f8      	beq.n	8006ec6 <sbrk_aligned+0x22>
 8006ed4:	1a21      	subs	r1, r4, r0
 8006ed6:	4628      	mov	r0, r5
 8006ed8:	f000 fac6 	bl	8007468 <_sbrk_r>
 8006edc:	3001      	adds	r0, #1
 8006ede:	d1f2      	bne.n	8006ec6 <sbrk_aligned+0x22>
 8006ee0:	e7ef      	b.n	8006ec2 <sbrk_aligned+0x1e>
 8006ee2:	bf00      	nop
 8006ee4:	20000470 	.word	0x20000470

08006ee8 <_malloc_r>:
 8006ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006eec:	1ccd      	adds	r5, r1, #3
 8006eee:	f025 0503 	bic.w	r5, r5, #3
 8006ef2:	3508      	adds	r5, #8
 8006ef4:	2d0c      	cmp	r5, #12
 8006ef6:	bf38      	it	cc
 8006ef8:	250c      	movcc	r5, #12
 8006efa:	2d00      	cmp	r5, #0
 8006efc:	4606      	mov	r6, r0
 8006efe:	db01      	blt.n	8006f04 <_malloc_r+0x1c>
 8006f00:	42a9      	cmp	r1, r5
 8006f02:	d904      	bls.n	8006f0e <_malloc_r+0x26>
 8006f04:	230c      	movs	r3, #12
 8006f06:	6033      	str	r3, [r6, #0]
 8006f08:	2000      	movs	r0, #0
 8006f0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006fe4 <_malloc_r+0xfc>
 8006f12:	f000 f869 	bl	8006fe8 <__malloc_lock>
 8006f16:	f8d8 3000 	ldr.w	r3, [r8]
 8006f1a:	461c      	mov	r4, r3
 8006f1c:	bb44      	cbnz	r4, 8006f70 <_malloc_r+0x88>
 8006f1e:	4629      	mov	r1, r5
 8006f20:	4630      	mov	r0, r6
 8006f22:	f7ff ffbf 	bl	8006ea4 <sbrk_aligned>
 8006f26:	1c43      	adds	r3, r0, #1
 8006f28:	4604      	mov	r4, r0
 8006f2a:	d158      	bne.n	8006fde <_malloc_r+0xf6>
 8006f2c:	f8d8 4000 	ldr.w	r4, [r8]
 8006f30:	4627      	mov	r7, r4
 8006f32:	2f00      	cmp	r7, #0
 8006f34:	d143      	bne.n	8006fbe <_malloc_r+0xd6>
 8006f36:	2c00      	cmp	r4, #0
 8006f38:	d04b      	beq.n	8006fd2 <_malloc_r+0xea>
 8006f3a:	6823      	ldr	r3, [r4, #0]
 8006f3c:	4639      	mov	r1, r7
 8006f3e:	4630      	mov	r0, r6
 8006f40:	eb04 0903 	add.w	r9, r4, r3
 8006f44:	f000 fa90 	bl	8007468 <_sbrk_r>
 8006f48:	4581      	cmp	r9, r0
 8006f4a:	d142      	bne.n	8006fd2 <_malloc_r+0xea>
 8006f4c:	6821      	ldr	r1, [r4, #0]
 8006f4e:	4630      	mov	r0, r6
 8006f50:	1a6d      	subs	r5, r5, r1
 8006f52:	4629      	mov	r1, r5
 8006f54:	f7ff ffa6 	bl	8006ea4 <sbrk_aligned>
 8006f58:	3001      	adds	r0, #1
 8006f5a:	d03a      	beq.n	8006fd2 <_malloc_r+0xea>
 8006f5c:	6823      	ldr	r3, [r4, #0]
 8006f5e:	442b      	add	r3, r5
 8006f60:	6023      	str	r3, [r4, #0]
 8006f62:	f8d8 3000 	ldr.w	r3, [r8]
 8006f66:	685a      	ldr	r2, [r3, #4]
 8006f68:	bb62      	cbnz	r2, 8006fc4 <_malloc_r+0xdc>
 8006f6a:	f8c8 7000 	str.w	r7, [r8]
 8006f6e:	e00f      	b.n	8006f90 <_malloc_r+0xa8>
 8006f70:	6822      	ldr	r2, [r4, #0]
 8006f72:	1b52      	subs	r2, r2, r5
 8006f74:	d420      	bmi.n	8006fb8 <_malloc_r+0xd0>
 8006f76:	2a0b      	cmp	r2, #11
 8006f78:	d917      	bls.n	8006faa <_malloc_r+0xc2>
 8006f7a:	1961      	adds	r1, r4, r5
 8006f7c:	42a3      	cmp	r3, r4
 8006f7e:	6025      	str	r5, [r4, #0]
 8006f80:	bf18      	it	ne
 8006f82:	6059      	strne	r1, [r3, #4]
 8006f84:	6863      	ldr	r3, [r4, #4]
 8006f86:	bf08      	it	eq
 8006f88:	f8c8 1000 	streq.w	r1, [r8]
 8006f8c:	5162      	str	r2, [r4, r5]
 8006f8e:	604b      	str	r3, [r1, #4]
 8006f90:	4630      	mov	r0, r6
 8006f92:	f000 f82f 	bl	8006ff4 <__malloc_unlock>
 8006f96:	f104 000b 	add.w	r0, r4, #11
 8006f9a:	1d23      	adds	r3, r4, #4
 8006f9c:	f020 0007 	bic.w	r0, r0, #7
 8006fa0:	1ac2      	subs	r2, r0, r3
 8006fa2:	bf1c      	itt	ne
 8006fa4:	1a1b      	subne	r3, r3, r0
 8006fa6:	50a3      	strne	r3, [r4, r2]
 8006fa8:	e7af      	b.n	8006f0a <_malloc_r+0x22>
 8006faa:	6862      	ldr	r2, [r4, #4]
 8006fac:	42a3      	cmp	r3, r4
 8006fae:	bf0c      	ite	eq
 8006fb0:	f8c8 2000 	streq.w	r2, [r8]
 8006fb4:	605a      	strne	r2, [r3, #4]
 8006fb6:	e7eb      	b.n	8006f90 <_malloc_r+0xa8>
 8006fb8:	4623      	mov	r3, r4
 8006fba:	6864      	ldr	r4, [r4, #4]
 8006fbc:	e7ae      	b.n	8006f1c <_malloc_r+0x34>
 8006fbe:	463c      	mov	r4, r7
 8006fc0:	687f      	ldr	r7, [r7, #4]
 8006fc2:	e7b6      	b.n	8006f32 <_malloc_r+0x4a>
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	42a3      	cmp	r3, r4
 8006fca:	d1fb      	bne.n	8006fc4 <_malloc_r+0xdc>
 8006fcc:	2300      	movs	r3, #0
 8006fce:	6053      	str	r3, [r2, #4]
 8006fd0:	e7de      	b.n	8006f90 <_malloc_r+0xa8>
 8006fd2:	230c      	movs	r3, #12
 8006fd4:	4630      	mov	r0, r6
 8006fd6:	6033      	str	r3, [r6, #0]
 8006fd8:	f000 f80c 	bl	8006ff4 <__malloc_unlock>
 8006fdc:	e794      	b.n	8006f08 <_malloc_r+0x20>
 8006fde:	6005      	str	r5, [r0, #0]
 8006fe0:	e7d6      	b.n	8006f90 <_malloc_r+0xa8>
 8006fe2:	bf00      	nop
 8006fe4:	20000474 	.word	0x20000474

08006fe8 <__malloc_lock>:
 8006fe8:	4801      	ldr	r0, [pc, #4]	@ (8006ff0 <__malloc_lock+0x8>)
 8006fea:	f000 ba8a 	b.w	8007502 <__retarget_lock_acquire_recursive>
 8006fee:	bf00      	nop
 8006ff0:	200005b8 	.word	0x200005b8

08006ff4 <__malloc_unlock>:
 8006ff4:	4801      	ldr	r0, [pc, #4]	@ (8006ffc <__malloc_unlock+0x8>)
 8006ff6:	f000 ba85 	b.w	8007504 <__retarget_lock_release_recursive>
 8006ffa:	bf00      	nop
 8006ffc:	200005b8 	.word	0x200005b8

08007000 <std>:
 8007000:	2300      	movs	r3, #0
 8007002:	b510      	push	{r4, lr}
 8007004:	4604      	mov	r4, r0
 8007006:	e9c0 3300 	strd	r3, r3, [r0]
 800700a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800700e:	6083      	str	r3, [r0, #8]
 8007010:	8181      	strh	r1, [r0, #12]
 8007012:	6643      	str	r3, [r0, #100]	@ 0x64
 8007014:	81c2      	strh	r2, [r0, #14]
 8007016:	6183      	str	r3, [r0, #24]
 8007018:	4619      	mov	r1, r3
 800701a:	2208      	movs	r2, #8
 800701c:	305c      	adds	r0, #92	@ 0x5c
 800701e:	f000 f9e7 	bl	80073f0 <memset>
 8007022:	4b0d      	ldr	r3, [pc, #52]	@ (8007058 <std+0x58>)
 8007024:	6224      	str	r4, [r4, #32]
 8007026:	6263      	str	r3, [r4, #36]	@ 0x24
 8007028:	4b0c      	ldr	r3, [pc, #48]	@ (800705c <std+0x5c>)
 800702a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800702c:	4b0c      	ldr	r3, [pc, #48]	@ (8007060 <std+0x60>)
 800702e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007030:	4b0c      	ldr	r3, [pc, #48]	@ (8007064 <std+0x64>)
 8007032:	6323      	str	r3, [r4, #48]	@ 0x30
 8007034:	4b0c      	ldr	r3, [pc, #48]	@ (8007068 <std+0x68>)
 8007036:	429c      	cmp	r4, r3
 8007038:	d006      	beq.n	8007048 <std+0x48>
 800703a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800703e:	4294      	cmp	r4, r2
 8007040:	d002      	beq.n	8007048 <std+0x48>
 8007042:	33d0      	adds	r3, #208	@ 0xd0
 8007044:	429c      	cmp	r4, r3
 8007046:	d105      	bne.n	8007054 <std+0x54>
 8007048:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800704c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007050:	f000 ba56 	b.w	8007500 <__retarget_lock_init_recursive>
 8007054:	bd10      	pop	{r4, pc}
 8007056:	bf00      	nop
 8007058:	08007241 	.word	0x08007241
 800705c:	08007263 	.word	0x08007263
 8007060:	0800729b 	.word	0x0800729b
 8007064:	080072bf 	.word	0x080072bf
 8007068:	20000478 	.word	0x20000478

0800706c <stdio_exit_handler>:
 800706c:	4a02      	ldr	r2, [pc, #8]	@ (8007078 <stdio_exit_handler+0xc>)
 800706e:	4903      	ldr	r1, [pc, #12]	@ (800707c <stdio_exit_handler+0x10>)
 8007070:	4803      	ldr	r0, [pc, #12]	@ (8007080 <stdio_exit_handler+0x14>)
 8007072:	f000 b869 	b.w	8007148 <_fwalk_sglue>
 8007076:	bf00      	nop
 8007078:	2000024c 	.word	0x2000024c
 800707c:	08007699 	.word	0x08007699
 8007080:	2000025c 	.word	0x2000025c

08007084 <cleanup_stdio>:
 8007084:	6841      	ldr	r1, [r0, #4]
 8007086:	4b0c      	ldr	r3, [pc, #48]	@ (80070b8 <cleanup_stdio+0x34>)
 8007088:	b510      	push	{r4, lr}
 800708a:	4299      	cmp	r1, r3
 800708c:	4604      	mov	r4, r0
 800708e:	d001      	beq.n	8007094 <cleanup_stdio+0x10>
 8007090:	f000 fb02 	bl	8007698 <_fflush_r>
 8007094:	68a1      	ldr	r1, [r4, #8]
 8007096:	4b09      	ldr	r3, [pc, #36]	@ (80070bc <cleanup_stdio+0x38>)
 8007098:	4299      	cmp	r1, r3
 800709a:	d002      	beq.n	80070a2 <cleanup_stdio+0x1e>
 800709c:	4620      	mov	r0, r4
 800709e:	f000 fafb 	bl	8007698 <_fflush_r>
 80070a2:	68e1      	ldr	r1, [r4, #12]
 80070a4:	4b06      	ldr	r3, [pc, #24]	@ (80070c0 <cleanup_stdio+0x3c>)
 80070a6:	4299      	cmp	r1, r3
 80070a8:	d004      	beq.n	80070b4 <cleanup_stdio+0x30>
 80070aa:	4620      	mov	r0, r4
 80070ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070b0:	f000 baf2 	b.w	8007698 <_fflush_r>
 80070b4:	bd10      	pop	{r4, pc}
 80070b6:	bf00      	nop
 80070b8:	20000478 	.word	0x20000478
 80070bc:	200004e0 	.word	0x200004e0
 80070c0:	20000548 	.word	0x20000548

080070c4 <global_stdio_init.part.0>:
 80070c4:	b510      	push	{r4, lr}
 80070c6:	4b0b      	ldr	r3, [pc, #44]	@ (80070f4 <global_stdio_init.part.0+0x30>)
 80070c8:	4c0b      	ldr	r4, [pc, #44]	@ (80070f8 <global_stdio_init.part.0+0x34>)
 80070ca:	4a0c      	ldr	r2, [pc, #48]	@ (80070fc <global_stdio_init.part.0+0x38>)
 80070cc:	4620      	mov	r0, r4
 80070ce:	601a      	str	r2, [r3, #0]
 80070d0:	2104      	movs	r1, #4
 80070d2:	2200      	movs	r2, #0
 80070d4:	f7ff ff94 	bl	8007000 <std>
 80070d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80070dc:	2201      	movs	r2, #1
 80070de:	2109      	movs	r1, #9
 80070e0:	f7ff ff8e 	bl	8007000 <std>
 80070e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80070e8:	2202      	movs	r2, #2
 80070ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070ee:	2112      	movs	r1, #18
 80070f0:	f7ff bf86 	b.w	8007000 <std>
 80070f4:	200005b0 	.word	0x200005b0
 80070f8:	20000478 	.word	0x20000478
 80070fc:	0800706d 	.word	0x0800706d

08007100 <__sfp_lock_acquire>:
 8007100:	4801      	ldr	r0, [pc, #4]	@ (8007108 <__sfp_lock_acquire+0x8>)
 8007102:	f000 b9fe 	b.w	8007502 <__retarget_lock_acquire_recursive>
 8007106:	bf00      	nop
 8007108:	200005b9 	.word	0x200005b9

0800710c <__sfp_lock_release>:
 800710c:	4801      	ldr	r0, [pc, #4]	@ (8007114 <__sfp_lock_release+0x8>)
 800710e:	f000 b9f9 	b.w	8007504 <__retarget_lock_release_recursive>
 8007112:	bf00      	nop
 8007114:	200005b9 	.word	0x200005b9

08007118 <__sinit>:
 8007118:	b510      	push	{r4, lr}
 800711a:	4604      	mov	r4, r0
 800711c:	f7ff fff0 	bl	8007100 <__sfp_lock_acquire>
 8007120:	6a23      	ldr	r3, [r4, #32]
 8007122:	b11b      	cbz	r3, 800712c <__sinit+0x14>
 8007124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007128:	f7ff bff0 	b.w	800710c <__sfp_lock_release>
 800712c:	4b04      	ldr	r3, [pc, #16]	@ (8007140 <__sinit+0x28>)
 800712e:	6223      	str	r3, [r4, #32]
 8007130:	4b04      	ldr	r3, [pc, #16]	@ (8007144 <__sinit+0x2c>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d1f5      	bne.n	8007124 <__sinit+0xc>
 8007138:	f7ff ffc4 	bl	80070c4 <global_stdio_init.part.0>
 800713c:	e7f2      	b.n	8007124 <__sinit+0xc>
 800713e:	bf00      	nop
 8007140:	08007085 	.word	0x08007085
 8007144:	200005b0 	.word	0x200005b0

08007148 <_fwalk_sglue>:
 8007148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800714c:	4607      	mov	r7, r0
 800714e:	4688      	mov	r8, r1
 8007150:	4614      	mov	r4, r2
 8007152:	2600      	movs	r6, #0
 8007154:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007158:	f1b9 0901 	subs.w	r9, r9, #1
 800715c:	d505      	bpl.n	800716a <_fwalk_sglue+0x22>
 800715e:	6824      	ldr	r4, [r4, #0]
 8007160:	2c00      	cmp	r4, #0
 8007162:	d1f7      	bne.n	8007154 <_fwalk_sglue+0xc>
 8007164:	4630      	mov	r0, r6
 8007166:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800716a:	89ab      	ldrh	r3, [r5, #12]
 800716c:	2b01      	cmp	r3, #1
 800716e:	d907      	bls.n	8007180 <_fwalk_sglue+0x38>
 8007170:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007174:	3301      	adds	r3, #1
 8007176:	d003      	beq.n	8007180 <_fwalk_sglue+0x38>
 8007178:	4629      	mov	r1, r5
 800717a:	4638      	mov	r0, r7
 800717c:	47c0      	blx	r8
 800717e:	4306      	orrs	r6, r0
 8007180:	3568      	adds	r5, #104	@ 0x68
 8007182:	e7e9      	b.n	8007158 <_fwalk_sglue+0x10>

08007184 <_puts_r>:
 8007184:	6a03      	ldr	r3, [r0, #32]
 8007186:	b570      	push	{r4, r5, r6, lr}
 8007188:	4605      	mov	r5, r0
 800718a:	460e      	mov	r6, r1
 800718c:	6884      	ldr	r4, [r0, #8]
 800718e:	b90b      	cbnz	r3, 8007194 <_puts_r+0x10>
 8007190:	f7ff ffc2 	bl	8007118 <__sinit>
 8007194:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007196:	07db      	lsls	r3, r3, #31
 8007198:	d405      	bmi.n	80071a6 <_puts_r+0x22>
 800719a:	89a3      	ldrh	r3, [r4, #12]
 800719c:	0598      	lsls	r0, r3, #22
 800719e:	d402      	bmi.n	80071a6 <_puts_r+0x22>
 80071a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80071a2:	f000 f9ae 	bl	8007502 <__retarget_lock_acquire_recursive>
 80071a6:	89a3      	ldrh	r3, [r4, #12]
 80071a8:	0719      	lsls	r1, r3, #28
 80071aa:	d502      	bpl.n	80071b2 <_puts_r+0x2e>
 80071ac:	6923      	ldr	r3, [r4, #16]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d135      	bne.n	800721e <_puts_r+0x9a>
 80071b2:	4621      	mov	r1, r4
 80071b4:	4628      	mov	r0, r5
 80071b6:	f000 f8c5 	bl	8007344 <__swsetup_r>
 80071ba:	b380      	cbz	r0, 800721e <_puts_r+0x9a>
 80071bc:	f04f 35ff 	mov.w	r5, #4294967295
 80071c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80071c2:	07da      	lsls	r2, r3, #31
 80071c4:	d405      	bmi.n	80071d2 <_puts_r+0x4e>
 80071c6:	89a3      	ldrh	r3, [r4, #12]
 80071c8:	059b      	lsls	r3, r3, #22
 80071ca:	d402      	bmi.n	80071d2 <_puts_r+0x4e>
 80071cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80071ce:	f000 f999 	bl	8007504 <__retarget_lock_release_recursive>
 80071d2:	4628      	mov	r0, r5
 80071d4:	bd70      	pop	{r4, r5, r6, pc}
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	da04      	bge.n	80071e4 <_puts_r+0x60>
 80071da:	69a2      	ldr	r2, [r4, #24]
 80071dc:	429a      	cmp	r2, r3
 80071de:	dc17      	bgt.n	8007210 <_puts_r+0x8c>
 80071e0:	290a      	cmp	r1, #10
 80071e2:	d015      	beq.n	8007210 <_puts_r+0x8c>
 80071e4:	6823      	ldr	r3, [r4, #0]
 80071e6:	1c5a      	adds	r2, r3, #1
 80071e8:	6022      	str	r2, [r4, #0]
 80071ea:	7019      	strb	r1, [r3, #0]
 80071ec:	68a3      	ldr	r3, [r4, #8]
 80071ee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80071f2:	3b01      	subs	r3, #1
 80071f4:	60a3      	str	r3, [r4, #8]
 80071f6:	2900      	cmp	r1, #0
 80071f8:	d1ed      	bne.n	80071d6 <_puts_r+0x52>
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	da11      	bge.n	8007222 <_puts_r+0x9e>
 80071fe:	4622      	mov	r2, r4
 8007200:	210a      	movs	r1, #10
 8007202:	4628      	mov	r0, r5
 8007204:	f000 f85f 	bl	80072c6 <__swbuf_r>
 8007208:	3001      	adds	r0, #1
 800720a:	d0d7      	beq.n	80071bc <_puts_r+0x38>
 800720c:	250a      	movs	r5, #10
 800720e:	e7d7      	b.n	80071c0 <_puts_r+0x3c>
 8007210:	4622      	mov	r2, r4
 8007212:	4628      	mov	r0, r5
 8007214:	f000 f857 	bl	80072c6 <__swbuf_r>
 8007218:	3001      	adds	r0, #1
 800721a:	d1e7      	bne.n	80071ec <_puts_r+0x68>
 800721c:	e7ce      	b.n	80071bc <_puts_r+0x38>
 800721e:	3e01      	subs	r6, #1
 8007220:	e7e4      	b.n	80071ec <_puts_r+0x68>
 8007222:	6823      	ldr	r3, [r4, #0]
 8007224:	1c5a      	adds	r2, r3, #1
 8007226:	6022      	str	r2, [r4, #0]
 8007228:	220a      	movs	r2, #10
 800722a:	701a      	strb	r2, [r3, #0]
 800722c:	e7ee      	b.n	800720c <_puts_r+0x88>
	...

08007230 <puts>:
 8007230:	4b02      	ldr	r3, [pc, #8]	@ (800723c <puts+0xc>)
 8007232:	4601      	mov	r1, r0
 8007234:	6818      	ldr	r0, [r3, #0]
 8007236:	f7ff bfa5 	b.w	8007184 <_puts_r>
 800723a:	bf00      	nop
 800723c:	20000258 	.word	0x20000258

08007240 <__sread>:
 8007240:	b510      	push	{r4, lr}
 8007242:	460c      	mov	r4, r1
 8007244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007248:	f000 f8fc 	bl	8007444 <_read_r>
 800724c:	2800      	cmp	r0, #0
 800724e:	bfab      	itete	ge
 8007250:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007252:	89a3      	ldrhlt	r3, [r4, #12]
 8007254:	181b      	addge	r3, r3, r0
 8007256:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800725a:	bfac      	ite	ge
 800725c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800725e:	81a3      	strhlt	r3, [r4, #12]
 8007260:	bd10      	pop	{r4, pc}

08007262 <__swrite>:
 8007262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007266:	461f      	mov	r7, r3
 8007268:	898b      	ldrh	r3, [r1, #12]
 800726a:	4605      	mov	r5, r0
 800726c:	05db      	lsls	r3, r3, #23
 800726e:	460c      	mov	r4, r1
 8007270:	4616      	mov	r6, r2
 8007272:	d505      	bpl.n	8007280 <__swrite+0x1e>
 8007274:	2302      	movs	r3, #2
 8007276:	2200      	movs	r2, #0
 8007278:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800727c:	f000 f8d0 	bl	8007420 <_lseek_r>
 8007280:	89a3      	ldrh	r3, [r4, #12]
 8007282:	4632      	mov	r2, r6
 8007284:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007288:	81a3      	strh	r3, [r4, #12]
 800728a:	4628      	mov	r0, r5
 800728c:	463b      	mov	r3, r7
 800728e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007292:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007296:	f000 b8f7 	b.w	8007488 <_write_r>

0800729a <__sseek>:
 800729a:	b510      	push	{r4, lr}
 800729c:	460c      	mov	r4, r1
 800729e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072a2:	f000 f8bd 	bl	8007420 <_lseek_r>
 80072a6:	1c43      	adds	r3, r0, #1
 80072a8:	89a3      	ldrh	r3, [r4, #12]
 80072aa:	bf15      	itete	ne
 80072ac:	6560      	strne	r0, [r4, #84]	@ 0x54
 80072ae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80072b2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80072b6:	81a3      	strheq	r3, [r4, #12]
 80072b8:	bf18      	it	ne
 80072ba:	81a3      	strhne	r3, [r4, #12]
 80072bc:	bd10      	pop	{r4, pc}

080072be <__sclose>:
 80072be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072c2:	f000 b89d 	b.w	8007400 <_close_r>

080072c6 <__swbuf_r>:
 80072c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072c8:	460e      	mov	r6, r1
 80072ca:	4614      	mov	r4, r2
 80072cc:	4605      	mov	r5, r0
 80072ce:	b118      	cbz	r0, 80072d8 <__swbuf_r+0x12>
 80072d0:	6a03      	ldr	r3, [r0, #32]
 80072d2:	b90b      	cbnz	r3, 80072d8 <__swbuf_r+0x12>
 80072d4:	f7ff ff20 	bl	8007118 <__sinit>
 80072d8:	69a3      	ldr	r3, [r4, #24]
 80072da:	60a3      	str	r3, [r4, #8]
 80072dc:	89a3      	ldrh	r3, [r4, #12]
 80072de:	071a      	lsls	r2, r3, #28
 80072e0:	d501      	bpl.n	80072e6 <__swbuf_r+0x20>
 80072e2:	6923      	ldr	r3, [r4, #16]
 80072e4:	b943      	cbnz	r3, 80072f8 <__swbuf_r+0x32>
 80072e6:	4621      	mov	r1, r4
 80072e8:	4628      	mov	r0, r5
 80072ea:	f000 f82b 	bl	8007344 <__swsetup_r>
 80072ee:	b118      	cbz	r0, 80072f8 <__swbuf_r+0x32>
 80072f0:	f04f 37ff 	mov.w	r7, #4294967295
 80072f4:	4638      	mov	r0, r7
 80072f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072f8:	6823      	ldr	r3, [r4, #0]
 80072fa:	6922      	ldr	r2, [r4, #16]
 80072fc:	b2f6      	uxtb	r6, r6
 80072fe:	1a98      	subs	r0, r3, r2
 8007300:	6963      	ldr	r3, [r4, #20]
 8007302:	4637      	mov	r7, r6
 8007304:	4283      	cmp	r3, r0
 8007306:	dc05      	bgt.n	8007314 <__swbuf_r+0x4e>
 8007308:	4621      	mov	r1, r4
 800730a:	4628      	mov	r0, r5
 800730c:	f000 f9c4 	bl	8007698 <_fflush_r>
 8007310:	2800      	cmp	r0, #0
 8007312:	d1ed      	bne.n	80072f0 <__swbuf_r+0x2a>
 8007314:	68a3      	ldr	r3, [r4, #8]
 8007316:	3b01      	subs	r3, #1
 8007318:	60a3      	str	r3, [r4, #8]
 800731a:	6823      	ldr	r3, [r4, #0]
 800731c:	1c5a      	adds	r2, r3, #1
 800731e:	6022      	str	r2, [r4, #0]
 8007320:	701e      	strb	r6, [r3, #0]
 8007322:	6962      	ldr	r2, [r4, #20]
 8007324:	1c43      	adds	r3, r0, #1
 8007326:	429a      	cmp	r2, r3
 8007328:	d004      	beq.n	8007334 <__swbuf_r+0x6e>
 800732a:	89a3      	ldrh	r3, [r4, #12]
 800732c:	07db      	lsls	r3, r3, #31
 800732e:	d5e1      	bpl.n	80072f4 <__swbuf_r+0x2e>
 8007330:	2e0a      	cmp	r6, #10
 8007332:	d1df      	bne.n	80072f4 <__swbuf_r+0x2e>
 8007334:	4621      	mov	r1, r4
 8007336:	4628      	mov	r0, r5
 8007338:	f000 f9ae 	bl	8007698 <_fflush_r>
 800733c:	2800      	cmp	r0, #0
 800733e:	d0d9      	beq.n	80072f4 <__swbuf_r+0x2e>
 8007340:	e7d6      	b.n	80072f0 <__swbuf_r+0x2a>
	...

08007344 <__swsetup_r>:
 8007344:	b538      	push	{r3, r4, r5, lr}
 8007346:	4b29      	ldr	r3, [pc, #164]	@ (80073ec <__swsetup_r+0xa8>)
 8007348:	4605      	mov	r5, r0
 800734a:	6818      	ldr	r0, [r3, #0]
 800734c:	460c      	mov	r4, r1
 800734e:	b118      	cbz	r0, 8007358 <__swsetup_r+0x14>
 8007350:	6a03      	ldr	r3, [r0, #32]
 8007352:	b90b      	cbnz	r3, 8007358 <__swsetup_r+0x14>
 8007354:	f7ff fee0 	bl	8007118 <__sinit>
 8007358:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800735c:	0719      	lsls	r1, r3, #28
 800735e:	d422      	bmi.n	80073a6 <__swsetup_r+0x62>
 8007360:	06da      	lsls	r2, r3, #27
 8007362:	d407      	bmi.n	8007374 <__swsetup_r+0x30>
 8007364:	2209      	movs	r2, #9
 8007366:	602a      	str	r2, [r5, #0]
 8007368:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800736c:	f04f 30ff 	mov.w	r0, #4294967295
 8007370:	81a3      	strh	r3, [r4, #12]
 8007372:	e033      	b.n	80073dc <__swsetup_r+0x98>
 8007374:	0758      	lsls	r0, r3, #29
 8007376:	d512      	bpl.n	800739e <__swsetup_r+0x5a>
 8007378:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800737a:	b141      	cbz	r1, 800738e <__swsetup_r+0x4a>
 800737c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007380:	4299      	cmp	r1, r3
 8007382:	d002      	beq.n	800738a <__swsetup_r+0x46>
 8007384:	4628      	mov	r0, r5
 8007386:	f000 f8bf 	bl	8007508 <_free_r>
 800738a:	2300      	movs	r3, #0
 800738c:	6363      	str	r3, [r4, #52]	@ 0x34
 800738e:	89a3      	ldrh	r3, [r4, #12]
 8007390:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007394:	81a3      	strh	r3, [r4, #12]
 8007396:	2300      	movs	r3, #0
 8007398:	6063      	str	r3, [r4, #4]
 800739a:	6923      	ldr	r3, [r4, #16]
 800739c:	6023      	str	r3, [r4, #0]
 800739e:	89a3      	ldrh	r3, [r4, #12]
 80073a0:	f043 0308 	orr.w	r3, r3, #8
 80073a4:	81a3      	strh	r3, [r4, #12]
 80073a6:	6923      	ldr	r3, [r4, #16]
 80073a8:	b94b      	cbnz	r3, 80073be <__swsetup_r+0x7a>
 80073aa:	89a3      	ldrh	r3, [r4, #12]
 80073ac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80073b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073b4:	d003      	beq.n	80073be <__swsetup_r+0x7a>
 80073b6:	4621      	mov	r1, r4
 80073b8:	4628      	mov	r0, r5
 80073ba:	f000 f9ba 	bl	8007732 <__smakebuf_r>
 80073be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073c2:	f013 0201 	ands.w	r2, r3, #1
 80073c6:	d00a      	beq.n	80073de <__swsetup_r+0x9a>
 80073c8:	2200      	movs	r2, #0
 80073ca:	60a2      	str	r2, [r4, #8]
 80073cc:	6962      	ldr	r2, [r4, #20]
 80073ce:	4252      	negs	r2, r2
 80073d0:	61a2      	str	r2, [r4, #24]
 80073d2:	6922      	ldr	r2, [r4, #16]
 80073d4:	b942      	cbnz	r2, 80073e8 <__swsetup_r+0xa4>
 80073d6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80073da:	d1c5      	bne.n	8007368 <__swsetup_r+0x24>
 80073dc:	bd38      	pop	{r3, r4, r5, pc}
 80073de:	0799      	lsls	r1, r3, #30
 80073e0:	bf58      	it	pl
 80073e2:	6962      	ldrpl	r2, [r4, #20]
 80073e4:	60a2      	str	r2, [r4, #8]
 80073e6:	e7f4      	b.n	80073d2 <__swsetup_r+0x8e>
 80073e8:	2000      	movs	r0, #0
 80073ea:	e7f7      	b.n	80073dc <__swsetup_r+0x98>
 80073ec:	20000258 	.word	0x20000258

080073f0 <memset>:
 80073f0:	4603      	mov	r3, r0
 80073f2:	4402      	add	r2, r0
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d100      	bne.n	80073fa <memset+0xa>
 80073f8:	4770      	bx	lr
 80073fa:	f803 1b01 	strb.w	r1, [r3], #1
 80073fe:	e7f9      	b.n	80073f4 <memset+0x4>

08007400 <_close_r>:
 8007400:	b538      	push	{r3, r4, r5, lr}
 8007402:	2300      	movs	r3, #0
 8007404:	4d05      	ldr	r5, [pc, #20]	@ (800741c <_close_r+0x1c>)
 8007406:	4604      	mov	r4, r0
 8007408:	4608      	mov	r0, r1
 800740a:	602b      	str	r3, [r5, #0]
 800740c:	f7fa feff 	bl	800220e <_close>
 8007410:	1c43      	adds	r3, r0, #1
 8007412:	d102      	bne.n	800741a <_close_r+0x1a>
 8007414:	682b      	ldr	r3, [r5, #0]
 8007416:	b103      	cbz	r3, 800741a <_close_r+0x1a>
 8007418:	6023      	str	r3, [r4, #0]
 800741a:	bd38      	pop	{r3, r4, r5, pc}
 800741c:	200005b4 	.word	0x200005b4

08007420 <_lseek_r>:
 8007420:	b538      	push	{r3, r4, r5, lr}
 8007422:	4604      	mov	r4, r0
 8007424:	4608      	mov	r0, r1
 8007426:	4611      	mov	r1, r2
 8007428:	2200      	movs	r2, #0
 800742a:	4d05      	ldr	r5, [pc, #20]	@ (8007440 <_lseek_r+0x20>)
 800742c:	602a      	str	r2, [r5, #0]
 800742e:	461a      	mov	r2, r3
 8007430:	f7fa ff11 	bl	8002256 <_lseek>
 8007434:	1c43      	adds	r3, r0, #1
 8007436:	d102      	bne.n	800743e <_lseek_r+0x1e>
 8007438:	682b      	ldr	r3, [r5, #0]
 800743a:	b103      	cbz	r3, 800743e <_lseek_r+0x1e>
 800743c:	6023      	str	r3, [r4, #0]
 800743e:	bd38      	pop	{r3, r4, r5, pc}
 8007440:	200005b4 	.word	0x200005b4

08007444 <_read_r>:
 8007444:	b538      	push	{r3, r4, r5, lr}
 8007446:	4604      	mov	r4, r0
 8007448:	4608      	mov	r0, r1
 800744a:	4611      	mov	r1, r2
 800744c:	2200      	movs	r2, #0
 800744e:	4d05      	ldr	r5, [pc, #20]	@ (8007464 <_read_r+0x20>)
 8007450:	602a      	str	r2, [r5, #0]
 8007452:	461a      	mov	r2, r3
 8007454:	f7fa fea2 	bl	800219c <_read>
 8007458:	1c43      	adds	r3, r0, #1
 800745a:	d102      	bne.n	8007462 <_read_r+0x1e>
 800745c:	682b      	ldr	r3, [r5, #0]
 800745e:	b103      	cbz	r3, 8007462 <_read_r+0x1e>
 8007460:	6023      	str	r3, [r4, #0]
 8007462:	bd38      	pop	{r3, r4, r5, pc}
 8007464:	200005b4 	.word	0x200005b4

08007468 <_sbrk_r>:
 8007468:	b538      	push	{r3, r4, r5, lr}
 800746a:	2300      	movs	r3, #0
 800746c:	4d05      	ldr	r5, [pc, #20]	@ (8007484 <_sbrk_r+0x1c>)
 800746e:	4604      	mov	r4, r0
 8007470:	4608      	mov	r0, r1
 8007472:	602b      	str	r3, [r5, #0]
 8007474:	f7fa fefc 	bl	8002270 <_sbrk>
 8007478:	1c43      	adds	r3, r0, #1
 800747a:	d102      	bne.n	8007482 <_sbrk_r+0x1a>
 800747c:	682b      	ldr	r3, [r5, #0]
 800747e:	b103      	cbz	r3, 8007482 <_sbrk_r+0x1a>
 8007480:	6023      	str	r3, [r4, #0]
 8007482:	bd38      	pop	{r3, r4, r5, pc}
 8007484:	200005b4 	.word	0x200005b4

08007488 <_write_r>:
 8007488:	b538      	push	{r3, r4, r5, lr}
 800748a:	4604      	mov	r4, r0
 800748c:	4608      	mov	r0, r1
 800748e:	4611      	mov	r1, r2
 8007490:	2200      	movs	r2, #0
 8007492:	4d05      	ldr	r5, [pc, #20]	@ (80074a8 <_write_r+0x20>)
 8007494:	602a      	str	r2, [r5, #0]
 8007496:	461a      	mov	r2, r3
 8007498:	f7fa fe9d 	bl	80021d6 <_write>
 800749c:	1c43      	adds	r3, r0, #1
 800749e:	d102      	bne.n	80074a6 <_write_r+0x1e>
 80074a0:	682b      	ldr	r3, [r5, #0]
 80074a2:	b103      	cbz	r3, 80074a6 <_write_r+0x1e>
 80074a4:	6023      	str	r3, [r4, #0]
 80074a6:	bd38      	pop	{r3, r4, r5, pc}
 80074a8:	200005b4 	.word	0x200005b4

080074ac <__errno>:
 80074ac:	4b01      	ldr	r3, [pc, #4]	@ (80074b4 <__errno+0x8>)
 80074ae:	6818      	ldr	r0, [r3, #0]
 80074b0:	4770      	bx	lr
 80074b2:	bf00      	nop
 80074b4:	20000258 	.word	0x20000258

080074b8 <__libc_init_array>:
 80074b8:	b570      	push	{r4, r5, r6, lr}
 80074ba:	2600      	movs	r6, #0
 80074bc:	4d0c      	ldr	r5, [pc, #48]	@ (80074f0 <__libc_init_array+0x38>)
 80074be:	4c0d      	ldr	r4, [pc, #52]	@ (80074f4 <__libc_init_array+0x3c>)
 80074c0:	1b64      	subs	r4, r4, r5
 80074c2:	10a4      	asrs	r4, r4, #2
 80074c4:	42a6      	cmp	r6, r4
 80074c6:	d109      	bne.n	80074dc <__libc_init_array+0x24>
 80074c8:	f000 f992 	bl	80077f0 <_init>
 80074cc:	2600      	movs	r6, #0
 80074ce:	4d0a      	ldr	r5, [pc, #40]	@ (80074f8 <__libc_init_array+0x40>)
 80074d0:	4c0a      	ldr	r4, [pc, #40]	@ (80074fc <__libc_init_array+0x44>)
 80074d2:	1b64      	subs	r4, r4, r5
 80074d4:	10a4      	asrs	r4, r4, #2
 80074d6:	42a6      	cmp	r6, r4
 80074d8:	d105      	bne.n	80074e6 <__libc_init_array+0x2e>
 80074da:	bd70      	pop	{r4, r5, r6, pc}
 80074dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80074e0:	4798      	blx	r3
 80074e2:	3601      	adds	r6, #1
 80074e4:	e7ee      	b.n	80074c4 <__libc_init_array+0xc>
 80074e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80074ea:	4798      	blx	r3
 80074ec:	3601      	adds	r6, #1
 80074ee:	e7f2      	b.n	80074d6 <__libc_init_array+0x1e>
 80074f0:	0800986c 	.word	0x0800986c
 80074f4:	0800986c 	.word	0x0800986c
 80074f8:	0800986c 	.word	0x0800986c
 80074fc:	08009870 	.word	0x08009870

08007500 <__retarget_lock_init_recursive>:
 8007500:	4770      	bx	lr

08007502 <__retarget_lock_acquire_recursive>:
 8007502:	4770      	bx	lr

08007504 <__retarget_lock_release_recursive>:
 8007504:	4770      	bx	lr
	...

08007508 <_free_r>:
 8007508:	b538      	push	{r3, r4, r5, lr}
 800750a:	4605      	mov	r5, r0
 800750c:	2900      	cmp	r1, #0
 800750e:	d040      	beq.n	8007592 <_free_r+0x8a>
 8007510:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007514:	1f0c      	subs	r4, r1, #4
 8007516:	2b00      	cmp	r3, #0
 8007518:	bfb8      	it	lt
 800751a:	18e4      	addlt	r4, r4, r3
 800751c:	f7ff fd64 	bl	8006fe8 <__malloc_lock>
 8007520:	4a1c      	ldr	r2, [pc, #112]	@ (8007594 <_free_r+0x8c>)
 8007522:	6813      	ldr	r3, [r2, #0]
 8007524:	b933      	cbnz	r3, 8007534 <_free_r+0x2c>
 8007526:	6063      	str	r3, [r4, #4]
 8007528:	6014      	str	r4, [r2, #0]
 800752a:	4628      	mov	r0, r5
 800752c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007530:	f7ff bd60 	b.w	8006ff4 <__malloc_unlock>
 8007534:	42a3      	cmp	r3, r4
 8007536:	d908      	bls.n	800754a <_free_r+0x42>
 8007538:	6820      	ldr	r0, [r4, #0]
 800753a:	1821      	adds	r1, r4, r0
 800753c:	428b      	cmp	r3, r1
 800753e:	bf01      	itttt	eq
 8007540:	6819      	ldreq	r1, [r3, #0]
 8007542:	685b      	ldreq	r3, [r3, #4]
 8007544:	1809      	addeq	r1, r1, r0
 8007546:	6021      	streq	r1, [r4, #0]
 8007548:	e7ed      	b.n	8007526 <_free_r+0x1e>
 800754a:	461a      	mov	r2, r3
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	b10b      	cbz	r3, 8007554 <_free_r+0x4c>
 8007550:	42a3      	cmp	r3, r4
 8007552:	d9fa      	bls.n	800754a <_free_r+0x42>
 8007554:	6811      	ldr	r1, [r2, #0]
 8007556:	1850      	adds	r0, r2, r1
 8007558:	42a0      	cmp	r0, r4
 800755a:	d10b      	bne.n	8007574 <_free_r+0x6c>
 800755c:	6820      	ldr	r0, [r4, #0]
 800755e:	4401      	add	r1, r0
 8007560:	1850      	adds	r0, r2, r1
 8007562:	4283      	cmp	r3, r0
 8007564:	6011      	str	r1, [r2, #0]
 8007566:	d1e0      	bne.n	800752a <_free_r+0x22>
 8007568:	6818      	ldr	r0, [r3, #0]
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	4408      	add	r0, r1
 800756e:	6010      	str	r0, [r2, #0]
 8007570:	6053      	str	r3, [r2, #4]
 8007572:	e7da      	b.n	800752a <_free_r+0x22>
 8007574:	d902      	bls.n	800757c <_free_r+0x74>
 8007576:	230c      	movs	r3, #12
 8007578:	602b      	str	r3, [r5, #0]
 800757a:	e7d6      	b.n	800752a <_free_r+0x22>
 800757c:	6820      	ldr	r0, [r4, #0]
 800757e:	1821      	adds	r1, r4, r0
 8007580:	428b      	cmp	r3, r1
 8007582:	bf01      	itttt	eq
 8007584:	6819      	ldreq	r1, [r3, #0]
 8007586:	685b      	ldreq	r3, [r3, #4]
 8007588:	1809      	addeq	r1, r1, r0
 800758a:	6021      	streq	r1, [r4, #0]
 800758c:	6063      	str	r3, [r4, #4]
 800758e:	6054      	str	r4, [r2, #4]
 8007590:	e7cb      	b.n	800752a <_free_r+0x22>
 8007592:	bd38      	pop	{r3, r4, r5, pc}
 8007594:	20000474 	.word	0x20000474

08007598 <__sflush_r>:
 8007598:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800759c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800759e:	0716      	lsls	r6, r2, #28
 80075a0:	4605      	mov	r5, r0
 80075a2:	460c      	mov	r4, r1
 80075a4:	d454      	bmi.n	8007650 <__sflush_r+0xb8>
 80075a6:	684b      	ldr	r3, [r1, #4]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	dc02      	bgt.n	80075b2 <__sflush_r+0x1a>
 80075ac:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	dd48      	ble.n	8007644 <__sflush_r+0xac>
 80075b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80075b4:	2e00      	cmp	r6, #0
 80075b6:	d045      	beq.n	8007644 <__sflush_r+0xac>
 80075b8:	2300      	movs	r3, #0
 80075ba:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80075be:	682f      	ldr	r7, [r5, #0]
 80075c0:	6a21      	ldr	r1, [r4, #32]
 80075c2:	602b      	str	r3, [r5, #0]
 80075c4:	d030      	beq.n	8007628 <__sflush_r+0x90>
 80075c6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80075c8:	89a3      	ldrh	r3, [r4, #12]
 80075ca:	0759      	lsls	r1, r3, #29
 80075cc:	d505      	bpl.n	80075da <__sflush_r+0x42>
 80075ce:	6863      	ldr	r3, [r4, #4]
 80075d0:	1ad2      	subs	r2, r2, r3
 80075d2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80075d4:	b10b      	cbz	r3, 80075da <__sflush_r+0x42>
 80075d6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80075d8:	1ad2      	subs	r2, r2, r3
 80075da:	2300      	movs	r3, #0
 80075dc:	4628      	mov	r0, r5
 80075de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80075e0:	6a21      	ldr	r1, [r4, #32]
 80075e2:	47b0      	blx	r6
 80075e4:	1c43      	adds	r3, r0, #1
 80075e6:	89a3      	ldrh	r3, [r4, #12]
 80075e8:	d106      	bne.n	80075f8 <__sflush_r+0x60>
 80075ea:	6829      	ldr	r1, [r5, #0]
 80075ec:	291d      	cmp	r1, #29
 80075ee:	d82b      	bhi.n	8007648 <__sflush_r+0xb0>
 80075f0:	4a28      	ldr	r2, [pc, #160]	@ (8007694 <__sflush_r+0xfc>)
 80075f2:	40ca      	lsrs	r2, r1
 80075f4:	07d6      	lsls	r6, r2, #31
 80075f6:	d527      	bpl.n	8007648 <__sflush_r+0xb0>
 80075f8:	2200      	movs	r2, #0
 80075fa:	6062      	str	r2, [r4, #4]
 80075fc:	6922      	ldr	r2, [r4, #16]
 80075fe:	04d9      	lsls	r1, r3, #19
 8007600:	6022      	str	r2, [r4, #0]
 8007602:	d504      	bpl.n	800760e <__sflush_r+0x76>
 8007604:	1c42      	adds	r2, r0, #1
 8007606:	d101      	bne.n	800760c <__sflush_r+0x74>
 8007608:	682b      	ldr	r3, [r5, #0]
 800760a:	b903      	cbnz	r3, 800760e <__sflush_r+0x76>
 800760c:	6560      	str	r0, [r4, #84]	@ 0x54
 800760e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007610:	602f      	str	r7, [r5, #0]
 8007612:	b1b9      	cbz	r1, 8007644 <__sflush_r+0xac>
 8007614:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007618:	4299      	cmp	r1, r3
 800761a:	d002      	beq.n	8007622 <__sflush_r+0x8a>
 800761c:	4628      	mov	r0, r5
 800761e:	f7ff ff73 	bl	8007508 <_free_r>
 8007622:	2300      	movs	r3, #0
 8007624:	6363      	str	r3, [r4, #52]	@ 0x34
 8007626:	e00d      	b.n	8007644 <__sflush_r+0xac>
 8007628:	2301      	movs	r3, #1
 800762a:	4628      	mov	r0, r5
 800762c:	47b0      	blx	r6
 800762e:	4602      	mov	r2, r0
 8007630:	1c50      	adds	r0, r2, #1
 8007632:	d1c9      	bne.n	80075c8 <__sflush_r+0x30>
 8007634:	682b      	ldr	r3, [r5, #0]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d0c6      	beq.n	80075c8 <__sflush_r+0x30>
 800763a:	2b1d      	cmp	r3, #29
 800763c:	d001      	beq.n	8007642 <__sflush_r+0xaa>
 800763e:	2b16      	cmp	r3, #22
 8007640:	d11d      	bne.n	800767e <__sflush_r+0xe6>
 8007642:	602f      	str	r7, [r5, #0]
 8007644:	2000      	movs	r0, #0
 8007646:	e021      	b.n	800768c <__sflush_r+0xf4>
 8007648:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800764c:	b21b      	sxth	r3, r3
 800764e:	e01a      	b.n	8007686 <__sflush_r+0xee>
 8007650:	690f      	ldr	r7, [r1, #16]
 8007652:	2f00      	cmp	r7, #0
 8007654:	d0f6      	beq.n	8007644 <__sflush_r+0xac>
 8007656:	0793      	lsls	r3, r2, #30
 8007658:	bf18      	it	ne
 800765a:	2300      	movne	r3, #0
 800765c:	680e      	ldr	r6, [r1, #0]
 800765e:	bf08      	it	eq
 8007660:	694b      	ldreq	r3, [r1, #20]
 8007662:	1bf6      	subs	r6, r6, r7
 8007664:	600f      	str	r7, [r1, #0]
 8007666:	608b      	str	r3, [r1, #8]
 8007668:	2e00      	cmp	r6, #0
 800766a:	ddeb      	ble.n	8007644 <__sflush_r+0xac>
 800766c:	4633      	mov	r3, r6
 800766e:	463a      	mov	r2, r7
 8007670:	4628      	mov	r0, r5
 8007672:	6a21      	ldr	r1, [r4, #32]
 8007674:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007678:	47e0      	blx	ip
 800767a:	2800      	cmp	r0, #0
 800767c:	dc07      	bgt.n	800768e <__sflush_r+0xf6>
 800767e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007682:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007686:	f04f 30ff 	mov.w	r0, #4294967295
 800768a:	81a3      	strh	r3, [r4, #12]
 800768c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800768e:	4407      	add	r7, r0
 8007690:	1a36      	subs	r6, r6, r0
 8007692:	e7e9      	b.n	8007668 <__sflush_r+0xd0>
 8007694:	20400001 	.word	0x20400001

08007698 <_fflush_r>:
 8007698:	b538      	push	{r3, r4, r5, lr}
 800769a:	690b      	ldr	r3, [r1, #16]
 800769c:	4605      	mov	r5, r0
 800769e:	460c      	mov	r4, r1
 80076a0:	b913      	cbnz	r3, 80076a8 <_fflush_r+0x10>
 80076a2:	2500      	movs	r5, #0
 80076a4:	4628      	mov	r0, r5
 80076a6:	bd38      	pop	{r3, r4, r5, pc}
 80076a8:	b118      	cbz	r0, 80076b2 <_fflush_r+0x1a>
 80076aa:	6a03      	ldr	r3, [r0, #32]
 80076ac:	b90b      	cbnz	r3, 80076b2 <_fflush_r+0x1a>
 80076ae:	f7ff fd33 	bl	8007118 <__sinit>
 80076b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d0f3      	beq.n	80076a2 <_fflush_r+0xa>
 80076ba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80076bc:	07d0      	lsls	r0, r2, #31
 80076be:	d404      	bmi.n	80076ca <_fflush_r+0x32>
 80076c0:	0599      	lsls	r1, r3, #22
 80076c2:	d402      	bmi.n	80076ca <_fflush_r+0x32>
 80076c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80076c6:	f7ff ff1c 	bl	8007502 <__retarget_lock_acquire_recursive>
 80076ca:	4628      	mov	r0, r5
 80076cc:	4621      	mov	r1, r4
 80076ce:	f7ff ff63 	bl	8007598 <__sflush_r>
 80076d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80076d4:	4605      	mov	r5, r0
 80076d6:	07da      	lsls	r2, r3, #31
 80076d8:	d4e4      	bmi.n	80076a4 <_fflush_r+0xc>
 80076da:	89a3      	ldrh	r3, [r4, #12]
 80076dc:	059b      	lsls	r3, r3, #22
 80076de:	d4e1      	bmi.n	80076a4 <_fflush_r+0xc>
 80076e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80076e2:	f7ff ff0f 	bl	8007504 <__retarget_lock_release_recursive>
 80076e6:	e7dd      	b.n	80076a4 <_fflush_r+0xc>

080076e8 <__swhatbuf_r>:
 80076e8:	b570      	push	{r4, r5, r6, lr}
 80076ea:	460c      	mov	r4, r1
 80076ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076f0:	4615      	mov	r5, r2
 80076f2:	2900      	cmp	r1, #0
 80076f4:	461e      	mov	r6, r3
 80076f6:	b096      	sub	sp, #88	@ 0x58
 80076f8:	da0c      	bge.n	8007714 <__swhatbuf_r+0x2c>
 80076fa:	89a3      	ldrh	r3, [r4, #12]
 80076fc:	2100      	movs	r1, #0
 80076fe:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007702:	bf14      	ite	ne
 8007704:	2340      	movne	r3, #64	@ 0x40
 8007706:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800770a:	2000      	movs	r0, #0
 800770c:	6031      	str	r1, [r6, #0]
 800770e:	602b      	str	r3, [r5, #0]
 8007710:	b016      	add	sp, #88	@ 0x58
 8007712:	bd70      	pop	{r4, r5, r6, pc}
 8007714:	466a      	mov	r2, sp
 8007716:	f000 f849 	bl	80077ac <_fstat_r>
 800771a:	2800      	cmp	r0, #0
 800771c:	dbed      	blt.n	80076fa <__swhatbuf_r+0x12>
 800771e:	9901      	ldr	r1, [sp, #4]
 8007720:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007724:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007728:	4259      	negs	r1, r3
 800772a:	4159      	adcs	r1, r3
 800772c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007730:	e7eb      	b.n	800770a <__swhatbuf_r+0x22>

08007732 <__smakebuf_r>:
 8007732:	898b      	ldrh	r3, [r1, #12]
 8007734:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007736:	079d      	lsls	r5, r3, #30
 8007738:	4606      	mov	r6, r0
 800773a:	460c      	mov	r4, r1
 800773c:	d507      	bpl.n	800774e <__smakebuf_r+0x1c>
 800773e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007742:	6023      	str	r3, [r4, #0]
 8007744:	6123      	str	r3, [r4, #16]
 8007746:	2301      	movs	r3, #1
 8007748:	6163      	str	r3, [r4, #20]
 800774a:	b003      	add	sp, #12
 800774c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800774e:	466a      	mov	r2, sp
 8007750:	ab01      	add	r3, sp, #4
 8007752:	f7ff ffc9 	bl	80076e8 <__swhatbuf_r>
 8007756:	9f00      	ldr	r7, [sp, #0]
 8007758:	4605      	mov	r5, r0
 800775a:	4639      	mov	r1, r7
 800775c:	4630      	mov	r0, r6
 800775e:	f7ff fbc3 	bl	8006ee8 <_malloc_r>
 8007762:	b948      	cbnz	r0, 8007778 <__smakebuf_r+0x46>
 8007764:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007768:	059a      	lsls	r2, r3, #22
 800776a:	d4ee      	bmi.n	800774a <__smakebuf_r+0x18>
 800776c:	f023 0303 	bic.w	r3, r3, #3
 8007770:	f043 0302 	orr.w	r3, r3, #2
 8007774:	81a3      	strh	r3, [r4, #12]
 8007776:	e7e2      	b.n	800773e <__smakebuf_r+0xc>
 8007778:	89a3      	ldrh	r3, [r4, #12]
 800777a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800777e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007782:	81a3      	strh	r3, [r4, #12]
 8007784:	9b01      	ldr	r3, [sp, #4]
 8007786:	6020      	str	r0, [r4, #0]
 8007788:	b15b      	cbz	r3, 80077a2 <__smakebuf_r+0x70>
 800778a:	4630      	mov	r0, r6
 800778c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007790:	f000 f81e 	bl	80077d0 <_isatty_r>
 8007794:	b128      	cbz	r0, 80077a2 <__smakebuf_r+0x70>
 8007796:	89a3      	ldrh	r3, [r4, #12]
 8007798:	f023 0303 	bic.w	r3, r3, #3
 800779c:	f043 0301 	orr.w	r3, r3, #1
 80077a0:	81a3      	strh	r3, [r4, #12]
 80077a2:	89a3      	ldrh	r3, [r4, #12]
 80077a4:	431d      	orrs	r5, r3
 80077a6:	81a5      	strh	r5, [r4, #12]
 80077a8:	e7cf      	b.n	800774a <__smakebuf_r+0x18>
	...

080077ac <_fstat_r>:
 80077ac:	b538      	push	{r3, r4, r5, lr}
 80077ae:	2300      	movs	r3, #0
 80077b0:	4d06      	ldr	r5, [pc, #24]	@ (80077cc <_fstat_r+0x20>)
 80077b2:	4604      	mov	r4, r0
 80077b4:	4608      	mov	r0, r1
 80077b6:	4611      	mov	r1, r2
 80077b8:	602b      	str	r3, [r5, #0]
 80077ba:	f7fa fd33 	bl	8002224 <_fstat>
 80077be:	1c43      	adds	r3, r0, #1
 80077c0:	d102      	bne.n	80077c8 <_fstat_r+0x1c>
 80077c2:	682b      	ldr	r3, [r5, #0]
 80077c4:	b103      	cbz	r3, 80077c8 <_fstat_r+0x1c>
 80077c6:	6023      	str	r3, [r4, #0]
 80077c8:	bd38      	pop	{r3, r4, r5, pc}
 80077ca:	bf00      	nop
 80077cc:	200005b4 	.word	0x200005b4

080077d0 <_isatty_r>:
 80077d0:	b538      	push	{r3, r4, r5, lr}
 80077d2:	2300      	movs	r3, #0
 80077d4:	4d05      	ldr	r5, [pc, #20]	@ (80077ec <_isatty_r+0x1c>)
 80077d6:	4604      	mov	r4, r0
 80077d8:	4608      	mov	r0, r1
 80077da:	602b      	str	r3, [r5, #0]
 80077dc:	f7fa fd31 	bl	8002242 <_isatty>
 80077e0:	1c43      	adds	r3, r0, #1
 80077e2:	d102      	bne.n	80077ea <_isatty_r+0x1a>
 80077e4:	682b      	ldr	r3, [r5, #0]
 80077e6:	b103      	cbz	r3, 80077ea <_isatty_r+0x1a>
 80077e8:	6023      	str	r3, [r4, #0]
 80077ea:	bd38      	pop	{r3, r4, r5, pc}
 80077ec:	200005b4 	.word	0x200005b4

080077f0 <_init>:
 80077f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077f2:	bf00      	nop
 80077f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077f6:	bc08      	pop	{r3}
 80077f8:	469e      	mov	lr, r3
 80077fa:	4770      	bx	lr

080077fc <_fini>:
 80077fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077fe:	bf00      	nop
 8007800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007802:	bc08      	pop	{r3}
 8007804:	469e      	mov	lr, r3
 8007806:	4770      	bx	lr
