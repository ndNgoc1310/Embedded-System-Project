
ES_Project_Digital-Clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000200c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002118  08002118  00003118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002144  08002144  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002144  08002144  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002144  08002144  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002144  08002144  00003144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002148  08002148  00003148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800214c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  2000000c  08002158  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000088  08002158  00004088  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005dfd  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000012b6  00000000  00000000  00009e32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d0  00000000  00000000  0000b0e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000053a  00000000  00000000  0000b7b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015e42  00000000  00000000  0000bcf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000088a0  00000000  00000000  00021b34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e6b0  00000000  00000000  0002a3d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a8a84  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b40  00000000  00000000  000a8ac8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  000aa608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002100 	.word	0x08002100

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002100 	.word	0x08002100

0800014c <main>:
// Function to set the RTC alarm settings (Alarm 1)
void Set_Alarm (uint8_t mode, uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow_dom, bool dy_dt);

/* Main program --------------------------------------------------------------*/
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  // Reset of all peripherals, Initializes the Flash interface and the Systick.
  HAL_Init();
 8000150:	f000 fa14 	bl	800057c <HAL_Init>

  // Configure the system clock 
  SystemClock_Config();
 8000154:	f000 f86e 	bl	8000234 <SystemClock_Config>

  // Initialize all configured peripherals 
  MX_GPIO_Init();
 8000158:	f000 f8e0 	bl	800031c <MX_GPIO_Init>
  MX_I2C1_Init();
 800015c:	f000 f8b0 	bl	80002c0 <MX_I2C1_Init>
 
  // Initialize RTC module (Run only once after reset the RTC module)
  //RTC_Init();
  
  // Infinite loop 
  while (1)
 8000160:	bf00      	nop
 8000162:	e7fd      	b.n	8000160 <main+0x14>

08000164 <bcdToDec>:
  return (uint8_t)( (val/10*16) + (val%10) );
}

// Convert binary coded decimal to normal decimal numbers
int bcdToDec(uint8_t val)
{
 8000164:	b480      	push	{r7}
 8000166:	b083      	sub	sp, #12
 8000168:	af00      	add	r7, sp, #0
 800016a:	4603      	mov	r3, r0
 800016c:	71fb      	strb	r3, [r7, #7]
  return (int)( (val/16*10) + (val%16) );
 800016e:	79fb      	ldrb	r3, [r7, #7]
 8000170:	091b      	lsrs	r3, r3, #4
 8000172:	b2db      	uxtb	r3, r3
 8000174:	461a      	mov	r2, r3
 8000176:	4613      	mov	r3, r2
 8000178:	009b      	lsls	r3, r3, #2
 800017a:	4413      	add	r3, r2
 800017c:	005b      	lsls	r3, r3, #1
 800017e:	461a      	mov	r2, r3
 8000180:	79fb      	ldrb	r3, [r7, #7]
 8000182:	f003 030f 	and.w	r3, r3, #15
 8000186:	4413      	add	r3, r2
}
 8000188:	4618      	mov	r0, r3
 800018a:	370c      	adds	r7, #12
 800018c:	46bd      	mov	sp, r7
 800018e:	bc80      	pop	{r7}
 8000190:	4770      	bx	lr
	...

08000194 <Get_Time>:
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, 0x00, 1, set_time, 7, 1000);
}

// Function to get time from the RTC module through I2C interface
void Get_Time (void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	b086      	sub	sp, #24
 8000198:	af04      	add	r7, sp, #16
	// A blank array (7 slots) to contain the time values received from the RTC module
  uint8_t get_time[7];

  // Receive the time values from the RTC module through I2C interface, then store them into the blank array (size of value: 7 bytes)
	  // TypeDef: HAL_I2C_Mem_Read(*hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
  HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, 1, get_time, 7, 1000);
 800019a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800019e:	9302      	str	r3, [sp, #8]
 80001a0:	2307      	movs	r3, #7
 80001a2:	9301      	str	r3, [sp, #4]
 80001a4:	463b      	mov	r3, r7
 80001a6:	9300      	str	r3, [sp, #0]
 80001a8:	2301      	movs	r3, #1
 80001aa:	2200      	movs	r2, #0
 80001ac:	21d0      	movs	r1, #208	@ 0xd0
 80001ae:	481f      	ldr	r0, [pc, #124]	@ (800022c <Get_Time+0x98>)
 80001b0:	f000 fe34 	bl	8000e1c <HAL_I2C_Mem_Read>

  // Store the time values (converted from BCD code to decimal) into the time variable
	time.seconds 	  = bcdToDec(get_time[0]);
 80001b4:	783b      	ldrb	r3, [r7, #0]
 80001b6:	4618      	mov	r0, r3
 80001b8:	f7ff ffd4 	bl	8000164 <bcdToDec>
 80001bc:	4603      	mov	r3, r0
 80001be:	b2da      	uxtb	r2, r3
 80001c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000230 <Get_Time+0x9c>)
 80001c2:	701a      	strb	r2, [r3, #0]
	time.minutes 	  = bcdToDec(get_time[1]);
 80001c4:	787b      	ldrb	r3, [r7, #1]
 80001c6:	4618      	mov	r0, r3
 80001c8:	f7ff ffcc 	bl	8000164 <bcdToDec>
 80001cc:	4603      	mov	r3, r0
 80001ce:	b2da      	uxtb	r2, r3
 80001d0:	4b17      	ldr	r3, [pc, #92]	@ (8000230 <Get_Time+0x9c>)
 80001d2:	705a      	strb	r2, [r3, #1]
	time.hour 		  = bcdToDec(get_time[2]);
 80001d4:	78bb      	ldrb	r3, [r7, #2]
 80001d6:	4618      	mov	r0, r3
 80001d8:	f7ff ffc4 	bl	8000164 <bcdToDec>
 80001dc:	4603      	mov	r3, r0
 80001de:	b2da      	uxtb	r2, r3
 80001e0:	4b13      	ldr	r3, [pc, #76]	@ (8000230 <Get_Time+0x9c>)
 80001e2:	709a      	strb	r2, [r3, #2]
	time.dayofweek 	= bcdToDec(get_time[3]);
 80001e4:	78fb      	ldrb	r3, [r7, #3]
 80001e6:	4618      	mov	r0, r3
 80001e8:	f7ff ffbc 	bl	8000164 <bcdToDec>
 80001ec:	4603      	mov	r3, r0
 80001ee:	b2da      	uxtb	r2, r3
 80001f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000230 <Get_Time+0x9c>)
 80001f2:	70da      	strb	r2, [r3, #3]
	time.dayofmonth = bcdToDec(get_time[4]);
 80001f4:	793b      	ldrb	r3, [r7, #4]
 80001f6:	4618      	mov	r0, r3
 80001f8:	f7ff ffb4 	bl	8000164 <bcdToDec>
 80001fc:	4603      	mov	r3, r0
 80001fe:	b2da      	uxtb	r2, r3
 8000200:	4b0b      	ldr	r3, [pc, #44]	@ (8000230 <Get_Time+0x9c>)
 8000202:	711a      	strb	r2, [r3, #4]
	time.month 		  = bcdToDec(get_time[5]);
 8000204:	797b      	ldrb	r3, [r7, #5]
 8000206:	4618      	mov	r0, r3
 8000208:	f7ff ffac 	bl	8000164 <bcdToDec>
 800020c:	4603      	mov	r3, r0
 800020e:	b2da      	uxtb	r2, r3
 8000210:	4b07      	ldr	r3, [pc, #28]	@ (8000230 <Get_Time+0x9c>)
 8000212:	715a      	strb	r2, [r3, #5]
	time.year 		  = bcdToDec(get_time[6]);
 8000214:	79bb      	ldrb	r3, [r7, #6]
 8000216:	4618      	mov	r0, r3
 8000218:	f7ff ffa4 	bl	8000164 <bcdToDec>
 800021c:	4603      	mov	r3, r0
 800021e:	b2da      	uxtb	r2, r3
 8000220:	4b03      	ldr	r3, [pc, #12]	@ (8000230 <Get_Time+0x9c>)
 8000222:	719a      	strb	r2, [r3, #6]
}
 8000224:	bf00      	nop
 8000226:	3708      	adds	r7, #8
 8000228:	46bd      	mov	sp, r7
 800022a:	bd80      	pop	{r7, pc}
 800022c:	20000028 	.word	0x20000028
 8000230:	2000007c 	.word	0x2000007c

08000234 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b090      	sub	sp, #64	@ 0x40
 8000238:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023a:	f107 0318 	add.w	r3, r7, #24
 800023e:	2228      	movs	r2, #40	@ 0x28
 8000240:	2100      	movs	r1, #0
 8000242:	4618      	mov	r0, r3
 8000244:	f001 ff30 	bl	80020a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000248:	1d3b      	adds	r3, r7, #4
 800024a:	2200      	movs	r2, #0
 800024c:	601a      	str	r2, [r3, #0]
 800024e:	605a      	str	r2, [r3, #4]
 8000250:	609a      	str	r2, [r3, #8]
 8000252:	60da      	str	r2, [r3, #12]
 8000254:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000256:	2301      	movs	r3, #1
 8000258:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800025a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800025e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000260:	2300      	movs	r3, #0
 8000262:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000264:	2301      	movs	r3, #1
 8000266:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000268:	2302      	movs	r3, #2
 800026a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800026c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000270:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000272:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000276:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000278:	f107 0318 	add.w	r3, r7, #24
 800027c:	4618      	mov	r0, r3
 800027e:	f001 fb17 	bl	80018b0 <HAL_RCC_OscConfig>
 8000282:	4603      	mov	r3, r0
 8000284:	2b00      	cmp	r3, #0
 8000286:	d001      	beq.n	800028c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000288:	f000 f8a2 	bl	80003d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800028c:	230f      	movs	r3, #15
 800028e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000290:	2302      	movs	r3, #2
 8000292:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000294:	2300      	movs	r3, #0
 8000296:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000298:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800029c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800029e:	2300      	movs	r3, #0
 80002a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	2102      	movs	r1, #2
 80002a6:	4618      	mov	r0, r3
 80002a8:	f001 fd84 	bl	8001db4 <HAL_RCC_ClockConfig>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002b2:	f000 f88d 	bl	80003d0 <Error_Handler>
  }
}
 80002b6:	bf00      	nop
 80002b8:	3740      	adds	r7, #64	@ 0x40
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
	...

080002c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002c4:	4b12      	ldr	r3, [pc, #72]	@ (8000310 <MX_I2C1_Init+0x50>)
 80002c6:	4a13      	ldr	r2, [pc, #76]	@ (8000314 <MX_I2C1_Init+0x54>)
 80002c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80002ca:	4b11      	ldr	r3, [pc, #68]	@ (8000310 <MX_I2C1_Init+0x50>)
 80002cc:	4a12      	ldr	r2, [pc, #72]	@ (8000318 <MX_I2C1_Init+0x58>)
 80002ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000310 <MX_I2C1_Init+0x50>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80002d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000310 <MX_I2C1_Init+0x50>)
 80002d8:	2200      	movs	r2, #0
 80002da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000310 <MX_I2C1_Init+0x50>)
 80002de:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80002e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000310 <MX_I2C1_Init+0x50>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80002ea:	4b09      	ldr	r3, [pc, #36]	@ (8000310 <MX_I2C1_Init+0x50>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002f0:	4b07      	ldr	r3, [pc, #28]	@ (8000310 <MX_I2C1_Init+0x50>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002f6:	4b06      	ldr	r3, [pc, #24]	@ (8000310 <MX_I2C1_Init+0x50>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002fc:	4804      	ldr	r0, [pc, #16]	@ (8000310 <MX_I2C1_Init+0x50>)
 80002fe:	f000 fc49 	bl	8000b94 <HAL_I2C_Init>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d001      	beq.n	800030c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000308:	f000 f862 	bl	80003d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800030c:	bf00      	nop
 800030e:	bd80      	pop	{r7, pc}
 8000310:	20000028 	.word	0x20000028
 8000314:	40005400 	.word	0x40005400
 8000318:	000186a0 	.word	0x000186a0

0800031c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b088      	sub	sp, #32
 8000320:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000322:	f107 0310 	add.w	r3, r7, #16
 8000326:	2200      	movs	r2, #0
 8000328:	601a      	str	r2, [r3, #0]
 800032a:	605a      	str	r2, [r3, #4]
 800032c:	609a      	str	r2, [r3, #8]
 800032e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000330:	4b1d      	ldr	r3, [pc, #116]	@ (80003a8 <MX_GPIO_Init+0x8c>)
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	4a1c      	ldr	r2, [pc, #112]	@ (80003a8 <MX_GPIO_Init+0x8c>)
 8000336:	f043 0320 	orr.w	r3, r3, #32
 800033a:	6193      	str	r3, [r2, #24]
 800033c:	4b1a      	ldr	r3, [pc, #104]	@ (80003a8 <MX_GPIO_Init+0x8c>)
 800033e:	699b      	ldr	r3, [r3, #24]
 8000340:	f003 0320 	and.w	r3, r3, #32
 8000344:	60fb      	str	r3, [r7, #12]
 8000346:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000348:	4b17      	ldr	r3, [pc, #92]	@ (80003a8 <MX_GPIO_Init+0x8c>)
 800034a:	699b      	ldr	r3, [r3, #24]
 800034c:	4a16      	ldr	r2, [pc, #88]	@ (80003a8 <MX_GPIO_Init+0x8c>)
 800034e:	f043 0304 	orr.w	r3, r3, #4
 8000352:	6193      	str	r3, [r2, #24]
 8000354:	4b14      	ldr	r3, [pc, #80]	@ (80003a8 <MX_GPIO_Init+0x8c>)
 8000356:	699b      	ldr	r3, [r3, #24]
 8000358:	f003 0304 	and.w	r3, r3, #4
 800035c:	60bb      	str	r3, [r7, #8]
 800035e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000360:	4b11      	ldr	r3, [pc, #68]	@ (80003a8 <MX_GPIO_Init+0x8c>)
 8000362:	699b      	ldr	r3, [r3, #24]
 8000364:	4a10      	ldr	r2, [pc, #64]	@ (80003a8 <MX_GPIO_Init+0x8c>)
 8000366:	f043 0308 	orr.w	r3, r3, #8
 800036a:	6193      	str	r3, [r2, #24]
 800036c:	4b0e      	ldr	r3, [pc, #56]	@ (80003a8 <MX_GPIO_Init+0x8c>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	f003 0308 	and.w	r3, r3, #8
 8000374:	607b      	str	r3, [r7, #4]
 8000376:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000378:	2310      	movs	r3, #16
 800037a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800037c:	4b0b      	ldr	r3, [pc, #44]	@ (80003ac <MX_GPIO_Init+0x90>)
 800037e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000380:	2301      	movs	r3, #1
 8000382:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000384:	f107 0310 	add.w	r3, r7, #16
 8000388:	4619      	mov	r1, r3
 800038a:	4809      	ldr	r0, [pc, #36]	@ (80003b0 <MX_GPIO_Init+0x94>)
 800038c:	f000 fa66 	bl	800085c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000390:	2200      	movs	r2, #0
 8000392:	2100      	movs	r1, #0
 8000394:	200a      	movs	r0, #10
 8000396:	f000 fa2a 	bl	80007ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800039a:	200a      	movs	r0, #10
 800039c:	f000 fa43 	bl	8000826 <HAL_NVIC_EnableIRQ>
}
 80003a0:	bf00      	nop
 80003a2:	3720      	adds	r7, #32
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	40021000 	.word	0x40021000
 80003ac:	10210000 	.word	0x10210000
 80003b0:	40010c00 	.word	0x40010c00

080003b4 <HAL_GPIO_EXTI_Callback>:
uint8_t status_check;

// Interrupt Handler for PB4 (Interrupt occurs every second)
*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	4603      	mov	r3, r0
 80003bc:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_4)
 80003be:	88fb      	ldrh	r3, [r7, #6]
 80003c0:	2b10      	cmp	r3, #16
 80003c2:	d101      	bne.n	80003c8 <HAL_GPIO_EXTI_Callback+0x14>
  {
    // Get time from the RTC module through I2C interface
    Get_Time();
 80003c4:	f7ff fee6 	bl	8000194 <Get_Time>

      // Read values of Status register from RTC module
    HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x0F, 1, &status_check, 1, 1000);
    */
  }
}
 80003c8:	bf00      	nop
 80003ca:	3708      	adds	r7, #8
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}

080003d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003d4:	b672      	cpsid	i
}
 80003d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003d8:	bf00      	nop
 80003da:	e7fd      	b.n	80003d8 <Error_Handler+0x8>

080003dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	b085      	sub	sp, #20
 80003e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003e2:	4b15      	ldr	r3, [pc, #84]	@ (8000438 <HAL_MspInit+0x5c>)
 80003e4:	699b      	ldr	r3, [r3, #24]
 80003e6:	4a14      	ldr	r2, [pc, #80]	@ (8000438 <HAL_MspInit+0x5c>)
 80003e8:	f043 0301 	orr.w	r3, r3, #1
 80003ec:	6193      	str	r3, [r2, #24]
 80003ee:	4b12      	ldr	r3, [pc, #72]	@ (8000438 <HAL_MspInit+0x5c>)
 80003f0:	699b      	ldr	r3, [r3, #24]
 80003f2:	f003 0301 	and.w	r3, r3, #1
 80003f6:	60bb      	str	r3, [r7, #8]
 80003f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000438 <HAL_MspInit+0x5c>)
 80003fc:	69db      	ldr	r3, [r3, #28]
 80003fe:	4a0e      	ldr	r2, [pc, #56]	@ (8000438 <HAL_MspInit+0x5c>)
 8000400:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000404:	61d3      	str	r3, [r2, #28]
 8000406:	4b0c      	ldr	r3, [pc, #48]	@ (8000438 <HAL_MspInit+0x5c>)
 8000408:	69db      	ldr	r3, [r3, #28]
 800040a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800040e:	607b      	str	r3, [r7, #4]
 8000410:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000412:	4b0a      	ldr	r3, [pc, #40]	@ (800043c <HAL_MspInit+0x60>)
 8000414:	685b      	ldr	r3, [r3, #4]
 8000416:	60fb      	str	r3, [r7, #12]
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800041e:	60fb      	str	r3, [r7, #12]
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000426:	60fb      	str	r3, [r7, #12]
 8000428:	4a04      	ldr	r2, [pc, #16]	@ (800043c <HAL_MspInit+0x60>)
 800042a:	68fb      	ldr	r3, [r7, #12]
 800042c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800042e:	bf00      	nop
 8000430:	3714      	adds	r7, #20
 8000432:	46bd      	mov	sp, r7
 8000434:	bc80      	pop	{r7}
 8000436:	4770      	bx	lr
 8000438:	40021000 	.word	0x40021000
 800043c:	40010000 	.word	0x40010000

08000440 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b088      	sub	sp, #32
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000448:	f107 0310 	add.w	r3, r7, #16
 800044c:	2200      	movs	r2, #0
 800044e:	601a      	str	r2, [r3, #0]
 8000450:	605a      	str	r2, [r3, #4]
 8000452:	609a      	str	r2, [r3, #8]
 8000454:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	4a15      	ldr	r2, [pc, #84]	@ (80004b0 <HAL_I2C_MspInit+0x70>)
 800045c:	4293      	cmp	r3, r2
 800045e:	d123      	bne.n	80004a8 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000460:	4b14      	ldr	r3, [pc, #80]	@ (80004b4 <HAL_I2C_MspInit+0x74>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	4a13      	ldr	r2, [pc, #76]	@ (80004b4 <HAL_I2C_MspInit+0x74>)
 8000466:	f043 0308 	orr.w	r3, r3, #8
 800046a:	6193      	str	r3, [r2, #24]
 800046c:	4b11      	ldr	r3, [pc, #68]	@ (80004b4 <HAL_I2C_MspInit+0x74>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	f003 0308 	and.w	r3, r3, #8
 8000474:	60fb      	str	r3, [r7, #12]
 8000476:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000478:	23c0      	movs	r3, #192	@ 0xc0
 800047a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800047c:	2312      	movs	r3, #18
 800047e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000480:	2303      	movs	r3, #3
 8000482:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000484:	f107 0310 	add.w	r3, r7, #16
 8000488:	4619      	mov	r1, r3
 800048a:	480b      	ldr	r0, [pc, #44]	@ (80004b8 <HAL_I2C_MspInit+0x78>)
 800048c:	f000 f9e6 	bl	800085c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000490:	4b08      	ldr	r3, [pc, #32]	@ (80004b4 <HAL_I2C_MspInit+0x74>)
 8000492:	69db      	ldr	r3, [r3, #28]
 8000494:	4a07      	ldr	r2, [pc, #28]	@ (80004b4 <HAL_I2C_MspInit+0x74>)
 8000496:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800049a:	61d3      	str	r3, [r2, #28]
 800049c:	4b05      	ldr	r3, [pc, #20]	@ (80004b4 <HAL_I2C_MspInit+0x74>)
 800049e:	69db      	ldr	r3, [r3, #28]
 80004a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80004a4:	60bb      	str	r3, [r7, #8]
 80004a6:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80004a8:	bf00      	nop
 80004aa:	3720      	adds	r7, #32
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	40005400 	.word	0x40005400
 80004b4:	40021000 	.word	0x40021000
 80004b8:	40010c00 	.word	0x40010c00

080004bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004c0:	bf00      	nop
 80004c2:	e7fd      	b.n	80004c0 <NMI_Handler+0x4>

080004c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004c8:	bf00      	nop
 80004ca:	e7fd      	b.n	80004c8 <HardFault_Handler+0x4>

080004cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004d0:	bf00      	nop
 80004d2:	e7fd      	b.n	80004d0 <MemManage_Handler+0x4>

080004d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004d8:	bf00      	nop
 80004da:	e7fd      	b.n	80004d8 <BusFault_Handler+0x4>

080004dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004e0:	bf00      	nop
 80004e2:	e7fd      	b.n	80004e0 <UsageFault_Handler+0x4>

080004e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004e8:	bf00      	nop
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bc80      	pop	{r7}
 80004ee:	4770      	bx	lr

080004f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004f4:	bf00      	nop
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bc80      	pop	{r7}
 80004fa:	4770      	bx	lr

080004fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000500:	bf00      	nop
 8000502:	46bd      	mov	sp, r7
 8000504:	bc80      	pop	{r7}
 8000506:	4770      	bx	lr

08000508 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800050c:	f000 f87c 	bl	8000608 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000510:	bf00      	nop
 8000512:	bd80      	pop	{r7, pc}

08000514 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000518:	2010      	movs	r0, #16
 800051a:	f000 fb23 	bl	8000b64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800051e:	bf00      	nop
 8000520:	bd80      	pop	{r7, pc}

08000522 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000522:	b480      	push	{r7}
 8000524:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000526:	bf00      	nop
 8000528:	46bd      	mov	sp, r7
 800052a:	bc80      	pop	{r7}
 800052c:	4770      	bx	lr
	...

08000530 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000530:	f7ff fff7 	bl	8000522 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000534:	480b      	ldr	r0, [pc, #44]	@ (8000564 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000536:	490c      	ldr	r1, [pc, #48]	@ (8000568 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000538:	4a0c      	ldr	r2, [pc, #48]	@ (800056c <LoopFillZerobss+0x16>)
  movs r3, #0
 800053a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800053c:	e002      	b.n	8000544 <LoopCopyDataInit>

0800053e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800053e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000540:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000542:	3304      	adds	r3, #4

08000544 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000544:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000546:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000548:	d3f9      	bcc.n	800053e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800054a:	4a09      	ldr	r2, [pc, #36]	@ (8000570 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800054c:	4c09      	ldr	r4, [pc, #36]	@ (8000574 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800054e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000550:	e001      	b.n	8000556 <LoopFillZerobss>

08000552 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000552:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000554:	3204      	adds	r2, #4

08000556 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000556:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000558:	d3fb      	bcc.n	8000552 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800055a:	f001 fdad 	bl	80020b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800055e:	f7ff fdf5 	bl	800014c <main>
  bx lr
 8000562:	4770      	bx	lr
  ldr r0, =_sdata
 8000564:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000568:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800056c:	0800214c 	.word	0x0800214c
  ldr r2, =_sbss
 8000570:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000574:	20000088 	.word	0x20000088

08000578 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000578:	e7fe      	b.n	8000578 <ADC1_2_IRQHandler>
	...

0800057c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000580:	4b08      	ldr	r3, [pc, #32]	@ (80005a4 <HAL_Init+0x28>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a07      	ldr	r2, [pc, #28]	@ (80005a4 <HAL_Init+0x28>)
 8000586:	f043 0310 	orr.w	r3, r3, #16
 800058a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800058c:	2003      	movs	r0, #3
 800058e:	f000 f923 	bl	80007d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000592:	200f      	movs	r0, #15
 8000594:	f000 f808 	bl	80005a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000598:	f7ff ff20 	bl	80003dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800059c:	2300      	movs	r3, #0
}
 800059e:	4618      	mov	r0, r3
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40022000 	.word	0x40022000

080005a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005b0:	4b12      	ldr	r3, [pc, #72]	@ (80005fc <HAL_InitTick+0x54>)
 80005b2:	681a      	ldr	r2, [r3, #0]
 80005b4:	4b12      	ldr	r3, [pc, #72]	@ (8000600 <HAL_InitTick+0x58>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	4619      	mov	r1, r3
 80005ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005be:	fbb3 f3f1 	udiv	r3, r3, r1
 80005c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80005c6:	4618      	mov	r0, r3
 80005c8:	f000 f93b 	bl	8000842 <HAL_SYSTICK_Config>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005d2:	2301      	movs	r3, #1
 80005d4:	e00e      	b.n	80005f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	2b0f      	cmp	r3, #15
 80005da:	d80a      	bhi.n	80005f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005dc:	2200      	movs	r2, #0
 80005de:	6879      	ldr	r1, [r7, #4]
 80005e0:	f04f 30ff 	mov.w	r0, #4294967295
 80005e4:	f000 f903 	bl	80007ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005e8:	4a06      	ldr	r2, [pc, #24]	@ (8000604 <HAL_InitTick+0x5c>)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005ee:	2300      	movs	r3, #0
 80005f0:	e000      	b.n	80005f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005f2:	2301      	movs	r3, #1
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000000 	.word	0x20000000
 8000600:	20000008 	.word	0x20000008
 8000604:	20000004 	.word	0x20000004

08000608 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800060c:	4b05      	ldr	r3, [pc, #20]	@ (8000624 <HAL_IncTick+0x1c>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	461a      	mov	r2, r3
 8000612:	4b05      	ldr	r3, [pc, #20]	@ (8000628 <HAL_IncTick+0x20>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4413      	add	r3, r2
 8000618:	4a03      	ldr	r2, [pc, #12]	@ (8000628 <HAL_IncTick+0x20>)
 800061a:	6013      	str	r3, [r2, #0]
}
 800061c:	bf00      	nop
 800061e:	46bd      	mov	sp, r7
 8000620:	bc80      	pop	{r7}
 8000622:	4770      	bx	lr
 8000624:	20000008 	.word	0x20000008
 8000628:	20000084 	.word	0x20000084

0800062c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  return uwTick;
 8000630:	4b02      	ldr	r3, [pc, #8]	@ (800063c <HAL_GetTick+0x10>)
 8000632:	681b      	ldr	r3, [r3, #0]
}
 8000634:	4618      	mov	r0, r3
 8000636:	46bd      	mov	sp, r7
 8000638:	bc80      	pop	{r7}
 800063a:	4770      	bx	lr
 800063c:	20000084 	.word	0x20000084

08000640 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000640:	b480      	push	{r7}
 8000642:	b085      	sub	sp, #20
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	f003 0307 	and.w	r3, r3, #7
 800064e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <__NVIC_SetPriorityGrouping+0x44>)
 8000652:	68db      	ldr	r3, [r3, #12]
 8000654:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000656:	68ba      	ldr	r2, [r7, #8]
 8000658:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800065c:	4013      	ands	r3, r2
 800065e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000668:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800066c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000670:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000672:	4a04      	ldr	r2, [pc, #16]	@ (8000684 <__NVIC_SetPriorityGrouping+0x44>)
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	60d3      	str	r3, [r2, #12]
}
 8000678:	bf00      	nop
 800067a:	3714      	adds	r7, #20
 800067c:	46bd      	mov	sp, r7
 800067e:	bc80      	pop	{r7}
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	e000ed00 	.word	0xe000ed00

08000688 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800068c:	4b04      	ldr	r3, [pc, #16]	@ (80006a0 <__NVIC_GetPriorityGrouping+0x18>)
 800068e:	68db      	ldr	r3, [r3, #12]
 8000690:	0a1b      	lsrs	r3, r3, #8
 8000692:	f003 0307 	and.w	r3, r3, #7
}
 8000696:	4618      	mov	r0, r3
 8000698:	46bd      	mov	sp, r7
 800069a:	bc80      	pop	{r7}
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	e000ed00 	.word	0xe000ed00

080006a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	db0b      	blt.n	80006ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	f003 021f 	and.w	r2, r3, #31
 80006bc:	4906      	ldr	r1, [pc, #24]	@ (80006d8 <__NVIC_EnableIRQ+0x34>)
 80006be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c2:	095b      	lsrs	r3, r3, #5
 80006c4:	2001      	movs	r0, #1
 80006c6:	fa00 f202 	lsl.w	r2, r0, r2
 80006ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006ce:	bf00      	nop
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bc80      	pop	{r7}
 80006d6:	4770      	bx	lr
 80006d8:	e000e100 	.word	0xe000e100

080006dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	6039      	str	r1, [r7, #0]
 80006e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	db0a      	blt.n	8000706 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	b2da      	uxtb	r2, r3
 80006f4:	490c      	ldr	r1, [pc, #48]	@ (8000728 <__NVIC_SetPriority+0x4c>)
 80006f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006fa:	0112      	lsls	r2, r2, #4
 80006fc:	b2d2      	uxtb	r2, r2
 80006fe:	440b      	add	r3, r1
 8000700:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000704:	e00a      	b.n	800071c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	b2da      	uxtb	r2, r3
 800070a:	4908      	ldr	r1, [pc, #32]	@ (800072c <__NVIC_SetPriority+0x50>)
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	f003 030f 	and.w	r3, r3, #15
 8000712:	3b04      	subs	r3, #4
 8000714:	0112      	lsls	r2, r2, #4
 8000716:	b2d2      	uxtb	r2, r2
 8000718:	440b      	add	r3, r1
 800071a:	761a      	strb	r2, [r3, #24]
}
 800071c:	bf00      	nop
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	bc80      	pop	{r7}
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	e000e100 	.word	0xe000e100
 800072c:	e000ed00 	.word	0xe000ed00

08000730 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000730:	b480      	push	{r7}
 8000732:	b089      	sub	sp, #36	@ 0x24
 8000734:	af00      	add	r7, sp, #0
 8000736:	60f8      	str	r0, [r7, #12]
 8000738:	60b9      	str	r1, [r7, #8]
 800073a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	f003 0307 	and.w	r3, r3, #7
 8000742:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000744:	69fb      	ldr	r3, [r7, #28]
 8000746:	f1c3 0307 	rsb	r3, r3, #7
 800074a:	2b04      	cmp	r3, #4
 800074c:	bf28      	it	cs
 800074e:	2304      	movcs	r3, #4
 8000750:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000752:	69fb      	ldr	r3, [r7, #28]
 8000754:	3304      	adds	r3, #4
 8000756:	2b06      	cmp	r3, #6
 8000758:	d902      	bls.n	8000760 <NVIC_EncodePriority+0x30>
 800075a:	69fb      	ldr	r3, [r7, #28]
 800075c:	3b03      	subs	r3, #3
 800075e:	e000      	b.n	8000762 <NVIC_EncodePriority+0x32>
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000764:	f04f 32ff 	mov.w	r2, #4294967295
 8000768:	69bb      	ldr	r3, [r7, #24]
 800076a:	fa02 f303 	lsl.w	r3, r2, r3
 800076e:	43da      	mvns	r2, r3
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	401a      	ands	r2, r3
 8000774:	697b      	ldr	r3, [r7, #20]
 8000776:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000778:	f04f 31ff 	mov.w	r1, #4294967295
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	fa01 f303 	lsl.w	r3, r1, r3
 8000782:	43d9      	mvns	r1, r3
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000788:	4313      	orrs	r3, r2
         );
}
 800078a:	4618      	mov	r0, r3
 800078c:	3724      	adds	r7, #36	@ 0x24
 800078e:	46bd      	mov	sp, r7
 8000790:	bc80      	pop	{r7}
 8000792:	4770      	bx	lr

08000794 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	3b01      	subs	r3, #1
 80007a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80007a4:	d301      	bcc.n	80007aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007a6:	2301      	movs	r3, #1
 80007a8:	e00f      	b.n	80007ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007aa:	4a0a      	ldr	r2, [pc, #40]	@ (80007d4 <SysTick_Config+0x40>)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	3b01      	subs	r3, #1
 80007b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007b2:	210f      	movs	r1, #15
 80007b4:	f04f 30ff 	mov.w	r0, #4294967295
 80007b8:	f7ff ff90 	bl	80006dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007bc:	4b05      	ldr	r3, [pc, #20]	@ (80007d4 <SysTick_Config+0x40>)
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007c2:	4b04      	ldr	r3, [pc, #16]	@ (80007d4 <SysTick_Config+0x40>)
 80007c4:	2207      	movs	r2, #7
 80007c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007c8:	2300      	movs	r3, #0
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	e000e010 	.word	0xe000e010

080007d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f7ff ff2d 	bl	8000640 <__NVIC_SetPriorityGrouping>
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}

080007ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b086      	sub	sp, #24
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	4603      	mov	r3, r0
 80007f6:	60b9      	str	r1, [r7, #8]
 80007f8:	607a      	str	r2, [r7, #4]
 80007fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007fc:	2300      	movs	r3, #0
 80007fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000800:	f7ff ff42 	bl	8000688 <__NVIC_GetPriorityGrouping>
 8000804:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000806:	687a      	ldr	r2, [r7, #4]
 8000808:	68b9      	ldr	r1, [r7, #8]
 800080a:	6978      	ldr	r0, [r7, #20]
 800080c:	f7ff ff90 	bl	8000730 <NVIC_EncodePriority>
 8000810:	4602      	mov	r2, r0
 8000812:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000816:	4611      	mov	r1, r2
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff ff5f 	bl	80006dc <__NVIC_SetPriority>
}
 800081e:	bf00      	nop
 8000820:	3718      	adds	r7, #24
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}

08000826 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000826:	b580      	push	{r7, lr}
 8000828:	b082      	sub	sp, #8
 800082a:	af00      	add	r7, sp, #0
 800082c:	4603      	mov	r3, r0
 800082e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff ff35 	bl	80006a4 <__NVIC_EnableIRQ>
}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}

08000842 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000842:	b580      	push	{r7, lr}
 8000844:	b082      	sub	sp, #8
 8000846:	af00      	add	r7, sp, #0
 8000848:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800084a:	6878      	ldr	r0, [r7, #4]
 800084c:	f7ff ffa2 	bl	8000794 <SysTick_Config>
 8000850:	4603      	mov	r3, r0
}
 8000852:	4618      	mov	r0, r3
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
	...

0800085c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800085c:	b480      	push	{r7}
 800085e:	b08b      	sub	sp, #44	@ 0x2c
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000866:	2300      	movs	r3, #0
 8000868:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800086a:	2300      	movs	r3, #0
 800086c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800086e:	e169      	b.n	8000b44 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000870:	2201      	movs	r2, #1
 8000872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000874:	fa02 f303 	lsl.w	r3, r2, r3
 8000878:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	69fa      	ldr	r2, [r7, #28]
 8000880:	4013      	ands	r3, r2
 8000882:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000884:	69ba      	ldr	r2, [r7, #24]
 8000886:	69fb      	ldr	r3, [r7, #28]
 8000888:	429a      	cmp	r2, r3
 800088a:	f040 8158 	bne.w	8000b3e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	685b      	ldr	r3, [r3, #4]
 8000892:	4a9a      	ldr	r2, [pc, #616]	@ (8000afc <HAL_GPIO_Init+0x2a0>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d05e      	beq.n	8000956 <HAL_GPIO_Init+0xfa>
 8000898:	4a98      	ldr	r2, [pc, #608]	@ (8000afc <HAL_GPIO_Init+0x2a0>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d875      	bhi.n	800098a <HAL_GPIO_Init+0x12e>
 800089e:	4a98      	ldr	r2, [pc, #608]	@ (8000b00 <HAL_GPIO_Init+0x2a4>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d058      	beq.n	8000956 <HAL_GPIO_Init+0xfa>
 80008a4:	4a96      	ldr	r2, [pc, #600]	@ (8000b00 <HAL_GPIO_Init+0x2a4>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d86f      	bhi.n	800098a <HAL_GPIO_Init+0x12e>
 80008aa:	4a96      	ldr	r2, [pc, #600]	@ (8000b04 <HAL_GPIO_Init+0x2a8>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d052      	beq.n	8000956 <HAL_GPIO_Init+0xfa>
 80008b0:	4a94      	ldr	r2, [pc, #592]	@ (8000b04 <HAL_GPIO_Init+0x2a8>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d869      	bhi.n	800098a <HAL_GPIO_Init+0x12e>
 80008b6:	4a94      	ldr	r2, [pc, #592]	@ (8000b08 <HAL_GPIO_Init+0x2ac>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d04c      	beq.n	8000956 <HAL_GPIO_Init+0xfa>
 80008bc:	4a92      	ldr	r2, [pc, #584]	@ (8000b08 <HAL_GPIO_Init+0x2ac>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d863      	bhi.n	800098a <HAL_GPIO_Init+0x12e>
 80008c2:	4a92      	ldr	r2, [pc, #584]	@ (8000b0c <HAL_GPIO_Init+0x2b0>)
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d046      	beq.n	8000956 <HAL_GPIO_Init+0xfa>
 80008c8:	4a90      	ldr	r2, [pc, #576]	@ (8000b0c <HAL_GPIO_Init+0x2b0>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d85d      	bhi.n	800098a <HAL_GPIO_Init+0x12e>
 80008ce:	2b12      	cmp	r3, #18
 80008d0:	d82a      	bhi.n	8000928 <HAL_GPIO_Init+0xcc>
 80008d2:	2b12      	cmp	r3, #18
 80008d4:	d859      	bhi.n	800098a <HAL_GPIO_Init+0x12e>
 80008d6:	a201      	add	r2, pc, #4	@ (adr r2, 80008dc <HAL_GPIO_Init+0x80>)
 80008d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008dc:	08000957 	.word	0x08000957
 80008e0:	08000931 	.word	0x08000931
 80008e4:	08000943 	.word	0x08000943
 80008e8:	08000985 	.word	0x08000985
 80008ec:	0800098b 	.word	0x0800098b
 80008f0:	0800098b 	.word	0x0800098b
 80008f4:	0800098b 	.word	0x0800098b
 80008f8:	0800098b 	.word	0x0800098b
 80008fc:	0800098b 	.word	0x0800098b
 8000900:	0800098b 	.word	0x0800098b
 8000904:	0800098b 	.word	0x0800098b
 8000908:	0800098b 	.word	0x0800098b
 800090c:	0800098b 	.word	0x0800098b
 8000910:	0800098b 	.word	0x0800098b
 8000914:	0800098b 	.word	0x0800098b
 8000918:	0800098b 	.word	0x0800098b
 800091c:	0800098b 	.word	0x0800098b
 8000920:	08000939 	.word	0x08000939
 8000924:	0800094d 	.word	0x0800094d
 8000928:	4a79      	ldr	r2, [pc, #484]	@ (8000b10 <HAL_GPIO_Init+0x2b4>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d013      	beq.n	8000956 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800092e:	e02c      	b.n	800098a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	68db      	ldr	r3, [r3, #12]
 8000934:	623b      	str	r3, [r7, #32]
          break;
 8000936:	e029      	b.n	800098c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	68db      	ldr	r3, [r3, #12]
 800093c:	3304      	adds	r3, #4
 800093e:	623b      	str	r3, [r7, #32]
          break;
 8000940:	e024      	b.n	800098c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	68db      	ldr	r3, [r3, #12]
 8000946:	3308      	adds	r3, #8
 8000948:	623b      	str	r3, [r7, #32]
          break;
 800094a:	e01f      	b.n	800098c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	68db      	ldr	r3, [r3, #12]
 8000950:	330c      	adds	r3, #12
 8000952:	623b      	str	r3, [r7, #32]
          break;
 8000954:	e01a      	b.n	800098c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	689b      	ldr	r3, [r3, #8]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d102      	bne.n	8000964 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800095e:	2304      	movs	r3, #4
 8000960:	623b      	str	r3, [r7, #32]
          break;
 8000962:	e013      	b.n	800098c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	689b      	ldr	r3, [r3, #8]
 8000968:	2b01      	cmp	r3, #1
 800096a:	d105      	bne.n	8000978 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800096c:	2308      	movs	r3, #8
 800096e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	69fa      	ldr	r2, [r7, #28]
 8000974:	611a      	str	r2, [r3, #16]
          break;
 8000976:	e009      	b.n	800098c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000978:	2308      	movs	r3, #8
 800097a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	69fa      	ldr	r2, [r7, #28]
 8000980:	615a      	str	r2, [r3, #20]
          break;
 8000982:	e003      	b.n	800098c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000984:	2300      	movs	r3, #0
 8000986:	623b      	str	r3, [r7, #32]
          break;
 8000988:	e000      	b.n	800098c <HAL_GPIO_Init+0x130>
          break;
 800098a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800098c:	69bb      	ldr	r3, [r7, #24]
 800098e:	2bff      	cmp	r3, #255	@ 0xff
 8000990:	d801      	bhi.n	8000996 <HAL_GPIO_Init+0x13a>
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	e001      	b.n	800099a <HAL_GPIO_Init+0x13e>
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	3304      	adds	r3, #4
 800099a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800099c:	69bb      	ldr	r3, [r7, #24]
 800099e:	2bff      	cmp	r3, #255	@ 0xff
 80009a0:	d802      	bhi.n	80009a8 <HAL_GPIO_Init+0x14c>
 80009a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	e002      	b.n	80009ae <HAL_GPIO_Init+0x152>
 80009a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009aa:	3b08      	subs	r3, #8
 80009ac:	009b      	lsls	r3, r3, #2
 80009ae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	210f      	movs	r1, #15
 80009b6:	693b      	ldr	r3, [r7, #16]
 80009b8:	fa01 f303 	lsl.w	r3, r1, r3
 80009bc:	43db      	mvns	r3, r3
 80009be:	401a      	ands	r2, r3
 80009c0:	6a39      	ldr	r1, [r7, #32]
 80009c2:	693b      	ldr	r3, [r7, #16]
 80009c4:	fa01 f303 	lsl.w	r3, r1, r3
 80009c8:	431a      	orrs	r2, r3
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	f000 80b1 	beq.w	8000b3e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009dc:	4b4d      	ldr	r3, [pc, #308]	@ (8000b14 <HAL_GPIO_Init+0x2b8>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	4a4c      	ldr	r2, [pc, #304]	@ (8000b14 <HAL_GPIO_Init+0x2b8>)
 80009e2:	f043 0301 	orr.w	r3, r3, #1
 80009e6:	6193      	str	r3, [r2, #24]
 80009e8:	4b4a      	ldr	r3, [pc, #296]	@ (8000b14 <HAL_GPIO_Init+0x2b8>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	f003 0301 	and.w	r3, r3, #1
 80009f0:	60bb      	str	r3, [r7, #8]
 80009f2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80009f4:	4a48      	ldr	r2, [pc, #288]	@ (8000b18 <HAL_GPIO_Init+0x2bc>)
 80009f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009f8:	089b      	lsrs	r3, r3, #2
 80009fa:	3302      	adds	r3, #2
 80009fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a00:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a04:	f003 0303 	and.w	r3, r3, #3
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	220f      	movs	r2, #15
 8000a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a10:	43db      	mvns	r3, r3
 8000a12:	68fa      	ldr	r2, [r7, #12]
 8000a14:	4013      	ands	r3, r2
 8000a16:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4a40      	ldr	r2, [pc, #256]	@ (8000b1c <HAL_GPIO_Init+0x2c0>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d013      	beq.n	8000a48 <HAL_GPIO_Init+0x1ec>
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4a3f      	ldr	r2, [pc, #252]	@ (8000b20 <HAL_GPIO_Init+0x2c4>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d00d      	beq.n	8000a44 <HAL_GPIO_Init+0x1e8>
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	4a3e      	ldr	r2, [pc, #248]	@ (8000b24 <HAL_GPIO_Init+0x2c8>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d007      	beq.n	8000a40 <HAL_GPIO_Init+0x1e4>
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4a3d      	ldr	r2, [pc, #244]	@ (8000b28 <HAL_GPIO_Init+0x2cc>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d101      	bne.n	8000a3c <HAL_GPIO_Init+0x1e0>
 8000a38:	2303      	movs	r3, #3
 8000a3a:	e006      	b.n	8000a4a <HAL_GPIO_Init+0x1ee>
 8000a3c:	2304      	movs	r3, #4
 8000a3e:	e004      	b.n	8000a4a <HAL_GPIO_Init+0x1ee>
 8000a40:	2302      	movs	r3, #2
 8000a42:	e002      	b.n	8000a4a <HAL_GPIO_Init+0x1ee>
 8000a44:	2301      	movs	r3, #1
 8000a46:	e000      	b.n	8000a4a <HAL_GPIO_Init+0x1ee>
 8000a48:	2300      	movs	r3, #0
 8000a4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a4c:	f002 0203 	and.w	r2, r2, #3
 8000a50:	0092      	lsls	r2, r2, #2
 8000a52:	4093      	lsls	r3, r2
 8000a54:	68fa      	ldr	r2, [r7, #12]
 8000a56:	4313      	orrs	r3, r2
 8000a58:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a5a:	492f      	ldr	r1, [pc, #188]	@ (8000b18 <HAL_GPIO_Init+0x2bc>)
 8000a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a5e:	089b      	lsrs	r3, r3, #2
 8000a60:	3302      	adds	r3, #2
 8000a62:	68fa      	ldr	r2, [r7, #12]
 8000a64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d006      	beq.n	8000a82 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a74:	4b2d      	ldr	r3, [pc, #180]	@ (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000a76:	689a      	ldr	r2, [r3, #8]
 8000a78:	492c      	ldr	r1, [pc, #176]	@ (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000a7a:	69bb      	ldr	r3, [r7, #24]
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	608b      	str	r3, [r1, #8]
 8000a80:	e006      	b.n	8000a90 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a82:	4b2a      	ldr	r3, [pc, #168]	@ (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000a84:	689a      	ldr	r2, [r3, #8]
 8000a86:	69bb      	ldr	r3, [r7, #24]
 8000a88:	43db      	mvns	r3, r3
 8000a8a:	4928      	ldr	r1, [pc, #160]	@ (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d006      	beq.n	8000aaa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a9c:	4b23      	ldr	r3, [pc, #140]	@ (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000a9e:	68da      	ldr	r2, [r3, #12]
 8000aa0:	4922      	ldr	r1, [pc, #136]	@ (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000aa2:	69bb      	ldr	r3, [r7, #24]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	60cb      	str	r3, [r1, #12]
 8000aa8:	e006      	b.n	8000ab8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000aaa:	4b20      	ldr	r3, [pc, #128]	@ (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000aac:	68da      	ldr	r2, [r3, #12]
 8000aae:	69bb      	ldr	r3, [r7, #24]
 8000ab0:	43db      	mvns	r3, r3
 8000ab2:	491e      	ldr	r1, [pc, #120]	@ (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d006      	beq.n	8000ad2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ac4:	4b19      	ldr	r3, [pc, #100]	@ (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000ac6:	685a      	ldr	r2, [r3, #4]
 8000ac8:	4918      	ldr	r1, [pc, #96]	@ (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000aca:	69bb      	ldr	r3, [r7, #24]
 8000acc:	4313      	orrs	r3, r2
 8000ace:	604b      	str	r3, [r1, #4]
 8000ad0:	e006      	b.n	8000ae0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ad2:	4b16      	ldr	r3, [pc, #88]	@ (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000ad4:	685a      	ldr	r2, [r3, #4]
 8000ad6:	69bb      	ldr	r3, [r7, #24]
 8000ad8:	43db      	mvns	r3, r3
 8000ada:	4914      	ldr	r1, [pc, #80]	@ (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000adc:	4013      	ands	r3, r2
 8000ade:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d021      	beq.n	8000b30 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000aec:	4b0f      	ldr	r3, [pc, #60]	@ (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	490e      	ldr	r1, [pc, #56]	@ (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000af2:	69bb      	ldr	r3, [r7, #24]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	600b      	str	r3, [r1, #0]
 8000af8:	e021      	b.n	8000b3e <HAL_GPIO_Init+0x2e2>
 8000afa:	bf00      	nop
 8000afc:	10320000 	.word	0x10320000
 8000b00:	10310000 	.word	0x10310000
 8000b04:	10220000 	.word	0x10220000
 8000b08:	10210000 	.word	0x10210000
 8000b0c:	10120000 	.word	0x10120000
 8000b10:	10110000 	.word	0x10110000
 8000b14:	40021000 	.word	0x40021000
 8000b18:	40010000 	.word	0x40010000
 8000b1c:	40010800 	.word	0x40010800
 8000b20:	40010c00 	.word	0x40010c00
 8000b24:	40011000 	.word	0x40011000
 8000b28:	40011400 	.word	0x40011400
 8000b2c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b30:	4b0b      	ldr	r3, [pc, #44]	@ (8000b60 <HAL_GPIO_Init+0x304>)
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	69bb      	ldr	r3, [r7, #24]
 8000b36:	43db      	mvns	r3, r3
 8000b38:	4909      	ldr	r1, [pc, #36]	@ (8000b60 <HAL_GPIO_Init+0x304>)
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b40:	3301      	adds	r3, #1
 8000b42:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	f47f ae8e 	bne.w	8000870 <HAL_GPIO_Init+0x14>
  }
}
 8000b54:	bf00      	nop
 8000b56:	bf00      	nop
 8000b58:	372c      	adds	r7, #44	@ 0x2c
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bc80      	pop	{r7}
 8000b5e:	4770      	bx	lr
 8000b60:	40010400 	.word	0x40010400

08000b64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000b6e:	4b08      	ldr	r3, [pc, #32]	@ (8000b90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000b70:	695a      	ldr	r2, [r3, #20]
 8000b72:	88fb      	ldrh	r3, [r7, #6]
 8000b74:	4013      	ands	r3, r2
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d006      	beq.n	8000b88 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000b7a:	4a05      	ldr	r2, [pc, #20]	@ (8000b90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000b7c:	88fb      	ldrh	r3, [r7, #6]
 8000b7e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000b80:	88fb      	ldrh	r3, [r7, #6]
 8000b82:	4618      	mov	r0, r3
 8000b84:	f7ff fc16 	bl	80003b4 <HAL_GPIO_EXTI_Callback>
  }
}
 8000b88:	bf00      	nop
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40010400 	.word	0x40010400

08000b94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d101      	bne.n	8000ba6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	e12b      	b.n	8000dfe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d106      	bne.n	8000bc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f7ff fc40 	bl	8000440 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2224      	movs	r2, #36	@ 0x24
 8000bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f022 0201 	bic.w	r2, r2, #1
 8000bd6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000be6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000bf6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000bf8:	f001 fa24 	bl	8002044 <HAL_RCC_GetPCLK1Freq>
 8000bfc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	4a81      	ldr	r2, [pc, #516]	@ (8000e08 <HAL_I2C_Init+0x274>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d807      	bhi.n	8000c18 <HAL_I2C_Init+0x84>
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	4a80      	ldr	r2, [pc, #512]	@ (8000e0c <HAL_I2C_Init+0x278>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	bf94      	ite	ls
 8000c10:	2301      	movls	r3, #1
 8000c12:	2300      	movhi	r3, #0
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	e006      	b.n	8000c26 <HAL_I2C_Init+0x92>
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	4a7d      	ldr	r2, [pc, #500]	@ (8000e10 <HAL_I2C_Init+0x27c>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	bf94      	ite	ls
 8000c20:	2301      	movls	r3, #1
 8000c22:	2300      	movhi	r3, #0
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	e0e7      	b.n	8000dfe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	4a78      	ldr	r2, [pc, #480]	@ (8000e14 <HAL_I2C_Init+0x280>)
 8000c32:	fba2 2303 	umull	r2, r3, r2, r3
 8000c36:	0c9b      	lsrs	r3, r3, #18
 8000c38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	68ba      	ldr	r2, [r7, #8]
 8000c4a:	430a      	orrs	r2, r1
 8000c4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	6a1b      	ldr	r3, [r3, #32]
 8000c54:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	4a6a      	ldr	r2, [pc, #424]	@ (8000e08 <HAL_I2C_Init+0x274>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d802      	bhi.n	8000c68 <HAL_I2C_Init+0xd4>
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	3301      	adds	r3, #1
 8000c66:	e009      	b.n	8000c7c <HAL_I2C_Init+0xe8>
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000c6e:	fb02 f303 	mul.w	r3, r2, r3
 8000c72:	4a69      	ldr	r2, [pc, #420]	@ (8000e18 <HAL_I2C_Init+0x284>)
 8000c74:	fba2 2303 	umull	r2, r3, r2, r3
 8000c78:	099b      	lsrs	r3, r3, #6
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	687a      	ldr	r2, [r7, #4]
 8000c7e:	6812      	ldr	r2, [r2, #0]
 8000c80:	430b      	orrs	r3, r1
 8000c82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	69db      	ldr	r3, [r3, #28]
 8000c8a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8000c8e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	495c      	ldr	r1, [pc, #368]	@ (8000e08 <HAL_I2C_Init+0x274>)
 8000c98:	428b      	cmp	r3, r1
 8000c9a:	d819      	bhi.n	8000cd0 <HAL_I2C_Init+0x13c>
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	1e59      	subs	r1, r3, #1
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	fbb1 f3f3 	udiv	r3, r1, r3
 8000caa:	1c59      	adds	r1, r3, #1
 8000cac:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8000cb0:	400b      	ands	r3, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d00a      	beq.n	8000ccc <HAL_I2C_Init+0x138>
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	1e59      	subs	r1, r3, #1
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cca:	e051      	b.n	8000d70 <HAL_I2C_Init+0x1dc>
 8000ccc:	2304      	movs	r3, #4
 8000cce:	e04f      	b.n	8000d70 <HAL_I2C_Init+0x1dc>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	689b      	ldr	r3, [r3, #8]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d111      	bne.n	8000cfc <HAL_I2C_Init+0x168>
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	1e58      	subs	r0, r3, #1
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6859      	ldr	r1, [r3, #4]
 8000ce0:	460b      	mov	r3, r1
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	440b      	add	r3, r1
 8000ce6:	fbb0 f3f3 	udiv	r3, r0, r3
 8000cea:	3301      	adds	r3, #1
 8000cec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	bf0c      	ite	eq
 8000cf4:	2301      	moveq	r3, #1
 8000cf6:	2300      	movne	r3, #0
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	e012      	b.n	8000d22 <HAL_I2C_Init+0x18e>
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	1e58      	subs	r0, r3, #1
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6859      	ldr	r1, [r3, #4]
 8000d04:	460b      	mov	r3, r1
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	440b      	add	r3, r1
 8000d0a:	0099      	lsls	r1, r3, #2
 8000d0c:	440b      	add	r3, r1
 8000d0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d12:	3301      	adds	r3, #1
 8000d14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	bf0c      	ite	eq
 8000d1c:	2301      	moveq	r3, #1
 8000d1e:	2300      	movne	r3, #0
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <HAL_I2C_Init+0x196>
 8000d26:	2301      	movs	r3, #1
 8000d28:	e022      	b.n	8000d70 <HAL_I2C_Init+0x1dc>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d10e      	bne.n	8000d50 <HAL_I2C_Init+0x1bc>
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	1e58      	subs	r0, r3, #1
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6859      	ldr	r1, [r3, #4]
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	440b      	add	r3, r1
 8000d40:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d44:	3301      	adds	r3, #1
 8000d46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d4e:	e00f      	b.n	8000d70 <HAL_I2C_Init+0x1dc>
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	1e58      	subs	r0, r3, #1
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6859      	ldr	r1, [r3, #4]
 8000d58:	460b      	mov	r3, r1
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	440b      	add	r3, r1
 8000d5e:	0099      	lsls	r1, r3, #2
 8000d60:	440b      	add	r3, r1
 8000d62:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d66:	3301      	adds	r3, #1
 8000d68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d6c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000d70:	6879      	ldr	r1, [r7, #4]
 8000d72:	6809      	ldr	r1, [r1, #0]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	69da      	ldr	r2, [r3, #28]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6a1b      	ldr	r3, [r3, #32]
 8000d8a:	431a      	orrs	r2, r3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	430a      	orrs	r2, r1
 8000d92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	689b      	ldr	r3, [r3, #8]
 8000d9a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8000d9e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000da2:	687a      	ldr	r2, [r7, #4]
 8000da4:	6911      	ldr	r1, [r2, #16]
 8000da6:	687a      	ldr	r2, [r7, #4]
 8000da8:	68d2      	ldr	r2, [r2, #12]
 8000daa:	4311      	orrs	r1, r2
 8000dac:	687a      	ldr	r2, [r7, #4]
 8000dae:	6812      	ldr	r2, [r2, #0]
 8000db0:	430b      	orrs	r3, r1
 8000db2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	68db      	ldr	r3, [r3, #12]
 8000dba:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	695a      	ldr	r2, [r3, #20]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	699b      	ldr	r3, [r3, #24]
 8000dc6:	431a      	orrs	r2, r3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	430a      	orrs	r2, r1
 8000dce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f042 0201 	orr.w	r2, r2, #1
 8000dde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2200      	movs	r2, #0
 8000de4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2220      	movs	r2, #32
 8000dea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2200      	movs	r2, #0
 8000df2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2200      	movs	r2, #0
 8000df8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8000dfc:	2300      	movs	r3, #0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3710      	adds	r7, #16
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	000186a0 	.word	0x000186a0
 8000e0c:	001e847f 	.word	0x001e847f
 8000e10:	003d08ff 	.word	0x003d08ff
 8000e14:	431bde83 	.word	0x431bde83
 8000e18:	10624dd3 	.word	0x10624dd3

08000e1c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08c      	sub	sp, #48	@ 0x30
 8000e20:	af02      	add	r7, sp, #8
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	4608      	mov	r0, r1
 8000e26:	4611      	mov	r1, r2
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	817b      	strh	r3, [r7, #10]
 8000e2e:	460b      	mov	r3, r1
 8000e30:	813b      	strh	r3, [r7, #8]
 8000e32:	4613      	mov	r3, r2
 8000e34:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8000e36:	2300      	movs	r3, #0
 8000e38:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000e3a:	f7ff fbf7 	bl	800062c <HAL_GetTick>
 8000e3e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	2b20      	cmp	r3, #32
 8000e4a:	f040 8250 	bne.w	80012ee <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e50:	9300      	str	r3, [sp, #0]
 8000e52:	2319      	movs	r3, #25
 8000e54:	2201      	movs	r2, #1
 8000e56:	4982      	ldr	r1, [pc, #520]	@ (8001060 <HAL_I2C_Mem_Read+0x244>)
 8000e58:	68f8      	ldr	r0, [r7, #12]
 8000e5a:	f000 fb3b 	bl	80014d4 <I2C_WaitOnFlagUntilTimeout>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8000e64:	2302      	movs	r3, #2
 8000e66:	e243      	b.n	80012f0 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d101      	bne.n	8000e76 <HAL_I2C_Mem_Read+0x5a>
 8000e72:	2302      	movs	r3, #2
 8000e74:	e23c      	b.n	80012f0 <HAL_I2C_Mem_Read+0x4d4>
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	2201      	movs	r2, #1
 8000e7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f003 0301 	and.w	r3, r3, #1
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d007      	beq.n	8000e9c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f042 0201 	orr.w	r2, r2, #1
 8000e9a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000eaa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	2222      	movs	r2, #34	@ 0x22
 8000eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	2240      	movs	r2, #64	@ 0x40
 8000eb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000ec6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8000ecc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	4a62      	ldr	r2, [pc, #392]	@ (8001064 <HAL_I2C_Mem_Read+0x248>)
 8000edc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000ede:	88f8      	ldrh	r0, [r7, #6]
 8000ee0:	893a      	ldrh	r2, [r7, #8]
 8000ee2:	8979      	ldrh	r1, [r7, #10]
 8000ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ee6:	9301      	str	r3, [sp, #4]
 8000ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000eea:	9300      	str	r3, [sp, #0]
 8000eec:	4603      	mov	r3, r0
 8000eee:	68f8      	ldr	r0, [r7, #12]
 8000ef0:	f000 fa08 	bl	8001304 <I2C_RequestMemoryRead>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e1f8      	b.n	80012f0 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d113      	bne.n	8000f2e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000f06:	2300      	movs	r3, #0
 8000f08:	61fb      	str	r3, [r7, #28]
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	695b      	ldr	r3, [r3, #20]
 8000f10:	61fb      	str	r3, [r7, #28]
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	61fb      	str	r3, [r7, #28]
 8000f1a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	e1cc      	b.n	80012c8 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d11e      	bne.n	8000f74 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000f44:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000f46:	b672      	cpsid	i
}
 8000f48:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61bb      	str	r3, [r7, #24]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	695b      	ldr	r3, [r3, #20]
 8000f54:	61bb      	str	r3, [r7, #24]
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	61bb      	str	r3, [r7, #24]
 8000f5e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000f6e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000f70:	b662      	cpsie	i
}
 8000f72:	e035      	b.n	8000fe0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d11e      	bne.n	8000fba <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000f8a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000f8c:	b672      	cpsid	i
}
 8000f8e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	695b      	ldr	r3, [r3, #20]
 8000f9a:	617b      	str	r3, [r7, #20]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	699b      	ldr	r3, [r3, #24]
 8000fa2:	617b      	str	r3, [r7, #20]
 8000fa4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000fb4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000fb6:	b662      	cpsie	i
}
 8000fb8:	e012      	b.n	8000fe0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000fc8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000fca:	2300      	movs	r3, #0
 8000fcc:	613b      	str	r3, [r7, #16]
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	695b      	ldr	r3, [r3, #20]
 8000fd4:	613b      	str	r3, [r7, #16]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	613b      	str	r3, [r7, #16]
 8000fde:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8000fe0:	e172      	b.n	80012c8 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000fe6:	2b03      	cmp	r3, #3
 8000fe8:	f200 811f 	bhi.w	800122a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d123      	bne.n	800103c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000ff4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ff6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8000ff8:	68f8      	ldr	r0, [r7, #12]
 8000ffa:	f000 fbcd 	bl	8001798 <I2C_WaitOnRXNEFlagUntilTimeout>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001004:	2301      	movs	r3, #1
 8001006:	e173      	b.n	80012f0 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	691a      	ldr	r2, [r3, #16]
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001012:	b2d2      	uxtb	r2, r2
 8001014:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800101a:	1c5a      	adds	r2, r3, #1
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001024:	3b01      	subs	r3, #1
 8001026:	b29a      	uxth	r2, r3
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001030:	b29b      	uxth	r3, r3
 8001032:	3b01      	subs	r3, #1
 8001034:	b29a      	uxth	r2, r3
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800103a:	e145      	b.n	80012c8 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001040:	2b02      	cmp	r3, #2
 8001042:	d152      	bne.n	80010ea <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001046:	9300      	str	r3, [sp, #0]
 8001048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800104a:	2200      	movs	r2, #0
 800104c:	4906      	ldr	r1, [pc, #24]	@ (8001068 <HAL_I2C_Mem_Read+0x24c>)
 800104e:	68f8      	ldr	r0, [r7, #12]
 8001050:	f000 fa40 	bl	80014d4 <I2C_WaitOnFlagUntilTimeout>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d008      	beq.n	800106c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e148      	b.n	80012f0 <HAL_I2C_Mem_Read+0x4d4>
 800105e:	bf00      	nop
 8001060:	00100002 	.word	0x00100002
 8001064:	ffff0000 	.word	0xffff0000
 8001068:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800106c:	b672      	cpsid	i
}
 800106e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800107e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	691a      	ldr	r2, [r3, #16]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800108a:	b2d2      	uxtb	r2, r2
 800108c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001092:	1c5a      	adds	r2, r3, #1
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800109c:	3b01      	subs	r3, #1
 800109e:	b29a      	uxth	r2, r3
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	3b01      	subs	r3, #1
 80010ac:	b29a      	uxth	r2, r3
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80010b2:	b662      	cpsie	i
}
 80010b4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	691a      	ldr	r2, [r3, #16]
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010c0:	b2d2      	uxtb	r2, r2
 80010c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010c8:	1c5a      	adds	r2, r3, #1
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80010d2:	3b01      	subs	r3, #1
 80010d4:	b29a      	uxth	r2, r3
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80010de:	b29b      	uxth	r3, r3
 80010e0:	3b01      	subs	r3, #1
 80010e2:	b29a      	uxth	r2, r3
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80010e8:	e0ee      	b.n	80012c8 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80010ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ec:	9300      	str	r3, [sp, #0]
 80010ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80010f0:	2200      	movs	r2, #0
 80010f2:	4981      	ldr	r1, [pc, #516]	@ (80012f8 <HAL_I2C_Mem_Read+0x4dc>)
 80010f4:	68f8      	ldr	r0, [r7, #12]
 80010f6:	f000 f9ed 	bl	80014d4 <I2C_WaitOnFlagUntilTimeout>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	e0f5      	b.n	80012f0 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001112:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001114:	b672      	cpsid	i
}
 8001116:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	691a      	ldr	r2, [r3, #16]
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001122:	b2d2      	uxtb	r2, r2
 8001124:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800112a:	1c5a      	adds	r2, r3, #1
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001134:	3b01      	subs	r3, #1
 8001136:	b29a      	uxth	r2, r3
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001140:	b29b      	uxth	r3, r3
 8001142:	3b01      	subs	r3, #1
 8001144:	b29a      	uxth	r2, r3
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800114a:	4b6c      	ldr	r3, [pc, #432]	@ (80012fc <HAL_I2C_Mem_Read+0x4e0>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	08db      	lsrs	r3, r3, #3
 8001150:	4a6b      	ldr	r2, [pc, #428]	@ (8001300 <HAL_I2C_Mem_Read+0x4e4>)
 8001152:	fba2 2303 	umull	r2, r3, r2, r3
 8001156:	0a1a      	lsrs	r2, r3, #8
 8001158:	4613      	mov	r3, r2
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	4413      	add	r3, r2
 800115e:	00da      	lsls	r2, r3, #3
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001164:	6a3b      	ldr	r3, [r7, #32]
 8001166:	3b01      	subs	r3, #1
 8001168:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800116a:	6a3b      	ldr	r3, [r7, #32]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d118      	bne.n	80011a2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	2200      	movs	r2, #0
 8001174:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	2220      	movs	r2, #32
 800117a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	2200      	movs	r2, #0
 8001182:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800118a:	f043 0220 	orr.w	r2, r3, #32
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001192:	b662      	cpsie	i
}
 8001194:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	2200      	movs	r2, #0
 800119a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e0a6      	b.n	80012f0 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	695b      	ldr	r3, [r3, #20]
 80011a8:	f003 0304 	and.w	r3, r3, #4
 80011ac:	2b04      	cmp	r3, #4
 80011ae:	d1d9      	bne.n	8001164 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80011be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	691a      	ldr	r2, [r3, #16]
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ca:	b2d2      	uxtb	r2, r2
 80011cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011d2:	1c5a      	adds	r2, r3, #1
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80011dc:	3b01      	subs	r3, #1
 80011de:	b29a      	uxth	r2, r3
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	3b01      	subs	r3, #1
 80011ec:	b29a      	uxth	r2, r3
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80011f2:	b662      	cpsie	i
}
 80011f4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	691a      	ldr	r2, [r3, #16]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001200:	b2d2      	uxtb	r2, r2
 8001202:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001208:	1c5a      	adds	r2, r3, #1
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001212:	3b01      	subs	r3, #1
 8001214:	b29a      	uxth	r2, r3
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800121e:	b29b      	uxth	r3, r3
 8001220:	3b01      	subs	r3, #1
 8001222:	b29a      	uxth	r2, r3
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001228:	e04e      	b.n	80012c8 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800122a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800122c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800122e:	68f8      	ldr	r0, [r7, #12]
 8001230:	f000 fab2 	bl	8001798 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e058      	b.n	80012f0 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	691a      	ldr	r2, [r3, #16]
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001248:	b2d2      	uxtb	r2, r2
 800124a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001250:	1c5a      	adds	r2, r3, #1
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800125a:	3b01      	subs	r3, #1
 800125c:	b29a      	uxth	r2, r3
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001266:	b29b      	uxth	r3, r3
 8001268:	3b01      	subs	r3, #1
 800126a:	b29a      	uxth	r2, r3
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	695b      	ldr	r3, [r3, #20]
 8001276:	f003 0304 	and.w	r3, r3, #4
 800127a:	2b04      	cmp	r3, #4
 800127c:	d124      	bne.n	80012c8 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001282:	2b03      	cmp	r3, #3
 8001284:	d107      	bne.n	8001296 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001294:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	691a      	ldr	r2, [r3, #16]
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012a0:	b2d2      	uxtb	r2, r2
 80012a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012a8:	1c5a      	adds	r2, r3, #1
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012b2:	3b01      	subs	r3, #1
 80012b4:	b29a      	uxth	r2, r3
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80012be:	b29b      	uxth	r3, r3
 80012c0:	3b01      	subs	r3, #1
 80012c2:	b29a      	uxth	r2, r3
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	f47f ae88 	bne.w	8000fe2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	2220      	movs	r2, #32
 80012d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	2200      	movs	r2, #0
 80012de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2200      	movs	r2, #0
 80012e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80012ea:	2300      	movs	r3, #0
 80012ec:	e000      	b.n	80012f0 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80012ee:	2302      	movs	r3, #2
  }
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3728      	adds	r7, #40	@ 0x28
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	00010004 	.word	0x00010004
 80012fc:	20000000 	.word	0x20000000
 8001300:	14f8b589 	.word	0x14f8b589

08001304 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b088      	sub	sp, #32
 8001308:	af02      	add	r7, sp, #8
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	4608      	mov	r0, r1
 800130e:	4611      	mov	r1, r2
 8001310:	461a      	mov	r2, r3
 8001312:	4603      	mov	r3, r0
 8001314:	817b      	strh	r3, [r7, #10]
 8001316:	460b      	mov	r3, r1
 8001318:	813b      	strh	r3, [r7, #8]
 800131a:	4613      	mov	r3, r2
 800131c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800132c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800133c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800133e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001340:	9300      	str	r3, [sp, #0]
 8001342:	6a3b      	ldr	r3, [r7, #32]
 8001344:	2200      	movs	r2, #0
 8001346:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800134a:	68f8      	ldr	r0, [r7, #12]
 800134c:	f000 f8c2 	bl	80014d4 <I2C_WaitOnFlagUntilTimeout>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d00d      	beq.n	8001372 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001360:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001364:	d103      	bne.n	800136e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800136c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e0aa      	b.n	80014c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001372:	897b      	ldrh	r3, [r7, #10]
 8001374:	b2db      	uxtb	r3, r3
 8001376:	461a      	mov	r2, r3
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001380:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001384:	6a3a      	ldr	r2, [r7, #32]
 8001386:	4952      	ldr	r1, [pc, #328]	@ (80014d0 <I2C_RequestMemoryRead+0x1cc>)
 8001388:	68f8      	ldr	r0, [r7, #12]
 800138a:	f000 f91d 	bl	80015c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e097      	b.n	80014c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	695b      	ldr	r3, [r3, #20]
 80013a2:	617b      	str	r3, [r7, #20]
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	699b      	ldr	r3, [r3, #24]
 80013aa:	617b      	str	r3, [r7, #20]
 80013ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80013ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013b0:	6a39      	ldr	r1, [r7, #32]
 80013b2:	68f8      	ldr	r0, [r7, #12]
 80013b4:	f000 f9a8 	bl	8001708 <I2C_WaitOnTXEFlagUntilTimeout>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d00d      	beq.n	80013da <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c2:	2b04      	cmp	r3, #4
 80013c4:	d107      	bne.n	80013d6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80013d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e076      	b.n	80014c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80013da:	88fb      	ldrh	r3, [r7, #6]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d105      	bne.n	80013ec <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80013e0:	893b      	ldrh	r3, [r7, #8]
 80013e2:	b2da      	uxtb	r2, r3
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	611a      	str	r2, [r3, #16]
 80013ea:	e021      	b.n	8001430 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80013ec:	893b      	ldrh	r3, [r7, #8]
 80013ee:	0a1b      	lsrs	r3, r3, #8
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	b2da      	uxtb	r2, r3
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80013fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013fc:	6a39      	ldr	r1, [r7, #32]
 80013fe:	68f8      	ldr	r0, [r7, #12]
 8001400:	f000 f982 	bl	8001708 <I2C_WaitOnTXEFlagUntilTimeout>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d00d      	beq.n	8001426 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800140e:	2b04      	cmp	r3, #4
 8001410:	d107      	bne.n	8001422 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001420:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e050      	b.n	80014c8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001426:	893b      	ldrh	r3, [r7, #8]
 8001428:	b2da      	uxtb	r2, r3
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001430:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001432:	6a39      	ldr	r1, [r7, #32]
 8001434:	68f8      	ldr	r0, [r7, #12]
 8001436:	f000 f967 	bl	8001708 <I2C_WaitOnTXEFlagUntilTimeout>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d00d      	beq.n	800145c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001444:	2b04      	cmp	r3, #4
 8001446:	d107      	bne.n	8001458 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001456:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e035      	b.n	80014c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800146a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800146c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800146e:	9300      	str	r3, [sp, #0]
 8001470:	6a3b      	ldr	r3, [r7, #32]
 8001472:	2200      	movs	r2, #0
 8001474:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001478:	68f8      	ldr	r0, [r7, #12]
 800147a:	f000 f82b 	bl	80014d4 <I2C_WaitOnFlagUntilTimeout>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d00d      	beq.n	80014a0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800148e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001492:	d103      	bne.n	800149c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800149a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800149c:	2303      	movs	r3, #3
 800149e:	e013      	b.n	80014c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80014a0:	897b      	ldrh	r3, [r7, #10]
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	b2da      	uxtb	r2, r3
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80014b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b2:	6a3a      	ldr	r2, [r7, #32]
 80014b4:	4906      	ldr	r1, [pc, #24]	@ (80014d0 <I2C_RequestMemoryRead+0x1cc>)
 80014b6:	68f8      	ldr	r0, [r7, #12]
 80014b8:	f000 f886 	bl	80015c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e000      	b.n	80014c8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80014c6:	2300      	movs	r3, #0
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3718      	adds	r7, #24
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	00010002 	.word	0x00010002

080014d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	603b      	str	r3, [r7, #0]
 80014e0:	4613      	mov	r3, r2
 80014e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80014e4:	e048      	b.n	8001578 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014ec:	d044      	beq.n	8001578 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014ee:	f7ff f89d 	bl	800062c <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d302      	bcc.n	8001504 <I2C_WaitOnFlagUntilTimeout+0x30>
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d139      	bne.n	8001578 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	0c1b      	lsrs	r3, r3, #16
 8001508:	b2db      	uxtb	r3, r3
 800150a:	2b01      	cmp	r3, #1
 800150c:	d10d      	bne.n	800152a <I2C_WaitOnFlagUntilTimeout+0x56>
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	695b      	ldr	r3, [r3, #20]
 8001514:	43da      	mvns	r2, r3
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	4013      	ands	r3, r2
 800151a:	b29b      	uxth	r3, r3
 800151c:	2b00      	cmp	r3, #0
 800151e:	bf0c      	ite	eq
 8001520:	2301      	moveq	r3, #1
 8001522:	2300      	movne	r3, #0
 8001524:	b2db      	uxtb	r3, r3
 8001526:	461a      	mov	r2, r3
 8001528:	e00c      	b.n	8001544 <I2C_WaitOnFlagUntilTimeout+0x70>
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	43da      	mvns	r2, r3
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	4013      	ands	r3, r2
 8001536:	b29b      	uxth	r3, r3
 8001538:	2b00      	cmp	r3, #0
 800153a:	bf0c      	ite	eq
 800153c:	2301      	moveq	r3, #1
 800153e:	2300      	movne	r3, #0
 8001540:	b2db      	uxtb	r3, r3
 8001542:	461a      	mov	r2, r3
 8001544:	79fb      	ldrb	r3, [r7, #7]
 8001546:	429a      	cmp	r2, r3
 8001548:	d116      	bne.n	8001578 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	2200      	movs	r2, #0
 800154e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	2220      	movs	r2, #32
 8001554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	2200      	movs	r2, #0
 800155c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001564:	f043 0220 	orr.w	r2, r3, #32
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	2200      	movs	r2, #0
 8001570:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e023      	b.n	80015c0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	0c1b      	lsrs	r3, r3, #16
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2b01      	cmp	r3, #1
 8001580:	d10d      	bne.n	800159e <I2C_WaitOnFlagUntilTimeout+0xca>
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	695b      	ldr	r3, [r3, #20]
 8001588:	43da      	mvns	r2, r3
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	4013      	ands	r3, r2
 800158e:	b29b      	uxth	r3, r3
 8001590:	2b00      	cmp	r3, #0
 8001592:	bf0c      	ite	eq
 8001594:	2301      	moveq	r3, #1
 8001596:	2300      	movne	r3, #0
 8001598:	b2db      	uxtb	r3, r3
 800159a:	461a      	mov	r2, r3
 800159c:	e00c      	b.n	80015b8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	43da      	mvns	r2, r3
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	4013      	ands	r3, r2
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	bf0c      	ite	eq
 80015b0:	2301      	moveq	r3, #1
 80015b2:	2300      	movne	r3, #0
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	461a      	mov	r2, r3
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d093      	beq.n	80014e6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3710      	adds	r7, #16
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	607a      	str	r2, [r7, #4]
 80015d4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80015d6:	e071      	b.n	80016bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015e6:	d123      	bne.n	8001630 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80015f6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001600:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	2200      	movs	r2, #0
 8001606:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2220      	movs	r2, #32
 800160c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2200      	movs	r2, #0
 8001614:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161c:	f043 0204 	orr.w	r2, r3, #4
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2200      	movs	r2, #0
 8001628:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e067      	b.n	8001700 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001636:	d041      	beq.n	80016bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001638:	f7fe fff8 	bl	800062c <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	429a      	cmp	r2, r3
 8001646:	d302      	bcc.n	800164e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d136      	bne.n	80016bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	0c1b      	lsrs	r3, r3, #16
 8001652:	b2db      	uxtb	r3, r3
 8001654:	2b01      	cmp	r3, #1
 8001656:	d10c      	bne.n	8001672 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	43da      	mvns	r2, r3
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	4013      	ands	r3, r2
 8001664:	b29b      	uxth	r3, r3
 8001666:	2b00      	cmp	r3, #0
 8001668:	bf14      	ite	ne
 800166a:	2301      	movne	r3, #1
 800166c:	2300      	moveq	r3, #0
 800166e:	b2db      	uxtb	r3, r3
 8001670:	e00b      	b.n	800168a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	43da      	mvns	r2, r3
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	4013      	ands	r3, r2
 800167e:	b29b      	uxth	r3, r3
 8001680:	2b00      	cmp	r3, #0
 8001682:	bf14      	ite	ne
 8001684:	2301      	movne	r3, #1
 8001686:	2300      	moveq	r3, #0
 8001688:	b2db      	uxtb	r3, r3
 800168a:	2b00      	cmp	r3, #0
 800168c:	d016      	beq.n	80016bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	2200      	movs	r2, #0
 8001692:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2220      	movs	r2, #32
 8001698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2200      	movs	r2, #0
 80016a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a8:	f043 0220 	orr.w	r2, r3, #32
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2200      	movs	r2, #0
 80016b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e021      	b.n	8001700 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	0c1b      	lsrs	r3, r3, #16
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d10c      	bne.n	80016e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	695b      	ldr	r3, [r3, #20]
 80016cc:	43da      	mvns	r2, r3
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	4013      	ands	r3, r2
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	bf14      	ite	ne
 80016d8:	2301      	movne	r3, #1
 80016da:	2300      	moveq	r3, #0
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	e00b      	b.n	80016f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	699b      	ldr	r3, [r3, #24]
 80016e6:	43da      	mvns	r2, r3
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	4013      	ands	r3, r2
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	bf14      	ite	ne
 80016f2:	2301      	movne	r3, #1
 80016f4:	2300      	moveq	r3, #0
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	f47f af6d 	bne.w	80015d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80016fe:	2300      	movs	r3, #0
}
 8001700:	4618      	mov	r0, r3
 8001702:	3710      	adds	r7, #16
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001714:	e034      	b.n	8001780 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001716:	68f8      	ldr	r0, [r7, #12]
 8001718:	f000 f89b 	bl	8001852 <I2C_IsAcknowledgeFailed>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e034      	b.n	8001790 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800172c:	d028      	beq.n	8001780 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800172e:	f7fe ff7d 	bl	800062c <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	68ba      	ldr	r2, [r7, #8]
 800173a:	429a      	cmp	r2, r3
 800173c:	d302      	bcc.n	8001744 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d11d      	bne.n	8001780 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	695b      	ldr	r3, [r3, #20]
 800174a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800174e:	2b80      	cmp	r3, #128	@ 0x80
 8001750:	d016      	beq.n	8001780 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2200      	movs	r2, #0
 8001756:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2220      	movs	r2, #32
 800175c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2200      	movs	r2, #0
 8001764:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176c:	f043 0220 	orr.w	r2, r3, #32
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2200      	movs	r2, #0
 8001778:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e007      	b.n	8001790 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	695b      	ldr	r3, [r3, #20]
 8001786:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800178a:	2b80      	cmp	r3, #128	@ 0x80
 800178c:	d1c3      	bne.n	8001716 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800178e:	2300      	movs	r3, #0
}
 8001790:	4618      	mov	r0, r3
 8001792:	3710      	adds	r7, #16
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}

08001798 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80017a4:	e049      	b.n	800183a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	695b      	ldr	r3, [r3, #20]
 80017ac:	f003 0310 	and.w	r3, r3, #16
 80017b0:	2b10      	cmp	r3, #16
 80017b2:	d119      	bne.n	80017e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f06f 0210 	mvn.w	r2, #16
 80017bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2200      	movs	r2, #0
 80017c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2220      	movs	r2, #32
 80017c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2200      	movs	r2, #0
 80017d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2200      	movs	r2, #0
 80017e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e030      	b.n	800184a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017e8:	f7fe ff20 	bl	800062c <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	68ba      	ldr	r2, [r7, #8]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d302      	bcc.n	80017fe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d11d      	bne.n	800183a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	695b      	ldr	r3, [r3, #20]
 8001804:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001808:	2b40      	cmp	r3, #64	@ 0x40
 800180a:	d016      	beq.n	800183a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2200      	movs	r2, #0
 8001810:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	2220      	movs	r2, #32
 8001816:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2200      	movs	r2, #0
 800181e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001826:	f043 0220 	orr.w	r2, r3, #32
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2200      	movs	r2, #0
 8001832:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e007      	b.n	800184a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	695b      	ldr	r3, [r3, #20]
 8001840:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001844:	2b40      	cmp	r3, #64	@ 0x40
 8001846:	d1ae      	bne.n	80017a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3710      	adds	r7, #16
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001852:	b480      	push	{r7}
 8001854:	b083      	sub	sp, #12
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	695b      	ldr	r3, [r3, #20]
 8001860:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001864:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001868:	d11b      	bne.n	80018a2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001872:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2200      	movs	r2, #0
 8001878:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2220      	movs	r2, #32
 800187e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188e:	f043 0204 	orr.w	r2, r3, #4
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e000      	b.n	80018a4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80018a2:	2300      	movs	r3, #0
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bc80      	pop	{r7}
 80018ac:	4770      	bx	lr
	...

080018b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d101      	bne.n	80018c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e272      	b.n	8001da8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	f000 8087 	beq.w	80019de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018d0:	4b92      	ldr	r3, [pc, #584]	@ (8001b1c <HAL_RCC_OscConfig+0x26c>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f003 030c 	and.w	r3, r3, #12
 80018d8:	2b04      	cmp	r3, #4
 80018da:	d00c      	beq.n	80018f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018dc:	4b8f      	ldr	r3, [pc, #572]	@ (8001b1c <HAL_RCC_OscConfig+0x26c>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f003 030c 	and.w	r3, r3, #12
 80018e4:	2b08      	cmp	r3, #8
 80018e6:	d112      	bne.n	800190e <HAL_RCC_OscConfig+0x5e>
 80018e8:	4b8c      	ldr	r3, [pc, #560]	@ (8001b1c <HAL_RCC_OscConfig+0x26c>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018f4:	d10b      	bne.n	800190e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018f6:	4b89      	ldr	r3, [pc, #548]	@ (8001b1c <HAL_RCC_OscConfig+0x26c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d06c      	beq.n	80019dc <HAL_RCC_OscConfig+0x12c>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d168      	bne.n	80019dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e24c      	b.n	8001da8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001916:	d106      	bne.n	8001926 <HAL_RCC_OscConfig+0x76>
 8001918:	4b80      	ldr	r3, [pc, #512]	@ (8001b1c <HAL_RCC_OscConfig+0x26c>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a7f      	ldr	r2, [pc, #508]	@ (8001b1c <HAL_RCC_OscConfig+0x26c>)
 800191e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001922:	6013      	str	r3, [r2, #0]
 8001924:	e02e      	b.n	8001984 <HAL_RCC_OscConfig+0xd4>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d10c      	bne.n	8001948 <HAL_RCC_OscConfig+0x98>
 800192e:	4b7b      	ldr	r3, [pc, #492]	@ (8001b1c <HAL_RCC_OscConfig+0x26c>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a7a      	ldr	r2, [pc, #488]	@ (8001b1c <HAL_RCC_OscConfig+0x26c>)
 8001934:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001938:	6013      	str	r3, [r2, #0]
 800193a:	4b78      	ldr	r3, [pc, #480]	@ (8001b1c <HAL_RCC_OscConfig+0x26c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a77      	ldr	r2, [pc, #476]	@ (8001b1c <HAL_RCC_OscConfig+0x26c>)
 8001940:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001944:	6013      	str	r3, [r2, #0]
 8001946:	e01d      	b.n	8001984 <HAL_RCC_OscConfig+0xd4>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001950:	d10c      	bne.n	800196c <HAL_RCC_OscConfig+0xbc>
 8001952:	4b72      	ldr	r3, [pc, #456]	@ (8001b1c <HAL_RCC_OscConfig+0x26c>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a71      	ldr	r2, [pc, #452]	@ (8001b1c <HAL_RCC_OscConfig+0x26c>)
 8001958:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800195c:	6013      	str	r3, [r2, #0]
 800195e:	4b6f      	ldr	r3, [pc, #444]	@ (8001b1c <HAL_RCC_OscConfig+0x26c>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a6e      	ldr	r2, [pc, #440]	@ (8001b1c <HAL_RCC_OscConfig+0x26c>)
 8001964:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001968:	6013      	str	r3, [r2, #0]
 800196a:	e00b      	b.n	8001984 <HAL_RCC_OscConfig+0xd4>
 800196c:	4b6b      	ldr	r3, [pc, #428]	@ (8001b1c <HAL_RCC_OscConfig+0x26c>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a6a      	ldr	r2, [pc, #424]	@ (8001b1c <HAL_RCC_OscConfig+0x26c>)
 8001972:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001976:	6013      	str	r3, [r2, #0]
 8001978:	4b68      	ldr	r3, [pc, #416]	@ (8001b1c <HAL_RCC_OscConfig+0x26c>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a67      	ldr	r2, [pc, #412]	@ (8001b1c <HAL_RCC_OscConfig+0x26c>)
 800197e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001982:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d013      	beq.n	80019b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800198c:	f7fe fe4e 	bl	800062c <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001994:	f7fe fe4a 	bl	800062c <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b64      	cmp	r3, #100	@ 0x64
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e200      	b.n	8001da8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019a6:	4b5d      	ldr	r3, [pc, #372]	@ (8001b1c <HAL_RCC_OscConfig+0x26c>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d0f0      	beq.n	8001994 <HAL_RCC_OscConfig+0xe4>
 80019b2:	e014      	b.n	80019de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b4:	f7fe fe3a 	bl	800062c <HAL_GetTick>
 80019b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ba:	e008      	b.n	80019ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019bc:	f7fe fe36 	bl	800062c <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b64      	cmp	r3, #100	@ 0x64
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e1ec      	b.n	8001da8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ce:	4b53      	ldr	r3, [pc, #332]	@ (8001b1c <HAL_RCC_OscConfig+0x26c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1f0      	bne.n	80019bc <HAL_RCC_OscConfig+0x10c>
 80019da:	e000      	b.n	80019de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d063      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019ea:	4b4c      	ldr	r3, [pc, #304]	@ (8001b1c <HAL_RCC_OscConfig+0x26c>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f003 030c 	and.w	r3, r3, #12
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d00b      	beq.n	8001a0e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019f6:	4b49      	ldr	r3, [pc, #292]	@ (8001b1c <HAL_RCC_OscConfig+0x26c>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f003 030c 	and.w	r3, r3, #12
 80019fe:	2b08      	cmp	r3, #8
 8001a00:	d11c      	bne.n	8001a3c <HAL_RCC_OscConfig+0x18c>
 8001a02:	4b46      	ldr	r3, [pc, #280]	@ (8001b1c <HAL_RCC_OscConfig+0x26c>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d116      	bne.n	8001a3c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a0e:	4b43      	ldr	r3, [pc, #268]	@ (8001b1c <HAL_RCC_OscConfig+0x26c>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d005      	beq.n	8001a26 <HAL_RCC_OscConfig+0x176>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	691b      	ldr	r3, [r3, #16]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d001      	beq.n	8001a26 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e1c0      	b.n	8001da8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a26:	4b3d      	ldr	r3, [pc, #244]	@ (8001b1c <HAL_RCC_OscConfig+0x26c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	695b      	ldr	r3, [r3, #20]
 8001a32:	00db      	lsls	r3, r3, #3
 8001a34:	4939      	ldr	r1, [pc, #228]	@ (8001b1c <HAL_RCC_OscConfig+0x26c>)
 8001a36:	4313      	orrs	r3, r2
 8001a38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a3a:	e03a      	b.n	8001ab2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	691b      	ldr	r3, [r3, #16]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d020      	beq.n	8001a86 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a44:	4b36      	ldr	r3, [pc, #216]	@ (8001b20 <HAL_RCC_OscConfig+0x270>)
 8001a46:	2201      	movs	r2, #1
 8001a48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4a:	f7fe fdef 	bl	800062c <HAL_GetTick>
 8001a4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a50:	e008      	b.n	8001a64 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a52:	f7fe fdeb 	bl	800062c <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e1a1      	b.n	8001da8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a64:	4b2d      	ldr	r3, [pc, #180]	@ (8001b1c <HAL_RCC_OscConfig+0x26c>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0302 	and.w	r3, r3, #2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d0f0      	beq.n	8001a52 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a70:	4b2a      	ldr	r3, [pc, #168]	@ (8001b1c <HAL_RCC_OscConfig+0x26c>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	695b      	ldr	r3, [r3, #20]
 8001a7c:	00db      	lsls	r3, r3, #3
 8001a7e:	4927      	ldr	r1, [pc, #156]	@ (8001b1c <HAL_RCC_OscConfig+0x26c>)
 8001a80:	4313      	orrs	r3, r2
 8001a82:	600b      	str	r3, [r1, #0]
 8001a84:	e015      	b.n	8001ab2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a86:	4b26      	ldr	r3, [pc, #152]	@ (8001b20 <HAL_RCC_OscConfig+0x270>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8c:	f7fe fdce 	bl	800062c <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a94:	f7fe fdca 	bl	800062c <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e180      	b.n	8001da8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aa6:	4b1d      	ldr	r3, [pc, #116]	@ (8001b1c <HAL_RCC_OscConfig+0x26c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1f0      	bne.n	8001a94 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0308 	and.w	r3, r3, #8
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d03a      	beq.n	8001b34 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	699b      	ldr	r3, [r3, #24]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d019      	beq.n	8001afa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ac6:	4b17      	ldr	r3, [pc, #92]	@ (8001b24 <HAL_RCC_OscConfig+0x274>)
 8001ac8:	2201      	movs	r2, #1
 8001aca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001acc:	f7fe fdae 	bl	800062c <HAL_GetTick>
 8001ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ad2:	e008      	b.n	8001ae6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ad4:	f7fe fdaa 	bl	800062c <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e160      	b.n	8001da8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8001b1c <HAL_RCC_OscConfig+0x26c>)
 8001ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d0f0      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001af2:	2001      	movs	r0, #1
 8001af4:	f000 faba 	bl	800206c <RCC_Delay>
 8001af8:	e01c      	b.n	8001b34 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001afa:	4b0a      	ldr	r3, [pc, #40]	@ (8001b24 <HAL_RCC_OscConfig+0x274>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b00:	f7fe fd94 	bl	800062c <HAL_GetTick>
 8001b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b06:	e00f      	b.n	8001b28 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b08:	f7fe fd90 	bl	800062c <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d908      	bls.n	8001b28 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e146      	b.n	8001da8 <HAL_RCC_OscConfig+0x4f8>
 8001b1a:	bf00      	nop
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	42420000 	.word	0x42420000
 8001b24:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b28:	4b92      	ldr	r3, [pc, #584]	@ (8001d74 <HAL_RCC_OscConfig+0x4c4>)
 8001b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b2c:	f003 0302 	and.w	r3, r3, #2
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d1e9      	bne.n	8001b08 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0304 	and.w	r3, r3, #4
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f000 80a6 	beq.w	8001c8e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b42:	2300      	movs	r3, #0
 8001b44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b46:	4b8b      	ldr	r3, [pc, #556]	@ (8001d74 <HAL_RCC_OscConfig+0x4c4>)
 8001b48:	69db      	ldr	r3, [r3, #28]
 8001b4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d10d      	bne.n	8001b6e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b52:	4b88      	ldr	r3, [pc, #544]	@ (8001d74 <HAL_RCC_OscConfig+0x4c4>)
 8001b54:	69db      	ldr	r3, [r3, #28]
 8001b56:	4a87      	ldr	r2, [pc, #540]	@ (8001d74 <HAL_RCC_OscConfig+0x4c4>)
 8001b58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b5c:	61d3      	str	r3, [r2, #28]
 8001b5e:	4b85      	ldr	r3, [pc, #532]	@ (8001d74 <HAL_RCC_OscConfig+0x4c4>)
 8001b60:	69db      	ldr	r3, [r3, #28]
 8001b62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b66:	60bb      	str	r3, [r7, #8]
 8001b68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b6e:	4b82      	ldr	r3, [pc, #520]	@ (8001d78 <HAL_RCC_OscConfig+0x4c8>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d118      	bne.n	8001bac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b7a:	4b7f      	ldr	r3, [pc, #508]	@ (8001d78 <HAL_RCC_OscConfig+0x4c8>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a7e      	ldr	r2, [pc, #504]	@ (8001d78 <HAL_RCC_OscConfig+0x4c8>)
 8001b80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b86:	f7fe fd51 	bl	800062c <HAL_GetTick>
 8001b8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b8c:	e008      	b.n	8001ba0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b8e:	f7fe fd4d 	bl	800062c <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b64      	cmp	r3, #100	@ 0x64
 8001b9a:	d901      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e103      	b.n	8001da8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ba0:	4b75      	ldr	r3, [pc, #468]	@ (8001d78 <HAL_RCC_OscConfig+0x4c8>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d0f0      	beq.n	8001b8e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d106      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x312>
 8001bb4:	4b6f      	ldr	r3, [pc, #444]	@ (8001d74 <HAL_RCC_OscConfig+0x4c4>)
 8001bb6:	6a1b      	ldr	r3, [r3, #32]
 8001bb8:	4a6e      	ldr	r2, [pc, #440]	@ (8001d74 <HAL_RCC_OscConfig+0x4c4>)
 8001bba:	f043 0301 	orr.w	r3, r3, #1
 8001bbe:	6213      	str	r3, [r2, #32]
 8001bc0:	e02d      	b.n	8001c1e <HAL_RCC_OscConfig+0x36e>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d10c      	bne.n	8001be4 <HAL_RCC_OscConfig+0x334>
 8001bca:	4b6a      	ldr	r3, [pc, #424]	@ (8001d74 <HAL_RCC_OscConfig+0x4c4>)
 8001bcc:	6a1b      	ldr	r3, [r3, #32]
 8001bce:	4a69      	ldr	r2, [pc, #420]	@ (8001d74 <HAL_RCC_OscConfig+0x4c4>)
 8001bd0:	f023 0301 	bic.w	r3, r3, #1
 8001bd4:	6213      	str	r3, [r2, #32]
 8001bd6:	4b67      	ldr	r3, [pc, #412]	@ (8001d74 <HAL_RCC_OscConfig+0x4c4>)
 8001bd8:	6a1b      	ldr	r3, [r3, #32]
 8001bda:	4a66      	ldr	r2, [pc, #408]	@ (8001d74 <HAL_RCC_OscConfig+0x4c4>)
 8001bdc:	f023 0304 	bic.w	r3, r3, #4
 8001be0:	6213      	str	r3, [r2, #32]
 8001be2:	e01c      	b.n	8001c1e <HAL_RCC_OscConfig+0x36e>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	2b05      	cmp	r3, #5
 8001bea:	d10c      	bne.n	8001c06 <HAL_RCC_OscConfig+0x356>
 8001bec:	4b61      	ldr	r3, [pc, #388]	@ (8001d74 <HAL_RCC_OscConfig+0x4c4>)
 8001bee:	6a1b      	ldr	r3, [r3, #32]
 8001bf0:	4a60      	ldr	r2, [pc, #384]	@ (8001d74 <HAL_RCC_OscConfig+0x4c4>)
 8001bf2:	f043 0304 	orr.w	r3, r3, #4
 8001bf6:	6213      	str	r3, [r2, #32]
 8001bf8:	4b5e      	ldr	r3, [pc, #376]	@ (8001d74 <HAL_RCC_OscConfig+0x4c4>)
 8001bfa:	6a1b      	ldr	r3, [r3, #32]
 8001bfc:	4a5d      	ldr	r2, [pc, #372]	@ (8001d74 <HAL_RCC_OscConfig+0x4c4>)
 8001bfe:	f043 0301 	orr.w	r3, r3, #1
 8001c02:	6213      	str	r3, [r2, #32]
 8001c04:	e00b      	b.n	8001c1e <HAL_RCC_OscConfig+0x36e>
 8001c06:	4b5b      	ldr	r3, [pc, #364]	@ (8001d74 <HAL_RCC_OscConfig+0x4c4>)
 8001c08:	6a1b      	ldr	r3, [r3, #32]
 8001c0a:	4a5a      	ldr	r2, [pc, #360]	@ (8001d74 <HAL_RCC_OscConfig+0x4c4>)
 8001c0c:	f023 0301 	bic.w	r3, r3, #1
 8001c10:	6213      	str	r3, [r2, #32]
 8001c12:	4b58      	ldr	r3, [pc, #352]	@ (8001d74 <HAL_RCC_OscConfig+0x4c4>)
 8001c14:	6a1b      	ldr	r3, [r3, #32]
 8001c16:	4a57      	ldr	r2, [pc, #348]	@ (8001d74 <HAL_RCC_OscConfig+0x4c4>)
 8001c18:	f023 0304 	bic.w	r3, r3, #4
 8001c1c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d015      	beq.n	8001c52 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c26:	f7fe fd01 	bl	800062c <HAL_GetTick>
 8001c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c2c:	e00a      	b.n	8001c44 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c2e:	f7fe fcfd 	bl	800062c <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e0b1      	b.n	8001da8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c44:	4b4b      	ldr	r3, [pc, #300]	@ (8001d74 <HAL_RCC_OscConfig+0x4c4>)
 8001c46:	6a1b      	ldr	r3, [r3, #32]
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d0ee      	beq.n	8001c2e <HAL_RCC_OscConfig+0x37e>
 8001c50:	e014      	b.n	8001c7c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c52:	f7fe fceb 	bl	800062c <HAL_GetTick>
 8001c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c58:	e00a      	b.n	8001c70 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c5a:	f7fe fce7 	bl	800062c <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e09b      	b.n	8001da8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c70:	4b40      	ldr	r3, [pc, #256]	@ (8001d74 <HAL_RCC_OscConfig+0x4c4>)
 8001c72:	6a1b      	ldr	r3, [r3, #32]
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d1ee      	bne.n	8001c5a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c7c:	7dfb      	ldrb	r3, [r7, #23]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d105      	bne.n	8001c8e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c82:	4b3c      	ldr	r3, [pc, #240]	@ (8001d74 <HAL_RCC_OscConfig+0x4c4>)
 8001c84:	69db      	ldr	r3, [r3, #28]
 8001c86:	4a3b      	ldr	r2, [pc, #236]	@ (8001d74 <HAL_RCC_OscConfig+0x4c4>)
 8001c88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c8c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	69db      	ldr	r3, [r3, #28]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	f000 8087 	beq.w	8001da6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c98:	4b36      	ldr	r3, [pc, #216]	@ (8001d74 <HAL_RCC_OscConfig+0x4c4>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f003 030c 	and.w	r3, r3, #12
 8001ca0:	2b08      	cmp	r3, #8
 8001ca2:	d061      	beq.n	8001d68 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	69db      	ldr	r3, [r3, #28]
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d146      	bne.n	8001d3a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cac:	4b33      	ldr	r3, [pc, #204]	@ (8001d7c <HAL_RCC_OscConfig+0x4cc>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb2:	f7fe fcbb 	bl	800062c <HAL_GetTick>
 8001cb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cb8:	e008      	b.n	8001ccc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cba:	f7fe fcb7 	bl	800062c <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d901      	bls.n	8001ccc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e06d      	b.n	8001da8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ccc:	4b29      	ldr	r3, [pc, #164]	@ (8001d74 <HAL_RCC_OscConfig+0x4c4>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d1f0      	bne.n	8001cba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a1b      	ldr	r3, [r3, #32]
 8001cdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ce0:	d108      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ce2:	4b24      	ldr	r3, [pc, #144]	@ (8001d74 <HAL_RCC_OscConfig+0x4c4>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	4921      	ldr	r1, [pc, #132]	@ (8001d74 <HAL_RCC_OscConfig+0x4c4>)
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cf4:	4b1f      	ldr	r3, [pc, #124]	@ (8001d74 <HAL_RCC_OscConfig+0x4c4>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6a19      	ldr	r1, [r3, #32]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d04:	430b      	orrs	r3, r1
 8001d06:	491b      	ldr	r1, [pc, #108]	@ (8001d74 <HAL_RCC_OscConfig+0x4c4>)
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d0c:	4b1b      	ldr	r3, [pc, #108]	@ (8001d7c <HAL_RCC_OscConfig+0x4cc>)
 8001d0e:	2201      	movs	r2, #1
 8001d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d12:	f7fe fc8b 	bl	800062c <HAL_GetTick>
 8001d16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d18:	e008      	b.n	8001d2c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d1a:	f7fe fc87 	bl	800062c <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d901      	bls.n	8001d2c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e03d      	b.n	8001da8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d2c:	4b11      	ldr	r3, [pc, #68]	@ (8001d74 <HAL_RCC_OscConfig+0x4c4>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d0f0      	beq.n	8001d1a <HAL_RCC_OscConfig+0x46a>
 8001d38:	e035      	b.n	8001da6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d3a:	4b10      	ldr	r3, [pc, #64]	@ (8001d7c <HAL_RCC_OscConfig+0x4cc>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d40:	f7fe fc74 	bl	800062c <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d48:	f7fe fc70 	bl	800062c <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e026      	b.n	8001da8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d5a:	4b06      	ldr	r3, [pc, #24]	@ (8001d74 <HAL_RCC_OscConfig+0x4c4>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1f0      	bne.n	8001d48 <HAL_RCC_OscConfig+0x498>
 8001d66:	e01e      	b.n	8001da6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	69db      	ldr	r3, [r3, #28]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d107      	bne.n	8001d80 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e019      	b.n	8001da8 <HAL_RCC_OscConfig+0x4f8>
 8001d74:	40021000 	.word	0x40021000
 8001d78:	40007000 	.word	0x40007000
 8001d7c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d80:	4b0b      	ldr	r3, [pc, #44]	@ (8001db0 <HAL_RCC_OscConfig+0x500>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a1b      	ldr	r3, [r3, #32]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d106      	bne.n	8001da2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d001      	beq.n	8001da6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e000      	b.n	8001da8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001da6:	2300      	movs	r3, #0
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3718      	adds	r7, #24
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40021000 	.word	0x40021000

08001db4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d101      	bne.n	8001dc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e0d0      	b.n	8001f6a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001dc8:	4b6a      	ldr	r3, [pc, #424]	@ (8001f74 <HAL_RCC_ClockConfig+0x1c0>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0307 	and.w	r3, r3, #7
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d910      	bls.n	8001df8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dd6:	4b67      	ldr	r3, [pc, #412]	@ (8001f74 <HAL_RCC_ClockConfig+0x1c0>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f023 0207 	bic.w	r2, r3, #7
 8001dde:	4965      	ldr	r1, [pc, #404]	@ (8001f74 <HAL_RCC_ClockConfig+0x1c0>)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001de6:	4b63      	ldr	r3, [pc, #396]	@ (8001f74 <HAL_RCC_ClockConfig+0x1c0>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d001      	beq.n	8001df8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e0b8      	b.n	8001f6a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d020      	beq.n	8001e46 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0304 	and.w	r3, r3, #4
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d005      	beq.n	8001e1c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e10:	4b59      	ldr	r3, [pc, #356]	@ (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	4a58      	ldr	r2, [pc, #352]	@ (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001e16:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001e1a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0308 	and.w	r3, r3, #8
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d005      	beq.n	8001e34 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e28:	4b53      	ldr	r3, [pc, #332]	@ (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	4a52      	ldr	r2, [pc, #328]	@ (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001e2e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001e32:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e34:	4b50      	ldr	r3, [pc, #320]	@ (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	494d      	ldr	r1, [pc, #308]	@ (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001e42:	4313      	orrs	r3, r2
 8001e44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d040      	beq.n	8001ed4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d107      	bne.n	8001e6a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e5a:	4b47      	ldr	r3, [pc, #284]	@ (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d115      	bne.n	8001e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e07f      	b.n	8001f6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d107      	bne.n	8001e82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e72:	4b41      	ldr	r3, [pc, #260]	@ (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d109      	bne.n	8001e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e073      	b.n	8001f6a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e82:	4b3d      	ldr	r3, [pc, #244]	@ (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0302 	and.w	r3, r3, #2
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e06b      	b.n	8001f6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e92:	4b39      	ldr	r3, [pc, #228]	@ (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f023 0203 	bic.w	r2, r3, #3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	4936      	ldr	r1, [pc, #216]	@ (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ea4:	f7fe fbc2 	bl	800062c <HAL_GetTick>
 8001ea8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eaa:	e00a      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eac:	f7fe fbbe 	bl	800062c <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e053      	b.n	8001f6a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ec2:	4b2d      	ldr	r3, [pc, #180]	@ (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f003 020c 	and.w	r2, r3, #12
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d1eb      	bne.n	8001eac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ed4:	4b27      	ldr	r3, [pc, #156]	@ (8001f74 <HAL_RCC_ClockConfig+0x1c0>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0307 	and.w	r3, r3, #7
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d210      	bcs.n	8001f04 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ee2:	4b24      	ldr	r3, [pc, #144]	@ (8001f74 <HAL_RCC_ClockConfig+0x1c0>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f023 0207 	bic.w	r2, r3, #7
 8001eea:	4922      	ldr	r1, [pc, #136]	@ (8001f74 <HAL_RCC_ClockConfig+0x1c0>)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ef2:	4b20      	ldr	r3, [pc, #128]	@ (8001f74 <HAL_RCC_ClockConfig+0x1c0>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d001      	beq.n	8001f04 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e032      	b.n	8001f6a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0304 	and.w	r3, r3, #4
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d008      	beq.n	8001f22 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f10:	4b19      	ldr	r3, [pc, #100]	@ (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	4916      	ldr	r1, [pc, #88]	@ (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0308 	and.w	r3, r3, #8
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d009      	beq.n	8001f42 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f2e:	4b12      	ldr	r3, [pc, #72]	@ (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	490e      	ldr	r1, [pc, #56]	@ (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f42:	f000 f821 	bl	8001f88 <HAL_RCC_GetSysClockFreq>
 8001f46:	4602      	mov	r2, r0
 8001f48:	4b0b      	ldr	r3, [pc, #44]	@ (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	091b      	lsrs	r3, r3, #4
 8001f4e:	f003 030f 	and.w	r3, r3, #15
 8001f52:	490a      	ldr	r1, [pc, #40]	@ (8001f7c <HAL_RCC_ClockConfig+0x1c8>)
 8001f54:	5ccb      	ldrb	r3, [r1, r3]
 8001f56:	fa22 f303 	lsr.w	r3, r2, r3
 8001f5a:	4a09      	ldr	r2, [pc, #36]	@ (8001f80 <HAL_RCC_ClockConfig+0x1cc>)
 8001f5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f5e:	4b09      	ldr	r3, [pc, #36]	@ (8001f84 <HAL_RCC_ClockConfig+0x1d0>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7fe fb20 	bl	80005a8 <HAL_InitTick>

  return HAL_OK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	40022000 	.word	0x40022000
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	08002118 	.word	0x08002118
 8001f80:	20000000 	.word	0x20000000
 8001f84:	20000004 	.word	0x20000004

08001f88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b087      	sub	sp, #28
 8001f8c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60fb      	str	r3, [r7, #12]
 8001f92:	2300      	movs	r3, #0
 8001f94:	60bb      	str	r3, [r7, #8]
 8001f96:	2300      	movs	r3, #0
 8001f98:	617b      	str	r3, [r7, #20]
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001fa2:	4b1e      	ldr	r3, [pc, #120]	@ (800201c <HAL_RCC_GetSysClockFreq+0x94>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f003 030c 	and.w	r3, r3, #12
 8001fae:	2b04      	cmp	r3, #4
 8001fb0:	d002      	beq.n	8001fb8 <HAL_RCC_GetSysClockFreq+0x30>
 8001fb2:	2b08      	cmp	r3, #8
 8001fb4:	d003      	beq.n	8001fbe <HAL_RCC_GetSysClockFreq+0x36>
 8001fb6:	e027      	b.n	8002008 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fb8:	4b19      	ldr	r3, [pc, #100]	@ (8002020 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fba:	613b      	str	r3, [r7, #16]
      break;
 8001fbc:	e027      	b.n	800200e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	0c9b      	lsrs	r3, r3, #18
 8001fc2:	f003 030f 	and.w	r3, r3, #15
 8001fc6:	4a17      	ldr	r2, [pc, #92]	@ (8002024 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001fc8:	5cd3      	ldrb	r3, [r2, r3]
 8001fca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d010      	beq.n	8001ff8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001fd6:	4b11      	ldr	r3, [pc, #68]	@ (800201c <HAL_RCC_GetSysClockFreq+0x94>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	0c5b      	lsrs	r3, r3, #17
 8001fdc:	f003 0301 	and.w	r3, r3, #1
 8001fe0:	4a11      	ldr	r2, [pc, #68]	@ (8002028 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001fe2:	5cd3      	ldrb	r3, [r2, r3]
 8001fe4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a0d      	ldr	r2, [pc, #52]	@ (8002020 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fea:	fb03 f202 	mul.w	r2, r3, r2
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff4:	617b      	str	r3, [r7, #20]
 8001ff6:	e004      	b.n	8002002 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4a0c      	ldr	r2, [pc, #48]	@ (800202c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001ffc:	fb02 f303 	mul.w	r3, r2, r3
 8002000:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	613b      	str	r3, [r7, #16]
      break;
 8002006:	e002      	b.n	800200e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002008:	4b05      	ldr	r3, [pc, #20]	@ (8002020 <HAL_RCC_GetSysClockFreq+0x98>)
 800200a:	613b      	str	r3, [r7, #16]
      break;
 800200c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800200e:	693b      	ldr	r3, [r7, #16]
}
 8002010:	4618      	mov	r0, r3
 8002012:	371c      	adds	r7, #28
 8002014:	46bd      	mov	sp, r7
 8002016:	bc80      	pop	{r7}
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	40021000 	.word	0x40021000
 8002020:	007a1200 	.word	0x007a1200
 8002024:	08002130 	.word	0x08002130
 8002028:	08002140 	.word	0x08002140
 800202c:	003d0900 	.word	0x003d0900

08002030 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002034:	4b02      	ldr	r3, [pc, #8]	@ (8002040 <HAL_RCC_GetHCLKFreq+0x10>)
 8002036:	681b      	ldr	r3, [r3, #0]
}
 8002038:	4618      	mov	r0, r3
 800203a:	46bd      	mov	sp, r7
 800203c:	bc80      	pop	{r7}
 800203e:	4770      	bx	lr
 8002040:	20000000 	.word	0x20000000

08002044 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002048:	f7ff fff2 	bl	8002030 <HAL_RCC_GetHCLKFreq>
 800204c:	4602      	mov	r2, r0
 800204e:	4b05      	ldr	r3, [pc, #20]	@ (8002064 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	0a1b      	lsrs	r3, r3, #8
 8002054:	f003 0307 	and.w	r3, r3, #7
 8002058:	4903      	ldr	r1, [pc, #12]	@ (8002068 <HAL_RCC_GetPCLK1Freq+0x24>)
 800205a:	5ccb      	ldrb	r3, [r1, r3]
 800205c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002060:	4618      	mov	r0, r3
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40021000 	.word	0x40021000
 8002068:	08002128 	.word	0x08002128

0800206c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002074:	4b0a      	ldr	r3, [pc, #40]	@ (80020a0 <RCC_Delay+0x34>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a0a      	ldr	r2, [pc, #40]	@ (80020a4 <RCC_Delay+0x38>)
 800207a:	fba2 2303 	umull	r2, r3, r2, r3
 800207e:	0a5b      	lsrs	r3, r3, #9
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	fb02 f303 	mul.w	r3, r2, r3
 8002086:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002088:	bf00      	nop
  }
  while (Delay --);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	1e5a      	subs	r2, r3, #1
 800208e:	60fa      	str	r2, [r7, #12]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1f9      	bne.n	8002088 <RCC_Delay+0x1c>
}
 8002094:	bf00      	nop
 8002096:	bf00      	nop
 8002098:	3714      	adds	r7, #20
 800209a:	46bd      	mov	sp, r7
 800209c:	bc80      	pop	{r7}
 800209e:	4770      	bx	lr
 80020a0:	20000000 	.word	0x20000000
 80020a4:	10624dd3 	.word	0x10624dd3

080020a8 <memset>:
 80020a8:	4603      	mov	r3, r0
 80020aa:	4402      	add	r2, r0
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d100      	bne.n	80020b2 <memset+0xa>
 80020b0:	4770      	bx	lr
 80020b2:	f803 1b01 	strb.w	r1, [r3], #1
 80020b6:	e7f9      	b.n	80020ac <memset+0x4>

080020b8 <__libc_init_array>:
 80020b8:	b570      	push	{r4, r5, r6, lr}
 80020ba:	2600      	movs	r6, #0
 80020bc:	4d0c      	ldr	r5, [pc, #48]	@ (80020f0 <__libc_init_array+0x38>)
 80020be:	4c0d      	ldr	r4, [pc, #52]	@ (80020f4 <__libc_init_array+0x3c>)
 80020c0:	1b64      	subs	r4, r4, r5
 80020c2:	10a4      	asrs	r4, r4, #2
 80020c4:	42a6      	cmp	r6, r4
 80020c6:	d109      	bne.n	80020dc <__libc_init_array+0x24>
 80020c8:	f000 f81a 	bl	8002100 <_init>
 80020cc:	2600      	movs	r6, #0
 80020ce:	4d0a      	ldr	r5, [pc, #40]	@ (80020f8 <__libc_init_array+0x40>)
 80020d0:	4c0a      	ldr	r4, [pc, #40]	@ (80020fc <__libc_init_array+0x44>)
 80020d2:	1b64      	subs	r4, r4, r5
 80020d4:	10a4      	asrs	r4, r4, #2
 80020d6:	42a6      	cmp	r6, r4
 80020d8:	d105      	bne.n	80020e6 <__libc_init_array+0x2e>
 80020da:	bd70      	pop	{r4, r5, r6, pc}
 80020dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80020e0:	4798      	blx	r3
 80020e2:	3601      	adds	r6, #1
 80020e4:	e7ee      	b.n	80020c4 <__libc_init_array+0xc>
 80020e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80020ea:	4798      	blx	r3
 80020ec:	3601      	adds	r6, #1
 80020ee:	e7f2      	b.n	80020d6 <__libc_init_array+0x1e>
 80020f0:	08002144 	.word	0x08002144
 80020f4:	08002144 	.word	0x08002144
 80020f8:	08002144 	.word	0x08002144
 80020fc:	08002148 	.word	0x08002148

08002100 <_init>:
 8002100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002102:	bf00      	nop
 8002104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002106:	bc08      	pop	{r3}
 8002108:	469e      	mov	lr, r3
 800210a:	4770      	bx	lr

0800210c <_fini>:
 800210c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800210e:	bf00      	nop
 8002110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002112:	bc08      	pop	{r3}
 8002114:	469e      	mov	lr, r3
 8002116:	4770      	bx	lr
