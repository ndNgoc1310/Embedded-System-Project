
ES_Project_Digital-Clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002068  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002174  08002174  00003174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080021a0  080021a0  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080021a0  080021a0  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080021a0  080021a0  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080021a0  080021a0  000031a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080021a4  080021a4  000031a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080021a8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  2000000c  080021b4  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000088  080021b4  00004088  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005e50  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000012bb  00000000  00000000  00009e85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d8  00000000  00000000  0000b140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000541  00000000  00000000  0000b818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015e42  00000000  00000000  0000bd59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000890e  00000000  00000000  00021b9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e6c3  00000000  00000000  0002a4a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a8b6c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b5c  00000000  00000000  000a8bb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  000aa70c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800215c 	.word	0x0800215c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	0800215c 	.word	0x0800215c

0800014c <main>:
// Function to set the RTC alarm settings (Alarm 1)
void Set_Alarm (uint8_t mode, uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow_dom, bool dy_dt);

/* Main program --------------------------------------------------------------*/
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fa42 	bl	80005d8 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f87c 	bl	8000250 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8ee 	bl	8000338 <MX_GPIO_Init>
  MX_I2C1_Init();
 800015c:	f000 f8be 	bl	80002dc <MX_I2C1_Init>
 
  // Initialize RTC module (Run only once after reset the RTC module)
  //RTC_Init();

  /* Infinite loop */
  while (1)
 8000160:	bf00      	nop
 8000162:	e7fd      	b.n	8000160 <main+0x14>

08000164 <bcdToDec>:
  return (uint8_t)( (val/10*16) + (val%10) );
}

// Convert binary coded decimal to normal decimal numbers
int bcdToDec(uint8_t val)
{
 8000164:	b480      	push	{r7}
 8000166:	b083      	sub	sp, #12
 8000168:	af00      	add	r7, sp, #0
 800016a:	4603      	mov	r3, r0
 800016c:	71fb      	strb	r3, [r7, #7]
  return (int)( (val/16*10) + (val%16) );
 800016e:	79fb      	ldrb	r3, [r7, #7]
 8000170:	091b      	lsrs	r3, r3, #4
 8000172:	b2db      	uxtb	r3, r3
 8000174:	461a      	mov	r2, r3
 8000176:	4613      	mov	r3, r2
 8000178:	009b      	lsls	r3, r3, #2
 800017a:	4413      	add	r3, r2
 800017c:	005b      	lsls	r3, r3, #1
 800017e:	461a      	mov	r2, r3
 8000180:	79fb      	ldrb	r3, [r7, #7]
 8000182:	f003 030f 	and.w	r3, r3, #15
 8000186:	4413      	add	r3, r2
}
 8000188:	4618      	mov	r0, r3
 800018a:	370c      	adds	r7, #12
 800018c:	46bd      	mov	sp, r7
 800018e:	bc80      	pop	{r7}
 8000190:	4770      	bx	lr
	...

08000194 <Get_Time>:
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, 0x00, 1, set_time, 7, 1000);
}

// Function to get time from the RTC module through I2C interface
void Get_Time (void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	b086      	sub	sp, #24
 8000198:	af04      	add	r7, sp, #16
	// A blank array (7 slots) to contain the time values received from the RTC module
  uint8_t get_time[7];

  // Receive the time values from the RTC module through I2C interface, then store them into the blank array (size of value: 7 bytes)
	  // TypeDef: HAL_I2C_Mem_Read(*hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
  HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, 1, get_time, 7, 1000);
 800019a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800019e:	9302      	str	r3, [sp, #8]
 80001a0:	2307      	movs	r3, #7
 80001a2:	9301      	str	r3, [sp, #4]
 80001a4:	463b      	mov	r3, r7
 80001a6:	9300      	str	r3, [sp, #0]
 80001a8:	2301      	movs	r3, #1
 80001aa:	2200      	movs	r2, #0
 80001ac:	21d0      	movs	r1, #208	@ 0xd0
 80001ae:	481f      	ldr	r0, [pc, #124]	@ (800022c <Get_Time+0x98>)
 80001b0:	f000 fe62 	bl	8000e78 <HAL_I2C_Mem_Read>

  // Store the time values (converted from BCD code to decimal) into the time variable
	time.seconds 	  = bcdToDec(get_time[0]);
 80001b4:	783b      	ldrb	r3, [r7, #0]
 80001b6:	4618      	mov	r0, r3
 80001b8:	f7ff ffd4 	bl	8000164 <bcdToDec>
 80001bc:	4603      	mov	r3, r0
 80001be:	b2da      	uxtb	r2, r3
 80001c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000230 <Get_Time+0x9c>)
 80001c2:	701a      	strb	r2, [r3, #0]
	time.minutes 	  = bcdToDec(get_time[1]);
 80001c4:	787b      	ldrb	r3, [r7, #1]
 80001c6:	4618      	mov	r0, r3
 80001c8:	f7ff ffcc 	bl	8000164 <bcdToDec>
 80001cc:	4603      	mov	r3, r0
 80001ce:	b2da      	uxtb	r2, r3
 80001d0:	4b17      	ldr	r3, [pc, #92]	@ (8000230 <Get_Time+0x9c>)
 80001d2:	705a      	strb	r2, [r3, #1]
	time.hour 		  = bcdToDec(get_time[2]);
 80001d4:	78bb      	ldrb	r3, [r7, #2]
 80001d6:	4618      	mov	r0, r3
 80001d8:	f7ff ffc4 	bl	8000164 <bcdToDec>
 80001dc:	4603      	mov	r3, r0
 80001de:	b2da      	uxtb	r2, r3
 80001e0:	4b13      	ldr	r3, [pc, #76]	@ (8000230 <Get_Time+0x9c>)
 80001e2:	709a      	strb	r2, [r3, #2]
	time.dayofweek 	= bcdToDec(get_time[3]);
 80001e4:	78fb      	ldrb	r3, [r7, #3]
 80001e6:	4618      	mov	r0, r3
 80001e8:	f7ff ffbc 	bl	8000164 <bcdToDec>
 80001ec:	4603      	mov	r3, r0
 80001ee:	b2da      	uxtb	r2, r3
 80001f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000230 <Get_Time+0x9c>)
 80001f2:	70da      	strb	r2, [r3, #3]
	time.dayofmonth = bcdToDec(get_time[4]);
 80001f4:	793b      	ldrb	r3, [r7, #4]
 80001f6:	4618      	mov	r0, r3
 80001f8:	f7ff ffb4 	bl	8000164 <bcdToDec>
 80001fc:	4603      	mov	r3, r0
 80001fe:	b2da      	uxtb	r2, r3
 8000200:	4b0b      	ldr	r3, [pc, #44]	@ (8000230 <Get_Time+0x9c>)
 8000202:	711a      	strb	r2, [r3, #4]
	time.month 		  = bcdToDec(get_time[5]);
 8000204:	797b      	ldrb	r3, [r7, #5]
 8000206:	4618      	mov	r0, r3
 8000208:	f7ff ffac 	bl	8000164 <bcdToDec>
 800020c:	4603      	mov	r3, r0
 800020e:	b2da      	uxtb	r2, r3
 8000210:	4b07      	ldr	r3, [pc, #28]	@ (8000230 <Get_Time+0x9c>)
 8000212:	715a      	strb	r2, [r3, #5]
	time.year 		  = bcdToDec(get_time[6]);
 8000214:	79bb      	ldrb	r3, [r7, #6]
 8000216:	4618      	mov	r0, r3
 8000218:	f7ff ffa4 	bl	8000164 <bcdToDec>
 800021c:	4603      	mov	r3, r0
 800021e:	b2da      	uxtb	r2, r3
 8000220:	4b03      	ldr	r3, [pc, #12]	@ (8000230 <Get_Time+0x9c>)
 8000222:	719a      	strb	r2, [r3, #6]
}
 8000224:	bf00      	nop
 8000226:	3708      	adds	r7, #8
 8000228:	46bd      	mov	sp, r7
 800022a:	bd80      	pop	{r7, pc}
 800022c:	20000028 	.word	0x20000028
 8000230:	2000007c 	.word	0x2000007c

08000234 <HAL_GPIO_EXTI_Callback>:
uint8_t status_check;

// Interrupt Handler for PB4 (Interrupt occurs every second)
*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	4603      	mov	r3, r0
 800023c:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_4)
 800023e:	88fb      	ldrh	r3, [r7, #6]
 8000240:	2b10      	cmp	r3, #16
 8000242:	d101      	bne.n	8000248 <HAL_GPIO_EXTI_Callback+0x14>
  {
    // Get time from the RTC module through I2C interface
    Get_Time();
 8000244:	f7ff ffa6 	bl	8000194 <Get_Time>

      // Read values of Status register from RTC module
    HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x0F, 1, &status_check, 1, 1000);
    */
  }
}
 8000248:	bf00      	nop
 800024a:	3708      	adds	r7, #8
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}

08000250 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b090      	sub	sp, #64	@ 0x40
 8000254:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000256:	f107 0318 	add.w	r3, r7, #24
 800025a:	2228      	movs	r2, #40	@ 0x28
 800025c:	2100      	movs	r1, #0
 800025e:	4618      	mov	r0, r3
 8000260:	f001 ff50 	bl	8002104 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000264:	1d3b      	adds	r3, r7, #4
 8000266:	2200      	movs	r2, #0
 8000268:	601a      	str	r2, [r3, #0]
 800026a:	605a      	str	r2, [r3, #4]
 800026c:	609a      	str	r2, [r3, #8]
 800026e:	60da      	str	r2, [r3, #12]
 8000270:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000272:	2301      	movs	r3, #1
 8000274:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000276:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800027a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800027c:	2300      	movs	r3, #0
 800027e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000280:	2301      	movs	r3, #1
 8000282:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000284:	2302      	movs	r3, #2
 8000286:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000288:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800028c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800028e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000292:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000294:	f107 0318 	add.w	r3, r7, #24
 8000298:	4618      	mov	r0, r3
 800029a:	f001 fb37 	bl	800190c <HAL_RCC_OscConfig>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d001      	beq.n	80002a8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002a4:	f000 f894 	bl	80003d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a8:	230f      	movs	r3, #15
 80002aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ac:	2302      	movs	r3, #2
 80002ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b0:	2300      	movs	r3, #0
 80002b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ba:	2300      	movs	r3, #0
 80002bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	2102      	movs	r1, #2
 80002c2:	4618      	mov	r0, r3
 80002c4:	f001 fda4 	bl	8001e10 <HAL_RCC_ClockConfig>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d001      	beq.n	80002d2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002ce:	f000 f87f 	bl	80003d0 <Error_Handler>
  }
}
 80002d2:	bf00      	nop
 80002d4:	3740      	adds	r7, #64	@ 0x40
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
	...

080002dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002e0:	4b12      	ldr	r3, [pc, #72]	@ (800032c <MX_I2C1_Init+0x50>)
 80002e2:	4a13      	ldr	r2, [pc, #76]	@ (8000330 <MX_I2C1_Init+0x54>)
 80002e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80002e6:	4b11      	ldr	r3, [pc, #68]	@ (800032c <MX_I2C1_Init+0x50>)
 80002e8:	4a12      	ldr	r2, [pc, #72]	@ (8000334 <MX_I2C1_Init+0x58>)
 80002ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002ec:	4b0f      	ldr	r3, [pc, #60]	@ (800032c <MX_I2C1_Init+0x50>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80002f2:	4b0e      	ldr	r3, [pc, #56]	@ (800032c <MX_I2C1_Init+0x50>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002f8:	4b0c      	ldr	r3, [pc, #48]	@ (800032c <MX_I2C1_Init+0x50>)
 80002fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80002fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000300:	4b0a      	ldr	r3, [pc, #40]	@ (800032c <MX_I2C1_Init+0x50>)
 8000302:	2200      	movs	r2, #0
 8000304:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000306:	4b09      	ldr	r3, [pc, #36]	@ (800032c <MX_I2C1_Init+0x50>)
 8000308:	2200      	movs	r2, #0
 800030a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800030c:	4b07      	ldr	r3, [pc, #28]	@ (800032c <MX_I2C1_Init+0x50>)
 800030e:	2200      	movs	r2, #0
 8000310:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000312:	4b06      	ldr	r3, [pc, #24]	@ (800032c <MX_I2C1_Init+0x50>)
 8000314:	2200      	movs	r2, #0
 8000316:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000318:	4804      	ldr	r0, [pc, #16]	@ (800032c <MX_I2C1_Init+0x50>)
 800031a:	f000 fc69 	bl	8000bf0 <HAL_I2C_Init>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000324:	f000 f854 	bl	80003d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000328:	bf00      	nop
 800032a:	bd80      	pop	{r7, pc}
 800032c:	20000028 	.word	0x20000028
 8000330:	40005400 	.word	0x40005400
 8000334:	000186a0 	.word	0x000186a0

08000338 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b088      	sub	sp, #32
 800033c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800033e:	f107 0310 	add.w	r3, r7, #16
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
 8000346:	605a      	str	r2, [r3, #4]
 8000348:	609a      	str	r2, [r3, #8]
 800034a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800034c:	4b1d      	ldr	r3, [pc, #116]	@ (80003c4 <MX_GPIO_Init+0x8c>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	4a1c      	ldr	r2, [pc, #112]	@ (80003c4 <MX_GPIO_Init+0x8c>)
 8000352:	f043 0320 	orr.w	r3, r3, #32
 8000356:	6193      	str	r3, [r2, #24]
 8000358:	4b1a      	ldr	r3, [pc, #104]	@ (80003c4 <MX_GPIO_Init+0x8c>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	f003 0320 	and.w	r3, r3, #32
 8000360:	60fb      	str	r3, [r7, #12]
 8000362:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000364:	4b17      	ldr	r3, [pc, #92]	@ (80003c4 <MX_GPIO_Init+0x8c>)
 8000366:	699b      	ldr	r3, [r3, #24]
 8000368:	4a16      	ldr	r2, [pc, #88]	@ (80003c4 <MX_GPIO_Init+0x8c>)
 800036a:	f043 0308 	orr.w	r3, r3, #8
 800036e:	6193      	str	r3, [r2, #24]
 8000370:	4b14      	ldr	r3, [pc, #80]	@ (80003c4 <MX_GPIO_Init+0x8c>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	f003 0308 	and.w	r3, r3, #8
 8000378:	60bb      	str	r3, [r7, #8]
 800037a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800037c:	4b11      	ldr	r3, [pc, #68]	@ (80003c4 <MX_GPIO_Init+0x8c>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	4a10      	ldr	r2, [pc, #64]	@ (80003c4 <MX_GPIO_Init+0x8c>)
 8000382:	f043 0304 	orr.w	r3, r3, #4
 8000386:	6193      	str	r3, [r2, #24]
 8000388:	4b0e      	ldr	r3, [pc, #56]	@ (80003c4 <MX_GPIO_Init+0x8c>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	f003 0304 	and.w	r3, r3, #4
 8000390:	607b      	str	r3, [r7, #4]
 8000392:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000394:	2310      	movs	r3, #16
 8000396:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000398:	4b0b      	ldr	r3, [pc, #44]	@ (80003c8 <MX_GPIO_Init+0x90>)
 800039a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800039c:	2301      	movs	r3, #1
 800039e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003a0:	f107 0310 	add.w	r3, r7, #16
 80003a4:	4619      	mov	r1, r3
 80003a6:	4809      	ldr	r0, [pc, #36]	@ (80003cc <MX_GPIO_Init+0x94>)
 80003a8:	f000 fa86 	bl	80008b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80003ac:	2200      	movs	r2, #0
 80003ae:	2100      	movs	r1, #0
 80003b0:	200a      	movs	r0, #10
 80003b2:	f000 fa4a 	bl	800084a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80003b6:	200a      	movs	r0, #10
 80003b8:	f000 fa63 	bl	8000882 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80003bc:	bf00      	nop
 80003be:	3720      	adds	r7, #32
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	40021000 	.word	0x40021000
 80003c8:	10210000 	.word	0x10210000
 80003cc:	40010c00 	.word	0x40010c00

080003d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003d4:	b672      	cpsid	i
}
 80003d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003d8:	bf00      	nop
 80003da:	e7fd      	b.n	80003d8 <Error_Handler+0x8>

080003dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	b085      	sub	sp, #20
 80003e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003e2:	4b15      	ldr	r3, [pc, #84]	@ (8000438 <HAL_MspInit+0x5c>)
 80003e4:	699b      	ldr	r3, [r3, #24]
 80003e6:	4a14      	ldr	r2, [pc, #80]	@ (8000438 <HAL_MspInit+0x5c>)
 80003e8:	f043 0301 	orr.w	r3, r3, #1
 80003ec:	6193      	str	r3, [r2, #24]
 80003ee:	4b12      	ldr	r3, [pc, #72]	@ (8000438 <HAL_MspInit+0x5c>)
 80003f0:	699b      	ldr	r3, [r3, #24]
 80003f2:	f003 0301 	and.w	r3, r3, #1
 80003f6:	60bb      	str	r3, [r7, #8]
 80003f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000438 <HAL_MspInit+0x5c>)
 80003fc:	69db      	ldr	r3, [r3, #28]
 80003fe:	4a0e      	ldr	r2, [pc, #56]	@ (8000438 <HAL_MspInit+0x5c>)
 8000400:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000404:	61d3      	str	r3, [r2, #28]
 8000406:	4b0c      	ldr	r3, [pc, #48]	@ (8000438 <HAL_MspInit+0x5c>)
 8000408:	69db      	ldr	r3, [r3, #28]
 800040a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800040e:	607b      	str	r3, [r7, #4]
 8000410:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000412:	4b0a      	ldr	r3, [pc, #40]	@ (800043c <HAL_MspInit+0x60>)
 8000414:	685b      	ldr	r3, [r3, #4]
 8000416:	60fb      	str	r3, [r7, #12]
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800041e:	60fb      	str	r3, [r7, #12]
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000426:	60fb      	str	r3, [r7, #12]
 8000428:	4a04      	ldr	r2, [pc, #16]	@ (800043c <HAL_MspInit+0x60>)
 800042a:	68fb      	ldr	r3, [r7, #12]
 800042c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800042e:	bf00      	nop
 8000430:	3714      	adds	r7, #20
 8000432:	46bd      	mov	sp, r7
 8000434:	bc80      	pop	{r7}
 8000436:	4770      	bx	lr
 8000438:	40021000 	.word	0x40021000
 800043c:	40010000 	.word	0x40010000

08000440 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b08a      	sub	sp, #40	@ 0x28
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000448:	f107 0318 	add.w	r3, r7, #24
 800044c:	2200      	movs	r2, #0
 800044e:	601a      	str	r2, [r3, #0]
 8000450:	605a      	str	r2, [r3, #4]
 8000452:	609a      	str	r2, [r3, #8]
 8000454:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	4a2b      	ldr	r2, [pc, #172]	@ (8000508 <HAL_I2C_MspInit+0xc8>)
 800045c:	4293      	cmp	r3, r2
 800045e:	d124      	bne.n	80004aa <HAL_I2C_MspInit+0x6a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000460:	4b2a      	ldr	r3, [pc, #168]	@ (800050c <HAL_I2C_MspInit+0xcc>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	4a29      	ldr	r2, [pc, #164]	@ (800050c <HAL_I2C_MspInit+0xcc>)
 8000466:	f043 0308 	orr.w	r3, r3, #8
 800046a:	6193      	str	r3, [r2, #24]
 800046c:	4b27      	ldr	r3, [pc, #156]	@ (800050c <HAL_I2C_MspInit+0xcc>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	f003 0308 	and.w	r3, r3, #8
 8000474:	617b      	str	r3, [r7, #20]
 8000476:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000478:	23c0      	movs	r3, #192	@ 0xc0
 800047a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800047c:	2312      	movs	r3, #18
 800047e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000480:	2303      	movs	r3, #3
 8000482:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000484:	f107 0318 	add.w	r3, r7, #24
 8000488:	4619      	mov	r1, r3
 800048a:	4821      	ldr	r0, [pc, #132]	@ (8000510 <HAL_I2C_MspInit+0xd0>)
 800048c:	f000 fa14 	bl	80008b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000490:	4b1e      	ldr	r3, [pc, #120]	@ (800050c <HAL_I2C_MspInit+0xcc>)
 8000492:	69db      	ldr	r3, [r3, #28]
 8000494:	4a1d      	ldr	r2, [pc, #116]	@ (800050c <HAL_I2C_MspInit+0xcc>)
 8000496:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800049a:	61d3      	str	r3, [r2, #28]
 800049c:	4b1b      	ldr	r3, [pc, #108]	@ (800050c <HAL_I2C_MspInit+0xcc>)
 800049e:	69db      	ldr	r3, [r3, #28]
 80004a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80004a4:	613b      	str	r3, [r7, #16]
 80004a6:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 80004a8:	e029      	b.n	80004fe <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	4a19      	ldr	r2, [pc, #100]	@ (8000514 <HAL_I2C_MspInit+0xd4>)
 80004b0:	4293      	cmp	r3, r2
 80004b2:	d124      	bne.n	80004fe <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004b4:	4b15      	ldr	r3, [pc, #84]	@ (800050c <HAL_I2C_MspInit+0xcc>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	4a14      	ldr	r2, [pc, #80]	@ (800050c <HAL_I2C_MspInit+0xcc>)
 80004ba:	f043 0308 	orr.w	r3, r3, #8
 80004be:	6193      	str	r3, [r2, #24]
 80004c0:	4b12      	ldr	r3, [pc, #72]	@ (800050c <HAL_I2C_MspInit+0xcc>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	f003 0308 	and.w	r3, r3, #8
 80004c8:	60fb      	str	r3, [r7, #12]
 80004ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80004cc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80004d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004d2:	2312      	movs	r3, #18
 80004d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004d6:	2303      	movs	r3, #3
 80004d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004da:	f107 0318 	add.w	r3, r7, #24
 80004de:	4619      	mov	r1, r3
 80004e0:	480b      	ldr	r0, [pc, #44]	@ (8000510 <HAL_I2C_MspInit+0xd0>)
 80004e2:	f000 f9e9 	bl	80008b8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80004e6:	4b09      	ldr	r3, [pc, #36]	@ (800050c <HAL_I2C_MspInit+0xcc>)
 80004e8:	69db      	ldr	r3, [r3, #28]
 80004ea:	4a08      	ldr	r2, [pc, #32]	@ (800050c <HAL_I2C_MspInit+0xcc>)
 80004ec:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80004f0:	61d3      	str	r3, [r2, #28]
 80004f2:	4b06      	ldr	r3, [pc, #24]	@ (800050c <HAL_I2C_MspInit+0xcc>)
 80004f4:	69db      	ldr	r3, [r3, #28]
 80004f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80004fa:	60bb      	str	r3, [r7, #8]
 80004fc:	68bb      	ldr	r3, [r7, #8]
}
 80004fe:	bf00      	nop
 8000500:	3728      	adds	r7, #40	@ 0x28
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40005400 	.word	0x40005400
 800050c:	40021000 	.word	0x40021000
 8000510:	40010c00 	.word	0x40010c00
 8000514:	40005800 	.word	0x40005800

08000518 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800051c:	bf00      	nop
 800051e:	e7fd      	b.n	800051c <NMI_Handler+0x4>

08000520 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000524:	bf00      	nop
 8000526:	e7fd      	b.n	8000524 <HardFault_Handler+0x4>

08000528 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800052c:	bf00      	nop
 800052e:	e7fd      	b.n	800052c <MemManage_Handler+0x4>

08000530 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000534:	bf00      	nop
 8000536:	e7fd      	b.n	8000534 <BusFault_Handler+0x4>

08000538 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800053c:	bf00      	nop
 800053e:	e7fd      	b.n	800053c <UsageFault_Handler+0x4>

08000540 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000544:	bf00      	nop
 8000546:	46bd      	mov	sp, r7
 8000548:	bc80      	pop	{r7}
 800054a:	4770      	bx	lr

0800054c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000550:	bf00      	nop
 8000552:	46bd      	mov	sp, r7
 8000554:	bc80      	pop	{r7}
 8000556:	4770      	bx	lr

08000558 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800055c:	bf00      	nop
 800055e:	46bd      	mov	sp, r7
 8000560:	bc80      	pop	{r7}
 8000562:	4770      	bx	lr

08000564 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000568:	f000 f87c 	bl	8000664 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800056c:	bf00      	nop
 800056e:	bd80      	pop	{r7, pc}

08000570 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000574:	2010      	movs	r0, #16
 8000576:	f000 fb23 	bl	8000bc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800057a:	bf00      	nop
 800057c:	bd80      	pop	{r7, pc}

0800057e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800057e:	b480      	push	{r7}
 8000580:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000582:	bf00      	nop
 8000584:	46bd      	mov	sp, r7
 8000586:	bc80      	pop	{r7}
 8000588:	4770      	bx	lr
	...

0800058c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800058c:	f7ff fff7 	bl	800057e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000590:	480b      	ldr	r0, [pc, #44]	@ (80005c0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000592:	490c      	ldr	r1, [pc, #48]	@ (80005c4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000594:	4a0c      	ldr	r2, [pc, #48]	@ (80005c8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000596:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000598:	e002      	b.n	80005a0 <LoopCopyDataInit>

0800059a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800059a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800059c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800059e:	3304      	adds	r3, #4

080005a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005a4:	d3f9      	bcc.n	800059a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005a6:	4a09      	ldr	r2, [pc, #36]	@ (80005cc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80005a8:	4c09      	ldr	r4, [pc, #36]	@ (80005d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005ac:	e001      	b.n	80005b2 <LoopFillZerobss>

080005ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005b0:	3204      	adds	r2, #4

080005b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005b4:	d3fb      	bcc.n	80005ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005b6:	f001 fdad 	bl	8002114 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005ba:	f7ff fdc7 	bl	800014c <main>
  bx lr
 80005be:	4770      	bx	lr
  ldr r0, =_sdata
 80005c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005c4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005c8:	080021a8 	.word	0x080021a8
  ldr r2, =_sbss
 80005cc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005d0:	20000088 	.word	0x20000088

080005d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005d4:	e7fe      	b.n	80005d4 <ADC1_2_IRQHandler>
	...

080005d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005dc:	4b08      	ldr	r3, [pc, #32]	@ (8000600 <HAL_Init+0x28>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a07      	ldr	r2, [pc, #28]	@ (8000600 <HAL_Init+0x28>)
 80005e2:	f043 0310 	orr.w	r3, r3, #16
 80005e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005e8:	2003      	movs	r0, #3
 80005ea:	f000 f923 	bl	8000834 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ee:	200f      	movs	r0, #15
 80005f0:	f000 f808 	bl	8000604 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005f4:	f7ff fef2 	bl	80003dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005f8:	2300      	movs	r3, #0
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40022000 	.word	0x40022000

08000604 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800060c:	4b12      	ldr	r3, [pc, #72]	@ (8000658 <HAL_InitTick+0x54>)
 800060e:	681a      	ldr	r2, [r3, #0]
 8000610:	4b12      	ldr	r3, [pc, #72]	@ (800065c <HAL_InitTick+0x58>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	4619      	mov	r1, r3
 8000616:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800061a:	fbb3 f3f1 	udiv	r3, r3, r1
 800061e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000622:	4618      	mov	r0, r3
 8000624:	f000 f93b 	bl	800089e <HAL_SYSTICK_Config>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800062e:	2301      	movs	r3, #1
 8000630:	e00e      	b.n	8000650 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	2b0f      	cmp	r3, #15
 8000636:	d80a      	bhi.n	800064e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000638:	2200      	movs	r2, #0
 800063a:	6879      	ldr	r1, [r7, #4]
 800063c:	f04f 30ff 	mov.w	r0, #4294967295
 8000640:	f000 f903 	bl	800084a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000644:	4a06      	ldr	r2, [pc, #24]	@ (8000660 <HAL_InitTick+0x5c>)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800064a:	2300      	movs	r3, #0
 800064c:	e000      	b.n	8000650 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800064e:	2301      	movs	r3, #1
}
 8000650:	4618      	mov	r0, r3
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	20000000 	.word	0x20000000
 800065c:	20000008 	.word	0x20000008
 8000660:	20000004 	.word	0x20000004

08000664 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000668:	4b05      	ldr	r3, [pc, #20]	@ (8000680 <HAL_IncTick+0x1c>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	461a      	mov	r2, r3
 800066e:	4b05      	ldr	r3, [pc, #20]	@ (8000684 <HAL_IncTick+0x20>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4413      	add	r3, r2
 8000674:	4a03      	ldr	r2, [pc, #12]	@ (8000684 <HAL_IncTick+0x20>)
 8000676:	6013      	str	r3, [r2, #0]
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	bc80      	pop	{r7}
 800067e:	4770      	bx	lr
 8000680:	20000008 	.word	0x20000008
 8000684:	20000084 	.word	0x20000084

08000688 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  return uwTick;
 800068c:	4b02      	ldr	r3, [pc, #8]	@ (8000698 <HAL_GetTick+0x10>)
 800068e:	681b      	ldr	r3, [r3, #0]
}
 8000690:	4618      	mov	r0, r3
 8000692:	46bd      	mov	sp, r7
 8000694:	bc80      	pop	{r7}
 8000696:	4770      	bx	lr
 8000698:	20000084 	.word	0x20000084

0800069c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800069c:	b480      	push	{r7}
 800069e:	b085      	sub	sp, #20
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	f003 0307 	and.w	r3, r3, #7
 80006aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006ac:	4b0c      	ldr	r3, [pc, #48]	@ (80006e0 <__NVIC_SetPriorityGrouping+0x44>)
 80006ae:	68db      	ldr	r3, [r3, #12]
 80006b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006b2:	68ba      	ldr	r2, [r7, #8]
 80006b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80006b8:	4013      	ands	r3, r2
 80006ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80006c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006ce:	4a04      	ldr	r2, [pc, #16]	@ (80006e0 <__NVIC_SetPriorityGrouping+0x44>)
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	60d3      	str	r3, [r2, #12]
}
 80006d4:	bf00      	nop
 80006d6:	3714      	adds	r7, #20
 80006d8:	46bd      	mov	sp, r7
 80006da:	bc80      	pop	{r7}
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	e000ed00 	.word	0xe000ed00

080006e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006e8:	4b04      	ldr	r3, [pc, #16]	@ (80006fc <__NVIC_GetPriorityGrouping+0x18>)
 80006ea:	68db      	ldr	r3, [r3, #12]
 80006ec:	0a1b      	lsrs	r3, r3, #8
 80006ee:	f003 0307 	and.w	r3, r3, #7
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bc80      	pop	{r7}
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	e000ed00 	.word	0xe000ed00

08000700 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800070a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070e:	2b00      	cmp	r3, #0
 8000710:	db0b      	blt.n	800072a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	f003 021f 	and.w	r2, r3, #31
 8000718:	4906      	ldr	r1, [pc, #24]	@ (8000734 <__NVIC_EnableIRQ+0x34>)
 800071a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071e:	095b      	lsrs	r3, r3, #5
 8000720:	2001      	movs	r0, #1
 8000722:	fa00 f202 	lsl.w	r2, r0, r2
 8000726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800072a:	bf00      	nop
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr
 8000734:	e000e100 	.word	0xe000e100

08000738 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	6039      	str	r1, [r7, #0]
 8000742:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000748:	2b00      	cmp	r3, #0
 800074a:	db0a      	blt.n	8000762 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	b2da      	uxtb	r2, r3
 8000750:	490c      	ldr	r1, [pc, #48]	@ (8000784 <__NVIC_SetPriority+0x4c>)
 8000752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000756:	0112      	lsls	r2, r2, #4
 8000758:	b2d2      	uxtb	r2, r2
 800075a:	440b      	add	r3, r1
 800075c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000760:	e00a      	b.n	8000778 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	b2da      	uxtb	r2, r3
 8000766:	4908      	ldr	r1, [pc, #32]	@ (8000788 <__NVIC_SetPriority+0x50>)
 8000768:	79fb      	ldrb	r3, [r7, #7]
 800076a:	f003 030f 	and.w	r3, r3, #15
 800076e:	3b04      	subs	r3, #4
 8000770:	0112      	lsls	r2, r2, #4
 8000772:	b2d2      	uxtb	r2, r2
 8000774:	440b      	add	r3, r1
 8000776:	761a      	strb	r2, [r3, #24]
}
 8000778:	bf00      	nop
 800077a:	370c      	adds	r7, #12
 800077c:	46bd      	mov	sp, r7
 800077e:	bc80      	pop	{r7}
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	e000e100 	.word	0xe000e100
 8000788:	e000ed00 	.word	0xe000ed00

0800078c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800078c:	b480      	push	{r7}
 800078e:	b089      	sub	sp, #36	@ 0x24
 8000790:	af00      	add	r7, sp, #0
 8000792:	60f8      	str	r0, [r7, #12]
 8000794:	60b9      	str	r1, [r7, #8]
 8000796:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	f003 0307 	and.w	r3, r3, #7
 800079e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007a0:	69fb      	ldr	r3, [r7, #28]
 80007a2:	f1c3 0307 	rsb	r3, r3, #7
 80007a6:	2b04      	cmp	r3, #4
 80007a8:	bf28      	it	cs
 80007aa:	2304      	movcs	r3, #4
 80007ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ae:	69fb      	ldr	r3, [r7, #28]
 80007b0:	3304      	adds	r3, #4
 80007b2:	2b06      	cmp	r3, #6
 80007b4:	d902      	bls.n	80007bc <NVIC_EncodePriority+0x30>
 80007b6:	69fb      	ldr	r3, [r7, #28]
 80007b8:	3b03      	subs	r3, #3
 80007ba:	e000      	b.n	80007be <NVIC_EncodePriority+0x32>
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c0:	f04f 32ff 	mov.w	r2, #4294967295
 80007c4:	69bb      	ldr	r3, [r7, #24]
 80007c6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ca:	43da      	mvns	r2, r3
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	401a      	ands	r2, r3
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007d4:	f04f 31ff 	mov.w	r1, #4294967295
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	fa01 f303 	lsl.w	r3, r1, r3
 80007de:	43d9      	mvns	r1, r3
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e4:	4313      	orrs	r3, r2
         );
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3724      	adds	r7, #36	@ 0x24
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bc80      	pop	{r7}
 80007ee:	4770      	bx	lr

080007f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	3b01      	subs	r3, #1
 80007fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000800:	d301      	bcc.n	8000806 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000802:	2301      	movs	r3, #1
 8000804:	e00f      	b.n	8000826 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000806:	4a0a      	ldr	r2, [pc, #40]	@ (8000830 <SysTick_Config+0x40>)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	3b01      	subs	r3, #1
 800080c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800080e:	210f      	movs	r1, #15
 8000810:	f04f 30ff 	mov.w	r0, #4294967295
 8000814:	f7ff ff90 	bl	8000738 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000818:	4b05      	ldr	r3, [pc, #20]	@ (8000830 <SysTick_Config+0x40>)
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800081e:	4b04      	ldr	r3, [pc, #16]	@ (8000830 <SysTick_Config+0x40>)
 8000820:	2207      	movs	r2, #7
 8000822:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000824:	2300      	movs	r3, #0
}
 8000826:	4618      	mov	r0, r3
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	e000e010 	.word	0xe000e010

08000834 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800083c:	6878      	ldr	r0, [r7, #4]
 800083e:	f7ff ff2d 	bl	800069c <__NVIC_SetPriorityGrouping>
}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}

0800084a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800084a:	b580      	push	{r7, lr}
 800084c:	b086      	sub	sp, #24
 800084e:	af00      	add	r7, sp, #0
 8000850:	4603      	mov	r3, r0
 8000852:	60b9      	str	r1, [r7, #8]
 8000854:	607a      	str	r2, [r7, #4]
 8000856:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000858:	2300      	movs	r3, #0
 800085a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800085c:	f7ff ff42 	bl	80006e4 <__NVIC_GetPriorityGrouping>
 8000860:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000862:	687a      	ldr	r2, [r7, #4]
 8000864:	68b9      	ldr	r1, [r7, #8]
 8000866:	6978      	ldr	r0, [r7, #20]
 8000868:	f7ff ff90 	bl	800078c <NVIC_EncodePriority>
 800086c:	4602      	mov	r2, r0
 800086e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000872:	4611      	mov	r1, r2
 8000874:	4618      	mov	r0, r3
 8000876:	f7ff ff5f 	bl	8000738 <__NVIC_SetPriority>
}
 800087a:	bf00      	nop
 800087c:	3718      	adds	r7, #24
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}

08000882 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000882:	b580      	push	{r7, lr}
 8000884:	b082      	sub	sp, #8
 8000886:	af00      	add	r7, sp, #0
 8000888:	4603      	mov	r3, r0
 800088a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800088c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000890:	4618      	mov	r0, r3
 8000892:	f7ff ff35 	bl	8000700 <__NVIC_EnableIRQ>
}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}

0800089e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800089e:	b580      	push	{r7, lr}
 80008a0:	b082      	sub	sp, #8
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008a6:	6878      	ldr	r0, [r7, #4]
 80008a8:	f7ff ffa2 	bl	80007f0 <SysTick_Config>
 80008ac:	4603      	mov	r3, r0
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
	...

080008b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b08b      	sub	sp, #44	@ 0x2c
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
 80008c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008c2:	2300      	movs	r3, #0
 80008c4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80008c6:	2300      	movs	r3, #0
 80008c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008ca:	e169      	b.n	8000ba0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80008cc:	2201      	movs	r2, #1
 80008ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008d0:	fa02 f303 	lsl.w	r3, r2, r3
 80008d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	69fa      	ldr	r2, [r7, #28]
 80008dc:	4013      	ands	r3, r2
 80008de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80008e0:	69ba      	ldr	r2, [r7, #24]
 80008e2:	69fb      	ldr	r3, [r7, #28]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	f040 8158 	bne.w	8000b9a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	4a9a      	ldr	r2, [pc, #616]	@ (8000b58 <HAL_GPIO_Init+0x2a0>)
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d05e      	beq.n	80009b2 <HAL_GPIO_Init+0xfa>
 80008f4:	4a98      	ldr	r2, [pc, #608]	@ (8000b58 <HAL_GPIO_Init+0x2a0>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d875      	bhi.n	80009e6 <HAL_GPIO_Init+0x12e>
 80008fa:	4a98      	ldr	r2, [pc, #608]	@ (8000b5c <HAL_GPIO_Init+0x2a4>)
 80008fc:	4293      	cmp	r3, r2
 80008fe:	d058      	beq.n	80009b2 <HAL_GPIO_Init+0xfa>
 8000900:	4a96      	ldr	r2, [pc, #600]	@ (8000b5c <HAL_GPIO_Init+0x2a4>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d86f      	bhi.n	80009e6 <HAL_GPIO_Init+0x12e>
 8000906:	4a96      	ldr	r2, [pc, #600]	@ (8000b60 <HAL_GPIO_Init+0x2a8>)
 8000908:	4293      	cmp	r3, r2
 800090a:	d052      	beq.n	80009b2 <HAL_GPIO_Init+0xfa>
 800090c:	4a94      	ldr	r2, [pc, #592]	@ (8000b60 <HAL_GPIO_Init+0x2a8>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d869      	bhi.n	80009e6 <HAL_GPIO_Init+0x12e>
 8000912:	4a94      	ldr	r2, [pc, #592]	@ (8000b64 <HAL_GPIO_Init+0x2ac>)
 8000914:	4293      	cmp	r3, r2
 8000916:	d04c      	beq.n	80009b2 <HAL_GPIO_Init+0xfa>
 8000918:	4a92      	ldr	r2, [pc, #584]	@ (8000b64 <HAL_GPIO_Init+0x2ac>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d863      	bhi.n	80009e6 <HAL_GPIO_Init+0x12e>
 800091e:	4a92      	ldr	r2, [pc, #584]	@ (8000b68 <HAL_GPIO_Init+0x2b0>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d046      	beq.n	80009b2 <HAL_GPIO_Init+0xfa>
 8000924:	4a90      	ldr	r2, [pc, #576]	@ (8000b68 <HAL_GPIO_Init+0x2b0>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d85d      	bhi.n	80009e6 <HAL_GPIO_Init+0x12e>
 800092a:	2b12      	cmp	r3, #18
 800092c:	d82a      	bhi.n	8000984 <HAL_GPIO_Init+0xcc>
 800092e:	2b12      	cmp	r3, #18
 8000930:	d859      	bhi.n	80009e6 <HAL_GPIO_Init+0x12e>
 8000932:	a201      	add	r2, pc, #4	@ (adr r2, 8000938 <HAL_GPIO_Init+0x80>)
 8000934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000938:	080009b3 	.word	0x080009b3
 800093c:	0800098d 	.word	0x0800098d
 8000940:	0800099f 	.word	0x0800099f
 8000944:	080009e1 	.word	0x080009e1
 8000948:	080009e7 	.word	0x080009e7
 800094c:	080009e7 	.word	0x080009e7
 8000950:	080009e7 	.word	0x080009e7
 8000954:	080009e7 	.word	0x080009e7
 8000958:	080009e7 	.word	0x080009e7
 800095c:	080009e7 	.word	0x080009e7
 8000960:	080009e7 	.word	0x080009e7
 8000964:	080009e7 	.word	0x080009e7
 8000968:	080009e7 	.word	0x080009e7
 800096c:	080009e7 	.word	0x080009e7
 8000970:	080009e7 	.word	0x080009e7
 8000974:	080009e7 	.word	0x080009e7
 8000978:	080009e7 	.word	0x080009e7
 800097c:	08000995 	.word	0x08000995
 8000980:	080009a9 	.word	0x080009a9
 8000984:	4a79      	ldr	r2, [pc, #484]	@ (8000b6c <HAL_GPIO_Init+0x2b4>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d013      	beq.n	80009b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800098a:	e02c      	b.n	80009e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	68db      	ldr	r3, [r3, #12]
 8000990:	623b      	str	r3, [r7, #32]
          break;
 8000992:	e029      	b.n	80009e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	68db      	ldr	r3, [r3, #12]
 8000998:	3304      	adds	r3, #4
 800099a:	623b      	str	r3, [r7, #32]
          break;
 800099c:	e024      	b.n	80009e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	68db      	ldr	r3, [r3, #12]
 80009a2:	3308      	adds	r3, #8
 80009a4:	623b      	str	r3, [r7, #32]
          break;
 80009a6:	e01f      	b.n	80009e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	68db      	ldr	r3, [r3, #12]
 80009ac:	330c      	adds	r3, #12
 80009ae:	623b      	str	r3, [r7, #32]
          break;
 80009b0:	e01a      	b.n	80009e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	689b      	ldr	r3, [r3, #8]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d102      	bne.n	80009c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80009ba:	2304      	movs	r3, #4
 80009bc:	623b      	str	r3, [r7, #32]
          break;
 80009be:	e013      	b.n	80009e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	689b      	ldr	r3, [r3, #8]
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d105      	bne.n	80009d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009c8:	2308      	movs	r3, #8
 80009ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	69fa      	ldr	r2, [r7, #28]
 80009d0:	611a      	str	r2, [r3, #16]
          break;
 80009d2:	e009      	b.n	80009e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009d4:	2308      	movs	r3, #8
 80009d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	69fa      	ldr	r2, [r7, #28]
 80009dc:	615a      	str	r2, [r3, #20]
          break;
 80009de:	e003      	b.n	80009e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80009e0:	2300      	movs	r3, #0
 80009e2:	623b      	str	r3, [r7, #32]
          break;
 80009e4:	e000      	b.n	80009e8 <HAL_GPIO_Init+0x130>
          break;
 80009e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009e8:	69bb      	ldr	r3, [r7, #24]
 80009ea:	2bff      	cmp	r3, #255	@ 0xff
 80009ec:	d801      	bhi.n	80009f2 <HAL_GPIO_Init+0x13a>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	e001      	b.n	80009f6 <HAL_GPIO_Init+0x13e>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	3304      	adds	r3, #4
 80009f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80009f8:	69bb      	ldr	r3, [r7, #24]
 80009fa:	2bff      	cmp	r3, #255	@ 0xff
 80009fc:	d802      	bhi.n	8000a04 <HAL_GPIO_Init+0x14c>
 80009fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	e002      	b.n	8000a0a <HAL_GPIO_Init+0x152>
 8000a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a06:	3b08      	subs	r3, #8
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	210f      	movs	r1, #15
 8000a12:	693b      	ldr	r3, [r7, #16]
 8000a14:	fa01 f303 	lsl.w	r3, r1, r3
 8000a18:	43db      	mvns	r3, r3
 8000a1a:	401a      	ands	r2, r3
 8000a1c:	6a39      	ldr	r1, [r7, #32]
 8000a1e:	693b      	ldr	r3, [r7, #16]
 8000a20:	fa01 f303 	lsl.w	r3, r1, r3
 8000a24:	431a      	orrs	r2, r3
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	f000 80b1 	beq.w	8000b9a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a38:	4b4d      	ldr	r3, [pc, #308]	@ (8000b70 <HAL_GPIO_Init+0x2b8>)
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	4a4c      	ldr	r2, [pc, #304]	@ (8000b70 <HAL_GPIO_Init+0x2b8>)
 8000a3e:	f043 0301 	orr.w	r3, r3, #1
 8000a42:	6193      	str	r3, [r2, #24]
 8000a44:	4b4a      	ldr	r3, [pc, #296]	@ (8000b70 <HAL_GPIO_Init+0x2b8>)
 8000a46:	699b      	ldr	r3, [r3, #24]
 8000a48:	f003 0301 	and.w	r3, r3, #1
 8000a4c:	60bb      	str	r3, [r7, #8]
 8000a4e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a50:	4a48      	ldr	r2, [pc, #288]	@ (8000b74 <HAL_GPIO_Init+0x2bc>)
 8000a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a54:	089b      	lsrs	r3, r3, #2
 8000a56:	3302      	adds	r3, #2
 8000a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a5c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a60:	f003 0303 	and.w	r3, r3, #3
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	220f      	movs	r2, #15
 8000a68:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6c:	43db      	mvns	r3, r3
 8000a6e:	68fa      	ldr	r2, [r7, #12]
 8000a70:	4013      	ands	r3, r2
 8000a72:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	4a40      	ldr	r2, [pc, #256]	@ (8000b78 <HAL_GPIO_Init+0x2c0>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d013      	beq.n	8000aa4 <HAL_GPIO_Init+0x1ec>
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4a3f      	ldr	r2, [pc, #252]	@ (8000b7c <HAL_GPIO_Init+0x2c4>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d00d      	beq.n	8000aa0 <HAL_GPIO_Init+0x1e8>
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a3e      	ldr	r2, [pc, #248]	@ (8000b80 <HAL_GPIO_Init+0x2c8>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d007      	beq.n	8000a9c <HAL_GPIO_Init+0x1e4>
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	4a3d      	ldr	r2, [pc, #244]	@ (8000b84 <HAL_GPIO_Init+0x2cc>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d101      	bne.n	8000a98 <HAL_GPIO_Init+0x1e0>
 8000a94:	2303      	movs	r3, #3
 8000a96:	e006      	b.n	8000aa6 <HAL_GPIO_Init+0x1ee>
 8000a98:	2304      	movs	r3, #4
 8000a9a:	e004      	b.n	8000aa6 <HAL_GPIO_Init+0x1ee>
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	e002      	b.n	8000aa6 <HAL_GPIO_Init+0x1ee>
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	e000      	b.n	8000aa6 <HAL_GPIO_Init+0x1ee>
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000aa8:	f002 0203 	and.w	r2, r2, #3
 8000aac:	0092      	lsls	r2, r2, #2
 8000aae:	4093      	lsls	r3, r2
 8000ab0:	68fa      	ldr	r2, [r7, #12]
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ab6:	492f      	ldr	r1, [pc, #188]	@ (8000b74 <HAL_GPIO_Init+0x2bc>)
 8000ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aba:	089b      	lsrs	r3, r3, #2
 8000abc:	3302      	adds	r3, #2
 8000abe:	68fa      	ldr	r2, [r7, #12]
 8000ac0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d006      	beq.n	8000ade <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ad0:	4b2d      	ldr	r3, [pc, #180]	@ (8000b88 <HAL_GPIO_Init+0x2d0>)
 8000ad2:	689a      	ldr	r2, [r3, #8]
 8000ad4:	492c      	ldr	r1, [pc, #176]	@ (8000b88 <HAL_GPIO_Init+0x2d0>)
 8000ad6:	69bb      	ldr	r3, [r7, #24]
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	608b      	str	r3, [r1, #8]
 8000adc:	e006      	b.n	8000aec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ade:	4b2a      	ldr	r3, [pc, #168]	@ (8000b88 <HAL_GPIO_Init+0x2d0>)
 8000ae0:	689a      	ldr	r2, [r3, #8]
 8000ae2:	69bb      	ldr	r3, [r7, #24]
 8000ae4:	43db      	mvns	r3, r3
 8000ae6:	4928      	ldr	r1, [pc, #160]	@ (8000b88 <HAL_GPIO_Init+0x2d0>)
 8000ae8:	4013      	ands	r3, r2
 8000aea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d006      	beq.n	8000b06 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000af8:	4b23      	ldr	r3, [pc, #140]	@ (8000b88 <HAL_GPIO_Init+0x2d0>)
 8000afa:	68da      	ldr	r2, [r3, #12]
 8000afc:	4922      	ldr	r1, [pc, #136]	@ (8000b88 <HAL_GPIO_Init+0x2d0>)
 8000afe:	69bb      	ldr	r3, [r7, #24]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	60cb      	str	r3, [r1, #12]
 8000b04:	e006      	b.n	8000b14 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b06:	4b20      	ldr	r3, [pc, #128]	@ (8000b88 <HAL_GPIO_Init+0x2d0>)
 8000b08:	68da      	ldr	r2, [r3, #12]
 8000b0a:	69bb      	ldr	r3, [r7, #24]
 8000b0c:	43db      	mvns	r3, r3
 8000b0e:	491e      	ldr	r1, [pc, #120]	@ (8000b88 <HAL_GPIO_Init+0x2d0>)
 8000b10:	4013      	ands	r3, r2
 8000b12:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d006      	beq.n	8000b2e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b20:	4b19      	ldr	r3, [pc, #100]	@ (8000b88 <HAL_GPIO_Init+0x2d0>)
 8000b22:	685a      	ldr	r2, [r3, #4]
 8000b24:	4918      	ldr	r1, [pc, #96]	@ (8000b88 <HAL_GPIO_Init+0x2d0>)
 8000b26:	69bb      	ldr	r3, [r7, #24]
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	604b      	str	r3, [r1, #4]
 8000b2c:	e006      	b.n	8000b3c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b2e:	4b16      	ldr	r3, [pc, #88]	@ (8000b88 <HAL_GPIO_Init+0x2d0>)
 8000b30:	685a      	ldr	r2, [r3, #4]
 8000b32:	69bb      	ldr	r3, [r7, #24]
 8000b34:	43db      	mvns	r3, r3
 8000b36:	4914      	ldr	r1, [pc, #80]	@ (8000b88 <HAL_GPIO_Init+0x2d0>)
 8000b38:	4013      	ands	r3, r2
 8000b3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d021      	beq.n	8000b8c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b48:	4b0f      	ldr	r3, [pc, #60]	@ (8000b88 <HAL_GPIO_Init+0x2d0>)
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	490e      	ldr	r1, [pc, #56]	@ (8000b88 <HAL_GPIO_Init+0x2d0>)
 8000b4e:	69bb      	ldr	r3, [r7, #24]
 8000b50:	4313      	orrs	r3, r2
 8000b52:	600b      	str	r3, [r1, #0]
 8000b54:	e021      	b.n	8000b9a <HAL_GPIO_Init+0x2e2>
 8000b56:	bf00      	nop
 8000b58:	10320000 	.word	0x10320000
 8000b5c:	10310000 	.word	0x10310000
 8000b60:	10220000 	.word	0x10220000
 8000b64:	10210000 	.word	0x10210000
 8000b68:	10120000 	.word	0x10120000
 8000b6c:	10110000 	.word	0x10110000
 8000b70:	40021000 	.word	0x40021000
 8000b74:	40010000 	.word	0x40010000
 8000b78:	40010800 	.word	0x40010800
 8000b7c:	40010c00 	.word	0x40010c00
 8000b80:	40011000 	.word	0x40011000
 8000b84:	40011400 	.word	0x40011400
 8000b88:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bbc <HAL_GPIO_Init+0x304>)
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	69bb      	ldr	r3, [r7, #24]
 8000b92:	43db      	mvns	r3, r3
 8000b94:	4909      	ldr	r1, [pc, #36]	@ (8000bbc <HAL_GPIO_Init+0x304>)
 8000b96:	4013      	ands	r3, r2
 8000b98:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	f47f ae8e 	bne.w	80008cc <HAL_GPIO_Init+0x14>
  }
}
 8000bb0:	bf00      	nop
 8000bb2:	bf00      	nop
 8000bb4:	372c      	adds	r7, #44	@ 0x2c
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr
 8000bbc:	40010400 	.word	0x40010400

08000bc0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000bca:	4b08      	ldr	r3, [pc, #32]	@ (8000bec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000bcc:	695a      	ldr	r2, [r3, #20]
 8000bce:	88fb      	ldrh	r3, [r7, #6]
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d006      	beq.n	8000be4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000bd6:	4a05      	ldr	r2, [pc, #20]	@ (8000bec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000bd8:	88fb      	ldrh	r3, [r7, #6]
 8000bda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000bdc:	88fb      	ldrh	r3, [r7, #6]
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff fb28 	bl	8000234 <HAL_GPIO_EXTI_Callback>
  }
}
 8000be4:	bf00      	nop
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40010400 	.word	0x40010400

08000bf0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d101      	bne.n	8000c02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e12b      	b.n	8000e5a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d106      	bne.n	8000c1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2200      	movs	r2, #0
 8000c12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000c16:	6878      	ldr	r0, [r7, #4]
 8000c18:	f7ff fc12 	bl	8000440 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2224      	movs	r2, #36	@ 0x24
 8000c20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f022 0201 	bic.w	r2, r2, #1
 8000c32:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000c42:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000c52:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000c54:	f001 fa24 	bl	80020a0 <HAL_RCC_GetPCLK1Freq>
 8000c58:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	4a81      	ldr	r2, [pc, #516]	@ (8000e64 <HAL_I2C_Init+0x274>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d807      	bhi.n	8000c74 <HAL_I2C_Init+0x84>
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	4a80      	ldr	r2, [pc, #512]	@ (8000e68 <HAL_I2C_Init+0x278>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	bf94      	ite	ls
 8000c6c:	2301      	movls	r3, #1
 8000c6e:	2300      	movhi	r3, #0
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	e006      	b.n	8000c82 <HAL_I2C_Init+0x92>
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	4a7d      	ldr	r2, [pc, #500]	@ (8000e6c <HAL_I2C_Init+0x27c>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	bf94      	ite	ls
 8000c7c:	2301      	movls	r3, #1
 8000c7e:	2300      	movhi	r3, #0
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
 8000c88:	e0e7      	b.n	8000e5a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	4a78      	ldr	r2, [pc, #480]	@ (8000e70 <HAL_I2C_Init+0x280>)
 8000c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c92:	0c9b      	lsrs	r3, r3, #18
 8000c94:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	68ba      	ldr	r2, [r7, #8]
 8000ca6:	430a      	orrs	r2, r1
 8000ca8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	6a1b      	ldr	r3, [r3, #32]
 8000cb0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	4a6a      	ldr	r2, [pc, #424]	@ (8000e64 <HAL_I2C_Init+0x274>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d802      	bhi.n	8000cc4 <HAL_I2C_Init+0xd4>
 8000cbe:	68bb      	ldr	r3, [r7, #8]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	e009      	b.n	8000cd8 <HAL_I2C_Init+0xe8>
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000cca:	fb02 f303 	mul.w	r3, r2, r3
 8000cce:	4a69      	ldr	r2, [pc, #420]	@ (8000e74 <HAL_I2C_Init+0x284>)
 8000cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8000cd4:	099b      	lsrs	r3, r3, #6
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	687a      	ldr	r2, [r7, #4]
 8000cda:	6812      	ldr	r2, [r2, #0]
 8000cdc:	430b      	orrs	r3, r1
 8000cde:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	69db      	ldr	r3, [r3, #28]
 8000ce6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8000cea:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	495c      	ldr	r1, [pc, #368]	@ (8000e64 <HAL_I2C_Init+0x274>)
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	d819      	bhi.n	8000d2c <HAL_I2C_Init+0x13c>
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	1e59      	subs	r1, r3, #1
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	005b      	lsls	r3, r3, #1
 8000d02:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d06:	1c59      	adds	r1, r3, #1
 8000d08:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8000d0c:	400b      	ands	r3, r1
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d00a      	beq.n	8000d28 <HAL_I2C_Init+0x138>
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	1e59      	subs	r1, r3, #1
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d20:	3301      	adds	r3, #1
 8000d22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d26:	e051      	b.n	8000dcc <HAL_I2C_Init+0x1dc>
 8000d28:	2304      	movs	r3, #4
 8000d2a:	e04f      	b.n	8000dcc <HAL_I2C_Init+0x1dc>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	689b      	ldr	r3, [r3, #8]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d111      	bne.n	8000d58 <HAL_I2C_Init+0x168>
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	1e58      	subs	r0, r3, #1
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6859      	ldr	r1, [r3, #4]
 8000d3c:	460b      	mov	r3, r1
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	440b      	add	r3, r1
 8000d42:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d46:	3301      	adds	r3, #1
 8000d48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	bf0c      	ite	eq
 8000d50:	2301      	moveq	r3, #1
 8000d52:	2300      	movne	r3, #0
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	e012      	b.n	8000d7e <HAL_I2C_Init+0x18e>
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	1e58      	subs	r0, r3, #1
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6859      	ldr	r1, [r3, #4]
 8000d60:	460b      	mov	r3, r1
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	440b      	add	r3, r1
 8000d66:	0099      	lsls	r1, r3, #2
 8000d68:	440b      	add	r3, r1
 8000d6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d6e:	3301      	adds	r3, #1
 8000d70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	bf0c      	ite	eq
 8000d78:	2301      	moveq	r3, #1
 8000d7a:	2300      	movne	r3, #0
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <HAL_I2C_Init+0x196>
 8000d82:	2301      	movs	r3, #1
 8000d84:	e022      	b.n	8000dcc <HAL_I2C_Init+0x1dc>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	689b      	ldr	r3, [r3, #8]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d10e      	bne.n	8000dac <HAL_I2C_Init+0x1bc>
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	1e58      	subs	r0, r3, #1
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6859      	ldr	r1, [r3, #4]
 8000d96:	460b      	mov	r3, r1
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	440b      	add	r3, r1
 8000d9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8000da0:	3301      	adds	r3, #1
 8000da2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000da6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000daa:	e00f      	b.n	8000dcc <HAL_I2C_Init+0x1dc>
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	1e58      	subs	r0, r3, #1
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6859      	ldr	r1, [r3, #4]
 8000db4:	460b      	mov	r3, r1
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	440b      	add	r3, r1
 8000dba:	0099      	lsls	r1, r3, #2
 8000dbc:	440b      	add	r3, r1
 8000dbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000dc8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000dcc:	6879      	ldr	r1, [r7, #4]
 8000dce:	6809      	ldr	r1, [r1, #0]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	69da      	ldr	r2, [r3, #28]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6a1b      	ldr	r3, [r3, #32]
 8000de6:	431a      	orrs	r2, r3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	430a      	orrs	r2, r1
 8000dee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8000dfa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	6911      	ldr	r1, [r2, #16]
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	68d2      	ldr	r2, [r2, #12]
 8000e06:	4311      	orrs	r1, r2
 8000e08:	687a      	ldr	r2, [r7, #4]
 8000e0a:	6812      	ldr	r2, [r2, #0]
 8000e0c:	430b      	orrs	r3, r1
 8000e0e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	68db      	ldr	r3, [r3, #12]
 8000e16:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	695a      	ldr	r2, [r3, #20]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	699b      	ldr	r3, [r3, #24]
 8000e22:	431a      	orrs	r2, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	430a      	orrs	r2, r1
 8000e2a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f042 0201 	orr.w	r2, r2, #1
 8000e3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2200      	movs	r2, #0
 8000e40:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2220      	movs	r2, #32
 8000e46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2200      	movs	r2, #0
 8000e54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	000186a0 	.word	0x000186a0
 8000e68:	001e847f 	.word	0x001e847f
 8000e6c:	003d08ff 	.word	0x003d08ff
 8000e70:	431bde83 	.word	0x431bde83
 8000e74:	10624dd3 	.word	0x10624dd3

08000e78 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08c      	sub	sp, #48	@ 0x30
 8000e7c:	af02      	add	r7, sp, #8
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	4608      	mov	r0, r1
 8000e82:	4611      	mov	r1, r2
 8000e84:	461a      	mov	r2, r3
 8000e86:	4603      	mov	r3, r0
 8000e88:	817b      	strh	r3, [r7, #10]
 8000e8a:	460b      	mov	r3, r1
 8000e8c:	813b      	strh	r3, [r7, #8]
 8000e8e:	4613      	mov	r3, r2
 8000e90:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8000e92:	2300      	movs	r3, #0
 8000e94:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000e96:	f7ff fbf7 	bl	8000688 <HAL_GetTick>
 8000e9a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	2b20      	cmp	r3, #32
 8000ea6:	f040 8250 	bne.w	800134a <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eac:	9300      	str	r3, [sp, #0]
 8000eae:	2319      	movs	r3, #25
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	4982      	ldr	r1, [pc, #520]	@ (80010bc <HAL_I2C_Mem_Read+0x244>)
 8000eb4:	68f8      	ldr	r0, [r7, #12]
 8000eb6:	f000 fb3b 	bl	8001530 <I2C_WaitOnFlagUntilTimeout>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	e243      	b.n	800134c <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d101      	bne.n	8000ed2 <HAL_I2C_Mem_Read+0x5a>
 8000ece:	2302      	movs	r3, #2
 8000ed0:	e23c      	b.n	800134c <HAL_I2C_Mem_Read+0x4d4>
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f003 0301 	and.w	r3, r3, #1
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d007      	beq.n	8000ef8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f042 0201 	orr.w	r2, r2, #1
 8000ef6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000f06:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	2222      	movs	r2, #34	@ 0x22
 8000f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	2240      	movs	r2, #64	@ 0x40
 8000f14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000f22:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8000f28:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000f2e:	b29a      	uxth	r2, r3
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	4a62      	ldr	r2, [pc, #392]	@ (80010c0 <HAL_I2C_Mem_Read+0x248>)
 8000f38:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000f3a:	88f8      	ldrh	r0, [r7, #6]
 8000f3c:	893a      	ldrh	r2, [r7, #8]
 8000f3e:	8979      	ldrh	r1, [r7, #10]
 8000f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f42:	9301      	str	r3, [sp, #4]
 8000f44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000f46:	9300      	str	r3, [sp, #0]
 8000f48:	4603      	mov	r3, r0
 8000f4a:	68f8      	ldr	r0, [r7, #12]
 8000f4c:	f000 fa08 	bl	8001360 <I2C_RequestMemoryRead>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e1f8      	b.n	800134c <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d113      	bne.n	8000f8a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000f62:	2300      	movs	r3, #0
 8000f64:	61fb      	str	r3, [r7, #28]
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	695b      	ldr	r3, [r3, #20]
 8000f6c:	61fb      	str	r3, [r7, #28]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	699b      	ldr	r3, [r3, #24]
 8000f74:	61fb      	str	r3, [r7, #28]
 8000f76:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	e1cc      	b.n	8001324 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d11e      	bne.n	8000fd0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000fa0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa2:	b672      	cpsid	i
}
 8000fa4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61bb      	str	r3, [r7, #24]
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	695b      	ldr	r3, [r3, #20]
 8000fb0:	61bb      	str	r3, [r7, #24]
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	61bb      	str	r3, [r7, #24]
 8000fba:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000fca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000fcc:	b662      	cpsie	i
}
 8000fce:	e035      	b.n	800103c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	d11e      	bne.n	8001016 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000fe6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe8:	b672      	cpsid	i
}
 8000fea:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	695b      	ldr	r3, [r3, #20]
 8000ff6:	617b      	str	r3, [r7, #20]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	699b      	ldr	r3, [r3, #24]
 8000ffe:	617b      	str	r3, [r7, #20]
 8001000:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001010:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001012:	b662      	cpsie	i
}
 8001014:	e012      	b.n	800103c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001024:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001026:	2300      	movs	r3, #0
 8001028:	613b      	str	r3, [r7, #16]
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	695b      	ldr	r3, [r3, #20]
 8001030:	613b      	str	r3, [r7, #16]
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	699b      	ldr	r3, [r3, #24]
 8001038:	613b      	str	r3, [r7, #16]
 800103a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800103c:	e172      	b.n	8001324 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001042:	2b03      	cmp	r3, #3
 8001044:	f200 811f 	bhi.w	8001286 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800104c:	2b01      	cmp	r3, #1
 800104e:	d123      	bne.n	8001098 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001050:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001052:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001054:	68f8      	ldr	r0, [r7, #12]
 8001056:	f000 fbcd 	bl	80017f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001060:	2301      	movs	r3, #1
 8001062:	e173      	b.n	800134c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	691a      	ldr	r2, [r3, #16]
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800106e:	b2d2      	uxtb	r2, r2
 8001070:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001076:	1c5a      	adds	r2, r3, #1
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001080:	3b01      	subs	r3, #1
 8001082:	b29a      	uxth	r2, r3
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800108c:	b29b      	uxth	r3, r3
 800108e:	3b01      	subs	r3, #1
 8001090:	b29a      	uxth	r2, r3
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001096:	e145      	b.n	8001324 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800109c:	2b02      	cmp	r3, #2
 800109e:	d152      	bne.n	8001146 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80010a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80010a6:	2200      	movs	r2, #0
 80010a8:	4906      	ldr	r1, [pc, #24]	@ (80010c4 <HAL_I2C_Mem_Read+0x24c>)
 80010aa:	68f8      	ldr	r0, [r7, #12]
 80010ac:	f000 fa40 	bl	8001530 <I2C_WaitOnFlagUntilTimeout>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d008      	beq.n	80010c8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e148      	b.n	800134c <HAL_I2C_Mem_Read+0x4d4>
 80010ba:	bf00      	nop
 80010bc:	00100002 	.word	0x00100002
 80010c0:	ffff0000 	.word	0xffff0000
 80010c4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80010c8:	b672      	cpsid	i
}
 80010ca:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80010da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	691a      	ldr	r2, [r3, #16]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010e6:	b2d2      	uxtb	r2, r2
 80010e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010ee:	1c5a      	adds	r2, r3, #1
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80010f8:	3b01      	subs	r3, #1
 80010fa:	b29a      	uxth	r2, r3
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001104:	b29b      	uxth	r3, r3
 8001106:	3b01      	subs	r3, #1
 8001108:	b29a      	uxth	r2, r3
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800110e:	b662      	cpsie	i
}
 8001110:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	691a      	ldr	r2, [r3, #16]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800111c:	b2d2      	uxtb	r2, r2
 800111e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001124:	1c5a      	adds	r2, r3, #1
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800112e:	3b01      	subs	r3, #1
 8001130:	b29a      	uxth	r2, r3
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800113a:	b29b      	uxth	r3, r3
 800113c:	3b01      	subs	r3, #1
 800113e:	b29a      	uxth	r2, r3
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001144:	e0ee      	b.n	8001324 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001148:	9300      	str	r3, [sp, #0]
 800114a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800114c:	2200      	movs	r2, #0
 800114e:	4981      	ldr	r1, [pc, #516]	@ (8001354 <HAL_I2C_Mem_Read+0x4dc>)
 8001150:	68f8      	ldr	r0, [r7, #12]
 8001152:	f000 f9ed 	bl	8001530 <I2C_WaitOnFlagUntilTimeout>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800115c:	2301      	movs	r3, #1
 800115e:	e0f5      	b.n	800134c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800116e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001170:	b672      	cpsid	i
}
 8001172:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	691a      	ldr	r2, [r3, #16]
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800117e:	b2d2      	uxtb	r2, r2
 8001180:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001186:	1c5a      	adds	r2, r3, #1
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001190:	3b01      	subs	r3, #1
 8001192:	b29a      	uxth	r2, r3
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800119c:	b29b      	uxth	r3, r3
 800119e:	3b01      	subs	r3, #1
 80011a0:	b29a      	uxth	r2, r3
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80011a6:	4b6c      	ldr	r3, [pc, #432]	@ (8001358 <HAL_I2C_Mem_Read+0x4e0>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	08db      	lsrs	r3, r3, #3
 80011ac:	4a6b      	ldr	r2, [pc, #428]	@ (800135c <HAL_I2C_Mem_Read+0x4e4>)
 80011ae:	fba2 2303 	umull	r2, r3, r2, r3
 80011b2:	0a1a      	lsrs	r2, r3, #8
 80011b4:	4613      	mov	r3, r2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	4413      	add	r3, r2
 80011ba:	00da      	lsls	r2, r3, #3
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80011c0:	6a3b      	ldr	r3, [r7, #32]
 80011c2:	3b01      	subs	r3, #1
 80011c4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80011c6:	6a3b      	ldr	r3, [r7, #32]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d118      	bne.n	80011fe <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	2200      	movs	r2, #0
 80011d0:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	2220      	movs	r2, #32
 80011d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	2200      	movs	r2, #0
 80011de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e6:	f043 0220 	orr.w	r2, r3, #32
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80011ee:	b662      	cpsie	i
}
 80011f0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	2200      	movs	r2, #0
 80011f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e0a6      	b.n	800134c <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	695b      	ldr	r3, [r3, #20]
 8001204:	f003 0304 	and.w	r3, r3, #4
 8001208:	2b04      	cmp	r3, #4
 800120a:	d1d9      	bne.n	80011c0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800121a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	691a      	ldr	r2, [r3, #16]
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001226:	b2d2      	uxtb	r2, r2
 8001228:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800122e:	1c5a      	adds	r2, r3, #1
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001238:	3b01      	subs	r3, #1
 800123a:	b29a      	uxth	r2, r3
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001244:	b29b      	uxth	r3, r3
 8001246:	3b01      	subs	r3, #1
 8001248:	b29a      	uxth	r2, r3
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800124e:	b662      	cpsie	i
}
 8001250:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	691a      	ldr	r2, [r3, #16]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800125c:	b2d2      	uxtb	r2, r2
 800125e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001264:	1c5a      	adds	r2, r3, #1
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800126e:	3b01      	subs	r3, #1
 8001270:	b29a      	uxth	r2, r3
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800127a:	b29b      	uxth	r3, r3
 800127c:	3b01      	subs	r3, #1
 800127e:	b29a      	uxth	r2, r3
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001284:	e04e      	b.n	8001324 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001286:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001288:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800128a:	68f8      	ldr	r0, [r7, #12]
 800128c:	f000 fab2 	bl	80017f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e058      	b.n	800134c <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	691a      	ldr	r2, [r3, #16]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012a4:	b2d2      	uxtb	r2, r2
 80012a6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ac:	1c5a      	adds	r2, r3, #1
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012b6:	3b01      	subs	r3, #1
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	3b01      	subs	r3, #1
 80012c6:	b29a      	uxth	r2, r3
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	695b      	ldr	r3, [r3, #20]
 80012d2:	f003 0304 	and.w	r3, r3, #4
 80012d6:	2b04      	cmp	r3, #4
 80012d8:	d124      	bne.n	8001324 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012de:	2b03      	cmp	r3, #3
 80012e0:	d107      	bne.n	80012f2 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80012f0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	691a      	ldr	r2, [r3, #16]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012fc:	b2d2      	uxtb	r2, r2
 80012fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001304:	1c5a      	adds	r2, r3, #1
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800130e:	3b01      	subs	r3, #1
 8001310:	b29a      	uxth	r2, r3
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800131a:	b29b      	uxth	r3, r3
 800131c:	3b01      	subs	r3, #1
 800131e:	b29a      	uxth	r2, r3
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001328:	2b00      	cmp	r3, #0
 800132a:	f47f ae88 	bne.w	800103e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	2220      	movs	r2, #32
 8001332:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	2200      	movs	r2, #0
 800133a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	2200      	movs	r2, #0
 8001342:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001346:	2300      	movs	r3, #0
 8001348:	e000      	b.n	800134c <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 800134a:	2302      	movs	r3, #2
  }
}
 800134c:	4618      	mov	r0, r3
 800134e:	3728      	adds	r7, #40	@ 0x28
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	00010004 	.word	0x00010004
 8001358:	20000000 	.word	0x20000000
 800135c:	14f8b589 	.word	0x14f8b589

08001360 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b088      	sub	sp, #32
 8001364:	af02      	add	r7, sp, #8
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	4608      	mov	r0, r1
 800136a:	4611      	mov	r1, r2
 800136c:	461a      	mov	r2, r3
 800136e:	4603      	mov	r3, r0
 8001370:	817b      	strh	r3, [r7, #10]
 8001372:	460b      	mov	r3, r1
 8001374:	813b      	strh	r3, [r7, #8]
 8001376:	4613      	mov	r3, r2
 8001378:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001388:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001398:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800139a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800139c:	9300      	str	r3, [sp, #0]
 800139e:	6a3b      	ldr	r3, [r7, #32]
 80013a0:	2200      	movs	r2, #0
 80013a2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80013a6:	68f8      	ldr	r0, [r7, #12]
 80013a8:	f000 f8c2 	bl	8001530 <I2C_WaitOnFlagUntilTimeout>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d00d      	beq.n	80013ce <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80013c0:	d103      	bne.n	80013ca <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013c8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e0aa      	b.n	8001524 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80013ce:	897b      	ldrh	r3, [r7, #10]
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	461a      	mov	r2, r3
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80013dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80013de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e0:	6a3a      	ldr	r2, [r7, #32]
 80013e2:	4952      	ldr	r1, [pc, #328]	@ (800152c <I2C_RequestMemoryRead+0x1cc>)
 80013e4:	68f8      	ldr	r0, [r7, #12]
 80013e6:	f000 f91d 	bl	8001624 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e097      	b.n	8001524 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	695b      	ldr	r3, [r3, #20]
 80013fe:	617b      	str	r3, [r7, #20]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	617b      	str	r3, [r7, #20]
 8001408:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800140a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800140c:	6a39      	ldr	r1, [r7, #32]
 800140e:	68f8      	ldr	r0, [r7, #12]
 8001410:	f000 f9a8 	bl	8001764 <I2C_WaitOnTXEFlagUntilTimeout>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d00d      	beq.n	8001436 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800141e:	2b04      	cmp	r3, #4
 8001420:	d107      	bne.n	8001432 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001430:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e076      	b.n	8001524 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001436:	88fb      	ldrh	r3, [r7, #6]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d105      	bne.n	8001448 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800143c:	893b      	ldrh	r3, [r7, #8]
 800143e:	b2da      	uxtb	r2, r3
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	611a      	str	r2, [r3, #16]
 8001446:	e021      	b.n	800148c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001448:	893b      	ldrh	r3, [r7, #8]
 800144a:	0a1b      	lsrs	r3, r3, #8
 800144c:	b29b      	uxth	r3, r3
 800144e:	b2da      	uxtb	r2, r3
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001456:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001458:	6a39      	ldr	r1, [r7, #32]
 800145a:	68f8      	ldr	r0, [r7, #12]
 800145c:	f000 f982 	bl	8001764 <I2C_WaitOnTXEFlagUntilTimeout>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d00d      	beq.n	8001482 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146a:	2b04      	cmp	r3, #4
 800146c:	d107      	bne.n	800147e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800147c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e050      	b.n	8001524 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001482:	893b      	ldrh	r3, [r7, #8]
 8001484:	b2da      	uxtb	r2, r3
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800148c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800148e:	6a39      	ldr	r1, [r7, #32]
 8001490:	68f8      	ldr	r0, [r7, #12]
 8001492:	f000 f967 	bl	8001764 <I2C_WaitOnTXEFlagUntilTimeout>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d00d      	beq.n	80014b8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a0:	2b04      	cmp	r3, #4
 80014a2:	d107      	bne.n	80014b4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80014b2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e035      	b.n	8001524 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80014c6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80014c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	6a3b      	ldr	r3, [r7, #32]
 80014ce:	2200      	movs	r2, #0
 80014d0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80014d4:	68f8      	ldr	r0, [r7, #12]
 80014d6:	f000 f82b 	bl	8001530 <I2C_WaitOnFlagUntilTimeout>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d00d      	beq.n	80014fc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80014ee:	d103      	bne.n	80014f8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014f6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e013      	b.n	8001524 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80014fc:	897b      	ldrh	r3, [r7, #10]
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	b2da      	uxtb	r2, r3
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800150c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800150e:	6a3a      	ldr	r2, [r7, #32]
 8001510:	4906      	ldr	r1, [pc, #24]	@ (800152c <I2C_RequestMemoryRead+0x1cc>)
 8001512:	68f8      	ldr	r0, [r7, #12]
 8001514:	f000 f886 	bl	8001624 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e000      	b.n	8001524 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001522:	2300      	movs	r3, #0
}
 8001524:	4618      	mov	r0, r3
 8001526:	3718      	adds	r7, #24
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	00010002 	.word	0x00010002

08001530 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	603b      	str	r3, [r7, #0]
 800153c:	4613      	mov	r3, r2
 800153e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001540:	e048      	b.n	80015d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001548:	d044      	beq.n	80015d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800154a:	f7ff f89d 	bl	8000688 <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	683a      	ldr	r2, [r7, #0]
 8001556:	429a      	cmp	r2, r3
 8001558:	d302      	bcc.n	8001560 <I2C_WaitOnFlagUntilTimeout+0x30>
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d139      	bne.n	80015d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	0c1b      	lsrs	r3, r3, #16
 8001564:	b2db      	uxtb	r3, r3
 8001566:	2b01      	cmp	r3, #1
 8001568:	d10d      	bne.n	8001586 <I2C_WaitOnFlagUntilTimeout+0x56>
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	695b      	ldr	r3, [r3, #20]
 8001570:	43da      	mvns	r2, r3
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	4013      	ands	r3, r2
 8001576:	b29b      	uxth	r3, r3
 8001578:	2b00      	cmp	r3, #0
 800157a:	bf0c      	ite	eq
 800157c:	2301      	moveq	r3, #1
 800157e:	2300      	movne	r3, #0
 8001580:	b2db      	uxtb	r3, r3
 8001582:	461a      	mov	r2, r3
 8001584:	e00c      	b.n	80015a0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	43da      	mvns	r2, r3
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	4013      	ands	r3, r2
 8001592:	b29b      	uxth	r3, r3
 8001594:	2b00      	cmp	r3, #0
 8001596:	bf0c      	ite	eq
 8001598:	2301      	moveq	r3, #1
 800159a:	2300      	movne	r3, #0
 800159c:	b2db      	uxtb	r3, r3
 800159e:	461a      	mov	r2, r3
 80015a0:	79fb      	ldrb	r3, [r7, #7]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d116      	bne.n	80015d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2200      	movs	r2, #0
 80015aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2220      	movs	r2, #32
 80015b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	2200      	movs	r2, #0
 80015b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c0:	f043 0220 	orr.w	r2, r3, #32
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2200      	movs	r2, #0
 80015cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e023      	b.n	800161c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	0c1b      	lsrs	r3, r3, #16
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d10d      	bne.n	80015fa <I2C_WaitOnFlagUntilTimeout+0xca>
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	695b      	ldr	r3, [r3, #20]
 80015e4:	43da      	mvns	r2, r3
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	4013      	ands	r3, r2
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	bf0c      	ite	eq
 80015f0:	2301      	moveq	r3, #1
 80015f2:	2300      	movne	r3, #0
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	461a      	mov	r2, r3
 80015f8:	e00c      	b.n	8001614 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	43da      	mvns	r2, r3
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	4013      	ands	r3, r2
 8001606:	b29b      	uxth	r3, r3
 8001608:	2b00      	cmp	r3, #0
 800160a:	bf0c      	ite	eq
 800160c:	2301      	moveq	r3, #1
 800160e:	2300      	movne	r3, #0
 8001610:	b2db      	uxtb	r3, r3
 8001612:	461a      	mov	r2, r3
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	429a      	cmp	r2, r3
 8001618:	d093      	beq.n	8001542 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800161a:	2300      	movs	r3, #0
}
 800161c:	4618      	mov	r0, r3
 800161e:	3710      	adds	r7, #16
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
 8001630:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001632:	e071      	b.n	8001718 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	695b      	ldr	r3, [r3, #20]
 800163a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800163e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001642:	d123      	bne.n	800168c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001652:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800165c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2200      	movs	r2, #0
 8001662:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2220      	movs	r2, #32
 8001668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2200      	movs	r2, #0
 8001670:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001678:	f043 0204 	orr.w	r2, r3, #4
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2200      	movs	r2, #0
 8001684:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e067      	b.n	800175c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001692:	d041      	beq.n	8001718 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001694:	f7fe fff8 	bl	8000688 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d302      	bcc.n	80016aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d136      	bne.n	8001718 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	0c1b      	lsrs	r3, r3, #16
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d10c      	bne.n	80016ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	695b      	ldr	r3, [r3, #20]
 80016ba:	43da      	mvns	r2, r3
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	4013      	ands	r3, r2
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	bf14      	ite	ne
 80016c6:	2301      	movne	r3, #1
 80016c8:	2300      	moveq	r3, #0
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	e00b      	b.n	80016e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	43da      	mvns	r2, r3
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	4013      	ands	r3, r2
 80016da:	b29b      	uxth	r3, r3
 80016dc:	2b00      	cmp	r3, #0
 80016de:	bf14      	ite	ne
 80016e0:	2301      	movne	r3, #1
 80016e2:	2300      	moveq	r3, #0
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d016      	beq.n	8001718 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2200      	movs	r2, #0
 80016ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	2220      	movs	r2, #32
 80016f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2200      	movs	r2, #0
 80016fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001704:	f043 0220 	orr.w	r2, r3, #32
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	2200      	movs	r2, #0
 8001710:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e021      	b.n	800175c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	0c1b      	lsrs	r3, r3, #16
 800171c:	b2db      	uxtb	r3, r3
 800171e:	2b01      	cmp	r3, #1
 8001720:	d10c      	bne.n	800173c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	695b      	ldr	r3, [r3, #20]
 8001728:	43da      	mvns	r2, r3
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	4013      	ands	r3, r2
 800172e:	b29b      	uxth	r3, r3
 8001730:	2b00      	cmp	r3, #0
 8001732:	bf14      	ite	ne
 8001734:	2301      	movne	r3, #1
 8001736:	2300      	moveq	r3, #0
 8001738:	b2db      	uxtb	r3, r3
 800173a:	e00b      	b.n	8001754 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	699b      	ldr	r3, [r3, #24]
 8001742:	43da      	mvns	r2, r3
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	4013      	ands	r3, r2
 8001748:	b29b      	uxth	r3, r3
 800174a:	2b00      	cmp	r3, #0
 800174c:	bf14      	ite	ne
 800174e:	2301      	movne	r3, #1
 8001750:	2300      	moveq	r3, #0
 8001752:	b2db      	uxtb	r3, r3
 8001754:	2b00      	cmp	r3, #0
 8001756:	f47f af6d 	bne.w	8001634 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800175a:	2300      	movs	r3, #0
}
 800175c:	4618      	mov	r0, r3
 800175e:	3710      	adds	r7, #16
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001770:	e034      	b.n	80017dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001772:	68f8      	ldr	r0, [r7, #12]
 8001774:	f000 f89b 	bl	80018ae <I2C_IsAcknowledgeFailed>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e034      	b.n	80017ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001788:	d028      	beq.n	80017dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800178a:	f7fe ff7d 	bl	8000688 <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	68ba      	ldr	r2, [r7, #8]
 8001796:	429a      	cmp	r2, r3
 8001798:	d302      	bcc.n	80017a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d11d      	bne.n	80017dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	695b      	ldr	r3, [r3, #20]
 80017a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017aa:	2b80      	cmp	r3, #128	@ 0x80
 80017ac:	d016      	beq.n	80017dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2200      	movs	r2, #0
 80017b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2220      	movs	r2, #32
 80017b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2200      	movs	r2, #0
 80017c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c8:	f043 0220 	orr.w	r2, r3, #32
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2200      	movs	r2, #0
 80017d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e007      	b.n	80017ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	695b      	ldr	r3, [r3, #20]
 80017e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017e6:	2b80      	cmp	r3, #128	@ 0x80
 80017e8:	d1c3      	bne.n	8001772 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80017ea:	2300      	movs	r3, #0
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3710      	adds	r7, #16
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	60b9      	str	r1, [r7, #8]
 80017fe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001800:	e049      	b.n	8001896 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	695b      	ldr	r3, [r3, #20]
 8001808:	f003 0310 	and.w	r3, r3, #16
 800180c:	2b10      	cmp	r3, #16
 800180e:	d119      	bne.n	8001844 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f06f 0210 	mvn.w	r2, #16
 8001818:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2200      	movs	r2, #0
 800181e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2220      	movs	r2, #32
 8001824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2200      	movs	r2, #0
 800182c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2200      	movs	r2, #0
 800183c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e030      	b.n	80018a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001844:	f7fe ff20 	bl	8000688 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	68ba      	ldr	r2, [r7, #8]
 8001850:	429a      	cmp	r2, r3
 8001852:	d302      	bcc.n	800185a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d11d      	bne.n	8001896 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	695b      	ldr	r3, [r3, #20]
 8001860:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001864:	2b40      	cmp	r3, #64	@ 0x40
 8001866:	d016      	beq.n	8001896 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2200      	movs	r2, #0
 800186c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	2220      	movs	r2, #32
 8001872:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2200      	movs	r2, #0
 800187a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001882:	f043 0220 	orr.w	r2, r3, #32
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2200      	movs	r2, #0
 800188e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e007      	b.n	80018a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	695b      	ldr	r3, [r3, #20]
 800189c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018a0:	2b40      	cmp	r3, #64	@ 0x40
 80018a2:	d1ae      	bne.n	8001802 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3710      	adds	r7, #16
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80018ae:	b480      	push	{r7}
 80018b0:	b083      	sub	sp, #12
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	695b      	ldr	r3, [r3, #20]
 80018bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018c4:	d11b      	bne.n	80018fe <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80018ce:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2220      	movs	r2, #32
 80018da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ea:	f043 0204 	orr.w	r2, r3, #4
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e000      	b.n	8001900 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	4618      	mov	r0, r3
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	bc80      	pop	{r7}
 8001908:	4770      	bx	lr
	...

0800190c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d101      	bne.n	800191e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e272      	b.n	8001e04 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	2b00      	cmp	r3, #0
 8001928:	f000 8087 	beq.w	8001a3a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800192c:	4b92      	ldr	r3, [pc, #584]	@ (8001b78 <HAL_RCC_OscConfig+0x26c>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f003 030c 	and.w	r3, r3, #12
 8001934:	2b04      	cmp	r3, #4
 8001936:	d00c      	beq.n	8001952 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001938:	4b8f      	ldr	r3, [pc, #572]	@ (8001b78 <HAL_RCC_OscConfig+0x26c>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f003 030c 	and.w	r3, r3, #12
 8001940:	2b08      	cmp	r3, #8
 8001942:	d112      	bne.n	800196a <HAL_RCC_OscConfig+0x5e>
 8001944:	4b8c      	ldr	r3, [pc, #560]	@ (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800194c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001950:	d10b      	bne.n	800196a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001952:	4b89      	ldr	r3, [pc, #548]	@ (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d06c      	beq.n	8001a38 <HAL_RCC_OscConfig+0x12c>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d168      	bne.n	8001a38 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e24c      	b.n	8001e04 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001972:	d106      	bne.n	8001982 <HAL_RCC_OscConfig+0x76>
 8001974:	4b80      	ldr	r3, [pc, #512]	@ (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a7f      	ldr	r2, [pc, #508]	@ (8001b78 <HAL_RCC_OscConfig+0x26c>)
 800197a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800197e:	6013      	str	r3, [r2, #0]
 8001980:	e02e      	b.n	80019e0 <HAL_RCC_OscConfig+0xd4>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d10c      	bne.n	80019a4 <HAL_RCC_OscConfig+0x98>
 800198a:	4b7b      	ldr	r3, [pc, #492]	@ (8001b78 <HAL_RCC_OscConfig+0x26c>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a7a      	ldr	r2, [pc, #488]	@ (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001990:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001994:	6013      	str	r3, [r2, #0]
 8001996:	4b78      	ldr	r3, [pc, #480]	@ (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a77      	ldr	r2, [pc, #476]	@ (8001b78 <HAL_RCC_OscConfig+0x26c>)
 800199c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019a0:	6013      	str	r3, [r2, #0]
 80019a2:	e01d      	b.n	80019e0 <HAL_RCC_OscConfig+0xd4>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019ac:	d10c      	bne.n	80019c8 <HAL_RCC_OscConfig+0xbc>
 80019ae:	4b72      	ldr	r3, [pc, #456]	@ (8001b78 <HAL_RCC_OscConfig+0x26c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a71      	ldr	r2, [pc, #452]	@ (8001b78 <HAL_RCC_OscConfig+0x26c>)
 80019b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019b8:	6013      	str	r3, [r2, #0]
 80019ba:	4b6f      	ldr	r3, [pc, #444]	@ (8001b78 <HAL_RCC_OscConfig+0x26c>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a6e      	ldr	r2, [pc, #440]	@ (8001b78 <HAL_RCC_OscConfig+0x26c>)
 80019c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019c4:	6013      	str	r3, [r2, #0]
 80019c6:	e00b      	b.n	80019e0 <HAL_RCC_OscConfig+0xd4>
 80019c8:	4b6b      	ldr	r3, [pc, #428]	@ (8001b78 <HAL_RCC_OscConfig+0x26c>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a6a      	ldr	r2, [pc, #424]	@ (8001b78 <HAL_RCC_OscConfig+0x26c>)
 80019ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019d2:	6013      	str	r3, [r2, #0]
 80019d4:	4b68      	ldr	r3, [pc, #416]	@ (8001b78 <HAL_RCC_OscConfig+0x26c>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a67      	ldr	r2, [pc, #412]	@ (8001b78 <HAL_RCC_OscConfig+0x26c>)
 80019da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d013      	beq.n	8001a10 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e8:	f7fe fe4e 	bl	8000688 <HAL_GetTick>
 80019ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ee:	e008      	b.n	8001a02 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019f0:	f7fe fe4a 	bl	8000688 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b64      	cmp	r3, #100	@ 0x64
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e200      	b.n	8001e04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a02:	4b5d      	ldr	r3, [pc, #372]	@ (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d0f0      	beq.n	80019f0 <HAL_RCC_OscConfig+0xe4>
 8001a0e:	e014      	b.n	8001a3a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a10:	f7fe fe3a 	bl	8000688 <HAL_GetTick>
 8001a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a16:	e008      	b.n	8001a2a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a18:	f7fe fe36 	bl	8000688 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b64      	cmp	r3, #100	@ 0x64
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e1ec      	b.n	8001e04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a2a:	4b53      	ldr	r3, [pc, #332]	@ (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1f0      	bne.n	8001a18 <HAL_RCC_OscConfig+0x10c>
 8001a36:	e000      	b.n	8001a3a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d063      	beq.n	8001b0e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a46:	4b4c      	ldr	r3, [pc, #304]	@ (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f003 030c 	and.w	r3, r3, #12
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d00b      	beq.n	8001a6a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a52:	4b49      	ldr	r3, [pc, #292]	@ (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f003 030c 	and.w	r3, r3, #12
 8001a5a:	2b08      	cmp	r3, #8
 8001a5c:	d11c      	bne.n	8001a98 <HAL_RCC_OscConfig+0x18c>
 8001a5e:	4b46      	ldr	r3, [pc, #280]	@ (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d116      	bne.n	8001a98 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a6a:	4b43      	ldr	r3, [pc, #268]	@ (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d005      	beq.n	8001a82 <HAL_RCC_OscConfig+0x176>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	691b      	ldr	r3, [r3, #16]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d001      	beq.n	8001a82 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e1c0      	b.n	8001e04 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a82:	4b3d      	ldr	r3, [pc, #244]	@ (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	695b      	ldr	r3, [r3, #20]
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	4939      	ldr	r1, [pc, #228]	@ (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001a92:	4313      	orrs	r3, r2
 8001a94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a96:	e03a      	b.n	8001b0e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	691b      	ldr	r3, [r3, #16]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d020      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001aa0:	4b36      	ldr	r3, [pc, #216]	@ (8001b7c <HAL_RCC_OscConfig+0x270>)
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa6:	f7fe fdef 	bl	8000688 <HAL_GetTick>
 8001aaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aac:	e008      	b.n	8001ac0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aae:	f7fe fdeb 	bl	8000688 <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e1a1      	b.n	8001e04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ac0:	4b2d      	ldr	r3, [pc, #180]	@ (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0302 	and.w	r3, r3, #2
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d0f0      	beq.n	8001aae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001acc:	4b2a      	ldr	r3, [pc, #168]	@ (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	695b      	ldr	r3, [r3, #20]
 8001ad8:	00db      	lsls	r3, r3, #3
 8001ada:	4927      	ldr	r1, [pc, #156]	@ (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001adc:	4313      	orrs	r3, r2
 8001ade:	600b      	str	r3, [r1, #0]
 8001ae0:	e015      	b.n	8001b0e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ae2:	4b26      	ldr	r3, [pc, #152]	@ (8001b7c <HAL_RCC_OscConfig+0x270>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae8:	f7fe fdce 	bl	8000688 <HAL_GetTick>
 8001aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aee:	e008      	b.n	8001b02 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001af0:	f7fe fdca 	bl	8000688 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e180      	b.n	8001e04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b02:	4b1d      	ldr	r3, [pc, #116]	@ (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d1f0      	bne.n	8001af0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0308 	and.w	r3, r3, #8
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d03a      	beq.n	8001b90 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	699b      	ldr	r3, [r3, #24]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d019      	beq.n	8001b56 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b22:	4b17      	ldr	r3, [pc, #92]	@ (8001b80 <HAL_RCC_OscConfig+0x274>)
 8001b24:	2201      	movs	r2, #1
 8001b26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b28:	f7fe fdae 	bl	8000688 <HAL_GetTick>
 8001b2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b2e:	e008      	b.n	8001b42 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b30:	f7fe fdaa 	bl	8000688 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e160      	b.n	8001e04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b42:	4b0d      	ldr	r3, [pc, #52]	@ (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d0f0      	beq.n	8001b30 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b4e:	2001      	movs	r0, #1
 8001b50:	f000 faba 	bl	80020c8 <RCC_Delay>
 8001b54:	e01c      	b.n	8001b90 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b56:	4b0a      	ldr	r3, [pc, #40]	@ (8001b80 <HAL_RCC_OscConfig+0x274>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b5c:	f7fe fd94 	bl	8000688 <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b62:	e00f      	b.n	8001b84 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b64:	f7fe fd90 	bl	8000688 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d908      	bls.n	8001b84 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e146      	b.n	8001e04 <HAL_RCC_OscConfig+0x4f8>
 8001b76:	bf00      	nop
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	42420000 	.word	0x42420000
 8001b80:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b84:	4b92      	ldr	r3, [pc, #584]	@ (8001dd0 <HAL_RCC_OscConfig+0x4c4>)
 8001b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b88:	f003 0302 	and.w	r3, r3, #2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d1e9      	bne.n	8001b64 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0304 	and.w	r3, r3, #4
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	f000 80a6 	beq.w	8001cea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ba2:	4b8b      	ldr	r3, [pc, #556]	@ (8001dd0 <HAL_RCC_OscConfig+0x4c4>)
 8001ba4:	69db      	ldr	r3, [r3, #28]
 8001ba6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d10d      	bne.n	8001bca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bae:	4b88      	ldr	r3, [pc, #544]	@ (8001dd0 <HAL_RCC_OscConfig+0x4c4>)
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	4a87      	ldr	r2, [pc, #540]	@ (8001dd0 <HAL_RCC_OscConfig+0x4c4>)
 8001bb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bb8:	61d3      	str	r3, [r2, #28]
 8001bba:	4b85      	ldr	r3, [pc, #532]	@ (8001dd0 <HAL_RCC_OscConfig+0x4c4>)
 8001bbc:	69db      	ldr	r3, [r3, #28]
 8001bbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bc2:	60bb      	str	r3, [r7, #8]
 8001bc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bca:	4b82      	ldr	r3, [pc, #520]	@ (8001dd4 <HAL_RCC_OscConfig+0x4c8>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d118      	bne.n	8001c08 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bd6:	4b7f      	ldr	r3, [pc, #508]	@ (8001dd4 <HAL_RCC_OscConfig+0x4c8>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a7e      	ldr	r2, [pc, #504]	@ (8001dd4 <HAL_RCC_OscConfig+0x4c8>)
 8001bdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001be0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001be2:	f7fe fd51 	bl	8000688 <HAL_GetTick>
 8001be6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001be8:	e008      	b.n	8001bfc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bea:	f7fe fd4d 	bl	8000688 <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	2b64      	cmp	r3, #100	@ 0x64
 8001bf6:	d901      	bls.n	8001bfc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e103      	b.n	8001e04 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bfc:	4b75      	ldr	r3, [pc, #468]	@ (8001dd4 <HAL_RCC_OscConfig+0x4c8>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d0f0      	beq.n	8001bea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d106      	bne.n	8001c1e <HAL_RCC_OscConfig+0x312>
 8001c10:	4b6f      	ldr	r3, [pc, #444]	@ (8001dd0 <HAL_RCC_OscConfig+0x4c4>)
 8001c12:	6a1b      	ldr	r3, [r3, #32]
 8001c14:	4a6e      	ldr	r2, [pc, #440]	@ (8001dd0 <HAL_RCC_OscConfig+0x4c4>)
 8001c16:	f043 0301 	orr.w	r3, r3, #1
 8001c1a:	6213      	str	r3, [r2, #32]
 8001c1c:	e02d      	b.n	8001c7a <HAL_RCC_OscConfig+0x36e>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d10c      	bne.n	8001c40 <HAL_RCC_OscConfig+0x334>
 8001c26:	4b6a      	ldr	r3, [pc, #424]	@ (8001dd0 <HAL_RCC_OscConfig+0x4c4>)
 8001c28:	6a1b      	ldr	r3, [r3, #32]
 8001c2a:	4a69      	ldr	r2, [pc, #420]	@ (8001dd0 <HAL_RCC_OscConfig+0x4c4>)
 8001c2c:	f023 0301 	bic.w	r3, r3, #1
 8001c30:	6213      	str	r3, [r2, #32]
 8001c32:	4b67      	ldr	r3, [pc, #412]	@ (8001dd0 <HAL_RCC_OscConfig+0x4c4>)
 8001c34:	6a1b      	ldr	r3, [r3, #32]
 8001c36:	4a66      	ldr	r2, [pc, #408]	@ (8001dd0 <HAL_RCC_OscConfig+0x4c4>)
 8001c38:	f023 0304 	bic.w	r3, r3, #4
 8001c3c:	6213      	str	r3, [r2, #32]
 8001c3e:	e01c      	b.n	8001c7a <HAL_RCC_OscConfig+0x36e>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	2b05      	cmp	r3, #5
 8001c46:	d10c      	bne.n	8001c62 <HAL_RCC_OscConfig+0x356>
 8001c48:	4b61      	ldr	r3, [pc, #388]	@ (8001dd0 <HAL_RCC_OscConfig+0x4c4>)
 8001c4a:	6a1b      	ldr	r3, [r3, #32]
 8001c4c:	4a60      	ldr	r2, [pc, #384]	@ (8001dd0 <HAL_RCC_OscConfig+0x4c4>)
 8001c4e:	f043 0304 	orr.w	r3, r3, #4
 8001c52:	6213      	str	r3, [r2, #32]
 8001c54:	4b5e      	ldr	r3, [pc, #376]	@ (8001dd0 <HAL_RCC_OscConfig+0x4c4>)
 8001c56:	6a1b      	ldr	r3, [r3, #32]
 8001c58:	4a5d      	ldr	r2, [pc, #372]	@ (8001dd0 <HAL_RCC_OscConfig+0x4c4>)
 8001c5a:	f043 0301 	orr.w	r3, r3, #1
 8001c5e:	6213      	str	r3, [r2, #32]
 8001c60:	e00b      	b.n	8001c7a <HAL_RCC_OscConfig+0x36e>
 8001c62:	4b5b      	ldr	r3, [pc, #364]	@ (8001dd0 <HAL_RCC_OscConfig+0x4c4>)
 8001c64:	6a1b      	ldr	r3, [r3, #32]
 8001c66:	4a5a      	ldr	r2, [pc, #360]	@ (8001dd0 <HAL_RCC_OscConfig+0x4c4>)
 8001c68:	f023 0301 	bic.w	r3, r3, #1
 8001c6c:	6213      	str	r3, [r2, #32]
 8001c6e:	4b58      	ldr	r3, [pc, #352]	@ (8001dd0 <HAL_RCC_OscConfig+0x4c4>)
 8001c70:	6a1b      	ldr	r3, [r3, #32]
 8001c72:	4a57      	ldr	r2, [pc, #348]	@ (8001dd0 <HAL_RCC_OscConfig+0x4c4>)
 8001c74:	f023 0304 	bic.w	r3, r3, #4
 8001c78:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d015      	beq.n	8001cae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c82:	f7fe fd01 	bl	8000688 <HAL_GetTick>
 8001c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c88:	e00a      	b.n	8001ca0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c8a:	f7fe fcfd 	bl	8000688 <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e0b1      	b.n	8001e04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ca0:	4b4b      	ldr	r3, [pc, #300]	@ (8001dd0 <HAL_RCC_OscConfig+0x4c4>)
 8001ca2:	6a1b      	ldr	r3, [r3, #32]
 8001ca4:	f003 0302 	and.w	r3, r3, #2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d0ee      	beq.n	8001c8a <HAL_RCC_OscConfig+0x37e>
 8001cac:	e014      	b.n	8001cd8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cae:	f7fe fceb 	bl	8000688 <HAL_GetTick>
 8001cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cb4:	e00a      	b.n	8001ccc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cb6:	f7fe fce7 	bl	8000688 <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d901      	bls.n	8001ccc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e09b      	b.n	8001e04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ccc:	4b40      	ldr	r3, [pc, #256]	@ (8001dd0 <HAL_RCC_OscConfig+0x4c4>)
 8001cce:	6a1b      	ldr	r3, [r3, #32]
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d1ee      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001cd8:	7dfb      	ldrb	r3, [r7, #23]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d105      	bne.n	8001cea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cde:	4b3c      	ldr	r3, [pc, #240]	@ (8001dd0 <HAL_RCC_OscConfig+0x4c4>)
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	4a3b      	ldr	r2, [pc, #236]	@ (8001dd0 <HAL_RCC_OscConfig+0x4c4>)
 8001ce4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ce8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	69db      	ldr	r3, [r3, #28]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f000 8087 	beq.w	8001e02 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cf4:	4b36      	ldr	r3, [pc, #216]	@ (8001dd0 <HAL_RCC_OscConfig+0x4c4>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f003 030c 	and.w	r3, r3, #12
 8001cfc:	2b08      	cmp	r3, #8
 8001cfe:	d061      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	69db      	ldr	r3, [r3, #28]
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d146      	bne.n	8001d96 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d08:	4b33      	ldr	r3, [pc, #204]	@ (8001dd8 <HAL_RCC_OscConfig+0x4cc>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0e:	f7fe fcbb 	bl	8000688 <HAL_GetTick>
 8001d12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d14:	e008      	b.n	8001d28 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d16:	f7fe fcb7 	bl	8000688 <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e06d      	b.n	8001e04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d28:	4b29      	ldr	r3, [pc, #164]	@ (8001dd0 <HAL_RCC_OscConfig+0x4c4>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d1f0      	bne.n	8001d16 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a1b      	ldr	r3, [r3, #32]
 8001d38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d3c:	d108      	bne.n	8001d50 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d3e:	4b24      	ldr	r3, [pc, #144]	@ (8001dd0 <HAL_RCC_OscConfig+0x4c4>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	4921      	ldr	r1, [pc, #132]	@ (8001dd0 <HAL_RCC_OscConfig+0x4c4>)
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d50:	4b1f      	ldr	r3, [pc, #124]	@ (8001dd0 <HAL_RCC_OscConfig+0x4c4>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a19      	ldr	r1, [r3, #32]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d60:	430b      	orrs	r3, r1
 8001d62:	491b      	ldr	r1, [pc, #108]	@ (8001dd0 <HAL_RCC_OscConfig+0x4c4>)
 8001d64:	4313      	orrs	r3, r2
 8001d66:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d68:	4b1b      	ldr	r3, [pc, #108]	@ (8001dd8 <HAL_RCC_OscConfig+0x4cc>)
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6e:	f7fe fc8b 	bl	8000688 <HAL_GetTick>
 8001d72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d74:	e008      	b.n	8001d88 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d76:	f7fe fc87 	bl	8000688 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e03d      	b.n	8001e04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d88:	4b11      	ldr	r3, [pc, #68]	@ (8001dd0 <HAL_RCC_OscConfig+0x4c4>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d0f0      	beq.n	8001d76 <HAL_RCC_OscConfig+0x46a>
 8001d94:	e035      	b.n	8001e02 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d96:	4b10      	ldr	r3, [pc, #64]	@ (8001dd8 <HAL_RCC_OscConfig+0x4cc>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9c:	f7fe fc74 	bl	8000688 <HAL_GetTick>
 8001da0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001da4:	f7fe fc70 	bl	8000688 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e026      	b.n	8001e04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001db6:	4b06      	ldr	r3, [pc, #24]	@ (8001dd0 <HAL_RCC_OscConfig+0x4c4>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1f0      	bne.n	8001da4 <HAL_RCC_OscConfig+0x498>
 8001dc2:	e01e      	b.n	8001e02 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	69db      	ldr	r3, [r3, #28]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d107      	bne.n	8001ddc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e019      	b.n	8001e04 <HAL_RCC_OscConfig+0x4f8>
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	40007000 	.word	0x40007000
 8001dd8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8001e0c <HAL_RCC_OscConfig+0x500>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a1b      	ldr	r3, [r3, #32]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d106      	bne.n	8001dfe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d001      	beq.n	8001e02 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e000      	b.n	8001e04 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3718      	adds	r7, #24
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40021000 	.word	0x40021000

08001e10 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d101      	bne.n	8001e24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e0d0      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e24:	4b6a      	ldr	r3, [pc, #424]	@ (8001fd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0307 	and.w	r3, r3, #7
 8001e2c:	683a      	ldr	r2, [r7, #0]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d910      	bls.n	8001e54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e32:	4b67      	ldr	r3, [pc, #412]	@ (8001fd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f023 0207 	bic.w	r2, r3, #7
 8001e3a:	4965      	ldr	r1, [pc, #404]	@ (8001fd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e42:	4b63      	ldr	r3, [pc, #396]	@ (8001fd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0307 	and.w	r3, r3, #7
 8001e4a:	683a      	ldr	r2, [r7, #0]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d001      	beq.n	8001e54 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e0b8      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d020      	beq.n	8001ea2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0304 	and.w	r3, r3, #4
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d005      	beq.n	8001e78 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e6c:	4b59      	ldr	r3, [pc, #356]	@ (8001fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	4a58      	ldr	r2, [pc, #352]	@ (8001fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e72:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001e76:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0308 	and.w	r3, r3, #8
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d005      	beq.n	8001e90 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e84:	4b53      	ldr	r3, [pc, #332]	@ (8001fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	4a52      	ldr	r2, [pc, #328]	@ (8001fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001e8e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e90:	4b50      	ldr	r3, [pc, #320]	@ (8001fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	494d      	ldr	r1, [pc, #308]	@ (8001fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d040      	beq.n	8001f30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d107      	bne.n	8001ec6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eb6:	4b47      	ldr	r3, [pc, #284]	@ (8001fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d115      	bne.n	8001eee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e07f      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d107      	bne.n	8001ede <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ece:	4b41      	ldr	r3, [pc, #260]	@ (8001fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d109      	bne.n	8001eee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e073      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ede:	4b3d      	ldr	r3, [pc, #244]	@ (8001fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d101      	bne.n	8001eee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e06b      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eee:	4b39      	ldr	r3, [pc, #228]	@ (8001fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f023 0203 	bic.w	r2, r3, #3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	4936      	ldr	r1, [pc, #216]	@ (8001fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001efc:	4313      	orrs	r3, r2
 8001efe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f00:	f7fe fbc2 	bl	8000688 <HAL_GetTick>
 8001f04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f06:	e00a      	b.n	8001f1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f08:	f7fe fbbe 	bl	8000688 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e053      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f1e:	4b2d      	ldr	r3, [pc, #180]	@ (8001fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f003 020c 	and.w	r2, r3, #12
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d1eb      	bne.n	8001f08 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f30:	4b27      	ldr	r3, [pc, #156]	@ (8001fd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0307 	and.w	r3, r3, #7
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d210      	bcs.n	8001f60 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f3e:	4b24      	ldr	r3, [pc, #144]	@ (8001fd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f023 0207 	bic.w	r2, r3, #7
 8001f46:	4922      	ldr	r1, [pc, #136]	@ (8001fd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f4e:	4b20      	ldr	r3, [pc, #128]	@ (8001fd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0307 	and.w	r3, r3, #7
 8001f56:	683a      	ldr	r2, [r7, #0]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d001      	beq.n	8001f60 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e032      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0304 	and.w	r3, r3, #4
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d008      	beq.n	8001f7e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f6c:	4b19      	ldr	r3, [pc, #100]	@ (8001fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	4916      	ldr	r1, [pc, #88]	@ (8001fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0308 	and.w	r3, r3, #8
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d009      	beq.n	8001f9e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f8a:	4b12      	ldr	r3, [pc, #72]	@ (8001fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	490e      	ldr	r1, [pc, #56]	@ (8001fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f9e:	f000 f821 	bl	8001fe4 <HAL_RCC_GetSysClockFreq>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8001fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	091b      	lsrs	r3, r3, #4
 8001faa:	f003 030f 	and.w	r3, r3, #15
 8001fae:	490a      	ldr	r1, [pc, #40]	@ (8001fd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001fb0:	5ccb      	ldrb	r3, [r1, r3]
 8001fb2:	fa22 f303 	lsr.w	r3, r2, r3
 8001fb6:	4a09      	ldr	r2, [pc, #36]	@ (8001fdc <HAL_RCC_ClockConfig+0x1cc>)
 8001fb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001fba:	4b09      	ldr	r3, [pc, #36]	@ (8001fe0 <HAL_RCC_ClockConfig+0x1d0>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7fe fb20 	bl	8000604 <HAL_InitTick>

  return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	40022000 	.word	0x40022000
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	08002174 	.word	0x08002174
 8001fdc:	20000000 	.word	0x20000000
 8001fe0:	20000004 	.word	0x20000004

08001fe4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b087      	sub	sp, #28
 8001fe8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fea:	2300      	movs	r3, #0
 8001fec:	60fb      	str	r3, [r7, #12]
 8001fee:	2300      	movs	r3, #0
 8001ff0:	60bb      	str	r3, [r7, #8]
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	617b      	str	r3, [r7, #20]
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ffe:	4b1e      	ldr	r3, [pc, #120]	@ (8002078 <HAL_RCC_GetSysClockFreq+0x94>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f003 030c 	and.w	r3, r3, #12
 800200a:	2b04      	cmp	r3, #4
 800200c:	d002      	beq.n	8002014 <HAL_RCC_GetSysClockFreq+0x30>
 800200e:	2b08      	cmp	r3, #8
 8002010:	d003      	beq.n	800201a <HAL_RCC_GetSysClockFreq+0x36>
 8002012:	e027      	b.n	8002064 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002014:	4b19      	ldr	r3, [pc, #100]	@ (800207c <HAL_RCC_GetSysClockFreq+0x98>)
 8002016:	613b      	str	r3, [r7, #16]
      break;
 8002018:	e027      	b.n	800206a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	0c9b      	lsrs	r3, r3, #18
 800201e:	f003 030f 	and.w	r3, r3, #15
 8002022:	4a17      	ldr	r2, [pc, #92]	@ (8002080 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002024:	5cd3      	ldrb	r3, [r2, r3]
 8002026:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d010      	beq.n	8002054 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002032:	4b11      	ldr	r3, [pc, #68]	@ (8002078 <HAL_RCC_GetSysClockFreq+0x94>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	0c5b      	lsrs	r3, r3, #17
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	4a11      	ldr	r2, [pc, #68]	@ (8002084 <HAL_RCC_GetSysClockFreq+0xa0>)
 800203e:	5cd3      	ldrb	r3, [r2, r3]
 8002040:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a0d      	ldr	r2, [pc, #52]	@ (800207c <HAL_RCC_GetSysClockFreq+0x98>)
 8002046:	fb03 f202 	mul.w	r2, r3, r2
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002050:	617b      	str	r3, [r7, #20]
 8002052:	e004      	b.n	800205e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a0c      	ldr	r2, [pc, #48]	@ (8002088 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002058:	fb02 f303 	mul.w	r3, r2, r3
 800205c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	613b      	str	r3, [r7, #16]
      break;
 8002062:	e002      	b.n	800206a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002064:	4b05      	ldr	r3, [pc, #20]	@ (800207c <HAL_RCC_GetSysClockFreq+0x98>)
 8002066:	613b      	str	r3, [r7, #16]
      break;
 8002068:	bf00      	nop
    }
  }
  return sysclockfreq;
 800206a:	693b      	ldr	r3, [r7, #16]
}
 800206c:	4618      	mov	r0, r3
 800206e:	371c      	adds	r7, #28
 8002070:	46bd      	mov	sp, r7
 8002072:	bc80      	pop	{r7}
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	40021000 	.word	0x40021000
 800207c:	007a1200 	.word	0x007a1200
 8002080:	0800218c 	.word	0x0800218c
 8002084:	0800219c 	.word	0x0800219c
 8002088:	003d0900 	.word	0x003d0900

0800208c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002090:	4b02      	ldr	r3, [pc, #8]	@ (800209c <HAL_RCC_GetHCLKFreq+0x10>)
 8002092:	681b      	ldr	r3, [r3, #0]
}
 8002094:	4618      	mov	r0, r3
 8002096:	46bd      	mov	sp, r7
 8002098:	bc80      	pop	{r7}
 800209a:	4770      	bx	lr
 800209c:	20000000 	.word	0x20000000

080020a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020a4:	f7ff fff2 	bl	800208c <HAL_RCC_GetHCLKFreq>
 80020a8:	4602      	mov	r2, r0
 80020aa:	4b05      	ldr	r3, [pc, #20]	@ (80020c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	0a1b      	lsrs	r3, r3, #8
 80020b0:	f003 0307 	and.w	r3, r3, #7
 80020b4:	4903      	ldr	r1, [pc, #12]	@ (80020c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020b6:	5ccb      	ldrb	r3, [r1, r3]
 80020b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020bc:	4618      	mov	r0, r3
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	40021000 	.word	0x40021000
 80020c4:	08002184 	.word	0x08002184

080020c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80020d0:	4b0a      	ldr	r3, [pc, #40]	@ (80020fc <RCC_Delay+0x34>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a0a      	ldr	r2, [pc, #40]	@ (8002100 <RCC_Delay+0x38>)
 80020d6:	fba2 2303 	umull	r2, r3, r2, r3
 80020da:	0a5b      	lsrs	r3, r3, #9
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	fb02 f303 	mul.w	r3, r2, r3
 80020e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020e4:	bf00      	nop
  }
  while (Delay --);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	1e5a      	subs	r2, r3, #1
 80020ea:	60fa      	str	r2, [r7, #12]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1f9      	bne.n	80020e4 <RCC_Delay+0x1c>
}
 80020f0:	bf00      	nop
 80020f2:	bf00      	nop
 80020f4:	3714      	adds	r7, #20
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bc80      	pop	{r7}
 80020fa:	4770      	bx	lr
 80020fc:	20000000 	.word	0x20000000
 8002100:	10624dd3 	.word	0x10624dd3

08002104 <memset>:
 8002104:	4603      	mov	r3, r0
 8002106:	4402      	add	r2, r0
 8002108:	4293      	cmp	r3, r2
 800210a:	d100      	bne.n	800210e <memset+0xa>
 800210c:	4770      	bx	lr
 800210e:	f803 1b01 	strb.w	r1, [r3], #1
 8002112:	e7f9      	b.n	8002108 <memset+0x4>

08002114 <__libc_init_array>:
 8002114:	b570      	push	{r4, r5, r6, lr}
 8002116:	2600      	movs	r6, #0
 8002118:	4d0c      	ldr	r5, [pc, #48]	@ (800214c <__libc_init_array+0x38>)
 800211a:	4c0d      	ldr	r4, [pc, #52]	@ (8002150 <__libc_init_array+0x3c>)
 800211c:	1b64      	subs	r4, r4, r5
 800211e:	10a4      	asrs	r4, r4, #2
 8002120:	42a6      	cmp	r6, r4
 8002122:	d109      	bne.n	8002138 <__libc_init_array+0x24>
 8002124:	f000 f81a 	bl	800215c <_init>
 8002128:	2600      	movs	r6, #0
 800212a:	4d0a      	ldr	r5, [pc, #40]	@ (8002154 <__libc_init_array+0x40>)
 800212c:	4c0a      	ldr	r4, [pc, #40]	@ (8002158 <__libc_init_array+0x44>)
 800212e:	1b64      	subs	r4, r4, r5
 8002130:	10a4      	asrs	r4, r4, #2
 8002132:	42a6      	cmp	r6, r4
 8002134:	d105      	bne.n	8002142 <__libc_init_array+0x2e>
 8002136:	bd70      	pop	{r4, r5, r6, pc}
 8002138:	f855 3b04 	ldr.w	r3, [r5], #4
 800213c:	4798      	blx	r3
 800213e:	3601      	adds	r6, #1
 8002140:	e7ee      	b.n	8002120 <__libc_init_array+0xc>
 8002142:	f855 3b04 	ldr.w	r3, [r5], #4
 8002146:	4798      	blx	r3
 8002148:	3601      	adds	r6, #1
 800214a:	e7f2      	b.n	8002132 <__libc_init_array+0x1e>
 800214c:	080021a0 	.word	0x080021a0
 8002150:	080021a0 	.word	0x080021a0
 8002154:	080021a0 	.word	0x080021a0
 8002158:	080021a4 	.word	0x080021a4

0800215c <_init>:
 800215c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800215e:	bf00      	nop
 8002160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002162:	bc08      	pop	{r3}
 8002164:	469e      	mov	lr, r3
 8002166:	4770      	bx	lr

08002168 <_fini>:
 8002168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800216a:	bf00      	nop
 800216c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800216e:	bc08      	pop	{r3}
 8002170:	469e      	mov	lr, r3
 8002172:	4770      	bx	lr
