
ES_Project_Digital-Clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007784  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002064  08007890  08007890  00008890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098f4  080098f4  0000b2a8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080098f4  080098f4  0000b2a8  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080098f4  080098f4  0000b2a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080098f4  080098f4  0000a8f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080098f8  080098f8  0000a8f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002a8  20000000  080098fc  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  200002a8  08009ba4  0000b2a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005bc  08009ba4  0000b5bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b2a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012671  00000000  00000000  0000b2d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035cb  00000000  00000000  0001d942  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001140  00000000  00000000  00020f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d44  00000000  00000000  00022050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aa65  00000000  00000000  00022d94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000194e2  00000000  00000000  0003d7f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f67e  00000000  00000000  00056cdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e6359  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b5c  00000000  00000000  000e639c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  000eaef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200002a8 	.word	0x200002a8
 8000128:	00000000 	.word	0x00000000
 800012c:	08007878 	.word	0x08007878

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200002ac 	.word	0x200002ac
 8000148:	08007878 	.word	0x08007878

0800014c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000152:	1d3b      	adds	r3, r7, #4
 8000154:	2200      	movs	r2, #0
 8000156:	601a      	str	r2, [r3, #0]
 8000158:	605a      	str	r2, [r3, #4]
 800015a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800015c:	4b18      	ldr	r3, [pc, #96]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800015e:	4a19      	ldr	r2, [pc, #100]	@ (80001c4 <MX_ADC1_Init+0x78>)
 8000160:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000162:	4b17      	ldr	r3, [pc, #92]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000164:	2200      	movs	r2, #0
 8000166:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000168:	4b15      	ldr	r3, [pc, #84]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800016a:	2200      	movs	r2, #0
 800016c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800016e:	4b14      	ldr	r3, [pc, #80]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000170:	2200      	movs	r2, #0
 8000172:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000174:	4b12      	ldr	r3, [pc, #72]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000176:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800017a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800017c:	4b10      	ldr	r3, [pc, #64]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800017e:	2200      	movs	r2, #0
 8000180:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000182:	4b0f      	ldr	r3, [pc, #60]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000184:	2201      	movs	r2, #1
 8000186:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000188:	480d      	ldr	r0, [pc, #52]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800018a:	f002 fa1b 	bl	80025c4 <HAL_ADC_Init>
 800018e:	4603      	mov	r3, r0
 8000190:	2b00      	cmp	r3, #0
 8000192:	d001      	beq.n	8000198 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000194:	f001 ff3a 	bl	800200c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000198:	2304      	movs	r3, #4
 800019a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800019c:	2301      	movs	r3, #1
 800019e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001a0:	2300      	movs	r3, #0
 80001a2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	4619      	mov	r1, r3
 80001a8:	4805      	ldr	r0, [pc, #20]	@ (80001c0 <MX_ADC1_Init+0x74>)
 80001aa:	f002 fc6d 	bl	8002a88 <HAL_ADC_ConfigChannel>
 80001ae:	4603      	mov	r3, r0
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d001      	beq.n	80001b8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80001b4:	f001 ff2a 	bl	800200c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80001b8:	bf00      	nop
 80001ba:	3710      	adds	r7, #16
 80001bc:	46bd      	mov	sp, r7
 80001be:	bd80      	pop	{r7, pc}
 80001c0:	200002c4 	.word	0x200002c4
 80001c4:	40012400 	.word	0x40012400

080001c8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b088      	sub	sp, #32
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001d0:	f107 0310 	add.w	r3, r7, #16
 80001d4:	2200      	movs	r2, #0
 80001d6:	601a      	str	r2, [r3, #0]
 80001d8:	605a      	str	r2, [r3, #4]
 80001da:	609a      	str	r2, [r3, #8]
 80001dc:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	4a18      	ldr	r2, [pc, #96]	@ (8000244 <HAL_ADC_MspInit+0x7c>)
 80001e4:	4293      	cmp	r3, r2
 80001e6:	d129      	bne.n	800023c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80001e8:	4b17      	ldr	r3, [pc, #92]	@ (8000248 <HAL_ADC_MspInit+0x80>)
 80001ea:	699b      	ldr	r3, [r3, #24]
 80001ec:	4a16      	ldr	r2, [pc, #88]	@ (8000248 <HAL_ADC_MspInit+0x80>)
 80001ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80001f2:	6193      	str	r3, [r2, #24]
 80001f4:	4b14      	ldr	r3, [pc, #80]	@ (8000248 <HAL_ADC_MspInit+0x80>)
 80001f6:	699b      	ldr	r3, [r3, #24]
 80001f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80001fc:	60fb      	str	r3, [r7, #12]
 80001fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000200:	4b11      	ldr	r3, [pc, #68]	@ (8000248 <HAL_ADC_MspInit+0x80>)
 8000202:	699b      	ldr	r3, [r3, #24]
 8000204:	4a10      	ldr	r2, [pc, #64]	@ (8000248 <HAL_ADC_MspInit+0x80>)
 8000206:	f043 0304 	orr.w	r3, r3, #4
 800020a:	6193      	str	r3, [r2, #24]
 800020c:	4b0e      	ldr	r3, [pc, #56]	@ (8000248 <HAL_ADC_MspInit+0x80>)
 800020e:	699b      	ldr	r3, [r3, #24]
 8000210:	f003 0304 	and.w	r3, r3, #4
 8000214:	60bb      	str	r3, [r7, #8]
 8000216:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000218:	2310      	movs	r3, #16
 800021a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800021c:	2303      	movs	r3, #3
 800021e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000220:	f107 0310 	add.w	r3, r7, #16
 8000224:	4619      	mov	r1, r3
 8000226:	4809      	ldr	r0, [pc, #36]	@ (800024c <HAL_ADC_MspInit+0x84>)
 8000228:	f002 ff8a 	bl	8003140 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800022c:	2200      	movs	r2, #0
 800022e:	2100      	movs	r1, #0
 8000230:	2012      	movs	r0, #18
 8000232:	f002 fe9c 	bl	8002f6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000236:	2012      	movs	r0, #18
 8000238:	f002 feb5 	bl	8002fa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800023c:	bf00      	nop
 800023e:	3720      	adds	r7, #32
 8000240:	46bd      	mov	sp, r7
 8000242:	bd80      	pop	{r7, pc}
 8000244:	40012400 	.word	0x40012400
 8000248:	40021000 	.word	0x40021000
 800024c:	40010800 	.word	0x40010800

08000250 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b088      	sub	sp, #32
 8000254:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000256:	f107 0310 	add.w	r3, r7, #16
 800025a:	2200      	movs	r2, #0
 800025c:	601a      	str	r2, [r3, #0]
 800025e:	605a      	str	r2, [r3, #4]
 8000260:	609a      	str	r2, [r3, #8]
 8000262:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000264:	4b47      	ldr	r3, [pc, #284]	@ (8000384 <MX_GPIO_Init+0x134>)
 8000266:	699b      	ldr	r3, [r3, #24]
 8000268:	4a46      	ldr	r2, [pc, #280]	@ (8000384 <MX_GPIO_Init+0x134>)
 800026a:	f043 0320 	orr.w	r3, r3, #32
 800026e:	6193      	str	r3, [r2, #24]
 8000270:	4b44      	ldr	r3, [pc, #272]	@ (8000384 <MX_GPIO_Init+0x134>)
 8000272:	699b      	ldr	r3, [r3, #24]
 8000274:	f003 0320 	and.w	r3, r3, #32
 8000278:	60fb      	str	r3, [r7, #12]
 800027a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800027c:	4b41      	ldr	r3, [pc, #260]	@ (8000384 <MX_GPIO_Init+0x134>)
 800027e:	699b      	ldr	r3, [r3, #24]
 8000280:	4a40      	ldr	r2, [pc, #256]	@ (8000384 <MX_GPIO_Init+0x134>)
 8000282:	f043 0304 	orr.w	r3, r3, #4
 8000286:	6193      	str	r3, [r2, #24]
 8000288:	4b3e      	ldr	r3, [pc, #248]	@ (8000384 <MX_GPIO_Init+0x134>)
 800028a:	699b      	ldr	r3, [r3, #24]
 800028c:	f003 0304 	and.w	r3, r3, #4
 8000290:	60bb      	str	r3, [r7, #8]
 8000292:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000294:	4b3b      	ldr	r3, [pc, #236]	@ (8000384 <MX_GPIO_Init+0x134>)
 8000296:	699b      	ldr	r3, [r3, #24]
 8000298:	4a3a      	ldr	r2, [pc, #232]	@ (8000384 <MX_GPIO_Init+0x134>)
 800029a:	f043 0308 	orr.w	r3, r3, #8
 800029e:	6193      	str	r3, [r2, #24]
 80002a0:	4b38      	ldr	r3, [pc, #224]	@ (8000384 <MX_GPIO_Init+0x134>)
 80002a2:	699b      	ldr	r3, [r3, #24]
 80002a4:	f003 0308 	and.w	r3, r3, #8
 80002a8:	607b      	str	r3, [r7, #4]
 80002aa:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_Pin|DC_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 80002ac:	2200      	movs	r2, #0
 80002ae:	210e      	movs	r1, #14
 80002b0:	4835      	ldr	r0, [pc, #212]	@ (8000388 <MX_GPIO_Init+0x138>)
 80002b2:	f003 f8e0 	bl	8003476 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BUZZER_Pin|PWR_Pin, GPIO_PIN_RESET);
 80002b6:	2200      	movs	r2, #0
 80002b8:	2103      	movs	r1, #3
 80002ba:	4834      	ldr	r0, [pc, #208]	@ (800038c <MX_GPIO_Init+0x13c>)
 80002bc:	f003 f8db 	bl	8003476 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUSY_Pin PA6 */
  GPIO_InitStruct.Pin = BUSY_Pin|GPIO_PIN_6;
 80002c0:	2341      	movs	r3, #65	@ 0x41
 80002c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002c4:	2300      	movs	r3, #0
 80002c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002c8:	2300      	movs	r3, #0
 80002ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002cc:	f107 0310 	add.w	r3, r7, #16
 80002d0:	4619      	mov	r1, r3
 80002d2:	482d      	ldr	r0, [pc, #180]	@ (8000388 <MX_GPIO_Init+0x138>)
 80002d4:	f002 ff34 	bl	8003140 <HAL_GPIO_Init>

  /*Configure GPIO pins : RST_Pin DC_Pin SPI_CS_Pin */
  GPIO_InitStruct.Pin = RST_Pin|DC_Pin|SPI_CS_Pin;
 80002d8:	230e      	movs	r3, #14
 80002da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002dc:	2301      	movs	r3, #1
 80002de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002e0:	2300      	movs	r3, #0
 80002e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002e4:	2302      	movs	r3, #2
 80002e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002e8:	f107 0310 	add.w	r3, r7, #16
 80002ec:	4619      	mov	r1, r3
 80002ee:	4826      	ldr	r0, [pc, #152]	@ (8000388 <MX_GPIO_Init+0x138>)
 80002f0:	f002 ff26 	bl	8003140 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZER_Pin PWR_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin|PWR_Pin;
 80002f4:	2303      	movs	r3, #3
 80002f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002f8:	2301      	movs	r3, #1
 80002fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002fc:	2300      	movs	r3, #0
 80002fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000300:	2302      	movs	r3, #2
 8000302:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000304:	f107 0310 	add.w	r3, r7, #16
 8000308:	4619      	mov	r1, r3
 800030a:	4820      	ldr	r0, [pc, #128]	@ (800038c <MX_GPIO_Init+0x13c>)
 800030c:	f002 ff18 	bl	8003140 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON0_IN12_Pin BUTTON1_IN13_Pin BUTTON2_IN14_Pin BUTTON3_IN15_Pin */
  GPIO_InitStruct.Pin = BUTTON0_IN12_Pin|BUTTON1_IN13_Pin|BUTTON2_IN14_Pin|BUTTON3_IN15_Pin;
 8000310:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000314:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000316:	4b1e      	ldr	r3, [pc, #120]	@ (8000390 <MX_GPIO_Init+0x140>)
 8000318:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800031a:	2302      	movs	r3, #2
 800031c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800031e:	f107 0310 	add.w	r3, r7, #16
 8000322:	4619      	mov	r1, r3
 8000324:	4819      	ldr	r0, [pc, #100]	@ (800038c <MX_GPIO_Init+0x13c>)
 8000326:	f002 ff0b 	bl	8003140 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON4_IN8_Pin */
  GPIO_InitStruct.Pin = BUTTON4_IN8_Pin;
 800032a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800032e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000330:	4b17      	ldr	r3, [pc, #92]	@ (8000390 <MX_GPIO_Init+0x140>)
 8000332:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000334:	2302      	movs	r3, #2
 8000336:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON4_IN8_GPIO_Port, &GPIO_InitStruct);
 8000338:	f107 0310 	add.w	r3, r7, #16
 800033c:	4619      	mov	r1, r3
 800033e:	4812      	ldr	r0, [pc, #72]	@ (8000388 <MX_GPIO_Init+0x138>)
 8000340:	f002 fefe 	bl	8003140 <HAL_GPIO_Init>

  /*Configure GPIO pin : RTC_IN5_Pin */
  GPIO_InitStruct.Pin = RTC_IN5_Pin;
 8000344:	2320      	movs	r3, #32
 8000346:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000348:	4b12      	ldr	r3, [pc, #72]	@ (8000394 <MX_GPIO_Init+0x144>)
 800034a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800034c:	2301      	movs	r3, #1
 800034e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RTC_IN5_GPIO_Port, &GPIO_InitStruct);
 8000350:	f107 0310 	add.w	r3, r7, #16
 8000354:	4619      	mov	r1, r3
 8000356:	480d      	ldr	r0, [pc, #52]	@ (800038c <MX_GPIO_Init+0x13c>)
 8000358:	f002 fef2 	bl	8003140 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800035c:	2200      	movs	r2, #0
 800035e:	2100      	movs	r1, #0
 8000360:	2017      	movs	r0, #23
 8000362:	f002 fe04 	bl	8002f6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000366:	2017      	movs	r0, #23
 8000368:	f002 fe1d 	bl	8002fa6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800036c:	2200      	movs	r2, #0
 800036e:	2100      	movs	r1, #0
 8000370:	2028      	movs	r0, #40	@ 0x28
 8000372:	f002 fdfc 	bl	8002f6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000376:	2028      	movs	r0, #40	@ 0x28
 8000378:	f002 fe15 	bl	8002fa6 <HAL_NVIC_EnableIRQ>

}
 800037c:	bf00      	nop
 800037e:	3720      	adds	r7, #32
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}
 8000384:	40021000 	.word	0x40021000
 8000388:	40010800 	.word	0x40010800
 800038c:	40010c00 	.word	0x40010c00
 8000390:	10110000 	.word	0x10110000
 8000394:	10210000 	.word	0x10210000

08000398 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800039c:	4b12      	ldr	r3, [pc, #72]	@ (80003e8 <MX_I2C1_Init+0x50>)
 800039e:	4a13      	ldr	r2, [pc, #76]	@ (80003ec <MX_I2C1_Init+0x54>)
 80003a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80003a2:	4b11      	ldr	r3, [pc, #68]	@ (80003e8 <MX_I2C1_Init+0x50>)
 80003a4:	4a12      	ldr	r2, [pc, #72]	@ (80003f0 <MX_I2C1_Init+0x58>)
 80003a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003a8:	4b0f      	ldr	r3, [pc, #60]	@ (80003e8 <MX_I2C1_Init+0x50>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80003ae:	4b0e      	ldr	r3, [pc, #56]	@ (80003e8 <MX_I2C1_Init+0x50>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003b4:	4b0c      	ldr	r3, [pc, #48]	@ (80003e8 <MX_I2C1_Init+0x50>)
 80003b6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80003ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003bc:	4b0a      	ldr	r3, [pc, #40]	@ (80003e8 <MX_I2C1_Init+0x50>)
 80003be:	2200      	movs	r2, #0
 80003c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80003c2:	4b09      	ldr	r3, [pc, #36]	@ (80003e8 <MX_I2C1_Init+0x50>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003c8:	4b07      	ldr	r3, [pc, #28]	@ (80003e8 <MX_I2C1_Init+0x50>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003ce:	4b06      	ldr	r3, [pc, #24]	@ (80003e8 <MX_I2C1_Init+0x50>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003d4:	4804      	ldr	r0, [pc, #16]	@ (80003e8 <MX_I2C1_Init+0x50>)
 80003d6:	f003 f87f 	bl	80034d8 <HAL_I2C_Init>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d001      	beq.n	80003e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80003e0:	f001 fe14 	bl	800200c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003e4:	bf00      	nop
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	200002f4 	.word	0x200002f4
 80003ec:	40005400 	.word	0x40005400
 80003f0:	00061a80 	.word	0x00061a80

080003f4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b088      	sub	sp, #32
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003fc:	f107 0310 	add.w	r3, r7, #16
 8000400:	2200      	movs	r2, #0
 8000402:	601a      	str	r2, [r3, #0]
 8000404:	605a      	str	r2, [r3, #4]
 8000406:	609a      	str	r2, [r3, #8]
 8000408:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	4a15      	ldr	r2, [pc, #84]	@ (8000464 <HAL_I2C_MspInit+0x70>)
 8000410:	4293      	cmp	r3, r2
 8000412:	d123      	bne.n	800045c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000414:	4b14      	ldr	r3, [pc, #80]	@ (8000468 <HAL_I2C_MspInit+0x74>)
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	4a13      	ldr	r2, [pc, #76]	@ (8000468 <HAL_I2C_MspInit+0x74>)
 800041a:	f043 0308 	orr.w	r3, r3, #8
 800041e:	6193      	str	r3, [r2, #24]
 8000420:	4b11      	ldr	r3, [pc, #68]	@ (8000468 <HAL_I2C_MspInit+0x74>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	f003 0308 	and.w	r3, r3, #8
 8000428:	60fb      	str	r3, [r7, #12]
 800042a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800042c:	23c0      	movs	r3, #192	@ 0xc0
 800042e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000430:	2312      	movs	r3, #18
 8000432:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000434:	2303      	movs	r3, #3
 8000436:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000438:	f107 0310 	add.w	r3, r7, #16
 800043c:	4619      	mov	r1, r3
 800043e:	480b      	ldr	r0, [pc, #44]	@ (800046c <HAL_I2C_MspInit+0x78>)
 8000440:	f002 fe7e 	bl	8003140 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000444:	4b08      	ldr	r3, [pc, #32]	@ (8000468 <HAL_I2C_MspInit+0x74>)
 8000446:	69db      	ldr	r3, [r3, #28]
 8000448:	4a07      	ldr	r2, [pc, #28]	@ (8000468 <HAL_I2C_MspInit+0x74>)
 800044a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800044e:	61d3      	str	r3, [r2, #28]
 8000450:	4b05      	ldr	r3, [pc, #20]	@ (8000468 <HAL_I2C_MspInit+0x74>)
 8000452:	69db      	ldr	r3, [r3, #28]
 8000454:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000458:	60bb      	str	r3, [r7, #8]
 800045a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800045c:	bf00      	nop
 800045e:	3720      	adds	r7, #32
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	40005400 	.word	0x40005400
 8000468:	40021000 	.word	0x40021000
 800046c:	40010c00 	.word	0x40010c00

08000470 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000472:	b08b      	sub	sp, #44	@ 0x2c
 8000474:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000476:	f002 f81f 	bl	80024b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800047a:	f000 f8c9 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800047e:	f7ff fee7 	bl	8000250 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000482:	f7ff ff89 	bl	8000398 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000486:	f7ff fe61 	bl	800014c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800048a:	f001 ff71 	bl	8002370 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 800048e:	f001 fdc3 	bl	8002018 <MX_SPI1_Init>
//     4, // Month: 1-12
//    25  // Year: 0-99 (0 = 2000, 1 = 2001, ..., 99 = 2099)
//  );

  // Initialize RTC module (Run only once after reset the RTC).
  Time_Ctrl 
 8000492:	2300      	movs	r3, #0
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2300      	movs	r3, #0
 8000498:	9300      	str	r3, [sp, #0]
 800049a:	2300      	movs	r3, #0
 800049c:	2200      	movs	r2, #0
 800049e:	2100      	movs	r1, #0
 80004a0:	2000      	movs	r0, #0
 80004a2:	f000 f9f5 	bl	8000890 <Time_Ctrl>
     0, // Day of the week: 1-7 (1 = Sunday, 2 = Monday, ..., 7 = Saturday), or Date of the month: 1-31
     0  // Select: 1 = day of week, 0 = date of month
  );   

  // Initially retrieve the time values from the RTC module
  Time_Get(&time_get_data);
 80004a6:	484f      	ldr	r0, [pc, #316]	@ (80005e4 <main+0x174>)
 80004a8:	f000 f99e 	bl	80007e8 <Time_Get>
  //   false, // true = ON, false = OFF 
  //    1     // Slot number of the alarm in the EEPROM module (0-9)
  // );  

  // Initially retrieve the alarm slot pointer data from the EEPROM module
  Alarm_Slot_Pointer_Get();
 80004ac:	f000 fbcc 	bl	8000c48 <Alarm_Slot_Pointer_Get>

  // Initially retrieve the alarm values from the EEPROM module and send to system memory
  for (int i = 0; i < alarm_slot_ptr; i++)
 80004b0:	2300      	movs	r3, #0
 80004b2:	61fb      	str	r3, [r7, #28]
 80004b4:	e00e      	b.n	80004d4 <main+0x64>
  {
    Alarm_Get(i, &alarm_get_data[i]);
 80004b6:	69fb      	ldr	r3, [r7, #28]
 80004b8:	b2d8      	uxtb	r0, r3
 80004ba:	69fa      	ldr	r2, [r7, #28]
 80004bc:	4613      	mov	r3, r2
 80004be:	005b      	lsls	r3, r3, #1
 80004c0:	4413      	add	r3, r2
 80004c2:	005b      	lsls	r3, r3, #1
 80004c4:	4a48      	ldr	r2, [pc, #288]	@ (80005e8 <main+0x178>)
 80004c6:	4413      	add	r3, r2
 80004c8:	4619      	mov	r1, r3
 80004ca:	f000 fb2b 	bl	8000b24 <Alarm_Get>
  for (int i = 0; i < alarm_slot_ptr; i++)
 80004ce:	69fb      	ldr	r3, [r7, #28]
 80004d0:	3301      	adds	r3, #1
 80004d2:	61fb      	str	r3, [r7, #28]
 80004d4:	4b45      	ldr	r3, [pc, #276]	@ (80005ec <main+0x17c>)
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	461a      	mov	r2, r3
 80004da:	69fb      	ldr	r3, [r7, #28]
 80004dc:	4293      	cmp	r3, r2
 80004de:	dbea      	blt.n	80004b6 <main+0x46>

  // Set the initial system parameters to current time values and default settings for convenience
  system_param_data =
  (SYSTEM_PARAM_DATA)
  {
    time_get_data.minute,       // Minutes: 0-59
 80004e0:	4b40      	ldr	r3, [pc, #256]	@ (80005e4 <main+0x174>)
 80004e2:	785b      	ldrb	r3, [r3, #1]
 80004e4:	fa5f fc83 	uxtb.w	ip, r3
    time_get_data.hour,         // Hours: 0-23
 80004e8:	4b3e      	ldr	r3, [pc, #248]	@ (80005e4 <main+0x174>)
 80004ea:	789b      	ldrb	r3, [r3, #2]
 80004ec:	b2de      	uxtb	r6, r3
    time_get_data.dayofweek,    // Day of the week: 1-7 (1 = Sunday, 2 = Monday, ..., 7 = Saturday)
 80004ee:	4b3d      	ldr	r3, [pc, #244]	@ (80005e4 <main+0x174>)
 80004f0:	78db      	ldrb	r3, [r3, #3]
 80004f2:	b2dd      	uxtb	r5, r3
    time_get_data.dateofmonth,  // Date of the month: 1-31
 80004f4:	4b3b      	ldr	r3, [pc, #236]	@ (80005e4 <main+0x174>)
 80004f6:	791b      	ldrb	r3, [r3, #4]
 80004f8:	b2dc      	uxtb	r4, r3
    time_get_data.month,        // Month: 1-12
 80004fa:	4b3a      	ldr	r3, [pc, #232]	@ (80005e4 <main+0x174>)
 80004fc:	795b      	ldrb	r3, [r3, #5]
 80004fe:	b2d8      	uxtb	r0, r3
    time_get_data.year,         // Year: 0-99 (0 = 2000, 1 = 2001, ..., 99 = 2099)
 8000500:	4b38      	ldr	r3, [pc, #224]	@ (80005e4 <main+0x174>)
 8000502:	799b      	ldrb	r3, [r3, #6]
 8000504:	b2d9      	uxtb	r1, r3
    NOT_USED_MODE,              // Select: DAY_OF_WEEK_MODE, DATE_OF_MONTH_MODE, NOT_USED_MODE
    time_get_data.dayofweek,    // Day of the week: 1-7 (1 = Sunday, 2 = Monday, ..., 7 = Saturday), or Date of the month: 1-31
 8000506:	4b37      	ldr	r3, [pc, #220]	@ (80005e4 <main+0x174>)
 8000508:	78db      	ldrb	r3, [r3, #3]
 800050a:	b2da      	uxtb	r2, r3
  system_param_data =
 800050c:	4b38      	ldr	r3, [pc, #224]	@ (80005f0 <main+0x180>)
 800050e:	f883 c000 	strb.w	ip, [r3]
 8000512:	4b37      	ldr	r3, [pc, #220]	@ (80005f0 <main+0x180>)
 8000514:	705e      	strb	r6, [r3, #1]
 8000516:	4b36      	ldr	r3, [pc, #216]	@ (80005f0 <main+0x180>)
 8000518:	709d      	strb	r5, [r3, #2]
 800051a:	4b35      	ldr	r3, [pc, #212]	@ (80005f0 <main+0x180>)
 800051c:	70dc      	strb	r4, [r3, #3]
 800051e:	4b34      	ldr	r3, [pc, #208]	@ (80005f0 <main+0x180>)
 8000520:	7118      	strb	r0, [r3, #4]
 8000522:	4b33      	ldr	r3, [pc, #204]	@ (80005f0 <main+0x180>)
 8000524:	7159      	strb	r1, [r3, #5]
 8000526:	4b32      	ldr	r3, [pc, #200]	@ (80005f0 <main+0x180>)
 8000528:	2102      	movs	r1, #2
 800052a:	7199      	strb	r1, [r3, #6]
 800052c:	4b30      	ldr	r3, [pc, #192]	@ (80005f0 <main+0x180>)
 800052e:	71da      	strb	r2, [r3, #7]
 8000530:	4b2f      	ldr	r3, [pc, #188]	@ (80005f0 <main+0x180>)
 8000532:	2201      	movs	r2, #1
 8000534:	721a      	strb	r2, [r3, #8]
    true                        // true = ON, false = OFF
  };

  // Initialize the UART module to receive data
  //    HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size);
  HAL_UART_Receive_IT(&huart1, uart_rx_data, 2);
 8000536:	2202      	movs	r2, #2
 8000538:	492e      	ldr	r1, [pc, #184]	@ (80005f4 <main+0x184>)
 800053a:	482f      	ldr	r0, [pc, #188]	@ (80005f8 <main+0x188>)
 800053c:	f004 ffc9 	bl	80054d2 <HAL_UART_Receive_IT>

  // Initialize the ADC module to monitor battery voltage
  //    HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc);
  HAL_ADC_Start_IT(&hadc1);
 8000540:	482e      	ldr	r0, [pc, #184]	@ (80005fc <main+0x18c>)
 8000542:	f002 f917 	bl	8002774 <HAL_ADC_Start_IT>
    
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    Button_Handle();
 8000546:	f000 fc93 	bl	8000e70 <Button_Handle>
    int a;
    a = 1;
 800054a:	2301      	movs	r3, #1
 800054c:	60fb      	str	r3, [r7, #12]

    TIME_DATA time_get;
    

    // Check if the RTC Interrupt Flag is set (RTC Interrupt Flag) on PB4 (Activated every second)
    if (rtc_int_flag)
 800054e:	4b2c      	ldr	r3, [pc, #176]	@ (8000600 <main+0x190>)
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	b2db      	uxtb	r3, r3
 8000554:	2b00      	cmp	r3, #0
 8000556:	d02c      	beq.n	80005b2 <main+0x142>
    {
      // Retrieve the time values from the RTC module
      Time_Get(&time_get_data);
 8000558:	4822      	ldr	r0, [pc, #136]	@ (80005e4 <main+0x174>)
 800055a:	f000 f945 	bl	80007e8 <Time_Get>
      
      // Check the alarms
      //   void Alarm_Check (volatile TIME_DATA *time_get_data)
      Alarm_Check(&time_get_data);
 800055e:	4821      	ldr	r0, [pc, #132]	@ (80005e4 <main+0x174>)
 8000560:	f000 fb8c 	bl	8000c7c <Alarm_Check>

      // Reset the RTC Interrupt Flag
      rtc_int_flag = false;
 8000564:	4b26      	ldr	r3, [pc, #152]	@ (8000600 <main+0x190>)
 8000566:	2200      	movs	r2, #0
 8000568:	701a      	strb	r2, [r3, #0]

      // Toggle the debug RTC interrupt flag for debugging purposes
      debug_rtc_int = !debug_rtc_int;
 800056a:	4b26      	ldr	r3, [pc, #152]	@ (8000604 <main+0x194>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	b2db      	uxtb	r3, r3
 8000570:	2b00      	cmp	r3, #0
 8000572:	bf14      	ite	ne
 8000574:	2301      	movne	r3, #1
 8000576:	2300      	moveq	r3, #0
 8000578:	b2db      	uxtb	r3, r3
 800057a:	f083 0301 	eor.w	r3, r3, #1
 800057e:	b2db      	uxtb	r3, r3
 8000580:	f003 0301 	and.w	r3, r3, #1
 8000584:	b2da      	uxtb	r2, r3
 8000586:	4b1f      	ldr	r3, [pc, #124]	@ (8000604 <main+0x194>)
 8000588:	701a      	strb	r2, [r3, #0]

      time_get = (TIME_DATA) time_get_data;    
 800058a:	4a16      	ldr	r2, [pc, #88]	@ (80005e4 <main+0x174>)
 800058c:	1d3b      	adds	r3, r7, #4
 800058e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000592:	6018      	str	r0, [r3, #0]
 8000594:	3304      	adds	r3, #4
 8000596:	8019      	strh	r1, [r3, #0]
 8000598:	3302      	adds	r3, #2
 800059a:	0c0a      	lsrs	r2, r1, #16
 800059c:	701a      	strb	r2, [r3, #0]
      default_mode(&a, &time_get.hour, &time_get.minute, &time_get.second);
 800059e:	1d3c      	adds	r4, r7, #4
 80005a0:	1d3b      	adds	r3, r7, #4
 80005a2:	1c5a      	adds	r2, r3, #1
 80005a4:	1d3b      	adds	r3, r7, #4
 80005a6:	1c99      	adds	r1, r3, #2
 80005a8:	f107 000c 	add.w	r0, r7, #12
 80005ac:	4623      	mov	r3, r4
 80005ae:	f005 ff57 	bl	8006460 <default_mode>
    }

    // Check if the ADC interrupt flag is set (ADC Valid Flag)
    if (adc_valid_flag)
 80005b2:	4b15      	ldr	r3, [pc, #84]	@ (8000608 <main+0x198>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d005      	beq.n	80005c8 <main+0x158>
	  {
      // Re-enable the ADC interrupt to continue monitoring ADC values
      HAL_ADC_Start_IT(&hadc1);
 80005bc:	480f      	ldr	r0, [pc, #60]	@ (80005fc <main+0x18c>)
 80005be:	f002 f8d9 	bl	8002774 <HAL_ADC_Start_IT>

      // Delay for 100ms to allow the ADC to stabilize
      HAL_Delay(100);
 80005c2:	2064      	movs	r0, #100	@ 0x64
 80005c4:	f001 ffda 	bl	800257c <HAL_Delay>
	  }

    // Check if the UART interrupt flag is set (UART Receive Flag)
    if (uart_rx_flag)
 80005c8:	4b10      	ldr	r3, [pc, #64]	@ (800060c <main+0x19c>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d0b9      	beq.n	8000546 <main+0xd6>
	  {
      // Re-enable the UART interrupt to continue receiving data
      HAL_UART_Receive_IT(&huart1,uart_rx_data,2); 
 80005d2:	2202      	movs	r2, #2
 80005d4:	4907      	ldr	r1, [pc, #28]	@ (80005f4 <main+0x184>)
 80005d6:	4808      	ldr	r0, [pc, #32]	@ (80005f8 <main+0x188>)
 80005d8:	f004 ff7b 	bl	80054d2 <HAL_UART_Receive_IT>
      
      // Delay for 100ms to allow the UART to stabilize
      HAL_Delay(100);
 80005dc:	2064      	movs	r0, #100	@ 0x64
 80005de:	f001 ffcd 	bl	800257c <HAL_Delay>
  {
 80005e2:	e7b0      	b.n	8000546 <main+0xd6>
 80005e4:	20000358 	.word	0x20000358
 80005e8:	20000360 	.word	0x20000360
 80005ec:	2000039c 	.word	0x2000039c
 80005f0:	2000034c 	.word	0x2000034c
 80005f4:	200003ac 	.word	0x200003ac
 80005f8:	2000040c 	.word	0x2000040c
 80005fc:	200002c4 	.word	0x200002c4
 8000600:	2000039d 	.word	0x2000039d
 8000604:	2000039f 	.word	0x2000039f
 8000608:	200003a5 	.word	0x200003a5
 800060c:	200003aa 	.word	0x200003aa

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b094      	sub	sp, #80	@ 0x50
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800061a:	2228      	movs	r2, #40	@ 0x28
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f006 ff2a 	bl	8007478 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	f107 0314 	add.w	r3, r7, #20
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000640:	2301      	movs	r3, #1
 8000642:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000644:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000648:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800064a:	2300      	movs	r3, #0
 800064c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800064e:	2301      	movs	r3, #1
 8000650:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000652:	2302      	movs	r3, #2
 8000654:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000656:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800065a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800065c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000660:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000662:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000666:	4618      	mov	r0, r3
 8000668:	f003 ff9c 	bl	80045a4 <HAL_RCC_OscConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000672:	f001 fccb 	bl	800200c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000676:	230f      	movs	r3, #15
 8000678:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067a:	2302      	movs	r3, #2
 800067c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000682:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000686:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800068c:	f107 0314 	add.w	r3, r7, #20
 8000690:	2102      	movs	r1, #2
 8000692:	4618      	mov	r0, r3
 8000694:	f004 fa08 	bl	8004aa8 <HAL_RCC_ClockConfig>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800069e:	f001 fcb5 	bl	800200c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80006a2:	2302      	movs	r3, #2
 80006a4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80006a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80006aa:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006ac:	1d3b      	adds	r3, r7, #4
 80006ae:	4618      	mov	r0, r3
 80006b0:	f004 fb88 	bl	8004dc4 <HAL_RCCEx_PeriphCLKConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006ba:	f001 fca7 	bl	800200c <Error_Handler>
  }
}
 80006be:	bf00      	nop
 80006c0:	3750      	adds	r7, #80	@ 0x50
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
	...

080006c8 <Dec_To_BCD>:
  * @brief  Convert a normal decimal number to Binary Coded Decimal (BCD).
  * @param  val: Decimal number to be converted.
  * @retval uint8_t: BCD representation of the input decimal number.
  */
uint8_t Dec_To_BCD(int val)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  return (uint8_t)( (val/10*16) + (val%10) );
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	4a0e      	ldr	r2, [pc, #56]	@ (800070c <Dec_To_BCD+0x44>)
 80006d4:	fb82 1203 	smull	r1, r2, r2, r3
 80006d8:	1092      	asrs	r2, r2, #2
 80006da:	17db      	asrs	r3, r3, #31
 80006dc:	1ad3      	subs	r3, r2, r3
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	011b      	lsls	r3, r3, #4
 80006e2:	b2d8      	uxtb	r0, r3
 80006e4:	687a      	ldr	r2, [r7, #4]
 80006e6:	4b09      	ldr	r3, [pc, #36]	@ (800070c <Dec_To_BCD+0x44>)
 80006e8:	fb83 1302 	smull	r1, r3, r3, r2
 80006ec:	1099      	asrs	r1, r3, #2
 80006ee:	17d3      	asrs	r3, r2, #31
 80006f0:	1ac9      	subs	r1, r1, r3
 80006f2:	460b      	mov	r3, r1
 80006f4:	009b      	lsls	r3, r3, #2
 80006f6:	440b      	add	r3, r1
 80006f8:	005b      	lsls	r3, r3, #1
 80006fa:	1ad1      	subs	r1, r2, r3
 80006fc:	b2cb      	uxtb	r3, r1
 80006fe:	4403      	add	r3, r0
 8000700:	b2db      	uxtb	r3, r3
}
 8000702:	4618      	mov	r0, r3
 8000704:	370c      	adds	r7, #12
 8000706:	46bd      	mov	sp, r7
 8000708:	bc80      	pop	{r7}
 800070a:	4770      	bx	lr
 800070c:	66666667 	.word	0x66666667

08000710 <BCD_To_Dec>:
  * @brief  Convert a Binary Coded Decimal (BCD) value to a normal decimal number.
  * @param  val: BCD value to be converted.
  * @retval int: Decimal representation of the input BCD value.
  */
int BCD_To_Dec(uint8_t val)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	71fb      	strb	r3, [r7, #7]
  return (int)( (val/16*10) + (val%16) );
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	091b      	lsrs	r3, r3, #4
 800071e:	b2db      	uxtb	r3, r3
 8000720:	461a      	mov	r2, r3
 8000722:	4613      	mov	r3, r2
 8000724:	009b      	lsls	r3, r3, #2
 8000726:	4413      	add	r3, r2
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	461a      	mov	r2, r3
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	f003 030f 	and.w	r3, r3, #15
 8000732:	4413      	add	r3, r2
}
 8000734:	4618      	mov	r0, r3
 8000736:	370c      	adds	r7, #12
 8000738:	46bd      	mov	sp, r7
 800073a:	bc80      	pop	{r7}
 800073c:	4770      	bx	lr
	...

08000740 <Time_Set>:
  * @param  month: Month: 1-12
  * @param  year: Year: 0-99 (0 = 2000, 1 = 2001, ..., 99 = 2099)
  * @retval None
*/
void Time_Set (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom, uint8_t month, uint8_t year)
{
 8000740:	b590      	push	{r4, r7, lr}
 8000742:	b089      	sub	sp, #36	@ 0x24
 8000744:	af04      	add	r7, sp, #16
 8000746:	4604      	mov	r4, r0
 8000748:	4608      	mov	r0, r1
 800074a:	4611      	mov	r1, r2
 800074c:	461a      	mov	r2, r3
 800074e:	4623      	mov	r3, r4
 8000750:	71fb      	strb	r3, [r7, #7]
 8000752:	4603      	mov	r3, r0
 8000754:	71bb      	strb	r3, [r7, #6]
 8000756:	460b      	mov	r3, r1
 8000758:	717b      	strb	r3, [r7, #5]
 800075a:	4613      	mov	r3, r2
 800075c:	713b      	strb	r3, [r7, #4]
	// A blank array (7 slots) to contain the time values
  uint8_t setTime[7];

  // Store the time values (converted in to BCD code) into the blank array
	setTime[0] = Dec_To_BCD(sec);
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff ffb1 	bl	80006c8 <Dec_To_BCD>
 8000766:	4603      	mov	r3, r0
 8000768:	723b      	strb	r3, [r7, #8]
	setTime[1] = Dec_To_BCD(min);
 800076a:	79bb      	ldrb	r3, [r7, #6]
 800076c:	4618      	mov	r0, r3
 800076e:	f7ff ffab 	bl	80006c8 <Dec_To_BCD>
 8000772:	4603      	mov	r3, r0
 8000774:	727b      	strb	r3, [r7, #9]
	setTime[2] = Dec_To_BCD(hour);
 8000776:	797b      	ldrb	r3, [r7, #5]
 8000778:	4618      	mov	r0, r3
 800077a:	f7ff ffa5 	bl	80006c8 <Dec_To_BCD>
 800077e:	4603      	mov	r3, r0
 8000780:	72bb      	strb	r3, [r7, #10]
	setTime[3] = Dec_To_BCD(dow);
 8000782:	793b      	ldrb	r3, [r7, #4]
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff ff9f 	bl	80006c8 <Dec_To_BCD>
 800078a:	4603      	mov	r3, r0
 800078c:	72fb      	strb	r3, [r7, #11]
	setTime[4] = Dec_To_BCD(dom);
 800078e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000792:	4618      	mov	r0, r3
 8000794:	f7ff ff98 	bl	80006c8 <Dec_To_BCD>
 8000798:	4603      	mov	r3, r0
 800079a:	733b      	strb	r3, [r7, #12]
	setTime[5] = Dec_To_BCD(month);
 800079c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80007a0:	4618      	mov	r0, r3
 80007a2:	f7ff ff91 	bl	80006c8 <Dec_To_BCD>
 80007a6:	4603      	mov	r3, r0
 80007a8:	737b      	strb	r3, [r7, #13]
	setTime[6] = Dec_To_BCD(year);
 80007aa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80007ae:	4618      	mov	r0, r3
 80007b0:	f7ff ff8a 	bl	80006c8 <Dec_To_BCD>
 80007b4:	4603      	mov	r3, r0
 80007b6:	73bb      	strb	r3, [r7, #14]

  // Send the array containing the time values to the RTC module through I2C interface at address 00h - 06h (size of value: 7 bytes)
  // HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
  //    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);	
  HAL_I2C_Mem_Write(DS3231_I2C, DS3231_ADDR, 0x00, 1, setTime, sizeof(setTime), 1000);
 80007b8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007bc:	9302      	str	r3, [sp, #8]
 80007be:	2307      	movs	r3, #7
 80007c0:	9301      	str	r3, [sp, #4]
 80007c2:	f107 0308 	add.w	r3, r7, #8
 80007c6:	9300      	str	r3, [sp, #0]
 80007c8:	2301      	movs	r3, #1
 80007ca:	2200      	movs	r2, #0
 80007cc:	21d0      	movs	r1, #208	@ 0xd0
 80007ce:	4805      	ldr	r0, [pc, #20]	@ (80007e4 <Time_Set+0xa4>)
 80007d0:	f002 ffc6 	bl	8003760 <HAL_I2C_Mem_Write>

  // Delay for 1ms to allow the RTC module to process the data
  HAL_Delay(1);
 80007d4:	2001      	movs	r0, #1
 80007d6:	f001 fed1 	bl	800257c <HAL_Delay>
}
 80007da:	bf00      	nop
 80007dc:	3714      	adds	r7, #20
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd90      	pop	{r4, r7, pc}
 80007e2:	bf00      	nop
 80007e4:	200002f4 	.word	0x200002f4

080007e8 <Time_Get>:
  * @brief  Get time from the RTC module through I2C interface.
  * @param  time_get_data: Pointer to a TIME structure to store the retrieved time values.
  * @retval None
*/
void Time_Get (volatile TIME_DATA *time_get_data)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b088      	sub	sp, #32
 80007ec:	af04      	add	r7, sp, #16
 80007ee:	6078      	str	r0, [r7, #4]
  uint8_t getTime[7];

  // Receive the time values from the RTC module through I2C interface, then store them into the blank array (size of value: 7 bytes)
  // HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
  //    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);  
  HAL_I2C_Mem_Read(DS3231_I2C, DS3231_ADDR, 0x00, 1, getTime, sizeof(getTime), 1000);
 80007f0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007f4:	9302      	str	r3, [sp, #8]
 80007f6:	2307      	movs	r3, #7
 80007f8:	9301      	str	r3, [sp, #4]
 80007fa:	f107 0308 	add.w	r3, r7, #8
 80007fe:	9300      	str	r3, [sp, #0]
 8000800:	2301      	movs	r3, #1
 8000802:	2200      	movs	r2, #0
 8000804:	21d0      	movs	r1, #208	@ 0xd0
 8000806:	4821      	ldr	r0, [pc, #132]	@ (800088c <Time_Get+0xa4>)
 8000808:	f003 f8a4 	bl	8003954 <HAL_I2C_Mem_Read>

  // Delay for 1ms to allow the RTC module to process the data
  HAL_Delay(1);
 800080c:	2001      	movs	r0, #1
 800080e:	f001 feb5 	bl	800257c <HAL_Delay>

  // Store the time values (converted from BCD code to decimal) into the time variable
	time_get_data->second       = BCD_To_Dec(getTime[0]);
 8000812:	7a3b      	ldrb	r3, [r7, #8]
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff ff7b 	bl	8000710 <BCD_To_Dec>
 800081a:	4603      	mov	r3, r0
 800081c:	b2da      	uxtb	r2, r3
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	701a      	strb	r2, [r3, #0]
	time_get_data->minute       = BCD_To_Dec(getTime[1]);
 8000822:	7a7b      	ldrb	r3, [r7, #9]
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff ff73 	bl	8000710 <BCD_To_Dec>
 800082a:	4603      	mov	r3, r0
 800082c:	b2da      	uxtb	r2, r3
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	705a      	strb	r2, [r3, #1]
	time_get_data->hour         = BCD_To_Dec(getTime[2]);
 8000832:	7abb      	ldrb	r3, [r7, #10]
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff ff6b 	bl	8000710 <BCD_To_Dec>
 800083a:	4603      	mov	r3, r0
 800083c:	b2da      	uxtb	r2, r3
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	709a      	strb	r2, [r3, #2]
	time_get_data->dayofweek    = BCD_To_Dec(getTime[3]);
 8000842:	7afb      	ldrb	r3, [r7, #11]
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff ff63 	bl	8000710 <BCD_To_Dec>
 800084a:	4603      	mov	r3, r0
 800084c:	b2da      	uxtb	r2, r3
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	70da      	strb	r2, [r3, #3]
	time_get_data->dateofmonth  = BCD_To_Dec(getTime[4]);
 8000852:	7b3b      	ldrb	r3, [r7, #12]
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff ff5b 	bl	8000710 <BCD_To_Dec>
 800085a:	4603      	mov	r3, r0
 800085c:	b2da      	uxtb	r2, r3
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	711a      	strb	r2, [r3, #4]
	time_get_data->month        = BCD_To_Dec(getTime[5]);
 8000862:	7b7b      	ldrb	r3, [r7, #13]
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff ff53 	bl	8000710 <BCD_To_Dec>
 800086a:	4603      	mov	r3, r0
 800086c:	b2da      	uxtb	r2, r3
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	715a      	strb	r2, [r3, #5]
	time_get_data->year         = BCD_To_Dec(getTime[6]);
 8000872:	7bbb      	ldrb	r3, [r7, #14]
 8000874:	4618      	mov	r0, r3
 8000876:	f7ff ff4b 	bl	8000710 <BCD_To_Dec>
 800087a:	4603      	mov	r3, r0
 800087c:	b2da      	uxtb	r2, r3
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	719a      	strb	r2, [r3, #6]
}
 8000882:	bf00      	nop
 8000884:	3710      	adds	r7, #16
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	200002f4 	.word	0x200002f4

08000890 <Time_Ctrl>:
  * @param  dow_dom: Day of the week or date of the month (1-7 or 1-31).
  * @param  dy_dt: Day of week or date of month (1 = day of week, 0 = date of month, 0 = not used).
  * @retval None
*/
void Time_Ctrl (uint8_t mode, uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow_dom, bool dy_dt)
{
 8000890:	b590      	push	{r4, r7, lr}
 8000892:	b08b      	sub	sp, #44	@ 0x2c
 8000894:	af04      	add	r7, sp, #16
 8000896:	4604      	mov	r4, r0
 8000898:	4608      	mov	r0, r1
 800089a:	4611      	mov	r1, r2
 800089c:	461a      	mov	r2, r3
 800089e:	4623      	mov	r3, r4
 80008a0:	71fb      	strb	r3, [r7, #7]
 80008a2:	4603      	mov	r3, r0
 80008a4:	71bb      	strb	r3, [r7, #6]
 80008a6:	460b      	mov	r3, r1
 80008a8:	717b      	strb	r3, [r7, #5]
 80008aa:	4613      	mov	r3, r2
 80008ac:	713b      	strb	r3, [r7, #4]
  // A blank array (4 slots) to contain the RTC alarm settings
  uint8_t ctrlTime[4];

  // A mask bit to set the Control register in the RTC module
  //    Address 0Eh: A1IE = 1
  uint8_t ctrlAlarm = 1; 
 80008ae:	2301      	movs	r3, #1
 80008b0:	73fb      	strb	r3, [r7, #15]

  // A mask bit to set the alarm modes (Bit 7) in the RTC module
  uint8_t maskBit = 128;
 80008b2:	2380      	movs	r3, #128	@ 0x80
 80008b4:	75fb      	strb	r3, [r7, #23]

  // A mask bit for selection of [day of week] or [date of month] (Bit 6) in the RTC module
  //    If the input [day of week]/ [date of month] selection is 1, the mask bit will be 64.
  uint8_t dyDt = (dy_dt == true) ? 64 : 0;
 80008b6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <Time_Ctrl+0x32>
 80008be:	2340      	movs	r3, #64	@ 0x40
 80008c0:	e000      	b.n	80008c4 <Time_Ctrl+0x34>
 80008c2:	2300      	movs	r3, #0
 80008c4:	75bb      	strb	r3, [r7, #22]

  // Store the RTC alarm time settings (converted into BCD code) into the blank array
  ctrlTime[0] = Dec_To_BCD(sec);
 80008c6:	79bb      	ldrb	r3, [r7, #6]
 80008c8:	4618      	mov	r0, r3
 80008ca:	f7ff fefd 	bl	80006c8 <Dec_To_BCD>
 80008ce:	4603      	mov	r3, r0
 80008d0:	743b      	strb	r3, [r7, #16]
	ctrlTime[1] = Dec_To_BCD(min);
 80008d2:	797b      	ldrb	r3, [r7, #5]
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff fef7 	bl	80006c8 <Dec_To_BCD>
 80008da:	4603      	mov	r3, r0
 80008dc:	747b      	strb	r3, [r7, #17]
	ctrlTime[2] = Dec_To_BCD(hour);
 80008de:	793b      	ldrb	r3, [r7, #4]
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff fef1 	bl	80006c8 <Dec_To_BCD>
 80008e6:	4603      	mov	r3, r0
 80008e8:	74bb      	strb	r3, [r7, #18]
	ctrlTime[3] = Dec_To_BCD(dow_dom);
 80008ea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80008ee:	4618      	mov	r0, r3
 80008f0:	f7ff feea 	bl	80006c8 <Dec_To_BCD>
 80008f4:	4603      	mov	r3, r0
 80008f6:	74fb      	strb	r3, [r7, #19]
  //      1    : Alarm when seconds match
  //      2    : Alarm when minutes and seconds match
  //      3    : Alarm when hours, minutes, and seconds match
  //      4    : Alarm when date, hours, minutes, and seconds match
  //      5    : Alarm when day, hours, minutes, and seconds match
  switch (mode)
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	2b05      	cmp	r3, #5
 80008fc:	d865      	bhi.n	80009ca <Time_Ctrl+0x13a>
 80008fe:	a201      	add	r2, pc, #4	@ (adr r2, 8000904 <Time_Ctrl+0x74>)
 8000900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000904:	0800091d 	.word	0x0800091d
 8000908:	08000947 	.word	0x08000947
 800090c:	0800096b 	.word	0x0800096b
 8000910:	08000989 	.word	0x08000989
 8000914:	080009a1 	.word	0x080009a1
 8000918:	080009b3 	.word	0x080009b3
  {
    case 0:
      // Alarm mask bit: A1M4:A1M1 = b1111, DY/DT = X
      ctrlTime[0] += maskBit;
 800091c:	7c3a      	ldrb	r2, [r7, #16]
 800091e:	7dfb      	ldrb	r3, [r7, #23]
 8000920:	4413      	add	r3, r2
 8000922:	b2db      	uxtb	r3, r3
 8000924:	743b      	strb	r3, [r7, #16]
      ctrlTime[1] += maskBit;
 8000926:	7c7a      	ldrb	r2, [r7, #17]
 8000928:	7dfb      	ldrb	r3, [r7, #23]
 800092a:	4413      	add	r3, r2
 800092c:	b2db      	uxtb	r3, r3
 800092e:	747b      	strb	r3, [r7, #17]
      ctrlTime[2] += maskBit;
 8000930:	7cba      	ldrb	r2, [r7, #18]
 8000932:	7dfb      	ldrb	r3, [r7, #23]
 8000934:	4413      	add	r3, r2
 8000936:	b2db      	uxtb	r3, r3
 8000938:	74bb      	strb	r3, [r7, #18]
      ctrlTime[3] += maskBit;
 800093a:	7cfa      	ldrb	r2, [r7, #19]
 800093c:	7dfb      	ldrb	r3, [r7, #23]
 800093e:	4413      	add	r3, r2
 8000940:	b2db      	uxtb	r3, r3
 8000942:	74fb      	strb	r3, [r7, #19]
      break;
 8000944:	e04a      	b.n	80009dc <Time_Ctrl+0x14c>
    case 1:
      // Alarm mask bit: A1M4:A1M1 = b1110, DY/DT = X
      ctrlTime[0] += 0;
 8000946:	7c3b      	ldrb	r3, [r7, #16]
 8000948:	743b      	strb	r3, [r7, #16]
      ctrlTime[1] += maskBit;
 800094a:	7c7a      	ldrb	r2, [r7, #17]
 800094c:	7dfb      	ldrb	r3, [r7, #23]
 800094e:	4413      	add	r3, r2
 8000950:	b2db      	uxtb	r3, r3
 8000952:	747b      	strb	r3, [r7, #17]
      ctrlTime[2] += maskBit;
 8000954:	7cba      	ldrb	r2, [r7, #18]
 8000956:	7dfb      	ldrb	r3, [r7, #23]
 8000958:	4413      	add	r3, r2
 800095a:	b2db      	uxtb	r3, r3
 800095c:	74bb      	strb	r3, [r7, #18]
      ctrlTime[3] += maskBit;
 800095e:	7cfa      	ldrb	r2, [r7, #19]
 8000960:	7dfb      	ldrb	r3, [r7, #23]
 8000962:	4413      	add	r3, r2
 8000964:	b2db      	uxtb	r3, r3
 8000966:	74fb      	strb	r3, [r7, #19]
      break;
 8000968:	e038      	b.n	80009dc <Time_Ctrl+0x14c>
    case 2:
      // Alarm mask bit: A1M4:A1M1 = b1100, DY/DT = X
      ctrlTime[0] += 0;
 800096a:	7c3b      	ldrb	r3, [r7, #16]
 800096c:	743b      	strb	r3, [r7, #16]
      ctrlTime[1] += 0;
 800096e:	7c7b      	ldrb	r3, [r7, #17]
 8000970:	747b      	strb	r3, [r7, #17]
      ctrlTime[2] += maskBit;
 8000972:	7cba      	ldrb	r2, [r7, #18]
 8000974:	7dfb      	ldrb	r3, [r7, #23]
 8000976:	4413      	add	r3, r2
 8000978:	b2db      	uxtb	r3, r3
 800097a:	74bb      	strb	r3, [r7, #18]
      ctrlTime[3] += maskBit;
 800097c:	7cfa      	ldrb	r2, [r7, #19]
 800097e:	7dfb      	ldrb	r3, [r7, #23]
 8000980:	4413      	add	r3, r2
 8000982:	b2db      	uxtb	r3, r3
 8000984:	74fb      	strb	r3, [r7, #19]
      break;
 8000986:	e029      	b.n	80009dc <Time_Ctrl+0x14c>
    case 3:
      // Alarm mask bit: A1M4:A1M1 = b1000, DY/DT = X
      ctrlTime[0] += 0;
 8000988:	7c3b      	ldrb	r3, [r7, #16]
 800098a:	743b      	strb	r3, [r7, #16]
      ctrlTime[1] += 0;
 800098c:	7c7b      	ldrb	r3, [r7, #17]
 800098e:	747b      	strb	r3, [r7, #17]
      ctrlTime[2] += 0;
 8000990:	7cbb      	ldrb	r3, [r7, #18]
 8000992:	74bb      	strb	r3, [r7, #18]
      ctrlTime[3] += maskBit;
 8000994:	7cfa      	ldrb	r2, [r7, #19]
 8000996:	7dfb      	ldrb	r3, [r7, #23]
 8000998:	4413      	add	r3, r2
 800099a:	b2db      	uxtb	r3, r3
 800099c:	74fb      	strb	r3, [r7, #19]
      break;
 800099e:	e01d      	b.n	80009dc <Time_Ctrl+0x14c>
    case 4:
      // Alarm mask bit: A1M4:A1M1 = b0000, DY/DT = 0
      ctrlTime[0] += 0;
 80009a0:	7c3b      	ldrb	r3, [r7, #16]
 80009a2:	743b      	strb	r3, [r7, #16]
      ctrlTime[1] += 0;
 80009a4:	7c7b      	ldrb	r3, [r7, #17]
 80009a6:	747b      	strb	r3, [r7, #17]
      ctrlTime[2] += 0;
 80009a8:	7cbb      	ldrb	r3, [r7, #18]
 80009aa:	74bb      	strb	r3, [r7, #18]
      ctrlTime[3] += 0;
 80009ac:	7cfb      	ldrb	r3, [r7, #19]
 80009ae:	74fb      	strb	r3, [r7, #19]
      break;
 80009b0:	e014      	b.n	80009dc <Time_Ctrl+0x14c>
    case 5:
      // Alarm mask bit: A1M4:A1M1 = b0000, DY/DT = 1
      ctrlTime[0] += 0;
 80009b2:	7c3b      	ldrb	r3, [r7, #16]
 80009b4:	743b      	strb	r3, [r7, #16]
      ctrlTime[1] += 0;
 80009b6:	7c7b      	ldrb	r3, [r7, #17]
 80009b8:	747b      	strb	r3, [r7, #17]
      ctrlTime[2] += 0;
 80009ba:	7cbb      	ldrb	r3, [r7, #18]
 80009bc:	74bb      	strb	r3, [r7, #18]
      ctrlTime[3] += dyDt;
 80009be:	7cfa      	ldrb	r2, [r7, #19]
 80009c0:	7dbb      	ldrb	r3, [r7, #22]
 80009c2:	4413      	add	r3, r2
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	74fb      	strb	r3, [r7, #19]
      break;
 80009c8:	e008      	b.n	80009dc <Time_Ctrl+0x14c>
    default:
      // Alarm mask bit: A1M4:A1M1 = b0000, DY/DT = 0
      ctrlTime[0] += 0;
 80009ca:	7c3b      	ldrb	r3, [r7, #16]
 80009cc:	743b      	strb	r3, [r7, #16]
      ctrlTime[1] += 0;
 80009ce:	7c7b      	ldrb	r3, [r7, #17]
 80009d0:	747b      	strb	r3, [r7, #17]
      ctrlTime[2] += 0;
 80009d2:	7cbb      	ldrb	r3, [r7, #18]
 80009d4:	74bb      	strb	r3, [r7, #18]
      ctrlTime[3] += 0;
 80009d6:	7cfb      	ldrb	r3, [r7, #19]
 80009d8:	74fb      	strb	r3, [r7, #19]
      break;
 80009da:	bf00      	nop
  }

  // Send the array containing the RTC alarm mode setting to the RTC module through I2C interface at address 07h - 0Ah (size of value: 4 bytes)
  // HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
  //    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);	  
  HAL_I2C_Mem_Write(DS3231_I2C, DS3231_ADDR, 0x07, 1, ctrlTime, sizeof(ctrlTime), 1000);
 80009dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009e0:	9302      	str	r3, [sp, #8]
 80009e2:	2304      	movs	r3, #4
 80009e4:	9301      	str	r3, [sp, #4]
 80009e6:	f107 0310 	add.w	r3, r7, #16
 80009ea:	9300      	str	r3, [sp, #0]
 80009ec:	2301      	movs	r3, #1
 80009ee:	2207      	movs	r2, #7
 80009f0:	21d0      	movs	r1, #208	@ 0xd0
 80009f2:	480d      	ldr	r0, [pc, #52]	@ (8000a28 <Time_Ctrl+0x198>)
 80009f4:	f002 feb4 	bl	8003760 <HAL_I2C_Mem_Write>

  // Delay for 1ms to allow the RTC module to process the data
  HAL_Delay(1);
 80009f8:	2001      	movs	r0, #1
 80009fa:	f001 fdbf 	bl	800257c <HAL_Delay>

  // Send the alarm control mask bits to the RTC module through I2C interface at address 0Eh (size of value: 1 byte)
  // HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
  //    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);	  
  HAL_I2C_Mem_Write(DS3231_I2C, DS3231_ADDR, 0x0E, 1, &ctrlAlarm, sizeof(ctrlAlarm), 1000);
 80009fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a02:	9302      	str	r3, [sp, #8]
 8000a04:	2301      	movs	r3, #1
 8000a06:	9301      	str	r3, [sp, #4]
 8000a08:	f107 030f 	add.w	r3, r7, #15
 8000a0c:	9300      	str	r3, [sp, #0]
 8000a0e:	2301      	movs	r3, #1
 8000a10:	220e      	movs	r2, #14
 8000a12:	21d0      	movs	r1, #208	@ 0xd0
 8000a14:	4804      	ldr	r0, [pc, #16]	@ (8000a28 <Time_Ctrl+0x198>)
 8000a16:	f002 fea3 	bl	8003760 <HAL_I2C_Mem_Write>

  // Delay for 1ms to allow the RTC module to process the data
  HAL_Delay(1);
 8000a1a:	2001      	movs	r0, #1
 8000a1c:	f001 fdae 	bl	800257c <HAL_Delay>
}
 8000a20:	bf00      	nop
 8000a22:	371c      	adds	r7, #28
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd90      	pop	{r4, r7, pc}
 8000a28:	200002f4 	.word	0x200002f4

08000a2c <Time_Init>:
  * @param  month: Month: 1-12
  * @param  year: Year: 0-99 (0 = 2000, 1 = 2001, ..., 99 = 2099)
  * @retval None
*/
void Time_Init (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom, uint8_t month, uint8_t year)
{
 8000a2c:	b590      	push	{r4, r7, lr}
 8000a2e:	b087      	sub	sp, #28
 8000a30:	af04      	add	r7, sp, #16
 8000a32:	4604      	mov	r4, r0
 8000a34:	4608      	mov	r0, r1
 8000a36:	4611      	mov	r1, r2
 8000a38:	461a      	mov	r2, r3
 8000a3a:	4623      	mov	r3, r4
 8000a3c:	71fb      	strb	r3, [r7, #7]
 8000a3e:	4603      	mov	r3, r0
 8000a40:	71bb      	strb	r3, [r7, #6]
 8000a42:	460b      	mov	r3, r1
 8000a44:	717b      	strb	r3, [r7, #5]
 8000a46:	4613      	mov	r3, r2
 8000a48:	713b      	strb	r3, [r7, #4]
  // This function is intended for initial setup of the RTC module after a reset.
  // It should not be called repeatedly unless reinitialization is required.
  //    Time_Set (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom, uint8_t month, uint8_t year)
  Time_Set (sec, min, hour, dow, dom, month, year);
 8000a4a:	793c      	ldrb	r4, [r7, #4]
 8000a4c:	797a      	ldrb	r2, [r7, #5]
 8000a4e:	79b9      	ldrb	r1, [r7, #6]
 8000a50:	79f8      	ldrb	r0, [r7, #7]
 8000a52:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000a56:	9302      	str	r3, [sp, #8]
 8000a58:	7f3b      	ldrb	r3, [r7, #28]
 8000a5a:	9301      	str	r3, [sp, #4]
 8000a5c:	7e3b      	ldrb	r3, [r7, #24]
 8000a5e:	9300      	str	r3, [sp, #0]
 8000a60:	4623      	mov	r3, r4
 8000a62:	f7ff fe6d 	bl	8000740 <Time_Set>
  //        2    : Alarm when minutes and seconds match
  //        3    : Alarm when hours, minutes, and seconds match
  //        4    : Alarm when date, hours, minutes, and seconds match
  //        5    : Alarm when day, hours, minutes, and seconds match
  //      For mode 0, the remaining input are don't-care values
  Time_Ctrl 
 8000a66:	2300      	movs	r3, #0
 8000a68:	9301      	str	r3, [sp, #4]
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	9300      	str	r3, [sp, #0]
 8000a6e:	2300      	movs	r3, #0
 8000a70:	2200      	movs	r2, #0
 8000a72:	2100      	movs	r1, #0
 8000a74:	2000      	movs	r0, #0
 8000a76:	f7ff ff0b 	bl	8000890 <Time_Ctrl>
     0, // Minutes: 0-59
     0, // Hours: 0-23
     0, // Day of the week: 1-7 (1 = Sunday, 2 = Monday, ..., 7 = Saturday), or Date of the month: 1-31
     0  // Select: 1 = day of week, 0 = date of month
  );   
}
 8000a7a:	bf00      	nop
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd90      	pop	{r4, r7, pc}
	...

08000a84 <Alarm_Set>:
  * @param  on_off: On/ Off state of the alarm (1 = ON, 0 = OFF)
  * @param  slot: Slot number of the alarm in the EEPROM module (0-9)
  * @retval None
*/
void Alarm_Set (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow_dom, ALARM_DY_DT_MODE dy_dt, bool on_off, uint8_t slot)
{
 8000a84:	b590      	push	{r4, r7, lr}
 8000a86:	b089      	sub	sp, #36	@ 0x24
 8000a88:	af04      	add	r7, sp, #16
 8000a8a:	4604      	mov	r4, r0
 8000a8c:	4608      	mov	r0, r1
 8000a8e:	4611      	mov	r1, r2
 8000a90:	461a      	mov	r2, r3
 8000a92:	4623      	mov	r3, r4
 8000a94:	71fb      	strb	r3, [r7, #7]
 8000a96:	4603      	mov	r3, r0
 8000a98:	71bb      	strb	r3, [r7, #6]
 8000a9a:	460b      	mov	r3, r1
 8000a9c:	717b      	strb	r3, [r7, #5]
 8000a9e:	4613      	mov	r3, r2
 8000aa0:	713b      	strb	r3, [r7, #4]
  // Internal address of the alarm in the EEPROM module (0-8192, or 13 bits)
  uint16_t address = slot * 4;
 8000aa2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000aa6:	b29b      	uxth	r3, r3
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	81fb      	strh	r3, [r7, #14]

  // Add an ON/OFF (1 bit) signal into the alarm package by using the MSB of the second register
  if (on_off)
 8000aac:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d002      	beq.n	8000aba <Alarm_Set+0x36>
  {
    sec += (1 << 7);
 8000ab4:	79fb      	ldrb	r3, [r7, #7]
 8000ab6:	3b80      	subs	r3, #128	@ 0x80
 8000ab8:	71fb      	strb	r3, [r7, #7]
  }

  // Add a [day of week] or [date of month] (1 bit) signal into the alarm package by using bit 6 of the dow_dom register
  switch (dy_dt)
 8000aba:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000abe:	2b02      	cmp	r3, #2
 8000ac0:	d00d      	beq.n	8000ade <Alarm_Set+0x5a>
 8000ac2:	2b02      	cmp	r3, #2
 8000ac4:	dc0d      	bgt.n	8000ae2 <Alarm_Set+0x5e>
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d005      	beq.n	8000ad6 <Alarm_Set+0x52>
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d109      	bne.n	8000ae2 <Alarm_Set+0x5e>
  {
    // Date of the month
    case DATE_OF_MONTH_MODE:
      // Decoding: [Bit 7] = 1, [Bit 6] = 0
      dow_dom += (1 << 7);
 8000ace:	793b      	ldrb	r3, [r7, #4]
 8000ad0:	3b80      	subs	r3, #128	@ 0x80
 8000ad2:	713b      	strb	r3, [r7, #4]
      break;
 8000ad4:	e006      	b.n	8000ae4 <Alarm_Set+0x60>

    // Day of the week
    case DAY_OF_WEEK_MODE:
      // Decoding: [Bit 7] = 1, [Bit 6] = 1
      dow_dom += ((1 << 7) | (1 << 6));
 8000ad6:	793b      	ldrb	r3, [r7, #4]
 8000ad8:	3b40      	subs	r3, #64	@ 0x40
 8000ada:	713b      	strb	r3, [r7, #4]
      break;
 8000adc:	e002      	b.n	8000ae4 <Alarm_Set+0x60>

    // Not used
    case NOT_USED_MODE:
      // Decoding: [Bit 7] = 0, [Bit 6] = 0
      dow_dom += 0;
      break;
 8000ade:	bf00      	nop
 8000ae0:	e000      	b.n	8000ae4 <Alarm_Set+0x60>

    default:
      dow_dom += 0;
      break;
 8000ae2:	bf00      	nop

  // A blank array (4 slots) to contain the alarm values
  uint8_t setAlarm[4];
  
  // Store the alarm values into the blank array
  setAlarm[0] = sec;
 8000ae4:	79fb      	ldrb	r3, [r7, #7]
 8000ae6:	723b      	strb	r3, [r7, #8]
  setAlarm[1] = min;
 8000ae8:	79bb      	ldrb	r3, [r7, #6]
 8000aea:	727b      	strb	r3, [r7, #9]
  setAlarm[2] = hour;
 8000aec:	797b      	ldrb	r3, [r7, #5]
 8000aee:	72bb      	strb	r3, [r7, #10]
  setAlarm[3] = dow_dom;
 8000af0:	793b      	ldrb	r3, [r7, #4]
 8000af2:	72fb      	strb	r3, [r7, #11]

  // HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
  //    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);
  HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, address, 1, setAlarm, sizeof(setAlarm), 1000);
 8000af4:	89fa      	ldrh	r2, [r7, #14]
 8000af6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000afa:	9302      	str	r3, [sp, #8]
 8000afc:	2304      	movs	r3, #4
 8000afe:	9301      	str	r3, [sp, #4]
 8000b00:	f107 0308 	add.w	r3, r7, #8
 8000b04:	9300      	str	r3, [sp, #0]
 8000b06:	2301      	movs	r3, #1
 8000b08:	21a0      	movs	r1, #160	@ 0xa0
 8000b0a:	4805      	ldr	r0, [pc, #20]	@ (8000b20 <Alarm_Set+0x9c>)
 8000b0c:	f002 fe28 	bl	8003760 <HAL_I2C_Mem_Write>
  //     +  8 [2nd Word Address Byte]   + 1 [ACK from Client]      +
  //     + {8 [1st Data Word]           + 1 [ACK from Client]} * 4 + 
  //     +  1 [Stop Condition by Host] 
  //     =  65 cycles  
  //    Neccesary delay time = 65 cycles / 400 kHz = 162.5 us = ~ 0.17 ms
  HAL_Delay(1);
 8000b10:	2001      	movs	r0, #1
 8000b12:	f001 fd33 	bl	800257c <HAL_Delay>
}
 8000b16:	bf00      	nop
 8000b18:	3714      	adds	r7, #20
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd90      	pop	{r4, r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	200002f4 	.word	0x200002f4

08000b24 <Alarm_Get>:
  * @param  slot: Slot number of the alarm in the EEPROM module (0-9)
  * @param  alarm_get_data: Pointer to an ALARM_DATA structure to store the retrieved alarm values
  * @retval None
*/
void Alarm_Get (uint8_t slot, volatile ALARM_DATA *alarm_get_data)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b088      	sub	sp, #32
 8000b28:	af04      	add	r7, sp, #16
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	6039      	str	r1, [r7, #0]
 8000b2e:	71fb      	strb	r3, [r7, #7]
  // Address of the alarm in the EEPROM module (0-8192, or 13 bits)
  uint16_t address = slot * 4;
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	b29b      	uxth	r3, r3
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	81fb      	strh	r3, [r7, #14]
  // A blank array (4 slots) to contain the alarm values received from the EEPROM module
  uint8_t getAlarm[4];

  // HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
  //    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);
  HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, address, 1, getAlarm, sizeof(getAlarm), 1000);
 8000b38:	89fa      	ldrh	r2, [r7, #14]
 8000b3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b3e:	9302      	str	r3, [sp, #8]
 8000b40:	2304      	movs	r3, #4
 8000b42:	9301      	str	r3, [sp, #4]
 8000b44:	f107 0308 	add.w	r3, r7, #8
 8000b48:	9300      	str	r3, [sp, #0]
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	21a0      	movs	r1, #160	@ 0xa0
 8000b4e:	481f      	ldr	r0, [pc, #124]	@ (8000bcc <Alarm_Get+0xa8>)
 8000b50:	f002 ff00 	bl	8003954 <HAL_I2C_Mem_Read>
  //     +  8 [Device Address Byte]     + 1 [ACK from Client]      +
  //     + {8 [1st Data Word]           + 1 [ACK from Client]} * 4 + 
  //     +  1 [Stop Condition by Host] 
  //     =  75 cycles
  //    Neccesary delay time = 75 cycles / 400 kHz = 187.5 us = ~ 0.19 ms
  HAL_Delay(1);
 8000b54:	2001      	movs	r0, #1
 8000b56:	f001 fd11 	bl	800257c <HAL_Delay>

  // Store the alarm values into the alarm variable
  alarm_get_data->second = 0;
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	701a      	strb	r2, [r3, #0]
  alarm_get_data->minute = getAlarm[1];
 8000b60:	7a7a      	ldrb	r2, [r7, #9]
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	705a      	strb	r2, [r3, #1]
  alarm_get_data->hour = getAlarm[2];
 8000b66:	7aba      	ldrb	r2, [r7, #10]
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	709a      	strb	r2, [r3, #2]
  
  if (getAlarm[3] >= (1 << 7))
 8000b6c:	7afb      	ldrb	r3, [r7, #11]
 8000b6e:	b25b      	sxtb	r3, r3
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	da18      	bge.n	8000ba6 <Alarm_Get+0x82>
  {
    if ((getAlarm[3] & 0x7F) >= (1 << 6))
 8000b74:	7afb      	ldrb	r3, [r7, #11]
 8000b76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d009      	beq.n	8000b92 <Alarm_Get+0x6e>
    {
      alarm_get_data->dy_dt = DAY_OF_WEEK_MODE;
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	2200      	movs	r2, #0
 8000b82:	70da      	strb	r2, [r3, #3]
      alarm_get_data->dow_dom = getAlarm[3] & 0x3F;
 8000b84:	7afb      	ldrb	r3, [r7, #11]
 8000b86:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000b8a:	b2da      	uxtb	r2, r3
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	711a      	strb	r2, [r3, #4]
 8000b90:	e00c      	b.n	8000bac <Alarm_Get+0x88>
    }
    else 
    {
      alarm_get_data->dy_dt = DATE_OF_MONTH_MODE;
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	2201      	movs	r2, #1
 8000b96:	70da      	strb	r2, [r3, #3]
      alarm_get_data->dow_dom = getAlarm[3] & 0x7F;
 8000b98:	7afb      	ldrb	r3, [r7, #11]
 8000b9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000b9e:	b2da      	uxtb	r2, r3
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	711a      	strb	r2, [r3, #4]
 8000ba4:	e002      	b.n	8000bac <Alarm_Get+0x88>
    }
  }
  else alarm_get_data->dy_dt = NOT_USED_MODE;
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	2202      	movs	r2, #2
 8000baa:	70da      	strb	r2, [r3, #3]

  if (getAlarm[0] >= (1 << 7)) alarm_get_data->on_off = true;
 8000bac:	7a3b      	ldrb	r3, [r7, #8]
 8000bae:	b25b      	sxtb	r3, r3
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	da03      	bge.n	8000bbc <Alarm_Get+0x98>
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	715a      	strb	r2, [r3, #5]
  else alarm_get_data->on_off = false;
}
 8000bba:	e002      	b.n	8000bc2 <Alarm_Get+0x9e>
  else alarm_get_data->on_off = false;
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	715a      	strb	r2, [r3, #5]
}
 8000bc2:	bf00      	nop
 8000bc4:	3710      	adds	r7, #16
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	200002f4 	.word	0x200002f4

08000bd0 <Alarm_Clear>:
  * @brief  Clear a single alarm from the EEPROM module.
  * @param  slot: Slot number of the alarm in the EEPROM module (0-9)
  * @retval None
*/
void Alarm_Clear (uint8_t slot)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b088      	sub	sp, #32
 8000bd4:	af04      	add	r7, sp, #16
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	71fb      	strb	r3, [r7, #7]
  // Address of the alarm in the EEPROM module (0-8192, or 13 bits)
  uint16_t address = slot * 4;
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	b29b      	uxth	r3, r3
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	81fb      	strh	r3, [r7, #14]

  // A blank array (4 slots) to contain the alarm values to be cleared
  uint8_t clearAlarm[4] = {0, 0, 0, 0};
 8000be2:	2300      	movs	r3, #0
 8000be4:	60bb      	str	r3, [r7, #8]

  // HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
  //    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);
  HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, address, 1, clearAlarm, sizeof(clearAlarm), 1000);
 8000be6:	89fa      	ldrh	r2, [r7, #14]
 8000be8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bec:	9302      	str	r3, [sp, #8]
 8000bee:	2304      	movs	r3, #4
 8000bf0:	9301      	str	r3, [sp, #4]
 8000bf2:	f107 0308 	add.w	r3, r7, #8
 8000bf6:	9300      	str	r3, [sp, #0]
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	21a0      	movs	r1, #160	@ 0xa0
 8000bfc:	4804      	ldr	r0, [pc, #16]	@ (8000c10 <Alarm_Clear+0x40>)
 8000bfe:	f002 fdaf 	bl	8003760 <HAL_I2C_Mem_Write>
  //     +  8 [2nd Word Address Byte]   + 1 [ACK from Client]      +
  //     + {8 [1st Data Word]           + 1 [ACK from Client]} * 4 + 
  //     +  1 [Stop Condition by Host] 
  //     =  65 cycles  
  //    Neccesary delay time = 65 cycles / 400 kHz = 162.5 us = ~ 0.17 ms
  HAL_Delay(1);
 8000c02:	2001      	movs	r0, #1
 8000c04:	f001 fcba 	bl	800257c <HAL_Delay>
}
 8000c08:	bf00      	nop
 8000c0a:	3710      	adds	r7, #16
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	200002f4 	.word	0x200002f4

08000c14 <Alarm_Slot_Pointer_Set>:
/**
 * @brief Save the data of pointer for the alarm slot to EEPROM module.
  * @retval None
 */
void Alarm_Slot_Pointer_Set (void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af04      	add	r7, sp, #16
  // HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
  //    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);
  HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, ALARM_SLOT_PTR_ADDR, 1, &alarm_slot_ptr, sizeof(alarm_slot_ptr), 1000);
 8000c1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c1e:	9302      	str	r3, [sp, #8]
 8000c20:	2301      	movs	r3, #1
 8000c22:	9301      	str	r3, [sp, #4]
 8000c24:	4b06      	ldr	r3, [pc, #24]	@ (8000c40 <Alarm_Slot_Pointer_Set+0x2c>)
 8000c26:	9300      	str	r3, [sp, #0]
 8000c28:	2301      	movs	r3, #1
 8000c2a:	2228      	movs	r2, #40	@ 0x28
 8000c2c:	21a0      	movs	r1, #160	@ 0xa0
 8000c2e:	4805      	ldr	r0, [pc, #20]	@ (8000c44 <Alarm_Slot_Pointer_Set+0x30>)
 8000c30:	f002 fd96 	bl	8003760 <HAL_I2C_Mem_Write>
  //     +  8 [2nd Word Address Byte]   + 1 [ACK from Client]  +
  //     +  8 [1st Data Word]           + 1 [ACK from Client]} + 
  //     +  1 [Stop Condition by Host] 
  //     =  38 cycles  
  //    Neccesary delay time = 65 cycles / 400 kHz = 95 us = ~ 0.01 ms
  HAL_Delay(1);
 8000c34:	2001      	movs	r0, #1
 8000c36:	f001 fca1 	bl	800257c <HAL_Delay>
}
 8000c3a:	bf00      	nop
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	2000039c 	.word	0x2000039c
 8000c44:	200002f4 	.word	0x200002f4

08000c48 <Alarm_Slot_Pointer_Get>:
/**
 * @brief Retrieve the data of pointer for the alarm slot from EEPROM module.
  * @retval None
 */
void Alarm_Slot_Pointer_Get (void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af04      	add	r7, sp, #16
  // HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
  //    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);
  HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, ALARM_SLOT_PTR_ADDR, 1, &alarm_slot_ptr, sizeof(alarm_slot_ptr), 1000);
 8000c4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c52:	9302      	str	r3, [sp, #8]
 8000c54:	2301      	movs	r3, #1
 8000c56:	9301      	str	r3, [sp, #4]
 8000c58:	4b06      	ldr	r3, [pc, #24]	@ (8000c74 <Alarm_Slot_Pointer_Get+0x2c>)
 8000c5a:	9300      	str	r3, [sp, #0]
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	2228      	movs	r2, #40	@ 0x28
 8000c60:	21a0      	movs	r1, #160	@ 0xa0
 8000c62:	4805      	ldr	r0, [pc, #20]	@ (8000c78 <Alarm_Slot_Pointer_Get+0x30>)
 8000c64:	f002 fe76 	bl	8003954 <HAL_I2C_Mem_Read>
  //     +  8 [Device Address Byte]     + 1 [ACK from Client]  +
  //     +  8 [1st Data Word]           + 1 [ACK from Client]} + 
  //     +  1 [Stop Condition by Host] 
  //     =  48 cycles
  //    Neccesary delay time = 75 cycles / 400 kHz = 0.12 ms
  HAL_Delay(1);
 8000c68:	2001      	movs	r0, #1
 8000c6a:	f001 fc87 	bl	800257c <HAL_Delay>
}
 8000c6e:	bf00      	nop
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	2000039c 	.word	0x2000039c
 8000c78:	200002f4 	.word	0x200002f4

08000c7c <Alarm_Check>:
  * @param  time_get_data: Pointer to a TIME structure to store the current time values
  * @retval None
  * @note   This function compares the current time with all alarms stored in the EEPROM module.
*/
void Alarm_Check (volatile TIME_DATA *time_get_data)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  volatile ALARM_DATA alarmCheckData = {0};
 8000c84:	f107 030c 	add.w	r3, r7, #12
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	809a      	strh	r2, [r3, #4]

  // Compare the current time with all available alarms in the EEPROM module
  for (int i = 0; i < alarm_slot_ptr; i++)
 8000c8e:	2300      	movs	r3, #0
 8000c90:	617b      	str	r3, [r7, #20]
 8000c92:	e04e      	b.n	8000d32 <Alarm_Check+0xb6>
  {
    // Retrieve the alarm values from the EEPROM module
    //    void Alarm_Get (uint8_t slot, ALARM_DATA *alarm_get_data)
    Alarm_Get(i, &alarmCheckData);
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	f107 020c 	add.w	r2, r7, #12
 8000c9c:	4611      	mov	r1, r2
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff ff40 	bl	8000b24 <Alarm_Get>

    // Check if the alarm is at ON or OFF state by checking the MSB of the second register
    if (!alarmCheckData.on_off)
 8000ca4:	7c7b      	ldrb	r3, [r7, #17]
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	f083 0301 	eor.w	r3, r3, #1
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d131      	bne.n	8000d16 <Alarm_Check+0x9a>
      // Skip if the alarm is OFF
      continue;
    }

    // Check if the current time matches the alarm time (day of week)
    if ((alarmCheckData.dy_dt == DAY_OF_WEEK_MODE)
 8000cb2:	7bfb      	ldrb	r3, [r7, #15]
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d106      	bne.n	8000cc8 <Alarm_Check+0x4c>
    &&  (alarmCheckData.dow_dom != time_get_data->dayofweek))
 8000cba:	7c3b      	ldrb	r3, [r7, #16]
 8000cbc:	b2da      	uxtb	r2, r3
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	78db      	ldrb	r3, [r3, #3]
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d128      	bne.n	8000d1a <Alarm_Check+0x9e>
      // Skip if the current time does NOT match the alarm time (day of week)
      continue;
    }

    // Check if the current time matches the alarm time (date of month)
    if ((alarmCheckData.dy_dt == DATE_OF_MONTH_MODE)
 8000cc8:	7bfb      	ldrb	r3, [r7, #15]
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d106      	bne.n	8000cde <Alarm_Check+0x62>
    &&  (alarmCheckData.dow_dom != time_get_data->dateofmonth))
 8000cd0:	7c3b      	ldrb	r3, [r7, #16]
 8000cd2:	b2da      	uxtb	r2, r3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	791b      	ldrb	r3, [r3, #4]
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	429a      	cmp	r2, r3
 8000cdc:	d11f      	bne.n	8000d1e <Alarm_Check+0xa2>
      // Skip if the current time does NOT match the alarm time (date of month)
      continue;
    }

    // Check if the current time matches the alarm time (hour)
    if (alarmCheckData.hour != time_get_data->hour)
 8000cde:	7bbb      	ldrb	r3, [r7, #14]
 8000ce0:	b2da      	uxtb	r2, r3
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	789b      	ldrb	r3, [r3, #2]
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	d11a      	bne.n	8000d22 <Alarm_Check+0xa6>
      // Skip if the current time does NOT match the alarm time (hour)
      continue;
    }

    // Check if the current time matches the alarm time (minute)
    if (alarmCheckData.minute != time_get_data->minute)
 8000cec:	7b7b      	ldrb	r3, [r7, #13]
 8000cee:	b2da      	uxtb	r2, r3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	785b      	ldrb	r3, [r3, #1]
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	429a      	cmp	r2, r3
 8000cf8:	d115      	bne.n	8000d26 <Alarm_Check+0xaa>
      // Skip if the current time does NOT match the alarm time (minute)
      continue;
    }

    // Check if the current time matches the alarm time (second)
    if (alarmCheckData.second != time_get_data->second)
 8000cfa:	7b3b      	ldrb	r3, [r7, #12]
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d110      	bne.n	8000d2a <Alarm_Check+0xae>
      // Skip if the current time does NOT match the alarm time (second)
      continue;
    }

    // If all the above checks pass, the alarm is activated
    debug_alarm_activate_ctr++;
 8000d08:	4b0f      	ldr	r3, [pc, #60]	@ (8000d48 <Alarm_Check+0xcc>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	b2da      	uxtb	r2, r3
 8000d10:	4b0d      	ldr	r3, [pc, #52]	@ (8000d48 <Alarm_Check+0xcc>)
 8000d12:	701a      	strb	r2, [r3, #0]

    // Stop checking time matching
    // to make sure that only one alarm can be activated at a time
    break;
 8000d14:	e014      	b.n	8000d40 <Alarm_Check+0xc4>
      continue;
 8000d16:	bf00      	nop
 8000d18:	e008      	b.n	8000d2c <Alarm_Check+0xb0>
      continue;
 8000d1a:	bf00      	nop
 8000d1c:	e006      	b.n	8000d2c <Alarm_Check+0xb0>
      continue;
 8000d1e:	bf00      	nop
 8000d20:	e004      	b.n	8000d2c <Alarm_Check+0xb0>
      continue;
 8000d22:	bf00      	nop
 8000d24:	e002      	b.n	8000d2c <Alarm_Check+0xb0>
      continue;
 8000d26:	bf00      	nop
 8000d28:	e000      	b.n	8000d2c <Alarm_Check+0xb0>
      continue;
 8000d2a:	bf00      	nop
  for (int i = 0; i < alarm_slot_ptr; i++)
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	3301      	adds	r3, #1
 8000d30:	617b      	str	r3, [r7, #20]
 8000d32:	4b06      	ldr	r3, [pc, #24]	@ (8000d4c <Alarm_Check+0xd0>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	461a      	mov	r2, r3
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	dbaa      	blt.n	8000c94 <Alarm_Check+0x18>
  }
}
 8000d3e:	bf00      	nop
 8000d40:	bf00      	nop
 8000d42:	3718      	adds	r7, #24
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	2000039e 	.word	0x2000039e
 8000d4c:	2000039c 	.word	0x2000039c

08000d50 <Button_Debounce>:
  * * @param  button->hold_latch: 
  * * @param  button->start_tick: Start time of the button press event (in milliseconds).
  * @retval None
*/
void Button_Debounce(BUTTON_DATA *button)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  // Handle button state transitions and debounce logic
  switch (button->state)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	79db      	ldrb	r3, [r3, #7]
 8000d5c:	2b02      	cmp	r3, #2
 8000d5e:	d03b      	beq.n	8000dd8 <Button_Debounce+0x88>
 8000d60:	2b02      	cmp	r3, #2
 8000d62:	dc6c      	bgt.n	8000e3e <Button_Debounce+0xee>
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d002      	beq.n	8000d6e <Button_Debounce+0x1e>
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d017      	beq.n	8000d9c <Button_Debounce+0x4c>
 8000d6c:	e067      	b.n	8000e3e <Button_Debounce+0xee>
  {
    // Initial state: Button is released (HIGH)
    case BUTTON_RELEASED:

      button->press_flag = false;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2200      	movs	r2, #0
 8000d72:	735a      	strb	r2, [r3, #13]
      button->hold_flag = false;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2200      	movs	r2, #0
 8000d78:	739a      	strb	r2, [r3, #14]
      button->latch = false;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	73da      	strb	r2, [r3, #15]
    
      // Check if interrupt flag is set
      if (button->int_flag) 
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	7b1b      	ldrb	r3, [r3, #12]
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d069      	beq.n	8000e5e <Button_Debounce+0x10e>
      {
        // Record the start time for debounce
        button->start_tick = HAL_GetTick();
 8000d8a:	f001 fbed 	bl	8002568 <HAL_GetTick>
 8000d8e:	4602      	mov	r2, r0
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	609a      	str	r2, [r3, #8]

        // Transition to waiting state
        button->state = BUTTON_WAITING;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2201      	movs	r2, #1
 8000d98:	71da      	strb	r2, [r3, #7]
      }
      break;
 8000d9a:	e060      	b.n	8000e5e <Button_Debounce+0x10e>

    // Waiting state: Button is pressed (LOW) but not yet confirmed
    case BUTTON_WAITING:
      // Check if debounce delay has passed
      if (HAL_GetTick() - button->start_tick >= BUTTON_DEBOUNCE_DELAY) 
 8000d9c:	f001 fbe4 	bl	8002568 <HAL_GetTick>
 8000da0:	4602      	mov	r2, r0
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	689b      	ldr	r3, [r3, #8]
 8000da6:	1ad3      	subs	r3, r2, r3
 8000da8:	2b1d      	cmp	r3, #29
 8000daa:	d95a      	bls.n	8000e62 <Button_Debounce+0x112>
      {
        // Check if button is still pressed (LOW state) after debounce delay
        if (HAL_GPIO_ReadPin(button->gpio_port, button->gpio_pin) == BUTTON_ACTIVE) 
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	889b      	ldrh	r3, [r3, #4]
 8000db4:	4619      	mov	r1, r3
 8000db6:	4610      	mov	r0, r2
 8000db8:	f002 fb46 	bl	8003448 <HAL_GPIO_ReadPin>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d103      	bne.n	8000dca <Button_Debounce+0x7a>
        {
          // Transition to pressed state
          button->state = BUTTON_PRESSED;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2202      	movs	r2, #2
 8000dc6:	71da      	strb	r2, [r3, #7]
          // Reset interrupt flag and return to released state
          button->int_flag = false;  
          button->state = BUTTON_RELEASED;
        }
      }
      break;
 8000dc8:	e04b      	b.n	8000e62 <Button_Debounce+0x112>
          button->int_flag = false;  
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2200      	movs	r2, #0
 8000dce:	731a      	strb	r2, [r3, #12]
          button->state = BUTTON_RELEASED;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	71da      	strb	r2, [r3, #7]
      break;
 8000dd6:	e044      	b.n	8000e62 <Button_Debounce+0x112>
    
    // Pressed state: Button is pressed (LOW)
    case BUTTON_PRESSED:
      // Check if button is released (HIGH state)
      if (HAL_GPIO_ReadPin(button->gpio_port, button->gpio_pin) != BUTTON_ACTIVE) 
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	889b      	ldrh	r3, [r3, #4]
 8000de0:	4619      	mov	r1, r3
 8000de2:	4610      	mov	r0, r2
 8000de4:	f002 fb30 	bl	8003448 <HAL_GPIO_ReadPin>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d012      	beq.n	8000e14 <Button_Debounce+0xc4>
      {
        // Check if press duration is less than hold threshold
        if (HAL_GetTick() - button->start_tick < BUTTON_HOLD_TH)
 8000dee:	f001 fbbb 	bl	8002568 <HAL_GetTick>
 8000df2:	4602      	mov	r2, r0
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	689b      	ldr	r3, [r3, #8]
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8000dfe:	d202      	bcs.n	8000e06 <Button_Debounce+0xb6>
        {
          // Set press flag for short press
          button->press_flag = true;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2201      	movs	r2, #1
 8000e04:	735a      	strb	r2, [r3, #13]
        }
      
        // Reset interrupt flag and return to released state
        button->int_flag = false;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2200      	movs	r2, #0
 8000e0a:	731a      	strb	r2, [r3, #12]

        //button->latch = false;
        button->state = BUTTON_RELEASED;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	71da      	strb	r2, [r3, #7]
      else if ((HAL_GetTick() - button->start_tick >= BUTTON_HOLD_TH) && !button->hold_flag)
      {
        // Set hold flag for long press
        button->hold_flag = true;
      }
      break;
 8000e12:	e028      	b.n	8000e66 <Button_Debounce+0x116>
      else if ((HAL_GetTick() - button->start_tick >= BUTTON_HOLD_TH) && !button->hold_flag)
 8000e14:	f001 fba8 	bl	8002568 <HAL_GetTick>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	1ad3      	subs	r3, r2, r3
 8000e20:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8000e24:	d31f      	bcc.n	8000e66 <Button_Debounce+0x116>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	7b9b      	ldrb	r3, [r3, #14]
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	f083 0301 	eor.w	r3, r3, #1
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d017      	beq.n	8000e66 <Button_Debounce+0x116>
        button->hold_flag = true;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2201      	movs	r2, #1
 8000e3a:	739a      	strb	r2, [r3, #14]
      break;
 8000e3c:	e013      	b.n	8000e66 <Button_Debounce+0x116>

    default:
      // Reset all flags and return to released state
      button->state = BUTTON_RELEASED;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2200      	movs	r2, #0
 8000e42:	71da      	strb	r2, [r3, #7]
      button->int_flag = false;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2200      	movs	r2, #0
 8000e48:	731a      	strb	r2, [r3, #12]
      button->press_flag = false;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	735a      	strb	r2, [r3, #13]
      button->hold_flag = false;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2200      	movs	r2, #0
 8000e54:	739a      	strb	r2, [r3, #14]
      button->latch = false;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2200      	movs	r2, #0
 8000e5a:	73da      	strb	r2, [r3, #15]
      break;
 8000e5c:	e004      	b.n	8000e68 <Button_Debounce+0x118>
      break;
 8000e5e:	bf00      	nop
 8000e60:	e002      	b.n	8000e68 <Button_Debounce+0x118>
      break;
 8000e62:	bf00      	nop
 8000e64:	e000      	b.n	8000e68 <Button_Debounce+0x118>
      break;
 8000e66:	bf00      	nop
  }
}
 8000e68:	bf00      	nop
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <Button_Handle>:
/**
 * @brief  Button interrupt handler function to be called in main loop
 * @retval None
 */
void Button_Handle (void) 
{
 8000e70:	b590      	push	{r4, r7, lr}
 8000e72:	b087      	sub	sp, #28
 8000e74:	af00      	add	r7, sp, #0
  // An empty button variable containing reset values for button pointer initiallization
  BUTTON_DATA buttonReset = {GPIOB, BUTTON0_IN12_Pin, 0, BUTTON_RELEASED, 0, false, false, false, false};
 8000e76:	4b5d      	ldr	r3, [pc, #372]	@ (8000fec <Button_Handle+0x17c>)
 8000e78:	463c      	mov	r4, r7
 8000e7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  // Initially point to an empty button variable
  BUTTON_DATA *button = &buttonReset;
 8000e80:	463b      	mov	r3, r7
 8000e82:	617b      	str	r3, [r7, #20]

  // Perform button debouncing to filter out noise
  Button_Debounce(&button0);
 8000e84:	485a      	ldr	r0, [pc, #360]	@ (8000ff0 <Button_Handle+0x180>)
 8000e86:	f7ff ff63 	bl	8000d50 <Button_Debounce>
  Button_Debounce(&button1);
 8000e8a:	485a      	ldr	r0, [pc, #360]	@ (8000ff4 <Button_Handle+0x184>)
 8000e8c:	f7ff ff60 	bl	8000d50 <Button_Debounce>
  Button_Debounce(&button2);
 8000e90:	4859      	ldr	r0, [pc, #356]	@ (8000ff8 <Button_Handle+0x188>)
 8000e92:	f7ff ff5d 	bl	8000d50 <Button_Debounce>
  Button_Debounce(&button3);
 8000e96:	4859      	ldr	r0, [pc, #356]	@ (8000ffc <Button_Handle+0x18c>)
 8000e98:	f7ff ff5a 	bl	8000d50 <Button_Debounce>
  Button_Debounce(&button4);
 8000e9c:	4858      	ldr	r0, [pc, #352]	@ (8001000 <Button_Handle+0x190>)
 8000e9e:	f7ff ff57 	bl	8000d50 <Button_Debounce>

  
  if      (button0.press_flag || button0.hold_flag) button = &button0;
 8000ea2:	4b53      	ldr	r3, [pc, #332]	@ (8000ff0 <Button_Handle+0x180>)
 8000ea4:	7b5b      	ldrb	r3, [r3, #13]
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d104      	bne.n	8000eb6 <Button_Handle+0x46>
 8000eac:	4b50      	ldr	r3, [pc, #320]	@ (8000ff0 <Button_Handle+0x180>)
 8000eae:	7b9b      	ldrb	r3, [r3, #14]
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d002      	beq.n	8000ebc <Button_Handle+0x4c>
 8000eb6:	4b4e      	ldr	r3, [pc, #312]	@ (8000ff0 <Button_Handle+0x180>)
 8000eb8:	617b      	str	r3, [r7, #20]
 8000eba:	e032      	b.n	8000f22 <Button_Handle+0xb2>
  else if (button1.press_flag || button1.hold_flag) button = &button1;
 8000ebc:	4b4d      	ldr	r3, [pc, #308]	@ (8000ff4 <Button_Handle+0x184>)
 8000ebe:	7b5b      	ldrb	r3, [r3, #13]
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d104      	bne.n	8000ed0 <Button_Handle+0x60>
 8000ec6:	4b4b      	ldr	r3, [pc, #300]	@ (8000ff4 <Button_Handle+0x184>)
 8000ec8:	7b9b      	ldrb	r3, [r3, #14]
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d002      	beq.n	8000ed6 <Button_Handle+0x66>
 8000ed0:	4b48      	ldr	r3, [pc, #288]	@ (8000ff4 <Button_Handle+0x184>)
 8000ed2:	617b      	str	r3, [r7, #20]
 8000ed4:	e025      	b.n	8000f22 <Button_Handle+0xb2>
  else if (button2.press_flag || button2.hold_flag) button = &button2;
 8000ed6:	4b48      	ldr	r3, [pc, #288]	@ (8000ff8 <Button_Handle+0x188>)
 8000ed8:	7b5b      	ldrb	r3, [r3, #13]
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d104      	bne.n	8000eea <Button_Handle+0x7a>
 8000ee0:	4b45      	ldr	r3, [pc, #276]	@ (8000ff8 <Button_Handle+0x188>)
 8000ee2:	7b9b      	ldrb	r3, [r3, #14]
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d002      	beq.n	8000ef0 <Button_Handle+0x80>
 8000eea:	4b43      	ldr	r3, [pc, #268]	@ (8000ff8 <Button_Handle+0x188>)
 8000eec:	617b      	str	r3, [r7, #20]
 8000eee:	e018      	b.n	8000f22 <Button_Handle+0xb2>
  else if (button3.press_flag || button3.hold_flag) button = &button3;
 8000ef0:	4b42      	ldr	r3, [pc, #264]	@ (8000ffc <Button_Handle+0x18c>)
 8000ef2:	7b5b      	ldrb	r3, [r3, #13]
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d104      	bne.n	8000f04 <Button_Handle+0x94>
 8000efa:	4b40      	ldr	r3, [pc, #256]	@ (8000ffc <Button_Handle+0x18c>)
 8000efc:	7b9b      	ldrb	r3, [r3, #14]
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d002      	beq.n	8000f0a <Button_Handle+0x9a>
 8000f04:	4b3d      	ldr	r3, [pc, #244]	@ (8000ffc <Button_Handle+0x18c>)
 8000f06:	617b      	str	r3, [r7, #20]
 8000f08:	e00b      	b.n	8000f22 <Button_Handle+0xb2>
  else if (button4.press_flag || button4.hold_flag) button = &button4;
 8000f0a:	4b3d      	ldr	r3, [pc, #244]	@ (8001000 <Button_Handle+0x190>)
 8000f0c:	7b5b      	ldrb	r3, [r3, #13]
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d104      	bne.n	8000f1e <Button_Handle+0xae>
 8000f14:	4b3a      	ldr	r3, [pc, #232]	@ (8001000 <Button_Handle+0x190>)
 8000f16:	7b9b      	ldrb	r3, [r3, #14]
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <Button_Handle+0xb2>
 8000f1e:	4b38      	ldr	r3, [pc, #224]	@ (8001000 <Button_Handle+0x190>)
 8000f20:	617b      	str	r3, [r7, #20]
  

  // Debugging: Initialize the start tick for button hold detection
  uint32_t startTick = 0;
 8000f22:	2300      	movs	r3, #0
 8000f24:	613b      	str	r3, [r7, #16]
  
  // Debugging: Check if the button is pressed or held by increment its counter in activation
  if (button->press_flag)
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	7b5b      	ldrb	r3, [r3, #13]
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d009      	beq.n	8000f44 <Button_Handle+0xd4>
  {
    // Increment the debug counter for the button
    debug_button_counter[button->index]++;
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	799b      	ldrb	r3, [r3, #6]
 8000f34:	4a33      	ldr	r2, [pc, #204]	@ (8001004 <Button_Handle+0x194>)
 8000f36:	5cd2      	ldrb	r2, [r2, r3]
 8000f38:	b2d2      	uxtb	r2, r2
 8000f3a:	3201      	adds	r2, #1
 8000f3c:	b2d1      	uxtb	r1, r2
 8000f3e:	4a31      	ldr	r2, [pc, #196]	@ (8001004 <Button_Handle+0x194>)
 8000f40:	54d1      	strb	r1, [r2, r3]
 8000f42:	e017      	b.n	8000f74 <Button_Handle+0x104>
  }
  else if (button->hold_flag)
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	7b9b      	ldrb	r3, [r3, #14]
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d012      	beq.n	8000f74 <Button_Handle+0x104>
  {
    // Check if the button is held down for a certain duration
    if (HAL_GetTick() - startTick >= BUTTON_HOLD_CYCLE) 
 8000f4e:	f001 fb0b 	bl	8002568 <HAL_GetTick>
 8000f52:	4602      	mov	r2, r0
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	2bf9      	cmp	r3, #249	@ 0xf9
 8000f5a:	d90b      	bls.n	8000f74 <Button_Handle+0x104>
    {
      // Increment the debug counter for the button
      debug_button_counter[button->index]++;
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	799b      	ldrb	r3, [r3, #6]
 8000f60:	4a28      	ldr	r2, [pc, #160]	@ (8001004 <Button_Handle+0x194>)
 8000f62:	5cd2      	ldrb	r2, [r2, r3]
 8000f64:	b2d2      	uxtb	r2, r2
 8000f66:	3201      	adds	r2, #1
 8000f68:	b2d1      	uxtb	r1, r2
 8000f6a:	4a26      	ldr	r2, [pc, #152]	@ (8001004 <Button_Handle+0x194>)
 8000f6c:	54d1      	strb	r1, [r2, r3]

      // Reset the start tick for the next hold cycle
      startTick = HAL_GetTick();
 8000f6e:	f001 fafb 	bl	8002568 <HAL_GetTick>
 8000f72:	6138      	str	r0, [r7, #16]
    }
  }

  // Check if the button is pressed or held
  if (button->press_flag || button->hold_flag) 
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	7b5b      	ldrb	r3, [r3, #13]
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d104      	bne.n	8000f88 <Button_Handle+0x118>
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	7b9b      	ldrb	r3, [r3, #14]
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d02c      	beq.n	8000fe2 <Button_Handle+0x172>
  {
    // Handle button actions based on the current system mode
    switch (system_state.mode) 
 8000f88:	4b1f      	ldr	r3, [pc, #124]	@ (8001008 <Button_Handle+0x198>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2b05      	cmp	r3, #5
 8000f8e:	d827      	bhi.n	8000fe0 <Button_Handle+0x170>
 8000f90:	a201      	add	r2, pc, #4	@ (adr r2, 8000f98 <Button_Handle+0x128>)
 8000f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f96:	bf00      	nop
 8000f98:	08000fb1 	.word	0x08000fb1
 8000f9c:	08000fb9 	.word	0x08000fb9
 8000fa0:	08000fc1 	.word	0x08000fc1
 8000fa4:	08000fc9 	.word	0x08000fc9
 8000fa8:	08000fd1 	.word	0x08000fd1
 8000fac:	08000fd9 	.word	0x08000fd9
    {
      case DEFAULT_MODE: 
        System_Default_Mode_Handle (button);
 8000fb0:	6978      	ldr	r0, [r7, #20]
 8000fb2:	f000 f82b 	bl	800100c <System_Default_Mode_Handle>
        break;
 8000fb6:	e014      	b.n	8000fe2 <Button_Handle+0x172>

      case TIME_SETUP_MODE: 
        System_Time_Setup_Mode_Handle (button);
 8000fb8:	6978      	ldr	r0, [r7, #20]
 8000fba:	f000 f88f 	bl	80010dc <System_Time_Setup_Mode_Handle>
        break;
 8000fbe:	e010      	b.n	8000fe2 <Button_Handle+0x172>
      
      case ALARM_SETUP_MODE: 
        System_Alarm_Setup_Mode_Handle (button);
 8000fc0:	6978      	ldr	r0, [r7, #20]
 8000fc2:	f000 fa8b 	bl	80014dc <System_Alarm_Setup_Mode_Handle>
        break;
 8000fc6:	e00c      	b.n	8000fe2 <Button_Handle+0x172>

      case ALARM_VIEW_MODE: 
        System_Alarm_View_Mode_Handle (button);
 8000fc8:	6978      	ldr	r0, [r7, #20]
 8000fca:	f000 fd47 	bl	8001a5c <System_Alarm_View_Mode_Handle>
        break;
 8000fce:	e008      	b.n	8000fe2 <Button_Handle+0x172>

      case ALARM_ACTIVE_MODE: 
        System_Alarm_Active_Mode_Handle (button);
 8000fd0:	6978      	ldr	r0, [r7, #20]
 8000fd2:	f000 fea1 	bl	8001d18 <System_Alarm_Active_Mode_Handle>
        break;
 8000fd6:	e004      	b.n	8000fe2 <Button_Handle+0x172>

      case SYSTEM_OPTIONS_MODE:
        System_Options_Mode_Handle (button);
 8000fd8:	6978      	ldr	r0, [r7, #20]
 8000fda:	f000 ff0f 	bl	8001dfc <System_Options_Mode_Handle>
        break;
 8000fde:	e000      	b.n	8000fe2 <Button_Handle+0x172>

      default:
        break;
 8000fe0:	bf00      	nop
    }
  }
}
 8000fe2:	bf00      	nop
 8000fe4:	371c      	adds	r7, #28
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd90      	pop	{r4, r7, pc}
 8000fea:	bf00      	nop
 8000fec:	08007890 	.word	0x08007890
 8000ff0:	20000000 	.word	0x20000000
 8000ff4:	20000010 	.word	0x20000010
 8000ff8:	20000020 	.word	0x20000020
 8000ffc:	20000030 	.word	0x20000030
 8001000:	20000040 	.word	0x20000040
 8001004:	200003a0 	.word	0x200003a0
 8001008:	20000348 	.word	0x20000348

0800100c <System_Default_Mode_Handle>:
 * @brief  Handles the default system mode based on button actions.
 * @param  button: Pointer to the BUTTON_DATA structure containing button state and index.
 * @retval None
 */
void System_Default_Mode_Handle (BUTTON_DATA *button)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  switch (button->index) 
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	799b      	ldrb	r3, [r3, #6]
 8001018:	2b04      	cmp	r3, #4
 800101a:	d850      	bhi.n	80010be <System_Default_Mode_Handle+0xb2>
 800101c:	a201      	add	r2, pc, #4	@ (adr r2, 8001024 <System_Default_Mode_Handle+0x18>)
 800101e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001022:	bf00      	nop
 8001024:	08001039 	.word	0x08001039
 8001028:	08001063 	.word	0x08001063
 800102c:	08001073 	.word	0x08001073
 8001030:	08001083 	.word	0x08001083
 8001034:	080010a1 	.word	0x080010a1
  {
    // Button 0: If pressed, cycle through the modes; if held, do nothing (reserved for future use)
    case 0:
      if      (button->press_flag)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	7b5b      	ldrb	r3, [r3, #13]
 800103c:	b2db      	uxtb	r3, r3
 800103e:	2b00      	cmp	r3, #0
 8001040:	d00c      	beq.n	800105c <System_Default_Mode_Handle+0x50>
      {
        system_state.mode = (system_state.mode < (SYSTEM_MODE_NUM - 1)) ? (system_state.mode + 1) : 0;
 8001042:	4b25      	ldr	r3, [pc, #148]	@ (80010d8 <System_Default_Mode_Handle+0xcc>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	2b04      	cmp	r3, #4
 8001048:	d804      	bhi.n	8001054 <System_Default_Mode_Handle+0x48>
 800104a:	4b23      	ldr	r3, [pc, #140]	@ (80010d8 <System_Default_Mode_Handle+0xcc>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	3301      	adds	r3, #1
 8001050:	b2db      	uxtb	r3, r3
 8001052:	e000      	b.n	8001056 <System_Default_Mode_Handle+0x4a>
 8001054:	2300      	movs	r3, #0
 8001056:	4a20      	ldr	r2, [pc, #128]	@ (80010d8 <System_Default_Mode_Handle+0xcc>)
 8001058:	7013      	strb	r3, [r2, #0]

      else if (button->hold_flag)
      {
        // Reserved
      }
      break;
 800105a:	e035      	b.n	80010c8 <System_Default_Mode_Handle+0xbc>
      else if (button->hold_flag)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	7b9b      	ldrb	r3, [r3, #14]
      break;
 8001060:	e032      	b.n	80010c8 <System_Default_Mode_Handle+0xbc>
    
    // Button 1: Reserved for future use
    case 1: 
      if (button->press_flag)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	7b5b      	ldrb	r3, [r3, #13]
 8001066:	b2db      	uxtb	r3, r3
 8001068:	2b00      	cmp	r3, #0
 800106a:	d12a      	bne.n	80010c2 <System_Default_Mode_Handle+0xb6>
      {
        // Reserved
      }
      else if (button->hold_flag)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	7b9b      	ldrb	r3, [r3, #14]
      {
        // Reserved
      }
      break;
 8001070:	e027      	b.n	80010c2 <System_Default_Mode_Handle+0xb6>

    // Button 2: Reserved for future use
    case 2: 
      if (button->press_flag)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	7b5b      	ldrb	r3, [r3, #13]
 8001076:	b2db      	uxtb	r3, r3
 8001078:	2b00      	cmp	r3, #0
 800107a:	d124      	bne.n	80010c6 <System_Default_Mode_Handle+0xba>
      {
        // Reserved
      }
      else if (button->hold_flag)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	7b9b      	ldrb	r3, [r3, #14]
      {
        // Reserved
      }
      break;
 8001080:	e021      	b.n	80010c6 <System_Default_Mode_Handle+0xba>
    
    // Button 3: If pressed, quick jump to Time Setup; if held, do nothing (reserved for future use)
    case 3:
      if (button->press_flag) 
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	7b5b      	ldrb	r3, [r3, #13]
 8001086:	b2db      	uxtb	r3, r3
 8001088:	2b00      	cmp	r3, #0
 800108a:	d006      	beq.n	800109a <System_Default_Mode_Handle+0x8e>
      {
        // Quick jump to Time Setup
        system_state.mode = TIME_SETUP_MODE;
 800108c:	4b12      	ldr	r3, [pc, #72]	@ (80010d8 <System_Default_Mode_Handle+0xcc>)
 800108e:	2201      	movs	r2, #1
 8001090:	701a      	strb	r2, [r3, #0]

        // Set the parameter select to the first parameter
        system_state.param_select = SET_MINUTE;
 8001092:	4b11      	ldr	r3, [pc, #68]	@ (80010d8 <System_Default_Mode_Handle+0xcc>)
 8001094:	2200      	movs	r2, #0
 8001096:	709a      	strb	r2, [r3, #2]
      }
      else if (button->hold_flag)
      {
        // Reserved
      }
      break;
 8001098:	e016      	b.n	80010c8 <System_Default_Mode_Handle+0xbc>
      else if (button->hold_flag)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	7b9b      	ldrb	r3, [r3, #14]
      break;
 800109e:	e013      	b.n	80010c8 <System_Default_Mode_Handle+0xbc>

    // Button 4: If pressed, quick jump to Alarm Setup; if held, do nothing (reserved for future use)
    case 4:
      if (button->press_flag)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	7b5b      	ldrb	r3, [r3, #13]
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d006      	beq.n	80010b8 <System_Default_Mode_Handle+0xac>
      {
        // Quick jump to Alarm Setup
        system_state.mode = ALARM_SETUP_MODE;
 80010aa:	4b0b      	ldr	r3, [pc, #44]	@ (80010d8 <System_Default_Mode_Handle+0xcc>)
 80010ac:	2202      	movs	r2, #2
 80010ae:	701a      	strb	r2, [r3, #0]

        // Set the parameter select to the first parameter
        system_state.param_select = SET_MINUTE;
 80010b0:	4b09      	ldr	r3, [pc, #36]	@ (80010d8 <System_Default_Mode_Handle+0xcc>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	709a      	strb	r2, [r3, #2]
      }
      else if (button->hold_flag)
      {
        // Reserved
      }
      break;
 80010b6:	e007      	b.n	80010c8 <System_Default_Mode_Handle+0xbc>
      else if (button->hold_flag)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	7b9b      	ldrb	r3, [r3, #14]
      break;
 80010bc:	e004      	b.n	80010c8 <System_Default_Mode_Handle+0xbc>

    default: 
      break;
 80010be:	bf00      	nop
 80010c0:	e002      	b.n	80010c8 <System_Default_Mode_Handle+0xbc>
      break;
 80010c2:	bf00      	nop
 80010c4:	e000      	b.n	80010c8 <System_Default_Mode_Handle+0xbc>
      break;
 80010c6:	bf00      	nop
  }

  system_state.past_mode = DEFAULT_MODE;
 80010c8:	4b03      	ldr	r3, [pc, #12]	@ (80010d8 <System_Default_Mode_Handle+0xcc>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	705a      	strb	r2, [r3, #1]
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bc80      	pop	{r7}
 80010d6:	4770      	bx	lr
 80010d8:	20000348 	.word	0x20000348

080010dc <System_Time_Setup_Mode_Handle>:
 * @brief  Handles the time setup mode based on button actions.
 * @param  button: Pointer to the BUTTON structure containing button state and index.
 * @retval None
 */
void System_Time_Setup_Mode_Handle (BUTTON_DATA *button)
{
 80010dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010de:	b091      	sub	sp, #68	@ 0x44
 80010e0:	af04      	add	r7, sp, #16
 80010e2:	6078      	str	r0, [r7, #4]
  switch (button->index) 
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	799b      	ldrb	r3, [r3, #6]
 80010e8:	2b04      	cmp	r3, #4
 80010ea:	f200 81e2 	bhi.w	80014b2 <System_Time_Setup_Mode_Handle+0x3d6>
 80010ee:	a201      	add	r2, pc, #4	@ (adr r2, 80010f4 <System_Time_Setup_Mode_Handle+0x18>)
 80010f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f4:	08001109 	.word	0x08001109
 80010f8:	080011af 	.word	0x080011af
 80010fc:	080012d1 	.word	0x080012d1
 8001100:	08001411 	.word	0x08001411
 8001104:	08001485 	.word	0x08001485
  {
    // Button 0: If pressed, cycle through the system modes; if held, set the mode to default
    case 0:
      // If pressed, cycle through the time system modes, but the temporary setting data is still retained (avoid accidental press)
      if (button->press_flag)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	7b5b      	ldrb	r3, [r3, #13]
 800110c:	b2db      	uxtb	r3, r3
 800110e:	2b00      	cmp	r3, #0
 8001110:	d00c      	beq.n	800112c <System_Time_Setup_Mode_Handle+0x50>
      {
        system_state.mode = (system_state.mode < (SYSTEM_MODE_NUM - 1)) ? (system_state.mode + 1) : 0;
 8001112:	4ba6      	ldr	r3, [pc, #664]	@ (80013ac <System_Time_Setup_Mode_Handle+0x2d0>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	2b04      	cmp	r3, #4
 8001118:	d804      	bhi.n	8001124 <System_Time_Setup_Mode_Handle+0x48>
 800111a:	4ba4      	ldr	r3, [pc, #656]	@ (80013ac <System_Time_Setup_Mode_Handle+0x2d0>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	3301      	adds	r3, #1
 8001120:	b2db      	uxtb	r3, r3
 8001122:	e000      	b.n	8001126 <System_Time_Setup_Mode_Handle+0x4a>
 8001124:	2300      	movs	r3, #0
 8001126:	4aa1      	ldr	r2, [pc, #644]	@ (80013ac <System_Time_Setup_Mode_Handle+0x2d0>)
 8001128:	7013      	strb	r3, [r2, #0]
          NOT_USED_MODE,              // Select: DAY_OF_WEEK_MODE, DATE_OF_MONTH_MODE, NOT_USED_MODE
          time_get_data.dayofweek,    // Day of the week: 1-7 (1 = Sunday, 2 = Monday, ..., 7 = Saturday), or Date of the month: 1-31
          true                        // true = ON, false = OFF
        };
      }
      break;
 800112a:	e1c4      	b.n	80014b6 <System_Time_Setup_Mode_Handle+0x3da>
      else if (button->hold_flag && !button->latch)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	7b9b      	ldrb	r3, [r3, #14]
 8001130:	b2db      	uxtb	r3, r3
 8001132:	2b00      	cmp	r3, #0
 8001134:	f000 81bf 	beq.w	80014b6 <System_Time_Setup_Mode_Handle+0x3da>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	7bdb      	ldrb	r3, [r3, #15]
 800113c:	b2db      	uxtb	r3, r3
 800113e:	f083 0301 	eor.w	r3, r3, #1
 8001142:	b2db      	uxtb	r3, r3
 8001144:	2b00      	cmp	r3, #0
 8001146:	f000 81b6 	beq.w	80014b6 <System_Time_Setup_Mode_Handle+0x3da>
        system_state.mode = DEFAULT_MODE; 
 800114a:	4b98      	ldr	r3, [pc, #608]	@ (80013ac <System_Time_Setup_Mode_Handle+0x2d0>)
 800114c:	2200      	movs	r2, #0
 800114e:	701a      	strb	r2, [r3, #0]
        button->latch = true;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2201      	movs	r2, #1
 8001154:	73da      	strb	r2, [r3, #15]
          time_get_data.minute,       // Minutes: 0-59
 8001156:	4b96      	ldr	r3, [pc, #600]	@ (80013b0 <System_Time_Setup_Mode_Handle+0x2d4>)
 8001158:	785b      	ldrb	r3, [r3, #1]
 800115a:	fa5f fc83 	uxtb.w	ip, r3
          time_get_data.hour,         // Hours: 0-23
 800115e:	4b94      	ldr	r3, [pc, #592]	@ (80013b0 <System_Time_Setup_Mode_Handle+0x2d4>)
 8001160:	789b      	ldrb	r3, [r3, #2]
 8001162:	b2de      	uxtb	r6, r3
          time_get_data.dayofweek,    // Day of the week: 1-7 (1 = Sunday, 2 = Monday, ..., 7 = Saturday)
 8001164:	4b92      	ldr	r3, [pc, #584]	@ (80013b0 <System_Time_Setup_Mode_Handle+0x2d4>)
 8001166:	78db      	ldrb	r3, [r3, #3]
 8001168:	b2dd      	uxtb	r5, r3
          time_get_data.dateofmonth,  // Date of the month: 1-31
 800116a:	4b91      	ldr	r3, [pc, #580]	@ (80013b0 <System_Time_Setup_Mode_Handle+0x2d4>)
 800116c:	791b      	ldrb	r3, [r3, #4]
 800116e:	b2dc      	uxtb	r4, r3
          time_get_data.month,        // Month: 1-12
 8001170:	4b8f      	ldr	r3, [pc, #572]	@ (80013b0 <System_Time_Setup_Mode_Handle+0x2d4>)
 8001172:	795b      	ldrb	r3, [r3, #5]
 8001174:	b2d8      	uxtb	r0, r3
          time_get_data.year,         // Year: 0-99 (0 = 2000, 1 = 2001, ..., 99 = 2099)
 8001176:	4b8e      	ldr	r3, [pc, #568]	@ (80013b0 <System_Time_Setup_Mode_Handle+0x2d4>)
 8001178:	799b      	ldrb	r3, [r3, #6]
 800117a:	b2d9      	uxtb	r1, r3
          time_get_data.dayofweek,    // Day of the week: 1-7 (1 = Sunday, 2 = Monday, ..., 7 = Saturday), or Date of the month: 1-31
 800117c:	4b8c      	ldr	r3, [pc, #560]	@ (80013b0 <System_Time_Setup_Mode_Handle+0x2d4>)
 800117e:	78db      	ldrb	r3, [r3, #3]
 8001180:	b2da      	uxtb	r2, r3
        system_param_data =
 8001182:	4b8c      	ldr	r3, [pc, #560]	@ (80013b4 <System_Time_Setup_Mode_Handle+0x2d8>)
 8001184:	f883 c000 	strb.w	ip, [r3]
 8001188:	4b8a      	ldr	r3, [pc, #552]	@ (80013b4 <System_Time_Setup_Mode_Handle+0x2d8>)
 800118a:	705e      	strb	r6, [r3, #1]
 800118c:	4b89      	ldr	r3, [pc, #548]	@ (80013b4 <System_Time_Setup_Mode_Handle+0x2d8>)
 800118e:	709d      	strb	r5, [r3, #2]
 8001190:	4b88      	ldr	r3, [pc, #544]	@ (80013b4 <System_Time_Setup_Mode_Handle+0x2d8>)
 8001192:	70dc      	strb	r4, [r3, #3]
 8001194:	4b87      	ldr	r3, [pc, #540]	@ (80013b4 <System_Time_Setup_Mode_Handle+0x2d8>)
 8001196:	7118      	strb	r0, [r3, #4]
 8001198:	4b86      	ldr	r3, [pc, #536]	@ (80013b4 <System_Time_Setup_Mode_Handle+0x2d8>)
 800119a:	7159      	strb	r1, [r3, #5]
 800119c:	4b85      	ldr	r3, [pc, #532]	@ (80013b4 <System_Time_Setup_Mode_Handle+0x2d8>)
 800119e:	2102      	movs	r1, #2
 80011a0:	7199      	strb	r1, [r3, #6]
 80011a2:	4b84      	ldr	r3, [pc, #528]	@ (80013b4 <System_Time_Setup_Mode_Handle+0x2d8>)
 80011a4:	71da      	strb	r2, [r3, #7]
 80011a6:	4b83      	ldr	r3, [pc, #524]	@ (80013b4 <System_Time_Setup_Mode_Handle+0x2d8>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	721a      	strb	r2, [r3, #8]
      break;
 80011ac:	e183      	b.n	80014b6 <System_Time_Setup_Mode_Handle+0x3da>
    
    // Button 1: If pressed, increment the selected parameter; if held, increment continuously
    case 1: 
      // Pointer to the selected parameter, its maximum value, and minimum value
      uint8_t *paramPtr1 = NULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      uint8_t maxValue1 = 0;    
 80011b2:	2300      	movs	r3, #0
 80011b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
      uint8_t minValue1 = 0;  
 80011b8:	2300      	movs	r3, #0
 80011ba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

      // Determine the parameter to increment based on the current selection
      switch (system_state.param_select)
 80011be:	4b7b      	ldr	r3, [pc, #492]	@ (80013ac <System_Time_Setup_Mode_Handle+0x2d0>)
 80011c0:	789b      	ldrb	r3, [r3, #2]
 80011c2:	2b05      	cmp	r3, #5
 80011c4:	d844      	bhi.n	8001250 <System_Time_Setup_Mode_Handle+0x174>
 80011c6:	a201      	add	r2, pc, #4	@ (adr r2, 80011cc <System_Time_Setup_Mode_Handle+0xf0>)
 80011c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011cc:	080011e5 	.word	0x080011e5
 80011d0:	080011f7 	.word	0x080011f7
 80011d4:	08001209 	.word	0x08001209
 80011d8:	0800121b 	.word	0x0800121b
 80011dc:	0800122d 	.word	0x0800122d
 80011e0:	0800123f 	.word	0x0800123f
      {
        case SET_MINUTE:  paramPtr1 = &system_param_data.minute;  maxValue1 = 59; minValue1 = 0; break;
 80011e4:	4b73      	ldr	r3, [pc, #460]	@ (80013b4 <System_Time_Setup_Mode_Handle+0x2d8>)
 80011e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80011e8:	233b      	movs	r3, #59	@ 0x3b
 80011ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80011ee:	2300      	movs	r3, #0
 80011f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80011f4:	e02d      	b.n	8001252 <System_Time_Setup_Mode_Handle+0x176>
        case SET_HOUR:    paramPtr1 = &system_param_data.hour;    maxValue1 = 23; minValue1 = 0; break;
 80011f6:	4b70      	ldr	r3, [pc, #448]	@ (80013b8 <System_Time_Setup_Mode_Handle+0x2dc>)
 80011f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80011fa:	2317      	movs	r3, #23
 80011fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001200:	2300      	movs	r3, #0
 8001202:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8001206:	e024      	b.n	8001252 <System_Time_Setup_Mode_Handle+0x176>
        case SET_DOW:     paramPtr1 = &system_param_data.dow;     maxValue1 = 7;  minValue1 = 1; break;
 8001208:	4b6c      	ldr	r3, [pc, #432]	@ (80013bc <System_Time_Setup_Mode_Handle+0x2e0>)
 800120a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800120c:	2307      	movs	r3, #7
 800120e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001212:	2301      	movs	r3, #1
 8001214:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8001218:	e01b      	b.n	8001252 <System_Time_Setup_Mode_Handle+0x176>
        case SET_DOM:     paramPtr1 = &system_param_data.dom;     maxValue1 = 31; minValue1 = 1; break;
 800121a:	4b69      	ldr	r3, [pc, #420]	@ (80013c0 <System_Time_Setup_Mode_Handle+0x2e4>)
 800121c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800121e:	231f      	movs	r3, #31
 8001220:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001224:	2301      	movs	r3, #1
 8001226:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800122a:	e012      	b.n	8001252 <System_Time_Setup_Mode_Handle+0x176>
        case SET_MONTH:   paramPtr1 = &system_param_data.month;   maxValue1 = 12; minValue1 = 1; break;
 800122c:	4b65      	ldr	r3, [pc, #404]	@ (80013c4 <System_Time_Setup_Mode_Handle+0x2e8>)
 800122e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001230:	230c      	movs	r3, #12
 8001232:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001236:	2301      	movs	r3, #1
 8001238:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800123c:	e009      	b.n	8001252 <System_Time_Setup_Mode_Handle+0x176>
        case SET_YEAR:    paramPtr1 = &system_param_data.year;    maxValue1 = 99; minValue1 = 0; break;
 800123e:	4b62      	ldr	r3, [pc, #392]	@ (80013c8 <System_Time_Setup_Mode_Handle+0x2ec>)
 8001240:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001242:	2363      	movs	r3, #99	@ 0x63
 8001244:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001248:	2300      	movs	r3, #0
 800124a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800124e:	e000      	b.n	8001252 <System_Time_Setup_Mode_Handle+0x176>
        default: break;
 8001250:	bf00      	nop
      }

      // Initialize the start tick for button 1 hold detection
      uint32_t startTick1 = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	61bb      	str	r3, [r7, #24]

      // Check if the button is pressed or held
      if (button->press_flag) 
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	7b5b      	ldrb	r3, [r3, #13]
 800125a:	b2db      	uxtb	r3, r3
 800125c:	2b00      	cmp	r3, #0
 800125e:	d013      	beq.n	8001288 <System_Time_Setup_Mode_Handle+0x1ac>
      {
        // Increment the selected parameter value once for a button press
        if (paramPtr1) 
 8001260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001262:	2b00      	cmp	r3, #0
 8001264:	f000 8129 	beq.w	80014ba <System_Time_Setup_Mode_Handle+0x3de>
        {
          // Increment the parameter value, wrapping around if necessary
          *paramPtr1 = (*paramPtr1 < maxValue1) ? (*paramPtr1 + 1) : minValue1;
 8001268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8001270:	429a      	cmp	r2, r3
 8001272:	d904      	bls.n	800127e <System_Time_Setup_Mode_Handle+0x1a2>
 8001274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	3301      	adds	r3, #1
 800127a:	b2db      	uxtb	r3, r3
 800127c:	e001      	b.n	8001282 <System_Time_Setup_Mode_Handle+0x1a6>
 800127e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001282:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001284:	7013      	strb	r3, [r2, #0]

          // Update the start tick for the next hold cycle
          startTick1 = HAL_GetTick();
        }
      } 
      break;
 8001286:	e118      	b.n	80014ba <System_Time_Setup_Mode_Handle+0x3de>
      else if (button->hold_flag) 
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	7b9b      	ldrb	r3, [r3, #14]
 800128c:	b2db      	uxtb	r3, r3
 800128e:	2b00      	cmp	r3, #0
 8001290:	f000 8113 	beq.w	80014ba <System_Time_Setup_Mode_Handle+0x3de>
        if (HAL_GetTick() - startTick1 >= BUTTON_HOLD_CYCLE) 
 8001294:	f001 f968 	bl	8002568 <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	2bf9      	cmp	r3, #249	@ 0xf9
 80012a0:	f240 810b 	bls.w	80014ba <System_Time_Setup_Mode_Handle+0x3de>
          if (paramPtr1) 
 80012a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d00e      	beq.n	80012c8 <System_Time_Setup_Mode_Handle+0x1ec>
            *paramPtr1 = (*paramPtr1 < maxValue1) ? (*paramPtr1 + 1) : minValue1;
 80012aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d904      	bls.n	80012c0 <System_Time_Setup_Mode_Handle+0x1e4>
 80012b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	3301      	adds	r3, #1
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	e001      	b.n	80012c4 <System_Time_Setup_Mode_Handle+0x1e8>
 80012c0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80012c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80012c6:	7013      	strb	r3, [r2, #0]
          startTick1 = HAL_GetTick();
 80012c8:	f001 f94e 	bl	8002568 <HAL_GetTick>
 80012cc:	61b8      	str	r0, [r7, #24]
      break;
 80012ce:	e0f4      	b.n	80014ba <System_Time_Setup_Mode_Handle+0x3de>
    
      // Button 2: If pressed, decrement the selected parameter; if held, decrement continuously
      case 2: 
        // Pointer to the selected parameter, its maximum value, and minimum value
        uint8_t *paramPtr2 = NULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	627b      	str	r3, [r7, #36]	@ 0x24
        uint8_t maxValue2 = 0;    
 80012d4:	2300      	movs	r3, #0
 80012d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        uint8_t minValue2 = 0;  
 80012da:	2300      	movs	r3, #0
 80012dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

        // Determine the parameter to decrement based on the current selection
        switch (system_state.param_select)
 80012e0:	4b32      	ldr	r3, [pc, #200]	@ (80013ac <System_Time_Setup_Mode_Handle+0x2d0>)
 80012e2:	789b      	ldrb	r3, [r3, #2]
 80012e4:	2b05      	cmp	r3, #5
 80012e6:	d845      	bhi.n	8001374 <System_Time_Setup_Mode_Handle+0x298>
 80012e8:	a201      	add	r2, pc, #4	@ (adr r2, 80012f0 <System_Time_Setup_Mode_Handle+0x214>)
 80012ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ee:	bf00      	nop
 80012f0:	08001309 	.word	0x08001309
 80012f4:	0800131b 	.word	0x0800131b
 80012f8:	0800132d 	.word	0x0800132d
 80012fc:	0800133f 	.word	0x0800133f
 8001300:	08001351 	.word	0x08001351
 8001304:	08001363 	.word	0x08001363
        {
          case SET_MINUTE:  paramPtr2 = &system_param_data.minute;  maxValue2 = 59; minValue2 = 0; break;
 8001308:	4b2a      	ldr	r3, [pc, #168]	@ (80013b4 <System_Time_Setup_Mode_Handle+0x2d8>)
 800130a:	627b      	str	r3, [r7, #36]	@ 0x24
 800130c:	233b      	movs	r3, #59	@ 0x3b
 800130e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001312:	2300      	movs	r3, #0
 8001314:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001318:	e02d      	b.n	8001376 <System_Time_Setup_Mode_Handle+0x29a>
          case SET_HOUR:    paramPtr2 = &system_param_data.hour;    maxValue2 = 23; minValue2 = 0; break;
 800131a:	4b27      	ldr	r3, [pc, #156]	@ (80013b8 <System_Time_Setup_Mode_Handle+0x2dc>)
 800131c:	627b      	str	r3, [r7, #36]	@ 0x24
 800131e:	2317      	movs	r3, #23
 8001320:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001324:	2300      	movs	r3, #0
 8001326:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800132a:	e024      	b.n	8001376 <System_Time_Setup_Mode_Handle+0x29a>
          case SET_DOW:     paramPtr2 = &system_param_data.dow;     maxValue2 = 7;  minValue2 = 1; break;
 800132c:	4b23      	ldr	r3, [pc, #140]	@ (80013bc <System_Time_Setup_Mode_Handle+0x2e0>)
 800132e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001330:	2307      	movs	r3, #7
 8001332:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001336:	2301      	movs	r3, #1
 8001338:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800133c:	e01b      	b.n	8001376 <System_Time_Setup_Mode_Handle+0x29a>
          case SET_DOM:     paramPtr2 = &system_param_data.dom;     maxValue2 = 31; minValue2 = 1; break;
 800133e:	4b20      	ldr	r3, [pc, #128]	@ (80013c0 <System_Time_Setup_Mode_Handle+0x2e4>)
 8001340:	627b      	str	r3, [r7, #36]	@ 0x24
 8001342:	231f      	movs	r3, #31
 8001344:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001348:	2301      	movs	r3, #1
 800134a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800134e:	e012      	b.n	8001376 <System_Time_Setup_Mode_Handle+0x29a>
          case SET_MONTH:   paramPtr2 = &system_param_data.month;   maxValue2 = 12; minValue2 = 1; break;
 8001350:	4b1c      	ldr	r3, [pc, #112]	@ (80013c4 <System_Time_Setup_Mode_Handle+0x2e8>)
 8001352:	627b      	str	r3, [r7, #36]	@ 0x24
 8001354:	230c      	movs	r3, #12
 8001356:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800135a:	2301      	movs	r3, #1
 800135c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001360:	e009      	b.n	8001376 <System_Time_Setup_Mode_Handle+0x29a>
          case SET_YEAR:    paramPtr2 = &system_param_data.year;    maxValue2 = 99; minValue2 = 0; break;
 8001362:	4b19      	ldr	r3, [pc, #100]	@ (80013c8 <System_Time_Setup_Mode_Handle+0x2ec>)
 8001364:	627b      	str	r3, [r7, #36]	@ 0x24
 8001366:	2363      	movs	r3, #99	@ 0x63
 8001368:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800136c:	2300      	movs	r3, #0
 800136e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001372:	e000      	b.n	8001376 <System_Time_Setup_Mode_Handle+0x29a>
          default: break;
 8001374:	bf00      	nop
        }

        // Initialize the start tick for button 2 hold detection
        uint32_t startTick2 = 0;
 8001376:	2300      	movs	r3, #0
 8001378:	61fb      	str	r3, [r7, #28]

        // Check if the button is pressed or held
        if (button->press_flag) 
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	7b5b      	ldrb	r3, [r3, #13]
 800137e:	b2db      	uxtb	r3, r3
 8001380:	2b00      	cmp	r3, #0
 8001382:	d023      	beq.n	80013cc <System_Time_Setup_Mode_Handle+0x2f0>
        {
          // Decrement the selected parameter value once for a button press
          if (paramPtr2) 
 8001384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001386:	2b00      	cmp	r3, #0
 8001388:	f000 8099 	beq.w	80014be <System_Time_Setup_Mode_Handle+0x3e2>
          {
            // Decrement the parameter value, wrapping around if necessary
            *paramPtr2 = (*paramPtr2 > minValue2) ? (*paramPtr2 - 1) : maxValue2;
 800138c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8001394:	429a      	cmp	r2, r3
 8001396:	d204      	bcs.n	80013a2 <System_Time_Setup_Mode_Handle+0x2c6>
 8001398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	3b01      	subs	r3, #1
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	e001      	b.n	80013a6 <System_Time_Setup_Mode_Handle+0x2ca>
 80013a2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80013a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013a8:	7013      	strb	r3, [r2, #0]

            // Update the start tick for the next hold cycle
            startTick2 = HAL_GetTick();
          }
        } 
        break;
 80013aa:	e088      	b.n	80014be <System_Time_Setup_Mode_Handle+0x3e2>
 80013ac:	20000348 	.word	0x20000348
 80013b0:	20000358 	.word	0x20000358
 80013b4:	2000034c 	.word	0x2000034c
 80013b8:	2000034d 	.word	0x2000034d
 80013bc:	2000034e 	.word	0x2000034e
 80013c0:	2000034f 	.word	0x2000034f
 80013c4:	20000350 	.word	0x20000350
 80013c8:	20000351 	.word	0x20000351
        else if (button->hold_flag) 
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	7b9b      	ldrb	r3, [r3, #14]
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d073      	beq.n	80014be <System_Time_Setup_Mode_Handle+0x3e2>
          if (HAL_GetTick() - startTick2 >= BUTTON_HOLD_CYCLE) 
 80013d6:	f001 f8c7 	bl	8002568 <HAL_GetTick>
 80013da:	4602      	mov	r2, r0
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	2bf9      	cmp	r3, #249	@ 0xf9
 80013e2:	d96c      	bls.n	80014be <System_Time_Setup_Mode_Handle+0x3e2>
            if (paramPtr2) 
 80013e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d00e      	beq.n	8001408 <System_Time_Setup_Mode_Handle+0x32c>
              *paramPtr2 = (*paramPtr2 > minValue2) ? (*paramPtr2 - 1) : maxValue2;
 80013ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d204      	bcs.n	8001400 <System_Time_Setup_Mode_Handle+0x324>
 80013f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	3b01      	subs	r3, #1
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	e001      	b.n	8001404 <System_Time_Setup_Mode_Handle+0x328>
 8001400:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001404:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001406:	7013      	strb	r3, [r2, #0]
            startTick2 = HAL_GetTick();
 8001408:	f001 f8ae 	bl	8002568 <HAL_GetTick>
 800140c:	61f8      	str	r0, [r7, #28]
        break;
 800140e:	e056      	b.n	80014be <System_Time_Setup_Mode_Handle+0x3e2>
    
    // Button 3: If pressed, move to the next field; if held, set the time using the current parameter values
    case 3: 
      // If the button is pressed, move to the next parameter field, wrapping around if necessary
      if(button->press_flag)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	7b5b      	ldrb	r3, [r3, #13]
 8001414:	b2db      	uxtb	r3, r3
 8001416:	2b00      	cmp	r3, #0
 8001418:	d00e      	beq.n	8001438 <System_Time_Setup_Mode_Handle+0x35c>
      {
        if (system_state.param_select == SET_YEAR)
 800141a:	4b2e      	ldr	r3, [pc, #184]	@ (80014d4 <System_Time_Setup_Mode_Handle+0x3f8>)
 800141c:	789b      	ldrb	r3, [r3, #2]
 800141e:	2b05      	cmp	r3, #5
 8001420:	d103      	bne.n	800142a <System_Time_Setup_Mode_Handle+0x34e>
        {
          system_state.param_select = SET_MINUTE;
 8001422:	4b2c      	ldr	r3, [pc, #176]	@ (80014d4 <System_Time_Setup_Mode_Handle+0x3f8>)
 8001424:	2200      	movs	r2, #0
 8001426:	709a      	strb	r2, [r3, #2]

        button->latch = true;

        break;
      }
      break;
 8001428:	e04b      	b.n	80014c2 <System_Time_Setup_Mode_Handle+0x3e6>
          system_state.param_select += 1;
 800142a:	4b2a      	ldr	r3, [pc, #168]	@ (80014d4 <System_Time_Setup_Mode_Handle+0x3f8>)
 800142c:	789b      	ldrb	r3, [r3, #2]
 800142e:	3301      	adds	r3, #1
 8001430:	b2da      	uxtb	r2, r3
 8001432:	4b28      	ldr	r3, [pc, #160]	@ (80014d4 <System_Time_Setup_Mode_Handle+0x3f8>)
 8001434:	709a      	strb	r2, [r3, #2]
      break;
 8001436:	e044      	b.n	80014c2 <System_Time_Setup_Mode_Handle+0x3e6>
      else if (button->hold_flag && !button->latch) 
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	7b9b      	ldrb	r3, [r3, #14]
 800143c:	b2db      	uxtb	r3, r3
 800143e:	2b00      	cmp	r3, #0
 8001440:	d03f      	beq.n	80014c2 <System_Time_Setup_Mode_Handle+0x3e6>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	7bdb      	ldrb	r3, [r3, #15]
 8001446:	b2db      	uxtb	r3, r3
 8001448:	f083 0301 	eor.w	r3, r3, #1
 800144c:	b2db      	uxtb	r3, r3
 800144e:	2b00      	cmp	r3, #0
 8001450:	d037      	beq.n	80014c2 <System_Time_Setup_Mode_Handle+0x3e6>
        Time_Init
 8001452:	4b21      	ldr	r3, [pc, #132]	@ (80014d8 <System_Time_Setup_Mode_Handle+0x3fc>)
 8001454:	7818      	ldrb	r0, [r3, #0]
 8001456:	4b20      	ldr	r3, [pc, #128]	@ (80014d8 <System_Time_Setup_Mode_Handle+0x3fc>)
 8001458:	785c      	ldrb	r4, [r3, #1]
 800145a:	4b1f      	ldr	r3, [pc, #124]	@ (80014d8 <System_Time_Setup_Mode_Handle+0x3fc>)
 800145c:	789d      	ldrb	r5, [r3, #2]
 800145e:	4b1e      	ldr	r3, [pc, #120]	@ (80014d8 <System_Time_Setup_Mode_Handle+0x3fc>)
 8001460:	78db      	ldrb	r3, [r3, #3]
 8001462:	4a1d      	ldr	r2, [pc, #116]	@ (80014d8 <System_Time_Setup_Mode_Handle+0x3fc>)
 8001464:	7912      	ldrb	r2, [r2, #4]
 8001466:	491c      	ldr	r1, [pc, #112]	@ (80014d8 <System_Time_Setup_Mode_Handle+0x3fc>)
 8001468:	7949      	ldrb	r1, [r1, #5]
 800146a:	9102      	str	r1, [sp, #8]
 800146c:	9201      	str	r2, [sp, #4]
 800146e:	9300      	str	r3, [sp, #0]
 8001470:	462b      	mov	r3, r5
 8001472:	4622      	mov	r2, r4
 8001474:	4601      	mov	r1, r0
 8001476:	2000      	movs	r0, #0
 8001478:	f7ff fad8 	bl	8000a2c <Time_Init>
        button->latch = true;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2201      	movs	r2, #1
 8001480:	73da      	strb	r2, [r3, #15]
        break;
 8001482:	e01f      	b.n	80014c4 <System_Time_Setup_Mode_Handle+0x3e8>

    // Button 4: If pressed, move to the previous field; if held, do nothing (reserved for future use)
    case 4: 
      // If the button is pressed, move to the previous parameter field, wrapping around if necessary
      if (button->press_flag)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	7b5b      	ldrb	r3, [r3, #13]
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	d00e      	beq.n	80014ac <System_Time_Setup_Mode_Handle+0x3d0>
      {
        if (system_state.param_select == SET_MINUTE)
 800148e:	4b11      	ldr	r3, [pc, #68]	@ (80014d4 <System_Time_Setup_Mode_Handle+0x3f8>)
 8001490:	789b      	ldrb	r3, [r3, #2]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d103      	bne.n	800149e <System_Time_Setup_Mode_Handle+0x3c2>
        {
          system_state.param_select = SET_YEAR;
 8001496:	4b0f      	ldr	r3, [pc, #60]	@ (80014d4 <System_Time_Setup_Mode_Handle+0x3f8>)
 8001498:	2205      	movs	r2, #5
 800149a:	709a      	strb	r2, [r3, #2]
      // If the button is held down, do nothing (reserved for future use)
      else if (button->hold_flag) 
      {
        // Reserved
      }
      break;
 800149c:	e012      	b.n	80014c4 <System_Time_Setup_Mode_Handle+0x3e8>
          system_state.param_select -= 1;
 800149e:	4b0d      	ldr	r3, [pc, #52]	@ (80014d4 <System_Time_Setup_Mode_Handle+0x3f8>)
 80014a0:	789b      	ldrb	r3, [r3, #2]
 80014a2:	3b01      	subs	r3, #1
 80014a4:	b2da      	uxtb	r2, r3
 80014a6:	4b0b      	ldr	r3, [pc, #44]	@ (80014d4 <System_Time_Setup_Mode_Handle+0x3f8>)
 80014a8:	709a      	strb	r2, [r3, #2]
      break;
 80014aa:	e00b      	b.n	80014c4 <System_Time_Setup_Mode_Handle+0x3e8>
      else if (button->hold_flag) 
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	7b9b      	ldrb	r3, [r3, #14]
      break;
 80014b0:	e008      	b.n	80014c4 <System_Time_Setup_Mode_Handle+0x3e8>

    default: 
      break;
 80014b2:	bf00      	nop
 80014b4:	e006      	b.n	80014c4 <System_Time_Setup_Mode_Handle+0x3e8>
      break;
 80014b6:	bf00      	nop
 80014b8:	e004      	b.n	80014c4 <System_Time_Setup_Mode_Handle+0x3e8>
      break;
 80014ba:	bf00      	nop
 80014bc:	e002      	b.n	80014c4 <System_Time_Setup_Mode_Handle+0x3e8>
        break;
 80014be:	bf00      	nop
 80014c0:	e000      	b.n	80014c4 <System_Time_Setup_Mode_Handle+0x3e8>
      break;
 80014c2:	bf00      	nop
  }

  system_state.past_mode = TIME_SETUP_MODE;
 80014c4:	4b03      	ldr	r3, [pc, #12]	@ (80014d4 <System_Time_Setup_Mode_Handle+0x3f8>)
 80014c6:	2201      	movs	r2, #1
 80014c8:	705a      	strb	r2, [r3, #1]
}
 80014ca:	bf00      	nop
 80014cc:	3734      	adds	r7, #52	@ 0x34
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000348 	.word	0x20000348
 80014d8:	2000034c 	.word	0x2000034c

080014dc <System_Alarm_Setup_Mode_Handle>:
 * @brief  Handles the alarm setup mode based on button actions.
 * @param  button: Pointer to the BUTTON structure containing button state and index.
 * @retval None
 */
void System_Alarm_Setup_Mode_Handle (BUTTON_DATA *button)
{
 80014dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014de:	b091      	sub	sp, #68	@ 0x44
 80014e0:	af04      	add	r7, sp, #16
 80014e2:	6078      	str	r0, [r7, #4]
  switch (button->index) 
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	799b      	ldrb	r3, [r3, #6]
 80014e8:	2b04      	cmp	r3, #4
 80014ea:	f200 829f 	bhi.w	8001a2c <System_Alarm_Setup_Mode_Handle+0x550>
 80014ee:	a201      	add	r2, pc, #4	@ (adr r2, 80014f4 <System_Alarm_Setup_Mode_Handle+0x18>)
 80014f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014f4:	08001509 	.word	0x08001509
 80014f8:	080015af 	.word	0x080015af
 80014fc:	080016e1 	.word	0x080016e1
 8001500:	0800187f 	.word	0x0800187f
 8001504:	08001993 	.word	0x08001993
  {
    // Button 0: If pressed, cycle through the system modes; if held, set the mode to default
    case 0:
      // If pressed, cycle through the time system modes, but the temporary setting data is still retained (avoid accidental press)
      if (button->press_flag)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	7b5b      	ldrb	r3, [r3, #13]
 800150c:	b2db      	uxtb	r3, r3
 800150e:	2b00      	cmp	r3, #0
 8001510:	d00c      	beq.n	800152c <System_Alarm_Setup_Mode_Handle+0x50>
      {
        system_state.mode = (system_state.mode < (SYSTEM_MODE_NUM - 1)) ? (system_state.mode + 1) : 0;
 8001512:	4b9e      	ldr	r3, [pc, #632]	@ (800178c <System_Alarm_Setup_Mode_Handle+0x2b0>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	2b04      	cmp	r3, #4
 8001518:	d804      	bhi.n	8001524 <System_Alarm_Setup_Mode_Handle+0x48>
 800151a:	4b9c      	ldr	r3, [pc, #624]	@ (800178c <System_Alarm_Setup_Mode_Handle+0x2b0>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	3301      	adds	r3, #1
 8001520:	b2db      	uxtb	r3, r3
 8001522:	e000      	b.n	8001526 <System_Alarm_Setup_Mode_Handle+0x4a>
 8001524:	2300      	movs	r3, #0
 8001526:	4a99      	ldr	r2, [pc, #612]	@ (800178c <System_Alarm_Setup_Mode_Handle+0x2b0>)
 8001528:	7013      	strb	r3, [r2, #0]
          NOT_USED_MODE,              // Select: DAY_OF_WEEK_MODE, DATE_OF_MONTH_MODE, NOT_USED_MODE
          time_get_data.dayofweek,    // Day of the week: 1-7 (1 = Sunday, 2 = Monday, ..., 7 = Saturday), or Date of the month: 1-31
          true                        // true = ON, false = OFF
        };
      }
      break;
 800152a:	e281      	b.n	8001a30 <System_Alarm_Setup_Mode_Handle+0x554>
      else if (button->hold_flag && !button->latch)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	7b9b      	ldrb	r3, [r3, #14]
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2b00      	cmp	r3, #0
 8001534:	f000 827c 	beq.w	8001a30 <System_Alarm_Setup_Mode_Handle+0x554>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	7bdb      	ldrb	r3, [r3, #15]
 800153c:	b2db      	uxtb	r3, r3
 800153e:	f083 0301 	eor.w	r3, r3, #1
 8001542:	b2db      	uxtb	r3, r3
 8001544:	2b00      	cmp	r3, #0
 8001546:	f000 8273 	beq.w	8001a30 <System_Alarm_Setup_Mode_Handle+0x554>
        system_state.mode = DEFAULT_MODE; 
 800154a:	4b90      	ldr	r3, [pc, #576]	@ (800178c <System_Alarm_Setup_Mode_Handle+0x2b0>)
 800154c:	2200      	movs	r2, #0
 800154e:	701a      	strb	r2, [r3, #0]
        button->latch = true;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2201      	movs	r2, #1
 8001554:	73da      	strb	r2, [r3, #15]
          time_get_data.minute,       // Minutes: 0-59
 8001556:	4b8e      	ldr	r3, [pc, #568]	@ (8001790 <System_Alarm_Setup_Mode_Handle+0x2b4>)
 8001558:	785b      	ldrb	r3, [r3, #1]
 800155a:	fa5f fc83 	uxtb.w	ip, r3
          time_get_data.hour,         // Hours: 0-23
 800155e:	4b8c      	ldr	r3, [pc, #560]	@ (8001790 <System_Alarm_Setup_Mode_Handle+0x2b4>)
 8001560:	789b      	ldrb	r3, [r3, #2]
 8001562:	b2de      	uxtb	r6, r3
          time_get_data.dayofweek,    // Day of the week: 1-7 (1 = Sunday, 2 = Monday, ..., 7 = Saturday)
 8001564:	4b8a      	ldr	r3, [pc, #552]	@ (8001790 <System_Alarm_Setup_Mode_Handle+0x2b4>)
 8001566:	78db      	ldrb	r3, [r3, #3]
 8001568:	b2dd      	uxtb	r5, r3
          time_get_data.dateofmonth,  // Date of the month: 1-31
 800156a:	4b89      	ldr	r3, [pc, #548]	@ (8001790 <System_Alarm_Setup_Mode_Handle+0x2b4>)
 800156c:	791b      	ldrb	r3, [r3, #4]
 800156e:	b2dc      	uxtb	r4, r3
          time_get_data.month,        // Month: 1-12
 8001570:	4b87      	ldr	r3, [pc, #540]	@ (8001790 <System_Alarm_Setup_Mode_Handle+0x2b4>)
 8001572:	795b      	ldrb	r3, [r3, #5]
 8001574:	b2d8      	uxtb	r0, r3
          time_get_data.year,         // Year: 0-99 (0 = 2000, 1 = 2001, ..., 99 = 2099)
 8001576:	4b86      	ldr	r3, [pc, #536]	@ (8001790 <System_Alarm_Setup_Mode_Handle+0x2b4>)
 8001578:	799b      	ldrb	r3, [r3, #6]
 800157a:	b2d9      	uxtb	r1, r3
          time_get_data.dayofweek,    // Day of the week: 1-7 (1 = Sunday, 2 = Monday, ..., 7 = Saturday), or Date of the month: 1-31
 800157c:	4b84      	ldr	r3, [pc, #528]	@ (8001790 <System_Alarm_Setup_Mode_Handle+0x2b4>)
 800157e:	78db      	ldrb	r3, [r3, #3]
 8001580:	b2da      	uxtb	r2, r3
        system_param_data =
 8001582:	4b84      	ldr	r3, [pc, #528]	@ (8001794 <System_Alarm_Setup_Mode_Handle+0x2b8>)
 8001584:	f883 c000 	strb.w	ip, [r3]
 8001588:	4b82      	ldr	r3, [pc, #520]	@ (8001794 <System_Alarm_Setup_Mode_Handle+0x2b8>)
 800158a:	705e      	strb	r6, [r3, #1]
 800158c:	4b81      	ldr	r3, [pc, #516]	@ (8001794 <System_Alarm_Setup_Mode_Handle+0x2b8>)
 800158e:	709d      	strb	r5, [r3, #2]
 8001590:	4b80      	ldr	r3, [pc, #512]	@ (8001794 <System_Alarm_Setup_Mode_Handle+0x2b8>)
 8001592:	70dc      	strb	r4, [r3, #3]
 8001594:	4b7f      	ldr	r3, [pc, #508]	@ (8001794 <System_Alarm_Setup_Mode_Handle+0x2b8>)
 8001596:	7118      	strb	r0, [r3, #4]
 8001598:	4b7e      	ldr	r3, [pc, #504]	@ (8001794 <System_Alarm_Setup_Mode_Handle+0x2b8>)
 800159a:	7159      	strb	r1, [r3, #5]
 800159c:	4b7d      	ldr	r3, [pc, #500]	@ (8001794 <System_Alarm_Setup_Mode_Handle+0x2b8>)
 800159e:	2102      	movs	r1, #2
 80015a0:	7199      	strb	r1, [r3, #6]
 80015a2:	4b7c      	ldr	r3, [pc, #496]	@ (8001794 <System_Alarm_Setup_Mode_Handle+0x2b8>)
 80015a4:	71da      	strb	r2, [r3, #7]
 80015a6:	4b7b      	ldr	r3, [pc, #492]	@ (8001794 <System_Alarm_Setup_Mode_Handle+0x2b8>)
 80015a8:	2201      	movs	r2, #1
 80015aa:	721a      	strb	r2, [r3, #8]
      break;
 80015ac:	e240      	b.n	8001a30 <System_Alarm_Setup_Mode_Handle+0x554>

    // Button 1: If pressed, increment the selected parameter; if held, increment continuously
    case 1: 
      // Pointer to the selected parameter, its maximum value, and minimum value
      uint8_t *paramPtr1 = NULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      uint8_t maxValue1 = 0;    
 80015b2:	2300      	movs	r3, #0
 80015b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
      uint8_t minValue1 = 0;  
 80015b8:	2300      	movs	r3, #0
 80015ba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

      // Determine the parameter to increment based on the current selection
      switch (system_state.param_select)
 80015be:	4b73      	ldr	r3, [pc, #460]	@ (800178c <System_Alarm_Setup_Mode_Handle+0x2b0>)
 80015c0:	789b      	ldrb	r3, [r3, #2]
 80015c2:	2b08      	cmp	r3, #8
 80015c4:	d848      	bhi.n	8001658 <System_Alarm_Setup_Mode_Handle+0x17c>
 80015c6:	a201      	add	r2, pc, #4	@ (adr r2, 80015cc <System_Alarm_Setup_Mode_Handle+0xf0>)
 80015c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015cc:	080015f1 	.word	0x080015f1
 80015d0:	08001603 	.word	0x08001603
 80015d4:	08001659 	.word	0x08001659
 80015d8:	08001659 	.word	0x08001659
 80015dc:	08001659 	.word	0x08001659
 80015e0:	08001659 	.word	0x08001659
 80015e4:	08001615 	.word	0x08001615
 80015e8:	08001627 	.word	0x08001627
 80015ec:	08001639 	.word	0x08001639
      {
        case SET_MINUTE:  paramPtr1 = &system_param_data.minute;  maxValue1 = 59; minValue1 = 0; break;
 80015f0:	4b68      	ldr	r3, [pc, #416]	@ (8001794 <System_Alarm_Setup_Mode_Handle+0x2b8>)
 80015f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80015f4:	233b      	movs	r3, #59	@ 0x3b
 80015f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80015fa:	2300      	movs	r3, #0
 80015fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8001600:	e02b      	b.n	800165a <System_Alarm_Setup_Mode_Handle+0x17e>
        case SET_HOUR:    paramPtr1 = &system_param_data.hour;    maxValue1 = 23; minValue1 = 0; break;
 8001602:	4b65      	ldr	r3, [pc, #404]	@ (8001798 <System_Alarm_Setup_Mode_Handle+0x2bc>)
 8001604:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001606:	2317      	movs	r3, #23
 8001608:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800160c:	2300      	movs	r3, #0
 800160e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8001612:	e022      	b.n	800165a <System_Alarm_Setup_Mode_Handle+0x17e>
        case SET_DY_DT:   paramPtr1 = (uint8_t *)&system_param_data.dy_dt; maxValue1 = 2; minValue1 = 0; break;
 8001614:	4b61      	ldr	r3, [pc, #388]	@ (800179c <System_Alarm_Setup_Mode_Handle+0x2c0>)
 8001616:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001618:	2302      	movs	r3, #2
 800161a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800161e:	2300      	movs	r3, #0
 8001620:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8001624:	e019      	b.n	800165a <System_Alarm_Setup_Mode_Handle+0x17e>
        case SET_DOW_DOM: paramPtr1 = &system_param_data.dow_dom; maxValue1 = 31; minValue1 = 1; break;
 8001626:	4b5e      	ldr	r3, [pc, #376]	@ (80017a0 <System_Alarm_Setup_Mode_Handle+0x2c4>)
 8001628:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800162a:	231f      	movs	r3, #31
 800162c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001630:	2301      	movs	r3, #1
 8001632:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8001636:	e010      	b.n	800165a <System_Alarm_Setup_Mode_Handle+0x17e>
        case SET_ON_OFF:  system_param_data.on_off = !system_param_data.on_off;                  break;
 8001638:	4b56      	ldr	r3, [pc, #344]	@ (8001794 <System_Alarm_Setup_Mode_Handle+0x2b8>)
 800163a:	7a1b      	ldrb	r3, [r3, #8]
 800163c:	2b00      	cmp	r3, #0
 800163e:	bf14      	ite	ne
 8001640:	2301      	movne	r3, #1
 8001642:	2300      	moveq	r3, #0
 8001644:	b2db      	uxtb	r3, r3
 8001646:	f083 0301 	eor.w	r3, r3, #1
 800164a:	b2db      	uxtb	r3, r3
 800164c:	f003 0301 	and.w	r3, r3, #1
 8001650:	b2da      	uxtb	r2, r3
 8001652:	4b50      	ldr	r3, [pc, #320]	@ (8001794 <System_Alarm_Setup_Mode_Handle+0x2b8>)
 8001654:	721a      	strb	r2, [r3, #8]
 8001656:	e000      	b.n	800165a <System_Alarm_Setup_Mode_Handle+0x17e>
        default: break;
 8001658:	bf00      	nop
      }

      if (system_state.param_select == SET_ON_OFF)
 800165a:	4b4c      	ldr	r3, [pc, #304]	@ (800178c <System_Alarm_Setup_Mode_Handle+0x2b0>)
 800165c:	789b      	ldrb	r3, [r3, #2]
 800165e:	2b08      	cmp	r3, #8
 8001660:	f000 81e8 	beq.w	8001a34 <System_Alarm_Setup_Mode_Handle+0x558>
      {
        break;
      }

      // Initialize the start tick for button 1 hold detection
      uint32_t startTick1 = 0;
 8001664:	2300      	movs	r3, #0
 8001666:	617b      	str	r3, [r7, #20]
      
      // Check if the button is pressed or held
      if (button->press_flag) 
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	7b5b      	ldrb	r3, [r3, #13]
 800166c:	b2db      	uxtb	r3, r3
 800166e:	2b00      	cmp	r3, #0
 8001670:	d013      	beq.n	800169a <System_Alarm_Setup_Mode_Handle+0x1be>
      {
        // Increment the selected parameter value once for a button press
        if (paramPtr1) 
 8001672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001674:	2b00      	cmp	r3, #0
 8001676:	f000 81df 	beq.w	8001a38 <System_Alarm_Setup_Mode_Handle+0x55c>
        {
          // Increment the parameter value, wrapping around if necessary
          *paramPtr1 = (*paramPtr1 < maxValue1) ? (*paramPtr1 + 1) : minValue1;
 800167a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8001682:	429a      	cmp	r2, r3
 8001684:	d904      	bls.n	8001690 <System_Alarm_Setup_Mode_Handle+0x1b4>
 8001686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	3301      	adds	r3, #1
 800168c:	b2db      	uxtb	r3, r3
 800168e:	e001      	b.n	8001694 <System_Alarm_Setup_Mode_Handle+0x1b8>
 8001690:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001694:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001696:	7013      	strb	r3, [r2, #0]

        // Update the start tick for the next hold cycle
        startTick1 = HAL_GetTick();
      } 
      
      break;
 8001698:	e1ce      	b.n	8001a38 <System_Alarm_Setup_Mode_Handle+0x55c>
      else if (button->hold_flag) 
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	7b9b      	ldrb	r3, [r3, #14]
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	f000 81c9 	beq.w	8001a38 <System_Alarm_Setup_Mode_Handle+0x55c>
        if (HAL_GetTick() - startTick1 >= BUTTON_HOLD_CYCLE) 
 80016a6:	f000 ff5f 	bl	8002568 <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	2bf9      	cmp	r3, #249	@ 0xf9
 80016b2:	d911      	bls.n	80016d8 <System_Alarm_Setup_Mode_Handle+0x1fc>
          if (paramPtr1) 
 80016b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d00e      	beq.n	80016d8 <System_Alarm_Setup_Mode_Handle+0x1fc>
            *paramPtr1 = (*paramPtr1 < maxValue1) ? (*paramPtr1 + 1) : minValue1;
 80016ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d904      	bls.n	80016d0 <System_Alarm_Setup_Mode_Handle+0x1f4>
 80016c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	3301      	adds	r3, #1
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	e001      	b.n	80016d4 <System_Alarm_Setup_Mode_Handle+0x1f8>
 80016d0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80016d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016d6:	7013      	strb	r3, [r2, #0]
        startTick1 = HAL_GetTick();
 80016d8:	f000 ff46 	bl	8002568 <HAL_GetTick>
 80016dc:	6178      	str	r0, [r7, #20]
      break;
 80016de:	e1ab      	b.n	8001a38 <System_Alarm_Setup_Mode_Handle+0x55c>

      case 2: // BTN2: Decrement current value or scroll slots
      {
        // Pointer to the selected parameter, its maximum value, and minimum value
        uint8_t *paramPtr2 = NULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	627b      	str	r3, [r7, #36]	@ 0x24
        uint8_t maxValue2 = 0;    
 80016e4:	2300      	movs	r3, #0
 80016e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        uint8_t minValue2 = 0;  
 80016ea:	2300      	movs	r3, #0
 80016ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

        // Determine the parameter to decrement based on the current selection
        switch (system_state.param_select)
 80016f0:	4b26      	ldr	r3, [pc, #152]	@ (800178c <System_Alarm_Setup_Mode_Handle+0x2b0>)
 80016f2:	789b      	ldrb	r3, [r3, #2]
 80016f4:	2b08      	cmp	r3, #8
 80016f6:	d855      	bhi.n	80017a4 <System_Alarm_Setup_Mode_Handle+0x2c8>
 80016f8:	a201      	add	r2, pc, #4	@ (adr r2, 8001700 <System_Alarm_Setup_Mode_Handle+0x224>)
 80016fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016fe:	bf00      	nop
 8001700:	08001725 	.word	0x08001725
 8001704:	08001737 	.word	0x08001737
 8001708:	080017a5 	.word	0x080017a5
 800170c:	080017a5 	.word	0x080017a5
 8001710:	080017a5 	.word	0x080017a5
 8001714:	080017a5 	.word	0x080017a5
 8001718:	08001749 	.word	0x08001749
 800171c:	0800175b 	.word	0x0800175b
 8001720:	0800176d 	.word	0x0800176d
        {
          case SET_MINUTE:  paramPtr2 = &system_param_data.minute;  maxValue2 = 59; minValue2 = 0; break;
 8001724:	4b1b      	ldr	r3, [pc, #108]	@ (8001794 <System_Alarm_Setup_Mode_Handle+0x2b8>)
 8001726:	627b      	str	r3, [r7, #36]	@ 0x24
 8001728:	233b      	movs	r3, #59	@ 0x3b
 800172a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800172e:	2300      	movs	r3, #0
 8001730:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001734:	e037      	b.n	80017a6 <System_Alarm_Setup_Mode_Handle+0x2ca>
          case SET_HOUR:    paramPtr2 = &system_param_data.hour;    maxValue2 = 23; minValue2 = 0; break;
 8001736:	4b18      	ldr	r3, [pc, #96]	@ (8001798 <System_Alarm_Setup_Mode_Handle+0x2bc>)
 8001738:	627b      	str	r3, [r7, #36]	@ 0x24
 800173a:	2317      	movs	r3, #23
 800173c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001740:	2300      	movs	r3, #0
 8001742:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001746:	e02e      	b.n	80017a6 <System_Alarm_Setup_Mode_Handle+0x2ca>
          case SET_DY_DT:   paramPtr2 = (uint8_t *)&system_param_data.dy_dt; maxValue2 = 2; minValue2 = 0; break;
 8001748:	4b14      	ldr	r3, [pc, #80]	@ (800179c <System_Alarm_Setup_Mode_Handle+0x2c0>)
 800174a:	627b      	str	r3, [r7, #36]	@ 0x24
 800174c:	2302      	movs	r3, #2
 800174e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001752:	2300      	movs	r3, #0
 8001754:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001758:	e025      	b.n	80017a6 <System_Alarm_Setup_Mode_Handle+0x2ca>
          case SET_DOW_DOM: paramPtr2 = &system_param_data.dow_dom; maxValue2 = 31; minValue2 = 1; break;
 800175a:	4b11      	ldr	r3, [pc, #68]	@ (80017a0 <System_Alarm_Setup_Mode_Handle+0x2c4>)
 800175c:	627b      	str	r3, [r7, #36]	@ 0x24
 800175e:	231f      	movs	r3, #31
 8001760:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001764:	2301      	movs	r3, #1
 8001766:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800176a:	e01c      	b.n	80017a6 <System_Alarm_Setup_Mode_Handle+0x2ca>
          case SET_ON_OFF:  system_param_data.on_off = !system_param_data.on_off;                  break;
 800176c:	4b09      	ldr	r3, [pc, #36]	@ (8001794 <System_Alarm_Setup_Mode_Handle+0x2b8>)
 800176e:	7a1b      	ldrb	r3, [r3, #8]
 8001770:	2b00      	cmp	r3, #0
 8001772:	bf14      	ite	ne
 8001774:	2301      	movne	r3, #1
 8001776:	2300      	moveq	r3, #0
 8001778:	b2db      	uxtb	r3, r3
 800177a:	f083 0301 	eor.w	r3, r3, #1
 800177e:	b2db      	uxtb	r3, r3
 8001780:	f003 0301 	and.w	r3, r3, #1
 8001784:	b2da      	uxtb	r2, r3
 8001786:	4b03      	ldr	r3, [pc, #12]	@ (8001794 <System_Alarm_Setup_Mode_Handle+0x2b8>)
 8001788:	721a      	strb	r2, [r3, #8]
 800178a:	e00c      	b.n	80017a6 <System_Alarm_Setup_Mode_Handle+0x2ca>
 800178c:	20000348 	.word	0x20000348
 8001790:	20000358 	.word	0x20000358
 8001794:	2000034c 	.word	0x2000034c
 8001798:	2000034d 	.word	0x2000034d
 800179c:	20000352 	.word	0x20000352
 80017a0:	20000353 	.word	0x20000353
          default: break;
 80017a4:	bf00      	nop
        }

        if (system_state.param_select == SET_ON_OFF)
 80017a6:	4b9d      	ldr	r3, [pc, #628]	@ (8001a1c <System_Alarm_Setup_Mode_Handle+0x540>)
 80017a8:	789b      	ldrb	r3, [r3, #2]
 80017aa:	2b08      	cmp	r3, #8
 80017ac:	f000 8146 	beq.w	8001a3c <System_Alarm_Setup_Mode_Handle+0x560>
        {
          break;
        }

        // Initialize the start tick for button 2 hold detection
        uint32_t startTick2 = 0;
 80017b0:	2300      	movs	r3, #0
 80017b2:	61bb      	str	r3, [r7, #24]

        // Check if the button is pressed or held
        if (button->press_flag) 
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	7b5b      	ldrb	r3, [r3, #13]
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d027      	beq.n	800180e <System_Alarm_Setup_Mode_Handle+0x332>
        {
          // Check if the selected parameter is ON/OFF
          if (system_state.param_select == SET_ON_OFF) 
 80017be:	4b97      	ldr	r3, [pc, #604]	@ (8001a1c <System_Alarm_Setup_Mode_Handle+0x540>)
 80017c0:	789b      	ldrb	r3, [r3, #2]
 80017c2:	2b08      	cmp	r3, #8
 80017c4:	d10f      	bne.n	80017e6 <System_Alarm_Setup_Mode_Handle+0x30a>
          {
            // Toggle the on/off state of the alarm
            system_param_data.on_off = !system_param_data.on_off;
 80017c6:	4b96      	ldr	r3, [pc, #600]	@ (8001a20 <System_Alarm_Setup_Mode_Handle+0x544>)
 80017c8:	7a1b      	ldrb	r3, [r3, #8]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	bf14      	ite	ne
 80017ce:	2301      	movne	r3, #1
 80017d0:	2300      	moveq	r3, #0
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	f083 0301 	eor.w	r3, r3, #1
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	b2da      	uxtb	r2, r3
 80017e0:	4b8f      	ldr	r3, [pc, #572]	@ (8001a20 <System_Alarm_Setup_Mode_Handle+0x544>)
 80017e2:	721a      	strb	r2, [r3, #8]
            // Update the start tick for the next hold cycle
            startTick2 = HAL_GetTick();
          }
        } 

        break;
 80017e4:	e12c      	b.n	8001a40 <System_Alarm_Setup_Mode_Handle+0x564>
            if (paramPtr2) 
 80017e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	f000 8129 	beq.w	8001a40 <System_Alarm_Setup_Mode_Handle+0x564>
              *paramPtr2 = (*paramPtr2 > minValue2) ? (*paramPtr2 - 1) : maxValue2;
 80017ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d204      	bcs.n	8001804 <System_Alarm_Setup_Mode_Handle+0x328>
 80017fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	3b01      	subs	r3, #1
 8001800:	b2db      	uxtb	r3, r3
 8001802:	e001      	b.n	8001808 <System_Alarm_Setup_Mode_Handle+0x32c>
 8001804:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001808:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800180a:	7013      	strb	r3, [r2, #0]
        break;
 800180c:	e118      	b.n	8001a40 <System_Alarm_Setup_Mode_Handle+0x564>
        else if (button->hold_flag) 
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	7b9b      	ldrb	r3, [r3, #14]
 8001812:	b2db      	uxtb	r3, r3
 8001814:	2b00      	cmp	r3, #0
 8001816:	f000 8113 	beq.w	8001a40 <System_Alarm_Setup_Mode_Handle+0x564>
          if (HAL_GetTick() - startTick2 >= BUTTON_HOLD_CYCLE) 
 800181a:	f000 fea5 	bl	8002568 <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	2bf9      	cmp	r3, #249	@ 0xf9
 8001826:	f240 810b 	bls.w	8001a40 <System_Alarm_Setup_Mode_Handle+0x564>
            if (system_state.param_select == SET_ON_OFF) 
 800182a:	4b7c      	ldr	r3, [pc, #496]	@ (8001a1c <System_Alarm_Setup_Mode_Handle+0x540>)
 800182c:	789b      	ldrb	r3, [r3, #2]
 800182e:	2b08      	cmp	r3, #8
 8001830:	d10f      	bne.n	8001852 <System_Alarm_Setup_Mode_Handle+0x376>
              system_param_data.on_off = !system_param_data.on_off;
 8001832:	4b7b      	ldr	r3, [pc, #492]	@ (8001a20 <System_Alarm_Setup_Mode_Handle+0x544>)
 8001834:	7a1b      	ldrb	r3, [r3, #8]
 8001836:	2b00      	cmp	r3, #0
 8001838:	bf14      	ite	ne
 800183a:	2301      	movne	r3, #1
 800183c:	2300      	moveq	r3, #0
 800183e:	b2db      	uxtb	r3, r3
 8001840:	f083 0301 	eor.w	r3, r3, #1
 8001844:	b2db      	uxtb	r3, r3
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	b2da      	uxtb	r2, r3
 800184c:	4b74      	ldr	r3, [pc, #464]	@ (8001a20 <System_Alarm_Setup_Mode_Handle+0x544>)
 800184e:	721a      	strb	r2, [r3, #8]
 8001850:	e011      	b.n	8001876 <System_Alarm_Setup_Mode_Handle+0x39a>
              if (paramPtr2) 
 8001852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001854:	2b00      	cmp	r3, #0
 8001856:	d00e      	beq.n	8001876 <System_Alarm_Setup_Mode_Handle+0x39a>
                *paramPtr2 = (*paramPtr2 > minValue2) ? (*paramPtr2 - 1) : maxValue2;
 8001858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8001860:	429a      	cmp	r2, r3
 8001862:	d204      	bcs.n	800186e <System_Alarm_Setup_Mode_Handle+0x392>
 8001864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	3b01      	subs	r3, #1
 800186a:	b2db      	uxtb	r3, r3
 800186c:	e001      	b.n	8001872 <System_Alarm_Setup_Mode_Handle+0x396>
 800186e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001872:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001874:	7013      	strb	r3, [r2, #0]
            startTick2 = HAL_GetTick();
 8001876:	f000 fe77 	bl	8002568 <HAL_GetTick>
 800187a:	61b8      	str	r0, [r7, #24]
        break;
 800187c:	e0e0      	b.n	8001a40 <System_Alarm_Setup_Mode_Handle+0x564>
      }
    
    // Button 3: If pressed, move to the next field; if held, save the alarm and return to default mode
    case 3:
      // If the button is pressed, move to the next parameter field, wrapping around if necessary  
      if (button->press_flag)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	7b5b      	ldrb	r3, [r3, #13]
 8001882:	b2db      	uxtb	r3, r3
 8001884:	2b00      	cmp	r3, #0
 8001886:	d016      	beq.n	80018b6 <System_Alarm_Setup_Mode_Handle+0x3da>
      {
        if      (system_state.param_select == SET_HOUR)
 8001888:	4b64      	ldr	r3, [pc, #400]	@ (8001a1c <System_Alarm_Setup_Mode_Handle+0x540>)
 800188a:	789b      	ldrb	r3, [r3, #2]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d103      	bne.n	8001898 <System_Alarm_Setup_Mode_Handle+0x3bc>
        {
          system_state.param_select = SET_DY_DT;
 8001890:	4b62      	ldr	r3, [pc, #392]	@ (8001a1c <System_Alarm_Setup_Mode_Handle+0x540>)
 8001892:	2206      	movs	r2, #6
 8001894:	709a      	strb	r2, [r3, #2]
        }

        // Reset the button latch to avoid function replication
        button->latch = true;
      }
      break;
 8001896:	e0d5      	b.n	8001a44 <System_Alarm_Setup_Mode_Handle+0x568>
        else if (system_state.param_select == SET_ON_OFF)
 8001898:	4b60      	ldr	r3, [pc, #384]	@ (8001a1c <System_Alarm_Setup_Mode_Handle+0x540>)
 800189a:	789b      	ldrb	r3, [r3, #2]
 800189c:	2b08      	cmp	r3, #8
 800189e:	d103      	bne.n	80018a8 <System_Alarm_Setup_Mode_Handle+0x3cc>
          system_state.param_select = SET_MINUTE;
 80018a0:	4b5e      	ldr	r3, [pc, #376]	@ (8001a1c <System_Alarm_Setup_Mode_Handle+0x540>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	709a      	strb	r2, [r3, #2]
      break;
 80018a6:	e0cd      	b.n	8001a44 <System_Alarm_Setup_Mode_Handle+0x568>
          system_state.param_select += 1;
 80018a8:	4b5c      	ldr	r3, [pc, #368]	@ (8001a1c <System_Alarm_Setup_Mode_Handle+0x540>)
 80018aa:	789b      	ldrb	r3, [r3, #2]
 80018ac:	3301      	adds	r3, #1
 80018ae:	b2da      	uxtb	r2, r3
 80018b0:	4b5a      	ldr	r3, [pc, #360]	@ (8001a1c <System_Alarm_Setup_Mode_Handle+0x540>)
 80018b2:	709a      	strb	r2, [r3, #2]
      break;
 80018b4:	e0c6      	b.n	8001a44 <System_Alarm_Setup_Mode_Handle+0x568>
      else if (button->hold_flag && !button->latch) 
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	7b9b      	ldrb	r3, [r3, #14]
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	2b00      	cmp	r3, #0
 80018be:	f000 80c1 	beq.w	8001a44 <System_Alarm_Setup_Mode_Handle+0x568>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	7bdb      	ldrb	r3, [r3, #15]
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	f083 0301 	eor.w	r3, r3, #1
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	f000 80b8 	beq.w	8001a44 <System_Alarm_Setup_Mode_Handle+0x568>
        if (system_state.past_mode == ALARM_VIEW_MODE)
 80018d4:	4b51      	ldr	r3, [pc, #324]	@ (8001a1c <System_Alarm_Setup_Mode_Handle+0x540>)
 80018d6:	785b      	ldrb	r3, [r3, #1]
 80018d8:	2b03      	cmp	r3, #3
 80018da:	d124      	bne.n	8001926 <System_Alarm_Setup_Mode_Handle+0x44a>
          Alarm_Set
 80018dc:	4b50      	ldr	r3, [pc, #320]	@ (8001a20 <System_Alarm_Setup_Mode_Handle+0x544>)
 80018de:	7818      	ldrb	r0, [r3, #0]
 80018e0:	4b4f      	ldr	r3, [pc, #316]	@ (8001a20 <System_Alarm_Setup_Mode_Handle+0x544>)
 80018e2:	785c      	ldrb	r4, [r3, #1]
 80018e4:	4b4e      	ldr	r3, [pc, #312]	@ (8001a20 <System_Alarm_Setup_Mode_Handle+0x544>)
 80018e6:	79dd      	ldrb	r5, [r3, #7]
 80018e8:	4b4d      	ldr	r3, [pc, #308]	@ (8001a20 <System_Alarm_Setup_Mode_Handle+0x544>)
 80018ea:	799b      	ldrb	r3, [r3, #6]
 80018ec:	4a4c      	ldr	r2, [pc, #304]	@ (8001a20 <System_Alarm_Setup_Mode_Handle+0x544>)
 80018ee:	7a12      	ldrb	r2, [r2, #8]
 80018f0:	494a      	ldr	r1, [pc, #296]	@ (8001a1c <System_Alarm_Setup_Mode_Handle+0x540>)
 80018f2:	78c9      	ldrb	r1, [r1, #3]
 80018f4:	9102      	str	r1, [sp, #8]
 80018f6:	9201      	str	r2, [sp, #4]
 80018f8:	9300      	str	r3, [sp, #0]
 80018fa:	462b      	mov	r3, r5
 80018fc:	4622      	mov	r2, r4
 80018fe:	4601      	mov	r1, r0
 8001900:	2000      	movs	r0, #0
 8001902:	f7ff f8bf 	bl	8000a84 <Alarm_Set>
          Alarm_Get(system_state.cursor, &alarm_get_data[system_state.cursor]);
 8001906:	4b45      	ldr	r3, [pc, #276]	@ (8001a1c <System_Alarm_Setup_Mode_Handle+0x540>)
 8001908:	78da      	ldrb	r2, [r3, #3]
 800190a:	4b44      	ldr	r3, [pc, #272]	@ (8001a1c <System_Alarm_Setup_Mode_Handle+0x540>)
 800190c:	78db      	ldrb	r3, [r3, #3]
 800190e:	4619      	mov	r1, r3
 8001910:	460b      	mov	r3, r1
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	440b      	add	r3, r1
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	4942      	ldr	r1, [pc, #264]	@ (8001a24 <System_Alarm_Setup_Mode_Handle+0x548>)
 800191a:	440b      	add	r3, r1
 800191c:	4619      	mov	r1, r3
 800191e:	4610      	mov	r0, r2
 8001920:	f7ff f900 	bl	8000b24 <Alarm_Get>
 8001924:	e031      	b.n	800198a <System_Alarm_Setup_Mode_Handle+0x4ae>
          Alarm_Set
 8001926:	4b3e      	ldr	r3, [pc, #248]	@ (8001a20 <System_Alarm_Setup_Mode_Handle+0x544>)
 8001928:	7818      	ldrb	r0, [r3, #0]
 800192a:	4b3d      	ldr	r3, [pc, #244]	@ (8001a20 <System_Alarm_Setup_Mode_Handle+0x544>)
 800192c:	785c      	ldrb	r4, [r3, #1]
 800192e:	4b3c      	ldr	r3, [pc, #240]	@ (8001a20 <System_Alarm_Setup_Mode_Handle+0x544>)
 8001930:	79dd      	ldrb	r5, [r3, #7]
 8001932:	4b3b      	ldr	r3, [pc, #236]	@ (8001a20 <System_Alarm_Setup_Mode_Handle+0x544>)
 8001934:	799b      	ldrb	r3, [r3, #6]
 8001936:	4a3a      	ldr	r2, [pc, #232]	@ (8001a20 <System_Alarm_Setup_Mode_Handle+0x544>)
 8001938:	7a12      	ldrb	r2, [r2, #8]
 800193a:	493b      	ldr	r1, [pc, #236]	@ (8001a28 <System_Alarm_Setup_Mode_Handle+0x54c>)
 800193c:	7809      	ldrb	r1, [r1, #0]
 800193e:	9102      	str	r1, [sp, #8]
 8001940:	9201      	str	r2, [sp, #4]
 8001942:	9300      	str	r3, [sp, #0]
 8001944:	462b      	mov	r3, r5
 8001946:	4622      	mov	r2, r4
 8001948:	4601      	mov	r1, r0
 800194a:	2000      	movs	r0, #0
 800194c:	f7ff f89a 	bl	8000a84 <Alarm_Set>
          Alarm_Get(alarm_slot_ptr, &alarm_get_data[alarm_slot_ptr]);
 8001950:	4b35      	ldr	r3, [pc, #212]	@ (8001a28 <System_Alarm_Setup_Mode_Handle+0x54c>)
 8001952:	781a      	ldrb	r2, [r3, #0]
 8001954:	4b34      	ldr	r3, [pc, #208]	@ (8001a28 <System_Alarm_Setup_Mode_Handle+0x54c>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	4619      	mov	r1, r3
 800195a:	460b      	mov	r3, r1
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	440b      	add	r3, r1
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	4930      	ldr	r1, [pc, #192]	@ (8001a24 <System_Alarm_Setup_Mode_Handle+0x548>)
 8001964:	440b      	add	r3, r1
 8001966:	4619      	mov	r1, r3
 8001968:	4610      	mov	r0, r2
 800196a:	f7ff f8db 	bl	8000b24 <Alarm_Get>
          alarm_slot_ptr = (alarm_slot_ptr < ALARM_SLOT_NUM) ? (alarm_slot_ptr + 1) : 0;
 800196e:	4b2e      	ldr	r3, [pc, #184]	@ (8001a28 <System_Alarm_Setup_Mode_Handle+0x54c>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	2b09      	cmp	r3, #9
 8001974:	d804      	bhi.n	8001980 <System_Alarm_Setup_Mode_Handle+0x4a4>
 8001976:	4b2c      	ldr	r3, [pc, #176]	@ (8001a28 <System_Alarm_Setup_Mode_Handle+0x54c>)
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	3301      	adds	r3, #1
 800197c:	b2db      	uxtb	r3, r3
 800197e:	e000      	b.n	8001982 <System_Alarm_Setup_Mode_Handle+0x4a6>
 8001980:	2300      	movs	r3, #0
 8001982:	4a29      	ldr	r2, [pc, #164]	@ (8001a28 <System_Alarm_Setup_Mode_Handle+0x54c>)
 8001984:	7013      	strb	r3, [r2, #0]
          Alarm_Slot_Pointer_Set();
 8001986:	f7ff f945 	bl	8000c14 <Alarm_Slot_Pointer_Set>
        button->latch = true;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2201      	movs	r2, #1
 800198e:	73da      	strb	r2, [r3, #15]
      break;
 8001990:	e058      	b.n	8001a44 <System_Alarm_Setup_Mode_Handle+0x568>

    case 4: // BTN4: Go back to previous field
      if      (button->press_flag) 
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	7b5b      	ldrb	r3, [r3, #13]
 8001996:	b2db      	uxtb	r3, r3
 8001998:	2b00      	cmp	r3, #0
 800199a:	d016      	beq.n	80019ca <System_Alarm_Setup_Mode_Handle+0x4ee>
      {
        if      (system_state.param_select == SET_DY_DT)
 800199c:	4b1f      	ldr	r3, [pc, #124]	@ (8001a1c <System_Alarm_Setup_Mode_Handle+0x540>)
 800199e:	789b      	ldrb	r3, [r3, #2]
 80019a0:	2b06      	cmp	r3, #6
 80019a2:	d103      	bne.n	80019ac <System_Alarm_Setup_Mode_Handle+0x4d0>
        {
          system_state.param_select = SET_HOUR;
 80019a4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a1c <System_Alarm_Setup_Mode_Handle+0x540>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	709a      	strb	r2, [r3, #2]

        // Reset the alarm slot pointer
        alarm_slot_ptr = 0;
        Alarm_Slot_Pointer_Set();
      }
      break;
 80019aa:	e04d      	b.n	8001a48 <System_Alarm_Setup_Mode_Handle+0x56c>
        else if (system_state.param_select == SET_MINUTE)
 80019ac:	4b1b      	ldr	r3, [pc, #108]	@ (8001a1c <System_Alarm_Setup_Mode_Handle+0x540>)
 80019ae:	789b      	ldrb	r3, [r3, #2]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d103      	bne.n	80019bc <System_Alarm_Setup_Mode_Handle+0x4e0>
          system_state.param_select = SET_ON_OFF;
 80019b4:	4b19      	ldr	r3, [pc, #100]	@ (8001a1c <System_Alarm_Setup_Mode_Handle+0x540>)
 80019b6:	2208      	movs	r2, #8
 80019b8:	709a      	strb	r2, [r3, #2]
      break;
 80019ba:	e045      	b.n	8001a48 <System_Alarm_Setup_Mode_Handle+0x56c>
          system_state.param_select -= 1;
 80019bc:	4b17      	ldr	r3, [pc, #92]	@ (8001a1c <System_Alarm_Setup_Mode_Handle+0x540>)
 80019be:	789b      	ldrb	r3, [r3, #2]
 80019c0:	3b01      	subs	r3, #1
 80019c2:	b2da      	uxtb	r2, r3
 80019c4:	4b15      	ldr	r3, [pc, #84]	@ (8001a1c <System_Alarm_Setup_Mode_Handle+0x540>)
 80019c6:	709a      	strb	r2, [r3, #2]
      break;
 80019c8:	e03e      	b.n	8001a48 <System_Alarm_Setup_Mode_Handle+0x56c>
      else if (button->hold_flag)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	7b9b      	ldrb	r3, [r3, #14]
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d039      	beq.n	8001a48 <System_Alarm_Setup_Mode_Handle+0x56c>
        for (int i = 0; i < alarm_slot_ptr; i++)
 80019d4:	2300      	movs	r3, #0
 80019d6:	61fb      	str	r3, [r7, #28]
 80019d8:	e013      	b.n	8001a02 <System_Alarm_Setup_Mode_Handle+0x526>
          Alarm_Clear(i);
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff f8f6 	bl	8000bd0 <Alarm_Clear>
          Alarm_Get(i, &alarm_get_data[i]);
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	b2d8      	uxtb	r0, r3
 80019e8:	69fa      	ldr	r2, [r7, #28]
 80019ea:	4613      	mov	r3, r2
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	4413      	add	r3, r2
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	4a0c      	ldr	r2, [pc, #48]	@ (8001a24 <System_Alarm_Setup_Mode_Handle+0x548>)
 80019f4:	4413      	add	r3, r2
 80019f6:	4619      	mov	r1, r3
 80019f8:	f7ff f894 	bl	8000b24 <Alarm_Get>
        for (int i = 0; i < alarm_slot_ptr; i++)
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	3301      	adds	r3, #1
 8001a00:	61fb      	str	r3, [r7, #28]
 8001a02:	4b09      	ldr	r3, [pc, #36]	@ (8001a28 <System_Alarm_Setup_Mode_Handle+0x54c>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	461a      	mov	r2, r3
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	dbe5      	blt.n	80019da <System_Alarm_Setup_Mode_Handle+0x4fe>
        alarm_slot_ptr = 0;
 8001a0e:	4b06      	ldr	r3, [pc, #24]	@ (8001a28 <System_Alarm_Setup_Mode_Handle+0x54c>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	701a      	strb	r2, [r3, #0]
        Alarm_Slot_Pointer_Set();
 8001a14:	f7ff f8fe 	bl	8000c14 <Alarm_Slot_Pointer_Set>
      break;
 8001a18:	e016      	b.n	8001a48 <System_Alarm_Setup_Mode_Handle+0x56c>
 8001a1a:	bf00      	nop
 8001a1c:	20000348 	.word	0x20000348
 8001a20:	2000034c 	.word	0x2000034c
 8001a24:	20000360 	.word	0x20000360
 8001a28:	2000039c 	.word	0x2000039c

    default:
      // Reserved for future use
      break;
 8001a2c:	bf00      	nop
 8001a2e:	e00c      	b.n	8001a4a <System_Alarm_Setup_Mode_Handle+0x56e>
      break;
 8001a30:	bf00      	nop
 8001a32:	e00a      	b.n	8001a4a <System_Alarm_Setup_Mode_Handle+0x56e>
        break;
 8001a34:	bf00      	nop
 8001a36:	e008      	b.n	8001a4a <System_Alarm_Setup_Mode_Handle+0x56e>
      break;
 8001a38:	bf00      	nop
 8001a3a:	e006      	b.n	8001a4a <System_Alarm_Setup_Mode_Handle+0x56e>
          break;
 8001a3c:	bf00      	nop
 8001a3e:	e004      	b.n	8001a4a <System_Alarm_Setup_Mode_Handle+0x56e>
        break;
 8001a40:	bf00      	nop
 8001a42:	e002      	b.n	8001a4a <System_Alarm_Setup_Mode_Handle+0x56e>
      break;
 8001a44:	bf00      	nop
 8001a46:	e000      	b.n	8001a4a <System_Alarm_Setup_Mode_Handle+0x56e>
      break;
 8001a48:	bf00      	nop
  }

  system_state.past_mode = ALARM_ACTIVE_MODE;
 8001a4a:	4b03      	ldr	r3, [pc, #12]	@ (8001a58 <System_Alarm_Setup_Mode_Handle+0x57c>)
 8001a4c:	2204      	movs	r2, #4
 8001a4e:	705a      	strb	r2, [r3, #1]
}
 8001a50:	bf00      	nop
 8001a52:	3734      	adds	r7, #52	@ 0x34
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a58:	20000348 	.word	0x20000348

08001a5c <System_Alarm_View_Mode_Handle>:
 * @brief  Handles the alarm view mode based on button actions.
 * @param  button: Pointer to the BUTTON structure containing button state and index.
 * @retval None
 */
void System_Alarm_View_Mode_Handle (BUTTON_DATA *button)
{ 
 8001a5c:	b5b0      	push	{r4, r5, r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af04      	add	r7, sp, #16
 8001a62:	6078      	str	r0, [r7, #4]
  // Initially reset system cursor
  system_state.cursor = 0;
 8001a64:	4ba9      	ldr	r3, [pc, #676]	@ (8001d0c <System_Alarm_View_Mode_Handle+0x2b0>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	70da      	strb	r2, [r3, #3]
  
  // Handle button actions in alarm view mode
  switch (button->index) 
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	799b      	ldrb	r3, [r3, #6]
 8001a6e:	2b04      	cmp	r3, #4
 8001a70:	f200 813e 	bhi.w	8001cf0 <System_Alarm_View_Mode_Handle+0x294>
 8001a74:	a201      	add	r2, pc, #4	@ (adr r2, 8001a7c <System_Alarm_View_Mode_Handle+0x20>)
 8001a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a7a:	bf00      	nop
 8001a7c:	08001a91 	.word	0x08001a91
 8001a80:	08001ae1 	.word	0x08001ae1
 8001a84:	08001b0b 	.word	0x08001b0b
 8001a88:	08001b35 	.word	0x08001b35
 8001a8c:	08001cd1 	.word	0x08001cd1
  {
    // Button 0: If pressed, cycle through the time setup fields; if held, set the mode to default
    case 0:
      // If pressed, cycle through the time setup fields
      if (button->press_flag)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	7b5b      	ldrb	r3, [r3, #13]
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d00c      	beq.n	8001ab4 <System_Alarm_View_Mode_Handle+0x58>
      {
        system_state.mode = (system_state.mode < (SYSTEM_MODE_NUM - 1)) ? (system_state.mode + 1) : 0;
 8001a9a:	4b9c      	ldr	r3, [pc, #624]	@ (8001d0c <System_Alarm_View_Mode_Handle+0x2b0>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	2b04      	cmp	r3, #4
 8001aa0:	d804      	bhi.n	8001aac <System_Alarm_View_Mode_Handle+0x50>
 8001aa2:	4b9a      	ldr	r3, [pc, #616]	@ (8001d0c <System_Alarm_View_Mode_Handle+0x2b0>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	e000      	b.n	8001aae <System_Alarm_View_Mode_Handle+0x52>
 8001aac:	2300      	movs	r3, #0
 8001aae:	4a97      	ldr	r2, [pc, #604]	@ (8001d0c <System_Alarm_View_Mode_Handle+0x2b0>)
 8001ab0:	7013      	strb	r3, [r2, #0]
      else if (button->hold_flag && !button->latch)
      {
        system_state.mode = DEFAULT_MODE; 
        button->latch = true;
      }
      break;
 8001ab2:	e11f      	b.n	8001cf4 <System_Alarm_View_Mode_Handle+0x298>
      else if (button->hold_flag && !button->latch)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	7b9b      	ldrb	r3, [r3, #14]
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	f000 811a 	beq.w	8001cf4 <System_Alarm_View_Mode_Handle+0x298>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	7bdb      	ldrb	r3, [r3, #15]
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	f083 0301 	eor.w	r3, r3, #1
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f000 8111 	beq.w	8001cf4 <System_Alarm_View_Mode_Handle+0x298>
        system_state.mode = DEFAULT_MODE; 
 8001ad2:	4b8e      	ldr	r3, [pc, #568]	@ (8001d0c <System_Alarm_View_Mode_Handle+0x2b0>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	701a      	strb	r2, [r3, #0]
        button->latch = true;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	73da      	strb	r2, [r3, #15]
      break;
 8001ade:	e109      	b.n	8001cf4 <System_Alarm_View_Mode_Handle+0x298>

    // Button 1: If pressed, increment the selection cursor
    case 1:
      if      (button->press_flag)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	7b5b      	ldrb	r3, [r3, #13]
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d00c      	beq.n	8001b04 <System_Alarm_View_Mode_Handle+0xa8>
      {
        system_state.cursor = (system_state.cursor < (SYSTEM_CURSOR_MAX - 1)) ? (system_state.cursor + 1) : 0;
 8001aea:	4b88      	ldr	r3, [pc, #544]	@ (8001d0c <System_Alarm_View_Mode_Handle+0x2b0>)
 8001aec:	78db      	ldrb	r3, [r3, #3]
 8001aee:	2b07      	cmp	r3, #7
 8001af0:	d804      	bhi.n	8001afc <System_Alarm_View_Mode_Handle+0xa0>
 8001af2:	4b86      	ldr	r3, [pc, #536]	@ (8001d0c <System_Alarm_View_Mode_Handle+0x2b0>)
 8001af4:	78db      	ldrb	r3, [r3, #3]
 8001af6:	3301      	adds	r3, #1
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	e000      	b.n	8001afe <System_Alarm_View_Mode_Handle+0xa2>
 8001afc:	2300      	movs	r3, #0
 8001afe:	4a83      	ldr	r2, [pc, #524]	@ (8001d0c <System_Alarm_View_Mode_Handle+0x2b0>)
 8001b00:	70d3      	strb	r3, [r2, #3]
      }
      else if (button->hold_flag)
      {

      }
      break;
 8001b02:	e0fc      	b.n	8001cfe <System_Alarm_View_Mode_Handle+0x2a2>
      else if (button->hold_flag)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	7b9b      	ldrb	r3, [r3, #14]
      break;
 8001b08:	e0f9      	b.n	8001cfe <System_Alarm_View_Mode_Handle+0x2a2>

    // Button 2: If pressed, decrement the selection cursor
    case 2:
      if      (button->press_flag)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	7b5b      	ldrb	r3, [r3, #13]
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d00c      	beq.n	8001b2e <System_Alarm_View_Mode_Handle+0xd2>
      {
        system_state.cursor = (system_state.cursor > 0) ? (system_state.cursor - 1) : SYSTEM_CURSOR_MAX;
 8001b14:	4b7d      	ldr	r3, [pc, #500]	@ (8001d0c <System_Alarm_View_Mode_Handle+0x2b0>)
 8001b16:	78db      	ldrb	r3, [r3, #3]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d004      	beq.n	8001b26 <System_Alarm_View_Mode_Handle+0xca>
 8001b1c:	4b7b      	ldr	r3, [pc, #492]	@ (8001d0c <System_Alarm_View_Mode_Handle+0x2b0>)
 8001b1e:	78db      	ldrb	r3, [r3, #3]
 8001b20:	3b01      	subs	r3, #1
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	e000      	b.n	8001b28 <System_Alarm_View_Mode_Handle+0xcc>
 8001b26:	2309      	movs	r3, #9
 8001b28:	4a78      	ldr	r2, [pc, #480]	@ (8001d0c <System_Alarm_View_Mode_Handle+0x2b0>)
 8001b2a:	70d3      	strb	r3, [r2, #3]
      }
      else if (button->hold_flag)
      {

      }
      break;
 8001b2c:	e0e7      	b.n	8001cfe <System_Alarm_View_Mode_Handle+0x2a2>
      else if (button->hold_flag)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	7b9b      	ldrb	r3, [r3, #14]
      break;
 8001b32:	e0e4      	b.n	8001cfe <System_Alarm_View_Mode_Handle+0x2a2>
    
    // Button 3: If pressed, toggle ON/OFF; if held, enter Alarm Setup Mode with selected alarm data preloaded (for editing)
    case 3:
      if      (button->press_flag)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	7b5b      	ldrb	r3, [r3, #13]
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d079      	beq.n	8001c32 <System_Alarm_View_Mode_Handle+0x1d6>
      {
        // Retrieve the selected alarm data to system parameter data
        system_param_data.minute  = alarm_get_data[system_state.cursor].minute;
 8001b3e:	4b73      	ldr	r3, [pc, #460]	@ (8001d0c <System_Alarm_View_Mode_Handle+0x2b0>)
 8001b40:	78db      	ldrb	r3, [r3, #3]
 8001b42:	4619      	mov	r1, r3
 8001b44:	4a72      	ldr	r2, [pc, #456]	@ (8001d10 <System_Alarm_View_Mode_Handle+0x2b4>)
 8001b46:	460b      	mov	r3, r1
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	440b      	add	r3, r1
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	4413      	add	r3, r2
 8001b50:	3301      	adds	r3, #1
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	b2da      	uxtb	r2, r3
 8001b56:	4b6f      	ldr	r3, [pc, #444]	@ (8001d14 <System_Alarm_View_Mode_Handle+0x2b8>)
 8001b58:	701a      	strb	r2, [r3, #0]
        system_param_data.hour    = alarm_get_data[system_state.cursor].hour;
 8001b5a:	4b6c      	ldr	r3, [pc, #432]	@ (8001d0c <System_Alarm_View_Mode_Handle+0x2b0>)
 8001b5c:	78db      	ldrb	r3, [r3, #3]
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4a6b      	ldr	r2, [pc, #428]	@ (8001d10 <System_Alarm_View_Mode_Handle+0x2b4>)
 8001b62:	460b      	mov	r3, r1
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	440b      	add	r3, r1
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	4413      	add	r3, r2
 8001b6c:	3302      	adds	r3, #2
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	b2da      	uxtb	r2, r3
 8001b72:	4b68      	ldr	r3, [pc, #416]	@ (8001d14 <System_Alarm_View_Mode_Handle+0x2b8>)
 8001b74:	705a      	strb	r2, [r3, #1]
        system_param_data.dy_dt   = alarm_get_data[system_state.cursor].dy_dt;
 8001b76:	4b65      	ldr	r3, [pc, #404]	@ (8001d0c <System_Alarm_View_Mode_Handle+0x2b0>)
 8001b78:	78db      	ldrb	r3, [r3, #3]
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4a64      	ldr	r2, [pc, #400]	@ (8001d10 <System_Alarm_View_Mode_Handle+0x2b4>)
 8001b7e:	460b      	mov	r3, r1
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	440b      	add	r3, r1
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	4413      	add	r3, r2
 8001b88:	3303      	adds	r3, #3
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	b2da      	uxtb	r2, r3
 8001b8e:	4b61      	ldr	r3, [pc, #388]	@ (8001d14 <System_Alarm_View_Mode_Handle+0x2b8>)
 8001b90:	719a      	strb	r2, [r3, #6]
        system_param_data.dow_dom = alarm_get_data[system_state.cursor].dow_dom;
 8001b92:	4b5e      	ldr	r3, [pc, #376]	@ (8001d0c <System_Alarm_View_Mode_Handle+0x2b0>)
 8001b94:	78db      	ldrb	r3, [r3, #3]
 8001b96:	4619      	mov	r1, r3
 8001b98:	4a5d      	ldr	r2, [pc, #372]	@ (8001d10 <System_Alarm_View_Mode_Handle+0x2b4>)
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	440b      	add	r3, r1
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	4413      	add	r3, r2
 8001ba4:	3304      	adds	r3, #4
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	b2da      	uxtb	r2, r3
 8001baa:	4b5a      	ldr	r3, [pc, #360]	@ (8001d14 <System_Alarm_View_Mode_Handle+0x2b8>)
 8001bac:	71da      	strb	r2, [r3, #7]
        system_param_data.on_off  = alarm_get_data[system_state.cursor].on_off;
 8001bae:	4b57      	ldr	r3, [pc, #348]	@ (8001d0c <System_Alarm_View_Mode_Handle+0x2b0>)
 8001bb0:	78db      	ldrb	r3, [r3, #3]
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4a56      	ldr	r2, [pc, #344]	@ (8001d10 <System_Alarm_View_Mode_Handle+0x2b4>)
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	440b      	add	r3, r1
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	4413      	add	r3, r2
 8001bc0:	3305      	adds	r3, #5
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	b2da      	uxtb	r2, r3
 8001bc6:	4b53      	ldr	r3, [pc, #332]	@ (8001d14 <System_Alarm_View_Mode_Handle+0x2b8>)
 8001bc8:	721a      	strb	r2, [r3, #8]

        // Toggle ON/OFF data
        system_param_data.on_off = !system_param_data.on_off;
 8001bca:	4b52      	ldr	r3, [pc, #328]	@ (8001d14 <System_Alarm_View_Mode_Handle+0x2b8>)
 8001bcc:	7a1b      	ldrb	r3, [r3, #8]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	bf14      	ite	ne
 8001bd2:	2301      	movne	r3, #1
 8001bd4:	2300      	moveq	r3, #0
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	f083 0301 	eor.w	r3, r3, #1
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	b2da      	uxtb	r2, r3
 8001be4:	4b4b      	ldr	r3, [pc, #300]	@ (8001d14 <System_Alarm_View_Mode_Handle+0x2b8>)
 8001be6:	721a      	strb	r2, [r3, #8]

        // Save the modified alarm to the EEPROM module
        //    void Alarm_Set (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow_dom, ALARM_DY_DT_MODE dy_dt, uint8_t on_off, uint8_t slot)
        Alarm_Set
 8001be8:	4b4a      	ldr	r3, [pc, #296]	@ (8001d14 <System_Alarm_View_Mode_Handle+0x2b8>)
 8001bea:	7818      	ldrb	r0, [r3, #0]
 8001bec:	4b49      	ldr	r3, [pc, #292]	@ (8001d14 <System_Alarm_View_Mode_Handle+0x2b8>)
 8001bee:	785c      	ldrb	r4, [r3, #1]
 8001bf0:	4b48      	ldr	r3, [pc, #288]	@ (8001d14 <System_Alarm_View_Mode_Handle+0x2b8>)
 8001bf2:	79dd      	ldrb	r5, [r3, #7]
 8001bf4:	4b47      	ldr	r3, [pc, #284]	@ (8001d14 <System_Alarm_View_Mode_Handle+0x2b8>)
 8001bf6:	799b      	ldrb	r3, [r3, #6]
 8001bf8:	4a46      	ldr	r2, [pc, #280]	@ (8001d14 <System_Alarm_View_Mode_Handle+0x2b8>)
 8001bfa:	7a12      	ldrb	r2, [r2, #8]
 8001bfc:	4943      	ldr	r1, [pc, #268]	@ (8001d0c <System_Alarm_View_Mode_Handle+0x2b0>)
 8001bfe:	78c9      	ldrb	r1, [r1, #3]
 8001c00:	9102      	str	r1, [sp, #8]
 8001c02:	9201      	str	r2, [sp, #4]
 8001c04:	9300      	str	r3, [sp, #0]
 8001c06:	462b      	mov	r3, r5
 8001c08:	4622      	mov	r2, r4
 8001c0a:	4601      	mov	r1, r0
 8001c0c:	2000      	movs	r0, #0
 8001c0e:	f7fe ff39 	bl	8000a84 <Alarm_Set>
          system_param_data.on_off,
          system_state.cursor   
        );

        // Update the newly set alarm data
        Alarm_Get(system_state.cursor, &alarm_get_data[system_state.cursor]);
 8001c12:	4b3e      	ldr	r3, [pc, #248]	@ (8001d0c <System_Alarm_View_Mode_Handle+0x2b0>)
 8001c14:	78da      	ldrb	r2, [r3, #3]
 8001c16:	4b3d      	ldr	r3, [pc, #244]	@ (8001d0c <System_Alarm_View_Mode_Handle+0x2b0>)
 8001c18:	78db      	ldrb	r3, [r3, #3]
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	440b      	add	r3, r1
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	493a      	ldr	r1, [pc, #232]	@ (8001d10 <System_Alarm_View_Mode_Handle+0x2b4>)
 8001c26:	440b      	add	r3, r1
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4610      	mov	r0, r2
 8001c2c:	f7fe ff7a 	bl	8000b24 <Alarm_Get>
        system_param_data.on_off  = alarm_get_data[system_state.cursor].on_off;

        // System switches to Alarm Setup Mode
        system_state.mode = ALARM_SETUP_MODE;
      }
      break;
 8001c30:	e062      	b.n	8001cf8 <System_Alarm_View_Mode_Handle+0x29c>
      else if (button->hold_flag)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	7b9b      	ldrb	r3, [r3, #14]
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d05d      	beq.n	8001cf8 <System_Alarm_View_Mode_Handle+0x29c>
        system_param_data.minute  = alarm_get_data[system_state.cursor].minute;
 8001c3c:	4b33      	ldr	r3, [pc, #204]	@ (8001d0c <System_Alarm_View_Mode_Handle+0x2b0>)
 8001c3e:	78db      	ldrb	r3, [r3, #3]
 8001c40:	4619      	mov	r1, r3
 8001c42:	4a33      	ldr	r2, [pc, #204]	@ (8001d10 <System_Alarm_View_Mode_Handle+0x2b4>)
 8001c44:	460b      	mov	r3, r1
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	440b      	add	r3, r1
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	4413      	add	r3, r2
 8001c4e:	3301      	adds	r3, #1
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	b2da      	uxtb	r2, r3
 8001c54:	4b2f      	ldr	r3, [pc, #188]	@ (8001d14 <System_Alarm_View_Mode_Handle+0x2b8>)
 8001c56:	701a      	strb	r2, [r3, #0]
        system_param_data.hour    = alarm_get_data[system_state.cursor].hour;
 8001c58:	4b2c      	ldr	r3, [pc, #176]	@ (8001d0c <System_Alarm_View_Mode_Handle+0x2b0>)
 8001c5a:	78db      	ldrb	r3, [r3, #3]
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4a2c      	ldr	r2, [pc, #176]	@ (8001d10 <System_Alarm_View_Mode_Handle+0x2b4>)
 8001c60:	460b      	mov	r3, r1
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	440b      	add	r3, r1
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	4413      	add	r3, r2
 8001c6a:	3302      	adds	r3, #2
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	b2da      	uxtb	r2, r3
 8001c70:	4b28      	ldr	r3, [pc, #160]	@ (8001d14 <System_Alarm_View_Mode_Handle+0x2b8>)
 8001c72:	705a      	strb	r2, [r3, #1]
        system_param_data.dy_dt   = alarm_get_data[system_state.cursor].dy_dt;
 8001c74:	4b25      	ldr	r3, [pc, #148]	@ (8001d0c <System_Alarm_View_Mode_Handle+0x2b0>)
 8001c76:	78db      	ldrb	r3, [r3, #3]
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4a25      	ldr	r2, [pc, #148]	@ (8001d10 <System_Alarm_View_Mode_Handle+0x2b4>)
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	440b      	add	r3, r1
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	4413      	add	r3, r2
 8001c86:	3303      	adds	r3, #3
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	b2da      	uxtb	r2, r3
 8001c8c:	4b21      	ldr	r3, [pc, #132]	@ (8001d14 <System_Alarm_View_Mode_Handle+0x2b8>)
 8001c8e:	719a      	strb	r2, [r3, #6]
        system_param_data.dow_dom = alarm_get_data[system_state.cursor].dow_dom;
 8001c90:	4b1e      	ldr	r3, [pc, #120]	@ (8001d0c <System_Alarm_View_Mode_Handle+0x2b0>)
 8001c92:	78db      	ldrb	r3, [r3, #3]
 8001c94:	4619      	mov	r1, r3
 8001c96:	4a1e      	ldr	r2, [pc, #120]	@ (8001d10 <System_Alarm_View_Mode_Handle+0x2b4>)
 8001c98:	460b      	mov	r3, r1
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	440b      	add	r3, r1
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	4413      	add	r3, r2
 8001ca2:	3304      	adds	r3, #4
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	b2da      	uxtb	r2, r3
 8001ca8:	4b1a      	ldr	r3, [pc, #104]	@ (8001d14 <System_Alarm_View_Mode_Handle+0x2b8>)
 8001caa:	71da      	strb	r2, [r3, #7]
        system_param_data.on_off  = alarm_get_data[system_state.cursor].on_off;
 8001cac:	4b17      	ldr	r3, [pc, #92]	@ (8001d0c <System_Alarm_View_Mode_Handle+0x2b0>)
 8001cae:	78db      	ldrb	r3, [r3, #3]
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4a17      	ldr	r2, [pc, #92]	@ (8001d10 <System_Alarm_View_Mode_Handle+0x2b4>)
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	440b      	add	r3, r1
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	4413      	add	r3, r2
 8001cbe:	3305      	adds	r3, #5
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	b2da      	uxtb	r2, r3
 8001cc4:	4b13      	ldr	r3, [pc, #76]	@ (8001d14 <System_Alarm_View_Mode_Handle+0x2b8>)
 8001cc6:	721a      	strb	r2, [r3, #8]
        system_state.mode = ALARM_SETUP_MODE;
 8001cc8:	4b10      	ldr	r3, [pc, #64]	@ (8001d0c <System_Alarm_View_Mode_Handle+0x2b0>)
 8001cca:	2202      	movs	r2, #2
 8001ccc:	701a      	strb	r2, [r3, #0]
      break;
 8001cce:	e013      	b.n	8001cf8 <System_Alarm_View_Mode_Handle+0x29c>

    // Button 4: If held, clear current alarm
    case 4: 
      if      (button->press_flag)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	7b5b      	ldrb	r3, [r3, #13]
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d110      	bne.n	8001cfc <System_Alarm_View_Mode_Handle+0x2a0>
      {

      }
      else if (button->hold_flag)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	7b9b      	ldrb	r3, [r3, #14]
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d00b      	beq.n	8001cfc <System_Alarm_View_Mode_Handle+0x2a0>
      {
        Alarm_Clear(system_state.cursor);
 8001ce4:	4b09      	ldr	r3, [pc, #36]	@ (8001d0c <System_Alarm_View_Mode_Handle+0x2b0>)
 8001ce6:	78db      	ldrb	r3, [r3, #3]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7fe ff71 	bl	8000bd0 <Alarm_Clear>
      }
      break;
 8001cee:	e005      	b.n	8001cfc <System_Alarm_View_Mode_Handle+0x2a0>

    default: 
      break;
 8001cf0:	bf00      	nop
 8001cf2:	e004      	b.n	8001cfe <System_Alarm_View_Mode_Handle+0x2a2>
      break;
 8001cf4:	bf00      	nop
 8001cf6:	e002      	b.n	8001cfe <System_Alarm_View_Mode_Handle+0x2a2>
      break;
 8001cf8:	bf00      	nop
 8001cfa:	e000      	b.n	8001cfe <System_Alarm_View_Mode_Handle+0x2a2>
      break;
 8001cfc:	bf00      	nop
  }

  system_state.past_mode = ALARM_VIEW_MODE;
 8001cfe:	4b03      	ldr	r3, [pc, #12]	@ (8001d0c <System_Alarm_View_Mode_Handle+0x2b0>)
 8001d00:	2203      	movs	r2, #3
 8001d02:	705a      	strb	r2, [r3, #1]
}
 8001d04:	bf00      	nop
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bdb0      	pop	{r4, r5, r7, pc}
 8001d0c:	20000348 	.word	0x20000348
 8001d10:	20000360 	.word	0x20000360
 8001d14:	2000034c 	.word	0x2000034c

08001d18 <System_Alarm_Active_Mode_Handle>:
 * @brief  Handles the alarm active mode based on button actions.
 * @param  button: Pointer to the BUTTON structure containing button state and index.
 * @retval None
 */
void System_Alarm_Active_Mode_Handle (BUTTON_DATA *button)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  // Handle button actions in alarm active mode
  switch (button->index) 
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	799b      	ldrb	r3, [r3, #6]
 8001d24:	2b04      	cmp	r3, #4
 8001d26:	d853      	bhi.n	8001dd0 <System_Alarm_Active_Mode_Handle+0xb8>
 8001d28:	a201      	add	r2, pc, #4	@ (adr r2, 8001d30 <System_Alarm_Active_Mode_Handle+0x18>)
 8001d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d2e:	bf00      	nop
 8001d30:	08001d45 	.word	0x08001d45
 8001d34:	08001d91 	.word	0x08001d91
 8001d38:	08001da1 	.word	0x08001da1
 8001d3c:	08001db1 	.word	0x08001db1
 8001d40:	08001dc1 	.word	0x08001dc1
  {
    // Button 0: If pressed, cycle through the time setup fields; if held, set the mode to default
    case 0:
      // If pressed, cycle through the time setup fields
      if (button->press_flag)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	7b5b      	ldrb	r3, [r3, #13]
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d00c      	beq.n	8001d68 <System_Alarm_Active_Mode_Handle+0x50>
      {
        system_state.mode = (system_state.mode < (SYSTEM_MODE_NUM - 1)) ? (system_state.mode + 1) : 0;
 8001d4e:	4b2a      	ldr	r3, [pc, #168]	@ (8001df8 <System_Alarm_Active_Mode_Handle+0xe0>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	2b04      	cmp	r3, #4
 8001d54:	d804      	bhi.n	8001d60 <System_Alarm_Active_Mode_Handle+0x48>
 8001d56:	4b28      	ldr	r3, [pc, #160]	@ (8001df8 <System_Alarm_Active_Mode_Handle+0xe0>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	e000      	b.n	8001d62 <System_Alarm_Active_Mode_Handle+0x4a>
 8001d60:	2300      	movs	r3, #0
 8001d62:	4a25      	ldr	r2, [pc, #148]	@ (8001df8 <System_Alarm_Active_Mode_Handle+0xe0>)
 8001d64:	7013      	strb	r3, [r2, #0]
      else if (button->hold_flag && !button->latch)
      {
        system_state.mode = DEFAULT_MODE; 
        button->latch = true;
      }
      break;
 8001d66:	e035      	b.n	8001dd4 <System_Alarm_Active_Mode_Handle+0xbc>
      else if (button->hold_flag && !button->latch)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	7b9b      	ldrb	r3, [r3, #14]
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d030      	beq.n	8001dd4 <System_Alarm_Active_Mode_Handle+0xbc>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	7bdb      	ldrb	r3, [r3, #15]
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	f083 0301 	eor.w	r3, r3, #1
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d028      	beq.n	8001dd4 <System_Alarm_Active_Mode_Handle+0xbc>
        system_state.mode = DEFAULT_MODE; 
 8001d82:	4b1d      	ldr	r3, [pc, #116]	@ (8001df8 <System_Alarm_Active_Mode_Handle+0xe0>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	701a      	strb	r2, [r3, #0]
        button->latch = true;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	73da      	strb	r2, [r3, #15]
      break;
 8001d8e:	e021      	b.n	8001dd4 <System_Alarm_Active_Mode_Handle+0xbc>

    case 1:
      if      (button->press_flag)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	7b5b      	ldrb	r3, [r3, #13]
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d11e      	bne.n	8001dd8 <System_Alarm_Active_Mode_Handle+0xc0>
      {

      }
      else if (button->hold_flag)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	7b9b      	ldrb	r3, [r3, #14]
      {

      }
      break;
 8001d9e:	e01b      	b.n	8001dd8 <System_Alarm_Active_Mode_Handle+0xc0>

    case 2:
      if      (button->press_flag)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	7b5b      	ldrb	r3, [r3, #13]
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d118      	bne.n	8001ddc <System_Alarm_Active_Mode_Handle+0xc4>
      {

      }
      else if (button->hold_flag)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	7b9b      	ldrb	r3, [r3, #14]
      {

      }
      break;
 8001dae:	e015      	b.n	8001ddc <System_Alarm_Active_Mode_Handle+0xc4>
    
    case 3:
      if      (button->press_flag)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	7b5b      	ldrb	r3, [r3, #13]
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d112      	bne.n	8001de0 <System_Alarm_Active_Mode_Handle+0xc8>
      {

      }
      else if (button->hold_flag)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	7b9b      	ldrb	r3, [r3, #14]
      {

      }
      break;
 8001dbe:	e00f      	b.n	8001de0 <System_Alarm_Active_Mode_Handle+0xc8>

    case 4: 
      if      (button->press_flag)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	7b5b      	ldrb	r3, [r3, #13]
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d10c      	bne.n	8001de4 <System_Alarm_Active_Mode_Handle+0xcc>
      {

      }
      else if (button->hold_flag)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	7b9b      	ldrb	r3, [r3, #14]
      {

      }
      break;
 8001dce:	e009      	b.n	8001de4 <System_Alarm_Active_Mode_Handle+0xcc>

    default: 
      break;
 8001dd0:	bf00      	nop
 8001dd2:	e008      	b.n	8001de6 <System_Alarm_Active_Mode_Handle+0xce>
      break;
 8001dd4:	bf00      	nop
 8001dd6:	e006      	b.n	8001de6 <System_Alarm_Active_Mode_Handle+0xce>
      break;
 8001dd8:	bf00      	nop
 8001dda:	e004      	b.n	8001de6 <System_Alarm_Active_Mode_Handle+0xce>
      break;
 8001ddc:	bf00      	nop
 8001dde:	e002      	b.n	8001de6 <System_Alarm_Active_Mode_Handle+0xce>
      break;
 8001de0:	bf00      	nop
 8001de2:	e000      	b.n	8001de6 <System_Alarm_Active_Mode_Handle+0xce>
      break;
 8001de4:	bf00      	nop
  }

  system_state.past_mode = ALARM_ACTIVE_MODE;
 8001de6:	4b04      	ldr	r3, [pc, #16]	@ (8001df8 <System_Alarm_Active_Mode_Handle+0xe0>)
 8001de8:	2204      	movs	r2, #4
 8001dea:	705a      	strb	r2, [r3, #1]
}
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bc80      	pop	{r7}
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	20000348 	.word	0x20000348

08001dfc <System_Options_Mode_Handle>:
 * @brief  Handles the system options mode based on button actions.
 * @param  button: Pointer to the BUTTON structure containing button state and index.
 * @retval None
 */
void System_Options_Mode_Handle (BUTTON_DATA *button)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  // Handle button actions in system options mode
  switch (button->index) 
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	799b      	ldrb	r3, [r3, #6]
 8001e08:	2b04      	cmp	r3, #4
 8001e0a:	d848      	bhi.n	8001e9e <System_Options_Mode_Handle+0xa2>
 8001e0c:	a201      	add	r2, pc, #4	@ (adr r2, 8001e14 <System_Options_Mode_Handle+0x18>)
 8001e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e12:	bf00      	nop
 8001e14:	08001e29 	.word	0x08001e29
 8001e18:	08001e5f 	.word	0x08001e5f
 8001e1c:	08001e6f 	.word	0x08001e6f
 8001e20:	08001e7f 	.word	0x08001e7f
 8001e24:	08001e8f 	.word	0x08001e8f
  {
    // Button 0: If pressed, cycle through the time setup fields; if held, set the mode to default
    case 0:
      // If pressed, cycle through the time setup fields
      if      (button->press_flag)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	7b5b      	ldrb	r3, [r3, #13]
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d00c      	beq.n	8001e4c <System_Options_Mode_Handle+0x50>
      {
        system_state.mode = (system_state.mode < (SYSTEM_MODE_NUM - 1)) ? (system_state.mode + 1) : 0;
 8001e32:	4b24      	ldr	r3, [pc, #144]	@ (8001ec4 <System_Options_Mode_Handle+0xc8>)
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	2b04      	cmp	r3, #4
 8001e38:	d804      	bhi.n	8001e44 <System_Options_Mode_Handle+0x48>
 8001e3a:	4b22      	ldr	r3, [pc, #136]	@ (8001ec4 <System_Options_Mode_Handle+0xc8>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	e000      	b.n	8001e46 <System_Options_Mode_Handle+0x4a>
 8001e44:	2300      	movs	r3, #0
 8001e46:	4a1f      	ldr	r2, [pc, #124]	@ (8001ec4 <System_Options_Mode_Handle+0xc8>)
 8001e48:	7013      	strb	r3, [r2, #0]
      // If held, set the mode to default
      else if (button->hold_flag)
      {
        system_state.mode = DEFAULT_MODE;
      }
      break;
 8001e4a:	e02a      	b.n	8001ea2 <System_Options_Mode_Handle+0xa6>
      else if (button->hold_flag)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	7b9b      	ldrb	r3, [r3, #14]
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d025      	beq.n	8001ea2 <System_Options_Mode_Handle+0xa6>
        system_state.mode = DEFAULT_MODE;
 8001e56:	4b1b      	ldr	r3, [pc, #108]	@ (8001ec4 <System_Options_Mode_Handle+0xc8>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	701a      	strb	r2, [r3, #0]
      break;
 8001e5c:	e021      	b.n	8001ea2 <System_Options_Mode_Handle+0xa6>

    case 1:
      if      (button->press_flag)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	7b5b      	ldrb	r3, [r3, #13]
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d11e      	bne.n	8001ea6 <System_Options_Mode_Handle+0xaa>
      {

      }
      else if (button->hold_flag)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	7b9b      	ldrb	r3, [r3, #14]
      {

      }
      break;
 8001e6c:	e01b      	b.n	8001ea6 <System_Options_Mode_Handle+0xaa>

    case 2:
      if      (button->press_flag)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	7b5b      	ldrb	r3, [r3, #13]
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d118      	bne.n	8001eaa <System_Options_Mode_Handle+0xae>
      {

      }
      else if (button->hold_flag)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	7b9b      	ldrb	r3, [r3, #14]
      {

      }
      break;
 8001e7c:	e015      	b.n	8001eaa <System_Options_Mode_Handle+0xae>
    
    case 3:
      if      (button->press_flag)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	7b5b      	ldrb	r3, [r3, #13]
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d112      	bne.n	8001eae <System_Options_Mode_Handle+0xb2>
      {

      }
      else if (button->hold_flag)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	7b9b      	ldrb	r3, [r3, #14]
      {

      }
      break;
 8001e8c:	e00f      	b.n	8001eae <System_Options_Mode_Handle+0xb2>

    case 4: 
      if      (button->press_flag)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	7b5b      	ldrb	r3, [r3, #13]
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d10c      	bne.n	8001eb2 <System_Options_Mode_Handle+0xb6>
      {

      }
      else if (button->hold_flag)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	7b9b      	ldrb	r3, [r3, #14]
      {

      }
      break;
 8001e9c:	e009      	b.n	8001eb2 <System_Options_Mode_Handle+0xb6>

    default: 
      break;
 8001e9e:	bf00      	nop
 8001ea0:	e008      	b.n	8001eb4 <System_Options_Mode_Handle+0xb8>
      break;
 8001ea2:	bf00      	nop
 8001ea4:	e006      	b.n	8001eb4 <System_Options_Mode_Handle+0xb8>
      break;
 8001ea6:	bf00      	nop
 8001ea8:	e004      	b.n	8001eb4 <System_Options_Mode_Handle+0xb8>
      break;
 8001eaa:	bf00      	nop
 8001eac:	e002      	b.n	8001eb4 <System_Options_Mode_Handle+0xb8>
      break;
 8001eae:	bf00      	nop
 8001eb0:	e000      	b.n	8001eb4 <System_Options_Mode_Handle+0xb8>
      break;
 8001eb2:	bf00      	nop
  }

  system_state.past_mode = SYSTEM_OPTIONS_MODE;
 8001eb4:	4b03      	ldr	r3, [pc, #12]	@ (8001ec4 <System_Options_Mode_Handle+0xc8>)
 8001eb6:	2205      	movs	r2, #5
 8001eb8:	705a      	strb	r2, [r3, #1]
}
 8001eba:	bf00      	nop
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc80      	pop	{r7}
 8001ec2:	4770      	bx	lr
 8001ec4:	20000348 	.word	0x20000348

08001ec8 <HAL_GPIO_EXTI_Callback>:
  * @brief  Callback function to handle GPIO interrupts.
  * @param  GPIO_Pin: The pin number of the GPIO that triggered the interrupt.
  * @retval None
*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	4603      	mov	r3, r0
 8001ed0:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8001ed2:	88fb      	ldrh	r3, [r7, #6]
 8001ed4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001ed8:	d02a      	beq.n	8001f30 <HAL_GPIO_EXTI_Callback+0x68>
 8001eda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001ede:	dc2f      	bgt.n	8001f40 <HAL_GPIO_EXTI_Callback+0x78>
 8001ee0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001ee4:	d020      	beq.n	8001f28 <HAL_GPIO_EXTI_Callback+0x60>
 8001ee6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001eea:	dc29      	bgt.n	8001f40 <HAL_GPIO_EXTI_Callback+0x78>
 8001eec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001ef0:	d016      	beq.n	8001f20 <HAL_GPIO_EXTI_Callback+0x58>
 8001ef2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001ef6:	dc23      	bgt.n	8001f40 <HAL_GPIO_EXTI_Callback+0x78>
 8001ef8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001efc:	d00c      	beq.n	8001f18 <HAL_GPIO_EXTI_Callback+0x50>
 8001efe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f02:	dc1d      	bgt.n	8001f40 <HAL_GPIO_EXTI_Callback+0x78>
 8001f04:	2b20      	cmp	r3, #32
 8001f06:	d003      	beq.n	8001f10 <HAL_GPIO_EXTI_Callback+0x48>
 8001f08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f0c:	d014      	beq.n	8001f38 <HAL_GPIO_EXTI_Callback+0x70>
      button4.int_flag = true;
      break;  

    default:
      // Handle other GPIO interrupts if necessary
      break;
 8001f0e:	e017      	b.n	8001f40 <HAL_GPIO_EXTI_Callback+0x78>
      rtc_int_flag = true;
 8001f10:	4b0e      	ldr	r3, [pc, #56]	@ (8001f4c <HAL_GPIO_EXTI_Callback+0x84>)
 8001f12:	2201      	movs	r2, #1
 8001f14:	701a      	strb	r2, [r3, #0]
      break;
 8001f16:	e014      	b.n	8001f42 <HAL_GPIO_EXTI_Callback+0x7a>
      button0.int_flag = true;
 8001f18:	4b0d      	ldr	r3, [pc, #52]	@ (8001f50 <HAL_GPIO_EXTI_Callback+0x88>)
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	731a      	strb	r2, [r3, #12]
      break;
 8001f1e:	e010      	b.n	8001f42 <HAL_GPIO_EXTI_Callback+0x7a>
      button1.int_flag = true;
 8001f20:	4b0c      	ldr	r3, [pc, #48]	@ (8001f54 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001f22:	2201      	movs	r2, #1
 8001f24:	731a      	strb	r2, [r3, #12]
      break;
 8001f26:	e00c      	b.n	8001f42 <HAL_GPIO_EXTI_Callback+0x7a>
      button2.int_flag = true;
 8001f28:	4b0b      	ldr	r3, [pc, #44]	@ (8001f58 <HAL_GPIO_EXTI_Callback+0x90>)
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	731a      	strb	r2, [r3, #12]
      break;
 8001f2e:	e008      	b.n	8001f42 <HAL_GPIO_EXTI_Callback+0x7a>
      button3.int_flag = true;
 8001f30:	4b0a      	ldr	r3, [pc, #40]	@ (8001f5c <HAL_GPIO_EXTI_Callback+0x94>)
 8001f32:	2201      	movs	r2, #1
 8001f34:	731a      	strb	r2, [r3, #12]
      break;  
 8001f36:	e004      	b.n	8001f42 <HAL_GPIO_EXTI_Callback+0x7a>
      button4.int_flag = true;
 8001f38:	4b09      	ldr	r3, [pc, #36]	@ (8001f60 <HAL_GPIO_EXTI_Callback+0x98>)
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	731a      	strb	r2, [r3, #12]
      break;  
 8001f3e:	e000      	b.n	8001f42 <HAL_GPIO_EXTI_Callback+0x7a>
      break;
 8001f40:	bf00      	nop
  }
}
 8001f42:	bf00      	nop
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bc80      	pop	{r7}
 8001f4a:	4770      	bx	lr
 8001f4c:	2000039d 	.word	0x2000039d
 8001f50:	20000000 	.word	0x20000000
 8001f54:	20000010 	.word	0x20000010
 8001f58:	20000020 	.word	0x20000020
 8001f5c:	20000030 	.word	0x20000030
 8001f60:	20000040 	.word	0x20000040

08001f64 <HAL_UART_RxCpltCallback>:
  * @brief  Callback function to handle UART interrupts.
  * @param  huart: Pointer to the UART handle.
  * @retval None
*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  // Verify the UART instance to ensure the callback is for USART1
  // If the UART instance is USART1, store the received data into the uart_rx_data array
  if(huart->Instance == USART1)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a09      	ldr	r2, [pc, #36]	@ (8001f98 <HAL_UART_RxCpltCallback+0x34>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d10a      	bne.n	8001f8c <HAL_UART_RxCpltCallback+0x28>
  {
    // Store the received data into the uart_rx_data array
    uart_rx_hour = uart_rx_data[0];
 8001f76:	4b09      	ldr	r3, [pc, #36]	@ (8001f9c <HAL_UART_RxCpltCallback+0x38>)
 8001f78:	781a      	ldrb	r2, [r3, #0]
 8001f7a:	4b09      	ldr	r3, [pc, #36]	@ (8001fa0 <HAL_UART_RxCpltCallback+0x3c>)
 8001f7c:	701a      	strb	r2, [r3, #0]
    uart_rx_minute = uart_rx_data[1];
 8001f7e:	4b07      	ldr	r3, [pc, #28]	@ (8001f9c <HAL_UART_RxCpltCallback+0x38>)
 8001f80:	785a      	ldrb	r2, [r3, #1]
 8001f82:	4b08      	ldr	r3, [pc, #32]	@ (8001fa4 <HAL_UART_RxCpltCallback+0x40>)
 8001f84:	701a      	strb	r2, [r3, #0]

    // Set the UART receive flag
    uart_rx_flag = 1;
 8001f86:	4b08      	ldr	r3, [pc, #32]	@ (8001fa8 <HAL_UART_RxCpltCallback+0x44>)
 8001f88:	2201      	movs	r2, #1
 8001f8a:	701a      	strb	r2, [r3, #0]
  }
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bc80      	pop	{r7}
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	40013800 	.word	0x40013800
 8001f9c:	200003ac 	.word	0x200003ac
 8001fa0:	200003ae 	.word	0x200003ae
 8001fa4:	200003af 	.word	0x200003af
 8001fa8:	200003aa 	.word	0x200003aa

08001fac <HAL_ADC_ConvCpltCallback>:
  * @brief  Callback function to handle ADC conversion complete interrupts.
  * @param  hadc: Pointer to the ADC handle.
  * @retval None
*/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
	// Verify the ADC instance to ensure the callback is for ADC1
  // If the ADC instance is ADC1, get the ADC value and calculate the battery percentage
  if (hadc == &hadc1)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a10      	ldr	r2, [pc, #64]	@ (8001ff8 <HAL_ADC_ConvCpltCallback+0x4c>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d119      	bne.n	8001ff0 <HAL_ADC_ConvCpltCallback+0x44>
	{
    // Get the ADC value
    adc_data = HAL_ADC_GetValue(&hadc1);
 8001fbc:	480e      	ldr	r0, [pc, #56]	@ (8001ff8 <HAL_ADC_ConvCpltCallback+0x4c>)
 8001fbe:	f000 fc8f 	bl	80028e0 <HAL_ADC_GetValue>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	b29a      	uxth	r2, r3
 8001fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8001ffc <HAL_ADC_ConvCpltCallback+0x50>)
 8001fc8:	801a      	strh	r2, [r3, #0]

    // Set the ADC valid flag
    adc_valid_flag = 1;
 8001fca:	4b0d      	ldr	r3, [pc, #52]	@ (8002000 <HAL_ADC_ConvCpltCallback+0x54>)
 8001fcc:	2201      	movs	r2, #1
 8001fce:	701a      	strb	r2, [r3, #0]

    // Calculate the battery percentage
    battery_percentage = adc_data * 100 / 4095;
 8001fd0:	4b0a      	ldr	r3, [pc, #40]	@ (8001ffc <HAL_ADC_ConvCpltCallback+0x50>)
 8001fd2:	881b      	ldrh	r3, [r3, #0]
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	2364      	movs	r3, #100	@ 0x64
 8001fd8:	fb02 f303 	mul.w	r3, r2, r3
 8001fdc:	4a09      	ldr	r2, [pc, #36]	@ (8002004 <HAL_ADC_ConvCpltCallback+0x58>)
 8001fde:	fb82 1203 	smull	r1, r2, r2, r3
 8001fe2:	441a      	add	r2, r3
 8001fe4:	12d2      	asrs	r2, r2, #11
 8001fe6:	17db      	asrs	r3, r3, #31
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	b29a      	uxth	r2, r3
 8001fec:	4b06      	ldr	r3, [pc, #24]	@ (8002008 <HAL_ADC_ConvCpltCallback+0x5c>)
 8001fee:	801a      	strh	r2, [r3, #0]
	}
}
 8001ff0:	bf00      	nop
 8001ff2:	3708      	adds	r7, #8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	200002c4 	.word	0x200002c4
 8001ffc:	200003a6 	.word	0x200003a6
 8002000:	200003a5 	.word	0x200003a5
 8002004:	80080081 	.word	0x80080081
 8002008:	200003a8 	.word	0x200003a8

0800200c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002010:	b672      	cpsid	i
}
 8002012:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002014:	bf00      	nop
 8002016:	e7fd      	b.n	8002014 <Error_Handler+0x8>

08002018 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800201c:	4b17      	ldr	r3, [pc, #92]	@ (800207c <MX_SPI1_Init+0x64>)
 800201e:	4a18      	ldr	r2, [pc, #96]	@ (8002080 <MX_SPI1_Init+0x68>)
 8002020:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002022:	4b16      	ldr	r3, [pc, #88]	@ (800207c <MX_SPI1_Init+0x64>)
 8002024:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002028:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800202a:	4b14      	ldr	r3, [pc, #80]	@ (800207c <MX_SPI1_Init+0x64>)
 800202c:	2200      	movs	r2, #0
 800202e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002030:	4b12      	ldr	r3, [pc, #72]	@ (800207c <MX_SPI1_Init+0x64>)
 8002032:	2200      	movs	r2, #0
 8002034:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002036:	4b11      	ldr	r3, [pc, #68]	@ (800207c <MX_SPI1_Init+0x64>)
 8002038:	2200      	movs	r2, #0
 800203a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800203c:	4b0f      	ldr	r3, [pc, #60]	@ (800207c <MX_SPI1_Init+0x64>)
 800203e:	2200      	movs	r2, #0
 8002040:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002042:	4b0e      	ldr	r3, [pc, #56]	@ (800207c <MX_SPI1_Init+0x64>)
 8002044:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002048:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800204a:	4b0c      	ldr	r3, [pc, #48]	@ (800207c <MX_SPI1_Init+0x64>)
 800204c:	2228      	movs	r2, #40	@ 0x28
 800204e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002050:	4b0a      	ldr	r3, [pc, #40]	@ (800207c <MX_SPI1_Init+0x64>)
 8002052:	2200      	movs	r2, #0
 8002054:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002056:	4b09      	ldr	r3, [pc, #36]	@ (800207c <MX_SPI1_Init+0x64>)
 8002058:	2200      	movs	r2, #0
 800205a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800205c:	4b07      	ldr	r3, [pc, #28]	@ (800207c <MX_SPI1_Init+0x64>)
 800205e:	2200      	movs	r2, #0
 8002060:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002062:	4b06      	ldr	r3, [pc, #24]	@ (800207c <MX_SPI1_Init+0x64>)
 8002064:	220a      	movs	r2, #10
 8002066:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002068:	4804      	ldr	r0, [pc, #16]	@ (800207c <MX_SPI1_Init+0x64>)
 800206a:	f002 ff61 	bl	8004f30 <HAL_SPI_Init>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002074:	f7ff ffca 	bl	800200c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002078:	bf00      	nop
 800207a:	bd80      	pop	{r7, pc}
 800207c:	200003b0 	.word	0x200003b0
 8002080:	40013000 	.word	0x40013000

08002084 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b088      	sub	sp, #32
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800208c:	f107 0310 	add.w	r3, r7, #16
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	605a      	str	r2, [r3, #4]
 8002096:	609a      	str	r2, [r3, #8]
 8002098:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a15      	ldr	r2, [pc, #84]	@ (80020f4 <HAL_SPI_MspInit+0x70>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d123      	bne.n	80020ec <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020a4:	4b14      	ldr	r3, [pc, #80]	@ (80020f8 <HAL_SPI_MspInit+0x74>)
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	4a13      	ldr	r2, [pc, #76]	@ (80020f8 <HAL_SPI_MspInit+0x74>)
 80020aa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80020ae:	6193      	str	r3, [r2, #24]
 80020b0:	4b11      	ldr	r3, [pc, #68]	@ (80020f8 <HAL_SPI_MspInit+0x74>)
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020bc:	4b0e      	ldr	r3, [pc, #56]	@ (80020f8 <HAL_SPI_MspInit+0x74>)
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	4a0d      	ldr	r2, [pc, #52]	@ (80020f8 <HAL_SPI_MspInit+0x74>)
 80020c2:	f043 0304 	orr.w	r3, r3, #4
 80020c6:	6193      	str	r3, [r2, #24]
 80020c8:	4b0b      	ldr	r3, [pc, #44]	@ (80020f8 <HAL_SPI_MspInit+0x74>)
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	f003 0304 	and.w	r3, r3, #4
 80020d0:	60bb      	str	r3, [r7, #8]
 80020d2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|DIN_Pin;
 80020d4:	23a0      	movs	r3, #160	@ 0xa0
 80020d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d8:	2302      	movs	r3, #2
 80020da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020dc:	2303      	movs	r3, #3
 80020de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e0:	f107 0310 	add.w	r3, r7, #16
 80020e4:	4619      	mov	r1, r3
 80020e6:	4805      	ldr	r0, [pc, #20]	@ (80020fc <HAL_SPI_MspInit+0x78>)
 80020e8:	f001 f82a 	bl	8003140 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80020ec:	bf00      	nop
 80020ee:	3720      	adds	r7, #32
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	40013000 	.word	0x40013000
 80020f8:	40021000 	.word	0x40021000
 80020fc:	40010800 	.word	0x40010800

08002100 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002106:	4b15      	ldr	r3, [pc, #84]	@ (800215c <HAL_MspInit+0x5c>)
 8002108:	699b      	ldr	r3, [r3, #24]
 800210a:	4a14      	ldr	r2, [pc, #80]	@ (800215c <HAL_MspInit+0x5c>)
 800210c:	f043 0301 	orr.w	r3, r3, #1
 8002110:	6193      	str	r3, [r2, #24]
 8002112:	4b12      	ldr	r3, [pc, #72]	@ (800215c <HAL_MspInit+0x5c>)
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	60bb      	str	r3, [r7, #8]
 800211c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800211e:	4b0f      	ldr	r3, [pc, #60]	@ (800215c <HAL_MspInit+0x5c>)
 8002120:	69db      	ldr	r3, [r3, #28]
 8002122:	4a0e      	ldr	r2, [pc, #56]	@ (800215c <HAL_MspInit+0x5c>)
 8002124:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002128:	61d3      	str	r3, [r2, #28]
 800212a:	4b0c      	ldr	r3, [pc, #48]	@ (800215c <HAL_MspInit+0x5c>)
 800212c:	69db      	ldr	r3, [r3, #28]
 800212e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002132:	607b      	str	r3, [r7, #4]
 8002134:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002136:	4b0a      	ldr	r3, [pc, #40]	@ (8002160 <HAL_MspInit+0x60>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	60fb      	str	r3, [r7, #12]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	4a04      	ldr	r2, [pc, #16]	@ (8002160 <HAL_MspInit+0x60>)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002152:	bf00      	nop
 8002154:	3714      	adds	r7, #20
 8002156:	46bd      	mov	sp, r7
 8002158:	bc80      	pop	{r7}
 800215a:	4770      	bx	lr
 800215c:	40021000 	.word	0x40021000
 8002160:	40010000 	.word	0x40010000

08002164 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002168:	bf00      	nop
 800216a:	e7fd      	b.n	8002168 <NMI_Handler+0x4>

0800216c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002170:	bf00      	nop
 8002172:	e7fd      	b.n	8002170 <HardFault_Handler+0x4>

08002174 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002178:	bf00      	nop
 800217a:	e7fd      	b.n	8002178 <MemManage_Handler+0x4>

0800217c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002180:	bf00      	nop
 8002182:	e7fd      	b.n	8002180 <BusFault_Handler+0x4>

08002184 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002188:	bf00      	nop
 800218a:	e7fd      	b.n	8002188 <UsageFault_Handler+0x4>

0800218c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002190:	bf00      	nop
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr

08002198 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800219c:	bf00      	nop
 800219e:	46bd      	mov	sp, r7
 80021a0:	bc80      	pop	{r7}
 80021a2:	4770      	bx	lr

080021a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021a8:	bf00      	nop
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bc80      	pop	{r7}
 80021ae:	4770      	bx	lr

080021b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021b4:	f000 f9c6 	bl	8002544 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021b8:	bf00      	nop
 80021ba:	bd80      	pop	{r7, pc}

080021bc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80021c0:	4802      	ldr	r0, [pc, #8]	@ (80021cc <ADC1_2_IRQHandler+0x10>)
 80021c2:	f000 fb99 	bl	80028f8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80021c6:	bf00      	nop
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	200002c4 	.word	0x200002c4

080021d0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RTC_IN5_Pin);
 80021d4:	2020      	movs	r0, #32
 80021d6:	f001 f967 	bl	80034a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON4_IN8_Pin);
 80021da:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80021de:	f001 f963 	bl	80034a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80021e2:	bf00      	nop
 80021e4:	bd80      	pop	{r7, pc}
	...

080021e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80021ec:	4802      	ldr	r0, [pc, #8]	@ (80021f8 <USART1_IRQHandler+0x10>)
 80021ee:	f003 f995 	bl	800551c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80021f2:	bf00      	nop
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	2000040c 	.word	0x2000040c

080021fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON0_IN12_Pin);
 8002200:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002204:	f001 f950 	bl	80034a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON1_IN13_Pin);
 8002208:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800220c:	f001 f94c 	bl	80034a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON2_IN14_Pin);
 8002210:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002214:	f001 f948 	bl	80034a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON3_IN15_Pin);
 8002218:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800221c:	f001 f944 	bl	80034a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002220:	bf00      	nop
 8002222:	bd80      	pop	{r7, pc}

08002224 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b086      	sub	sp, #24
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002230:	2300      	movs	r3, #0
 8002232:	617b      	str	r3, [r7, #20]
 8002234:	e00a      	b.n	800224c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002236:	f3af 8000 	nop.w
 800223a:	4601      	mov	r1, r0
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	1c5a      	adds	r2, r3, #1
 8002240:	60ba      	str	r2, [r7, #8]
 8002242:	b2ca      	uxtb	r2, r1
 8002244:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	3301      	adds	r3, #1
 800224a:	617b      	str	r3, [r7, #20]
 800224c:	697a      	ldr	r2, [r7, #20]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	429a      	cmp	r2, r3
 8002252:	dbf0      	blt.n	8002236 <_read+0x12>
  }

  return len;
 8002254:	687b      	ldr	r3, [r7, #4]
}
 8002256:	4618      	mov	r0, r3
 8002258:	3718      	adds	r7, #24
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b086      	sub	sp, #24
 8002262:	af00      	add	r7, sp, #0
 8002264:	60f8      	str	r0, [r7, #12]
 8002266:	60b9      	str	r1, [r7, #8]
 8002268:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800226a:	2300      	movs	r3, #0
 800226c:	617b      	str	r3, [r7, #20]
 800226e:	e009      	b.n	8002284 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	1c5a      	adds	r2, r3, #1
 8002274:	60ba      	str	r2, [r7, #8]
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	4618      	mov	r0, r3
 800227a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	3301      	adds	r3, #1
 8002282:	617b      	str	r3, [r7, #20]
 8002284:	697a      	ldr	r2, [r7, #20]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	429a      	cmp	r2, r3
 800228a:	dbf1      	blt.n	8002270 <_write+0x12>
  }
  return len;
 800228c:	687b      	ldr	r3, [r7, #4]
}
 800228e:	4618      	mov	r0, r3
 8002290:	3718      	adds	r7, #24
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <_close>:

int _close(int file)
{
 8002296:	b480      	push	{r7}
 8002298:	b083      	sub	sp, #12
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800229e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bc80      	pop	{r7}
 80022aa:	4770      	bx	lr

080022ac <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80022bc:	605a      	str	r2, [r3, #4]
  return 0;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bc80      	pop	{r7}
 80022c8:	4770      	bx	lr

080022ca <_isatty>:

int _isatty(int file)
{
 80022ca:	b480      	push	{r7}
 80022cc:	b083      	sub	sp, #12
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022d2:	2301      	movs	r3, #1
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	bc80      	pop	{r7}
 80022dc:	4770      	bx	lr

080022de <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022de:	b480      	push	{r7}
 80022e0:	b085      	sub	sp, #20
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	60f8      	str	r0, [r7, #12]
 80022e6:	60b9      	str	r1, [r7, #8]
 80022e8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3714      	adds	r7, #20
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bc80      	pop	{r7}
 80022f4:	4770      	bx	lr
	...

080022f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002300:	4a14      	ldr	r2, [pc, #80]	@ (8002354 <_sbrk+0x5c>)
 8002302:	4b15      	ldr	r3, [pc, #84]	@ (8002358 <_sbrk+0x60>)
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800230c:	4b13      	ldr	r3, [pc, #76]	@ (800235c <_sbrk+0x64>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d102      	bne.n	800231a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002314:	4b11      	ldr	r3, [pc, #68]	@ (800235c <_sbrk+0x64>)
 8002316:	4a12      	ldr	r2, [pc, #72]	@ (8002360 <_sbrk+0x68>)
 8002318:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800231a:	4b10      	ldr	r3, [pc, #64]	@ (800235c <_sbrk+0x64>)
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4413      	add	r3, r2
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	429a      	cmp	r2, r3
 8002326:	d207      	bcs.n	8002338 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002328:	f005 f904 	bl	8007534 <__errno>
 800232c:	4603      	mov	r3, r0
 800232e:	220c      	movs	r2, #12
 8002330:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002332:	f04f 33ff 	mov.w	r3, #4294967295
 8002336:	e009      	b.n	800234c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002338:	4b08      	ldr	r3, [pc, #32]	@ (800235c <_sbrk+0x64>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800233e:	4b07      	ldr	r3, [pc, #28]	@ (800235c <_sbrk+0x64>)
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4413      	add	r3, r2
 8002346:	4a05      	ldr	r2, [pc, #20]	@ (800235c <_sbrk+0x64>)
 8002348:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800234a:	68fb      	ldr	r3, [r7, #12]
}
 800234c:	4618      	mov	r0, r3
 800234e:	3718      	adds	r7, #24
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	20005000 	.word	0x20005000
 8002358:	00000400 	.word	0x00000400
 800235c:	20000408 	.word	0x20000408
 8002360:	200005c0 	.word	0x200005c0

08002364 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002368:	bf00      	nop
 800236a:	46bd      	mov	sp, r7
 800236c:	bc80      	pop	{r7}
 800236e:	4770      	bx	lr

08002370 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002374:	4b11      	ldr	r3, [pc, #68]	@ (80023bc <MX_USART1_UART_Init+0x4c>)
 8002376:	4a12      	ldr	r2, [pc, #72]	@ (80023c0 <MX_USART1_UART_Init+0x50>)
 8002378:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800237a:	4b10      	ldr	r3, [pc, #64]	@ (80023bc <MX_USART1_UART_Init+0x4c>)
 800237c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002380:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002382:	4b0e      	ldr	r3, [pc, #56]	@ (80023bc <MX_USART1_UART_Init+0x4c>)
 8002384:	2200      	movs	r2, #0
 8002386:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002388:	4b0c      	ldr	r3, [pc, #48]	@ (80023bc <MX_USART1_UART_Init+0x4c>)
 800238a:	2200      	movs	r2, #0
 800238c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800238e:	4b0b      	ldr	r3, [pc, #44]	@ (80023bc <MX_USART1_UART_Init+0x4c>)
 8002390:	2200      	movs	r2, #0
 8002392:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002394:	4b09      	ldr	r3, [pc, #36]	@ (80023bc <MX_USART1_UART_Init+0x4c>)
 8002396:	220c      	movs	r2, #12
 8002398:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800239a:	4b08      	ldr	r3, [pc, #32]	@ (80023bc <MX_USART1_UART_Init+0x4c>)
 800239c:	2200      	movs	r2, #0
 800239e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023a0:	4b06      	ldr	r3, [pc, #24]	@ (80023bc <MX_USART1_UART_Init+0x4c>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023a6:	4805      	ldr	r0, [pc, #20]	@ (80023bc <MX_USART1_UART_Init+0x4c>)
 80023a8:	f003 f843 	bl	8005432 <HAL_UART_Init>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80023b2:	f7ff fe2b 	bl	800200c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80023b6:	bf00      	nop
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	2000040c 	.word	0x2000040c
 80023c0:	40013800 	.word	0x40013800

080023c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b088      	sub	sp, #32
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023cc:	f107 0310 	add.w	r3, r7, #16
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	605a      	str	r2, [r3, #4]
 80023d6:	609a      	str	r2, [r3, #8]
 80023d8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a20      	ldr	r2, [pc, #128]	@ (8002460 <HAL_UART_MspInit+0x9c>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d139      	bne.n	8002458 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023e4:	4b1f      	ldr	r3, [pc, #124]	@ (8002464 <HAL_UART_MspInit+0xa0>)
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	4a1e      	ldr	r2, [pc, #120]	@ (8002464 <HAL_UART_MspInit+0xa0>)
 80023ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023ee:	6193      	str	r3, [r2, #24]
 80023f0:	4b1c      	ldr	r3, [pc, #112]	@ (8002464 <HAL_UART_MspInit+0xa0>)
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023f8:	60fb      	str	r3, [r7, #12]
 80023fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023fc:	4b19      	ldr	r3, [pc, #100]	@ (8002464 <HAL_UART_MspInit+0xa0>)
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	4a18      	ldr	r2, [pc, #96]	@ (8002464 <HAL_UART_MspInit+0xa0>)
 8002402:	f043 0304 	orr.w	r3, r3, #4
 8002406:	6193      	str	r3, [r2, #24]
 8002408:	4b16      	ldr	r3, [pc, #88]	@ (8002464 <HAL_UART_MspInit+0xa0>)
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	f003 0304 	and.w	r3, r3, #4
 8002410:	60bb      	str	r3, [r7, #8]
 8002412:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002414:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002418:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241a:	2302      	movs	r3, #2
 800241c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800241e:	2303      	movs	r3, #3
 8002420:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002422:	f107 0310 	add.w	r3, r7, #16
 8002426:	4619      	mov	r1, r3
 8002428:	480f      	ldr	r0, [pc, #60]	@ (8002468 <HAL_UART_MspInit+0xa4>)
 800242a:	f000 fe89 	bl	8003140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800242e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002432:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002434:	2300      	movs	r3, #0
 8002436:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002438:	2300      	movs	r3, #0
 800243a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800243c:	f107 0310 	add.w	r3, r7, #16
 8002440:	4619      	mov	r1, r3
 8002442:	4809      	ldr	r0, [pc, #36]	@ (8002468 <HAL_UART_MspInit+0xa4>)
 8002444:	f000 fe7c 	bl	8003140 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002448:	2200      	movs	r2, #0
 800244a:	2100      	movs	r1, #0
 800244c:	2025      	movs	r0, #37	@ 0x25
 800244e:	f000 fd8e 	bl	8002f6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002452:	2025      	movs	r0, #37	@ 0x25
 8002454:	f000 fda7 	bl	8002fa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002458:	bf00      	nop
 800245a:	3720      	adds	r7, #32
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	40013800 	.word	0x40013800
 8002464:	40021000 	.word	0x40021000
 8002468:	40010800 	.word	0x40010800

0800246c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800246c:	f7ff ff7a 	bl	8002364 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002470:	480b      	ldr	r0, [pc, #44]	@ (80024a0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002472:	490c      	ldr	r1, [pc, #48]	@ (80024a4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002474:	4a0c      	ldr	r2, [pc, #48]	@ (80024a8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002476:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002478:	e002      	b.n	8002480 <LoopCopyDataInit>

0800247a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800247a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800247c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800247e:	3304      	adds	r3, #4

08002480 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002480:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002482:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002484:	d3f9      	bcc.n	800247a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002486:	4a09      	ldr	r2, [pc, #36]	@ (80024ac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002488:	4c09      	ldr	r4, [pc, #36]	@ (80024b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800248a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800248c:	e001      	b.n	8002492 <LoopFillZerobss>

0800248e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800248e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002490:	3204      	adds	r2, #4

08002492 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002492:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002494:	d3fb      	bcc.n	800248e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002496:	f005 f853 	bl	8007540 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800249a:	f7fd ffe9 	bl	8000470 <main>
  bx lr
 800249e:	4770      	bx	lr
  ldr r0, =_sdata
 80024a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024a4:	200002a8 	.word	0x200002a8
  ldr r2, =_sidata
 80024a8:	080098fc 	.word	0x080098fc
  ldr r2, =_sbss
 80024ac:	200002a8 	.word	0x200002a8
  ldr r4, =_ebss
 80024b0:	200005bc 	.word	0x200005bc

080024b4 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024b4:	e7fe      	b.n	80024b4 <CAN1_RX1_IRQHandler>
	...

080024b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024bc:	4b08      	ldr	r3, [pc, #32]	@ (80024e0 <HAL_Init+0x28>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a07      	ldr	r2, [pc, #28]	@ (80024e0 <HAL_Init+0x28>)
 80024c2:	f043 0310 	orr.w	r3, r3, #16
 80024c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024c8:	2003      	movs	r0, #3
 80024ca:	f000 fd45 	bl	8002f58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024ce:	200f      	movs	r0, #15
 80024d0:	f000 f808 	bl	80024e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024d4:	f7ff fe14 	bl	8002100 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	40022000 	.word	0x40022000

080024e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024ec:	4b12      	ldr	r3, [pc, #72]	@ (8002538 <HAL_InitTick+0x54>)
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	4b12      	ldr	r3, [pc, #72]	@ (800253c <HAL_InitTick+0x58>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	4619      	mov	r1, r3
 80024f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80024fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002502:	4618      	mov	r0, r3
 8002504:	f000 fd5d 	bl	8002fc2 <HAL_SYSTICK_Config>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e00e      	b.n	8002530 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2b0f      	cmp	r3, #15
 8002516:	d80a      	bhi.n	800252e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002518:	2200      	movs	r2, #0
 800251a:	6879      	ldr	r1, [r7, #4]
 800251c:	f04f 30ff 	mov.w	r0, #4294967295
 8002520:	f000 fd25 	bl	8002f6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002524:	4a06      	ldr	r2, [pc, #24]	@ (8002540 <HAL_InitTick+0x5c>)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800252a:	2300      	movs	r3, #0
 800252c:	e000      	b.n	8002530 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
}
 8002530:	4618      	mov	r0, r3
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	20000050 	.word	0x20000050
 800253c:	20000058 	.word	0x20000058
 8002540:	20000054 	.word	0x20000054

08002544 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002548:	4b05      	ldr	r3, [pc, #20]	@ (8002560 <HAL_IncTick+0x1c>)
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	461a      	mov	r2, r3
 800254e:	4b05      	ldr	r3, [pc, #20]	@ (8002564 <HAL_IncTick+0x20>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4413      	add	r3, r2
 8002554:	4a03      	ldr	r2, [pc, #12]	@ (8002564 <HAL_IncTick+0x20>)
 8002556:	6013      	str	r3, [r2, #0]
}
 8002558:	bf00      	nop
 800255a:	46bd      	mov	sp, r7
 800255c:	bc80      	pop	{r7}
 800255e:	4770      	bx	lr
 8002560:	20000058 	.word	0x20000058
 8002564:	20000454 	.word	0x20000454

08002568 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  return uwTick;
 800256c:	4b02      	ldr	r3, [pc, #8]	@ (8002578 <HAL_GetTick+0x10>)
 800256e:	681b      	ldr	r3, [r3, #0]
}
 8002570:	4618      	mov	r0, r3
 8002572:	46bd      	mov	sp, r7
 8002574:	bc80      	pop	{r7}
 8002576:	4770      	bx	lr
 8002578:	20000454 	.word	0x20000454

0800257c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002584:	f7ff fff0 	bl	8002568 <HAL_GetTick>
 8002588:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002594:	d005      	beq.n	80025a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002596:	4b0a      	ldr	r3, [pc, #40]	@ (80025c0 <HAL_Delay+0x44>)
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	461a      	mov	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	4413      	add	r3, r2
 80025a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025a2:	bf00      	nop
 80025a4:	f7ff ffe0 	bl	8002568 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d8f7      	bhi.n	80025a4 <HAL_Delay+0x28>
  {
  }
}
 80025b4:	bf00      	nop
 80025b6:	bf00      	nop
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	20000058 	.word	0x20000058

080025c4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025cc:	2300      	movs	r3, #0
 80025ce:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80025d0:	2300      	movs	r3, #0
 80025d2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80025d4:	2300      	movs	r3, #0
 80025d6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80025d8:	2300      	movs	r3, #0
 80025da:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e0be      	b.n	8002764 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d109      	bne.n	8002608 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f7fd fde0 	bl	80001c8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f000 fb8f 	bl	8002d2c <ADC_ConversionStop_Disable>
 800260e:	4603      	mov	r3, r0
 8002610:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002616:	f003 0310 	and.w	r3, r3, #16
 800261a:	2b00      	cmp	r3, #0
 800261c:	f040 8099 	bne.w	8002752 <HAL_ADC_Init+0x18e>
 8002620:	7dfb      	ldrb	r3, [r7, #23]
 8002622:	2b00      	cmp	r3, #0
 8002624:	f040 8095 	bne.w	8002752 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800262c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002630:	f023 0302 	bic.w	r3, r3, #2
 8002634:	f043 0202 	orr.w	r2, r3, #2
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002644:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	7b1b      	ldrb	r3, [r3, #12]
 800264a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800264c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800264e:	68ba      	ldr	r2, [r7, #8]
 8002650:	4313      	orrs	r3, r2
 8002652:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800265c:	d003      	beq.n	8002666 <HAL_ADC_Init+0xa2>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d102      	bne.n	800266c <HAL_ADC_Init+0xa8>
 8002666:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800266a:	e000      	b.n	800266e <HAL_ADC_Init+0xaa>
 800266c:	2300      	movs	r3, #0
 800266e:	693a      	ldr	r2, [r7, #16]
 8002670:	4313      	orrs	r3, r2
 8002672:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	7d1b      	ldrb	r3, [r3, #20]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d119      	bne.n	80026b0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	7b1b      	ldrb	r3, [r3, #12]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d109      	bne.n	8002698 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	3b01      	subs	r3, #1
 800268a:	035a      	lsls	r2, r3, #13
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	4313      	orrs	r3, r2
 8002690:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002694:	613b      	str	r3, [r7, #16]
 8002696:	e00b      	b.n	80026b0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800269c:	f043 0220 	orr.w	r2, r3, #32
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026a8:	f043 0201 	orr.w	r2, r3, #1
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	430a      	orrs	r2, r1
 80026c2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	689a      	ldr	r2, [r3, #8]
 80026ca:	4b28      	ldr	r3, [pc, #160]	@ (800276c <HAL_ADC_Init+0x1a8>)
 80026cc:	4013      	ands	r3, r2
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	6812      	ldr	r2, [r2, #0]
 80026d2:	68b9      	ldr	r1, [r7, #8]
 80026d4:	430b      	orrs	r3, r1
 80026d6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026e0:	d003      	beq.n	80026ea <HAL_ADC_Init+0x126>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d104      	bne.n	80026f4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	3b01      	subs	r3, #1
 80026f0:	051b      	lsls	r3, r3, #20
 80026f2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026fa:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68fa      	ldr	r2, [r7, #12]
 8002704:	430a      	orrs	r2, r1
 8002706:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	689a      	ldr	r2, [r3, #8]
 800270e:	4b18      	ldr	r3, [pc, #96]	@ (8002770 <HAL_ADC_Init+0x1ac>)
 8002710:	4013      	ands	r3, r2
 8002712:	68ba      	ldr	r2, [r7, #8]
 8002714:	429a      	cmp	r2, r3
 8002716:	d10b      	bne.n	8002730 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002722:	f023 0303 	bic.w	r3, r3, #3
 8002726:	f043 0201 	orr.w	r2, r3, #1
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800272e:	e018      	b.n	8002762 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002734:	f023 0312 	bic.w	r3, r3, #18
 8002738:	f043 0210 	orr.w	r2, r3, #16
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002744:	f043 0201 	orr.w	r2, r3, #1
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002750:	e007      	b.n	8002762 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002756:	f043 0210 	orr.w	r2, r3, #16
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002762:	7dfb      	ldrb	r3, [r7, #23]
}
 8002764:	4618      	mov	r0, r3
 8002766:	3718      	adds	r7, #24
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	ffe1f7fd 	.word	0xffe1f7fd
 8002770:	ff1f0efe 	.word	0xff1f0efe

08002774 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800277c:	2300      	movs	r3, #0
 800277e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002786:	2b01      	cmp	r3, #1
 8002788:	d101      	bne.n	800278e <HAL_ADC_Start_IT+0x1a>
 800278a:	2302      	movs	r3, #2
 800278c:	e0a0      	b.n	80028d0 <HAL_ADC_Start_IT+0x15c>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2201      	movs	r2, #1
 8002792:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f000 fa6e 	bl	8002c78 <ADC_Enable>
 800279c:	4603      	mov	r3, r0
 800279e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80027a0:	7bfb      	ldrb	r3, [r7, #15]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	f040 808f 	bne.w	80028c6 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ac:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80027b0:	f023 0301 	bic.w	r3, r3, #1
 80027b4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a45      	ldr	r2, [pc, #276]	@ (80028d8 <HAL_ADC_Start_IT+0x164>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d105      	bne.n	80027d2 <HAL_ADC_Start_IT+0x5e>
 80027c6:	4b45      	ldr	r3, [pc, #276]	@ (80028dc <HAL_ADC_Start_IT+0x168>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d115      	bne.n	80027fe <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027d6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d026      	beq.n	800283a <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027f0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80027f4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80027fc:	e01d      	b.n	800283a <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002802:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a33      	ldr	r2, [pc, #204]	@ (80028dc <HAL_ADC_Start_IT+0x168>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d004      	beq.n	800281e <HAL_ADC_Start_IT+0xaa>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a2f      	ldr	r2, [pc, #188]	@ (80028d8 <HAL_ADC_Start_IT+0x164>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d10d      	bne.n	800283a <HAL_ADC_Start_IT+0xc6>
 800281e:	4b2f      	ldr	r3, [pc, #188]	@ (80028dc <HAL_ADC_Start_IT+0x168>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002826:	2b00      	cmp	r3, #0
 8002828:	d007      	beq.n	800283a <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800282e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002832:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800283e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d006      	beq.n	8002854 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800284a:	f023 0206 	bic.w	r2, r3, #6
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002852:	e002      	b.n	800285a <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f06f 0202 	mvn.w	r2, #2
 800286a:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	685a      	ldr	r2, [r3, #4]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f042 0220 	orr.w	r2, r2, #32
 800287a:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002886:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800288a:	d113      	bne.n	80028b4 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002890:	4a11      	ldr	r2, [pc, #68]	@ (80028d8 <HAL_ADC_Start_IT+0x164>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d105      	bne.n	80028a2 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002896:	4b11      	ldr	r3, [pc, #68]	@ (80028dc <HAL_ADC_Start_IT+0x168>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d108      	bne.n	80028b4 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80028b0:	609a      	str	r2, [r3, #8]
 80028b2:	e00c      	b.n	80028ce <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	689a      	ldr	r2, [r3, #8]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80028c2:	609a      	str	r2, [r3, #8]
 80028c4:	e003      	b.n	80028ce <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 80028ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3710      	adds	r7, #16
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	40012800 	.word	0x40012800
 80028dc:	40012400 	.word	0x40012400

080028e0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bc80      	pop	{r7}
 80028f6:	4770      	bx	lr

080028f8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	f003 0320 	and.w	r3, r3, #32
 8002916:	2b00      	cmp	r3, #0
 8002918:	d03e      	beq.n	8002998 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d039      	beq.n	8002998 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002928:	f003 0310 	and.w	r3, r3, #16
 800292c:	2b00      	cmp	r3, #0
 800292e:	d105      	bne.n	800293c <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002934:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002946:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800294a:	d11d      	bne.n	8002988 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002950:	2b00      	cmp	r3, #0
 8002952:	d119      	bne.n	8002988 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	685a      	ldr	r2, [r3, #4]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f022 0220 	bic.w	r2, r2, #32
 8002962:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002968:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002974:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d105      	bne.n	8002988 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002980:	f043 0201 	orr.w	r2, r3, #1
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f7ff fb0f 	bl	8001fac <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f06f 0212 	mvn.w	r2, #18
 8002996:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d04d      	beq.n	8002a3e <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f003 0304 	and.w	r3, r3, #4
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d048      	beq.n	8002a3e <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029b0:	f003 0310 	and.w	r3, r3, #16
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d105      	bne.n	80029c4 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029bc:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80029ce:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 80029d2:	d012      	beq.n	80029fa <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d125      	bne.n	8002a2e <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80029ec:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80029f0:	d11d      	bne.n	8002a2e <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d119      	bne.n	8002a2e <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	685a      	ldr	r2, [r3, #4]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a08:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a0e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d105      	bne.n	8002a2e <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a26:	f043 0201 	orr.w	r2, r3, #1
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 f9bd 	bl	8002dae <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f06f 020c 	mvn.w	r2, #12
 8002a3c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d012      	beq.n	8002a6e <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00d      	beq.n	8002a6e <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a56:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 f809 	bl	8002a76 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f06f 0201 	mvn.w	r2, #1
 8002a6c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002a6e:	bf00      	nop
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002a76:	b480      	push	{r7}
 8002a78:	b083      	sub	sp, #12
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002a7e:	bf00      	nop
 8002a80:	370c      	adds	r7, #12
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bc80      	pop	{r7}
 8002a86:	4770      	bx	lr

08002a88 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a92:	2300      	movs	r3, #0
 8002a94:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002a96:	2300      	movs	r3, #0
 8002a98:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d101      	bne.n	8002aa8 <HAL_ADC_ConfigChannel+0x20>
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	e0dc      	b.n	8002c62 <HAL_ADC_ConfigChannel+0x1da>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	2b06      	cmp	r3, #6
 8002ab6:	d81c      	bhi.n	8002af2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685a      	ldr	r2, [r3, #4]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	4413      	add	r3, r2
 8002ac8:	3b05      	subs	r3, #5
 8002aca:	221f      	movs	r2, #31
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	4019      	ands	r1, r3
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	6818      	ldr	r0, [r3, #0]
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	4613      	mov	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4413      	add	r3, r2
 8002ae2:	3b05      	subs	r3, #5
 8002ae4:	fa00 f203 	lsl.w	r2, r0, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	430a      	orrs	r2, r1
 8002aee:	635a      	str	r2, [r3, #52]	@ 0x34
 8002af0:	e03c      	b.n	8002b6c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	2b0c      	cmp	r3, #12
 8002af8:	d81c      	bhi.n	8002b34 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685a      	ldr	r2, [r3, #4]
 8002b04:	4613      	mov	r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	4413      	add	r3, r2
 8002b0a:	3b23      	subs	r3, #35	@ 0x23
 8002b0c:	221f      	movs	r2, #31
 8002b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b12:	43db      	mvns	r3, r3
 8002b14:	4019      	ands	r1, r3
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	6818      	ldr	r0, [r3, #0]
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	685a      	ldr	r2, [r3, #4]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	4413      	add	r3, r2
 8002b24:	3b23      	subs	r3, #35	@ 0x23
 8002b26:	fa00 f203 	lsl.w	r2, r0, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b32:	e01b      	b.n	8002b6c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685a      	ldr	r2, [r3, #4]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	4413      	add	r3, r2
 8002b44:	3b41      	subs	r3, #65	@ 0x41
 8002b46:	221f      	movs	r2, #31
 8002b48:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	4019      	ands	r1, r3
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	6818      	ldr	r0, [r3, #0]
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685a      	ldr	r2, [r3, #4]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	4413      	add	r3, r2
 8002b5e:	3b41      	subs	r3, #65	@ 0x41
 8002b60:	fa00 f203 	lsl.w	r2, r0, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2b09      	cmp	r3, #9
 8002b72:	d91c      	bls.n	8002bae <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68d9      	ldr	r1, [r3, #12]
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	4413      	add	r3, r2
 8002b84:	3b1e      	subs	r3, #30
 8002b86:	2207      	movs	r2, #7
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	4019      	ands	r1, r3
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	6898      	ldr	r0, [r3, #8]
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	4413      	add	r3, r2
 8002b9e:	3b1e      	subs	r3, #30
 8002ba0:	fa00 f203 	lsl.w	r2, r0, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	60da      	str	r2, [r3, #12]
 8002bac:	e019      	b.n	8002be2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	6919      	ldr	r1, [r3, #16]
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	4413      	add	r3, r2
 8002bbe:	2207      	movs	r2, #7
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	43db      	mvns	r3, r3
 8002bc6:	4019      	ands	r1, r3
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	6898      	ldr	r0, [r3, #8]
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	4413      	add	r3, r2
 8002bd6:	fa00 f203 	lsl.w	r2, r0, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	430a      	orrs	r2, r1
 8002be0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2b10      	cmp	r3, #16
 8002be8:	d003      	beq.n	8002bf2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002bee:	2b11      	cmp	r3, #17
 8002bf0:	d132      	bne.n	8002c58 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a1d      	ldr	r2, [pc, #116]	@ (8002c6c <HAL_ADC_ConfigChannel+0x1e4>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d125      	bne.n	8002c48 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d126      	bne.n	8002c58 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002c18:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2b10      	cmp	r3, #16
 8002c20:	d11a      	bne.n	8002c58 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c22:	4b13      	ldr	r3, [pc, #76]	@ (8002c70 <HAL_ADC_ConfigChannel+0x1e8>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a13      	ldr	r2, [pc, #76]	@ (8002c74 <HAL_ADC_ConfigChannel+0x1ec>)
 8002c28:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2c:	0c9a      	lsrs	r2, r3, #18
 8002c2e:	4613      	mov	r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	4413      	add	r3, r2
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c38:	e002      	b.n	8002c40 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	3b01      	subs	r3, #1
 8002c3e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1f9      	bne.n	8002c3a <HAL_ADC_ConfigChannel+0x1b2>
 8002c46:	e007      	b.n	8002c58 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c4c:	f043 0220 	orr.w	r2, r3, #32
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3714      	adds	r7, #20
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bc80      	pop	{r7}
 8002c6a:	4770      	bx	lr
 8002c6c:	40012400 	.word	0x40012400
 8002c70:	20000050 	.word	0x20000050
 8002c74:	431bde83 	.word	0x431bde83

08002c78 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c80:	2300      	movs	r3, #0
 8002c82:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002c84:	2300      	movs	r3, #0
 8002c86:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d040      	beq.n	8002d18 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f042 0201 	orr.w	r2, r2, #1
 8002ca4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ca6:	4b1f      	ldr	r3, [pc, #124]	@ (8002d24 <ADC_Enable+0xac>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a1f      	ldr	r2, [pc, #124]	@ (8002d28 <ADC_Enable+0xb0>)
 8002cac:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb0:	0c9b      	lsrs	r3, r3, #18
 8002cb2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002cb4:	e002      	b.n	8002cbc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	3b01      	subs	r3, #1
 8002cba:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d1f9      	bne.n	8002cb6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002cc2:	f7ff fc51 	bl	8002568 <HAL_GetTick>
 8002cc6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002cc8:	e01f      	b.n	8002d0a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002cca:	f7ff fc4d 	bl	8002568 <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d918      	bls.n	8002d0a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d011      	beq.n	8002d0a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cea:	f043 0210 	orr.w	r2, r3, #16
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cf6:	f043 0201 	orr.w	r2, r3, #1
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e007      	b.n	8002d1a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f003 0301 	and.w	r3, r3, #1
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d1d8      	bne.n	8002cca <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	20000050 	.word	0x20000050
 8002d28:	431bde83 	.word	0x431bde83

08002d2c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d34:	2300      	movs	r3, #0
 8002d36:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d12e      	bne.n	8002da4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	689a      	ldr	r2, [r3, #8]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f022 0201 	bic.w	r2, r2, #1
 8002d54:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d56:	f7ff fc07 	bl	8002568 <HAL_GetTick>
 8002d5a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002d5c:	e01b      	b.n	8002d96 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002d5e:	f7ff fc03 	bl	8002568 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d914      	bls.n	8002d96 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d10d      	bne.n	8002d96 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d7e:	f043 0210 	orr.w	r2, r3, #16
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d8a:	f043 0201 	orr.w	r2, r3, #1
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e007      	b.n	8002da6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d0dc      	beq.n	8002d5e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3710      	adds	r7, #16
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002dae:	b480      	push	{r7}
 8002db0:	b083      	sub	sp, #12
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002db6:	bf00      	nop
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bc80      	pop	{r7}
 8002dbe:	4770      	bx	lr

08002dc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f003 0307 	and.w	r3, r3, #7
 8002dce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8002e04 <__NVIC_SetPriorityGrouping+0x44>)
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dd6:	68ba      	ldr	r2, [r7, #8]
 8002dd8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ddc:	4013      	ands	r3, r2
 8002dde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002de8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002dec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002df0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002df2:	4a04      	ldr	r2, [pc, #16]	@ (8002e04 <__NVIC_SetPriorityGrouping+0x44>)
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	60d3      	str	r3, [r2, #12]
}
 8002df8:	bf00      	nop
 8002dfa:	3714      	adds	r7, #20
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bc80      	pop	{r7}
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	e000ed00 	.word	0xe000ed00

08002e08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e0c:	4b04      	ldr	r3, [pc, #16]	@ (8002e20 <__NVIC_GetPriorityGrouping+0x18>)
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	0a1b      	lsrs	r3, r3, #8
 8002e12:	f003 0307 	and.w	r3, r3, #7
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bc80      	pop	{r7}
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	e000ed00 	.word	0xe000ed00

08002e24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	db0b      	blt.n	8002e4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e36:	79fb      	ldrb	r3, [r7, #7]
 8002e38:	f003 021f 	and.w	r2, r3, #31
 8002e3c:	4906      	ldr	r1, [pc, #24]	@ (8002e58 <__NVIC_EnableIRQ+0x34>)
 8002e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e42:	095b      	lsrs	r3, r3, #5
 8002e44:	2001      	movs	r0, #1
 8002e46:	fa00 f202 	lsl.w	r2, r0, r2
 8002e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e4e:	bf00      	nop
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bc80      	pop	{r7}
 8002e56:	4770      	bx	lr
 8002e58:	e000e100 	.word	0xe000e100

08002e5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	4603      	mov	r3, r0
 8002e64:	6039      	str	r1, [r7, #0]
 8002e66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	db0a      	blt.n	8002e86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	b2da      	uxtb	r2, r3
 8002e74:	490c      	ldr	r1, [pc, #48]	@ (8002ea8 <__NVIC_SetPriority+0x4c>)
 8002e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e7a:	0112      	lsls	r2, r2, #4
 8002e7c:	b2d2      	uxtb	r2, r2
 8002e7e:	440b      	add	r3, r1
 8002e80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e84:	e00a      	b.n	8002e9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	b2da      	uxtb	r2, r3
 8002e8a:	4908      	ldr	r1, [pc, #32]	@ (8002eac <__NVIC_SetPriority+0x50>)
 8002e8c:	79fb      	ldrb	r3, [r7, #7]
 8002e8e:	f003 030f 	and.w	r3, r3, #15
 8002e92:	3b04      	subs	r3, #4
 8002e94:	0112      	lsls	r2, r2, #4
 8002e96:	b2d2      	uxtb	r2, r2
 8002e98:	440b      	add	r3, r1
 8002e9a:	761a      	strb	r2, [r3, #24]
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bc80      	pop	{r7}
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	e000e100 	.word	0xe000e100
 8002eac:	e000ed00 	.word	0xe000ed00

08002eb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b089      	sub	sp, #36	@ 0x24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f003 0307 	and.w	r3, r3, #7
 8002ec2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	f1c3 0307 	rsb	r3, r3, #7
 8002eca:	2b04      	cmp	r3, #4
 8002ecc:	bf28      	it	cs
 8002ece:	2304      	movcs	r3, #4
 8002ed0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	3304      	adds	r3, #4
 8002ed6:	2b06      	cmp	r3, #6
 8002ed8:	d902      	bls.n	8002ee0 <NVIC_EncodePriority+0x30>
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	3b03      	subs	r3, #3
 8002ede:	e000      	b.n	8002ee2 <NVIC_EncodePriority+0x32>
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	fa02 f303 	lsl.w	r3, r2, r3
 8002eee:	43da      	mvns	r2, r3
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	401a      	ands	r2, r3
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	fa01 f303 	lsl.w	r3, r1, r3
 8002f02:	43d9      	mvns	r1, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f08:	4313      	orrs	r3, r2
         );
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3724      	adds	r7, #36	@ 0x24
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bc80      	pop	{r7}
 8002f12:	4770      	bx	lr

08002f14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f24:	d301      	bcc.n	8002f2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f26:	2301      	movs	r3, #1
 8002f28:	e00f      	b.n	8002f4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f2a:	4a0a      	ldr	r2, [pc, #40]	@ (8002f54 <SysTick_Config+0x40>)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f32:	210f      	movs	r1, #15
 8002f34:	f04f 30ff 	mov.w	r0, #4294967295
 8002f38:	f7ff ff90 	bl	8002e5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f3c:	4b05      	ldr	r3, [pc, #20]	@ (8002f54 <SysTick_Config+0x40>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f42:	4b04      	ldr	r3, [pc, #16]	@ (8002f54 <SysTick_Config+0x40>)
 8002f44:	2207      	movs	r2, #7
 8002f46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	e000e010 	.word	0xe000e010

08002f58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f7ff ff2d 	bl	8002dc0 <__NVIC_SetPriorityGrouping>
}
 8002f66:	bf00      	nop
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b086      	sub	sp, #24
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	4603      	mov	r3, r0
 8002f76:	60b9      	str	r1, [r7, #8]
 8002f78:	607a      	str	r2, [r7, #4]
 8002f7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f80:	f7ff ff42 	bl	8002e08 <__NVIC_GetPriorityGrouping>
 8002f84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	68b9      	ldr	r1, [r7, #8]
 8002f8a:	6978      	ldr	r0, [r7, #20]
 8002f8c:	f7ff ff90 	bl	8002eb0 <NVIC_EncodePriority>
 8002f90:	4602      	mov	r2, r0
 8002f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f96:	4611      	mov	r1, r2
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7ff ff5f 	bl	8002e5c <__NVIC_SetPriority>
}
 8002f9e:	bf00      	nop
 8002fa0:	3718      	adds	r7, #24
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	b082      	sub	sp, #8
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	4603      	mov	r3, r0
 8002fae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7ff ff35 	bl	8002e24 <__NVIC_EnableIRQ>
}
 8002fba:	bf00      	nop
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b082      	sub	sp, #8
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f7ff ffa2 	bl	8002f14 <SysTick_Config>
 8002fd0:	4603      	mov	r3, r0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3708      	adds	r7, #8
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	b085      	sub	sp, #20
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d008      	beq.n	8003004 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2204      	movs	r2, #4
 8002ff6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e020      	b.n	8003046 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f022 020e 	bic.w	r2, r2, #14
 8003012:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f022 0201 	bic.w	r2, r2, #1
 8003022:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800302c:	2101      	movs	r1, #1
 800302e:	fa01 f202 	lsl.w	r2, r1, r2
 8003032:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003044:	7bfb      	ldrb	r3, [r7, #15]
}
 8003046:	4618      	mov	r0, r3
 8003048:	3714      	adds	r7, #20
 800304a:	46bd      	mov	sp, r7
 800304c:	bc80      	pop	{r7}
 800304e:	4770      	bx	lr

08003050 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003058:	2300      	movs	r3, #0
 800305a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003062:	b2db      	uxtb	r3, r3
 8003064:	2b02      	cmp	r3, #2
 8003066:	d005      	beq.n	8003074 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2204      	movs	r2, #4
 800306c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	73fb      	strb	r3, [r7, #15]
 8003072:	e051      	b.n	8003118 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f022 020e 	bic.w	r2, r2, #14
 8003082:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f022 0201 	bic.w	r2, r2, #1
 8003092:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a22      	ldr	r2, [pc, #136]	@ (8003124 <HAL_DMA_Abort_IT+0xd4>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d029      	beq.n	80030f2 <HAL_DMA_Abort_IT+0xa2>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a21      	ldr	r2, [pc, #132]	@ (8003128 <HAL_DMA_Abort_IT+0xd8>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d022      	beq.n	80030ee <HAL_DMA_Abort_IT+0x9e>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a1f      	ldr	r2, [pc, #124]	@ (800312c <HAL_DMA_Abort_IT+0xdc>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d01a      	beq.n	80030e8 <HAL_DMA_Abort_IT+0x98>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a1e      	ldr	r2, [pc, #120]	@ (8003130 <HAL_DMA_Abort_IT+0xe0>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d012      	beq.n	80030e2 <HAL_DMA_Abort_IT+0x92>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a1c      	ldr	r2, [pc, #112]	@ (8003134 <HAL_DMA_Abort_IT+0xe4>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d00a      	beq.n	80030dc <HAL_DMA_Abort_IT+0x8c>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a1b      	ldr	r2, [pc, #108]	@ (8003138 <HAL_DMA_Abort_IT+0xe8>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d102      	bne.n	80030d6 <HAL_DMA_Abort_IT+0x86>
 80030d0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80030d4:	e00e      	b.n	80030f4 <HAL_DMA_Abort_IT+0xa4>
 80030d6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80030da:	e00b      	b.n	80030f4 <HAL_DMA_Abort_IT+0xa4>
 80030dc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80030e0:	e008      	b.n	80030f4 <HAL_DMA_Abort_IT+0xa4>
 80030e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80030e6:	e005      	b.n	80030f4 <HAL_DMA_Abort_IT+0xa4>
 80030e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80030ec:	e002      	b.n	80030f4 <HAL_DMA_Abort_IT+0xa4>
 80030ee:	2310      	movs	r3, #16
 80030f0:	e000      	b.n	80030f4 <HAL_DMA_Abort_IT+0xa4>
 80030f2:	2301      	movs	r3, #1
 80030f4:	4a11      	ldr	r2, [pc, #68]	@ (800313c <HAL_DMA_Abort_IT+0xec>)
 80030f6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800310c:	2b00      	cmp	r3, #0
 800310e:	d003      	beq.n	8003118 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	4798      	blx	r3
    } 
  }
  return status;
 8003118:	7bfb      	ldrb	r3, [r7, #15]
}
 800311a:	4618      	mov	r0, r3
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	40020008 	.word	0x40020008
 8003128:	4002001c 	.word	0x4002001c
 800312c:	40020030 	.word	0x40020030
 8003130:	40020044 	.word	0x40020044
 8003134:	40020058 	.word	0x40020058
 8003138:	4002006c 	.word	0x4002006c
 800313c:	40020000 	.word	0x40020000

08003140 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003140:	b480      	push	{r7}
 8003142:	b08b      	sub	sp, #44	@ 0x2c
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800314a:	2300      	movs	r3, #0
 800314c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800314e:	2300      	movs	r3, #0
 8003150:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003152:	e169      	b.n	8003428 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003154:	2201      	movs	r2, #1
 8003156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003158:	fa02 f303 	lsl.w	r3, r2, r3
 800315c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	69fa      	ldr	r2, [r7, #28]
 8003164:	4013      	ands	r3, r2
 8003166:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	429a      	cmp	r2, r3
 800316e:	f040 8158 	bne.w	8003422 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	4a9a      	ldr	r2, [pc, #616]	@ (80033e0 <HAL_GPIO_Init+0x2a0>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d05e      	beq.n	800323a <HAL_GPIO_Init+0xfa>
 800317c:	4a98      	ldr	r2, [pc, #608]	@ (80033e0 <HAL_GPIO_Init+0x2a0>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d875      	bhi.n	800326e <HAL_GPIO_Init+0x12e>
 8003182:	4a98      	ldr	r2, [pc, #608]	@ (80033e4 <HAL_GPIO_Init+0x2a4>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d058      	beq.n	800323a <HAL_GPIO_Init+0xfa>
 8003188:	4a96      	ldr	r2, [pc, #600]	@ (80033e4 <HAL_GPIO_Init+0x2a4>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d86f      	bhi.n	800326e <HAL_GPIO_Init+0x12e>
 800318e:	4a96      	ldr	r2, [pc, #600]	@ (80033e8 <HAL_GPIO_Init+0x2a8>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d052      	beq.n	800323a <HAL_GPIO_Init+0xfa>
 8003194:	4a94      	ldr	r2, [pc, #592]	@ (80033e8 <HAL_GPIO_Init+0x2a8>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d869      	bhi.n	800326e <HAL_GPIO_Init+0x12e>
 800319a:	4a94      	ldr	r2, [pc, #592]	@ (80033ec <HAL_GPIO_Init+0x2ac>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d04c      	beq.n	800323a <HAL_GPIO_Init+0xfa>
 80031a0:	4a92      	ldr	r2, [pc, #584]	@ (80033ec <HAL_GPIO_Init+0x2ac>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d863      	bhi.n	800326e <HAL_GPIO_Init+0x12e>
 80031a6:	4a92      	ldr	r2, [pc, #584]	@ (80033f0 <HAL_GPIO_Init+0x2b0>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d046      	beq.n	800323a <HAL_GPIO_Init+0xfa>
 80031ac:	4a90      	ldr	r2, [pc, #576]	@ (80033f0 <HAL_GPIO_Init+0x2b0>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d85d      	bhi.n	800326e <HAL_GPIO_Init+0x12e>
 80031b2:	2b12      	cmp	r3, #18
 80031b4:	d82a      	bhi.n	800320c <HAL_GPIO_Init+0xcc>
 80031b6:	2b12      	cmp	r3, #18
 80031b8:	d859      	bhi.n	800326e <HAL_GPIO_Init+0x12e>
 80031ba:	a201      	add	r2, pc, #4	@ (adr r2, 80031c0 <HAL_GPIO_Init+0x80>)
 80031bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c0:	0800323b 	.word	0x0800323b
 80031c4:	08003215 	.word	0x08003215
 80031c8:	08003227 	.word	0x08003227
 80031cc:	08003269 	.word	0x08003269
 80031d0:	0800326f 	.word	0x0800326f
 80031d4:	0800326f 	.word	0x0800326f
 80031d8:	0800326f 	.word	0x0800326f
 80031dc:	0800326f 	.word	0x0800326f
 80031e0:	0800326f 	.word	0x0800326f
 80031e4:	0800326f 	.word	0x0800326f
 80031e8:	0800326f 	.word	0x0800326f
 80031ec:	0800326f 	.word	0x0800326f
 80031f0:	0800326f 	.word	0x0800326f
 80031f4:	0800326f 	.word	0x0800326f
 80031f8:	0800326f 	.word	0x0800326f
 80031fc:	0800326f 	.word	0x0800326f
 8003200:	0800326f 	.word	0x0800326f
 8003204:	0800321d 	.word	0x0800321d
 8003208:	08003231 	.word	0x08003231
 800320c:	4a79      	ldr	r2, [pc, #484]	@ (80033f4 <HAL_GPIO_Init+0x2b4>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d013      	beq.n	800323a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003212:	e02c      	b.n	800326e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	623b      	str	r3, [r7, #32]
          break;
 800321a:	e029      	b.n	8003270 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	3304      	adds	r3, #4
 8003222:	623b      	str	r3, [r7, #32]
          break;
 8003224:	e024      	b.n	8003270 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	3308      	adds	r3, #8
 800322c:	623b      	str	r3, [r7, #32]
          break;
 800322e:	e01f      	b.n	8003270 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	330c      	adds	r3, #12
 8003236:	623b      	str	r3, [r7, #32]
          break;
 8003238:	e01a      	b.n	8003270 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d102      	bne.n	8003248 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003242:	2304      	movs	r3, #4
 8003244:	623b      	str	r3, [r7, #32]
          break;
 8003246:	e013      	b.n	8003270 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	2b01      	cmp	r3, #1
 800324e:	d105      	bne.n	800325c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003250:	2308      	movs	r3, #8
 8003252:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	69fa      	ldr	r2, [r7, #28]
 8003258:	611a      	str	r2, [r3, #16]
          break;
 800325a:	e009      	b.n	8003270 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800325c:	2308      	movs	r3, #8
 800325e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	69fa      	ldr	r2, [r7, #28]
 8003264:	615a      	str	r2, [r3, #20]
          break;
 8003266:	e003      	b.n	8003270 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003268:	2300      	movs	r3, #0
 800326a:	623b      	str	r3, [r7, #32]
          break;
 800326c:	e000      	b.n	8003270 <HAL_GPIO_Init+0x130>
          break;
 800326e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	2bff      	cmp	r3, #255	@ 0xff
 8003274:	d801      	bhi.n	800327a <HAL_GPIO_Init+0x13a>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	e001      	b.n	800327e <HAL_GPIO_Init+0x13e>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	3304      	adds	r3, #4
 800327e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	2bff      	cmp	r3, #255	@ 0xff
 8003284:	d802      	bhi.n	800328c <HAL_GPIO_Init+0x14c>
 8003286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	e002      	b.n	8003292 <HAL_GPIO_Init+0x152>
 800328c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800328e:	3b08      	subs	r3, #8
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	210f      	movs	r1, #15
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	fa01 f303 	lsl.w	r3, r1, r3
 80032a0:	43db      	mvns	r3, r3
 80032a2:	401a      	ands	r2, r3
 80032a4:	6a39      	ldr	r1, [r7, #32]
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	fa01 f303 	lsl.w	r3, r1, r3
 80032ac:	431a      	orrs	r2, r3
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f000 80b1 	beq.w	8003422 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80032c0:	4b4d      	ldr	r3, [pc, #308]	@ (80033f8 <HAL_GPIO_Init+0x2b8>)
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	4a4c      	ldr	r2, [pc, #304]	@ (80033f8 <HAL_GPIO_Init+0x2b8>)
 80032c6:	f043 0301 	orr.w	r3, r3, #1
 80032ca:	6193      	str	r3, [r2, #24]
 80032cc:	4b4a      	ldr	r3, [pc, #296]	@ (80033f8 <HAL_GPIO_Init+0x2b8>)
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	f003 0301 	and.w	r3, r3, #1
 80032d4:	60bb      	str	r3, [r7, #8]
 80032d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80032d8:	4a48      	ldr	r2, [pc, #288]	@ (80033fc <HAL_GPIO_Init+0x2bc>)
 80032da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032dc:	089b      	lsrs	r3, r3, #2
 80032de:	3302      	adds	r3, #2
 80032e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80032e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e8:	f003 0303 	and.w	r3, r3, #3
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	220f      	movs	r2, #15
 80032f0:	fa02 f303 	lsl.w	r3, r2, r3
 80032f4:	43db      	mvns	r3, r3
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	4013      	ands	r3, r2
 80032fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a40      	ldr	r2, [pc, #256]	@ (8003400 <HAL_GPIO_Init+0x2c0>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d013      	beq.n	800332c <HAL_GPIO_Init+0x1ec>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4a3f      	ldr	r2, [pc, #252]	@ (8003404 <HAL_GPIO_Init+0x2c4>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d00d      	beq.n	8003328 <HAL_GPIO_Init+0x1e8>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a3e      	ldr	r2, [pc, #248]	@ (8003408 <HAL_GPIO_Init+0x2c8>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d007      	beq.n	8003324 <HAL_GPIO_Init+0x1e4>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4a3d      	ldr	r2, [pc, #244]	@ (800340c <HAL_GPIO_Init+0x2cc>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d101      	bne.n	8003320 <HAL_GPIO_Init+0x1e0>
 800331c:	2303      	movs	r3, #3
 800331e:	e006      	b.n	800332e <HAL_GPIO_Init+0x1ee>
 8003320:	2304      	movs	r3, #4
 8003322:	e004      	b.n	800332e <HAL_GPIO_Init+0x1ee>
 8003324:	2302      	movs	r3, #2
 8003326:	e002      	b.n	800332e <HAL_GPIO_Init+0x1ee>
 8003328:	2301      	movs	r3, #1
 800332a:	e000      	b.n	800332e <HAL_GPIO_Init+0x1ee>
 800332c:	2300      	movs	r3, #0
 800332e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003330:	f002 0203 	and.w	r2, r2, #3
 8003334:	0092      	lsls	r2, r2, #2
 8003336:	4093      	lsls	r3, r2
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	4313      	orrs	r3, r2
 800333c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800333e:	492f      	ldr	r1, [pc, #188]	@ (80033fc <HAL_GPIO_Init+0x2bc>)
 8003340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003342:	089b      	lsrs	r3, r3, #2
 8003344:	3302      	adds	r3, #2
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d006      	beq.n	8003366 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003358:	4b2d      	ldr	r3, [pc, #180]	@ (8003410 <HAL_GPIO_Init+0x2d0>)
 800335a:	689a      	ldr	r2, [r3, #8]
 800335c:	492c      	ldr	r1, [pc, #176]	@ (8003410 <HAL_GPIO_Init+0x2d0>)
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	4313      	orrs	r3, r2
 8003362:	608b      	str	r3, [r1, #8]
 8003364:	e006      	b.n	8003374 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003366:	4b2a      	ldr	r3, [pc, #168]	@ (8003410 <HAL_GPIO_Init+0x2d0>)
 8003368:	689a      	ldr	r2, [r3, #8]
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	43db      	mvns	r3, r3
 800336e:	4928      	ldr	r1, [pc, #160]	@ (8003410 <HAL_GPIO_Init+0x2d0>)
 8003370:	4013      	ands	r3, r2
 8003372:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d006      	beq.n	800338e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003380:	4b23      	ldr	r3, [pc, #140]	@ (8003410 <HAL_GPIO_Init+0x2d0>)
 8003382:	68da      	ldr	r2, [r3, #12]
 8003384:	4922      	ldr	r1, [pc, #136]	@ (8003410 <HAL_GPIO_Init+0x2d0>)
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	4313      	orrs	r3, r2
 800338a:	60cb      	str	r3, [r1, #12]
 800338c:	e006      	b.n	800339c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800338e:	4b20      	ldr	r3, [pc, #128]	@ (8003410 <HAL_GPIO_Init+0x2d0>)
 8003390:	68da      	ldr	r2, [r3, #12]
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	43db      	mvns	r3, r3
 8003396:	491e      	ldr	r1, [pc, #120]	@ (8003410 <HAL_GPIO_Init+0x2d0>)
 8003398:	4013      	ands	r3, r2
 800339a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d006      	beq.n	80033b6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80033a8:	4b19      	ldr	r3, [pc, #100]	@ (8003410 <HAL_GPIO_Init+0x2d0>)
 80033aa:	685a      	ldr	r2, [r3, #4]
 80033ac:	4918      	ldr	r1, [pc, #96]	@ (8003410 <HAL_GPIO_Init+0x2d0>)
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	604b      	str	r3, [r1, #4]
 80033b4:	e006      	b.n	80033c4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80033b6:	4b16      	ldr	r3, [pc, #88]	@ (8003410 <HAL_GPIO_Init+0x2d0>)
 80033b8:	685a      	ldr	r2, [r3, #4]
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	43db      	mvns	r3, r3
 80033be:	4914      	ldr	r1, [pc, #80]	@ (8003410 <HAL_GPIO_Init+0x2d0>)
 80033c0:	4013      	ands	r3, r2
 80033c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d021      	beq.n	8003414 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80033d0:	4b0f      	ldr	r3, [pc, #60]	@ (8003410 <HAL_GPIO_Init+0x2d0>)
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	490e      	ldr	r1, [pc, #56]	@ (8003410 <HAL_GPIO_Init+0x2d0>)
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	4313      	orrs	r3, r2
 80033da:	600b      	str	r3, [r1, #0]
 80033dc:	e021      	b.n	8003422 <HAL_GPIO_Init+0x2e2>
 80033de:	bf00      	nop
 80033e0:	10320000 	.word	0x10320000
 80033e4:	10310000 	.word	0x10310000
 80033e8:	10220000 	.word	0x10220000
 80033ec:	10210000 	.word	0x10210000
 80033f0:	10120000 	.word	0x10120000
 80033f4:	10110000 	.word	0x10110000
 80033f8:	40021000 	.word	0x40021000
 80033fc:	40010000 	.word	0x40010000
 8003400:	40010800 	.word	0x40010800
 8003404:	40010c00 	.word	0x40010c00
 8003408:	40011000 	.word	0x40011000
 800340c:	40011400 	.word	0x40011400
 8003410:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003414:	4b0b      	ldr	r3, [pc, #44]	@ (8003444 <HAL_GPIO_Init+0x304>)
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	43db      	mvns	r3, r3
 800341c:	4909      	ldr	r1, [pc, #36]	@ (8003444 <HAL_GPIO_Init+0x304>)
 800341e:	4013      	ands	r3, r2
 8003420:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003424:	3301      	adds	r3, #1
 8003426:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800342e:	fa22 f303 	lsr.w	r3, r2, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	f47f ae8e 	bne.w	8003154 <HAL_GPIO_Init+0x14>
  }
}
 8003438:	bf00      	nop
 800343a:	bf00      	nop
 800343c:	372c      	adds	r7, #44	@ 0x2c
 800343e:	46bd      	mov	sp, r7
 8003440:	bc80      	pop	{r7}
 8003442:	4770      	bx	lr
 8003444:	40010400 	.word	0x40010400

08003448 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003448:	b480      	push	{r7}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	460b      	mov	r3, r1
 8003452:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689a      	ldr	r2, [r3, #8]
 8003458:	887b      	ldrh	r3, [r7, #2]
 800345a:	4013      	ands	r3, r2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d002      	beq.n	8003466 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003460:	2301      	movs	r3, #1
 8003462:	73fb      	strb	r3, [r7, #15]
 8003464:	e001      	b.n	800346a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003466:	2300      	movs	r3, #0
 8003468:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800346a:	7bfb      	ldrb	r3, [r7, #15]
}
 800346c:	4618      	mov	r0, r3
 800346e:	3714      	adds	r7, #20
 8003470:	46bd      	mov	sp, r7
 8003472:	bc80      	pop	{r7}
 8003474:	4770      	bx	lr

08003476 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003476:	b480      	push	{r7}
 8003478:	b083      	sub	sp, #12
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
 800347e:	460b      	mov	r3, r1
 8003480:	807b      	strh	r3, [r7, #2]
 8003482:	4613      	mov	r3, r2
 8003484:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003486:	787b      	ldrb	r3, [r7, #1]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d003      	beq.n	8003494 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800348c:	887a      	ldrh	r2, [r7, #2]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003492:	e003      	b.n	800349c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003494:	887b      	ldrh	r3, [r7, #2]
 8003496:	041a      	lsls	r2, r3, #16
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	611a      	str	r2, [r3, #16]
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bc80      	pop	{r7}
 80034a4:	4770      	bx	lr
	...

080034a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	4603      	mov	r3, r0
 80034b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80034b2:	4b08      	ldr	r3, [pc, #32]	@ (80034d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034b4:	695a      	ldr	r2, [r3, #20]
 80034b6:	88fb      	ldrh	r3, [r7, #6]
 80034b8:	4013      	ands	r3, r2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d006      	beq.n	80034cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80034be:	4a05      	ldr	r2, [pc, #20]	@ (80034d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034c0:	88fb      	ldrh	r3, [r7, #6]
 80034c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80034c4:	88fb      	ldrh	r3, [r7, #6]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7fe fcfe 	bl	8001ec8 <HAL_GPIO_EXTI_Callback>
  }
}
 80034cc:	bf00      	nop
 80034ce:	3708      	adds	r7, #8
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	40010400 	.word	0x40010400

080034d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e12b      	b.n	8003742 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d106      	bne.n	8003504 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f7fc ff78 	bl	80003f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2224      	movs	r2, #36	@ 0x24
 8003508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f022 0201 	bic.w	r2, r2, #1
 800351a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800352a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800353a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800353c:	f001 fbfc 	bl	8004d38 <HAL_RCC_GetPCLK1Freq>
 8003540:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	4a81      	ldr	r2, [pc, #516]	@ (800374c <HAL_I2C_Init+0x274>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d807      	bhi.n	800355c <HAL_I2C_Init+0x84>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	4a80      	ldr	r2, [pc, #512]	@ (8003750 <HAL_I2C_Init+0x278>)
 8003550:	4293      	cmp	r3, r2
 8003552:	bf94      	ite	ls
 8003554:	2301      	movls	r3, #1
 8003556:	2300      	movhi	r3, #0
 8003558:	b2db      	uxtb	r3, r3
 800355a:	e006      	b.n	800356a <HAL_I2C_Init+0x92>
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	4a7d      	ldr	r2, [pc, #500]	@ (8003754 <HAL_I2C_Init+0x27c>)
 8003560:	4293      	cmp	r3, r2
 8003562:	bf94      	ite	ls
 8003564:	2301      	movls	r3, #1
 8003566:	2300      	movhi	r3, #0
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b00      	cmp	r3, #0
 800356c:	d001      	beq.n	8003572 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e0e7      	b.n	8003742 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	4a78      	ldr	r2, [pc, #480]	@ (8003758 <HAL_I2C_Init+0x280>)
 8003576:	fba2 2303 	umull	r2, r3, r2, r3
 800357a:	0c9b      	lsrs	r3, r3, #18
 800357c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68ba      	ldr	r2, [r7, #8]
 800358e:	430a      	orrs	r2, r1
 8003590:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	6a1b      	ldr	r3, [r3, #32]
 8003598:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	4a6a      	ldr	r2, [pc, #424]	@ (800374c <HAL_I2C_Init+0x274>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d802      	bhi.n	80035ac <HAL_I2C_Init+0xd4>
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	3301      	adds	r3, #1
 80035aa:	e009      	b.n	80035c0 <HAL_I2C_Init+0xe8>
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80035b2:	fb02 f303 	mul.w	r3, r2, r3
 80035b6:	4a69      	ldr	r2, [pc, #420]	@ (800375c <HAL_I2C_Init+0x284>)
 80035b8:	fba2 2303 	umull	r2, r3, r2, r3
 80035bc:	099b      	lsrs	r3, r3, #6
 80035be:	3301      	adds	r3, #1
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	6812      	ldr	r2, [r2, #0]
 80035c4:	430b      	orrs	r3, r1
 80035c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	69db      	ldr	r3, [r3, #28]
 80035ce:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80035d2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	495c      	ldr	r1, [pc, #368]	@ (800374c <HAL_I2C_Init+0x274>)
 80035dc:	428b      	cmp	r3, r1
 80035de:	d819      	bhi.n	8003614 <HAL_I2C_Init+0x13c>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	1e59      	subs	r1, r3, #1
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80035ee:	1c59      	adds	r1, r3, #1
 80035f0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80035f4:	400b      	ands	r3, r1
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00a      	beq.n	8003610 <HAL_I2C_Init+0x138>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	1e59      	subs	r1, r3, #1
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	005b      	lsls	r3, r3, #1
 8003604:	fbb1 f3f3 	udiv	r3, r1, r3
 8003608:	3301      	adds	r3, #1
 800360a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800360e:	e051      	b.n	80036b4 <HAL_I2C_Init+0x1dc>
 8003610:	2304      	movs	r3, #4
 8003612:	e04f      	b.n	80036b4 <HAL_I2C_Init+0x1dc>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d111      	bne.n	8003640 <HAL_I2C_Init+0x168>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	1e58      	subs	r0, r3, #1
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6859      	ldr	r1, [r3, #4]
 8003624:	460b      	mov	r3, r1
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	440b      	add	r3, r1
 800362a:	fbb0 f3f3 	udiv	r3, r0, r3
 800362e:	3301      	adds	r3, #1
 8003630:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003634:	2b00      	cmp	r3, #0
 8003636:	bf0c      	ite	eq
 8003638:	2301      	moveq	r3, #1
 800363a:	2300      	movne	r3, #0
 800363c:	b2db      	uxtb	r3, r3
 800363e:	e012      	b.n	8003666 <HAL_I2C_Init+0x18e>
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	1e58      	subs	r0, r3, #1
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6859      	ldr	r1, [r3, #4]
 8003648:	460b      	mov	r3, r1
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	440b      	add	r3, r1
 800364e:	0099      	lsls	r1, r3, #2
 8003650:	440b      	add	r3, r1
 8003652:	fbb0 f3f3 	udiv	r3, r0, r3
 8003656:	3301      	adds	r3, #1
 8003658:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800365c:	2b00      	cmp	r3, #0
 800365e:	bf0c      	ite	eq
 8003660:	2301      	moveq	r3, #1
 8003662:	2300      	movne	r3, #0
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <HAL_I2C_Init+0x196>
 800366a:	2301      	movs	r3, #1
 800366c:	e022      	b.n	80036b4 <HAL_I2C_Init+0x1dc>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d10e      	bne.n	8003694 <HAL_I2C_Init+0x1bc>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	1e58      	subs	r0, r3, #1
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6859      	ldr	r1, [r3, #4]
 800367e:	460b      	mov	r3, r1
 8003680:	005b      	lsls	r3, r3, #1
 8003682:	440b      	add	r3, r1
 8003684:	fbb0 f3f3 	udiv	r3, r0, r3
 8003688:	3301      	adds	r3, #1
 800368a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800368e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003692:	e00f      	b.n	80036b4 <HAL_I2C_Init+0x1dc>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	1e58      	subs	r0, r3, #1
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6859      	ldr	r1, [r3, #4]
 800369c:	460b      	mov	r3, r1
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	440b      	add	r3, r1
 80036a2:	0099      	lsls	r1, r3, #2
 80036a4:	440b      	add	r3, r1
 80036a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80036aa:	3301      	adds	r3, #1
 80036ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80036b4:	6879      	ldr	r1, [r7, #4]
 80036b6:	6809      	ldr	r1, [r1, #0]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	69da      	ldr	r2, [r3, #28]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a1b      	ldr	r3, [r3, #32]
 80036ce:	431a      	orrs	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	430a      	orrs	r2, r1
 80036d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80036e2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	6911      	ldr	r1, [r2, #16]
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	68d2      	ldr	r2, [r2, #12]
 80036ee:	4311      	orrs	r1, r2
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	6812      	ldr	r2, [r2, #0]
 80036f4:	430b      	orrs	r3, r1
 80036f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	695a      	ldr	r2, [r3, #20]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	431a      	orrs	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	430a      	orrs	r2, r1
 8003712:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f042 0201 	orr.w	r2, r2, #1
 8003722:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2220      	movs	r2, #32
 800372e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	000186a0 	.word	0x000186a0
 8003750:	001e847f 	.word	0x001e847f
 8003754:	003d08ff 	.word	0x003d08ff
 8003758:	431bde83 	.word	0x431bde83
 800375c:	10624dd3 	.word	0x10624dd3

08003760 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b088      	sub	sp, #32
 8003764:	af02      	add	r7, sp, #8
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	4608      	mov	r0, r1
 800376a:	4611      	mov	r1, r2
 800376c:	461a      	mov	r2, r3
 800376e:	4603      	mov	r3, r0
 8003770:	817b      	strh	r3, [r7, #10]
 8003772:	460b      	mov	r3, r1
 8003774:	813b      	strh	r3, [r7, #8]
 8003776:	4613      	mov	r3, r2
 8003778:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800377a:	f7fe fef5 	bl	8002568 <HAL_GetTick>
 800377e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003786:	b2db      	uxtb	r3, r3
 8003788:	2b20      	cmp	r3, #32
 800378a:	f040 80d9 	bne.w	8003940 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	9300      	str	r3, [sp, #0]
 8003792:	2319      	movs	r3, #25
 8003794:	2201      	movs	r2, #1
 8003796:	496d      	ldr	r1, [pc, #436]	@ (800394c <HAL_I2C_Mem_Write+0x1ec>)
 8003798:	68f8      	ldr	r0, [r7, #12]
 800379a:	f000 fccd 	bl	8004138 <I2C_WaitOnFlagUntilTimeout>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d001      	beq.n	80037a8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80037a4:	2302      	movs	r3, #2
 80037a6:	e0cc      	b.n	8003942 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d101      	bne.n	80037b6 <HAL_I2C_Mem_Write+0x56>
 80037b2:	2302      	movs	r3, #2
 80037b4:	e0c5      	b.n	8003942 <HAL_I2C_Mem_Write+0x1e2>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2201      	movs	r2, #1
 80037ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0301 	and.w	r3, r3, #1
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d007      	beq.n	80037dc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f042 0201 	orr.w	r2, r2, #1
 80037da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2221      	movs	r2, #33	@ 0x21
 80037f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2240      	movs	r2, #64	@ 0x40
 80037f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6a3a      	ldr	r2, [r7, #32]
 8003806:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800380c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003812:	b29a      	uxth	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	4a4d      	ldr	r2, [pc, #308]	@ (8003950 <HAL_I2C_Mem_Write+0x1f0>)
 800381c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800381e:	88f8      	ldrh	r0, [r7, #6]
 8003820:	893a      	ldrh	r2, [r7, #8]
 8003822:	8979      	ldrh	r1, [r7, #10]
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	9301      	str	r3, [sp, #4]
 8003828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800382a:	9300      	str	r3, [sp, #0]
 800382c:	4603      	mov	r3, r0
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f000 fb04 	bl	8003e3c <I2C_RequestMemoryWrite>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d052      	beq.n	80038e0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e081      	b.n	8003942 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003842:	68f8      	ldr	r0, [r7, #12]
 8003844:	f000 fd92 	bl	800436c <I2C_WaitOnTXEFlagUntilTimeout>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00d      	beq.n	800386a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003852:	2b04      	cmp	r3, #4
 8003854:	d107      	bne.n	8003866 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003864:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e06b      	b.n	8003942 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800386e:	781a      	ldrb	r2, [r3, #0]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800387a:	1c5a      	adds	r2, r3, #1
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003884:	3b01      	subs	r3, #1
 8003886:	b29a      	uxth	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003890:	b29b      	uxth	r3, r3
 8003892:	3b01      	subs	r3, #1
 8003894:	b29a      	uxth	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	695b      	ldr	r3, [r3, #20]
 80038a0:	f003 0304 	and.w	r3, r3, #4
 80038a4:	2b04      	cmp	r3, #4
 80038a6:	d11b      	bne.n	80038e0 <HAL_I2C_Mem_Write+0x180>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d017      	beq.n	80038e0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b4:	781a      	ldrb	r2, [r3, #0]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c0:	1c5a      	adds	r2, r3, #1
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038ca:	3b01      	subs	r3, #1
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	3b01      	subs	r3, #1
 80038da:	b29a      	uxth	r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d1aa      	bne.n	800383e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038e8:	697a      	ldr	r2, [r7, #20]
 80038ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f000 fd85 	bl	80043fc <I2C_WaitOnBTFFlagUntilTimeout>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00d      	beq.n	8003914 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038fc:	2b04      	cmp	r3, #4
 80038fe:	d107      	bne.n	8003910 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800390e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e016      	b.n	8003942 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003922:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2220      	movs	r2, #32
 8003928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800393c:	2300      	movs	r3, #0
 800393e:	e000      	b.n	8003942 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003940:	2302      	movs	r3, #2
  }
}
 8003942:	4618      	mov	r0, r3
 8003944:	3718      	adds	r7, #24
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	00100002 	.word	0x00100002
 8003950:	ffff0000 	.word	0xffff0000

08003954 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b08c      	sub	sp, #48	@ 0x30
 8003958:	af02      	add	r7, sp, #8
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	4608      	mov	r0, r1
 800395e:	4611      	mov	r1, r2
 8003960:	461a      	mov	r2, r3
 8003962:	4603      	mov	r3, r0
 8003964:	817b      	strh	r3, [r7, #10]
 8003966:	460b      	mov	r3, r1
 8003968:	813b      	strh	r3, [r7, #8]
 800396a:	4613      	mov	r3, r2
 800396c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800396e:	2300      	movs	r3, #0
 8003970:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003972:	f7fe fdf9 	bl	8002568 <HAL_GetTick>
 8003976:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800397e:	b2db      	uxtb	r3, r3
 8003980:	2b20      	cmp	r3, #32
 8003982:	f040 8250 	bne.w	8003e26 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003988:	9300      	str	r3, [sp, #0]
 800398a:	2319      	movs	r3, #25
 800398c:	2201      	movs	r2, #1
 800398e:	4982      	ldr	r1, [pc, #520]	@ (8003b98 <HAL_I2C_Mem_Read+0x244>)
 8003990:	68f8      	ldr	r0, [r7, #12]
 8003992:	f000 fbd1 	bl	8004138 <I2C_WaitOnFlagUntilTimeout>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d001      	beq.n	80039a0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800399c:	2302      	movs	r3, #2
 800399e:	e243      	b.n	8003e28 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d101      	bne.n	80039ae <HAL_I2C_Mem_Read+0x5a>
 80039aa:	2302      	movs	r3, #2
 80039ac:	e23c      	b.n	8003e28 <HAL_I2C_Mem_Read+0x4d4>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2201      	movs	r2, #1
 80039b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0301 	and.w	r3, r3, #1
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d007      	beq.n	80039d4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f042 0201 	orr.w	r2, r2, #1
 80039d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2222      	movs	r2, #34	@ 0x22
 80039e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2240      	movs	r2, #64	@ 0x40
 80039f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039fe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003a04:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	4a62      	ldr	r2, [pc, #392]	@ (8003b9c <HAL_I2C_Mem_Read+0x248>)
 8003a14:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a16:	88f8      	ldrh	r0, [r7, #6]
 8003a18:	893a      	ldrh	r2, [r7, #8]
 8003a1a:	8979      	ldrh	r1, [r7, #10]
 8003a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a1e:	9301      	str	r3, [sp, #4]
 8003a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a22:	9300      	str	r3, [sp, #0]
 8003a24:	4603      	mov	r3, r0
 8003a26:	68f8      	ldr	r0, [r7, #12]
 8003a28:	f000 fa9e 	bl	8003f68 <I2C_RequestMemoryRead>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d001      	beq.n	8003a36 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e1f8      	b.n	8003e28 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d113      	bne.n	8003a66 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a3e:	2300      	movs	r3, #0
 8003a40:	61fb      	str	r3, [r7, #28]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	695b      	ldr	r3, [r3, #20]
 8003a48:	61fb      	str	r3, [r7, #28]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	61fb      	str	r3, [r7, #28]
 8003a52:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a62:	601a      	str	r2, [r3, #0]
 8003a64:	e1cc      	b.n	8003e00 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d11e      	bne.n	8003aac <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a7c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a7e:	b672      	cpsid	i
}
 8003a80:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a82:	2300      	movs	r3, #0
 8003a84:	61bb      	str	r3, [r7, #24]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	695b      	ldr	r3, [r3, #20]
 8003a8c:	61bb      	str	r3, [r7, #24]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	61bb      	str	r3, [r7, #24]
 8003a96:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003aa6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003aa8:	b662      	cpsie	i
}
 8003aaa:	e035      	b.n	8003b18 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d11e      	bne.n	8003af2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ac2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003ac4:	b672      	cpsid	i
}
 8003ac6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ac8:	2300      	movs	r3, #0
 8003aca:	617b      	str	r3, [r7, #20]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	695b      	ldr	r3, [r3, #20]
 8003ad2:	617b      	str	r3, [r7, #20]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	617b      	str	r3, [r7, #20]
 8003adc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003aec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003aee:	b662      	cpsie	i
}
 8003af0:	e012      	b.n	8003b18 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003b00:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b02:	2300      	movs	r3, #0
 8003b04:	613b      	str	r3, [r7, #16]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	695b      	ldr	r3, [r3, #20]
 8003b0c:	613b      	str	r3, [r7, #16]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	699b      	ldr	r3, [r3, #24]
 8003b14:	613b      	str	r3, [r7, #16]
 8003b16:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003b18:	e172      	b.n	8003e00 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b1e:	2b03      	cmp	r3, #3
 8003b20:	f200 811f 	bhi.w	8003d62 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d123      	bne.n	8003b74 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b2e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003b30:	68f8      	ldr	r0, [r7, #12]
 8003b32:	f000 fcab 	bl	800448c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d001      	beq.n	8003b40 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e173      	b.n	8003e28 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	691a      	ldr	r2, [r3, #16]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b4a:	b2d2      	uxtb	r2, r2
 8003b4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b52:	1c5a      	adds	r2, r3, #1
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b5c:	3b01      	subs	r3, #1
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	b29a      	uxth	r2, r3
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003b72:	e145      	b.n	8003e00 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d152      	bne.n	8003c22 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b7e:	9300      	str	r3, [sp, #0]
 8003b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b82:	2200      	movs	r2, #0
 8003b84:	4906      	ldr	r1, [pc, #24]	@ (8003ba0 <HAL_I2C_Mem_Read+0x24c>)
 8003b86:	68f8      	ldr	r0, [r7, #12]
 8003b88:	f000 fad6 	bl	8004138 <I2C_WaitOnFlagUntilTimeout>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d008      	beq.n	8003ba4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e148      	b.n	8003e28 <HAL_I2C_Mem_Read+0x4d4>
 8003b96:	bf00      	nop
 8003b98:	00100002 	.word	0x00100002
 8003b9c:	ffff0000 	.word	0xffff0000
 8003ba0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003ba4:	b672      	cpsid	i
}
 8003ba6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	691a      	ldr	r2, [r3, #16]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc2:	b2d2      	uxtb	r2, r2
 8003bc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bca:	1c5a      	adds	r2, r3, #1
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bd4:	3b01      	subs	r3, #1
 8003bd6:	b29a      	uxth	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	3b01      	subs	r3, #1
 8003be4:	b29a      	uxth	r2, r3
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003bea:	b662      	cpsie	i
}
 8003bec:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	691a      	ldr	r2, [r3, #16]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf8:	b2d2      	uxtb	r2, r2
 8003bfa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c00:	1c5a      	adds	r2, r3, #1
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	b29a      	uxth	r2, r3
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003c20:	e0ee      	b.n	8003e00 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c24:	9300      	str	r3, [sp, #0]
 8003c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c28:	2200      	movs	r2, #0
 8003c2a:	4981      	ldr	r1, [pc, #516]	@ (8003e30 <HAL_I2C_Mem_Read+0x4dc>)
 8003c2c:	68f8      	ldr	r0, [r7, #12]
 8003c2e:	f000 fa83 	bl	8004138 <I2C_WaitOnFlagUntilTimeout>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d001      	beq.n	8003c3c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e0f5      	b.n	8003e28 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c4a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003c4c:	b672      	cpsid	i
}
 8003c4e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	691a      	ldr	r2, [r3, #16]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c5a:	b2d2      	uxtb	r2, r2
 8003c5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c62:	1c5a      	adds	r2, r3, #1
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003c82:	4b6c      	ldr	r3, [pc, #432]	@ (8003e34 <HAL_I2C_Mem_Read+0x4e0>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	08db      	lsrs	r3, r3, #3
 8003c88:	4a6b      	ldr	r2, [pc, #428]	@ (8003e38 <HAL_I2C_Mem_Read+0x4e4>)
 8003c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8e:	0a1a      	lsrs	r2, r3, #8
 8003c90:	4613      	mov	r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	4413      	add	r3, r2
 8003c96:	00da      	lsls	r2, r3, #3
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003c9c:	6a3b      	ldr	r3, [r7, #32]
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003ca2:	6a3b      	ldr	r3, [r7, #32]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d118      	bne.n	8003cda <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2220      	movs	r2, #32
 8003cb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc2:	f043 0220 	orr.w	r2, r3, #32
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003cca:	b662      	cpsie	i
}
 8003ccc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e0a6      	b.n	8003e28 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	f003 0304 	and.w	r3, r3, #4
 8003ce4:	2b04      	cmp	r3, #4
 8003ce6:	d1d9      	bne.n	8003c9c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cf6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	691a      	ldr	r2, [r3, #16]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d02:	b2d2      	uxtb	r2, r2
 8003d04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d0a:	1c5a      	adds	r2, r3, #1
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d14:	3b01      	subs	r3, #1
 8003d16:	b29a      	uxth	r2, r3
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	3b01      	subs	r3, #1
 8003d24:	b29a      	uxth	r2, r3
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003d2a:	b662      	cpsie	i
}
 8003d2c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	691a      	ldr	r2, [r3, #16]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d38:	b2d2      	uxtb	r2, r2
 8003d3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d40:	1c5a      	adds	r2, r3, #1
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	b29a      	uxth	r2, r3
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	3b01      	subs	r3, #1
 8003d5a:	b29a      	uxth	r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003d60:	e04e      	b.n	8003e00 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d64:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003d66:	68f8      	ldr	r0, [r7, #12]
 8003d68:	f000 fb90 	bl	800448c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d001      	beq.n	8003d76 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e058      	b.n	8003e28 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	691a      	ldr	r2, [r3, #16]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d80:	b2d2      	uxtb	r2, r2
 8003d82:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d88:	1c5a      	adds	r2, r3, #1
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d92:	3b01      	subs	r3, #1
 8003d94:	b29a      	uxth	r2, r3
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	3b01      	subs	r3, #1
 8003da2:	b29a      	uxth	r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	f003 0304 	and.w	r3, r3, #4
 8003db2:	2b04      	cmp	r3, #4
 8003db4:	d124      	bne.n	8003e00 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dba:	2b03      	cmp	r3, #3
 8003dbc:	d107      	bne.n	8003dce <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dcc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	691a      	ldr	r2, [r3, #16]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd8:	b2d2      	uxtb	r2, r2
 8003dda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de0:	1c5a      	adds	r2, r3, #1
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dea:	3b01      	subs	r3, #1
 8003dec:	b29a      	uxth	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	b29a      	uxth	r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	f47f ae88 	bne.w	8003b1a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2220      	movs	r2, #32
 8003e0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003e22:	2300      	movs	r3, #0
 8003e24:	e000      	b.n	8003e28 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8003e26:	2302      	movs	r3, #2
  }
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3728      	adds	r7, #40	@ 0x28
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	00010004 	.word	0x00010004
 8003e34:	20000050 	.word	0x20000050
 8003e38:	14f8b589 	.word	0x14f8b589

08003e3c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b088      	sub	sp, #32
 8003e40:	af02      	add	r7, sp, #8
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	4608      	mov	r0, r1
 8003e46:	4611      	mov	r1, r2
 8003e48:	461a      	mov	r2, r3
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	817b      	strh	r3, [r7, #10]
 8003e4e:	460b      	mov	r3, r1
 8003e50:	813b      	strh	r3, [r7, #8]
 8003e52:	4613      	mov	r3, r2
 8003e54:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e64:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e68:	9300      	str	r3, [sp, #0]
 8003e6a:	6a3b      	ldr	r3, [r7, #32]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e72:	68f8      	ldr	r0, [r7, #12]
 8003e74:	f000 f960 	bl	8004138 <I2C_WaitOnFlagUntilTimeout>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00d      	beq.n	8003e9a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e8c:	d103      	bne.n	8003e96 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e94:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e05f      	b.n	8003f5a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e9a:	897b      	ldrh	r3, [r7, #10]
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003ea8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eac:	6a3a      	ldr	r2, [r7, #32]
 8003eae:	492d      	ldr	r1, [pc, #180]	@ (8003f64 <I2C_RequestMemoryWrite+0x128>)
 8003eb0:	68f8      	ldr	r0, [r7, #12]
 8003eb2:	f000 f9bb 	bl	800422c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d001      	beq.n	8003ec0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e04c      	b.n	8003f5a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	617b      	str	r3, [r7, #20]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	617b      	str	r3, [r7, #20]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	617b      	str	r3, [r7, #20]
 8003ed4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ed6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ed8:	6a39      	ldr	r1, [r7, #32]
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f000 fa46 	bl	800436c <I2C_WaitOnTXEFlagUntilTimeout>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00d      	beq.n	8003f02 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eea:	2b04      	cmp	r3, #4
 8003eec:	d107      	bne.n	8003efe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003efc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e02b      	b.n	8003f5a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f02:	88fb      	ldrh	r3, [r7, #6]
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d105      	bne.n	8003f14 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f08:	893b      	ldrh	r3, [r7, #8]
 8003f0a:	b2da      	uxtb	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	611a      	str	r2, [r3, #16]
 8003f12:	e021      	b.n	8003f58 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f14:	893b      	ldrh	r3, [r7, #8]
 8003f16:	0a1b      	lsrs	r3, r3, #8
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	b2da      	uxtb	r2, r3
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f24:	6a39      	ldr	r1, [r7, #32]
 8003f26:	68f8      	ldr	r0, [r7, #12]
 8003f28:	f000 fa20 	bl	800436c <I2C_WaitOnTXEFlagUntilTimeout>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00d      	beq.n	8003f4e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f36:	2b04      	cmp	r3, #4
 8003f38:	d107      	bne.n	8003f4a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f48:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e005      	b.n	8003f5a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f4e:	893b      	ldrh	r3, [r7, #8]
 8003f50:	b2da      	uxtb	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3718      	adds	r7, #24
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	00010002 	.word	0x00010002

08003f68 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b088      	sub	sp, #32
 8003f6c:	af02      	add	r7, sp, #8
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	4608      	mov	r0, r1
 8003f72:	4611      	mov	r1, r2
 8003f74:	461a      	mov	r2, r3
 8003f76:	4603      	mov	r3, r0
 8003f78:	817b      	strh	r3, [r7, #10]
 8003f7a:	460b      	mov	r3, r1
 8003f7c:	813b      	strh	r3, [r7, #8]
 8003f7e:	4613      	mov	r3, r2
 8003f80:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003f90:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fa0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa4:	9300      	str	r3, [sp, #0]
 8003fa6:	6a3b      	ldr	r3, [r7, #32]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003fae:	68f8      	ldr	r0, [r7, #12]
 8003fb0:	f000 f8c2 	bl	8004138 <I2C_WaitOnFlagUntilTimeout>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00d      	beq.n	8003fd6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fc4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fc8:	d103      	bne.n	8003fd2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003fd0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e0aa      	b.n	800412c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003fd6:	897b      	ldrh	r3, [r7, #10]
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	461a      	mov	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003fe4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe8:	6a3a      	ldr	r2, [r7, #32]
 8003fea:	4952      	ldr	r1, [pc, #328]	@ (8004134 <I2C_RequestMemoryRead+0x1cc>)
 8003fec:	68f8      	ldr	r0, [r7, #12]
 8003fee:	f000 f91d 	bl	800422c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d001      	beq.n	8003ffc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e097      	b.n	800412c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	617b      	str	r3, [r7, #20]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	617b      	str	r3, [r7, #20]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	617b      	str	r3, [r7, #20]
 8004010:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004012:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004014:	6a39      	ldr	r1, [r7, #32]
 8004016:	68f8      	ldr	r0, [r7, #12]
 8004018:	f000 f9a8 	bl	800436c <I2C_WaitOnTXEFlagUntilTimeout>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00d      	beq.n	800403e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004026:	2b04      	cmp	r3, #4
 8004028:	d107      	bne.n	800403a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004038:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e076      	b.n	800412c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800403e:	88fb      	ldrh	r3, [r7, #6]
 8004040:	2b01      	cmp	r3, #1
 8004042:	d105      	bne.n	8004050 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004044:	893b      	ldrh	r3, [r7, #8]
 8004046:	b2da      	uxtb	r2, r3
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	611a      	str	r2, [r3, #16]
 800404e:	e021      	b.n	8004094 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004050:	893b      	ldrh	r3, [r7, #8]
 8004052:	0a1b      	lsrs	r3, r3, #8
 8004054:	b29b      	uxth	r3, r3
 8004056:	b2da      	uxtb	r2, r3
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800405e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004060:	6a39      	ldr	r1, [r7, #32]
 8004062:	68f8      	ldr	r0, [r7, #12]
 8004064:	f000 f982 	bl	800436c <I2C_WaitOnTXEFlagUntilTimeout>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00d      	beq.n	800408a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004072:	2b04      	cmp	r3, #4
 8004074:	d107      	bne.n	8004086 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004084:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e050      	b.n	800412c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800408a:	893b      	ldrh	r3, [r7, #8]
 800408c:	b2da      	uxtb	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004094:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004096:	6a39      	ldr	r1, [r7, #32]
 8004098:	68f8      	ldr	r0, [r7, #12]
 800409a:	f000 f967 	bl	800436c <I2C_WaitOnTXEFlagUntilTimeout>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00d      	beq.n	80040c0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a8:	2b04      	cmp	r3, #4
 80040aa:	d107      	bne.n	80040bc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040ba:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e035      	b.n	800412c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040ce:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d2:	9300      	str	r3, [sp, #0]
 80040d4:	6a3b      	ldr	r3, [r7, #32]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80040dc:	68f8      	ldr	r0, [r7, #12]
 80040de:	f000 f82b 	bl	8004138 <I2C_WaitOnFlagUntilTimeout>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00d      	beq.n	8004104 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040f6:	d103      	bne.n	8004100 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040fe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e013      	b.n	800412c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004104:	897b      	ldrh	r3, [r7, #10]
 8004106:	b2db      	uxtb	r3, r3
 8004108:	f043 0301 	orr.w	r3, r3, #1
 800410c:	b2da      	uxtb	r2, r3
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004116:	6a3a      	ldr	r2, [r7, #32]
 8004118:	4906      	ldr	r1, [pc, #24]	@ (8004134 <I2C_RequestMemoryRead+0x1cc>)
 800411a:	68f8      	ldr	r0, [r7, #12]
 800411c:	f000 f886 	bl	800422c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d001      	beq.n	800412a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e000      	b.n	800412c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	3718      	adds	r7, #24
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	00010002 	.word	0x00010002

08004138 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	603b      	str	r3, [r7, #0]
 8004144:	4613      	mov	r3, r2
 8004146:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004148:	e048      	b.n	80041dc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004150:	d044      	beq.n	80041dc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004152:	f7fe fa09 	bl	8002568 <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	683a      	ldr	r2, [r7, #0]
 800415e:	429a      	cmp	r2, r3
 8004160:	d302      	bcc.n	8004168 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d139      	bne.n	80041dc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	0c1b      	lsrs	r3, r3, #16
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b01      	cmp	r3, #1
 8004170:	d10d      	bne.n	800418e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	695b      	ldr	r3, [r3, #20]
 8004178:	43da      	mvns	r2, r3
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	4013      	ands	r3, r2
 800417e:	b29b      	uxth	r3, r3
 8004180:	2b00      	cmp	r3, #0
 8004182:	bf0c      	ite	eq
 8004184:	2301      	moveq	r3, #1
 8004186:	2300      	movne	r3, #0
 8004188:	b2db      	uxtb	r3, r3
 800418a:	461a      	mov	r2, r3
 800418c:	e00c      	b.n	80041a8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	699b      	ldr	r3, [r3, #24]
 8004194:	43da      	mvns	r2, r3
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	4013      	ands	r3, r2
 800419a:	b29b      	uxth	r3, r3
 800419c:	2b00      	cmp	r3, #0
 800419e:	bf0c      	ite	eq
 80041a0:	2301      	moveq	r3, #1
 80041a2:	2300      	movne	r3, #0
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	461a      	mov	r2, r3
 80041a8:	79fb      	ldrb	r3, [r7, #7]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d116      	bne.n	80041dc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2200      	movs	r2, #0
 80041b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2220      	movs	r2, #32
 80041b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c8:	f043 0220 	orr.w	r2, r3, #32
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e023      	b.n	8004224 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	0c1b      	lsrs	r3, r3, #16
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d10d      	bne.n	8004202 <I2C_WaitOnFlagUntilTimeout+0xca>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	695b      	ldr	r3, [r3, #20]
 80041ec:	43da      	mvns	r2, r3
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	4013      	ands	r3, r2
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	bf0c      	ite	eq
 80041f8:	2301      	moveq	r3, #1
 80041fa:	2300      	movne	r3, #0
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	461a      	mov	r2, r3
 8004200:	e00c      	b.n	800421c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	43da      	mvns	r2, r3
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	4013      	ands	r3, r2
 800420e:	b29b      	uxth	r3, r3
 8004210:	2b00      	cmp	r3, #0
 8004212:	bf0c      	ite	eq
 8004214:	2301      	moveq	r3, #1
 8004216:	2300      	movne	r3, #0
 8004218:	b2db      	uxtb	r3, r3
 800421a:	461a      	mov	r2, r3
 800421c:	79fb      	ldrb	r3, [r7, #7]
 800421e:	429a      	cmp	r2, r3
 8004220:	d093      	beq.n	800414a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004222:	2300      	movs	r3, #0
}
 8004224:	4618      	mov	r0, r3
 8004226:	3710      	adds	r7, #16
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	607a      	str	r2, [r7, #4]
 8004238:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800423a:	e071      	b.n	8004320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004246:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800424a:	d123      	bne.n	8004294 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800425a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004264:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2200      	movs	r2, #0
 800426a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2220      	movs	r2, #32
 8004270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004280:	f043 0204 	orr.w	r2, r3, #4
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e067      	b.n	8004364 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800429a:	d041      	beq.n	8004320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800429c:	f7fe f964 	bl	8002568 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d302      	bcc.n	80042b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d136      	bne.n	8004320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	0c1b      	lsrs	r3, r3, #16
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d10c      	bne.n	80042d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	43da      	mvns	r2, r3
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	4013      	ands	r3, r2
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	bf14      	ite	ne
 80042ce:	2301      	movne	r3, #1
 80042d0:	2300      	moveq	r3, #0
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	e00b      	b.n	80042ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	43da      	mvns	r2, r3
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	4013      	ands	r3, r2
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	bf14      	ite	ne
 80042e8:	2301      	movne	r3, #1
 80042ea:	2300      	moveq	r3, #0
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d016      	beq.n	8004320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2200      	movs	r2, #0
 80042f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2220      	movs	r2, #32
 80042fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800430c:	f043 0220 	orr.w	r2, r3, #32
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e021      	b.n	8004364 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	0c1b      	lsrs	r3, r3, #16
 8004324:	b2db      	uxtb	r3, r3
 8004326:	2b01      	cmp	r3, #1
 8004328:	d10c      	bne.n	8004344 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	695b      	ldr	r3, [r3, #20]
 8004330:	43da      	mvns	r2, r3
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	4013      	ands	r3, r2
 8004336:	b29b      	uxth	r3, r3
 8004338:	2b00      	cmp	r3, #0
 800433a:	bf14      	ite	ne
 800433c:	2301      	movne	r3, #1
 800433e:	2300      	moveq	r3, #0
 8004340:	b2db      	uxtb	r3, r3
 8004342:	e00b      	b.n	800435c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	699b      	ldr	r3, [r3, #24]
 800434a:	43da      	mvns	r2, r3
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	4013      	ands	r3, r2
 8004350:	b29b      	uxth	r3, r3
 8004352:	2b00      	cmp	r3, #0
 8004354:	bf14      	ite	ne
 8004356:	2301      	movne	r3, #1
 8004358:	2300      	moveq	r3, #0
 800435a:	b2db      	uxtb	r3, r3
 800435c:	2b00      	cmp	r3, #0
 800435e:	f47f af6d 	bne.w	800423c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004362:	2300      	movs	r3, #0
}
 8004364:	4618      	mov	r0, r3
 8004366:	3710      	adds	r7, #16
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004378:	e034      	b.n	80043e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	f000 f8e3 	bl	8004546 <I2C_IsAcknowledgeFailed>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d001      	beq.n	800438a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e034      	b.n	80043f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004390:	d028      	beq.n	80043e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004392:	f7fe f8e9 	bl	8002568 <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	68ba      	ldr	r2, [r7, #8]
 800439e:	429a      	cmp	r2, r3
 80043a0:	d302      	bcc.n	80043a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d11d      	bne.n	80043e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043b2:	2b80      	cmp	r3, #128	@ 0x80
 80043b4:	d016      	beq.n	80043e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2200      	movs	r2, #0
 80043ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2220      	movs	r2, #32
 80043c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d0:	f043 0220 	orr.w	r2, r3, #32
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2200      	movs	r2, #0
 80043dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e007      	b.n	80043f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043ee:	2b80      	cmp	r3, #128	@ 0x80
 80043f0:	d1c3      	bne.n	800437a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80043f2:	2300      	movs	r3, #0
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3710      	adds	r7, #16
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004408:	e034      	b.n	8004474 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	f000 f89b 	bl	8004546 <I2C_IsAcknowledgeFailed>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d001      	beq.n	800441a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e034      	b.n	8004484 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004420:	d028      	beq.n	8004474 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004422:	f7fe f8a1 	bl	8002568 <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	68ba      	ldr	r2, [r7, #8]
 800442e:	429a      	cmp	r2, r3
 8004430:	d302      	bcc.n	8004438 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d11d      	bne.n	8004474 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	f003 0304 	and.w	r3, r3, #4
 8004442:	2b04      	cmp	r3, #4
 8004444:	d016      	beq.n	8004474 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2220      	movs	r2, #32
 8004450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004460:	f043 0220 	orr.w	r2, r3, #32
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e007      	b.n	8004484 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	f003 0304 	and.w	r3, r3, #4
 800447e:	2b04      	cmp	r3, #4
 8004480:	d1c3      	bne.n	800440a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	3710      	adds	r7, #16
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004498:	e049      	b.n	800452e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	695b      	ldr	r3, [r3, #20]
 80044a0:	f003 0310 	and.w	r3, r3, #16
 80044a4:	2b10      	cmp	r3, #16
 80044a6:	d119      	bne.n	80044dc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f06f 0210 	mvn.w	r2, #16
 80044b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2220      	movs	r2, #32
 80044bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e030      	b.n	800453e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044dc:	f7fe f844 	bl	8002568 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	68ba      	ldr	r2, [r7, #8]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d302      	bcc.n	80044f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d11d      	bne.n	800452e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	695b      	ldr	r3, [r3, #20]
 80044f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044fc:	2b40      	cmp	r3, #64	@ 0x40
 80044fe:	d016      	beq.n	800452e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2200      	movs	r2, #0
 8004504:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2220      	movs	r2, #32
 800450a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800451a:	f043 0220 	orr.w	r2, r3, #32
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2200      	movs	r2, #0
 8004526:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e007      	b.n	800453e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	695b      	ldr	r3, [r3, #20]
 8004534:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004538:	2b40      	cmp	r3, #64	@ 0x40
 800453a:	d1ae      	bne.n	800449a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3710      	adds	r7, #16
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004546:	b480      	push	{r7}
 8004548:	b083      	sub	sp, #12
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	695b      	ldr	r3, [r3, #20]
 8004554:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004558:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800455c:	d11b      	bne.n	8004596 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004566:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2220      	movs	r2, #32
 8004572:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004582:	f043 0204 	orr.w	r2, r3, #4
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e000      	b.n	8004598 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	bc80      	pop	{r7}
 80045a0:	4770      	bx	lr
	...

080045a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b086      	sub	sp, #24
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d101      	bne.n	80045b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e272      	b.n	8004a9c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0301 	and.w	r3, r3, #1
 80045be:	2b00      	cmp	r3, #0
 80045c0:	f000 8087 	beq.w	80046d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80045c4:	4b92      	ldr	r3, [pc, #584]	@ (8004810 <HAL_RCC_OscConfig+0x26c>)
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f003 030c 	and.w	r3, r3, #12
 80045cc:	2b04      	cmp	r3, #4
 80045ce:	d00c      	beq.n	80045ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80045d0:	4b8f      	ldr	r3, [pc, #572]	@ (8004810 <HAL_RCC_OscConfig+0x26c>)
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f003 030c 	and.w	r3, r3, #12
 80045d8:	2b08      	cmp	r3, #8
 80045da:	d112      	bne.n	8004602 <HAL_RCC_OscConfig+0x5e>
 80045dc:	4b8c      	ldr	r3, [pc, #560]	@ (8004810 <HAL_RCC_OscConfig+0x26c>)
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045e8:	d10b      	bne.n	8004602 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045ea:	4b89      	ldr	r3, [pc, #548]	@ (8004810 <HAL_RCC_OscConfig+0x26c>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d06c      	beq.n	80046d0 <HAL_RCC_OscConfig+0x12c>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d168      	bne.n	80046d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e24c      	b.n	8004a9c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800460a:	d106      	bne.n	800461a <HAL_RCC_OscConfig+0x76>
 800460c:	4b80      	ldr	r3, [pc, #512]	@ (8004810 <HAL_RCC_OscConfig+0x26c>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a7f      	ldr	r2, [pc, #508]	@ (8004810 <HAL_RCC_OscConfig+0x26c>)
 8004612:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004616:	6013      	str	r3, [r2, #0]
 8004618:	e02e      	b.n	8004678 <HAL_RCC_OscConfig+0xd4>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d10c      	bne.n	800463c <HAL_RCC_OscConfig+0x98>
 8004622:	4b7b      	ldr	r3, [pc, #492]	@ (8004810 <HAL_RCC_OscConfig+0x26c>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a7a      	ldr	r2, [pc, #488]	@ (8004810 <HAL_RCC_OscConfig+0x26c>)
 8004628:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800462c:	6013      	str	r3, [r2, #0]
 800462e:	4b78      	ldr	r3, [pc, #480]	@ (8004810 <HAL_RCC_OscConfig+0x26c>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a77      	ldr	r2, [pc, #476]	@ (8004810 <HAL_RCC_OscConfig+0x26c>)
 8004634:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004638:	6013      	str	r3, [r2, #0]
 800463a:	e01d      	b.n	8004678 <HAL_RCC_OscConfig+0xd4>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004644:	d10c      	bne.n	8004660 <HAL_RCC_OscConfig+0xbc>
 8004646:	4b72      	ldr	r3, [pc, #456]	@ (8004810 <HAL_RCC_OscConfig+0x26c>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a71      	ldr	r2, [pc, #452]	@ (8004810 <HAL_RCC_OscConfig+0x26c>)
 800464c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004650:	6013      	str	r3, [r2, #0]
 8004652:	4b6f      	ldr	r3, [pc, #444]	@ (8004810 <HAL_RCC_OscConfig+0x26c>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a6e      	ldr	r2, [pc, #440]	@ (8004810 <HAL_RCC_OscConfig+0x26c>)
 8004658:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800465c:	6013      	str	r3, [r2, #0]
 800465e:	e00b      	b.n	8004678 <HAL_RCC_OscConfig+0xd4>
 8004660:	4b6b      	ldr	r3, [pc, #428]	@ (8004810 <HAL_RCC_OscConfig+0x26c>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a6a      	ldr	r2, [pc, #424]	@ (8004810 <HAL_RCC_OscConfig+0x26c>)
 8004666:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800466a:	6013      	str	r3, [r2, #0]
 800466c:	4b68      	ldr	r3, [pc, #416]	@ (8004810 <HAL_RCC_OscConfig+0x26c>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a67      	ldr	r2, [pc, #412]	@ (8004810 <HAL_RCC_OscConfig+0x26c>)
 8004672:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004676:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d013      	beq.n	80046a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004680:	f7fd ff72 	bl	8002568 <HAL_GetTick>
 8004684:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004686:	e008      	b.n	800469a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004688:	f7fd ff6e 	bl	8002568 <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	2b64      	cmp	r3, #100	@ 0x64
 8004694:	d901      	bls.n	800469a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e200      	b.n	8004a9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800469a:	4b5d      	ldr	r3, [pc, #372]	@ (8004810 <HAL_RCC_OscConfig+0x26c>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d0f0      	beq.n	8004688 <HAL_RCC_OscConfig+0xe4>
 80046a6:	e014      	b.n	80046d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046a8:	f7fd ff5e 	bl	8002568 <HAL_GetTick>
 80046ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046ae:	e008      	b.n	80046c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046b0:	f7fd ff5a 	bl	8002568 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	2b64      	cmp	r3, #100	@ 0x64
 80046bc:	d901      	bls.n	80046c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e1ec      	b.n	8004a9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046c2:	4b53      	ldr	r3, [pc, #332]	@ (8004810 <HAL_RCC_OscConfig+0x26c>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1f0      	bne.n	80046b0 <HAL_RCC_OscConfig+0x10c>
 80046ce:	e000      	b.n	80046d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d063      	beq.n	80047a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80046de:	4b4c      	ldr	r3, [pc, #304]	@ (8004810 <HAL_RCC_OscConfig+0x26c>)
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	f003 030c 	and.w	r3, r3, #12
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00b      	beq.n	8004702 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80046ea:	4b49      	ldr	r3, [pc, #292]	@ (8004810 <HAL_RCC_OscConfig+0x26c>)
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f003 030c 	and.w	r3, r3, #12
 80046f2:	2b08      	cmp	r3, #8
 80046f4:	d11c      	bne.n	8004730 <HAL_RCC_OscConfig+0x18c>
 80046f6:	4b46      	ldr	r3, [pc, #280]	@ (8004810 <HAL_RCC_OscConfig+0x26c>)
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d116      	bne.n	8004730 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004702:	4b43      	ldr	r3, [pc, #268]	@ (8004810 <HAL_RCC_OscConfig+0x26c>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0302 	and.w	r3, r3, #2
 800470a:	2b00      	cmp	r3, #0
 800470c:	d005      	beq.n	800471a <HAL_RCC_OscConfig+0x176>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	2b01      	cmp	r3, #1
 8004714:	d001      	beq.n	800471a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e1c0      	b.n	8004a9c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800471a:	4b3d      	ldr	r3, [pc, #244]	@ (8004810 <HAL_RCC_OscConfig+0x26c>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	695b      	ldr	r3, [r3, #20]
 8004726:	00db      	lsls	r3, r3, #3
 8004728:	4939      	ldr	r1, [pc, #228]	@ (8004810 <HAL_RCC_OscConfig+0x26c>)
 800472a:	4313      	orrs	r3, r2
 800472c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800472e:	e03a      	b.n	80047a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d020      	beq.n	800477a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004738:	4b36      	ldr	r3, [pc, #216]	@ (8004814 <HAL_RCC_OscConfig+0x270>)
 800473a:	2201      	movs	r2, #1
 800473c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800473e:	f7fd ff13 	bl	8002568 <HAL_GetTick>
 8004742:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004744:	e008      	b.n	8004758 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004746:	f7fd ff0f 	bl	8002568 <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	2b02      	cmp	r3, #2
 8004752:	d901      	bls.n	8004758 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e1a1      	b.n	8004a9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004758:	4b2d      	ldr	r3, [pc, #180]	@ (8004810 <HAL_RCC_OscConfig+0x26c>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0302 	and.w	r3, r3, #2
 8004760:	2b00      	cmp	r3, #0
 8004762:	d0f0      	beq.n	8004746 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004764:	4b2a      	ldr	r3, [pc, #168]	@ (8004810 <HAL_RCC_OscConfig+0x26c>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	695b      	ldr	r3, [r3, #20]
 8004770:	00db      	lsls	r3, r3, #3
 8004772:	4927      	ldr	r1, [pc, #156]	@ (8004810 <HAL_RCC_OscConfig+0x26c>)
 8004774:	4313      	orrs	r3, r2
 8004776:	600b      	str	r3, [r1, #0]
 8004778:	e015      	b.n	80047a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800477a:	4b26      	ldr	r3, [pc, #152]	@ (8004814 <HAL_RCC_OscConfig+0x270>)
 800477c:	2200      	movs	r2, #0
 800477e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004780:	f7fd fef2 	bl	8002568 <HAL_GetTick>
 8004784:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004786:	e008      	b.n	800479a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004788:	f7fd feee 	bl	8002568 <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	2b02      	cmp	r3, #2
 8004794:	d901      	bls.n	800479a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e180      	b.n	8004a9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800479a:	4b1d      	ldr	r3, [pc, #116]	@ (8004810 <HAL_RCC_OscConfig+0x26c>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0302 	and.w	r3, r3, #2
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d1f0      	bne.n	8004788 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0308 	and.w	r3, r3, #8
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d03a      	beq.n	8004828 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d019      	beq.n	80047ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047ba:	4b17      	ldr	r3, [pc, #92]	@ (8004818 <HAL_RCC_OscConfig+0x274>)
 80047bc:	2201      	movs	r2, #1
 80047be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047c0:	f7fd fed2 	bl	8002568 <HAL_GetTick>
 80047c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047c6:	e008      	b.n	80047da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047c8:	f7fd fece 	bl	8002568 <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d901      	bls.n	80047da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e160      	b.n	8004a9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047da:	4b0d      	ldr	r3, [pc, #52]	@ (8004810 <HAL_RCC_OscConfig+0x26c>)
 80047dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047de:	f003 0302 	and.w	r3, r3, #2
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d0f0      	beq.n	80047c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80047e6:	2001      	movs	r0, #1
 80047e8:	f000 face 	bl	8004d88 <RCC_Delay>
 80047ec:	e01c      	b.n	8004828 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047ee:	4b0a      	ldr	r3, [pc, #40]	@ (8004818 <HAL_RCC_OscConfig+0x274>)
 80047f0:	2200      	movs	r2, #0
 80047f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047f4:	f7fd feb8 	bl	8002568 <HAL_GetTick>
 80047f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047fa:	e00f      	b.n	800481c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047fc:	f7fd feb4 	bl	8002568 <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	2b02      	cmp	r3, #2
 8004808:	d908      	bls.n	800481c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e146      	b.n	8004a9c <HAL_RCC_OscConfig+0x4f8>
 800480e:	bf00      	nop
 8004810:	40021000 	.word	0x40021000
 8004814:	42420000 	.word	0x42420000
 8004818:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800481c:	4b92      	ldr	r3, [pc, #584]	@ (8004a68 <HAL_RCC_OscConfig+0x4c4>)
 800481e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004820:	f003 0302 	and.w	r3, r3, #2
 8004824:	2b00      	cmp	r3, #0
 8004826:	d1e9      	bne.n	80047fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0304 	and.w	r3, r3, #4
 8004830:	2b00      	cmp	r3, #0
 8004832:	f000 80a6 	beq.w	8004982 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004836:	2300      	movs	r3, #0
 8004838:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800483a:	4b8b      	ldr	r3, [pc, #556]	@ (8004a68 <HAL_RCC_OscConfig+0x4c4>)
 800483c:	69db      	ldr	r3, [r3, #28]
 800483e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d10d      	bne.n	8004862 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004846:	4b88      	ldr	r3, [pc, #544]	@ (8004a68 <HAL_RCC_OscConfig+0x4c4>)
 8004848:	69db      	ldr	r3, [r3, #28]
 800484a:	4a87      	ldr	r2, [pc, #540]	@ (8004a68 <HAL_RCC_OscConfig+0x4c4>)
 800484c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004850:	61d3      	str	r3, [r2, #28]
 8004852:	4b85      	ldr	r3, [pc, #532]	@ (8004a68 <HAL_RCC_OscConfig+0x4c4>)
 8004854:	69db      	ldr	r3, [r3, #28]
 8004856:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800485a:	60bb      	str	r3, [r7, #8]
 800485c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800485e:	2301      	movs	r3, #1
 8004860:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004862:	4b82      	ldr	r3, [pc, #520]	@ (8004a6c <HAL_RCC_OscConfig+0x4c8>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800486a:	2b00      	cmp	r3, #0
 800486c:	d118      	bne.n	80048a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800486e:	4b7f      	ldr	r3, [pc, #508]	@ (8004a6c <HAL_RCC_OscConfig+0x4c8>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a7e      	ldr	r2, [pc, #504]	@ (8004a6c <HAL_RCC_OscConfig+0x4c8>)
 8004874:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004878:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800487a:	f7fd fe75 	bl	8002568 <HAL_GetTick>
 800487e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004880:	e008      	b.n	8004894 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004882:	f7fd fe71 	bl	8002568 <HAL_GetTick>
 8004886:	4602      	mov	r2, r0
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	2b64      	cmp	r3, #100	@ 0x64
 800488e:	d901      	bls.n	8004894 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e103      	b.n	8004a9c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004894:	4b75      	ldr	r3, [pc, #468]	@ (8004a6c <HAL_RCC_OscConfig+0x4c8>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800489c:	2b00      	cmp	r3, #0
 800489e:	d0f0      	beq.n	8004882 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d106      	bne.n	80048b6 <HAL_RCC_OscConfig+0x312>
 80048a8:	4b6f      	ldr	r3, [pc, #444]	@ (8004a68 <HAL_RCC_OscConfig+0x4c4>)
 80048aa:	6a1b      	ldr	r3, [r3, #32]
 80048ac:	4a6e      	ldr	r2, [pc, #440]	@ (8004a68 <HAL_RCC_OscConfig+0x4c4>)
 80048ae:	f043 0301 	orr.w	r3, r3, #1
 80048b2:	6213      	str	r3, [r2, #32]
 80048b4:	e02d      	b.n	8004912 <HAL_RCC_OscConfig+0x36e>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d10c      	bne.n	80048d8 <HAL_RCC_OscConfig+0x334>
 80048be:	4b6a      	ldr	r3, [pc, #424]	@ (8004a68 <HAL_RCC_OscConfig+0x4c4>)
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	4a69      	ldr	r2, [pc, #420]	@ (8004a68 <HAL_RCC_OscConfig+0x4c4>)
 80048c4:	f023 0301 	bic.w	r3, r3, #1
 80048c8:	6213      	str	r3, [r2, #32]
 80048ca:	4b67      	ldr	r3, [pc, #412]	@ (8004a68 <HAL_RCC_OscConfig+0x4c4>)
 80048cc:	6a1b      	ldr	r3, [r3, #32]
 80048ce:	4a66      	ldr	r2, [pc, #408]	@ (8004a68 <HAL_RCC_OscConfig+0x4c4>)
 80048d0:	f023 0304 	bic.w	r3, r3, #4
 80048d4:	6213      	str	r3, [r2, #32]
 80048d6:	e01c      	b.n	8004912 <HAL_RCC_OscConfig+0x36e>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	2b05      	cmp	r3, #5
 80048de:	d10c      	bne.n	80048fa <HAL_RCC_OscConfig+0x356>
 80048e0:	4b61      	ldr	r3, [pc, #388]	@ (8004a68 <HAL_RCC_OscConfig+0x4c4>)
 80048e2:	6a1b      	ldr	r3, [r3, #32]
 80048e4:	4a60      	ldr	r2, [pc, #384]	@ (8004a68 <HAL_RCC_OscConfig+0x4c4>)
 80048e6:	f043 0304 	orr.w	r3, r3, #4
 80048ea:	6213      	str	r3, [r2, #32]
 80048ec:	4b5e      	ldr	r3, [pc, #376]	@ (8004a68 <HAL_RCC_OscConfig+0x4c4>)
 80048ee:	6a1b      	ldr	r3, [r3, #32]
 80048f0:	4a5d      	ldr	r2, [pc, #372]	@ (8004a68 <HAL_RCC_OscConfig+0x4c4>)
 80048f2:	f043 0301 	orr.w	r3, r3, #1
 80048f6:	6213      	str	r3, [r2, #32]
 80048f8:	e00b      	b.n	8004912 <HAL_RCC_OscConfig+0x36e>
 80048fa:	4b5b      	ldr	r3, [pc, #364]	@ (8004a68 <HAL_RCC_OscConfig+0x4c4>)
 80048fc:	6a1b      	ldr	r3, [r3, #32]
 80048fe:	4a5a      	ldr	r2, [pc, #360]	@ (8004a68 <HAL_RCC_OscConfig+0x4c4>)
 8004900:	f023 0301 	bic.w	r3, r3, #1
 8004904:	6213      	str	r3, [r2, #32]
 8004906:	4b58      	ldr	r3, [pc, #352]	@ (8004a68 <HAL_RCC_OscConfig+0x4c4>)
 8004908:	6a1b      	ldr	r3, [r3, #32]
 800490a:	4a57      	ldr	r2, [pc, #348]	@ (8004a68 <HAL_RCC_OscConfig+0x4c4>)
 800490c:	f023 0304 	bic.w	r3, r3, #4
 8004910:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d015      	beq.n	8004946 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800491a:	f7fd fe25 	bl	8002568 <HAL_GetTick>
 800491e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004920:	e00a      	b.n	8004938 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004922:	f7fd fe21 	bl	8002568 <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004930:	4293      	cmp	r3, r2
 8004932:	d901      	bls.n	8004938 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	e0b1      	b.n	8004a9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004938:	4b4b      	ldr	r3, [pc, #300]	@ (8004a68 <HAL_RCC_OscConfig+0x4c4>)
 800493a:	6a1b      	ldr	r3, [r3, #32]
 800493c:	f003 0302 	and.w	r3, r3, #2
 8004940:	2b00      	cmp	r3, #0
 8004942:	d0ee      	beq.n	8004922 <HAL_RCC_OscConfig+0x37e>
 8004944:	e014      	b.n	8004970 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004946:	f7fd fe0f 	bl	8002568 <HAL_GetTick>
 800494a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800494c:	e00a      	b.n	8004964 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800494e:	f7fd fe0b 	bl	8002568 <HAL_GetTick>
 8004952:	4602      	mov	r2, r0
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	f241 3288 	movw	r2, #5000	@ 0x1388
 800495c:	4293      	cmp	r3, r2
 800495e:	d901      	bls.n	8004964 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	e09b      	b.n	8004a9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004964:	4b40      	ldr	r3, [pc, #256]	@ (8004a68 <HAL_RCC_OscConfig+0x4c4>)
 8004966:	6a1b      	ldr	r3, [r3, #32]
 8004968:	f003 0302 	and.w	r3, r3, #2
 800496c:	2b00      	cmp	r3, #0
 800496e:	d1ee      	bne.n	800494e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004970:	7dfb      	ldrb	r3, [r7, #23]
 8004972:	2b01      	cmp	r3, #1
 8004974:	d105      	bne.n	8004982 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004976:	4b3c      	ldr	r3, [pc, #240]	@ (8004a68 <HAL_RCC_OscConfig+0x4c4>)
 8004978:	69db      	ldr	r3, [r3, #28]
 800497a:	4a3b      	ldr	r2, [pc, #236]	@ (8004a68 <HAL_RCC_OscConfig+0x4c4>)
 800497c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004980:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	69db      	ldr	r3, [r3, #28]
 8004986:	2b00      	cmp	r3, #0
 8004988:	f000 8087 	beq.w	8004a9a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800498c:	4b36      	ldr	r3, [pc, #216]	@ (8004a68 <HAL_RCC_OscConfig+0x4c4>)
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f003 030c 	and.w	r3, r3, #12
 8004994:	2b08      	cmp	r3, #8
 8004996:	d061      	beq.n	8004a5c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	69db      	ldr	r3, [r3, #28]
 800499c:	2b02      	cmp	r3, #2
 800499e:	d146      	bne.n	8004a2e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049a0:	4b33      	ldr	r3, [pc, #204]	@ (8004a70 <HAL_RCC_OscConfig+0x4cc>)
 80049a2:	2200      	movs	r2, #0
 80049a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049a6:	f7fd fddf 	bl	8002568 <HAL_GetTick>
 80049aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049ac:	e008      	b.n	80049c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049ae:	f7fd fddb 	bl	8002568 <HAL_GetTick>
 80049b2:	4602      	mov	r2, r0
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d901      	bls.n	80049c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e06d      	b.n	8004a9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049c0:	4b29      	ldr	r3, [pc, #164]	@ (8004a68 <HAL_RCC_OscConfig+0x4c4>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d1f0      	bne.n	80049ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a1b      	ldr	r3, [r3, #32]
 80049d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049d4:	d108      	bne.n	80049e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80049d6:	4b24      	ldr	r3, [pc, #144]	@ (8004a68 <HAL_RCC_OscConfig+0x4c4>)
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	4921      	ldr	r1, [pc, #132]	@ (8004a68 <HAL_RCC_OscConfig+0x4c4>)
 80049e4:	4313      	orrs	r3, r2
 80049e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049e8:	4b1f      	ldr	r3, [pc, #124]	@ (8004a68 <HAL_RCC_OscConfig+0x4c4>)
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6a19      	ldr	r1, [r3, #32]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f8:	430b      	orrs	r3, r1
 80049fa:	491b      	ldr	r1, [pc, #108]	@ (8004a68 <HAL_RCC_OscConfig+0x4c4>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a00:	4b1b      	ldr	r3, [pc, #108]	@ (8004a70 <HAL_RCC_OscConfig+0x4cc>)
 8004a02:	2201      	movs	r2, #1
 8004a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a06:	f7fd fdaf 	bl	8002568 <HAL_GetTick>
 8004a0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a0c:	e008      	b.n	8004a20 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a0e:	f7fd fdab 	bl	8002568 <HAL_GetTick>
 8004a12:	4602      	mov	r2, r0
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d901      	bls.n	8004a20 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e03d      	b.n	8004a9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a20:	4b11      	ldr	r3, [pc, #68]	@ (8004a68 <HAL_RCC_OscConfig+0x4c4>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d0f0      	beq.n	8004a0e <HAL_RCC_OscConfig+0x46a>
 8004a2c:	e035      	b.n	8004a9a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a2e:	4b10      	ldr	r3, [pc, #64]	@ (8004a70 <HAL_RCC_OscConfig+0x4cc>)
 8004a30:	2200      	movs	r2, #0
 8004a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a34:	f7fd fd98 	bl	8002568 <HAL_GetTick>
 8004a38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a3a:	e008      	b.n	8004a4e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a3c:	f7fd fd94 	bl	8002568 <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d901      	bls.n	8004a4e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e026      	b.n	8004a9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a4e:	4b06      	ldr	r3, [pc, #24]	@ (8004a68 <HAL_RCC_OscConfig+0x4c4>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1f0      	bne.n	8004a3c <HAL_RCC_OscConfig+0x498>
 8004a5a:	e01e      	b.n	8004a9a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	69db      	ldr	r3, [r3, #28]
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d107      	bne.n	8004a74 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e019      	b.n	8004a9c <HAL_RCC_OscConfig+0x4f8>
 8004a68:	40021000 	.word	0x40021000
 8004a6c:	40007000 	.word	0x40007000
 8004a70:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004a74:	4b0b      	ldr	r3, [pc, #44]	@ (8004aa4 <HAL_RCC_OscConfig+0x500>)
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a1b      	ldr	r3, [r3, #32]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d106      	bne.n	8004a96 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d001      	beq.n	8004a9a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e000      	b.n	8004a9c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004a9a:	2300      	movs	r3, #0
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3718      	adds	r7, #24
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	40021000 	.word	0x40021000

08004aa8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d101      	bne.n	8004abc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e0d0      	b.n	8004c5e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004abc:	4b6a      	ldr	r3, [pc, #424]	@ (8004c68 <HAL_RCC_ClockConfig+0x1c0>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0307 	and.w	r3, r3, #7
 8004ac4:	683a      	ldr	r2, [r7, #0]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d910      	bls.n	8004aec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aca:	4b67      	ldr	r3, [pc, #412]	@ (8004c68 <HAL_RCC_ClockConfig+0x1c0>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f023 0207 	bic.w	r2, r3, #7
 8004ad2:	4965      	ldr	r1, [pc, #404]	@ (8004c68 <HAL_RCC_ClockConfig+0x1c0>)
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ada:	4b63      	ldr	r3, [pc, #396]	@ (8004c68 <HAL_RCC_ClockConfig+0x1c0>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0307 	and.w	r3, r3, #7
 8004ae2:	683a      	ldr	r2, [r7, #0]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d001      	beq.n	8004aec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e0b8      	b.n	8004c5e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0302 	and.w	r3, r3, #2
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d020      	beq.n	8004b3a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0304 	and.w	r3, r3, #4
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d005      	beq.n	8004b10 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b04:	4b59      	ldr	r3, [pc, #356]	@ (8004c6c <HAL_RCC_ClockConfig+0x1c4>)
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	4a58      	ldr	r2, [pc, #352]	@ (8004c6c <HAL_RCC_ClockConfig+0x1c4>)
 8004b0a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004b0e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 0308 	and.w	r3, r3, #8
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d005      	beq.n	8004b28 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b1c:	4b53      	ldr	r3, [pc, #332]	@ (8004c6c <HAL_RCC_ClockConfig+0x1c4>)
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	4a52      	ldr	r2, [pc, #328]	@ (8004c6c <HAL_RCC_ClockConfig+0x1c4>)
 8004b22:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004b26:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b28:	4b50      	ldr	r3, [pc, #320]	@ (8004c6c <HAL_RCC_ClockConfig+0x1c4>)
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	494d      	ldr	r1, [pc, #308]	@ (8004c6c <HAL_RCC_ClockConfig+0x1c4>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0301 	and.w	r3, r3, #1
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d040      	beq.n	8004bc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d107      	bne.n	8004b5e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b4e:	4b47      	ldr	r3, [pc, #284]	@ (8004c6c <HAL_RCC_ClockConfig+0x1c4>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d115      	bne.n	8004b86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e07f      	b.n	8004c5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d107      	bne.n	8004b76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b66:	4b41      	ldr	r3, [pc, #260]	@ (8004c6c <HAL_RCC_ClockConfig+0x1c4>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d109      	bne.n	8004b86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e073      	b.n	8004c5e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b76:	4b3d      	ldr	r3, [pc, #244]	@ (8004c6c <HAL_RCC_ClockConfig+0x1c4>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0302 	and.w	r3, r3, #2
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d101      	bne.n	8004b86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e06b      	b.n	8004c5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b86:	4b39      	ldr	r3, [pc, #228]	@ (8004c6c <HAL_RCC_ClockConfig+0x1c4>)
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f023 0203 	bic.w	r2, r3, #3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	4936      	ldr	r1, [pc, #216]	@ (8004c6c <HAL_RCC_ClockConfig+0x1c4>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b98:	f7fd fce6 	bl	8002568 <HAL_GetTick>
 8004b9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b9e:	e00a      	b.n	8004bb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ba0:	f7fd fce2 	bl	8002568 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d901      	bls.n	8004bb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e053      	b.n	8004c5e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bb6:	4b2d      	ldr	r3, [pc, #180]	@ (8004c6c <HAL_RCC_ClockConfig+0x1c4>)
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f003 020c 	and.w	r2, r3, #12
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d1eb      	bne.n	8004ba0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004bc8:	4b27      	ldr	r3, [pc, #156]	@ (8004c68 <HAL_RCC_ClockConfig+0x1c0>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0307 	and.w	r3, r3, #7
 8004bd0:	683a      	ldr	r2, [r7, #0]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d210      	bcs.n	8004bf8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bd6:	4b24      	ldr	r3, [pc, #144]	@ (8004c68 <HAL_RCC_ClockConfig+0x1c0>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f023 0207 	bic.w	r2, r3, #7
 8004bde:	4922      	ldr	r1, [pc, #136]	@ (8004c68 <HAL_RCC_ClockConfig+0x1c0>)
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004be6:	4b20      	ldr	r3, [pc, #128]	@ (8004c68 <HAL_RCC_ClockConfig+0x1c0>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0307 	and.w	r3, r3, #7
 8004bee:	683a      	ldr	r2, [r7, #0]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d001      	beq.n	8004bf8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e032      	b.n	8004c5e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0304 	and.w	r3, r3, #4
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d008      	beq.n	8004c16 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c04:	4b19      	ldr	r3, [pc, #100]	@ (8004c6c <HAL_RCC_ClockConfig+0x1c4>)
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	4916      	ldr	r1, [pc, #88]	@ (8004c6c <HAL_RCC_ClockConfig+0x1c4>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0308 	and.w	r3, r3, #8
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d009      	beq.n	8004c36 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004c22:	4b12      	ldr	r3, [pc, #72]	@ (8004c6c <HAL_RCC_ClockConfig+0x1c4>)
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	00db      	lsls	r3, r3, #3
 8004c30:	490e      	ldr	r1, [pc, #56]	@ (8004c6c <HAL_RCC_ClockConfig+0x1c4>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c36:	f000 f821 	bl	8004c7c <HAL_RCC_GetSysClockFreq>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	4b0b      	ldr	r3, [pc, #44]	@ (8004c6c <HAL_RCC_ClockConfig+0x1c4>)
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	091b      	lsrs	r3, r3, #4
 8004c42:	f003 030f 	and.w	r3, r3, #15
 8004c46:	490a      	ldr	r1, [pc, #40]	@ (8004c70 <HAL_RCC_ClockConfig+0x1c8>)
 8004c48:	5ccb      	ldrb	r3, [r1, r3]
 8004c4a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c4e:	4a09      	ldr	r2, [pc, #36]	@ (8004c74 <HAL_RCC_ClockConfig+0x1cc>)
 8004c50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004c52:	4b09      	ldr	r3, [pc, #36]	@ (8004c78 <HAL_RCC_ClockConfig+0x1d0>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4618      	mov	r0, r3
 8004c58:	f7fd fc44 	bl	80024e4 <HAL_InitTick>

  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3710      	adds	r7, #16
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	40022000 	.word	0x40022000
 8004c6c:	40021000 	.word	0x40021000
 8004c70:	08007e10 	.word	0x08007e10
 8004c74:	20000050 	.word	0x20000050
 8004c78:	20000054 	.word	0x20000054

08004c7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b087      	sub	sp, #28
 8004c80:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004c82:	2300      	movs	r3, #0
 8004c84:	60fb      	str	r3, [r7, #12]
 8004c86:	2300      	movs	r3, #0
 8004c88:	60bb      	str	r3, [r7, #8]
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	617b      	str	r3, [r7, #20]
 8004c8e:	2300      	movs	r3, #0
 8004c90:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004c92:	2300      	movs	r3, #0
 8004c94:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004c96:	4b1e      	ldr	r3, [pc, #120]	@ (8004d10 <HAL_RCC_GetSysClockFreq+0x94>)
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f003 030c 	and.w	r3, r3, #12
 8004ca2:	2b04      	cmp	r3, #4
 8004ca4:	d002      	beq.n	8004cac <HAL_RCC_GetSysClockFreq+0x30>
 8004ca6:	2b08      	cmp	r3, #8
 8004ca8:	d003      	beq.n	8004cb2 <HAL_RCC_GetSysClockFreq+0x36>
 8004caa:	e027      	b.n	8004cfc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004cac:	4b19      	ldr	r3, [pc, #100]	@ (8004d14 <HAL_RCC_GetSysClockFreq+0x98>)
 8004cae:	613b      	str	r3, [r7, #16]
      break;
 8004cb0:	e027      	b.n	8004d02 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	0c9b      	lsrs	r3, r3, #18
 8004cb6:	f003 030f 	and.w	r3, r3, #15
 8004cba:	4a17      	ldr	r2, [pc, #92]	@ (8004d18 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004cbc:	5cd3      	ldrb	r3, [r2, r3]
 8004cbe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d010      	beq.n	8004cec <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004cca:	4b11      	ldr	r3, [pc, #68]	@ (8004d10 <HAL_RCC_GetSysClockFreq+0x94>)
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	0c5b      	lsrs	r3, r3, #17
 8004cd0:	f003 0301 	and.w	r3, r3, #1
 8004cd4:	4a11      	ldr	r2, [pc, #68]	@ (8004d1c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004cd6:	5cd3      	ldrb	r3, [r2, r3]
 8004cd8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a0d      	ldr	r2, [pc, #52]	@ (8004d14 <HAL_RCC_GetSysClockFreq+0x98>)
 8004cde:	fb03 f202 	mul.w	r2, r3, r2
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce8:	617b      	str	r3, [r7, #20]
 8004cea:	e004      	b.n	8004cf6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a0c      	ldr	r2, [pc, #48]	@ (8004d20 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004cf0:	fb02 f303 	mul.w	r3, r2, r3
 8004cf4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	613b      	str	r3, [r7, #16]
      break;
 8004cfa:	e002      	b.n	8004d02 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004cfc:	4b05      	ldr	r3, [pc, #20]	@ (8004d14 <HAL_RCC_GetSysClockFreq+0x98>)
 8004cfe:	613b      	str	r3, [r7, #16]
      break;
 8004d00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d02:	693b      	ldr	r3, [r7, #16]
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	371c      	adds	r7, #28
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bc80      	pop	{r7}
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	40021000 	.word	0x40021000
 8004d14:	007a1200 	.word	0x007a1200
 8004d18:	08007e28 	.word	0x08007e28
 8004d1c:	08007e38 	.word	0x08007e38
 8004d20:	003d0900 	.word	0x003d0900

08004d24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d24:	b480      	push	{r7}
 8004d26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d28:	4b02      	ldr	r3, [pc, #8]	@ (8004d34 <HAL_RCC_GetHCLKFreq+0x10>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bc80      	pop	{r7}
 8004d32:	4770      	bx	lr
 8004d34:	20000050 	.word	0x20000050

08004d38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d3c:	f7ff fff2 	bl	8004d24 <HAL_RCC_GetHCLKFreq>
 8004d40:	4602      	mov	r2, r0
 8004d42:	4b05      	ldr	r3, [pc, #20]	@ (8004d58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	0a1b      	lsrs	r3, r3, #8
 8004d48:	f003 0307 	and.w	r3, r3, #7
 8004d4c:	4903      	ldr	r1, [pc, #12]	@ (8004d5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d4e:	5ccb      	ldrb	r3, [r1, r3]
 8004d50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	40021000 	.word	0x40021000
 8004d5c:	08007e20 	.word	0x08007e20

08004d60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004d64:	f7ff ffde 	bl	8004d24 <HAL_RCC_GetHCLKFreq>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	4b05      	ldr	r3, [pc, #20]	@ (8004d80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	0adb      	lsrs	r3, r3, #11
 8004d70:	f003 0307 	and.w	r3, r3, #7
 8004d74:	4903      	ldr	r1, [pc, #12]	@ (8004d84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d76:	5ccb      	ldrb	r3, [r1, r3]
 8004d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	40021000 	.word	0x40021000
 8004d84:	08007e20 	.word	0x08007e20

08004d88 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004d90:	4b0a      	ldr	r3, [pc, #40]	@ (8004dbc <RCC_Delay+0x34>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a0a      	ldr	r2, [pc, #40]	@ (8004dc0 <RCC_Delay+0x38>)
 8004d96:	fba2 2303 	umull	r2, r3, r2, r3
 8004d9a:	0a5b      	lsrs	r3, r3, #9
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	fb02 f303 	mul.w	r3, r2, r3
 8004da2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004da4:	bf00      	nop
  }
  while (Delay --);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	1e5a      	subs	r2, r3, #1
 8004daa:	60fa      	str	r2, [r7, #12]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d1f9      	bne.n	8004da4 <RCC_Delay+0x1c>
}
 8004db0:	bf00      	nop
 8004db2:	bf00      	nop
 8004db4:	3714      	adds	r7, #20
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bc80      	pop	{r7}
 8004dba:	4770      	bx	lr
 8004dbc:	20000050 	.word	0x20000050
 8004dc0:	10624dd3 	.word	0x10624dd3

08004dc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b086      	sub	sp, #24
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	613b      	str	r3, [r7, #16]
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0301 	and.w	r3, r3, #1
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d07d      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004de0:	2300      	movs	r3, #0
 8004de2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004de4:	4b4f      	ldr	r3, [pc, #316]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004de6:	69db      	ldr	r3, [r3, #28]
 8004de8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d10d      	bne.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004df0:	4b4c      	ldr	r3, [pc, #304]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004df2:	69db      	ldr	r3, [r3, #28]
 8004df4:	4a4b      	ldr	r2, [pc, #300]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004df6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dfa:	61d3      	str	r3, [r2, #28]
 8004dfc:	4b49      	ldr	r3, [pc, #292]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dfe:	69db      	ldr	r3, [r3, #28]
 8004e00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e04:	60bb      	str	r3, [r7, #8]
 8004e06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e0c:	4b46      	ldr	r3, [pc, #280]	@ (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d118      	bne.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e18:	4b43      	ldr	r3, [pc, #268]	@ (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a42      	ldr	r2, [pc, #264]	@ (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e22:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e24:	f7fd fba0 	bl	8002568 <HAL_GetTick>
 8004e28:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e2a:	e008      	b.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e2c:	f7fd fb9c 	bl	8002568 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	2b64      	cmp	r3, #100	@ 0x64
 8004e38:	d901      	bls.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e06d      	b.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e3e:	4b3a      	ldr	r3, [pc, #232]	@ (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d0f0      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e4a:	4b36      	ldr	r3, [pc, #216]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e4c:	6a1b      	ldr	r3, [r3, #32]
 8004e4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e52:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d02e      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d027      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e68:	4b2e      	ldr	r3, [pc, #184]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e6a:	6a1b      	ldr	r3, [r3, #32]
 8004e6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e70:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e72:	4b2e      	ldr	r3, [pc, #184]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004e74:	2201      	movs	r2, #1
 8004e76:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e78:	4b2c      	ldr	r3, [pc, #176]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004e7e:	4a29      	ldr	r2, [pc, #164]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f003 0301 	and.w	r3, r3, #1
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d014      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e8e:	f7fd fb6b 	bl	8002568 <HAL_GetTick>
 8004e92:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e94:	e00a      	b.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e96:	f7fd fb67 	bl	8002568 <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d901      	bls.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e036      	b.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eac:	4b1d      	ldr	r3, [pc, #116]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004eae:	6a1b      	ldr	r3, [r3, #32]
 8004eb0:	f003 0302 	and.w	r3, r3, #2
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d0ee      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004eb8:	4b1a      	ldr	r3, [pc, #104]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004eba:	6a1b      	ldr	r3, [r3, #32]
 8004ebc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	4917      	ldr	r1, [pc, #92]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004eca:	7dfb      	ldrb	r3, [r7, #23]
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d105      	bne.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ed0:	4b14      	ldr	r3, [pc, #80]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ed2:	69db      	ldr	r3, [r3, #28]
 8004ed4:	4a13      	ldr	r2, [pc, #76]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ed6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004eda:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0302 	and.w	r3, r3, #2
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d008      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ee8:	4b0e      	ldr	r3, [pc, #56]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	490b      	ldr	r1, [pc, #44]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0310 	and.w	r3, r3, #16
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d008      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f06:	4b07      	ldr	r3, [pc, #28]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	4904      	ldr	r1, [pc, #16]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f14:	4313      	orrs	r3, r2
 8004f16:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3718      	adds	r7, #24
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	40021000 	.word	0x40021000
 8004f28:	40007000 	.word	0x40007000
 8004f2c:	42420440 	.word	0x42420440

08004f30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b082      	sub	sp, #8
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d101      	bne.n	8004f42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e076      	b.n	8005030 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d108      	bne.n	8004f5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f52:	d009      	beq.n	8004f68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	61da      	str	r2, [r3, #28]
 8004f5a:	e005      	b.n	8004f68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d106      	bne.n	8004f88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f7fd f87e 	bl	8002084 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2202      	movs	r2, #2
 8004f8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f9e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004fb0:	431a      	orrs	r2, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fba:	431a      	orrs	r2, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	691b      	ldr	r3, [r3, #16]
 8004fc0:	f003 0302 	and.w	r3, r3, #2
 8004fc4:	431a      	orrs	r2, r3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	695b      	ldr	r3, [r3, #20]
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	431a      	orrs	r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	699b      	ldr	r3, [r3, #24]
 8004fd4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fd8:	431a      	orrs	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	69db      	ldr	r3, [r3, #28]
 8004fde:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004fe2:	431a      	orrs	r2, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a1b      	ldr	r3, [r3, #32]
 8004fe8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fec:	ea42 0103 	orr.w	r1, r2, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ff4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	430a      	orrs	r2, r1
 8004ffe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	0c1a      	lsrs	r2, r3, #16
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f002 0204 	and.w	r2, r2, #4
 800500e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	69da      	ldr	r2, [r3, #28]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800501e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2201      	movs	r2, #1
 800502a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800502e:	2300      	movs	r3, #0
}
 8005030:	4618      	mov	r0, r3
 8005032:	3708      	adds	r7, #8
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b088      	sub	sp, #32
 800503c:	af00      	add	r7, sp, #0
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	603b      	str	r3, [r7, #0]
 8005044:	4613      	mov	r3, r2
 8005046:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005048:	f7fd fa8e 	bl	8002568 <HAL_GetTick>
 800504c:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800504e:	88fb      	ldrh	r3, [r7, #6]
 8005050:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005058:	b2db      	uxtb	r3, r3
 800505a:	2b01      	cmp	r3, #1
 800505c:	d001      	beq.n	8005062 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800505e:	2302      	movs	r3, #2
 8005060:	e12a      	b.n	80052b8 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d002      	beq.n	800506e <HAL_SPI_Transmit+0x36>
 8005068:	88fb      	ldrh	r3, [r7, #6]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d101      	bne.n	8005072 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e122      	b.n	80052b8 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005078:	2b01      	cmp	r3, #1
 800507a:	d101      	bne.n	8005080 <HAL_SPI_Transmit+0x48>
 800507c:	2302      	movs	r3, #2
 800507e:	e11b      	b.n	80052b8 <HAL_SPI_Transmit+0x280>
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2203      	movs	r2, #3
 800508c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2200      	movs	r2, #0
 8005094:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	68ba      	ldr	r2, [r7, #8]
 800509a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	88fa      	ldrh	r2, [r7, #6]
 80050a0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	88fa      	ldrh	r2, [r7, #6]
 80050a6:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2200      	movs	r2, #0
 80050ac:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2200      	movs	r2, #0
 80050b2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2200      	movs	r2, #0
 80050be:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050ce:	d10f      	bne.n	80050f0 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050de:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80050ee:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050fa:	2b40      	cmp	r3, #64	@ 0x40
 80050fc:	d007      	beq.n	800510e <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800510c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005116:	d152      	bne.n	80051be <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d002      	beq.n	8005126 <HAL_SPI_Transmit+0xee>
 8005120:	8b7b      	ldrh	r3, [r7, #26]
 8005122:	2b01      	cmp	r3, #1
 8005124:	d145      	bne.n	80051b2 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800512a:	881a      	ldrh	r2, [r3, #0]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005136:	1c9a      	adds	r2, r3, #2
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005140:	b29b      	uxth	r3, r3
 8005142:	3b01      	subs	r3, #1
 8005144:	b29a      	uxth	r2, r3
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800514a:	e032      	b.n	80051b2 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	f003 0302 	and.w	r3, r3, #2
 8005156:	2b02      	cmp	r3, #2
 8005158:	d112      	bne.n	8005180 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800515e:	881a      	ldrh	r2, [r3, #0]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800516a:	1c9a      	adds	r2, r3, #2
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005174:	b29b      	uxth	r3, r3
 8005176:	3b01      	subs	r3, #1
 8005178:	b29a      	uxth	r2, r3
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800517e:	e018      	b.n	80051b2 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005180:	f7fd f9f2 	bl	8002568 <HAL_GetTick>
 8005184:	4602      	mov	r2, r0
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	683a      	ldr	r2, [r7, #0]
 800518c:	429a      	cmp	r2, r3
 800518e:	d803      	bhi.n	8005198 <HAL_SPI_Transmit+0x160>
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005196:	d102      	bne.n	800519e <HAL_SPI_Transmit+0x166>
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d109      	bne.n	80051b2 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2201      	movs	r2, #1
 80051a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e082      	b.n	80052b8 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d1c7      	bne.n	800514c <HAL_SPI_Transmit+0x114>
 80051bc:	e053      	b.n	8005266 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d002      	beq.n	80051cc <HAL_SPI_Transmit+0x194>
 80051c6:	8b7b      	ldrh	r3, [r7, #26]
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d147      	bne.n	800525c <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	330c      	adds	r3, #12
 80051d6:	7812      	ldrb	r2, [r2, #0]
 80051d8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051de:	1c5a      	adds	r2, r3, #1
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	3b01      	subs	r3, #1
 80051ec:	b29a      	uxth	r2, r3
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80051f2:	e033      	b.n	800525c <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f003 0302 	and.w	r3, r3, #2
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d113      	bne.n	800522a <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	330c      	adds	r3, #12
 800520c:	7812      	ldrb	r2, [r2, #0]
 800520e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005214:	1c5a      	adds	r2, r3, #1
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800521e:	b29b      	uxth	r3, r3
 8005220:	3b01      	subs	r3, #1
 8005222:	b29a      	uxth	r2, r3
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005228:	e018      	b.n	800525c <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800522a:	f7fd f99d 	bl	8002568 <HAL_GetTick>
 800522e:	4602      	mov	r2, r0
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	1ad3      	subs	r3, r2, r3
 8005234:	683a      	ldr	r2, [r7, #0]
 8005236:	429a      	cmp	r2, r3
 8005238:	d803      	bhi.n	8005242 <HAL_SPI_Transmit+0x20a>
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005240:	d102      	bne.n	8005248 <HAL_SPI_Transmit+0x210>
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d109      	bne.n	800525c <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2200      	movs	r2, #0
 8005254:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	e02d      	b.n	80052b8 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005260:	b29b      	uxth	r3, r3
 8005262:	2b00      	cmp	r3, #0
 8005264:	d1c6      	bne.n	80051f4 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005266:	69fa      	ldr	r2, [r7, #28]
 8005268:	6839      	ldr	r1, [r7, #0]
 800526a:	68f8      	ldr	r0, [r7, #12]
 800526c:	f000 f8b0 	bl	80053d0 <SPI_EndRxTxTransaction>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d002      	beq.n	800527c <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2220      	movs	r2, #32
 800527a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d10a      	bne.n	800529a <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005284:	2300      	movs	r3, #0
 8005286:	617b      	str	r3, [r7, #20]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	617b      	str	r3, [r7, #20]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	617b      	str	r3, [r7, #20]
 8005298:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2201      	movs	r2, #1
 800529e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d001      	beq.n	80052b6 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e000      	b.n	80052b8 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80052b6:	2300      	movs	r3, #0
  }
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3720      	adds	r7, #32
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b088      	sub	sp, #32
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	603b      	str	r3, [r7, #0]
 80052cc:	4613      	mov	r3, r2
 80052ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80052d0:	f7fd f94a 	bl	8002568 <HAL_GetTick>
 80052d4:	4602      	mov	r2, r0
 80052d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052d8:	1a9b      	subs	r3, r3, r2
 80052da:	683a      	ldr	r2, [r7, #0]
 80052dc:	4413      	add	r3, r2
 80052de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80052e0:	f7fd f942 	bl	8002568 <HAL_GetTick>
 80052e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80052e6:	4b39      	ldr	r3, [pc, #228]	@ (80053cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	015b      	lsls	r3, r3, #5
 80052ec:	0d1b      	lsrs	r3, r3, #20
 80052ee:	69fa      	ldr	r2, [r7, #28]
 80052f0:	fb02 f303 	mul.w	r3, r2, r3
 80052f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80052f6:	e054      	b.n	80053a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052fe:	d050      	beq.n	80053a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005300:	f7fd f932 	bl	8002568 <HAL_GetTick>
 8005304:	4602      	mov	r2, r0
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	69fa      	ldr	r2, [r7, #28]
 800530c:	429a      	cmp	r2, r3
 800530e:	d902      	bls.n	8005316 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d13d      	bne.n	8005392 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	685a      	ldr	r2, [r3, #4]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005324:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800532e:	d111      	bne.n	8005354 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005338:	d004      	beq.n	8005344 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005342:	d107      	bne.n	8005354 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005352:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005358:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800535c:	d10f      	bne.n	800537e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800536c:	601a      	str	r2, [r3, #0]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800537c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2201      	movs	r2, #1
 8005382:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	e017      	b.n	80053c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d101      	bne.n	800539c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005398:	2300      	movs	r3, #0
 800539a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	3b01      	subs	r3, #1
 80053a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	689a      	ldr	r2, [r3, #8]
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	4013      	ands	r3, r2
 80053ac:	68ba      	ldr	r2, [r7, #8]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	bf0c      	ite	eq
 80053b2:	2301      	moveq	r3, #1
 80053b4:	2300      	movne	r3, #0
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	461a      	mov	r2, r3
 80053ba:	79fb      	ldrb	r3, [r7, #7]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d19b      	bne.n	80052f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3720      	adds	r7, #32
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	20000050 	.word	0x20000050

080053d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b086      	sub	sp, #24
 80053d4:	af02      	add	r7, sp, #8
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	9300      	str	r3, [sp, #0]
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	2201      	movs	r2, #1
 80053e4:	2102      	movs	r1, #2
 80053e6:	68f8      	ldr	r0, [r7, #12]
 80053e8:	f7ff ff6a 	bl	80052c0 <SPI_WaitFlagStateUntilTimeout>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d007      	beq.n	8005402 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053f6:	f043 0220 	orr.w	r2, r3, #32
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e013      	b.n	800542a <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	9300      	str	r3, [sp, #0]
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	2200      	movs	r2, #0
 800540a:	2180      	movs	r1, #128	@ 0x80
 800540c:	68f8      	ldr	r0, [r7, #12]
 800540e:	f7ff ff57 	bl	80052c0 <SPI_WaitFlagStateUntilTimeout>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d007      	beq.n	8005428 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800541c:	f043 0220 	orr.w	r2, r3, #32
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005424:	2303      	movs	r3, #3
 8005426:	e000      	b.n	800542a <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	3710      	adds	r7, #16
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}

08005432 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005432:	b580      	push	{r7, lr}
 8005434:	b082      	sub	sp, #8
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d101      	bne.n	8005444 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e042      	b.n	80054ca <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800544a:	b2db      	uxtb	r3, r3
 800544c:	2b00      	cmp	r3, #0
 800544e:	d106      	bne.n	800545e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f7fc ffb3 	bl	80023c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2224      	movs	r2, #36	@ 0x24
 8005462:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	68da      	ldr	r2, [r3, #12]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005474:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 fcd4 	bl	8005e24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	691a      	ldr	r2, [r3, #16]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800548a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	695a      	ldr	r2, [r3, #20]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800549a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	68da      	ldr	r2, [r3, #12]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80054aa:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2220      	movs	r2, #32
 80054b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2220      	movs	r2, #32
 80054be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3708      	adds	r7, #8
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}

080054d2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054d2:	b580      	push	{r7, lr}
 80054d4:	b084      	sub	sp, #16
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	60f8      	str	r0, [r7, #12]
 80054da:	60b9      	str	r1, [r7, #8]
 80054dc:	4613      	mov	r3, r2
 80054de:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	2b20      	cmp	r3, #32
 80054ea:	d112      	bne.n	8005512 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d002      	beq.n	80054f8 <HAL_UART_Receive_IT+0x26>
 80054f2:	88fb      	ldrh	r3, [r7, #6]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d101      	bne.n	80054fc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e00b      	b.n	8005514 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2200      	movs	r2, #0
 8005500:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005502:	88fb      	ldrh	r3, [r7, #6]
 8005504:	461a      	mov	r2, r3
 8005506:	68b9      	ldr	r1, [r7, #8]
 8005508:	68f8      	ldr	r0, [r7, #12]
 800550a:	f000 fab6 	bl	8005a7a <UART_Start_Receive_IT>
 800550e:	4603      	mov	r3, r0
 8005510:	e000      	b.n	8005514 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005512:	2302      	movs	r3, #2
  }
}
 8005514:	4618      	mov	r0, r3
 8005516:	3710      	adds	r7, #16
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}

0800551c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b0ba      	sub	sp, #232	@ 0xe8
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	695b      	ldr	r3, [r3, #20]
 800553e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005542:	2300      	movs	r3, #0
 8005544:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005548:	2300      	movs	r3, #0
 800554a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800554e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005552:	f003 030f 	and.w	r3, r3, #15
 8005556:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800555a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800555e:	2b00      	cmp	r3, #0
 8005560:	d10f      	bne.n	8005582 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005566:	f003 0320 	and.w	r3, r3, #32
 800556a:	2b00      	cmp	r3, #0
 800556c:	d009      	beq.n	8005582 <HAL_UART_IRQHandler+0x66>
 800556e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005572:	f003 0320 	and.w	r3, r3, #32
 8005576:	2b00      	cmp	r3, #0
 8005578:	d003      	beq.n	8005582 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 fb93 	bl	8005ca6 <UART_Receive_IT>
      return;
 8005580:	e25b      	b.n	8005a3a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005582:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005586:	2b00      	cmp	r3, #0
 8005588:	f000 80de 	beq.w	8005748 <HAL_UART_IRQHandler+0x22c>
 800558c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005590:	f003 0301 	and.w	r3, r3, #1
 8005594:	2b00      	cmp	r3, #0
 8005596:	d106      	bne.n	80055a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800559c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	f000 80d1 	beq.w	8005748 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80055a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055aa:	f003 0301 	and.w	r3, r3, #1
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d00b      	beq.n	80055ca <HAL_UART_IRQHandler+0xae>
 80055b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d005      	beq.n	80055ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055c2:	f043 0201 	orr.w	r2, r3, #1
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055ce:	f003 0304 	and.w	r3, r3, #4
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d00b      	beq.n	80055ee <HAL_UART_IRQHandler+0xd2>
 80055d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055da:	f003 0301 	and.w	r3, r3, #1
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d005      	beq.n	80055ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055e6:	f043 0202 	orr.w	r2, r3, #2
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055f2:	f003 0302 	and.w	r3, r3, #2
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d00b      	beq.n	8005612 <HAL_UART_IRQHandler+0xf6>
 80055fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055fe:	f003 0301 	and.w	r3, r3, #1
 8005602:	2b00      	cmp	r3, #0
 8005604:	d005      	beq.n	8005612 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800560a:	f043 0204 	orr.w	r2, r3, #4
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005616:	f003 0308 	and.w	r3, r3, #8
 800561a:	2b00      	cmp	r3, #0
 800561c:	d011      	beq.n	8005642 <HAL_UART_IRQHandler+0x126>
 800561e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005622:	f003 0320 	and.w	r3, r3, #32
 8005626:	2b00      	cmp	r3, #0
 8005628:	d105      	bne.n	8005636 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800562a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800562e:	f003 0301 	and.w	r3, r3, #1
 8005632:	2b00      	cmp	r3, #0
 8005634:	d005      	beq.n	8005642 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800563a:	f043 0208 	orr.w	r2, r3, #8
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005646:	2b00      	cmp	r3, #0
 8005648:	f000 81f2 	beq.w	8005a30 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800564c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005650:	f003 0320 	and.w	r3, r3, #32
 8005654:	2b00      	cmp	r3, #0
 8005656:	d008      	beq.n	800566a <HAL_UART_IRQHandler+0x14e>
 8005658:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800565c:	f003 0320 	and.w	r3, r3, #32
 8005660:	2b00      	cmp	r3, #0
 8005662:	d002      	beq.n	800566a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 fb1e 	bl	8005ca6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	695b      	ldr	r3, [r3, #20]
 8005670:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005674:	2b00      	cmp	r3, #0
 8005676:	bf14      	ite	ne
 8005678:	2301      	movne	r3, #1
 800567a:	2300      	moveq	r3, #0
 800567c:	b2db      	uxtb	r3, r3
 800567e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005686:	f003 0308 	and.w	r3, r3, #8
 800568a:	2b00      	cmp	r3, #0
 800568c:	d103      	bne.n	8005696 <HAL_UART_IRQHandler+0x17a>
 800568e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005692:	2b00      	cmp	r3, #0
 8005694:	d04f      	beq.n	8005736 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 fa28 	bl	8005aec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	695b      	ldr	r3, [r3, #20]
 80056a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d041      	beq.n	800572e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	3314      	adds	r3, #20
 80056b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80056b8:	e853 3f00 	ldrex	r3, [r3]
 80056bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80056c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80056c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	3314      	adds	r3, #20
 80056d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80056d6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80056da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80056e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80056e6:	e841 2300 	strex	r3, r2, [r1]
 80056ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80056ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d1d9      	bne.n	80056aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d013      	beq.n	8005726 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005702:	4a7e      	ldr	r2, [pc, #504]	@ (80058fc <HAL_UART_IRQHandler+0x3e0>)
 8005704:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800570a:	4618      	mov	r0, r3
 800570c:	f7fd fca0 	bl	8003050 <HAL_DMA_Abort_IT>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d016      	beq.n	8005744 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800571a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005720:	4610      	mov	r0, r2
 8005722:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005724:	e00e      	b.n	8005744 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 f993 	bl	8005a52 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800572c:	e00a      	b.n	8005744 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 f98f 	bl	8005a52 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005734:	e006      	b.n	8005744 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 f98b 	bl	8005a52 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005742:	e175      	b.n	8005a30 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005744:	bf00      	nop
    return;
 8005746:	e173      	b.n	8005a30 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800574c:	2b01      	cmp	r3, #1
 800574e:	f040 814f 	bne.w	80059f0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005756:	f003 0310 	and.w	r3, r3, #16
 800575a:	2b00      	cmp	r3, #0
 800575c:	f000 8148 	beq.w	80059f0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005764:	f003 0310 	and.w	r3, r3, #16
 8005768:	2b00      	cmp	r3, #0
 800576a:	f000 8141 	beq.w	80059f0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800576e:	2300      	movs	r3, #0
 8005770:	60bb      	str	r3, [r7, #8]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	60bb      	str	r3, [r7, #8]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	60bb      	str	r3, [r7, #8]
 8005782:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800578e:	2b00      	cmp	r3, #0
 8005790:	f000 80b6 	beq.w	8005900 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80057a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f000 8145 	beq.w	8005a34 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80057ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80057b2:	429a      	cmp	r2, r3
 80057b4:	f080 813e 	bcs.w	8005a34 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80057be:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057c4:	699b      	ldr	r3, [r3, #24]
 80057c6:	2b20      	cmp	r3, #32
 80057c8:	f000 8088 	beq.w	80058dc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	330c      	adds	r3, #12
 80057d2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80057da:	e853 3f00 	ldrex	r3, [r3]
 80057de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80057e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80057e6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057ea:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	330c      	adds	r3, #12
 80057f4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80057f8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80057fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005800:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005804:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005808:	e841 2300 	strex	r3, r2, [r1]
 800580c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005810:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005814:	2b00      	cmp	r3, #0
 8005816:	d1d9      	bne.n	80057cc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	3314      	adds	r3, #20
 800581e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005820:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005822:	e853 3f00 	ldrex	r3, [r3]
 8005826:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005828:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800582a:	f023 0301 	bic.w	r3, r3, #1
 800582e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	3314      	adds	r3, #20
 8005838:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800583c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005840:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005842:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005844:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005848:	e841 2300 	strex	r3, r2, [r1]
 800584c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800584e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005850:	2b00      	cmp	r3, #0
 8005852:	d1e1      	bne.n	8005818 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	3314      	adds	r3, #20
 800585a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800585c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800585e:	e853 3f00 	ldrex	r3, [r3]
 8005862:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005864:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005866:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800586a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	3314      	adds	r3, #20
 8005874:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005878:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800587a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800587e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005880:	e841 2300 	strex	r3, r2, [r1]
 8005884:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005886:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005888:	2b00      	cmp	r3, #0
 800588a:	d1e3      	bne.n	8005854 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2220      	movs	r2, #32
 8005890:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	330c      	adds	r3, #12
 80058a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058a4:	e853 3f00 	ldrex	r3, [r3]
 80058a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80058aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80058ac:	f023 0310 	bic.w	r3, r3, #16
 80058b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	330c      	adds	r3, #12
 80058ba:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80058be:	65ba      	str	r2, [r7, #88]	@ 0x58
 80058c0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80058c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80058c6:	e841 2300 	strex	r3, r2, [r1]
 80058ca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80058cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d1e3      	bne.n	800589a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058d6:	4618      	mov	r0, r3
 80058d8:	f7fd fb7f 	bl	8002fda <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2202      	movs	r2, #2
 80058e0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	4619      	mov	r1, r3
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 f8b6 	bl	8005a64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80058f8:	e09c      	b.n	8005a34 <HAL_UART_IRQHandler+0x518>
 80058fa:	bf00      	nop
 80058fc:	08005bb1 	.word	0x08005bb1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005908:	b29b      	uxth	r3, r3
 800590a:	1ad3      	subs	r3, r2, r3
 800590c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005914:	b29b      	uxth	r3, r3
 8005916:	2b00      	cmp	r3, #0
 8005918:	f000 808e 	beq.w	8005a38 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800591c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005920:	2b00      	cmp	r3, #0
 8005922:	f000 8089 	beq.w	8005a38 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	330c      	adds	r3, #12
 800592c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800592e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005930:	e853 3f00 	ldrex	r3, [r3]
 8005934:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005936:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005938:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800593c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	330c      	adds	r3, #12
 8005946:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800594a:	647a      	str	r2, [r7, #68]	@ 0x44
 800594c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800594e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005950:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005952:	e841 2300 	strex	r3, r2, [r1]
 8005956:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005958:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800595a:	2b00      	cmp	r3, #0
 800595c:	d1e3      	bne.n	8005926 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	3314      	adds	r3, #20
 8005964:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005968:	e853 3f00 	ldrex	r3, [r3]
 800596c:	623b      	str	r3, [r7, #32]
   return(result);
 800596e:	6a3b      	ldr	r3, [r7, #32]
 8005970:	f023 0301 	bic.w	r3, r3, #1
 8005974:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	3314      	adds	r3, #20
 800597e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005982:	633a      	str	r2, [r7, #48]	@ 0x30
 8005984:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005986:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005988:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800598a:	e841 2300 	strex	r3, r2, [r1]
 800598e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005992:	2b00      	cmp	r3, #0
 8005994:	d1e3      	bne.n	800595e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2220      	movs	r2, #32
 800599a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	330c      	adds	r3, #12
 80059aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	e853 3f00 	ldrex	r3, [r3]
 80059b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f023 0310 	bic.w	r3, r3, #16
 80059ba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	330c      	adds	r3, #12
 80059c4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80059c8:	61fa      	str	r2, [r7, #28]
 80059ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059cc:	69b9      	ldr	r1, [r7, #24]
 80059ce:	69fa      	ldr	r2, [r7, #28]
 80059d0:	e841 2300 	strex	r3, r2, [r1]
 80059d4:	617b      	str	r3, [r7, #20]
   return(result);
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d1e3      	bne.n	80059a4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2202      	movs	r2, #2
 80059e0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80059e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80059e6:	4619      	mov	r1, r3
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 f83b 	bl	8005a64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80059ee:	e023      	b.n	8005a38 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80059f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d009      	beq.n	8005a10 <HAL_UART_IRQHandler+0x4f4>
 80059fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d003      	beq.n	8005a10 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f000 f8e5 	bl	8005bd8 <UART_Transmit_IT>
    return;
 8005a0e:	e014      	b.n	8005a3a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005a10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00e      	beq.n	8005a3a <HAL_UART_IRQHandler+0x51e>
 8005a1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d008      	beq.n	8005a3a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f000 f924 	bl	8005c76 <UART_EndTransmit_IT>
    return;
 8005a2e:	e004      	b.n	8005a3a <HAL_UART_IRQHandler+0x51e>
    return;
 8005a30:	bf00      	nop
 8005a32:	e002      	b.n	8005a3a <HAL_UART_IRQHandler+0x51e>
      return;
 8005a34:	bf00      	nop
 8005a36:	e000      	b.n	8005a3a <HAL_UART_IRQHandler+0x51e>
      return;
 8005a38:	bf00      	nop
  }
}
 8005a3a:	37e8      	adds	r7, #232	@ 0xe8
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005a48:	bf00      	nop
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bc80      	pop	{r7}
 8005a50:	4770      	bx	lr

08005a52 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a52:	b480      	push	{r7}
 8005a54:	b083      	sub	sp, #12
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005a5a:	bf00      	nop
 8005a5c:	370c      	adds	r7, #12
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bc80      	pop	{r7}
 8005a62:	4770      	bx	lr

08005a64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a70:	bf00      	nop
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bc80      	pop	{r7}
 8005a78:	4770      	bx	lr

08005a7a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a7a:	b480      	push	{r7}
 8005a7c:	b085      	sub	sp, #20
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	60f8      	str	r0, [r7, #12]
 8005a82:	60b9      	str	r1, [r7, #8]
 8005a84:	4613      	mov	r3, r2
 8005a86:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	68ba      	ldr	r2, [r7, #8]
 8005a8c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	88fa      	ldrh	r2, [r7, #6]
 8005a92:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	88fa      	ldrh	r2, [r7, #6]
 8005a98:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2222      	movs	r2, #34	@ 0x22
 8005aa4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	691b      	ldr	r3, [r3, #16]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d007      	beq.n	8005ac0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	68da      	ldr	r2, [r3, #12]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005abe:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	695a      	ldr	r2, [r3, #20]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f042 0201 	orr.w	r2, r2, #1
 8005ace:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	68da      	ldr	r2, [r3, #12]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f042 0220 	orr.w	r2, r2, #32
 8005ade:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005ae0:	2300      	movs	r3, #0
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3714      	adds	r7, #20
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bc80      	pop	{r7}
 8005aea:	4770      	bx	lr

08005aec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b095      	sub	sp, #84	@ 0x54
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	330c      	adds	r3, #12
 8005afa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005afc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005afe:	e853 3f00 	ldrex	r3, [r3]
 8005b02:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b06:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	330c      	adds	r3, #12
 8005b12:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005b14:	643a      	str	r2, [r7, #64]	@ 0x40
 8005b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b18:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005b1a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b1c:	e841 2300 	strex	r3, r2, [r1]
 8005b20:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d1e5      	bne.n	8005af4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	3314      	adds	r3, #20
 8005b2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b30:	6a3b      	ldr	r3, [r7, #32]
 8005b32:	e853 3f00 	ldrex	r3, [r3]
 8005b36:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	f023 0301 	bic.w	r3, r3, #1
 8005b3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	3314      	adds	r3, #20
 8005b46:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b48:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b50:	e841 2300 	strex	r3, r2, [r1]
 8005b54:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d1e5      	bne.n	8005b28 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d119      	bne.n	8005b98 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	330c      	adds	r3, #12
 8005b6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	e853 3f00 	ldrex	r3, [r3]
 8005b72:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	f023 0310 	bic.w	r3, r3, #16
 8005b7a:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	330c      	adds	r3, #12
 8005b82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b84:	61ba      	str	r2, [r7, #24]
 8005b86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b88:	6979      	ldr	r1, [r7, #20]
 8005b8a:	69ba      	ldr	r2, [r7, #24]
 8005b8c:	e841 2300 	strex	r3, r2, [r1]
 8005b90:	613b      	str	r3, [r7, #16]
   return(result);
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d1e5      	bne.n	8005b64 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2220      	movs	r2, #32
 8005b9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005ba6:	bf00      	nop
 8005ba8:	3754      	adds	r7, #84	@ 0x54
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bc80      	pop	{r7}
 8005bae:	4770      	bx	lr

08005bb0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b084      	sub	sp, #16
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bbc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005bca:	68f8      	ldr	r0, [r7, #12]
 8005bcc:	f7ff ff41 	bl	8005a52 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bd0:	bf00      	nop
 8005bd2:	3710      	adds	r7, #16
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b085      	sub	sp, #20
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	2b21      	cmp	r3, #33	@ 0x21
 8005bea:	d13e      	bne.n	8005c6a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bf4:	d114      	bne.n	8005c20 <UART_Transmit_IT+0x48>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d110      	bne.n	8005c20 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a1b      	ldr	r3, [r3, #32]
 8005c02:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	881b      	ldrh	r3, [r3, #0]
 8005c08:	461a      	mov	r2, r3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c12:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6a1b      	ldr	r3, [r3, #32]
 8005c18:	1c9a      	adds	r2, r3, #2
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	621a      	str	r2, [r3, #32]
 8005c1e:	e008      	b.n	8005c32 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6a1b      	ldr	r3, [r3, #32]
 8005c24:	1c59      	adds	r1, r3, #1
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	6211      	str	r1, [r2, #32]
 8005c2a:	781a      	ldrb	r2, [r3, #0]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	3b01      	subs	r3, #1
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	4619      	mov	r1, r3
 8005c40:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d10f      	bne.n	8005c66 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	68da      	ldr	r2, [r3, #12]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005c54:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68da      	ldr	r2, [r3, #12]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c64:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005c66:	2300      	movs	r3, #0
 8005c68:	e000      	b.n	8005c6c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005c6a:	2302      	movs	r3, #2
  }
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3714      	adds	r7, #20
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bc80      	pop	{r7}
 8005c74:	4770      	bx	lr

08005c76 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c76:	b580      	push	{r7, lr}
 8005c78:	b082      	sub	sp, #8
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68da      	ldr	r2, [r3, #12]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c8c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2220      	movs	r2, #32
 8005c92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f7ff fed2 	bl	8005a40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3708      	adds	r7, #8
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}

08005ca6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005ca6:	b580      	push	{r7, lr}
 8005ca8:	b08c      	sub	sp, #48	@ 0x30
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	2b22      	cmp	r3, #34	@ 0x22
 8005cb8:	f040 80ae 	bne.w	8005e18 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cc4:	d117      	bne.n	8005cf6 <UART_Receive_IT+0x50>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d113      	bne.n	8005cf6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cd6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ce4:	b29a      	uxth	r2, r3
 8005ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ce8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cee:	1c9a      	adds	r2, r3, #2
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	629a      	str	r2, [r3, #40]	@ 0x28
 8005cf4:	e026      	b.n	8005d44 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d08:	d007      	beq.n	8005d1a <UART_Receive_IT+0x74>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d10a      	bne.n	8005d28 <UART_Receive_IT+0x82>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d106      	bne.n	8005d28 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	b2da      	uxtb	r2, r3
 8005d22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d24:	701a      	strb	r2, [r3, #0]
 8005d26:	e008      	b.n	8005d3a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d34:	b2da      	uxtb	r2, r3
 8005d36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d38:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d3e:	1c5a      	adds	r2, r3, #1
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	3b01      	subs	r3, #1
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	4619      	mov	r1, r3
 8005d52:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d15d      	bne.n	8005e14 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	68da      	ldr	r2, [r3, #12]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f022 0220 	bic.w	r2, r2, #32
 8005d66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	68da      	ldr	r2, [r3, #12]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005d76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	695a      	ldr	r2, [r3, #20]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f022 0201 	bic.w	r2, r2, #1
 8005d86:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2220      	movs	r2, #32
 8005d8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d135      	bne.n	8005e0a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	330c      	adds	r3, #12
 8005daa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	e853 3f00 	ldrex	r3, [r3]
 8005db2:	613b      	str	r3, [r7, #16]
   return(result);
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	f023 0310 	bic.w	r3, r3, #16
 8005dba:	627b      	str	r3, [r7, #36]	@ 0x24
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	330c      	adds	r3, #12
 8005dc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dc4:	623a      	str	r2, [r7, #32]
 8005dc6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc8:	69f9      	ldr	r1, [r7, #28]
 8005dca:	6a3a      	ldr	r2, [r7, #32]
 8005dcc:	e841 2300 	strex	r3, r2, [r1]
 8005dd0:	61bb      	str	r3, [r7, #24]
   return(result);
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d1e5      	bne.n	8005da4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 0310 	and.w	r3, r3, #16
 8005de2:	2b10      	cmp	r3, #16
 8005de4:	d10a      	bne.n	8005dfc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005de6:	2300      	movs	r3, #0
 8005de8:	60fb      	str	r3, [r7, #12]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	60fb      	str	r3, [r7, #12]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	60fb      	str	r3, [r7, #12]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005e00:	4619      	mov	r1, r3
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f7ff fe2e 	bl	8005a64 <HAL_UARTEx_RxEventCallback>
 8005e08:	e002      	b.n	8005e10 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f7fc f8aa 	bl	8001f64 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005e10:	2300      	movs	r3, #0
 8005e12:	e002      	b.n	8005e1a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005e14:	2300      	movs	r3, #0
 8005e16:	e000      	b.n	8005e1a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005e18:	2302      	movs	r3, #2
  }
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3730      	adds	r7, #48	@ 0x30
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
	...

08005e24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b084      	sub	sp, #16
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	68da      	ldr	r2, [r3, #12]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	430a      	orrs	r2, r1
 8005e40:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	689a      	ldr	r2, [r3, #8]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	431a      	orrs	r2, r3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	695b      	ldr	r3, [r3, #20]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005e5e:	f023 030c 	bic.w	r3, r3, #12
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	6812      	ldr	r2, [r2, #0]
 8005e66:	68b9      	ldr	r1, [r7, #8]
 8005e68:	430b      	orrs	r3, r1
 8005e6a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	695b      	ldr	r3, [r3, #20]
 8005e72:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	699a      	ldr	r2, [r3, #24]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	430a      	orrs	r2, r1
 8005e80:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a2c      	ldr	r2, [pc, #176]	@ (8005f38 <UART_SetConfig+0x114>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d103      	bne.n	8005e94 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005e8c:	f7fe ff68 	bl	8004d60 <HAL_RCC_GetPCLK2Freq>
 8005e90:	60f8      	str	r0, [r7, #12]
 8005e92:	e002      	b.n	8005e9a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005e94:	f7fe ff50 	bl	8004d38 <HAL_RCC_GetPCLK1Freq>
 8005e98:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e9a:	68fa      	ldr	r2, [r7, #12]
 8005e9c:	4613      	mov	r3, r2
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	4413      	add	r3, r2
 8005ea2:	009a      	lsls	r2, r3, #2
 8005ea4:	441a      	add	r2, r3
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eb0:	4a22      	ldr	r2, [pc, #136]	@ (8005f3c <UART_SetConfig+0x118>)
 8005eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8005eb6:	095b      	lsrs	r3, r3, #5
 8005eb8:	0119      	lsls	r1, r3, #4
 8005eba:	68fa      	ldr	r2, [r7, #12]
 8005ebc:	4613      	mov	r3, r2
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	4413      	add	r3, r2
 8005ec2:	009a      	lsls	r2, r3, #2
 8005ec4:	441a      	add	r2, r3
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ed0:	4b1a      	ldr	r3, [pc, #104]	@ (8005f3c <UART_SetConfig+0x118>)
 8005ed2:	fba3 0302 	umull	r0, r3, r3, r2
 8005ed6:	095b      	lsrs	r3, r3, #5
 8005ed8:	2064      	movs	r0, #100	@ 0x64
 8005eda:	fb00 f303 	mul.w	r3, r0, r3
 8005ede:	1ad3      	subs	r3, r2, r3
 8005ee0:	011b      	lsls	r3, r3, #4
 8005ee2:	3332      	adds	r3, #50	@ 0x32
 8005ee4:	4a15      	ldr	r2, [pc, #84]	@ (8005f3c <UART_SetConfig+0x118>)
 8005ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eea:	095b      	lsrs	r3, r3, #5
 8005eec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005ef0:	4419      	add	r1, r3
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	4613      	mov	r3, r2
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	4413      	add	r3, r2
 8005efa:	009a      	lsls	r2, r3, #2
 8005efc:	441a      	add	r2, r3
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f08:	4b0c      	ldr	r3, [pc, #48]	@ (8005f3c <UART_SetConfig+0x118>)
 8005f0a:	fba3 0302 	umull	r0, r3, r3, r2
 8005f0e:	095b      	lsrs	r3, r3, #5
 8005f10:	2064      	movs	r0, #100	@ 0x64
 8005f12:	fb00 f303 	mul.w	r3, r0, r3
 8005f16:	1ad3      	subs	r3, r2, r3
 8005f18:	011b      	lsls	r3, r3, #4
 8005f1a:	3332      	adds	r3, #50	@ 0x32
 8005f1c:	4a07      	ldr	r2, [pc, #28]	@ (8005f3c <UART_SetConfig+0x118>)
 8005f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f22:	095b      	lsrs	r3, r3, #5
 8005f24:	f003 020f 	and.w	r2, r3, #15
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	440a      	add	r2, r1
 8005f2e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005f30:	bf00      	nop
 8005f32:	3710      	adds	r7, #16
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	40013800 	.word	0x40013800
 8005f3c:	51eb851f 	.word	0x51eb851f

08005f40 <DEV_SPI_WriteByte>:
#include "DEV_Config.h"
#include "stm32f1xx_hal_spi.h"

extern SPI_HandleTypeDef hspi1;
void DEV_SPI_WriteByte(UBYTE value)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b082      	sub	sp, #8
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	4603      	mov	r3, r0
 8005f48:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&hspi1, &value, 1, 1000);
 8005f4a:	1df9      	adds	r1, r7, #7
 8005f4c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005f50:	2201      	movs	r2, #1
 8005f52:	4803      	ldr	r0, [pc, #12]	@ (8005f60 <DEV_SPI_WriteByte+0x20>)
 8005f54:	f7ff f870 	bl	8005038 <HAL_SPI_Transmit>
}
 8005f58:	bf00      	nop
 8005f5a:	3708      	adds	r7, #8
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	200003b0 	.word	0x200003b0

08005f64 <EPD_2IN9_V2_Reset>:
/******************************************************************************
function :	Software reset
parameter:
******************************************************************************/
static void EPD_2IN9_V2_Reset(void)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8005f68:	2201      	movs	r2, #1
 8005f6a:	2102      	movs	r1, #2
 8005f6c:	480b      	ldr	r0, [pc, #44]	@ (8005f9c <EPD_2IN9_V2_Reset+0x38>)
 8005f6e:	f7fd fa82 	bl	8003476 <HAL_GPIO_WritePin>
    DEV_Delay_ms(10);
 8005f72:	200a      	movs	r0, #10
 8005f74:	f7fc fb02 	bl	800257c <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 0);
 8005f78:	2200      	movs	r2, #0
 8005f7a:	2102      	movs	r1, #2
 8005f7c:	4807      	ldr	r0, [pc, #28]	@ (8005f9c <EPD_2IN9_V2_Reset+0x38>)
 8005f7e:	f7fd fa7a 	bl	8003476 <HAL_GPIO_WritePin>
    DEV_Delay_ms(2);
 8005f82:	2002      	movs	r0, #2
 8005f84:	f7fc fafa 	bl	800257c <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8005f88:	2201      	movs	r2, #1
 8005f8a:	2102      	movs	r1, #2
 8005f8c:	4803      	ldr	r0, [pc, #12]	@ (8005f9c <EPD_2IN9_V2_Reset+0x38>)
 8005f8e:	f7fd fa72 	bl	8003476 <HAL_GPIO_WritePin>
    DEV_Delay_ms(10);
 8005f92:	200a      	movs	r0, #10
 8005f94:	f7fc faf2 	bl	800257c <HAL_Delay>
}
 8005f98:	bf00      	nop
 8005f9a:	bd80      	pop	{r7, pc}
 8005f9c:	40010800 	.word	0x40010800

08005fa0 <EPD_2IN9_V2_SendCommand>:
function :	send command
parameter:
     Reg : Command register
******************************************************************************/
static void EPD_2IN9_V2_SendCommand(UBYTE Reg)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b082      	sub	sp, #8
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	71fb      	strb	r3, [r7, #7]
    DEV_Digital_Write(EPD_DC_PIN, 0);
 8005faa:	2200      	movs	r2, #0
 8005fac:	2104      	movs	r1, #4
 8005fae:	480a      	ldr	r0, [pc, #40]	@ (8005fd8 <EPD_2IN9_V2_SendCommand+0x38>)
 8005fb0:	f7fd fa61 	bl	8003476 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	2108      	movs	r1, #8
 8005fb8:	4807      	ldr	r0, [pc, #28]	@ (8005fd8 <EPD_2IN9_V2_SendCommand+0x38>)
 8005fba:	f7fd fa5c 	bl	8003476 <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Reg);
 8005fbe:	79fb      	ldrb	r3, [r7, #7]
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f7ff ffbd 	bl	8005f40 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	2108      	movs	r1, #8
 8005fca:	4803      	ldr	r0, [pc, #12]	@ (8005fd8 <EPD_2IN9_V2_SendCommand+0x38>)
 8005fcc:	f7fd fa53 	bl	8003476 <HAL_GPIO_WritePin>
}
 8005fd0:	bf00      	nop
 8005fd2:	3708      	adds	r7, #8
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	40010800 	.word	0x40010800

08005fdc <EPD_2IN9_V2_SendData>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void EPD_2IN9_V2_SendData(UBYTE Data)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	71fb      	strb	r3, [r7, #7]
    DEV_Digital_Write(EPD_DC_PIN, 1);
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	2104      	movs	r1, #4
 8005fea:	480a      	ldr	r0, [pc, #40]	@ (8006014 <EPD_2IN9_V2_SendData+0x38>)
 8005fec:	f7fd fa43 	bl	8003476 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	2108      	movs	r1, #8
 8005ff4:	4807      	ldr	r0, [pc, #28]	@ (8006014 <EPD_2IN9_V2_SendData+0x38>)
 8005ff6:	f7fd fa3e 	bl	8003476 <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Data);
 8005ffa:	79fb      	ldrb	r3, [r7, #7]
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f7ff ff9f 	bl	8005f40 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8006002:	2201      	movs	r2, #1
 8006004:	2108      	movs	r1, #8
 8006006:	4803      	ldr	r0, [pc, #12]	@ (8006014 <EPD_2IN9_V2_SendData+0x38>)
 8006008:	f7fd fa35 	bl	8003476 <HAL_GPIO_WritePin>
}
 800600c:	bf00      	nop
 800600e:	3708      	adds	r7, #8
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}
 8006014:	40010800 	.word	0x40010800

08006018 <EPD_2IN9_V2_ReadBusy>:
/******************************************************************************
function :	Wait until the busy_pin goes LOW
parameter:
******************************************************************************/
void EPD_2IN9_V2_ReadBusy(void)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	af00      	add	r7, sp, #0
    Debug("e-Paper busy\r\n");
 800601c:	480b      	ldr	r0, [pc, #44]	@ (800604c <EPD_2IN9_V2_ReadBusy+0x34>)
 800601e:	f001 f94b 	bl	80072b8 <puts>
	while(1)
	{	 //=1 BUSY
		if(DEV_Digital_Read(EPD_BUSY_PIN)==0) 
 8006022:	2101      	movs	r1, #1
 8006024:	480a      	ldr	r0, [pc, #40]	@ (8006050 <EPD_2IN9_V2_ReadBusy+0x38>)
 8006026:	f7fd fa0f 	bl	8003448 <HAL_GPIO_ReadPin>
 800602a:	4603      	mov	r3, r0
 800602c:	2b00      	cmp	r3, #0
 800602e:	d003      	beq.n	8006038 <EPD_2IN9_V2_ReadBusy+0x20>
			break;
		DEV_Delay_ms(50);
 8006030:	2032      	movs	r0, #50	@ 0x32
 8006032:	f7fc faa3 	bl	800257c <HAL_Delay>
		if(DEV_Digital_Read(EPD_BUSY_PIN)==0) 
 8006036:	e7f4      	b.n	8006022 <EPD_2IN9_V2_ReadBusy+0xa>
			break;
 8006038:	bf00      	nop
	}
	DEV_Delay_ms(50);
 800603a:	2032      	movs	r0, #50	@ 0x32
 800603c:	f7fc fa9e 	bl	800257c <HAL_Delay>
    Debug("e-Paper busy release\r\n");
 8006040:	4804      	ldr	r0, [pc, #16]	@ (8006054 <EPD_2IN9_V2_ReadBusy+0x3c>)
 8006042:	f001 f939 	bl	80072b8 <puts>
}
 8006046:	bf00      	nop
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	080078a0 	.word	0x080078a0
 8006050:	40010800 	.word	0x40010800
 8006054:	080078b8 	.word	0x080078b8

08006058 <EPD_2IN9_V2_LUT>:

static void EPD_2IN9_V2_LUT(UBYTE *lut)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
	UBYTE count;
	EPD_2IN9_V2_SendCommand(0x32);
 8006060:	2032      	movs	r0, #50	@ 0x32
 8006062:	f7ff ff9d 	bl	8005fa0 <EPD_2IN9_V2_SendCommand>
	for(count=0; count<153; count++) 
 8006066:	2300      	movs	r3, #0
 8006068:	73fb      	strb	r3, [r7, #15]
 800606a:	e009      	b.n	8006080 <EPD_2IN9_V2_LUT+0x28>
		EPD_2IN9_V2_SendData(lut[count]); 
 800606c:	7bfb      	ldrb	r3, [r7, #15]
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	4413      	add	r3, r2
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	4618      	mov	r0, r3
 8006076:	f7ff ffb1 	bl	8005fdc <EPD_2IN9_V2_SendData>
	for(count=0; count<153; count++) 
 800607a:	7bfb      	ldrb	r3, [r7, #15]
 800607c:	3301      	adds	r3, #1
 800607e:	73fb      	strb	r3, [r7, #15]
 8006080:	7bfb      	ldrb	r3, [r7, #15]
 8006082:	2b98      	cmp	r3, #152	@ 0x98
 8006084:	d9f2      	bls.n	800606c <EPD_2IN9_V2_LUT+0x14>
	EPD_2IN9_V2_ReadBusy();
 8006086:	f7ff ffc7 	bl	8006018 <EPD_2IN9_V2_ReadBusy>
}
 800608a:	bf00      	nop
 800608c:	3710      	adds	r7, #16
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}

08006092 <EPD_2IN9_V2_LUT_by_host>:

static void EPD_2IN9_V2_LUT_by_host(UBYTE *lut)
{
 8006092:	b580      	push	{r7, lr}
 8006094:	b082      	sub	sp, #8
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
	EPD_2IN9_V2_LUT((UBYTE *)lut);			//lut
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f7ff ffdc 	bl	8006058 <EPD_2IN9_V2_LUT>
	EPD_2IN9_V2_SendCommand(0x3f);
 80060a0:	203f      	movs	r0, #63	@ 0x3f
 80060a2:	f7ff ff7d 	bl	8005fa0 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(*(lut+153));
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	3399      	adds	r3, #153	@ 0x99
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	4618      	mov	r0, r3
 80060ae:	f7ff ff95 	bl	8005fdc <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendCommand(0x03);	// gate voltage
 80060b2:	2003      	movs	r0, #3
 80060b4:	f7ff ff74 	bl	8005fa0 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(*(lut+154));
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	339a      	adds	r3, #154	@ 0x9a
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	4618      	mov	r0, r3
 80060c0:	f7ff ff8c 	bl	8005fdc <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendCommand(0x04);	// source voltage
 80060c4:	2004      	movs	r0, #4
 80060c6:	f7ff ff6b 	bl	8005fa0 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(*(lut+155));	// VSH
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	339b      	adds	r3, #155	@ 0x9b
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	4618      	mov	r0, r3
 80060d2:	f7ff ff83 	bl	8005fdc <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(*(lut+156));	// VSH2
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	339c      	adds	r3, #156	@ 0x9c
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	4618      	mov	r0, r3
 80060de:	f7ff ff7d 	bl	8005fdc <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(*(lut+157));	// VSL
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	339d      	adds	r3, #157	@ 0x9d
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	4618      	mov	r0, r3
 80060ea:	f7ff ff77 	bl	8005fdc <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendCommand(0x2c);		// VCOM
 80060ee:	202c      	movs	r0, #44	@ 0x2c
 80060f0:	f7ff ff56 	bl	8005fa0 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(*(lut+158));
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	339e      	adds	r3, #158	@ 0x9e
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	4618      	mov	r0, r3
 80060fc:	f7ff ff6e 	bl	8005fdc <EPD_2IN9_V2_SendData>
	
}
 8006100:	bf00      	nop
 8006102:	3708      	adds	r7, #8
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <EPD_2IN9_V2_TurnOnDisplay>:
/******************************************************************************
function :	Turn On Display
parameter:
******************************************************************************/
static void EPD_2IN9_V2_TurnOnDisplay(void)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	af00      	add	r7, sp, #0
	EPD_2IN9_V2_SendCommand(0x22); //Display Update Control
 800610c:	2022      	movs	r0, #34	@ 0x22
 800610e:	f7ff ff47 	bl	8005fa0 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(0xc7);
 8006112:	20c7      	movs	r0, #199	@ 0xc7
 8006114:	f7ff ff62 	bl	8005fdc <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendCommand(0x20); //Activate Display Update Sequence
 8006118:	2020      	movs	r0, #32
 800611a:	f7ff ff41 	bl	8005fa0 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_ReadBusy();
 800611e:	f7ff ff7b 	bl	8006018 <EPD_2IN9_V2_ReadBusy>
}
 8006122:	bf00      	nop
 8006124:	bd80      	pop	{r7, pc}

08006126 <EPD_2IN9_V2_TurnOnDisplay_Partial>:

static void EPD_2IN9_V2_TurnOnDisplay_Partial(void)
{
 8006126:	b580      	push	{r7, lr}
 8006128:	af00      	add	r7, sp, #0
	EPD_2IN9_V2_SendCommand(0x22); //Display Update Control
 800612a:	2022      	movs	r0, #34	@ 0x22
 800612c:	f7ff ff38 	bl	8005fa0 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(0x0F);   
 8006130:	200f      	movs	r0, #15
 8006132:	f7ff ff53 	bl	8005fdc <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendCommand(0x20); //Activate Display Update Sequence
 8006136:	2020      	movs	r0, #32
 8006138:	f7ff ff32 	bl	8005fa0 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_ReadBusy();
 800613c:	f7ff ff6c 	bl	8006018 <EPD_2IN9_V2_ReadBusy>
}
 8006140:	bf00      	nop
 8006142:	bd80      	pop	{r7, pc}

08006144 <EPD_2IN9_V2_SetWindows>:
/******************************************************************************
function :	Setting the display window
parameter:
******************************************************************************/
static void EPD_2IN9_V2_SetWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend)
{
 8006144:	b590      	push	{r4, r7, lr}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	4604      	mov	r4, r0
 800614c:	4608      	mov	r0, r1
 800614e:	4611      	mov	r1, r2
 8006150:	461a      	mov	r2, r3
 8006152:	4623      	mov	r3, r4
 8006154:	80fb      	strh	r3, [r7, #6]
 8006156:	4603      	mov	r3, r0
 8006158:	80bb      	strh	r3, [r7, #4]
 800615a:	460b      	mov	r3, r1
 800615c:	807b      	strh	r3, [r7, #2]
 800615e:	4613      	mov	r3, r2
 8006160:	803b      	strh	r3, [r7, #0]
    EPD_2IN9_V2_SendCommand(0x44); // SET_RAM_X_ADDRESS_START_END_POSITION
 8006162:	2044      	movs	r0, #68	@ 0x44
 8006164:	f7ff ff1c 	bl	8005fa0 <EPD_2IN9_V2_SendCommand>
    EPD_2IN9_V2_SendData((Xstart>>3) & 0xFF);
 8006168:	88fb      	ldrh	r3, [r7, #6]
 800616a:	08db      	lsrs	r3, r3, #3
 800616c:	b29b      	uxth	r3, r3
 800616e:	b2db      	uxtb	r3, r3
 8006170:	4618      	mov	r0, r3
 8006172:	f7ff ff33 	bl	8005fdc <EPD_2IN9_V2_SendData>
    EPD_2IN9_V2_SendData((Xend>>3) & 0xFF);
 8006176:	887b      	ldrh	r3, [r7, #2]
 8006178:	08db      	lsrs	r3, r3, #3
 800617a:	b29b      	uxth	r3, r3
 800617c:	b2db      	uxtb	r3, r3
 800617e:	4618      	mov	r0, r3
 8006180:	f7ff ff2c 	bl	8005fdc <EPD_2IN9_V2_SendData>
	
    EPD_2IN9_V2_SendCommand(0x45); // SET_RAM_Y_ADDRESS_START_END_POSITION
 8006184:	2045      	movs	r0, #69	@ 0x45
 8006186:	f7ff ff0b 	bl	8005fa0 <EPD_2IN9_V2_SendCommand>
    EPD_2IN9_V2_SendData(Ystart & 0xFF);
 800618a:	88bb      	ldrh	r3, [r7, #4]
 800618c:	b2db      	uxtb	r3, r3
 800618e:	4618      	mov	r0, r3
 8006190:	f7ff ff24 	bl	8005fdc <EPD_2IN9_V2_SendData>
    EPD_2IN9_V2_SendData((Ystart >> 8) & 0xFF);
 8006194:	88bb      	ldrh	r3, [r7, #4]
 8006196:	0a1b      	lsrs	r3, r3, #8
 8006198:	b29b      	uxth	r3, r3
 800619a:	b2db      	uxtb	r3, r3
 800619c:	4618      	mov	r0, r3
 800619e:	f7ff ff1d 	bl	8005fdc <EPD_2IN9_V2_SendData>
    EPD_2IN9_V2_SendData(Yend & 0xFF);
 80061a2:	883b      	ldrh	r3, [r7, #0]
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	4618      	mov	r0, r3
 80061a8:	f7ff ff18 	bl	8005fdc <EPD_2IN9_V2_SendData>
    EPD_2IN9_V2_SendData((Yend >> 8) & 0xFF);
 80061ac:	883b      	ldrh	r3, [r7, #0]
 80061ae:	0a1b      	lsrs	r3, r3, #8
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	4618      	mov	r0, r3
 80061b6:	f7ff ff11 	bl	8005fdc <EPD_2IN9_V2_SendData>
}
 80061ba:	bf00      	nop
 80061bc:	370c      	adds	r7, #12
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd90      	pop	{r4, r7, pc}

080061c2 <EPD_2IN9_V2_SetCursor>:
/******************************************************************************
function :	Set Cursor
parameter:
******************************************************************************/
static void EPD_2IN9_V2_SetCursor(UWORD Xstart, UWORD Ystart)
{
 80061c2:	b580      	push	{r7, lr}
 80061c4:	b082      	sub	sp, #8
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	4603      	mov	r3, r0
 80061ca:	460a      	mov	r2, r1
 80061cc:	80fb      	strh	r3, [r7, #6]
 80061ce:	4613      	mov	r3, r2
 80061d0:	80bb      	strh	r3, [r7, #4]
    EPD_2IN9_V2_SendCommand(0x4E); // SET_RAM_X_ADDRESS_COUNTER
 80061d2:	204e      	movs	r0, #78	@ 0x4e
 80061d4:	f7ff fee4 	bl	8005fa0 <EPD_2IN9_V2_SendCommand>
    EPD_2IN9_V2_SendData(Xstart & 0xFF);
 80061d8:	88fb      	ldrh	r3, [r7, #6]
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	4618      	mov	r0, r3
 80061de:	f7ff fefd 	bl	8005fdc <EPD_2IN9_V2_SendData>

    EPD_2IN9_V2_SendCommand(0x4F); // SET_RAM_Y_ADDRESS_COUNTER
 80061e2:	204f      	movs	r0, #79	@ 0x4f
 80061e4:	f7ff fedc 	bl	8005fa0 <EPD_2IN9_V2_SendCommand>
    EPD_2IN9_V2_SendData(Ystart & 0xFF);
 80061e8:	88bb      	ldrh	r3, [r7, #4]
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	4618      	mov	r0, r3
 80061ee:	f7ff fef5 	bl	8005fdc <EPD_2IN9_V2_SendData>
    EPD_2IN9_V2_SendData((Ystart >> 8) & 0xFF);
 80061f2:	88bb      	ldrh	r3, [r7, #4]
 80061f4:	0a1b      	lsrs	r3, r3, #8
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	4618      	mov	r0, r3
 80061fc:	f7ff feee 	bl	8005fdc <EPD_2IN9_V2_SendData>
}
 8006200:	bf00      	nop
 8006202:	3708      	adds	r7, #8
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <EPD_2IN9_V2_Init>:
/******************************************************************************
function :	Initialize the e-Paper register
parameter:
******************************************************************************/
void EPD_2IN9_V2_Init(void)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	af00      	add	r7, sp, #0
	EPD_2IN9_V2_Reset();
 800620c:	f7ff feaa 	bl	8005f64 <EPD_2IN9_V2_Reset>
	DEV_Delay_ms(100);
 8006210:	2064      	movs	r0, #100	@ 0x64
 8006212:	f7fc f9b3 	bl	800257c <HAL_Delay>

	EPD_2IN9_V2_ReadBusy();   
 8006216:	f7ff feff 	bl	8006018 <EPD_2IN9_V2_ReadBusy>
	EPD_2IN9_V2_SendCommand(0x12); // soft reset
 800621a:	2012      	movs	r0, #18
 800621c:	f7ff fec0 	bl	8005fa0 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_ReadBusy();
 8006220:	f7ff fefa 	bl	8006018 <EPD_2IN9_V2_ReadBusy>
	
	EPD_2IN9_V2_SendCommand(0x01); //Driver output control      
 8006224:	2001      	movs	r0, #1
 8006226:	f7ff febb 	bl	8005fa0 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(0x27);
 800622a:	2027      	movs	r0, #39	@ 0x27
 800622c:	f7ff fed6 	bl	8005fdc <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x01);
 8006230:	2001      	movs	r0, #1
 8006232:	f7ff fed3 	bl	8005fdc <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x00);
 8006236:	2000      	movs	r0, #0
 8006238:	f7ff fed0 	bl	8005fdc <EPD_2IN9_V2_SendData>
	
	EPD_2IN9_V2_SendCommand(0x11); //data entry mode       
 800623c:	2011      	movs	r0, #17
 800623e:	f7ff feaf 	bl	8005fa0 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(0x03);
 8006242:	2003      	movs	r0, #3
 8006244:	f7ff feca 	bl	8005fdc <EPD_2IN9_V2_SendData>
	
	EPD_2IN9_V2_SetWindows(0, 0, EPD_2IN9_V2_WIDTH-1, EPD_2IN9_V2_HEIGHT-1);
 8006248:	f240 1327 	movw	r3, #295	@ 0x127
 800624c:	227f      	movs	r2, #127	@ 0x7f
 800624e:	2100      	movs	r1, #0
 8006250:	2000      	movs	r0, #0
 8006252:	f7ff ff77 	bl	8006144 <EPD_2IN9_V2_SetWindows>
	
	EPD_2IN9_V2_SendCommand(0x21); //  Display update control
 8006256:	2021      	movs	r0, #33	@ 0x21
 8006258:	f7ff fea2 	bl	8005fa0 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(0x00);
 800625c:	2000      	movs	r0, #0
 800625e:	f7ff febd 	bl	8005fdc <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x80);	
 8006262:	2080      	movs	r0, #128	@ 0x80
 8006264:	f7ff feba 	bl	8005fdc <EPD_2IN9_V2_SendData>
	
	EPD_2IN9_V2_SetCursor(0, 0);
 8006268:	2100      	movs	r1, #0
 800626a:	2000      	movs	r0, #0
 800626c:	f7ff ffa9 	bl	80061c2 <EPD_2IN9_V2_SetCursor>
	EPD_2IN9_V2_ReadBusy();	
 8006270:	f7ff fed2 	bl	8006018 <EPD_2IN9_V2_ReadBusy>
	
	EPD_2IN9_V2_LUT_by_host(WS_20_30);
 8006274:	4802      	ldr	r0, [pc, #8]	@ (8006280 <EPD_2IN9_V2_Init+0x78>)
 8006276:	f7ff ff0c 	bl	8006092 <EPD_2IN9_V2_LUT_by_host>
}
 800627a:	bf00      	nop
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	200000fc 	.word	0x200000fc

08006284 <EPD_2IN9_V2_Init_Fast>:

void EPD_2IN9_V2_Init_Fast(void)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	af00      	add	r7, sp, #0
	EPD_2IN9_V2_Reset();
 8006288:	f7ff fe6c 	bl	8005f64 <EPD_2IN9_V2_Reset>
	DEV_Delay_ms(100);
 800628c:	2064      	movs	r0, #100	@ 0x64
 800628e:	f7fc f975 	bl	800257c <HAL_Delay>

	EPD_2IN9_V2_ReadBusy();   
 8006292:	f7ff fec1 	bl	8006018 <EPD_2IN9_V2_ReadBusy>
	EPD_2IN9_V2_SendCommand(0x12); // soft reset
 8006296:	2012      	movs	r0, #18
 8006298:	f7ff fe82 	bl	8005fa0 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_ReadBusy();
 800629c:	f7ff febc 	bl	8006018 <EPD_2IN9_V2_ReadBusy>
	
	EPD_2IN9_V2_SendCommand(0x01); //Driver output control      
 80062a0:	2001      	movs	r0, #1
 80062a2:	f7ff fe7d 	bl	8005fa0 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(0x27);
 80062a6:	2027      	movs	r0, #39	@ 0x27
 80062a8:	f7ff fe98 	bl	8005fdc <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x01);
 80062ac:	2001      	movs	r0, #1
 80062ae:	f7ff fe95 	bl	8005fdc <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x00);
 80062b2:	2000      	movs	r0, #0
 80062b4:	f7ff fe92 	bl	8005fdc <EPD_2IN9_V2_SendData>
	
	EPD_2IN9_V2_SendCommand(0x11); //data entry mode       
 80062b8:	2011      	movs	r0, #17
 80062ba:	f7ff fe71 	bl	8005fa0 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(0x03);
 80062be:	2003      	movs	r0, #3
 80062c0:	f7ff fe8c 	bl	8005fdc <EPD_2IN9_V2_SendData>
	
	EPD_2IN9_V2_SetWindows(0, 0, EPD_2IN9_V2_WIDTH-1, EPD_2IN9_V2_HEIGHT-1);
 80062c4:	f240 1327 	movw	r3, #295	@ 0x127
 80062c8:	227f      	movs	r2, #127	@ 0x7f
 80062ca:	2100      	movs	r1, #0
 80062cc:	2000      	movs	r0, #0
 80062ce:	f7ff ff39 	bl	8006144 <EPD_2IN9_V2_SetWindows>
	
    EPD_2IN9_V2_SendCommand(0x3C);       
 80062d2:	203c      	movs	r0, #60	@ 0x3c
 80062d4:	f7ff fe64 	bl	8005fa0 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(0x05);
 80062d8:	2005      	movs	r0, #5
 80062da:	f7ff fe7f 	bl	8005fdc <EPD_2IN9_V2_SendData>

	EPD_2IN9_V2_SendCommand(0x21); //  Display update control
 80062de:	2021      	movs	r0, #33	@ 0x21
 80062e0:	f7ff fe5e 	bl	8005fa0 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(0x00);
 80062e4:	2000      	movs	r0, #0
 80062e6:	f7ff fe79 	bl	8005fdc <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x80);	
 80062ea:	2080      	movs	r0, #128	@ 0x80
 80062ec:	f7ff fe76 	bl	8005fdc <EPD_2IN9_V2_SendData>
	
	EPD_2IN9_V2_SetCursor(0, 0);
 80062f0:	2100      	movs	r1, #0
 80062f2:	2000      	movs	r0, #0
 80062f4:	f7ff ff65 	bl	80061c2 <EPD_2IN9_V2_SetCursor>
	EPD_2IN9_V2_ReadBusy();	
 80062f8:	f7ff fe8e 	bl	8006018 <EPD_2IN9_V2_ReadBusy>
	
	EPD_2IN9_V2_LUT_by_host(WF_FULL);
 80062fc:	4802      	ldr	r0, [pc, #8]	@ (8006308 <EPD_2IN9_V2_Init_Fast+0x84>)
 80062fe:	f7ff fec8 	bl	8006092 <EPD_2IN9_V2_LUT_by_host>
}
 8006302:	bf00      	nop
 8006304:	bd80      	pop	{r7, pc}
 8006306:	bf00      	nop
 8006308:	2000019c 	.word	0x2000019c

0800630c <EPD_2IN9_V2_Clear>:
/******************************************************************************
function :	Clear screen
parameter:
******************************************************************************/
void EPD_2IN9_V2_Clear(void)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
	UWORD i;
	
	EPD_2IN9_V2_SendCommand(0x24);   //write RAM for black(0)/white (1)
 8006312:	2024      	movs	r0, #36	@ 0x24
 8006314:	f7ff fe44 	bl	8005fa0 <EPD_2IN9_V2_SendCommand>
	for(i=0;i<4736;i++)
 8006318:	2300      	movs	r3, #0
 800631a:	80fb      	strh	r3, [r7, #6]
 800631c:	e005      	b.n	800632a <EPD_2IN9_V2_Clear+0x1e>
	{
		EPD_2IN9_V2_SendData(0xff);
 800631e:	20ff      	movs	r0, #255	@ 0xff
 8006320:	f7ff fe5c 	bl	8005fdc <EPD_2IN9_V2_SendData>
	for(i=0;i<4736;i++)
 8006324:	88fb      	ldrh	r3, [r7, #6]
 8006326:	3301      	adds	r3, #1
 8006328:	80fb      	strh	r3, [r7, #6]
 800632a:	88fb      	ldrh	r3, [r7, #6]
 800632c:	f5b3 5f94 	cmp.w	r3, #4736	@ 0x1280
 8006330:	d3f5      	bcc.n	800631e <EPD_2IN9_V2_Clear+0x12>
	}

	EPD_2IN9_V2_SendCommand(0x26);   //write RAM for black(0)/white (1)
 8006332:	2026      	movs	r0, #38	@ 0x26
 8006334:	f7ff fe34 	bl	8005fa0 <EPD_2IN9_V2_SendCommand>
	for(i=0;i<4736;i++)
 8006338:	2300      	movs	r3, #0
 800633a:	80fb      	strh	r3, [r7, #6]
 800633c:	e005      	b.n	800634a <EPD_2IN9_V2_Clear+0x3e>
	{
		EPD_2IN9_V2_SendData(0xff);
 800633e:	20ff      	movs	r0, #255	@ 0xff
 8006340:	f7ff fe4c 	bl	8005fdc <EPD_2IN9_V2_SendData>
	for(i=0;i<4736;i++)
 8006344:	88fb      	ldrh	r3, [r7, #6]
 8006346:	3301      	adds	r3, #1
 8006348:	80fb      	strh	r3, [r7, #6]
 800634a:	88fb      	ldrh	r3, [r7, #6]
 800634c:	f5b3 5f94 	cmp.w	r3, #4736	@ 0x1280
 8006350:	d3f5      	bcc.n	800633e <EPD_2IN9_V2_Clear+0x32>
	}
	EPD_2IN9_V2_TurnOnDisplay();
 8006352:	f7ff fed9 	bl	8006108 <EPD_2IN9_V2_TurnOnDisplay>
}
 8006356:	bf00      	nop
 8006358:	3708      	adds	r7, #8
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
	...

08006360 <EPD_2IN9_V2_Display_Partial>:

    EPD_2IN9_V2_TurnOnDisplay();
}

void EPD_2IN9_V2_Display_Partial(UBYTE *Image)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
	UWORD i;

//Reset
    DEV_Digital_Write(EPD_RST_PIN, 0);
 8006368:	2200      	movs	r2, #0
 800636a:	2102      	movs	r1, #2
 800636c:	4833      	ldr	r0, [pc, #204]	@ (800643c <EPD_2IN9_V2_Display_Partial+0xdc>)
 800636e:	f7fd f882 	bl	8003476 <HAL_GPIO_WritePin>
    DEV_Delay_ms(1);
 8006372:	2001      	movs	r0, #1
 8006374:	f7fc f902 	bl	800257c <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8006378:	2201      	movs	r2, #1
 800637a:	2102      	movs	r1, #2
 800637c:	482f      	ldr	r0, [pc, #188]	@ (800643c <EPD_2IN9_V2_Display_Partial+0xdc>)
 800637e:	f7fd f87a 	bl	8003476 <HAL_GPIO_WritePin>
    DEV_Delay_ms(2);
 8006382:	2002      	movs	r0, #2
 8006384:	f7fc f8fa 	bl	800257c <HAL_Delay>

	EPD_2IN9_V2_LUT(_WF_PARTIAL_2IN9);
 8006388:	482d      	ldr	r0, [pc, #180]	@ (8006440 <EPD_2IN9_V2_Display_Partial+0xe0>)
 800638a:	f7ff fe65 	bl	8006058 <EPD_2IN9_V2_LUT>
	EPD_2IN9_V2_SendCommand(0x37); 
 800638e:	2037      	movs	r0, #55	@ 0x37
 8006390:	f7ff fe06 	bl	8005fa0 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(0x00);  
 8006394:	2000      	movs	r0, #0
 8006396:	f7ff fe21 	bl	8005fdc <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x00);  
 800639a:	2000      	movs	r0, #0
 800639c:	f7ff fe1e 	bl	8005fdc <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x00);  
 80063a0:	2000      	movs	r0, #0
 80063a2:	f7ff fe1b 	bl	8005fdc <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x00); 
 80063a6:	2000      	movs	r0, #0
 80063a8:	f7ff fe18 	bl	8005fdc <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x00);  
 80063ac:	2000      	movs	r0, #0
 80063ae:	f7ff fe15 	bl	8005fdc <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x40);  
 80063b2:	2040      	movs	r0, #64	@ 0x40
 80063b4:	f7ff fe12 	bl	8005fdc <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x00);  
 80063b8:	2000      	movs	r0, #0
 80063ba:	f7ff fe0f 	bl	8005fdc <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x00);   
 80063be:	2000      	movs	r0, #0
 80063c0:	f7ff fe0c 	bl	8005fdc <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x00);  
 80063c4:	2000      	movs	r0, #0
 80063c6:	f7ff fe09 	bl	8005fdc <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x00);
 80063ca:	2000      	movs	r0, #0
 80063cc:	f7ff fe06 	bl	8005fdc <EPD_2IN9_V2_SendData>

	EPD_2IN9_V2_SendCommand(0x3C); //BorderWavefrom
 80063d0:	203c      	movs	r0, #60	@ 0x3c
 80063d2:	f7ff fde5 	bl	8005fa0 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(0x80);	
 80063d6:	2080      	movs	r0, #128	@ 0x80
 80063d8:	f7ff fe00 	bl	8005fdc <EPD_2IN9_V2_SendData>

	EPD_2IN9_V2_SendCommand(0x22); 
 80063dc:	2022      	movs	r0, #34	@ 0x22
 80063de:	f7ff fddf 	bl	8005fa0 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(0xC0);   
 80063e2:	20c0      	movs	r0, #192	@ 0xc0
 80063e4:	f7ff fdfa 	bl	8005fdc <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendCommand(0x20); 
 80063e8:	2020      	movs	r0, #32
 80063ea:	f7ff fdd9 	bl	8005fa0 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_ReadBusy();  
 80063ee:	f7ff fe13 	bl	8006018 <EPD_2IN9_V2_ReadBusy>
	
	EPD_2IN9_V2_SetWindows(0, 0, EPD_2IN9_V2_WIDTH-1, EPD_2IN9_V2_HEIGHT-1);
 80063f2:	f240 1327 	movw	r3, #295	@ 0x127
 80063f6:	227f      	movs	r2, #127	@ 0x7f
 80063f8:	2100      	movs	r1, #0
 80063fa:	2000      	movs	r0, #0
 80063fc:	f7ff fea2 	bl	8006144 <EPD_2IN9_V2_SetWindows>
	EPD_2IN9_V2_SetCursor(0, 0);
 8006400:	2100      	movs	r1, #0
 8006402:	2000      	movs	r0, #0
 8006404:	f7ff fedd 	bl	80061c2 <EPD_2IN9_V2_SetCursor>

	EPD_2IN9_V2_SendCommand(0x24);   //Write Black and White image to RAM
 8006408:	2024      	movs	r0, #36	@ 0x24
 800640a:	f7ff fdc9 	bl	8005fa0 <EPD_2IN9_V2_SendCommand>
	for(i=0;i<4736;i++)
 800640e:	2300      	movs	r3, #0
 8006410:	81fb      	strh	r3, [r7, #14]
 8006412:	e009      	b.n	8006428 <EPD_2IN9_V2_Display_Partial+0xc8>
	{
		EPD_2IN9_V2_SendData(Image[i]);
 8006414:	89fb      	ldrh	r3, [r7, #14]
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	4413      	add	r3, r2
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	4618      	mov	r0, r3
 800641e:	f7ff fddd 	bl	8005fdc <EPD_2IN9_V2_SendData>
	for(i=0;i<4736;i++)
 8006422:	89fb      	ldrh	r3, [r7, #14]
 8006424:	3301      	adds	r3, #1
 8006426:	81fb      	strh	r3, [r7, #14]
 8006428:	89fb      	ldrh	r3, [r7, #14]
 800642a:	f5b3 5f94 	cmp.w	r3, #4736	@ 0x1280
 800642e:	d3f1      	bcc.n	8006414 <EPD_2IN9_V2_Display_Partial+0xb4>
	} 
	EPD_2IN9_V2_TurnOnDisplay_Partial();
 8006430:	f7ff fe79 	bl	8006126 <EPD_2IN9_V2_TurnOnDisplay_Partial>
}
 8006434:	bf00      	nop
 8006436:	3710      	adds	r7, #16
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}
 800643c:	40010800 	.word	0x40010800
 8006440:	2000005c 	.word	0x2000005c

08006444 <EPD_2IN9_V2_Sleep>:
/******************************************************************************
function :	Enter sleep mode
parameter:
******************************************************************************/
void EPD_2IN9_V2_Sleep(void)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	af00      	add	r7, sp, #0
	EPD_2IN9_V2_SendCommand(0x10); //enter deep sleep
 8006448:	2010      	movs	r0, #16
 800644a:	f7ff fda9 	bl	8005fa0 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(0x01); 
 800644e:	2001      	movs	r0, #1
 8006450:	f7ff fdc4 	bl	8005fdc <EPD_2IN9_V2_SendData>
	DEV_Delay_ms(100);
 8006454:	2064      	movs	r0, #100	@ 0x64
 8006456:	f7fc f891 	bl	800257c <HAL_Delay>
}
 800645a:	bf00      	nop
 800645c:	bd80      	pop	{r7, pc}
	...

08006460 <default_mode>:
    return 0;
}

// it is the screen display time with the list of name
void default_mode(int *flag_main_screen, uint8_t *hour, uint8_t *minute, uint8_t *second)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b08a      	sub	sp, #40	@ 0x28
 8006464:	af02      	add	r7, sp, #8
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	607a      	str	r2, [r7, #4]
 800646c:	603b      	str	r3, [r7, #0]
	UBYTE *BlackImage;

	UWORD Imagesize = ((EPD_2IN9_V2_WIDTH % 8 == 0)? (EPD_2IN9_V2_WIDTH / 8 ): (EPD_2IN9_V2_WIDTH / 8 + 1)) * EPD_2IN9_V2_HEIGHT;
 800646e:	f44f 5394 	mov.w	r3, #4736	@ 0x1280
 8006472:	83bb      	strh	r3, [r7, #28]
    if((BlackImage = (UBYTE *)malloc(Imagesize)) == NULL) {
 8006474:	8bbb      	ldrh	r3, [r7, #28]
 8006476:	4618      	mov	r0, r3
 8006478:	f000 fd48 	bl	8006f0c <malloc>
 800647c:	4603      	mov	r3, r0
 800647e:	61bb      	str	r3, [r7, #24]
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d102      	bne.n	800648c <default_mode+0x2c>
        printf("Failed to apply for black memory...\r\n");
 8006486:	485a      	ldr	r0, [pc, #360]	@ (80065f0 <default_mode+0x190>)
 8006488:	f000 ff16 	bl	80072b8 <puts>
    }

	EPD_2IN9_V2_Init();
 800648c:	f7ff febc 	bl	8006208 <EPD_2IN9_V2_Init>

		EPD_2IN9_V2_Init();
 8006490:	f7ff feba 	bl	8006208 <EPD_2IN9_V2_Init>
    	EPD_2IN9_V2_Clear();
 8006494:	f7ff ff3a 	bl	800630c <EPD_2IN9_V2_Clear>
    	EPD_2IN9_V2_Init_Fast();
 8006498:	f7ff fef4 	bl	8006284 <EPD_2IN9_V2_Init_Fast>
        Paint_ClearWindows(0, 0, EPD_2IN9_V2_HEIGHT, EPD_2IN9_V2_WIDTH, WHITE);
 800649c:	23ff      	movs	r3, #255	@ 0xff
 800649e:	9300      	str	r3, [sp, #0]
 80064a0:	2380      	movs	r3, #128	@ 0x80
 80064a2:	f44f 7294 	mov.w	r2, #296	@ 0x128
 80064a6:	2100      	movs	r1, #0
 80064a8:	2000      	movs	r0, #0
 80064aa:	f000 fb0b 	bl	8006ac4 <Paint_ClearWindows>

    	Paint_NewImage(BlackImage, EPD_2IN9_V2_WIDTH, EPD_2IN9_V2_HEIGHT, 90, WHITE);
 80064ae:	23ff      	movs	r3, #255	@ 0xff
 80064b0:	9300      	str	r3, [sp, #0]
 80064b2:	235a      	movs	r3, #90	@ 0x5a
 80064b4:	f44f 7294 	mov.w	r2, #296	@ 0x128
 80064b8:	2180      	movs	r1, #128	@ 0x80
 80064ba:	69b8      	ldr	r0, [r7, #24]
 80064bc:	f000 f8aa 	bl	8006614 <Paint_NewImage>
    	printf("Drawing\r\n");
 80064c0:	484c      	ldr	r0, [pc, #304]	@ (80065f4 <default_mode+0x194>)
 80064c2:	f000 fef9 	bl	80072b8 <puts>
    	//1.Select Image
    	Paint_SelectImage(BlackImage);
 80064c6:	69b8      	ldr	r0, [r7, #24]
 80064c8:	f000 f8f8 	bl	80066bc <Paint_SelectImage>
    	Paint_Clear(WHITE);
 80064cc:	20ff      	movs	r0, #255	@ 0xff
 80064ce:	f000 fa51 	bl	8006974 <Paint_Clear>

    	// 2.Drawing on the image
    	printf("Drawing:BlackImage\r\n");
 80064d2:	4849      	ldr	r0, [pc, #292]	@ (80065f8 <default_mode+0x198>)
 80064d4:	f000 fef0 	bl	80072b8 <puts>

    	Paint_DrawString_EN(10, 0, "Duy Ngoc - 2251036", &Font16, BLACK, WHITE);
 80064d8:	23ff      	movs	r3, #255	@ 0xff
 80064da:	9301      	str	r3, [sp, #4]
 80064dc:	2300      	movs	r3, #0
 80064de:	9300      	str	r3, [sp, #0]
 80064e0:	4b46      	ldr	r3, [pc, #280]	@ (80065fc <default_mode+0x19c>)
 80064e2:	4a47      	ldr	r2, [pc, #284]	@ (8006600 <default_mode+0x1a0>)
 80064e4:	2100      	movs	r1, #0
 80064e6:	200a      	movs	r0, #10
 80064e8:	f000 fbc2 	bl	8006c70 <Paint_DrawString_EN>
    	Paint_DrawString_EN(10, 30, "Trung Nam - 2251032", &Font16, BLACK, WHITE);
 80064ec:	23ff      	movs	r3, #255	@ 0xff
 80064ee:	9301      	str	r3, [sp, #4]
 80064f0:	2300      	movs	r3, #0
 80064f2:	9300      	str	r3, [sp, #0]
 80064f4:	4b41      	ldr	r3, [pc, #260]	@ (80065fc <default_mode+0x19c>)
 80064f6:	4a43      	ldr	r2, [pc, #268]	@ (8006604 <default_mode+0x1a4>)
 80064f8:	211e      	movs	r1, #30
 80064fa:	200a      	movs	r0, #10
 80064fc:	f000 fbb8 	bl	8006c70 <Paint_DrawString_EN>
    	Paint_DrawString_EN(10, 60, "Hung Minh - 2251030", &Font16, BLACK, WHITE);
 8006500:	23ff      	movs	r3, #255	@ 0xff
 8006502:	9301      	str	r3, [sp, #4]
 8006504:	2300      	movs	r3, #0
 8006506:	9300      	str	r3, [sp, #0]
 8006508:	4b3c      	ldr	r3, [pc, #240]	@ (80065fc <default_mode+0x19c>)
 800650a:	4a3f      	ldr	r2, [pc, #252]	@ (8006608 <default_mode+0x1a8>)
 800650c:	213c      	movs	r1, #60	@ 0x3c
 800650e:	200a      	movs	r0, #10
 8006510:	f000 fbae 	bl	8006c70 <Paint_DrawString_EN>
//
//      Paint_ClearWindows(150, 80, 150 + Font20.Width * 7, 80 + Font20.Height, WHITE);
//      Paint_DrawTime(150, 80, &sPaint_time, &Font20, WHITE, BLACK);
//      EPD_2IN9_V2_Display_Partial(BlackImage);

	Paint_NewImage(BlackImage, EPD_2IN9_V2_WIDTH, EPD_2IN9_V2_HEIGHT, 90, WHITE);
 8006514:	23ff      	movs	r3, #255	@ 0xff
 8006516:	9300      	str	r3, [sp, #0]
 8006518:	235a      	movs	r3, #90	@ 0x5a
 800651a:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800651e:	2180      	movs	r1, #128	@ 0x80
 8006520:	69b8      	ldr	r0, [r7, #24]
 8006522:	f000 f877 	bl	8006614 <Paint_NewImage>
	EPD_2IN9_V2_Display_Partial(BlackImage);
 8006526:	69b8      	ldr	r0, [r7, #24]
 8006528:	f7ff ff1a 	bl	8006360 <EPD_2IN9_V2_Display_Partial>

    printf("Partial refresh\r\n");
 800652c:	4837      	ldr	r0, [pc, #220]	@ (800660c <default_mode+0x1ac>)
 800652e:	f000 fec3 	bl	80072b8 <puts>
    Paint_SelectImage(BlackImage);
 8006532:	69b8      	ldr	r0, [r7, #24]
 8006534:	f000 f8c2 	bl	80066bc <Paint_SelectImage>

    PAINT_TIME sPaint_time;
    sPaint_time.Hour = 12;
 8006538:	230c      	movs	r3, #12
 800653a:	753b      	strb	r3, [r7, #20]
    sPaint_time.Min = 34;
 800653c:	2322      	movs	r3, #34	@ 0x22
 800653e:	757b      	strb	r3, [r7, #21]
    sPaint_time.Sec = *second;
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	75bb      	strb	r3, [r7, #22]
    UBYTE num = 10;
 8006546:	230a      	movs	r3, #10
 8006548:	77fb      	strb	r3, [r7, #31]
    for (;;) {
        sPaint_time.Sec = sPaint_time.Sec + 1;
 800654a:	7dbb      	ldrb	r3, [r7, #22]
 800654c:	3301      	adds	r3, #1
 800654e:	b2db      	uxtb	r3, r3
 8006550:	75bb      	strb	r3, [r7, #22]
        if (sPaint_time.Sec == 60) {
 8006552:	7dbb      	ldrb	r3, [r7, #22]
 8006554:	2b3c      	cmp	r3, #60	@ 0x3c
 8006556:	d117      	bne.n	8006588 <default_mode+0x128>
            sPaint_time.Min = sPaint_time.Min + 1;
 8006558:	7d7b      	ldrb	r3, [r7, #21]
 800655a:	3301      	adds	r3, #1
 800655c:	b2db      	uxtb	r3, r3
 800655e:	757b      	strb	r3, [r7, #21]
            sPaint_time.Sec = 0;
 8006560:	2300      	movs	r3, #0
 8006562:	75bb      	strb	r3, [r7, #22]
            if (sPaint_time.Min == 60) {
 8006564:	7d7b      	ldrb	r3, [r7, #21]
 8006566:	2b3c      	cmp	r3, #60	@ 0x3c
 8006568:	d10e      	bne.n	8006588 <default_mode+0x128>
                sPaint_time.Hour =  sPaint_time.Hour + 1;
 800656a:	7d3b      	ldrb	r3, [r7, #20]
 800656c:	3301      	adds	r3, #1
 800656e:	b2db      	uxtb	r3, r3
 8006570:	753b      	strb	r3, [r7, #20]
                sPaint_time.Min = 0;
 8006572:	2300      	movs	r3, #0
 8006574:	757b      	strb	r3, [r7, #21]
                if (sPaint_time.Hour == 24) {
 8006576:	7d3b      	ldrb	r3, [r7, #20]
 8006578:	2b18      	cmp	r3, #24
 800657a:	d105      	bne.n	8006588 <default_mode+0x128>
                    sPaint_time.Hour = 0;
 800657c:	2300      	movs	r3, #0
 800657e:	753b      	strb	r3, [r7, #20]
                    sPaint_time.Min = 0;
 8006580:	2300      	movs	r3, #0
 8006582:	757b      	strb	r3, [r7, #21]
                    sPaint_time.Sec = 0;
 8006584:	2300      	movs	r3, #0
 8006586:	75bb      	strb	r3, [r7, #22]
                }
            }
        }
        Paint_ClearWindows(150, 80, 150 + Font20.Width * 7, 80 + Font20.Height, WHITE);
 8006588:	4b21      	ldr	r3, [pc, #132]	@ (8006610 <default_mode+0x1b0>)
 800658a:	889b      	ldrh	r3, [r3, #4]
 800658c:	461a      	mov	r2, r3
 800658e:	00d2      	lsls	r2, r2, #3
 8006590:	1ad3      	subs	r3, r2, r3
 8006592:	b29b      	uxth	r3, r3
 8006594:	3396      	adds	r3, #150	@ 0x96
 8006596:	b29a      	uxth	r2, r3
 8006598:	4b1d      	ldr	r3, [pc, #116]	@ (8006610 <default_mode+0x1b0>)
 800659a:	88db      	ldrh	r3, [r3, #6]
 800659c:	3350      	adds	r3, #80	@ 0x50
 800659e:	b29b      	uxth	r3, r3
 80065a0:	21ff      	movs	r1, #255	@ 0xff
 80065a2:	9100      	str	r1, [sp, #0]
 80065a4:	2150      	movs	r1, #80	@ 0x50
 80065a6:	2096      	movs	r0, #150	@ 0x96
 80065a8:	f000 fa8c 	bl	8006ac4 <Paint_ClearWindows>
        Paint_DrawTime(150, 80, &sPaint_time, &Font20, WHITE, BLACK);
 80065ac:	f107 0210 	add.w	r2, r7, #16
 80065b0:	2300      	movs	r3, #0
 80065b2:	9301      	str	r3, [sp, #4]
 80065b4:	23ff      	movs	r3, #255	@ 0xff
 80065b6:	9300      	str	r3, [sp, #0]
 80065b8:	4b15      	ldr	r3, [pc, #84]	@ (8006610 <default_mode+0x1b0>)
 80065ba:	2150      	movs	r1, #80	@ 0x50
 80065bc:	2096      	movs	r0, #150	@ 0x96
 80065be:	f000 fbab 	bl	8006d18 <Paint_DrawTime>

        num = num - 1;
 80065c2:	7ffb      	ldrb	r3, [r7, #31]
 80065c4:	3b01      	subs	r3, #1
 80065c6:	77fb      	strb	r3, [r7, #31]
        if(num == 0) {
 80065c8:	7ffb      	ldrb	r3, [r7, #31]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d003      	beq.n	80065d6 <default_mode+0x176>
            break;
        }
		EPD_2IN9_V2_Display_Partial(BlackImage);
 80065ce:	69b8      	ldr	r0, [r7, #24]
 80065d0:	f7ff fec6 	bl	8006360 <EPD_2IN9_V2_Display_Partial>
        sPaint_time.Sec = sPaint_time.Sec + 1;
 80065d4:	e7b9      	b.n	800654a <default_mode+0xea>
            break;
 80065d6:	bf00      	nop
    }
      EPD_2IN9_V2_Sleep();
 80065d8:	f7ff ff34 	bl	8006444 <EPD_2IN9_V2_Sleep>
      *flag_main_screen = 0;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2200      	movs	r2, #0
 80065e0:	601a      	str	r2, [r3, #0]
      free(BlackImage);
 80065e2:	69b8      	ldr	r0, [r7, #24]
 80065e4:	f000 fc9a 	bl	8006f1c <free>
}
 80065e8:	bf00      	nop
 80065ea:	3720      	adds	r7, #32
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}
 80065f0:	0800790c 	.word	0x0800790c
 80065f4:	0800795c 	.word	0x0800795c
 80065f8:	08007968 	.word	0x08007968
 80065fc:	2000023c 	.word	0x2000023c
 8006600:	0800797c 	.word	0x0800797c
 8006604:	08007990 	.word	0x08007990
 8006608:	080079a4 	.word	0x080079a4
 800660c:	080079b8 	.word	0x080079b8
 8006610:	20000244 	.word	0x20000244

08006614 <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UBYTE *image, UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 8006614:	b480      	push	{r7}
 8006616:	b085      	sub	sp, #20
 8006618:	af00      	add	r7, sp, #0
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	4608      	mov	r0, r1
 800661e:	4611      	mov	r1, r2
 8006620:	461a      	mov	r2, r3
 8006622:	4603      	mov	r3, r0
 8006624:	817b      	strh	r3, [r7, #10]
 8006626:	460b      	mov	r3, r1
 8006628:	813b      	strh	r3, [r7, #8]
 800662a:	4613      	mov	r3, r2
 800662c:	80fb      	strh	r3, [r7, #6]
    Paint.Image = NULL;
 800662e:	4b22      	ldr	r3, [pc, #136]	@ (80066b8 <Paint_NewImage+0xa4>)
 8006630:	2200      	movs	r2, #0
 8006632:	601a      	str	r2, [r3, #0]
    Paint.Image = image;
 8006634:	4a20      	ldr	r2, [pc, #128]	@ (80066b8 <Paint_NewImage+0xa4>)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	6013      	str	r3, [r2, #0]

    Paint.WidthMemory = Width;
 800663a:	4a1f      	ldr	r2, [pc, #124]	@ (80066b8 <Paint_NewImage+0xa4>)
 800663c:	897b      	ldrh	r3, [r7, #10]
 800663e:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 8006640:	4a1d      	ldr	r2, [pc, #116]	@ (80066b8 <Paint_NewImage+0xa4>)
 8006642:	893b      	ldrh	r3, [r7, #8]
 8006644:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 8006646:	4a1c      	ldr	r2, [pc, #112]	@ (80066b8 <Paint_NewImage+0xa4>)
 8006648:	8b3b      	ldrh	r3, [r7, #24]
 800664a:	8193      	strh	r3, [r2, #12]
	Paint.Scale = 2;
 800664c:	4b1a      	ldr	r3, [pc, #104]	@ (80066b8 <Paint_NewImage+0xa4>)
 800664e:	2202      	movs	r2, #2
 8006650:	82da      	strh	r2, [r3, #22]
		
    Paint.WidthByte = (Width % 8 == 0)? (Width / 8 ): (Width / 8 + 1);
 8006652:	897b      	ldrh	r3, [r7, #10]
 8006654:	f003 0307 	and.w	r3, r3, #7
 8006658:	b29b      	uxth	r3, r3
 800665a:	2b00      	cmp	r3, #0
 800665c:	d103      	bne.n	8006666 <Paint_NewImage+0x52>
 800665e:	897b      	ldrh	r3, [r7, #10]
 8006660:	08db      	lsrs	r3, r3, #3
 8006662:	b29b      	uxth	r3, r3
 8006664:	e004      	b.n	8006670 <Paint_NewImage+0x5c>
 8006666:	897b      	ldrh	r3, [r7, #10]
 8006668:	08db      	lsrs	r3, r3, #3
 800666a:	b29b      	uxth	r3, r3
 800666c:	3301      	adds	r3, #1
 800666e:	b29b      	uxth	r3, r3
 8006670:	4a11      	ldr	r2, [pc, #68]	@ (80066b8 <Paint_NewImage+0xa4>)
 8006672:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 8006674:	4a10      	ldr	r2, [pc, #64]	@ (80066b8 <Paint_NewImage+0xa4>)
 8006676:	893b      	ldrh	r3, [r7, #8]
 8006678:	8293      	strh	r3, [r2, #20]
//    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
//    printf(" EPD_WIDTH / 8 = %d\r\n",  122 / 8);
   
    Paint.Rotate = Rotate;
 800667a:	4a0f      	ldr	r2, [pc, #60]	@ (80066b8 <Paint_NewImage+0xa4>)
 800667c:	88fb      	ldrh	r3, [r7, #6]
 800667e:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 8006680:	4b0d      	ldr	r3, [pc, #52]	@ (80066b8 <Paint_NewImage+0xa4>)
 8006682:	2200      	movs	r2, #0
 8006684:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 8006686:	88fb      	ldrh	r3, [r7, #6]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d002      	beq.n	8006692 <Paint_NewImage+0x7e>
 800668c:	88fb      	ldrh	r3, [r7, #6]
 800668e:	2bb4      	cmp	r3, #180	@ 0xb4
 8006690:	d106      	bne.n	80066a0 <Paint_NewImage+0x8c>
        Paint.Width = Width;
 8006692:	4a09      	ldr	r2, [pc, #36]	@ (80066b8 <Paint_NewImage+0xa4>)
 8006694:	897b      	ldrh	r3, [r7, #10]
 8006696:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 8006698:	4a07      	ldr	r2, [pc, #28]	@ (80066b8 <Paint_NewImage+0xa4>)
 800669a:	893b      	ldrh	r3, [r7, #8]
 800669c:	80d3      	strh	r3, [r2, #6]
 800669e:	e006      	b.n	80066ae <Paint_NewImage+0x9a>
    } else {
        Paint.Width = Height;
 80066a0:	4a05      	ldr	r2, [pc, #20]	@ (80066b8 <Paint_NewImage+0xa4>)
 80066a2:	893b      	ldrh	r3, [r7, #8]
 80066a4:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 80066a6:	4a04      	ldr	r2, [pc, #16]	@ (80066b8 <Paint_NewImage+0xa4>)
 80066a8:	897b      	ldrh	r3, [r7, #10]
 80066aa:	80d3      	strh	r3, [r2, #6]
    }
}
 80066ac:	bf00      	nop
 80066ae:	bf00      	nop
 80066b0:	3714      	adds	r7, #20
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bc80      	pop	{r7}
 80066b6:	4770      	bx	lr
 80066b8:	20000458 	.word	0x20000458

080066bc <Paint_SelectImage>:
function: Select Image
parameter:
    image : Pointer to the image cache
******************************************************************************/
void Paint_SelectImage(UBYTE *image)
{
 80066bc:	b480      	push	{r7}
 80066be:	b083      	sub	sp, #12
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
    Paint.Image = image;
 80066c4:	4a03      	ldr	r2, [pc, #12]	@ (80066d4 <Paint_SelectImage+0x18>)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6013      	str	r3, [r2, #0]
}
 80066ca:	bf00      	nop
 80066cc:	370c      	adds	r7, #12
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bc80      	pop	{r7}
 80066d2:	4770      	bx	lr
 80066d4:	20000458 	.word	0x20000458

080066d8 <Paint_SetPixel>:
    Xpoint : At point X
    Ypoint : At point Y
    Color  : Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b08a      	sub	sp, #40	@ 0x28
 80066dc:	af00      	add	r7, sp, #0
 80066de:	4603      	mov	r3, r0
 80066e0:	80fb      	strh	r3, [r7, #6]
 80066e2:	460b      	mov	r3, r1
 80066e4:	80bb      	strh	r3, [r7, #4]
 80066e6:	4613      	mov	r3, r2
 80066e8:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 80066ea:	4ba0      	ldr	r3, [pc, #640]	@ (800696c <Paint_SetPixel+0x294>)
 80066ec:	889b      	ldrh	r3, [r3, #4]
 80066ee:	88fa      	ldrh	r2, [r7, #6]
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d804      	bhi.n	80066fe <Paint_SetPixel+0x26>
 80066f4:	4b9d      	ldr	r3, [pc, #628]	@ (800696c <Paint_SetPixel+0x294>)
 80066f6:	88db      	ldrh	r3, [r3, #6]
 80066f8:	88ba      	ldrh	r2, [r7, #4]
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d903      	bls.n	8006706 <Paint_SetPixel+0x2e>
        Debug("Exceeding display boundaries\r\n");
 80066fe:	489c      	ldr	r0, [pc, #624]	@ (8006970 <Paint_SetPixel+0x298>)
 8006700:	f000 fdda 	bl	80072b8 <puts>
        return;
 8006704:	e12e      	b.n	8006964 <Paint_SetPixel+0x28c>
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 8006706:	4b99      	ldr	r3, [pc, #612]	@ (800696c <Paint_SetPixel+0x294>)
 8006708:	89db      	ldrh	r3, [r3, #14]
 800670a:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800670e:	d02b      	beq.n	8006768 <Paint_SetPixel+0x90>
 8006710:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8006714:	f300 8123 	bgt.w	800695e <Paint_SetPixel+0x286>
 8006718:	2bb4      	cmp	r3, #180	@ 0xb4
 800671a:	d016      	beq.n	800674a <Paint_SetPixel+0x72>
 800671c:	2bb4      	cmp	r3, #180	@ 0xb4
 800671e:	f300 811e 	bgt.w	800695e <Paint_SetPixel+0x286>
 8006722:	2b00      	cmp	r3, #0
 8006724:	d002      	beq.n	800672c <Paint_SetPixel+0x54>
 8006726:	2b5a      	cmp	r3, #90	@ 0x5a
 8006728:	d005      	beq.n	8006736 <Paint_SetPixel+0x5e>
    case 270:
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;
    default:
        return;
 800672a:	e118      	b.n	800695e <Paint_SetPixel+0x286>
        X = Xpoint;
 800672c:	88fb      	ldrh	r3, [r7, #6]
 800672e:	84fb      	strh	r3, [r7, #38]	@ 0x26
        Y = Ypoint;  
 8006730:	88bb      	ldrh	r3, [r7, #4]
 8006732:	84bb      	strh	r3, [r7, #36]	@ 0x24
        break;
 8006734:	e022      	b.n	800677c <Paint_SetPixel+0xa4>
        X = Paint.WidthMemory - Ypoint - 1;
 8006736:	4b8d      	ldr	r3, [pc, #564]	@ (800696c <Paint_SetPixel+0x294>)
 8006738:	891a      	ldrh	r2, [r3, #8]
 800673a:	88bb      	ldrh	r3, [r7, #4]
 800673c:	1ad3      	subs	r3, r2, r3
 800673e:	b29b      	uxth	r3, r3
 8006740:	3b01      	subs	r3, #1
 8006742:	84fb      	strh	r3, [r7, #38]	@ 0x26
        Y = Xpoint;
 8006744:	88fb      	ldrh	r3, [r7, #6]
 8006746:	84bb      	strh	r3, [r7, #36]	@ 0x24
        break;
 8006748:	e018      	b.n	800677c <Paint_SetPixel+0xa4>
        X = Paint.WidthMemory - Xpoint - 1;
 800674a:	4b88      	ldr	r3, [pc, #544]	@ (800696c <Paint_SetPixel+0x294>)
 800674c:	891a      	ldrh	r2, [r3, #8]
 800674e:	88fb      	ldrh	r3, [r7, #6]
 8006750:	1ad3      	subs	r3, r2, r3
 8006752:	b29b      	uxth	r3, r3
 8006754:	3b01      	subs	r3, #1
 8006756:	84fb      	strh	r3, [r7, #38]	@ 0x26
        Y = Paint.HeightMemory - Ypoint - 1;
 8006758:	4b84      	ldr	r3, [pc, #528]	@ (800696c <Paint_SetPixel+0x294>)
 800675a:	895a      	ldrh	r2, [r3, #10]
 800675c:	88bb      	ldrh	r3, [r7, #4]
 800675e:	1ad3      	subs	r3, r2, r3
 8006760:	b29b      	uxth	r3, r3
 8006762:	3b01      	subs	r3, #1
 8006764:	84bb      	strh	r3, [r7, #36]	@ 0x24
        break;
 8006766:	e009      	b.n	800677c <Paint_SetPixel+0xa4>
        X = Ypoint;
 8006768:	88bb      	ldrh	r3, [r7, #4]
 800676a:	84fb      	strh	r3, [r7, #38]	@ 0x26
        Y = Paint.HeightMemory - Xpoint - 1;
 800676c:	4b7f      	ldr	r3, [pc, #508]	@ (800696c <Paint_SetPixel+0x294>)
 800676e:	895a      	ldrh	r2, [r3, #10]
 8006770:	88fb      	ldrh	r3, [r7, #6]
 8006772:	1ad3      	subs	r3, r2, r3
 8006774:	b29b      	uxth	r3, r3
 8006776:	3b01      	subs	r3, #1
 8006778:	84bb      	strh	r3, [r7, #36]	@ 0x24
        break;
 800677a:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 800677c:	4b7b      	ldr	r3, [pc, #492]	@ (800696c <Paint_SetPixel+0x294>)
 800677e:	8a1b      	ldrh	r3, [r3, #16]
 8006780:	2b03      	cmp	r3, #3
 8006782:	f200 80ee 	bhi.w	8006962 <Paint_SetPixel+0x28a>
 8006786:	a201      	add	r2, pc, #4	@ (adr r2, 800678c <Paint_SetPixel+0xb4>)
 8006788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800678c:	080067db 	.word	0x080067db
 8006790:	0800679d 	.word	0x0800679d
 8006794:	080067ad 	.word	0x080067ad
 8006798:	080067bd 	.word	0x080067bd
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 800679c:	4b73      	ldr	r3, [pc, #460]	@ (800696c <Paint_SetPixel+0x294>)
 800679e:	891a      	ldrh	r2, [r3, #8]
 80067a0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80067a2:	1ad3      	subs	r3, r2, r3
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	3b01      	subs	r3, #1
 80067a8:	84fb      	strh	r3, [r7, #38]	@ 0x26
        break;
 80067aa:	e017      	b.n	80067dc <Paint_SetPixel+0x104>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 80067ac:	4b6f      	ldr	r3, [pc, #444]	@ (800696c <Paint_SetPixel+0x294>)
 80067ae:	895a      	ldrh	r2, [r3, #10]
 80067b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80067b2:	1ad3      	subs	r3, r2, r3
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	3b01      	subs	r3, #1
 80067b8:	84bb      	strh	r3, [r7, #36]	@ 0x24
        break;
 80067ba:	e00f      	b.n	80067dc <Paint_SetPixel+0x104>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 80067bc:	4b6b      	ldr	r3, [pc, #428]	@ (800696c <Paint_SetPixel+0x294>)
 80067be:	891a      	ldrh	r2, [r3, #8]
 80067c0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80067c2:	1ad3      	subs	r3, r2, r3
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	3b01      	subs	r3, #1
 80067c8:	84fb      	strh	r3, [r7, #38]	@ 0x26
        Y = Paint.HeightMemory - Y - 1;
 80067ca:	4b68      	ldr	r3, [pc, #416]	@ (800696c <Paint_SetPixel+0x294>)
 80067cc:	895a      	ldrh	r2, [r3, #10]
 80067ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80067d0:	1ad3      	subs	r3, r2, r3
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	3b01      	subs	r3, #1
 80067d6:	84bb      	strh	r3, [r7, #36]	@ 0x24
        break;
 80067d8:	e000      	b.n	80067dc <Paint_SetPixel+0x104>
        break;
 80067da:	bf00      	nop
    default:
        return;
    }

    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 80067dc:	4b63      	ldr	r3, [pc, #396]	@ (800696c <Paint_SetPixel+0x294>)
 80067de:	891b      	ldrh	r3, [r3, #8]
 80067e0:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d804      	bhi.n	80067f0 <Paint_SetPixel+0x118>
 80067e6:	4b61      	ldr	r3, [pc, #388]	@ (800696c <Paint_SetPixel+0x294>)
 80067e8:	895b      	ldrh	r3, [r3, #10]
 80067ea:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d903      	bls.n	80067f8 <Paint_SetPixel+0x120>
        Debug("Exceeding display boundaries\r\n");
 80067f0:	485f      	ldr	r0, [pc, #380]	@ (8006970 <Paint_SetPixel+0x298>)
 80067f2:	f000 fd61 	bl	80072b8 <puts>
        return;
 80067f6:	e0b5      	b.n	8006964 <Paint_SetPixel+0x28c>
    }
    
    if(Paint.Scale == 2){
 80067f8:	4b5c      	ldr	r3, [pc, #368]	@ (800696c <Paint_SetPixel+0x294>)
 80067fa:	8adb      	ldrh	r3, [r3, #22]
 80067fc:	2b02      	cmp	r3, #2
 80067fe:	d138      	bne.n	8006872 <Paint_SetPixel+0x19a>
        UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
 8006800:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006802:	08db      	lsrs	r3, r3, #3
 8006804:	b29b      	uxth	r3, r3
 8006806:	4619      	mov	r1, r3
 8006808:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800680a:	4a58      	ldr	r2, [pc, #352]	@ (800696c <Paint_SetPixel+0x294>)
 800680c:	8a52      	ldrh	r2, [r2, #18]
 800680e:	fb02 f303 	mul.w	r3, r2, r3
 8006812:	440b      	add	r3, r1
 8006814:	613b      	str	r3, [r7, #16]
        UBYTE Rdata = Paint.Image[Addr];
 8006816:	4b55      	ldr	r3, [pc, #340]	@ (800696c <Paint_SetPixel+0x294>)
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	4413      	add	r3, r2
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	73fb      	strb	r3, [r7, #15]
        if(Color == BLACK)
 8006822:	887b      	ldrh	r3, [r7, #2]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d112      	bne.n	800684e <Paint_SetPixel+0x176>
            Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 8006828:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800682a:	f003 0307 	and.w	r3, r3, #7
 800682e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006832:	fa42 f303 	asr.w	r3, r2, r3
 8006836:	b25a      	sxtb	r2, r3
 8006838:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800683c:	4013      	ands	r3, r2
 800683e:	b259      	sxtb	r1, r3
 8006840:	4b4a      	ldr	r3, [pc, #296]	@ (800696c <Paint_SetPixel+0x294>)
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	4413      	add	r3, r2
 8006848:	b2ca      	uxtb	r2, r1
 800684a:	701a      	strb	r2, [r3, #0]
 800684c:	e08a      	b.n	8006964 <Paint_SetPixel+0x28c>
        else
            Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
 800684e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006850:	f003 0307 	and.w	r3, r3, #7
 8006854:	2280      	movs	r2, #128	@ 0x80
 8006856:	fa42 f303 	asr.w	r3, r2, r3
 800685a:	b25a      	sxtb	r2, r3
 800685c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006860:	4313      	orrs	r3, r2
 8006862:	b259      	sxtb	r1, r3
 8006864:	4b41      	ldr	r3, [pc, #260]	@ (800696c <Paint_SetPixel+0x294>)
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	4413      	add	r3, r2
 800686c:	b2ca      	uxtb	r2, r1
 800686e:	701a      	strb	r2, [r3, #0]
 8006870:	e078      	b.n	8006964 <Paint_SetPixel+0x28c>
    }else if(Paint.Scale == 4){
 8006872:	4b3e      	ldr	r3, [pc, #248]	@ (800696c <Paint_SetPixel+0x294>)
 8006874:	8adb      	ldrh	r3, [r3, #22]
 8006876:	2b04      	cmp	r3, #4
 8006878:	d136      	bne.n	80068e8 <Paint_SetPixel+0x210>
        UDOUBLE Addr = X / 4 + Y * Paint.WidthByte;
 800687a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800687c:	089b      	lsrs	r3, r3, #2
 800687e:	b29b      	uxth	r3, r3
 8006880:	4619      	mov	r1, r3
 8006882:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006884:	4a39      	ldr	r2, [pc, #228]	@ (800696c <Paint_SetPixel+0x294>)
 8006886:	8a52      	ldrh	r2, [r2, #18]
 8006888:	fb02 f303 	mul.w	r3, r2, r3
 800688c:	440b      	add	r3, r1
 800688e:	61bb      	str	r3, [r7, #24]
        Color = Color % 4;//Guaranteed color scale is 4  --- 0~3
 8006890:	887b      	ldrh	r3, [r7, #2]
 8006892:	f003 0303 	and.w	r3, r3, #3
 8006896:	807b      	strh	r3, [r7, #2]
        UBYTE Rdata = Paint.Image[Addr];
 8006898:	4b34      	ldr	r3, [pc, #208]	@ (800696c <Paint_SetPixel+0x294>)
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	69bb      	ldr	r3, [r7, #24]
 800689e:	4413      	add	r3, r2
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	75fb      	strb	r3, [r7, #23]
        
        Rdata = Rdata & (~(0xC0 >> ((X % 4)*2)));
 80068a4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80068a6:	f003 0303 	and.w	r3, r3, #3
 80068aa:	005b      	lsls	r3, r3, #1
 80068ac:	f06f 02c0 	mvn.w	r2, #192	@ 0xc0
 80068b0:	fa42 f303 	asr.w	r3, r2, r3
 80068b4:	b25a      	sxtb	r2, r3
 80068b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80068ba:	4013      	ands	r3, r2
 80068bc:	b25b      	sxtb	r3, r3
 80068be:	75fb      	strb	r3, [r7, #23]
        Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4)*2));
 80068c0:	887b      	ldrh	r3, [r7, #2]
 80068c2:	019a      	lsls	r2, r3, #6
 80068c4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80068c6:	f003 0303 	and.w	r3, r3, #3
 80068ca:	005b      	lsls	r3, r3, #1
 80068cc:	fa42 f303 	asr.w	r3, r2, r3
 80068d0:	b25a      	sxtb	r2, r3
 80068d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80068d6:	4313      	orrs	r3, r2
 80068d8:	b259      	sxtb	r1, r3
 80068da:	4b24      	ldr	r3, [pc, #144]	@ (800696c <Paint_SetPixel+0x294>)
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	69bb      	ldr	r3, [r7, #24]
 80068e0:	4413      	add	r3, r2
 80068e2:	b2ca      	uxtb	r2, r1
 80068e4:	701a      	strb	r2, [r3, #0]
 80068e6:	e03d      	b.n	8006964 <Paint_SetPixel+0x28c>
    }else if(Paint.Scale == 6 || Paint.Scale == 7){
 80068e8:	4b20      	ldr	r3, [pc, #128]	@ (800696c <Paint_SetPixel+0x294>)
 80068ea:	8adb      	ldrh	r3, [r3, #22]
 80068ec:	2b06      	cmp	r3, #6
 80068ee:	d003      	beq.n	80068f8 <Paint_SetPixel+0x220>
 80068f0:	4b1e      	ldr	r3, [pc, #120]	@ (800696c <Paint_SetPixel+0x294>)
 80068f2:	8adb      	ldrh	r3, [r3, #22]
 80068f4:	2b07      	cmp	r3, #7
 80068f6:	d135      	bne.n	8006964 <Paint_SetPixel+0x28c>
		UDOUBLE Addr = X / 2  + Y * Paint.WidthByte;
 80068f8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80068fa:	085b      	lsrs	r3, r3, #1
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	4619      	mov	r1, r3
 8006900:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006902:	4a1a      	ldr	r2, [pc, #104]	@ (800696c <Paint_SetPixel+0x294>)
 8006904:	8a52      	ldrh	r2, [r2, #18]
 8006906:	fb02 f303 	mul.w	r3, r2, r3
 800690a:	440b      	add	r3, r1
 800690c:	623b      	str	r3, [r7, #32]
		UBYTE Rdata = Paint.Image[Addr];
 800690e:	4b17      	ldr	r3, [pc, #92]	@ (800696c <Paint_SetPixel+0x294>)
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	6a3b      	ldr	r3, [r7, #32]
 8006914:	4413      	add	r3, r2
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	77fb      	strb	r3, [r7, #31]
		Rdata = Rdata & (~(0xF0 >> ((X % 2)*4)));//Clear first, then set value
 800691a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800691c:	f003 0301 	and.w	r3, r3, #1
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	f06f 02f0 	mvn.w	r2, #240	@ 0xf0
 8006926:	fa42 f303 	asr.w	r3, r2, r3
 800692a:	b25a      	sxtb	r2, r3
 800692c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006930:	4013      	ands	r3, r2
 8006932:	b25b      	sxtb	r3, r3
 8006934:	77fb      	strb	r3, [r7, #31]
		Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2)*4));
 8006936:	887b      	ldrh	r3, [r7, #2]
 8006938:	011a      	lsls	r2, r3, #4
 800693a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800693c:	f003 0301 	and.w	r3, r3, #1
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	fa42 f303 	asr.w	r3, r2, r3
 8006946:	b25a      	sxtb	r2, r3
 8006948:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800694c:	4313      	orrs	r3, r2
 800694e:	b259      	sxtb	r1, r3
 8006950:	4b06      	ldr	r3, [pc, #24]	@ (800696c <Paint_SetPixel+0x294>)
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	6a3b      	ldr	r3, [r7, #32]
 8006956:	4413      	add	r3, r2
 8006958:	b2ca      	uxtb	r2, r1
 800695a:	701a      	strb	r2, [r3, #0]
 800695c:	e002      	b.n	8006964 <Paint_SetPixel+0x28c>
        return;
 800695e:	bf00      	nop
 8006960:	e000      	b.n	8006964 <Paint_SetPixel+0x28c>
        return;
 8006962:	bf00      	nop
		//printf("Add =  %d ,data = %d\r\n",Addr,Rdata);
		}
}
 8006964:	3728      	adds	r7, #40	@ 0x28
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
 800696a:	bf00      	nop
 800696c:	20000458 	.word	0x20000458
 8006970:	08007be0 	.word	0x08007be0

08006974 <Paint_Clear>:
function: Clear the color of the picture
parameter:
    Color : Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{
 8006974:	b480      	push	{r7}
 8006976:	b089      	sub	sp, #36	@ 0x24
 8006978:	af00      	add	r7, sp, #0
 800697a:	4603      	mov	r3, r0
 800697c:	80fb      	strh	r3, [r7, #6]
	if(Paint.Scale == 2) {
 800697e:	4b50      	ldr	r3, [pc, #320]	@ (8006ac0 <Paint_Clear+0x14c>)
 8006980:	8adb      	ldrh	r3, [r3, #22]
 8006982:	2b02      	cmp	r3, #2
 8006984:	d125      	bne.n	80069d2 <Paint_Clear+0x5e>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8006986:	2300      	movs	r3, #0
 8006988:	83fb      	strh	r3, [r7, #30]
 800698a:	e01c      	b.n	80069c6 <Paint_Clear+0x52>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 800698c:	2300      	movs	r3, #0
 800698e:	83bb      	strh	r3, [r7, #28]
 8006990:	e011      	b.n	80069b6 <Paint_Clear+0x42>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 8006992:	8bba      	ldrh	r2, [r7, #28]
 8006994:	8bfb      	ldrh	r3, [r7, #30]
 8006996:	494a      	ldr	r1, [pc, #296]	@ (8006ac0 <Paint_Clear+0x14c>)
 8006998:	8a49      	ldrh	r1, [r1, #18]
 800699a:	fb01 f303 	mul.w	r3, r1, r3
 800699e:	4413      	add	r3, r2
 80069a0:	60bb      	str	r3, [r7, #8]
				Paint.Image[Addr] = Color;
 80069a2:	4b47      	ldr	r3, [pc, #284]	@ (8006ac0 <Paint_Clear+0x14c>)
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	4413      	add	r3, r2
 80069aa:	88fa      	ldrh	r2, [r7, #6]
 80069ac:	b2d2      	uxtb	r2, r2
 80069ae:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 80069b0:	8bbb      	ldrh	r3, [r7, #28]
 80069b2:	3301      	adds	r3, #1
 80069b4:	83bb      	strh	r3, [r7, #28]
 80069b6:	4b42      	ldr	r3, [pc, #264]	@ (8006ac0 <Paint_Clear+0x14c>)
 80069b8:	8a5b      	ldrh	r3, [r3, #18]
 80069ba:	8bba      	ldrh	r2, [r7, #28]
 80069bc:	429a      	cmp	r2, r3
 80069be:	d3e8      	bcc.n	8006992 <Paint_Clear+0x1e>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 80069c0:	8bfb      	ldrh	r3, [r7, #30]
 80069c2:	3301      	adds	r3, #1
 80069c4:	83fb      	strh	r3, [r7, #30]
 80069c6:	4b3e      	ldr	r3, [pc, #248]	@ (8006ac0 <Paint_Clear+0x14c>)
 80069c8:	8a9b      	ldrh	r3, [r3, #20]
 80069ca:	8bfa      	ldrh	r2, [r7, #30]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d3dd      	bcc.n	800698c <Paint_Clear+0x18>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
				Paint.Image[Addr] = (Color<<4)|Color;
			}
		}		
	}
}
 80069d0:	e070      	b.n	8006ab4 <Paint_Clear+0x140>
    }else if(Paint.Scale == 4) {
 80069d2:	4b3b      	ldr	r3, [pc, #236]	@ (8006ac0 <Paint_Clear+0x14c>)
 80069d4:	8adb      	ldrh	r3, [r3, #22]
 80069d6:	2b04      	cmp	r3, #4
 80069d8:	d138      	bne.n	8006a4c <Paint_Clear+0xd8>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 80069da:	2300      	movs	r3, #0
 80069dc:	837b      	strh	r3, [r7, #26]
 80069de:	e02f      	b.n	8006a40 <Paint_Clear+0xcc>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 80069e0:	2300      	movs	r3, #0
 80069e2:	833b      	strh	r3, [r7, #24]
 80069e4:	e024      	b.n	8006a30 <Paint_Clear+0xbc>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 80069e6:	8b3a      	ldrh	r2, [r7, #24]
 80069e8:	8b7b      	ldrh	r3, [r7, #26]
 80069ea:	4935      	ldr	r1, [pc, #212]	@ (8006ac0 <Paint_Clear+0x14c>)
 80069ec:	8a49      	ldrh	r1, [r1, #18]
 80069ee:	fb01 f303 	mul.w	r3, r1, r3
 80069f2:	4413      	add	r3, r2
 80069f4:	60fb      	str	r3, [r7, #12]
				Paint.Image[Addr] = (Color<<6)|(Color<<4)|(Color<<2)|Color;
 80069f6:	88fb      	ldrh	r3, [r7, #6]
 80069f8:	b25b      	sxtb	r3, r3
 80069fa:	019b      	lsls	r3, r3, #6
 80069fc:	b25a      	sxtb	r2, r3
 80069fe:	88fb      	ldrh	r3, [r7, #6]
 8006a00:	b25b      	sxtb	r3, r3
 8006a02:	011b      	lsls	r3, r3, #4
 8006a04:	b25b      	sxtb	r3, r3
 8006a06:	4313      	orrs	r3, r2
 8006a08:	b25a      	sxtb	r2, r3
 8006a0a:	88fb      	ldrh	r3, [r7, #6]
 8006a0c:	b25b      	sxtb	r3, r3
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	b25b      	sxtb	r3, r3
 8006a12:	4313      	orrs	r3, r2
 8006a14:	b25a      	sxtb	r2, r3
 8006a16:	88fb      	ldrh	r3, [r7, #6]
 8006a18:	b25b      	sxtb	r3, r3
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	b259      	sxtb	r1, r3
 8006a1e:	4b28      	ldr	r3, [pc, #160]	@ (8006ac0 <Paint_Clear+0x14c>)
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	4413      	add	r3, r2
 8006a26:	b2ca      	uxtb	r2, r1
 8006a28:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 8006a2a:	8b3b      	ldrh	r3, [r7, #24]
 8006a2c:	3301      	adds	r3, #1
 8006a2e:	833b      	strh	r3, [r7, #24]
 8006a30:	4b23      	ldr	r3, [pc, #140]	@ (8006ac0 <Paint_Clear+0x14c>)
 8006a32:	8a5b      	ldrh	r3, [r3, #18]
 8006a34:	8b3a      	ldrh	r2, [r7, #24]
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d3d5      	bcc.n	80069e6 <Paint_Clear+0x72>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8006a3a:	8b7b      	ldrh	r3, [r7, #26]
 8006a3c:	3301      	adds	r3, #1
 8006a3e:	837b      	strh	r3, [r7, #26]
 8006a40:	4b1f      	ldr	r3, [pc, #124]	@ (8006ac0 <Paint_Clear+0x14c>)
 8006a42:	8a9b      	ldrh	r3, [r3, #20]
 8006a44:	8b7a      	ldrh	r2, [r7, #26]
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d3ca      	bcc.n	80069e0 <Paint_Clear+0x6c>
}
 8006a4a:	e033      	b.n	8006ab4 <Paint_Clear+0x140>
	}else if(Paint.Scale == 6 || Paint.Scale == 7) {
 8006a4c:	4b1c      	ldr	r3, [pc, #112]	@ (8006ac0 <Paint_Clear+0x14c>)
 8006a4e:	8adb      	ldrh	r3, [r3, #22]
 8006a50:	2b06      	cmp	r3, #6
 8006a52:	d003      	beq.n	8006a5c <Paint_Clear+0xe8>
 8006a54:	4b1a      	ldr	r3, [pc, #104]	@ (8006ac0 <Paint_Clear+0x14c>)
 8006a56:	8adb      	ldrh	r3, [r3, #22]
 8006a58:	2b07      	cmp	r3, #7
 8006a5a:	d12b      	bne.n	8006ab4 <Paint_Clear+0x140>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	82fb      	strh	r3, [r7, #22]
 8006a60:	e023      	b.n	8006aaa <Paint_Clear+0x136>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 8006a62:	2300      	movs	r3, #0
 8006a64:	82bb      	strh	r3, [r7, #20]
 8006a66:	e018      	b.n	8006a9a <Paint_Clear+0x126>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 8006a68:	8aba      	ldrh	r2, [r7, #20]
 8006a6a:	8afb      	ldrh	r3, [r7, #22]
 8006a6c:	4914      	ldr	r1, [pc, #80]	@ (8006ac0 <Paint_Clear+0x14c>)
 8006a6e:	8a49      	ldrh	r1, [r1, #18]
 8006a70:	fb01 f303 	mul.w	r3, r1, r3
 8006a74:	4413      	add	r3, r2
 8006a76:	613b      	str	r3, [r7, #16]
				Paint.Image[Addr] = (Color<<4)|Color;
 8006a78:	88fb      	ldrh	r3, [r7, #6]
 8006a7a:	b25b      	sxtb	r3, r3
 8006a7c:	011b      	lsls	r3, r3, #4
 8006a7e:	b25a      	sxtb	r2, r3
 8006a80:	88fb      	ldrh	r3, [r7, #6]
 8006a82:	b25b      	sxtb	r3, r3
 8006a84:	4313      	orrs	r3, r2
 8006a86:	b259      	sxtb	r1, r3
 8006a88:	4b0d      	ldr	r3, [pc, #52]	@ (8006ac0 <Paint_Clear+0x14c>)
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	4413      	add	r3, r2
 8006a90:	b2ca      	uxtb	r2, r1
 8006a92:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 8006a94:	8abb      	ldrh	r3, [r7, #20]
 8006a96:	3301      	adds	r3, #1
 8006a98:	82bb      	strh	r3, [r7, #20]
 8006a9a:	4b09      	ldr	r3, [pc, #36]	@ (8006ac0 <Paint_Clear+0x14c>)
 8006a9c:	8a5b      	ldrh	r3, [r3, #18]
 8006a9e:	8aba      	ldrh	r2, [r7, #20]
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d3e1      	bcc.n	8006a68 <Paint_Clear+0xf4>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8006aa4:	8afb      	ldrh	r3, [r7, #22]
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	82fb      	strh	r3, [r7, #22]
 8006aaa:	4b05      	ldr	r3, [pc, #20]	@ (8006ac0 <Paint_Clear+0x14c>)
 8006aac:	8a9b      	ldrh	r3, [r3, #20]
 8006aae:	8afa      	ldrh	r2, [r7, #22]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d3d6      	bcc.n	8006a62 <Paint_Clear+0xee>
}
 8006ab4:	bf00      	nop
 8006ab6:	3724      	adds	r7, #36	@ 0x24
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bc80      	pop	{r7}
 8006abc:	4770      	bx	lr
 8006abe:	bf00      	nop
 8006ac0:	20000458 	.word	0x20000458

08006ac4 <Paint_ClearWindows>:
    Xend   : x end point
    Yend   : y end point
    Color  : Painted colors
******************************************************************************/
void Paint_ClearWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, UWORD Color)
{
 8006ac4:	b590      	push	{r4, r7, lr}
 8006ac6:	b085      	sub	sp, #20
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	4604      	mov	r4, r0
 8006acc:	4608      	mov	r0, r1
 8006ace:	4611      	mov	r1, r2
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	4623      	mov	r3, r4
 8006ad4:	80fb      	strh	r3, [r7, #6]
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	80bb      	strh	r3, [r7, #4]
 8006ada:	460b      	mov	r3, r1
 8006adc:	807b      	strh	r3, [r7, #2]
 8006ade:	4613      	mov	r3, r2
 8006ae0:	803b      	strh	r3, [r7, #0]
    UWORD X, Y;
    for (Y = Ystart; Y < Yend; Y++) {
 8006ae2:	88bb      	ldrh	r3, [r7, #4]
 8006ae4:	81bb      	strh	r3, [r7, #12]
 8006ae6:	e012      	b.n	8006b0e <Paint_ClearWindows+0x4a>
        for (X = Xstart; X < Xend; X++) {//8 pixel =  1 byte
 8006ae8:	88fb      	ldrh	r3, [r7, #6]
 8006aea:	81fb      	strh	r3, [r7, #14]
 8006aec:	e008      	b.n	8006b00 <Paint_ClearWindows+0x3c>
            Paint_SetPixel(X, Y, Color);
 8006aee:	8c3a      	ldrh	r2, [r7, #32]
 8006af0:	89b9      	ldrh	r1, [r7, #12]
 8006af2:	89fb      	ldrh	r3, [r7, #14]
 8006af4:	4618      	mov	r0, r3
 8006af6:	f7ff fdef 	bl	80066d8 <Paint_SetPixel>
        for (X = Xstart; X < Xend; X++) {//8 pixel =  1 byte
 8006afa:	89fb      	ldrh	r3, [r7, #14]
 8006afc:	3301      	adds	r3, #1
 8006afe:	81fb      	strh	r3, [r7, #14]
 8006b00:	89fa      	ldrh	r2, [r7, #14]
 8006b02:	887b      	ldrh	r3, [r7, #2]
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d3f2      	bcc.n	8006aee <Paint_ClearWindows+0x2a>
    for (Y = Ystart; Y < Yend; Y++) {
 8006b08:	89bb      	ldrh	r3, [r7, #12]
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	81bb      	strh	r3, [r7, #12]
 8006b0e:	89ba      	ldrh	r2, [r7, #12]
 8006b10:	883b      	ldrh	r3, [r7, #0]
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d3e8      	bcc.n	8006ae8 <Paint_ClearWindows+0x24>
        }
    }
}
 8006b16:	bf00      	nop
 8006b18:	bf00      	nop
 8006b1a:	3714      	adds	r7, #20
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd90      	pop	{r4, r7, pc}

08006b20 <Paint_DrawChar>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b088      	sub	sp, #32
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	607b      	str	r3, [r7, #4]
 8006b28:	4603      	mov	r3, r0
 8006b2a:	81fb      	strh	r3, [r7, #14]
 8006b2c:	460b      	mov	r3, r1
 8006b2e:	81bb      	strh	r3, [r7, #12]
 8006b30:	4613      	mov	r3, r2
 8006b32:	72fb      	strb	r3, [r7, #11]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8006b34:	4b4c      	ldr	r3, [pc, #304]	@ (8006c68 <Paint_DrawChar+0x148>)
 8006b36:	889b      	ldrh	r3, [r3, #4]
 8006b38:	89fa      	ldrh	r2, [r7, #14]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d804      	bhi.n	8006b48 <Paint_DrawChar+0x28>
 8006b3e:	4b4a      	ldr	r3, [pc, #296]	@ (8006c68 <Paint_DrawChar+0x148>)
 8006b40:	88db      	ldrh	r3, [r3, #6]
 8006b42:	89ba      	ldrh	r2, [r7, #12]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d903      	bls.n	8006b50 <Paint_DrawChar+0x30>
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 8006b48:	4848      	ldr	r0, [pc, #288]	@ (8006c6c <Paint_DrawChar+0x14c>)
 8006b4a:	f000 fbb5 	bl	80072b8 <puts>
        return;
 8006b4e:	e087      	b.n	8006c60 <Paint_DrawChar+0x140>
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8006b50:	7afb      	ldrb	r3, [r7, #11]
 8006b52:	3b20      	subs	r3, #32
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	88d2      	ldrh	r2, [r2, #6]
 8006b58:	fb02 f303 	mul.w	r3, r2, r3
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	8892      	ldrh	r2, [r2, #4]
 8006b60:	08d2      	lsrs	r2, r2, #3
 8006b62:	b292      	uxth	r2, r2
 8006b64:	4611      	mov	r1, r2
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	8892      	ldrh	r2, [r2, #4]
 8006b6a:	f002 0207 	and.w	r2, r2, #7
 8006b6e:	b292      	uxth	r2, r2
 8006b70:	2a00      	cmp	r2, #0
 8006b72:	bf14      	ite	ne
 8006b74:	2201      	movne	r2, #1
 8006b76:	2200      	moveq	r2, #0
 8006b78:	b2d2      	uxtb	r2, r2
 8006b7a:	440a      	add	r2, r1
 8006b7c:	fb02 f303 	mul.w	r3, r2, r3
 8006b80:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	4413      	add	r3, r2
 8006b8a:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	83fb      	strh	r3, [r7, #30]
 8006b90:	e061      	b.n	8006c56 <Paint_DrawChar+0x136>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8006b92:	2300      	movs	r3, #0
 8006b94:	83bb      	strh	r3, [r7, #28]
 8006b96:	e04c      	b.n	8006c32 <Paint_DrawChar+0x112>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 8006b98:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006b9a:	2bff      	cmp	r3, #255	@ 0xff
 8006b9c:	d118      	bne.n	8006bd0 <Paint_DrawChar+0xb0>
                if (*ptr & (0x80 >> (Column % 8)))
 8006b9e:	69bb      	ldr	r3, [r7, #24]
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	4619      	mov	r1, r3
 8006ba4:	8bbb      	ldrh	r3, [r7, #28]
 8006ba6:	f003 0307 	and.w	r3, r3, #7
 8006baa:	2280      	movs	r2, #128	@ 0x80
 8006bac:	fa42 f303 	asr.w	r3, r2, r3
 8006bb0:	400b      	ands	r3, r1
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d031      	beq.n	8006c1a <Paint_DrawChar+0xfa>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8006bb6:	89fa      	ldrh	r2, [r7, #14]
 8006bb8:	8bbb      	ldrh	r3, [r7, #28]
 8006bba:	4413      	add	r3, r2
 8006bbc:	b298      	uxth	r0, r3
 8006bbe:	89ba      	ldrh	r2, [r7, #12]
 8006bc0:	8bfb      	ldrh	r3, [r7, #30]
 8006bc2:	4413      	add	r3, r2
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006bc8:	4619      	mov	r1, r3
 8006bca:	f7ff fd85 	bl	80066d8 <Paint_SetPixel>
 8006bce:	e024      	b.n	8006c1a <Paint_DrawChar+0xfa>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	8bbb      	ldrh	r3, [r7, #28]
 8006bd8:	f003 0307 	and.w	r3, r3, #7
 8006bdc:	2280      	movs	r2, #128	@ 0x80
 8006bde:	fa42 f303 	asr.w	r3, r2, r3
 8006be2:	400b      	ands	r3, r1
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d00c      	beq.n	8006c02 <Paint_DrawChar+0xe2>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8006be8:	89fa      	ldrh	r2, [r7, #14]
 8006bea:	8bbb      	ldrh	r3, [r7, #28]
 8006bec:	4413      	add	r3, r2
 8006bee:	b298      	uxth	r0, r3
 8006bf0:	89ba      	ldrh	r2, [r7, #12]
 8006bf2:	8bfb      	ldrh	r3, [r7, #30]
 8006bf4:	4413      	add	r3, r2
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	f7ff fd6c 	bl	80066d8 <Paint_SetPixel>
 8006c00:	e00b      	b.n	8006c1a <Paint_DrawChar+0xfa>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 8006c02:	89fa      	ldrh	r2, [r7, #14]
 8006c04:	8bbb      	ldrh	r3, [r7, #28]
 8006c06:	4413      	add	r3, r2
 8006c08:	b298      	uxth	r0, r3
 8006c0a:	89ba      	ldrh	r2, [r7, #12]
 8006c0c:	8bfb      	ldrh	r3, [r7, #30]
 8006c0e:	4413      	add	r3, r2
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8006c14:	4619      	mov	r1, r3
 8006c16:	f7ff fd5f 	bl	80066d8 <Paint_SetPixel>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 8006c1a:	8bbb      	ldrh	r3, [r7, #28]
 8006c1c:	f003 0307 	and.w	r3, r3, #7
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	2b07      	cmp	r3, #7
 8006c24:	d102      	bne.n	8006c2c <Paint_DrawChar+0x10c>
                ptr++;
 8006c26:	69bb      	ldr	r3, [r7, #24]
 8006c28:	3301      	adds	r3, #1
 8006c2a:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8006c2c:	8bbb      	ldrh	r3, [r7, #28]
 8006c2e:	3301      	adds	r3, #1
 8006c30:	83bb      	strh	r3, [r7, #28]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	889b      	ldrh	r3, [r3, #4]
 8006c36:	8bba      	ldrh	r2, [r7, #28]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d3ad      	bcc.n	8006b98 <Paint_DrawChar+0x78>
        }// Write a line
        if (Font->Width % 8 != 0)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	889b      	ldrh	r3, [r3, #4]
 8006c40:	f003 0307 	and.w	r3, r3, #7
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d002      	beq.n	8006c50 <Paint_DrawChar+0x130>
            ptr++;
 8006c4a:	69bb      	ldr	r3, [r7, #24]
 8006c4c:	3301      	adds	r3, #1
 8006c4e:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 8006c50:	8bfb      	ldrh	r3, [r7, #30]
 8006c52:	3301      	adds	r3, #1
 8006c54:	83fb      	strh	r3, [r7, #30]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	88db      	ldrh	r3, [r3, #6]
 8006c5a:	8bfa      	ldrh	r2, [r7, #30]
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d398      	bcc.n	8006b92 <Paint_DrawChar+0x72>
    }// Write all
}
 8006c60:	3720      	adds	r7, #32
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	bf00      	nop
 8006c68:	20000458 	.word	0x20000458
 8006c6c:	08007d44 	.word	0x08007d44

08006c70 <Paint_DrawString_EN>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b088      	sub	sp, #32
 8006c74:	af02      	add	r7, sp, #8
 8006c76:	60ba      	str	r2, [r7, #8]
 8006c78:	607b      	str	r3, [r7, #4]
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	81fb      	strh	r3, [r7, #14]
 8006c7e:	460b      	mov	r3, r1
 8006c80:	81bb      	strh	r3, [r7, #12]
    UWORD Xpoint = Xstart;
 8006c82:	89fb      	ldrh	r3, [r7, #14]
 8006c84:	82fb      	strh	r3, [r7, #22]
    UWORD Ypoint = Ystart;
 8006c86:	89bb      	ldrh	r3, [r7, #12]
 8006c88:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 8006c8a:	4b21      	ldr	r3, [pc, #132]	@ (8006d10 <Paint_DrawString_EN+0xa0>)
 8006c8c:	889b      	ldrh	r3, [r3, #4]
 8006c8e:	89fa      	ldrh	r2, [r7, #14]
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d804      	bhi.n	8006c9e <Paint_DrawString_EN+0x2e>
 8006c94:	4b1e      	ldr	r3, [pc, #120]	@ (8006d10 <Paint_DrawString_EN+0xa0>)
 8006c96:	88db      	ldrh	r3, [r3, #6]
 8006c98:	89ba      	ldrh	r2, [r7, #12]
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d931      	bls.n	8006d02 <Paint_DrawString_EN+0x92>
        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 8006c9e:	481d      	ldr	r0, [pc, #116]	@ (8006d14 <Paint_DrawString_EN+0xa4>)
 8006ca0:	f000 fb0a 	bl	80072b8 <puts>
        return;
 8006ca4:	e031      	b.n	8006d0a <Paint_DrawString_EN+0x9a>
    }

    while (* pString != '\0') {
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 8006ca6:	8afb      	ldrh	r3, [r7, #22]
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	8892      	ldrh	r2, [r2, #4]
 8006cac:	4413      	add	r3, r2
 8006cae:	4a18      	ldr	r2, [pc, #96]	@ (8006d10 <Paint_DrawString_EN+0xa0>)
 8006cb0:	8892      	ldrh	r2, [r2, #4]
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	dd06      	ble.n	8006cc4 <Paint_DrawString_EN+0x54>
            Xpoint = Xstart;
 8006cb6:	89fb      	ldrh	r3, [r7, #14]
 8006cb8:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	88da      	ldrh	r2, [r3, #6]
 8006cbe:	8abb      	ldrh	r3, [r7, #20]
 8006cc0:	4413      	add	r3, r2
 8006cc2:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 8006cc4:	8abb      	ldrh	r3, [r7, #20]
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	88d2      	ldrh	r2, [r2, #6]
 8006cca:	4413      	add	r3, r2
 8006ccc:	4a10      	ldr	r2, [pc, #64]	@ (8006d10 <Paint_DrawString_EN+0xa0>)
 8006cce:	88d2      	ldrh	r2, [r2, #6]
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	dd03      	ble.n	8006cdc <Paint_DrawString_EN+0x6c>
            Xpoint = Xstart;
 8006cd4:	89fb      	ldrh	r3, [r7, #14]
 8006cd6:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 8006cd8:	89bb      	ldrh	r3, [r7, #12]
 8006cda:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	781a      	ldrb	r2, [r3, #0]
 8006ce0:	8ab9      	ldrh	r1, [r7, #20]
 8006ce2:	8af8      	ldrh	r0, [r7, #22]
 8006ce4:	8c3b      	ldrh	r3, [r7, #32]
 8006ce6:	9301      	str	r3, [sp, #4]
 8006ce8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006cea:	9300      	str	r3, [sp, #0]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f7ff ff17 	bl	8006b20 <Paint_DrawChar>

        //The next character of the address
        pString ++;
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	3301      	adds	r3, #1
 8006cf6:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	889a      	ldrh	r2, [r3, #4]
 8006cfc:	8afb      	ldrh	r3, [r7, #22]
 8006cfe:	4413      	add	r3, r2
 8006d00:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0') {
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d1cd      	bne.n	8006ca6 <Paint_DrawString_EN+0x36>
    }
}
 8006d0a:	3718      	adds	r7, #24
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}
 8006d10:	20000458 	.word	0x20000458
 8006d14:	08007d84 	.word	0x08007d84

08006d18 <Paint_DrawTime>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawTime(UWORD Xstart, UWORD Ystart, PAINT_TIME *pTime, sFONT* Font,
                    UWORD Color_Foreground, UWORD Color_Background)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b08a      	sub	sp, #40	@ 0x28
 8006d1c:	af02      	add	r7, sp, #8
 8006d1e:	60ba      	str	r2, [r7, #8]
 8006d20:	607b      	str	r3, [r7, #4]
 8006d22:	4603      	mov	r3, r0
 8006d24:	81fb      	strh	r3, [r7, #14]
 8006d26:	460b      	mov	r3, r1
 8006d28:	81bb      	strh	r3, [r7, #12]
    uint8_t value[10] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};
 8006d2a:	4a76      	ldr	r2, [pc, #472]	@ (8006f04 <Paint_DrawTime+0x1ec>)
 8006d2c:	f107 0314 	add.w	r3, r7, #20
 8006d30:	ca07      	ldmia	r2, {r0, r1, r2}
 8006d32:	c303      	stmia	r3!, {r0, r1}
 8006d34:	801a      	strh	r2, [r3, #0]

    UWORD Dx = Font->Width;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	889b      	ldrh	r3, [r3, #4]
 8006d3a:	83fb      	strh	r3, [r7, #30]

    //Write data into the cache
    Paint_DrawChar(Xstart                           , Ystart, value[pTime->Hour / 10], Font, Color_Background, Color_Foreground);
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	791b      	ldrb	r3, [r3, #4]
 8006d40:	4a71      	ldr	r2, [pc, #452]	@ (8006f08 <Paint_DrawTime+0x1f0>)
 8006d42:	fba2 2303 	umull	r2, r3, r2, r3
 8006d46:	08db      	lsrs	r3, r3, #3
 8006d48:	b2db      	uxtb	r3, r3
 8006d4a:	3320      	adds	r3, #32
 8006d4c:	443b      	add	r3, r7
 8006d4e:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8006d52:	89b9      	ldrh	r1, [r7, #12]
 8006d54:	89f8      	ldrh	r0, [r7, #14]
 8006d56:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006d58:	9301      	str	r3, [sp, #4]
 8006d5a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006d5c:	9300      	str	r3, [sp, #0]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f7ff fede 	bl	8006b20 <Paint_DrawChar>
    Paint_DrawChar(Xstart + Dx                      , Ystart, value[pTime->Hour % 10], Font, Color_Background, Color_Foreground);
 8006d64:	89fa      	ldrh	r2, [r7, #14]
 8006d66:	8bfb      	ldrh	r3, [r7, #30]
 8006d68:	4413      	add	r3, r2
 8006d6a:	b298      	uxth	r0, r3
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	791a      	ldrb	r2, [r3, #4]
 8006d70:	4b65      	ldr	r3, [pc, #404]	@ (8006f08 <Paint_DrawTime+0x1f0>)
 8006d72:	fba3 1302 	umull	r1, r3, r3, r2
 8006d76:	08d9      	lsrs	r1, r3, #3
 8006d78:	460b      	mov	r3, r1
 8006d7a:	009b      	lsls	r3, r3, #2
 8006d7c:	440b      	add	r3, r1
 8006d7e:	005b      	lsls	r3, r3, #1
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	3320      	adds	r3, #32
 8006d86:	443b      	add	r3, r7
 8006d88:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8006d8c:	89b9      	ldrh	r1, [r7, #12]
 8006d8e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006d90:	9301      	str	r3, [sp, #4]
 8006d92:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006d94:	9300      	str	r3, [sp, #0]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f7ff fec2 	bl	8006b20 <Paint_DrawChar>
    Paint_DrawChar(Xstart + Dx  + Dx / 4 + Dx / 2   , Ystart, ':'                    , Font, Color_Background, Color_Foreground);
 8006d9c:	89fa      	ldrh	r2, [r7, #14]
 8006d9e:	8bfb      	ldrh	r3, [r7, #30]
 8006da0:	4413      	add	r3, r2
 8006da2:	b29a      	uxth	r2, r3
 8006da4:	8bfb      	ldrh	r3, [r7, #30]
 8006da6:	089b      	lsrs	r3, r3, #2
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	4413      	add	r3, r2
 8006dac:	b29a      	uxth	r2, r3
 8006dae:	8bfb      	ldrh	r3, [r7, #30]
 8006db0:	085b      	lsrs	r3, r3, #1
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	4413      	add	r3, r2
 8006db6:	b298      	uxth	r0, r3
 8006db8:	89b9      	ldrh	r1, [r7, #12]
 8006dba:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006dbc:	9301      	str	r3, [sp, #4]
 8006dbe:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006dc0:	9300      	str	r3, [sp, #0]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	223a      	movs	r2, #58	@ 0x3a
 8006dc6:	f7ff feab 	bl	8006b20 <Paint_DrawChar>
    Paint_DrawChar(Xstart + Dx * 2 + Dx / 2         , Ystart, value[pTime->Min / 10] , Font, Color_Background, Color_Foreground);
 8006dca:	8bfb      	ldrh	r3, [r7, #30]
 8006dcc:	005b      	lsls	r3, r3, #1
 8006dce:	b29a      	uxth	r2, r3
 8006dd0:	89fb      	ldrh	r3, [r7, #14]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	b29a      	uxth	r2, r3
 8006dd6:	8bfb      	ldrh	r3, [r7, #30]
 8006dd8:	085b      	lsrs	r3, r3, #1
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	4413      	add	r3, r2
 8006dde:	b298      	uxth	r0, r3
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	795b      	ldrb	r3, [r3, #5]
 8006de4:	4a48      	ldr	r2, [pc, #288]	@ (8006f08 <Paint_DrawTime+0x1f0>)
 8006de6:	fba2 2303 	umull	r2, r3, r2, r3
 8006dea:	08db      	lsrs	r3, r3, #3
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	3320      	adds	r3, #32
 8006df0:	443b      	add	r3, r7
 8006df2:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8006df6:	89b9      	ldrh	r1, [r7, #12]
 8006df8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006dfa:	9301      	str	r3, [sp, #4]
 8006dfc:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006dfe:	9300      	str	r3, [sp, #0]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f7ff fe8d 	bl	8006b20 <Paint_DrawChar>
    Paint_DrawChar(Xstart + Dx * 3 + Dx / 2         , Ystart, value[pTime->Min % 10] , Font, Color_Background, Color_Foreground);
 8006e06:	8bfb      	ldrh	r3, [r7, #30]
 8006e08:	461a      	mov	r2, r3
 8006e0a:	0052      	lsls	r2, r2, #1
 8006e0c:	4413      	add	r3, r2
 8006e0e:	b29a      	uxth	r2, r3
 8006e10:	89fb      	ldrh	r3, [r7, #14]
 8006e12:	4413      	add	r3, r2
 8006e14:	b29a      	uxth	r2, r3
 8006e16:	8bfb      	ldrh	r3, [r7, #30]
 8006e18:	085b      	lsrs	r3, r3, #1
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	4413      	add	r3, r2
 8006e1e:	b298      	uxth	r0, r3
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	795a      	ldrb	r2, [r3, #5]
 8006e24:	4b38      	ldr	r3, [pc, #224]	@ (8006f08 <Paint_DrawTime+0x1f0>)
 8006e26:	fba3 1302 	umull	r1, r3, r3, r2
 8006e2a:	08d9      	lsrs	r1, r3, #3
 8006e2c:	460b      	mov	r3, r1
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	440b      	add	r3, r1
 8006e32:	005b      	lsls	r3, r3, #1
 8006e34:	1ad3      	subs	r3, r2, r3
 8006e36:	b2db      	uxtb	r3, r3
 8006e38:	3320      	adds	r3, #32
 8006e3a:	443b      	add	r3, r7
 8006e3c:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8006e40:	89b9      	ldrh	r1, [r7, #12]
 8006e42:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006e44:	9301      	str	r3, [sp, #4]
 8006e46:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006e48:	9300      	str	r3, [sp, #0]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f7ff fe68 	bl	8006b20 <Paint_DrawChar>
    Paint_DrawChar(Xstart + Dx * 4 + Dx / 2 - Dx / 4, Ystart, ':'                    , Font, Color_Background, Color_Foreground);
 8006e50:	8bfb      	ldrh	r3, [r7, #30]
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	b29a      	uxth	r2, r3
 8006e56:	89fb      	ldrh	r3, [r7, #14]
 8006e58:	4413      	add	r3, r2
 8006e5a:	b29a      	uxth	r2, r3
 8006e5c:	8bfb      	ldrh	r3, [r7, #30]
 8006e5e:	085b      	lsrs	r3, r3, #1
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	4413      	add	r3, r2
 8006e64:	b29a      	uxth	r2, r3
 8006e66:	8bfb      	ldrh	r3, [r7, #30]
 8006e68:	089b      	lsrs	r3, r3, #2
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	1ad3      	subs	r3, r2, r3
 8006e6e:	b298      	uxth	r0, r3
 8006e70:	89b9      	ldrh	r1, [r7, #12]
 8006e72:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006e74:	9301      	str	r3, [sp, #4]
 8006e76:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006e78:	9300      	str	r3, [sp, #0]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	223a      	movs	r2, #58	@ 0x3a
 8006e7e:	f7ff fe4f 	bl	8006b20 <Paint_DrawChar>
    Paint_DrawChar(Xstart + Dx * 5                  , Ystart, value[pTime->Sec / 10] , Font, Color_Background, Color_Foreground);
 8006e82:	8bfb      	ldrh	r3, [r7, #30]
 8006e84:	461a      	mov	r2, r3
 8006e86:	0092      	lsls	r2, r2, #2
 8006e88:	4413      	add	r3, r2
 8006e8a:	b29a      	uxth	r2, r3
 8006e8c:	89fb      	ldrh	r3, [r7, #14]
 8006e8e:	4413      	add	r3, r2
 8006e90:	b298      	uxth	r0, r3
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	799b      	ldrb	r3, [r3, #6]
 8006e96:	4a1c      	ldr	r2, [pc, #112]	@ (8006f08 <Paint_DrawTime+0x1f0>)
 8006e98:	fba2 2303 	umull	r2, r3, r2, r3
 8006e9c:	08db      	lsrs	r3, r3, #3
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	3320      	adds	r3, #32
 8006ea2:	443b      	add	r3, r7
 8006ea4:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8006ea8:	89b9      	ldrh	r1, [r7, #12]
 8006eaa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006eac:	9301      	str	r3, [sp, #4]
 8006eae:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006eb0:	9300      	str	r3, [sp, #0]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f7ff fe34 	bl	8006b20 <Paint_DrawChar>
    Paint_DrawChar(Xstart + Dx * 6                  , Ystart, value[pTime->Sec % 10] , Font, Color_Background, Color_Foreground);
 8006eb8:	8bfb      	ldrh	r3, [r7, #30]
 8006eba:	461a      	mov	r2, r3
 8006ebc:	0052      	lsls	r2, r2, #1
 8006ebe:	4413      	add	r3, r2
 8006ec0:	005b      	lsls	r3, r3, #1
 8006ec2:	b29a      	uxth	r2, r3
 8006ec4:	89fb      	ldrh	r3, [r7, #14]
 8006ec6:	4413      	add	r3, r2
 8006ec8:	b298      	uxth	r0, r3
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	799a      	ldrb	r2, [r3, #6]
 8006ece:	4b0e      	ldr	r3, [pc, #56]	@ (8006f08 <Paint_DrawTime+0x1f0>)
 8006ed0:	fba3 1302 	umull	r1, r3, r3, r2
 8006ed4:	08d9      	lsrs	r1, r3, #3
 8006ed6:	460b      	mov	r3, r1
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	440b      	add	r3, r1
 8006edc:	005b      	lsls	r3, r3, #1
 8006ede:	1ad3      	subs	r3, r2, r3
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	3320      	adds	r3, #32
 8006ee4:	443b      	add	r3, r7
 8006ee6:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8006eea:	89b9      	ldrh	r1, [r7, #12]
 8006eec:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006eee:	9301      	str	r3, [sp, #4]
 8006ef0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006ef2:	9300      	str	r3, [sp, #0]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f7ff fe13 	bl	8006b20 <Paint_DrawChar>
}
 8006efa:	bf00      	nop
 8006efc:	3720      	adds	r7, #32
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	bf00      	nop
 8006f04:	08007e04 	.word	0x08007e04
 8006f08:	cccccccd 	.word	0xcccccccd

08006f0c <malloc>:
 8006f0c:	4b02      	ldr	r3, [pc, #8]	@ (8006f18 <malloc+0xc>)
 8006f0e:	4601      	mov	r1, r0
 8006f10:	6818      	ldr	r0, [r3, #0]
 8006f12:	f000 b82d 	b.w	8006f70 <_malloc_r>
 8006f16:	bf00      	nop
 8006f18:	20000258 	.word	0x20000258

08006f1c <free>:
 8006f1c:	4b02      	ldr	r3, [pc, #8]	@ (8006f28 <free+0xc>)
 8006f1e:	4601      	mov	r1, r0
 8006f20:	6818      	ldr	r0, [r3, #0]
 8006f22:	f000 bb35 	b.w	8007590 <_free_r>
 8006f26:	bf00      	nop
 8006f28:	20000258 	.word	0x20000258

08006f2c <sbrk_aligned>:
 8006f2c:	b570      	push	{r4, r5, r6, lr}
 8006f2e:	4e0f      	ldr	r6, [pc, #60]	@ (8006f6c <sbrk_aligned+0x40>)
 8006f30:	460c      	mov	r4, r1
 8006f32:	6831      	ldr	r1, [r6, #0]
 8006f34:	4605      	mov	r5, r0
 8006f36:	b911      	cbnz	r1, 8006f3e <sbrk_aligned+0x12>
 8006f38:	f000 fada 	bl	80074f0 <_sbrk_r>
 8006f3c:	6030      	str	r0, [r6, #0]
 8006f3e:	4621      	mov	r1, r4
 8006f40:	4628      	mov	r0, r5
 8006f42:	f000 fad5 	bl	80074f0 <_sbrk_r>
 8006f46:	1c43      	adds	r3, r0, #1
 8006f48:	d103      	bne.n	8006f52 <sbrk_aligned+0x26>
 8006f4a:	f04f 34ff 	mov.w	r4, #4294967295
 8006f4e:	4620      	mov	r0, r4
 8006f50:	bd70      	pop	{r4, r5, r6, pc}
 8006f52:	1cc4      	adds	r4, r0, #3
 8006f54:	f024 0403 	bic.w	r4, r4, #3
 8006f58:	42a0      	cmp	r0, r4
 8006f5a:	d0f8      	beq.n	8006f4e <sbrk_aligned+0x22>
 8006f5c:	1a21      	subs	r1, r4, r0
 8006f5e:	4628      	mov	r0, r5
 8006f60:	f000 fac6 	bl	80074f0 <_sbrk_r>
 8006f64:	3001      	adds	r0, #1
 8006f66:	d1f2      	bne.n	8006f4e <sbrk_aligned+0x22>
 8006f68:	e7ef      	b.n	8006f4a <sbrk_aligned+0x1e>
 8006f6a:	bf00      	nop
 8006f6c:	20000470 	.word	0x20000470

08006f70 <_malloc_r>:
 8006f70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f74:	1ccd      	adds	r5, r1, #3
 8006f76:	f025 0503 	bic.w	r5, r5, #3
 8006f7a:	3508      	adds	r5, #8
 8006f7c:	2d0c      	cmp	r5, #12
 8006f7e:	bf38      	it	cc
 8006f80:	250c      	movcc	r5, #12
 8006f82:	2d00      	cmp	r5, #0
 8006f84:	4606      	mov	r6, r0
 8006f86:	db01      	blt.n	8006f8c <_malloc_r+0x1c>
 8006f88:	42a9      	cmp	r1, r5
 8006f8a:	d904      	bls.n	8006f96 <_malloc_r+0x26>
 8006f8c:	230c      	movs	r3, #12
 8006f8e:	6033      	str	r3, [r6, #0]
 8006f90:	2000      	movs	r0, #0
 8006f92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800706c <_malloc_r+0xfc>
 8006f9a:	f000 f869 	bl	8007070 <__malloc_lock>
 8006f9e:	f8d8 3000 	ldr.w	r3, [r8]
 8006fa2:	461c      	mov	r4, r3
 8006fa4:	bb44      	cbnz	r4, 8006ff8 <_malloc_r+0x88>
 8006fa6:	4629      	mov	r1, r5
 8006fa8:	4630      	mov	r0, r6
 8006faa:	f7ff ffbf 	bl	8006f2c <sbrk_aligned>
 8006fae:	1c43      	adds	r3, r0, #1
 8006fb0:	4604      	mov	r4, r0
 8006fb2:	d158      	bne.n	8007066 <_malloc_r+0xf6>
 8006fb4:	f8d8 4000 	ldr.w	r4, [r8]
 8006fb8:	4627      	mov	r7, r4
 8006fba:	2f00      	cmp	r7, #0
 8006fbc:	d143      	bne.n	8007046 <_malloc_r+0xd6>
 8006fbe:	2c00      	cmp	r4, #0
 8006fc0:	d04b      	beq.n	800705a <_malloc_r+0xea>
 8006fc2:	6823      	ldr	r3, [r4, #0]
 8006fc4:	4639      	mov	r1, r7
 8006fc6:	4630      	mov	r0, r6
 8006fc8:	eb04 0903 	add.w	r9, r4, r3
 8006fcc:	f000 fa90 	bl	80074f0 <_sbrk_r>
 8006fd0:	4581      	cmp	r9, r0
 8006fd2:	d142      	bne.n	800705a <_malloc_r+0xea>
 8006fd4:	6821      	ldr	r1, [r4, #0]
 8006fd6:	4630      	mov	r0, r6
 8006fd8:	1a6d      	subs	r5, r5, r1
 8006fda:	4629      	mov	r1, r5
 8006fdc:	f7ff ffa6 	bl	8006f2c <sbrk_aligned>
 8006fe0:	3001      	adds	r0, #1
 8006fe2:	d03a      	beq.n	800705a <_malloc_r+0xea>
 8006fe4:	6823      	ldr	r3, [r4, #0]
 8006fe6:	442b      	add	r3, r5
 8006fe8:	6023      	str	r3, [r4, #0]
 8006fea:	f8d8 3000 	ldr.w	r3, [r8]
 8006fee:	685a      	ldr	r2, [r3, #4]
 8006ff0:	bb62      	cbnz	r2, 800704c <_malloc_r+0xdc>
 8006ff2:	f8c8 7000 	str.w	r7, [r8]
 8006ff6:	e00f      	b.n	8007018 <_malloc_r+0xa8>
 8006ff8:	6822      	ldr	r2, [r4, #0]
 8006ffa:	1b52      	subs	r2, r2, r5
 8006ffc:	d420      	bmi.n	8007040 <_malloc_r+0xd0>
 8006ffe:	2a0b      	cmp	r2, #11
 8007000:	d917      	bls.n	8007032 <_malloc_r+0xc2>
 8007002:	1961      	adds	r1, r4, r5
 8007004:	42a3      	cmp	r3, r4
 8007006:	6025      	str	r5, [r4, #0]
 8007008:	bf18      	it	ne
 800700a:	6059      	strne	r1, [r3, #4]
 800700c:	6863      	ldr	r3, [r4, #4]
 800700e:	bf08      	it	eq
 8007010:	f8c8 1000 	streq.w	r1, [r8]
 8007014:	5162      	str	r2, [r4, r5]
 8007016:	604b      	str	r3, [r1, #4]
 8007018:	4630      	mov	r0, r6
 800701a:	f000 f82f 	bl	800707c <__malloc_unlock>
 800701e:	f104 000b 	add.w	r0, r4, #11
 8007022:	1d23      	adds	r3, r4, #4
 8007024:	f020 0007 	bic.w	r0, r0, #7
 8007028:	1ac2      	subs	r2, r0, r3
 800702a:	bf1c      	itt	ne
 800702c:	1a1b      	subne	r3, r3, r0
 800702e:	50a3      	strne	r3, [r4, r2]
 8007030:	e7af      	b.n	8006f92 <_malloc_r+0x22>
 8007032:	6862      	ldr	r2, [r4, #4]
 8007034:	42a3      	cmp	r3, r4
 8007036:	bf0c      	ite	eq
 8007038:	f8c8 2000 	streq.w	r2, [r8]
 800703c:	605a      	strne	r2, [r3, #4]
 800703e:	e7eb      	b.n	8007018 <_malloc_r+0xa8>
 8007040:	4623      	mov	r3, r4
 8007042:	6864      	ldr	r4, [r4, #4]
 8007044:	e7ae      	b.n	8006fa4 <_malloc_r+0x34>
 8007046:	463c      	mov	r4, r7
 8007048:	687f      	ldr	r7, [r7, #4]
 800704a:	e7b6      	b.n	8006fba <_malloc_r+0x4a>
 800704c:	461a      	mov	r2, r3
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	42a3      	cmp	r3, r4
 8007052:	d1fb      	bne.n	800704c <_malloc_r+0xdc>
 8007054:	2300      	movs	r3, #0
 8007056:	6053      	str	r3, [r2, #4]
 8007058:	e7de      	b.n	8007018 <_malloc_r+0xa8>
 800705a:	230c      	movs	r3, #12
 800705c:	4630      	mov	r0, r6
 800705e:	6033      	str	r3, [r6, #0]
 8007060:	f000 f80c 	bl	800707c <__malloc_unlock>
 8007064:	e794      	b.n	8006f90 <_malloc_r+0x20>
 8007066:	6005      	str	r5, [r0, #0]
 8007068:	e7d6      	b.n	8007018 <_malloc_r+0xa8>
 800706a:	bf00      	nop
 800706c:	20000474 	.word	0x20000474

08007070 <__malloc_lock>:
 8007070:	4801      	ldr	r0, [pc, #4]	@ (8007078 <__malloc_lock+0x8>)
 8007072:	f000 ba8a 	b.w	800758a <__retarget_lock_acquire_recursive>
 8007076:	bf00      	nop
 8007078:	200005b8 	.word	0x200005b8

0800707c <__malloc_unlock>:
 800707c:	4801      	ldr	r0, [pc, #4]	@ (8007084 <__malloc_unlock+0x8>)
 800707e:	f000 ba85 	b.w	800758c <__retarget_lock_release_recursive>
 8007082:	bf00      	nop
 8007084:	200005b8 	.word	0x200005b8

08007088 <std>:
 8007088:	2300      	movs	r3, #0
 800708a:	b510      	push	{r4, lr}
 800708c:	4604      	mov	r4, r0
 800708e:	e9c0 3300 	strd	r3, r3, [r0]
 8007092:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007096:	6083      	str	r3, [r0, #8]
 8007098:	8181      	strh	r1, [r0, #12]
 800709a:	6643      	str	r3, [r0, #100]	@ 0x64
 800709c:	81c2      	strh	r2, [r0, #14]
 800709e:	6183      	str	r3, [r0, #24]
 80070a0:	4619      	mov	r1, r3
 80070a2:	2208      	movs	r2, #8
 80070a4:	305c      	adds	r0, #92	@ 0x5c
 80070a6:	f000 f9e7 	bl	8007478 <memset>
 80070aa:	4b0d      	ldr	r3, [pc, #52]	@ (80070e0 <std+0x58>)
 80070ac:	6224      	str	r4, [r4, #32]
 80070ae:	6263      	str	r3, [r4, #36]	@ 0x24
 80070b0:	4b0c      	ldr	r3, [pc, #48]	@ (80070e4 <std+0x5c>)
 80070b2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80070b4:	4b0c      	ldr	r3, [pc, #48]	@ (80070e8 <std+0x60>)
 80070b6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80070b8:	4b0c      	ldr	r3, [pc, #48]	@ (80070ec <std+0x64>)
 80070ba:	6323      	str	r3, [r4, #48]	@ 0x30
 80070bc:	4b0c      	ldr	r3, [pc, #48]	@ (80070f0 <std+0x68>)
 80070be:	429c      	cmp	r4, r3
 80070c0:	d006      	beq.n	80070d0 <std+0x48>
 80070c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80070c6:	4294      	cmp	r4, r2
 80070c8:	d002      	beq.n	80070d0 <std+0x48>
 80070ca:	33d0      	adds	r3, #208	@ 0xd0
 80070cc:	429c      	cmp	r4, r3
 80070ce:	d105      	bne.n	80070dc <std+0x54>
 80070d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80070d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070d8:	f000 ba56 	b.w	8007588 <__retarget_lock_init_recursive>
 80070dc:	bd10      	pop	{r4, pc}
 80070de:	bf00      	nop
 80070e0:	080072c9 	.word	0x080072c9
 80070e4:	080072eb 	.word	0x080072eb
 80070e8:	08007323 	.word	0x08007323
 80070ec:	08007347 	.word	0x08007347
 80070f0:	20000478 	.word	0x20000478

080070f4 <stdio_exit_handler>:
 80070f4:	4a02      	ldr	r2, [pc, #8]	@ (8007100 <stdio_exit_handler+0xc>)
 80070f6:	4903      	ldr	r1, [pc, #12]	@ (8007104 <stdio_exit_handler+0x10>)
 80070f8:	4803      	ldr	r0, [pc, #12]	@ (8007108 <stdio_exit_handler+0x14>)
 80070fa:	f000 b869 	b.w	80071d0 <_fwalk_sglue>
 80070fe:	bf00      	nop
 8007100:	2000024c 	.word	0x2000024c
 8007104:	08007721 	.word	0x08007721
 8007108:	2000025c 	.word	0x2000025c

0800710c <cleanup_stdio>:
 800710c:	6841      	ldr	r1, [r0, #4]
 800710e:	4b0c      	ldr	r3, [pc, #48]	@ (8007140 <cleanup_stdio+0x34>)
 8007110:	b510      	push	{r4, lr}
 8007112:	4299      	cmp	r1, r3
 8007114:	4604      	mov	r4, r0
 8007116:	d001      	beq.n	800711c <cleanup_stdio+0x10>
 8007118:	f000 fb02 	bl	8007720 <_fflush_r>
 800711c:	68a1      	ldr	r1, [r4, #8]
 800711e:	4b09      	ldr	r3, [pc, #36]	@ (8007144 <cleanup_stdio+0x38>)
 8007120:	4299      	cmp	r1, r3
 8007122:	d002      	beq.n	800712a <cleanup_stdio+0x1e>
 8007124:	4620      	mov	r0, r4
 8007126:	f000 fafb 	bl	8007720 <_fflush_r>
 800712a:	68e1      	ldr	r1, [r4, #12]
 800712c:	4b06      	ldr	r3, [pc, #24]	@ (8007148 <cleanup_stdio+0x3c>)
 800712e:	4299      	cmp	r1, r3
 8007130:	d004      	beq.n	800713c <cleanup_stdio+0x30>
 8007132:	4620      	mov	r0, r4
 8007134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007138:	f000 baf2 	b.w	8007720 <_fflush_r>
 800713c:	bd10      	pop	{r4, pc}
 800713e:	bf00      	nop
 8007140:	20000478 	.word	0x20000478
 8007144:	200004e0 	.word	0x200004e0
 8007148:	20000548 	.word	0x20000548

0800714c <global_stdio_init.part.0>:
 800714c:	b510      	push	{r4, lr}
 800714e:	4b0b      	ldr	r3, [pc, #44]	@ (800717c <global_stdio_init.part.0+0x30>)
 8007150:	4c0b      	ldr	r4, [pc, #44]	@ (8007180 <global_stdio_init.part.0+0x34>)
 8007152:	4a0c      	ldr	r2, [pc, #48]	@ (8007184 <global_stdio_init.part.0+0x38>)
 8007154:	4620      	mov	r0, r4
 8007156:	601a      	str	r2, [r3, #0]
 8007158:	2104      	movs	r1, #4
 800715a:	2200      	movs	r2, #0
 800715c:	f7ff ff94 	bl	8007088 <std>
 8007160:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007164:	2201      	movs	r2, #1
 8007166:	2109      	movs	r1, #9
 8007168:	f7ff ff8e 	bl	8007088 <std>
 800716c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007170:	2202      	movs	r2, #2
 8007172:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007176:	2112      	movs	r1, #18
 8007178:	f7ff bf86 	b.w	8007088 <std>
 800717c:	200005b0 	.word	0x200005b0
 8007180:	20000478 	.word	0x20000478
 8007184:	080070f5 	.word	0x080070f5

08007188 <__sfp_lock_acquire>:
 8007188:	4801      	ldr	r0, [pc, #4]	@ (8007190 <__sfp_lock_acquire+0x8>)
 800718a:	f000 b9fe 	b.w	800758a <__retarget_lock_acquire_recursive>
 800718e:	bf00      	nop
 8007190:	200005b9 	.word	0x200005b9

08007194 <__sfp_lock_release>:
 8007194:	4801      	ldr	r0, [pc, #4]	@ (800719c <__sfp_lock_release+0x8>)
 8007196:	f000 b9f9 	b.w	800758c <__retarget_lock_release_recursive>
 800719a:	bf00      	nop
 800719c:	200005b9 	.word	0x200005b9

080071a0 <__sinit>:
 80071a0:	b510      	push	{r4, lr}
 80071a2:	4604      	mov	r4, r0
 80071a4:	f7ff fff0 	bl	8007188 <__sfp_lock_acquire>
 80071a8:	6a23      	ldr	r3, [r4, #32]
 80071aa:	b11b      	cbz	r3, 80071b4 <__sinit+0x14>
 80071ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071b0:	f7ff bff0 	b.w	8007194 <__sfp_lock_release>
 80071b4:	4b04      	ldr	r3, [pc, #16]	@ (80071c8 <__sinit+0x28>)
 80071b6:	6223      	str	r3, [r4, #32]
 80071b8:	4b04      	ldr	r3, [pc, #16]	@ (80071cc <__sinit+0x2c>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d1f5      	bne.n	80071ac <__sinit+0xc>
 80071c0:	f7ff ffc4 	bl	800714c <global_stdio_init.part.0>
 80071c4:	e7f2      	b.n	80071ac <__sinit+0xc>
 80071c6:	bf00      	nop
 80071c8:	0800710d 	.word	0x0800710d
 80071cc:	200005b0 	.word	0x200005b0

080071d0 <_fwalk_sglue>:
 80071d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071d4:	4607      	mov	r7, r0
 80071d6:	4688      	mov	r8, r1
 80071d8:	4614      	mov	r4, r2
 80071da:	2600      	movs	r6, #0
 80071dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80071e0:	f1b9 0901 	subs.w	r9, r9, #1
 80071e4:	d505      	bpl.n	80071f2 <_fwalk_sglue+0x22>
 80071e6:	6824      	ldr	r4, [r4, #0]
 80071e8:	2c00      	cmp	r4, #0
 80071ea:	d1f7      	bne.n	80071dc <_fwalk_sglue+0xc>
 80071ec:	4630      	mov	r0, r6
 80071ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071f2:	89ab      	ldrh	r3, [r5, #12]
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d907      	bls.n	8007208 <_fwalk_sglue+0x38>
 80071f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80071fc:	3301      	adds	r3, #1
 80071fe:	d003      	beq.n	8007208 <_fwalk_sglue+0x38>
 8007200:	4629      	mov	r1, r5
 8007202:	4638      	mov	r0, r7
 8007204:	47c0      	blx	r8
 8007206:	4306      	orrs	r6, r0
 8007208:	3568      	adds	r5, #104	@ 0x68
 800720a:	e7e9      	b.n	80071e0 <_fwalk_sglue+0x10>

0800720c <_puts_r>:
 800720c:	6a03      	ldr	r3, [r0, #32]
 800720e:	b570      	push	{r4, r5, r6, lr}
 8007210:	4605      	mov	r5, r0
 8007212:	460e      	mov	r6, r1
 8007214:	6884      	ldr	r4, [r0, #8]
 8007216:	b90b      	cbnz	r3, 800721c <_puts_r+0x10>
 8007218:	f7ff ffc2 	bl	80071a0 <__sinit>
 800721c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800721e:	07db      	lsls	r3, r3, #31
 8007220:	d405      	bmi.n	800722e <_puts_r+0x22>
 8007222:	89a3      	ldrh	r3, [r4, #12]
 8007224:	0598      	lsls	r0, r3, #22
 8007226:	d402      	bmi.n	800722e <_puts_r+0x22>
 8007228:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800722a:	f000 f9ae 	bl	800758a <__retarget_lock_acquire_recursive>
 800722e:	89a3      	ldrh	r3, [r4, #12]
 8007230:	0719      	lsls	r1, r3, #28
 8007232:	d502      	bpl.n	800723a <_puts_r+0x2e>
 8007234:	6923      	ldr	r3, [r4, #16]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d135      	bne.n	80072a6 <_puts_r+0x9a>
 800723a:	4621      	mov	r1, r4
 800723c:	4628      	mov	r0, r5
 800723e:	f000 f8c5 	bl	80073cc <__swsetup_r>
 8007242:	b380      	cbz	r0, 80072a6 <_puts_r+0x9a>
 8007244:	f04f 35ff 	mov.w	r5, #4294967295
 8007248:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800724a:	07da      	lsls	r2, r3, #31
 800724c:	d405      	bmi.n	800725a <_puts_r+0x4e>
 800724e:	89a3      	ldrh	r3, [r4, #12]
 8007250:	059b      	lsls	r3, r3, #22
 8007252:	d402      	bmi.n	800725a <_puts_r+0x4e>
 8007254:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007256:	f000 f999 	bl	800758c <__retarget_lock_release_recursive>
 800725a:	4628      	mov	r0, r5
 800725c:	bd70      	pop	{r4, r5, r6, pc}
 800725e:	2b00      	cmp	r3, #0
 8007260:	da04      	bge.n	800726c <_puts_r+0x60>
 8007262:	69a2      	ldr	r2, [r4, #24]
 8007264:	429a      	cmp	r2, r3
 8007266:	dc17      	bgt.n	8007298 <_puts_r+0x8c>
 8007268:	290a      	cmp	r1, #10
 800726a:	d015      	beq.n	8007298 <_puts_r+0x8c>
 800726c:	6823      	ldr	r3, [r4, #0]
 800726e:	1c5a      	adds	r2, r3, #1
 8007270:	6022      	str	r2, [r4, #0]
 8007272:	7019      	strb	r1, [r3, #0]
 8007274:	68a3      	ldr	r3, [r4, #8]
 8007276:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800727a:	3b01      	subs	r3, #1
 800727c:	60a3      	str	r3, [r4, #8]
 800727e:	2900      	cmp	r1, #0
 8007280:	d1ed      	bne.n	800725e <_puts_r+0x52>
 8007282:	2b00      	cmp	r3, #0
 8007284:	da11      	bge.n	80072aa <_puts_r+0x9e>
 8007286:	4622      	mov	r2, r4
 8007288:	210a      	movs	r1, #10
 800728a:	4628      	mov	r0, r5
 800728c:	f000 f85f 	bl	800734e <__swbuf_r>
 8007290:	3001      	adds	r0, #1
 8007292:	d0d7      	beq.n	8007244 <_puts_r+0x38>
 8007294:	250a      	movs	r5, #10
 8007296:	e7d7      	b.n	8007248 <_puts_r+0x3c>
 8007298:	4622      	mov	r2, r4
 800729a:	4628      	mov	r0, r5
 800729c:	f000 f857 	bl	800734e <__swbuf_r>
 80072a0:	3001      	adds	r0, #1
 80072a2:	d1e7      	bne.n	8007274 <_puts_r+0x68>
 80072a4:	e7ce      	b.n	8007244 <_puts_r+0x38>
 80072a6:	3e01      	subs	r6, #1
 80072a8:	e7e4      	b.n	8007274 <_puts_r+0x68>
 80072aa:	6823      	ldr	r3, [r4, #0]
 80072ac:	1c5a      	adds	r2, r3, #1
 80072ae:	6022      	str	r2, [r4, #0]
 80072b0:	220a      	movs	r2, #10
 80072b2:	701a      	strb	r2, [r3, #0]
 80072b4:	e7ee      	b.n	8007294 <_puts_r+0x88>
	...

080072b8 <puts>:
 80072b8:	4b02      	ldr	r3, [pc, #8]	@ (80072c4 <puts+0xc>)
 80072ba:	4601      	mov	r1, r0
 80072bc:	6818      	ldr	r0, [r3, #0]
 80072be:	f7ff bfa5 	b.w	800720c <_puts_r>
 80072c2:	bf00      	nop
 80072c4:	20000258 	.word	0x20000258

080072c8 <__sread>:
 80072c8:	b510      	push	{r4, lr}
 80072ca:	460c      	mov	r4, r1
 80072cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072d0:	f000 f8fc 	bl	80074cc <_read_r>
 80072d4:	2800      	cmp	r0, #0
 80072d6:	bfab      	itete	ge
 80072d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80072da:	89a3      	ldrhlt	r3, [r4, #12]
 80072dc:	181b      	addge	r3, r3, r0
 80072de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80072e2:	bfac      	ite	ge
 80072e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80072e6:	81a3      	strhlt	r3, [r4, #12]
 80072e8:	bd10      	pop	{r4, pc}

080072ea <__swrite>:
 80072ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072ee:	461f      	mov	r7, r3
 80072f0:	898b      	ldrh	r3, [r1, #12]
 80072f2:	4605      	mov	r5, r0
 80072f4:	05db      	lsls	r3, r3, #23
 80072f6:	460c      	mov	r4, r1
 80072f8:	4616      	mov	r6, r2
 80072fa:	d505      	bpl.n	8007308 <__swrite+0x1e>
 80072fc:	2302      	movs	r3, #2
 80072fe:	2200      	movs	r2, #0
 8007300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007304:	f000 f8d0 	bl	80074a8 <_lseek_r>
 8007308:	89a3      	ldrh	r3, [r4, #12]
 800730a:	4632      	mov	r2, r6
 800730c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007310:	81a3      	strh	r3, [r4, #12]
 8007312:	4628      	mov	r0, r5
 8007314:	463b      	mov	r3, r7
 8007316:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800731a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800731e:	f000 b8f7 	b.w	8007510 <_write_r>

08007322 <__sseek>:
 8007322:	b510      	push	{r4, lr}
 8007324:	460c      	mov	r4, r1
 8007326:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800732a:	f000 f8bd 	bl	80074a8 <_lseek_r>
 800732e:	1c43      	adds	r3, r0, #1
 8007330:	89a3      	ldrh	r3, [r4, #12]
 8007332:	bf15      	itete	ne
 8007334:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007336:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800733a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800733e:	81a3      	strheq	r3, [r4, #12]
 8007340:	bf18      	it	ne
 8007342:	81a3      	strhne	r3, [r4, #12]
 8007344:	bd10      	pop	{r4, pc}

08007346 <__sclose>:
 8007346:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800734a:	f000 b89d 	b.w	8007488 <_close_r>

0800734e <__swbuf_r>:
 800734e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007350:	460e      	mov	r6, r1
 8007352:	4614      	mov	r4, r2
 8007354:	4605      	mov	r5, r0
 8007356:	b118      	cbz	r0, 8007360 <__swbuf_r+0x12>
 8007358:	6a03      	ldr	r3, [r0, #32]
 800735a:	b90b      	cbnz	r3, 8007360 <__swbuf_r+0x12>
 800735c:	f7ff ff20 	bl	80071a0 <__sinit>
 8007360:	69a3      	ldr	r3, [r4, #24]
 8007362:	60a3      	str	r3, [r4, #8]
 8007364:	89a3      	ldrh	r3, [r4, #12]
 8007366:	071a      	lsls	r2, r3, #28
 8007368:	d501      	bpl.n	800736e <__swbuf_r+0x20>
 800736a:	6923      	ldr	r3, [r4, #16]
 800736c:	b943      	cbnz	r3, 8007380 <__swbuf_r+0x32>
 800736e:	4621      	mov	r1, r4
 8007370:	4628      	mov	r0, r5
 8007372:	f000 f82b 	bl	80073cc <__swsetup_r>
 8007376:	b118      	cbz	r0, 8007380 <__swbuf_r+0x32>
 8007378:	f04f 37ff 	mov.w	r7, #4294967295
 800737c:	4638      	mov	r0, r7
 800737e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007380:	6823      	ldr	r3, [r4, #0]
 8007382:	6922      	ldr	r2, [r4, #16]
 8007384:	b2f6      	uxtb	r6, r6
 8007386:	1a98      	subs	r0, r3, r2
 8007388:	6963      	ldr	r3, [r4, #20]
 800738a:	4637      	mov	r7, r6
 800738c:	4283      	cmp	r3, r0
 800738e:	dc05      	bgt.n	800739c <__swbuf_r+0x4e>
 8007390:	4621      	mov	r1, r4
 8007392:	4628      	mov	r0, r5
 8007394:	f000 f9c4 	bl	8007720 <_fflush_r>
 8007398:	2800      	cmp	r0, #0
 800739a:	d1ed      	bne.n	8007378 <__swbuf_r+0x2a>
 800739c:	68a3      	ldr	r3, [r4, #8]
 800739e:	3b01      	subs	r3, #1
 80073a0:	60a3      	str	r3, [r4, #8]
 80073a2:	6823      	ldr	r3, [r4, #0]
 80073a4:	1c5a      	adds	r2, r3, #1
 80073a6:	6022      	str	r2, [r4, #0]
 80073a8:	701e      	strb	r6, [r3, #0]
 80073aa:	6962      	ldr	r2, [r4, #20]
 80073ac:	1c43      	adds	r3, r0, #1
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d004      	beq.n	80073bc <__swbuf_r+0x6e>
 80073b2:	89a3      	ldrh	r3, [r4, #12]
 80073b4:	07db      	lsls	r3, r3, #31
 80073b6:	d5e1      	bpl.n	800737c <__swbuf_r+0x2e>
 80073b8:	2e0a      	cmp	r6, #10
 80073ba:	d1df      	bne.n	800737c <__swbuf_r+0x2e>
 80073bc:	4621      	mov	r1, r4
 80073be:	4628      	mov	r0, r5
 80073c0:	f000 f9ae 	bl	8007720 <_fflush_r>
 80073c4:	2800      	cmp	r0, #0
 80073c6:	d0d9      	beq.n	800737c <__swbuf_r+0x2e>
 80073c8:	e7d6      	b.n	8007378 <__swbuf_r+0x2a>
	...

080073cc <__swsetup_r>:
 80073cc:	b538      	push	{r3, r4, r5, lr}
 80073ce:	4b29      	ldr	r3, [pc, #164]	@ (8007474 <__swsetup_r+0xa8>)
 80073d0:	4605      	mov	r5, r0
 80073d2:	6818      	ldr	r0, [r3, #0]
 80073d4:	460c      	mov	r4, r1
 80073d6:	b118      	cbz	r0, 80073e0 <__swsetup_r+0x14>
 80073d8:	6a03      	ldr	r3, [r0, #32]
 80073da:	b90b      	cbnz	r3, 80073e0 <__swsetup_r+0x14>
 80073dc:	f7ff fee0 	bl	80071a0 <__sinit>
 80073e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073e4:	0719      	lsls	r1, r3, #28
 80073e6:	d422      	bmi.n	800742e <__swsetup_r+0x62>
 80073e8:	06da      	lsls	r2, r3, #27
 80073ea:	d407      	bmi.n	80073fc <__swsetup_r+0x30>
 80073ec:	2209      	movs	r2, #9
 80073ee:	602a      	str	r2, [r5, #0]
 80073f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073f4:	f04f 30ff 	mov.w	r0, #4294967295
 80073f8:	81a3      	strh	r3, [r4, #12]
 80073fa:	e033      	b.n	8007464 <__swsetup_r+0x98>
 80073fc:	0758      	lsls	r0, r3, #29
 80073fe:	d512      	bpl.n	8007426 <__swsetup_r+0x5a>
 8007400:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007402:	b141      	cbz	r1, 8007416 <__swsetup_r+0x4a>
 8007404:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007408:	4299      	cmp	r1, r3
 800740a:	d002      	beq.n	8007412 <__swsetup_r+0x46>
 800740c:	4628      	mov	r0, r5
 800740e:	f000 f8bf 	bl	8007590 <_free_r>
 8007412:	2300      	movs	r3, #0
 8007414:	6363      	str	r3, [r4, #52]	@ 0x34
 8007416:	89a3      	ldrh	r3, [r4, #12]
 8007418:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800741c:	81a3      	strh	r3, [r4, #12]
 800741e:	2300      	movs	r3, #0
 8007420:	6063      	str	r3, [r4, #4]
 8007422:	6923      	ldr	r3, [r4, #16]
 8007424:	6023      	str	r3, [r4, #0]
 8007426:	89a3      	ldrh	r3, [r4, #12]
 8007428:	f043 0308 	orr.w	r3, r3, #8
 800742c:	81a3      	strh	r3, [r4, #12]
 800742e:	6923      	ldr	r3, [r4, #16]
 8007430:	b94b      	cbnz	r3, 8007446 <__swsetup_r+0x7a>
 8007432:	89a3      	ldrh	r3, [r4, #12]
 8007434:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007438:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800743c:	d003      	beq.n	8007446 <__swsetup_r+0x7a>
 800743e:	4621      	mov	r1, r4
 8007440:	4628      	mov	r0, r5
 8007442:	f000 f9ba 	bl	80077ba <__smakebuf_r>
 8007446:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800744a:	f013 0201 	ands.w	r2, r3, #1
 800744e:	d00a      	beq.n	8007466 <__swsetup_r+0x9a>
 8007450:	2200      	movs	r2, #0
 8007452:	60a2      	str	r2, [r4, #8]
 8007454:	6962      	ldr	r2, [r4, #20]
 8007456:	4252      	negs	r2, r2
 8007458:	61a2      	str	r2, [r4, #24]
 800745a:	6922      	ldr	r2, [r4, #16]
 800745c:	b942      	cbnz	r2, 8007470 <__swsetup_r+0xa4>
 800745e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007462:	d1c5      	bne.n	80073f0 <__swsetup_r+0x24>
 8007464:	bd38      	pop	{r3, r4, r5, pc}
 8007466:	0799      	lsls	r1, r3, #30
 8007468:	bf58      	it	pl
 800746a:	6962      	ldrpl	r2, [r4, #20]
 800746c:	60a2      	str	r2, [r4, #8]
 800746e:	e7f4      	b.n	800745a <__swsetup_r+0x8e>
 8007470:	2000      	movs	r0, #0
 8007472:	e7f7      	b.n	8007464 <__swsetup_r+0x98>
 8007474:	20000258 	.word	0x20000258

08007478 <memset>:
 8007478:	4603      	mov	r3, r0
 800747a:	4402      	add	r2, r0
 800747c:	4293      	cmp	r3, r2
 800747e:	d100      	bne.n	8007482 <memset+0xa>
 8007480:	4770      	bx	lr
 8007482:	f803 1b01 	strb.w	r1, [r3], #1
 8007486:	e7f9      	b.n	800747c <memset+0x4>

08007488 <_close_r>:
 8007488:	b538      	push	{r3, r4, r5, lr}
 800748a:	2300      	movs	r3, #0
 800748c:	4d05      	ldr	r5, [pc, #20]	@ (80074a4 <_close_r+0x1c>)
 800748e:	4604      	mov	r4, r0
 8007490:	4608      	mov	r0, r1
 8007492:	602b      	str	r3, [r5, #0]
 8007494:	f7fa feff 	bl	8002296 <_close>
 8007498:	1c43      	adds	r3, r0, #1
 800749a:	d102      	bne.n	80074a2 <_close_r+0x1a>
 800749c:	682b      	ldr	r3, [r5, #0]
 800749e:	b103      	cbz	r3, 80074a2 <_close_r+0x1a>
 80074a0:	6023      	str	r3, [r4, #0]
 80074a2:	bd38      	pop	{r3, r4, r5, pc}
 80074a4:	200005b4 	.word	0x200005b4

080074a8 <_lseek_r>:
 80074a8:	b538      	push	{r3, r4, r5, lr}
 80074aa:	4604      	mov	r4, r0
 80074ac:	4608      	mov	r0, r1
 80074ae:	4611      	mov	r1, r2
 80074b0:	2200      	movs	r2, #0
 80074b2:	4d05      	ldr	r5, [pc, #20]	@ (80074c8 <_lseek_r+0x20>)
 80074b4:	602a      	str	r2, [r5, #0]
 80074b6:	461a      	mov	r2, r3
 80074b8:	f7fa ff11 	bl	80022de <_lseek>
 80074bc:	1c43      	adds	r3, r0, #1
 80074be:	d102      	bne.n	80074c6 <_lseek_r+0x1e>
 80074c0:	682b      	ldr	r3, [r5, #0]
 80074c2:	b103      	cbz	r3, 80074c6 <_lseek_r+0x1e>
 80074c4:	6023      	str	r3, [r4, #0]
 80074c6:	bd38      	pop	{r3, r4, r5, pc}
 80074c8:	200005b4 	.word	0x200005b4

080074cc <_read_r>:
 80074cc:	b538      	push	{r3, r4, r5, lr}
 80074ce:	4604      	mov	r4, r0
 80074d0:	4608      	mov	r0, r1
 80074d2:	4611      	mov	r1, r2
 80074d4:	2200      	movs	r2, #0
 80074d6:	4d05      	ldr	r5, [pc, #20]	@ (80074ec <_read_r+0x20>)
 80074d8:	602a      	str	r2, [r5, #0]
 80074da:	461a      	mov	r2, r3
 80074dc:	f7fa fea2 	bl	8002224 <_read>
 80074e0:	1c43      	adds	r3, r0, #1
 80074e2:	d102      	bne.n	80074ea <_read_r+0x1e>
 80074e4:	682b      	ldr	r3, [r5, #0]
 80074e6:	b103      	cbz	r3, 80074ea <_read_r+0x1e>
 80074e8:	6023      	str	r3, [r4, #0]
 80074ea:	bd38      	pop	{r3, r4, r5, pc}
 80074ec:	200005b4 	.word	0x200005b4

080074f0 <_sbrk_r>:
 80074f0:	b538      	push	{r3, r4, r5, lr}
 80074f2:	2300      	movs	r3, #0
 80074f4:	4d05      	ldr	r5, [pc, #20]	@ (800750c <_sbrk_r+0x1c>)
 80074f6:	4604      	mov	r4, r0
 80074f8:	4608      	mov	r0, r1
 80074fa:	602b      	str	r3, [r5, #0]
 80074fc:	f7fa fefc 	bl	80022f8 <_sbrk>
 8007500:	1c43      	adds	r3, r0, #1
 8007502:	d102      	bne.n	800750a <_sbrk_r+0x1a>
 8007504:	682b      	ldr	r3, [r5, #0]
 8007506:	b103      	cbz	r3, 800750a <_sbrk_r+0x1a>
 8007508:	6023      	str	r3, [r4, #0]
 800750a:	bd38      	pop	{r3, r4, r5, pc}
 800750c:	200005b4 	.word	0x200005b4

08007510 <_write_r>:
 8007510:	b538      	push	{r3, r4, r5, lr}
 8007512:	4604      	mov	r4, r0
 8007514:	4608      	mov	r0, r1
 8007516:	4611      	mov	r1, r2
 8007518:	2200      	movs	r2, #0
 800751a:	4d05      	ldr	r5, [pc, #20]	@ (8007530 <_write_r+0x20>)
 800751c:	602a      	str	r2, [r5, #0]
 800751e:	461a      	mov	r2, r3
 8007520:	f7fa fe9d 	bl	800225e <_write>
 8007524:	1c43      	adds	r3, r0, #1
 8007526:	d102      	bne.n	800752e <_write_r+0x1e>
 8007528:	682b      	ldr	r3, [r5, #0]
 800752a:	b103      	cbz	r3, 800752e <_write_r+0x1e>
 800752c:	6023      	str	r3, [r4, #0]
 800752e:	bd38      	pop	{r3, r4, r5, pc}
 8007530:	200005b4 	.word	0x200005b4

08007534 <__errno>:
 8007534:	4b01      	ldr	r3, [pc, #4]	@ (800753c <__errno+0x8>)
 8007536:	6818      	ldr	r0, [r3, #0]
 8007538:	4770      	bx	lr
 800753a:	bf00      	nop
 800753c:	20000258 	.word	0x20000258

08007540 <__libc_init_array>:
 8007540:	b570      	push	{r4, r5, r6, lr}
 8007542:	2600      	movs	r6, #0
 8007544:	4d0c      	ldr	r5, [pc, #48]	@ (8007578 <__libc_init_array+0x38>)
 8007546:	4c0d      	ldr	r4, [pc, #52]	@ (800757c <__libc_init_array+0x3c>)
 8007548:	1b64      	subs	r4, r4, r5
 800754a:	10a4      	asrs	r4, r4, #2
 800754c:	42a6      	cmp	r6, r4
 800754e:	d109      	bne.n	8007564 <__libc_init_array+0x24>
 8007550:	f000 f992 	bl	8007878 <_init>
 8007554:	2600      	movs	r6, #0
 8007556:	4d0a      	ldr	r5, [pc, #40]	@ (8007580 <__libc_init_array+0x40>)
 8007558:	4c0a      	ldr	r4, [pc, #40]	@ (8007584 <__libc_init_array+0x44>)
 800755a:	1b64      	subs	r4, r4, r5
 800755c:	10a4      	asrs	r4, r4, #2
 800755e:	42a6      	cmp	r6, r4
 8007560:	d105      	bne.n	800756e <__libc_init_array+0x2e>
 8007562:	bd70      	pop	{r4, r5, r6, pc}
 8007564:	f855 3b04 	ldr.w	r3, [r5], #4
 8007568:	4798      	blx	r3
 800756a:	3601      	adds	r6, #1
 800756c:	e7ee      	b.n	800754c <__libc_init_array+0xc>
 800756e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007572:	4798      	blx	r3
 8007574:	3601      	adds	r6, #1
 8007576:	e7f2      	b.n	800755e <__libc_init_array+0x1e>
 8007578:	080098f4 	.word	0x080098f4
 800757c:	080098f4 	.word	0x080098f4
 8007580:	080098f4 	.word	0x080098f4
 8007584:	080098f8 	.word	0x080098f8

08007588 <__retarget_lock_init_recursive>:
 8007588:	4770      	bx	lr

0800758a <__retarget_lock_acquire_recursive>:
 800758a:	4770      	bx	lr

0800758c <__retarget_lock_release_recursive>:
 800758c:	4770      	bx	lr
	...

08007590 <_free_r>:
 8007590:	b538      	push	{r3, r4, r5, lr}
 8007592:	4605      	mov	r5, r0
 8007594:	2900      	cmp	r1, #0
 8007596:	d040      	beq.n	800761a <_free_r+0x8a>
 8007598:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800759c:	1f0c      	subs	r4, r1, #4
 800759e:	2b00      	cmp	r3, #0
 80075a0:	bfb8      	it	lt
 80075a2:	18e4      	addlt	r4, r4, r3
 80075a4:	f7ff fd64 	bl	8007070 <__malloc_lock>
 80075a8:	4a1c      	ldr	r2, [pc, #112]	@ (800761c <_free_r+0x8c>)
 80075aa:	6813      	ldr	r3, [r2, #0]
 80075ac:	b933      	cbnz	r3, 80075bc <_free_r+0x2c>
 80075ae:	6063      	str	r3, [r4, #4]
 80075b0:	6014      	str	r4, [r2, #0]
 80075b2:	4628      	mov	r0, r5
 80075b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075b8:	f7ff bd60 	b.w	800707c <__malloc_unlock>
 80075bc:	42a3      	cmp	r3, r4
 80075be:	d908      	bls.n	80075d2 <_free_r+0x42>
 80075c0:	6820      	ldr	r0, [r4, #0]
 80075c2:	1821      	adds	r1, r4, r0
 80075c4:	428b      	cmp	r3, r1
 80075c6:	bf01      	itttt	eq
 80075c8:	6819      	ldreq	r1, [r3, #0]
 80075ca:	685b      	ldreq	r3, [r3, #4]
 80075cc:	1809      	addeq	r1, r1, r0
 80075ce:	6021      	streq	r1, [r4, #0]
 80075d0:	e7ed      	b.n	80075ae <_free_r+0x1e>
 80075d2:	461a      	mov	r2, r3
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	b10b      	cbz	r3, 80075dc <_free_r+0x4c>
 80075d8:	42a3      	cmp	r3, r4
 80075da:	d9fa      	bls.n	80075d2 <_free_r+0x42>
 80075dc:	6811      	ldr	r1, [r2, #0]
 80075de:	1850      	adds	r0, r2, r1
 80075e0:	42a0      	cmp	r0, r4
 80075e2:	d10b      	bne.n	80075fc <_free_r+0x6c>
 80075e4:	6820      	ldr	r0, [r4, #0]
 80075e6:	4401      	add	r1, r0
 80075e8:	1850      	adds	r0, r2, r1
 80075ea:	4283      	cmp	r3, r0
 80075ec:	6011      	str	r1, [r2, #0]
 80075ee:	d1e0      	bne.n	80075b2 <_free_r+0x22>
 80075f0:	6818      	ldr	r0, [r3, #0]
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	4408      	add	r0, r1
 80075f6:	6010      	str	r0, [r2, #0]
 80075f8:	6053      	str	r3, [r2, #4]
 80075fa:	e7da      	b.n	80075b2 <_free_r+0x22>
 80075fc:	d902      	bls.n	8007604 <_free_r+0x74>
 80075fe:	230c      	movs	r3, #12
 8007600:	602b      	str	r3, [r5, #0]
 8007602:	e7d6      	b.n	80075b2 <_free_r+0x22>
 8007604:	6820      	ldr	r0, [r4, #0]
 8007606:	1821      	adds	r1, r4, r0
 8007608:	428b      	cmp	r3, r1
 800760a:	bf01      	itttt	eq
 800760c:	6819      	ldreq	r1, [r3, #0]
 800760e:	685b      	ldreq	r3, [r3, #4]
 8007610:	1809      	addeq	r1, r1, r0
 8007612:	6021      	streq	r1, [r4, #0]
 8007614:	6063      	str	r3, [r4, #4]
 8007616:	6054      	str	r4, [r2, #4]
 8007618:	e7cb      	b.n	80075b2 <_free_r+0x22>
 800761a:	bd38      	pop	{r3, r4, r5, pc}
 800761c:	20000474 	.word	0x20000474

08007620 <__sflush_r>:
 8007620:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007626:	0716      	lsls	r6, r2, #28
 8007628:	4605      	mov	r5, r0
 800762a:	460c      	mov	r4, r1
 800762c:	d454      	bmi.n	80076d8 <__sflush_r+0xb8>
 800762e:	684b      	ldr	r3, [r1, #4]
 8007630:	2b00      	cmp	r3, #0
 8007632:	dc02      	bgt.n	800763a <__sflush_r+0x1a>
 8007634:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007636:	2b00      	cmp	r3, #0
 8007638:	dd48      	ble.n	80076cc <__sflush_r+0xac>
 800763a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800763c:	2e00      	cmp	r6, #0
 800763e:	d045      	beq.n	80076cc <__sflush_r+0xac>
 8007640:	2300      	movs	r3, #0
 8007642:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007646:	682f      	ldr	r7, [r5, #0]
 8007648:	6a21      	ldr	r1, [r4, #32]
 800764a:	602b      	str	r3, [r5, #0]
 800764c:	d030      	beq.n	80076b0 <__sflush_r+0x90>
 800764e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007650:	89a3      	ldrh	r3, [r4, #12]
 8007652:	0759      	lsls	r1, r3, #29
 8007654:	d505      	bpl.n	8007662 <__sflush_r+0x42>
 8007656:	6863      	ldr	r3, [r4, #4]
 8007658:	1ad2      	subs	r2, r2, r3
 800765a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800765c:	b10b      	cbz	r3, 8007662 <__sflush_r+0x42>
 800765e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007660:	1ad2      	subs	r2, r2, r3
 8007662:	2300      	movs	r3, #0
 8007664:	4628      	mov	r0, r5
 8007666:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007668:	6a21      	ldr	r1, [r4, #32]
 800766a:	47b0      	blx	r6
 800766c:	1c43      	adds	r3, r0, #1
 800766e:	89a3      	ldrh	r3, [r4, #12]
 8007670:	d106      	bne.n	8007680 <__sflush_r+0x60>
 8007672:	6829      	ldr	r1, [r5, #0]
 8007674:	291d      	cmp	r1, #29
 8007676:	d82b      	bhi.n	80076d0 <__sflush_r+0xb0>
 8007678:	4a28      	ldr	r2, [pc, #160]	@ (800771c <__sflush_r+0xfc>)
 800767a:	40ca      	lsrs	r2, r1
 800767c:	07d6      	lsls	r6, r2, #31
 800767e:	d527      	bpl.n	80076d0 <__sflush_r+0xb0>
 8007680:	2200      	movs	r2, #0
 8007682:	6062      	str	r2, [r4, #4]
 8007684:	6922      	ldr	r2, [r4, #16]
 8007686:	04d9      	lsls	r1, r3, #19
 8007688:	6022      	str	r2, [r4, #0]
 800768a:	d504      	bpl.n	8007696 <__sflush_r+0x76>
 800768c:	1c42      	adds	r2, r0, #1
 800768e:	d101      	bne.n	8007694 <__sflush_r+0x74>
 8007690:	682b      	ldr	r3, [r5, #0]
 8007692:	b903      	cbnz	r3, 8007696 <__sflush_r+0x76>
 8007694:	6560      	str	r0, [r4, #84]	@ 0x54
 8007696:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007698:	602f      	str	r7, [r5, #0]
 800769a:	b1b9      	cbz	r1, 80076cc <__sflush_r+0xac>
 800769c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80076a0:	4299      	cmp	r1, r3
 80076a2:	d002      	beq.n	80076aa <__sflush_r+0x8a>
 80076a4:	4628      	mov	r0, r5
 80076a6:	f7ff ff73 	bl	8007590 <_free_r>
 80076aa:	2300      	movs	r3, #0
 80076ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80076ae:	e00d      	b.n	80076cc <__sflush_r+0xac>
 80076b0:	2301      	movs	r3, #1
 80076b2:	4628      	mov	r0, r5
 80076b4:	47b0      	blx	r6
 80076b6:	4602      	mov	r2, r0
 80076b8:	1c50      	adds	r0, r2, #1
 80076ba:	d1c9      	bne.n	8007650 <__sflush_r+0x30>
 80076bc:	682b      	ldr	r3, [r5, #0]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d0c6      	beq.n	8007650 <__sflush_r+0x30>
 80076c2:	2b1d      	cmp	r3, #29
 80076c4:	d001      	beq.n	80076ca <__sflush_r+0xaa>
 80076c6:	2b16      	cmp	r3, #22
 80076c8:	d11d      	bne.n	8007706 <__sflush_r+0xe6>
 80076ca:	602f      	str	r7, [r5, #0]
 80076cc:	2000      	movs	r0, #0
 80076ce:	e021      	b.n	8007714 <__sflush_r+0xf4>
 80076d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076d4:	b21b      	sxth	r3, r3
 80076d6:	e01a      	b.n	800770e <__sflush_r+0xee>
 80076d8:	690f      	ldr	r7, [r1, #16]
 80076da:	2f00      	cmp	r7, #0
 80076dc:	d0f6      	beq.n	80076cc <__sflush_r+0xac>
 80076de:	0793      	lsls	r3, r2, #30
 80076e0:	bf18      	it	ne
 80076e2:	2300      	movne	r3, #0
 80076e4:	680e      	ldr	r6, [r1, #0]
 80076e6:	bf08      	it	eq
 80076e8:	694b      	ldreq	r3, [r1, #20]
 80076ea:	1bf6      	subs	r6, r6, r7
 80076ec:	600f      	str	r7, [r1, #0]
 80076ee:	608b      	str	r3, [r1, #8]
 80076f0:	2e00      	cmp	r6, #0
 80076f2:	ddeb      	ble.n	80076cc <__sflush_r+0xac>
 80076f4:	4633      	mov	r3, r6
 80076f6:	463a      	mov	r2, r7
 80076f8:	4628      	mov	r0, r5
 80076fa:	6a21      	ldr	r1, [r4, #32]
 80076fc:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007700:	47e0      	blx	ip
 8007702:	2800      	cmp	r0, #0
 8007704:	dc07      	bgt.n	8007716 <__sflush_r+0xf6>
 8007706:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800770a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800770e:	f04f 30ff 	mov.w	r0, #4294967295
 8007712:	81a3      	strh	r3, [r4, #12]
 8007714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007716:	4407      	add	r7, r0
 8007718:	1a36      	subs	r6, r6, r0
 800771a:	e7e9      	b.n	80076f0 <__sflush_r+0xd0>
 800771c:	20400001 	.word	0x20400001

08007720 <_fflush_r>:
 8007720:	b538      	push	{r3, r4, r5, lr}
 8007722:	690b      	ldr	r3, [r1, #16]
 8007724:	4605      	mov	r5, r0
 8007726:	460c      	mov	r4, r1
 8007728:	b913      	cbnz	r3, 8007730 <_fflush_r+0x10>
 800772a:	2500      	movs	r5, #0
 800772c:	4628      	mov	r0, r5
 800772e:	bd38      	pop	{r3, r4, r5, pc}
 8007730:	b118      	cbz	r0, 800773a <_fflush_r+0x1a>
 8007732:	6a03      	ldr	r3, [r0, #32]
 8007734:	b90b      	cbnz	r3, 800773a <_fflush_r+0x1a>
 8007736:	f7ff fd33 	bl	80071a0 <__sinit>
 800773a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d0f3      	beq.n	800772a <_fflush_r+0xa>
 8007742:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007744:	07d0      	lsls	r0, r2, #31
 8007746:	d404      	bmi.n	8007752 <_fflush_r+0x32>
 8007748:	0599      	lsls	r1, r3, #22
 800774a:	d402      	bmi.n	8007752 <_fflush_r+0x32>
 800774c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800774e:	f7ff ff1c 	bl	800758a <__retarget_lock_acquire_recursive>
 8007752:	4628      	mov	r0, r5
 8007754:	4621      	mov	r1, r4
 8007756:	f7ff ff63 	bl	8007620 <__sflush_r>
 800775a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800775c:	4605      	mov	r5, r0
 800775e:	07da      	lsls	r2, r3, #31
 8007760:	d4e4      	bmi.n	800772c <_fflush_r+0xc>
 8007762:	89a3      	ldrh	r3, [r4, #12]
 8007764:	059b      	lsls	r3, r3, #22
 8007766:	d4e1      	bmi.n	800772c <_fflush_r+0xc>
 8007768:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800776a:	f7ff ff0f 	bl	800758c <__retarget_lock_release_recursive>
 800776e:	e7dd      	b.n	800772c <_fflush_r+0xc>

08007770 <__swhatbuf_r>:
 8007770:	b570      	push	{r4, r5, r6, lr}
 8007772:	460c      	mov	r4, r1
 8007774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007778:	4615      	mov	r5, r2
 800777a:	2900      	cmp	r1, #0
 800777c:	461e      	mov	r6, r3
 800777e:	b096      	sub	sp, #88	@ 0x58
 8007780:	da0c      	bge.n	800779c <__swhatbuf_r+0x2c>
 8007782:	89a3      	ldrh	r3, [r4, #12]
 8007784:	2100      	movs	r1, #0
 8007786:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800778a:	bf14      	ite	ne
 800778c:	2340      	movne	r3, #64	@ 0x40
 800778e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007792:	2000      	movs	r0, #0
 8007794:	6031      	str	r1, [r6, #0]
 8007796:	602b      	str	r3, [r5, #0]
 8007798:	b016      	add	sp, #88	@ 0x58
 800779a:	bd70      	pop	{r4, r5, r6, pc}
 800779c:	466a      	mov	r2, sp
 800779e:	f000 f849 	bl	8007834 <_fstat_r>
 80077a2:	2800      	cmp	r0, #0
 80077a4:	dbed      	blt.n	8007782 <__swhatbuf_r+0x12>
 80077a6:	9901      	ldr	r1, [sp, #4]
 80077a8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80077ac:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80077b0:	4259      	negs	r1, r3
 80077b2:	4159      	adcs	r1, r3
 80077b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80077b8:	e7eb      	b.n	8007792 <__swhatbuf_r+0x22>

080077ba <__smakebuf_r>:
 80077ba:	898b      	ldrh	r3, [r1, #12]
 80077bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80077be:	079d      	lsls	r5, r3, #30
 80077c0:	4606      	mov	r6, r0
 80077c2:	460c      	mov	r4, r1
 80077c4:	d507      	bpl.n	80077d6 <__smakebuf_r+0x1c>
 80077c6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80077ca:	6023      	str	r3, [r4, #0]
 80077cc:	6123      	str	r3, [r4, #16]
 80077ce:	2301      	movs	r3, #1
 80077d0:	6163      	str	r3, [r4, #20]
 80077d2:	b003      	add	sp, #12
 80077d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077d6:	466a      	mov	r2, sp
 80077d8:	ab01      	add	r3, sp, #4
 80077da:	f7ff ffc9 	bl	8007770 <__swhatbuf_r>
 80077de:	9f00      	ldr	r7, [sp, #0]
 80077e0:	4605      	mov	r5, r0
 80077e2:	4639      	mov	r1, r7
 80077e4:	4630      	mov	r0, r6
 80077e6:	f7ff fbc3 	bl	8006f70 <_malloc_r>
 80077ea:	b948      	cbnz	r0, 8007800 <__smakebuf_r+0x46>
 80077ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077f0:	059a      	lsls	r2, r3, #22
 80077f2:	d4ee      	bmi.n	80077d2 <__smakebuf_r+0x18>
 80077f4:	f023 0303 	bic.w	r3, r3, #3
 80077f8:	f043 0302 	orr.w	r3, r3, #2
 80077fc:	81a3      	strh	r3, [r4, #12]
 80077fe:	e7e2      	b.n	80077c6 <__smakebuf_r+0xc>
 8007800:	89a3      	ldrh	r3, [r4, #12]
 8007802:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007806:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800780a:	81a3      	strh	r3, [r4, #12]
 800780c:	9b01      	ldr	r3, [sp, #4]
 800780e:	6020      	str	r0, [r4, #0]
 8007810:	b15b      	cbz	r3, 800782a <__smakebuf_r+0x70>
 8007812:	4630      	mov	r0, r6
 8007814:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007818:	f000 f81e 	bl	8007858 <_isatty_r>
 800781c:	b128      	cbz	r0, 800782a <__smakebuf_r+0x70>
 800781e:	89a3      	ldrh	r3, [r4, #12]
 8007820:	f023 0303 	bic.w	r3, r3, #3
 8007824:	f043 0301 	orr.w	r3, r3, #1
 8007828:	81a3      	strh	r3, [r4, #12]
 800782a:	89a3      	ldrh	r3, [r4, #12]
 800782c:	431d      	orrs	r5, r3
 800782e:	81a5      	strh	r5, [r4, #12]
 8007830:	e7cf      	b.n	80077d2 <__smakebuf_r+0x18>
	...

08007834 <_fstat_r>:
 8007834:	b538      	push	{r3, r4, r5, lr}
 8007836:	2300      	movs	r3, #0
 8007838:	4d06      	ldr	r5, [pc, #24]	@ (8007854 <_fstat_r+0x20>)
 800783a:	4604      	mov	r4, r0
 800783c:	4608      	mov	r0, r1
 800783e:	4611      	mov	r1, r2
 8007840:	602b      	str	r3, [r5, #0]
 8007842:	f7fa fd33 	bl	80022ac <_fstat>
 8007846:	1c43      	adds	r3, r0, #1
 8007848:	d102      	bne.n	8007850 <_fstat_r+0x1c>
 800784a:	682b      	ldr	r3, [r5, #0]
 800784c:	b103      	cbz	r3, 8007850 <_fstat_r+0x1c>
 800784e:	6023      	str	r3, [r4, #0]
 8007850:	bd38      	pop	{r3, r4, r5, pc}
 8007852:	bf00      	nop
 8007854:	200005b4 	.word	0x200005b4

08007858 <_isatty_r>:
 8007858:	b538      	push	{r3, r4, r5, lr}
 800785a:	2300      	movs	r3, #0
 800785c:	4d05      	ldr	r5, [pc, #20]	@ (8007874 <_isatty_r+0x1c>)
 800785e:	4604      	mov	r4, r0
 8007860:	4608      	mov	r0, r1
 8007862:	602b      	str	r3, [r5, #0]
 8007864:	f7fa fd31 	bl	80022ca <_isatty>
 8007868:	1c43      	adds	r3, r0, #1
 800786a:	d102      	bne.n	8007872 <_isatty_r+0x1a>
 800786c:	682b      	ldr	r3, [r5, #0]
 800786e:	b103      	cbz	r3, 8007872 <_isatty_r+0x1a>
 8007870:	6023      	str	r3, [r4, #0]
 8007872:	bd38      	pop	{r3, r4, r5, pc}
 8007874:	200005b4 	.word	0x200005b4

08007878 <_init>:
 8007878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800787a:	bf00      	nop
 800787c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800787e:	bc08      	pop	{r3}
 8007880:	469e      	mov	lr, r3
 8007882:	4770      	bx	lr

08007884 <_fini>:
 8007884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007886:	bf00      	nop
 8007888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800788a:	bc08      	pop	{r3}
 800788c:	469e      	mov	lr, r3
 800788e:	4770      	bx	lr
