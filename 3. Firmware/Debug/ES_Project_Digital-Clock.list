
ES_Project_Digital-Clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059b8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08005ac4  08005ac4  00006ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b00  08005b00  0000705c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005b00  08005b00  0000705c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005b00  08005b00  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b00  08005b00  00006b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005b04  08005b04  00006b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005b08  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  2000005c  08005b64  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000020c  08005b64  0000720c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f541  00000000  00000000  00007085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002969  00000000  00000000  000165c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e20  00000000  00000000  00018f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b11  00000000  00000000  00019d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018be3  00000000  00000000  0001a861  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000137a6  00000000  00000000  00033444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c13e  00000000  00000000  00046bea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d2d28  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003998  00000000  00000000  000d2d6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  000d6704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08005aac 	.word	0x08005aac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08005aac 	.word	0x08005aac

0800014c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000152:	1d3b      	adds	r3, r7, #4
 8000154:	2200      	movs	r2, #0
 8000156:	601a      	str	r2, [r3, #0]
 8000158:	605a      	str	r2, [r3, #4]
 800015a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800015c:	4b18      	ldr	r3, [pc, #96]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800015e:	4a19      	ldr	r2, [pc, #100]	@ (80001c4 <MX_ADC1_Init+0x78>)
 8000160:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000162:	4b17      	ldr	r3, [pc, #92]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000164:	2200      	movs	r2, #0
 8000166:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000168:	4b15      	ldr	r3, [pc, #84]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800016a:	2200      	movs	r2, #0
 800016c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800016e:	4b14      	ldr	r3, [pc, #80]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000170:	2200      	movs	r2, #0
 8000172:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000174:	4b12      	ldr	r3, [pc, #72]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000176:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800017a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800017c:	4b10      	ldr	r3, [pc, #64]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800017e:	2200      	movs	r2, #0
 8000180:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000182:	4b0f      	ldr	r3, [pc, #60]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000184:	2201      	movs	r2, #1
 8000186:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000188:	480d      	ldr	r0, [pc, #52]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800018a:	f002 f9a1 	bl	80024d0 <HAL_ADC_Init>
 800018e:	4603      	mov	r3, r0
 8000190:	2b00      	cmp	r3, #0
 8000192:	d001      	beq.n	8000198 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000194:	f001 ff60 	bl	8002058 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000198:	2304      	movs	r3, #4
 800019a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800019c:	2301      	movs	r3, #1
 800019e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001a0:	2300      	movs	r3, #0
 80001a2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	4619      	mov	r1, r3
 80001a8:	4805      	ldr	r0, [pc, #20]	@ (80001c0 <MX_ADC1_Init+0x74>)
 80001aa:	f002 fbf3 	bl	8002994 <HAL_ADC_ConfigChannel>
 80001ae:	4603      	mov	r3, r0
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d001      	beq.n	80001b8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80001b4:	f001 ff50 	bl	8002058 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80001b8:	bf00      	nop
 80001ba:	3710      	adds	r7, #16
 80001bc:	46bd      	mov	sp, r7
 80001be:	bd80      	pop	{r7, pc}
 80001c0:	20000078 	.word	0x20000078
 80001c4:	40012400 	.word	0x40012400

080001c8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b088      	sub	sp, #32
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001d0:	f107 0310 	add.w	r3, r7, #16
 80001d4:	2200      	movs	r2, #0
 80001d6:	601a      	str	r2, [r3, #0]
 80001d8:	605a      	str	r2, [r3, #4]
 80001da:	609a      	str	r2, [r3, #8]
 80001dc:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	4a18      	ldr	r2, [pc, #96]	@ (8000244 <HAL_ADC_MspInit+0x7c>)
 80001e4:	4293      	cmp	r3, r2
 80001e6:	d129      	bne.n	800023c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80001e8:	4b17      	ldr	r3, [pc, #92]	@ (8000248 <HAL_ADC_MspInit+0x80>)
 80001ea:	699b      	ldr	r3, [r3, #24]
 80001ec:	4a16      	ldr	r2, [pc, #88]	@ (8000248 <HAL_ADC_MspInit+0x80>)
 80001ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80001f2:	6193      	str	r3, [r2, #24]
 80001f4:	4b14      	ldr	r3, [pc, #80]	@ (8000248 <HAL_ADC_MspInit+0x80>)
 80001f6:	699b      	ldr	r3, [r3, #24]
 80001f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80001fc:	60fb      	str	r3, [r7, #12]
 80001fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000200:	4b11      	ldr	r3, [pc, #68]	@ (8000248 <HAL_ADC_MspInit+0x80>)
 8000202:	699b      	ldr	r3, [r3, #24]
 8000204:	4a10      	ldr	r2, [pc, #64]	@ (8000248 <HAL_ADC_MspInit+0x80>)
 8000206:	f043 0304 	orr.w	r3, r3, #4
 800020a:	6193      	str	r3, [r2, #24]
 800020c:	4b0e      	ldr	r3, [pc, #56]	@ (8000248 <HAL_ADC_MspInit+0x80>)
 800020e:	699b      	ldr	r3, [r3, #24]
 8000210:	f003 0304 	and.w	r3, r3, #4
 8000214:	60bb      	str	r3, [r7, #8]
 8000216:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000218:	2310      	movs	r3, #16
 800021a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800021c:	2303      	movs	r3, #3
 800021e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000220:	f107 0310 	add.w	r3, r7, #16
 8000224:	4619      	mov	r1, r3
 8000226:	4809      	ldr	r0, [pc, #36]	@ (800024c <HAL_ADC_MspInit+0x84>)
 8000228:	f002 ff10 	bl	800304c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800022c:	2200      	movs	r2, #0
 800022e:	2100      	movs	r1, #0
 8000230:	2012      	movs	r0, #18
 8000232:	f002 fe22 	bl	8002e7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000236:	2012      	movs	r0, #18
 8000238:	f002 fe3b 	bl	8002eb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800023c:	bf00      	nop
 800023e:	3720      	adds	r7, #32
 8000240:	46bd      	mov	sp, r7
 8000242:	bd80      	pop	{r7, pc}
 8000244:	40012400 	.word	0x40012400
 8000248:	40021000 	.word	0x40021000
 800024c:	40010800 	.word	0x40010800

08000250 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b088      	sub	sp, #32
 8000254:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000256:	f107 0310 	add.w	r3, r7, #16
 800025a:	2200      	movs	r2, #0
 800025c:	601a      	str	r2, [r3, #0]
 800025e:	605a      	str	r2, [r3, #4]
 8000260:	609a      	str	r2, [r3, #8]
 8000262:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000264:	4b47      	ldr	r3, [pc, #284]	@ (8000384 <MX_GPIO_Init+0x134>)
 8000266:	699b      	ldr	r3, [r3, #24]
 8000268:	4a46      	ldr	r2, [pc, #280]	@ (8000384 <MX_GPIO_Init+0x134>)
 800026a:	f043 0320 	orr.w	r3, r3, #32
 800026e:	6193      	str	r3, [r2, #24]
 8000270:	4b44      	ldr	r3, [pc, #272]	@ (8000384 <MX_GPIO_Init+0x134>)
 8000272:	699b      	ldr	r3, [r3, #24]
 8000274:	f003 0320 	and.w	r3, r3, #32
 8000278:	60fb      	str	r3, [r7, #12]
 800027a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800027c:	4b41      	ldr	r3, [pc, #260]	@ (8000384 <MX_GPIO_Init+0x134>)
 800027e:	699b      	ldr	r3, [r3, #24]
 8000280:	4a40      	ldr	r2, [pc, #256]	@ (8000384 <MX_GPIO_Init+0x134>)
 8000282:	f043 0304 	orr.w	r3, r3, #4
 8000286:	6193      	str	r3, [r2, #24]
 8000288:	4b3e      	ldr	r3, [pc, #248]	@ (8000384 <MX_GPIO_Init+0x134>)
 800028a:	699b      	ldr	r3, [r3, #24]
 800028c:	f003 0304 	and.w	r3, r3, #4
 8000290:	60bb      	str	r3, [r7, #8]
 8000292:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000294:	4b3b      	ldr	r3, [pc, #236]	@ (8000384 <MX_GPIO_Init+0x134>)
 8000296:	699b      	ldr	r3, [r3, #24]
 8000298:	4a3a      	ldr	r2, [pc, #232]	@ (8000384 <MX_GPIO_Init+0x134>)
 800029a:	f043 0308 	orr.w	r3, r3, #8
 800029e:	6193      	str	r3, [r2, #24]
 80002a0:	4b38      	ldr	r3, [pc, #224]	@ (8000384 <MX_GPIO_Init+0x134>)
 80002a2:	699b      	ldr	r3, [r3, #24]
 80002a4:	f003 0308 	and.w	r3, r3, #8
 80002a8:	607b      	str	r3, [r7, #4]
 80002aa:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_Pin|DC_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 80002ac:	2200      	movs	r2, #0
 80002ae:	210e      	movs	r1, #14
 80002b0:	4835      	ldr	r0, [pc, #212]	@ (8000388 <MX_GPIO_Init+0x138>)
 80002b2:	f003 f866 	bl	8003382 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BUZZER_Pin|PWR_Pin, GPIO_PIN_RESET);
 80002b6:	2200      	movs	r2, #0
 80002b8:	2103      	movs	r1, #3
 80002ba:	4834      	ldr	r0, [pc, #208]	@ (800038c <MX_GPIO_Init+0x13c>)
 80002bc:	f003 f861 	bl	8003382 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUSY_Pin PA6 */
  GPIO_InitStruct.Pin = BUSY_Pin|GPIO_PIN_6;
 80002c0:	2341      	movs	r3, #65	@ 0x41
 80002c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002c4:	2300      	movs	r3, #0
 80002c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002c8:	2300      	movs	r3, #0
 80002ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002cc:	f107 0310 	add.w	r3, r7, #16
 80002d0:	4619      	mov	r1, r3
 80002d2:	482d      	ldr	r0, [pc, #180]	@ (8000388 <MX_GPIO_Init+0x138>)
 80002d4:	f002 feba 	bl	800304c <HAL_GPIO_Init>

  /*Configure GPIO pins : RST_Pin DC_Pin SPI_CS_Pin */
  GPIO_InitStruct.Pin = RST_Pin|DC_Pin|SPI_CS_Pin;
 80002d8:	230e      	movs	r3, #14
 80002da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002dc:	2301      	movs	r3, #1
 80002de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002e0:	2300      	movs	r3, #0
 80002e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002e4:	2302      	movs	r3, #2
 80002e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002e8:	f107 0310 	add.w	r3, r7, #16
 80002ec:	4619      	mov	r1, r3
 80002ee:	4826      	ldr	r0, [pc, #152]	@ (8000388 <MX_GPIO_Init+0x138>)
 80002f0:	f002 feac 	bl	800304c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZER_Pin PWR_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin|PWR_Pin;
 80002f4:	2303      	movs	r3, #3
 80002f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002f8:	2301      	movs	r3, #1
 80002fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002fc:	2300      	movs	r3, #0
 80002fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000300:	2302      	movs	r3, #2
 8000302:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000304:	f107 0310 	add.w	r3, r7, #16
 8000308:	4619      	mov	r1, r3
 800030a:	4820      	ldr	r0, [pc, #128]	@ (800038c <MX_GPIO_Init+0x13c>)
 800030c:	f002 fe9e 	bl	800304c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON0_IN12_Pin BUTTON1_IN13_Pin BUTTON2_IN14_Pin BUTTON3_IN15_Pin */
  GPIO_InitStruct.Pin = BUTTON0_IN12_Pin|BUTTON1_IN13_Pin|BUTTON2_IN14_Pin|BUTTON3_IN15_Pin;
 8000310:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000314:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000316:	4b1e      	ldr	r3, [pc, #120]	@ (8000390 <MX_GPIO_Init+0x140>)
 8000318:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800031a:	2302      	movs	r3, #2
 800031c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800031e:	f107 0310 	add.w	r3, r7, #16
 8000322:	4619      	mov	r1, r3
 8000324:	4819      	ldr	r0, [pc, #100]	@ (800038c <MX_GPIO_Init+0x13c>)
 8000326:	f002 fe91 	bl	800304c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON4_IN8_Pin */
  GPIO_InitStruct.Pin = BUTTON4_IN8_Pin;
 800032a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800032e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000330:	4b17      	ldr	r3, [pc, #92]	@ (8000390 <MX_GPIO_Init+0x140>)
 8000332:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000334:	2302      	movs	r3, #2
 8000336:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON4_IN8_GPIO_Port, &GPIO_InitStruct);
 8000338:	f107 0310 	add.w	r3, r7, #16
 800033c:	4619      	mov	r1, r3
 800033e:	4812      	ldr	r0, [pc, #72]	@ (8000388 <MX_GPIO_Init+0x138>)
 8000340:	f002 fe84 	bl	800304c <HAL_GPIO_Init>

  /*Configure GPIO pin : RTC_IN5_Pin */
  GPIO_InitStruct.Pin = RTC_IN5_Pin;
 8000344:	2320      	movs	r3, #32
 8000346:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000348:	4b12      	ldr	r3, [pc, #72]	@ (8000394 <MX_GPIO_Init+0x144>)
 800034a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800034c:	2301      	movs	r3, #1
 800034e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RTC_IN5_GPIO_Port, &GPIO_InitStruct);
 8000350:	f107 0310 	add.w	r3, r7, #16
 8000354:	4619      	mov	r1, r3
 8000356:	480d      	ldr	r0, [pc, #52]	@ (800038c <MX_GPIO_Init+0x13c>)
 8000358:	f002 fe78 	bl	800304c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800035c:	2200      	movs	r2, #0
 800035e:	2100      	movs	r1, #0
 8000360:	2017      	movs	r0, #23
 8000362:	f002 fd8a 	bl	8002e7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000366:	2017      	movs	r0, #23
 8000368:	f002 fda3 	bl	8002eb2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800036c:	2200      	movs	r2, #0
 800036e:	2100      	movs	r1, #0
 8000370:	2028      	movs	r0, #40	@ 0x28
 8000372:	f002 fd82 	bl	8002e7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000376:	2028      	movs	r0, #40	@ 0x28
 8000378:	f002 fd9b 	bl	8002eb2 <HAL_NVIC_EnableIRQ>

}
 800037c:	bf00      	nop
 800037e:	3720      	adds	r7, #32
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}
 8000384:	40021000 	.word	0x40021000
 8000388:	40010800 	.word	0x40010800
 800038c:	40010c00 	.word	0x40010c00
 8000390:	10110000 	.word	0x10110000
 8000394:	10210000 	.word	0x10210000

08000398 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800039c:	4b12      	ldr	r3, [pc, #72]	@ (80003e8 <MX_I2C1_Init+0x50>)
 800039e:	4a13      	ldr	r2, [pc, #76]	@ (80003ec <MX_I2C1_Init+0x54>)
 80003a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80003a2:	4b11      	ldr	r3, [pc, #68]	@ (80003e8 <MX_I2C1_Init+0x50>)
 80003a4:	4a12      	ldr	r2, [pc, #72]	@ (80003f0 <MX_I2C1_Init+0x58>)
 80003a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003a8:	4b0f      	ldr	r3, [pc, #60]	@ (80003e8 <MX_I2C1_Init+0x50>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80003ae:	4b0e      	ldr	r3, [pc, #56]	@ (80003e8 <MX_I2C1_Init+0x50>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003b4:	4b0c      	ldr	r3, [pc, #48]	@ (80003e8 <MX_I2C1_Init+0x50>)
 80003b6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80003ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003bc:	4b0a      	ldr	r3, [pc, #40]	@ (80003e8 <MX_I2C1_Init+0x50>)
 80003be:	2200      	movs	r2, #0
 80003c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80003c2:	4b09      	ldr	r3, [pc, #36]	@ (80003e8 <MX_I2C1_Init+0x50>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003c8:	4b07      	ldr	r3, [pc, #28]	@ (80003e8 <MX_I2C1_Init+0x50>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003ce:	4b06      	ldr	r3, [pc, #24]	@ (80003e8 <MX_I2C1_Init+0x50>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003d4:	4804      	ldr	r0, [pc, #16]	@ (80003e8 <MX_I2C1_Init+0x50>)
 80003d6:	f003 f805 	bl	80033e4 <HAL_I2C_Init>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d001      	beq.n	80003e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80003e0:	f001 fe3a 	bl	8002058 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003e4:	bf00      	nop
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	200000a8 	.word	0x200000a8
 80003ec:	40005400 	.word	0x40005400
 80003f0:	00061a80 	.word	0x00061a80

080003f4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b088      	sub	sp, #32
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003fc:	f107 0310 	add.w	r3, r7, #16
 8000400:	2200      	movs	r2, #0
 8000402:	601a      	str	r2, [r3, #0]
 8000404:	605a      	str	r2, [r3, #4]
 8000406:	609a      	str	r2, [r3, #8]
 8000408:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	4a15      	ldr	r2, [pc, #84]	@ (8000464 <HAL_I2C_MspInit+0x70>)
 8000410:	4293      	cmp	r3, r2
 8000412:	d123      	bne.n	800045c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000414:	4b14      	ldr	r3, [pc, #80]	@ (8000468 <HAL_I2C_MspInit+0x74>)
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	4a13      	ldr	r2, [pc, #76]	@ (8000468 <HAL_I2C_MspInit+0x74>)
 800041a:	f043 0308 	orr.w	r3, r3, #8
 800041e:	6193      	str	r3, [r2, #24]
 8000420:	4b11      	ldr	r3, [pc, #68]	@ (8000468 <HAL_I2C_MspInit+0x74>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	f003 0308 	and.w	r3, r3, #8
 8000428:	60fb      	str	r3, [r7, #12]
 800042a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800042c:	23c0      	movs	r3, #192	@ 0xc0
 800042e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000430:	2312      	movs	r3, #18
 8000432:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000434:	2303      	movs	r3, #3
 8000436:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000438:	f107 0310 	add.w	r3, r7, #16
 800043c:	4619      	mov	r1, r3
 800043e:	480b      	ldr	r0, [pc, #44]	@ (800046c <HAL_I2C_MspInit+0x78>)
 8000440:	f002 fe04 	bl	800304c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000444:	4b08      	ldr	r3, [pc, #32]	@ (8000468 <HAL_I2C_MspInit+0x74>)
 8000446:	69db      	ldr	r3, [r3, #28]
 8000448:	4a07      	ldr	r2, [pc, #28]	@ (8000468 <HAL_I2C_MspInit+0x74>)
 800044a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800044e:	61d3      	str	r3, [r2, #28]
 8000450:	4b05      	ldr	r3, [pc, #20]	@ (8000468 <HAL_I2C_MspInit+0x74>)
 8000452:	69db      	ldr	r3, [r3, #28]
 8000454:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000458:	60bb      	str	r3, [r7, #8]
 800045a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800045c:	bf00      	nop
 800045e:	3720      	adds	r7, #32
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	40005400 	.word	0x40005400
 8000468:	40021000 	.word	0x40021000
 800046c:	40010c00 	.word	0x40010c00

08000470 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000472:	b087      	sub	sp, #28
 8000474:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000476:	f001 ffa5 	bl	80023c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800047a:	f000 f8d3 	bl	8000624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800047e:	f7ff fee7 	bl	8000250 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000482:	f7ff ff89 	bl	8000398 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000486:	f7ff fe61 	bl	800014c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800048a:	f001 fef7 	bl	800227c <MX_USART1_UART_Init>
  MX_SPI1_Init();
 800048e:	f001 fde9 	bl	8002064 <MX_SPI1_Init>
//     4, // Month: 1-12
//    25  // Year: 0-99 (0 = 2000, 1 = 2001, ..., 99 = 2099)
//  );

  // Initialize RTC module (Run only once after reset the RTC).
  Time_Ctrl 
 8000492:	2300      	movs	r3, #0
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2300      	movs	r3, #0
 8000498:	9300      	str	r3, [sp, #0]
 800049a:	2300      	movs	r3, #0
 800049c:	2200      	movs	r2, #0
 800049e:	2100      	movs	r1, #0
 80004a0:	2000      	movs	r0, #0
 80004a2:	f000 f9ff 	bl	80008a4 <Time_Ctrl>
     0, // Day of the week: 1-7 (1 = Sunday, 2 = Monday, ..., 7 = Saturday), or Date of the month: 1-31
     0  // Select: 1 = day of week, 0 = date of month
  );   

  // Initially retrieve the time values from the RTC module
  Time_Get(&time_get_data);
 80004a6:	4851      	ldr	r0, [pc, #324]	@ (80005ec <main+0x17c>)
 80004a8:	f000 f9a8 	bl	80007fc <Time_Get>
  //   false, // true = ON, false = OFF 
  //    1     // Slot number of the alarm in the EEPROM module (0-9)
  // );  

  // Initially retrieve the alarm slot pointer data from the EEPROM module
  Alarm_Slot_Pointer_Get();
 80004ac:	f000 fbdc 	bl	8000c68 <Alarm_Slot_Pointer_Get>

  // Initially retrieve the alarm values from the EEPROM module and send to system memory
  for (int i = 0; i < alarm_slot_ptr; i++)
 80004b0:	2300      	movs	r3, #0
 80004b2:	60fb      	str	r3, [r7, #12]
 80004b4:	e00e      	b.n	80004d4 <main+0x64>
  {
    Alarm_Get(i, &alarm_get_data[i]);
 80004b6:	68fb      	ldr	r3, [r7, #12]
 80004b8:	b2d8      	uxtb	r0, r3
 80004ba:	68fa      	ldr	r2, [r7, #12]
 80004bc:	4613      	mov	r3, r2
 80004be:	005b      	lsls	r3, r3, #1
 80004c0:	4413      	add	r3, r2
 80004c2:	005b      	lsls	r3, r3, #1
 80004c4:	4a4a      	ldr	r2, [pc, #296]	@ (80005f0 <main+0x180>)
 80004c6:	4413      	add	r3, r2
 80004c8:	4619      	mov	r1, r3
 80004ca:	f000 fb35 	bl	8000b38 <Alarm_Get>
  for (int i = 0; i < alarm_slot_ptr; i++)
 80004ce:	68fb      	ldr	r3, [r7, #12]
 80004d0:	3301      	adds	r3, #1
 80004d2:	60fb      	str	r3, [r7, #12]
 80004d4:	4b47      	ldr	r3, [pc, #284]	@ (80005f4 <main+0x184>)
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	461a      	mov	r2, r3
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	4293      	cmp	r3, r2
 80004de:	dbea      	blt.n	80004b6 <main+0x46>

  // Set the initial system parameters to current time values and default settings for convenience
  system_param_data =
  (SYSTEM_PARAM_DATA)
  {
    time_get_data.minute,       // Minutes: 0-59
 80004e0:	4b42      	ldr	r3, [pc, #264]	@ (80005ec <main+0x17c>)
 80004e2:	785b      	ldrb	r3, [r3, #1]
 80004e4:	fa5f fc83 	uxtb.w	ip, r3
    time_get_data.hour,         // Hours: 0-23
 80004e8:	4b40      	ldr	r3, [pc, #256]	@ (80005ec <main+0x17c>)
 80004ea:	789b      	ldrb	r3, [r3, #2]
 80004ec:	b2de      	uxtb	r6, r3
    time_get_data.dayofweek,    // Day of the week: 1-7 (1 = Sunday, 2 = Monday, ..., 7 = Saturday)
 80004ee:	4b3f      	ldr	r3, [pc, #252]	@ (80005ec <main+0x17c>)
 80004f0:	78db      	ldrb	r3, [r3, #3]
 80004f2:	b2dd      	uxtb	r5, r3
    time_get_data.dateofmonth,  // Date of the month: 1-31
 80004f4:	4b3d      	ldr	r3, [pc, #244]	@ (80005ec <main+0x17c>)
 80004f6:	791b      	ldrb	r3, [r3, #4]
 80004f8:	b2dc      	uxtb	r4, r3
    time_get_data.month,        // Month: 1-12
 80004fa:	4b3c      	ldr	r3, [pc, #240]	@ (80005ec <main+0x17c>)
 80004fc:	795b      	ldrb	r3, [r3, #5]
 80004fe:	b2d8      	uxtb	r0, r3
    time_get_data.year,         // Year: 0-99 (0 = 2000, 1 = 2001, ..., 99 = 2099)
 8000500:	4b3a      	ldr	r3, [pc, #232]	@ (80005ec <main+0x17c>)
 8000502:	799b      	ldrb	r3, [r3, #6]
 8000504:	b2d9      	uxtb	r1, r3
    NOT_USED_MODE,              // Select: DAY_OF_WEEK_MODE, DATE_OF_MONTH_MODE, NOT_USED_MODE
    time_get_data.dayofweek,    // Day of the week: 1-7 (1 = Sunday, 2 = Monday, ..., 7 = Saturday), or Date of the month: 1-31
 8000506:	4b39      	ldr	r3, [pc, #228]	@ (80005ec <main+0x17c>)
 8000508:	78db      	ldrb	r3, [r3, #3]
 800050a:	b2da      	uxtb	r2, r3
  system_param_data =
 800050c:	4b3a      	ldr	r3, [pc, #232]	@ (80005f8 <main+0x188>)
 800050e:	f883 c000 	strb.w	ip, [r3]
 8000512:	4b39      	ldr	r3, [pc, #228]	@ (80005f8 <main+0x188>)
 8000514:	705e      	strb	r6, [r3, #1]
 8000516:	4b38      	ldr	r3, [pc, #224]	@ (80005f8 <main+0x188>)
 8000518:	709d      	strb	r5, [r3, #2]
 800051a:	4b37      	ldr	r3, [pc, #220]	@ (80005f8 <main+0x188>)
 800051c:	70dc      	strb	r4, [r3, #3]
 800051e:	4b36      	ldr	r3, [pc, #216]	@ (80005f8 <main+0x188>)
 8000520:	7118      	strb	r0, [r3, #4]
 8000522:	4b35      	ldr	r3, [pc, #212]	@ (80005f8 <main+0x188>)
 8000524:	7159      	strb	r1, [r3, #5]
 8000526:	4b34      	ldr	r3, [pc, #208]	@ (80005f8 <main+0x188>)
 8000528:	2102      	movs	r1, #2
 800052a:	7199      	strb	r1, [r3, #6]
 800052c:	4b32      	ldr	r3, [pc, #200]	@ (80005f8 <main+0x188>)
 800052e:	71da      	strb	r2, [r3, #7]
 8000530:	4b31      	ldr	r3, [pc, #196]	@ (80005f8 <main+0x188>)
 8000532:	2201      	movs	r2, #1
 8000534:	721a      	strb	r2, [r3, #8]
    true                        // true = ON, false = OFF
  };

  // Initialize the UART module to receive data
  //    HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size);
  HAL_UART_Receive_IT(&huart1, uart_rx_data, 2);
 8000536:	2202      	movs	r2, #2
 8000538:	4930      	ldr	r1, [pc, #192]	@ (80005fc <main+0x18c>)
 800053a:	4831      	ldr	r0, [pc, #196]	@ (8000600 <main+0x190>)
 800053c:	f004 fd52 	bl	8004fe4 <HAL_UART_Receive_IT>

  // Initialize the ADC module to monitor battery voltage
  //    HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc);
  HAL_ADC_Start_IT(&hadc1);
 8000540:	4830      	ldr	r0, [pc, #192]	@ (8000604 <main+0x194>)
 8000542:	f002 f89d 	bl	8002680 <HAL_ADC_Start_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    // Call the button debounce handler for each button
    Button_Handle();
 8000546:	f000 fca7 	bl	8000e98 <Button_Handle>
    // int a;
    // a = 1;
    // TIME_DATA time_get;

    // Check if the RTC Interrupt Flag is set (RTC Interrupt Flag) on PB4 (Activated every second)
    if (rtc_int_flag)
 800054a:	4b2f      	ldr	r3, [pc, #188]	@ (8000608 <main+0x198>)
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	b2db      	uxtb	r3, r3
 8000550:	2b00      	cmp	r3, #0
 8000552:	d03a      	beq.n	80005ca <main+0x15a>
    {
      // Retrieve the time values from the RTC module
      Time_Get(&time_get_data);
 8000554:	4825      	ldr	r0, [pc, #148]	@ (80005ec <main+0x17c>)
 8000556:	f000 f951 	bl	80007fc <Time_Get>
      
      // Check the alarms
      //   void Alarm_Check (volatile TIME_DATA *time_get_data)
      Alarm_Check(&time_get_data);
 800055a:	4824      	ldr	r0, [pc, #144]	@ (80005ec <main+0x17c>)
 800055c:	f000 fb9e 	bl	8000c9c <Alarm_Check>

      // Debugging: Toggle the debug RTC interrupt flag for debugging purposes
      debug_rtc_int = !debug_rtc_int;
 8000560:	4b2a      	ldr	r3, [pc, #168]	@ (800060c <main+0x19c>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	b2db      	uxtb	r3, r3
 8000566:	2b00      	cmp	r3, #0
 8000568:	bf14      	ite	ne
 800056a:	2301      	movne	r3, #1
 800056c:	2300      	moveq	r3, #0
 800056e:	b2db      	uxtb	r3, r3
 8000570:	f083 0301 	eor.w	r3, r3, #1
 8000574:	b2db      	uxtb	r3, r3
 8000576:	f003 0301 	and.w	r3, r3, #1
 800057a:	b2da      	uxtb	r2, r3
 800057c:	4b23      	ldr	r3, [pc, #140]	@ (800060c <main+0x19c>)
 800057e:	701a      	strb	r2, [r3, #0]

      // time_get = (TIME_DATA) time_get_data;    
      // default_mode(&a, &time_get.hour, &time_get.minute, &time_get.second);

      // Check if the ADC interrupt flag is set (ADC Valid Flag)
      if (adc_valid_flag)
 8000580:	4b23      	ldr	r3, [pc, #140]	@ (8000610 <main+0x1a0>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	b2db      	uxtb	r3, r3
 8000586:	2b00      	cmp	r3, #0
 8000588:	d01c      	beq.n	80005c4 <main+0x154>
      {
        // Re-enable the ADC interrupt to continue monitoring ADC values
        HAL_ADC_Start_IT(&hadc1);
 800058a:	481e      	ldr	r0, [pc, #120]	@ (8000604 <main+0x194>)
 800058c:	f002 f878 	bl	8002680 <HAL_ADC_Start_IT>

        // Delay for 100ms to allow the ADC to stabilize
        HAL_Delay(100);
 8000590:	2064      	movs	r0, #100	@ 0x64
 8000592:	f001 ff79 	bl	8002488 <HAL_Delay>

        // Track the battery percentage value at 5 different levels: 0, 25, 50, 75, 100
        if ((battery_percentage % 25) == 0)
 8000596:	4b1f      	ldr	r3, [pc, #124]	@ (8000614 <main+0x1a4>)
 8000598:	881a      	ldrh	r2, [r3, #0]
 800059a:	4b1f      	ldr	r3, [pc, #124]	@ (8000618 <main+0x1a8>)
 800059c:	fba3 1302 	umull	r1, r3, r3, r2
 80005a0:	08d9      	lsrs	r1, r3, #3
 80005a2:	460b      	mov	r3, r1
 80005a4:	009b      	lsls	r3, r3, #2
 80005a6:	440b      	add	r3, r1
 80005a8:	0099      	lsls	r1, r3, #2
 80005aa:	440b      	add	r3, r1
 80005ac:	1ad3      	subs	r3, r2, r3
 80005ae:	b29b      	uxth	r3, r3
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d104      	bne.n	80005be <main+0x14e>
        {
          // Update the battery percentage value to be displayed
          system_state.battery_display = battery_percentage;
 80005b4:	4b17      	ldr	r3, [pc, #92]	@ (8000614 <main+0x1a4>)
 80005b6:	881b      	ldrh	r3, [r3, #0]
 80005b8:	b2da      	uxtb	r2, r3
 80005ba:	4b18      	ldr	r3, [pc, #96]	@ (800061c <main+0x1ac>)
 80005bc:	711a      	strb	r2, [r3, #4]
        }

        // Reset the ADC interrupt flag
        adc_valid_flag = false;
 80005be:	4b14      	ldr	r3, [pc, #80]	@ (8000610 <main+0x1a0>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	701a      	strb	r2, [r3, #0]
      }

      // Reset the RTC Interrupt Flag
      rtc_int_flag = false;
 80005c4:	4b10      	ldr	r3, [pc, #64]	@ (8000608 <main+0x198>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	701a      	strb	r2, [r3, #0]
    }

    // Check if the UART interrupt flag is set (UART Receive Flag)
    if (uart_rx_flag)
 80005ca:	4b15      	ldr	r3, [pc, #84]	@ (8000620 <main+0x1b0>)
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d0b8      	beq.n	8000546 <main+0xd6>
	  {
      // Re-enable the UART interrupt to continue receiving data
      HAL_UART_Receive_IT(&huart1,uart_rx_data,2); 
 80005d4:	2202      	movs	r2, #2
 80005d6:	4909      	ldr	r1, [pc, #36]	@ (80005fc <main+0x18c>)
 80005d8:	4809      	ldr	r0, [pc, #36]	@ (8000600 <main+0x190>)
 80005da:	f004 fd03 	bl	8004fe4 <HAL_UART_Receive_IT>
      
      // Delay for 100ms to allow the UART to stabilize
      HAL_Delay(100);
 80005de:	2064      	movs	r0, #100	@ 0x64
 80005e0:	f001 ff52 	bl	8002488 <HAL_Delay>

      // Reset the UART interrupt flag
      uart_rx_flag = false;
 80005e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000620 <main+0x1b0>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	701a      	strb	r2, [r3, #0]
    Button_Handle();
 80005ea:	e7ac      	b.n	8000546 <main+0xd6>
 80005ec:	20000110 	.word	0x20000110
 80005f0:	20000118 	.word	0x20000118
 80005f4:	20000154 	.word	0x20000154
 80005f8:	20000104 	.word	0x20000104
 80005fc:	20000164 	.word	0x20000164
 8000600:	200001c0 	.word	0x200001c0
 8000604:	20000078 	.word	0x20000078
 8000608:	20000155 	.word	0x20000155
 800060c:	20000157 	.word	0x20000157
 8000610:	2000015d 	.word	0x2000015d
 8000614:	20000160 	.word	0x20000160
 8000618:	51eb851f 	.word	0x51eb851f
 800061c:	200000fc 	.word	0x200000fc
 8000620:	20000162 	.word	0x20000162

08000624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b094      	sub	sp, #80	@ 0x50
 8000628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800062e:	2228      	movs	r2, #40	@ 0x28
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f005 fa0e 	bl	8005a54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000638:	f107 0314 	add.w	r3, r7, #20
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	605a      	str	r2, [r3, #4]
 8000650:	609a      	str	r2, [r3, #8]
 8000652:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000654:	2301      	movs	r3, #1
 8000656:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000658:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800065c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800065e:	2300      	movs	r3, #0
 8000660:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000662:	2301      	movs	r3, #1
 8000664:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000666:	2302      	movs	r3, #2
 8000668:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800066a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800066e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000670:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000674:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000676:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800067a:	4618      	mov	r0, r3
 800067c:	f003 ff18 	bl	80044b0 <HAL_RCC_OscConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000686:	f001 fce7 	bl	8002058 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068a:	230f      	movs	r3, #15
 800068c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068e:	2302      	movs	r3, #2
 8000690:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000696:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800069a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006a0:	f107 0314 	add.w	r3, r7, #20
 80006a4:	2102      	movs	r1, #2
 80006a6:	4618      	mov	r0, r3
 80006a8:	f004 f984 	bl	80049b4 <HAL_RCC_ClockConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80006b2:	f001 fcd1 	bl	8002058 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80006b6:	2302      	movs	r3, #2
 80006b8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80006ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80006be:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	4618      	mov	r0, r3
 80006c4:	f004 fb04 	bl	8004cd0 <HAL_RCCEx_PeriphCLKConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006ce:	f001 fcc3 	bl	8002058 <Error_Handler>
  }
}
 80006d2:	bf00      	nop
 80006d4:	3750      	adds	r7, #80	@ 0x50
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
	...

080006dc <Dec_To_BCD>:
  * @brief  Convert a normal decimal number to Binary Coded Decimal (BCD).
  * @param  val: Decimal number to be converted.
  * @retval uint8_t: BCD representation of the input decimal number.
  */
uint8_t Dec_To_BCD(int val)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  return (uint8_t)( (val/10*16) + (val%10) );
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	4a0e      	ldr	r2, [pc, #56]	@ (8000720 <Dec_To_BCD+0x44>)
 80006e8:	fb82 1203 	smull	r1, r2, r2, r3
 80006ec:	1092      	asrs	r2, r2, #2
 80006ee:	17db      	asrs	r3, r3, #31
 80006f0:	1ad3      	subs	r3, r2, r3
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	011b      	lsls	r3, r3, #4
 80006f6:	b2d8      	uxtb	r0, r3
 80006f8:	687a      	ldr	r2, [r7, #4]
 80006fa:	4b09      	ldr	r3, [pc, #36]	@ (8000720 <Dec_To_BCD+0x44>)
 80006fc:	fb83 1302 	smull	r1, r3, r3, r2
 8000700:	1099      	asrs	r1, r3, #2
 8000702:	17d3      	asrs	r3, r2, #31
 8000704:	1ac9      	subs	r1, r1, r3
 8000706:	460b      	mov	r3, r1
 8000708:	009b      	lsls	r3, r3, #2
 800070a:	440b      	add	r3, r1
 800070c:	005b      	lsls	r3, r3, #1
 800070e:	1ad1      	subs	r1, r2, r3
 8000710:	b2cb      	uxtb	r3, r1
 8000712:	4403      	add	r3, r0
 8000714:	b2db      	uxtb	r3, r3
}
 8000716:	4618      	mov	r0, r3
 8000718:	370c      	adds	r7, #12
 800071a:	46bd      	mov	sp, r7
 800071c:	bc80      	pop	{r7}
 800071e:	4770      	bx	lr
 8000720:	66666667 	.word	0x66666667

08000724 <BCD_To_Dec>:
  * @brief  Convert a Binary Coded Decimal (BCD) value to a normal decimal number.
  * @param  val: BCD value to be converted.
  * @retval int: Decimal representation of the input BCD value.
  */
int BCD_To_Dec(uint8_t val)
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
  return (int)( (val/16*10) + (val%16) );
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	091b      	lsrs	r3, r3, #4
 8000732:	b2db      	uxtb	r3, r3
 8000734:	461a      	mov	r2, r3
 8000736:	4613      	mov	r3, r2
 8000738:	009b      	lsls	r3, r3, #2
 800073a:	4413      	add	r3, r2
 800073c:	005b      	lsls	r3, r3, #1
 800073e:	461a      	mov	r2, r3
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	f003 030f 	and.w	r3, r3, #15
 8000746:	4413      	add	r3, r2
}
 8000748:	4618      	mov	r0, r3
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	bc80      	pop	{r7}
 8000750:	4770      	bx	lr
	...

08000754 <Time_Set>:
  * @param  month: Month: 1-12
  * @param  year: Year: 0-99 (0 = 2000, 1 = 2001, ..., 99 = 2099)
  * @retval None
*/
void Time_Set (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom, uint8_t month, uint8_t year)
{
 8000754:	b590      	push	{r4, r7, lr}
 8000756:	b089      	sub	sp, #36	@ 0x24
 8000758:	af04      	add	r7, sp, #16
 800075a:	4604      	mov	r4, r0
 800075c:	4608      	mov	r0, r1
 800075e:	4611      	mov	r1, r2
 8000760:	461a      	mov	r2, r3
 8000762:	4623      	mov	r3, r4
 8000764:	71fb      	strb	r3, [r7, #7]
 8000766:	4603      	mov	r3, r0
 8000768:	71bb      	strb	r3, [r7, #6]
 800076a:	460b      	mov	r3, r1
 800076c:	717b      	strb	r3, [r7, #5]
 800076e:	4613      	mov	r3, r2
 8000770:	713b      	strb	r3, [r7, #4]
	// A blank array (7 slots) to contain the time values
  uint8_t setTime[7];

  // Store the time values (converted in to BCD code) into the blank array
	setTime[0] = Dec_To_BCD(sec);
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	4618      	mov	r0, r3
 8000776:	f7ff ffb1 	bl	80006dc <Dec_To_BCD>
 800077a:	4603      	mov	r3, r0
 800077c:	723b      	strb	r3, [r7, #8]
	setTime[1] = Dec_To_BCD(min);
 800077e:	79bb      	ldrb	r3, [r7, #6]
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff ffab 	bl	80006dc <Dec_To_BCD>
 8000786:	4603      	mov	r3, r0
 8000788:	727b      	strb	r3, [r7, #9]
	setTime[2] = Dec_To_BCD(hour);
 800078a:	797b      	ldrb	r3, [r7, #5]
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff ffa5 	bl	80006dc <Dec_To_BCD>
 8000792:	4603      	mov	r3, r0
 8000794:	72bb      	strb	r3, [r7, #10]
	setTime[3] = Dec_To_BCD(dow);
 8000796:	793b      	ldrb	r3, [r7, #4]
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff ff9f 	bl	80006dc <Dec_To_BCD>
 800079e:	4603      	mov	r3, r0
 80007a0:	72fb      	strb	r3, [r7, #11]
	setTime[4] = Dec_To_BCD(dom);
 80007a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80007a6:	4618      	mov	r0, r3
 80007a8:	f7ff ff98 	bl	80006dc <Dec_To_BCD>
 80007ac:	4603      	mov	r3, r0
 80007ae:	733b      	strb	r3, [r7, #12]
	setTime[5] = Dec_To_BCD(month);
 80007b0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff ff91 	bl	80006dc <Dec_To_BCD>
 80007ba:	4603      	mov	r3, r0
 80007bc:	737b      	strb	r3, [r7, #13]
	setTime[6] = Dec_To_BCD(year);
 80007be:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff ff8a 	bl	80006dc <Dec_To_BCD>
 80007c8:	4603      	mov	r3, r0
 80007ca:	73bb      	strb	r3, [r7, #14]

  // Send the array containing the time values to the RTC module through I2C interface at address 00h - 06h (size of value: 7 bytes)
  HAL_I2C_Mem_Write(DS3231_I2C, DS3231_ADDR, 0x00, 1, setTime, sizeof(setTime), 1000);
 80007cc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007d0:	9302      	str	r3, [sp, #8]
 80007d2:	2307      	movs	r3, #7
 80007d4:	9301      	str	r3, [sp, #4]
 80007d6:	f107 0308 	add.w	r3, r7, #8
 80007da:	9300      	str	r3, [sp, #0]
 80007dc:	2301      	movs	r3, #1
 80007de:	2200      	movs	r2, #0
 80007e0:	21d0      	movs	r1, #208	@ 0xd0
 80007e2:	4805      	ldr	r0, [pc, #20]	@ (80007f8 <Time_Set+0xa4>)
 80007e4:	f002 ff42 	bl	800366c <HAL_I2C_Mem_Write>

  // Delay for 1ms to allow the RTC module to process the data
  HAL_Delay(1);
 80007e8:	2001      	movs	r0, #1
 80007ea:	f001 fe4d 	bl	8002488 <HAL_Delay>
}
 80007ee:	bf00      	nop
 80007f0:	3714      	adds	r7, #20
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd90      	pop	{r4, r7, pc}
 80007f6:	bf00      	nop
 80007f8:	200000a8 	.word	0x200000a8

080007fc <Time_Get>:
  * @brief  Get time from the RTC module through I2C interface.
  * @param  time_get_data: Pointer to a TIME structure to store the retrieved time values.
  * @retval None
*/
void Time_Get (volatile TIME_DATA *time_get_data)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b088      	sub	sp, #32
 8000800:	af04      	add	r7, sp, #16
 8000802:	6078      	str	r0, [r7, #4]
	// A blank array (7 slots) to contain the time values received from the RTC module
  uint8_t getTime[7];

  // Receive the time values from the RTC module through I2C interface, then store them into the blank array (size of value: 7 bytes)
  HAL_I2C_Mem_Read(DS3231_I2C, DS3231_ADDR, 0x00, 1, getTime, sizeof(getTime), 1000);
 8000804:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000808:	9302      	str	r3, [sp, #8]
 800080a:	2307      	movs	r3, #7
 800080c:	9301      	str	r3, [sp, #4]
 800080e:	f107 0308 	add.w	r3, r7, #8
 8000812:	9300      	str	r3, [sp, #0]
 8000814:	2301      	movs	r3, #1
 8000816:	2200      	movs	r2, #0
 8000818:	21d0      	movs	r1, #208	@ 0xd0
 800081a:	4821      	ldr	r0, [pc, #132]	@ (80008a0 <Time_Get+0xa4>)
 800081c:	f003 f820 	bl	8003860 <HAL_I2C_Mem_Read>

  // Delay for 1ms to allow the RTC module to process the data
  HAL_Delay(1);
 8000820:	2001      	movs	r0, #1
 8000822:	f001 fe31 	bl	8002488 <HAL_Delay>

  // Store the time values (converted from BCD code to decimal) into the time variable
	time_get_data->second       = BCD_To_Dec(getTime[0]);
 8000826:	7a3b      	ldrb	r3, [r7, #8]
 8000828:	4618      	mov	r0, r3
 800082a:	f7ff ff7b 	bl	8000724 <BCD_To_Dec>
 800082e:	4603      	mov	r3, r0
 8000830:	b2da      	uxtb	r2, r3
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	701a      	strb	r2, [r3, #0]
	time_get_data->minute       = BCD_To_Dec(getTime[1]);
 8000836:	7a7b      	ldrb	r3, [r7, #9]
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff ff73 	bl	8000724 <BCD_To_Dec>
 800083e:	4603      	mov	r3, r0
 8000840:	b2da      	uxtb	r2, r3
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	705a      	strb	r2, [r3, #1]
	time_get_data->hour         = BCD_To_Dec(getTime[2]);
 8000846:	7abb      	ldrb	r3, [r7, #10]
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff ff6b 	bl	8000724 <BCD_To_Dec>
 800084e:	4603      	mov	r3, r0
 8000850:	b2da      	uxtb	r2, r3
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	709a      	strb	r2, [r3, #2]
	time_get_data->dayofweek    = BCD_To_Dec(getTime[3]);
 8000856:	7afb      	ldrb	r3, [r7, #11]
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff ff63 	bl	8000724 <BCD_To_Dec>
 800085e:	4603      	mov	r3, r0
 8000860:	b2da      	uxtb	r2, r3
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	70da      	strb	r2, [r3, #3]
	time_get_data->dateofmonth  = BCD_To_Dec(getTime[4]);
 8000866:	7b3b      	ldrb	r3, [r7, #12]
 8000868:	4618      	mov	r0, r3
 800086a:	f7ff ff5b 	bl	8000724 <BCD_To_Dec>
 800086e:	4603      	mov	r3, r0
 8000870:	b2da      	uxtb	r2, r3
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	711a      	strb	r2, [r3, #4]
	time_get_data->month        = BCD_To_Dec(getTime[5]);
 8000876:	7b7b      	ldrb	r3, [r7, #13]
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff ff53 	bl	8000724 <BCD_To_Dec>
 800087e:	4603      	mov	r3, r0
 8000880:	b2da      	uxtb	r2, r3
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	715a      	strb	r2, [r3, #5]
	time_get_data->year         = BCD_To_Dec(getTime[6]);
 8000886:	7bbb      	ldrb	r3, [r7, #14]
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff ff4b 	bl	8000724 <BCD_To_Dec>
 800088e:	4603      	mov	r3, r0
 8000890:	b2da      	uxtb	r2, r3
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	719a      	strb	r2, [r3, #6]
}
 8000896:	bf00      	nop
 8000898:	3710      	adds	r7, #16
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	200000a8 	.word	0x200000a8

080008a4 <Time_Ctrl>:
  * @param  dow_dom: Day of the week or date of the month (1-7 or 1-31).
  * @param  dy_dt: Day of week or date of month (1 = day of week, 0 = date of month, 0 = not used).
  * @retval None
*/
void Time_Ctrl (uint8_t mode, uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow_dom, bool dy_dt)
{
 80008a4:	b590      	push	{r4, r7, lr}
 80008a6:	b08b      	sub	sp, #44	@ 0x2c
 80008a8:	af04      	add	r7, sp, #16
 80008aa:	4604      	mov	r4, r0
 80008ac:	4608      	mov	r0, r1
 80008ae:	4611      	mov	r1, r2
 80008b0:	461a      	mov	r2, r3
 80008b2:	4623      	mov	r3, r4
 80008b4:	71fb      	strb	r3, [r7, #7]
 80008b6:	4603      	mov	r3, r0
 80008b8:	71bb      	strb	r3, [r7, #6]
 80008ba:	460b      	mov	r3, r1
 80008bc:	717b      	strb	r3, [r7, #5]
 80008be:	4613      	mov	r3, r2
 80008c0:	713b      	strb	r3, [r7, #4]
  // A blank array (4 slots) to contain the RTC alarm settings
  uint8_t ctrlTime[4];

  // A mask bit to set the Control register in the RTC module
  //    Address 0Eh: A1IE = 1
  uint8_t ctrlAlarm = 1; 
 80008c2:	2301      	movs	r3, #1
 80008c4:	73fb      	strb	r3, [r7, #15]

  // A mask bit to set the alarm modes (Bit 7) in the RTC module
  uint8_t maskBit = 128;
 80008c6:	2380      	movs	r3, #128	@ 0x80
 80008c8:	75fb      	strb	r3, [r7, #23]

  // A mask bit for selection of [day of week] or [date of month] (Bit 6) in the RTC module
  //    If the input [day of week]/ [date of month] selection is 1, the mask bit will be 64.
  uint8_t dyDt = (dy_dt == true) ? 64 : 0;
 80008ca:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <Time_Ctrl+0x32>
 80008d2:	2340      	movs	r3, #64	@ 0x40
 80008d4:	e000      	b.n	80008d8 <Time_Ctrl+0x34>
 80008d6:	2300      	movs	r3, #0
 80008d8:	75bb      	strb	r3, [r7, #22]

  // Store the RTC alarm time settings (converted into BCD code) into the blank array
  ctrlTime[0] = Dec_To_BCD(sec);
 80008da:	79bb      	ldrb	r3, [r7, #6]
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff fefd 	bl	80006dc <Dec_To_BCD>
 80008e2:	4603      	mov	r3, r0
 80008e4:	743b      	strb	r3, [r7, #16]
	ctrlTime[1] = Dec_To_BCD(min);
 80008e6:	797b      	ldrb	r3, [r7, #5]
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff fef7 	bl	80006dc <Dec_To_BCD>
 80008ee:	4603      	mov	r3, r0
 80008f0:	747b      	strb	r3, [r7, #17]
	ctrlTime[2] = Dec_To_BCD(hour);
 80008f2:	793b      	ldrb	r3, [r7, #4]
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff fef1 	bl	80006dc <Dec_To_BCD>
 80008fa:	4603      	mov	r3, r0
 80008fc:	74bb      	strb	r3, [r7, #18]
	ctrlTime[3] = Dec_To_BCD(dow_dom);
 80008fe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000902:	4618      	mov	r0, r3
 8000904:	f7ff feea 	bl	80006dc <Dec_To_BCD>
 8000908:	4603      	mov	r3, r0
 800090a:	74fb      	strb	r3, [r7, #19]
  //      1    : Alarm when seconds match
  //      2    : Alarm when minutes and seconds match
  //      3    : Alarm when hours, minutes, and seconds match
  //      4    : Alarm when date, hours, minutes, and seconds match
  //      5    : Alarm when day, hours, minutes, and seconds match
  switch (mode)
 800090c:	79fb      	ldrb	r3, [r7, #7]
 800090e:	2b05      	cmp	r3, #5
 8000910:	d865      	bhi.n	80009de <Time_Ctrl+0x13a>
 8000912:	a201      	add	r2, pc, #4	@ (adr r2, 8000918 <Time_Ctrl+0x74>)
 8000914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000918:	08000931 	.word	0x08000931
 800091c:	0800095b 	.word	0x0800095b
 8000920:	0800097f 	.word	0x0800097f
 8000924:	0800099d 	.word	0x0800099d
 8000928:	080009b5 	.word	0x080009b5
 800092c:	080009c7 	.word	0x080009c7
  {
    case 0:
      // Alarm mask bit: A1M4:A1M1 = b1111, DY/DT = X
      ctrlTime[0] += maskBit;
 8000930:	7c3a      	ldrb	r2, [r7, #16]
 8000932:	7dfb      	ldrb	r3, [r7, #23]
 8000934:	4413      	add	r3, r2
 8000936:	b2db      	uxtb	r3, r3
 8000938:	743b      	strb	r3, [r7, #16]
      ctrlTime[1] += maskBit;
 800093a:	7c7a      	ldrb	r2, [r7, #17]
 800093c:	7dfb      	ldrb	r3, [r7, #23]
 800093e:	4413      	add	r3, r2
 8000940:	b2db      	uxtb	r3, r3
 8000942:	747b      	strb	r3, [r7, #17]
      ctrlTime[2] += maskBit;
 8000944:	7cba      	ldrb	r2, [r7, #18]
 8000946:	7dfb      	ldrb	r3, [r7, #23]
 8000948:	4413      	add	r3, r2
 800094a:	b2db      	uxtb	r3, r3
 800094c:	74bb      	strb	r3, [r7, #18]
      ctrlTime[3] += maskBit;
 800094e:	7cfa      	ldrb	r2, [r7, #19]
 8000950:	7dfb      	ldrb	r3, [r7, #23]
 8000952:	4413      	add	r3, r2
 8000954:	b2db      	uxtb	r3, r3
 8000956:	74fb      	strb	r3, [r7, #19]
      break;
 8000958:	e04a      	b.n	80009f0 <Time_Ctrl+0x14c>
    case 1:
      // Alarm mask bit: A1M4:A1M1 = b1110, DY/DT = X
      ctrlTime[0] += 0;
 800095a:	7c3b      	ldrb	r3, [r7, #16]
 800095c:	743b      	strb	r3, [r7, #16]
      ctrlTime[1] += maskBit;
 800095e:	7c7a      	ldrb	r2, [r7, #17]
 8000960:	7dfb      	ldrb	r3, [r7, #23]
 8000962:	4413      	add	r3, r2
 8000964:	b2db      	uxtb	r3, r3
 8000966:	747b      	strb	r3, [r7, #17]
      ctrlTime[2] += maskBit;
 8000968:	7cba      	ldrb	r2, [r7, #18]
 800096a:	7dfb      	ldrb	r3, [r7, #23]
 800096c:	4413      	add	r3, r2
 800096e:	b2db      	uxtb	r3, r3
 8000970:	74bb      	strb	r3, [r7, #18]
      ctrlTime[3] += maskBit;
 8000972:	7cfa      	ldrb	r2, [r7, #19]
 8000974:	7dfb      	ldrb	r3, [r7, #23]
 8000976:	4413      	add	r3, r2
 8000978:	b2db      	uxtb	r3, r3
 800097a:	74fb      	strb	r3, [r7, #19]
      break;
 800097c:	e038      	b.n	80009f0 <Time_Ctrl+0x14c>
    case 2:
      // Alarm mask bit: A1M4:A1M1 = b1100, DY/DT = X
      ctrlTime[0] += 0;
 800097e:	7c3b      	ldrb	r3, [r7, #16]
 8000980:	743b      	strb	r3, [r7, #16]
      ctrlTime[1] += 0;
 8000982:	7c7b      	ldrb	r3, [r7, #17]
 8000984:	747b      	strb	r3, [r7, #17]
      ctrlTime[2] += maskBit;
 8000986:	7cba      	ldrb	r2, [r7, #18]
 8000988:	7dfb      	ldrb	r3, [r7, #23]
 800098a:	4413      	add	r3, r2
 800098c:	b2db      	uxtb	r3, r3
 800098e:	74bb      	strb	r3, [r7, #18]
      ctrlTime[3] += maskBit;
 8000990:	7cfa      	ldrb	r2, [r7, #19]
 8000992:	7dfb      	ldrb	r3, [r7, #23]
 8000994:	4413      	add	r3, r2
 8000996:	b2db      	uxtb	r3, r3
 8000998:	74fb      	strb	r3, [r7, #19]
      break;
 800099a:	e029      	b.n	80009f0 <Time_Ctrl+0x14c>
    case 3:
      // Alarm mask bit: A1M4:A1M1 = b1000, DY/DT = X
      ctrlTime[0] += 0;
 800099c:	7c3b      	ldrb	r3, [r7, #16]
 800099e:	743b      	strb	r3, [r7, #16]
      ctrlTime[1] += 0;
 80009a0:	7c7b      	ldrb	r3, [r7, #17]
 80009a2:	747b      	strb	r3, [r7, #17]
      ctrlTime[2] += 0;
 80009a4:	7cbb      	ldrb	r3, [r7, #18]
 80009a6:	74bb      	strb	r3, [r7, #18]
      ctrlTime[3] += maskBit;
 80009a8:	7cfa      	ldrb	r2, [r7, #19]
 80009aa:	7dfb      	ldrb	r3, [r7, #23]
 80009ac:	4413      	add	r3, r2
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	74fb      	strb	r3, [r7, #19]
      break;
 80009b2:	e01d      	b.n	80009f0 <Time_Ctrl+0x14c>
    case 4:
      // Alarm mask bit: A1M4:A1M1 = b0000, DY/DT = 0
      ctrlTime[0] += 0;
 80009b4:	7c3b      	ldrb	r3, [r7, #16]
 80009b6:	743b      	strb	r3, [r7, #16]
      ctrlTime[1] += 0;
 80009b8:	7c7b      	ldrb	r3, [r7, #17]
 80009ba:	747b      	strb	r3, [r7, #17]
      ctrlTime[2] += 0;
 80009bc:	7cbb      	ldrb	r3, [r7, #18]
 80009be:	74bb      	strb	r3, [r7, #18]
      ctrlTime[3] += 0;
 80009c0:	7cfb      	ldrb	r3, [r7, #19]
 80009c2:	74fb      	strb	r3, [r7, #19]
      break;
 80009c4:	e014      	b.n	80009f0 <Time_Ctrl+0x14c>
    case 5:
      // Alarm mask bit: A1M4:A1M1 = b0000, DY/DT = 1
      ctrlTime[0] += 0;
 80009c6:	7c3b      	ldrb	r3, [r7, #16]
 80009c8:	743b      	strb	r3, [r7, #16]
      ctrlTime[1] += 0;
 80009ca:	7c7b      	ldrb	r3, [r7, #17]
 80009cc:	747b      	strb	r3, [r7, #17]
      ctrlTime[2] += 0;
 80009ce:	7cbb      	ldrb	r3, [r7, #18]
 80009d0:	74bb      	strb	r3, [r7, #18]
      ctrlTime[3] += dyDt;
 80009d2:	7cfa      	ldrb	r2, [r7, #19]
 80009d4:	7dbb      	ldrb	r3, [r7, #22]
 80009d6:	4413      	add	r3, r2
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	74fb      	strb	r3, [r7, #19]
      break;
 80009dc:	e008      	b.n	80009f0 <Time_Ctrl+0x14c>
    default:
      // Alarm mask bit: A1M4:A1M1 = b0000, DY/DT = 0
      ctrlTime[0] += 0;
 80009de:	7c3b      	ldrb	r3, [r7, #16]
 80009e0:	743b      	strb	r3, [r7, #16]
      ctrlTime[1] += 0;
 80009e2:	7c7b      	ldrb	r3, [r7, #17]
 80009e4:	747b      	strb	r3, [r7, #17]
      ctrlTime[2] += 0;
 80009e6:	7cbb      	ldrb	r3, [r7, #18]
 80009e8:	74bb      	strb	r3, [r7, #18]
      ctrlTime[3] += 0;
 80009ea:	7cfb      	ldrb	r3, [r7, #19]
 80009ec:	74fb      	strb	r3, [r7, #19]
      break;
 80009ee:	bf00      	nop
  }

  // Send the array containing the RTC alarm mode setting to the RTC module through I2C interface at address 07h - 0Ah (size of value: 4 bytes)
  HAL_I2C_Mem_Write(DS3231_I2C, DS3231_ADDR, 0x07, 1, ctrlTime, sizeof(ctrlTime), 1000);
 80009f0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009f4:	9302      	str	r3, [sp, #8]
 80009f6:	2304      	movs	r3, #4
 80009f8:	9301      	str	r3, [sp, #4]
 80009fa:	f107 0310 	add.w	r3, r7, #16
 80009fe:	9300      	str	r3, [sp, #0]
 8000a00:	2301      	movs	r3, #1
 8000a02:	2207      	movs	r2, #7
 8000a04:	21d0      	movs	r1, #208	@ 0xd0
 8000a06:	480d      	ldr	r0, [pc, #52]	@ (8000a3c <Time_Ctrl+0x198>)
 8000a08:	f002 fe30 	bl	800366c <HAL_I2C_Mem_Write>

  // Delay for 1ms to allow the RTC module to process the data
  HAL_Delay(1);
 8000a0c:	2001      	movs	r0, #1
 8000a0e:	f001 fd3b 	bl	8002488 <HAL_Delay>

  // Send the alarm control mask bits to the RTC module through I2C interface at address 0Eh (size of value: 1 byte)
  HAL_I2C_Mem_Write(DS3231_I2C, DS3231_ADDR, 0x0E, 1, &ctrlAlarm, sizeof(ctrlAlarm), 1000);
 8000a12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a16:	9302      	str	r3, [sp, #8]
 8000a18:	2301      	movs	r3, #1
 8000a1a:	9301      	str	r3, [sp, #4]
 8000a1c:	f107 030f 	add.w	r3, r7, #15
 8000a20:	9300      	str	r3, [sp, #0]
 8000a22:	2301      	movs	r3, #1
 8000a24:	220e      	movs	r2, #14
 8000a26:	21d0      	movs	r1, #208	@ 0xd0
 8000a28:	4804      	ldr	r0, [pc, #16]	@ (8000a3c <Time_Ctrl+0x198>)
 8000a2a:	f002 fe1f 	bl	800366c <HAL_I2C_Mem_Write>

  // Delay for 1ms to allow the RTC module to process the data
  HAL_Delay(1);
 8000a2e:	2001      	movs	r0, #1
 8000a30:	f001 fd2a 	bl	8002488 <HAL_Delay>
}
 8000a34:	bf00      	nop
 8000a36:	371c      	adds	r7, #28
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd90      	pop	{r4, r7, pc}
 8000a3c:	200000a8 	.word	0x200000a8

08000a40 <Time_Init>:
  * @param  month: Month: 1-12
  * @param  year: Year: 0-99 (0 = 2000, 1 = 2001, ..., 99 = 2099)
  * @retval None
*/
void Time_Init (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom, uint8_t month, uint8_t year)
{
 8000a40:	b590      	push	{r4, r7, lr}
 8000a42:	b087      	sub	sp, #28
 8000a44:	af04      	add	r7, sp, #16
 8000a46:	4604      	mov	r4, r0
 8000a48:	4608      	mov	r0, r1
 8000a4a:	4611      	mov	r1, r2
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	4623      	mov	r3, r4
 8000a50:	71fb      	strb	r3, [r7, #7]
 8000a52:	4603      	mov	r3, r0
 8000a54:	71bb      	strb	r3, [r7, #6]
 8000a56:	460b      	mov	r3, r1
 8000a58:	717b      	strb	r3, [r7, #5]
 8000a5a:	4613      	mov	r3, r2
 8000a5c:	713b      	strb	r3, [r7, #4]
  // This function is intended for initial setup of the RTC module after a reset.
  // It should not be called repeatedly unless reinitialization is required.
  //    Time_Set (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom, uint8_t month, uint8_t year)
  Time_Set (sec, min, hour, dow, dom, month, year);
 8000a5e:	793c      	ldrb	r4, [r7, #4]
 8000a60:	797a      	ldrb	r2, [r7, #5]
 8000a62:	79b9      	ldrb	r1, [r7, #6]
 8000a64:	79f8      	ldrb	r0, [r7, #7]
 8000a66:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000a6a:	9302      	str	r3, [sp, #8]
 8000a6c:	7f3b      	ldrb	r3, [r7, #28]
 8000a6e:	9301      	str	r3, [sp, #4]
 8000a70:	7e3b      	ldrb	r3, [r7, #24]
 8000a72:	9300      	str	r3, [sp, #0]
 8000a74:	4623      	mov	r3, r4
 8000a76:	f7ff fe6d 	bl	8000754 <Time_Set>
  //        2    : Alarm when minutes and seconds match
  //        3    : Alarm when hours, minutes, and seconds match
  //        4    : Alarm when date, hours, minutes, and seconds match
  //        5    : Alarm when day, hours, minutes, and seconds match
  //      For mode 0, the remaining input are don't-care values
  Time_Ctrl 
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	9301      	str	r3, [sp, #4]
 8000a7e:	2300      	movs	r3, #0
 8000a80:	9300      	str	r3, [sp, #0]
 8000a82:	2300      	movs	r3, #0
 8000a84:	2200      	movs	r2, #0
 8000a86:	2100      	movs	r1, #0
 8000a88:	2000      	movs	r0, #0
 8000a8a:	f7ff ff0b 	bl	80008a4 <Time_Ctrl>
     0, // Minutes: 0-59
     0, // Hours: 0-23
     0, // Day of the week: 1-7 (1 = Sunday, 2 = Monday, ..., 7 = Saturday), or Date of the month: 1-31
     0  // Select: 1 = day of week, 0 = date of month
  );   
}
 8000a8e:	bf00      	nop
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd90      	pop	{r4, r7, pc}
	...

08000a98 <Alarm_Set>:
  * @param  on_off: On/ Off state of the alarm (1 = ON, 0 = OFF)
  * @param  slot: Slot number of the alarm in the EEPROM module (0-9)
  * @retval None
*/
void Alarm_Set (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow_dom, ALARM_DY_DT_MODE dy_dt, bool on_off, uint8_t slot)
{
 8000a98:	b590      	push	{r4, r7, lr}
 8000a9a:	b089      	sub	sp, #36	@ 0x24
 8000a9c:	af04      	add	r7, sp, #16
 8000a9e:	4604      	mov	r4, r0
 8000aa0:	4608      	mov	r0, r1
 8000aa2:	4611      	mov	r1, r2
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	4623      	mov	r3, r4
 8000aa8:	71fb      	strb	r3, [r7, #7]
 8000aaa:	4603      	mov	r3, r0
 8000aac:	71bb      	strb	r3, [r7, #6]
 8000aae:	460b      	mov	r3, r1
 8000ab0:	717b      	strb	r3, [r7, #5]
 8000ab2:	4613      	mov	r3, r2
 8000ab4:	713b      	strb	r3, [r7, #4]
  // Encode the ON/OFF state of the alarm into the alarm package
  // By masking the 7th bit of the second register
  if (on_off)
 8000ab6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d002      	beq.n	8000ac4 <Alarm_Set+0x2c>
  {
    sec += (1 << 7);
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	3b80      	subs	r3, #128	@ 0x80
 8000ac2:	71fb      	strb	r3, [r7, #7]
  }

  // Encode the day of week or date of month mode into the alarm package
  // By masking the 7th and 6th bits of the dow_dom variable
  switch (dy_dt)
 8000ac4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ac8:	2b02      	cmp	r3, #2
 8000aca:	d00d      	beq.n	8000ae8 <Alarm_Set+0x50>
 8000acc:	2b02      	cmp	r3, #2
 8000ace:	dc0d      	bgt.n	8000aec <Alarm_Set+0x54>
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d005      	beq.n	8000ae0 <Alarm_Set+0x48>
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d109      	bne.n	8000aec <Alarm_Set+0x54>
  {
    // Date of the month
    case DATE_OF_MONTH_MODE:
      // Encoding: [Bit 7] = 1, [Bit 6] = 0
      dow_dom += (1 << 7);
 8000ad8:	793b      	ldrb	r3, [r7, #4]
 8000ada:	3b80      	subs	r3, #128	@ 0x80
 8000adc:	713b      	strb	r3, [r7, #4]
      break;
 8000ade:	e006      	b.n	8000aee <Alarm_Set+0x56>

    // Day of the week
    case DAY_OF_WEEK_MODE:
      // Ending: [Bit 7] = 1, [Bit 6] = 1
      dow_dom += ((1 << 7) | (1 << 6));
 8000ae0:	793b      	ldrb	r3, [r7, #4]
 8000ae2:	3b40      	subs	r3, #64	@ 0x40
 8000ae4:	713b      	strb	r3, [r7, #4]
      break;
 8000ae6:	e002      	b.n	8000aee <Alarm_Set+0x56>

    // Not used
    case NOT_USED_MODE:
      // Encoding: [Bit 7] = 0, [Bit 6] = 0
      dow_dom += 0;
      break;
 8000ae8:	bf00      	nop
 8000aea:	e000      	b.n	8000aee <Alarm_Set+0x56>

    default:
      dow_dom += 0;
      break;
 8000aec:	bf00      	nop
  }

  // Store the encoded alarm values into the blank array
  uint8_t setAlarm[4] = {sec, min, hour, dow_dom};
 8000aee:	79fb      	ldrb	r3, [r7, #7]
 8000af0:	723b      	strb	r3, [r7, #8]
 8000af2:	79bb      	ldrb	r3, [r7, #6]
 8000af4:	727b      	strb	r3, [r7, #9]
 8000af6:	797b      	ldrb	r3, [r7, #5]
 8000af8:	72bb      	strb	r3, [r7, #10]
 8000afa:	793b      	ldrb	r3, [r7, #4]
 8000afc:	72fb      	strb	r3, [r7, #11]
  
  // Calculate the internal address of the alarm in the EEPROM module (0-8192, or 13 bits)
  // By multiplying the slot number by 4 (size of each alarm: 4 bytes)
  uint16_t address = slot * 4;
 8000afe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000b02:	b29b      	uxth	r3, r3
 8000b04:	009b      	lsls	r3, r3, #2
 8000b06:	81fb      	strh	r3, [r7, #14]

  // Send the array containing the alarm values to the EEPROM module through I2C interface
  HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, address, 2, setAlarm, sizeof(setAlarm), 1000);
 8000b08:	89fa      	ldrh	r2, [r7, #14]
 8000b0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b0e:	9302      	str	r3, [sp, #8]
 8000b10:	2304      	movs	r3, #4
 8000b12:	9301      	str	r3, [sp, #4]
 8000b14:	f107 0308 	add.w	r3, r7, #8
 8000b18:	9300      	str	r3, [sp, #0]
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	21a0      	movs	r1, #160	@ 0xa0
 8000b1e:	4805      	ldr	r0, [pc, #20]	@ (8000b34 <Alarm_Set+0x9c>)
 8000b20:	f002 fda4 	bl	800366c <HAL_I2C_Mem_Write>

  // Delay to allow the EEPROM module to complete the Page Write operation
  HAL_Delay(5);
 8000b24:	2005      	movs	r0, #5
 8000b26:	f001 fcaf 	bl	8002488 <HAL_Delay>
}
 8000b2a:	bf00      	nop
 8000b2c:	3714      	adds	r7, #20
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd90      	pop	{r4, r7, pc}
 8000b32:	bf00      	nop
 8000b34:	200000a8 	.word	0x200000a8

08000b38 <Alarm_Get>:
  * @param  slot: Slot number of the alarm in the EEPROM module (0-9)
  * @param  alarm_get_data: Pointer to an ALARM_DATA structure to store the retrieved alarm values
  * @retval None
*/
void Alarm_Get (uint8_t slot, volatile ALARM_DATA *alarm_get_data)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b088      	sub	sp, #32
 8000b3c:	af04      	add	r7, sp, #16
 8000b3e:	4603      	mov	r3, r0
 8000b40:	6039      	str	r1, [r7, #0]
 8000b42:	71fb      	strb	r3, [r7, #7]
  // Address of the alarm in the EEPROM module (0-8192, or 13 bits)
  uint16_t address = slot * 4;
 8000b44:	79fb      	ldrb	r3, [r7, #7]
 8000b46:	b29b      	uxth	r3, r3
 8000b48:	009b      	lsls	r3, r3, #2
 8000b4a:	81fb      	strh	r3, [r7, #14]

  // A blank array (4 slots) to contain the alarm values received from the EEPROM module
  uint8_t getAlarm[4];

  // Receive the alarm values from the EEPROM module through I2C interface, then store them into the blank array (size of value: 4 bytes)
  HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, address, 2, getAlarm, sizeof(getAlarm), 1000);
 8000b4c:	89fa      	ldrh	r2, [r7, #14]
 8000b4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b52:	9302      	str	r3, [sp, #8]
 8000b54:	2304      	movs	r3, #4
 8000b56:	9301      	str	r3, [sp, #4]
 8000b58:	f107 0308 	add.w	r3, r7, #8
 8000b5c:	9300      	str	r3, [sp, #0]
 8000b5e:	2302      	movs	r3, #2
 8000b60:	21a0      	movs	r1, #160	@ 0xa0
 8000b62:	4822      	ldr	r0, [pc, #136]	@ (8000bec <Alarm_Get+0xb4>)
 8000b64:	f002 fe7c 	bl	8003860 <HAL_I2C_Mem_Read>

  // Delay to allow the EEPROM module to complete the Sequential Read operation
  HAL_Delay(1);
 8000b68:	2001      	movs	r0, #1
 8000b6a:	f001 fc8d 	bl	8002488 <HAL_Delay>

  // Store the alarm values into the alarm variable
  alarm_get_data->second = 0;
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	2200      	movs	r2, #0
 8000b72:	701a      	strb	r2, [r3, #0]
  alarm_get_data->minute = getAlarm[1];
 8000b74:	7a7a      	ldrb	r2, [r7, #9]
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	705a      	strb	r2, [r3, #1]
  alarm_get_data->hour = getAlarm[2];
 8000b7a:	7aba      	ldrb	r2, [r7, #10]
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	709a      	strb	r2, [r3, #2]
  
  if (getAlarm[3] >= (1 << 7))
 8000b80:	7afb      	ldrb	r3, [r7, #11]
 8000b82:	b25b      	sxtb	r3, r3
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	da18      	bge.n	8000bba <Alarm_Get+0x82>
  {
    if ((getAlarm[3] & 0x7F) >= (1 << 6))
 8000b88:	7afb      	ldrb	r3, [r7, #11]
 8000b8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d009      	beq.n	8000ba6 <Alarm_Get+0x6e>
    {
      alarm_get_data->dy_dt = DAY_OF_WEEK_MODE;
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	2200      	movs	r2, #0
 8000b96:	70da      	strb	r2, [r3, #3]
      alarm_get_data->dow_dom = getAlarm[3] & 0x3F;
 8000b98:	7afb      	ldrb	r3, [r7, #11]
 8000b9a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000b9e:	b2da      	uxtb	r2, r3
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	711a      	strb	r2, [r3, #4]
 8000ba4:	e012      	b.n	8000bcc <Alarm_Get+0x94>
    }
    else 
    {
      alarm_get_data->dy_dt = DATE_OF_MONTH_MODE;
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	2201      	movs	r2, #1
 8000baa:	70da      	strb	r2, [r3, #3]
      alarm_get_data->dow_dom = getAlarm[3] & 0x7F;
 8000bac:	7afb      	ldrb	r3, [r7, #11]
 8000bae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000bb2:	b2da      	uxtb	r2, r3
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	711a      	strb	r2, [r3, #4]
 8000bb8:	e008      	b.n	8000bcc <Alarm_Get+0x94>
    }
  }
  else 
  {
    alarm_get_data->dy_dt = NOT_USED_MODE;
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	2202      	movs	r2, #2
 8000bbe:	70da      	strb	r2, [r3, #3]
    alarm_get_data->dow_dom = getAlarm[3] & 0x7F;
 8000bc0:	7afb      	ldrb	r3, [r7, #11]
 8000bc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000bc6:	b2da      	uxtb	r2, r3
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	711a      	strb	r2, [r3, #4]
  }

  if (getAlarm[0] >= (1 << 7)) alarm_get_data->on_off = true;
 8000bcc:	7a3b      	ldrb	r3, [r7, #8]
 8000bce:	b25b      	sxtb	r3, r3
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	da03      	bge.n	8000bdc <Alarm_Get+0xa4>
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	715a      	strb	r2, [r3, #5]
  else alarm_get_data->on_off = false;
}
 8000bda:	e002      	b.n	8000be2 <Alarm_Get+0xaa>
  else alarm_get_data->on_off = false;
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	2200      	movs	r2, #0
 8000be0:	715a      	strb	r2, [r3, #5]
}
 8000be2:	bf00      	nop
 8000be4:	3710      	adds	r7, #16
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	200000a8 	.word	0x200000a8

08000bf0 <Alarm_Clear>:
  * @brief  Clear a single alarm from the EEPROM module.
  * @param  slot: Slot number of the alarm in the EEPROM module (0-9)
  * @retval None
*/
void Alarm_Clear (uint8_t slot)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b088      	sub	sp, #32
 8000bf4:	af04      	add	r7, sp, #16
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	71fb      	strb	r3, [r7, #7]
  // Address of the alarm in the EEPROM module (0-8192, or 13 bits)
  uint16_t address = slot * 4;
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	b29b      	uxth	r3, r3
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	81fb      	strh	r3, [r7, #14]

  // A blank array (4 slots) to contain the alarm values to be cleared
  uint8_t clearAlarm[4] = {0, 0, 0, 0};
 8000c02:	2300      	movs	r3, #0
 8000c04:	60bb      	str	r3, [r7, #8]

  // Write the blank array to the EEPROM module through I2C interface
  HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, address, 2, clearAlarm, sizeof(clearAlarm), 1000);
 8000c06:	89fa      	ldrh	r2, [r7, #14]
 8000c08:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c0c:	9302      	str	r3, [sp, #8]
 8000c0e:	2304      	movs	r3, #4
 8000c10:	9301      	str	r3, [sp, #4]
 8000c12:	f107 0308 	add.w	r3, r7, #8
 8000c16:	9300      	str	r3, [sp, #0]
 8000c18:	2302      	movs	r3, #2
 8000c1a:	21a0      	movs	r1, #160	@ 0xa0
 8000c1c:	4804      	ldr	r0, [pc, #16]	@ (8000c30 <Alarm_Clear+0x40>)
 8000c1e:	f002 fd25 	bl	800366c <HAL_I2C_Mem_Write>

  // Delay to allow the EEPROM module to complete the Page Write operation
  HAL_Delay(5);
 8000c22:	2005      	movs	r0, #5
 8000c24:	f001 fc30 	bl	8002488 <HAL_Delay>
}
 8000c28:	bf00      	nop
 8000c2a:	3710      	adds	r7, #16
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	200000a8 	.word	0x200000a8

08000c34 <Alarm_Slot_Pointer_Set>:
/**
 * @brief Save the data of pointer for the alarm slot to EEPROM module.
  * @retval None
 */
void Alarm_Slot_Pointer_Set (void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af04      	add	r7, sp, #16
  // Write the alarm slot pointer value to the EEPROM module through I2C interface
  HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, ALARM_SLOT_PTR_ADDR, 2, &alarm_slot_ptr, sizeof(alarm_slot_ptr), 1000);
 8000c3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c3e:	9302      	str	r3, [sp, #8]
 8000c40:	2301      	movs	r3, #1
 8000c42:	9301      	str	r3, [sp, #4]
 8000c44:	4b06      	ldr	r3, [pc, #24]	@ (8000c60 <Alarm_Slot_Pointer_Set+0x2c>)
 8000c46:	9300      	str	r3, [sp, #0]
 8000c48:	2302      	movs	r3, #2
 8000c4a:	2228      	movs	r2, #40	@ 0x28
 8000c4c:	21a0      	movs	r1, #160	@ 0xa0
 8000c4e:	4805      	ldr	r0, [pc, #20]	@ (8000c64 <Alarm_Slot_Pointer_Set+0x30>)
 8000c50:	f002 fd0c 	bl	800366c <HAL_I2C_Mem_Write>

  // Delay to allow the EEPROM module to complete the Page Write operation
  HAL_Delay(5);
 8000c54:	2005      	movs	r0, #5
 8000c56:	f001 fc17 	bl	8002488 <HAL_Delay>
}
 8000c5a:	bf00      	nop
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	20000154 	.word	0x20000154
 8000c64:	200000a8 	.word	0x200000a8

08000c68 <Alarm_Slot_Pointer_Get>:
/**
 * @brief Retrieve the data of pointer for the alarm slot from EEPROM module.
  * @retval None
 */
void Alarm_Slot_Pointer_Get (void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af04      	add	r7, sp, #16
  // Read the alarm slot pointer from the EEPROM module through I2C interface
  HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, ALARM_SLOT_PTR_ADDR, 2, &alarm_slot_ptr, sizeof(alarm_slot_ptr), 1000);
 8000c6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c72:	9302      	str	r3, [sp, #8]
 8000c74:	2301      	movs	r3, #1
 8000c76:	9301      	str	r3, [sp, #4]
 8000c78:	4b06      	ldr	r3, [pc, #24]	@ (8000c94 <Alarm_Slot_Pointer_Get+0x2c>)
 8000c7a:	9300      	str	r3, [sp, #0]
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	2228      	movs	r2, #40	@ 0x28
 8000c80:	21a0      	movs	r1, #160	@ 0xa0
 8000c82:	4805      	ldr	r0, [pc, #20]	@ (8000c98 <Alarm_Slot_Pointer_Get+0x30>)
 8000c84:	f002 fdec 	bl	8003860 <HAL_I2C_Mem_Read>

  // Delay to allow the EEPROM module to complete the Sequential Read operation
  HAL_Delay(1);
 8000c88:	2001      	movs	r0, #1
 8000c8a:	f001 fbfd 	bl	8002488 <HAL_Delay>
}
 8000c8e:	bf00      	nop
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20000154 	.word	0x20000154
 8000c98:	200000a8 	.word	0x200000a8

08000c9c <Alarm_Check>:
  * @param  time_get_data: Pointer to a TIME structure to store the current time values
  * @retval None
  * @note   This function compares the current time with all alarms stored in the EEPROM module.
*/
void Alarm_Check (volatile TIME_DATA *time_get_data)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b086      	sub	sp, #24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  // A blank array to contain the alarm values retrieved from the EEPROM module
  volatile ALARM_DATA alarmCheckData = {0};
 8000ca4:	f107 030c 	add.w	r3, r7, #12
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	809a      	strh	r2, [r3, #4]

  // Compare the current time with all available alarms in the EEPROM module
  for (int i = 0; i < alarm_slot_ptr; i++)
 8000cae:	2300      	movs	r3, #0
 8000cb0:	617b      	str	r3, [r7, #20]
 8000cb2:	e04e      	b.n	8000d52 <Alarm_Check+0xb6>
  {
    // Retrieve the alarm values from the EEPROM module
    //    void Alarm_Get (uint8_t slot, ALARM_DATA *alarm_get_data)
    Alarm_Get(i, &alarmCheckData);
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	f107 020c 	add.w	r2, r7, #12
 8000cbc:	4611      	mov	r1, r2
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff ff3a 	bl	8000b38 <Alarm_Get>

    // Check if the alarm is at ON or OFF state by checking the MSB of the second register
    if (!alarmCheckData.on_off)
 8000cc4:	7c7b      	ldrb	r3, [r7, #17]
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	f083 0301 	eor.w	r3, r3, #1
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d131      	bne.n	8000d36 <Alarm_Check+0x9a>
      // Skip if the alarm is OFF
      continue;
    }

    // Check if the current time matches the alarm time (day of week)
    if ((alarmCheckData.dy_dt == DAY_OF_WEEK_MODE)
 8000cd2:	7bfb      	ldrb	r3, [r7, #15]
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d106      	bne.n	8000ce8 <Alarm_Check+0x4c>
    &&  (alarmCheckData.dow_dom != time_get_data->dayofweek))
 8000cda:	7c3b      	ldrb	r3, [r7, #16]
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	78db      	ldrb	r3, [r3, #3]
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d128      	bne.n	8000d3a <Alarm_Check+0x9e>
      // Skip if the current time does NOT match the alarm time (day of week)
      continue;
    }

    // Check if the current time matches the alarm time (date of month)
    if ((alarmCheckData.dy_dt == DATE_OF_MONTH_MODE)
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d106      	bne.n	8000cfe <Alarm_Check+0x62>
    &&  (alarmCheckData.dow_dom != time_get_data->dateofmonth))
 8000cf0:	7c3b      	ldrb	r3, [r7, #16]
 8000cf2:	b2da      	uxtb	r2, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	791b      	ldrb	r3, [r3, #4]
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	d11f      	bne.n	8000d3e <Alarm_Check+0xa2>
      // Skip if the current time does NOT match the alarm time (date of month)
      continue;
    }

    // Check if the current time matches the alarm time (hour)
    if (alarmCheckData.hour != time_get_data->hour)
 8000cfe:	7bbb      	ldrb	r3, [r7, #14]
 8000d00:	b2da      	uxtb	r2, r3
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	789b      	ldrb	r3, [r3, #2]
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d11a      	bne.n	8000d42 <Alarm_Check+0xa6>
      // Skip if the current time does NOT match the alarm time (hour)
      continue;
    }

    // Check if the current time matches the alarm time (minute)
    if (alarmCheckData.minute != time_get_data->minute)
 8000d0c:	7b7b      	ldrb	r3, [r7, #13]
 8000d0e:	b2da      	uxtb	r2, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	785b      	ldrb	r3, [r3, #1]
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	429a      	cmp	r2, r3
 8000d18:	d115      	bne.n	8000d46 <Alarm_Check+0xaa>
      // Skip if the current time does NOT match the alarm time (minute)
      continue;
    }

    // Check if the current time matches the alarm time (second)
    if (alarmCheckData.second != time_get_data->second)
 8000d1a:	7b3b      	ldrb	r3, [r7, #12]
 8000d1c:	b2da      	uxtb	r2, r3
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d110      	bne.n	8000d4a <Alarm_Check+0xae>
      // Skip if the current time does NOT match the alarm time (second)
      continue;
    }

    // Debugging: If all the above checks pass, the alarm is activated
    debug_alarm_activate_ctr++;
 8000d28:	4b0f      	ldr	r3, [pc, #60]	@ (8000d68 <Alarm_Check+0xcc>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	b2da      	uxtb	r2, r3
 8000d30:	4b0d      	ldr	r3, [pc, #52]	@ (8000d68 <Alarm_Check+0xcc>)
 8000d32:	701a      	strb	r2, [r3, #0]

    // Stop checking time matching
    // to make sure that only one alarm can be activated at a time
    break;
 8000d34:	e014      	b.n	8000d60 <Alarm_Check+0xc4>
      continue;
 8000d36:	bf00      	nop
 8000d38:	e008      	b.n	8000d4c <Alarm_Check+0xb0>
      continue;
 8000d3a:	bf00      	nop
 8000d3c:	e006      	b.n	8000d4c <Alarm_Check+0xb0>
      continue;
 8000d3e:	bf00      	nop
 8000d40:	e004      	b.n	8000d4c <Alarm_Check+0xb0>
      continue;
 8000d42:	bf00      	nop
 8000d44:	e002      	b.n	8000d4c <Alarm_Check+0xb0>
      continue;
 8000d46:	bf00      	nop
 8000d48:	e000      	b.n	8000d4c <Alarm_Check+0xb0>
      continue;
 8000d4a:	bf00      	nop
  for (int i = 0; i < alarm_slot_ptr; i++)
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	617b      	str	r3, [r7, #20]
 8000d52:	4b06      	ldr	r3, [pc, #24]	@ (8000d6c <Alarm_Check+0xd0>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	461a      	mov	r2, r3
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	dbaa      	blt.n	8000cb4 <Alarm_Check+0x18>
  }
}
 8000d5e:	bf00      	nop
 8000d60:	bf00      	nop
 8000d62:	3718      	adds	r7, #24
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20000156 	.word	0x20000156
 8000d6c:	20000154 	.word	0x20000154

08000d70 <Button_Debounce>:
  * * @param  button->hold_latch: 
  * * @param  button->start_tick: Start time of the button press event (in milliseconds).
  * @retval None
*/
void Button_Debounce(BUTTON_DATA *button)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  // Handle button state transitions and debounce logic
  switch (button->state)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	79db      	ldrb	r3, [r3, #7]
 8000d7c:	2b02      	cmp	r3, #2
 8000d7e:	d03d      	beq.n	8000dfc <Button_Debounce+0x8c>
 8000d80:	2b02      	cmp	r3, #2
 8000d82:	dc70      	bgt.n	8000e66 <Button_Debounce+0xf6>
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d002      	beq.n	8000d8e <Button_Debounce+0x1e>
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d017      	beq.n	8000dbc <Button_Debounce+0x4c>
 8000d8c:	e06b      	b.n	8000e66 <Button_Debounce+0xf6>
  {
    // Initial state: Button is released (HIGH)
    case BUTTON_RELEASED:

      // Reset all flags and state variables
      button->press_flag = false;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2200      	movs	r2, #0
 8000d92:	735a      	strb	r2, [r3, #13]
      button->hold_flag = false;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2200      	movs	r2, #0
 8000d98:	739a      	strb	r2, [r3, #14]
      button->latch = false;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	73da      	strb	r2, [r3, #15]
    
      // Check if interrupt flag is set
      if (button->int_flag) 
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	7b1b      	ldrb	r3, [r3, #12]
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d06d      	beq.n	8000e86 <Button_Debounce+0x116>
      {
        // Record the start time for debounce
        button->start_tick = HAL_GetTick();
 8000daa:	f001 fb63 	bl	8002474 <HAL_GetTick>
 8000dae:	4602      	mov	r2, r0
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	609a      	str	r2, [r3, #8]

        // Transition to waiting state
        button->state = BUTTON_WAITING;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2201      	movs	r2, #1
 8000db8:	71da      	strb	r2, [r3, #7]
      }
      break;
 8000dba:	e064      	b.n	8000e86 <Button_Debounce+0x116>

    // Waiting state: Button is pressed (LOW) but not yet confirmed
    case BUTTON_WAITING:
      // Check if debounce delay has passed
      if (HAL_GetTick() - button->start_tick >= (BUTTON_DEBOUNCE_DELAY + DISPLAY_DELAY)) 
 8000dbc:	f001 fb5a 	bl	8002474 <HAL_GetTick>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	1ad3      	subs	r3, r2, r3
 8000dc8:	f240 2211 	movw	r2, #529	@ 0x211
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d95c      	bls.n	8000e8a <Button_Debounce+0x11a>
      {
        // Check if button is still pressed (LOW state) after debounce delay
        if (HAL_GPIO_ReadPin(button->gpio_port, button->gpio_pin) == BUTTON_ACTIVE) 
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	889b      	ldrh	r3, [r3, #4]
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4610      	mov	r0, r2
 8000ddc:	f002 faba 	bl	8003354 <HAL_GPIO_ReadPin>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d103      	bne.n	8000dee <Button_Debounce+0x7e>
        {
          // Transition to pressed state
          button->state = BUTTON_PRESSED;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2202      	movs	r2, #2
 8000dea:	71da      	strb	r2, [r3, #7]
          // Reset interrupt flag and return to released state
          button->int_flag = false;  
          button->state = BUTTON_RELEASED;
        }
      }
      break;
 8000dec:	e04d      	b.n	8000e8a <Button_Debounce+0x11a>
          button->int_flag = false;  
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2200      	movs	r2, #0
 8000df2:	731a      	strb	r2, [r3, #12]
          button->state = BUTTON_RELEASED;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2200      	movs	r2, #0
 8000df8:	71da      	strb	r2, [r3, #7]
      break;
 8000dfa:	e046      	b.n	8000e8a <Button_Debounce+0x11a>
    
    // Pressed state: Button is pressed (LOW)
    case BUTTON_PRESSED:
      // Check if button is released (HIGH state)
      if (HAL_GPIO_ReadPin(button->gpio_port, button->gpio_pin) != BUTTON_ACTIVE) 
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	889b      	ldrh	r3, [r3, #4]
 8000e04:	4619      	mov	r1, r3
 8000e06:	4610      	mov	r0, r2
 8000e08:	f002 faa4 	bl	8003354 <HAL_GPIO_ReadPin>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d013      	beq.n	8000e3a <Button_Debounce+0xca>
      {
        // Check if press duration is less than hold threshold
        if (HAL_GetTick() - button->start_tick < (BUTTON_HOLD_TH + DISPLAY_DELAY))
 8000e12:	f001 fb2f 	bl	8002474 <HAL_GetTick>
 8000e16:	4602      	mov	r2, r0
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	689b      	ldr	r3, [r3, #8]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	f240 424b 	movw	r2, #1099	@ 0x44b
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d802      	bhi.n	8000e2c <Button_Debounce+0xbc>
        {
          // Set press flag for short press
          button->press_flag = true;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2201      	movs	r2, #1
 8000e2a:	735a      	strb	r2, [r3, #13]
        }
      
        // Reset interrupt flag and return to released state
        button->int_flag = false;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	731a      	strb	r2, [r3, #12]

        //button->latch = false;
        button->state = BUTTON_RELEASED;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2200      	movs	r2, #0
 8000e36:	71da      	strb	r2, [r3, #7]
      else if ((HAL_GetTick() - button->start_tick >= (BUTTON_HOLD_TH + DISPLAY_DELAY)) && !button->hold_flag)
      {
        // Set hold flag for long press
        button->hold_flag = true;
      }
      break;
 8000e38:	e029      	b.n	8000e8e <Button_Debounce+0x11e>
      else if ((HAL_GetTick() - button->start_tick >= (BUTTON_HOLD_TH + DISPLAY_DELAY)) && !button->hold_flag)
 8000e3a:	f001 fb1b 	bl	8002474 <HAL_GetTick>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	f240 424b 	movw	r2, #1099	@ 0x44b
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d91f      	bls.n	8000e8e <Button_Debounce+0x11e>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	7b9b      	ldrb	r3, [r3, #14]
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	f083 0301 	eor.w	r3, r3, #1
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d017      	beq.n	8000e8e <Button_Debounce+0x11e>
        button->hold_flag = true;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2201      	movs	r2, #1
 8000e62:	739a      	strb	r2, [r3, #14]
      break;
 8000e64:	e013      	b.n	8000e8e <Button_Debounce+0x11e>

    default:
      // Reset all flags and return to released state
      button->state = BUTTON_RELEASED;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2200      	movs	r2, #0
 8000e6a:	71da      	strb	r2, [r3, #7]
      button->int_flag = false;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	731a      	strb	r2, [r3, #12]
      button->press_flag = false;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2200      	movs	r2, #0
 8000e76:	735a      	strb	r2, [r3, #13]
      button->hold_flag = false;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	739a      	strb	r2, [r3, #14]
      button->latch = false;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2200      	movs	r2, #0
 8000e82:	73da      	strb	r2, [r3, #15]
      break;
 8000e84:	e004      	b.n	8000e90 <Button_Debounce+0x120>
      break;
 8000e86:	bf00      	nop
 8000e88:	e002      	b.n	8000e90 <Button_Debounce+0x120>
      break;
 8000e8a:	bf00      	nop
 8000e8c:	e000      	b.n	8000e90 <Button_Debounce+0x120>
      break;
 8000e8e:	bf00      	nop
  }
}
 8000e90:	bf00      	nop
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <Button_Handle>:
/**
 * @brief  Button interrupt handler function to be called in main loop
 * @retval None
 */
void Button_Handle (void) 
{
 8000e98:	b590      	push	{r4, r7, lr}
 8000e9a:	b087      	sub	sp, #28
 8000e9c:	af00      	add	r7, sp, #0
  // An empty button variable containing reset values for button pointer initiallization
  BUTTON_DATA buttonReset = {GPIOB, BUTTON0_IN12_Pin, 0, BUTTON_RELEASED, 0, false, false, false, false};
 8000e9e:	4b5d      	ldr	r3, [pc, #372]	@ (8001014 <Button_Handle+0x17c>)
 8000ea0:	463c      	mov	r4, r7
 8000ea2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ea4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  // Initially point to an empty button variable
  BUTTON_DATA *button = &buttonReset;
 8000ea8:	463b      	mov	r3, r7
 8000eaa:	617b      	str	r3, [r7, #20]

  // Perform button debouncing to filter out noise
  Button_Debounce(&button0);
 8000eac:	485a      	ldr	r0, [pc, #360]	@ (8001018 <Button_Handle+0x180>)
 8000eae:	f7ff ff5f 	bl	8000d70 <Button_Debounce>
  Button_Debounce(&button1);
 8000eb2:	485a      	ldr	r0, [pc, #360]	@ (800101c <Button_Handle+0x184>)
 8000eb4:	f7ff ff5c 	bl	8000d70 <Button_Debounce>
  Button_Debounce(&button2);
 8000eb8:	4859      	ldr	r0, [pc, #356]	@ (8001020 <Button_Handle+0x188>)
 8000eba:	f7ff ff59 	bl	8000d70 <Button_Debounce>
  Button_Debounce(&button3);
 8000ebe:	4859      	ldr	r0, [pc, #356]	@ (8001024 <Button_Handle+0x18c>)
 8000ec0:	f7ff ff56 	bl	8000d70 <Button_Debounce>
  Button_Debounce(&button4);
 8000ec4:	4858      	ldr	r0, [pc, #352]	@ (8001028 <Button_Handle+0x190>)
 8000ec6:	f7ff ff53 	bl	8000d70 <Button_Debounce>

  // Check which button is pressed or held and assign it to the button pointer
  if      (button0.press_flag || button0.hold_flag) button = &button0;
 8000eca:	4b53      	ldr	r3, [pc, #332]	@ (8001018 <Button_Handle+0x180>)
 8000ecc:	7b5b      	ldrb	r3, [r3, #13]
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d104      	bne.n	8000ede <Button_Handle+0x46>
 8000ed4:	4b50      	ldr	r3, [pc, #320]	@ (8001018 <Button_Handle+0x180>)
 8000ed6:	7b9b      	ldrb	r3, [r3, #14]
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d002      	beq.n	8000ee4 <Button_Handle+0x4c>
 8000ede:	4b4e      	ldr	r3, [pc, #312]	@ (8001018 <Button_Handle+0x180>)
 8000ee0:	617b      	str	r3, [r7, #20]
 8000ee2:	e032      	b.n	8000f4a <Button_Handle+0xb2>
  else if (button1.press_flag || button1.hold_flag) button = &button1;
 8000ee4:	4b4d      	ldr	r3, [pc, #308]	@ (800101c <Button_Handle+0x184>)
 8000ee6:	7b5b      	ldrb	r3, [r3, #13]
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d104      	bne.n	8000ef8 <Button_Handle+0x60>
 8000eee:	4b4b      	ldr	r3, [pc, #300]	@ (800101c <Button_Handle+0x184>)
 8000ef0:	7b9b      	ldrb	r3, [r3, #14]
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d002      	beq.n	8000efe <Button_Handle+0x66>
 8000ef8:	4b48      	ldr	r3, [pc, #288]	@ (800101c <Button_Handle+0x184>)
 8000efa:	617b      	str	r3, [r7, #20]
 8000efc:	e025      	b.n	8000f4a <Button_Handle+0xb2>
  else if (button2.press_flag || button2.hold_flag) button = &button2;
 8000efe:	4b48      	ldr	r3, [pc, #288]	@ (8001020 <Button_Handle+0x188>)
 8000f00:	7b5b      	ldrb	r3, [r3, #13]
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d104      	bne.n	8000f12 <Button_Handle+0x7a>
 8000f08:	4b45      	ldr	r3, [pc, #276]	@ (8001020 <Button_Handle+0x188>)
 8000f0a:	7b9b      	ldrb	r3, [r3, #14]
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d002      	beq.n	8000f18 <Button_Handle+0x80>
 8000f12:	4b43      	ldr	r3, [pc, #268]	@ (8001020 <Button_Handle+0x188>)
 8000f14:	617b      	str	r3, [r7, #20]
 8000f16:	e018      	b.n	8000f4a <Button_Handle+0xb2>
  else if (button3.press_flag || button3.hold_flag) button = &button3;
 8000f18:	4b42      	ldr	r3, [pc, #264]	@ (8001024 <Button_Handle+0x18c>)
 8000f1a:	7b5b      	ldrb	r3, [r3, #13]
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d104      	bne.n	8000f2c <Button_Handle+0x94>
 8000f22:	4b40      	ldr	r3, [pc, #256]	@ (8001024 <Button_Handle+0x18c>)
 8000f24:	7b9b      	ldrb	r3, [r3, #14]
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d002      	beq.n	8000f32 <Button_Handle+0x9a>
 8000f2c:	4b3d      	ldr	r3, [pc, #244]	@ (8001024 <Button_Handle+0x18c>)
 8000f2e:	617b      	str	r3, [r7, #20]
 8000f30:	e00b      	b.n	8000f4a <Button_Handle+0xb2>
  else if (button4.press_flag || button4.hold_flag) button = &button4;
 8000f32:	4b3d      	ldr	r3, [pc, #244]	@ (8001028 <Button_Handle+0x190>)
 8000f34:	7b5b      	ldrb	r3, [r3, #13]
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d104      	bne.n	8000f46 <Button_Handle+0xae>
 8000f3c:	4b3a      	ldr	r3, [pc, #232]	@ (8001028 <Button_Handle+0x190>)
 8000f3e:	7b9b      	ldrb	r3, [r3, #14]
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <Button_Handle+0xb2>
 8000f46:	4b38      	ldr	r3, [pc, #224]	@ (8001028 <Button_Handle+0x190>)
 8000f48:	617b      	str	r3, [r7, #20]
  

  // Initialize the start tick for button hold detection
  uint32_t startTick = 0;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	613b      	str	r3, [r7, #16]
  
  // Debugging: Check if the button is pressed or held by increment its counter in activation
  if (button->press_flag)
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	7b5b      	ldrb	r3, [r3, #13]
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d009      	beq.n	8000f6c <Button_Handle+0xd4>
  {
    // Increment the debug counter for the button
    debug_button_counter[button->index]++;
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	799b      	ldrb	r3, [r3, #6]
 8000f5c:	4a33      	ldr	r2, [pc, #204]	@ (800102c <Button_Handle+0x194>)
 8000f5e:	5cd2      	ldrb	r2, [r2, r3]
 8000f60:	b2d2      	uxtb	r2, r2
 8000f62:	3201      	adds	r2, #1
 8000f64:	b2d1      	uxtb	r1, r2
 8000f66:	4a31      	ldr	r2, [pc, #196]	@ (800102c <Button_Handle+0x194>)
 8000f68:	54d1      	strb	r1, [r2, r3]
 8000f6a:	e017      	b.n	8000f9c <Button_Handle+0x104>
  }
  else if (button->hold_flag)
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	7b9b      	ldrb	r3, [r3, #14]
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d012      	beq.n	8000f9c <Button_Handle+0x104>
  {
    // Check if the button is held down for a certain duration
    if (HAL_GetTick() - startTick >= BUTTON_HOLD_CYCLE) 
 8000f76:	f001 fa7d 	bl	8002474 <HAL_GetTick>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	1ad3      	subs	r3, r2, r3
 8000f80:	2bf9      	cmp	r3, #249	@ 0xf9
 8000f82:	d90b      	bls.n	8000f9c <Button_Handle+0x104>
    {
      // Increment the debug counter for the button
      debug_button_counter[button->index]++;
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	799b      	ldrb	r3, [r3, #6]
 8000f88:	4a28      	ldr	r2, [pc, #160]	@ (800102c <Button_Handle+0x194>)
 8000f8a:	5cd2      	ldrb	r2, [r2, r3]
 8000f8c:	b2d2      	uxtb	r2, r2
 8000f8e:	3201      	adds	r2, #1
 8000f90:	b2d1      	uxtb	r1, r2
 8000f92:	4a26      	ldr	r2, [pc, #152]	@ (800102c <Button_Handle+0x194>)
 8000f94:	54d1      	strb	r1, [r2, r3]

      // Reset the start tick for the next hold cycle
      startTick = HAL_GetTick();
 8000f96:	f001 fa6d 	bl	8002474 <HAL_GetTick>
 8000f9a:	6138      	str	r0, [r7, #16]
    }
  }

  // Check if the button is pressed or held
  if (button->press_flag || button->hold_flag) 
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	7b5b      	ldrb	r3, [r3, #13]
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d104      	bne.n	8000fb0 <Button_Handle+0x118>
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	7b9b      	ldrb	r3, [r3, #14]
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d02c      	beq.n	800100a <Button_Handle+0x172>
  {
    // Handle button actions based on the current system mode
    switch (system_state.mode) 
 8000fb0:	4b1f      	ldr	r3, [pc, #124]	@ (8001030 <Button_Handle+0x198>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	2b05      	cmp	r3, #5
 8000fb6:	d827      	bhi.n	8001008 <Button_Handle+0x170>
 8000fb8:	a201      	add	r2, pc, #4	@ (adr r2, 8000fc0 <Button_Handle+0x128>)
 8000fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fbe:	bf00      	nop
 8000fc0:	08000fd9 	.word	0x08000fd9
 8000fc4:	08000fe1 	.word	0x08000fe1
 8000fc8:	08000fe9 	.word	0x08000fe9
 8000fcc:	08000ff1 	.word	0x08000ff1
 8000fd0:	08000ff9 	.word	0x08000ff9
 8000fd4:	08001001 	.word	0x08001001
    {
      case DEFAULT_MODE: 
        System_Default_Mode_Handle (button);
 8000fd8:	6978      	ldr	r0, [r7, #20]
 8000fda:	f000 f82b 	bl	8001034 <System_Default_Mode_Handle>
        break;
 8000fde:	e014      	b.n	800100a <Button_Handle+0x172>

      case TIME_SETUP_MODE: 
        System_Time_Setup_Mode_Handle (button);
 8000fe0:	6978      	ldr	r0, [r7, #20]
 8000fe2:	f000 f88f 	bl	8001104 <System_Time_Setup_Mode_Handle>
        break;
 8000fe6:	e010      	b.n	800100a <Button_Handle+0x172>
      
      case ALARM_SETUP_MODE: 
        System_Alarm_Setup_Mode_Handle (button);
 8000fe8:	6978      	ldr	r0, [r7, #20]
 8000fea:	f000 fa8b 	bl	8001504 <System_Alarm_Setup_Mode_Handle>
        break;
 8000fee:	e00c      	b.n	800100a <Button_Handle+0x172>

      case ALARM_VIEW_MODE: 
        System_Alarm_View_Mode_Handle (button);
 8000ff0:	6978      	ldr	r0, [r7, #20]
 8000ff2:	f000 fd47 	bl	8001a84 <System_Alarm_View_Mode_Handle>
        break;
 8000ff6:	e008      	b.n	800100a <Button_Handle+0x172>

      case ALARM_ACTIVE_MODE: 
        System_Alarm_Active_Mode_Handle (button);
 8000ff8:	6978      	ldr	r0, [r7, #20]
 8000ffa:	f000 feb3 	bl	8001d64 <System_Alarm_Active_Mode_Handle>
        break;
 8000ffe:	e004      	b.n	800100a <Button_Handle+0x172>

      case SYSTEM_OPTIONS_MODE:
        System_Options_Mode_Handle (button);
 8001000:	6978      	ldr	r0, [r7, #20]
 8001002:	f000 ff21 	bl	8001e48 <System_Options_Mode_Handle>
        break;
 8001006:	e000      	b.n	800100a <Button_Handle+0x172>

      default:
        break;
 8001008:	bf00      	nop
    }
  }
}
 800100a:	bf00      	nop
 800100c:	371c      	adds	r7, #28
 800100e:	46bd      	mov	sp, r7
 8001010:	bd90      	pop	{r4, r7, pc}
 8001012:	bf00      	nop
 8001014:	08005ac4 	.word	0x08005ac4
 8001018:	20000000 	.word	0x20000000
 800101c:	20000010 	.word	0x20000010
 8001020:	20000020 	.word	0x20000020
 8001024:	20000030 	.word	0x20000030
 8001028:	20000040 	.word	0x20000040
 800102c:	20000158 	.word	0x20000158
 8001030:	200000fc 	.word	0x200000fc

08001034 <System_Default_Mode_Handle>:
 * @brief  Handles the default system mode based on button actions.
 * @param  button: Pointer to the BUTTON_DATA structure containing button state and index.
 * @retval None
 */
void System_Default_Mode_Handle (BUTTON_DATA *button)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  switch (button->index) 
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	799b      	ldrb	r3, [r3, #6]
 8001040:	2b04      	cmp	r3, #4
 8001042:	d850      	bhi.n	80010e6 <System_Default_Mode_Handle+0xb2>
 8001044:	a201      	add	r2, pc, #4	@ (adr r2, 800104c <System_Default_Mode_Handle+0x18>)
 8001046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800104a:	bf00      	nop
 800104c:	08001061 	.word	0x08001061
 8001050:	0800108b 	.word	0x0800108b
 8001054:	0800109b 	.word	0x0800109b
 8001058:	080010ab 	.word	0x080010ab
 800105c:	080010c9 	.word	0x080010c9
  {
    // Button 0: If pressed, cycle through the modes; if held, do nothing (reserved for future use)
    case 0:
      if      (button->press_flag)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	7b5b      	ldrb	r3, [r3, #13]
 8001064:	b2db      	uxtb	r3, r3
 8001066:	2b00      	cmp	r3, #0
 8001068:	d00c      	beq.n	8001084 <System_Default_Mode_Handle+0x50>
      {
        system_state.mode = (system_state.mode < (SYSTEM_MODE_NUM - 1)) ? (system_state.mode + 1) : 0;
 800106a:	4b25      	ldr	r3, [pc, #148]	@ (8001100 <System_Default_Mode_Handle+0xcc>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b04      	cmp	r3, #4
 8001070:	d804      	bhi.n	800107c <System_Default_Mode_Handle+0x48>
 8001072:	4b23      	ldr	r3, [pc, #140]	@ (8001100 <System_Default_Mode_Handle+0xcc>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	3301      	adds	r3, #1
 8001078:	b2db      	uxtb	r3, r3
 800107a:	e000      	b.n	800107e <System_Default_Mode_Handle+0x4a>
 800107c:	2300      	movs	r3, #0
 800107e:	4a20      	ldr	r2, [pc, #128]	@ (8001100 <System_Default_Mode_Handle+0xcc>)
 8001080:	7013      	strb	r3, [r2, #0]

      else if (button->hold_flag)
      {
        // Reserved
      }
      break;
 8001082:	e035      	b.n	80010f0 <System_Default_Mode_Handle+0xbc>
      else if (button->hold_flag)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	7b9b      	ldrb	r3, [r3, #14]
      break;
 8001088:	e032      	b.n	80010f0 <System_Default_Mode_Handle+0xbc>
    
    // Button 1: Reserved for future use
    case 1: 
      if (button->press_flag)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	7b5b      	ldrb	r3, [r3, #13]
 800108e:	b2db      	uxtb	r3, r3
 8001090:	2b00      	cmp	r3, #0
 8001092:	d12a      	bne.n	80010ea <System_Default_Mode_Handle+0xb6>
      {
        // Reserved
      }
      else if (button->hold_flag)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	7b9b      	ldrb	r3, [r3, #14]
      {
        // Reserved
      }
      break;
 8001098:	e027      	b.n	80010ea <System_Default_Mode_Handle+0xb6>

    // Button 2: Reserved for future use
    case 2: 
      if (button->press_flag)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	7b5b      	ldrb	r3, [r3, #13]
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d124      	bne.n	80010ee <System_Default_Mode_Handle+0xba>
      {
        // Reserved
      }
      else if (button->hold_flag)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	7b9b      	ldrb	r3, [r3, #14]
      {
        // Reserved
      }
      break;
 80010a8:	e021      	b.n	80010ee <System_Default_Mode_Handle+0xba>
    
    // Button 3: If pressed, quick jump to Time Setup; if held, do nothing (reserved for future use)
    case 3:
      if (button->press_flag) 
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	7b5b      	ldrb	r3, [r3, #13]
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d006      	beq.n	80010c2 <System_Default_Mode_Handle+0x8e>
      {
        // Quick jump to Time Setup
        system_state.mode = TIME_SETUP_MODE;
 80010b4:	4b12      	ldr	r3, [pc, #72]	@ (8001100 <System_Default_Mode_Handle+0xcc>)
 80010b6:	2201      	movs	r2, #1
 80010b8:	701a      	strb	r2, [r3, #0]

        // Set the parameter select to the first parameter
        system_state.param_select = SET_MINUTE;
 80010ba:	4b11      	ldr	r3, [pc, #68]	@ (8001100 <System_Default_Mode_Handle+0xcc>)
 80010bc:	2200      	movs	r2, #0
 80010be:	709a      	strb	r2, [r3, #2]
      }
      else if (button->hold_flag)
      {
        // Reserved
      }
      break;
 80010c0:	e016      	b.n	80010f0 <System_Default_Mode_Handle+0xbc>
      else if (button->hold_flag)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	7b9b      	ldrb	r3, [r3, #14]
      break;
 80010c6:	e013      	b.n	80010f0 <System_Default_Mode_Handle+0xbc>

    // Button 4: If pressed, quick jump to Alarm Setup; if held, do nothing (reserved for future use)
    case 4:
      if (button->press_flag)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	7b5b      	ldrb	r3, [r3, #13]
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d006      	beq.n	80010e0 <System_Default_Mode_Handle+0xac>
      {
        // Quick jump to Alarm Setup
        system_state.mode = ALARM_SETUP_MODE;
 80010d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001100 <System_Default_Mode_Handle+0xcc>)
 80010d4:	2202      	movs	r2, #2
 80010d6:	701a      	strb	r2, [r3, #0]

        // Set the parameter select to the first parameter
        system_state.param_select = SET_MINUTE;
 80010d8:	4b09      	ldr	r3, [pc, #36]	@ (8001100 <System_Default_Mode_Handle+0xcc>)
 80010da:	2200      	movs	r2, #0
 80010dc:	709a      	strb	r2, [r3, #2]
      }
      else if (button->hold_flag)
      {
        // Reserved
      }
      break;
 80010de:	e007      	b.n	80010f0 <System_Default_Mode_Handle+0xbc>
      else if (button->hold_flag)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	7b9b      	ldrb	r3, [r3, #14]
      break;
 80010e4:	e004      	b.n	80010f0 <System_Default_Mode_Handle+0xbc>

    default: 
      break;
 80010e6:	bf00      	nop
 80010e8:	e002      	b.n	80010f0 <System_Default_Mode_Handle+0xbc>
      break;
 80010ea:	bf00      	nop
 80010ec:	e000      	b.n	80010f0 <System_Default_Mode_Handle+0xbc>
      break;
 80010ee:	bf00      	nop
  }

  system_state.past_mode = DEFAULT_MODE;
 80010f0:	4b03      	ldr	r3, [pc, #12]	@ (8001100 <System_Default_Mode_Handle+0xcc>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	705a      	strb	r2, [r3, #1]
}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc80      	pop	{r7}
 80010fe:	4770      	bx	lr
 8001100:	200000fc 	.word	0x200000fc

08001104 <System_Time_Setup_Mode_Handle>:
 * @brief  Handles the time setup mode based on button actions.
 * @param  button: Pointer to the BUTTON structure containing button state and index.
 * @retval None
 */
void System_Time_Setup_Mode_Handle (BUTTON_DATA *button)
{
 8001104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001106:	b091      	sub	sp, #68	@ 0x44
 8001108:	af04      	add	r7, sp, #16
 800110a:	6078      	str	r0, [r7, #4]
  switch (button->index) 
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	799b      	ldrb	r3, [r3, #6]
 8001110:	2b04      	cmp	r3, #4
 8001112:	f200 81e2 	bhi.w	80014da <System_Time_Setup_Mode_Handle+0x3d6>
 8001116:	a201      	add	r2, pc, #4	@ (adr r2, 800111c <System_Time_Setup_Mode_Handle+0x18>)
 8001118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800111c:	08001131 	.word	0x08001131
 8001120:	080011d7 	.word	0x080011d7
 8001124:	080012f9 	.word	0x080012f9
 8001128:	08001439 	.word	0x08001439
 800112c:	080014ad 	.word	0x080014ad
  {
    // Button 0: If pressed, cycle through the system modes; if held, set the mode to default
    case 0:
      // If pressed, cycle through the time system modes, but the temporary setting data is still retained (avoid accidental press)
      if (button->press_flag)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	7b5b      	ldrb	r3, [r3, #13]
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2b00      	cmp	r3, #0
 8001138:	d00c      	beq.n	8001154 <System_Time_Setup_Mode_Handle+0x50>
      {
        system_state.mode = (system_state.mode < (SYSTEM_MODE_NUM - 1)) ? (system_state.mode + 1) : 0;
 800113a:	4ba6      	ldr	r3, [pc, #664]	@ (80013d4 <System_Time_Setup_Mode_Handle+0x2d0>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2b04      	cmp	r3, #4
 8001140:	d804      	bhi.n	800114c <System_Time_Setup_Mode_Handle+0x48>
 8001142:	4ba4      	ldr	r3, [pc, #656]	@ (80013d4 <System_Time_Setup_Mode_Handle+0x2d0>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	3301      	adds	r3, #1
 8001148:	b2db      	uxtb	r3, r3
 800114a:	e000      	b.n	800114e <System_Time_Setup_Mode_Handle+0x4a>
 800114c:	2300      	movs	r3, #0
 800114e:	4aa1      	ldr	r2, [pc, #644]	@ (80013d4 <System_Time_Setup_Mode_Handle+0x2d0>)
 8001150:	7013      	strb	r3, [r2, #0]
          NOT_USED_MODE,              // Select: DAY_OF_WEEK_MODE, DATE_OF_MONTH_MODE, NOT_USED_MODE
          time_get_data.dayofweek,    // Day of the week: 1-7 (1 = Sunday, 2 = Monday, ..., 7 = Saturday), or Date of the month: 1-31
          true                        // true = ON, false = OFF
        };
      }
      break;
 8001152:	e1c4      	b.n	80014de <System_Time_Setup_Mode_Handle+0x3da>
      else if (button->hold_flag && !button->latch)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	7b9b      	ldrb	r3, [r3, #14]
 8001158:	b2db      	uxtb	r3, r3
 800115a:	2b00      	cmp	r3, #0
 800115c:	f000 81bf 	beq.w	80014de <System_Time_Setup_Mode_Handle+0x3da>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	7bdb      	ldrb	r3, [r3, #15]
 8001164:	b2db      	uxtb	r3, r3
 8001166:	f083 0301 	eor.w	r3, r3, #1
 800116a:	b2db      	uxtb	r3, r3
 800116c:	2b00      	cmp	r3, #0
 800116e:	f000 81b6 	beq.w	80014de <System_Time_Setup_Mode_Handle+0x3da>
        system_state.mode = DEFAULT_MODE; 
 8001172:	4b98      	ldr	r3, [pc, #608]	@ (80013d4 <System_Time_Setup_Mode_Handle+0x2d0>)
 8001174:	2200      	movs	r2, #0
 8001176:	701a      	strb	r2, [r3, #0]
        button->latch = true;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2201      	movs	r2, #1
 800117c:	73da      	strb	r2, [r3, #15]
          time_get_data.minute,       // Minutes: 0-59
 800117e:	4b96      	ldr	r3, [pc, #600]	@ (80013d8 <System_Time_Setup_Mode_Handle+0x2d4>)
 8001180:	785b      	ldrb	r3, [r3, #1]
 8001182:	fa5f fc83 	uxtb.w	ip, r3
          time_get_data.hour,         // Hours: 0-23
 8001186:	4b94      	ldr	r3, [pc, #592]	@ (80013d8 <System_Time_Setup_Mode_Handle+0x2d4>)
 8001188:	789b      	ldrb	r3, [r3, #2]
 800118a:	b2de      	uxtb	r6, r3
          time_get_data.dayofweek,    // Day of the week: 1-7 (1 = Sunday, 2 = Monday, ..., 7 = Saturday)
 800118c:	4b92      	ldr	r3, [pc, #584]	@ (80013d8 <System_Time_Setup_Mode_Handle+0x2d4>)
 800118e:	78db      	ldrb	r3, [r3, #3]
 8001190:	b2dd      	uxtb	r5, r3
          time_get_data.dateofmonth,  // Date of the month: 1-31
 8001192:	4b91      	ldr	r3, [pc, #580]	@ (80013d8 <System_Time_Setup_Mode_Handle+0x2d4>)
 8001194:	791b      	ldrb	r3, [r3, #4]
 8001196:	b2dc      	uxtb	r4, r3
          time_get_data.month,        // Month: 1-12
 8001198:	4b8f      	ldr	r3, [pc, #572]	@ (80013d8 <System_Time_Setup_Mode_Handle+0x2d4>)
 800119a:	795b      	ldrb	r3, [r3, #5]
 800119c:	b2d8      	uxtb	r0, r3
          time_get_data.year,         // Year: 0-99 (0 = 2000, 1 = 2001, ..., 99 = 2099)
 800119e:	4b8e      	ldr	r3, [pc, #568]	@ (80013d8 <System_Time_Setup_Mode_Handle+0x2d4>)
 80011a0:	799b      	ldrb	r3, [r3, #6]
 80011a2:	b2d9      	uxtb	r1, r3
          time_get_data.dayofweek,    // Day of the week: 1-7 (1 = Sunday, 2 = Monday, ..., 7 = Saturday), or Date of the month: 1-31
 80011a4:	4b8c      	ldr	r3, [pc, #560]	@ (80013d8 <System_Time_Setup_Mode_Handle+0x2d4>)
 80011a6:	78db      	ldrb	r3, [r3, #3]
 80011a8:	b2da      	uxtb	r2, r3
        system_param_data =
 80011aa:	4b8c      	ldr	r3, [pc, #560]	@ (80013dc <System_Time_Setup_Mode_Handle+0x2d8>)
 80011ac:	f883 c000 	strb.w	ip, [r3]
 80011b0:	4b8a      	ldr	r3, [pc, #552]	@ (80013dc <System_Time_Setup_Mode_Handle+0x2d8>)
 80011b2:	705e      	strb	r6, [r3, #1]
 80011b4:	4b89      	ldr	r3, [pc, #548]	@ (80013dc <System_Time_Setup_Mode_Handle+0x2d8>)
 80011b6:	709d      	strb	r5, [r3, #2]
 80011b8:	4b88      	ldr	r3, [pc, #544]	@ (80013dc <System_Time_Setup_Mode_Handle+0x2d8>)
 80011ba:	70dc      	strb	r4, [r3, #3]
 80011bc:	4b87      	ldr	r3, [pc, #540]	@ (80013dc <System_Time_Setup_Mode_Handle+0x2d8>)
 80011be:	7118      	strb	r0, [r3, #4]
 80011c0:	4b86      	ldr	r3, [pc, #536]	@ (80013dc <System_Time_Setup_Mode_Handle+0x2d8>)
 80011c2:	7159      	strb	r1, [r3, #5]
 80011c4:	4b85      	ldr	r3, [pc, #532]	@ (80013dc <System_Time_Setup_Mode_Handle+0x2d8>)
 80011c6:	2102      	movs	r1, #2
 80011c8:	7199      	strb	r1, [r3, #6]
 80011ca:	4b84      	ldr	r3, [pc, #528]	@ (80013dc <System_Time_Setup_Mode_Handle+0x2d8>)
 80011cc:	71da      	strb	r2, [r3, #7]
 80011ce:	4b83      	ldr	r3, [pc, #524]	@ (80013dc <System_Time_Setup_Mode_Handle+0x2d8>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	721a      	strb	r2, [r3, #8]
      break;
 80011d4:	e183      	b.n	80014de <System_Time_Setup_Mode_Handle+0x3da>
    
    // Button 1: If pressed, increment the selected parameter; if held, increment continuously
    case 1: 
      // Pointer to the selected parameter, its maximum value, and minimum value
      uint8_t *paramPtr1 = NULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      uint8_t maxValue1 = 0;    
 80011da:	2300      	movs	r3, #0
 80011dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
      uint8_t minValue1 = 0;  
 80011e0:	2300      	movs	r3, #0
 80011e2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

      // Determine the parameter to increment based on the current selection
      switch (system_state.param_select)
 80011e6:	4b7b      	ldr	r3, [pc, #492]	@ (80013d4 <System_Time_Setup_Mode_Handle+0x2d0>)
 80011e8:	789b      	ldrb	r3, [r3, #2]
 80011ea:	2b05      	cmp	r3, #5
 80011ec:	d844      	bhi.n	8001278 <System_Time_Setup_Mode_Handle+0x174>
 80011ee:	a201      	add	r2, pc, #4	@ (adr r2, 80011f4 <System_Time_Setup_Mode_Handle+0xf0>)
 80011f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011f4:	0800120d 	.word	0x0800120d
 80011f8:	0800121f 	.word	0x0800121f
 80011fc:	08001231 	.word	0x08001231
 8001200:	08001243 	.word	0x08001243
 8001204:	08001255 	.word	0x08001255
 8001208:	08001267 	.word	0x08001267
      {
        case SET_MINUTE:  paramPtr1 = &system_param_data.minute;  maxValue1 = 59; minValue1 = 0; break;
 800120c:	4b73      	ldr	r3, [pc, #460]	@ (80013dc <System_Time_Setup_Mode_Handle+0x2d8>)
 800120e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001210:	233b      	movs	r3, #59	@ 0x3b
 8001212:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001216:	2300      	movs	r3, #0
 8001218:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800121c:	e02d      	b.n	800127a <System_Time_Setup_Mode_Handle+0x176>
        case SET_HOUR:    paramPtr1 = &system_param_data.hour;    maxValue1 = 23; minValue1 = 0; break;
 800121e:	4b70      	ldr	r3, [pc, #448]	@ (80013e0 <System_Time_Setup_Mode_Handle+0x2dc>)
 8001220:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001222:	2317      	movs	r3, #23
 8001224:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001228:	2300      	movs	r3, #0
 800122a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800122e:	e024      	b.n	800127a <System_Time_Setup_Mode_Handle+0x176>
        case SET_DOW:     paramPtr1 = &system_param_data.dow;     maxValue1 = 7;  minValue1 = 1; break;
 8001230:	4b6c      	ldr	r3, [pc, #432]	@ (80013e4 <System_Time_Setup_Mode_Handle+0x2e0>)
 8001232:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001234:	2307      	movs	r3, #7
 8001236:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800123a:	2301      	movs	r3, #1
 800123c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8001240:	e01b      	b.n	800127a <System_Time_Setup_Mode_Handle+0x176>
        case SET_DOM:     paramPtr1 = &system_param_data.dom;     maxValue1 = 31; minValue1 = 1; break;
 8001242:	4b69      	ldr	r3, [pc, #420]	@ (80013e8 <System_Time_Setup_Mode_Handle+0x2e4>)
 8001244:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001246:	231f      	movs	r3, #31
 8001248:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800124c:	2301      	movs	r3, #1
 800124e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8001252:	e012      	b.n	800127a <System_Time_Setup_Mode_Handle+0x176>
        case SET_MONTH:   paramPtr1 = &system_param_data.month;   maxValue1 = 12; minValue1 = 1; break;
 8001254:	4b65      	ldr	r3, [pc, #404]	@ (80013ec <System_Time_Setup_Mode_Handle+0x2e8>)
 8001256:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001258:	230c      	movs	r3, #12
 800125a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800125e:	2301      	movs	r3, #1
 8001260:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8001264:	e009      	b.n	800127a <System_Time_Setup_Mode_Handle+0x176>
        case SET_YEAR:    paramPtr1 = &system_param_data.year;    maxValue1 = 99; minValue1 = 0; break;
 8001266:	4b62      	ldr	r3, [pc, #392]	@ (80013f0 <System_Time_Setup_Mode_Handle+0x2ec>)
 8001268:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800126a:	2363      	movs	r3, #99	@ 0x63
 800126c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001270:	2300      	movs	r3, #0
 8001272:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8001276:	e000      	b.n	800127a <System_Time_Setup_Mode_Handle+0x176>
        default: break;
 8001278:	bf00      	nop
      }

      // Initialize the start tick for button 1 hold detection
      uint32_t startTick1 = 0;
 800127a:	2300      	movs	r3, #0
 800127c:	61bb      	str	r3, [r7, #24]

      // Check if the button is pressed or held
      if (button->press_flag) 
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	7b5b      	ldrb	r3, [r3, #13]
 8001282:	b2db      	uxtb	r3, r3
 8001284:	2b00      	cmp	r3, #0
 8001286:	d013      	beq.n	80012b0 <System_Time_Setup_Mode_Handle+0x1ac>
      {
        // Increment the selected parameter value once for a button press
        if (paramPtr1) 
 8001288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800128a:	2b00      	cmp	r3, #0
 800128c:	f000 8129 	beq.w	80014e2 <System_Time_Setup_Mode_Handle+0x3de>
        {
          // Increment the parameter value, wrapping around if necessary
          *paramPtr1 = (*paramPtr1 < maxValue1) ? (*paramPtr1 + 1) : minValue1;
 8001290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8001298:	429a      	cmp	r2, r3
 800129a:	d904      	bls.n	80012a6 <System_Time_Setup_Mode_Handle+0x1a2>
 800129c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	3301      	adds	r3, #1
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	e001      	b.n	80012aa <System_Time_Setup_Mode_Handle+0x1a6>
 80012a6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80012aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80012ac:	7013      	strb	r3, [r2, #0]

          // Update the start tick for the next hold cycle
          startTick1 = HAL_GetTick();
        }
      } 
      break;
 80012ae:	e118      	b.n	80014e2 <System_Time_Setup_Mode_Handle+0x3de>
      else if (button->hold_flag) 
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	7b9b      	ldrb	r3, [r3, #14]
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	f000 8113 	beq.w	80014e2 <System_Time_Setup_Mode_Handle+0x3de>
        if (HAL_GetTick() - startTick1 >= BUTTON_HOLD_CYCLE) 
 80012bc:	f001 f8da 	bl	8002474 <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	2bf9      	cmp	r3, #249	@ 0xf9
 80012c8:	f240 810b 	bls.w	80014e2 <System_Time_Setup_Mode_Handle+0x3de>
          if (paramPtr1) 
 80012cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d00e      	beq.n	80012f0 <System_Time_Setup_Mode_Handle+0x1ec>
            *paramPtr1 = (*paramPtr1 < maxValue1) ? (*paramPtr1 + 1) : minValue1;
 80012d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80012da:	429a      	cmp	r2, r3
 80012dc:	d904      	bls.n	80012e8 <System_Time_Setup_Mode_Handle+0x1e4>
 80012de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	3301      	adds	r3, #1
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	e001      	b.n	80012ec <System_Time_Setup_Mode_Handle+0x1e8>
 80012e8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80012ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80012ee:	7013      	strb	r3, [r2, #0]
          startTick1 = HAL_GetTick();
 80012f0:	f001 f8c0 	bl	8002474 <HAL_GetTick>
 80012f4:	61b8      	str	r0, [r7, #24]
      break;
 80012f6:	e0f4      	b.n	80014e2 <System_Time_Setup_Mode_Handle+0x3de>
    
      // Button 2: If pressed, decrement the selected parameter; if held, decrement continuously
      case 2: 
        // Pointer to the selected parameter, its maximum value, and minimum value
        uint8_t *paramPtr2 = NULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	627b      	str	r3, [r7, #36]	@ 0x24
        uint8_t maxValue2 = 0;    
 80012fc:	2300      	movs	r3, #0
 80012fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        uint8_t minValue2 = 0;  
 8001302:	2300      	movs	r3, #0
 8001304:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

        // Determine the parameter to decrement based on the current selection
        switch (system_state.param_select)
 8001308:	4b32      	ldr	r3, [pc, #200]	@ (80013d4 <System_Time_Setup_Mode_Handle+0x2d0>)
 800130a:	789b      	ldrb	r3, [r3, #2]
 800130c:	2b05      	cmp	r3, #5
 800130e:	d845      	bhi.n	800139c <System_Time_Setup_Mode_Handle+0x298>
 8001310:	a201      	add	r2, pc, #4	@ (adr r2, 8001318 <System_Time_Setup_Mode_Handle+0x214>)
 8001312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001316:	bf00      	nop
 8001318:	08001331 	.word	0x08001331
 800131c:	08001343 	.word	0x08001343
 8001320:	08001355 	.word	0x08001355
 8001324:	08001367 	.word	0x08001367
 8001328:	08001379 	.word	0x08001379
 800132c:	0800138b 	.word	0x0800138b
        {
          case SET_MINUTE:  paramPtr2 = &system_param_data.minute;  maxValue2 = 59; minValue2 = 0; break;
 8001330:	4b2a      	ldr	r3, [pc, #168]	@ (80013dc <System_Time_Setup_Mode_Handle+0x2d8>)
 8001332:	627b      	str	r3, [r7, #36]	@ 0x24
 8001334:	233b      	movs	r3, #59	@ 0x3b
 8001336:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800133a:	2300      	movs	r3, #0
 800133c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001340:	e02d      	b.n	800139e <System_Time_Setup_Mode_Handle+0x29a>
          case SET_HOUR:    paramPtr2 = &system_param_data.hour;    maxValue2 = 23; minValue2 = 0; break;
 8001342:	4b27      	ldr	r3, [pc, #156]	@ (80013e0 <System_Time_Setup_Mode_Handle+0x2dc>)
 8001344:	627b      	str	r3, [r7, #36]	@ 0x24
 8001346:	2317      	movs	r3, #23
 8001348:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800134c:	2300      	movs	r3, #0
 800134e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001352:	e024      	b.n	800139e <System_Time_Setup_Mode_Handle+0x29a>
          case SET_DOW:     paramPtr2 = &system_param_data.dow;     maxValue2 = 7;  minValue2 = 1; break;
 8001354:	4b23      	ldr	r3, [pc, #140]	@ (80013e4 <System_Time_Setup_Mode_Handle+0x2e0>)
 8001356:	627b      	str	r3, [r7, #36]	@ 0x24
 8001358:	2307      	movs	r3, #7
 800135a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800135e:	2301      	movs	r3, #1
 8001360:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001364:	e01b      	b.n	800139e <System_Time_Setup_Mode_Handle+0x29a>
          case SET_DOM:     paramPtr2 = &system_param_data.dom;     maxValue2 = 31; minValue2 = 1; break;
 8001366:	4b20      	ldr	r3, [pc, #128]	@ (80013e8 <System_Time_Setup_Mode_Handle+0x2e4>)
 8001368:	627b      	str	r3, [r7, #36]	@ 0x24
 800136a:	231f      	movs	r3, #31
 800136c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001370:	2301      	movs	r3, #1
 8001372:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001376:	e012      	b.n	800139e <System_Time_Setup_Mode_Handle+0x29a>
          case SET_MONTH:   paramPtr2 = &system_param_data.month;   maxValue2 = 12; minValue2 = 1; break;
 8001378:	4b1c      	ldr	r3, [pc, #112]	@ (80013ec <System_Time_Setup_Mode_Handle+0x2e8>)
 800137a:	627b      	str	r3, [r7, #36]	@ 0x24
 800137c:	230c      	movs	r3, #12
 800137e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001382:	2301      	movs	r3, #1
 8001384:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001388:	e009      	b.n	800139e <System_Time_Setup_Mode_Handle+0x29a>
          case SET_YEAR:    paramPtr2 = &system_param_data.year;    maxValue2 = 99; minValue2 = 0; break;
 800138a:	4b19      	ldr	r3, [pc, #100]	@ (80013f0 <System_Time_Setup_Mode_Handle+0x2ec>)
 800138c:	627b      	str	r3, [r7, #36]	@ 0x24
 800138e:	2363      	movs	r3, #99	@ 0x63
 8001390:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001394:	2300      	movs	r3, #0
 8001396:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800139a:	e000      	b.n	800139e <System_Time_Setup_Mode_Handle+0x29a>
          default: break;
 800139c:	bf00      	nop
        }

        // Initialize the start tick for button 2 hold detection
        uint32_t startTick2 = 0;
 800139e:	2300      	movs	r3, #0
 80013a0:	61fb      	str	r3, [r7, #28]

        // Check if the button is pressed or held
        if (button->press_flag) 
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	7b5b      	ldrb	r3, [r3, #13]
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d023      	beq.n	80013f4 <System_Time_Setup_Mode_Handle+0x2f0>
        {
          // Decrement the selected parameter value once for a button press
          if (paramPtr2) 
 80013ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	f000 8099 	beq.w	80014e6 <System_Time_Setup_Mode_Handle+0x3e2>
          {
            // Decrement the parameter value, wrapping around if necessary
            *paramPtr2 = (*paramPtr2 > minValue2) ? (*paramPtr2 - 1) : maxValue2;
 80013b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80013bc:	429a      	cmp	r2, r3
 80013be:	d204      	bcs.n	80013ca <System_Time_Setup_Mode_Handle+0x2c6>
 80013c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	3b01      	subs	r3, #1
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	e001      	b.n	80013ce <System_Time_Setup_Mode_Handle+0x2ca>
 80013ca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80013ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013d0:	7013      	strb	r3, [r2, #0]

            // Update the start tick for the next hold cycle
            startTick2 = HAL_GetTick();
          }
        } 
        break;
 80013d2:	e088      	b.n	80014e6 <System_Time_Setup_Mode_Handle+0x3e2>
 80013d4:	200000fc 	.word	0x200000fc
 80013d8:	20000110 	.word	0x20000110
 80013dc:	20000104 	.word	0x20000104
 80013e0:	20000105 	.word	0x20000105
 80013e4:	20000106 	.word	0x20000106
 80013e8:	20000107 	.word	0x20000107
 80013ec:	20000108 	.word	0x20000108
 80013f0:	20000109 	.word	0x20000109
        else if (button->hold_flag) 
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	7b9b      	ldrb	r3, [r3, #14]
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d073      	beq.n	80014e6 <System_Time_Setup_Mode_Handle+0x3e2>
          if (HAL_GetTick() - startTick2 >= BUTTON_HOLD_CYCLE) 
 80013fe:	f001 f839 	bl	8002474 <HAL_GetTick>
 8001402:	4602      	mov	r2, r0
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	2bf9      	cmp	r3, #249	@ 0xf9
 800140a:	d96c      	bls.n	80014e6 <System_Time_Setup_Mode_Handle+0x3e2>
            if (paramPtr2) 
 800140c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800140e:	2b00      	cmp	r3, #0
 8001410:	d00e      	beq.n	8001430 <System_Time_Setup_Mode_Handle+0x32c>
              *paramPtr2 = (*paramPtr2 > minValue2) ? (*paramPtr2 - 1) : maxValue2;
 8001412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 800141a:	429a      	cmp	r2, r3
 800141c:	d204      	bcs.n	8001428 <System_Time_Setup_Mode_Handle+0x324>
 800141e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	3b01      	subs	r3, #1
 8001424:	b2db      	uxtb	r3, r3
 8001426:	e001      	b.n	800142c <System_Time_Setup_Mode_Handle+0x328>
 8001428:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800142c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800142e:	7013      	strb	r3, [r2, #0]
            startTick2 = HAL_GetTick();
 8001430:	f001 f820 	bl	8002474 <HAL_GetTick>
 8001434:	61f8      	str	r0, [r7, #28]
        break;
 8001436:	e056      	b.n	80014e6 <System_Time_Setup_Mode_Handle+0x3e2>
    
    // Button 3: If pressed, move to the next field; if held, set the time using the current parameter values
    case 3: 
      // If the button is pressed, move to the next parameter field, wrapping around if necessary
      if(button->press_flag)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	7b5b      	ldrb	r3, [r3, #13]
 800143c:	b2db      	uxtb	r3, r3
 800143e:	2b00      	cmp	r3, #0
 8001440:	d00e      	beq.n	8001460 <System_Time_Setup_Mode_Handle+0x35c>
      {
        if (system_state.param_select == SET_YEAR)
 8001442:	4b2e      	ldr	r3, [pc, #184]	@ (80014fc <System_Time_Setup_Mode_Handle+0x3f8>)
 8001444:	789b      	ldrb	r3, [r3, #2]
 8001446:	2b05      	cmp	r3, #5
 8001448:	d103      	bne.n	8001452 <System_Time_Setup_Mode_Handle+0x34e>
        {
          system_state.param_select = SET_MINUTE;
 800144a:	4b2c      	ldr	r3, [pc, #176]	@ (80014fc <System_Time_Setup_Mode_Handle+0x3f8>)
 800144c:	2200      	movs	r2, #0
 800144e:	709a      	strb	r2, [r3, #2]

        button->latch = true;

        break;
      }
      break;
 8001450:	e04b      	b.n	80014ea <System_Time_Setup_Mode_Handle+0x3e6>
          system_state.param_select += 1;
 8001452:	4b2a      	ldr	r3, [pc, #168]	@ (80014fc <System_Time_Setup_Mode_Handle+0x3f8>)
 8001454:	789b      	ldrb	r3, [r3, #2]
 8001456:	3301      	adds	r3, #1
 8001458:	b2da      	uxtb	r2, r3
 800145a:	4b28      	ldr	r3, [pc, #160]	@ (80014fc <System_Time_Setup_Mode_Handle+0x3f8>)
 800145c:	709a      	strb	r2, [r3, #2]
      break;
 800145e:	e044      	b.n	80014ea <System_Time_Setup_Mode_Handle+0x3e6>
      else if (button->hold_flag && !button->latch) 
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	7b9b      	ldrb	r3, [r3, #14]
 8001464:	b2db      	uxtb	r3, r3
 8001466:	2b00      	cmp	r3, #0
 8001468:	d03f      	beq.n	80014ea <System_Time_Setup_Mode_Handle+0x3e6>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	7bdb      	ldrb	r3, [r3, #15]
 800146e:	b2db      	uxtb	r3, r3
 8001470:	f083 0301 	eor.w	r3, r3, #1
 8001474:	b2db      	uxtb	r3, r3
 8001476:	2b00      	cmp	r3, #0
 8001478:	d037      	beq.n	80014ea <System_Time_Setup_Mode_Handle+0x3e6>
        Time_Init
 800147a:	4b21      	ldr	r3, [pc, #132]	@ (8001500 <System_Time_Setup_Mode_Handle+0x3fc>)
 800147c:	7818      	ldrb	r0, [r3, #0]
 800147e:	4b20      	ldr	r3, [pc, #128]	@ (8001500 <System_Time_Setup_Mode_Handle+0x3fc>)
 8001480:	785c      	ldrb	r4, [r3, #1]
 8001482:	4b1f      	ldr	r3, [pc, #124]	@ (8001500 <System_Time_Setup_Mode_Handle+0x3fc>)
 8001484:	789d      	ldrb	r5, [r3, #2]
 8001486:	4b1e      	ldr	r3, [pc, #120]	@ (8001500 <System_Time_Setup_Mode_Handle+0x3fc>)
 8001488:	78db      	ldrb	r3, [r3, #3]
 800148a:	4a1d      	ldr	r2, [pc, #116]	@ (8001500 <System_Time_Setup_Mode_Handle+0x3fc>)
 800148c:	7912      	ldrb	r2, [r2, #4]
 800148e:	491c      	ldr	r1, [pc, #112]	@ (8001500 <System_Time_Setup_Mode_Handle+0x3fc>)
 8001490:	7949      	ldrb	r1, [r1, #5]
 8001492:	9102      	str	r1, [sp, #8]
 8001494:	9201      	str	r2, [sp, #4]
 8001496:	9300      	str	r3, [sp, #0]
 8001498:	462b      	mov	r3, r5
 800149a:	4622      	mov	r2, r4
 800149c:	4601      	mov	r1, r0
 800149e:	2000      	movs	r0, #0
 80014a0:	f7ff face 	bl	8000a40 <Time_Init>
        button->latch = true;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2201      	movs	r2, #1
 80014a8:	73da      	strb	r2, [r3, #15]
        break;
 80014aa:	e01f      	b.n	80014ec <System_Time_Setup_Mode_Handle+0x3e8>

    // Button 4: If pressed, move to the previous field; if held, do nothing (reserved for future use)
    case 4: 
      // If the button is pressed, move to the previous parameter field, wrapping around if necessary
      if (button->press_flag)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	7b5b      	ldrb	r3, [r3, #13]
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d00e      	beq.n	80014d4 <System_Time_Setup_Mode_Handle+0x3d0>
      {
        if (system_state.param_select == SET_MINUTE)
 80014b6:	4b11      	ldr	r3, [pc, #68]	@ (80014fc <System_Time_Setup_Mode_Handle+0x3f8>)
 80014b8:	789b      	ldrb	r3, [r3, #2]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d103      	bne.n	80014c6 <System_Time_Setup_Mode_Handle+0x3c2>
        {
          system_state.param_select = SET_YEAR;
 80014be:	4b0f      	ldr	r3, [pc, #60]	@ (80014fc <System_Time_Setup_Mode_Handle+0x3f8>)
 80014c0:	2205      	movs	r2, #5
 80014c2:	709a      	strb	r2, [r3, #2]
      // If the button is held down, do nothing (reserved for future use)
      else if (button->hold_flag) 
      {
        // Reserved
      }
      break;
 80014c4:	e012      	b.n	80014ec <System_Time_Setup_Mode_Handle+0x3e8>
          system_state.param_select -= 1;
 80014c6:	4b0d      	ldr	r3, [pc, #52]	@ (80014fc <System_Time_Setup_Mode_Handle+0x3f8>)
 80014c8:	789b      	ldrb	r3, [r3, #2]
 80014ca:	3b01      	subs	r3, #1
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	4b0b      	ldr	r3, [pc, #44]	@ (80014fc <System_Time_Setup_Mode_Handle+0x3f8>)
 80014d0:	709a      	strb	r2, [r3, #2]
      break;
 80014d2:	e00b      	b.n	80014ec <System_Time_Setup_Mode_Handle+0x3e8>
      else if (button->hold_flag) 
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	7b9b      	ldrb	r3, [r3, #14]
      break;
 80014d8:	e008      	b.n	80014ec <System_Time_Setup_Mode_Handle+0x3e8>

    default: 
      break;
 80014da:	bf00      	nop
 80014dc:	e006      	b.n	80014ec <System_Time_Setup_Mode_Handle+0x3e8>
      break;
 80014de:	bf00      	nop
 80014e0:	e004      	b.n	80014ec <System_Time_Setup_Mode_Handle+0x3e8>
      break;
 80014e2:	bf00      	nop
 80014e4:	e002      	b.n	80014ec <System_Time_Setup_Mode_Handle+0x3e8>
        break;
 80014e6:	bf00      	nop
 80014e8:	e000      	b.n	80014ec <System_Time_Setup_Mode_Handle+0x3e8>
      break;
 80014ea:	bf00      	nop
  }

  system_state.past_mode = TIME_SETUP_MODE;
 80014ec:	4b03      	ldr	r3, [pc, #12]	@ (80014fc <System_Time_Setup_Mode_Handle+0x3f8>)
 80014ee:	2201      	movs	r2, #1
 80014f0:	705a      	strb	r2, [r3, #1]
}
 80014f2:	bf00      	nop
 80014f4:	3734      	adds	r7, #52	@ 0x34
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014fa:	bf00      	nop
 80014fc:	200000fc 	.word	0x200000fc
 8001500:	20000104 	.word	0x20000104

08001504 <System_Alarm_Setup_Mode_Handle>:
 * @brief  Handles the alarm setup mode based on button actions.
 * @param  button: Pointer to the BUTTON structure containing button state and index.
 * @retval None
 */
void System_Alarm_Setup_Mode_Handle (BUTTON_DATA *button)
{
 8001504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001506:	b091      	sub	sp, #68	@ 0x44
 8001508:	af04      	add	r7, sp, #16
 800150a:	6078      	str	r0, [r7, #4]
  switch (button->index) 
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	799b      	ldrb	r3, [r3, #6]
 8001510:	2b04      	cmp	r3, #4
 8001512:	f200 829f 	bhi.w	8001a54 <System_Alarm_Setup_Mode_Handle+0x550>
 8001516:	a201      	add	r2, pc, #4	@ (adr r2, 800151c <System_Alarm_Setup_Mode_Handle+0x18>)
 8001518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800151c:	08001531 	.word	0x08001531
 8001520:	080015d7 	.word	0x080015d7
 8001524:	08001709 	.word	0x08001709
 8001528:	080018a7 	.word	0x080018a7
 800152c:	080019bb 	.word	0x080019bb
  {
    // Button 0: If pressed, cycle through the system modes; if held, set the mode to default
    case 0:
      // If pressed, cycle through the time system modes, but the temporary setting data is still retained (avoid accidental press)
      if (button->press_flag)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	7b5b      	ldrb	r3, [r3, #13]
 8001534:	b2db      	uxtb	r3, r3
 8001536:	2b00      	cmp	r3, #0
 8001538:	d00c      	beq.n	8001554 <System_Alarm_Setup_Mode_Handle+0x50>
      {
        system_state.mode = (system_state.mode < (SYSTEM_MODE_NUM - 1)) ? (system_state.mode + 1) : 0;
 800153a:	4b9e      	ldr	r3, [pc, #632]	@ (80017b4 <System_Alarm_Setup_Mode_Handle+0x2b0>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2b04      	cmp	r3, #4
 8001540:	d804      	bhi.n	800154c <System_Alarm_Setup_Mode_Handle+0x48>
 8001542:	4b9c      	ldr	r3, [pc, #624]	@ (80017b4 <System_Alarm_Setup_Mode_Handle+0x2b0>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	3301      	adds	r3, #1
 8001548:	b2db      	uxtb	r3, r3
 800154a:	e000      	b.n	800154e <System_Alarm_Setup_Mode_Handle+0x4a>
 800154c:	2300      	movs	r3, #0
 800154e:	4a99      	ldr	r2, [pc, #612]	@ (80017b4 <System_Alarm_Setup_Mode_Handle+0x2b0>)
 8001550:	7013      	strb	r3, [r2, #0]
          NOT_USED_MODE,              // Select: DAY_OF_WEEK_MODE, DATE_OF_MONTH_MODE, NOT_USED_MODE
          time_get_data.dayofweek,    // Day of the week: 1-7 (1 = Sunday, 2 = Monday, ..., 7 = Saturday), or Date of the month: 1-31
          true                        // true = ON, false = OFF
        };
      }
      break;
 8001552:	e281      	b.n	8001a58 <System_Alarm_Setup_Mode_Handle+0x554>
      else if (button->hold_flag && !button->latch)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	7b9b      	ldrb	r3, [r3, #14]
 8001558:	b2db      	uxtb	r3, r3
 800155a:	2b00      	cmp	r3, #0
 800155c:	f000 827c 	beq.w	8001a58 <System_Alarm_Setup_Mode_Handle+0x554>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	7bdb      	ldrb	r3, [r3, #15]
 8001564:	b2db      	uxtb	r3, r3
 8001566:	f083 0301 	eor.w	r3, r3, #1
 800156a:	b2db      	uxtb	r3, r3
 800156c:	2b00      	cmp	r3, #0
 800156e:	f000 8273 	beq.w	8001a58 <System_Alarm_Setup_Mode_Handle+0x554>
        system_state.mode = DEFAULT_MODE; 
 8001572:	4b90      	ldr	r3, [pc, #576]	@ (80017b4 <System_Alarm_Setup_Mode_Handle+0x2b0>)
 8001574:	2200      	movs	r2, #0
 8001576:	701a      	strb	r2, [r3, #0]
        button->latch = true;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2201      	movs	r2, #1
 800157c:	73da      	strb	r2, [r3, #15]
          time_get_data.minute,       // Minutes: 0-59
 800157e:	4b8e      	ldr	r3, [pc, #568]	@ (80017b8 <System_Alarm_Setup_Mode_Handle+0x2b4>)
 8001580:	785b      	ldrb	r3, [r3, #1]
 8001582:	fa5f fc83 	uxtb.w	ip, r3
          time_get_data.hour,         // Hours: 0-23
 8001586:	4b8c      	ldr	r3, [pc, #560]	@ (80017b8 <System_Alarm_Setup_Mode_Handle+0x2b4>)
 8001588:	789b      	ldrb	r3, [r3, #2]
 800158a:	b2de      	uxtb	r6, r3
          time_get_data.dayofweek,    // Day of the week: 1-7 (1 = Sunday, 2 = Monday, ..., 7 = Saturday)
 800158c:	4b8a      	ldr	r3, [pc, #552]	@ (80017b8 <System_Alarm_Setup_Mode_Handle+0x2b4>)
 800158e:	78db      	ldrb	r3, [r3, #3]
 8001590:	b2dd      	uxtb	r5, r3
          time_get_data.dateofmonth,  // Date of the month: 1-31
 8001592:	4b89      	ldr	r3, [pc, #548]	@ (80017b8 <System_Alarm_Setup_Mode_Handle+0x2b4>)
 8001594:	791b      	ldrb	r3, [r3, #4]
 8001596:	b2dc      	uxtb	r4, r3
          time_get_data.month,        // Month: 1-12
 8001598:	4b87      	ldr	r3, [pc, #540]	@ (80017b8 <System_Alarm_Setup_Mode_Handle+0x2b4>)
 800159a:	795b      	ldrb	r3, [r3, #5]
 800159c:	b2d8      	uxtb	r0, r3
          time_get_data.year,         // Year: 0-99 (0 = 2000, 1 = 2001, ..., 99 = 2099)
 800159e:	4b86      	ldr	r3, [pc, #536]	@ (80017b8 <System_Alarm_Setup_Mode_Handle+0x2b4>)
 80015a0:	799b      	ldrb	r3, [r3, #6]
 80015a2:	b2d9      	uxtb	r1, r3
          time_get_data.dayofweek,    // Day of the week: 1-7 (1 = Sunday, 2 = Monday, ..., 7 = Saturday), or Date of the month: 1-31
 80015a4:	4b84      	ldr	r3, [pc, #528]	@ (80017b8 <System_Alarm_Setup_Mode_Handle+0x2b4>)
 80015a6:	78db      	ldrb	r3, [r3, #3]
 80015a8:	b2da      	uxtb	r2, r3
        system_param_data =
 80015aa:	4b84      	ldr	r3, [pc, #528]	@ (80017bc <System_Alarm_Setup_Mode_Handle+0x2b8>)
 80015ac:	f883 c000 	strb.w	ip, [r3]
 80015b0:	4b82      	ldr	r3, [pc, #520]	@ (80017bc <System_Alarm_Setup_Mode_Handle+0x2b8>)
 80015b2:	705e      	strb	r6, [r3, #1]
 80015b4:	4b81      	ldr	r3, [pc, #516]	@ (80017bc <System_Alarm_Setup_Mode_Handle+0x2b8>)
 80015b6:	709d      	strb	r5, [r3, #2]
 80015b8:	4b80      	ldr	r3, [pc, #512]	@ (80017bc <System_Alarm_Setup_Mode_Handle+0x2b8>)
 80015ba:	70dc      	strb	r4, [r3, #3]
 80015bc:	4b7f      	ldr	r3, [pc, #508]	@ (80017bc <System_Alarm_Setup_Mode_Handle+0x2b8>)
 80015be:	7118      	strb	r0, [r3, #4]
 80015c0:	4b7e      	ldr	r3, [pc, #504]	@ (80017bc <System_Alarm_Setup_Mode_Handle+0x2b8>)
 80015c2:	7159      	strb	r1, [r3, #5]
 80015c4:	4b7d      	ldr	r3, [pc, #500]	@ (80017bc <System_Alarm_Setup_Mode_Handle+0x2b8>)
 80015c6:	2102      	movs	r1, #2
 80015c8:	7199      	strb	r1, [r3, #6]
 80015ca:	4b7c      	ldr	r3, [pc, #496]	@ (80017bc <System_Alarm_Setup_Mode_Handle+0x2b8>)
 80015cc:	71da      	strb	r2, [r3, #7]
 80015ce:	4b7b      	ldr	r3, [pc, #492]	@ (80017bc <System_Alarm_Setup_Mode_Handle+0x2b8>)
 80015d0:	2201      	movs	r2, #1
 80015d2:	721a      	strb	r2, [r3, #8]
      break;
 80015d4:	e240      	b.n	8001a58 <System_Alarm_Setup_Mode_Handle+0x554>

    // Button 1: If pressed, increment the selected parameter; if held, increment continuously
    case 1: 
      // Pointer to the selected parameter, its maximum value, and minimum value
      uint8_t *paramPtr1 = NULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      uint8_t maxValue1 = 0;    
 80015da:	2300      	movs	r3, #0
 80015dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
      uint8_t minValue1 = 0;  
 80015e0:	2300      	movs	r3, #0
 80015e2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

      // Determine the parameter to increment based on the current selection
      switch (system_state.param_select)
 80015e6:	4b73      	ldr	r3, [pc, #460]	@ (80017b4 <System_Alarm_Setup_Mode_Handle+0x2b0>)
 80015e8:	789b      	ldrb	r3, [r3, #2]
 80015ea:	2b08      	cmp	r3, #8
 80015ec:	d848      	bhi.n	8001680 <System_Alarm_Setup_Mode_Handle+0x17c>
 80015ee:	a201      	add	r2, pc, #4	@ (adr r2, 80015f4 <System_Alarm_Setup_Mode_Handle+0xf0>)
 80015f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015f4:	08001619 	.word	0x08001619
 80015f8:	0800162b 	.word	0x0800162b
 80015fc:	08001681 	.word	0x08001681
 8001600:	08001681 	.word	0x08001681
 8001604:	08001681 	.word	0x08001681
 8001608:	08001681 	.word	0x08001681
 800160c:	0800163d 	.word	0x0800163d
 8001610:	0800164f 	.word	0x0800164f
 8001614:	08001661 	.word	0x08001661
      {
        case SET_MINUTE:  paramPtr1 = &system_param_data.minute;  maxValue1 = 59; minValue1 = 0; break;
 8001618:	4b68      	ldr	r3, [pc, #416]	@ (80017bc <System_Alarm_Setup_Mode_Handle+0x2b8>)
 800161a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800161c:	233b      	movs	r3, #59	@ 0x3b
 800161e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001622:	2300      	movs	r3, #0
 8001624:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8001628:	e02b      	b.n	8001682 <System_Alarm_Setup_Mode_Handle+0x17e>
        case SET_HOUR:    paramPtr1 = &system_param_data.hour;    maxValue1 = 23; minValue1 = 0; break;
 800162a:	4b65      	ldr	r3, [pc, #404]	@ (80017c0 <System_Alarm_Setup_Mode_Handle+0x2bc>)
 800162c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800162e:	2317      	movs	r3, #23
 8001630:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001634:	2300      	movs	r3, #0
 8001636:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800163a:	e022      	b.n	8001682 <System_Alarm_Setup_Mode_Handle+0x17e>
        case SET_DY_DT:   paramPtr1 = (uint8_t *)&system_param_data.dy_dt; maxValue1 = 2; minValue1 = 0; break;
 800163c:	4b61      	ldr	r3, [pc, #388]	@ (80017c4 <System_Alarm_Setup_Mode_Handle+0x2c0>)
 800163e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001640:	2302      	movs	r3, #2
 8001642:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001646:	2300      	movs	r3, #0
 8001648:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800164c:	e019      	b.n	8001682 <System_Alarm_Setup_Mode_Handle+0x17e>
        case SET_DOW_DOM: paramPtr1 = &system_param_data.dow_dom; maxValue1 = 31; minValue1 = 1; break;
 800164e:	4b5e      	ldr	r3, [pc, #376]	@ (80017c8 <System_Alarm_Setup_Mode_Handle+0x2c4>)
 8001650:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001652:	231f      	movs	r3, #31
 8001654:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001658:	2301      	movs	r3, #1
 800165a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800165e:	e010      	b.n	8001682 <System_Alarm_Setup_Mode_Handle+0x17e>
        case SET_ON_OFF:  system_param_data.on_off = !system_param_data.on_off;                  break;
 8001660:	4b56      	ldr	r3, [pc, #344]	@ (80017bc <System_Alarm_Setup_Mode_Handle+0x2b8>)
 8001662:	7a1b      	ldrb	r3, [r3, #8]
 8001664:	2b00      	cmp	r3, #0
 8001666:	bf14      	ite	ne
 8001668:	2301      	movne	r3, #1
 800166a:	2300      	moveq	r3, #0
 800166c:	b2db      	uxtb	r3, r3
 800166e:	f083 0301 	eor.w	r3, r3, #1
 8001672:	b2db      	uxtb	r3, r3
 8001674:	f003 0301 	and.w	r3, r3, #1
 8001678:	b2da      	uxtb	r2, r3
 800167a:	4b50      	ldr	r3, [pc, #320]	@ (80017bc <System_Alarm_Setup_Mode_Handle+0x2b8>)
 800167c:	721a      	strb	r2, [r3, #8]
 800167e:	e000      	b.n	8001682 <System_Alarm_Setup_Mode_Handle+0x17e>
        default: break;
 8001680:	bf00      	nop
      }

      if (system_state.param_select == SET_ON_OFF)
 8001682:	4b4c      	ldr	r3, [pc, #304]	@ (80017b4 <System_Alarm_Setup_Mode_Handle+0x2b0>)
 8001684:	789b      	ldrb	r3, [r3, #2]
 8001686:	2b08      	cmp	r3, #8
 8001688:	f000 81e8 	beq.w	8001a5c <System_Alarm_Setup_Mode_Handle+0x558>
      {
        break;
      }

      // Initialize the start tick for button 1 hold detection
      uint32_t startTick1 = 0;
 800168c:	2300      	movs	r3, #0
 800168e:	617b      	str	r3, [r7, #20]
      
      // Check if the button is pressed or held
      if (button->press_flag) 
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	7b5b      	ldrb	r3, [r3, #13]
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b00      	cmp	r3, #0
 8001698:	d013      	beq.n	80016c2 <System_Alarm_Setup_Mode_Handle+0x1be>
      {
        // Increment the selected parameter value once for a button press
        if (paramPtr1) 
 800169a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800169c:	2b00      	cmp	r3, #0
 800169e:	f000 81df 	beq.w	8001a60 <System_Alarm_Setup_Mode_Handle+0x55c>
        {
          // Increment the parameter value, wrapping around if necessary
          *paramPtr1 = (*paramPtr1 < maxValue1) ? (*paramPtr1 + 1) : minValue1;
 80016a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d904      	bls.n	80016b8 <System_Alarm_Setup_Mode_Handle+0x1b4>
 80016ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	3301      	adds	r3, #1
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	e001      	b.n	80016bc <System_Alarm_Setup_Mode_Handle+0x1b8>
 80016b8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80016bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016be:	7013      	strb	r3, [r2, #0]
        }

        // Update the start tick for the next hold cycle
        startTick1 = HAL_GetTick();
      } 
      break;
 80016c0:	e1ce      	b.n	8001a60 <System_Alarm_Setup_Mode_Handle+0x55c>
      else if (button->hold_flag) 
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	7b9b      	ldrb	r3, [r3, #14]
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	f000 81c9 	beq.w	8001a60 <System_Alarm_Setup_Mode_Handle+0x55c>
        if (HAL_GetTick() - startTick1 >= BUTTON_HOLD_CYCLE) 
 80016ce:	f000 fed1 	bl	8002474 <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2bf9      	cmp	r3, #249	@ 0xf9
 80016da:	d911      	bls.n	8001700 <System_Alarm_Setup_Mode_Handle+0x1fc>
          if (paramPtr1) 
 80016dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d00e      	beq.n	8001700 <System_Alarm_Setup_Mode_Handle+0x1fc>
            *paramPtr1 = (*paramPtr1 < maxValue1) ? (*paramPtr1 + 1) : minValue1;
 80016e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d904      	bls.n	80016f8 <System_Alarm_Setup_Mode_Handle+0x1f4>
 80016ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	3301      	adds	r3, #1
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	e001      	b.n	80016fc <System_Alarm_Setup_Mode_Handle+0x1f8>
 80016f8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80016fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016fe:	7013      	strb	r3, [r2, #0]
        startTick1 = HAL_GetTick();
 8001700:	f000 feb8 	bl	8002474 <HAL_GetTick>
 8001704:	6178      	str	r0, [r7, #20]
      break;
 8001706:	e1ab      	b.n	8001a60 <System_Alarm_Setup_Mode_Handle+0x55c>

      case 2: // BTN2: Decrement current value or scroll slots
      {
        // Pointer to the selected parameter, its maximum value, and minimum value
        uint8_t *paramPtr2 = NULL;
 8001708:	2300      	movs	r3, #0
 800170a:	627b      	str	r3, [r7, #36]	@ 0x24
        uint8_t maxValue2 = 0;    
 800170c:	2300      	movs	r3, #0
 800170e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        uint8_t minValue2 = 0;  
 8001712:	2300      	movs	r3, #0
 8001714:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

        // Determine the parameter to decrement based on the current selection
        switch (system_state.param_select)
 8001718:	4b26      	ldr	r3, [pc, #152]	@ (80017b4 <System_Alarm_Setup_Mode_Handle+0x2b0>)
 800171a:	789b      	ldrb	r3, [r3, #2]
 800171c:	2b08      	cmp	r3, #8
 800171e:	d855      	bhi.n	80017cc <System_Alarm_Setup_Mode_Handle+0x2c8>
 8001720:	a201      	add	r2, pc, #4	@ (adr r2, 8001728 <System_Alarm_Setup_Mode_Handle+0x224>)
 8001722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001726:	bf00      	nop
 8001728:	0800174d 	.word	0x0800174d
 800172c:	0800175f 	.word	0x0800175f
 8001730:	080017cd 	.word	0x080017cd
 8001734:	080017cd 	.word	0x080017cd
 8001738:	080017cd 	.word	0x080017cd
 800173c:	080017cd 	.word	0x080017cd
 8001740:	08001771 	.word	0x08001771
 8001744:	08001783 	.word	0x08001783
 8001748:	08001795 	.word	0x08001795
        {
          case SET_MINUTE:  paramPtr2 = &system_param_data.minute;  maxValue2 = 59; minValue2 = 0; break;
 800174c:	4b1b      	ldr	r3, [pc, #108]	@ (80017bc <System_Alarm_Setup_Mode_Handle+0x2b8>)
 800174e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001750:	233b      	movs	r3, #59	@ 0x3b
 8001752:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001756:	2300      	movs	r3, #0
 8001758:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800175c:	e037      	b.n	80017ce <System_Alarm_Setup_Mode_Handle+0x2ca>
          case SET_HOUR:    paramPtr2 = &system_param_data.hour;    maxValue2 = 23; minValue2 = 0; break;
 800175e:	4b18      	ldr	r3, [pc, #96]	@ (80017c0 <System_Alarm_Setup_Mode_Handle+0x2bc>)
 8001760:	627b      	str	r3, [r7, #36]	@ 0x24
 8001762:	2317      	movs	r3, #23
 8001764:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001768:	2300      	movs	r3, #0
 800176a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800176e:	e02e      	b.n	80017ce <System_Alarm_Setup_Mode_Handle+0x2ca>
          case SET_DY_DT:   paramPtr2 = (uint8_t *)&system_param_data.dy_dt; maxValue2 = 2; minValue2 = 0; break;
 8001770:	4b14      	ldr	r3, [pc, #80]	@ (80017c4 <System_Alarm_Setup_Mode_Handle+0x2c0>)
 8001772:	627b      	str	r3, [r7, #36]	@ 0x24
 8001774:	2302      	movs	r3, #2
 8001776:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800177a:	2300      	movs	r3, #0
 800177c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001780:	e025      	b.n	80017ce <System_Alarm_Setup_Mode_Handle+0x2ca>
          case SET_DOW_DOM: paramPtr2 = &system_param_data.dow_dom; maxValue2 = 31; minValue2 = 1; break;
 8001782:	4b11      	ldr	r3, [pc, #68]	@ (80017c8 <System_Alarm_Setup_Mode_Handle+0x2c4>)
 8001784:	627b      	str	r3, [r7, #36]	@ 0x24
 8001786:	231f      	movs	r3, #31
 8001788:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800178c:	2301      	movs	r3, #1
 800178e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001792:	e01c      	b.n	80017ce <System_Alarm_Setup_Mode_Handle+0x2ca>
          case SET_ON_OFF:  system_param_data.on_off = !system_param_data.on_off;                  break;
 8001794:	4b09      	ldr	r3, [pc, #36]	@ (80017bc <System_Alarm_Setup_Mode_Handle+0x2b8>)
 8001796:	7a1b      	ldrb	r3, [r3, #8]
 8001798:	2b00      	cmp	r3, #0
 800179a:	bf14      	ite	ne
 800179c:	2301      	movne	r3, #1
 800179e:	2300      	moveq	r3, #0
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	f083 0301 	eor.w	r3, r3, #1
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	b2da      	uxtb	r2, r3
 80017ae:	4b03      	ldr	r3, [pc, #12]	@ (80017bc <System_Alarm_Setup_Mode_Handle+0x2b8>)
 80017b0:	721a      	strb	r2, [r3, #8]
 80017b2:	e00c      	b.n	80017ce <System_Alarm_Setup_Mode_Handle+0x2ca>
 80017b4:	200000fc 	.word	0x200000fc
 80017b8:	20000110 	.word	0x20000110
 80017bc:	20000104 	.word	0x20000104
 80017c0:	20000105 	.word	0x20000105
 80017c4:	2000010a 	.word	0x2000010a
 80017c8:	2000010b 	.word	0x2000010b
          default: break;
 80017cc:	bf00      	nop
        }

        if (system_state.param_select == SET_ON_OFF)
 80017ce:	4b9d      	ldr	r3, [pc, #628]	@ (8001a44 <System_Alarm_Setup_Mode_Handle+0x540>)
 80017d0:	789b      	ldrb	r3, [r3, #2]
 80017d2:	2b08      	cmp	r3, #8
 80017d4:	f000 8146 	beq.w	8001a64 <System_Alarm_Setup_Mode_Handle+0x560>
        {
          break;
        }

        // Initialize the start tick for button 2 hold detection
        uint32_t startTick2 = 0;
 80017d8:	2300      	movs	r3, #0
 80017da:	61bb      	str	r3, [r7, #24]

        // Check if the button is pressed or held
        if (button->press_flag) 
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	7b5b      	ldrb	r3, [r3, #13]
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d027      	beq.n	8001836 <System_Alarm_Setup_Mode_Handle+0x332>
        {
          // Check if the selected parameter is ON/OFF
          if (system_state.param_select == SET_ON_OFF) 
 80017e6:	4b97      	ldr	r3, [pc, #604]	@ (8001a44 <System_Alarm_Setup_Mode_Handle+0x540>)
 80017e8:	789b      	ldrb	r3, [r3, #2]
 80017ea:	2b08      	cmp	r3, #8
 80017ec:	d10f      	bne.n	800180e <System_Alarm_Setup_Mode_Handle+0x30a>
          {
            // Toggle the on/off state of the alarm
            system_param_data.on_off = !system_param_data.on_off;
 80017ee:	4b96      	ldr	r3, [pc, #600]	@ (8001a48 <System_Alarm_Setup_Mode_Handle+0x544>)
 80017f0:	7a1b      	ldrb	r3, [r3, #8]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	bf14      	ite	ne
 80017f6:	2301      	movne	r3, #1
 80017f8:	2300      	moveq	r3, #0
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	f083 0301 	eor.w	r3, r3, #1
 8001800:	b2db      	uxtb	r3, r3
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	b2da      	uxtb	r2, r3
 8001808:	4b8f      	ldr	r3, [pc, #572]	@ (8001a48 <System_Alarm_Setup_Mode_Handle+0x544>)
 800180a:	721a      	strb	r2, [r3, #8]
            // Update the start tick for the next hold cycle
            startTick2 = HAL_GetTick();
          }
        } 

        break;
 800180c:	e12c      	b.n	8001a68 <System_Alarm_Setup_Mode_Handle+0x564>
            if (paramPtr2) 
 800180e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001810:	2b00      	cmp	r3, #0
 8001812:	f000 8129 	beq.w	8001a68 <System_Alarm_Setup_Mode_Handle+0x564>
              *paramPtr2 = (*paramPtr2 > minValue2) ? (*paramPtr2 - 1) : maxValue2;
 8001816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 800181e:	429a      	cmp	r2, r3
 8001820:	d204      	bcs.n	800182c <System_Alarm_Setup_Mode_Handle+0x328>
 8001822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	3b01      	subs	r3, #1
 8001828:	b2db      	uxtb	r3, r3
 800182a:	e001      	b.n	8001830 <System_Alarm_Setup_Mode_Handle+0x32c>
 800182c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001830:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001832:	7013      	strb	r3, [r2, #0]
        break;
 8001834:	e118      	b.n	8001a68 <System_Alarm_Setup_Mode_Handle+0x564>
        else if (button->hold_flag) 
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	7b9b      	ldrb	r3, [r3, #14]
 800183a:	b2db      	uxtb	r3, r3
 800183c:	2b00      	cmp	r3, #0
 800183e:	f000 8113 	beq.w	8001a68 <System_Alarm_Setup_Mode_Handle+0x564>
          if (HAL_GetTick() - startTick2 >= BUTTON_HOLD_CYCLE) 
 8001842:	f000 fe17 	bl	8002474 <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2bf9      	cmp	r3, #249	@ 0xf9
 800184e:	f240 810b 	bls.w	8001a68 <System_Alarm_Setup_Mode_Handle+0x564>
            if (system_state.param_select == SET_ON_OFF) 
 8001852:	4b7c      	ldr	r3, [pc, #496]	@ (8001a44 <System_Alarm_Setup_Mode_Handle+0x540>)
 8001854:	789b      	ldrb	r3, [r3, #2]
 8001856:	2b08      	cmp	r3, #8
 8001858:	d10f      	bne.n	800187a <System_Alarm_Setup_Mode_Handle+0x376>
              system_param_data.on_off = !system_param_data.on_off;
 800185a:	4b7b      	ldr	r3, [pc, #492]	@ (8001a48 <System_Alarm_Setup_Mode_Handle+0x544>)
 800185c:	7a1b      	ldrb	r3, [r3, #8]
 800185e:	2b00      	cmp	r3, #0
 8001860:	bf14      	ite	ne
 8001862:	2301      	movne	r3, #1
 8001864:	2300      	moveq	r3, #0
 8001866:	b2db      	uxtb	r3, r3
 8001868:	f083 0301 	eor.w	r3, r3, #1
 800186c:	b2db      	uxtb	r3, r3
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	b2da      	uxtb	r2, r3
 8001874:	4b74      	ldr	r3, [pc, #464]	@ (8001a48 <System_Alarm_Setup_Mode_Handle+0x544>)
 8001876:	721a      	strb	r2, [r3, #8]
 8001878:	e011      	b.n	800189e <System_Alarm_Setup_Mode_Handle+0x39a>
              if (paramPtr2) 
 800187a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800187c:	2b00      	cmp	r3, #0
 800187e:	d00e      	beq.n	800189e <System_Alarm_Setup_Mode_Handle+0x39a>
                *paramPtr2 = (*paramPtr2 > minValue2) ? (*paramPtr2 - 1) : maxValue2;
 8001880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8001888:	429a      	cmp	r2, r3
 800188a:	d204      	bcs.n	8001896 <System_Alarm_Setup_Mode_Handle+0x392>
 800188c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	3b01      	subs	r3, #1
 8001892:	b2db      	uxtb	r3, r3
 8001894:	e001      	b.n	800189a <System_Alarm_Setup_Mode_Handle+0x396>
 8001896:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800189a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800189c:	7013      	strb	r3, [r2, #0]
            startTick2 = HAL_GetTick();
 800189e:	f000 fde9 	bl	8002474 <HAL_GetTick>
 80018a2:	61b8      	str	r0, [r7, #24]
        break;
 80018a4:	e0e0      	b.n	8001a68 <System_Alarm_Setup_Mode_Handle+0x564>
      }
    
    // Button 3: If pressed, move to the next field; if held, save the alarm and return to default mode
    case 3:
      // If the button is pressed, move to the next parameter field, wrapping around if necessary  
      if (button->press_flag)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	7b5b      	ldrb	r3, [r3, #13]
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d016      	beq.n	80018de <System_Alarm_Setup_Mode_Handle+0x3da>
      {
        if      (system_state.param_select == SET_HOUR)
 80018b0:	4b64      	ldr	r3, [pc, #400]	@ (8001a44 <System_Alarm_Setup_Mode_Handle+0x540>)
 80018b2:	789b      	ldrb	r3, [r3, #2]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d103      	bne.n	80018c0 <System_Alarm_Setup_Mode_Handle+0x3bc>
        {
          system_state.param_select = SET_DY_DT;
 80018b8:	4b62      	ldr	r3, [pc, #392]	@ (8001a44 <System_Alarm_Setup_Mode_Handle+0x540>)
 80018ba:	2206      	movs	r2, #6
 80018bc:	709a      	strb	r2, [r3, #2]
        }

        // Reset the button latch to avoid function replication
        button->latch = true;
      }
      break;
 80018be:	e0d5      	b.n	8001a6c <System_Alarm_Setup_Mode_Handle+0x568>
        else if (system_state.param_select == SET_ON_OFF)
 80018c0:	4b60      	ldr	r3, [pc, #384]	@ (8001a44 <System_Alarm_Setup_Mode_Handle+0x540>)
 80018c2:	789b      	ldrb	r3, [r3, #2]
 80018c4:	2b08      	cmp	r3, #8
 80018c6:	d103      	bne.n	80018d0 <System_Alarm_Setup_Mode_Handle+0x3cc>
          system_state.param_select = SET_MINUTE;
 80018c8:	4b5e      	ldr	r3, [pc, #376]	@ (8001a44 <System_Alarm_Setup_Mode_Handle+0x540>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	709a      	strb	r2, [r3, #2]
      break;
 80018ce:	e0cd      	b.n	8001a6c <System_Alarm_Setup_Mode_Handle+0x568>
          system_state.param_select += 1;
 80018d0:	4b5c      	ldr	r3, [pc, #368]	@ (8001a44 <System_Alarm_Setup_Mode_Handle+0x540>)
 80018d2:	789b      	ldrb	r3, [r3, #2]
 80018d4:	3301      	adds	r3, #1
 80018d6:	b2da      	uxtb	r2, r3
 80018d8:	4b5a      	ldr	r3, [pc, #360]	@ (8001a44 <System_Alarm_Setup_Mode_Handle+0x540>)
 80018da:	709a      	strb	r2, [r3, #2]
      break;
 80018dc:	e0c6      	b.n	8001a6c <System_Alarm_Setup_Mode_Handle+0x568>
      else if (button->hold_flag && !button->latch) 
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	7b9b      	ldrb	r3, [r3, #14]
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	f000 80c1 	beq.w	8001a6c <System_Alarm_Setup_Mode_Handle+0x568>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	7bdb      	ldrb	r3, [r3, #15]
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	f083 0301 	eor.w	r3, r3, #1
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	f000 80b8 	beq.w	8001a6c <System_Alarm_Setup_Mode_Handle+0x568>
        if (system_state.past_mode == ALARM_VIEW_MODE)
 80018fc:	4b51      	ldr	r3, [pc, #324]	@ (8001a44 <System_Alarm_Setup_Mode_Handle+0x540>)
 80018fe:	785b      	ldrb	r3, [r3, #1]
 8001900:	2b03      	cmp	r3, #3
 8001902:	d124      	bne.n	800194e <System_Alarm_Setup_Mode_Handle+0x44a>
          Alarm_Set
 8001904:	4b50      	ldr	r3, [pc, #320]	@ (8001a48 <System_Alarm_Setup_Mode_Handle+0x544>)
 8001906:	7818      	ldrb	r0, [r3, #0]
 8001908:	4b4f      	ldr	r3, [pc, #316]	@ (8001a48 <System_Alarm_Setup_Mode_Handle+0x544>)
 800190a:	785c      	ldrb	r4, [r3, #1]
 800190c:	4b4e      	ldr	r3, [pc, #312]	@ (8001a48 <System_Alarm_Setup_Mode_Handle+0x544>)
 800190e:	79dd      	ldrb	r5, [r3, #7]
 8001910:	4b4d      	ldr	r3, [pc, #308]	@ (8001a48 <System_Alarm_Setup_Mode_Handle+0x544>)
 8001912:	799b      	ldrb	r3, [r3, #6]
 8001914:	4a4c      	ldr	r2, [pc, #304]	@ (8001a48 <System_Alarm_Setup_Mode_Handle+0x544>)
 8001916:	7a12      	ldrb	r2, [r2, #8]
 8001918:	494a      	ldr	r1, [pc, #296]	@ (8001a44 <System_Alarm_Setup_Mode_Handle+0x540>)
 800191a:	78c9      	ldrb	r1, [r1, #3]
 800191c:	9102      	str	r1, [sp, #8]
 800191e:	9201      	str	r2, [sp, #4]
 8001920:	9300      	str	r3, [sp, #0]
 8001922:	462b      	mov	r3, r5
 8001924:	4622      	mov	r2, r4
 8001926:	4601      	mov	r1, r0
 8001928:	2000      	movs	r0, #0
 800192a:	f7ff f8b5 	bl	8000a98 <Alarm_Set>
          Alarm_Get(system_state.cursor, &alarm_get_data[system_state.cursor]);
 800192e:	4b45      	ldr	r3, [pc, #276]	@ (8001a44 <System_Alarm_Setup_Mode_Handle+0x540>)
 8001930:	78da      	ldrb	r2, [r3, #3]
 8001932:	4b44      	ldr	r3, [pc, #272]	@ (8001a44 <System_Alarm_Setup_Mode_Handle+0x540>)
 8001934:	78db      	ldrb	r3, [r3, #3]
 8001936:	4619      	mov	r1, r3
 8001938:	460b      	mov	r3, r1
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	440b      	add	r3, r1
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	4942      	ldr	r1, [pc, #264]	@ (8001a4c <System_Alarm_Setup_Mode_Handle+0x548>)
 8001942:	440b      	add	r3, r1
 8001944:	4619      	mov	r1, r3
 8001946:	4610      	mov	r0, r2
 8001948:	f7ff f8f6 	bl	8000b38 <Alarm_Get>
 800194c:	e031      	b.n	80019b2 <System_Alarm_Setup_Mode_Handle+0x4ae>
          Alarm_Set
 800194e:	4b3e      	ldr	r3, [pc, #248]	@ (8001a48 <System_Alarm_Setup_Mode_Handle+0x544>)
 8001950:	7818      	ldrb	r0, [r3, #0]
 8001952:	4b3d      	ldr	r3, [pc, #244]	@ (8001a48 <System_Alarm_Setup_Mode_Handle+0x544>)
 8001954:	785c      	ldrb	r4, [r3, #1]
 8001956:	4b3c      	ldr	r3, [pc, #240]	@ (8001a48 <System_Alarm_Setup_Mode_Handle+0x544>)
 8001958:	79dd      	ldrb	r5, [r3, #7]
 800195a:	4b3b      	ldr	r3, [pc, #236]	@ (8001a48 <System_Alarm_Setup_Mode_Handle+0x544>)
 800195c:	799b      	ldrb	r3, [r3, #6]
 800195e:	4a3a      	ldr	r2, [pc, #232]	@ (8001a48 <System_Alarm_Setup_Mode_Handle+0x544>)
 8001960:	7a12      	ldrb	r2, [r2, #8]
 8001962:	493b      	ldr	r1, [pc, #236]	@ (8001a50 <System_Alarm_Setup_Mode_Handle+0x54c>)
 8001964:	7809      	ldrb	r1, [r1, #0]
 8001966:	9102      	str	r1, [sp, #8]
 8001968:	9201      	str	r2, [sp, #4]
 800196a:	9300      	str	r3, [sp, #0]
 800196c:	462b      	mov	r3, r5
 800196e:	4622      	mov	r2, r4
 8001970:	4601      	mov	r1, r0
 8001972:	2000      	movs	r0, #0
 8001974:	f7ff f890 	bl	8000a98 <Alarm_Set>
          Alarm_Get(alarm_slot_ptr, &alarm_get_data[alarm_slot_ptr]);
 8001978:	4b35      	ldr	r3, [pc, #212]	@ (8001a50 <System_Alarm_Setup_Mode_Handle+0x54c>)
 800197a:	781a      	ldrb	r2, [r3, #0]
 800197c:	4b34      	ldr	r3, [pc, #208]	@ (8001a50 <System_Alarm_Setup_Mode_Handle+0x54c>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	4619      	mov	r1, r3
 8001982:	460b      	mov	r3, r1
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	440b      	add	r3, r1
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	4930      	ldr	r1, [pc, #192]	@ (8001a4c <System_Alarm_Setup_Mode_Handle+0x548>)
 800198c:	440b      	add	r3, r1
 800198e:	4619      	mov	r1, r3
 8001990:	4610      	mov	r0, r2
 8001992:	f7ff f8d1 	bl	8000b38 <Alarm_Get>
          alarm_slot_ptr = (alarm_slot_ptr < ALARM_SLOT_NUM) ? (alarm_slot_ptr + 1) : 0;
 8001996:	4b2e      	ldr	r3, [pc, #184]	@ (8001a50 <System_Alarm_Setup_Mode_Handle+0x54c>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	2b09      	cmp	r3, #9
 800199c:	d804      	bhi.n	80019a8 <System_Alarm_Setup_Mode_Handle+0x4a4>
 800199e:	4b2c      	ldr	r3, [pc, #176]	@ (8001a50 <System_Alarm_Setup_Mode_Handle+0x54c>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	3301      	adds	r3, #1
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	e000      	b.n	80019aa <System_Alarm_Setup_Mode_Handle+0x4a6>
 80019a8:	2300      	movs	r3, #0
 80019aa:	4a29      	ldr	r2, [pc, #164]	@ (8001a50 <System_Alarm_Setup_Mode_Handle+0x54c>)
 80019ac:	7013      	strb	r3, [r2, #0]
          Alarm_Slot_Pointer_Set();
 80019ae:	f7ff f941 	bl	8000c34 <Alarm_Slot_Pointer_Set>
        button->latch = true;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2201      	movs	r2, #1
 80019b6:	73da      	strb	r2, [r3, #15]
      break;
 80019b8:	e058      	b.n	8001a6c <System_Alarm_Setup_Mode_Handle+0x568>

    case 4: // BTN4: Go back to previous field
      if      (button->press_flag) 
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	7b5b      	ldrb	r3, [r3, #13]
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d016      	beq.n	80019f2 <System_Alarm_Setup_Mode_Handle+0x4ee>
      {
        if      (system_state.param_select == SET_DY_DT)
 80019c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001a44 <System_Alarm_Setup_Mode_Handle+0x540>)
 80019c6:	789b      	ldrb	r3, [r3, #2]
 80019c8:	2b06      	cmp	r3, #6
 80019ca:	d103      	bne.n	80019d4 <System_Alarm_Setup_Mode_Handle+0x4d0>
        {
          system_state.param_select = SET_HOUR;
 80019cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001a44 <System_Alarm_Setup_Mode_Handle+0x540>)
 80019ce:	2201      	movs	r2, #1
 80019d0:	709a      	strb	r2, [r3, #2]

        // Reset the alarm slot pointer
        alarm_slot_ptr = 0;
        Alarm_Slot_Pointer_Set();
      }
      break;
 80019d2:	e04d      	b.n	8001a70 <System_Alarm_Setup_Mode_Handle+0x56c>
        else if (system_state.param_select == SET_MINUTE)
 80019d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001a44 <System_Alarm_Setup_Mode_Handle+0x540>)
 80019d6:	789b      	ldrb	r3, [r3, #2]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d103      	bne.n	80019e4 <System_Alarm_Setup_Mode_Handle+0x4e0>
          system_state.param_select = SET_ON_OFF;
 80019dc:	4b19      	ldr	r3, [pc, #100]	@ (8001a44 <System_Alarm_Setup_Mode_Handle+0x540>)
 80019de:	2208      	movs	r2, #8
 80019e0:	709a      	strb	r2, [r3, #2]
      break;
 80019e2:	e045      	b.n	8001a70 <System_Alarm_Setup_Mode_Handle+0x56c>
          system_state.param_select -= 1;
 80019e4:	4b17      	ldr	r3, [pc, #92]	@ (8001a44 <System_Alarm_Setup_Mode_Handle+0x540>)
 80019e6:	789b      	ldrb	r3, [r3, #2]
 80019e8:	3b01      	subs	r3, #1
 80019ea:	b2da      	uxtb	r2, r3
 80019ec:	4b15      	ldr	r3, [pc, #84]	@ (8001a44 <System_Alarm_Setup_Mode_Handle+0x540>)
 80019ee:	709a      	strb	r2, [r3, #2]
      break;
 80019f0:	e03e      	b.n	8001a70 <System_Alarm_Setup_Mode_Handle+0x56c>
      else if (button->hold_flag)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	7b9b      	ldrb	r3, [r3, #14]
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d039      	beq.n	8001a70 <System_Alarm_Setup_Mode_Handle+0x56c>
        for (int i = 0; i < alarm_slot_ptr; i++)
 80019fc:	2300      	movs	r3, #0
 80019fe:	61fb      	str	r3, [r7, #28]
 8001a00:	e013      	b.n	8001a2a <System_Alarm_Setup_Mode_Handle+0x526>
          Alarm_Clear(i);
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff f8f2 	bl	8000bf0 <Alarm_Clear>
          Alarm_Get(i, &alarm_get_data[i]);
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	b2d8      	uxtb	r0, r3
 8001a10:	69fa      	ldr	r2, [r7, #28]
 8001a12:	4613      	mov	r3, r2
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	4413      	add	r3, r2
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	4a0c      	ldr	r2, [pc, #48]	@ (8001a4c <System_Alarm_Setup_Mode_Handle+0x548>)
 8001a1c:	4413      	add	r3, r2
 8001a1e:	4619      	mov	r1, r3
 8001a20:	f7ff f88a 	bl	8000b38 <Alarm_Get>
        for (int i = 0; i < alarm_slot_ptr; i++)
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	3301      	adds	r3, #1
 8001a28:	61fb      	str	r3, [r7, #28]
 8001a2a:	4b09      	ldr	r3, [pc, #36]	@ (8001a50 <System_Alarm_Setup_Mode_Handle+0x54c>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	461a      	mov	r2, r3
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	4293      	cmp	r3, r2
 8001a34:	dbe5      	blt.n	8001a02 <System_Alarm_Setup_Mode_Handle+0x4fe>
        alarm_slot_ptr = 0;
 8001a36:	4b06      	ldr	r3, [pc, #24]	@ (8001a50 <System_Alarm_Setup_Mode_Handle+0x54c>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	701a      	strb	r2, [r3, #0]
        Alarm_Slot_Pointer_Set();
 8001a3c:	f7ff f8fa 	bl	8000c34 <Alarm_Slot_Pointer_Set>
      break;
 8001a40:	e016      	b.n	8001a70 <System_Alarm_Setup_Mode_Handle+0x56c>
 8001a42:	bf00      	nop
 8001a44:	200000fc 	.word	0x200000fc
 8001a48:	20000104 	.word	0x20000104
 8001a4c:	20000118 	.word	0x20000118
 8001a50:	20000154 	.word	0x20000154

    default:
      // Reserved for future use
      break;
 8001a54:	bf00      	nop
 8001a56:	e00c      	b.n	8001a72 <System_Alarm_Setup_Mode_Handle+0x56e>
      break;
 8001a58:	bf00      	nop
 8001a5a:	e00a      	b.n	8001a72 <System_Alarm_Setup_Mode_Handle+0x56e>
        break;
 8001a5c:	bf00      	nop
 8001a5e:	e008      	b.n	8001a72 <System_Alarm_Setup_Mode_Handle+0x56e>
      break;
 8001a60:	bf00      	nop
 8001a62:	e006      	b.n	8001a72 <System_Alarm_Setup_Mode_Handle+0x56e>
          break;
 8001a64:	bf00      	nop
 8001a66:	e004      	b.n	8001a72 <System_Alarm_Setup_Mode_Handle+0x56e>
        break;
 8001a68:	bf00      	nop
 8001a6a:	e002      	b.n	8001a72 <System_Alarm_Setup_Mode_Handle+0x56e>
      break;
 8001a6c:	bf00      	nop
 8001a6e:	e000      	b.n	8001a72 <System_Alarm_Setup_Mode_Handle+0x56e>
      break;
 8001a70:	bf00      	nop
  }

  system_state.past_mode = ALARM_ACTIVE_MODE;
 8001a72:	4b03      	ldr	r3, [pc, #12]	@ (8001a80 <System_Alarm_Setup_Mode_Handle+0x57c>)
 8001a74:	2204      	movs	r2, #4
 8001a76:	705a      	strb	r2, [r3, #1]
}
 8001a78:	bf00      	nop
 8001a7a:	3734      	adds	r7, #52	@ 0x34
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a80:	200000fc 	.word	0x200000fc

08001a84 <System_Alarm_View_Mode_Handle>:
 * @brief  Handles the alarm view mode based on button actions.
 * @param  button: Pointer to the BUTTON structure containing button state and index.
 * @retval None
 */
void System_Alarm_View_Mode_Handle (BUTTON_DATA *button)
{ 
 8001a84:	b5b0      	push	{r4, r5, r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af04      	add	r7, sp, #16
 8001a8a:	6078      	str	r0, [r7, #4]
  // Initially reset system cursor
  system_state.cursor = 0;
 8001a8c:	4baa      	ldr	r3, [pc, #680]	@ (8001d38 <System_Alarm_View_Mode_Handle+0x2b4>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	70da      	strb	r2, [r3, #3]
  
  // Handle button actions in alarm view mode
  switch (button->index) 
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	799b      	ldrb	r3, [r3, #6]
 8001a96:	2b04      	cmp	r3, #4
 8001a98:	f200 8154 	bhi.w	8001d44 <System_Alarm_View_Mode_Handle+0x2c0>
 8001a9c:	a201      	add	r2, pc, #4	@ (adr r2, 8001aa4 <System_Alarm_View_Mode_Handle+0x20>)
 8001a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aa2:	bf00      	nop
 8001aa4:	08001ab9 	.word	0x08001ab9
 8001aa8:	08001b09 	.word	0x08001b09
 8001aac:	08001b33 	.word	0x08001b33
 8001ab0:	08001b5d 	.word	0x08001b5d
 8001ab4:	08001cf9 	.word	0x08001cf9
  {
    // Button 0: If pressed, cycle through the time setup fields; if held, set the mode to default
    case 0:
      // If pressed, cycle through the time setup fields
      if (button->press_flag)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	7b5b      	ldrb	r3, [r3, #13]
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d00c      	beq.n	8001adc <System_Alarm_View_Mode_Handle+0x58>
      {
        system_state.mode = (system_state.mode < (SYSTEM_MODE_NUM - 1)) ? (system_state.mode + 1) : 0;
 8001ac2:	4b9d      	ldr	r3, [pc, #628]	@ (8001d38 <System_Alarm_View_Mode_Handle+0x2b4>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	2b04      	cmp	r3, #4
 8001ac8:	d804      	bhi.n	8001ad4 <System_Alarm_View_Mode_Handle+0x50>
 8001aca:	4b9b      	ldr	r3, [pc, #620]	@ (8001d38 <System_Alarm_View_Mode_Handle+0x2b4>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	e000      	b.n	8001ad6 <System_Alarm_View_Mode_Handle+0x52>
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	4a98      	ldr	r2, [pc, #608]	@ (8001d38 <System_Alarm_View_Mode_Handle+0x2b4>)
 8001ad8:	7013      	strb	r3, [r2, #0]
      else if (button->hold_flag && !button->latch)
      {
        system_state.mode = DEFAULT_MODE; 
        button->latch = true;
      }
      break;
 8001ada:	e135      	b.n	8001d48 <System_Alarm_View_Mode_Handle+0x2c4>
      else if (button->hold_flag && !button->latch)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	7b9b      	ldrb	r3, [r3, #14]
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f000 8130 	beq.w	8001d48 <System_Alarm_View_Mode_Handle+0x2c4>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	7bdb      	ldrb	r3, [r3, #15]
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	f083 0301 	eor.w	r3, r3, #1
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	f000 8127 	beq.w	8001d48 <System_Alarm_View_Mode_Handle+0x2c4>
        system_state.mode = DEFAULT_MODE; 
 8001afa:	4b8f      	ldr	r3, [pc, #572]	@ (8001d38 <System_Alarm_View_Mode_Handle+0x2b4>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	701a      	strb	r2, [r3, #0]
        button->latch = true;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	73da      	strb	r2, [r3, #15]
      break;
 8001b06:	e11f      	b.n	8001d48 <System_Alarm_View_Mode_Handle+0x2c4>

    // Button 1: If pressed, increment the selection cursor
    case 1:
      if      (button->press_flag)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	7b5b      	ldrb	r3, [r3, #13]
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d00c      	beq.n	8001b2c <System_Alarm_View_Mode_Handle+0xa8>
      {
        system_state.cursor = (system_state.cursor < (SYSTEM_CURSOR_MAX - 1)) ? (system_state.cursor + 1) : 0;
 8001b12:	4b89      	ldr	r3, [pc, #548]	@ (8001d38 <System_Alarm_View_Mode_Handle+0x2b4>)
 8001b14:	78db      	ldrb	r3, [r3, #3]
 8001b16:	2b07      	cmp	r3, #7
 8001b18:	d804      	bhi.n	8001b24 <System_Alarm_View_Mode_Handle+0xa0>
 8001b1a:	4b87      	ldr	r3, [pc, #540]	@ (8001d38 <System_Alarm_View_Mode_Handle+0x2b4>)
 8001b1c:	78db      	ldrb	r3, [r3, #3]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	e000      	b.n	8001b26 <System_Alarm_View_Mode_Handle+0xa2>
 8001b24:	2300      	movs	r3, #0
 8001b26:	4a84      	ldr	r2, [pc, #528]	@ (8001d38 <System_Alarm_View_Mode_Handle+0x2b4>)
 8001b28:	70d3      	strb	r3, [r2, #3]
      }
      else if (button->hold_flag)
      {

      }
      break;
 8001b2a:	e112      	b.n	8001d52 <System_Alarm_View_Mode_Handle+0x2ce>
      else if (button->hold_flag)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	7b9b      	ldrb	r3, [r3, #14]
      break;
 8001b30:	e10f      	b.n	8001d52 <System_Alarm_View_Mode_Handle+0x2ce>

    // Button 2: If pressed, decrement the selection cursor
    case 2:
      if      (button->press_flag)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	7b5b      	ldrb	r3, [r3, #13]
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d00c      	beq.n	8001b56 <System_Alarm_View_Mode_Handle+0xd2>
      {
        system_state.cursor = (system_state.cursor > 0) ? (system_state.cursor - 1) : SYSTEM_CURSOR_MAX;
 8001b3c:	4b7e      	ldr	r3, [pc, #504]	@ (8001d38 <System_Alarm_View_Mode_Handle+0x2b4>)
 8001b3e:	78db      	ldrb	r3, [r3, #3]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d004      	beq.n	8001b4e <System_Alarm_View_Mode_Handle+0xca>
 8001b44:	4b7c      	ldr	r3, [pc, #496]	@ (8001d38 <System_Alarm_View_Mode_Handle+0x2b4>)
 8001b46:	78db      	ldrb	r3, [r3, #3]
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	e000      	b.n	8001b50 <System_Alarm_View_Mode_Handle+0xcc>
 8001b4e:	2309      	movs	r3, #9
 8001b50:	4a79      	ldr	r2, [pc, #484]	@ (8001d38 <System_Alarm_View_Mode_Handle+0x2b4>)
 8001b52:	70d3      	strb	r3, [r2, #3]
      }
      else if (button->hold_flag)
      {

      }
      break;
 8001b54:	e0fd      	b.n	8001d52 <System_Alarm_View_Mode_Handle+0x2ce>
      else if (button->hold_flag)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	7b9b      	ldrb	r3, [r3, #14]
      break;
 8001b5a:	e0fa      	b.n	8001d52 <System_Alarm_View_Mode_Handle+0x2ce>
    
    // Button 3: If pressed, toggle ON/OFF; if held, enter Alarm Setup Mode with selected alarm data preloaded (for editing)
    case 3:
      if      (button->press_flag)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	7b5b      	ldrb	r3, [r3, #13]
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d079      	beq.n	8001c5a <System_Alarm_View_Mode_Handle+0x1d6>
      {
        // Retrieve the selected alarm data to system parameter data
        system_param_data.minute  = alarm_get_data[system_state.cursor].minute;
 8001b66:	4b74      	ldr	r3, [pc, #464]	@ (8001d38 <System_Alarm_View_Mode_Handle+0x2b4>)
 8001b68:	78db      	ldrb	r3, [r3, #3]
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4a73      	ldr	r2, [pc, #460]	@ (8001d3c <System_Alarm_View_Mode_Handle+0x2b8>)
 8001b6e:	460b      	mov	r3, r1
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	440b      	add	r3, r1
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	4413      	add	r3, r2
 8001b78:	3301      	adds	r3, #1
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	b2da      	uxtb	r2, r3
 8001b7e:	4b70      	ldr	r3, [pc, #448]	@ (8001d40 <System_Alarm_View_Mode_Handle+0x2bc>)
 8001b80:	701a      	strb	r2, [r3, #0]
        system_param_data.hour    = alarm_get_data[system_state.cursor].hour;
 8001b82:	4b6d      	ldr	r3, [pc, #436]	@ (8001d38 <System_Alarm_View_Mode_Handle+0x2b4>)
 8001b84:	78db      	ldrb	r3, [r3, #3]
 8001b86:	4619      	mov	r1, r3
 8001b88:	4a6c      	ldr	r2, [pc, #432]	@ (8001d3c <System_Alarm_View_Mode_Handle+0x2b8>)
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	440b      	add	r3, r1
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	4413      	add	r3, r2
 8001b94:	3302      	adds	r3, #2
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	b2da      	uxtb	r2, r3
 8001b9a:	4b69      	ldr	r3, [pc, #420]	@ (8001d40 <System_Alarm_View_Mode_Handle+0x2bc>)
 8001b9c:	705a      	strb	r2, [r3, #1]
        system_param_data.dy_dt   = alarm_get_data[system_state.cursor].dy_dt;
 8001b9e:	4b66      	ldr	r3, [pc, #408]	@ (8001d38 <System_Alarm_View_Mode_Handle+0x2b4>)
 8001ba0:	78db      	ldrb	r3, [r3, #3]
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4a65      	ldr	r2, [pc, #404]	@ (8001d3c <System_Alarm_View_Mode_Handle+0x2b8>)
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	440b      	add	r3, r1
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	4413      	add	r3, r2
 8001bb0:	3303      	adds	r3, #3
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	b2da      	uxtb	r2, r3
 8001bb6:	4b62      	ldr	r3, [pc, #392]	@ (8001d40 <System_Alarm_View_Mode_Handle+0x2bc>)
 8001bb8:	719a      	strb	r2, [r3, #6]
        system_param_data.dow_dom = alarm_get_data[system_state.cursor].dow_dom;
 8001bba:	4b5f      	ldr	r3, [pc, #380]	@ (8001d38 <System_Alarm_View_Mode_Handle+0x2b4>)
 8001bbc:	78db      	ldrb	r3, [r3, #3]
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4a5e      	ldr	r2, [pc, #376]	@ (8001d3c <System_Alarm_View_Mode_Handle+0x2b8>)
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	440b      	add	r3, r1
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	4413      	add	r3, r2
 8001bcc:	3304      	adds	r3, #4
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	4b5b      	ldr	r3, [pc, #364]	@ (8001d40 <System_Alarm_View_Mode_Handle+0x2bc>)
 8001bd4:	71da      	strb	r2, [r3, #7]
        system_param_data.on_off  = alarm_get_data[system_state.cursor].on_off;
 8001bd6:	4b58      	ldr	r3, [pc, #352]	@ (8001d38 <System_Alarm_View_Mode_Handle+0x2b4>)
 8001bd8:	78db      	ldrb	r3, [r3, #3]
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4a57      	ldr	r2, [pc, #348]	@ (8001d3c <System_Alarm_View_Mode_Handle+0x2b8>)
 8001bde:	460b      	mov	r3, r1
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	440b      	add	r3, r1
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	4413      	add	r3, r2
 8001be8:	3305      	adds	r3, #5
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	b2da      	uxtb	r2, r3
 8001bee:	4b54      	ldr	r3, [pc, #336]	@ (8001d40 <System_Alarm_View_Mode_Handle+0x2bc>)
 8001bf0:	721a      	strb	r2, [r3, #8]

        // Toggle ON/OFF data
        system_param_data.on_off = !system_param_data.on_off;
 8001bf2:	4b53      	ldr	r3, [pc, #332]	@ (8001d40 <System_Alarm_View_Mode_Handle+0x2bc>)
 8001bf4:	7a1b      	ldrb	r3, [r3, #8]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	bf14      	ite	ne
 8001bfa:	2301      	movne	r3, #1
 8001bfc:	2300      	moveq	r3, #0
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	f083 0301 	eor.w	r3, r3, #1
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	b2da      	uxtb	r2, r3
 8001c0c:	4b4c      	ldr	r3, [pc, #304]	@ (8001d40 <System_Alarm_View_Mode_Handle+0x2bc>)
 8001c0e:	721a      	strb	r2, [r3, #8]

        // Save the modified alarm to the EEPROM module
        //    void Alarm_Set (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow_dom, ALARM_DY_DT_MODE dy_dt, uint8_t on_off, uint8_t slot)
        Alarm_Set
 8001c10:	4b4b      	ldr	r3, [pc, #300]	@ (8001d40 <System_Alarm_View_Mode_Handle+0x2bc>)
 8001c12:	7818      	ldrb	r0, [r3, #0]
 8001c14:	4b4a      	ldr	r3, [pc, #296]	@ (8001d40 <System_Alarm_View_Mode_Handle+0x2bc>)
 8001c16:	785c      	ldrb	r4, [r3, #1]
 8001c18:	4b49      	ldr	r3, [pc, #292]	@ (8001d40 <System_Alarm_View_Mode_Handle+0x2bc>)
 8001c1a:	79dd      	ldrb	r5, [r3, #7]
 8001c1c:	4b48      	ldr	r3, [pc, #288]	@ (8001d40 <System_Alarm_View_Mode_Handle+0x2bc>)
 8001c1e:	799b      	ldrb	r3, [r3, #6]
 8001c20:	4a47      	ldr	r2, [pc, #284]	@ (8001d40 <System_Alarm_View_Mode_Handle+0x2bc>)
 8001c22:	7a12      	ldrb	r2, [r2, #8]
 8001c24:	4944      	ldr	r1, [pc, #272]	@ (8001d38 <System_Alarm_View_Mode_Handle+0x2b4>)
 8001c26:	78c9      	ldrb	r1, [r1, #3]
 8001c28:	9102      	str	r1, [sp, #8]
 8001c2a:	9201      	str	r2, [sp, #4]
 8001c2c:	9300      	str	r3, [sp, #0]
 8001c2e:	462b      	mov	r3, r5
 8001c30:	4622      	mov	r2, r4
 8001c32:	4601      	mov	r1, r0
 8001c34:	2000      	movs	r0, #0
 8001c36:	f7fe ff2f 	bl	8000a98 <Alarm_Set>
          system_param_data.on_off,
          system_state.cursor   
        );

        // Update the newly set alarm data
        Alarm_Get(system_state.cursor, &alarm_get_data[system_state.cursor]);
 8001c3a:	4b3f      	ldr	r3, [pc, #252]	@ (8001d38 <System_Alarm_View_Mode_Handle+0x2b4>)
 8001c3c:	78da      	ldrb	r2, [r3, #3]
 8001c3e:	4b3e      	ldr	r3, [pc, #248]	@ (8001d38 <System_Alarm_View_Mode_Handle+0x2b4>)
 8001c40:	78db      	ldrb	r3, [r3, #3]
 8001c42:	4619      	mov	r1, r3
 8001c44:	460b      	mov	r3, r1
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	440b      	add	r3, r1
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	493b      	ldr	r1, [pc, #236]	@ (8001d3c <System_Alarm_View_Mode_Handle+0x2b8>)
 8001c4e:	440b      	add	r3, r1
 8001c50:	4619      	mov	r1, r3
 8001c52:	4610      	mov	r0, r2
 8001c54:	f7fe ff70 	bl	8000b38 <Alarm_Get>
        system_param_data.on_off  = alarm_get_data[system_state.cursor].on_off;

        // System switches to Alarm Setup Mode
        system_state.mode = ALARM_SETUP_MODE;
      }
      break;
 8001c58:	e078      	b.n	8001d4c <System_Alarm_View_Mode_Handle+0x2c8>
      else if (button->hold_flag)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	7b9b      	ldrb	r3, [r3, #14]
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d073      	beq.n	8001d4c <System_Alarm_View_Mode_Handle+0x2c8>
        system_param_data.minute  = alarm_get_data[system_state.cursor].minute;
 8001c64:	4b34      	ldr	r3, [pc, #208]	@ (8001d38 <System_Alarm_View_Mode_Handle+0x2b4>)
 8001c66:	78db      	ldrb	r3, [r3, #3]
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4a34      	ldr	r2, [pc, #208]	@ (8001d3c <System_Alarm_View_Mode_Handle+0x2b8>)
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	440b      	add	r3, r1
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	4413      	add	r3, r2
 8001c76:	3301      	adds	r3, #1
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	b2da      	uxtb	r2, r3
 8001c7c:	4b30      	ldr	r3, [pc, #192]	@ (8001d40 <System_Alarm_View_Mode_Handle+0x2bc>)
 8001c7e:	701a      	strb	r2, [r3, #0]
        system_param_data.hour    = alarm_get_data[system_state.cursor].hour;
 8001c80:	4b2d      	ldr	r3, [pc, #180]	@ (8001d38 <System_Alarm_View_Mode_Handle+0x2b4>)
 8001c82:	78db      	ldrb	r3, [r3, #3]
 8001c84:	4619      	mov	r1, r3
 8001c86:	4a2d      	ldr	r2, [pc, #180]	@ (8001d3c <System_Alarm_View_Mode_Handle+0x2b8>)
 8001c88:	460b      	mov	r3, r1
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	440b      	add	r3, r1
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	4413      	add	r3, r2
 8001c92:	3302      	adds	r3, #2
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	b2da      	uxtb	r2, r3
 8001c98:	4b29      	ldr	r3, [pc, #164]	@ (8001d40 <System_Alarm_View_Mode_Handle+0x2bc>)
 8001c9a:	705a      	strb	r2, [r3, #1]
        system_param_data.dy_dt   = alarm_get_data[system_state.cursor].dy_dt;
 8001c9c:	4b26      	ldr	r3, [pc, #152]	@ (8001d38 <System_Alarm_View_Mode_Handle+0x2b4>)
 8001c9e:	78db      	ldrb	r3, [r3, #3]
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4a26      	ldr	r2, [pc, #152]	@ (8001d3c <System_Alarm_View_Mode_Handle+0x2b8>)
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	440b      	add	r3, r1
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	4413      	add	r3, r2
 8001cae:	3303      	adds	r3, #3
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	b2da      	uxtb	r2, r3
 8001cb4:	4b22      	ldr	r3, [pc, #136]	@ (8001d40 <System_Alarm_View_Mode_Handle+0x2bc>)
 8001cb6:	719a      	strb	r2, [r3, #6]
        system_param_data.dow_dom = alarm_get_data[system_state.cursor].dow_dom;
 8001cb8:	4b1f      	ldr	r3, [pc, #124]	@ (8001d38 <System_Alarm_View_Mode_Handle+0x2b4>)
 8001cba:	78db      	ldrb	r3, [r3, #3]
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4a1f      	ldr	r2, [pc, #124]	@ (8001d3c <System_Alarm_View_Mode_Handle+0x2b8>)
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	440b      	add	r3, r1
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	4413      	add	r3, r2
 8001cca:	3304      	adds	r3, #4
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	b2da      	uxtb	r2, r3
 8001cd0:	4b1b      	ldr	r3, [pc, #108]	@ (8001d40 <System_Alarm_View_Mode_Handle+0x2bc>)
 8001cd2:	71da      	strb	r2, [r3, #7]
        system_param_data.on_off  = alarm_get_data[system_state.cursor].on_off;
 8001cd4:	4b18      	ldr	r3, [pc, #96]	@ (8001d38 <System_Alarm_View_Mode_Handle+0x2b4>)
 8001cd6:	78db      	ldrb	r3, [r3, #3]
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4a18      	ldr	r2, [pc, #96]	@ (8001d3c <System_Alarm_View_Mode_Handle+0x2b8>)
 8001cdc:	460b      	mov	r3, r1
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	440b      	add	r3, r1
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	4413      	add	r3, r2
 8001ce6:	3305      	adds	r3, #5
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	b2da      	uxtb	r2, r3
 8001cec:	4b14      	ldr	r3, [pc, #80]	@ (8001d40 <System_Alarm_View_Mode_Handle+0x2bc>)
 8001cee:	721a      	strb	r2, [r3, #8]
        system_state.mode = ALARM_SETUP_MODE;
 8001cf0:	4b11      	ldr	r3, [pc, #68]	@ (8001d38 <System_Alarm_View_Mode_Handle+0x2b4>)
 8001cf2:	2202      	movs	r2, #2
 8001cf4:	701a      	strb	r2, [r3, #0]
      break;
 8001cf6:	e029      	b.n	8001d4c <System_Alarm_View_Mode_Handle+0x2c8>

    // Button 4: If held, clear current alarm
    case 4: 
      if      (button->press_flag)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	7b5b      	ldrb	r3, [r3, #13]
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d126      	bne.n	8001d50 <System_Alarm_View_Mode_Handle+0x2cc>
      {

      }
      else if (button->hold_flag)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	7b9b      	ldrb	r3, [r3, #14]
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d021      	beq.n	8001d50 <System_Alarm_View_Mode_Handle+0x2cc>
      {
        // Clear current alarm
        Alarm_Clear(system_state.cursor);
 8001d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8001d38 <System_Alarm_View_Mode_Handle+0x2b4>)
 8001d0e:	78db      	ldrb	r3, [r3, #3]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7fe ff6d 	bl	8000bf0 <Alarm_Clear>

        // Update alarm data
        Alarm_Get(system_state.cursor, &alarm_get_data[system_state.cursor]);
 8001d16:	4b08      	ldr	r3, [pc, #32]	@ (8001d38 <System_Alarm_View_Mode_Handle+0x2b4>)
 8001d18:	78da      	ldrb	r2, [r3, #3]
 8001d1a:	4b07      	ldr	r3, [pc, #28]	@ (8001d38 <System_Alarm_View_Mode_Handle+0x2b4>)
 8001d1c:	78db      	ldrb	r3, [r3, #3]
 8001d1e:	4619      	mov	r1, r3
 8001d20:	460b      	mov	r3, r1
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	440b      	add	r3, r1
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	4904      	ldr	r1, [pc, #16]	@ (8001d3c <System_Alarm_View_Mode_Handle+0x2b8>)
 8001d2a:	440b      	add	r3, r1
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4610      	mov	r0, r2
 8001d30:	f7fe ff02 	bl	8000b38 <Alarm_Get>
      }
      break;
 8001d34:	e00c      	b.n	8001d50 <System_Alarm_View_Mode_Handle+0x2cc>
 8001d36:	bf00      	nop
 8001d38:	200000fc 	.word	0x200000fc
 8001d3c:	20000118 	.word	0x20000118
 8001d40:	20000104 	.word	0x20000104

    default: 
      break;
 8001d44:	bf00      	nop
 8001d46:	e004      	b.n	8001d52 <System_Alarm_View_Mode_Handle+0x2ce>
      break;
 8001d48:	bf00      	nop
 8001d4a:	e002      	b.n	8001d52 <System_Alarm_View_Mode_Handle+0x2ce>
      break;
 8001d4c:	bf00      	nop
 8001d4e:	e000      	b.n	8001d52 <System_Alarm_View_Mode_Handle+0x2ce>
      break;
 8001d50:	bf00      	nop
  }

  system_state.past_mode = ALARM_VIEW_MODE;
 8001d52:	4b03      	ldr	r3, [pc, #12]	@ (8001d60 <System_Alarm_View_Mode_Handle+0x2dc>)
 8001d54:	2203      	movs	r2, #3
 8001d56:	705a      	strb	r2, [r3, #1]
}
 8001d58:	bf00      	nop
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bdb0      	pop	{r4, r5, r7, pc}
 8001d60:	200000fc 	.word	0x200000fc

08001d64 <System_Alarm_Active_Mode_Handle>:
 * @brief  Handles the alarm active mode based on button actions.
 * @param  button: Pointer to the BUTTON structure containing button state and index.
 * @retval None
 */
void System_Alarm_Active_Mode_Handle (BUTTON_DATA *button)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  // Handle button actions in alarm active mode
  switch (button->index) 
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	799b      	ldrb	r3, [r3, #6]
 8001d70:	2b04      	cmp	r3, #4
 8001d72:	d853      	bhi.n	8001e1c <System_Alarm_Active_Mode_Handle+0xb8>
 8001d74:	a201      	add	r2, pc, #4	@ (adr r2, 8001d7c <System_Alarm_Active_Mode_Handle+0x18>)
 8001d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d7a:	bf00      	nop
 8001d7c:	08001d91 	.word	0x08001d91
 8001d80:	08001ddd 	.word	0x08001ddd
 8001d84:	08001ded 	.word	0x08001ded
 8001d88:	08001dfd 	.word	0x08001dfd
 8001d8c:	08001e0d 	.word	0x08001e0d
  {
    // Button 0: If pressed, cycle through the time setup fields; if held, set the mode to default
    case 0:
      // If pressed, cycle through the time setup fields
      if (button->press_flag)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	7b5b      	ldrb	r3, [r3, #13]
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d00c      	beq.n	8001db4 <System_Alarm_Active_Mode_Handle+0x50>
      {
        system_state.mode = (system_state.mode < (SYSTEM_MODE_NUM - 1)) ? (system_state.mode + 1) : 0;
 8001d9a:	4b2a      	ldr	r3, [pc, #168]	@ (8001e44 <System_Alarm_Active_Mode_Handle+0xe0>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	2b04      	cmp	r3, #4
 8001da0:	d804      	bhi.n	8001dac <System_Alarm_Active_Mode_Handle+0x48>
 8001da2:	4b28      	ldr	r3, [pc, #160]	@ (8001e44 <System_Alarm_Active_Mode_Handle+0xe0>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	3301      	adds	r3, #1
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	e000      	b.n	8001dae <System_Alarm_Active_Mode_Handle+0x4a>
 8001dac:	2300      	movs	r3, #0
 8001dae:	4a25      	ldr	r2, [pc, #148]	@ (8001e44 <System_Alarm_Active_Mode_Handle+0xe0>)
 8001db0:	7013      	strb	r3, [r2, #0]
      else if (button->hold_flag && !button->latch)
      {
        system_state.mode = DEFAULT_MODE; 
        button->latch = true;
      }
      break;
 8001db2:	e035      	b.n	8001e20 <System_Alarm_Active_Mode_Handle+0xbc>
      else if (button->hold_flag && !button->latch)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	7b9b      	ldrb	r3, [r3, #14]
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d030      	beq.n	8001e20 <System_Alarm_Active_Mode_Handle+0xbc>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	7bdb      	ldrb	r3, [r3, #15]
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	f083 0301 	eor.w	r3, r3, #1
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d028      	beq.n	8001e20 <System_Alarm_Active_Mode_Handle+0xbc>
        system_state.mode = DEFAULT_MODE; 
 8001dce:	4b1d      	ldr	r3, [pc, #116]	@ (8001e44 <System_Alarm_Active_Mode_Handle+0xe0>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	701a      	strb	r2, [r3, #0]
        button->latch = true;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	73da      	strb	r2, [r3, #15]
      break;
 8001dda:	e021      	b.n	8001e20 <System_Alarm_Active_Mode_Handle+0xbc>

    case 1:
      if      (button->press_flag)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	7b5b      	ldrb	r3, [r3, #13]
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d11e      	bne.n	8001e24 <System_Alarm_Active_Mode_Handle+0xc0>
      {

      }
      else if (button->hold_flag)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	7b9b      	ldrb	r3, [r3, #14]
      {

      }
      break;
 8001dea:	e01b      	b.n	8001e24 <System_Alarm_Active_Mode_Handle+0xc0>

    case 2:
      if      (button->press_flag)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	7b5b      	ldrb	r3, [r3, #13]
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d118      	bne.n	8001e28 <System_Alarm_Active_Mode_Handle+0xc4>
      {

      }
      else if (button->hold_flag)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	7b9b      	ldrb	r3, [r3, #14]
      {

      }
      break;
 8001dfa:	e015      	b.n	8001e28 <System_Alarm_Active_Mode_Handle+0xc4>
    
    case 3:
      if      (button->press_flag)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	7b5b      	ldrb	r3, [r3, #13]
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d112      	bne.n	8001e2c <System_Alarm_Active_Mode_Handle+0xc8>
      {

      }
      else if (button->hold_flag)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	7b9b      	ldrb	r3, [r3, #14]
      {

      }
      break;
 8001e0a:	e00f      	b.n	8001e2c <System_Alarm_Active_Mode_Handle+0xc8>

    case 4: 
      if      (button->press_flag)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	7b5b      	ldrb	r3, [r3, #13]
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d10c      	bne.n	8001e30 <System_Alarm_Active_Mode_Handle+0xcc>
      {

      }
      else if (button->hold_flag)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	7b9b      	ldrb	r3, [r3, #14]
      {

      }
      break;
 8001e1a:	e009      	b.n	8001e30 <System_Alarm_Active_Mode_Handle+0xcc>

    default: 
      break;
 8001e1c:	bf00      	nop
 8001e1e:	e008      	b.n	8001e32 <System_Alarm_Active_Mode_Handle+0xce>
      break;
 8001e20:	bf00      	nop
 8001e22:	e006      	b.n	8001e32 <System_Alarm_Active_Mode_Handle+0xce>
      break;
 8001e24:	bf00      	nop
 8001e26:	e004      	b.n	8001e32 <System_Alarm_Active_Mode_Handle+0xce>
      break;
 8001e28:	bf00      	nop
 8001e2a:	e002      	b.n	8001e32 <System_Alarm_Active_Mode_Handle+0xce>
      break;
 8001e2c:	bf00      	nop
 8001e2e:	e000      	b.n	8001e32 <System_Alarm_Active_Mode_Handle+0xce>
      break;
 8001e30:	bf00      	nop
  }

  system_state.past_mode = ALARM_ACTIVE_MODE;
 8001e32:	4b04      	ldr	r3, [pc, #16]	@ (8001e44 <System_Alarm_Active_Mode_Handle+0xe0>)
 8001e34:	2204      	movs	r2, #4
 8001e36:	705a      	strb	r2, [r3, #1]
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bc80      	pop	{r7}
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	200000fc 	.word	0x200000fc

08001e48 <System_Options_Mode_Handle>:
 * @brief  Handles the system options mode based on button actions.
 * @param  button: Pointer to the BUTTON structure containing button state and index.
 * @retval None
 */
void System_Options_Mode_Handle (BUTTON_DATA *button)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  // Handle button actions in system options mode
  switch (button->index) 
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	799b      	ldrb	r3, [r3, #6]
 8001e54:	2b04      	cmp	r3, #4
 8001e56:	d848      	bhi.n	8001eea <System_Options_Mode_Handle+0xa2>
 8001e58:	a201      	add	r2, pc, #4	@ (adr r2, 8001e60 <System_Options_Mode_Handle+0x18>)
 8001e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e5e:	bf00      	nop
 8001e60:	08001e75 	.word	0x08001e75
 8001e64:	08001eab 	.word	0x08001eab
 8001e68:	08001ebb 	.word	0x08001ebb
 8001e6c:	08001ecb 	.word	0x08001ecb
 8001e70:	08001edb 	.word	0x08001edb
  {
    // Button 0: If pressed, cycle through the time setup fields; if held, set the mode to default
    case 0:
      // If pressed, cycle through the time setup fields
      if      (button->press_flag)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	7b5b      	ldrb	r3, [r3, #13]
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d00c      	beq.n	8001e98 <System_Options_Mode_Handle+0x50>
      {
        system_state.mode = (system_state.mode < (SYSTEM_MODE_NUM - 1)) ? (system_state.mode + 1) : 0;
 8001e7e:	4b24      	ldr	r3, [pc, #144]	@ (8001f10 <System_Options_Mode_Handle+0xc8>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	2b04      	cmp	r3, #4
 8001e84:	d804      	bhi.n	8001e90 <System_Options_Mode_Handle+0x48>
 8001e86:	4b22      	ldr	r3, [pc, #136]	@ (8001f10 <System_Options_Mode_Handle+0xc8>)
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	e000      	b.n	8001e92 <System_Options_Mode_Handle+0x4a>
 8001e90:	2300      	movs	r3, #0
 8001e92:	4a1f      	ldr	r2, [pc, #124]	@ (8001f10 <System_Options_Mode_Handle+0xc8>)
 8001e94:	7013      	strb	r3, [r2, #0]
      // If held, set the mode to default
      else if (button->hold_flag)
      {
        system_state.mode = DEFAULT_MODE;
      }
      break;
 8001e96:	e02a      	b.n	8001eee <System_Options_Mode_Handle+0xa6>
      else if (button->hold_flag)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	7b9b      	ldrb	r3, [r3, #14]
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d025      	beq.n	8001eee <System_Options_Mode_Handle+0xa6>
        system_state.mode = DEFAULT_MODE;
 8001ea2:	4b1b      	ldr	r3, [pc, #108]	@ (8001f10 <System_Options_Mode_Handle+0xc8>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	701a      	strb	r2, [r3, #0]
      break;
 8001ea8:	e021      	b.n	8001eee <System_Options_Mode_Handle+0xa6>

    case 1:
      if      (button->press_flag)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	7b5b      	ldrb	r3, [r3, #13]
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d11e      	bne.n	8001ef2 <System_Options_Mode_Handle+0xaa>
      {

      }
      else if (button->hold_flag)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	7b9b      	ldrb	r3, [r3, #14]
      {

      }
      break;
 8001eb8:	e01b      	b.n	8001ef2 <System_Options_Mode_Handle+0xaa>

    case 2:
      if      (button->press_flag)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	7b5b      	ldrb	r3, [r3, #13]
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d118      	bne.n	8001ef6 <System_Options_Mode_Handle+0xae>
      {

      }
      else if (button->hold_flag)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	7b9b      	ldrb	r3, [r3, #14]
      {

      }
      break;
 8001ec8:	e015      	b.n	8001ef6 <System_Options_Mode_Handle+0xae>
    
    case 3:
      if      (button->press_flag)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	7b5b      	ldrb	r3, [r3, #13]
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d112      	bne.n	8001efa <System_Options_Mode_Handle+0xb2>
      {

      }
      else if (button->hold_flag)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	7b9b      	ldrb	r3, [r3, #14]
      {

      }
      break;
 8001ed8:	e00f      	b.n	8001efa <System_Options_Mode_Handle+0xb2>

    case 4: 
      if      (button->press_flag)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	7b5b      	ldrb	r3, [r3, #13]
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d10c      	bne.n	8001efe <System_Options_Mode_Handle+0xb6>
      {

      }
      else if (button->hold_flag)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	7b9b      	ldrb	r3, [r3, #14]
      {

      }
      break;
 8001ee8:	e009      	b.n	8001efe <System_Options_Mode_Handle+0xb6>

    default: 
      break;
 8001eea:	bf00      	nop
 8001eec:	e008      	b.n	8001f00 <System_Options_Mode_Handle+0xb8>
      break;
 8001eee:	bf00      	nop
 8001ef0:	e006      	b.n	8001f00 <System_Options_Mode_Handle+0xb8>
      break;
 8001ef2:	bf00      	nop
 8001ef4:	e004      	b.n	8001f00 <System_Options_Mode_Handle+0xb8>
      break;
 8001ef6:	bf00      	nop
 8001ef8:	e002      	b.n	8001f00 <System_Options_Mode_Handle+0xb8>
      break;
 8001efa:	bf00      	nop
 8001efc:	e000      	b.n	8001f00 <System_Options_Mode_Handle+0xb8>
      break;
 8001efe:	bf00      	nop
  }

  system_state.past_mode = SYSTEM_OPTIONS_MODE;
 8001f00:	4b03      	ldr	r3, [pc, #12]	@ (8001f10 <System_Options_Mode_Handle+0xc8>)
 8001f02:	2205      	movs	r2, #5
 8001f04:	705a      	strb	r2, [r3, #1]
}
 8001f06:	bf00      	nop
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bc80      	pop	{r7}
 8001f0e:	4770      	bx	lr
 8001f10:	200000fc 	.word	0x200000fc

08001f14 <HAL_GPIO_EXTI_Callback>:
  * @brief  Callback function to handle GPIO interrupts.
  * @param  GPIO_Pin: The pin number of the GPIO that triggered the interrupt.
  * @retval None
*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8001f1e:	88fb      	ldrh	r3, [r7, #6]
 8001f20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001f24:	d02a      	beq.n	8001f7c <HAL_GPIO_EXTI_Callback+0x68>
 8001f26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001f2a:	dc2f      	bgt.n	8001f8c <HAL_GPIO_EXTI_Callback+0x78>
 8001f2c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001f30:	d020      	beq.n	8001f74 <HAL_GPIO_EXTI_Callback+0x60>
 8001f32:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001f36:	dc29      	bgt.n	8001f8c <HAL_GPIO_EXTI_Callback+0x78>
 8001f38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f3c:	d016      	beq.n	8001f6c <HAL_GPIO_EXTI_Callback+0x58>
 8001f3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f42:	dc23      	bgt.n	8001f8c <HAL_GPIO_EXTI_Callback+0x78>
 8001f44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f48:	d00c      	beq.n	8001f64 <HAL_GPIO_EXTI_Callback+0x50>
 8001f4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f4e:	dc1d      	bgt.n	8001f8c <HAL_GPIO_EXTI_Callback+0x78>
 8001f50:	2b20      	cmp	r3, #32
 8001f52:	d003      	beq.n	8001f5c <HAL_GPIO_EXTI_Callback+0x48>
 8001f54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f58:	d014      	beq.n	8001f84 <HAL_GPIO_EXTI_Callback+0x70>
      button4.int_flag = true;
      break;  

    default:
      // Handle other GPIO interrupts if necessary
      break;
 8001f5a:	e017      	b.n	8001f8c <HAL_GPIO_EXTI_Callback+0x78>
      rtc_int_flag = true;
 8001f5c:	4b0e      	ldr	r3, [pc, #56]	@ (8001f98 <HAL_GPIO_EXTI_Callback+0x84>)
 8001f5e:	2201      	movs	r2, #1
 8001f60:	701a      	strb	r2, [r3, #0]
      break;
 8001f62:	e014      	b.n	8001f8e <HAL_GPIO_EXTI_Callback+0x7a>
      button0.int_flag = true;
 8001f64:	4b0d      	ldr	r3, [pc, #52]	@ (8001f9c <HAL_GPIO_EXTI_Callback+0x88>)
 8001f66:	2201      	movs	r2, #1
 8001f68:	731a      	strb	r2, [r3, #12]
      break;
 8001f6a:	e010      	b.n	8001f8e <HAL_GPIO_EXTI_Callback+0x7a>
      button1.int_flag = true;
 8001f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa0 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001f6e:	2201      	movs	r2, #1
 8001f70:	731a      	strb	r2, [r3, #12]
      break;
 8001f72:	e00c      	b.n	8001f8e <HAL_GPIO_EXTI_Callback+0x7a>
      button2.int_flag = true;
 8001f74:	4b0b      	ldr	r3, [pc, #44]	@ (8001fa4 <HAL_GPIO_EXTI_Callback+0x90>)
 8001f76:	2201      	movs	r2, #1
 8001f78:	731a      	strb	r2, [r3, #12]
      break;
 8001f7a:	e008      	b.n	8001f8e <HAL_GPIO_EXTI_Callback+0x7a>
      button3.int_flag = true;
 8001f7c:	4b0a      	ldr	r3, [pc, #40]	@ (8001fa8 <HAL_GPIO_EXTI_Callback+0x94>)
 8001f7e:	2201      	movs	r2, #1
 8001f80:	731a      	strb	r2, [r3, #12]
      break;  
 8001f82:	e004      	b.n	8001f8e <HAL_GPIO_EXTI_Callback+0x7a>
      button4.int_flag = true;
 8001f84:	4b09      	ldr	r3, [pc, #36]	@ (8001fac <HAL_GPIO_EXTI_Callback+0x98>)
 8001f86:	2201      	movs	r2, #1
 8001f88:	731a      	strb	r2, [r3, #12]
      break;  
 8001f8a:	e000      	b.n	8001f8e <HAL_GPIO_EXTI_Callback+0x7a>
      break;
 8001f8c:	bf00      	nop
  }
}
 8001f8e:	bf00      	nop
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bc80      	pop	{r7}
 8001f96:	4770      	bx	lr
 8001f98:	20000155 	.word	0x20000155
 8001f9c:	20000000 	.word	0x20000000
 8001fa0:	20000010 	.word	0x20000010
 8001fa4:	20000020 	.word	0x20000020
 8001fa8:	20000030 	.word	0x20000030
 8001fac:	20000040 	.word	0x20000040

08001fb0 <HAL_UART_RxCpltCallback>:
  * @brief  Callback function to handle UART interrupts.
  * @param  huart: Pointer to the UART handle.
  * @retval None
*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  // Verify the UART instance to ensure the callback is for USART1
  // If the UART instance is USART1, store the received data into the uart_rx_data array
  if(huart->Instance == USART1)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a09      	ldr	r2, [pc, #36]	@ (8001fe4 <HAL_UART_RxCpltCallback+0x34>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d10a      	bne.n	8001fd8 <HAL_UART_RxCpltCallback+0x28>
  {
    // Store the received data into the uart_rx_data array
    uart_rx_hour = uart_rx_data[0];
 8001fc2:	4b09      	ldr	r3, [pc, #36]	@ (8001fe8 <HAL_UART_RxCpltCallback+0x38>)
 8001fc4:	781a      	ldrb	r2, [r3, #0]
 8001fc6:	4b09      	ldr	r3, [pc, #36]	@ (8001fec <HAL_UART_RxCpltCallback+0x3c>)
 8001fc8:	701a      	strb	r2, [r3, #0]
    uart_rx_minute = uart_rx_data[1];
 8001fca:	4b07      	ldr	r3, [pc, #28]	@ (8001fe8 <HAL_UART_RxCpltCallback+0x38>)
 8001fcc:	785a      	ldrb	r2, [r3, #1]
 8001fce:	4b08      	ldr	r3, [pc, #32]	@ (8001ff0 <HAL_UART_RxCpltCallback+0x40>)
 8001fd0:	701a      	strb	r2, [r3, #0]

    // Set the UART receive flag
    uart_rx_flag = 1;
 8001fd2:	4b08      	ldr	r3, [pc, #32]	@ (8001ff4 <HAL_UART_RxCpltCallback+0x44>)
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	701a      	strb	r2, [r3, #0]
  }
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bc80      	pop	{r7}
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	40013800 	.word	0x40013800
 8001fe8:	20000164 	.word	0x20000164
 8001fec:	20000166 	.word	0x20000166
 8001ff0:	20000167 	.word	0x20000167
 8001ff4:	20000162 	.word	0x20000162

08001ff8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Callback function to handle ADC conversion complete interrupts.
  * @param  hadc: Pointer to the ADC handle.
  * @retval None
*/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
	// Verify the ADC instance to ensure the callback is for ADC1
  // If the ADC instance is ADC1, get the ADC value and calculate the battery percentage
  if (hadc == &hadc1)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4a10      	ldr	r2, [pc, #64]	@ (8002044 <HAL_ADC_ConvCpltCallback+0x4c>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d119      	bne.n	800203c <HAL_ADC_ConvCpltCallback+0x44>
	{
    // Get the ADC value
    adc_data = HAL_ADC_GetValue(&hadc1);
 8002008:	480e      	ldr	r0, [pc, #56]	@ (8002044 <HAL_ADC_ConvCpltCallback+0x4c>)
 800200a:	f000 fbef 	bl	80027ec <HAL_ADC_GetValue>
 800200e:	4603      	mov	r3, r0
 8002010:	b29a      	uxth	r2, r3
 8002012:	4b0d      	ldr	r3, [pc, #52]	@ (8002048 <HAL_ADC_ConvCpltCallback+0x50>)
 8002014:	801a      	strh	r2, [r3, #0]

    // Set the ADC valid flag
    adc_valid_flag = 1;
 8002016:	4b0d      	ldr	r3, [pc, #52]	@ (800204c <HAL_ADC_ConvCpltCallback+0x54>)
 8002018:	2201      	movs	r2, #1
 800201a:	701a      	strb	r2, [r3, #0]

    // Calculate the battery percentage
    battery_percentage = adc_data * 100 / 4095;
 800201c:	4b0a      	ldr	r3, [pc, #40]	@ (8002048 <HAL_ADC_ConvCpltCallback+0x50>)
 800201e:	881b      	ldrh	r3, [r3, #0]
 8002020:	461a      	mov	r2, r3
 8002022:	2364      	movs	r3, #100	@ 0x64
 8002024:	fb02 f303 	mul.w	r3, r2, r3
 8002028:	4a09      	ldr	r2, [pc, #36]	@ (8002050 <HAL_ADC_ConvCpltCallback+0x58>)
 800202a:	fb82 1203 	smull	r1, r2, r2, r3
 800202e:	441a      	add	r2, r3
 8002030:	12d2      	asrs	r2, r2, #11
 8002032:	17db      	asrs	r3, r3, #31
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	b29a      	uxth	r2, r3
 8002038:	4b06      	ldr	r3, [pc, #24]	@ (8002054 <HAL_ADC_ConvCpltCallback+0x5c>)
 800203a:	801a      	strh	r2, [r3, #0]
	}
}
 800203c:	bf00      	nop
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	20000078 	.word	0x20000078
 8002048:	2000015e 	.word	0x2000015e
 800204c:	2000015d 	.word	0x2000015d
 8002050:	80080081 	.word	0x80080081
 8002054:	20000160 	.word	0x20000160

08002058 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800205c:	b672      	cpsid	i
}
 800205e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002060:	bf00      	nop
 8002062:	e7fd      	b.n	8002060 <Error_Handler+0x8>

08002064 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002068:	4b17      	ldr	r3, [pc, #92]	@ (80020c8 <MX_SPI1_Init+0x64>)
 800206a:	4a18      	ldr	r2, [pc, #96]	@ (80020cc <MX_SPI1_Init+0x68>)
 800206c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800206e:	4b16      	ldr	r3, [pc, #88]	@ (80020c8 <MX_SPI1_Init+0x64>)
 8002070:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002074:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002076:	4b14      	ldr	r3, [pc, #80]	@ (80020c8 <MX_SPI1_Init+0x64>)
 8002078:	2200      	movs	r2, #0
 800207a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800207c:	4b12      	ldr	r3, [pc, #72]	@ (80020c8 <MX_SPI1_Init+0x64>)
 800207e:	2200      	movs	r2, #0
 8002080:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002082:	4b11      	ldr	r3, [pc, #68]	@ (80020c8 <MX_SPI1_Init+0x64>)
 8002084:	2200      	movs	r2, #0
 8002086:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002088:	4b0f      	ldr	r3, [pc, #60]	@ (80020c8 <MX_SPI1_Init+0x64>)
 800208a:	2200      	movs	r2, #0
 800208c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800208e:	4b0e      	ldr	r3, [pc, #56]	@ (80020c8 <MX_SPI1_Init+0x64>)
 8002090:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002094:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002096:	4b0c      	ldr	r3, [pc, #48]	@ (80020c8 <MX_SPI1_Init+0x64>)
 8002098:	2228      	movs	r2, #40	@ 0x28
 800209a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800209c:	4b0a      	ldr	r3, [pc, #40]	@ (80020c8 <MX_SPI1_Init+0x64>)
 800209e:	2200      	movs	r2, #0
 80020a0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80020a2:	4b09      	ldr	r3, [pc, #36]	@ (80020c8 <MX_SPI1_Init+0x64>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020a8:	4b07      	ldr	r3, [pc, #28]	@ (80020c8 <MX_SPI1_Init+0x64>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80020ae:	4b06      	ldr	r3, [pc, #24]	@ (80020c8 <MX_SPI1_Init+0x64>)
 80020b0:	220a      	movs	r2, #10
 80020b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80020b4:	4804      	ldr	r0, [pc, #16]	@ (80020c8 <MX_SPI1_Init+0x64>)
 80020b6:	f002 fec1 	bl	8004e3c <HAL_SPI_Init>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80020c0:	f7ff ffca 	bl	8002058 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80020c4:	bf00      	nop
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	20000168 	.word	0x20000168
 80020cc:	40013000 	.word	0x40013000

080020d0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b088      	sub	sp, #32
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d8:	f107 0310 	add.w	r3, r7, #16
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	605a      	str	r2, [r3, #4]
 80020e2:	609a      	str	r2, [r3, #8]
 80020e4:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a15      	ldr	r2, [pc, #84]	@ (8002140 <HAL_SPI_MspInit+0x70>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d123      	bne.n	8002138 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020f0:	4b14      	ldr	r3, [pc, #80]	@ (8002144 <HAL_SPI_MspInit+0x74>)
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	4a13      	ldr	r2, [pc, #76]	@ (8002144 <HAL_SPI_MspInit+0x74>)
 80020f6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80020fa:	6193      	str	r3, [r2, #24]
 80020fc:	4b11      	ldr	r3, [pc, #68]	@ (8002144 <HAL_SPI_MspInit+0x74>)
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002104:	60fb      	str	r3, [r7, #12]
 8002106:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002108:	4b0e      	ldr	r3, [pc, #56]	@ (8002144 <HAL_SPI_MspInit+0x74>)
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	4a0d      	ldr	r2, [pc, #52]	@ (8002144 <HAL_SPI_MspInit+0x74>)
 800210e:	f043 0304 	orr.w	r3, r3, #4
 8002112:	6193      	str	r3, [r2, #24]
 8002114:	4b0b      	ldr	r3, [pc, #44]	@ (8002144 <HAL_SPI_MspInit+0x74>)
 8002116:	699b      	ldr	r3, [r3, #24]
 8002118:	f003 0304 	and.w	r3, r3, #4
 800211c:	60bb      	str	r3, [r7, #8]
 800211e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|DIN_Pin;
 8002120:	23a0      	movs	r3, #160	@ 0xa0
 8002122:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002124:	2302      	movs	r3, #2
 8002126:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002128:	2303      	movs	r3, #3
 800212a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800212c:	f107 0310 	add.w	r3, r7, #16
 8002130:	4619      	mov	r1, r3
 8002132:	4805      	ldr	r0, [pc, #20]	@ (8002148 <HAL_SPI_MspInit+0x78>)
 8002134:	f000 ff8a 	bl	800304c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002138:	bf00      	nop
 800213a:	3720      	adds	r7, #32
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40013000 	.word	0x40013000
 8002144:	40021000 	.word	0x40021000
 8002148:	40010800 	.word	0x40010800

0800214c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002152:	4b15      	ldr	r3, [pc, #84]	@ (80021a8 <HAL_MspInit+0x5c>)
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	4a14      	ldr	r2, [pc, #80]	@ (80021a8 <HAL_MspInit+0x5c>)
 8002158:	f043 0301 	orr.w	r3, r3, #1
 800215c:	6193      	str	r3, [r2, #24]
 800215e:	4b12      	ldr	r3, [pc, #72]	@ (80021a8 <HAL_MspInit+0x5c>)
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	60bb      	str	r3, [r7, #8]
 8002168:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800216a:	4b0f      	ldr	r3, [pc, #60]	@ (80021a8 <HAL_MspInit+0x5c>)
 800216c:	69db      	ldr	r3, [r3, #28]
 800216e:	4a0e      	ldr	r2, [pc, #56]	@ (80021a8 <HAL_MspInit+0x5c>)
 8002170:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002174:	61d3      	str	r3, [r2, #28]
 8002176:	4b0c      	ldr	r3, [pc, #48]	@ (80021a8 <HAL_MspInit+0x5c>)
 8002178:	69db      	ldr	r3, [r3, #28]
 800217a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800217e:	607b      	str	r3, [r7, #4]
 8002180:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002182:	4b0a      	ldr	r3, [pc, #40]	@ (80021ac <HAL_MspInit+0x60>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	4a04      	ldr	r2, [pc, #16]	@ (80021ac <HAL_MspInit+0x60>)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800219e:	bf00      	nop
 80021a0:	3714      	adds	r7, #20
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bc80      	pop	{r7}
 80021a6:	4770      	bx	lr
 80021a8:	40021000 	.word	0x40021000
 80021ac:	40010000 	.word	0x40010000

080021b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021b4:	bf00      	nop
 80021b6:	e7fd      	b.n	80021b4 <NMI_Handler+0x4>

080021b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021bc:	bf00      	nop
 80021be:	e7fd      	b.n	80021bc <HardFault_Handler+0x4>

080021c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021c4:	bf00      	nop
 80021c6:	e7fd      	b.n	80021c4 <MemManage_Handler+0x4>

080021c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021cc:	bf00      	nop
 80021ce:	e7fd      	b.n	80021cc <BusFault_Handler+0x4>

080021d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021d4:	bf00      	nop
 80021d6:	e7fd      	b.n	80021d4 <UsageFault_Handler+0x4>

080021d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021dc:	bf00      	nop
 80021de:	46bd      	mov	sp, r7
 80021e0:	bc80      	pop	{r7}
 80021e2:	4770      	bx	lr

080021e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021e8:	bf00      	nop
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bc80      	pop	{r7}
 80021ee:	4770      	bx	lr

080021f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021f4:	bf00      	nop
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bc80      	pop	{r7}
 80021fa:	4770      	bx	lr

080021fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002200:	f000 f926 	bl	8002450 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002204:	bf00      	nop
 8002206:	bd80      	pop	{r7, pc}

08002208 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800220c:	4802      	ldr	r0, [pc, #8]	@ (8002218 <ADC1_2_IRQHandler+0x10>)
 800220e:	f000 faf9 	bl	8002804 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002212:	bf00      	nop
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	20000078 	.word	0x20000078

0800221c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RTC_IN5_Pin);
 8002220:	2020      	movs	r0, #32
 8002222:	f001 f8c7 	bl	80033b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON4_IN8_Pin);
 8002226:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800222a:	f001 f8c3 	bl	80033b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800222e:	bf00      	nop
 8002230:	bd80      	pop	{r7, pc}
	...

08002234 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002238:	4802      	ldr	r0, [pc, #8]	@ (8002244 <USART1_IRQHandler+0x10>)
 800223a:	f002 fef9 	bl	8005030 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800223e:	bf00      	nop
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	200001c0 	.word	0x200001c0

08002248 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON0_IN12_Pin);
 800224c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002250:	f001 f8b0 	bl	80033b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON1_IN13_Pin);
 8002254:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002258:	f001 f8ac 	bl	80033b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON2_IN14_Pin);
 800225c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002260:	f001 f8a8 	bl	80033b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON3_IN15_Pin);
 8002264:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002268:	f001 f8a4 	bl	80033b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800226c:	bf00      	nop
 800226e:	bd80      	pop	{r7, pc}

08002270 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002274:	bf00      	nop
 8002276:	46bd      	mov	sp, r7
 8002278:	bc80      	pop	{r7}
 800227a:	4770      	bx	lr

0800227c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002280:	4b11      	ldr	r3, [pc, #68]	@ (80022c8 <MX_USART1_UART_Init+0x4c>)
 8002282:	4a12      	ldr	r2, [pc, #72]	@ (80022cc <MX_USART1_UART_Init+0x50>)
 8002284:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002286:	4b10      	ldr	r3, [pc, #64]	@ (80022c8 <MX_USART1_UART_Init+0x4c>)
 8002288:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800228c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800228e:	4b0e      	ldr	r3, [pc, #56]	@ (80022c8 <MX_USART1_UART_Init+0x4c>)
 8002290:	2200      	movs	r2, #0
 8002292:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002294:	4b0c      	ldr	r3, [pc, #48]	@ (80022c8 <MX_USART1_UART_Init+0x4c>)
 8002296:	2200      	movs	r2, #0
 8002298:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800229a:	4b0b      	ldr	r3, [pc, #44]	@ (80022c8 <MX_USART1_UART_Init+0x4c>)
 800229c:	2200      	movs	r2, #0
 800229e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80022a0:	4b09      	ldr	r3, [pc, #36]	@ (80022c8 <MX_USART1_UART_Init+0x4c>)
 80022a2:	220c      	movs	r2, #12
 80022a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022a6:	4b08      	ldr	r3, [pc, #32]	@ (80022c8 <MX_USART1_UART_Init+0x4c>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80022ac:	4b06      	ldr	r3, [pc, #24]	@ (80022c8 <MX_USART1_UART_Init+0x4c>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80022b2:	4805      	ldr	r0, [pc, #20]	@ (80022c8 <MX_USART1_UART_Init+0x4c>)
 80022b4:	f002 fe46 	bl	8004f44 <HAL_UART_Init>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80022be:	f7ff fecb 	bl	8002058 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80022c2:	bf00      	nop
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	200001c0 	.word	0x200001c0
 80022cc:	40013800 	.word	0x40013800

080022d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b088      	sub	sp, #32
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d8:	f107 0310 	add.w	r3, r7, #16
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	605a      	str	r2, [r3, #4]
 80022e2:	609a      	str	r2, [r3, #8]
 80022e4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a20      	ldr	r2, [pc, #128]	@ (800236c <HAL_UART_MspInit+0x9c>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d139      	bne.n	8002364 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022f0:	4b1f      	ldr	r3, [pc, #124]	@ (8002370 <HAL_UART_MspInit+0xa0>)
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	4a1e      	ldr	r2, [pc, #120]	@ (8002370 <HAL_UART_MspInit+0xa0>)
 80022f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022fa:	6193      	str	r3, [r2, #24]
 80022fc:	4b1c      	ldr	r3, [pc, #112]	@ (8002370 <HAL_UART_MspInit+0xa0>)
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002304:	60fb      	str	r3, [r7, #12]
 8002306:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002308:	4b19      	ldr	r3, [pc, #100]	@ (8002370 <HAL_UART_MspInit+0xa0>)
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	4a18      	ldr	r2, [pc, #96]	@ (8002370 <HAL_UART_MspInit+0xa0>)
 800230e:	f043 0304 	orr.w	r3, r3, #4
 8002312:	6193      	str	r3, [r2, #24]
 8002314:	4b16      	ldr	r3, [pc, #88]	@ (8002370 <HAL_UART_MspInit+0xa0>)
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	f003 0304 	and.w	r3, r3, #4
 800231c:	60bb      	str	r3, [r7, #8]
 800231e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002320:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002324:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002326:	2302      	movs	r3, #2
 8002328:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800232a:	2303      	movs	r3, #3
 800232c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800232e:	f107 0310 	add.w	r3, r7, #16
 8002332:	4619      	mov	r1, r3
 8002334:	480f      	ldr	r0, [pc, #60]	@ (8002374 <HAL_UART_MspInit+0xa4>)
 8002336:	f000 fe89 	bl	800304c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800233a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800233e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002340:	2300      	movs	r3, #0
 8002342:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002344:	2300      	movs	r3, #0
 8002346:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002348:	f107 0310 	add.w	r3, r7, #16
 800234c:	4619      	mov	r1, r3
 800234e:	4809      	ldr	r0, [pc, #36]	@ (8002374 <HAL_UART_MspInit+0xa4>)
 8002350:	f000 fe7c 	bl	800304c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002354:	2200      	movs	r2, #0
 8002356:	2100      	movs	r1, #0
 8002358:	2025      	movs	r0, #37	@ 0x25
 800235a:	f000 fd8e 	bl	8002e7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800235e:	2025      	movs	r0, #37	@ 0x25
 8002360:	f000 fda7 	bl	8002eb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002364:	bf00      	nop
 8002366:	3720      	adds	r7, #32
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40013800 	.word	0x40013800
 8002370:	40021000 	.word	0x40021000
 8002374:	40010800 	.word	0x40010800

08002378 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002378:	f7ff ff7a 	bl	8002270 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800237c:	480b      	ldr	r0, [pc, #44]	@ (80023ac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800237e:	490c      	ldr	r1, [pc, #48]	@ (80023b0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002380:	4a0c      	ldr	r2, [pc, #48]	@ (80023b4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002382:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002384:	e002      	b.n	800238c <LoopCopyDataInit>

08002386 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002386:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002388:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800238a:	3304      	adds	r3, #4

0800238c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800238c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800238e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002390:	d3f9      	bcc.n	8002386 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002392:	4a09      	ldr	r2, [pc, #36]	@ (80023b8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002394:	4c09      	ldr	r4, [pc, #36]	@ (80023bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002396:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002398:	e001      	b.n	800239e <LoopFillZerobss>

0800239a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800239a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800239c:	3204      	adds	r2, #4

0800239e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800239e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023a0:	d3fb      	bcc.n	800239a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023a2:	f003 fb5f 	bl	8005a64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80023a6:	f7fe f863 	bl	8000470 <main>
  bx lr
 80023aa:	4770      	bx	lr
  ldr r0, =_sdata
 80023ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023b0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80023b4:	08005b08 	.word	0x08005b08
  ldr r2, =_sbss
 80023b8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80023bc:	2000020c 	.word	0x2000020c

080023c0 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80023c0:	e7fe      	b.n	80023c0 <CAN1_RX1_IRQHandler>
	...

080023c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023c8:	4b08      	ldr	r3, [pc, #32]	@ (80023ec <HAL_Init+0x28>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a07      	ldr	r2, [pc, #28]	@ (80023ec <HAL_Init+0x28>)
 80023ce:	f043 0310 	orr.w	r3, r3, #16
 80023d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023d4:	2003      	movs	r0, #3
 80023d6:	f000 fd45 	bl	8002e64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023da:	200f      	movs	r0, #15
 80023dc:	f000 f808 	bl	80023f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023e0:	f7ff feb4 	bl	800214c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	40022000 	.word	0x40022000

080023f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023f8:	4b12      	ldr	r3, [pc, #72]	@ (8002444 <HAL_InitTick+0x54>)
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	4b12      	ldr	r3, [pc, #72]	@ (8002448 <HAL_InitTick+0x58>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	4619      	mov	r1, r3
 8002402:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002406:	fbb3 f3f1 	udiv	r3, r3, r1
 800240a:	fbb2 f3f3 	udiv	r3, r2, r3
 800240e:	4618      	mov	r0, r3
 8002410:	f000 fd5d 	bl	8002ece <HAL_SYSTICK_Config>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e00e      	b.n	800243c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2b0f      	cmp	r3, #15
 8002422:	d80a      	bhi.n	800243a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002424:	2200      	movs	r2, #0
 8002426:	6879      	ldr	r1, [r7, #4]
 8002428:	f04f 30ff 	mov.w	r0, #4294967295
 800242c:	f000 fd25 	bl	8002e7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002430:	4a06      	ldr	r2, [pc, #24]	@ (800244c <HAL_InitTick+0x5c>)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002436:	2300      	movs	r3, #0
 8002438:	e000      	b.n	800243c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
}
 800243c:	4618      	mov	r0, r3
 800243e:	3708      	adds	r7, #8
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	20000050 	.word	0x20000050
 8002448:	20000058 	.word	0x20000058
 800244c:	20000054 	.word	0x20000054

08002450 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002454:	4b05      	ldr	r3, [pc, #20]	@ (800246c <HAL_IncTick+0x1c>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	461a      	mov	r2, r3
 800245a:	4b05      	ldr	r3, [pc, #20]	@ (8002470 <HAL_IncTick+0x20>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4413      	add	r3, r2
 8002460:	4a03      	ldr	r2, [pc, #12]	@ (8002470 <HAL_IncTick+0x20>)
 8002462:	6013      	str	r3, [r2, #0]
}
 8002464:	bf00      	nop
 8002466:	46bd      	mov	sp, r7
 8002468:	bc80      	pop	{r7}
 800246a:	4770      	bx	lr
 800246c:	20000058 	.word	0x20000058
 8002470:	20000208 	.word	0x20000208

08002474 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  return uwTick;
 8002478:	4b02      	ldr	r3, [pc, #8]	@ (8002484 <HAL_GetTick+0x10>)
 800247a:	681b      	ldr	r3, [r3, #0]
}
 800247c:	4618      	mov	r0, r3
 800247e:	46bd      	mov	sp, r7
 8002480:	bc80      	pop	{r7}
 8002482:	4770      	bx	lr
 8002484:	20000208 	.word	0x20000208

08002488 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002490:	f7ff fff0 	bl	8002474 <HAL_GetTick>
 8002494:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024a0:	d005      	beq.n	80024ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024a2:	4b0a      	ldr	r3, [pc, #40]	@ (80024cc <HAL_Delay+0x44>)
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	461a      	mov	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	4413      	add	r3, r2
 80024ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024ae:	bf00      	nop
 80024b0:	f7ff ffe0 	bl	8002474 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d8f7      	bhi.n	80024b0 <HAL_Delay+0x28>
  {
  }
}
 80024c0:	bf00      	nop
 80024c2:	bf00      	nop
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	20000058 	.word	0x20000058

080024d0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024d8:	2300      	movs	r3, #0
 80024da:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80024dc:	2300      	movs	r3, #0
 80024de:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80024e0:	2300      	movs	r3, #0
 80024e2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80024e4:	2300      	movs	r3, #0
 80024e6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d101      	bne.n	80024f2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e0be      	b.n	8002670 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d109      	bne.n	8002514 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7fd fe5a 	bl	80001c8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f000 fb8f 	bl	8002c38 <ADC_ConversionStop_Disable>
 800251a:	4603      	mov	r3, r0
 800251c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002522:	f003 0310 	and.w	r3, r3, #16
 8002526:	2b00      	cmp	r3, #0
 8002528:	f040 8099 	bne.w	800265e <HAL_ADC_Init+0x18e>
 800252c:	7dfb      	ldrb	r3, [r7, #23]
 800252e:	2b00      	cmp	r3, #0
 8002530:	f040 8095 	bne.w	800265e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002538:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800253c:	f023 0302 	bic.w	r3, r3, #2
 8002540:	f043 0202 	orr.w	r2, r3, #2
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002550:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	7b1b      	ldrb	r3, [r3, #12]
 8002556:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002558:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800255a:	68ba      	ldr	r2, [r7, #8]
 800255c:	4313      	orrs	r3, r2
 800255e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002568:	d003      	beq.n	8002572 <HAL_ADC_Init+0xa2>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d102      	bne.n	8002578 <HAL_ADC_Init+0xa8>
 8002572:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002576:	e000      	b.n	800257a <HAL_ADC_Init+0xaa>
 8002578:	2300      	movs	r3, #0
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	4313      	orrs	r3, r2
 800257e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	7d1b      	ldrb	r3, [r3, #20]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d119      	bne.n	80025bc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	7b1b      	ldrb	r3, [r3, #12]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d109      	bne.n	80025a4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	3b01      	subs	r3, #1
 8002596:	035a      	lsls	r2, r3, #13
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	4313      	orrs	r3, r2
 800259c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80025a0:	613b      	str	r3, [r7, #16]
 80025a2:	e00b      	b.n	80025bc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025a8:	f043 0220 	orr.w	r2, r3, #32
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025b4:	f043 0201 	orr.w	r2, r3, #1
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	430a      	orrs	r2, r1
 80025ce:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	689a      	ldr	r2, [r3, #8]
 80025d6:	4b28      	ldr	r3, [pc, #160]	@ (8002678 <HAL_ADC_Init+0x1a8>)
 80025d8:	4013      	ands	r3, r2
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	6812      	ldr	r2, [r2, #0]
 80025de:	68b9      	ldr	r1, [r7, #8]
 80025e0:	430b      	orrs	r3, r1
 80025e2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80025ec:	d003      	beq.n	80025f6 <HAL_ADC_Init+0x126>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d104      	bne.n	8002600 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	3b01      	subs	r3, #1
 80025fc:	051b      	lsls	r3, r3, #20
 80025fe:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002606:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	430a      	orrs	r2, r1
 8002612:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	689a      	ldr	r2, [r3, #8]
 800261a:	4b18      	ldr	r3, [pc, #96]	@ (800267c <HAL_ADC_Init+0x1ac>)
 800261c:	4013      	ands	r3, r2
 800261e:	68ba      	ldr	r2, [r7, #8]
 8002620:	429a      	cmp	r2, r3
 8002622:	d10b      	bne.n	800263c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800262e:	f023 0303 	bic.w	r3, r3, #3
 8002632:	f043 0201 	orr.w	r2, r3, #1
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800263a:	e018      	b.n	800266e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002640:	f023 0312 	bic.w	r3, r3, #18
 8002644:	f043 0210 	orr.w	r2, r3, #16
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002650:	f043 0201 	orr.w	r2, r3, #1
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800265c:	e007      	b.n	800266e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002662:	f043 0210 	orr.w	r2, r3, #16
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800266e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002670:	4618      	mov	r0, r3
 8002672:	3718      	adds	r7, #24
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	ffe1f7fd 	.word	0xffe1f7fd
 800267c:	ff1f0efe 	.word	0xff1f0efe

08002680 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002688:	2300      	movs	r3, #0
 800268a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002692:	2b01      	cmp	r3, #1
 8002694:	d101      	bne.n	800269a <HAL_ADC_Start_IT+0x1a>
 8002696:	2302      	movs	r3, #2
 8002698:	e0a0      	b.n	80027dc <HAL_ADC_Start_IT+0x15c>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2201      	movs	r2, #1
 800269e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 fa6e 	bl	8002b84 <ADC_Enable>
 80026a8:	4603      	mov	r3, r0
 80026aa:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80026ac:	7bfb      	ldrb	r3, [r7, #15]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	f040 808f 	bne.w	80027d2 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026b8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80026bc:	f023 0301 	bic.w	r3, r3, #1
 80026c0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a45      	ldr	r2, [pc, #276]	@ (80027e4 <HAL_ADC_Start_IT+0x164>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d105      	bne.n	80026de <HAL_ADC_Start_IT+0x5e>
 80026d2:	4b45      	ldr	r3, [pc, #276]	@ (80027e8 <HAL_ADC_Start_IT+0x168>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d115      	bne.n	800270a <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026e2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d026      	beq.n	8002746 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026fc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002700:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002708:	e01d      	b.n	8002746 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800270e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a33      	ldr	r2, [pc, #204]	@ (80027e8 <HAL_ADC_Start_IT+0x168>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d004      	beq.n	800272a <HAL_ADC_Start_IT+0xaa>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a2f      	ldr	r2, [pc, #188]	@ (80027e4 <HAL_ADC_Start_IT+0x164>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d10d      	bne.n	8002746 <HAL_ADC_Start_IT+0xc6>
 800272a:	4b2f      	ldr	r3, [pc, #188]	@ (80027e8 <HAL_ADC_Start_IT+0x168>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002732:	2b00      	cmp	r3, #0
 8002734:	d007      	beq.n	8002746 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800273a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800273e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800274a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d006      	beq.n	8002760 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002756:	f023 0206 	bic.w	r2, r3, #6
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800275e:	e002      	b.n	8002766 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f06f 0202 	mvn.w	r2, #2
 8002776:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	685a      	ldr	r2, [r3, #4]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f042 0220 	orr.w	r2, r2, #32
 8002786:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002792:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002796:	d113      	bne.n	80027c0 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800279c:	4a11      	ldr	r2, [pc, #68]	@ (80027e4 <HAL_ADC_Start_IT+0x164>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d105      	bne.n	80027ae <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80027a2:	4b11      	ldr	r3, [pc, #68]	@ (80027e8 <HAL_ADC_Start_IT+0x168>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d108      	bne.n	80027c0 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80027bc:	609a      	str	r2, [r3, #8]
 80027be:	e00c      	b.n	80027da <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	689a      	ldr	r2, [r3, #8]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80027ce:	609a      	str	r2, [r3, #8]
 80027d0:	e003      	b.n	80027da <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 80027da:	7bfb      	ldrb	r3, [r7, #15]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3710      	adds	r7, #16
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	40012800 	.word	0x40012800
 80027e8:	40012400 	.word	0x40012400

080027ec <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	bc80      	pop	{r7}
 8002802:	4770      	bx	lr

08002804 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	f003 0320 	and.w	r3, r3, #32
 8002822:	2b00      	cmp	r3, #0
 8002824:	d03e      	beq.n	80028a4 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d039      	beq.n	80028a4 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002834:	f003 0310 	and.w	r3, r3, #16
 8002838:	2b00      	cmp	r3, #0
 800283a:	d105      	bne.n	8002848 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002840:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002852:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002856:	d11d      	bne.n	8002894 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800285c:	2b00      	cmp	r3, #0
 800285e:	d119      	bne.n	8002894 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	685a      	ldr	r2, [r3, #4]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f022 0220 	bic.w	r2, r2, #32
 800286e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002874:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002880:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d105      	bne.n	8002894 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800288c:	f043 0201 	orr.w	r2, r3, #1
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f7ff fbaf 	bl	8001ff8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f06f 0212 	mvn.w	r2, #18
 80028a2:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d04d      	beq.n	800294a <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f003 0304 	and.w	r3, r3, #4
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d048      	beq.n	800294a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028bc:	f003 0310 	and.w	r3, r3, #16
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d105      	bne.n	80028d0 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028c8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80028da:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 80028de:	d012      	beq.n	8002906 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d125      	bne.n	800293a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80028f8:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80028fc:	d11d      	bne.n	800293a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002902:	2b00      	cmp	r3, #0
 8002904:	d119      	bne.n	800293a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	685a      	ldr	r2, [r3, #4]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002914:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800291a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002926:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800292a:	2b00      	cmp	r3, #0
 800292c:	d105      	bne.n	800293a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002932:	f043 0201 	orr.w	r2, r3, #1
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 f9bd 	bl	8002cba <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f06f 020c 	mvn.w	r2, #12
 8002948:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002950:	2b00      	cmp	r3, #0
 8002952:	d012      	beq.n	800297a <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00d      	beq.n	800297a <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002962:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 f809 	bl	8002982 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f06f 0201 	mvn.w	r2, #1
 8002978:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800297a:	bf00      	nop
 800297c:	3710      	adds	r7, #16
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002982:	b480      	push	{r7}
 8002984:	b083      	sub	sp, #12
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800298a:	bf00      	nop
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	bc80      	pop	{r7}
 8002992:	4770      	bx	lr

08002994 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800299e:	2300      	movs	r3, #0
 80029a0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80029a2:	2300      	movs	r3, #0
 80029a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d101      	bne.n	80029b4 <HAL_ADC_ConfigChannel+0x20>
 80029b0:	2302      	movs	r3, #2
 80029b2:	e0dc      	b.n	8002b6e <HAL_ADC_ConfigChannel+0x1da>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	2b06      	cmp	r3, #6
 80029c2:	d81c      	bhi.n	80029fe <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685a      	ldr	r2, [r3, #4]
 80029ce:	4613      	mov	r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	4413      	add	r3, r2
 80029d4:	3b05      	subs	r3, #5
 80029d6:	221f      	movs	r2, #31
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	43db      	mvns	r3, r3
 80029de:	4019      	ands	r1, r3
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	6818      	ldr	r0, [r3, #0]
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685a      	ldr	r2, [r3, #4]
 80029e8:	4613      	mov	r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	4413      	add	r3, r2
 80029ee:	3b05      	subs	r3, #5
 80029f0:	fa00 f203 	lsl.w	r2, r0, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	430a      	orrs	r2, r1
 80029fa:	635a      	str	r2, [r3, #52]	@ 0x34
 80029fc:	e03c      	b.n	8002a78 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	2b0c      	cmp	r3, #12
 8002a04:	d81c      	bhi.n	8002a40 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685a      	ldr	r2, [r3, #4]
 8002a10:	4613      	mov	r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	4413      	add	r3, r2
 8002a16:	3b23      	subs	r3, #35	@ 0x23
 8002a18:	221f      	movs	r2, #31
 8002a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1e:	43db      	mvns	r3, r3
 8002a20:	4019      	ands	r1, r3
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	6818      	ldr	r0, [r3, #0]
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685a      	ldr	r2, [r3, #4]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	4413      	add	r3, r2
 8002a30:	3b23      	subs	r3, #35	@ 0x23
 8002a32:	fa00 f203 	lsl.w	r2, r0, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a3e:	e01b      	b.n	8002a78 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685a      	ldr	r2, [r3, #4]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	4413      	add	r3, r2
 8002a50:	3b41      	subs	r3, #65	@ 0x41
 8002a52:	221f      	movs	r2, #31
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	4019      	ands	r1, r3
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	6818      	ldr	r0, [r3, #0]
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685a      	ldr	r2, [r3, #4]
 8002a64:	4613      	mov	r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	4413      	add	r3, r2
 8002a6a:	3b41      	subs	r3, #65	@ 0x41
 8002a6c:	fa00 f203 	lsl.w	r2, r0, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	430a      	orrs	r2, r1
 8002a76:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2b09      	cmp	r3, #9
 8002a7e:	d91c      	bls.n	8002aba <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68d9      	ldr	r1, [r3, #12]
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	4413      	add	r3, r2
 8002a90:	3b1e      	subs	r3, #30
 8002a92:	2207      	movs	r2, #7
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	4019      	ands	r1, r3
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	6898      	ldr	r0, [r3, #8]
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	4413      	add	r3, r2
 8002aaa:	3b1e      	subs	r3, #30
 8002aac:	fa00 f203 	lsl.w	r2, r0, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	60da      	str	r2, [r3, #12]
 8002ab8:	e019      	b.n	8002aee <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	6919      	ldr	r1, [r3, #16]
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	4413      	add	r3, r2
 8002aca:	2207      	movs	r2, #7
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	4019      	ands	r1, r3
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	6898      	ldr	r0, [r3, #8]
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	4613      	mov	r3, r2
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	4413      	add	r3, r2
 8002ae2:	fa00 f203 	lsl.w	r2, r0, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	430a      	orrs	r2, r1
 8002aec:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2b10      	cmp	r3, #16
 8002af4:	d003      	beq.n	8002afe <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002afa:	2b11      	cmp	r3, #17
 8002afc:	d132      	bne.n	8002b64 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a1d      	ldr	r2, [pc, #116]	@ (8002b78 <HAL_ADC_ConfigChannel+0x1e4>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d125      	bne.n	8002b54 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d126      	bne.n	8002b64 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	689a      	ldr	r2, [r3, #8]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002b24:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2b10      	cmp	r3, #16
 8002b2c:	d11a      	bne.n	8002b64 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b2e:	4b13      	ldr	r3, [pc, #76]	@ (8002b7c <HAL_ADC_ConfigChannel+0x1e8>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a13      	ldr	r2, [pc, #76]	@ (8002b80 <HAL_ADC_ConfigChannel+0x1ec>)
 8002b34:	fba2 2303 	umull	r2, r3, r2, r3
 8002b38:	0c9a      	lsrs	r2, r3, #18
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	4413      	add	r3, r2
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b44:	e002      	b.n	8002b4c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1f9      	bne.n	8002b46 <HAL_ADC_ConfigChannel+0x1b2>
 8002b52:	e007      	b.n	8002b64 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b58:	f043 0220 	orr.w	r2, r3, #32
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3714      	adds	r7, #20
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bc80      	pop	{r7}
 8002b76:	4770      	bx	lr
 8002b78:	40012400 	.word	0x40012400
 8002b7c:	20000050 	.word	0x20000050
 8002b80:	431bde83 	.word	0x431bde83

08002b84 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002b90:	2300      	movs	r3, #0
 8002b92:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d040      	beq.n	8002c24 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f042 0201 	orr.w	r2, r2, #1
 8002bb0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002bb2:	4b1f      	ldr	r3, [pc, #124]	@ (8002c30 <ADC_Enable+0xac>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a1f      	ldr	r2, [pc, #124]	@ (8002c34 <ADC_Enable+0xb0>)
 8002bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bbc:	0c9b      	lsrs	r3, r3, #18
 8002bbe:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002bc0:	e002      	b.n	8002bc8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1f9      	bne.n	8002bc2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002bce:	f7ff fc51 	bl	8002474 <HAL_GetTick>
 8002bd2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002bd4:	e01f      	b.n	8002c16 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002bd6:	f7ff fc4d 	bl	8002474 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d918      	bls.n	8002c16 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d011      	beq.n	8002c16 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bf6:	f043 0210 	orr.w	r2, r3, #16
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c02:	f043 0201 	orr.w	r2, r3, #1
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e007      	b.n	8002c26 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f003 0301 	and.w	r3, r3, #1
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d1d8      	bne.n	8002bd6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	20000050 	.word	0x20000050
 8002c34:	431bde83 	.word	0x431bde83

08002c38 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c40:	2300      	movs	r3, #0
 8002c42:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d12e      	bne.n	8002cb0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	689a      	ldr	r2, [r3, #8]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f022 0201 	bic.w	r2, r2, #1
 8002c60:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c62:	f7ff fc07 	bl	8002474 <HAL_GetTick>
 8002c66:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002c68:	e01b      	b.n	8002ca2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002c6a:	f7ff fc03 	bl	8002474 <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d914      	bls.n	8002ca2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d10d      	bne.n	8002ca2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c8a:	f043 0210 	orr.w	r2, r3, #16
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c96:	f043 0201 	orr.w	r2, r3, #1
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e007      	b.n	8002cb2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d0dc      	beq.n	8002c6a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	b083      	sub	sp, #12
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002cc2:	bf00      	nop
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bc80      	pop	{r7}
 8002cca:	4770      	bx	lr

08002ccc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f003 0307 	and.w	r3, r3, #7
 8002cda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8002d10 <__NVIC_SetPriorityGrouping+0x44>)
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ce2:	68ba      	ldr	r2, [r7, #8]
 8002ce4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ce8:	4013      	ands	r3, r2
 8002cea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cf4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002cf8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cfe:	4a04      	ldr	r2, [pc, #16]	@ (8002d10 <__NVIC_SetPriorityGrouping+0x44>)
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	60d3      	str	r3, [r2, #12]
}
 8002d04:	bf00      	nop
 8002d06:	3714      	adds	r7, #20
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bc80      	pop	{r7}
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	e000ed00 	.word	0xe000ed00

08002d14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d18:	4b04      	ldr	r3, [pc, #16]	@ (8002d2c <__NVIC_GetPriorityGrouping+0x18>)
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	0a1b      	lsrs	r3, r3, #8
 8002d1e:	f003 0307 	and.w	r3, r3, #7
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bc80      	pop	{r7}
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	e000ed00 	.word	0xe000ed00

08002d30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	4603      	mov	r3, r0
 8002d38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	db0b      	blt.n	8002d5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d42:	79fb      	ldrb	r3, [r7, #7]
 8002d44:	f003 021f 	and.w	r2, r3, #31
 8002d48:	4906      	ldr	r1, [pc, #24]	@ (8002d64 <__NVIC_EnableIRQ+0x34>)
 8002d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4e:	095b      	lsrs	r3, r3, #5
 8002d50:	2001      	movs	r0, #1
 8002d52:	fa00 f202 	lsl.w	r2, r0, r2
 8002d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d5a:	bf00      	nop
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bc80      	pop	{r7}
 8002d62:	4770      	bx	lr
 8002d64:	e000e100 	.word	0xe000e100

08002d68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	4603      	mov	r3, r0
 8002d70:	6039      	str	r1, [r7, #0]
 8002d72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	db0a      	blt.n	8002d92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	b2da      	uxtb	r2, r3
 8002d80:	490c      	ldr	r1, [pc, #48]	@ (8002db4 <__NVIC_SetPriority+0x4c>)
 8002d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d86:	0112      	lsls	r2, r2, #4
 8002d88:	b2d2      	uxtb	r2, r2
 8002d8a:	440b      	add	r3, r1
 8002d8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d90:	e00a      	b.n	8002da8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	b2da      	uxtb	r2, r3
 8002d96:	4908      	ldr	r1, [pc, #32]	@ (8002db8 <__NVIC_SetPriority+0x50>)
 8002d98:	79fb      	ldrb	r3, [r7, #7]
 8002d9a:	f003 030f 	and.w	r3, r3, #15
 8002d9e:	3b04      	subs	r3, #4
 8002da0:	0112      	lsls	r2, r2, #4
 8002da2:	b2d2      	uxtb	r2, r2
 8002da4:	440b      	add	r3, r1
 8002da6:	761a      	strb	r2, [r3, #24]
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bc80      	pop	{r7}
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	e000e100 	.word	0xe000e100
 8002db8:	e000ed00 	.word	0xe000ed00

08002dbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b089      	sub	sp, #36	@ 0x24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f003 0307 	and.w	r3, r3, #7
 8002dce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	f1c3 0307 	rsb	r3, r3, #7
 8002dd6:	2b04      	cmp	r3, #4
 8002dd8:	bf28      	it	cs
 8002dda:	2304      	movcs	r3, #4
 8002ddc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	3304      	adds	r3, #4
 8002de2:	2b06      	cmp	r3, #6
 8002de4:	d902      	bls.n	8002dec <NVIC_EncodePriority+0x30>
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	3b03      	subs	r3, #3
 8002dea:	e000      	b.n	8002dee <NVIC_EncodePriority+0x32>
 8002dec:	2300      	movs	r3, #0
 8002dee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002df0:	f04f 32ff 	mov.w	r2, #4294967295
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	43da      	mvns	r2, r3
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	401a      	ands	r2, r3
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e04:	f04f 31ff 	mov.w	r1, #4294967295
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0e:	43d9      	mvns	r1, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e14:	4313      	orrs	r3, r2
         );
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3724      	adds	r7, #36	@ 0x24
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bc80      	pop	{r7}
 8002e1e:	4770      	bx	lr

08002e20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e30:	d301      	bcc.n	8002e36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e32:	2301      	movs	r3, #1
 8002e34:	e00f      	b.n	8002e56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e36:	4a0a      	ldr	r2, [pc, #40]	@ (8002e60 <SysTick_Config+0x40>)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e3e:	210f      	movs	r1, #15
 8002e40:	f04f 30ff 	mov.w	r0, #4294967295
 8002e44:	f7ff ff90 	bl	8002d68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e48:	4b05      	ldr	r3, [pc, #20]	@ (8002e60 <SysTick_Config+0x40>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e4e:	4b04      	ldr	r3, [pc, #16]	@ (8002e60 <SysTick_Config+0x40>)
 8002e50:	2207      	movs	r2, #7
 8002e52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3708      	adds	r7, #8
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	e000e010 	.word	0xe000e010

08002e64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f7ff ff2d 	bl	8002ccc <__NVIC_SetPriorityGrouping>
}
 8002e72:	bf00      	nop
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b086      	sub	sp, #24
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	4603      	mov	r3, r0
 8002e82:	60b9      	str	r1, [r7, #8]
 8002e84:	607a      	str	r2, [r7, #4]
 8002e86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e8c:	f7ff ff42 	bl	8002d14 <__NVIC_GetPriorityGrouping>
 8002e90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	68b9      	ldr	r1, [r7, #8]
 8002e96:	6978      	ldr	r0, [r7, #20]
 8002e98:	f7ff ff90 	bl	8002dbc <NVIC_EncodePriority>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ea2:	4611      	mov	r1, r2
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7ff ff5f 	bl	8002d68 <__NVIC_SetPriority>
}
 8002eaa:	bf00      	nop
 8002eac:	3718      	adds	r7, #24
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b082      	sub	sp, #8
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	4603      	mov	r3, r0
 8002eba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7ff ff35 	bl	8002d30 <__NVIC_EnableIRQ>
}
 8002ec6:	bf00      	nop
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b082      	sub	sp, #8
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f7ff ffa2 	bl	8002e20 <SysTick_Config>
 8002edc:	4603      	mov	r3, r0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	b085      	sub	sp, #20
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d008      	beq.n	8002f10 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2204      	movs	r2, #4
 8002f02:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e020      	b.n	8002f52 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f022 020e 	bic.w	r2, r2, #14
 8002f1e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f022 0201 	bic.w	r2, r2, #1
 8002f2e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f38:	2101      	movs	r1, #1
 8002f3a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f3e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3714      	adds	r7, #20
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bc80      	pop	{r7}
 8002f5a:	4770      	bx	lr

08002f5c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f64:	2300      	movs	r3, #0
 8002f66:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d005      	beq.n	8002f80 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2204      	movs	r2, #4
 8002f78:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	73fb      	strb	r3, [r7, #15]
 8002f7e:	e051      	b.n	8003024 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f022 020e 	bic.w	r2, r2, #14
 8002f8e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f022 0201 	bic.w	r2, r2, #1
 8002f9e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a22      	ldr	r2, [pc, #136]	@ (8003030 <HAL_DMA_Abort_IT+0xd4>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d029      	beq.n	8002ffe <HAL_DMA_Abort_IT+0xa2>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a21      	ldr	r2, [pc, #132]	@ (8003034 <HAL_DMA_Abort_IT+0xd8>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d022      	beq.n	8002ffa <HAL_DMA_Abort_IT+0x9e>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a1f      	ldr	r2, [pc, #124]	@ (8003038 <HAL_DMA_Abort_IT+0xdc>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d01a      	beq.n	8002ff4 <HAL_DMA_Abort_IT+0x98>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a1e      	ldr	r2, [pc, #120]	@ (800303c <HAL_DMA_Abort_IT+0xe0>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d012      	beq.n	8002fee <HAL_DMA_Abort_IT+0x92>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a1c      	ldr	r2, [pc, #112]	@ (8003040 <HAL_DMA_Abort_IT+0xe4>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d00a      	beq.n	8002fe8 <HAL_DMA_Abort_IT+0x8c>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a1b      	ldr	r2, [pc, #108]	@ (8003044 <HAL_DMA_Abort_IT+0xe8>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d102      	bne.n	8002fe2 <HAL_DMA_Abort_IT+0x86>
 8002fdc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002fe0:	e00e      	b.n	8003000 <HAL_DMA_Abort_IT+0xa4>
 8002fe2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002fe6:	e00b      	b.n	8003000 <HAL_DMA_Abort_IT+0xa4>
 8002fe8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002fec:	e008      	b.n	8003000 <HAL_DMA_Abort_IT+0xa4>
 8002fee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ff2:	e005      	b.n	8003000 <HAL_DMA_Abort_IT+0xa4>
 8002ff4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ff8:	e002      	b.n	8003000 <HAL_DMA_Abort_IT+0xa4>
 8002ffa:	2310      	movs	r3, #16
 8002ffc:	e000      	b.n	8003000 <HAL_DMA_Abort_IT+0xa4>
 8002ffe:	2301      	movs	r3, #1
 8003000:	4a11      	ldr	r2, [pc, #68]	@ (8003048 <HAL_DMA_Abort_IT+0xec>)
 8003002:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003018:	2b00      	cmp	r3, #0
 800301a:	d003      	beq.n	8003024 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	4798      	blx	r3
    } 
  }
  return status;
 8003024:	7bfb      	ldrb	r3, [r7, #15]
}
 8003026:	4618      	mov	r0, r3
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	40020008 	.word	0x40020008
 8003034:	4002001c 	.word	0x4002001c
 8003038:	40020030 	.word	0x40020030
 800303c:	40020044 	.word	0x40020044
 8003040:	40020058 	.word	0x40020058
 8003044:	4002006c 	.word	0x4002006c
 8003048:	40020000 	.word	0x40020000

0800304c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800304c:	b480      	push	{r7}
 800304e:	b08b      	sub	sp, #44	@ 0x2c
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003056:	2300      	movs	r3, #0
 8003058:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800305a:	2300      	movs	r3, #0
 800305c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800305e:	e169      	b.n	8003334 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003060:	2201      	movs	r2, #1
 8003062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	69fa      	ldr	r2, [r7, #28]
 8003070:	4013      	ands	r3, r2
 8003072:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	429a      	cmp	r2, r3
 800307a:	f040 8158 	bne.w	800332e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	4a9a      	ldr	r2, [pc, #616]	@ (80032ec <HAL_GPIO_Init+0x2a0>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d05e      	beq.n	8003146 <HAL_GPIO_Init+0xfa>
 8003088:	4a98      	ldr	r2, [pc, #608]	@ (80032ec <HAL_GPIO_Init+0x2a0>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d875      	bhi.n	800317a <HAL_GPIO_Init+0x12e>
 800308e:	4a98      	ldr	r2, [pc, #608]	@ (80032f0 <HAL_GPIO_Init+0x2a4>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d058      	beq.n	8003146 <HAL_GPIO_Init+0xfa>
 8003094:	4a96      	ldr	r2, [pc, #600]	@ (80032f0 <HAL_GPIO_Init+0x2a4>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d86f      	bhi.n	800317a <HAL_GPIO_Init+0x12e>
 800309a:	4a96      	ldr	r2, [pc, #600]	@ (80032f4 <HAL_GPIO_Init+0x2a8>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d052      	beq.n	8003146 <HAL_GPIO_Init+0xfa>
 80030a0:	4a94      	ldr	r2, [pc, #592]	@ (80032f4 <HAL_GPIO_Init+0x2a8>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d869      	bhi.n	800317a <HAL_GPIO_Init+0x12e>
 80030a6:	4a94      	ldr	r2, [pc, #592]	@ (80032f8 <HAL_GPIO_Init+0x2ac>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d04c      	beq.n	8003146 <HAL_GPIO_Init+0xfa>
 80030ac:	4a92      	ldr	r2, [pc, #584]	@ (80032f8 <HAL_GPIO_Init+0x2ac>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d863      	bhi.n	800317a <HAL_GPIO_Init+0x12e>
 80030b2:	4a92      	ldr	r2, [pc, #584]	@ (80032fc <HAL_GPIO_Init+0x2b0>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d046      	beq.n	8003146 <HAL_GPIO_Init+0xfa>
 80030b8:	4a90      	ldr	r2, [pc, #576]	@ (80032fc <HAL_GPIO_Init+0x2b0>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d85d      	bhi.n	800317a <HAL_GPIO_Init+0x12e>
 80030be:	2b12      	cmp	r3, #18
 80030c0:	d82a      	bhi.n	8003118 <HAL_GPIO_Init+0xcc>
 80030c2:	2b12      	cmp	r3, #18
 80030c4:	d859      	bhi.n	800317a <HAL_GPIO_Init+0x12e>
 80030c6:	a201      	add	r2, pc, #4	@ (adr r2, 80030cc <HAL_GPIO_Init+0x80>)
 80030c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030cc:	08003147 	.word	0x08003147
 80030d0:	08003121 	.word	0x08003121
 80030d4:	08003133 	.word	0x08003133
 80030d8:	08003175 	.word	0x08003175
 80030dc:	0800317b 	.word	0x0800317b
 80030e0:	0800317b 	.word	0x0800317b
 80030e4:	0800317b 	.word	0x0800317b
 80030e8:	0800317b 	.word	0x0800317b
 80030ec:	0800317b 	.word	0x0800317b
 80030f0:	0800317b 	.word	0x0800317b
 80030f4:	0800317b 	.word	0x0800317b
 80030f8:	0800317b 	.word	0x0800317b
 80030fc:	0800317b 	.word	0x0800317b
 8003100:	0800317b 	.word	0x0800317b
 8003104:	0800317b 	.word	0x0800317b
 8003108:	0800317b 	.word	0x0800317b
 800310c:	0800317b 	.word	0x0800317b
 8003110:	08003129 	.word	0x08003129
 8003114:	0800313d 	.word	0x0800313d
 8003118:	4a79      	ldr	r2, [pc, #484]	@ (8003300 <HAL_GPIO_Init+0x2b4>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d013      	beq.n	8003146 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800311e:	e02c      	b.n	800317a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	623b      	str	r3, [r7, #32]
          break;
 8003126:	e029      	b.n	800317c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	3304      	adds	r3, #4
 800312e:	623b      	str	r3, [r7, #32]
          break;
 8003130:	e024      	b.n	800317c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	3308      	adds	r3, #8
 8003138:	623b      	str	r3, [r7, #32]
          break;
 800313a:	e01f      	b.n	800317c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	330c      	adds	r3, #12
 8003142:	623b      	str	r3, [r7, #32]
          break;
 8003144:	e01a      	b.n	800317c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d102      	bne.n	8003154 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800314e:	2304      	movs	r3, #4
 8003150:	623b      	str	r3, [r7, #32]
          break;
 8003152:	e013      	b.n	800317c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d105      	bne.n	8003168 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800315c:	2308      	movs	r3, #8
 800315e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	69fa      	ldr	r2, [r7, #28]
 8003164:	611a      	str	r2, [r3, #16]
          break;
 8003166:	e009      	b.n	800317c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003168:	2308      	movs	r3, #8
 800316a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	69fa      	ldr	r2, [r7, #28]
 8003170:	615a      	str	r2, [r3, #20]
          break;
 8003172:	e003      	b.n	800317c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003174:	2300      	movs	r3, #0
 8003176:	623b      	str	r3, [r7, #32]
          break;
 8003178:	e000      	b.n	800317c <HAL_GPIO_Init+0x130>
          break;
 800317a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	2bff      	cmp	r3, #255	@ 0xff
 8003180:	d801      	bhi.n	8003186 <HAL_GPIO_Init+0x13a>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	e001      	b.n	800318a <HAL_GPIO_Init+0x13e>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	3304      	adds	r3, #4
 800318a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	2bff      	cmp	r3, #255	@ 0xff
 8003190:	d802      	bhi.n	8003198 <HAL_GPIO_Init+0x14c>
 8003192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	e002      	b.n	800319e <HAL_GPIO_Init+0x152>
 8003198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800319a:	3b08      	subs	r3, #8
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	210f      	movs	r1, #15
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	fa01 f303 	lsl.w	r3, r1, r3
 80031ac:	43db      	mvns	r3, r3
 80031ae:	401a      	ands	r2, r3
 80031b0:	6a39      	ldr	r1, [r7, #32]
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	fa01 f303 	lsl.w	r3, r1, r3
 80031b8:	431a      	orrs	r2, r3
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	f000 80b1 	beq.w	800332e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80031cc:	4b4d      	ldr	r3, [pc, #308]	@ (8003304 <HAL_GPIO_Init+0x2b8>)
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	4a4c      	ldr	r2, [pc, #304]	@ (8003304 <HAL_GPIO_Init+0x2b8>)
 80031d2:	f043 0301 	orr.w	r3, r3, #1
 80031d6:	6193      	str	r3, [r2, #24]
 80031d8:	4b4a      	ldr	r3, [pc, #296]	@ (8003304 <HAL_GPIO_Init+0x2b8>)
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	f003 0301 	and.w	r3, r3, #1
 80031e0:	60bb      	str	r3, [r7, #8]
 80031e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80031e4:	4a48      	ldr	r2, [pc, #288]	@ (8003308 <HAL_GPIO_Init+0x2bc>)
 80031e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e8:	089b      	lsrs	r3, r3, #2
 80031ea:	3302      	adds	r3, #2
 80031ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80031f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f4:	f003 0303 	and.w	r3, r3, #3
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	220f      	movs	r2, #15
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	43db      	mvns	r3, r3
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	4013      	ands	r3, r2
 8003206:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a40      	ldr	r2, [pc, #256]	@ (800330c <HAL_GPIO_Init+0x2c0>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d013      	beq.n	8003238 <HAL_GPIO_Init+0x1ec>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a3f      	ldr	r2, [pc, #252]	@ (8003310 <HAL_GPIO_Init+0x2c4>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d00d      	beq.n	8003234 <HAL_GPIO_Init+0x1e8>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a3e      	ldr	r2, [pc, #248]	@ (8003314 <HAL_GPIO_Init+0x2c8>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d007      	beq.n	8003230 <HAL_GPIO_Init+0x1e4>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a3d      	ldr	r2, [pc, #244]	@ (8003318 <HAL_GPIO_Init+0x2cc>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d101      	bne.n	800322c <HAL_GPIO_Init+0x1e0>
 8003228:	2303      	movs	r3, #3
 800322a:	e006      	b.n	800323a <HAL_GPIO_Init+0x1ee>
 800322c:	2304      	movs	r3, #4
 800322e:	e004      	b.n	800323a <HAL_GPIO_Init+0x1ee>
 8003230:	2302      	movs	r3, #2
 8003232:	e002      	b.n	800323a <HAL_GPIO_Init+0x1ee>
 8003234:	2301      	movs	r3, #1
 8003236:	e000      	b.n	800323a <HAL_GPIO_Init+0x1ee>
 8003238:	2300      	movs	r3, #0
 800323a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800323c:	f002 0203 	and.w	r2, r2, #3
 8003240:	0092      	lsls	r2, r2, #2
 8003242:	4093      	lsls	r3, r2
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	4313      	orrs	r3, r2
 8003248:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800324a:	492f      	ldr	r1, [pc, #188]	@ (8003308 <HAL_GPIO_Init+0x2bc>)
 800324c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800324e:	089b      	lsrs	r3, r3, #2
 8003250:	3302      	adds	r3, #2
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d006      	beq.n	8003272 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003264:	4b2d      	ldr	r3, [pc, #180]	@ (800331c <HAL_GPIO_Init+0x2d0>)
 8003266:	689a      	ldr	r2, [r3, #8]
 8003268:	492c      	ldr	r1, [pc, #176]	@ (800331c <HAL_GPIO_Init+0x2d0>)
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	4313      	orrs	r3, r2
 800326e:	608b      	str	r3, [r1, #8]
 8003270:	e006      	b.n	8003280 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003272:	4b2a      	ldr	r3, [pc, #168]	@ (800331c <HAL_GPIO_Init+0x2d0>)
 8003274:	689a      	ldr	r2, [r3, #8]
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	43db      	mvns	r3, r3
 800327a:	4928      	ldr	r1, [pc, #160]	@ (800331c <HAL_GPIO_Init+0x2d0>)
 800327c:	4013      	ands	r3, r2
 800327e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d006      	beq.n	800329a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800328c:	4b23      	ldr	r3, [pc, #140]	@ (800331c <HAL_GPIO_Init+0x2d0>)
 800328e:	68da      	ldr	r2, [r3, #12]
 8003290:	4922      	ldr	r1, [pc, #136]	@ (800331c <HAL_GPIO_Init+0x2d0>)
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	4313      	orrs	r3, r2
 8003296:	60cb      	str	r3, [r1, #12]
 8003298:	e006      	b.n	80032a8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800329a:	4b20      	ldr	r3, [pc, #128]	@ (800331c <HAL_GPIO_Init+0x2d0>)
 800329c:	68da      	ldr	r2, [r3, #12]
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	43db      	mvns	r3, r3
 80032a2:	491e      	ldr	r1, [pc, #120]	@ (800331c <HAL_GPIO_Init+0x2d0>)
 80032a4:	4013      	ands	r3, r2
 80032a6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d006      	beq.n	80032c2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80032b4:	4b19      	ldr	r3, [pc, #100]	@ (800331c <HAL_GPIO_Init+0x2d0>)
 80032b6:	685a      	ldr	r2, [r3, #4]
 80032b8:	4918      	ldr	r1, [pc, #96]	@ (800331c <HAL_GPIO_Init+0x2d0>)
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	4313      	orrs	r3, r2
 80032be:	604b      	str	r3, [r1, #4]
 80032c0:	e006      	b.n	80032d0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80032c2:	4b16      	ldr	r3, [pc, #88]	@ (800331c <HAL_GPIO_Init+0x2d0>)
 80032c4:	685a      	ldr	r2, [r3, #4]
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	43db      	mvns	r3, r3
 80032ca:	4914      	ldr	r1, [pc, #80]	@ (800331c <HAL_GPIO_Init+0x2d0>)
 80032cc:	4013      	ands	r3, r2
 80032ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d021      	beq.n	8003320 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80032dc:	4b0f      	ldr	r3, [pc, #60]	@ (800331c <HAL_GPIO_Init+0x2d0>)
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	490e      	ldr	r1, [pc, #56]	@ (800331c <HAL_GPIO_Init+0x2d0>)
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	600b      	str	r3, [r1, #0]
 80032e8:	e021      	b.n	800332e <HAL_GPIO_Init+0x2e2>
 80032ea:	bf00      	nop
 80032ec:	10320000 	.word	0x10320000
 80032f0:	10310000 	.word	0x10310000
 80032f4:	10220000 	.word	0x10220000
 80032f8:	10210000 	.word	0x10210000
 80032fc:	10120000 	.word	0x10120000
 8003300:	10110000 	.word	0x10110000
 8003304:	40021000 	.word	0x40021000
 8003308:	40010000 	.word	0x40010000
 800330c:	40010800 	.word	0x40010800
 8003310:	40010c00 	.word	0x40010c00
 8003314:	40011000 	.word	0x40011000
 8003318:	40011400 	.word	0x40011400
 800331c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003320:	4b0b      	ldr	r3, [pc, #44]	@ (8003350 <HAL_GPIO_Init+0x304>)
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	43db      	mvns	r3, r3
 8003328:	4909      	ldr	r1, [pc, #36]	@ (8003350 <HAL_GPIO_Init+0x304>)
 800332a:	4013      	ands	r3, r2
 800332c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800332e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003330:	3301      	adds	r3, #1
 8003332:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800333a:	fa22 f303 	lsr.w	r3, r2, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	f47f ae8e 	bne.w	8003060 <HAL_GPIO_Init+0x14>
  }
}
 8003344:	bf00      	nop
 8003346:	bf00      	nop
 8003348:	372c      	adds	r7, #44	@ 0x2c
 800334a:	46bd      	mov	sp, r7
 800334c:	bc80      	pop	{r7}
 800334e:	4770      	bx	lr
 8003350:	40010400 	.word	0x40010400

08003354 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003354:	b480      	push	{r7}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	460b      	mov	r3, r1
 800335e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	689a      	ldr	r2, [r3, #8]
 8003364:	887b      	ldrh	r3, [r7, #2]
 8003366:	4013      	ands	r3, r2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d002      	beq.n	8003372 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800336c:	2301      	movs	r3, #1
 800336e:	73fb      	strb	r3, [r7, #15]
 8003370:	e001      	b.n	8003376 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003372:	2300      	movs	r3, #0
 8003374:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003376:	7bfb      	ldrb	r3, [r7, #15]
}
 8003378:	4618      	mov	r0, r3
 800337a:	3714      	adds	r7, #20
 800337c:	46bd      	mov	sp, r7
 800337e:	bc80      	pop	{r7}
 8003380:	4770      	bx	lr

08003382 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003382:	b480      	push	{r7}
 8003384:	b083      	sub	sp, #12
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
 800338a:	460b      	mov	r3, r1
 800338c:	807b      	strh	r3, [r7, #2]
 800338e:	4613      	mov	r3, r2
 8003390:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003392:	787b      	ldrb	r3, [r7, #1]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d003      	beq.n	80033a0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003398:	887a      	ldrh	r2, [r7, #2]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800339e:	e003      	b.n	80033a8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80033a0:	887b      	ldrh	r3, [r7, #2]
 80033a2:	041a      	lsls	r2, r3, #16
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	611a      	str	r2, [r3, #16]
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bc80      	pop	{r7}
 80033b0:	4770      	bx	lr
	...

080033b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	4603      	mov	r3, r0
 80033bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80033be:	4b08      	ldr	r3, [pc, #32]	@ (80033e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033c0:	695a      	ldr	r2, [r3, #20]
 80033c2:	88fb      	ldrh	r3, [r7, #6]
 80033c4:	4013      	ands	r3, r2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d006      	beq.n	80033d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80033ca:	4a05      	ldr	r2, [pc, #20]	@ (80033e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033cc:	88fb      	ldrh	r3, [r7, #6]
 80033ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80033d0:	88fb      	ldrh	r3, [r7, #6]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7fe fd9e 	bl	8001f14 <HAL_GPIO_EXTI_Callback>
  }
}
 80033d8:	bf00      	nop
 80033da:	3708      	adds	r7, #8
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	40010400 	.word	0x40010400

080033e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e12b      	b.n	800364e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d106      	bne.n	8003410 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f7fc fff2 	bl	80003f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2224      	movs	r2, #36	@ 0x24
 8003414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f022 0201 	bic.w	r2, r2, #1
 8003426:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003436:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003446:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003448:	f001 fbfc 	bl	8004c44 <HAL_RCC_GetPCLK1Freq>
 800344c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	4a81      	ldr	r2, [pc, #516]	@ (8003658 <HAL_I2C_Init+0x274>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d807      	bhi.n	8003468 <HAL_I2C_Init+0x84>
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	4a80      	ldr	r2, [pc, #512]	@ (800365c <HAL_I2C_Init+0x278>)
 800345c:	4293      	cmp	r3, r2
 800345e:	bf94      	ite	ls
 8003460:	2301      	movls	r3, #1
 8003462:	2300      	movhi	r3, #0
 8003464:	b2db      	uxtb	r3, r3
 8003466:	e006      	b.n	8003476 <HAL_I2C_Init+0x92>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	4a7d      	ldr	r2, [pc, #500]	@ (8003660 <HAL_I2C_Init+0x27c>)
 800346c:	4293      	cmp	r3, r2
 800346e:	bf94      	ite	ls
 8003470:	2301      	movls	r3, #1
 8003472:	2300      	movhi	r3, #0
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e0e7      	b.n	800364e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	4a78      	ldr	r2, [pc, #480]	@ (8003664 <HAL_I2C_Init+0x280>)
 8003482:	fba2 2303 	umull	r2, r3, r2, r3
 8003486:	0c9b      	lsrs	r3, r3, #18
 8003488:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68ba      	ldr	r2, [r7, #8]
 800349a:	430a      	orrs	r2, r1
 800349c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	6a1b      	ldr	r3, [r3, #32]
 80034a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	4a6a      	ldr	r2, [pc, #424]	@ (8003658 <HAL_I2C_Init+0x274>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d802      	bhi.n	80034b8 <HAL_I2C_Init+0xd4>
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	3301      	adds	r3, #1
 80034b6:	e009      	b.n	80034cc <HAL_I2C_Init+0xe8>
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80034be:	fb02 f303 	mul.w	r3, r2, r3
 80034c2:	4a69      	ldr	r2, [pc, #420]	@ (8003668 <HAL_I2C_Init+0x284>)
 80034c4:	fba2 2303 	umull	r2, r3, r2, r3
 80034c8:	099b      	lsrs	r3, r3, #6
 80034ca:	3301      	adds	r3, #1
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	6812      	ldr	r2, [r2, #0]
 80034d0:	430b      	orrs	r3, r1
 80034d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	69db      	ldr	r3, [r3, #28]
 80034da:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80034de:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	495c      	ldr	r1, [pc, #368]	@ (8003658 <HAL_I2C_Init+0x274>)
 80034e8:	428b      	cmp	r3, r1
 80034ea:	d819      	bhi.n	8003520 <HAL_I2C_Init+0x13c>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	1e59      	subs	r1, r3, #1
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80034fa:	1c59      	adds	r1, r3, #1
 80034fc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003500:	400b      	ands	r3, r1
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00a      	beq.n	800351c <HAL_I2C_Init+0x138>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	1e59      	subs	r1, r3, #1
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	005b      	lsls	r3, r3, #1
 8003510:	fbb1 f3f3 	udiv	r3, r1, r3
 8003514:	3301      	adds	r3, #1
 8003516:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800351a:	e051      	b.n	80035c0 <HAL_I2C_Init+0x1dc>
 800351c:	2304      	movs	r3, #4
 800351e:	e04f      	b.n	80035c0 <HAL_I2C_Init+0x1dc>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d111      	bne.n	800354c <HAL_I2C_Init+0x168>
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	1e58      	subs	r0, r3, #1
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6859      	ldr	r1, [r3, #4]
 8003530:	460b      	mov	r3, r1
 8003532:	005b      	lsls	r3, r3, #1
 8003534:	440b      	add	r3, r1
 8003536:	fbb0 f3f3 	udiv	r3, r0, r3
 800353a:	3301      	adds	r3, #1
 800353c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003540:	2b00      	cmp	r3, #0
 8003542:	bf0c      	ite	eq
 8003544:	2301      	moveq	r3, #1
 8003546:	2300      	movne	r3, #0
 8003548:	b2db      	uxtb	r3, r3
 800354a:	e012      	b.n	8003572 <HAL_I2C_Init+0x18e>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	1e58      	subs	r0, r3, #1
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6859      	ldr	r1, [r3, #4]
 8003554:	460b      	mov	r3, r1
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	440b      	add	r3, r1
 800355a:	0099      	lsls	r1, r3, #2
 800355c:	440b      	add	r3, r1
 800355e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003562:	3301      	adds	r3, #1
 8003564:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003568:	2b00      	cmp	r3, #0
 800356a:	bf0c      	ite	eq
 800356c:	2301      	moveq	r3, #1
 800356e:	2300      	movne	r3, #0
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d001      	beq.n	800357a <HAL_I2C_Init+0x196>
 8003576:	2301      	movs	r3, #1
 8003578:	e022      	b.n	80035c0 <HAL_I2C_Init+0x1dc>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d10e      	bne.n	80035a0 <HAL_I2C_Init+0x1bc>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	1e58      	subs	r0, r3, #1
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6859      	ldr	r1, [r3, #4]
 800358a:	460b      	mov	r3, r1
 800358c:	005b      	lsls	r3, r3, #1
 800358e:	440b      	add	r3, r1
 8003590:	fbb0 f3f3 	udiv	r3, r0, r3
 8003594:	3301      	adds	r3, #1
 8003596:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800359a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800359e:	e00f      	b.n	80035c0 <HAL_I2C_Init+0x1dc>
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	1e58      	subs	r0, r3, #1
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6859      	ldr	r1, [r3, #4]
 80035a8:	460b      	mov	r3, r1
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	440b      	add	r3, r1
 80035ae:	0099      	lsls	r1, r3, #2
 80035b0:	440b      	add	r3, r1
 80035b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80035b6:	3301      	adds	r3, #1
 80035b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035bc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80035c0:	6879      	ldr	r1, [r7, #4]
 80035c2:	6809      	ldr	r1, [r1, #0]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	69da      	ldr	r2, [r3, #28]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a1b      	ldr	r3, [r3, #32]
 80035da:	431a      	orrs	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	430a      	orrs	r2, r1
 80035e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80035ee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	6911      	ldr	r1, [r2, #16]
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	68d2      	ldr	r2, [r2, #12]
 80035fa:	4311      	orrs	r1, r2
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	6812      	ldr	r2, [r2, #0]
 8003600:	430b      	orrs	r3, r1
 8003602:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	695a      	ldr	r2, [r3, #20]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	431a      	orrs	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	430a      	orrs	r2, r1
 800361e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f042 0201 	orr.w	r2, r2, #1
 800362e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2220      	movs	r2, #32
 800363a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3710      	adds	r7, #16
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	000186a0 	.word	0x000186a0
 800365c:	001e847f 	.word	0x001e847f
 8003660:	003d08ff 	.word	0x003d08ff
 8003664:	431bde83 	.word	0x431bde83
 8003668:	10624dd3 	.word	0x10624dd3

0800366c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b088      	sub	sp, #32
 8003670:	af02      	add	r7, sp, #8
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	4608      	mov	r0, r1
 8003676:	4611      	mov	r1, r2
 8003678:	461a      	mov	r2, r3
 800367a:	4603      	mov	r3, r0
 800367c:	817b      	strh	r3, [r7, #10]
 800367e:	460b      	mov	r3, r1
 8003680:	813b      	strh	r3, [r7, #8]
 8003682:	4613      	mov	r3, r2
 8003684:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003686:	f7fe fef5 	bl	8002474 <HAL_GetTick>
 800368a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003692:	b2db      	uxtb	r3, r3
 8003694:	2b20      	cmp	r3, #32
 8003696:	f040 80d9 	bne.w	800384c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	9300      	str	r3, [sp, #0]
 800369e:	2319      	movs	r3, #25
 80036a0:	2201      	movs	r2, #1
 80036a2:	496d      	ldr	r1, [pc, #436]	@ (8003858 <HAL_I2C_Mem_Write+0x1ec>)
 80036a4:	68f8      	ldr	r0, [r7, #12]
 80036a6:	f000 fccd 	bl	8004044 <I2C_WaitOnFlagUntilTimeout>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d001      	beq.n	80036b4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80036b0:	2302      	movs	r3, #2
 80036b2:	e0cc      	b.n	800384e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d101      	bne.n	80036c2 <HAL_I2C_Mem_Write+0x56>
 80036be:	2302      	movs	r3, #2
 80036c0:	e0c5      	b.n	800384e <HAL_I2C_Mem_Write+0x1e2>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2201      	movs	r2, #1
 80036c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0301 	and.w	r3, r3, #1
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d007      	beq.n	80036e8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f042 0201 	orr.w	r2, r2, #1
 80036e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2221      	movs	r2, #33	@ 0x21
 80036fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2240      	movs	r2, #64	@ 0x40
 8003704:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2200      	movs	r2, #0
 800370c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6a3a      	ldr	r2, [r7, #32]
 8003712:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003718:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800371e:	b29a      	uxth	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	4a4d      	ldr	r2, [pc, #308]	@ (800385c <HAL_I2C_Mem_Write+0x1f0>)
 8003728:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800372a:	88f8      	ldrh	r0, [r7, #6]
 800372c:	893a      	ldrh	r2, [r7, #8]
 800372e:	8979      	ldrh	r1, [r7, #10]
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	9301      	str	r3, [sp, #4]
 8003734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003736:	9300      	str	r3, [sp, #0]
 8003738:	4603      	mov	r3, r0
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f000 fb04 	bl	8003d48 <I2C_RequestMemoryWrite>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d052      	beq.n	80037ec <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e081      	b.n	800384e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800374a:	697a      	ldr	r2, [r7, #20]
 800374c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f000 fd92 	bl	8004278 <I2C_WaitOnTXEFlagUntilTimeout>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00d      	beq.n	8003776 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375e:	2b04      	cmp	r3, #4
 8003760:	d107      	bne.n	8003772 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003770:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e06b      	b.n	800384e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800377a:	781a      	ldrb	r2, [r3, #0]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003786:	1c5a      	adds	r2, r3, #1
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003790:	3b01      	subs	r3, #1
 8003792:	b29a      	uxth	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800379c:	b29b      	uxth	r3, r3
 800379e:	3b01      	subs	r3, #1
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	695b      	ldr	r3, [r3, #20]
 80037ac:	f003 0304 	and.w	r3, r3, #4
 80037b0:	2b04      	cmp	r3, #4
 80037b2:	d11b      	bne.n	80037ec <HAL_I2C_Mem_Write+0x180>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d017      	beq.n	80037ec <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c0:	781a      	ldrb	r2, [r3, #0]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037cc:	1c5a      	adds	r2, r3, #1
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037d6:	3b01      	subs	r3, #1
 80037d8:	b29a      	uxth	r2, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	3b01      	subs	r3, #1
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d1aa      	bne.n	800374a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037f4:	697a      	ldr	r2, [r7, #20]
 80037f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037f8:	68f8      	ldr	r0, [r7, #12]
 80037fa:	f000 fd85 	bl	8004308 <I2C_WaitOnBTFFlagUntilTimeout>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00d      	beq.n	8003820 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003808:	2b04      	cmp	r3, #4
 800380a:	d107      	bne.n	800381c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800381a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e016      	b.n	800384e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800382e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2220      	movs	r2, #32
 8003834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003848:	2300      	movs	r3, #0
 800384a:	e000      	b.n	800384e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800384c:	2302      	movs	r3, #2
  }
}
 800384e:	4618      	mov	r0, r3
 8003850:	3718      	adds	r7, #24
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	00100002 	.word	0x00100002
 800385c:	ffff0000 	.word	0xffff0000

08003860 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b08c      	sub	sp, #48	@ 0x30
 8003864:	af02      	add	r7, sp, #8
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	4608      	mov	r0, r1
 800386a:	4611      	mov	r1, r2
 800386c:	461a      	mov	r2, r3
 800386e:	4603      	mov	r3, r0
 8003870:	817b      	strh	r3, [r7, #10]
 8003872:	460b      	mov	r3, r1
 8003874:	813b      	strh	r3, [r7, #8]
 8003876:	4613      	mov	r3, r2
 8003878:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800387a:	2300      	movs	r3, #0
 800387c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800387e:	f7fe fdf9 	bl	8002474 <HAL_GetTick>
 8003882:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800388a:	b2db      	uxtb	r3, r3
 800388c:	2b20      	cmp	r3, #32
 800388e:	f040 8250 	bne.w	8003d32 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003894:	9300      	str	r3, [sp, #0]
 8003896:	2319      	movs	r3, #25
 8003898:	2201      	movs	r2, #1
 800389a:	4982      	ldr	r1, [pc, #520]	@ (8003aa4 <HAL_I2C_Mem_Read+0x244>)
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	f000 fbd1 	bl	8004044 <I2C_WaitOnFlagUntilTimeout>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d001      	beq.n	80038ac <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80038a8:	2302      	movs	r3, #2
 80038aa:	e243      	b.n	8003d34 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d101      	bne.n	80038ba <HAL_I2C_Mem_Read+0x5a>
 80038b6:	2302      	movs	r3, #2
 80038b8:	e23c      	b.n	8003d34 <HAL_I2C_Mem_Read+0x4d4>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0301 	and.w	r3, r3, #1
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d007      	beq.n	80038e0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f042 0201 	orr.w	r2, r2, #1
 80038de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2222      	movs	r2, #34	@ 0x22
 80038f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2240      	movs	r2, #64	@ 0x40
 80038fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800390a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003910:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003916:	b29a      	uxth	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	4a62      	ldr	r2, [pc, #392]	@ (8003aa8 <HAL_I2C_Mem_Read+0x248>)
 8003920:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003922:	88f8      	ldrh	r0, [r7, #6]
 8003924:	893a      	ldrh	r2, [r7, #8]
 8003926:	8979      	ldrh	r1, [r7, #10]
 8003928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800392a:	9301      	str	r3, [sp, #4]
 800392c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800392e:	9300      	str	r3, [sp, #0]
 8003930:	4603      	mov	r3, r0
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f000 fa9e 	bl	8003e74 <I2C_RequestMemoryRead>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d001      	beq.n	8003942 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e1f8      	b.n	8003d34 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003946:	2b00      	cmp	r3, #0
 8003948:	d113      	bne.n	8003972 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800394a:	2300      	movs	r3, #0
 800394c:	61fb      	str	r3, [r7, #28]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	695b      	ldr	r3, [r3, #20]
 8003954:	61fb      	str	r3, [r7, #28]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	61fb      	str	r3, [r7, #28]
 800395e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800396e:	601a      	str	r2, [r3, #0]
 8003970:	e1cc      	b.n	8003d0c <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003976:	2b01      	cmp	r3, #1
 8003978:	d11e      	bne.n	80039b8 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003988:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800398a:	b672      	cpsid	i
}
 800398c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800398e:	2300      	movs	r3, #0
 8003990:	61bb      	str	r3, [r7, #24]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	695b      	ldr	r3, [r3, #20]
 8003998:	61bb      	str	r3, [r7, #24]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	61bb      	str	r3, [r7, #24]
 80039a2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039b2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80039b4:	b662      	cpsie	i
}
 80039b6:	e035      	b.n	8003a24 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039bc:	2b02      	cmp	r3, #2
 80039be:	d11e      	bne.n	80039fe <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039ce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80039d0:	b672      	cpsid	i
}
 80039d2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039d4:	2300      	movs	r3, #0
 80039d6:	617b      	str	r3, [r7, #20]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	617b      	str	r3, [r7, #20]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	617b      	str	r3, [r7, #20]
 80039e8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039f8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80039fa:	b662      	cpsie	i
}
 80039fc:	e012      	b.n	8003a24 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003a0c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a0e:	2300      	movs	r3, #0
 8003a10:	613b      	str	r3, [r7, #16]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	695b      	ldr	r3, [r3, #20]
 8003a18:	613b      	str	r3, [r7, #16]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	613b      	str	r3, [r7, #16]
 8003a22:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003a24:	e172      	b.n	8003d0c <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a2a:	2b03      	cmp	r3, #3
 8003a2c:	f200 811f 	bhi.w	8003c6e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d123      	bne.n	8003a80 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a3a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003a3c:	68f8      	ldr	r0, [r7, #12]
 8003a3e:	f000 fcab 	bl	8004398 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d001      	beq.n	8003a4c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e173      	b.n	8003d34 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	691a      	ldr	r2, [r3, #16]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a56:	b2d2      	uxtb	r2, r2
 8003a58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a5e:	1c5a      	adds	r2, r3, #1
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	b29a      	uxth	r2, r3
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	3b01      	subs	r3, #1
 8003a78:	b29a      	uxth	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003a7e:	e145      	b.n	8003d0c <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d152      	bne.n	8003b2e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a8a:	9300      	str	r3, [sp, #0]
 8003a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a8e:	2200      	movs	r2, #0
 8003a90:	4906      	ldr	r1, [pc, #24]	@ (8003aac <HAL_I2C_Mem_Read+0x24c>)
 8003a92:	68f8      	ldr	r0, [r7, #12]
 8003a94:	f000 fad6 	bl	8004044 <I2C_WaitOnFlagUntilTimeout>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d008      	beq.n	8003ab0 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e148      	b.n	8003d34 <HAL_I2C_Mem_Read+0x4d4>
 8003aa2:	bf00      	nop
 8003aa4:	00100002 	.word	0x00100002
 8003aa8:	ffff0000 	.word	0xffff0000
 8003aac:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003ab0:	b672      	cpsid	i
}
 8003ab2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ac2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	691a      	ldr	r2, [r3, #16]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ace:	b2d2      	uxtb	r2, r2
 8003ad0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad6:	1c5a      	adds	r2, r3, #1
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	3b01      	subs	r3, #1
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003af6:	b662      	cpsie	i
}
 8003af8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	691a      	ldr	r2, [r3, #16]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b04:	b2d2      	uxtb	r2, r2
 8003b06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b0c:	1c5a      	adds	r2, r3, #1
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b16:	3b01      	subs	r3, #1
 8003b18:	b29a      	uxth	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	3b01      	subs	r3, #1
 8003b26:	b29a      	uxth	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003b2c:	e0ee      	b.n	8003d0c <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b30:	9300      	str	r3, [sp, #0]
 8003b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b34:	2200      	movs	r2, #0
 8003b36:	4981      	ldr	r1, [pc, #516]	@ (8003d3c <HAL_I2C_Mem_Read+0x4dc>)
 8003b38:	68f8      	ldr	r0, [r7, #12]
 8003b3a:	f000 fa83 	bl	8004044 <I2C_WaitOnFlagUntilTimeout>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d001      	beq.n	8003b48 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e0f5      	b.n	8003d34 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b56:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003b58:	b672      	cpsid	i
}
 8003b5a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	691a      	ldr	r2, [r3, #16]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b66:	b2d2      	uxtb	r2, r2
 8003b68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b6e:	1c5a      	adds	r2, r3, #1
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	b29a      	uxth	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	3b01      	subs	r3, #1
 8003b88:	b29a      	uxth	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003b8e:	4b6c      	ldr	r3, [pc, #432]	@ (8003d40 <HAL_I2C_Mem_Read+0x4e0>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	08db      	lsrs	r3, r3, #3
 8003b94:	4a6b      	ldr	r2, [pc, #428]	@ (8003d44 <HAL_I2C_Mem_Read+0x4e4>)
 8003b96:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9a:	0a1a      	lsrs	r2, r3, #8
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	4413      	add	r3, r2
 8003ba2:	00da      	lsls	r2, r3, #3
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003ba8:	6a3b      	ldr	r3, [r7, #32]
 8003baa:	3b01      	subs	r3, #1
 8003bac:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003bae:	6a3b      	ldr	r3, [r7, #32]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d118      	bne.n	8003be6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2220      	movs	r2, #32
 8003bbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bce:	f043 0220 	orr.w	r2, r3, #32
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003bd6:	b662      	cpsie	i
}
 8003bd8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e0a6      	b.n	8003d34 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	695b      	ldr	r3, [r3, #20]
 8003bec:	f003 0304 	and.w	r3, r3, #4
 8003bf0:	2b04      	cmp	r3, #4
 8003bf2:	d1d9      	bne.n	8003ba8 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	691a      	ldr	r2, [r3, #16]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c0e:	b2d2      	uxtb	r2, r2
 8003c10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c16:	1c5a      	adds	r2, r3, #1
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c20:	3b01      	subs	r3, #1
 8003c22:	b29a      	uxth	r2, r3
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	b29a      	uxth	r2, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003c36:	b662      	cpsie	i
}
 8003c38:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	691a      	ldr	r2, [r3, #16]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c44:	b2d2      	uxtb	r2, r2
 8003c46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c4c:	1c5a      	adds	r2, r3, #1
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c56:	3b01      	subs	r3, #1
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	3b01      	subs	r3, #1
 8003c66:	b29a      	uxth	r2, r3
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003c6c:	e04e      	b.n	8003d0c <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c70:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003c72:	68f8      	ldr	r0, [r7, #12]
 8003c74:	f000 fb90 	bl	8004398 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d001      	beq.n	8003c82 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e058      	b.n	8003d34 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	691a      	ldr	r2, [r3, #16]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c8c:	b2d2      	uxtb	r2, r2
 8003c8e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c94:	1c5a      	adds	r2, r3, #1
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	b29a      	uxth	r2, r3
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	3b01      	subs	r3, #1
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	f003 0304 	and.w	r3, r3, #4
 8003cbe:	2b04      	cmp	r3, #4
 8003cc0:	d124      	bne.n	8003d0c <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cc6:	2b03      	cmp	r3, #3
 8003cc8:	d107      	bne.n	8003cda <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cd8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	691a      	ldr	r2, [r3, #16]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce4:	b2d2      	uxtb	r2, r2
 8003ce6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cec:	1c5a      	adds	r2, r3, #1
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	b29a      	uxth	r2, r3
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	3b01      	subs	r3, #1
 8003d06:	b29a      	uxth	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	f47f ae88 	bne.w	8003a26 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2220      	movs	r2, #32
 8003d1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	e000      	b.n	8003d34 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8003d32:	2302      	movs	r3, #2
  }
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3728      	adds	r7, #40	@ 0x28
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	00010004 	.word	0x00010004
 8003d40:	20000050 	.word	0x20000050
 8003d44:	14f8b589 	.word	0x14f8b589

08003d48 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b088      	sub	sp, #32
 8003d4c:	af02      	add	r7, sp, #8
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	4608      	mov	r0, r1
 8003d52:	4611      	mov	r1, r2
 8003d54:	461a      	mov	r2, r3
 8003d56:	4603      	mov	r3, r0
 8003d58:	817b      	strh	r3, [r7, #10]
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	813b      	strh	r3, [r7, #8]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d70:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d74:	9300      	str	r3, [sp, #0]
 8003d76:	6a3b      	ldr	r3, [r7, #32]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	f000 f960 	bl	8004044 <I2C_WaitOnFlagUntilTimeout>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00d      	beq.n	8003da6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d98:	d103      	bne.n	8003da2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003da0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e05f      	b.n	8003e66 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003da6:	897b      	ldrh	r3, [r7, #10]
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	461a      	mov	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003db4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db8:	6a3a      	ldr	r2, [r7, #32]
 8003dba:	492d      	ldr	r1, [pc, #180]	@ (8003e70 <I2C_RequestMemoryWrite+0x128>)
 8003dbc:	68f8      	ldr	r0, [r7, #12]
 8003dbe:	f000 f9bb 	bl	8004138 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d001      	beq.n	8003dcc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e04c      	b.n	8003e66 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dcc:	2300      	movs	r3, #0
 8003dce:	617b      	str	r3, [r7, #20]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	617b      	str	r3, [r7, #20]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	617b      	str	r3, [r7, #20]
 8003de0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003de2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003de4:	6a39      	ldr	r1, [r7, #32]
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f000 fa46 	bl	8004278 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00d      	beq.n	8003e0e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df6:	2b04      	cmp	r3, #4
 8003df8:	d107      	bne.n	8003e0a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e08:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e02b      	b.n	8003e66 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e0e:	88fb      	ldrh	r3, [r7, #6]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d105      	bne.n	8003e20 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e14:	893b      	ldrh	r3, [r7, #8]
 8003e16:	b2da      	uxtb	r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	611a      	str	r2, [r3, #16]
 8003e1e:	e021      	b.n	8003e64 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003e20:	893b      	ldrh	r3, [r7, #8]
 8003e22:	0a1b      	lsrs	r3, r3, #8
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	b2da      	uxtb	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e30:	6a39      	ldr	r1, [r7, #32]
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	f000 fa20 	bl	8004278 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00d      	beq.n	8003e5a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e42:	2b04      	cmp	r3, #4
 8003e44:	d107      	bne.n	8003e56 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e54:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e005      	b.n	8003e66 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e5a:	893b      	ldrh	r3, [r7, #8]
 8003e5c:	b2da      	uxtb	r2, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3718      	adds	r7, #24
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	00010002 	.word	0x00010002

08003e74 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b088      	sub	sp, #32
 8003e78:	af02      	add	r7, sp, #8
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	4608      	mov	r0, r1
 8003e7e:	4611      	mov	r1, r2
 8003e80:	461a      	mov	r2, r3
 8003e82:	4603      	mov	r3, r0
 8003e84:	817b      	strh	r3, [r7, #10]
 8003e86:	460b      	mov	r3, r1
 8003e88:	813b      	strh	r3, [r7, #8]
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003e9c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003eac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb0:	9300      	str	r3, [sp, #0]
 8003eb2:	6a3b      	ldr	r3, [r7, #32]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003eba:	68f8      	ldr	r0, [r7, #12]
 8003ebc:	f000 f8c2 	bl	8004044 <I2C_WaitOnFlagUntilTimeout>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00d      	beq.n	8003ee2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ed0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ed4:	d103      	bne.n	8003ede <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003edc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e0aa      	b.n	8004038 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ee2:	897b      	ldrh	r3, [r7, #10]
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003ef0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef4:	6a3a      	ldr	r2, [r7, #32]
 8003ef6:	4952      	ldr	r1, [pc, #328]	@ (8004040 <I2C_RequestMemoryRead+0x1cc>)
 8003ef8:	68f8      	ldr	r0, [r7, #12]
 8003efa:	f000 f91d 	bl	8004138 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d001      	beq.n	8003f08 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e097      	b.n	8004038 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f08:	2300      	movs	r3, #0
 8003f0a:	617b      	str	r3, [r7, #20]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	617b      	str	r3, [r7, #20]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	617b      	str	r3, [r7, #20]
 8003f1c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f20:	6a39      	ldr	r1, [r7, #32]
 8003f22:	68f8      	ldr	r0, [r7, #12]
 8003f24:	f000 f9a8 	bl	8004278 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00d      	beq.n	8003f4a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f32:	2b04      	cmp	r3, #4
 8003f34:	d107      	bne.n	8003f46 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f44:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e076      	b.n	8004038 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f4a:	88fb      	ldrh	r3, [r7, #6]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d105      	bne.n	8003f5c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f50:	893b      	ldrh	r3, [r7, #8]
 8003f52:	b2da      	uxtb	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	611a      	str	r2, [r3, #16]
 8003f5a:	e021      	b.n	8003fa0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f5c:	893b      	ldrh	r3, [r7, #8]
 8003f5e:	0a1b      	lsrs	r3, r3, #8
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	b2da      	uxtb	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f6c:	6a39      	ldr	r1, [r7, #32]
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	f000 f982 	bl	8004278 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00d      	beq.n	8003f96 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f7e:	2b04      	cmp	r3, #4
 8003f80:	d107      	bne.n	8003f92 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f90:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e050      	b.n	8004038 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f96:	893b      	ldrh	r3, [r7, #8]
 8003f98:	b2da      	uxtb	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fa0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fa2:	6a39      	ldr	r1, [r7, #32]
 8003fa4:	68f8      	ldr	r0, [r7, #12]
 8003fa6:	f000 f967 	bl	8004278 <I2C_WaitOnTXEFlagUntilTimeout>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00d      	beq.n	8003fcc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb4:	2b04      	cmp	r3, #4
 8003fb6:	d107      	bne.n	8003fc8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fc6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e035      	b.n	8004038 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fda:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fde:	9300      	str	r3, [sp, #0]
 8003fe0:	6a3b      	ldr	r3, [r7, #32]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003fe8:	68f8      	ldr	r0, [r7, #12]
 8003fea:	f000 f82b 	bl	8004044 <I2C_WaitOnFlagUntilTimeout>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00d      	beq.n	8004010 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ffe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004002:	d103      	bne.n	800400c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800400a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e013      	b.n	8004038 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004010:	897b      	ldrh	r3, [r7, #10]
 8004012:	b2db      	uxtb	r3, r3
 8004014:	f043 0301 	orr.w	r3, r3, #1
 8004018:	b2da      	uxtb	r2, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004022:	6a3a      	ldr	r2, [r7, #32]
 8004024:	4906      	ldr	r1, [pc, #24]	@ (8004040 <I2C_RequestMemoryRead+0x1cc>)
 8004026:	68f8      	ldr	r0, [r7, #12]
 8004028:	f000 f886 	bl	8004138 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d001      	beq.n	8004036 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e000      	b.n	8004038 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3718      	adds	r7, #24
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	00010002 	.word	0x00010002

08004044 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	603b      	str	r3, [r7, #0]
 8004050:	4613      	mov	r3, r2
 8004052:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004054:	e048      	b.n	80040e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800405c:	d044      	beq.n	80040e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800405e:	f7fe fa09 	bl	8002474 <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	683a      	ldr	r2, [r7, #0]
 800406a:	429a      	cmp	r2, r3
 800406c:	d302      	bcc.n	8004074 <I2C_WaitOnFlagUntilTimeout+0x30>
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d139      	bne.n	80040e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	0c1b      	lsrs	r3, r3, #16
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b01      	cmp	r3, #1
 800407c:	d10d      	bne.n	800409a <I2C_WaitOnFlagUntilTimeout+0x56>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	695b      	ldr	r3, [r3, #20]
 8004084:	43da      	mvns	r2, r3
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	4013      	ands	r3, r2
 800408a:	b29b      	uxth	r3, r3
 800408c:	2b00      	cmp	r3, #0
 800408e:	bf0c      	ite	eq
 8004090:	2301      	moveq	r3, #1
 8004092:	2300      	movne	r3, #0
 8004094:	b2db      	uxtb	r3, r3
 8004096:	461a      	mov	r2, r3
 8004098:	e00c      	b.n	80040b4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	699b      	ldr	r3, [r3, #24]
 80040a0:	43da      	mvns	r2, r3
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	4013      	ands	r3, r2
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	bf0c      	ite	eq
 80040ac:	2301      	moveq	r3, #1
 80040ae:	2300      	movne	r3, #0
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	461a      	mov	r2, r3
 80040b4:	79fb      	ldrb	r3, [r7, #7]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d116      	bne.n	80040e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2200      	movs	r2, #0
 80040be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2220      	movs	r2, #32
 80040c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040d4:	f043 0220 	orr.w	r2, r3, #32
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e023      	b.n	8004130 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	0c1b      	lsrs	r3, r3, #16
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d10d      	bne.n	800410e <I2C_WaitOnFlagUntilTimeout+0xca>
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	695b      	ldr	r3, [r3, #20]
 80040f8:	43da      	mvns	r2, r3
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	4013      	ands	r3, r2
 80040fe:	b29b      	uxth	r3, r3
 8004100:	2b00      	cmp	r3, #0
 8004102:	bf0c      	ite	eq
 8004104:	2301      	moveq	r3, #1
 8004106:	2300      	movne	r3, #0
 8004108:	b2db      	uxtb	r3, r3
 800410a:	461a      	mov	r2, r3
 800410c:	e00c      	b.n	8004128 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	43da      	mvns	r2, r3
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	4013      	ands	r3, r2
 800411a:	b29b      	uxth	r3, r3
 800411c:	2b00      	cmp	r3, #0
 800411e:	bf0c      	ite	eq
 8004120:	2301      	moveq	r3, #1
 8004122:	2300      	movne	r3, #0
 8004124:	b2db      	uxtb	r3, r3
 8004126:	461a      	mov	r2, r3
 8004128:	79fb      	ldrb	r3, [r7, #7]
 800412a:	429a      	cmp	r2, r3
 800412c:	d093      	beq.n	8004056 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800412e:	2300      	movs	r3, #0
}
 8004130:	4618      	mov	r0, r3
 8004132:	3710      	adds	r7, #16
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
 8004144:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004146:	e071      	b.n	800422c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004152:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004156:	d123      	bne.n	80041a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004166:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004170:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2200      	movs	r2, #0
 8004176:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2220      	movs	r2, #32
 800417c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800418c:	f043 0204 	orr.w	r2, r3, #4
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e067      	b.n	8004270 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a6:	d041      	beq.n	800422c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041a8:	f7fe f964 	bl	8002474 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d302      	bcc.n	80041be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d136      	bne.n	800422c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	0c1b      	lsrs	r3, r3, #16
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d10c      	bne.n	80041e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	43da      	mvns	r2, r3
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	4013      	ands	r3, r2
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	bf14      	ite	ne
 80041da:	2301      	movne	r3, #1
 80041dc:	2300      	moveq	r3, #0
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	e00b      	b.n	80041fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	43da      	mvns	r2, r3
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	4013      	ands	r3, r2
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	bf14      	ite	ne
 80041f4:	2301      	movne	r3, #1
 80041f6:	2300      	moveq	r3, #0
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d016      	beq.n	800422c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2200      	movs	r2, #0
 8004202:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2220      	movs	r2, #32
 8004208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004218:	f043 0220 	orr.w	r2, r3, #32
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e021      	b.n	8004270 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	0c1b      	lsrs	r3, r3, #16
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b01      	cmp	r3, #1
 8004234:	d10c      	bne.n	8004250 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	695b      	ldr	r3, [r3, #20]
 800423c:	43da      	mvns	r2, r3
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	4013      	ands	r3, r2
 8004242:	b29b      	uxth	r3, r3
 8004244:	2b00      	cmp	r3, #0
 8004246:	bf14      	ite	ne
 8004248:	2301      	movne	r3, #1
 800424a:	2300      	moveq	r3, #0
 800424c:	b2db      	uxtb	r3, r3
 800424e:	e00b      	b.n	8004268 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	43da      	mvns	r2, r3
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	4013      	ands	r3, r2
 800425c:	b29b      	uxth	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	bf14      	ite	ne
 8004262:	2301      	movne	r3, #1
 8004264:	2300      	moveq	r3, #0
 8004266:	b2db      	uxtb	r3, r3
 8004268:	2b00      	cmp	r3, #0
 800426a:	f47f af6d 	bne.w	8004148 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800426e:	2300      	movs	r3, #0
}
 8004270:	4618      	mov	r0, r3
 8004272:	3710      	adds	r7, #16
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004284:	e034      	b.n	80042f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004286:	68f8      	ldr	r0, [r7, #12]
 8004288:	f000 f8e3 	bl	8004452 <I2C_IsAcknowledgeFailed>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d001      	beq.n	8004296 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e034      	b.n	8004300 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800429c:	d028      	beq.n	80042f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800429e:	f7fe f8e9 	bl	8002474 <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	68ba      	ldr	r2, [r7, #8]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d302      	bcc.n	80042b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d11d      	bne.n	80042f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042be:	2b80      	cmp	r3, #128	@ 0x80
 80042c0:	d016      	beq.n	80042f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2200      	movs	r2, #0
 80042c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2220      	movs	r2, #32
 80042cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042dc:	f043 0220 	orr.w	r2, r3, #32
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e007      	b.n	8004300 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042fa:	2b80      	cmp	r3, #128	@ 0x80
 80042fc:	d1c3      	bne.n	8004286 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	3710      	adds	r7, #16
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004314:	e034      	b.n	8004380 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004316:	68f8      	ldr	r0, [r7, #12]
 8004318:	f000 f89b 	bl	8004452 <I2C_IsAcknowledgeFailed>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d001      	beq.n	8004326 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e034      	b.n	8004390 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800432c:	d028      	beq.n	8004380 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800432e:	f7fe f8a1 	bl	8002474 <HAL_GetTick>
 8004332:	4602      	mov	r2, r0
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	68ba      	ldr	r2, [r7, #8]
 800433a:	429a      	cmp	r2, r3
 800433c:	d302      	bcc.n	8004344 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d11d      	bne.n	8004380 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	695b      	ldr	r3, [r3, #20]
 800434a:	f003 0304 	and.w	r3, r3, #4
 800434e:	2b04      	cmp	r3, #4
 8004350:	d016      	beq.n	8004380 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2200      	movs	r2, #0
 8004356:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2220      	movs	r2, #32
 800435c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800436c:	f043 0220 	orr.w	r2, r3, #32
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e007      	b.n	8004390 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	f003 0304 	and.w	r3, r3, #4
 800438a:	2b04      	cmp	r3, #4
 800438c:	d1c3      	bne.n	8004316 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	3710      	adds	r7, #16
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80043a4:	e049      	b.n	800443a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	695b      	ldr	r3, [r3, #20]
 80043ac:	f003 0310 	and.w	r3, r3, #16
 80043b0:	2b10      	cmp	r3, #16
 80043b2:	d119      	bne.n	80043e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f06f 0210 	mvn.w	r2, #16
 80043bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2220      	movs	r2, #32
 80043c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e030      	b.n	800444a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043e8:	f7fe f844 	bl	8002474 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	68ba      	ldr	r2, [r7, #8]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d302      	bcc.n	80043fe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d11d      	bne.n	800443a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	695b      	ldr	r3, [r3, #20]
 8004404:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004408:	2b40      	cmp	r3, #64	@ 0x40
 800440a:	d016      	beq.n	800443a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2200      	movs	r2, #0
 8004410:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2220      	movs	r2, #32
 8004416:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004426:	f043 0220 	orr.w	r2, r3, #32
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e007      	b.n	800444a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	695b      	ldr	r3, [r3, #20]
 8004440:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004444:	2b40      	cmp	r3, #64	@ 0x40
 8004446:	d1ae      	bne.n	80043a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3710      	adds	r7, #16
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004452:	b480      	push	{r7}
 8004454:	b083      	sub	sp, #12
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	695b      	ldr	r3, [r3, #20]
 8004460:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004464:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004468:	d11b      	bne.n	80044a2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004472:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2220      	movs	r2, #32
 800447e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800448e:	f043 0204 	orr.w	r2, r3, #4
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e000      	b.n	80044a4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bc80      	pop	{r7}
 80044ac:	4770      	bx	lr
	...

080044b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b086      	sub	sp, #24
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e272      	b.n	80049a8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	f000 8087 	beq.w	80045de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80044d0:	4b92      	ldr	r3, [pc, #584]	@ (800471c <HAL_RCC_OscConfig+0x26c>)
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f003 030c 	and.w	r3, r3, #12
 80044d8:	2b04      	cmp	r3, #4
 80044da:	d00c      	beq.n	80044f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80044dc:	4b8f      	ldr	r3, [pc, #572]	@ (800471c <HAL_RCC_OscConfig+0x26c>)
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f003 030c 	and.w	r3, r3, #12
 80044e4:	2b08      	cmp	r3, #8
 80044e6:	d112      	bne.n	800450e <HAL_RCC_OscConfig+0x5e>
 80044e8:	4b8c      	ldr	r3, [pc, #560]	@ (800471c <HAL_RCC_OscConfig+0x26c>)
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044f4:	d10b      	bne.n	800450e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044f6:	4b89      	ldr	r3, [pc, #548]	@ (800471c <HAL_RCC_OscConfig+0x26c>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d06c      	beq.n	80045dc <HAL_RCC_OscConfig+0x12c>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d168      	bne.n	80045dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e24c      	b.n	80049a8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004516:	d106      	bne.n	8004526 <HAL_RCC_OscConfig+0x76>
 8004518:	4b80      	ldr	r3, [pc, #512]	@ (800471c <HAL_RCC_OscConfig+0x26c>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a7f      	ldr	r2, [pc, #508]	@ (800471c <HAL_RCC_OscConfig+0x26c>)
 800451e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004522:	6013      	str	r3, [r2, #0]
 8004524:	e02e      	b.n	8004584 <HAL_RCC_OscConfig+0xd4>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d10c      	bne.n	8004548 <HAL_RCC_OscConfig+0x98>
 800452e:	4b7b      	ldr	r3, [pc, #492]	@ (800471c <HAL_RCC_OscConfig+0x26c>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a7a      	ldr	r2, [pc, #488]	@ (800471c <HAL_RCC_OscConfig+0x26c>)
 8004534:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004538:	6013      	str	r3, [r2, #0]
 800453a:	4b78      	ldr	r3, [pc, #480]	@ (800471c <HAL_RCC_OscConfig+0x26c>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a77      	ldr	r2, [pc, #476]	@ (800471c <HAL_RCC_OscConfig+0x26c>)
 8004540:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004544:	6013      	str	r3, [r2, #0]
 8004546:	e01d      	b.n	8004584 <HAL_RCC_OscConfig+0xd4>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004550:	d10c      	bne.n	800456c <HAL_RCC_OscConfig+0xbc>
 8004552:	4b72      	ldr	r3, [pc, #456]	@ (800471c <HAL_RCC_OscConfig+0x26c>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a71      	ldr	r2, [pc, #452]	@ (800471c <HAL_RCC_OscConfig+0x26c>)
 8004558:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800455c:	6013      	str	r3, [r2, #0]
 800455e:	4b6f      	ldr	r3, [pc, #444]	@ (800471c <HAL_RCC_OscConfig+0x26c>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a6e      	ldr	r2, [pc, #440]	@ (800471c <HAL_RCC_OscConfig+0x26c>)
 8004564:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004568:	6013      	str	r3, [r2, #0]
 800456a:	e00b      	b.n	8004584 <HAL_RCC_OscConfig+0xd4>
 800456c:	4b6b      	ldr	r3, [pc, #428]	@ (800471c <HAL_RCC_OscConfig+0x26c>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a6a      	ldr	r2, [pc, #424]	@ (800471c <HAL_RCC_OscConfig+0x26c>)
 8004572:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004576:	6013      	str	r3, [r2, #0]
 8004578:	4b68      	ldr	r3, [pc, #416]	@ (800471c <HAL_RCC_OscConfig+0x26c>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a67      	ldr	r2, [pc, #412]	@ (800471c <HAL_RCC_OscConfig+0x26c>)
 800457e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004582:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d013      	beq.n	80045b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800458c:	f7fd ff72 	bl	8002474 <HAL_GetTick>
 8004590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004592:	e008      	b.n	80045a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004594:	f7fd ff6e 	bl	8002474 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	2b64      	cmp	r3, #100	@ 0x64
 80045a0:	d901      	bls.n	80045a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e200      	b.n	80049a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045a6:	4b5d      	ldr	r3, [pc, #372]	@ (800471c <HAL_RCC_OscConfig+0x26c>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d0f0      	beq.n	8004594 <HAL_RCC_OscConfig+0xe4>
 80045b2:	e014      	b.n	80045de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045b4:	f7fd ff5e 	bl	8002474 <HAL_GetTick>
 80045b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ba:	e008      	b.n	80045ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045bc:	f7fd ff5a 	bl	8002474 <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	2b64      	cmp	r3, #100	@ 0x64
 80045c8:	d901      	bls.n	80045ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e1ec      	b.n	80049a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ce:	4b53      	ldr	r3, [pc, #332]	@ (800471c <HAL_RCC_OscConfig+0x26c>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1f0      	bne.n	80045bc <HAL_RCC_OscConfig+0x10c>
 80045da:	e000      	b.n	80045de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d063      	beq.n	80046b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80045ea:	4b4c      	ldr	r3, [pc, #304]	@ (800471c <HAL_RCC_OscConfig+0x26c>)
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f003 030c 	and.w	r3, r3, #12
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00b      	beq.n	800460e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80045f6:	4b49      	ldr	r3, [pc, #292]	@ (800471c <HAL_RCC_OscConfig+0x26c>)
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f003 030c 	and.w	r3, r3, #12
 80045fe:	2b08      	cmp	r3, #8
 8004600:	d11c      	bne.n	800463c <HAL_RCC_OscConfig+0x18c>
 8004602:	4b46      	ldr	r3, [pc, #280]	@ (800471c <HAL_RCC_OscConfig+0x26c>)
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d116      	bne.n	800463c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800460e:	4b43      	ldr	r3, [pc, #268]	@ (800471c <HAL_RCC_OscConfig+0x26c>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d005      	beq.n	8004626 <HAL_RCC_OscConfig+0x176>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d001      	beq.n	8004626 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e1c0      	b.n	80049a8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004626:	4b3d      	ldr	r3, [pc, #244]	@ (800471c <HAL_RCC_OscConfig+0x26c>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	00db      	lsls	r3, r3, #3
 8004634:	4939      	ldr	r1, [pc, #228]	@ (800471c <HAL_RCC_OscConfig+0x26c>)
 8004636:	4313      	orrs	r3, r2
 8004638:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800463a:	e03a      	b.n	80046b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d020      	beq.n	8004686 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004644:	4b36      	ldr	r3, [pc, #216]	@ (8004720 <HAL_RCC_OscConfig+0x270>)
 8004646:	2201      	movs	r2, #1
 8004648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800464a:	f7fd ff13 	bl	8002474 <HAL_GetTick>
 800464e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004650:	e008      	b.n	8004664 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004652:	f7fd ff0f 	bl	8002474 <HAL_GetTick>
 8004656:	4602      	mov	r2, r0
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	2b02      	cmp	r3, #2
 800465e:	d901      	bls.n	8004664 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	e1a1      	b.n	80049a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004664:	4b2d      	ldr	r3, [pc, #180]	@ (800471c <HAL_RCC_OscConfig+0x26c>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0302 	and.w	r3, r3, #2
 800466c:	2b00      	cmp	r3, #0
 800466e:	d0f0      	beq.n	8004652 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004670:	4b2a      	ldr	r3, [pc, #168]	@ (800471c <HAL_RCC_OscConfig+0x26c>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	695b      	ldr	r3, [r3, #20]
 800467c:	00db      	lsls	r3, r3, #3
 800467e:	4927      	ldr	r1, [pc, #156]	@ (800471c <HAL_RCC_OscConfig+0x26c>)
 8004680:	4313      	orrs	r3, r2
 8004682:	600b      	str	r3, [r1, #0]
 8004684:	e015      	b.n	80046b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004686:	4b26      	ldr	r3, [pc, #152]	@ (8004720 <HAL_RCC_OscConfig+0x270>)
 8004688:	2200      	movs	r2, #0
 800468a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800468c:	f7fd fef2 	bl	8002474 <HAL_GetTick>
 8004690:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004692:	e008      	b.n	80046a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004694:	f7fd feee 	bl	8002474 <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d901      	bls.n	80046a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e180      	b.n	80049a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046a6:	4b1d      	ldr	r3, [pc, #116]	@ (800471c <HAL_RCC_OscConfig+0x26c>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0302 	and.w	r3, r3, #2
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1f0      	bne.n	8004694 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0308 	and.w	r3, r3, #8
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d03a      	beq.n	8004734 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	699b      	ldr	r3, [r3, #24]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d019      	beq.n	80046fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046c6:	4b17      	ldr	r3, [pc, #92]	@ (8004724 <HAL_RCC_OscConfig+0x274>)
 80046c8:	2201      	movs	r2, #1
 80046ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046cc:	f7fd fed2 	bl	8002474 <HAL_GetTick>
 80046d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046d2:	e008      	b.n	80046e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046d4:	f7fd fece 	bl	8002474 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e160      	b.n	80049a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046e6:	4b0d      	ldr	r3, [pc, #52]	@ (800471c <HAL_RCC_OscConfig+0x26c>)
 80046e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ea:	f003 0302 	and.w	r3, r3, #2
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d0f0      	beq.n	80046d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80046f2:	2001      	movs	r0, #1
 80046f4:	f000 face 	bl	8004c94 <RCC_Delay>
 80046f8:	e01c      	b.n	8004734 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046fa:	4b0a      	ldr	r3, [pc, #40]	@ (8004724 <HAL_RCC_OscConfig+0x274>)
 80046fc:	2200      	movs	r2, #0
 80046fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004700:	f7fd feb8 	bl	8002474 <HAL_GetTick>
 8004704:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004706:	e00f      	b.n	8004728 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004708:	f7fd feb4 	bl	8002474 <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	2b02      	cmp	r3, #2
 8004714:	d908      	bls.n	8004728 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e146      	b.n	80049a8 <HAL_RCC_OscConfig+0x4f8>
 800471a:	bf00      	nop
 800471c:	40021000 	.word	0x40021000
 8004720:	42420000 	.word	0x42420000
 8004724:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004728:	4b92      	ldr	r3, [pc, #584]	@ (8004974 <HAL_RCC_OscConfig+0x4c4>)
 800472a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800472c:	f003 0302 	and.w	r3, r3, #2
 8004730:	2b00      	cmp	r3, #0
 8004732:	d1e9      	bne.n	8004708 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0304 	and.w	r3, r3, #4
 800473c:	2b00      	cmp	r3, #0
 800473e:	f000 80a6 	beq.w	800488e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004742:	2300      	movs	r3, #0
 8004744:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004746:	4b8b      	ldr	r3, [pc, #556]	@ (8004974 <HAL_RCC_OscConfig+0x4c4>)
 8004748:	69db      	ldr	r3, [r3, #28]
 800474a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d10d      	bne.n	800476e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004752:	4b88      	ldr	r3, [pc, #544]	@ (8004974 <HAL_RCC_OscConfig+0x4c4>)
 8004754:	69db      	ldr	r3, [r3, #28]
 8004756:	4a87      	ldr	r2, [pc, #540]	@ (8004974 <HAL_RCC_OscConfig+0x4c4>)
 8004758:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800475c:	61d3      	str	r3, [r2, #28]
 800475e:	4b85      	ldr	r3, [pc, #532]	@ (8004974 <HAL_RCC_OscConfig+0x4c4>)
 8004760:	69db      	ldr	r3, [r3, #28]
 8004762:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004766:	60bb      	str	r3, [r7, #8]
 8004768:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800476a:	2301      	movs	r3, #1
 800476c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800476e:	4b82      	ldr	r3, [pc, #520]	@ (8004978 <HAL_RCC_OscConfig+0x4c8>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004776:	2b00      	cmp	r3, #0
 8004778:	d118      	bne.n	80047ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800477a:	4b7f      	ldr	r3, [pc, #508]	@ (8004978 <HAL_RCC_OscConfig+0x4c8>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a7e      	ldr	r2, [pc, #504]	@ (8004978 <HAL_RCC_OscConfig+0x4c8>)
 8004780:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004784:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004786:	f7fd fe75 	bl	8002474 <HAL_GetTick>
 800478a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800478c:	e008      	b.n	80047a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800478e:	f7fd fe71 	bl	8002474 <HAL_GetTick>
 8004792:	4602      	mov	r2, r0
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	2b64      	cmp	r3, #100	@ 0x64
 800479a:	d901      	bls.n	80047a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e103      	b.n	80049a8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047a0:	4b75      	ldr	r3, [pc, #468]	@ (8004978 <HAL_RCC_OscConfig+0x4c8>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d0f0      	beq.n	800478e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d106      	bne.n	80047c2 <HAL_RCC_OscConfig+0x312>
 80047b4:	4b6f      	ldr	r3, [pc, #444]	@ (8004974 <HAL_RCC_OscConfig+0x4c4>)
 80047b6:	6a1b      	ldr	r3, [r3, #32]
 80047b8:	4a6e      	ldr	r2, [pc, #440]	@ (8004974 <HAL_RCC_OscConfig+0x4c4>)
 80047ba:	f043 0301 	orr.w	r3, r3, #1
 80047be:	6213      	str	r3, [r2, #32]
 80047c0:	e02d      	b.n	800481e <HAL_RCC_OscConfig+0x36e>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d10c      	bne.n	80047e4 <HAL_RCC_OscConfig+0x334>
 80047ca:	4b6a      	ldr	r3, [pc, #424]	@ (8004974 <HAL_RCC_OscConfig+0x4c4>)
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	4a69      	ldr	r2, [pc, #420]	@ (8004974 <HAL_RCC_OscConfig+0x4c4>)
 80047d0:	f023 0301 	bic.w	r3, r3, #1
 80047d4:	6213      	str	r3, [r2, #32]
 80047d6:	4b67      	ldr	r3, [pc, #412]	@ (8004974 <HAL_RCC_OscConfig+0x4c4>)
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	4a66      	ldr	r2, [pc, #408]	@ (8004974 <HAL_RCC_OscConfig+0x4c4>)
 80047dc:	f023 0304 	bic.w	r3, r3, #4
 80047e0:	6213      	str	r3, [r2, #32]
 80047e2:	e01c      	b.n	800481e <HAL_RCC_OscConfig+0x36e>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	2b05      	cmp	r3, #5
 80047ea:	d10c      	bne.n	8004806 <HAL_RCC_OscConfig+0x356>
 80047ec:	4b61      	ldr	r3, [pc, #388]	@ (8004974 <HAL_RCC_OscConfig+0x4c4>)
 80047ee:	6a1b      	ldr	r3, [r3, #32]
 80047f0:	4a60      	ldr	r2, [pc, #384]	@ (8004974 <HAL_RCC_OscConfig+0x4c4>)
 80047f2:	f043 0304 	orr.w	r3, r3, #4
 80047f6:	6213      	str	r3, [r2, #32]
 80047f8:	4b5e      	ldr	r3, [pc, #376]	@ (8004974 <HAL_RCC_OscConfig+0x4c4>)
 80047fa:	6a1b      	ldr	r3, [r3, #32]
 80047fc:	4a5d      	ldr	r2, [pc, #372]	@ (8004974 <HAL_RCC_OscConfig+0x4c4>)
 80047fe:	f043 0301 	orr.w	r3, r3, #1
 8004802:	6213      	str	r3, [r2, #32]
 8004804:	e00b      	b.n	800481e <HAL_RCC_OscConfig+0x36e>
 8004806:	4b5b      	ldr	r3, [pc, #364]	@ (8004974 <HAL_RCC_OscConfig+0x4c4>)
 8004808:	6a1b      	ldr	r3, [r3, #32]
 800480a:	4a5a      	ldr	r2, [pc, #360]	@ (8004974 <HAL_RCC_OscConfig+0x4c4>)
 800480c:	f023 0301 	bic.w	r3, r3, #1
 8004810:	6213      	str	r3, [r2, #32]
 8004812:	4b58      	ldr	r3, [pc, #352]	@ (8004974 <HAL_RCC_OscConfig+0x4c4>)
 8004814:	6a1b      	ldr	r3, [r3, #32]
 8004816:	4a57      	ldr	r2, [pc, #348]	@ (8004974 <HAL_RCC_OscConfig+0x4c4>)
 8004818:	f023 0304 	bic.w	r3, r3, #4
 800481c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d015      	beq.n	8004852 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004826:	f7fd fe25 	bl	8002474 <HAL_GetTick>
 800482a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800482c:	e00a      	b.n	8004844 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800482e:	f7fd fe21 	bl	8002474 <HAL_GetTick>
 8004832:	4602      	mov	r2, r0
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	f241 3288 	movw	r2, #5000	@ 0x1388
 800483c:	4293      	cmp	r3, r2
 800483e:	d901      	bls.n	8004844 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e0b1      	b.n	80049a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004844:	4b4b      	ldr	r3, [pc, #300]	@ (8004974 <HAL_RCC_OscConfig+0x4c4>)
 8004846:	6a1b      	ldr	r3, [r3, #32]
 8004848:	f003 0302 	and.w	r3, r3, #2
 800484c:	2b00      	cmp	r3, #0
 800484e:	d0ee      	beq.n	800482e <HAL_RCC_OscConfig+0x37e>
 8004850:	e014      	b.n	800487c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004852:	f7fd fe0f 	bl	8002474 <HAL_GetTick>
 8004856:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004858:	e00a      	b.n	8004870 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800485a:	f7fd fe0b 	bl	8002474 <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004868:	4293      	cmp	r3, r2
 800486a:	d901      	bls.n	8004870 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e09b      	b.n	80049a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004870:	4b40      	ldr	r3, [pc, #256]	@ (8004974 <HAL_RCC_OscConfig+0x4c4>)
 8004872:	6a1b      	ldr	r3, [r3, #32]
 8004874:	f003 0302 	and.w	r3, r3, #2
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1ee      	bne.n	800485a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800487c:	7dfb      	ldrb	r3, [r7, #23]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d105      	bne.n	800488e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004882:	4b3c      	ldr	r3, [pc, #240]	@ (8004974 <HAL_RCC_OscConfig+0x4c4>)
 8004884:	69db      	ldr	r3, [r3, #28]
 8004886:	4a3b      	ldr	r2, [pc, #236]	@ (8004974 <HAL_RCC_OscConfig+0x4c4>)
 8004888:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800488c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	69db      	ldr	r3, [r3, #28]
 8004892:	2b00      	cmp	r3, #0
 8004894:	f000 8087 	beq.w	80049a6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004898:	4b36      	ldr	r3, [pc, #216]	@ (8004974 <HAL_RCC_OscConfig+0x4c4>)
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f003 030c 	and.w	r3, r3, #12
 80048a0:	2b08      	cmp	r3, #8
 80048a2:	d061      	beq.n	8004968 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	69db      	ldr	r3, [r3, #28]
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d146      	bne.n	800493a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048ac:	4b33      	ldr	r3, [pc, #204]	@ (800497c <HAL_RCC_OscConfig+0x4cc>)
 80048ae:	2200      	movs	r2, #0
 80048b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048b2:	f7fd fddf 	bl	8002474 <HAL_GetTick>
 80048b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048b8:	e008      	b.n	80048cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048ba:	f7fd fddb 	bl	8002474 <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d901      	bls.n	80048cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e06d      	b.n	80049a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048cc:	4b29      	ldr	r3, [pc, #164]	@ (8004974 <HAL_RCC_OscConfig+0x4c4>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1f0      	bne.n	80048ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a1b      	ldr	r3, [r3, #32]
 80048dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048e0:	d108      	bne.n	80048f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80048e2:	4b24      	ldr	r3, [pc, #144]	@ (8004974 <HAL_RCC_OscConfig+0x4c4>)
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	4921      	ldr	r1, [pc, #132]	@ (8004974 <HAL_RCC_OscConfig+0x4c4>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048f4:	4b1f      	ldr	r3, [pc, #124]	@ (8004974 <HAL_RCC_OscConfig+0x4c4>)
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a19      	ldr	r1, [r3, #32]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004904:	430b      	orrs	r3, r1
 8004906:	491b      	ldr	r1, [pc, #108]	@ (8004974 <HAL_RCC_OscConfig+0x4c4>)
 8004908:	4313      	orrs	r3, r2
 800490a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800490c:	4b1b      	ldr	r3, [pc, #108]	@ (800497c <HAL_RCC_OscConfig+0x4cc>)
 800490e:	2201      	movs	r2, #1
 8004910:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004912:	f7fd fdaf 	bl	8002474 <HAL_GetTick>
 8004916:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004918:	e008      	b.n	800492c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800491a:	f7fd fdab 	bl	8002474 <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	2b02      	cmp	r3, #2
 8004926:	d901      	bls.n	800492c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e03d      	b.n	80049a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800492c:	4b11      	ldr	r3, [pc, #68]	@ (8004974 <HAL_RCC_OscConfig+0x4c4>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d0f0      	beq.n	800491a <HAL_RCC_OscConfig+0x46a>
 8004938:	e035      	b.n	80049a6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800493a:	4b10      	ldr	r3, [pc, #64]	@ (800497c <HAL_RCC_OscConfig+0x4cc>)
 800493c:	2200      	movs	r2, #0
 800493e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004940:	f7fd fd98 	bl	8002474 <HAL_GetTick>
 8004944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004946:	e008      	b.n	800495a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004948:	f7fd fd94 	bl	8002474 <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	2b02      	cmp	r3, #2
 8004954:	d901      	bls.n	800495a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e026      	b.n	80049a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800495a:	4b06      	ldr	r3, [pc, #24]	@ (8004974 <HAL_RCC_OscConfig+0x4c4>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1f0      	bne.n	8004948 <HAL_RCC_OscConfig+0x498>
 8004966:	e01e      	b.n	80049a6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	69db      	ldr	r3, [r3, #28]
 800496c:	2b01      	cmp	r3, #1
 800496e:	d107      	bne.n	8004980 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e019      	b.n	80049a8 <HAL_RCC_OscConfig+0x4f8>
 8004974:	40021000 	.word	0x40021000
 8004978:	40007000 	.word	0x40007000
 800497c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004980:	4b0b      	ldr	r3, [pc, #44]	@ (80049b0 <HAL_RCC_OscConfig+0x500>)
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a1b      	ldr	r3, [r3, #32]
 8004990:	429a      	cmp	r2, r3
 8004992:	d106      	bne.n	80049a2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800499e:	429a      	cmp	r2, r3
 80049a0:	d001      	beq.n	80049a6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e000      	b.n	80049a8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3718      	adds	r7, #24
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	40021000 	.word	0x40021000

080049b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d101      	bne.n	80049c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e0d0      	b.n	8004b6a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049c8:	4b6a      	ldr	r3, [pc, #424]	@ (8004b74 <HAL_RCC_ClockConfig+0x1c0>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0307 	and.w	r3, r3, #7
 80049d0:	683a      	ldr	r2, [r7, #0]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d910      	bls.n	80049f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049d6:	4b67      	ldr	r3, [pc, #412]	@ (8004b74 <HAL_RCC_ClockConfig+0x1c0>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f023 0207 	bic.w	r2, r3, #7
 80049de:	4965      	ldr	r1, [pc, #404]	@ (8004b74 <HAL_RCC_ClockConfig+0x1c0>)
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049e6:	4b63      	ldr	r3, [pc, #396]	@ (8004b74 <HAL_RCC_ClockConfig+0x1c0>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0307 	and.w	r3, r3, #7
 80049ee:	683a      	ldr	r2, [r7, #0]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d001      	beq.n	80049f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e0b8      	b.n	8004b6a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0302 	and.w	r3, r3, #2
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d020      	beq.n	8004a46 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0304 	and.w	r3, r3, #4
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d005      	beq.n	8004a1c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a10:	4b59      	ldr	r3, [pc, #356]	@ (8004b78 <HAL_RCC_ClockConfig+0x1c4>)
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	4a58      	ldr	r2, [pc, #352]	@ (8004b78 <HAL_RCC_ClockConfig+0x1c4>)
 8004a16:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004a1a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0308 	and.w	r3, r3, #8
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d005      	beq.n	8004a34 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a28:	4b53      	ldr	r3, [pc, #332]	@ (8004b78 <HAL_RCC_ClockConfig+0x1c4>)
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	4a52      	ldr	r2, [pc, #328]	@ (8004b78 <HAL_RCC_ClockConfig+0x1c4>)
 8004a2e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004a32:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a34:	4b50      	ldr	r3, [pc, #320]	@ (8004b78 <HAL_RCC_ClockConfig+0x1c4>)
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	494d      	ldr	r1, [pc, #308]	@ (8004b78 <HAL_RCC_ClockConfig+0x1c4>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0301 	and.w	r3, r3, #1
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d040      	beq.n	8004ad4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d107      	bne.n	8004a6a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a5a:	4b47      	ldr	r3, [pc, #284]	@ (8004b78 <HAL_RCC_ClockConfig+0x1c4>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d115      	bne.n	8004a92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e07f      	b.n	8004b6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d107      	bne.n	8004a82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a72:	4b41      	ldr	r3, [pc, #260]	@ (8004b78 <HAL_RCC_ClockConfig+0x1c4>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d109      	bne.n	8004a92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e073      	b.n	8004b6a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a82:	4b3d      	ldr	r3, [pc, #244]	@ (8004b78 <HAL_RCC_ClockConfig+0x1c4>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0302 	and.w	r3, r3, #2
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d101      	bne.n	8004a92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e06b      	b.n	8004b6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a92:	4b39      	ldr	r3, [pc, #228]	@ (8004b78 <HAL_RCC_ClockConfig+0x1c4>)
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	f023 0203 	bic.w	r2, r3, #3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	4936      	ldr	r1, [pc, #216]	@ (8004b78 <HAL_RCC_ClockConfig+0x1c4>)
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004aa4:	f7fd fce6 	bl	8002474 <HAL_GetTick>
 8004aa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aaa:	e00a      	b.n	8004ac2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004aac:	f7fd fce2 	bl	8002474 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d901      	bls.n	8004ac2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e053      	b.n	8004b6a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ac2:	4b2d      	ldr	r3, [pc, #180]	@ (8004b78 <HAL_RCC_ClockConfig+0x1c4>)
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f003 020c 	and.w	r2, r3, #12
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d1eb      	bne.n	8004aac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ad4:	4b27      	ldr	r3, [pc, #156]	@ (8004b74 <HAL_RCC_ClockConfig+0x1c0>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0307 	and.w	r3, r3, #7
 8004adc:	683a      	ldr	r2, [r7, #0]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d210      	bcs.n	8004b04 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ae2:	4b24      	ldr	r3, [pc, #144]	@ (8004b74 <HAL_RCC_ClockConfig+0x1c0>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f023 0207 	bic.w	r2, r3, #7
 8004aea:	4922      	ldr	r1, [pc, #136]	@ (8004b74 <HAL_RCC_ClockConfig+0x1c0>)
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004af2:	4b20      	ldr	r3, [pc, #128]	@ (8004b74 <HAL_RCC_ClockConfig+0x1c0>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0307 	and.w	r3, r3, #7
 8004afa:	683a      	ldr	r2, [r7, #0]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d001      	beq.n	8004b04 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e032      	b.n	8004b6a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0304 	and.w	r3, r3, #4
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d008      	beq.n	8004b22 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b10:	4b19      	ldr	r3, [pc, #100]	@ (8004b78 <HAL_RCC_ClockConfig+0x1c4>)
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	4916      	ldr	r1, [pc, #88]	@ (8004b78 <HAL_RCC_ClockConfig+0x1c4>)
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0308 	and.w	r3, r3, #8
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d009      	beq.n	8004b42 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b2e:	4b12      	ldr	r3, [pc, #72]	@ (8004b78 <HAL_RCC_ClockConfig+0x1c4>)
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	00db      	lsls	r3, r3, #3
 8004b3c:	490e      	ldr	r1, [pc, #56]	@ (8004b78 <HAL_RCC_ClockConfig+0x1c4>)
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b42:	f000 f821 	bl	8004b88 <HAL_RCC_GetSysClockFreq>
 8004b46:	4602      	mov	r2, r0
 8004b48:	4b0b      	ldr	r3, [pc, #44]	@ (8004b78 <HAL_RCC_ClockConfig+0x1c4>)
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	091b      	lsrs	r3, r3, #4
 8004b4e:	f003 030f 	and.w	r3, r3, #15
 8004b52:	490a      	ldr	r1, [pc, #40]	@ (8004b7c <HAL_RCC_ClockConfig+0x1c8>)
 8004b54:	5ccb      	ldrb	r3, [r1, r3]
 8004b56:	fa22 f303 	lsr.w	r3, r2, r3
 8004b5a:	4a09      	ldr	r2, [pc, #36]	@ (8004b80 <HAL_RCC_ClockConfig+0x1cc>)
 8004b5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004b5e:	4b09      	ldr	r3, [pc, #36]	@ (8004b84 <HAL_RCC_ClockConfig+0x1d0>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7fd fc44 	bl	80023f0 <HAL_InitTick>

  return HAL_OK;
 8004b68:	2300      	movs	r3, #0
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3710      	adds	r7, #16
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	40022000 	.word	0x40022000
 8004b78:	40021000 	.word	0x40021000
 8004b7c:	08005ad4 	.word	0x08005ad4
 8004b80:	20000050 	.word	0x20000050
 8004b84:	20000054 	.word	0x20000054

08004b88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b087      	sub	sp, #28
 8004b8c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	60fb      	str	r3, [r7, #12]
 8004b92:	2300      	movs	r3, #0
 8004b94:	60bb      	str	r3, [r7, #8]
 8004b96:	2300      	movs	r3, #0
 8004b98:	617b      	str	r3, [r7, #20]
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004ba2:	4b1e      	ldr	r3, [pc, #120]	@ (8004c1c <HAL_RCC_GetSysClockFreq+0x94>)
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f003 030c 	and.w	r3, r3, #12
 8004bae:	2b04      	cmp	r3, #4
 8004bb0:	d002      	beq.n	8004bb8 <HAL_RCC_GetSysClockFreq+0x30>
 8004bb2:	2b08      	cmp	r3, #8
 8004bb4:	d003      	beq.n	8004bbe <HAL_RCC_GetSysClockFreq+0x36>
 8004bb6:	e027      	b.n	8004c08 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004bb8:	4b19      	ldr	r3, [pc, #100]	@ (8004c20 <HAL_RCC_GetSysClockFreq+0x98>)
 8004bba:	613b      	str	r3, [r7, #16]
      break;
 8004bbc:	e027      	b.n	8004c0e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	0c9b      	lsrs	r3, r3, #18
 8004bc2:	f003 030f 	and.w	r3, r3, #15
 8004bc6:	4a17      	ldr	r2, [pc, #92]	@ (8004c24 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004bc8:	5cd3      	ldrb	r3, [r2, r3]
 8004bca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d010      	beq.n	8004bf8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004bd6:	4b11      	ldr	r3, [pc, #68]	@ (8004c1c <HAL_RCC_GetSysClockFreq+0x94>)
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	0c5b      	lsrs	r3, r3, #17
 8004bdc:	f003 0301 	and.w	r3, r3, #1
 8004be0:	4a11      	ldr	r2, [pc, #68]	@ (8004c28 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004be2:	5cd3      	ldrb	r3, [r2, r3]
 8004be4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a0d      	ldr	r2, [pc, #52]	@ (8004c20 <HAL_RCC_GetSysClockFreq+0x98>)
 8004bea:	fb03 f202 	mul.w	r2, r3, r2
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bf4:	617b      	str	r3, [r7, #20]
 8004bf6:	e004      	b.n	8004c02 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4a0c      	ldr	r2, [pc, #48]	@ (8004c2c <HAL_RCC_GetSysClockFreq+0xa4>)
 8004bfc:	fb02 f303 	mul.w	r3, r2, r3
 8004c00:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	613b      	str	r3, [r7, #16]
      break;
 8004c06:	e002      	b.n	8004c0e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004c08:	4b05      	ldr	r3, [pc, #20]	@ (8004c20 <HAL_RCC_GetSysClockFreq+0x98>)
 8004c0a:	613b      	str	r3, [r7, #16]
      break;
 8004c0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c0e:	693b      	ldr	r3, [r7, #16]
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	371c      	adds	r7, #28
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bc80      	pop	{r7}
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	40021000 	.word	0x40021000
 8004c20:	007a1200 	.word	0x007a1200
 8004c24:	08005aec 	.word	0x08005aec
 8004c28:	08005afc 	.word	0x08005afc
 8004c2c:	003d0900 	.word	0x003d0900

08004c30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c30:	b480      	push	{r7}
 8004c32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c34:	4b02      	ldr	r3, [pc, #8]	@ (8004c40 <HAL_RCC_GetHCLKFreq+0x10>)
 8004c36:	681b      	ldr	r3, [r3, #0]
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bc80      	pop	{r7}
 8004c3e:	4770      	bx	lr
 8004c40:	20000050 	.word	0x20000050

08004c44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c48:	f7ff fff2 	bl	8004c30 <HAL_RCC_GetHCLKFreq>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	4b05      	ldr	r3, [pc, #20]	@ (8004c64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	0a1b      	lsrs	r3, r3, #8
 8004c54:	f003 0307 	and.w	r3, r3, #7
 8004c58:	4903      	ldr	r1, [pc, #12]	@ (8004c68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c5a:	5ccb      	ldrb	r3, [r1, r3]
 8004c5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	40021000 	.word	0x40021000
 8004c68:	08005ae4 	.word	0x08005ae4

08004c6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c70:	f7ff ffde 	bl	8004c30 <HAL_RCC_GetHCLKFreq>
 8004c74:	4602      	mov	r2, r0
 8004c76:	4b05      	ldr	r3, [pc, #20]	@ (8004c8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	0adb      	lsrs	r3, r3, #11
 8004c7c:	f003 0307 	and.w	r3, r3, #7
 8004c80:	4903      	ldr	r1, [pc, #12]	@ (8004c90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c82:	5ccb      	ldrb	r3, [r1, r3]
 8004c84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	40021000 	.word	0x40021000
 8004c90:	08005ae4 	.word	0x08005ae4

08004c94 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b085      	sub	sp, #20
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8004cc8 <RCC_Delay+0x34>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a0a      	ldr	r2, [pc, #40]	@ (8004ccc <RCC_Delay+0x38>)
 8004ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca6:	0a5b      	lsrs	r3, r3, #9
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	fb02 f303 	mul.w	r3, r2, r3
 8004cae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004cb0:	bf00      	nop
  }
  while (Delay --);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	1e5a      	subs	r2, r3, #1
 8004cb6:	60fa      	str	r2, [r7, #12]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d1f9      	bne.n	8004cb0 <RCC_Delay+0x1c>
}
 8004cbc:	bf00      	nop
 8004cbe:	bf00      	nop
 8004cc0:	3714      	adds	r7, #20
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bc80      	pop	{r7}
 8004cc6:	4770      	bx	lr
 8004cc8:	20000050 	.word	0x20000050
 8004ccc:	10624dd3 	.word	0x10624dd3

08004cd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b086      	sub	sp, #24
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	613b      	str	r3, [r7, #16]
 8004cdc:	2300      	movs	r3, #0
 8004cde:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0301 	and.w	r3, r3, #1
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d07d      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004cec:	2300      	movs	r3, #0
 8004cee:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cf0:	4b4f      	ldr	r3, [pc, #316]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cf2:	69db      	ldr	r3, [r3, #28]
 8004cf4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d10d      	bne.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cfc:	4b4c      	ldr	r3, [pc, #304]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cfe:	69db      	ldr	r3, [r3, #28]
 8004d00:	4a4b      	ldr	r2, [pc, #300]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d06:	61d3      	str	r3, [r2, #28]
 8004d08:	4b49      	ldr	r3, [pc, #292]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d0a:	69db      	ldr	r3, [r3, #28]
 8004d0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d10:	60bb      	str	r3, [r7, #8]
 8004d12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d14:	2301      	movs	r3, #1
 8004d16:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d18:	4b46      	ldr	r3, [pc, #280]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d118      	bne.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d24:	4b43      	ldr	r3, [pc, #268]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a42      	ldr	r2, [pc, #264]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d2e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d30:	f7fd fba0 	bl	8002474 <HAL_GetTick>
 8004d34:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d36:	e008      	b.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d38:	f7fd fb9c 	bl	8002474 <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	2b64      	cmp	r3, #100	@ 0x64
 8004d44:	d901      	bls.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e06d      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d4a:	4b3a      	ldr	r3, [pc, #232]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d0f0      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d56:	4b36      	ldr	r3, [pc, #216]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d58:	6a1b      	ldr	r3, [r3, #32]
 8004d5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d5e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d02e      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d027      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d74:	4b2e      	ldr	r3, [pc, #184]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d76:	6a1b      	ldr	r3, [r3, #32]
 8004d78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d7c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d7e:	4b2e      	ldr	r3, [pc, #184]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004d80:	2201      	movs	r2, #1
 8004d82:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d84:	4b2c      	ldr	r3, [pc, #176]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004d86:	2200      	movs	r2, #0
 8004d88:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004d8a:	4a29      	ldr	r2, [pc, #164]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f003 0301 	and.w	r3, r3, #1
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d014      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d9a:	f7fd fb6b 	bl	8002474 <HAL_GetTick>
 8004d9e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004da0:	e00a      	b.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004da2:	f7fd fb67 	bl	8002474 <HAL_GetTick>
 8004da6:	4602      	mov	r2, r0
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d901      	bls.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004db4:	2303      	movs	r3, #3
 8004db6:	e036      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004db8:	4b1d      	ldr	r3, [pc, #116]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dba:	6a1b      	ldr	r3, [r3, #32]
 8004dbc:	f003 0302 	and.w	r3, r3, #2
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d0ee      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004dc4:	4b1a      	ldr	r3, [pc, #104]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dc6:	6a1b      	ldr	r3, [r3, #32]
 8004dc8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	4917      	ldr	r1, [pc, #92]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004dd6:	7dfb      	ldrb	r3, [r7, #23]
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d105      	bne.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ddc:	4b14      	ldr	r3, [pc, #80]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dde:	69db      	ldr	r3, [r3, #28]
 8004de0:	4a13      	ldr	r2, [pc, #76]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004de2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004de6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0302 	and.w	r3, r3, #2
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d008      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004df4:	4b0e      	ldr	r3, [pc, #56]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	490b      	ldr	r1, [pc, #44]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 0310 	and.w	r3, r3, #16
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d008      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e12:	4b07      	ldr	r3, [pc, #28]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	4904      	ldr	r1, [pc, #16]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e20:	4313      	orrs	r3, r2
 8004e22:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3718      	adds	r7, #24
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	40021000 	.word	0x40021000
 8004e34:	40007000 	.word	0x40007000
 8004e38:	42420440 	.word	0x42420440

08004e3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d101      	bne.n	8004e4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e076      	b.n	8004f3c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d108      	bne.n	8004e68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e5e:	d009      	beq.n	8004e74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	61da      	str	r2, [r3, #28]
 8004e66:	e005      	b.n	8004e74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d106      	bne.n	8004e94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f7fd f91e 	bl	80020d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2202      	movs	r2, #2
 8004e98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004eaa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004ebc:	431a      	orrs	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ec6:	431a      	orrs	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	f003 0302 	and.w	r3, r3, #2
 8004ed0:	431a      	orrs	r2, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	695b      	ldr	r3, [r3, #20]
 8004ed6:	f003 0301 	and.w	r3, r3, #1
 8004eda:	431a      	orrs	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	699b      	ldr	r3, [r3, #24]
 8004ee0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ee4:	431a      	orrs	r2, r3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	69db      	ldr	r3, [r3, #28]
 8004eea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004eee:	431a      	orrs	r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a1b      	ldr	r3, [r3, #32]
 8004ef4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ef8:	ea42 0103 	orr.w	r1, r2, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f00:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	430a      	orrs	r2, r1
 8004f0a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	699b      	ldr	r3, [r3, #24]
 8004f10:	0c1a      	lsrs	r2, r3, #16
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f002 0204 	and.w	r2, r2, #4
 8004f1a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	69da      	ldr	r2, [r3, #28]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f2a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2201      	movs	r2, #1
 8004f36:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004f3a:	2300      	movs	r3, #0
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3708      	adds	r7, #8
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d101      	bne.n	8004f56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e042      	b.n	8004fdc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d106      	bne.n	8004f70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f7fd f9b0 	bl	80022d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2224      	movs	r2, #36	@ 0x24
 8004f74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68da      	ldr	r2, [r3, #12]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f000 fcd5 	bl	8005938 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	691a      	ldr	r2, [r3, #16]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004f9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	695a      	ldr	r2, [r3, #20]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004fac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68da      	ldr	r2, [r3, #12]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004fbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2220      	movs	r2, #32
 8004fc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2220      	movs	r2, #32
 8004fd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004fda:	2300      	movs	r3, #0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3708      	adds	r7, #8
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	4613      	mov	r3, r2
 8004ff0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	2b20      	cmp	r3, #32
 8004ffc:	d112      	bne.n	8005024 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d002      	beq.n	800500a <HAL_UART_Receive_IT+0x26>
 8005004:	88fb      	ldrh	r3, [r7, #6]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d101      	bne.n	800500e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e00b      	b.n	8005026 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2200      	movs	r2, #0
 8005012:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005014:	88fb      	ldrh	r3, [r7, #6]
 8005016:	461a      	mov	r2, r3
 8005018:	68b9      	ldr	r1, [r7, #8]
 800501a:	68f8      	ldr	r0, [r7, #12]
 800501c:	f000 fab7 	bl	800558e <UART_Start_Receive_IT>
 8005020:	4603      	mov	r3, r0
 8005022:	e000      	b.n	8005026 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005024:	2302      	movs	r3, #2
  }
}
 8005026:	4618      	mov	r0, r3
 8005028:	3710      	adds	r7, #16
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
	...

08005030 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b0ba      	sub	sp, #232	@ 0xe8
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	695b      	ldr	r3, [r3, #20]
 8005052:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005056:	2300      	movs	r3, #0
 8005058:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800505c:	2300      	movs	r3, #0
 800505e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005066:	f003 030f 	and.w	r3, r3, #15
 800506a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800506e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005072:	2b00      	cmp	r3, #0
 8005074:	d10f      	bne.n	8005096 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800507a:	f003 0320 	and.w	r3, r3, #32
 800507e:	2b00      	cmp	r3, #0
 8005080:	d009      	beq.n	8005096 <HAL_UART_IRQHandler+0x66>
 8005082:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005086:	f003 0320 	and.w	r3, r3, #32
 800508a:	2b00      	cmp	r3, #0
 800508c:	d003      	beq.n	8005096 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 fb93 	bl	80057ba <UART_Receive_IT>
      return;
 8005094:	e25b      	b.n	800554e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005096:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800509a:	2b00      	cmp	r3, #0
 800509c:	f000 80de 	beq.w	800525c <HAL_UART_IRQHandler+0x22c>
 80050a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050a4:	f003 0301 	and.w	r3, r3, #1
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d106      	bne.n	80050ba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80050ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050b0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f000 80d1 	beq.w	800525c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80050ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050be:	f003 0301 	and.w	r3, r3, #1
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00b      	beq.n	80050de <HAL_UART_IRQHandler+0xae>
 80050c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d005      	beq.n	80050de <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050d6:	f043 0201 	orr.w	r2, r3, #1
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050e2:	f003 0304 	and.w	r3, r3, #4
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00b      	beq.n	8005102 <HAL_UART_IRQHandler+0xd2>
 80050ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050ee:	f003 0301 	and.w	r3, r3, #1
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d005      	beq.n	8005102 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050fa:	f043 0202 	orr.w	r2, r3, #2
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005106:	f003 0302 	and.w	r3, r3, #2
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00b      	beq.n	8005126 <HAL_UART_IRQHandler+0xf6>
 800510e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005112:	f003 0301 	and.w	r3, r3, #1
 8005116:	2b00      	cmp	r3, #0
 8005118:	d005      	beq.n	8005126 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800511e:	f043 0204 	orr.w	r2, r3, #4
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800512a:	f003 0308 	and.w	r3, r3, #8
 800512e:	2b00      	cmp	r3, #0
 8005130:	d011      	beq.n	8005156 <HAL_UART_IRQHandler+0x126>
 8005132:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005136:	f003 0320 	and.w	r3, r3, #32
 800513a:	2b00      	cmp	r3, #0
 800513c:	d105      	bne.n	800514a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800513e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005142:	f003 0301 	and.w	r3, r3, #1
 8005146:	2b00      	cmp	r3, #0
 8005148:	d005      	beq.n	8005156 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800514e:	f043 0208 	orr.w	r2, r3, #8
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800515a:	2b00      	cmp	r3, #0
 800515c:	f000 81f2 	beq.w	8005544 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005160:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005164:	f003 0320 	and.w	r3, r3, #32
 8005168:	2b00      	cmp	r3, #0
 800516a:	d008      	beq.n	800517e <HAL_UART_IRQHandler+0x14e>
 800516c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005170:	f003 0320 	and.w	r3, r3, #32
 8005174:	2b00      	cmp	r3, #0
 8005176:	d002      	beq.n	800517e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f000 fb1e 	bl	80057ba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	695b      	ldr	r3, [r3, #20]
 8005184:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005188:	2b00      	cmp	r3, #0
 800518a:	bf14      	ite	ne
 800518c:	2301      	movne	r3, #1
 800518e:	2300      	moveq	r3, #0
 8005190:	b2db      	uxtb	r3, r3
 8005192:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800519a:	f003 0308 	and.w	r3, r3, #8
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d103      	bne.n	80051aa <HAL_UART_IRQHandler+0x17a>
 80051a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d04f      	beq.n	800524a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 fa28 	bl	8005600 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d041      	beq.n	8005242 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	3314      	adds	r3, #20
 80051c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80051cc:	e853 3f00 	ldrex	r3, [r3]
 80051d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80051d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80051d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	3314      	adds	r3, #20
 80051e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80051ea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80051ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80051f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80051fa:	e841 2300 	strex	r3, r2, [r1]
 80051fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005202:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d1d9      	bne.n	80051be <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800520e:	2b00      	cmp	r3, #0
 8005210:	d013      	beq.n	800523a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005216:	4a7e      	ldr	r2, [pc, #504]	@ (8005410 <HAL_UART_IRQHandler+0x3e0>)
 8005218:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800521e:	4618      	mov	r0, r3
 8005220:	f7fd fe9c 	bl	8002f5c <HAL_DMA_Abort_IT>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d016      	beq.n	8005258 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800522e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005234:	4610      	mov	r0, r2
 8005236:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005238:	e00e      	b.n	8005258 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 f993 	bl	8005566 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005240:	e00a      	b.n	8005258 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 f98f 	bl	8005566 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005248:	e006      	b.n	8005258 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 f98b 	bl	8005566 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005256:	e175      	b.n	8005544 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005258:	bf00      	nop
    return;
 800525a:	e173      	b.n	8005544 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005260:	2b01      	cmp	r3, #1
 8005262:	f040 814f 	bne.w	8005504 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800526a:	f003 0310 	and.w	r3, r3, #16
 800526e:	2b00      	cmp	r3, #0
 8005270:	f000 8148 	beq.w	8005504 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005278:	f003 0310 	and.w	r3, r3, #16
 800527c:	2b00      	cmp	r3, #0
 800527e:	f000 8141 	beq.w	8005504 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005282:	2300      	movs	r3, #0
 8005284:	60bb      	str	r3, [r7, #8]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	60bb      	str	r3, [r7, #8]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	60bb      	str	r3, [r7, #8]
 8005296:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	f000 80b6 	beq.w	8005414 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80052b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	f000 8145 	beq.w	8005548 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80052c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80052c6:	429a      	cmp	r2, r3
 80052c8:	f080 813e 	bcs.w	8005548 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80052d2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052d8:	699b      	ldr	r3, [r3, #24]
 80052da:	2b20      	cmp	r3, #32
 80052dc:	f000 8088 	beq.w	80053f0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	330c      	adds	r3, #12
 80052e6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80052ee:	e853 3f00 	ldrex	r3, [r3]
 80052f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80052f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80052fa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052fe:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	330c      	adds	r3, #12
 8005308:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800530c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005310:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005314:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005318:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800531c:	e841 2300 	strex	r3, r2, [r1]
 8005320:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005324:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005328:	2b00      	cmp	r3, #0
 800532a:	d1d9      	bne.n	80052e0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	3314      	adds	r3, #20
 8005332:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005334:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005336:	e853 3f00 	ldrex	r3, [r3]
 800533a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800533c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800533e:	f023 0301 	bic.w	r3, r3, #1
 8005342:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	3314      	adds	r3, #20
 800534c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005350:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005354:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005356:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005358:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800535c:	e841 2300 	strex	r3, r2, [r1]
 8005360:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005362:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005364:	2b00      	cmp	r3, #0
 8005366:	d1e1      	bne.n	800532c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	3314      	adds	r3, #20
 800536e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005370:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005372:	e853 3f00 	ldrex	r3, [r3]
 8005376:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005378:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800537a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800537e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	3314      	adds	r3, #20
 8005388:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800538c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800538e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005390:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005392:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005394:	e841 2300 	strex	r3, r2, [r1]
 8005398:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800539a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800539c:	2b00      	cmp	r3, #0
 800539e:	d1e3      	bne.n	8005368 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2220      	movs	r2, #32
 80053a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	330c      	adds	r3, #12
 80053b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053b8:	e853 3f00 	ldrex	r3, [r3]
 80053bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80053be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053c0:	f023 0310 	bic.w	r3, r3, #16
 80053c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	330c      	adds	r3, #12
 80053ce:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80053d2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80053d4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80053d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80053da:	e841 2300 	strex	r3, r2, [r1]
 80053de:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80053e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d1e3      	bne.n	80053ae <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053ea:	4618      	mov	r0, r3
 80053ec:	f7fd fd7b 	bl	8002ee6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2202      	movs	r2, #2
 80053f4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80053fe:	b29b      	uxth	r3, r3
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	b29b      	uxth	r3, r3
 8005404:	4619      	mov	r1, r3
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 f8b6 	bl	8005578 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800540c:	e09c      	b.n	8005548 <HAL_UART_IRQHandler+0x518>
 800540e:	bf00      	nop
 8005410:	080056c5 	.word	0x080056c5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800541c:	b29b      	uxth	r3, r3
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005428:	b29b      	uxth	r3, r3
 800542a:	2b00      	cmp	r3, #0
 800542c:	f000 808e 	beq.w	800554c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005430:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005434:	2b00      	cmp	r3, #0
 8005436:	f000 8089 	beq.w	800554c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	330c      	adds	r3, #12
 8005440:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005444:	e853 3f00 	ldrex	r3, [r3]
 8005448:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800544a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800544c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005450:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	330c      	adds	r3, #12
 800545a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800545e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005460:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005462:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005464:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005466:	e841 2300 	strex	r3, r2, [r1]
 800546a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800546c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800546e:	2b00      	cmp	r3, #0
 8005470:	d1e3      	bne.n	800543a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	3314      	adds	r3, #20
 8005478:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800547c:	e853 3f00 	ldrex	r3, [r3]
 8005480:	623b      	str	r3, [r7, #32]
   return(result);
 8005482:	6a3b      	ldr	r3, [r7, #32]
 8005484:	f023 0301 	bic.w	r3, r3, #1
 8005488:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	3314      	adds	r3, #20
 8005492:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005496:	633a      	str	r2, [r7, #48]	@ 0x30
 8005498:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800549a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800549c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800549e:	e841 2300 	strex	r3, r2, [r1]
 80054a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80054a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d1e3      	bne.n	8005472 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2220      	movs	r2, #32
 80054ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	330c      	adds	r3, #12
 80054be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	e853 3f00 	ldrex	r3, [r3]
 80054c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f023 0310 	bic.w	r3, r3, #16
 80054ce:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	330c      	adds	r3, #12
 80054d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80054dc:	61fa      	str	r2, [r7, #28]
 80054de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e0:	69b9      	ldr	r1, [r7, #24]
 80054e2:	69fa      	ldr	r2, [r7, #28]
 80054e4:	e841 2300 	strex	r3, r2, [r1]
 80054e8:	617b      	str	r3, [r7, #20]
   return(result);
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d1e3      	bne.n	80054b8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2202      	movs	r2, #2
 80054f4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80054f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80054fa:	4619      	mov	r1, r3
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f000 f83b 	bl	8005578 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005502:	e023      	b.n	800554c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005504:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005508:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800550c:	2b00      	cmp	r3, #0
 800550e:	d009      	beq.n	8005524 <HAL_UART_IRQHandler+0x4f4>
 8005510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005514:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005518:	2b00      	cmp	r3, #0
 800551a:	d003      	beq.n	8005524 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f000 f8e5 	bl	80056ec <UART_Transmit_IT>
    return;
 8005522:	e014      	b.n	800554e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005528:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800552c:	2b00      	cmp	r3, #0
 800552e:	d00e      	beq.n	800554e <HAL_UART_IRQHandler+0x51e>
 8005530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005534:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005538:	2b00      	cmp	r3, #0
 800553a:	d008      	beq.n	800554e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 f924 	bl	800578a <UART_EndTransmit_IT>
    return;
 8005542:	e004      	b.n	800554e <HAL_UART_IRQHandler+0x51e>
    return;
 8005544:	bf00      	nop
 8005546:	e002      	b.n	800554e <HAL_UART_IRQHandler+0x51e>
      return;
 8005548:	bf00      	nop
 800554a:	e000      	b.n	800554e <HAL_UART_IRQHandler+0x51e>
      return;
 800554c:	bf00      	nop
  }
}
 800554e:	37e8      	adds	r7, #232	@ 0xe8
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800555c:	bf00      	nop
 800555e:	370c      	adds	r7, #12
 8005560:	46bd      	mov	sp, r7
 8005562:	bc80      	pop	{r7}
 8005564:	4770      	bx	lr

08005566 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005566:	b480      	push	{r7}
 8005568:	b083      	sub	sp, #12
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800556e:	bf00      	nop
 8005570:	370c      	adds	r7, #12
 8005572:	46bd      	mov	sp, r7
 8005574:	bc80      	pop	{r7}
 8005576:	4770      	bx	lr

08005578 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	460b      	mov	r3, r1
 8005582:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005584:	bf00      	nop
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	bc80      	pop	{r7}
 800558c:	4770      	bx	lr

0800558e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800558e:	b480      	push	{r7}
 8005590:	b085      	sub	sp, #20
 8005592:	af00      	add	r7, sp, #0
 8005594:	60f8      	str	r0, [r7, #12]
 8005596:	60b9      	str	r1, [r7, #8]
 8005598:	4613      	mov	r3, r2
 800559a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	68ba      	ldr	r2, [r7, #8]
 80055a0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	88fa      	ldrh	r2, [r7, #6]
 80055a6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	88fa      	ldrh	r2, [r7, #6]
 80055ac:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2200      	movs	r2, #0
 80055b2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2222      	movs	r2, #34	@ 0x22
 80055b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d007      	beq.n	80055d4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68da      	ldr	r2, [r3, #12]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80055d2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	695a      	ldr	r2, [r3, #20]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f042 0201 	orr.w	r2, r2, #1
 80055e2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68da      	ldr	r2, [r3, #12]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f042 0220 	orr.w	r2, r2, #32
 80055f2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3714      	adds	r7, #20
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bc80      	pop	{r7}
 80055fe:	4770      	bx	lr

08005600 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005600:	b480      	push	{r7}
 8005602:	b095      	sub	sp, #84	@ 0x54
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	330c      	adds	r3, #12
 800560e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005610:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005612:	e853 3f00 	ldrex	r3, [r3]
 8005616:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800561a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800561e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	330c      	adds	r3, #12
 8005626:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005628:	643a      	str	r2, [r7, #64]	@ 0x40
 800562a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800562e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005630:	e841 2300 	strex	r3, r2, [r1]
 8005634:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005638:	2b00      	cmp	r3, #0
 800563a:	d1e5      	bne.n	8005608 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	3314      	adds	r3, #20
 8005642:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005644:	6a3b      	ldr	r3, [r7, #32]
 8005646:	e853 3f00 	ldrex	r3, [r3]
 800564a:	61fb      	str	r3, [r7, #28]
   return(result);
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	f023 0301 	bic.w	r3, r3, #1
 8005652:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	3314      	adds	r3, #20
 800565a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800565c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800565e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005660:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005662:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005664:	e841 2300 	strex	r3, r2, [r1]
 8005668:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800566a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800566c:	2b00      	cmp	r3, #0
 800566e:	d1e5      	bne.n	800563c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005674:	2b01      	cmp	r3, #1
 8005676:	d119      	bne.n	80056ac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	330c      	adds	r3, #12
 800567e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	e853 3f00 	ldrex	r3, [r3]
 8005686:	60bb      	str	r3, [r7, #8]
   return(result);
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	f023 0310 	bic.w	r3, r3, #16
 800568e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	330c      	adds	r3, #12
 8005696:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005698:	61ba      	str	r2, [r7, #24]
 800569a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569c:	6979      	ldr	r1, [r7, #20]
 800569e:	69ba      	ldr	r2, [r7, #24]
 80056a0:	e841 2300 	strex	r3, r2, [r1]
 80056a4:	613b      	str	r3, [r7, #16]
   return(result);
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d1e5      	bne.n	8005678 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2220      	movs	r2, #32
 80056b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80056ba:	bf00      	nop
 80056bc:	3754      	adds	r7, #84	@ 0x54
 80056be:	46bd      	mov	sp, r7
 80056c0:	bc80      	pop	{r7}
 80056c2:	4770      	bx	lr

080056c4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2200      	movs	r2, #0
 80056d6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2200      	movs	r2, #0
 80056dc:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80056de:	68f8      	ldr	r0, [r7, #12]
 80056e0:	f7ff ff41 	bl	8005566 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056e4:	bf00      	nop
 80056e6:	3710      	adds	r7, #16
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b085      	sub	sp, #20
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	2b21      	cmp	r3, #33	@ 0x21
 80056fe:	d13e      	bne.n	800577e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005708:	d114      	bne.n	8005734 <UART_Transmit_IT+0x48>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d110      	bne.n	8005734 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a1b      	ldr	r3, [r3, #32]
 8005716:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	881b      	ldrh	r3, [r3, #0]
 800571c:	461a      	mov	r2, r3
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005726:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6a1b      	ldr	r3, [r3, #32]
 800572c:	1c9a      	adds	r2, r3, #2
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	621a      	str	r2, [r3, #32]
 8005732:	e008      	b.n	8005746 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6a1b      	ldr	r3, [r3, #32]
 8005738:	1c59      	adds	r1, r3, #1
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	6211      	str	r1, [r2, #32]
 800573e:	781a      	ldrb	r2, [r3, #0]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800574a:	b29b      	uxth	r3, r3
 800574c:	3b01      	subs	r3, #1
 800574e:	b29b      	uxth	r3, r3
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	4619      	mov	r1, r3
 8005754:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005756:	2b00      	cmp	r3, #0
 8005758:	d10f      	bne.n	800577a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68da      	ldr	r2, [r3, #12]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005768:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	68da      	ldr	r2, [r3, #12]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005778:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800577a:	2300      	movs	r3, #0
 800577c:	e000      	b.n	8005780 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800577e:	2302      	movs	r3, #2
  }
}
 8005780:	4618      	mov	r0, r3
 8005782:	3714      	adds	r7, #20
 8005784:	46bd      	mov	sp, r7
 8005786:	bc80      	pop	{r7}
 8005788:	4770      	bx	lr

0800578a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800578a:	b580      	push	{r7, lr}
 800578c:	b082      	sub	sp, #8
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68da      	ldr	r2, [r3, #12]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057a0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2220      	movs	r2, #32
 80057a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f7ff fed2 	bl	8005554 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3708      	adds	r7, #8
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}

080057ba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80057ba:	b580      	push	{r7, lr}
 80057bc:	b08c      	sub	sp, #48	@ 0x30
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	2b22      	cmp	r3, #34	@ 0x22
 80057cc:	f040 80ae 	bne.w	800592c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057d8:	d117      	bne.n	800580a <UART_Receive_IT+0x50>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d113      	bne.n	800580a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80057e2:	2300      	movs	r3, #0
 80057e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057ea:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057f8:	b29a      	uxth	r2, r3
 80057fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057fc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005802:	1c9a      	adds	r2, r3, #2
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	629a      	str	r2, [r3, #40]	@ 0x28
 8005808:	e026      	b.n	8005858 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800580e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005810:	2300      	movs	r3, #0
 8005812:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800581c:	d007      	beq.n	800582e <UART_Receive_IT+0x74>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d10a      	bne.n	800583c <UART_Receive_IT+0x82>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d106      	bne.n	800583c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	b2da      	uxtb	r2, r3
 8005836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005838:	701a      	strb	r2, [r3, #0]
 800583a:	e008      	b.n	800584e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	b2db      	uxtb	r3, r3
 8005844:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005848:	b2da      	uxtb	r2, r3
 800584a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800584c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005852:	1c5a      	adds	r2, r3, #1
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800585c:	b29b      	uxth	r3, r3
 800585e:	3b01      	subs	r3, #1
 8005860:	b29b      	uxth	r3, r3
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	4619      	mov	r1, r3
 8005866:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005868:	2b00      	cmp	r3, #0
 800586a:	d15d      	bne.n	8005928 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68da      	ldr	r2, [r3, #12]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f022 0220 	bic.w	r2, r2, #32
 800587a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68da      	ldr	r2, [r3, #12]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800588a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	695a      	ldr	r2, [r3, #20]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f022 0201 	bic.w	r2, r2, #1
 800589a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2220      	movs	r2, #32
 80058a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d135      	bne.n	800591e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	330c      	adds	r3, #12
 80058be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	e853 3f00 	ldrex	r3, [r3]
 80058c6:	613b      	str	r3, [r7, #16]
   return(result);
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	f023 0310 	bic.w	r3, r3, #16
 80058ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	330c      	adds	r3, #12
 80058d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058d8:	623a      	str	r2, [r7, #32]
 80058da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058dc:	69f9      	ldr	r1, [r7, #28]
 80058de:	6a3a      	ldr	r2, [r7, #32]
 80058e0:	e841 2300 	strex	r3, r2, [r1]
 80058e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d1e5      	bne.n	80058b8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 0310 	and.w	r3, r3, #16
 80058f6:	2b10      	cmp	r3, #16
 80058f8:	d10a      	bne.n	8005910 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80058fa:	2300      	movs	r3, #0
 80058fc:	60fb      	str	r3, [r7, #12]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	60fb      	str	r3, [r7, #12]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	60fb      	str	r3, [r7, #12]
 800590e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005914:	4619      	mov	r1, r3
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f7ff fe2e 	bl	8005578 <HAL_UARTEx_RxEventCallback>
 800591c:	e002      	b.n	8005924 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f7fc fb46 	bl	8001fb0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005924:	2300      	movs	r3, #0
 8005926:	e002      	b.n	800592e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005928:	2300      	movs	r3, #0
 800592a:	e000      	b.n	800592e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800592c:	2302      	movs	r3, #2
  }
}
 800592e:	4618      	mov	r0, r3
 8005930:	3730      	adds	r7, #48	@ 0x30
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
	...

08005938 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	68da      	ldr	r2, [r3, #12]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	430a      	orrs	r2, r1
 8005954:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	689a      	ldr	r2, [r3, #8]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	431a      	orrs	r2, r3
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	695b      	ldr	r3, [r3, #20]
 8005964:	4313      	orrs	r3, r2
 8005966:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005972:	f023 030c 	bic.w	r3, r3, #12
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	6812      	ldr	r2, [r2, #0]
 800597a:	68b9      	ldr	r1, [r7, #8]
 800597c:	430b      	orrs	r3, r1
 800597e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	695b      	ldr	r3, [r3, #20]
 8005986:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	699a      	ldr	r2, [r3, #24]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	430a      	orrs	r2, r1
 8005994:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a2c      	ldr	r2, [pc, #176]	@ (8005a4c <UART_SetConfig+0x114>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d103      	bne.n	80059a8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80059a0:	f7ff f964 	bl	8004c6c <HAL_RCC_GetPCLK2Freq>
 80059a4:	60f8      	str	r0, [r7, #12]
 80059a6:	e002      	b.n	80059ae <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80059a8:	f7ff f94c 	bl	8004c44 <HAL_RCC_GetPCLK1Freq>
 80059ac:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	4613      	mov	r3, r2
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	4413      	add	r3, r2
 80059b6:	009a      	lsls	r2, r3, #2
 80059b8:	441a      	add	r2, r3
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80059c4:	4a22      	ldr	r2, [pc, #136]	@ (8005a50 <UART_SetConfig+0x118>)
 80059c6:	fba2 2303 	umull	r2, r3, r2, r3
 80059ca:	095b      	lsrs	r3, r3, #5
 80059cc:	0119      	lsls	r1, r3, #4
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	4613      	mov	r3, r2
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	4413      	add	r3, r2
 80059d6:	009a      	lsls	r2, r3, #2
 80059d8:	441a      	add	r2, r3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80059e4:	4b1a      	ldr	r3, [pc, #104]	@ (8005a50 <UART_SetConfig+0x118>)
 80059e6:	fba3 0302 	umull	r0, r3, r3, r2
 80059ea:	095b      	lsrs	r3, r3, #5
 80059ec:	2064      	movs	r0, #100	@ 0x64
 80059ee:	fb00 f303 	mul.w	r3, r0, r3
 80059f2:	1ad3      	subs	r3, r2, r3
 80059f4:	011b      	lsls	r3, r3, #4
 80059f6:	3332      	adds	r3, #50	@ 0x32
 80059f8:	4a15      	ldr	r2, [pc, #84]	@ (8005a50 <UART_SetConfig+0x118>)
 80059fa:	fba2 2303 	umull	r2, r3, r2, r3
 80059fe:	095b      	lsrs	r3, r3, #5
 8005a00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a04:	4419      	add	r1, r3
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	4613      	mov	r3, r2
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	4413      	add	r3, r2
 8005a0e:	009a      	lsls	r2, r3, #2
 8005a10:	441a      	add	r2, r3
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8005a50 <UART_SetConfig+0x118>)
 8005a1e:	fba3 0302 	umull	r0, r3, r3, r2
 8005a22:	095b      	lsrs	r3, r3, #5
 8005a24:	2064      	movs	r0, #100	@ 0x64
 8005a26:	fb00 f303 	mul.w	r3, r0, r3
 8005a2a:	1ad3      	subs	r3, r2, r3
 8005a2c:	011b      	lsls	r3, r3, #4
 8005a2e:	3332      	adds	r3, #50	@ 0x32
 8005a30:	4a07      	ldr	r2, [pc, #28]	@ (8005a50 <UART_SetConfig+0x118>)
 8005a32:	fba2 2303 	umull	r2, r3, r2, r3
 8005a36:	095b      	lsrs	r3, r3, #5
 8005a38:	f003 020f 	and.w	r2, r3, #15
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	440a      	add	r2, r1
 8005a42:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005a44:	bf00      	nop
 8005a46:	3710      	adds	r7, #16
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	40013800 	.word	0x40013800
 8005a50:	51eb851f 	.word	0x51eb851f

08005a54 <memset>:
 8005a54:	4603      	mov	r3, r0
 8005a56:	4402      	add	r2, r0
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d100      	bne.n	8005a5e <memset+0xa>
 8005a5c:	4770      	bx	lr
 8005a5e:	f803 1b01 	strb.w	r1, [r3], #1
 8005a62:	e7f9      	b.n	8005a58 <memset+0x4>

08005a64 <__libc_init_array>:
 8005a64:	b570      	push	{r4, r5, r6, lr}
 8005a66:	2600      	movs	r6, #0
 8005a68:	4d0c      	ldr	r5, [pc, #48]	@ (8005a9c <__libc_init_array+0x38>)
 8005a6a:	4c0d      	ldr	r4, [pc, #52]	@ (8005aa0 <__libc_init_array+0x3c>)
 8005a6c:	1b64      	subs	r4, r4, r5
 8005a6e:	10a4      	asrs	r4, r4, #2
 8005a70:	42a6      	cmp	r6, r4
 8005a72:	d109      	bne.n	8005a88 <__libc_init_array+0x24>
 8005a74:	f000 f81a 	bl	8005aac <_init>
 8005a78:	2600      	movs	r6, #0
 8005a7a:	4d0a      	ldr	r5, [pc, #40]	@ (8005aa4 <__libc_init_array+0x40>)
 8005a7c:	4c0a      	ldr	r4, [pc, #40]	@ (8005aa8 <__libc_init_array+0x44>)
 8005a7e:	1b64      	subs	r4, r4, r5
 8005a80:	10a4      	asrs	r4, r4, #2
 8005a82:	42a6      	cmp	r6, r4
 8005a84:	d105      	bne.n	8005a92 <__libc_init_array+0x2e>
 8005a86:	bd70      	pop	{r4, r5, r6, pc}
 8005a88:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a8c:	4798      	blx	r3
 8005a8e:	3601      	adds	r6, #1
 8005a90:	e7ee      	b.n	8005a70 <__libc_init_array+0xc>
 8005a92:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a96:	4798      	blx	r3
 8005a98:	3601      	adds	r6, #1
 8005a9a:	e7f2      	b.n	8005a82 <__libc_init_array+0x1e>
 8005a9c:	08005b00 	.word	0x08005b00
 8005aa0:	08005b00 	.word	0x08005b00
 8005aa4:	08005b00 	.word	0x08005b00
 8005aa8:	08005b04 	.word	0x08005b04

08005aac <_init>:
 8005aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aae:	bf00      	nop
 8005ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ab2:	bc08      	pop	{r3}
 8005ab4:	469e      	mov	lr, r3
 8005ab6:	4770      	bx	lr

08005ab8 <_fini>:
 8005ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aba:	bf00      	nop
 8005abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005abe:	bc08      	pop	{r3}
 8005ac0:	469e      	mov	lr, r3
 8005ac2:	4770      	bx	lr
