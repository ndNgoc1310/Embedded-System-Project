
3. Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc50  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003ec8  0800bd5c  0800bd5c  0000cd5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fc24  0800fc24  000112e8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800fc24  0800fc24  000112e8  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800fc24  0800fc24  000112e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fc24  0800fc24  00010c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800fc28  0800fc28  00010c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002e8  20000000  0800fc2c  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d4  200002e8  0800ff14  000112e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006bc  0800ff14  000116bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000112e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000131c1  00000000  00000000  00011311  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037fd  00000000  00000000  000244d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001198  00000000  00000000  00027cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d57  00000000  00000000  00028e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ab7c  00000000  00000000  00029bbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a32f  00000000  00000000  0004473b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fae2  00000000  00000000  0005ea6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ee54c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004da8  00000000  00000000  000ee590  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000093  00000000  00000000  000f3338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200002e8 	.word	0x200002e8
 8000128:	00000000 	.word	0x00000000
 800012c:	0800bd44 	.word	0x0800bd44

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200002ec 	.word	0x200002ec
 8000148:	0800bd44 	.word	0x0800bd44

0800014c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000152:	1d3b      	adds	r3, r7, #4
 8000154:	2200      	movs	r2, #0
 8000156:	601a      	str	r2, [r3, #0]
 8000158:	605a      	str	r2, [r3, #4]
 800015a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800015c:	4b18      	ldr	r3, [pc, #96]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800015e:	4a19      	ldr	r2, [pc, #100]	@ (80001c4 <MX_ADC1_Init+0x78>)
 8000160:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000162:	4b17      	ldr	r3, [pc, #92]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000164:	2200      	movs	r2, #0
 8000166:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000168:	4b15      	ldr	r3, [pc, #84]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800016a:	2200      	movs	r2, #0
 800016c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800016e:	4b14      	ldr	r3, [pc, #80]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000170:	2200      	movs	r2, #0
 8000172:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000174:	4b12      	ldr	r3, [pc, #72]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000176:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800017a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800017c:	4b10      	ldr	r3, [pc, #64]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800017e:	2200      	movs	r2, #0
 8000180:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000182:	4b0f      	ldr	r3, [pc, #60]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000184:	2201      	movs	r2, #1
 8000186:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000188:	480d      	ldr	r0, [pc, #52]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800018a:	f002 fc53 	bl	8002a34 <HAL_ADC_Init>
 800018e:	4603      	mov	r3, r0
 8000190:	2b00      	cmp	r3, #0
 8000192:	d001      	beq.n	8000198 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000194:	f002 f972 	bl	800247c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000198:	2304      	movs	r3, #4
 800019a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800019c:	2301      	movs	r3, #1
 800019e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001a0:	2300      	movs	r3, #0
 80001a2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	4619      	mov	r1, r3
 80001a8:	4805      	ldr	r0, [pc, #20]	@ (80001c0 <MX_ADC1_Init+0x74>)
 80001aa:	f002 fea5 	bl	8002ef8 <HAL_ADC_ConfigChannel>
 80001ae:	4603      	mov	r3, r0
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d001      	beq.n	80001b8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80001b4:	f002 f962 	bl	800247c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80001b8:	bf00      	nop
 80001ba:	3710      	adds	r7, #16
 80001bc:	46bd      	mov	sp, r7
 80001be:	bd80      	pop	{r7, pc}
 80001c0:	20000304 	.word	0x20000304
 80001c4:	40012400 	.word	0x40012400

080001c8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b088      	sub	sp, #32
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001d0:	f107 0310 	add.w	r3, r7, #16
 80001d4:	2200      	movs	r2, #0
 80001d6:	601a      	str	r2, [r3, #0]
 80001d8:	605a      	str	r2, [r3, #4]
 80001da:	609a      	str	r2, [r3, #8]
 80001dc:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	4a18      	ldr	r2, [pc, #96]	@ (8000244 <HAL_ADC_MspInit+0x7c>)
 80001e4:	4293      	cmp	r3, r2
 80001e6:	d129      	bne.n	800023c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80001e8:	4b17      	ldr	r3, [pc, #92]	@ (8000248 <HAL_ADC_MspInit+0x80>)
 80001ea:	699b      	ldr	r3, [r3, #24]
 80001ec:	4a16      	ldr	r2, [pc, #88]	@ (8000248 <HAL_ADC_MspInit+0x80>)
 80001ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80001f2:	6193      	str	r3, [r2, #24]
 80001f4:	4b14      	ldr	r3, [pc, #80]	@ (8000248 <HAL_ADC_MspInit+0x80>)
 80001f6:	699b      	ldr	r3, [r3, #24]
 80001f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80001fc:	60fb      	str	r3, [r7, #12]
 80001fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000200:	4b11      	ldr	r3, [pc, #68]	@ (8000248 <HAL_ADC_MspInit+0x80>)
 8000202:	699b      	ldr	r3, [r3, #24]
 8000204:	4a10      	ldr	r2, [pc, #64]	@ (8000248 <HAL_ADC_MspInit+0x80>)
 8000206:	f043 0304 	orr.w	r3, r3, #4
 800020a:	6193      	str	r3, [r2, #24]
 800020c:	4b0e      	ldr	r3, [pc, #56]	@ (8000248 <HAL_ADC_MspInit+0x80>)
 800020e:	699b      	ldr	r3, [r3, #24]
 8000210:	f003 0304 	and.w	r3, r3, #4
 8000214:	60bb      	str	r3, [r7, #8]
 8000216:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000218:	2310      	movs	r3, #16
 800021a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800021c:	2303      	movs	r3, #3
 800021e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000220:	f107 0310 	add.w	r3, r7, #16
 8000224:	4619      	mov	r1, r3
 8000226:	4809      	ldr	r0, [pc, #36]	@ (800024c <HAL_ADC_MspInit+0x84>)
 8000228:	f003 f9c2 	bl	80035b0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800022c:	2200      	movs	r2, #0
 800022e:	2100      	movs	r1, #0
 8000230:	2012      	movs	r0, #18
 8000232:	f003 f8d4 	bl	80033de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000236:	2012      	movs	r0, #18
 8000238:	f003 f8ed 	bl	8003416 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800023c:	bf00      	nop
 800023e:	3720      	adds	r7, #32
 8000240:	46bd      	mov	sp, r7
 8000242:	bd80      	pop	{r7, pc}
 8000244:	40012400 	.word	0x40012400
 8000248:	40021000 	.word	0x40021000
 800024c:	40010800 	.word	0x40010800

08000250 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b088      	sub	sp, #32
 8000254:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000256:	f107 0310 	add.w	r3, r7, #16
 800025a:	2200      	movs	r2, #0
 800025c:	601a      	str	r2, [r3, #0]
 800025e:	605a      	str	r2, [r3, #4]
 8000260:	609a      	str	r2, [r3, #8]
 8000262:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000264:	4b58      	ldr	r3, [pc, #352]	@ (80003c8 <MX_GPIO_Init+0x178>)
 8000266:	699b      	ldr	r3, [r3, #24]
 8000268:	4a57      	ldr	r2, [pc, #348]	@ (80003c8 <MX_GPIO_Init+0x178>)
 800026a:	f043 0310 	orr.w	r3, r3, #16
 800026e:	6193      	str	r3, [r2, #24]
 8000270:	4b55      	ldr	r3, [pc, #340]	@ (80003c8 <MX_GPIO_Init+0x178>)
 8000272:	699b      	ldr	r3, [r3, #24]
 8000274:	f003 0310 	and.w	r3, r3, #16
 8000278:	60fb      	str	r3, [r7, #12]
 800027a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800027c:	4b52      	ldr	r3, [pc, #328]	@ (80003c8 <MX_GPIO_Init+0x178>)
 800027e:	699b      	ldr	r3, [r3, #24]
 8000280:	4a51      	ldr	r2, [pc, #324]	@ (80003c8 <MX_GPIO_Init+0x178>)
 8000282:	f043 0320 	orr.w	r3, r3, #32
 8000286:	6193      	str	r3, [r2, #24]
 8000288:	4b4f      	ldr	r3, [pc, #316]	@ (80003c8 <MX_GPIO_Init+0x178>)
 800028a:	699b      	ldr	r3, [r3, #24]
 800028c:	f003 0320 	and.w	r3, r3, #32
 8000290:	60bb      	str	r3, [r7, #8]
 8000292:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000294:	4b4c      	ldr	r3, [pc, #304]	@ (80003c8 <MX_GPIO_Init+0x178>)
 8000296:	699b      	ldr	r3, [r3, #24]
 8000298:	4a4b      	ldr	r2, [pc, #300]	@ (80003c8 <MX_GPIO_Init+0x178>)
 800029a:	f043 0304 	orr.w	r3, r3, #4
 800029e:	6193      	str	r3, [r2, #24]
 80002a0:	4b49      	ldr	r3, [pc, #292]	@ (80003c8 <MX_GPIO_Init+0x178>)
 80002a2:	699b      	ldr	r3, [r3, #24]
 80002a4:	f003 0304 	and.w	r3, r3, #4
 80002a8:	607b      	str	r3, [r7, #4]
 80002aa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002ac:	4b46      	ldr	r3, [pc, #280]	@ (80003c8 <MX_GPIO_Init+0x178>)
 80002ae:	699b      	ldr	r3, [r3, #24]
 80002b0:	4a45      	ldr	r2, [pc, #276]	@ (80003c8 <MX_GPIO_Init+0x178>)
 80002b2:	f043 0308 	orr.w	r3, r3, #8
 80002b6:	6193      	str	r3, [r2, #24]
 80002b8:	4b43      	ldr	r3, [pc, #268]	@ (80003c8 <MX_GPIO_Init+0x178>)
 80002ba:	699b      	ldr	r3, [r3, #24]
 80002bc:	f003 0308 	and.w	r3, r3, #8
 80002c0:	603b      	str	r3, [r7, #0]
 80002c2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80002c4:	2200      	movs	r2, #0
 80002c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80002ca:	4840      	ldr	r0, [pc, #256]	@ (80003cc <MX_GPIO_Init+0x17c>)
 80002cc:	f003 fb0b 	bl	80038e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_Pin|DC_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 80002d0:	2200      	movs	r2, #0
 80002d2:	210e      	movs	r1, #14
 80002d4:	483e      	ldr	r0, [pc, #248]	@ (80003d0 <MX_GPIO_Init+0x180>)
 80002d6:	f003 fb06 	bl	80038e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BUZZER_Pin|PWR_Pin, GPIO_PIN_RESET);
 80002da:	2200      	movs	r2, #0
 80002dc:	2103      	movs	r1, #3
 80002de:	483d      	ldr	r0, [pc, #244]	@ (80003d4 <MX_GPIO_Init+0x184>)
 80002e0:	f003 fb01 	bl	80038e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80002e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80002e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002ea:	2301      	movs	r3, #1
 80002ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ee:	2300      	movs	r3, #0
 80002f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002f2:	2302      	movs	r3, #2
 80002f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002f6:	f107 0310 	add.w	r3, r7, #16
 80002fa:	4619      	mov	r1, r3
 80002fc:	4833      	ldr	r0, [pc, #204]	@ (80003cc <MX_GPIO_Init+0x17c>)
 80002fe:	f003 f957 	bl	80035b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUSY_Pin PA6 */
  GPIO_InitStruct.Pin = BUSY_Pin|GPIO_PIN_6;
 8000302:	2341      	movs	r3, #65	@ 0x41
 8000304:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000306:	2300      	movs	r3, #0
 8000308:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800030a:	2300      	movs	r3, #0
 800030c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800030e:	f107 0310 	add.w	r3, r7, #16
 8000312:	4619      	mov	r1, r3
 8000314:	482e      	ldr	r0, [pc, #184]	@ (80003d0 <MX_GPIO_Init+0x180>)
 8000316:	f003 f94b 	bl	80035b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RST_Pin DC_Pin SPI_CS_Pin */
  GPIO_InitStruct.Pin = RST_Pin|DC_Pin|SPI_CS_Pin;
 800031a:	230e      	movs	r3, #14
 800031c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800031e:	2301      	movs	r3, #1
 8000320:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000322:	2300      	movs	r3, #0
 8000324:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000326:	2302      	movs	r3, #2
 8000328:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800032a:	f107 0310 	add.w	r3, r7, #16
 800032e:	4619      	mov	r1, r3
 8000330:	4827      	ldr	r0, [pc, #156]	@ (80003d0 <MX_GPIO_Init+0x180>)
 8000332:	f003 f93d 	bl	80035b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZER_Pin PWR_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin|PWR_Pin;
 8000336:	2303      	movs	r3, #3
 8000338:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800033a:	2301      	movs	r3, #1
 800033c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800033e:	2300      	movs	r3, #0
 8000340:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000342:	2302      	movs	r3, #2
 8000344:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000346:	f107 0310 	add.w	r3, r7, #16
 800034a:	4619      	mov	r1, r3
 800034c:	4821      	ldr	r0, [pc, #132]	@ (80003d4 <MX_GPIO_Init+0x184>)
 800034e:	f003 f92f 	bl	80035b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON0_IN12_Pin BUTTON1_IN13_Pin BUTTON2_IN14_Pin BUTTON3_IN15_Pin */
  GPIO_InitStruct.Pin = BUTTON0_IN12_Pin|BUTTON1_IN13_Pin|BUTTON2_IN14_Pin|BUTTON3_IN15_Pin;
 8000352:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000356:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000358:	4b1f      	ldr	r3, [pc, #124]	@ (80003d8 <MX_GPIO_Init+0x188>)
 800035a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800035c:	2302      	movs	r3, #2
 800035e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000360:	f107 0310 	add.w	r3, r7, #16
 8000364:	4619      	mov	r1, r3
 8000366:	481b      	ldr	r0, [pc, #108]	@ (80003d4 <MX_GPIO_Init+0x184>)
 8000368:	f003 f922 	bl	80035b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON4_IN8_Pin */
  GPIO_InitStruct.Pin = BUTTON4_IN8_Pin;
 800036c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000370:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000372:	4b19      	ldr	r3, [pc, #100]	@ (80003d8 <MX_GPIO_Init+0x188>)
 8000374:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000376:	2302      	movs	r3, #2
 8000378:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON4_IN8_GPIO_Port, &GPIO_InitStruct);
 800037a:	f107 0310 	add.w	r3, r7, #16
 800037e:	4619      	mov	r1, r3
 8000380:	4813      	ldr	r0, [pc, #76]	@ (80003d0 <MX_GPIO_Init+0x180>)
 8000382:	f003 f915 	bl	80035b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RTC_IN5_Pin */
  GPIO_InitStruct.Pin = RTC_IN5_Pin;
 8000386:	2320      	movs	r3, #32
 8000388:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800038a:	4b13      	ldr	r3, [pc, #76]	@ (80003d8 <MX_GPIO_Init+0x188>)
 800038c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800038e:	2300      	movs	r3, #0
 8000390:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RTC_IN5_GPIO_Port, &GPIO_InitStruct);
 8000392:	f107 0310 	add.w	r3, r7, #16
 8000396:	4619      	mov	r1, r3
 8000398:	480e      	ldr	r0, [pc, #56]	@ (80003d4 <MX_GPIO_Init+0x184>)
 800039a:	f003 f909 	bl	80035b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800039e:	2200      	movs	r2, #0
 80003a0:	2100      	movs	r1, #0
 80003a2:	2017      	movs	r0, #23
 80003a4:	f003 f81b 	bl	80033de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80003a8:	2017      	movs	r0, #23
 80003aa:	f003 f834 	bl	8003416 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80003ae:	2200      	movs	r2, #0
 80003b0:	2100      	movs	r1, #0
 80003b2:	2028      	movs	r0, #40	@ 0x28
 80003b4:	f003 f813 	bl	80033de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003b8:	2028      	movs	r0, #40	@ 0x28
 80003ba:	f003 f82c 	bl	8003416 <HAL_NVIC_EnableIRQ>

}
 80003be:	bf00      	nop
 80003c0:	3720      	adds	r7, #32
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	40021000 	.word	0x40021000
 80003cc:	40011000 	.word	0x40011000
 80003d0:	40010800 	.word	0x40010800
 80003d4:	40010c00 	.word	0x40010c00
 80003d8:	10210000 	.word	0x10210000

080003dc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003e0:	4b12      	ldr	r3, [pc, #72]	@ (800042c <MX_I2C1_Init+0x50>)
 80003e2:	4a13      	ldr	r2, [pc, #76]	@ (8000430 <MX_I2C1_Init+0x54>)
 80003e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80003e6:	4b11      	ldr	r3, [pc, #68]	@ (800042c <MX_I2C1_Init+0x50>)
 80003e8:	4a12      	ldr	r2, [pc, #72]	@ (8000434 <MX_I2C1_Init+0x58>)
 80003ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003ec:	4b0f      	ldr	r3, [pc, #60]	@ (800042c <MX_I2C1_Init+0x50>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80003f2:	4b0e      	ldr	r3, [pc, #56]	@ (800042c <MX_I2C1_Init+0x50>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003f8:	4b0c      	ldr	r3, [pc, #48]	@ (800042c <MX_I2C1_Init+0x50>)
 80003fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80003fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000400:	4b0a      	ldr	r3, [pc, #40]	@ (800042c <MX_I2C1_Init+0x50>)
 8000402:	2200      	movs	r2, #0
 8000404:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000406:	4b09      	ldr	r3, [pc, #36]	@ (800042c <MX_I2C1_Init+0x50>)
 8000408:	2200      	movs	r2, #0
 800040a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800040c:	4b07      	ldr	r3, [pc, #28]	@ (800042c <MX_I2C1_Init+0x50>)
 800040e:	2200      	movs	r2, #0
 8000410:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000412:	4b06      	ldr	r3, [pc, #24]	@ (800042c <MX_I2C1_Init+0x50>)
 8000414:	2200      	movs	r2, #0
 8000416:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000418:	4804      	ldr	r0, [pc, #16]	@ (800042c <MX_I2C1_Init+0x50>)
 800041a:	f003 faad 	bl	8003978 <HAL_I2C_Init>
 800041e:	4603      	mov	r3, r0
 8000420:	2b00      	cmp	r3, #0
 8000422:	d001      	beq.n	8000428 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000424:	f002 f82a 	bl	800247c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000428:	bf00      	nop
 800042a:	bd80      	pop	{r7, pc}
 800042c:	20000334 	.word	0x20000334
 8000430:	40005400 	.word	0x40005400
 8000434:	000186a0 	.word	0x000186a0

08000438 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b088      	sub	sp, #32
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000440:	f107 0310 	add.w	r3, r7, #16
 8000444:	2200      	movs	r2, #0
 8000446:	601a      	str	r2, [r3, #0]
 8000448:	605a      	str	r2, [r3, #4]
 800044a:	609a      	str	r2, [r3, #8]
 800044c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	4a15      	ldr	r2, [pc, #84]	@ (80004a8 <HAL_I2C_MspInit+0x70>)
 8000454:	4293      	cmp	r3, r2
 8000456:	d123      	bne.n	80004a0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000458:	4b14      	ldr	r3, [pc, #80]	@ (80004ac <HAL_I2C_MspInit+0x74>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	4a13      	ldr	r2, [pc, #76]	@ (80004ac <HAL_I2C_MspInit+0x74>)
 800045e:	f043 0308 	orr.w	r3, r3, #8
 8000462:	6193      	str	r3, [r2, #24]
 8000464:	4b11      	ldr	r3, [pc, #68]	@ (80004ac <HAL_I2C_MspInit+0x74>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	f003 0308 	and.w	r3, r3, #8
 800046c:	60fb      	str	r3, [r7, #12]
 800046e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000470:	23c0      	movs	r3, #192	@ 0xc0
 8000472:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000474:	2312      	movs	r3, #18
 8000476:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000478:	2303      	movs	r3, #3
 800047a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800047c:	f107 0310 	add.w	r3, r7, #16
 8000480:	4619      	mov	r1, r3
 8000482:	480b      	ldr	r0, [pc, #44]	@ (80004b0 <HAL_I2C_MspInit+0x78>)
 8000484:	f003 f894 	bl	80035b0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000488:	4b08      	ldr	r3, [pc, #32]	@ (80004ac <HAL_I2C_MspInit+0x74>)
 800048a:	69db      	ldr	r3, [r3, #28]
 800048c:	4a07      	ldr	r2, [pc, #28]	@ (80004ac <HAL_I2C_MspInit+0x74>)
 800048e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000492:	61d3      	str	r3, [r2, #28]
 8000494:	4b05      	ldr	r3, [pc, #20]	@ (80004ac <HAL_I2C_MspInit+0x74>)
 8000496:	69db      	ldr	r3, [r3, #28]
 8000498:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800049c:	60bb      	str	r3, [r7, #8]
 800049e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80004a0:	bf00      	nop
 80004a2:	3720      	adds	r7, #32
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	40005400 	.word	0x40005400
 80004ac:	40021000 	.word	0x40021000
 80004b0:	40010c00 	.word	0x40010c00

080004b4 <toggle_alarm_buzzer.0>:

  // Initialize the ADC module to monitor battery voltage
  //    HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc);
  HAL_ADC_Start_IT(&hadc1);
  void toggle_alarm_buzzer()
  {
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	f8c7 c004 	str.w	ip, [r7, #4]
	  HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 80004be:	2101      	movs	r1, #1
 80004c0:	4803      	ldr	r0, [pc, #12]	@ (80004d0 <toggle_alarm_buzzer.0+0x1c>)
 80004c2:	f003 fa28 	bl	8003916 <HAL_GPIO_TogglePin>
  }
 80004c6:	bf00      	nop
 80004c8:	3708      	adds	r7, #8
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	40010c00 	.word	0x40010c00

080004d4 <main>:
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b086      	sub	sp, #24
 80004d8:	af02      	add	r7, sp, #8
int main(void)
 80004da:	f107 0318 	add.w	r3, r7, #24
 80004de:	603b      	str	r3, [r7, #0]
  HAL_Init();
 80004e0:	f002 fa22 	bl	8002928 <HAL_Init>
  SystemClock_Config();
 80004e4:	f000 fa1a 	bl	800091c <SystemClock_Config>
  MX_GPIO_Init();
 80004e8:	f7ff feb2 	bl	8000250 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004ec:	f7ff ff76 	bl	80003dc <MX_I2C1_Init>
  MX_ADC1_Init();
 80004f0:	f7ff fe2c 	bl	800014c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80004f4:	f002 f974 	bl	80027e0 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80004f8:	f001 ffc6 	bl	8002488 <MX_SPI1_Init>
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, BUZZER_INACTIVE); 
 80004fc:	2200      	movs	r2, #0
 80004fe:	2101      	movs	r1, #1
 8000500:	4880      	ldr	r0, [pc, #512]	@ (8000704 <main+0x230>)
 8000502:	f003 f9f0 	bl	80038e6 <HAL_GPIO_WritePin>
  Time_Ctrl 
 8000506:	2300      	movs	r3, #0
 8000508:	9301      	str	r3, [sp, #4]
 800050a:	2300      	movs	r3, #0
 800050c:	9300      	str	r3, [sp, #0]
 800050e:	2300      	movs	r3, #0
 8000510:	2200      	movs	r2, #0
 8000512:	2100      	movs	r1, #0
 8000514:	2000      	movs	r0, #0
 8000516:	f000 fb41 	bl	8000b9c <Time_Ctrl>
  Time_Get(&time_get_data);
 800051a:	487b      	ldr	r0, [pc, #492]	@ (8000708 <main+0x234>)
 800051c:	f000 faea 	bl	8000af4 <Time_Get>
  Alarm_Slot_Pointer_Get();
 8000520:	f000 fd18 	bl	8000f54 <Alarm_Slot_Pointer_Get>
  for (int i = 0; i < alarm_slot_ptr; i++)
 8000524:	2300      	movs	r3, #0
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	e00e      	b.n	8000548 <main+0x74>
    Alarm_Get(i, &alarm_get_data[i]);
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	b2d8      	uxtb	r0, r3
 800052e:	68fa      	ldr	r2, [r7, #12]
 8000530:	4613      	mov	r3, r2
 8000532:	005b      	lsls	r3, r3, #1
 8000534:	4413      	add	r3, r2
 8000536:	005b      	lsls	r3, r3, #1
 8000538:	4a74      	ldr	r2, [pc, #464]	@ (800070c <main+0x238>)
 800053a:	4413      	add	r3, r2
 800053c:	4619      	mov	r1, r3
 800053e:	f000 fc77 	bl	8000e30 <Alarm_Get>
  for (int i = 0; i < alarm_slot_ptr; i++)
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	3301      	adds	r3, #1
 8000546:	60fb      	str	r3, [r7, #12]
 8000548:	4b71      	ldr	r3, [pc, #452]	@ (8000710 <main+0x23c>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	461a      	mov	r2, r3
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	4293      	cmp	r3, r2
 8000552:	dbea      	blt.n	800052a <main+0x56>
  HAL_UART_Receive_IT(&huart1, uart_rx_data, 7);
 8000554:	2207      	movs	r2, #7
 8000556:	496f      	ldr	r1, [pc, #444]	@ (8000714 <main+0x240>)
 8000558:	486f      	ldr	r0, [pc, #444]	@ (8000718 <main+0x244>)
 800055a:	f005 fa3f 	bl	80059dc <HAL_UART_Receive_IT>
  HAL_ADC_Start_IT(&hadc1);
 800055e:	486f      	ldr	r0, [pc, #444]	@ (800071c <main+0x248>)
 8000560:	f002 fb40 	bl	8002be4 <HAL_ADC_Start_IT>
    // while ((button0.int_flag || button1.int_flag || button2.int_flag || button3.int_flag || button4.int_flag)
    // ||     (button0.state == BUTTON_PRESSED || button1.state == BUTTON_PRESSED || button2.state == BUTTON_PRESSED || button3.state == BUTTON_PRESSED || button4.state == BUTTON_PRESSED)
    // ||     (button0.state == BUTTON_WAITING || button1.state == BUTTON_WAITING || button2.state == BUTTON_WAITING || button3.state == BUTTON_WAITING || button4.state == BUTTON_WAITING)
    // ||     ((button0.state == BUTTON_RELEASED || button1.state == BUTTON_RELEASED || button2.state == BUTTON_RELEASED || button3.state == BUTTON_RELEASED || button4.state == BUTTON_RELEASED)
    // &&     (button0.int_flag || button1.int_flag || button2.int_flag || button3.int_flag || button4.int_flag)))
    while ((button0.int_flag || button1.int_flag || button2.int_flag || button3.int_flag || button4.int_flag))
 8000564:	e001      	b.n	800056a <main+0x96>
    {
      Button_Handle();
 8000566:	f000 fe09 	bl	800117c <Button_Handle>
    while ((button0.int_flag || button1.int_flag || button2.int_flag || button3.int_flag || button4.int_flag))
 800056a:	4b6d      	ldr	r3, [pc, #436]	@ (8000720 <main+0x24c>)
 800056c:	7b1b      	ldrb	r3, [r3, #12]
 800056e:	b2db      	uxtb	r3, r3
 8000570:	2b00      	cmp	r3, #0
 8000572:	d1f8      	bne.n	8000566 <main+0x92>
 8000574:	4b6b      	ldr	r3, [pc, #428]	@ (8000724 <main+0x250>)
 8000576:	7b1b      	ldrb	r3, [r3, #12]
 8000578:	b2db      	uxtb	r3, r3
 800057a:	2b00      	cmp	r3, #0
 800057c:	d1f3      	bne.n	8000566 <main+0x92>
 800057e:	4b6a      	ldr	r3, [pc, #424]	@ (8000728 <main+0x254>)
 8000580:	7b1b      	ldrb	r3, [r3, #12]
 8000582:	b2db      	uxtb	r3, r3
 8000584:	2b00      	cmp	r3, #0
 8000586:	d1ee      	bne.n	8000566 <main+0x92>
 8000588:	4b68      	ldr	r3, [pc, #416]	@ (800072c <main+0x258>)
 800058a:	7b1b      	ldrb	r3, [r3, #12]
 800058c:	b2db      	uxtb	r3, r3
 800058e:	2b00      	cmp	r3, #0
 8000590:	d1e9      	bne.n	8000566 <main+0x92>
 8000592:	4b67      	ldr	r3, [pc, #412]	@ (8000730 <main+0x25c>)
 8000594:	7b1b      	ldrb	r3, [r3, #12]
 8000596:	b2db      	uxtb	r3, r3
 8000598:	2b00      	cmp	r3, #0
 800059a:	d1e4      	bne.n	8000566 <main+0x92>
    }
    // TIME_DATA time_get;
    

    // Check if the RTC Interrupt Flag is set (RTC Interrupt Flag) on PB4 (Activated every second)
    if (rtc_int_flag)
 800059c:	4b65      	ldr	r3, [pc, #404]	@ (8000734 <main+0x260>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	f000 80fb 	beq.w	800079e <main+0x2ca>
    {

      // Retrieve the time values from the RTC module
      Time_Get(&time_get_data);
 80005a8:	4857      	ldr	r0, [pc, #348]	@ (8000708 <main+0x234>)
 80005aa:	f000 faa3 	bl	8000af4 <Time_Get>
      Update_alarm_data();
 80005ae:	f001 fd81 	bl	80020b4 <Update_alarm_data>

      // Check the alarms
      //   void Alarm_Check (volatile TIME_DATA *time_get_data)
      Alarm_Check(&time_get_data);
 80005b2:	4855      	ldr	r0, [pc, #340]	@ (8000708 <main+0x234>)
 80005b4:	f000 fce8 	bl	8000f88 <Alarm_Check>

      // Reset the RTC Interrupt Flag
      rtc_int_flag = false;
 80005b8:	4b5e      	ldr	r3, [pc, #376]	@ (8000734 <main+0x260>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	701a      	strb	r2, [r3, #0]

      // Toggle the debug RTC interrupt flag for debugging purposes
      debug_rtc_int = !debug_rtc_int;
 80005be:	4b5e      	ldr	r3, [pc, #376]	@ (8000738 <main+0x264>)
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	bf14      	ite	ne
 80005c8:	2301      	movne	r3, #1
 80005ca:	2300      	moveq	r3, #0
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	f083 0301 	eor.w	r3, r3, #1
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	f003 0301 	and.w	r3, r3, #1
 80005d8:	b2da      	uxtb	r2, r3
 80005da:	4b57      	ldr	r3, [pc, #348]	@ (8000738 <main+0x264>)
 80005dc:	701a      	strb	r2, [r3, #0]

      if(system_state.mode == DEFAULT_MODE)
 80005de:	4b57      	ldr	r3, [pc, #348]	@ (800073c <main+0x268>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d106      	bne.n	80005f4 <main+0x120>
      {   
        default_mode(&flag_sSystem_mode, &time_get_data, battery_percentage);
 80005e6:	4b56      	ldr	r3, [pc, #344]	@ (8000740 <main+0x26c>)
 80005e8:	881b      	ldrh	r3, [r3, #0]
 80005ea:	461a      	mov	r2, r3
 80005ec:	4946      	ldr	r1, [pc, #280]	@ (8000708 <main+0x234>)
 80005ee:	4855      	ldr	r0, [pc, #340]	@ (8000744 <main+0x270>)
 80005f0:	f006 fa02 	bl	80069f8 <default_mode>
      }

      if ((button0.press_flag || button1.press_flag|| button2.press_flag || button3.press_flag || button4.press_flag))
 80005f4:	4b4a      	ldr	r3, [pc, #296]	@ (8000720 <main+0x24c>)
 80005f6:	7b5b      	ldrb	r3, [r3, #13]
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d114      	bne.n	8000628 <main+0x154>
 80005fe:	4b49      	ldr	r3, [pc, #292]	@ (8000724 <main+0x250>)
 8000600:	7b5b      	ldrb	r3, [r3, #13]
 8000602:	b2db      	uxtb	r3, r3
 8000604:	2b00      	cmp	r3, #0
 8000606:	d10f      	bne.n	8000628 <main+0x154>
 8000608:	4b47      	ldr	r3, [pc, #284]	@ (8000728 <main+0x254>)
 800060a:	7b5b      	ldrb	r3, [r3, #13]
 800060c:	b2db      	uxtb	r3, r3
 800060e:	2b00      	cmp	r3, #0
 8000610:	d10a      	bne.n	8000628 <main+0x154>
 8000612:	4b46      	ldr	r3, [pc, #280]	@ (800072c <main+0x258>)
 8000614:	7b5b      	ldrb	r3, [r3, #13]
 8000616:	b2db      	uxtb	r3, r3
 8000618:	2b00      	cmp	r3, #0
 800061a:	d105      	bne.n	8000628 <main+0x154>
 800061c:	4b44      	ldr	r3, [pc, #272]	@ (8000730 <main+0x25c>)
 800061e:	7b5b      	ldrb	r3, [r3, #13]
 8000620:	b2db      	uxtb	r3, r3
 8000622:	2b00      	cmp	r3, #0
 8000624:	f000 80ae 	beq.w	8000784 <main+0x2b0>
      {
        // time_get = (TIME_DATA) time_get_data;
        // Default mode
        if(system_state.mode == DEFAULT_MODE)
 8000628:	4b44      	ldr	r3, [pc, #272]	@ (800073c <main+0x268>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d116      	bne.n	800065e <main+0x18a>
        {   
          default_mode(&flag_sSystem_mode, &time_get_data, battery_percentage);
 8000630:	4b43      	ldr	r3, [pc, #268]	@ (8000740 <main+0x26c>)
 8000632:	881b      	ldrh	r3, [r3, #0]
 8000634:	461a      	mov	r2, r3
 8000636:	4934      	ldr	r1, [pc, #208]	@ (8000708 <main+0x234>)
 8000638:	4842      	ldr	r0, [pc, #264]	@ (8000744 <main+0x270>)
 800063a:	f006 f9dd 	bl	80069f8 <default_mode>
          button0.press_flag = 0;
 800063e:	4b38      	ldr	r3, [pc, #224]	@ (8000720 <main+0x24c>)
 8000640:	2200      	movs	r2, #0
 8000642:	735a      	strb	r2, [r3, #13]
          button1.press_flag = 0;
 8000644:	4b37      	ldr	r3, [pc, #220]	@ (8000724 <main+0x250>)
 8000646:	2200      	movs	r2, #0
 8000648:	735a      	strb	r2, [r3, #13]
          button2.press_flag = 0;
 800064a:	4b37      	ldr	r3, [pc, #220]	@ (8000728 <main+0x254>)
 800064c:	2200      	movs	r2, #0
 800064e:	735a      	strb	r2, [r3, #13]
          button3.press_flag = 0;
 8000650:	4b36      	ldr	r3, [pc, #216]	@ (800072c <main+0x258>)
 8000652:	2200      	movs	r2, #0
 8000654:	735a      	strb	r2, [r3, #13]
          button4.press_flag = 0;
 8000656:	4b36      	ldr	r3, [pc, #216]	@ (8000730 <main+0x25c>)
 8000658:	2200      	movs	r2, #0
 800065a:	735a      	strb	r2, [r3, #13]
 800065c:	e092      	b.n	8000784 <main+0x2b0>
        }
        // System setup mode
        else if(system_state.mode == SYSTEM_OPTIONS_MODE)
 800065e:	4b37      	ldr	r3, [pc, #220]	@ (800073c <main+0x268>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	2b05      	cmp	r3, #5
 8000664:	d117      	bne.n	8000696 <main+0x1c2>
        {   
          // system_setup_mode (FLAG_SYSTEM *flag_set_up,  CONTROL_SCREEN *Control_screen);
          system_setup_mode (&flag_sSystem_mode,  &system_state, battery_percentage);
 8000666:	4b36      	ldr	r3, [pc, #216]	@ (8000740 <main+0x26c>)
 8000668:	881b      	ldrh	r3, [r3, #0]
 800066a:	b2db      	uxtb	r3, r3
 800066c:	461a      	mov	r2, r3
 800066e:	4933      	ldr	r1, [pc, #204]	@ (800073c <main+0x268>)
 8000670:	4834      	ldr	r0, [pc, #208]	@ (8000744 <main+0x270>)
 8000672:	f006 fa9f 	bl	8006bb4 <system_setup_mode>
          button0.press_flag = 0;
 8000676:	4b2a      	ldr	r3, [pc, #168]	@ (8000720 <main+0x24c>)
 8000678:	2200      	movs	r2, #0
 800067a:	735a      	strb	r2, [r3, #13]
          button1.press_flag = 0;
 800067c:	4b29      	ldr	r3, [pc, #164]	@ (8000724 <main+0x250>)
 800067e:	2200      	movs	r2, #0
 8000680:	735a      	strb	r2, [r3, #13]
          button2.press_flag = 0;
 8000682:	4b29      	ldr	r3, [pc, #164]	@ (8000728 <main+0x254>)
 8000684:	2200      	movs	r2, #0
 8000686:	735a      	strb	r2, [r3, #13]
          button3.press_flag = 0;
 8000688:	4b28      	ldr	r3, [pc, #160]	@ (800072c <main+0x258>)
 800068a:	2200      	movs	r2, #0
 800068c:	735a      	strb	r2, [r3, #13]
          button4.press_flag = 0;
 800068e:	4b28      	ldr	r3, [pc, #160]	@ (8000730 <main+0x25c>)
 8000690:	2200      	movs	r2, #0
 8000692:	735a      	strb	r2, [r3, #13]
 8000694:	e076      	b.n	8000784 <main+0x2b0>
        }
        // Alarm_set_up mode
        else if(system_state.mode == ALARM_SETUP_MODE)
 8000696:	4b29      	ldr	r3, [pc, #164]	@ (800073c <main+0x268>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	2b02      	cmp	r3, #2
 800069c:	d116      	bne.n	80006cc <main+0x1f8>
        {   
          //alarm_setup_mode(FLAG_SYSTEM *flag_alarm_set_up_mode, CONTROL_SCREEN *Control_screen, SYSTEM_PARAM_DATA_ALARM_VIEW_MODE *alarm_view_mode);
          alarm_setup_mode(&flag_sSystem_mode, &system_state, &alarm_setup_data, battery_percentage);
 800069e:	4b28      	ldr	r3, [pc, #160]	@ (8000740 <main+0x26c>)
 80006a0:	881b      	ldrh	r3, [r3, #0]
 80006a2:	4a29      	ldr	r2, [pc, #164]	@ (8000748 <main+0x274>)
 80006a4:	4925      	ldr	r1, [pc, #148]	@ (800073c <main+0x268>)
 80006a6:	4827      	ldr	r0, [pc, #156]	@ (8000744 <main+0x270>)
 80006a8:	f008 faba 	bl	8008c20 <alarm_setup_mode>
          button0.press_flag = 0;
 80006ac:	4b1c      	ldr	r3, [pc, #112]	@ (8000720 <main+0x24c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	735a      	strb	r2, [r3, #13]
          button1.press_flag = 0;
 80006b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000724 <main+0x250>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	735a      	strb	r2, [r3, #13]
          button2.press_flag = 0;
 80006b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000728 <main+0x254>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	735a      	strb	r2, [r3, #13]
          button3.press_flag = 0;
 80006be:	4b1b      	ldr	r3, [pc, #108]	@ (800072c <main+0x258>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	735a      	strb	r2, [r3, #13]
          button4.press_flag = 0;
 80006c4:	4b1a      	ldr	r3, [pc, #104]	@ (8000730 <main+0x25c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	735a      	strb	r2, [r3, #13]
 80006ca:	e05b      	b.n	8000784 <main+0x2b0>
        }
        // alarm view mode
        else if(system_state.mode == ALARM_VIEW_MODE)
 80006cc:	4b1b      	ldr	r3, [pc, #108]	@ (800073c <main+0x268>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	2b03      	cmp	r3, #3
 80006d2:	d13d      	bne.n	8000750 <main+0x27c>
        {   
          //alarm_view_mode (FLAG_SYSTEM *flag_alarm_view_mode, CONTROL_SCREEN *Control_screen, uint8_t *count_view, uint8_t *count_select, SYSTEM_PARAM_DATA_ALARM_VIEW_MODE *alarm_view_mode);
          alarm_view_mode (&flag_sSystem_mode, &system_state, &sParam_data_alarm_view_mode, battery_percentage);
 80006d4:	4b1a      	ldr	r3, [pc, #104]	@ (8000740 <main+0x26c>)
 80006d6:	881b      	ldrh	r3, [r3, #0]
 80006d8:	4a1c      	ldr	r2, [pc, #112]	@ (800074c <main+0x278>)
 80006da:	4918      	ldr	r1, [pc, #96]	@ (800073c <main+0x268>)
 80006dc:	4819      	ldr	r0, [pc, #100]	@ (8000744 <main+0x270>)
 80006de:	f006 fb63 	bl	8006da8 <alarm_view_mode>
          button0.press_flag = 0;
 80006e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000720 <main+0x24c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	735a      	strb	r2, [r3, #13]
          button1.press_flag = 0;
 80006e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000724 <main+0x250>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	735a      	strb	r2, [r3, #13]
          button2.press_flag = 0;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000728 <main+0x254>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	735a      	strb	r2, [r3, #13]
          button3.press_flag = 0;
 80006f4:	4b0d      	ldr	r3, [pc, #52]	@ (800072c <main+0x258>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	735a      	strb	r2, [r3, #13]
          button4.press_flag = 0;
 80006fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000730 <main+0x25c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	735a      	strb	r2, [r3, #13]
 8000700:	e040      	b.n	8000784 <main+0x2b0>
 8000702:	bf00      	nop
 8000704:	40010c00 	.word	0x40010c00
 8000708:	200003a0 	.word	0x200003a0
 800070c:	200003a8 	.word	0x200003a8
 8000710:	200003e4 	.word	0x200003e4
 8000714:	200003f8 	.word	0x200003f8
 8000718:	2000050c 	.word	0x2000050c
 800071c:	20000304 	.word	0x20000304
 8000720:	20000008 	.word	0x20000008
 8000724:	20000018 	.word	0x20000018
 8000728:	20000028 	.word	0x20000028
 800072c:	20000038 	.word	0x20000038
 8000730:	20000048 	.word	0x20000048
 8000734:	200003e5 	.word	0x200003e5
 8000738:	200003e8 	.word	0x200003e8
 800073c:	20000388 	.word	0x20000388
 8000740:	200003f4 	.word	0x200003f4
 8000744:	20000000 	.word	0x20000000
 8000748:	20000398 	.word	0x20000398
 800074c:	20000058 	.word	0x20000058
        }
        //alarm time set up mode
        else if(system_state.mode == TIME_SETUP_MODE)
 8000750:	4b5d      	ldr	r3, [pc, #372]	@ (80008c8 <main+0x3f4>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	2b01      	cmp	r3, #1
 8000756:	d115      	bne.n	8000784 <main+0x2b0>
        {   
          time_setup_mode(&flag_sSystem_mode, &system_state, &time_setup_data, battery_percentage);
 8000758:	4b5c      	ldr	r3, [pc, #368]	@ (80008cc <main+0x3f8>)
 800075a:	881b      	ldrh	r3, [r3, #0]
 800075c:	4a5c      	ldr	r2, [pc, #368]	@ (80008d0 <main+0x3fc>)
 800075e:	495a      	ldr	r1, [pc, #360]	@ (80008c8 <main+0x3f4>)
 8000760:	485c      	ldr	r0, [pc, #368]	@ (80008d4 <main+0x400>)
 8000762:	f008 fcc1 	bl	80090e8 <time_setup_mode>
          button0.press_flag = 0;
 8000766:	4b5c      	ldr	r3, [pc, #368]	@ (80008d8 <main+0x404>)
 8000768:	2200      	movs	r2, #0
 800076a:	735a      	strb	r2, [r3, #13]
          button1.press_flag = 0;
 800076c:	4b5b      	ldr	r3, [pc, #364]	@ (80008dc <main+0x408>)
 800076e:	2200      	movs	r2, #0
 8000770:	735a      	strb	r2, [r3, #13]
          button2.press_flag = 0;
 8000772:	4b5b      	ldr	r3, [pc, #364]	@ (80008e0 <main+0x40c>)
 8000774:	2200      	movs	r2, #0
 8000776:	735a      	strb	r2, [r3, #13]
          button3.press_flag = 0;
 8000778:	4b5a      	ldr	r3, [pc, #360]	@ (80008e4 <main+0x410>)
 800077a:	2200      	movs	r2, #0
 800077c:	735a      	strb	r2, [r3, #13]
          button4.press_flag = 0;
 800077e:	4b5a      	ldr	r3, [pc, #360]	@ (80008e8 <main+0x414>)
 8000780:	2200      	movs	r2, #0
 8000782:	735a      	strb	r2, [r3, #13]
        }
      }
      toggle_alarm_buzzer();
 8000784:	463b      	mov	r3, r7
 8000786:	469c      	mov	ip, r3
 8000788:	f7ff fe94 	bl	80004b4 <toggle_alarm_buzzer.0>

       // Check if the alarm is active
      if (alarm_active_flag)
 800078c:	4b57      	ldr	r3, [pc, #348]	@ (80008ec <main+0x418>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d004      	beq.n	800079e <main+0x2ca>
      {
      // Call the alarm ringing function
        Alarm_Ring();
 8000794:	f001 fde4 	bl	8002360 <Alarm_Ring>

      // Call the system alarm active mode handler to track if any button is pressed
        System_Alarm_Active_Mode_Handle(&button0);
 8000798:	484f      	ldr	r0, [pc, #316]	@ (80008d8 <main+0x404>)
 800079a:	f001 fad7 	bl	8001d4c <System_Alarm_Active_Mode_Handle>
      }
    }

    // Check if the ADC interrupt flag is set (ADC Valid Flag)
      if (adc_valid_flag)
 800079e:	4b54      	ldr	r3, [pc, #336]	@ (80008f0 <main+0x41c>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d01c      	beq.n	80007e2 <main+0x30e>
	  {
      // Re-enable the ADC interrupt to continue monitoring ADC values
      HAL_ADC_Start_IT(&hadc1);
 80007a8:	4852      	ldr	r0, [pc, #328]	@ (80008f4 <main+0x420>)
 80007aa:	f002 fa1b 	bl	8002be4 <HAL_ADC_Start_IT>

      // Delay for 100ms to allow the ADC to stabilize
      HAL_Delay(100);
 80007ae:	2064      	movs	r0, #100	@ 0x64
 80007b0:	f002 f91c 	bl	80029ec <HAL_Delay>
      if ((battery_percentage % 25) == 0)
 80007b4:	4b45      	ldr	r3, [pc, #276]	@ (80008cc <main+0x3f8>)
 80007b6:	881a      	ldrh	r2, [r3, #0]
 80007b8:	4b4f      	ldr	r3, [pc, #316]	@ (80008f8 <main+0x424>)
 80007ba:	fba3 1302 	umull	r1, r3, r3, r2
 80007be:	08d9      	lsrs	r1, r3, #3
 80007c0:	460b      	mov	r3, r1
 80007c2:	009b      	lsls	r3, r3, #2
 80007c4:	440b      	add	r3, r1
 80007c6:	0099      	lsls	r1, r3, #2
 80007c8:	440b      	add	r3, r1
 80007ca:	1ad3      	subs	r3, r2, r3
 80007cc:	b29b      	uxth	r3, r3
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d104      	bne.n	80007dc <main+0x308>
      {
        // Update the battery percentage value to be displayed
        system_state.battery_display = battery_percentage;
 80007d2:	4b3e      	ldr	r3, [pc, #248]	@ (80008cc <main+0x3f8>)
 80007d4:	881b      	ldrh	r3, [r3, #0]
 80007d6:	b2da      	uxtb	r2, r3
 80007d8:	4b3b      	ldr	r3, [pc, #236]	@ (80008c8 <main+0x3f4>)
 80007da:	719a      	strb	r2, [r3, #6]
      }

      // Reset the ADC interrupt flag
      adc_valid_flag = false;
 80007dc:	4b44      	ldr	r3, [pc, #272]	@ (80008f0 <main+0x41c>)
 80007de:	2200      	movs	r2, #0
 80007e0:	701a      	strb	r2, [r3, #0]
// Check for UART mode change
    //    0. Quit Mode:     0b11000000
    //    1. Time Setup:    0b11110000 (ON)/ 0b11000000 (OFF)
    //    2. Alarm Setup:   0b01110000 (ON)/ 0b11000000 (OFF)
    //    3. Update Alarms: 0b11111111
    if      (uart_mode == 0b11110000 || uart_rx_data[1] == 0b11110000)      //240 mode1
 80007e2:	4b46      	ldr	r3, [pc, #280]	@ (80008fc <main+0x428>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	2bf0      	cmp	r3, #240	@ 0xf0
 80007e8:	d003      	beq.n	80007f2 <main+0x31e>
 80007ea:	4b45      	ldr	r3, [pc, #276]	@ (8000900 <main+0x42c>)
 80007ec:	785b      	ldrb	r3, [r3, #1]
 80007ee:	2bf0      	cmp	r3, #240	@ 0xf0
 80007f0:	d103      	bne.n	80007fa <main+0x326>
    {
      // Set the UART mode to 1 (Time Setup Mode)
      uart_appMode = 1;
 80007f2:	4b44      	ldr	r3, [pc, #272]	@ (8000904 <main+0x430>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	701a      	strb	r2, [r3, #0]
 80007f8:	e016      	b.n	8000828 <main+0x354>
    }
    else if (uart_mode == 0b01110000 || uart_rx_data[1] == 0b01110000)      //112 mode 2
 80007fa:	4b40      	ldr	r3, [pc, #256]	@ (80008fc <main+0x428>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	2b70      	cmp	r3, #112	@ 0x70
 8000800:	d003      	beq.n	800080a <main+0x336>
 8000802:	4b3f      	ldr	r3, [pc, #252]	@ (8000900 <main+0x42c>)
 8000804:	785b      	ldrb	r3, [r3, #1]
 8000806:	2b70      	cmp	r3, #112	@ 0x70
 8000808:	d103      	bne.n	8000812 <main+0x33e>
    {
      // Set the UART mode to 2 (Alarm Setup Mode)
      uart_appMode = 2;
 800080a:	4b3e      	ldr	r3, [pc, #248]	@ (8000904 <main+0x430>)
 800080c:	2202      	movs	r2, #2
 800080e:	701a      	strb	r2, [r3, #0]
 8000810:	e00a      	b.n	8000828 <main+0x354>
    }
    else if (uart_mode == 0b11000000 || uart_rx_data[1] == 0b11000000)      //quit mode
 8000812:	4b3a      	ldr	r3, [pc, #232]	@ (80008fc <main+0x428>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	2bc0      	cmp	r3, #192	@ 0xc0
 8000818:	d003      	beq.n	8000822 <main+0x34e>
 800081a:	4b39      	ldr	r3, [pc, #228]	@ (8000900 <main+0x42c>)
 800081c:	785b      	ldrb	r3, [r3, #1]
 800081e:	2bc0      	cmp	r3, #192	@ 0xc0
 8000820:	d102      	bne.n	8000828 <main+0x354>
    {
      // Set the UART mode to 0 (Quit Mode)
      uart_appMode = 0;
 8000822:	4b38      	ldr	r3, [pc, #224]	@ (8000904 <main+0x430>)
 8000824:	2200      	movs	r2, #0
 8000826:	701a      	strb	r2, [r3, #0]
    }    
    // Check if the UART interrupt flag is set (UART Receive Flag)
    if (uart_rx_flag)
 8000828:	4b37      	ldr	r3, [pc, #220]	@ (8000908 <main+0x434>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	b2db      	uxtb	r3, r3
 800082e:	2b00      	cmp	r3, #0
 8000830:	d018      	beq.n	8000864 <main+0x390>
	  { 
      uart_mode = uart_rx_data[0];
 8000832:	4b33      	ldr	r3, [pc, #204]	@ (8000900 <main+0x42c>)
 8000834:	781a      	ldrb	r2, [r3, #0]
 8000836:	4b31      	ldr	r3, [pc, #196]	@ (80008fc <main+0x428>)
 8000838:	701a      	strb	r2, [r3, #0]
      // Re-enable the UART interrupt to continue receiving data
      HAL_Delay(100);
 800083a:	2064      	movs	r0, #100	@ 0x64
 800083c:	f002 f8d6 	bl	80029ec <HAL_Delay>

    
      if (uart_rx_data[0] == 0b11111111) //Transmit signal from App to STM32
 8000840:	4b2f      	ldr	r3, [pc, #188]	@ (8000900 <main+0x42c>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2bff      	cmp	r3, #255	@ 0xff
 8000846:	d105      	bne.n	8000854 <main+0x380>
      {
        uart_tx_flag = 1; //Set the flag to transmit data to App
 8000848:	4b30      	ldr	r3, [pc, #192]	@ (800090c <main+0x438>)
 800084a:	2201      	movs	r2, #1
 800084c:	701a      	strb	r2, [r3, #0]
        HAL_Delay(50);                     // Delay for 50ms to allow the UART to stabilize
 800084e:	2032      	movs	r0, #50	@ 0x32
 8000850:	f002 f8cc 	bl	80029ec <HAL_Delay>
        // uart_tx_flag  = 1;
        //uart_rx_data[0] = 0b00000000; // Reset the uart_rx_data array to avoid sending the same data again
      }

      // Re-enable the UART interrupt to continue receiving data
      HAL_UART_Receive_IT(&huart1, uart_rx_data, 7);
 8000854:	2207      	movs	r2, #7
 8000856:	492a      	ldr	r1, [pc, #168]	@ (8000900 <main+0x42c>)
 8000858:	482d      	ldr	r0, [pc, #180]	@ (8000910 <main+0x43c>)
 800085a:	f005 f8bf 	bl	80059dc <HAL_UART_Receive_IT>
      // Delay for 100ms to allow the UART to stabilize
      HAL_Delay(100);
 800085e:	2064      	movs	r0, #100	@ 0x64
 8000860:	f002 f8c4 	bl	80029ec <HAL_Delay>
	  }

    // Check if the UART transmit flag is set (Transmit Flag)
    if (uart_tx_flag)
 8000864:	4b29      	ldr	r3, [pc, #164]	@ (800090c <main+0x438>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	b2db      	uxtb	r3, r3
 800086a:	2b00      	cmp	r3, #0
 800086c:	f43f ae7d 	beq.w	800056a <main+0x96>
    {
      for (int i = 0; i < 10; i++)            // Alarm 0 - 9
 8000870:	2300      	movs	r3, #0
 8000872:	60bb      	str	r3, [r7, #8]
 8000874:	e024      	b.n	80008c0 <main+0x3ec>
      {
        for (int j = 0; j < 7; j++)           // Alarm details 0 - 6 (hour, minute, day, month, year, number, status)
 8000876:	2300      	movs	r3, #0
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	e010      	b.n	800089e <main+0x3ca>
        {
          uart_tx_data[j] = alarm_Info[i][j]; // Store the alarm information into the uart_tx_data array
 800087c:	4925      	ldr	r1, [pc, #148]	@ (8000914 <main+0x440>)
 800087e:	68ba      	ldr	r2, [r7, #8]
 8000880:	4613      	mov	r3, r2
 8000882:	00db      	lsls	r3, r3, #3
 8000884:	1a9b      	subs	r3, r3, r2
 8000886:	18ca      	adds	r2, r1, r3
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	4413      	add	r3, r2
 800088c:	7819      	ldrb	r1, [r3, #0]
 800088e:	4a22      	ldr	r2, [pc, #136]	@ (8000918 <main+0x444>)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	4413      	add	r3, r2
 8000894:	460a      	mov	r2, r1
 8000896:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < 7; j++)           // Alarm details 0 - 6 (hour, minute, day, month, year, number, status)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	3301      	adds	r3, #1
 800089c:	607b      	str	r3, [r7, #4]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	2b06      	cmp	r3, #6
 80008a2:	ddeb      	ble.n	800087c <main+0x3a8>
        }
        
        // Delay for 50ms to allow the UART to stabilize
        HAL_Delay(50);      
 80008a4:	2032      	movs	r0, #50	@ 0x32
 80008a6:	f002 f8a1 	bl	80029ec <HAL_Delay>
        
        // Transmit the alarm information to the App through UART
        HAL_UART_Transmit_IT(&huart1, uart_tx_data, 7);
 80008aa:	2207      	movs	r2, #7
 80008ac:	491a      	ldr	r1, [pc, #104]	@ (8000918 <main+0x444>)
 80008ae:	4818      	ldr	r0, [pc, #96]	@ (8000910 <main+0x43c>)
 80008b0:	f005 f85f 	bl	8005972 <HAL_UART_Transmit_IT>

        // Delay for 50ms to allow the UART to stabilize
        HAL_Delay(50);                        
 80008b4:	2032      	movs	r0, #50	@ 0x32
 80008b6:	f002 f899 	bl	80029ec <HAL_Delay>
      for (int i = 0; i < 10; i++)            // Alarm 0 - 9
 80008ba:	68bb      	ldr	r3, [r7, #8]
 80008bc:	3301      	adds	r3, #1
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	2b09      	cmp	r3, #9
 80008c4:	ddd7      	ble.n	8000876 <main+0x3a2>
    while ((button0.int_flag || button1.int_flag || button2.int_flag || button3.int_flag || button4.int_flag))
 80008c6:	e650      	b.n	800056a <main+0x96>
 80008c8:	20000388 	.word	0x20000388
 80008cc:	200003f4 	.word	0x200003f4
 80008d0:	20000390 	.word	0x20000390
 80008d4:	20000000 	.word	0x20000000
 80008d8:	20000008 	.word	0x20000008
 80008dc:	20000018 	.word	0x20000018
 80008e0:	20000028 	.word	0x20000028
 80008e4:	20000038 	.word	0x20000038
 80008e8:	20000048 	.word	0x20000048
 80008ec:	200003e7 	.word	0x200003e7
 80008f0:	200003f1 	.word	0x200003f1
 80008f4:	20000304 	.word	0x20000304
 80008f8:	51eb851f 	.word	0x51eb851f
 80008fc:	2000040f 	.word	0x2000040f
 8000900:	200003f8 	.word	0x200003f8
 8000904:	20000410 	.word	0x20000410
 8000908:	200003f6 	.word	0x200003f6
 800090c:	200003f7 	.word	0x200003f7
 8000910:	2000050c 	.word	0x2000050c
 8000914:	20000414 	.word	0x20000414
 8000918:	20000400 	.word	0x20000400

0800091c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b094      	sub	sp, #80	@ 0x50
 8000920:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000922:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000926:	2228      	movs	r2, #40	@ 0x28
 8000928:	2100      	movs	r1, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f00a fd2c 	bl	800b388 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
 800093e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
 8000948:	609a      	str	r2, [r3, #8]
 800094a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800094c:	2301      	movs	r3, #1
 800094e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000950:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000954:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000956:	2300      	movs	r3, #0
 8000958:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800095a:	2301      	movs	r3, #1
 800095c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800095e:	2302      	movs	r3, #2
 8000960:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000962:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000966:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000968:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800096c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800096e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000972:	4618      	mov	r0, r3
 8000974:	f004 f866 	bl	8004a44 <HAL_RCC_OscConfig>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800097e:	f001 fd7d 	bl	800247c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000982:	230f      	movs	r3, #15
 8000984:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000986:	2302      	movs	r3, #2
 8000988:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800098a:	2300      	movs	r3, #0
 800098c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800098e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000992:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000994:	2300      	movs	r3, #0
 8000996:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000998:	f107 0314 	add.w	r3, r7, #20
 800099c:	2102      	movs	r1, #2
 800099e:	4618      	mov	r0, r3
 80009a0:	f004 fad2 	bl	8004f48 <HAL_RCC_ClockConfig>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <SystemClock_Config+0x92>
  {
    Error_Handler();
 80009aa:	f001 fd67 	bl	800247c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80009ae:	2302      	movs	r3, #2
 80009b0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80009b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80009b6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009b8:	1d3b      	adds	r3, r7, #4
 80009ba:	4618      	mov	r0, r3
 80009bc:	f004 fc52 	bl	8005264 <HAL_RCCEx_PeriphCLKConfig>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <SystemClock_Config+0xae>
  {
    Error_Handler();
 80009c6:	f001 fd59 	bl	800247c <Error_Handler>
  }
}
 80009ca:	bf00      	nop
 80009cc:	3750      	adds	r7, #80	@ 0x50
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
	...

080009d4 <Dec_To_BCD>:
  * @brief  Convert a normal decimal number to Binary Coded Decimal (BCD).
  * @param  val: Decimal number to be converted.
  * @retval uint8_t: BCD representation of the input decimal number.
  */
uint8_t Dec_To_BCD(int val)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  return (uint8_t)( (val/10*16) + (val%10) );
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	4a0e      	ldr	r2, [pc, #56]	@ (8000a18 <Dec_To_BCD+0x44>)
 80009e0:	fb82 1203 	smull	r1, r2, r2, r3
 80009e4:	1092      	asrs	r2, r2, #2
 80009e6:	17db      	asrs	r3, r3, #31
 80009e8:	1ad3      	subs	r3, r2, r3
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	011b      	lsls	r3, r3, #4
 80009ee:	b2d8      	uxtb	r0, r3
 80009f0:	687a      	ldr	r2, [r7, #4]
 80009f2:	4b09      	ldr	r3, [pc, #36]	@ (8000a18 <Dec_To_BCD+0x44>)
 80009f4:	fb83 1302 	smull	r1, r3, r3, r2
 80009f8:	1099      	asrs	r1, r3, #2
 80009fa:	17d3      	asrs	r3, r2, #31
 80009fc:	1ac9      	subs	r1, r1, r3
 80009fe:	460b      	mov	r3, r1
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	440b      	add	r3, r1
 8000a04:	005b      	lsls	r3, r3, #1
 8000a06:	1ad1      	subs	r1, r2, r3
 8000a08:	b2cb      	uxtb	r3, r1
 8000a0a:	4403      	add	r3, r0
 8000a0c:	b2db      	uxtb	r3, r3
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bc80      	pop	{r7}
 8000a16:	4770      	bx	lr
 8000a18:	66666667 	.word	0x66666667

08000a1c <BCD_To_Dec>:
  * @brief  Convert a Binary Coded Decimal (BCD) value to a normal decimal number.
  * @param  val: BCD value to be converted.
  * @retval int: Decimal representation of the input BCD value.
  */
int BCD_To_Dec(uint8_t val)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	71fb      	strb	r3, [r7, #7]
  return (int)( (val/16*10) + (val%16) );
 8000a26:	79fb      	ldrb	r3, [r7, #7]
 8000a28:	091b      	lsrs	r3, r3, #4
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	4613      	mov	r3, r2
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	4413      	add	r3, r2
 8000a34:	005b      	lsls	r3, r3, #1
 8000a36:	461a      	mov	r2, r3
 8000a38:	79fb      	ldrb	r3, [r7, #7]
 8000a3a:	f003 030f 	and.w	r3, r3, #15
 8000a3e:	4413      	add	r3, r2
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bc80      	pop	{r7}
 8000a48:	4770      	bx	lr
	...

08000a4c <Time_Set>:
  * @param  month: Month: 1-12
  * @param  year: Year: 0-99 (0 = 2000, 1 = 2001, ..., 99 = 2099)
  * @retval None
*/
void Time_Set (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom, uint8_t month, uint8_t year)
{
 8000a4c:	b590      	push	{r4, r7, lr}
 8000a4e:	b089      	sub	sp, #36	@ 0x24
 8000a50:	af04      	add	r7, sp, #16
 8000a52:	4604      	mov	r4, r0
 8000a54:	4608      	mov	r0, r1
 8000a56:	4611      	mov	r1, r2
 8000a58:	461a      	mov	r2, r3
 8000a5a:	4623      	mov	r3, r4
 8000a5c:	71fb      	strb	r3, [r7, #7]
 8000a5e:	4603      	mov	r3, r0
 8000a60:	71bb      	strb	r3, [r7, #6]
 8000a62:	460b      	mov	r3, r1
 8000a64:	717b      	strb	r3, [r7, #5]
 8000a66:	4613      	mov	r3, r2
 8000a68:	713b      	strb	r3, [r7, #4]
	// A blank array (7 slots) to contain the time values
  uint8_t setTime[7];

  // Store the time values (converted in to BCD code) into the blank array
	setTime[0] = Dec_To_BCD(sec);
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff ffb1 	bl	80009d4 <Dec_To_BCD>
 8000a72:	4603      	mov	r3, r0
 8000a74:	723b      	strb	r3, [r7, #8]
	setTime[1] = Dec_To_BCD(min);
 8000a76:	79bb      	ldrb	r3, [r7, #6]
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff ffab 	bl	80009d4 <Dec_To_BCD>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	727b      	strb	r3, [r7, #9]
	setTime[2] = Dec_To_BCD(hour);
 8000a82:	797b      	ldrb	r3, [r7, #5]
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff ffa5 	bl	80009d4 <Dec_To_BCD>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	72bb      	strb	r3, [r7, #10]
	setTime[3] = Dec_To_BCD(dow);
 8000a8e:	793b      	ldrb	r3, [r7, #4]
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff ff9f 	bl	80009d4 <Dec_To_BCD>
 8000a96:	4603      	mov	r3, r0
 8000a98:	72fb      	strb	r3, [r7, #11]
	setTime[4] = Dec_To_BCD(dom);
 8000a9a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f7ff ff98 	bl	80009d4 <Dec_To_BCD>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	733b      	strb	r3, [r7, #12]
	setTime[5] = Dec_To_BCD(month);
 8000aa8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff ff91 	bl	80009d4 <Dec_To_BCD>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	737b      	strb	r3, [r7, #13]
	setTime[6] = Dec_To_BCD(year);
 8000ab6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000aba:	4618      	mov	r0, r3
 8000abc:	f7ff ff8a 	bl	80009d4 <Dec_To_BCD>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	73bb      	strb	r3, [r7, #14]

  // Send the array containing the time values to the RTC module through I2C interface at address 00h - 06h (size of value: 7 bytes)
  // HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
  //    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);	
  HAL_I2C_Mem_Write(DS3231_I2C, DS3231_ADDR, 0x00, 1, setTime, sizeof(setTime), 1000);
 8000ac4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ac8:	9302      	str	r3, [sp, #8]
 8000aca:	2307      	movs	r3, #7
 8000acc:	9301      	str	r3, [sp, #4]
 8000ace:	f107 0308 	add.w	r3, r7, #8
 8000ad2:	9300      	str	r3, [sp, #0]
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	21d0      	movs	r1, #208	@ 0xd0
 8000ada:	4805      	ldr	r0, [pc, #20]	@ (8000af0 <Time_Set+0xa4>)
 8000adc:	f003 f890 	bl	8003c00 <HAL_I2C_Mem_Write>

  // Delay for 1ms to allow the RTC module to process the data
  HAL_Delay(1);
 8000ae0:	2001      	movs	r0, #1
 8000ae2:	f001 ff83 	bl	80029ec <HAL_Delay>
}
 8000ae6:	bf00      	nop
 8000ae8:	3714      	adds	r7, #20
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd90      	pop	{r4, r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20000334 	.word	0x20000334

08000af4 <Time_Get>:
  * @brief  Get time from the RTC module through I2C interface.
  * @param  time_get_data: Pointer to a TIME structure to store the retrieved time values.
  * @retval None
*/
void Time_Get (volatile TIME_DATA *time_get_data)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b088      	sub	sp, #32
 8000af8:	af04      	add	r7, sp, #16
 8000afa:	6078      	str	r0, [r7, #4]
  uint8_t getTime[7];

  // Receive the time values from the RTC module through I2C interface, then store them into the blank array (size of value: 7 bytes)
  // HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
  //    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);  
  HAL_I2C_Mem_Read(DS3231_I2C, DS3231_ADDR, 0x00, 1, getTime, sizeof(getTime), 1000);
 8000afc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b00:	9302      	str	r3, [sp, #8]
 8000b02:	2307      	movs	r3, #7
 8000b04:	9301      	str	r3, [sp, #4]
 8000b06:	f107 0308 	add.w	r3, r7, #8
 8000b0a:	9300      	str	r3, [sp, #0]
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	2200      	movs	r2, #0
 8000b10:	21d0      	movs	r1, #208	@ 0xd0
 8000b12:	4821      	ldr	r0, [pc, #132]	@ (8000b98 <Time_Get+0xa4>)
 8000b14:	f003 f96e 	bl	8003df4 <HAL_I2C_Mem_Read>

  // Delay for 1ms to allow the RTC module to process the data
  HAL_Delay(1);
 8000b18:	2001      	movs	r0, #1
 8000b1a:	f001 ff67 	bl	80029ec <HAL_Delay>

  // Store the time values (converted from BCD code to decimal) into the time variable
	time_get_data->second       = BCD_To_Dec(getTime[0]);
 8000b1e:	7a3b      	ldrb	r3, [r7, #8]
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff ff7b 	bl	8000a1c <BCD_To_Dec>
 8000b26:	4603      	mov	r3, r0
 8000b28:	b2da      	uxtb	r2, r3
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	701a      	strb	r2, [r3, #0]
	time_get_data->minute       = BCD_To_Dec(getTime[1]);
 8000b2e:	7a7b      	ldrb	r3, [r7, #9]
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff ff73 	bl	8000a1c <BCD_To_Dec>
 8000b36:	4603      	mov	r3, r0
 8000b38:	b2da      	uxtb	r2, r3
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	705a      	strb	r2, [r3, #1]
	time_get_data->hour         = BCD_To_Dec(getTime[2]);
 8000b3e:	7abb      	ldrb	r3, [r7, #10]
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff ff6b 	bl	8000a1c <BCD_To_Dec>
 8000b46:	4603      	mov	r3, r0
 8000b48:	b2da      	uxtb	r2, r3
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	709a      	strb	r2, [r3, #2]
	time_get_data->dayofweek    = BCD_To_Dec(getTime[3]);
 8000b4e:	7afb      	ldrb	r3, [r7, #11]
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff ff63 	bl	8000a1c <BCD_To_Dec>
 8000b56:	4603      	mov	r3, r0
 8000b58:	b2da      	uxtb	r2, r3
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	70da      	strb	r2, [r3, #3]
	time_get_data->dateofmonth  = BCD_To_Dec(getTime[4]);
 8000b5e:	7b3b      	ldrb	r3, [r7, #12]
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff ff5b 	bl	8000a1c <BCD_To_Dec>
 8000b66:	4603      	mov	r3, r0
 8000b68:	b2da      	uxtb	r2, r3
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	711a      	strb	r2, [r3, #4]
	time_get_data->month        = BCD_To_Dec(getTime[5]);
 8000b6e:	7b7b      	ldrb	r3, [r7, #13]
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff ff53 	bl	8000a1c <BCD_To_Dec>
 8000b76:	4603      	mov	r3, r0
 8000b78:	b2da      	uxtb	r2, r3
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	715a      	strb	r2, [r3, #5]
	time_get_data->year         = BCD_To_Dec(getTime[6]);
 8000b7e:	7bbb      	ldrb	r3, [r7, #14]
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff ff4b 	bl	8000a1c <BCD_To_Dec>
 8000b86:	4603      	mov	r3, r0
 8000b88:	b2da      	uxtb	r2, r3
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	719a      	strb	r2, [r3, #6]
}
 8000b8e:	bf00      	nop
 8000b90:	3710      	adds	r7, #16
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20000334 	.word	0x20000334

08000b9c <Time_Ctrl>:
  * @param  dow_dom: Day of the week or date of the month (1-7 or 1-31).
  * @param  dy_dt: Day of week or date of month (1 = day of week, 0 = date of month, 0 = not used).
  * @retval None
*/
void Time_Ctrl (uint8_t mode, uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow_dom, bool dy_dt)
{
 8000b9c:	b590      	push	{r4, r7, lr}
 8000b9e:	b08b      	sub	sp, #44	@ 0x2c
 8000ba0:	af04      	add	r7, sp, #16
 8000ba2:	4604      	mov	r4, r0
 8000ba4:	4608      	mov	r0, r1
 8000ba6:	4611      	mov	r1, r2
 8000ba8:	461a      	mov	r2, r3
 8000baa:	4623      	mov	r3, r4
 8000bac:	71fb      	strb	r3, [r7, #7]
 8000bae:	4603      	mov	r3, r0
 8000bb0:	71bb      	strb	r3, [r7, #6]
 8000bb2:	460b      	mov	r3, r1
 8000bb4:	717b      	strb	r3, [r7, #5]
 8000bb6:	4613      	mov	r3, r2
 8000bb8:	713b      	strb	r3, [r7, #4]
  // A blank array (4 slots) to contain the RTC alarm settings
  uint8_t ctrlTime[4];

  // A mask bit to set the Control register in the RTC module
  //    Address 0Eh: A1IE = 1
  uint8_t ctrlAlarm = 1; 
 8000bba:	2301      	movs	r3, #1
 8000bbc:	73fb      	strb	r3, [r7, #15]

  // A mask bit to set the alarm modes (Bit 7) in the RTC module
  uint8_t maskBit = 128;
 8000bbe:	2380      	movs	r3, #128	@ 0x80
 8000bc0:	75fb      	strb	r3, [r7, #23]

  // A mask bit for selection of [day of week] or [date of month] (Bit 6) in the RTC module
  //    If the input [day of week]/ [date of month] selection is 1, the mask bit will be 64.
  uint8_t dyDt = (dy_dt == true) ? 64 : 0;
 8000bc2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <Time_Ctrl+0x32>
 8000bca:	2340      	movs	r3, #64	@ 0x40
 8000bcc:	e000      	b.n	8000bd0 <Time_Ctrl+0x34>
 8000bce:	2300      	movs	r3, #0
 8000bd0:	75bb      	strb	r3, [r7, #22]

  // Store the RTC alarm time settings (converted into BCD code) into the blank array
  ctrlTime[0] = Dec_To_BCD(sec);
 8000bd2:	79bb      	ldrb	r3, [r7, #6]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff fefd 	bl	80009d4 <Dec_To_BCD>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	743b      	strb	r3, [r7, #16]
	ctrlTime[1] = Dec_To_BCD(min);
 8000bde:	797b      	ldrb	r3, [r7, #5]
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff fef7 	bl	80009d4 <Dec_To_BCD>
 8000be6:	4603      	mov	r3, r0
 8000be8:	747b      	strb	r3, [r7, #17]
	ctrlTime[2] = Dec_To_BCD(hour);
 8000bea:	793b      	ldrb	r3, [r7, #4]
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff fef1 	bl	80009d4 <Dec_To_BCD>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	74bb      	strb	r3, [r7, #18]
	ctrlTime[3] = Dec_To_BCD(dow_dom);
 8000bf6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff feea 	bl	80009d4 <Dec_To_BCD>
 8000c00:	4603      	mov	r3, r0
 8000c02:	74fb      	strb	r3, [r7, #19]
  //      1    : Alarm when seconds match
  //      2    : Alarm when minutes and seconds match
  //      3    : Alarm when hours, minutes, and seconds match
  //      4    : Alarm when date, hours, minutes, and seconds match
  //      5    : Alarm when day, hours, minutes, and seconds match
  switch (mode)
 8000c04:	79fb      	ldrb	r3, [r7, #7]
 8000c06:	2b05      	cmp	r3, #5
 8000c08:	d865      	bhi.n	8000cd6 <Time_Ctrl+0x13a>
 8000c0a:	a201      	add	r2, pc, #4	@ (adr r2, 8000c10 <Time_Ctrl+0x74>)
 8000c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c10:	08000c29 	.word	0x08000c29
 8000c14:	08000c53 	.word	0x08000c53
 8000c18:	08000c77 	.word	0x08000c77
 8000c1c:	08000c95 	.word	0x08000c95
 8000c20:	08000cad 	.word	0x08000cad
 8000c24:	08000cbf 	.word	0x08000cbf
  {
    case 0:
      // Alarm mask bit: A1M4:A1M1 = b1111, DY/DT = X
      ctrlTime[0] += maskBit;
 8000c28:	7c3a      	ldrb	r2, [r7, #16]
 8000c2a:	7dfb      	ldrb	r3, [r7, #23]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	743b      	strb	r3, [r7, #16]
      ctrlTime[1] += maskBit;
 8000c32:	7c7a      	ldrb	r2, [r7, #17]
 8000c34:	7dfb      	ldrb	r3, [r7, #23]
 8000c36:	4413      	add	r3, r2
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	747b      	strb	r3, [r7, #17]
      ctrlTime[2] += maskBit;
 8000c3c:	7cba      	ldrb	r2, [r7, #18]
 8000c3e:	7dfb      	ldrb	r3, [r7, #23]
 8000c40:	4413      	add	r3, r2
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	74bb      	strb	r3, [r7, #18]
      ctrlTime[3] += maskBit;
 8000c46:	7cfa      	ldrb	r2, [r7, #19]
 8000c48:	7dfb      	ldrb	r3, [r7, #23]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	74fb      	strb	r3, [r7, #19]
      break;
 8000c50:	e04a      	b.n	8000ce8 <Time_Ctrl+0x14c>
    case 1:
      // Alarm mask bit: A1M4:A1M1 = b1110, DY/DT = X
      ctrlTime[0] += 0;
 8000c52:	7c3b      	ldrb	r3, [r7, #16]
 8000c54:	743b      	strb	r3, [r7, #16]
      ctrlTime[1] += maskBit;
 8000c56:	7c7a      	ldrb	r2, [r7, #17]
 8000c58:	7dfb      	ldrb	r3, [r7, #23]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	747b      	strb	r3, [r7, #17]
      ctrlTime[2] += maskBit;
 8000c60:	7cba      	ldrb	r2, [r7, #18]
 8000c62:	7dfb      	ldrb	r3, [r7, #23]
 8000c64:	4413      	add	r3, r2
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	74bb      	strb	r3, [r7, #18]
      ctrlTime[3] += maskBit;
 8000c6a:	7cfa      	ldrb	r2, [r7, #19]
 8000c6c:	7dfb      	ldrb	r3, [r7, #23]
 8000c6e:	4413      	add	r3, r2
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	74fb      	strb	r3, [r7, #19]
      break;
 8000c74:	e038      	b.n	8000ce8 <Time_Ctrl+0x14c>
    case 2:
      // Alarm mask bit: A1M4:A1M1 = b1100, DY/DT = X
      ctrlTime[0] += 0;
 8000c76:	7c3b      	ldrb	r3, [r7, #16]
 8000c78:	743b      	strb	r3, [r7, #16]
      ctrlTime[1] += 0;
 8000c7a:	7c7b      	ldrb	r3, [r7, #17]
 8000c7c:	747b      	strb	r3, [r7, #17]
      ctrlTime[2] += maskBit;
 8000c7e:	7cba      	ldrb	r2, [r7, #18]
 8000c80:	7dfb      	ldrb	r3, [r7, #23]
 8000c82:	4413      	add	r3, r2
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	74bb      	strb	r3, [r7, #18]
      ctrlTime[3] += maskBit;
 8000c88:	7cfa      	ldrb	r2, [r7, #19]
 8000c8a:	7dfb      	ldrb	r3, [r7, #23]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	74fb      	strb	r3, [r7, #19]
      break;
 8000c92:	e029      	b.n	8000ce8 <Time_Ctrl+0x14c>
    case 3:
      // Alarm mask bit: A1M4:A1M1 = b1000, DY/DT = X
      ctrlTime[0] += 0;
 8000c94:	7c3b      	ldrb	r3, [r7, #16]
 8000c96:	743b      	strb	r3, [r7, #16]
      ctrlTime[1] += 0;
 8000c98:	7c7b      	ldrb	r3, [r7, #17]
 8000c9a:	747b      	strb	r3, [r7, #17]
      ctrlTime[2] += 0;
 8000c9c:	7cbb      	ldrb	r3, [r7, #18]
 8000c9e:	74bb      	strb	r3, [r7, #18]
      ctrlTime[3] += maskBit;
 8000ca0:	7cfa      	ldrb	r2, [r7, #19]
 8000ca2:	7dfb      	ldrb	r3, [r7, #23]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	74fb      	strb	r3, [r7, #19]
      break;
 8000caa:	e01d      	b.n	8000ce8 <Time_Ctrl+0x14c>
    case 4:
      // Alarm mask bit: A1M4:A1M1 = b0000, DY/DT = 0
      ctrlTime[0] += 0;
 8000cac:	7c3b      	ldrb	r3, [r7, #16]
 8000cae:	743b      	strb	r3, [r7, #16]
      ctrlTime[1] += 0;
 8000cb0:	7c7b      	ldrb	r3, [r7, #17]
 8000cb2:	747b      	strb	r3, [r7, #17]
      ctrlTime[2] += 0;
 8000cb4:	7cbb      	ldrb	r3, [r7, #18]
 8000cb6:	74bb      	strb	r3, [r7, #18]
      ctrlTime[3] += 0;
 8000cb8:	7cfb      	ldrb	r3, [r7, #19]
 8000cba:	74fb      	strb	r3, [r7, #19]
      break;
 8000cbc:	e014      	b.n	8000ce8 <Time_Ctrl+0x14c>
    case 5:
      // Alarm mask bit: A1M4:A1M1 = b0000, DY/DT = 1
      ctrlTime[0] += 0;
 8000cbe:	7c3b      	ldrb	r3, [r7, #16]
 8000cc0:	743b      	strb	r3, [r7, #16]
      ctrlTime[1] += 0;
 8000cc2:	7c7b      	ldrb	r3, [r7, #17]
 8000cc4:	747b      	strb	r3, [r7, #17]
      ctrlTime[2] += 0;
 8000cc6:	7cbb      	ldrb	r3, [r7, #18]
 8000cc8:	74bb      	strb	r3, [r7, #18]
      ctrlTime[3] += dyDt;
 8000cca:	7cfa      	ldrb	r2, [r7, #19]
 8000ccc:	7dbb      	ldrb	r3, [r7, #22]
 8000cce:	4413      	add	r3, r2
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	74fb      	strb	r3, [r7, #19]
      break;
 8000cd4:	e008      	b.n	8000ce8 <Time_Ctrl+0x14c>
    default:
      // Alarm mask bit: A1M4:A1M1 = b0000, DY/DT = 0
      ctrlTime[0] += 0;
 8000cd6:	7c3b      	ldrb	r3, [r7, #16]
 8000cd8:	743b      	strb	r3, [r7, #16]
      ctrlTime[1] += 0;
 8000cda:	7c7b      	ldrb	r3, [r7, #17]
 8000cdc:	747b      	strb	r3, [r7, #17]
      ctrlTime[2] += 0;
 8000cde:	7cbb      	ldrb	r3, [r7, #18]
 8000ce0:	74bb      	strb	r3, [r7, #18]
      ctrlTime[3] += 0;
 8000ce2:	7cfb      	ldrb	r3, [r7, #19]
 8000ce4:	74fb      	strb	r3, [r7, #19]
      break;
 8000ce6:	bf00      	nop
  }

  // Send the array containing the RTC alarm mode setting to the RTC module through I2C interface at address 07h - 0Ah (size of value: 4 bytes)
  // HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
  //    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);	  
  HAL_I2C_Mem_Write(DS3231_I2C, DS3231_ADDR, 0x07, 1, ctrlTime, sizeof(ctrlTime), 1000);
 8000ce8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cec:	9302      	str	r3, [sp, #8]
 8000cee:	2304      	movs	r3, #4
 8000cf0:	9301      	str	r3, [sp, #4]
 8000cf2:	f107 0310 	add.w	r3, r7, #16
 8000cf6:	9300      	str	r3, [sp, #0]
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	2207      	movs	r2, #7
 8000cfc:	21d0      	movs	r1, #208	@ 0xd0
 8000cfe:	480d      	ldr	r0, [pc, #52]	@ (8000d34 <Time_Ctrl+0x198>)
 8000d00:	f002 ff7e 	bl	8003c00 <HAL_I2C_Mem_Write>

  // Delay for 1ms to allow the RTC module to process the data
  HAL_Delay(1);
 8000d04:	2001      	movs	r0, #1
 8000d06:	f001 fe71 	bl	80029ec <HAL_Delay>

  // Send the alarm control mask bits to the RTC module through I2C interface at address 0Eh (size of value: 1 byte)
  // HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
  //    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);	  
  HAL_I2C_Mem_Write(DS3231_I2C, DS3231_ADDR, 0x0E, 1, &ctrlAlarm, sizeof(ctrlAlarm), 1000);
 8000d0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d0e:	9302      	str	r3, [sp, #8]
 8000d10:	2301      	movs	r3, #1
 8000d12:	9301      	str	r3, [sp, #4]
 8000d14:	f107 030f 	add.w	r3, r7, #15
 8000d18:	9300      	str	r3, [sp, #0]
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	220e      	movs	r2, #14
 8000d1e:	21d0      	movs	r1, #208	@ 0xd0
 8000d20:	4804      	ldr	r0, [pc, #16]	@ (8000d34 <Time_Ctrl+0x198>)
 8000d22:	f002 ff6d 	bl	8003c00 <HAL_I2C_Mem_Write>

  // Delay for 1ms to allow the RTC module to process the data
  HAL_Delay(1);
 8000d26:	2001      	movs	r0, #1
 8000d28:	f001 fe60 	bl	80029ec <HAL_Delay>
}
 8000d2c:	bf00      	nop
 8000d2e:	371c      	adds	r7, #28
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd90      	pop	{r4, r7, pc}
 8000d34:	20000334 	.word	0x20000334

08000d38 <Time_Init>:
  * @param  month: Month: 1-12
  * @param  year: Year: 0-99 (0 = 2000, 1 = 2001, ..., 99 = 2099)
  * @retval None
*/
void Time_Init (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom, uint8_t month, uint8_t year)
{
 8000d38:	b590      	push	{r4, r7, lr}
 8000d3a:	b087      	sub	sp, #28
 8000d3c:	af04      	add	r7, sp, #16
 8000d3e:	4604      	mov	r4, r0
 8000d40:	4608      	mov	r0, r1
 8000d42:	4611      	mov	r1, r2
 8000d44:	461a      	mov	r2, r3
 8000d46:	4623      	mov	r3, r4
 8000d48:	71fb      	strb	r3, [r7, #7]
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	71bb      	strb	r3, [r7, #6]
 8000d4e:	460b      	mov	r3, r1
 8000d50:	717b      	strb	r3, [r7, #5]
 8000d52:	4613      	mov	r3, r2
 8000d54:	713b      	strb	r3, [r7, #4]
  // This function is intended for initial setup of the RTC module after a reset.
  // It should not be called repeatedly unless reinitialization is required.
  //    Time_Set (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom, uint8_t month, uint8_t year)
  Time_Set (sec, min, hour, dow, dom, month, year);
 8000d56:	793c      	ldrb	r4, [r7, #4]
 8000d58:	797a      	ldrb	r2, [r7, #5]
 8000d5a:	79b9      	ldrb	r1, [r7, #6]
 8000d5c:	79f8      	ldrb	r0, [r7, #7]
 8000d5e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d62:	9302      	str	r3, [sp, #8]
 8000d64:	7f3b      	ldrb	r3, [r7, #28]
 8000d66:	9301      	str	r3, [sp, #4]
 8000d68:	7e3b      	ldrb	r3, [r7, #24]
 8000d6a:	9300      	str	r3, [sp, #0]
 8000d6c:	4623      	mov	r3, r4
 8000d6e:	f7ff fe6d 	bl	8000a4c <Time_Set>
  //        2    : Alarm when minutes and seconds match
  //        3    : Alarm when hours, minutes, and seconds match
  //        4    : Alarm when date, hours, minutes, and seconds match
  //        5    : Alarm when day, hours, minutes, and seconds match
  //      For mode 0, the remaining input are don't-care values
  Time_Ctrl 
 8000d72:	2300      	movs	r3, #0
 8000d74:	9301      	str	r3, [sp, #4]
 8000d76:	2300      	movs	r3, #0
 8000d78:	9300      	str	r3, [sp, #0]
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2100      	movs	r1, #0
 8000d80:	2000      	movs	r0, #0
 8000d82:	f7ff ff0b 	bl	8000b9c <Time_Ctrl>
     0, // Minutes: 0-59
     0, // Hours: 0-23
     0, // Day of the week: 1-7 (1 = Sunday, 2 = Monday, ..., 7 = Saturday), or Date of the month: 1-31
     0  // Select: 1 = day of week, 0 = date of month
  );   
}
 8000d86:	bf00      	nop
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd90      	pop	{r4, r7, pc}
	...

08000d90 <Alarm_Set>:
  * @param  on_off: On/ Off state of the alarm (1 = ON, 0 = OFF)
  * @param  slot: Slot number of the alarm in the EEPROM module (0-9)
  * @retval None
*/
void Alarm_Set (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow_dom, ALARM_DY_DT_MODE dy_dt, bool on_off, uint8_t slot)
{
 8000d90:	b590      	push	{r4, r7, lr}
 8000d92:	b089      	sub	sp, #36	@ 0x24
 8000d94:	af04      	add	r7, sp, #16
 8000d96:	4604      	mov	r4, r0
 8000d98:	4608      	mov	r0, r1
 8000d9a:	4611      	mov	r1, r2
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	4623      	mov	r3, r4
 8000da0:	71fb      	strb	r3, [r7, #7]
 8000da2:	4603      	mov	r3, r0
 8000da4:	71bb      	strb	r3, [r7, #6]
 8000da6:	460b      	mov	r3, r1
 8000da8:	717b      	strb	r3, [r7, #5]
 8000daa:	4613      	mov	r3, r2
 8000dac:	713b      	strb	r3, [r7, #4]
 
  // Add an ON/OFF (1 bit) signal into the alarm package by using the MSB of the second register
  if (on_off)
 8000dae:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d002      	beq.n	8000dbc <Alarm_Set+0x2c>
  {
    sec += (1 << 7);
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	3b80      	subs	r3, #128	@ 0x80
 8000dba:	71fb      	strb	r3, [r7, #7]
  }

  // Add a [day of week] or [date of month] (1 bit) signal into the alarm package by using bit 6 of the dow_dom register
  switch (dy_dt)
 8000dbc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d00d      	beq.n	8000de0 <Alarm_Set+0x50>
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	dc0d      	bgt.n	8000de4 <Alarm_Set+0x54>
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d005      	beq.n	8000dd8 <Alarm_Set+0x48>
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d109      	bne.n	8000de4 <Alarm_Set+0x54>
  {
    // Date of the month
    case DATE_OF_MONTH_MODE:
      // Decoding: [Bit 7] = 1, [Bit 6] = 0
      dow_dom += (1 << 7);
 8000dd0:	793b      	ldrb	r3, [r7, #4]
 8000dd2:	3b80      	subs	r3, #128	@ 0x80
 8000dd4:	713b      	strb	r3, [r7, #4]
      break;
 8000dd6:	e006      	b.n	8000de6 <Alarm_Set+0x56>

    // Day of the week
    case DAY_OF_WEEK_MODE:
      // Decoding: [Bit 7] = 1, [Bit 6] = 1
      dow_dom += ((1 << 7) | (1 << 6));
 8000dd8:	793b      	ldrb	r3, [r7, #4]
 8000dda:	3b40      	subs	r3, #64	@ 0x40
 8000ddc:	713b      	strb	r3, [r7, #4]
      break;
 8000dde:	e002      	b.n	8000de6 <Alarm_Set+0x56>

    // Not used
    case NOT_USED_MODE:
      // Decoding: [Bit 7] = 0, [Bit 6] = 0
      dow_dom += 0;
      break;
 8000de0:	bf00      	nop
 8000de2:	e000      	b.n	8000de6 <Alarm_Set+0x56>

    default:
      dow_dom += 0;
      break;
 8000de4:	bf00      	nop
  }


  // Store the alarm values into the blank array
  uint8_t setAlarm[4] = {sec, min, hour, dow_dom};
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	723b      	strb	r3, [r7, #8]
 8000dea:	79bb      	ldrb	r3, [r7, #6]
 8000dec:	727b      	strb	r3, [r7, #9]
 8000dee:	797b      	ldrb	r3, [r7, #5]
 8000df0:	72bb      	strb	r3, [r7, #10]
 8000df2:	793b      	ldrb	r3, [r7, #4]
 8000df4:	72fb      	strb	r3, [r7, #11]

  // HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
  //    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);
  uint16_t address = slot * 4;
 8000df6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000dfa:	b29b      	uxth	r3, r3
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	81fb      	strh	r3, [r7, #14]

  HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, address, 2, setAlarm, sizeof(setAlarm), 1000);
 8000e00:	89fa      	ldrh	r2, [r7, #14]
 8000e02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e06:	9302      	str	r3, [sp, #8]
 8000e08:	2304      	movs	r3, #4
 8000e0a:	9301      	str	r3, [sp, #4]
 8000e0c:	f107 0308 	add.w	r3, r7, #8
 8000e10:	9300      	str	r3, [sp, #0]
 8000e12:	2302      	movs	r3, #2
 8000e14:	21a0      	movs	r1, #160	@ 0xa0
 8000e16:	4805      	ldr	r0, [pc, #20]	@ (8000e2c <Alarm_Set+0x9c>)
 8000e18:	f002 fef2 	bl	8003c00 <HAL_I2C_Mem_Write>

  // Delay to allow the EEPROM module to complete the Page Write operation
  HAL_Delay(5);
 8000e1c:	2005      	movs	r0, #5
 8000e1e:	f001 fde5 	bl	80029ec <HAL_Delay>
}
 8000e22:	bf00      	nop
 8000e24:	3714      	adds	r7, #20
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd90      	pop	{r4, r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000334 	.word	0x20000334

08000e30 <Alarm_Get>:
  * @param  slot: Slot number of the alarm in the EEPROM module (0-9)
  * @param  alarm_get_data: Pointer to an ALARM_DATA structure to store the retrieved alarm values
  * @retval None
*/
void Alarm_Get (uint8_t slot, volatile ALARM_DATA *alarm_get_data)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b088      	sub	sp, #32
 8000e34:	af04      	add	r7, sp, #16
 8000e36:	4603      	mov	r3, r0
 8000e38:	6039      	str	r1, [r7, #0]
 8000e3a:	71fb      	strb	r3, [r7, #7]
  // Address of the alarm in the EEPROM module (0-8192, or 13 bits)
  uint16_t address = slot * 4;
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	b29b      	uxth	r3, r3
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	81fb      	strh	r3, [r7, #14]
  // A blank array (4 slots) to contain the alarm values received from the EEPROM module
  uint8_t getAlarm[4];

  // HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
  //    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);
  HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, address, 2, getAlarm, sizeof(getAlarm), 1000);
 8000e44:	89fa      	ldrh	r2, [r7, #14]
 8000e46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e4a:	9302      	str	r3, [sp, #8]
 8000e4c:	2304      	movs	r3, #4
 8000e4e:	9301      	str	r3, [sp, #4]
 8000e50:	f107 0308 	add.w	r3, r7, #8
 8000e54:	9300      	str	r3, [sp, #0]
 8000e56:	2302      	movs	r3, #2
 8000e58:	21a0      	movs	r1, #160	@ 0xa0
 8000e5a:	481f      	ldr	r0, [pc, #124]	@ (8000ed8 <Alarm_Get+0xa8>)
 8000e5c:	f002 ffca 	bl	8003df4 <HAL_I2C_Mem_Read>
  //     +  8 [Device Address Byte]     + 1 [ACK from Client]      +
  //     + {8 [1st Data Word]           + 1 [ACK from Client]} * 4 + 
  //     +  1 [Stop Condition by Host] 
  //     =  75 cycles
  //    Neccesary delay time = 75 cycles / 400 kHz = 187.5 us = ~ 0.19 ms
  HAL_Delay(1);
 8000e60:	2001      	movs	r0, #1
 8000e62:	f001 fdc3 	bl	80029ec <HAL_Delay>

  // Store the alarm values into the alarm variable
  alarm_get_data->second = 0;
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	2200      	movs	r2, #0
 8000e6a:	701a      	strb	r2, [r3, #0]
  alarm_get_data->minute = getAlarm[1];
 8000e6c:	7a7a      	ldrb	r2, [r7, #9]
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	705a      	strb	r2, [r3, #1]
  alarm_get_data->hour = getAlarm[2];
 8000e72:	7aba      	ldrb	r2, [r7, #10]
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	709a      	strb	r2, [r3, #2]
  
  if (getAlarm[3] >= (1 << 7))
 8000e78:	7afb      	ldrb	r3, [r7, #11]
 8000e7a:	b25b      	sxtb	r3, r3
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	da18      	bge.n	8000eb2 <Alarm_Get+0x82>
  {
    if ((getAlarm[3] & 0x7F) >= (1 << 6))
 8000e80:	7afb      	ldrb	r3, [r7, #11]
 8000e82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d009      	beq.n	8000e9e <Alarm_Get+0x6e>
    {
      alarm_get_data->dy_dt = DAY_OF_WEEK_MODE;
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	70da      	strb	r2, [r3, #3]
      alarm_get_data->dow_dom = getAlarm[3] & 0x3F;
 8000e90:	7afb      	ldrb	r3, [r7, #11]
 8000e92:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000e96:	b2da      	uxtb	r2, r3
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	711a      	strb	r2, [r3, #4]
 8000e9c:	e00c      	b.n	8000eb8 <Alarm_Get+0x88>
    }
    else 
    {
      alarm_get_data->dy_dt = DATE_OF_MONTH_MODE;
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	70da      	strb	r2, [r3, #3]
      alarm_get_data->dow_dom = getAlarm[3] & 0x7F;
 8000ea4:	7afb      	ldrb	r3, [r7, #11]
 8000ea6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000eaa:	b2da      	uxtb	r2, r3
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	711a      	strb	r2, [r3, #4]
 8000eb0:	e002      	b.n	8000eb8 <Alarm_Get+0x88>
    }
  }
  else alarm_get_data->dy_dt = NOT_USED_MODE;
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	2202      	movs	r2, #2
 8000eb6:	70da      	strb	r2, [r3, #3]

  if (getAlarm[0] >= (1 << 7)) alarm_get_data->on_off = true;
 8000eb8:	7a3b      	ldrb	r3, [r7, #8]
 8000eba:	b25b      	sxtb	r3, r3
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	da03      	bge.n	8000ec8 <Alarm_Get+0x98>
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	715a      	strb	r2, [r3, #5]
  else alarm_get_data->on_off = false;
}
 8000ec6:	e002      	b.n	8000ece <Alarm_Get+0x9e>
  else alarm_get_data->on_off = false;
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	2200      	movs	r2, #0
 8000ecc:	715a      	strb	r2, [r3, #5]
}
 8000ece:	bf00      	nop
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000334 	.word	0x20000334

08000edc <Alarm_Clear>:
  * @brief  Clear a single alarm from the EEPROM module.
  * @param  slot: Slot number of the alarm in the EEPROM module (0-9)
  * @retval None
*/
void Alarm_Clear (uint8_t slot)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b088      	sub	sp, #32
 8000ee0:	af04      	add	r7, sp, #16
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	71fb      	strb	r3, [r7, #7]
  // Address of the alarm in the EEPROM module (0-8192, or 13 bits)
  uint16_t address = slot * 4;
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	b29b      	uxth	r3, r3
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	81fb      	strh	r3, [r7, #14]

  // A blank array (4 slots) to contain the alarm values to be cleared
  uint8_t clearAlarm[4] = {0, 0, 0, 0};
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60bb      	str	r3, [r7, #8]

  // HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
  //    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);
  HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, address, 2, clearAlarm, sizeof(clearAlarm), 1000);
 8000ef2:	89fa      	ldrh	r2, [r7, #14]
 8000ef4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ef8:	9302      	str	r3, [sp, #8]
 8000efa:	2304      	movs	r3, #4
 8000efc:	9301      	str	r3, [sp, #4]
 8000efe:	f107 0308 	add.w	r3, r7, #8
 8000f02:	9300      	str	r3, [sp, #0]
 8000f04:	2302      	movs	r3, #2
 8000f06:	21a0      	movs	r1, #160	@ 0xa0
 8000f08:	4804      	ldr	r0, [pc, #16]	@ (8000f1c <Alarm_Clear+0x40>)
 8000f0a:	f002 fe79 	bl	8003c00 <HAL_I2C_Mem_Write>
  //     +  8 [2nd Word Address Byte]   + 1 [ACK from Client]      +
  //     + {8 [1st Data Word]           + 1 [ACK from Client]} * 4 + 
  //     +  1 [Stop Condition by Host] 
  //     =  65 cycles  
  //    Neccesary delay time = 65 cycles / 400 kHz = 162.5 us = ~ 0.17 ms
  HAL_Delay(5);
 8000f0e:	2005      	movs	r0, #5
 8000f10:	f001 fd6c 	bl	80029ec <HAL_Delay>
}
 8000f14:	bf00      	nop
 8000f16:	3710      	adds	r7, #16
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000334 	.word	0x20000334

08000f20 <Alarm_Slot_Pointer_Set>:
/**
 * @brief Save the data of pointer for the alarm slot to EEPROM module.
  * @retval None
 */
void Alarm_Slot_Pointer_Set (void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af04      	add	r7, sp, #16
  // HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
  //    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);
  HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, ALARM_SLOT_PTR_ADDR, 2, &alarm_slot_ptr, sizeof(alarm_slot_ptr), 1000);
 8000f26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f2a:	9302      	str	r3, [sp, #8]
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	9301      	str	r3, [sp, #4]
 8000f30:	4b06      	ldr	r3, [pc, #24]	@ (8000f4c <Alarm_Slot_Pointer_Set+0x2c>)
 8000f32:	9300      	str	r3, [sp, #0]
 8000f34:	2302      	movs	r3, #2
 8000f36:	2228      	movs	r2, #40	@ 0x28
 8000f38:	21a0      	movs	r1, #160	@ 0xa0
 8000f3a:	4805      	ldr	r0, [pc, #20]	@ (8000f50 <Alarm_Slot_Pointer_Set+0x30>)
 8000f3c:	f002 fe60 	bl	8003c00 <HAL_I2C_Mem_Write>
  //     +  8 [2nd Word Address Byte]   + 1 [ACK from Client]  +
  //     +  8 [1st Data Word]           + 1 [ACK from Client]} + 
  //     +  1 [Stop Condition by Host] 
  //     =  38 cycles  
  //    Neccesary delay time = 65 cycles / 400 kHz = 95 us = ~ 0.01 ms
  HAL_Delay(5);
 8000f40:	2005      	movs	r0, #5
 8000f42:	f001 fd53 	bl	80029ec <HAL_Delay>
}
 8000f46:	bf00      	nop
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	200003e4 	.word	0x200003e4
 8000f50:	20000334 	.word	0x20000334

08000f54 <Alarm_Slot_Pointer_Get>:
/**
 * @brief Retrieve the data of pointer for the alarm slot from EEPROM module.
  * @retval None
 */
void Alarm_Slot_Pointer_Get (void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af04      	add	r7, sp, #16
  // HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
  //    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);
  HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, ALARM_SLOT_PTR_ADDR, 2, &alarm_slot_ptr, sizeof(alarm_slot_ptr), 1000);
 8000f5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f5e:	9302      	str	r3, [sp, #8]
 8000f60:	2301      	movs	r3, #1
 8000f62:	9301      	str	r3, [sp, #4]
 8000f64:	4b06      	ldr	r3, [pc, #24]	@ (8000f80 <Alarm_Slot_Pointer_Get+0x2c>)
 8000f66:	9300      	str	r3, [sp, #0]
 8000f68:	2302      	movs	r3, #2
 8000f6a:	2228      	movs	r2, #40	@ 0x28
 8000f6c:	21a0      	movs	r1, #160	@ 0xa0
 8000f6e:	4805      	ldr	r0, [pc, #20]	@ (8000f84 <Alarm_Slot_Pointer_Get+0x30>)
 8000f70:	f002 ff40 	bl	8003df4 <HAL_I2C_Mem_Read>
  //     +  8 [Device Address Byte]     + 1 [ACK from Client]  +
  //     +  8 [1st Data Word]           + 1 [ACK from Client]} + 
  //     +  1 [Stop Condition by Host] 
  //     =  48 cycles
  //    Neccesary delay time = 75 cycles / 400 kHz = 0.12 ms
  HAL_Delay(5);
 8000f74:	2005      	movs	r0, #5
 8000f76:	f001 fd39 	bl	80029ec <HAL_Delay>
}
 8000f7a:	bf00      	nop
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	200003e4 	.word	0x200003e4
 8000f84:	20000334 	.word	0x20000334

08000f88 <Alarm_Check>:
  * @param  time_get_data: Pointer to a TIME structure to store the current time values
  * @retval None
  * @note   This function compares the current time with all alarms stored in the EEPROM module.
*/
void Alarm_Check (volatile TIME_DATA *time_get_data)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  volatile ALARM_DATA alarmCheckData = {0};
 8000f90:	f107 030c 	add.w	r3, r7, #12
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	809a      	strh	r2, [r3, #4]

  // Compare the current time with all available alarms in the EEPROM module
  for (int i = 0; i < alarm_slot_ptr; i++)
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	617b      	str	r3, [r7, #20]
 8000f9e:	e04e      	b.n	800103e <Alarm_Check+0xb6>
  {
    // Retrieve the alarm values from the EEPROM module
    //    void Alarm_Get (uint8_t slot, ALARM_DATA *alarm_get_data)
    Alarm_Get(i, &alarmCheckData);
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	f107 020c 	add.w	r2, r7, #12
 8000fa8:	4611      	mov	r1, r2
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff ff40 	bl	8000e30 <Alarm_Get>

    // Check if the alarm is at ON or OFF state by checking the MSB of the second register
    if (!alarmCheckData.on_off)
 8000fb0:	7c7b      	ldrb	r3, [r7, #17]
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	f083 0301 	eor.w	r3, r3, #1
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d131      	bne.n	8001022 <Alarm_Check+0x9a>
      // Skip if the alarm is OFF
      continue;
    }

    // Check if the current time matches the alarm time (day of week)
    if ((alarmCheckData.dy_dt == DAY_OF_WEEK_MODE)
 8000fbe:	7bfb      	ldrb	r3, [r7, #15]
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d106      	bne.n	8000fd4 <Alarm_Check+0x4c>
    &&  (alarmCheckData.dow_dom != time_get_data->dayofweek))
 8000fc6:	7c3b      	ldrb	r3, [r7, #16]
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	78db      	ldrb	r3, [r3, #3]
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d128      	bne.n	8001026 <Alarm_Check+0x9e>
      // Skip if the current time does NOT match the alarm time (day of week)
      continue;
    }

    // Check if the current time matches the alarm time (date of month)
    if ((alarmCheckData.dy_dt == DATE_OF_MONTH_MODE)
 8000fd4:	7bfb      	ldrb	r3, [r7, #15]
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d106      	bne.n	8000fea <Alarm_Check+0x62>
    &&  (alarmCheckData.dow_dom != time_get_data->dateofmonth))
 8000fdc:	7c3b      	ldrb	r3, [r7, #16]
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	791b      	ldrb	r3, [r3, #4]
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	d11f      	bne.n	800102a <Alarm_Check+0xa2>
      // Skip if the current time does NOT match the alarm time (date of month)
      continue;
    }

    // Check if the current time matches the alarm time (hour)
    if (alarmCheckData.hour != time_get_data->hour)
 8000fea:	7bbb      	ldrb	r3, [r7, #14]
 8000fec:	b2da      	uxtb	r2, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	789b      	ldrb	r3, [r3, #2]
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d11a      	bne.n	800102e <Alarm_Check+0xa6>
      // Skip if the current time does NOT match the alarm time (hour)
      continue;
    }

    // Check if the current time matches the alarm time (minute)
    if (alarmCheckData.minute != time_get_data->minute)
 8000ff8:	7b7b      	ldrb	r3, [r7, #13]
 8000ffa:	b2da      	uxtb	r2, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	785b      	ldrb	r3, [r3, #1]
 8001000:	b2db      	uxtb	r3, r3
 8001002:	429a      	cmp	r2, r3
 8001004:	d115      	bne.n	8001032 <Alarm_Check+0xaa>
      // Skip if the current time does NOT match the alarm time (minute)
      continue;
    }

    // Check if the current time matches the alarm time (second)
    if (alarmCheckData.second != time_get_data->second)
 8001006:	7b3b      	ldrb	r3, [r7, #12]
 8001008:	b2da      	uxtb	r2, r3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	b2db      	uxtb	r3, r3
 8001010:	429a      	cmp	r2, r3
 8001012:	d110      	bne.n	8001036 <Alarm_Check+0xae>
      // Skip if the current time does NOT match the alarm time (second)
      continue;
    }

    // If all the above checks pass, the alarm is activated
    debug_alarm_activate_ctr++;
 8001014:	4b0f      	ldr	r3, [pc, #60]	@ (8001054 <Alarm_Check+0xcc>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	3301      	adds	r3, #1
 800101a:	b2da      	uxtb	r2, r3
 800101c:	4b0d      	ldr	r3, [pc, #52]	@ (8001054 <Alarm_Check+0xcc>)
 800101e:	701a      	strb	r2, [r3, #0]

    // Stop checking time matching
    // to make sure that only one alarm can be activated at a time
    break;
 8001020:	e014      	b.n	800104c <Alarm_Check+0xc4>
      continue;
 8001022:	bf00      	nop
 8001024:	e008      	b.n	8001038 <Alarm_Check+0xb0>
      continue;
 8001026:	bf00      	nop
 8001028:	e006      	b.n	8001038 <Alarm_Check+0xb0>
      continue;
 800102a:	bf00      	nop
 800102c:	e004      	b.n	8001038 <Alarm_Check+0xb0>
      continue;
 800102e:	bf00      	nop
 8001030:	e002      	b.n	8001038 <Alarm_Check+0xb0>
      continue;
 8001032:	bf00      	nop
 8001034:	e000      	b.n	8001038 <Alarm_Check+0xb0>
      continue;
 8001036:	bf00      	nop
  for (int i = 0; i < alarm_slot_ptr; i++)
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	3301      	adds	r3, #1
 800103c:	617b      	str	r3, [r7, #20]
 800103e:	4b06      	ldr	r3, [pc, #24]	@ (8001058 <Alarm_Check+0xd0>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	461a      	mov	r2, r3
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	4293      	cmp	r3, r2
 8001048:	dbaa      	blt.n	8000fa0 <Alarm_Check+0x18>
  }
}
 800104a:	bf00      	nop
 800104c:	bf00      	nop
 800104e:	3718      	adds	r7, #24
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	200003e6 	.word	0x200003e6
 8001058:	200003e4 	.word	0x200003e4

0800105c <Button_Debounce>:
//       break;
//   }
// }
// Button debounce using delay
void Button_Debounce(BUTTON_DATA *button)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  // Handle button state transitions and debounce logic
  switch (button->state)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	79db      	ldrb	r3, [r3, #7]
 8001068:	2b02      	cmp	r3, #2
 800106a:	d03b      	beq.n	80010e4 <Button_Debounce+0x88>
 800106c:	2b02      	cmp	r3, #2
 800106e:	dc6c      	bgt.n	800114a <Button_Debounce+0xee>
 8001070:	2b00      	cmp	r3, #0
 8001072:	d002      	beq.n	800107a <Button_Debounce+0x1e>
 8001074:	2b01      	cmp	r3, #1
 8001076:	d017      	beq.n	80010a8 <Button_Debounce+0x4c>
 8001078:	e067      	b.n	800114a <Button_Debounce+0xee>
  {
    // Initial state: Button is released (HIGH)
    case BUTTON_RELEASED:

      button->press_flag = false;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	735a      	strb	r2, [r3, #13]
      button->hold_flag = false;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2200      	movs	r2, #0
 8001084:	739a      	strb	r2, [r3, #14]
      button->latch = false;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2200      	movs	r2, #0
 800108a:	73da      	strb	r2, [r3, #15]
    
      // Check if interrupt flag is set
      if (button->int_flag) 
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	7b1b      	ldrb	r3, [r3, #12]
 8001090:	b2db      	uxtb	r3, r3
 8001092:	2b00      	cmp	r3, #0
 8001094:	d069      	beq.n	800116a <Button_Debounce+0x10e>
      {
        // Record the start time for debounce
        button->start_tick = HAL_GetTick();
 8001096:	f001 fc9f 	bl	80029d8 <HAL_GetTick>
 800109a:	4602      	mov	r2, r0
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	609a      	str	r2, [r3, #8]

        // Transition to waiting state
        button->state = BUTTON_WAITING;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2201      	movs	r2, #1
 80010a4:	71da      	strb	r2, [r3, #7]
      }
      break;
 80010a6:	e060      	b.n	800116a <Button_Debounce+0x10e>

    // Waiting state: Button is pressed (LOW) but not yet confirmed
    case BUTTON_WAITING:
      // Check if debounce delay has passed
      if (HAL_GetTick() - button->start_tick >= (BUTTON_DEBOUNCE_DELAY + DISPLAY_DELAY)) 
 80010a8:	f001 fc96 	bl	80029d8 <HAL_GetTick>
 80010ac:	4602      	mov	r2, r0
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	2b1e      	cmp	r3, #30
 80010b6:	d95a      	bls.n	800116e <Button_Debounce+0x112>
      {
        // Check if button is still pressed (LOW state) after debounce delay
        if (HAL_GPIO_ReadPin(button->gpio_port, button->gpio_pin) == BUTTON_ACTIVE) 
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	889b      	ldrh	r3, [r3, #4]
 80010c0:	4619      	mov	r1, r3
 80010c2:	4610      	mov	r0, r2
 80010c4:	f002 fbf8 	bl	80038b8 <HAL_GPIO_ReadPin>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d103      	bne.n	80010d6 <Button_Debounce+0x7a>
        {
          // Transition to pressed state
          button->state = BUTTON_PRESSED;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2202      	movs	r2, #2
 80010d2:	71da      	strb	r2, [r3, #7]
          // Reset interrupt flag and return to released state
          button->int_flag = false;  
          button->state = BUTTON_RELEASED;
        }
      }
      break;
 80010d4:	e04b      	b.n	800116e <Button_Debounce+0x112>
          button->int_flag = false;  
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2200      	movs	r2, #0
 80010da:	731a      	strb	r2, [r3, #12]
          button->state = BUTTON_RELEASED;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2200      	movs	r2, #0
 80010e0:	71da      	strb	r2, [r3, #7]
      break;
 80010e2:	e044      	b.n	800116e <Button_Debounce+0x112>
    
    // Pressed state: Button is pressed (LOW)
    case BUTTON_PRESSED:
      // Check if button is released (HIGH state)
      if (HAL_GPIO_ReadPin(button->gpio_port, button->gpio_pin) != BUTTON_ACTIVE) 
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	889b      	ldrh	r3, [r3, #4]
 80010ec:	4619      	mov	r1, r3
 80010ee:	4610      	mov	r0, r2
 80010f0:	f002 fbe2 	bl	80038b8 <HAL_GPIO_ReadPin>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d012      	beq.n	8001120 <Button_Debounce+0xc4>
      {
        // Check if press duration is less than hold threshold
        if (HAL_GetTick() - button->start_tick < (BUTTON_HOLD_TH + DISPLAY_DELAY))
 80010fa:	f001 fc6d 	bl	80029d8 <HAL_GetTick>
 80010fe:	4602      	mov	r2, r0
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 800110a:	d802      	bhi.n	8001112 <Button_Debounce+0xb6>
        {
          // Set press flag for short press
          button->press_flag = true;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2201      	movs	r2, #1
 8001110:	735a      	strb	r2, [r3, #13]
        }
      
        // Reset interrupt flag and return to released state
        button->int_flag = false;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2200      	movs	r2, #0
 8001116:	731a      	strb	r2, [r3, #12]

        //button->latch = false;
        button->state = BUTTON_RELEASED;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2200      	movs	r2, #0
 800111c:	71da      	strb	r2, [r3, #7]
      else if ((HAL_GetTick() - button->start_tick >= (BUTTON_HOLD_TH + DISPLAY_DELAY)) && !button->hold_flag)
      {
        // Set hold flag for long press
        button->hold_flag = true;
      }
      break;
 800111e:	e028      	b.n	8001172 <Button_Debounce+0x116>
      else if ((HAL_GetTick() - button->start_tick >= (BUTTON_HOLD_TH + DISPLAY_DELAY)) && !button->hold_flag)
 8001120:	f001 fc5a 	bl	80029d8 <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8001130:	d91f      	bls.n	8001172 <Button_Debounce+0x116>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	7b9b      	ldrb	r3, [r3, #14]
 8001136:	b2db      	uxtb	r3, r3
 8001138:	f083 0301 	eor.w	r3, r3, #1
 800113c:	b2db      	uxtb	r3, r3
 800113e:	2b00      	cmp	r3, #0
 8001140:	d017      	beq.n	8001172 <Button_Debounce+0x116>
        button->hold_flag = true;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2201      	movs	r2, #1
 8001146:	739a      	strb	r2, [r3, #14]
      break;
 8001148:	e013      	b.n	8001172 <Button_Debounce+0x116>

    default:
      // Reset all flags and return to released state
      button->state = BUTTON_RELEASED;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2200      	movs	r2, #0
 800114e:	71da      	strb	r2, [r3, #7]
      button->int_flag = false;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2200      	movs	r2, #0
 8001154:	731a      	strb	r2, [r3, #12]
      button->press_flag = false;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2200      	movs	r2, #0
 800115a:	735a      	strb	r2, [r3, #13]
      button->hold_flag = false;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2200      	movs	r2, #0
 8001160:	739a      	strb	r2, [r3, #14]
      button->latch = false;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2200      	movs	r2, #0
 8001166:	73da      	strb	r2, [r3, #15]
      break;
 8001168:	e004      	b.n	8001174 <Button_Debounce+0x118>
      break;
 800116a:	bf00      	nop
 800116c:	e002      	b.n	8001174 <Button_Debounce+0x118>
      break;
 800116e:	bf00      	nop
 8001170:	e000      	b.n	8001174 <Button_Debounce+0x118>
      break;
 8001172:	bf00      	nop
  }
}
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <Button_Handle>:
/**
 * @brief  Button interrupt handler function to be called in main loop
 * @retval None
 */
void Button_Handle (void) 
{
 800117c:	b590      	push	{r4, r7, lr}
 800117e:	b087      	sub	sp, #28
 8001180:	af00      	add	r7, sp, #0
  // An empty button variable containing reset values for button pointer initiallization
  BUTTON_DATA buttonReset = {GPIOB, BUTTON0_IN12_Pin, 0, BUTTON_RELEASED, 0, false, false, false, false};
 8001182:	4b5d      	ldr	r3, [pc, #372]	@ (80012f8 <Button_Handle+0x17c>)
 8001184:	463c      	mov	r4, r7
 8001186:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001188:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  // Initially point to an empty button variable
  BUTTON_DATA *button = &buttonReset;
 800118c:	463b      	mov	r3, r7
 800118e:	617b      	str	r3, [r7, #20]

  // Perform button debouncing to filter out noise
  Button_Debounce(&button0);
 8001190:	485a      	ldr	r0, [pc, #360]	@ (80012fc <Button_Handle+0x180>)
 8001192:	f7ff ff63 	bl	800105c <Button_Debounce>
  Button_Debounce(&button1);
 8001196:	485a      	ldr	r0, [pc, #360]	@ (8001300 <Button_Handle+0x184>)
 8001198:	f7ff ff60 	bl	800105c <Button_Debounce>
  Button_Debounce(&button2);
 800119c:	4859      	ldr	r0, [pc, #356]	@ (8001304 <Button_Handle+0x188>)
 800119e:	f7ff ff5d 	bl	800105c <Button_Debounce>
  Button_Debounce(&button3);
 80011a2:	4859      	ldr	r0, [pc, #356]	@ (8001308 <Button_Handle+0x18c>)
 80011a4:	f7ff ff5a 	bl	800105c <Button_Debounce>
  Button_Debounce(&button4);
 80011a8:	4858      	ldr	r0, [pc, #352]	@ (800130c <Button_Handle+0x190>)
 80011aa:	f7ff ff57 	bl	800105c <Button_Debounce>

  
  if      (button0.press_flag || button0.hold_flag) button = &button0;
 80011ae:	4b53      	ldr	r3, [pc, #332]	@ (80012fc <Button_Handle+0x180>)
 80011b0:	7b5b      	ldrb	r3, [r3, #13]
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d104      	bne.n	80011c2 <Button_Handle+0x46>
 80011b8:	4b50      	ldr	r3, [pc, #320]	@ (80012fc <Button_Handle+0x180>)
 80011ba:	7b9b      	ldrb	r3, [r3, #14]
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d002      	beq.n	80011c8 <Button_Handle+0x4c>
 80011c2:	4b4e      	ldr	r3, [pc, #312]	@ (80012fc <Button_Handle+0x180>)
 80011c4:	617b      	str	r3, [r7, #20]
 80011c6:	e032      	b.n	800122e <Button_Handle+0xb2>
  else if (button1.press_flag || button1.hold_flag) button = &button1;
 80011c8:	4b4d      	ldr	r3, [pc, #308]	@ (8001300 <Button_Handle+0x184>)
 80011ca:	7b5b      	ldrb	r3, [r3, #13]
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d104      	bne.n	80011dc <Button_Handle+0x60>
 80011d2:	4b4b      	ldr	r3, [pc, #300]	@ (8001300 <Button_Handle+0x184>)
 80011d4:	7b9b      	ldrb	r3, [r3, #14]
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d002      	beq.n	80011e2 <Button_Handle+0x66>
 80011dc:	4b48      	ldr	r3, [pc, #288]	@ (8001300 <Button_Handle+0x184>)
 80011de:	617b      	str	r3, [r7, #20]
 80011e0:	e025      	b.n	800122e <Button_Handle+0xb2>
  else if (button2.press_flag || button2.hold_flag) button = &button2;
 80011e2:	4b48      	ldr	r3, [pc, #288]	@ (8001304 <Button_Handle+0x188>)
 80011e4:	7b5b      	ldrb	r3, [r3, #13]
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d104      	bne.n	80011f6 <Button_Handle+0x7a>
 80011ec:	4b45      	ldr	r3, [pc, #276]	@ (8001304 <Button_Handle+0x188>)
 80011ee:	7b9b      	ldrb	r3, [r3, #14]
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d002      	beq.n	80011fc <Button_Handle+0x80>
 80011f6:	4b43      	ldr	r3, [pc, #268]	@ (8001304 <Button_Handle+0x188>)
 80011f8:	617b      	str	r3, [r7, #20]
 80011fa:	e018      	b.n	800122e <Button_Handle+0xb2>
  else if (button3.press_flag || button3.hold_flag) button = &button3;
 80011fc:	4b42      	ldr	r3, [pc, #264]	@ (8001308 <Button_Handle+0x18c>)
 80011fe:	7b5b      	ldrb	r3, [r3, #13]
 8001200:	b2db      	uxtb	r3, r3
 8001202:	2b00      	cmp	r3, #0
 8001204:	d104      	bne.n	8001210 <Button_Handle+0x94>
 8001206:	4b40      	ldr	r3, [pc, #256]	@ (8001308 <Button_Handle+0x18c>)
 8001208:	7b9b      	ldrb	r3, [r3, #14]
 800120a:	b2db      	uxtb	r3, r3
 800120c:	2b00      	cmp	r3, #0
 800120e:	d002      	beq.n	8001216 <Button_Handle+0x9a>
 8001210:	4b3d      	ldr	r3, [pc, #244]	@ (8001308 <Button_Handle+0x18c>)
 8001212:	617b      	str	r3, [r7, #20]
 8001214:	e00b      	b.n	800122e <Button_Handle+0xb2>
  else if (button4.press_flag || button4.hold_flag) button = &button4;
 8001216:	4b3d      	ldr	r3, [pc, #244]	@ (800130c <Button_Handle+0x190>)
 8001218:	7b5b      	ldrb	r3, [r3, #13]
 800121a:	b2db      	uxtb	r3, r3
 800121c:	2b00      	cmp	r3, #0
 800121e:	d104      	bne.n	800122a <Button_Handle+0xae>
 8001220:	4b3a      	ldr	r3, [pc, #232]	@ (800130c <Button_Handle+0x190>)
 8001222:	7b9b      	ldrb	r3, [r3, #14]
 8001224:	b2db      	uxtb	r3, r3
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <Button_Handle+0xb2>
 800122a:	4b38      	ldr	r3, [pc, #224]	@ (800130c <Button_Handle+0x190>)
 800122c:	617b      	str	r3, [r7, #20]
  

  // Debugging: Initialize the start tick for button hold detection
  uint32_t startTick = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	613b      	str	r3, [r7, #16]
  
  // Debugging: Check if the button is pressed or held by increment its counter in activation
  if (button->press_flag)
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	7b5b      	ldrb	r3, [r3, #13]
 8001236:	b2db      	uxtb	r3, r3
 8001238:	2b00      	cmp	r3, #0
 800123a:	d009      	beq.n	8001250 <Button_Handle+0xd4>
  {
    // Increment the debug counter for the button
    debug_button_counter[button->index]++;
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	799b      	ldrb	r3, [r3, #6]
 8001240:	4a33      	ldr	r2, [pc, #204]	@ (8001310 <Button_Handle+0x194>)
 8001242:	5cd2      	ldrb	r2, [r2, r3]
 8001244:	b2d2      	uxtb	r2, r2
 8001246:	3201      	adds	r2, #1
 8001248:	b2d1      	uxtb	r1, r2
 800124a:	4a31      	ldr	r2, [pc, #196]	@ (8001310 <Button_Handle+0x194>)
 800124c:	54d1      	strb	r1, [r2, r3]
 800124e:	e017      	b.n	8001280 <Button_Handle+0x104>
  }
  else if (button->hold_flag)
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	7b9b      	ldrb	r3, [r3, #14]
 8001254:	b2db      	uxtb	r3, r3
 8001256:	2b00      	cmp	r3, #0
 8001258:	d012      	beq.n	8001280 <Button_Handle+0x104>
  {
    // Check if the button is held down for a certain duration
    if (HAL_GetTick() - startTick >= BUTTON_HOLD_CYCLE) 
 800125a:	f001 fbbd 	bl	80029d8 <HAL_GetTick>
 800125e:	4602      	mov	r2, r0
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	2bf9      	cmp	r3, #249	@ 0xf9
 8001266:	d90b      	bls.n	8001280 <Button_Handle+0x104>
    {
      // Increment the debug counter for the button
      debug_button_counter[button->index]++;
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	799b      	ldrb	r3, [r3, #6]
 800126c:	4a28      	ldr	r2, [pc, #160]	@ (8001310 <Button_Handle+0x194>)
 800126e:	5cd2      	ldrb	r2, [r2, r3]
 8001270:	b2d2      	uxtb	r2, r2
 8001272:	3201      	adds	r2, #1
 8001274:	b2d1      	uxtb	r1, r2
 8001276:	4a26      	ldr	r2, [pc, #152]	@ (8001310 <Button_Handle+0x194>)
 8001278:	54d1      	strb	r1, [r2, r3]

      // Reset the start tick for the next hold cycle
      startTick = HAL_GetTick();
 800127a:	f001 fbad 	bl	80029d8 <HAL_GetTick>
 800127e:	6138      	str	r0, [r7, #16]
    }
  }

  // Check if the button is pressed or held
  if (button->press_flag || button->hold_flag) 
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	7b5b      	ldrb	r3, [r3, #13]
 8001284:	b2db      	uxtb	r3, r3
 8001286:	2b00      	cmp	r3, #0
 8001288:	d104      	bne.n	8001294 <Button_Handle+0x118>
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	7b9b      	ldrb	r3, [r3, #14]
 800128e:	b2db      	uxtb	r3, r3
 8001290:	2b00      	cmp	r3, #0
 8001292:	d02c      	beq.n	80012ee <Button_Handle+0x172>
  {
    // Handle button actions based on the current system mode
    switch (system_state.mode) 
 8001294:	4b1f      	ldr	r3, [pc, #124]	@ (8001314 <Button_Handle+0x198>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	2b05      	cmp	r3, #5
 800129a:	d827      	bhi.n	80012ec <Button_Handle+0x170>
 800129c:	a201      	add	r2, pc, #4	@ (adr r2, 80012a4 <Button_Handle+0x128>)
 800129e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012a2:	bf00      	nop
 80012a4:	080012bd 	.word	0x080012bd
 80012a8:	080012c5 	.word	0x080012c5
 80012ac:	080012cd 	.word	0x080012cd
 80012b0:	080012d5 	.word	0x080012d5
 80012b4:	080012dd 	.word	0x080012dd
 80012b8:	080012e5 	.word	0x080012e5
    {
      case DEFAULT_MODE: 
        System_Default_Mode_Handle (button);
 80012bc:	6978      	ldr	r0, [r7, #20]
 80012be:	f000 f82b 	bl	8001318 <System_Default_Mode_Handle>
        break;
 80012c2:	e014      	b.n	80012ee <Button_Handle+0x172>

      case TIME_SETUP_MODE: 
        System_Time_Setup_Mode_Handle (button);
 80012c4:	6978      	ldr	r0, [r7, #20]
 80012c6:	f000 f8ab 	bl	8001420 <System_Time_Setup_Mode_Handle>
        break;
 80012ca:	e010      	b.n	80012ee <Button_Handle+0x172>
      
      case ALARM_SETUP_MODE: 
        System_Alarm_Setup_Mode_Handle (button);
 80012cc:	6978      	ldr	r0, [r7, #20]
 80012ce:	f000 f9e5 	bl	800169c <System_Alarm_Setup_Mode_Handle>
        break;
 80012d2:	e00c      	b.n	80012ee <Button_Handle+0x172>

      case ALARM_VIEW_MODE: 
        System_Alarm_View_Mode_Handle (button);
 80012d4:	6978      	ldr	r0, [r7, #20]
 80012d6:	f000 fb75 	bl	80019c4 <System_Alarm_View_Mode_Handle>
        break;
 80012da:	e008      	b.n	80012ee <Button_Handle+0x172>

      case ALARM_ACTIVE_MODE: 
        System_Alarm_Active_Mode_Handle (button);
 80012dc:	6978      	ldr	r0, [r7, #20]
 80012de:	f000 fd35 	bl	8001d4c <System_Alarm_Active_Mode_Handle>
        break;
 80012e2:	e004      	b.n	80012ee <Button_Handle+0x172>

      case SYSTEM_OPTIONS_MODE:
        System_Options_Mode_Handle (button);
 80012e4:	6978      	ldr	r0, [r7, #20]
 80012e6:	f000 fc9d 	bl	8001c24 <System_Options_Mode_Handle>
        break;
 80012ea:	e000      	b.n	80012ee <Button_Handle+0x172>

      default:
        break;
 80012ec:	bf00      	nop
    }
  }
}
 80012ee:	bf00      	nop
 80012f0:	371c      	adds	r7, #28
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd90      	pop	{r4, r7, pc}
 80012f6:	bf00      	nop
 80012f8:	0800bd5c 	.word	0x0800bd5c
 80012fc:	20000008 	.word	0x20000008
 8001300:	20000018 	.word	0x20000018
 8001304:	20000028 	.word	0x20000028
 8001308:	20000038 	.word	0x20000038
 800130c:	20000048 	.word	0x20000048
 8001310:	200003ec 	.word	0x200003ec
 8001314:	20000388 	.word	0x20000388

08001318 <System_Default_Mode_Handle>:
 * @brief  Handles the default system mode based on button actions.
 * @param  button: Pointer to the BUTTON_DATA structure containing button state and index.
 * @retval None
 */
void System_Default_Mode_Handle (BUTTON_DATA *button)
{
 8001318:	b4f0      	push	{r4, r5, r6, r7}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  switch (button->index) 
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	799b      	ldrb	r3, [r3, #6]
 8001324:	2b04      	cmp	r3, #4
 8001326:	d864      	bhi.n	80013f2 <System_Default_Mode_Handle+0xda>
 8001328:	a201      	add	r2, pc, #4	@ (adr r2, 8001330 <System_Default_Mode_Handle+0x18>)
 800132a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800132e:	bf00      	nop
 8001330:	08001345 	.word	0x08001345
 8001334:	08001355 	.word	0x08001355
 8001338:	08001365 	.word	0x08001365
 800133c:	08001375 	.word	0x08001375
 8001340:	08001385 	.word	0x08001385
  {
    // Button 0: Reserved for future use
    case 0:
      if (button->press_flag)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	7b5b      	ldrb	r3, [r3, #13]
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2b00      	cmp	r3, #0
 800134c:	d153      	bne.n	80013f6 <System_Default_Mode_Handle+0xde>
      {
        // Reserved
      }
      else if (button->hold_flag)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	7b9b      	ldrb	r3, [r3, #14]
      {
        // Reserved
      }
      break;
 8001352:	e050      	b.n	80013f6 <System_Default_Mode_Handle+0xde>
    
    // Button 1: Reserved for future use
    case 1: 
      if (button->press_flag)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	7b5b      	ldrb	r3, [r3, #13]
 8001358:	b2db      	uxtb	r3, r3
 800135a:	2b00      	cmp	r3, #0
 800135c:	d14d      	bne.n	80013fa <System_Default_Mode_Handle+0xe2>
      {
        // Reserved
      }
      else if (button->hold_flag)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	7b9b      	ldrb	r3, [r3, #14]
      {
        // Reserved
      }
      break;
 8001362:	e04a      	b.n	80013fa <System_Default_Mode_Handle+0xe2>

    // Button 2: If pressed, do nothing (reserved for future use); if held, do nothing (reserved for future use)
    case 2: 
      if (button->press_flag) 
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	7b5b      	ldrb	r3, [r3, #13]
 8001368:	b2db      	uxtb	r3, r3
 800136a:	2b00      	cmp	r3, #0
 800136c:	d147      	bne.n	80013fe <System_Default_Mode_Handle+0xe6>
      {
        // Reserved
      }
      else if (button->hold_flag)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	7b9b      	ldrb	r3, [r3, #14]
      {
        // Reserved
      }
      break;
 8001372:	e044      	b.n	80013fe <System_Default_Mode_Handle+0xe6>
    
    // Button 3: If pressed, do nothing (reserved for future use); if held, do nothing (reserved for future use)
    case 3:
      if (button->press_flag)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	7b5b      	ldrb	r3, [r3, #13]
 8001378:	b2db      	uxtb	r3, r3
 800137a:	2b00      	cmp	r3, #0
 800137c:	d141      	bne.n	8001402 <System_Default_Mode_Handle+0xea>
      {
        // Reserved
      }
      else if (button->hold_flag)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	7b9b      	ldrb	r3, [r3, #14]
      {
        // Reserved
      }
      break;
 8001382:	e03e      	b.n	8001402 <System_Default_Mode_Handle+0xea>

    // Button 4: If pressed, cycle through the modes; if held, do nothing (reserved for future use)
    case 4:
      if (button->press_flag || (button->hold_flag && !button->latch))
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	7b5b      	ldrb	r3, [r3, #13]
 8001388:	b2db      	uxtb	r3, r3
 800138a:	2b00      	cmp	r3, #0
 800138c:	d10c      	bne.n	80013a8 <System_Default_Mode_Handle+0x90>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	7b9b      	ldrb	r3, [r3, #14]
 8001392:	b2db      	uxtb	r3, r3
 8001394:	2b00      	cmp	r3, #0
 8001396:	d036      	beq.n	8001406 <System_Default_Mode_Handle+0xee>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	7bdb      	ldrb	r3, [r3, #15]
 800139c:	b2db      	uxtb	r3, r3
 800139e:	f083 0301 	eor.w	r3, r3, #1
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d02e      	beq.n	8001406 <System_Default_Mode_Handle+0xee>
      {
        // system_state.mode = (system_state.mode < (SYSTEM_MODE_NUM - 1)) ? (system_state.mode + 1) : 0;

        // Cycle to the next mode in the system state
        system_state.mode = TIME_SETUP_MODE;
 80013a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001414 <System_Default_Mode_Handle+0xfc>)
 80013aa:	2201      	movs	r2, #1
 80013ac:	701a      	strb	r2, [r3, #0]

        // Set the system past mode to default mode
        system_state.past_mode = DEFAULT_MODE;
 80013ae:	4b19      	ldr	r3, [pc, #100]	@ (8001414 <System_Default_Mode_Handle+0xfc>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	705a      	strb	r2, [r3, #1]

        // Set the Time Setup data to the current time values for convinience
        time_setup_data =
        (TIME_SETUP_DATA)
        {
          time_get_data.minute,       // Minutes: 0-59
 80013b4:	4b18      	ldr	r3, [pc, #96]	@ (8001418 <System_Default_Mode_Handle+0x100>)
 80013b6:	785e      	ldrb	r6, [r3, #1]
          time_get_data.hour,         // Hours: 0-23
 80013b8:	4b17      	ldr	r3, [pc, #92]	@ (8001418 <System_Default_Mode_Handle+0x100>)
 80013ba:	789d      	ldrb	r5, [r3, #2]
          time_get_data.dayofweek,    // Day of the week: 1-7 (1 = Sunday, 2 = Monday, ..., 7 = Saturday)
 80013bc:	4b16      	ldr	r3, [pc, #88]	@ (8001418 <System_Default_Mode_Handle+0x100>)
 80013be:	78dc      	ldrb	r4, [r3, #3]
          time_get_data.dateofmonth,  // Date of the month: 1-31
 80013c0:	4b15      	ldr	r3, [pc, #84]	@ (8001418 <System_Default_Mode_Handle+0x100>)
 80013c2:	7918      	ldrb	r0, [r3, #4]
          time_get_data.month,        // Month: 1-12
 80013c4:	4b14      	ldr	r3, [pc, #80]	@ (8001418 <System_Default_Mode_Handle+0x100>)
 80013c6:	7959      	ldrb	r1, [r3, #5]
          time_get_data.year          // Year: 0-99 (0 = 2000, 1 = 2001, ..., 99 = 2099)
 80013c8:	4b13      	ldr	r3, [pc, #76]	@ (8001418 <System_Default_Mode_Handle+0x100>)
 80013ca:	799a      	ldrb	r2, [r3, #6]
        time_setup_data =
 80013cc:	4b13      	ldr	r3, [pc, #76]	@ (800141c <System_Default_Mode_Handle+0x104>)
 80013ce:	701e      	strb	r6, [r3, #0]
 80013d0:	4b12      	ldr	r3, [pc, #72]	@ (800141c <System_Default_Mode_Handle+0x104>)
 80013d2:	705d      	strb	r5, [r3, #1]
 80013d4:	4b11      	ldr	r3, [pc, #68]	@ (800141c <System_Default_Mode_Handle+0x104>)
 80013d6:	709c      	strb	r4, [r3, #2]
 80013d8:	4b10      	ldr	r3, [pc, #64]	@ (800141c <System_Default_Mode_Handle+0x104>)
 80013da:	70d8      	strb	r0, [r3, #3]
 80013dc:	4b0f      	ldr	r3, [pc, #60]	@ (800141c <System_Default_Mode_Handle+0x104>)
 80013de:	7119      	strb	r1, [r3, #4]
 80013e0:	4b0e      	ldr	r3, [pc, #56]	@ (800141c <System_Default_Mode_Handle+0x104>)
 80013e2:	715a      	strb	r2, [r3, #5]
        };

        // Reset the cursor for the Time Setup mode to the first parameter (minute)
        system_state.time_setup_cursor = TIME_MINUTE;
 80013e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001414 <System_Default_Mode_Handle+0xfc>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	709a      	strb	r2, [r3, #2]

        button->latch = true;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2201      	movs	r2, #1
 80013ee:	73da      	strb	r2, [r3, #15]
      }
      // else if (button->hold_flag)
      // {
      //   // Reserved
      // }
      break;
 80013f0:	e009      	b.n	8001406 <System_Default_Mode_Handle+0xee>

    default: 
      break;
 80013f2:	bf00      	nop
 80013f4:	e008      	b.n	8001408 <System_Default_Mode_Handle+0xf0>
      break;
 80013f6:	bf00      	nop
 80013f8:	e006      	b.n	8001408 <System_Default_Mode_Handle+0xf0>
      break;
 80013fa:	bf00      	nop
 80013fc:	e004      	b.n	8001408 <System_Default_Mode_Handle+0xf0>
      break;
 80013fe:	bf00      	nop
 8001400:	e002      	b.n	8001408 <System_Default_Mode_Handle+0xf0>
      break;
 8001402:	bf00      	nop
 8001404:	e000      	b.n	8001408 <System_Default_Mode_Handle+0xf0>
      break;
 8001406:	bf00      	nop
  }
}
 8001408:	bf00      	nop
 800140a:	3710      	adds	r7, #16
 800140c:	46bd      	mov	sp, r7
 800140e:	bcf0      	pop	{r4, r5, r6, r7}
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	20000388 	.word	0x20000388
 8001418:	200003a0 	.word	0x200003a0
 800141c:	20000390 	.word	0x20000390

08001420 <System_Time_Setup_Mode_Handle>:
 * @brief  Handles the time setup mode based on button actions.
 * @param  button: Pointer to the BUTTON structure containing button state and index.
 * @retval None
 */
void System_Time_Setup_Mode_Handle (BUTTON_DATA *button)
{
 8001420:	b5b0      	push	{r4, r5, r7, lr}
 8001422:	b08c      	sub	sp, #48	@ 0x30
 8001424:	af04      	add	r7, sp, #16
 8001426:	6078      	str	r0, [r7, #4]
  switch (button->index) 
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	799b      	ldrb	r3, [r3, #6]
 800142c:	2b04      	cmp	r3, #4
 800142e:	f200 8115 	bhi.w	800165c <System_Time_Setup_Mode_Handle+0x23c>
 8001432:	a201      	add	r2, pc, #4	@ (adr r2, 8001438 <System_Time_Setup_Mode_Handle+0x18>)
 8001434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001438:	0800144d 	.word	0x0800144d
 800143c:	08001507 	.word	0x08001507
 8001440:	080015bb 	.word	0x080015bb
 8001444:	080015f7 	.word	0x080015f7
 8001448:	0800161b 	.word	0x0800161b
  {
    // Button 0: If pressed, increment the selected parameter; if held, do nothing (reserved for future use)
    case 0: 
      // Pointer to the selected parameter, its maximum value, and minimum value
      uint8_t *paramPtr1 = NULL;
 800144c:	2300      	movs	r3, #0
 800144e:	61fb      	str	r3, [r7, #28]
      uint8_t maxValue1 = 0;    
 8001450:	2300      	movs	r3, #0
 8001452:	76fb      	strb	r3, [r7, #27]
      uint8_t minValue1 = 0;  
 8001454:	2300      	movs	r3, #0
 8001456:	76bb      	strb	r3, [r7, #26]

      // Determine the parameter to increment based on the current selection
      switch (system_state.time_setup_cursor)
 8001458:	4b87      	ldr	r3, [pc, #540]	@ (8001678 <System_Time_Setup_Mode_Handle+0x258>)
 800145a:	789b      	ldrb	r3, [r3, #2]
 800145c:	2b05      	cmp	r3, #5
 800145e:	d839      	bhi.n	80014d4 <System_Time_Setup_Mode_Handle+0xb4>
 8001460:	a201      	add	r2, pc, #4	@ (adr r2, 8001468 <System_Time_Setup_Mode_Handle+0x48>)
 8001462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001466:	bf00      	nop
 8001468:	08001481 	.word	0x08001481
 800146c:	0800148f 	.word	0x0800148f
 8001470:	0800149d 	.word	0x0800149d
 8001474:	080014ab 	.word	0x080014ab
 8001478:	080014b9 	.word	0x080014b9
 800147c:	080014c7 	.word	0x080014c7
      {
        case TIME_MINUTE:  paramPtr1 = &time_setup_data.minute;  maxValue1 = 59; minValue1 = 0; break;
 8001480:	4b7e      	ldr	r3, [pc, #504]	@ (800167c <System_Time_Setup_Mode_Handle+0x25c>)
 8001482:	61fb      	str	r3, [r7, #28]
 8001484:	233b      	movs	r3, #59	@ 0x3b
 8001486:	76fb      	strb	r3, [r7, #27]
 8001488:	2300      	movs	r3, #0
 800148a:	76bb      	strb	r3, [r7, #26]
 800148c:	e023      	b.n	80014d6 <System_Time_Setup_Mode_Handle+0xb6>
        case TIME_HOUR:    paramPtr1 = &time_setup_data.hour;    maxValue1 = 23; minValue1 = 0; break;
 800148e:	4b7c      	ldr	r3, [pc, #496]	@ (8001680 <System_Time_Setup_Mode_Handle+0x260>)
 8001490:	61fb      	str	r3, [r7, #28]
 8001492:	2317      	movs	r3, #23
 8001494:	76fb      	strb	r3, [r7, #27]
 8001496:	2300      	movs	r3, #0
 8001498:	76bb      	strb	r3, [r7, #26]
 800149a:	e01c      	b.n	80014d6 <System_Time_Setup_Mode_Handle+0xb6>
        case TIME_DOW:     paramPtr1 = &time_setup_data.dow;     maxValue1 = 7;  minValue1 = 1; break;
 800149c:	4b79      	ldr	r3, [pc, #484]	@ (8001684 <System_Time_Setup_Mode_Handle+0x264>)
 800149e:	61fb      	str	r3, [r7, #28]
 80014a0:	2307      	movs	r3, #7
 80014a2:	76fb      	strb	r3, [r7, #27]
 80014a4:	2301      	movs	r3, #1
 80014a6:	76bb      	strb	r3, [r7, #26]
 80014a8:	e015      	b.n	80014d6 <System_Time_Setup_Mode_Handle+0xb6>
        case TIME_DOM:     paramPtr1 = &time_setup_data.dom;     maxValue1 = 31; minValue1 = 1; break;
 80014aa:	4b77      	ldr	r3, [pc, #476]	@ (8001688 <System_Time_Setup_Mode_Handle+0x268>)
 80014ac:	61fb      	str	r3, [r7, #28]
 80014ae:	231f      	movs	r3, #31
 80014b0:	76fb      	strb	r3, [r7, #27]
 80014b2:	2301      	movs	r3, #1
 80014b4:	76bb      	strb	r3, [r7, #26]
 80014b6:	e00e      	b.n	80014d6 <System_Time_Setup_Mode_Handle+0xb6>
        case TIME_MONTH:   paramPtr1 = &time_setup_data.month;   maxValue1 = 12; minValue1 = 1; break;
 80014b8:	4b74      	ldr	r3, [pc, #464]	@ (800168c <System_Time_Setup_Mode_Handle+0x26c>)
 80014ba:	61fb      	str	r3, [r7, #28]
 80014bc:	230c      	movs	r3, #12
 80014be:	76fb      	strb	r3, [r7, #27]
 80014c0:	2301      	movs	r3, #1
 80014c2:	76bb      	strb	r3, [r7, #26]
 80014c4:	e007      	b.n	80014d6 <System_Time_Setup_Mode_Handle+0xb6>
        case TIME_YEAR:    paramPtr1 = &time_setup_data.year;    maxValue1 = 99; minValue1 = 0; break;
 80014c6:	4b72      	ldr	r3, [pc, #456]	@ (8001690 <System_Time_Setup_Mode_Handle+0x270>)
 80014c8:	61fb      	str	r3, [r7, #28]
 80014ca:	2363      	movs	r3, #99	@ 0x63
 80014cc:	76fb      	strb	r3, [r7, #27]
 80014ce:	2300      	movs	r3, #0
 80014d0:	76bb      	strb	r3, [r7, #26]
 80014d2:	e000      	b.n	80014d6 <System_Time_Setup_Mode_Handle+0xb6>
        default: break;
 80014d4:	bf00      	nop
      }

      // Check if the button is pressed or held
      if (button->press_flag) 
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	7b5b      	ldrb	r3, [r3, #13]
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	2b00      	cmp	r3, #0
 80014de:	f000 80bf 	beq.w	8001660 <System_Time_Setup_Mode_Handle+0x240>
      {
        // Increment the selected parameter value once for a button press
        if (paramPtr1) 
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	f000 80bb 	beq.w	8001660 <System_Time_Setup_Mode_Handle+0x240>
        {
          // Increment the parameter value, wrapping around if necessary
          *paramPtr1 = (*paramPtr1 < maxValue1) ? (*paramPtr1 + 1) : minValue1;
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	7efa      	ldrb	r2, [r7, #27]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d904      	bls.n	80014fe <System_Time_Setup_Mode_Handle+0xde>
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	3301      	adds	r3, #1
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	e000      	b.n	8001500 <System_Time_Setup_Mode_Handle+0xe0>
 80014fe:	7ebb      	ldrb	r3, [r7, #26]
 8001500:	69fa      	ldr	r2, [r7, #28]
 8001502:	7013      	strb	r3, [r2, #0]

      //     // Update the start tick for the next hold cycle
      //     startTick1 = HAL_GetTick();
      //   }
      // } 
      break;
 8001504:	e0ac      	b.n	8001660 <System_Time_Setup_Mode_Handle+0x240>
    
      // Button 1: If pressed, decrement the selected parameter; if held, do nothing (reserved for future use)
      case 1: 
        // Pointer to the selected parameter, its maximum value, and minimum value
        uint8_t *paramPtr2 = NULL;
 8001506:	2300      	movs	r3, #0
 8001508:	617b      	str	r3, [r7, #20]
        uint8_t maxValue2 = 0;    
 800150a:	2300      	movs	r3, #0
 800150c:	74fb      	strb	r3, [r7, #19]
        uint8_t minValue2 = 0;  
 800150e:	2300      	movs	r3, #0
 8001510:	74bb      	strb	r3, [r7, #18]

        // Determine the parameter to decrement based on the current selection
        switch (system_state.time_setup_cursor)
 8001512:	4b59      	ldr	r3, [pc, #356]	@ (8001678 <System_Time_Setup_Mode_Handle+0x258>)
 8001514:	789b      	ldrb	r3, [r3, #2]
 8001516:	2b05      	cmp	r3, #5
 8001518:	d838      	bhi.n	800158c <System_Time_Setup_Mode_Handle+0x16c>
 800151a:	a201      	add	r2, pc, #4	@ (adr r2, 8001520 <System_Time_Setup_Mode_Handle+0x100>)
 800151c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001520:	08001539 	.word	0x08001539
 8001524:	08001547 	.word	0x08001547
 8001528:	08001555 	.word	0x08001555
 800152c:	08001563 	.word	0x08001563
 8001530:	08001571 	.word	0x08001571
 8001534:	0800157f 	.word	0x0800157f
        {
          case TIME_MINUTE:  paramPtr2 = &time_setup_data.minute;  maxValue2 = 59; minValue2 = 0; break;
 8001538:	4b50      	ldr	r3, [pc, #320]	@ (800167c <System_Time_Setup_Mode_Handle+0x25c>)
 800153a:	617b      	str	r3, [r7, #20]
 800153c:	233b      	movs	r3, #59	@ 0x3b
 800153e:	74fb      	strb	r3, [r7, #19]
 8001540:	2300      	movs	r3, #0
 8001542:	74bb      	strb	r3, [r7, #18]
 8001544:	e023      	b.n	800158e <System_Time_Setup_Mode_Handle+0x16e>
          case TIME_HOUR:    paramPtr2 = &time_setup_data.hour;    maxValue2 = 23; minValue2 = 0; break;
 8001546:	4b4e      	ldr	r3, [pc, #312]	@ (8001680 <System_Time_Setup_Mode_Handle+0x260>)
 8001548:	617b      	str	r3, [r7, #20]
 800154a:	2317      	movs	r3, #23
 800154c:	74fb      	strb	r3, [r7, #19]
 800154e:	2300      	movs	r3, #0
 8001550:	74bb      	strb	r3, [r7, #18]
 8001552:	e01c      	b.n	800158e <System_Time_Setup_Mode_Handle+0x16e>
          case TIME_DOW:     paramPtr2 = &time_setup_data.dow;     maxValue2 = 7;  minValue2 = 1; break;
 8001554:	4b4b      	ldr	r3, [pc, #300]	@ (8001684 <System_Time_Setup_Mode_Handle+0x264>)
 8001556:	617b      	str	r3, [r7, #20]
 8001558:	2307      	movs	r3, #7
 800155a:	74fb      	strb	r3, [r7, #19]
 800155c:	2301      	movs	r3, #1
 800155e:	74bb      	strb	r3, [r7, #18]
 8001560:	e015      	b.n	800158e <System_Time_Setup_Mode_Handle+0x16e>
          case TIME_DOM:     paramPtr2 = &time_setup_data.dom;     maxValue2 = 31; minValue2 = 1; break;
 8001562:	4b49      	ldr	r3, [pc, #292]	@ (8001688 <System_Time_Setup_Mode_Handle+0x268>)
 8001564:	617b      	str	r3, [r7, #20]
 8001566:	231f      	movs	r3, #31
 8001568:	74fb      	strb	r3, [r7, #19]
 800156a:	2301      	movs	r3, #1
 800156c:	74bb      	strb	r3, [r7, #18]
 800156e:	e00e      	b.n	800158e <System_Time_Setup_Mode_Handle+0x16e>
          case TIME_MONTH:   paramPtr2 = &time_setup_data.month;   maxValue2 = 12; minValue2 = 1; break;
 8001570:	4b46      	ldr	r3, [pc, #280]	@ (800168c <System_Time_Setup_Mode_Handle+0x26c>)
 8001572:	617b      	str	r3, [r7, #20]
 8001574:	230c      	movs	r3, #12
 8001576:	74fb      	strb	r3, [r7, #19]
 8001578:	2301      	movs	r3, #1
 800157a:	74bb      	strb	r3, [r7, #18]
 800157c:	e007      	b.n	800158e <System_Time_Setup_Mode_Handle+0x16e>
          case TIME_YEAR:    paramPtr2 = &time_setup_data.year;    maxValue2 = 99; minValue2 = 0; break;
 800157e:	4b44      	ldr	r3, [pc, #272]	@ (8001690 <System_Time_Setup_Mode_Handle+0x270>)
 8001580:	617b      	str	r3, [r7, #20]
 8001582:	2363      	movs	r3, #99	@ 0x63
 8001584:	74fb      	strb	r3, [r7, #19]
 8001586:	2300      	movs	r3, #0
 8001588:	74bb      	strb	r3, [r7, #18]
 800158a:	e000      	b.n	800158e <System_Time_Setup_Mode_Handle+0x16e>
          default: break;
 800158c:	bf00      	nop
        }

        // Check if the button is pressed or held
        if (button->press_flag) 
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	7b5b      	ldrb	r3, [r3, #13]
 8001592:	b2db      	uxtb	r3, r3
 8001594:	2b00      	cmp	r3, #0
 8001596:	d065      	beq.n	8001664 <System_Time_Setup_Mode_Handle+0x244>
        {
          // Decrement the selected parameter value once for a button press
          if (paramPtr2) 
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d062      	beq.n	8001664 <System_Time_Setup_Mode_Handle+0x244>
          {
            // Decrement the parameter value, wrapping around if necessary
            *paramPtr2 = (*paramPtr2 > minValue2) ? (*paramPtr2 - 1) : maxValue2;
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	7cba      	ldrb	r2, [r7, #18]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d204      	bcs.n	80015b2 <System_Time_Setup_Mode_Handle+0x192>
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	3b01      	subs	r3, #1
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	e000      	b.n	80015b4 <System_Time_Setup_Mode_Handle+0x194>
 80015b2:	7cfb      	ldrb	r3, [r7, #19]
 80015b4:	697a      	ldr	r2, [r7, #20]
 80015b6:	7013      	strb	r3, [r2, #0]

        //     // Update the start tick for the next hold cycle
        //     startTick2 = HAL_GetTick();
        //   }
        // } 
        break;
 80015b8:	e054      	b.n	8001664 <System_Time_Setup_Mode_Handle+0x244>

    // Button 2: If pressed, set the time using the current parameter values; if held, do nothing (reserved for future use)
    case 2: 
      // If the button is pressed, move to the previous parameter field, wrapping around if necessary
      if (button->press_flag)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	7b5b      	ldrb	r3, [r3, #13]
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d015      	beq.n	80015f0 <System_Time_Setup_Mode_Handle+0x1d0>
      {
        // Set the time using the current parameter values
        Time_Init
 80015c4:	4b2d      	ldr	r3, [pc, #180]	@ (800167c <System_Time_Setup_Mode_Handle+0x25c>)
 80015c6:	7818      	ldrb	r0, [r3, #0]
 80015c8:	4b2c      	ldr	r3, [pc, #176]	@ (800167c <System_Time_Setup_Mode_Handle+0x25c>)
 80015ca:	785c      	ldrb	r4, [r3, #1]
 80015cc:	4b2b      	ldr	r3, [pc, #172]	@ (800167c <System_Time_Setup_Mode_Handle+0x25c>)
 80015ce:	789d      	ldrb	r5, [r3, #2]
 80015d0:	4b2a      	ldr	r3, [pc, #168]	@ (800167c <System_Time_Setup_Mode_Handle+0x25c>)
 80015d2:	78db      	ldrb	r3, [r3, #3]
 80015d4:	4a29      	ldr	r2, [pc, #164]	@ (800167c <System_Time_Setup_Mode_Handle+0x25c>)
 80015d6:	7912      	ldrb	r2, [r2, #4]
 80015d8:	4928      	ldr	r1, [pc, #160]	@ (800167c <System_Time_Setup_Mode_Handle+0x25c>)
 80015da:	7949      	ldrb	r1, [r1, #5]
 80015dc:	9102      	str	r1, [sp, #8]
 80015de:	9201      	str	r2, [sp, #4]
 80015e0:	9300      	str	r3, [sp, #0]
 80015e2:	462b      	mov	r3, r5
 80015e4:	4622      	mov	r2, r4
 80015e6:	4601      	mov	r1, r0
 80015e8:	2000      	movs	r0, #0
 80015ea:	f7ff fba5 	bl	8000d38 <Time_Init>
      // If the button is held down, do nothing (reserved for future use)
      else if (button->hold_flag) 
      {
        // Reserved
      }
      break;
 80015ee:	e03e      	b.n	800166e <System_Time_Setup_Mode_Handle+0x24e>
      else if (button->hold_flag) 
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	7b9b      	ldrb	r3, [r3, #14]
      break;
 80015f4:	e03b      	b.n	800166e <System_Time_Setup_Mode_Handle+0x24e>

    // Button 3: If pressed, move to the next field; if held, do nothing (reserved for future use)
    case 3: 
      // If the button is pressed, move to the next parameter field, wrapping around if necessary
      if(button->press_flag)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	7b5b      	ldrb	r3, [r3, #13]
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d033      	beq.n	8001668 <System_Time_Setup_Mode_Handle+0x248>
      {
        system_state.time_setup_cursor = (system_state.time_setup_cursor == TIME_YEAR) ? TIME_MINUTE : (system_state.time_setup_cursor + 1);
 8001600:	4b1d      	ldr	r3, [pc, #116]	@ (8001678 <System_Time_Setup_Mode_Handle+0x258>)
 8001602:	789b      	ldrb	r3, [r3, #2]
 8001604:	2b05      	cmp	r3, #5
 8001606:	d004      	beq.n	8001612 <System_Time_Setup_Mode_Handle+0x1f2>
 8001608:	4b1b      	ldr	r3, [pc, #108]	@ (8001678 <System_Time_Setup_Mode_Handle+0x258>)
 800160a:	789b      	ldrb	r3, [r3, #2]
 800160c:	3301      	adds	r3, #1
 800160e:	b2db      	uxtb	r3, r3
 8001610:	e000      	b.n	8001614 <System_Time_Setup_Mode_Handle+0x1f4>
 8001612:	2300      	movs	r3, #0
 8001614:	4a18      	ldr	r2, [pc, #96]	@ (8001678 <System_Time_Setup_Mode_Handle+0x258>)
 8001616:	7093      	strb	r3, [r2, #2]
      //     system_param_data.month, 
      //     system_param_data.year
      //   );

      //   button->latch = true
      break;
 8001618:	e026      	b.n	8001668 <System_Time_Setup_Mode_Handle+0x248>

    // Button 4: If pressed, cycle through the system modes; if held, do nothing (reserved for future use)
    case 4:
      // If pressed, cycle through the time system modes, but the temporary setting data is still retained (avoid accidental press)
      if (button->press_flag)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	7b5b      	ldrb	r3, [r3, #13]
 800161e:	b2db      	uxtb	r3, r3
 8001620:	2b00      	cmp	r3, #0
 8001622:	d023      	beq.n	800166c <System_Time_Setup_Mode_Handle+0x24c>
      {
        // system_state.mode = (system_state.mode < (SYSTEM_MODE_NUM - 1)) ? (system_state.mode + 1) : 0;

        // Cycle through the next system mode
        system_state.mode = ALARM_SETUP_MODE;
 8001624:	4b14      	ldr	r3, [pc, #80]	@ (8001678 <System_Time_Setup_Mode_Handle+0x258>)
 8001626:	2202      	movs	r2, #2
 8001628:	701a      	strb	r2, [r3, #0]

        // Set the system past mode to time setup mode
        system_state.past_mode = TIME_SETUP_MODE;
 800162a:	4b13      	ldr	r3, [pc, #76]	@ (8001678 <System_Time_Setup_Mode_Handle+0x258>)
 800162c:	2201      	movs	r2, #1
 800162e:	705a      	strb	r2, [r3, #1]

        // Set the Alarm Setup data to the current time values for convenience
        alarm_setup_data =
        (ALARM_SETUP_DATA)
        {
          time_get_data.minute,       // Minutes: 0-59
 8001630:	4b18      	ldr	r3, [pc, #96]	@ (8001694 <System_Time_Setup_Mode_Handle+0x274>)
 8001632:	7858      	ldrb	r0, [r3, #1]
          time_get_data.hour,         // Hours: 0-23
 8001634:	4b17      	ldr	r3, [pc, #92]	@ (8001694 <System_Time_Setup_Mode_Handle+0x274>)
 8001636:	7899      	ldrb	r1, [r3, #2]
          NOT_USED_MODE,              // Select: DAY_OF_WEEK_MODE, DATE_OF_MONTH_MODE, NOT_USED_MODE         
          time_get_data.dayofweek,    // Day of the week: 1-7 (1 = Sunday, 2 = Monday, ..., 7 = Saturday)
 8001638:	4b16      	ldr	r3, [pc, #88]	@ (8001694 <System_Time_Setup_Mode_Handle+0x274>)
 800163a:	78da      	ldrb	r2, [r3, #3]
        alarm_setup_data =
 800163c:	4b16      	ldr	r3, [pc, #88]	@ (8001698 <System_Time_Setup_Mode_Handle+0x278>)
 800163e:	7018      	strb	r0, [r3, #0]
 8001640:	4b15      	ldr	r3, [pc, #84]	@ (8001698 <System_Time_Setup_Mode_Handle+0x278>)
 8001642:	7059      	strb	r1, [r3, #1]
 8001644:	4b14      	ldr	r3, [pc, #80]	@ (8001698 <System_Time_Setup_Mode_Handle+0x278>)
 8001646:	2102      	movs	r1, #2
 8001648:	7099      	strb	r1, [r3, #2]
 800164a:	4b13      	ldr	r3, [pc, #76]	@ (8001698 <System_Time_Setup_Mode_Handle+0x278>)
 800164c:	70da      	strb	r2, [r3, #3]
 800164e:	4b12      	ldr	r3, [pc, #72]	@ (8001698 <System_Time_Setup_Mode_Handle+0x278>)
 8001650:	2201      	movs	r2, #1
 8001652:	711a      	strb	r2, [r3, #4]
          true                       	// Alarm ON/OFF state: 1 = ON, 0 = OFF
        };
        
        // Reset the cursor for the Alarm Setup mode to the first parameter (minute)
        system_state.alarm_setup_cursor = ALARM_MINUTE;
 8001654:	4b08      	ldr	r3, [pc, #32]	@ (8001678 <System_Time_Setup_Mode_Handle+0x258>)
 8001656:	2200      	movs	r2, #0
 8001658:	70da      	strb	r2, [r3, #3]
      //     NOT_USED_MODE,              // Select: DAY_OF_WEEK_MODE, DATE_OF_MONTH_MODE, NOT_USED_MODE
      //     time_get_data.dayofweek,    // Day of the week: 1-7 (1 = Sunday, 2 = Monday, ..., 7 = Saturday), or Date of the month: 1-31
      //     true                        // true = ON, false = OFF
      //   };
      // }
      break;
 800165a:	e007      	b.n	800166c <System_Time_Setup_Mode_Handle+0x24c>

    default: 
      break;
 800165c:	bf00      	nop
 800165e:	e006      	b.n	800166e <System_Time_Setup_Mode_Handle+0x24e>
      break;
 8001660:	bf00      	nop
 8001662:	e004      	b.n	800166e <System_Time_Setup_Mode_Handle+0x24e>
        break;
 8001664:	bf00      	nop
 8001666:	e002      	b.n	800166e <System_Time_Setup_Mode_Handle+0x24e>
      break;
 8001668:	bf00      	nop
 800166a:	e000      	b.n	800166e <System_Time_Setup_Mode_Handle+0x24e>
      break;
 800166c:	bf00      	nop
  }
}
 800166e:	bf00      	nop
 8001670:	3720      	adds	r7, #32
 8001672:	46bd      	mov	sp, r7
 8001674:	bdb0      	pop	{r4, r5, r7, pc}
 8001676:	bf00      	nop
 8001678:	20000388 	.word	0x20000388
 800167c:	20000390 	.word	0x20000390
 8001680:	20000391 	.word	0x20000391
 8001684:	20000392 	.word	0x20000392
 8001688:	20000393 	.word	0x20000393
 800168c:	20000394 	.word	0x20000394
 8001690:	20000395 	.word	0x20000395
 8001694:	200003a0 	.word	0x200003a0
 8001698:	20000398 	.word	0x20000398

0800169c <System_Alarm_Setup_Mode_Handle>:
 * @brief  Handles the alarm setup mode based on button actions.
 * @param  button: Pointer to the BUTTON structure containing button state and index.
 * @retval None
 */
void System_Alarm_Setup_Mode_Handle (BUTTON_DATA *button)
{ 
 800169c:	b5b0      	push	{r4, r5, r7, lr}
 800169e:	b08a      	sub	sp, #40	@ 0x28
 80016a0:	af04      	add	r7, sp, #16
 80016a2:	6078      	str	r0, [r7, #4]
  switch (button->index) 
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	799b      	ldrb	r3, [r3, #6]
 80016a8:	2b04      	cmp	r3, #4
 80016aa:	f200 8178 	bhi.w	800199e <System_Alarm_Setup_Mode_Handle+0x302>
 80016ae:	a201      	add	r2, pc, #4	@ (adr r2, 80016b4 <System_Alarm_Setup_Mode_Handle+0x18>)
 80016b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016b4:	080016c9 	.word	0x080016c9
 80016b8:	0800178d 	.word	0x0800178d
 80016bc:	08001879 	.word	0x08001879
 80016c0:	08001941 	.word	0x08001941
 80016c4:	08001981 	.word	0x08001981
  {
    // Button 0: If pressed, increment the selected parameter; if held, do nothing (reserved for future use)
    case 0: 
      // Pointer to the selected parameter, its maximum value, and minimum value
      uint8_t *paramPtr1 = NULL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	617b      	str	r3, [r7, #20]
      uint8_t maxValue1 = 0;    
 80016cc:	2300      	movs	r3, #0
 80016ce:	74fb      	strb	r3, [r7, #19]
      uint8_t minValue1 = 0;  
 80016d0:	2300      	movs	r3, #0
 80016d2:	74bb      	strb	r3, [r7, #18]

      // Determine the parameter to increment based on the current selection
      switch (system_state.alarm_setup_cursor)
 80016d4:	4ba1      	ldr	r3, [pc, #644]	@ (800195c <System_Alarm_Setup_Mode_Handle+0x2c0>)
 80016d6:	78db      	ldrb	r3, [r3, #3]
 80016d8:	2b04      	cmp	r3, #4
 80016da:	d839      	bhi.n	8001750 <System_Alarm_Setup_Mode_Handle+0xb4>
 80016dc:	a201      	add	r2, pc, #4	@ (adr r2, 80016e4 <System_Alarm_Setup_Mode_Handle+0x48>)
 80016de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016e2:	bf00      	nop
 80016e4:	080016f9 	.word	0x080016f9
 80016e8:	08001707 	.word	0x08001707
 80016ec:	08001715 	.word	0x08001715
 80016f0:	08001723 	.word	0x08001723
 80016f4:	08001731 	.word	0x08001731
      {
        case ALARM_MINUTE:  paramPtr1 = &alarm_setup_data.minute;  maxValue1 = 59; minValue1 = 0; break;
 80016f8:	4b99      	ldr	r3, [pc, #612]	@ (8001960 <System_Alarm_Setup_Mode_Handle+0x2c4>)
 80016fa:	617b      	str	r3, [r7, #20]
 80016fc:	233b      	movs	r3, #59	@ 0x3b
 80016fe:	74fb      	strb	r3, [r7, #19]
 8001700:	2300      	movs	r3, #0
 8001702:	74bb      	strb	r3, [r7, #18]
 8001704:	e025      	b.n	8001752 <System_Alarm_Setup_Mode_Handle+0xb6>
        case ALARM_HOUR:    paramPtr1 = &alarm_setup_data.hour;    maxValue1 = 23; minValue1 = 0; break;
 8001706:	4b97      	ldr	r3, [pc, #604]	@ (8001964 <System_Alarm_Setup_Mode_Handle+0x2c8>)
 8001708:	617b      	str	r3, [r7, #20]
 800170a:	2317      	movs	r3, #23
 800170c:	74fb      	strb	r3, [r7, #19]
 800170e:	2300      	movs	r3, #0
 8001710:	74bb      	strb	r3, [r7, #18]
 8001712:	e01e      	b.n	8001752 <System_Alarm_Setup_Mode_Handle+0xb6>
        case ALARM_DY_DT:   paramPtr1 = (uint8_t *)&alarm_setup_data.dy_dt; maxValue1 = 2; minValue1 = 0; break;
 8001714:	4b94      	ldr	r3, [pc, #592]	@ (8001968 <System_Alarm_Setup_Mode_Handle+0x2cc>)
 8001716:	617b      	str	r3, [r7, #20]
 8001718:	2302      	movs	r3, #2
 800171a:	74fb      	strb	r3, [r7, #19]
 800171c:	2300      	movs	r3, #0
 800171e:	74bb      	strb	r3, [r7, #18]
 8001720:	e017      	b.n	8001752 <System_Alarm_Setup_Mode_Handle+0xb6>
        case ALARM_DOW_DOM: paramPtr1 = &alarm_setup_data.dow_dom; maxValue1 = 31; minValue1 = 1; break;
 8001722:	4b92      	ldr	r3, [pc, #584]	@ (800196c <System_Alarm_Setup_Mode_Handle+0x2d0>)
 8001724:	617b      	str	r3, [r7, #20]
 8001726:	231f      	movs	r3, #31
 8001728:	74fb      	strb	r3, [r7, #19]
 800172a:	2301      	movs	r3, #1
 800172c:	74bb      	strb	r3, [r7, #18]
 800172e:	e010      	b.n	8001752 <System_Alarm_Setup_Mode_Handle+0xb6>
        case ALARM_ON_OFF:  alarm_setup_data.on_off = !alarm_setup_data.on_off;                   break;
 8001730:	4b8b      	ldr	r3, [pc, #556]	@ (8001960 <System_Alarm_Setup_Mode_Handle+0x2c4>)
 8001732:	791b      	ldrb	r3, [r3, #4]
 8001734:	2b00      	cmp	r3, #0
 8001736:	bf14      	ite	ne
 8001738:	2301      	movne	r3, #1
 800173a:	2300      	moveq	r3, #0
 800173c:	b2db      	uxtb	r3, r3
 800173e:	f083 0301 	eor.w	r3, r3, #1
 8001742:	b2db      	uxtb	r3, r3
 8001744:	f003 0301 	and.w	r3, r3, #1
 8001748:	b2da      	uxtb	r2, r3
 800174a:	4b85      	ldr	r3, [pc, #532]	@ (8001960 <System_Alarm_Setup_Mode_Handle+0x2c4>)
 800174c:	711a      	strb	r2, [r3, #4]
 800174e:	e000      	b.n	8001752 <System_Alarm_Setup_Mode_Handle+0xb6>
        default: break;
 8001750:	bf00      	nop
      }

      if (system_state.alarm_setup_cursor == ALARM_ON_OFF)
 8001752:	4b82      	ldr	r3, [pc, #520]	@ (800195c <System_Alarm_Setup_Mode_Handle+0x2c0>)
 8001754:	78db      	ldrb	r3, [r3, #3]
 8001756:	2b04      	cmp	r3, #4
 8001758:	f000 8123 	beq.w	80019a2 <System_Alarm_Setup_Mode_Handle+0x306>
      {
        break;
      }

      // Check if the button is pressed or held
      if (button->press_flag) 
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	7b5b      	ldrb	r3, [r3, #13]
 8001760:	b2db      	uxtb	r3, r3
 8001762:	2b00      	cmp	r3, #0
 8001764:	f000 811f 	beq.w	80019a6 <System_Alarm_Setup_Mode_Handle+0x30a>
      {
        // Increment the selected parameter value once for a button press
        if (paramPtr1) 
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	2b00      	cmp	r3, #0
 800176c:	f000 811b 	beq.w	80019a6 <System_Alarm_Setup_Mode_Handle+0x30a>
        {
          // Increment the parameter value, wrapping around if necessary
          *paramPtr1 = (*paramPtr1 < maxValue1) ? (*paramPtr1 + 1) : minValue1;
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	7cfa      	ldrb	r2, [r7, #19]
 8001776:	429a      	cmp	r2, r3
 8001778:	d904      	bls.n	8001784 <System_Alarm_Setup_Mode_Handle+0xe8>
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	3301      	adds	r3, #1
 8001780:	b2db      	uxtb	r3, r3
 8001782:	e000      	b.n	8001786 <System_Alarm_Setup_Mode_Handle+0xea>
 8001784:	7cbb      	ldrb	r3, [r7, #18]
 8001786:	697a      	ldr	r2, [r7, #20]
 8001788:	7013      	strb	r3, [r2, #0]
      //   }

      //   // Update the start tick for the next hold cycle
      //   startTick1 = HAL_GetTick();
      // } 
      break;
 800178a:	e10c      	b.n	80019a6 <System_Alarm_Setup_Mode_Handle+0x30a>

      // Button 1: If pressed, decrement the selected parameter; if held, do nothing (reserved for future use)
      case 1: 
        // Pointer to the selected parameter, its maximum value, and minimum value
        uint8_t *paramPtr2 = NULL;
 800178c:	2300      	movs	r3, #0
 800178e:	60fb      	str	r3, [r7, #12]
        uint8_t maxValue2 = 0;    
 8001790:	2300      	movs	r3, #0
 8001792:	72fb      	strb	r3, [r7, #11]
        uint8_t minValue2 = 0;  
 8001794:	2300      	movs	r3, #0
 8001796:	72bb      	strb	r3, [r7, #10]

        // Determine the parameter to decrement based on the current selection
        switch (system_state.alarm_setup_cursor)
 8001798:	4b70      	ldr	r3, [pc, #448]	@ (800195c <System_Alarm_Setup_Mode_Handle+0x2c0>)
 800179a:	78db      	ldrb	r3, [r3, #3]
 800179c:	2b04      	cmp	r3, #4
 800179e:	d839      	bhi.n	8001814 <System_Alarm_Setup_Mode_Handle+0x178>
 80017a0:	a201      	add	r2, pc, #4	@ (adr r2, 80017a8 <System_Alarm_Setup_Mode_Handle+0x10c>)
 80017a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017a6:	bf00      	nop
 80017a8:	080017bd 	.word	0x080017bd
 80017ac:	080017cb 	.word	0x080017cb
 80017b0:	080017d9 	.word	0x080017d9
 80017b4:	080017e7 	.word	0x080017e7
 80017b8:	080017f5 	.word	0x080017f5
        {
          case ALARM_MINUTE:  paramPtr2 = &alarm_setup_data.minute;  maxValue2 = 59; minValue2 = 0; break;
 80017bc:	4b68      	ldr	r3, [pc, #416]	@ (8001960 <System_Alarm_Setup_Mode_Handle+0x2c4>)
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	233b      	movs	r3, #59	@ 0x3b
 80017c2:	72fb      	strb	r3, [r7, #11]
 80017c4:	2300      	movs	r3, #0
 80017c6:	72bb      	strb	r3, [r7, #10]
 80017c8:	e025      	b.n	8001816 <System_Alarm_Setup_Mode_Handle+0x17a>
          case ALARM_HOUR:    paramPtr2 = &alarm_setup_data.hour;    maxValue2 = 23; minValue2 = 0; break;
 80017ca:	4b66      	ldr	r3, [pc, #408]	@ (8001964 <System_Alarm_Setup_Mode_Handle+0x2c8>)
 80017cc:	60fb      	str	r3, [r7, #12]
 80017ce:	2317      	movs	r3, #23
 80017d0:	72fb      	strb	r3, [r7, #11]
 80017d2:	2300      	movs	r3, #0
 80017d4:	72bb      	strb	r3, [r7, #10]
 80017d6:	e01e      	b.n	8001816 <System_Alarm_Setup_Mode_Handle+0x17a>
          case ALARM_DY_DT:   paramPtr2 = (uint8_t *)&alarm_setup_data.dy_dt; maxValue2 = 2; minValue2 = 0; break;
 80017d8:	4b63      	ldr	r3, [pc, #396]	@ (8001968 <System_Alarm_Setup_Mode_Handle+0x2cc>)
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	2302      	movs	r3, #2
 80017de:	72fb      	strb	r3, [r7, #11]
 80017e0:	2300      	movs	r3, #0
 80017e2:	72bb      	strb	r3, [r7, #10]
 80017e4:	e017      	b.n	8001816 <System_Alarm_Setup_Mode_Handle+0x17a>
          case ALARM_DOW_DOM: paramPtr2 = &alarm_setup_data.dow_dom; maxValue2 = 31; minValue2 = 1; break;
 80017e6:	4b61      	ldr	r3, [pc, #388]	@ (800196c <System_Alarm_Setup_Mode_Handle+0x2d0>)
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	231f      	movs	r3, #31
 80017ec:	72fb      	strb	r3, [r7, #11]
 80017ee:	2301      	movs	r3, #1
 80017f0:	72bb      	strb	r3, [r7, #10]
 80017f2:	e010      	b.n	8001816 <System_Alarm_Setup_Mode_Handle+0x17a>
          case ALARM_ON_OFF:  alarm_setup_data.on_off = !alarm_setup_data.on_off;                  break;
 80017f4:	4b5a      	ldr	r3, [pc, #360]	@ (8001960 <System_Alarm_Setup_Mode_Handle+0x2c4>)
 80017f6:	791b      	ldrb	r3, [r3, #4]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	bf14      	ite	ne
 80017fc:	2301      	movne	r3, #1
 80017fe:	2300      	moveq	r3, #0
 8001800:	b2db      	uxtb	r3, r3
 8001802:	f083 0301 	eor.w	r3, r3, #1
 8001806:	b2db      	uxtb	r3, r3
 8001808:	f003 0301 	and.w	r3, r3, #1
 800180c:	b2da      	uxtb	r2, r3
 800180e:	4b54      	ldr	r3, [pc, #336]	@ (8001960 <System_Alarm_Setup_Mode_Handle+0x2c4>)
 8001810:	711a      	strb	r2, [r3, #4]
 8001812:	e000      	b.n	8001816 <System_Alarm_Setup_Mode_Handle+0x17a>
          default: break;
 8001814:	bf00      	nop
        }

        // Check if the selected parameter is ON/OFF
        if (system_state.alarm_setup_cursor == ALARM_ON_OFF)
 8001816:	4b51      	ldr	r3, [pc, #324]	@ (800195c <System_Alarm_Setup_Mode_Handle+0x2c0>)
 8001818:	78db      	ldrb	r3, [r3, #3]
 800181a:	2b04      	cmp	r3, #4
 800181c:	f000 80c5 	beq.w	80019aa <System_Alarm_Setup_Mode_Handle+0x30e>
        {
          break;
        }

        // Check if the button is pressed or held
        if (button->press_flag) 
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	7b5b      	ldrb	r3, [r3, #13]
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b00      	cmp	r3, #0
 8001828:	f000 80c1 	beq.w	80019ae <System_Alarm_Setup_Mode_Handle+0x312>
        {
          // Check if the selected parameter is ON/OFF
          if (system_state.alarm_setup_cursor == ALARM_ON_OFF)
 800182c:	4b4b      	ldr	r3, [pc, #300]	@ (800195c <System_Alarm_Setup_Mode_Handle+0x2c0>)
 800182e:	78db      	ldrb	r3, [r3, #3]
 8001830:	2b04      	cmp	r3, #4
 8001832:	d10f      	bne.n	8001854 <System_Alarm_Setup_Mode_Handle+0x1b8>
          {
            // Toggle the on/off state of the alarm
            alarm_setup_data.on_off = !alarm_setup_data.on_off;
 8001834:	4b4a      	ldr	r3, [pc, #296]	@ (8001960 <System_Alarm_Setup_Mode_Handle+0x2c4>)
 8001836:	791b      	ldrb	r3, [r3, #4]
 8001838:	2b00      	cmp	r3, #0
 800183a:	bf14      	ite	ne
 800183c:	2301      	movne	r3, #1
 800183e:	2300      	moveq	r3, #0
 8001840:	b2db      	uxtb	r3, r3
 8001842:	f083 0301 	eor.w	r3, r3, #1
 8001846:	b2db      	uxtb	r3, r3
 8001848:	f003 0301 	and.w	r3, r3, #1
 800184c:	b2da      	uxtb	r2, r3
 800184e:	4b44      	ldr	r3, [pc, #272]	@ (8001960 <System_Alarm_Setup_Mode_Handle+0x2c4>)
 8001850:	711a      	strb	r2, [r3, #4]

        //     // Update the start tick for the next hold cycle
        //     startTick2 = HAL_GetTick();
        //   }
        // } 
        break;
 8001852:	e0ac      	b.n	80019ae <System_Alarm_Setup_Mode_Handle+0x312>
            if (paramPtr2) 
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2b00      	cmp	r3, #0
 8001858:	f000 80a9 	beq.w	80019ae <System_Alarm_Setup_Mode_Handle+0x312>
              *paramPtr2 = (*paramPtr2 > minValue2) ? (*paramPtr2 - 1) : maxValue2;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	7aba      	ldrb	r2, [r7, #10]
 8001862:	429a      	cmp	r2, r3
 8001864:	d204      	bcs.n	8001870 <System_Alarm_Setup_Mode_Handle+0x1d4>
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	3b01      	subs	r3, #1
 800186c:	b2db      	uxtb	r3, r3
 800186e:	e000      	b.n	8001872 <System_Alarm_Setup_Mode_Handle+0x1d6>
 8001870:	7afb      	ldrb	r3, [r7, #11]
 8001872:	68fa      	ldr	r2, [r7, #12]
 8001874:	7013      	strb	r3, [r2, #0]
        break;
 8001876:	e09a      	b.n	80019ae <System_Alarm_Setup_Mode_Handle+0x312>
    
    // Button 2: If pressed, save the alarm and return to default mode; if held, do nothing (reserved for future use)
    case 2:
      // If the button is pressed, save the alarm and return to default mode 
      if (button->press_flag)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	7b5b      	ldrb	r3, [r3, #13]
 800187c:	b2db      	uxtb	r3, r3
 800187e:	2b00      	cmp	r3, #0
 8001880:	d05b      	beq.n	800193a <System_Alarm_Setup_Mode_Handle+0x29e>
      {
        // If the previous mode is Alarm View Mode
        // Use the system cursor instead to keep the alarm slot pointer unchanged
        if (system_state.past_mode == ALARM_VIEW_MODE)
 8001882:	4b36      	ldr	r3, [pc, #216]	@ (800195c <System_Alarm_Setup_Mode_Handle+0x2c0>)
 8001884:	785b      	ldrb	r3, [r3, #1]
 8001886:	2b03      	cmp	r3, #3
 8001888:	d124      	bne.n	80018d4 <System_Alarm_Setup_Mode_Handle+0x238>
        {
          // Save the alarm to EEPROM and return to Default Mode
          //    void Alarm_Set (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow_dom, ALARM_DY_DT_MODE dy_dt, uint8_t on_off, uint8_t slot)
          Alarm_Set
 800188a:	4b35      	ldr	r3, [pc, #212]	@ (8001960 <System_Alarm_Setup_Mode_Handle+0x2c4>)
 800188c:	7818      	ldrb	r0, [r3, #0]
 800188e:	4b34      	ldr	r3, [pc, #208]	@ (8001960 <System_Alarm_Setup_Mode_Handle+0x2c4>)
 8001890:	785c      	ldrb	r4, [r3, #1]
 8001892:	4b33      	ldr	r3, [pc, #204]	@ (8001960 <System_Alarm_Setup_Mode_Handle+0x2c4>)
 8001894:	78dd      	ldrb	r5, [r3, #3]
 8001896:	4b32      	ldr	r3, [pc, #200]	@ (8001960 <System_Alarm_Setup_Mode_Handle+0x2c4>)
 8001898:	789b      	ldrb	r3, [r3, #2]
 800189a:	4a31      	ldr	r2, [pc, #196]	@ (8001960 <System_Alarm_Setup_Mode_Handle+0x2c4>)
 800189c:	7912      	ldrb	r2, [r2, #4]
 800189e:	492f      	ldr	r1, [pc, #188]	@ (800195c <System_Alarm_Setup_Mode_Handle+0x2c0>)
 80018a0:	7909      	ldrb	r1, [r1, #4]
 80018a2:	9102      	str	r1, [sp, #8]
 80018a4:	9201      	str	r2, [sp, #4]
 80018a6:	9300      	str	r3, [sp, #0]
 80018a8:	462b      	mov	r3, r5
 80018aa:	4622      	mov	r2, r4
 80018ac:	4601      	mov	r1, r0
 80018ae:	2000      	movs	r0, #0
 80018b0:	f7ff fa6e 	bl	8000d90 <Alarm_Set>
            alarm_setup_data.on_off,
            system_state.alarm_view_cursor         // Save the alarm at the address where the cursor points at in Alarm View Mode
          );

          // Update the newly set alarm data
          Alarm_Get(system_state.alarm_view_cursor, &alarm_get_data[system_state.alarm_view_cursor]);
 80018b4:	4b29      	ldr	r3, [pc, #164]	@ (800195c <System_Alarm_Setup_Mode_Handle+0x2c0>)
 80018b6:	791a      	ldrb	r2, [r3, #4]
 80018b8:	4b28      	ldr	r3, [pc, #160]	@ (800195c <System_Alarm_Setup_Mode_Handle+0x2c0>)
 80018ba:	791b      	ldrb	r3, [r3, #4]
 80018bc:	4619      	mov	r1, r3
 80018be:	460b      	mov	r3, r1
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	440b      	add	r3, r1
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	492a      	ldr	r1, [pc, #168]	@ (8001970 <System_Alarm_Setup_Mode_Handle+0x2d4>)
 80018c8:	440b      	add	r3, r1
 80018ca:	4619      	mov	r1, r3
 80018cc:	4610      	mov	r0, r2
 80018ce:	f7ff faaf 	bl	8000e30 <Alarm_Get>
      // If the button is held down, do nothing (reserved for future use)
      else if (button->hold_flag) 
      {
        // Reserved
      }
      break;
 80018d2:	e071      	b.n	80019b8 <System_Alarm_Setup_Mode_Handle+0x31c>
          Alarm_Set
 80018d4:	4b22      	ldr	r3, [pc, #136]	@ (8001960 <System_Alarm_Setup_Mode_Handle+0x2c4>)
 80018d6:	7818      	ldrb	r0, [r3, #0]
 80018d8:	4b21      	ldr	r3, [pc, #132]	@ (8001960 <System_Alarm_Setup_Mode_Handle+0x2c4>)
 80018da:	785c      	ldrb	r4, [r3, #1]
 80018dc:	4b20      	ldr	r3, [pc, #128]	@ (8001960 <System_Alarm_Setup_Mode_Handle+0x2c4>)
 80018de:	78dd      	ldrb	r5, [r3, #3]
 80018e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001960 <System_Alarm_Setup_Mode_Handle+0x2c4>)
 80018e2:	789b      	ldrb	r3, [r3, #2]
 80018e4:	4a1e      	ldr	r2, [pc, #120]	@ (8001960 <System_Alarm_Setup_Mode_Handle+0x2c4>)
 80018e6:	7912      	ldrb	r2, [r2, #4]
 80018e8:	4922      	ldr	r1, [pc, #136]	@ (8001974 <System_Alarm_Setup_Mode_Handle+0x2d8>)
 80018ea:	7809      	ldrb	r1, [r1, #0]
 80018ec:	9102      	str	r1, [sp, #8]
 80018ee:	9201      	str	r2, [sp, #4]
 80018f0:	9300      	str	r3, [sp, #0]
 80018f2:	462b      	mov	r3, r5
 80018f4:	4622      	mov	r2, r4
 80018f6:	4601      	mov	r1, r0
 80018f8:	2000      	movs	r0, #0
 80018fa:	f7ff fa49 	bl	8000d90 <Alarm_Set>
          Alarm_Get(alarm_slot_ptr, &alarm_get_data[alarm_slot_ptr]);
 80018fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001974 <System_Alarm_Setup_Mode_Handle+0x2d8>)
 8001900:	781a      	ldrb	r2, [r3, #0]
 8001902:	4b1c      	ldr	r3, [pc, #112]	@ (8001974 <System_Alarm_Setup_Mode_Handle+0x2d8>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	4619      	mov	r1, r3
 8001908:	460b      	mov	r3, r1
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	440b      	add	r3, r1
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	4917      	ldr	r1, [pc, #92]	@ (8001970 <System_Alarm_Setup_Mode_Handle+0x2d4>)
 8001912:	440b      	add	r3, r1
 8001914:	4619      	mov	r1, r3
 8001916:	4610      	mov	r0, r2
 8001918:	f7ff fa8a 	bl	8000e30 <Alarm_Get>
          alarm_slot_ptr = (alarm_slot_ptr < ALARM_SLOT_NUM) ? (alarm_slot_ptr + 1) : 0;
 800191c:	4b15      	ldr	r3, [pc, #84]	@ (8001974 <System_Alarm_Setup_Mode_Handle+0x2d8>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	2b09      	cmp	r3, #9
 8001922:	d804      	bhi.n	800192e <System_Alarm_Setup_Mode_Handle+0x292>
 8001924:	4b13      	ldr	r3, [pc, #76]	@ (8001974 <System_Alarm_Setup_Mode_Handle+0x2d8>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	3301      	adds	r3, #1
 800192a:	b2db      	uxtb	r3, r3
 800192c:	e000      	b.n	8001930 <System_Alarm_Setup_Mode_Handle+0x294>
 800192e:	2300      	movs	r3, #0
 8001930:	4a10      	ldr	r2, [pc, #64]	@ (8001974 <System_Alarm_Setup_Mode_Handle+0x2d8>)
 8001932:	7013      	strb	r3, [r2, #0]
          Alarm_Slot_Pointer_Set();
 8001934:	f7ff faf4 	bl	8000f20 <Alarm_Slot_Pointer_Set>
      break;
 8001938:	e03e      	b.n	80019b8 <System_Alarm_Setup_Mode_Handle+0x31c>
      else if (button->hold_flag) 
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	7b9b      	ldrb	r3, [r3, #14]
      break;
 800193e:	e03b      	b.n	80019b8 <System_Alarm_Setup_Mode_Handle+0x31c>

    // Button 3: If pressed, move to the next field; if held, do nothing (reserved for future use)
    case 3:
      // If the button is pressed, move to the next parameter field, wrapping around if necessary  
      if (button->press_flag)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	7b5b      	ldrb	r3, [r3, #13]
 8001944:	b2db      	uxtb	r3, r3
 8001946:	2b00      	cmp	r3, #0
 8001948:	d033      	beq.n	80019b2 <System_Alarm_Setup_Mode_Handle+0x316>
      {
        system_state.alarm_setup_cursor = (system_state.alarm_setup_cursor == ALARM_ON_OFF) ? ALARM_MINUTE : (system_state.alarm_setup_cursor + 1);
 800194a:	4b04      	ldr	r3, [pc, #16]	@ (800195c <System_Alarm_Setup_Mode_Handle+0x2c0>)
 800194c:	78db      	ldrb	r3, [r3, #3]
 800194e:	2b04      	cmp	r3, #4
 8001950:	d012      	beq.n	8001978 <System_Alarm_Setup_Mode_Handle+0x2dc>
 8001952:	4b02      	ldr	r3, [pc, #8]	@ (800195c <System_Alarm_Setup_Mode_Handle+0x2c0>)
 8001954:	78db      	ldrb	r3, [r3, #3]
 8001956:	3301      	adds	r3, #1
 8001958:	b2db      	uxtb	r3, r3
 800195a:	e00e      	b.n	800197a <System_Alarm_Setup_Mode_Handle+0x2de>
 800195c:	20000388 	.word	0x20000388
 8001960:	20000398 	.word	0x20000398
 8001964:	20000399 	.word	0x20000399
 8001968:	2000039a 	.word	0x2000039a
 800196c:	2000039b 	.word	0x2000039b
 8001970:	200003a8 	.word	0x200003a8
 8001974:	200003e4 	.word	0x200003e4
 8001978:	2300      	movs	r3, #0
 800197a:	4a11      	ldr	r2, [pc, #68]	@ (80019c0 <System_Alarm_Setup_Mode_Handle+0x324>)
 800197c:	70d3      	strb	r3, [r2, #3]
      //   }

      //   // Reset the button latch to avoid function replication
      //   button->latch = true;
      // }
      break;
 800197e:	e018      	b.n	80019b2 <System_Alarm_Setup_Mode_Handle+0x316>
    
    // Button 4: If pressed, cycle through the system modes; if held, do nothing (reserved for future use)
    case 4:
      // If pressed, cycle through the time system modes, but the temporary setting data is still retained (avoid accidental press)
      if (button->press_flag)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	7b5b      	ldrb	r3, [r3, #13]
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b00      	cmp	r3, #0
 8001988:	d015      	beq.n	80019b6 <System_Alarm_Setup_Mode_Handle+0x31a>
      {
        // system_state.mode = (system_state.mode < (SYSTEM_MODE_NUM - 1)) ? (system_state.mode + 1) : 0;
        
        // Cycle through the next system mode
        system_state.mode = ALARM_VIEW_MODE;
 800198a:	4b0d      	ldr	r3, [pc, #52]	@ (80019c0 <System_Alarm_Setup_Mode_Handle+0x324>)
 800198c:	2203      	movs	r2, #3
 800198e:	701a      	strb	r2, [r3, #0]

        // Set the system past mode to alarm setup mode
        system_state.past_mode = ALARM_SETUP_MODE;
 8001990:	4b0b      	ldr	r3, [pc, #44]	@ (80019c0 <System_Alarm_Setup_Mode_Handle+0x324>)
 8001992:	2202      	movs	r2, #2
 8001994:	705a      	strb	r2, [r3, #1]

        // Reset the cursor for the Alarm View mode
        system_state.alarm_view_cursor = 0; 
 8001996:	4b0a      	ldr	r3, [pc, #40]	@ (80019c0 <System_Alarm_Setup_Mode_Handle+0x324>)
 8001998:	2200      	movs	r2, #0
 800199a:	711a      	strb	r2, [r3, #4]
      //     NOT_USED_MODE,              // Select: DAY_OF_WEEK_MODE, DATE_OF_MONTH_MODE, NOT_USED_MODE
      //     time_get_data.dayofweek,    // Day of the week: 1-7 (1 = Sunday, 2 = Monday, ..., 7 = Saturday), or Date of the month: 1-31
      //     true                        // true = ON, false = OFF
      //   };
      // }
      break;
 800199c:	e00b      	b.n	80019b6 <System_Alarm_Setup_Mode_Handle+0x31a>

    default:
      // Reserved for future use
      break;
 800199e:	bf00      	nop
 80019a0:	e00a      	b.n	80019b8 <System_Alarm_Setup_Mode_Handle+0x31c>
        break;
 80019a2:	bf00      	nop
 80019a4:	e008      	b.n	80019b8 <System_Alarm_Setup_Mode_Handle+0x31c>
      break;
 80019a6:	bf00      	nop
 80019a8:	e006      	b.n	80019b8 <System_Alarm_Setup_Mode_Handle+0x31c>
          break;
 80019aa:	bf00      	nop
 80019ac:	e004      	b.n	80019b8 <System_Alarm_Setup_Mode_Handle+0x31c>
        break;
 80019ae:	bf00      	nop
 80019b0:	e002      	b.n	80019b8 <System_Alarm_Setup_Mode_Handle+0x31c>
      break;
 80019b2:	bf00      	nop
 80019b4:	e000      	b.n	80019b8 <System_Alarm_Setup_Mode_Handle+0x31c>
      break;
 80019b6:	bf00      	nop
  }
}
 80019b8:	bf00      	nop
 80019ba:	3718      	adds	r7, #24
 80019bc:	46bd      	mov	sp, r7
 80019be:	bdb0      	pop	{r4, r5, r7, pc}
 80019c0:	20000388 	.word	0x20000388

080019c4 <System_Alarm_View_Mode_Handle>:
 * @brief  Handles the alarm view mode based on button actions.
 * @param  button: Pointer to the BUTTON structure containing button state and index.
 * @retval None
 */
void System_Alarm_View_Mode_Handle (BUTTON_DATA *button)
{ 
 80019c4:	b5b0      	push	{r4, r5, r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af04      	add	r7, sp, #16
 80019ca:	6078      	str	r0, [r7, #4]
  // Handle button actions in alarm view mode
  switch (button->index) 
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	799b      	ldrb	r3, [r3, #6]
 80019d0:	2b04      	cmp	r3, #4
 80019d2:	f200 8115 	bhi.w	8001c00 <System_Alarm_View_Mode_Handle+0x23c>
 80019d6:	a201      	add	r2, pc, #4	@ (adr r2, 80019dc <System_Alarm_View_Mode_Handle+0x18>)
 80019d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019dc:	080019f1 	.word	0x080019f1
 80019e0:	08001a1b 	.word	0x08001a1b
 80019e4:	08001a45 	.word	0x08001a45
 80019e8:	08001b45 	.word	0x08001b45
 80019ec:	08001be9 	.word	0x08001be9
  {
    // Button 0: If pressed, increment the selection cursor; if held, do nothing (reserved for future use)
    case 0:
      if      (button->press_flag)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	7b5b      	ldrb	r3, [r3, #13]
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d00c      	beq.n	8001a14 <System_Alarm_View_Mode_Handle+0x50>
      {
        system_state.alarm_view_cursor = (system_state.alarm_view_cursor == ALARM_VIEW_CURSOR_MAX) ? 0 : (system_state.alarm_view_cursor + 1);
 80019fa:	4b87      	ldr	r3, [pc, #540]	@ (8001c18 <System_Alarm_View_Mode_Handle+0x254>)
 80019fc:	791b      	ldrb	r3, [r3, #4]
 80019fe:	2b09      	cmp	r3, #9
 8001a00:	d004      	beq.n	8001a0c <System_Alarm_View_Mode_Handle+0x48>
 8001a02:	4b85      	ldr	r3, [pc, #532]	@ (8001c18 <System_Alarm_View_Mode_Handle+0x254>)
 8001a04:	791b      	ldrb	r3, [r3, #4]
 8001a06:	3301      	adds	r3, #1
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	e000      	b.n	8001a0e <System_Alarm_View_Mode_Handle+0x4a>
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	4a82      	ldr	r2, [pc, #520]	@ (8001c18 <System_Alarm_View_Mode_Handle+0x254>)
 8001a10:	7113      	strb	r3, [r2, #4]
      }
      else if (button->hold_flag)
      {
        // Reserved
      }
      break;
 8001a12:	e0fc      	b.n	8001c0e <System_Alarm_View_Mode_Handle+0x24a>
      else if (button->hold_flag)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	7b9b      	ldrb	r3, [r3, #14]
      break;
 8001a18:	e0f9      	b.n	8001c0e <System_Alarm_View_Mode_Handle+0x24a>

    // Button 1: If pressed, decrement the selection cursor; if held, do nothing (reserved for future use)
    case 1:
      if      (button->press_flag)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	7b5b      	ldrb	r3, [r3, #13]
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d00c      	beq.n	8001a3e <System_Alarm_View_Mode_Handle+0x7a>
      {
        system_state.alarm_view_cursor = (system_state.alarm_view_cursor == 0) ? ALARM_VIEW_CURSOR_MAX : (system_state.alarm_view_cursor - 1);
 8001a24:	4b7c      	ldr	r3, [pc, #496]	@ (8001c18 <System_Alarm_View_Mode_Handle+0x254>)
 8001a26:	791b      	ldrb	r3, [r3, #4]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d004      	beq.n	8001a36 <System_Alarm_View_Mode_Handle+0x72>
 8001a2c:	4b7a      	ldr	r3, [pc, #488]	@ (8001c18 <System_Alarm_View_Mode_Handle+0x254>)
 8001a2e:	791b      	ldrb	r3, [r3, #4]
 8001a30:	3b01      	subs	r3, #1
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	e000      	b.n	8001a38 <System_Alarm_View_Mode_Handle+0x74>
 8001a36:	2309      	movs	r3, #9
 8001a38:	4a77      	ldr	r2, [pc, #476]	@ (8001c18 <System_Alarm_View_Mode_Handle+0x254>)
 8001a3a:	7113      	strb	r3, [r2, #4]
      }
      else if (button->hold_flag)
      {
        // Reserved
      }
      break;
 8001a3c:	e0e7      	b.n	8001c0e <System_Alarm_View_Mode_Handle+0x24a>
      else if (button->hold_flag)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	7b9b      	ldrb	r3, [r3, #14]
      break;
 8001a42:	e0e4      	b.n	8001c0e <System_Alarm_View_Mode_Handle+0x24a>
    
    // Button 2: If pressed, toggle ON/OFF; if held, do nothing (reserved for future use)
    case 2:
      if      (button->press_flag)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	7b5b      	ldrb	r3, [r3, #13]
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	f000 80da 	beq.w	8001c04 <System_Alarm_View_Mode_Handle+0x240>
      {
        // Retrieve the selected alarm data to system parameter data
        alarm_setup_data.minute  = alarm_get_data[system_state.alarm_view_cursor].minute;
 8001a50:	4b71      	ldr	r3, [pc, #452]	@ (8001c18 <System_Alarm_View_Mode_Handle+0x254>)
 8001a52:	791b      	ldrb	r3, [r3, #4]
 8001a54:	4619      	mov	r1, r3
 8001a56:	4a71      	ldr	r2, [pc, #452]	@ (8001c1c <System_Alarm_View_Mode_Handle+0x258>)
 8001a58:	460b      	mov	r3, r1
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	440b      	add	r3, r1
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	4413      	add	r3, r2
 8001a62:	3301      	adds	r3, #1
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	b2da      	uxtb	r2, r3
 8001a68:	4b6d      	ldr	r3, [pc, #436]	@ (8001c20 <System_Alarm_View_Mode_Handle+0x25c>)
 8001a6a:	701a      	strb	r2, [r3, #0]
        alarm_setup_data.hour    = alarm_get_data[system_state.alarm_view_cursor].hour;
 8001a6c:	4b6a      	ldr	r3, [pc, #424]	@ (8001c18 <System_Alarm_View_Mode_Handle+0x254>)
 8001a6e:	791b      	ldrb	r3, [r3, #4]
 8001a70:	4619      	mov	r1, r3
 8001a72:	4a6a      	ldr	r2, [pc, #424]	@ (8001c1c <System_Alarm_View_Mode_Handle+0x258>)
 8001a74:	460b      	mov	r3, r1
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	440b      	add	r3, r1
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	4413      	add	r3, r2
 8001a7e:	3302      	adds	r3, #2
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	b2da      	uxtb	r2, r3
 8001a84:	4b66      	ldr	r3, [pc, #408]	@ (8001c20 <System_Alarm_View_Mode_Handle+0x25c>)
 8001a86:	705a      	strb	r2, [r3, #1]
        alarm_setup_data.dy_dt   = alarm_get_data[system_state.alarm_view_cursor].dy_dt;
 8001a88:	4b63      	ldr	r3, [pc, #396]	@ (8001c18 <System_Alarm_View_Mode_Handle+0x254>)
 8001a8a:	791b      	ldrb	r3, [r3, #4]
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4a63      	ldr	r2, [pc, #396]	@ (8001c1c <System_Alarm_View_Mode_Handle+0x258>)
 8001a90:	460b      	mov	r3, r1
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	440b      	add	r3, r1
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	4413      	add	r3, r2
 8001a9a:	3303      	adds	r3, #3
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	b2da      	uxtb	r2, r3
 8001aa0:	4b5f      	ldr	r3, [pc, #380]	@ (8001c20 <System_Alarm_View_Mode_Handle+0x25c>)
 8001aa2:	709a      	strb	r2, [r3, #2]
        alarm_setup_data.dow_dom = alarm_get_data[system_state.alarm_view_cursor].dow_dom;
 8001aa4:	4b5c      	ldr	r3, [pc, #368]	@ (8001c18 <System_Alarm_View_Mode_Handle+0x254>)
 8001aa6:	791b      	ldrb	r3, [r3, #4]
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4a5c      	ldr	r2, [pc, #368]	@ (8001c1c <System_Alarm_View_Mode_Handle+0x258>)
 8001aac:	460b      	mov	r3, r1
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	440b      	add	r3, r1
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	4413      	add	r3, r2
 8001ab6:	3304      	adds	r3, #4
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	b2da      	uxtb	r2, r3
 8001abc:	4b58      	ldr	r3, [pc, #352]	@ (8001c20 <System_Alarm_View_Mode_Handle+0x25c>)
 8001abe:	70da      	strb	r2, [r3, #3]
        alarm_setup_data.on_off  = alarm_get_data[system_state.alarm_view_cursor].on_off;
 8001ac0:	4b55      	ldr	r3, [pc, #340]	@ (8001c18 <System_Alarm_View_Mode_Handle+0x254>)
 8001ac2:	791b      	ldrb	r3, [r3, #4]
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4a55      	ldr	r2, [pc, #340]	@ (8001c1c <System_Alarm_View_Mode_Handle+0x258>)
 8001ac8:	460b      	mov	r3, r1
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	440b      	add	r3, r1
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	4413      	add	r3, r2
 8001ad2:	3305      	adds	r3, #5
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	b2da      	uxtb	r2, r3
 8001ad8:	4b51      	ldr	r3, [pc, #324]	@ (8001c20 <System_Alarm_View_Mode_Handle+0x25c>)
 8001ada:	711a      	strb	r2, [r3, #4]

        // Toggle ON/OFF data
        alarm_setup_data.on_off = !alarm_setup_data.on_off;
 8001adc:	4b50      	ldr	r3, [pc, #320]	@ (8001c20 <System_Alarm_View_Mode_Handle+0x25c>)
 8001ade:	791b      	ldrb	r3, [r3, #4]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	bf14      	ite	ne
 8001ae4:	2301      	movne	r3, #1
 8001ae6:	2300      	moveq	r3, #0
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	f083 0301 	eor.w	r3, r3, #1
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	f003 0301 	and.w	r3, r3, #1
 8001af4:	b2da      	uxtb	r2, r3
 8001af6:	4b4a      	ldr	r3, [pc, #296]	@ (8001c20 <System_Alarm_View_Mode_Handle+0x25c>)
 8001af8:	711a      	strb	r2, [r3, #4]

        // Save the modified alarm to the EEPROM module
        //    void Alarm_Set (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow_dom, ALARM_DY_DT_MODE dy_dt, uint8_t on_off, uint8_t slot)
        Alarm_Set
 8001afa:	4b49      	ldr	r3, [pc, #292]	@ (8001c20 <System_Alarm_View_Mode_Handle+0x25c>)
 8001afc:	7818      	ldrb	r0, [r3, #0]
 8001afe:	4b48      	ldr	r3, [pc, #288]	@ (8001c20 <System_Alarm_View_Mode_Handle+0x25c>)
 8001b00:	785c      	ldrb	r4, [r3, #1]
 8001b02:	4b47      	ldr	r3, [pc, #284]	@ (8001c20 <System_Alarm_View_Mode_Handle+0x25c>)
 8001b04:	78dd      	ldrb	r5, [r3, #3]
 8001b06:	4b46      	ldr	r3, [pc, #280]	@ (8001c20 <System_Alarm_View_Mode_Handle+0x25c>)
 8001b08:	789b      	ldrb	r3, [r3, #2]
 8001b0a:	4a45      	ldr	r2, [pc, #276]	@ (8001c20 <System_Alarm_View_Mode_Handle+0x25c>)
 8001b0c:	7912      	ldrb	r2, [r2, #4]
 8001b0e:	4942      	ldr	r1, [pc, #264]	@ (8001c18 <System_Alarm_View_Mode_Handle+0x254>)
 8001b10:	7909      	ldrb	r1, [r1, #4]
 8001b12:	9102      	str	r1, [sp, #8]
 8001b14:	9201      	str	r2, [sp, #4]
 8001b16:	9300      	str	r3, [sp, #0]
 8001b18:	462b      	mov	r3, r5
 8001b1a:	4622      	mov	r2, r4
 8001b1c:	4601      	mov	r1, r0
 8001b1e:	2000      	movs	r0, #0
 8001b20:	f7ff f936 	bl	8000d90 <Alarm_Set>
          alarm_setup_data.on_off,
          system_state.alarm_view_cursor   
        );

        // Update the newly set alarm data
        Alarm_Get(system_state.alarm_view_cursor, &alarm_get_data[system_state.alarm_view_cursor]);
 8001b24:	4b3c      	ldr	r3, [pc, #240]	@ (8001c18 <System_Alarm_View_Mode_Handle+0x254>)
 8001b26:	791a      	ldrb	r2, [r3, #4]
 8001b28:	4b3b      	ldr	r3, [pc, #236]	@ (8001c18 <System_Alarm_View_Mode_Handle+0x254>)
 8001b2a:	791b      	ldrb	r3, [r3, #4]
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	460b      	mov	r3, r1
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	440b      	add	r3, r1
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	4939      	ldr	r1, [pc, #228]	@ (8001c1c <System_Alarm_View_Mode_Handle+0x258>)
 8001b38:	440b      	add	r3, r1
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4610      	mov	r0, r2
 8001b3e:	f7ff f977 	bl	8000e30 <Alarm_Get>
      //   system_param_data.on_off  = alarm_get_data[system_state.cursor].on_off;

      //   // System switches to Alarm Setup Mode
      //   system_state.mode = ALARM_SETUP_MODE;
      // }
      break;
 8001b42:	e05f      	b.n	8001c04 <System_Alarm_View_Mode_Handle+0x240>

    // Button 3: If pressed, enter Alarm Setup Mode with selected alarm data preloaded (for editing); if held, do nothing (reserved for future use)
    case 3: 
      if      (button->press_flag)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	7b5b      	ldrb	r3, [r3, #13]
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d05c      	beq.n	8001c08 <System_Alarm_View_Mode_Handle+0x244>
      {
        // Retrieve the selected alarm data to system parameter data
        alarm_setup_data.minute  = alarm_get_data[system_state.alarm_view_cursor].minute;
 8001b4e:	4b32      	ldr	r3, [pc, #200]	@ (8001c18 <System_Alarm_View_Mode_Handle+0x254>)
 8001b50:	791b      	ldrb	r3, [r3, #4]
 8001b52:	4619      	mov	r1, r3
 8001b54:	4a31      	ldr	r2, [pc, #196]	@ (8001c1c <System_Alarm_View_Mode_Handle+0x258>)
 8001b56:	460b      	mov	r3, r1
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	440b      	add	r3, r1
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	4413      	add	r3, r2
 8001b60:	3301      	adds	r3, #1
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	b2da      	uxtb	r2, r3
 8001b66:	4b2e      	ldr	r3, [pc, #184]	@ (8001c20 <System_Alarm_View_Mode_Handle+0x25c>)
 8001b68:	701a      	strb	r2, [r3, #0]
        alarm_setup_data.hour    = alarm_get_data[system_state.alarm_view_cursor].hour;
 8001b6a:	4b2b      	ldr	r3, [pc, #172]	@ (8001c18 <System_Alarm_View_Mode_Handle+0x254>)
 8001b6c:	791b      	ldrb	r3, [r3, #4]
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4a2a      	ldr	r2, [pc, #168]	@ (8001c1c <System_Alarm_View_Mode_Handle+0x258>)
 8001b72:	460b      	mov	r3, r1
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	440b      	add	r3, r1
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	4413      	add	r3, r2
 8001b7c:	3302      	adds	r3, #2
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	4b27      	ldr	r3, [pc, #156]	@ (8001c20 <System_Alarm_View_Mode_Handle+0x25c>)
 8001b84:	705a      	strb	r2, [r3, #1]
        alarm_setup_data.dy_dt   = alarm_get_data[system_state.alarm_view_cursor].dy_dt;
 8001b86:	4b24      	ldr	r3, [pc, #144]	@ (8001c18 <System_Alarm_View_Mode_Handle+0x254>)
 8001b88:	791b      	ldrb	r3, [r3, #4]
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4a23      	ldr	r2, [pc, #140]	@ (8001c1c <System_Alarm_View_Mode_Handle+0x258>)
 8001b8e:	460b      	mov	r3, r1
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	440b      	add	r3, r1
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	4413      	add	r3, r2
 8001b98:	3303      	adds	r3, #3
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	b2da      	uxtb	r2, r3
 8001b9e:	4b20      	ldr	r3, [pc, #128]	@ (8001c20 <System_Alarm_View_Mode_Handle+0x25c>)
 8001ba0:	709a      	strb	r2, [r3, #2]
        alarm_setup_data.dow_dom = alarm_get_data[system_state.alarm_view_cursor].dow_dom;
 8001ba2:	4b1d      	ldr	r3, [pc, #116]	@ (8001c18 <System_Alarm_View_Mode_Handle+0x254>)
 8001ba4:	791b      	ldrb	r3, [r3, #4]
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4a1c      	ldr	r2, [pc, #112]	@ (8001c1c <System_Alarm_View_Mode_Handle+0x258>)
 8001baa:	460b      	mov	r3, r1
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	440b      	add	r3, r1
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	4413      	add	r3, r2
 8001bb4:	3304      	adds	r3, #4
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	b2da      	uxtb	r2, r3
 8001bba:	4b19      	ldr	r3, [pc, #100]	@ (8001c20 <System_Alarm_View_Mode_Handle+0x25c>)
 8001bbc:	70da      	strb	r2, [r3, #3]
        alarm_setup_data.on_off  = alarm_get_data[system_state.alarm_view_cursor].on_off;
 8001bbe:	4b16      	ldr	r3, [pc, #88]	@ (8001c18 <System_Alarm_View_Mode_Handle+0x254>)
 8001bc0:	791b      	ldrb	r3, [r3, #4]
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4a15      	ldr	r2, [pc, #84]	@ (8001c1c <System_Alarm_View_Mode_Handle+0x258>)
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	440b      	add	r3, r1
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	4413      	add	r3, r2
 8001bd0:	3305      	adds	r3, #5
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	b2da      	uxtb	r2, r3
 8001bd6:	4b12      	ldr	r3, [pc, #72]	@ (8001c20 <System_Alarm_View_Mode_Handle+0x25c>)
 8001bd8:	711a      	strb	r2, [r3, #4]

        // System switches to Alarm Setup Mode
        system_state.mode = ALARM_SETUP_MODE;
 8001bda:	4b0f      	ldr	r3, [pc, #60]	@ (8001c18 <System_Alarm_View_Mode_Handle+0x254>)
 8001bdc:	2202      	movs	r2, #2
 8001bde:	701a      	strb	r2, [r3, #0]

        // Set the system past mode to alarm view mode
        system_state.past_mode = ALARM_VIEW_MODE;
 8001be0:	4b0d      	ldr	r3, [pc, #52]	@ (8001c18 <System_Alarm_View_Mode_Handle+0x254>)
 8001be2:	2203      	movs	r2, #3
 8001be4:	705a      	strb	r2, [r3, #1]
      //   Alarm_Clear(system_state.cursor);

      //   // Update alarm data
      //   Alarm_Get(system_state.cursor, &alarm_get_data[system_state.cursor]);
      // }
      break;
 8001be6:	e00f      	b.n	8001c08 <System_Alarm_View_Mode_Handle+0x244>

    // Button 4: If pressed, cycle through the time setup fields; if held, do nothing (reserved for future use)
    case 4:
      // If pressed, cycle to the next system mode
      if (button->press_flag)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	7b5b      	ldrb	r3, [r3, #13]
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d00c      	beq.n	8001c0c <System_Alarm_View_Mode_Handle+0x248>
      {
        // Cycle through the next system mode
        system_state.mode = SYSTEM_OPTIONS_MODE;
 8001bf2:	4b09      	ldr	r3, [pc, #36]	@ (8001c18 <System_Alarm_View_Mode_Handle+0x254>)
 8001bf4:	2205      	movs	r2, #5
 8001bf6:	701a      	strb	r2, [r3, #0]

        // Set the system past mode to alarm view mode
        system_state.past_mode = ALARM_VIEW_MODE;
 8001bf8:	4b07      	ldr	r3, [pc, #28]	@ (8001c18 <System_Alarm_View_Mode_Handle+0x254>)
 8001bfa:	2203      	movs	r2, #3
 8001bfc:	705a      	strb	r2, [r3, #1]
      // else if (button->hold_flag && !button->latch)
      // {
      //   system_state.mode = DEFAULT_MODE; 
      //   button->latch = true;
      // }
      break;
 8001bfe:	e005      	b.n	8001c0c <System_Alarm_View_Mode_Handle+0x248>

    default: 
      break;
 8001c00:	bf00      	nop
 8001c02:	e004      	b.n	8001c0e <System_Alarm_View_Mode_Handle+0x24a>
      break;
 8001c04:	bf00      	nop
 8001c06:	e002      	b.n	8001c0e <System_Alarm_View_Mode_Handle+0x24a>
      break;
 8001c08:	bf00      	nop
 8001c0a:	e000      	b.n	8001c0e <System_Alarm_View_Mode_Handle+0x24a>
      break;
 8001c0c:	bf00      	nop
  }
}
 8001c0e:	bf00      	nop
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bdb0      	pop	{r4, r5, r7, pc}
 8001c16:	bf00      	nop
 8001c18:	20000388 	.word	0x20000388
 8001c1c:	200003a8 	.word	0x200003a8
 8001c20:	20000398 	.word	0x20000398

08001c24 <System_Options_Mode_Handle>:
 * @brief  Handles the system options mode based on button actions.
 * @param  button: Pointer to the BUTTON structure containing button state and index.
 * @retval None
 */
void System_Options_Mode_Handle (BUTTON_DATA *button)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  switch (button->index) 
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	799b      	ldrb	r3, [r3, #6]
 8001c30:	2b04      	cmp	r3, #4
 8001c32:	d87c      	bhi.n	8001d2e <System_Options_Mode_Handle+0x10a>
 8001c34:	a201      	add	r2, pc, #4	@ (adr r2, 8001c3c <System_Options_Mode_Handle+0x18>)
 8001c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c3a:	bf00      	nop
 8001c3c:	08001c51 	.word	0x08001c51
 8001c40:	08001c7b 	.word	0x08001c7b
 8001c44:	08001ca5 	.word	0x08001ca5
 8001c48:	08001d07 	.word	0x08001d07
 8001c4c:	08001d17 	.word	0x08001d17
  {
    // Button 0: If pressed, increment the selection cursor; if held, do nothing (reserved for future use)
    case 0:
      if      (button->press_flag)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	7b5b      	ldrb	r3, [r3, #13]
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d00c      	beq.n	8001c74 <System_Options_Mode_Handle+0x50>
      {
        system_state.system_opt_cursor = (system_state.system_opt_cursor == SYSTEM_OPT_CURSOR_MAX) ? 0 : (system_state.system_opt_cursor + 1);
 8001c5a:	4b39      	ldr	r3, [pc, #228]	@ (8001d40 <System_Options_Mode_Handle+0x11c>)
 8001c5c:	795b      	ldrb	r3, [r3, #5]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d004      	beq.n	8001c6c <System_Options_Mode_Handle+0x48>
 8001c62:	4b37      	ldr	r3, [pc, #220]	@ (8001d40 <System_Options_Mode_Handle+0x11c>)
 8001c64:	795b      	ldrb	r3, [r3, #5]
 8001c66:	3301      	adds	r3, #1
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	e000      	b.n	8001c6e <System_Options_Mode_Handle+0x4a>
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	4a34      	ldr	r2, [pc, #208]	@ (8001d40 <System_Options_Mode_Handle+0x11c>)
 8001c70:	7153      	strb	r3, [r2, #5]
      }
      else if (button->hold_flag)
      {
        // Reserved
      }
      break;
 8001c72:	e061      	b.n	8001d38 <System_Options_Mode_Handle+0x114>
      else if (button->hold_flag)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	7b9b      	ldrb	r3, [r3, #14]
      break;
 8001c78:	e05e      	b.n	8001d38 <System_Options_Mode_Handle+0x114>
    
    // Button 1: If pressed, decrement the selection cursor; if held, do nothing (reserved for future use)
    case 1:
      if      (button->press_flag)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	7b5b      	ldrb	r3, [r3, #13]
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d00c      	beq.n	8001c9e <System_Options_Mode_Handle+0x7a>
      {
        system_state.system_opt_cursor = (system_state.system_opt_cursor == 0) ? SYSTEM_OPT_CURSOR_MAX : (system_state.system_opt_cursor - 1);
 8001c84:	4b2e      	ldr	r3, [pc, #184]	@ (8001d40 <System_Options_Mode_Handle+0x11c>)
 8001c86:	795b      	ldrb	r3, [r3, #5]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d004      	beq.n	8001c96 <System_Options_Mode_Handle+0x72>
 8001c8c:	4b2c      	ldr	r3, [pc, #176]	@ (8001d40 <System_Options_Mode_Handle+0x11c>)
 8001c8e:	795b      	ldrb	r3, [r3, #5]
 8001c90:	3b01      	subs	r3, #1
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	e000      	b.n	8001c98 <System_Options_Mode_Handle+0x74>
 8001c96:	2301      	movs	r3, #1
 8001c98:	4a29      	ldr	r2, [pc, #164]	@ (8001d40 <System_Options_Mode_Handle+0x11c>)
 8001c9a:	7153      	strb	r3, [r2, #5]
      }
      else if (button->hold_flag)
      {
        // Reserved
      }
      break;
 8001c9c:	e04c      	b.n	8001d38 <System_Options_Mode_Handle+0x114>
      else if (button->hold_flag)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	7b9b      	ldrb	r3, [r3, #14]
      break;
 8001ca2:	e049      	b.n	8001d38 <System_Options_Mode_Handle+0x114>
    
    // Button 2: If pressed, operate the selected option; if held, do nothing (reserved for future use)
    case 2:
      if      (button->press_flag)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	7b5b      	ldrb	r3, [r3, #13]
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d026      	beq.n	8001cfc <System_Options_Mode_Handle+0xd8>
      {
        switch (system_state.system_opt_cursor)
 8001cae:	4b24      	ldr	r3, [pc, #144]	@ (8001d40 <System_Options_Mode_Handle+0x11c>)
 8001cb0:	795b      	ldrb	r3, [r3, #5]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d002      	beq.n	8001cbc <System_Options_Mode_Handle+0x98>
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d023      	beq.n	8001d02 <System_Options_Mode_Handle+0xde>
          case CONTRIBUTOR_INFO:
            // Display contributor information
            break;

          default:
            break;
 8001cba:	e023      	b.n	8001d04 <System_Options_Mode_Handle+0xe0>
            for (int i = 0; i < ALARM_SLOT_NUM; i++)
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	60fb      	str	r3, [r7, #12]
 8001cc0:	e013      	b.n	8001cea <System_Options_Mode_Handle+0xc6>
              Alarm_Clear(i);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff f908 	bl	8000edc <Alarm_Clear>
              Alarm_Get(i, &alarm_get_data[i]);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	b2d8      	uxtb	r0, r3
 8001cd0:	68fa      	ldr	r2, [r7, #12]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	4413      	add	r3, r2
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	4a1a      	ldr	r2, [pc, #104]	@ (8001d44 <System_Options_Mode_Handle+0x120>)
 8001cdc:	4413      	add	r3, r2
 8001cde:	4619      	mov	r1, r3
 8001ce0:	f7ff f8a6 	bl	8000e30 <Alarm_Get>
            for (int i = 0; i < ALARM_SLOT_NUM; i++)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2b09      	cmp	r3, #9
 8001cee:	dde8      	ble.n	8001cc2 <System_Options_Mode_Handle+0x9e>
            alarm_slot_ptr = 0;
 8001cf0:	4b15      	ldr	r3, [pc, #84]	@ (8001d48 <System_Options_Mode_Handle+0x124>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	701a      	strb	r2, [r3, #0]
            Alarm_Slot_Pointer_Set();
 8001cf6:	f7ff f913 	bl	8000f20 <Alarm_Slot_Pointer_Set>
            break;
 8001cfa:	e003      	b.n	8001d04 <System_Options_Mode_Handle+0xe0>
        }
      }
      else if (button->hold_flag)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	7b9b      	ldrb	r3, [r3, #14]
      {
        // Reserved
      }
      break;
 8001d00:	e01a      	b.n	8001d38 <System_Options_Mode_Handle+0x114>
            break;
 8001d02:	bf00      	nop
      break;
 8001d04:	e018      	b.n	8001d38 <System_Options_Mode_Handle+0x114>

    case 3: 
      if      (button->press_flag)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	7b5b      	ldrb	r3, [r3, #13]
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d110      	bne.n	8001d32 <System_Options_Mode_Handle+0x10e>
      {

      }
      else if (button->hold_flag)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	7b9b      	ldrb	r3, [r3, #14]
      {
        // Reserved
      }
      break;
 8001d14:	e00d      	b.n	8001d32 <System_Options_Mode_Handle+0x10e>
    
    // Button 4: If pressed, cycle through the time setup fields; if held, do nothing (reserved for future use)
    case 4:
      // If pressed, cycle through the next system mode
      if      (button->press_flag)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	7b5b      	ldrb	r3, [r3, #13]
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d00a      	beq.n	8001d36 <System_Options_Mode_Handle+0x112>
      {
        // system_state.mode = (system_state.mode < (SYSTEM_MODE_NUM - 1)) ? (system_state.mode + 1) : 0;

        // Cycle through the next system mode
        system_state.mode = DEFAULT_MODE;
 8001d20:	4b07      	ldr	r3, [pc, #28]	@ (8001d40 <System_Options_Mode_Handle+0x11c>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	701a      	strb	r2, [r3, #0]

        // Set the system past mode to system options mode
        system_state.past_mode = SYSTEM_OPTIONS_MODE;
 8001d26:	4b06      	ldr	r3, [pc, #24]	@ (8001d40 <System_Options_Mode_Handle+0x11c>)
 8001d28:	2205      	movs	r2, #5
 8001d2a:	705a      	strb	r2, [r3, #1]
      // // If held, set the mode to default
      // else if (button->hold_flag)
      // {
      //   system_state.mode = DEFAULT_MODE;
      // }
      break;
 8001d2c:	e003      	b.n	8001d36 <System_Options_Mode_Handle+0x112>

    default: 
      break;
 8001d2e:	bf00      	nop
 8001d30:	e002      	b.n	8001d38 <System_Options_Mode_Handle+0x114>
      break;
 8001d32:	bf00      	nop
 8001d34:	e000      	b.n	8001d38 <System_Options_Mode_Handle+0x114>
      break;
 8001d36:	bf00      	nop
  }
}
 8001d38:	bf00      	nop
 8001d3a:	3710      	adds	r7, #16
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	20000388 	.word	0x20000388
 8001d44:	200003a8 	.word	0x200003a8
 8001d48:	200003e4 	.word	0x200003e4

08001d4c <System_Alarm_Active_Mode_Handle>:
 * @brief  Handles the alarm active mode based on button actions.
 * @param  button: Pointer to the BUTTON structure containing button state and index.
 * @retval None
 */
void System_Alarm_Active_Mode_Handle (BUTTON_DATA *button)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  // Handle button actions in alarm active mode
  switch (button->index) 
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	799b      	ldrb	r3, [r3, #6]
 8001d58:	2b04      	cmp	r3, #4
 8001d5a:	f200 808a 	bhi.w	8001e72 <System_Alarm_Active_Mode_Handle+0x126>
 8001d5e:	a201      	add	r2, pc, #4	@ (adr r2, 8001d64 <System_Alarm_Active_Mode_Handle+0x18>)
 8001d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d64:	08001d79 	.word	0x08001d79
 8001d68:	08001db3 	.word	0x08001db3
 8001d6c:	08001de3 	.word	0x08001de3
 8001d70:	08001e13 	.word	0x08001e13
 8001d74:	08001e43 	.word	0x08001e43
  {
    // Button 0: If pressed, stop ringing the alarm; if held, do nothing (reserved for future use)
    case 0:
      // If pressed, cycle through the time setup fields
      if (button->press_flag)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	7b5b      	ldrb	r3, [r3, #13]
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d00f      	beq.n	8001da2 <System_Alarm_Active_Mode_Handle+0x56>
      {
        // Stop ringing the alarm
        alarm_active_flag = false; 
 8001d82:	4b3f      	ldr	r3, [pc, #252]	@ (8001e80 <System_Alarm_Active_Mode_Handle+0x134>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	701a      	strb	r2, [r3, #0]

        // Return to the previous mode
        system_state.mode = system_state.past_mode; 
 8001d88:	4b3e      	ldr	r3, [pc, #248]	@ (8001e84 <System_Alarm_Active_Mode_Handle+0x138>)
 8001d8a:	785a      	ldrb	r2, [r3, #1]
 8001d8c:	4b3d      	ldr	r3, [pc, #244]	@ (8001e84 <System_Alarm_Active_Mode_Handle+0x138>)
 8001d8e:	701a      	strb	r2, [r3, #0]

        // Set the system past mode to alarm active mode
        system_state.past_mode = ALARM_ACTIVE_MODE; 
 8001d90:	4b3c      	ldr	r3, [pc, #240]	@ (8001e84 <System_Alarm_Active_Mode_Handle+0x138>)
 8001d92:	2204      	movs	r2, #4
 8001d94:	705a      	strb	r2, [r3, #1]

        // Reset the buzzer
        HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, BUZZER_INACTIVE); 
 8001d96:	2200      	movs	r2, #0
 8001d98:	2101      	movs	r1, #1
 8001d9a:	483b      	ldr	r0, [pc, #236]	@ (8001e88 <System_Alarm_Active_Mode_Handle+0x13c>)
 8001d9c:	f001 fda3 	bl	80038e6 <HAL_GPIO_WritePin>
      // If held, do nothing (reserved for future use)
      else if (button->hold_flag && !button->latch)
      {
        // Reserved
      }
      break;
 8001da0:	e069      	b.n	8001e76 <System_Alarm_Active_Mode_Handle+0x12a>
      else if (button->hold_flag && !button->latch)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	7b9b      	ldrb	r3, [r3, #14]
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d064      	beq.n	8001e76 <System_Alarm_Active_Mode_Handle+0x12a>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	7bdb      	ldrb	r3, [r3, #15]
      break;
 8001db0:	e061      	b.n	8001e76 <System_Alarm_Active_Mode_Handle+0x12a>

    // Button 1: If pressed, stop ringing the alarm; if held, do nothing (reserved for future use)
    case 1:
      if      (button->press_flag)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	7b5b      	ldrb	r3, [r3, #13]
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d00f      	beq.n	8001ddc <System_Alarm_Active_Mode_Handle+0x90>
      {
        // Stop ringing the alarm
        alarm_active_flag = false;  
 8001dbc:	4b30      	ldr	r3, [pc, #192]	@ (8001e80 <System_Alarm_Active_Mode_Handle+0x134>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	701a      	strb	r2, [r3, #0]

        // Return to the previous mode
        system_state.mode = system_state.past_mode; 
 8001dc2:	4b30      	ldr	r3, [pc, #192]	@ (8001e84 <System_Alarm_Active_Mode_Handle+0x138>)
 8001dc4:	785a      	ldrb	r2, [r3, #1]
 8001dc6:	4b2f      	ldr	r3, [pc, #188]	@ (8001e84 <System_Alarm_Active_Mode_Handle+0x138>)
 8001dc8:	701a      	strb	r2, [r3, #0]

        // Set the system past mode to alarm active mode
        system_state.past_mode = ALARM_ACTIVE_MODE; 
 8001dca:	4b2e      	ldr	r3, [pc, #184]	@ (8001e84 <System_Alarm_Active_Mode_Handle+0x138>)
 8001dcc:	2204      	movs	r2, #4
 8001dce:	705a      	strb	r2, [r3, #1]

        // Reset the buzzer
        HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, BUZZER_INACTIVE); 
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	482c      	ldr	r0, [pc, #176]	@ (8001e88 <System_Alarm_Active_Mode_Handle+0x13c>)
 8001dd6:	f001 fd86 	bl	80038e6 <HAL_GPIO_WritePin>
      }
      else if (button->hold_flag)
      {
        // Reserved 
      }
      break;
 8001dda:	e04d      	b.n	8001e78 <System_Alarm_Active_Mode_Handle+0x12c>
      else if (button->hold_flag)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	7b9b      	ldrb	r3, [r3, #14]
      break;
 8001de0:	e04a      	b.n	8001e78 <System_Alarm_Active_Mode_Handle+0x12c>

    // Button 2: If pressed, stop ringing the alarm; if held, do nothing (reserved for future use)
    case 2:
      if      (button->press_flag)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	7b5b      	ldrb	r3, [r3, #13]
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d00f      	beq.n	8001e0c <System_Alarm_Active_Mode_Handle+0xc0>
      {
        // Stop ringing the alarm
        alarm_active_flag = false;  
 8001dec:	4b24      	ldr	r3, [pc, #144]	@ (8001e80 <System_Alarm_Active_Mode_Handle+0x134>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	701a      	strb	r2, [r3, #0]

        // Return to the previous mode
        system_state.mode = system_state.past_mode; 
 8001df2:	4b24      	ldr	r3, [pc, #144]	@ (8001e84 <System_Alarm_Active_Mode_Handle+0x138>)
 8001df4:	785a      	ldrb	r2, [r3, #1]
 8001df6:	4b23      	ldr	r3, [pc, #140]	@ (8001e84 <System_Alarm_Active_Mode_Handle+0x138>)
 8001df8:	701a      	strb	r2, [r3, #0]

        // Set the system past mode to alarm active mode
        system_state.past_mode = ALARM_ACTIVE_MODE; 
 8001dfa:	4b22      	ldr	r3, [pc, #136]	@ (8001e84 <System_Alarm_Active_Mode_Handle+0x138>)
 8001dfc:	2204      	movs	r2, #4
 8001dfe:	705a      	strb	r2, [r3, #1]

        // Reset the buzzer
        HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, BUZZER_INACTIVE); 
 8001e00:	2200      	movs	r2, #0
 8001e02:	2101      	movs	r1, #1
 8001e04:	4820      	ldr	r0, [pc, #128]	@ (8001e88 <System_Alarm_Active_Mode_Handle+0x13c>)
 8001e06:	f001 fd6e 	bl	80038e6 <HAL_GPIO_WritePin>
      }
      else if (button->hold_flag)
      {
        // Reserved
      }
      break;
 8001e0a:	e035      	b.n	8001e78 <System_Alarm_Active_Mode_Handle+0x12c>
      else if (button->hold_flag)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	7b9b      	ldrb	r3, [r3, #14]
      break;
 8001e10:	e032      	b.n	8001e78 <System_Alarm_Active_Mode_Handle+0x12c>
    
    // Button 3: If pressed, stop ringing the alarm; if held, do nothing (reserved for future use)
    case 3:
      if      (button->press_flag)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	7b5b      	ldrb	r3, [r3, #13]
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d00f      	beq.n	8001e3c <System_Alarm_Active_Mode_Handle+0xf0>
      {
        // Stop ringing the alarm
        alarm_active_flag = false;  
 8001e1c:	4b18      	ldr	r3, [pc, #96]	@ (8001e80 <System_Alarm_Active_Mode_Handle+0x134>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	701a      	strb	r2, [r3, #0]

        // Return to the previous mode
        system_state.mode = system_state.past_mode; 
 8001e22:	4b18      	ldr	r3, [pc, #96]	@ (8001e84 <System_Alarm_Active_Mode_Handle+0x138>)
 8001e24:	785a      	ldrb	r2, [r3, #1]
 8001e26:	4b17      	ldr	r3, [pc, #92]	@ (8001e84 <System_Alarm_Active_Mode_Handle+0x138>)
 8001e28:	701a      	strb	r2, [r3, #0]

        // Set the system past mode to alarm active mode
        system_state.past_mode = ALARM_ACTIVE_MODE; 
 8001e2a:	4b16      	ldr	r3, [pc, #88]	@ (8001e84 <System_Alarm_Active_Mode_Handle+0x138>)
 8001e2c:	2204      	movs	r2, #4
 8001e2e:	705a      	strb	r2, [r3, #1]

        // Reset the buzzer
        HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, BUZZER_INACTIVE); 
 8001e30:	2200      	movs	r2, #0
 8001e32:	2101      	movs	r1, #1
 8001e34:	4814      	ldr	r0, [pc, #80]	@ (8001e88 <System_Alarm_Active_Mode_Handle+0x13c>)
 8001e36:	f001 fd56 	bl	80038e6 <HAL_GPIO_WritePin>
      }
      else if (button->hold_flag)
      {
        // Reserved
      }
      break;
 8001e3a:	e01d      	b.n	8001e78 <System_Alarm_Active_Mode_Handle+0x12c>
      else if (button->hold_flag)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	7b9b      	ldrb	r3, [r3, #14]
      break;
 8001e40:	e01a      	b.n	8001e78 <System_Alarm_Active_Mode_Handle+0x12c>

    // Button 4: If pressed, stop ringing the alarm; if held, do nothing (reserved for future use)
    case 4: 
      if      (button->press_flag)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	7b5b      	ldrb	r3, [r3, #13]
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d00f      	beq.n	8001e6c <System_Alarm_Active_Mode_Handle+0x120>
      {
        // Stop ringing the alarm
        alarm_active_flag = false;  
 8001e4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e80 <System_Alarm_Active_Mode_Handle+0x134>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	701a      	strb	r2, [r3, #0]

        // Return to the previous mode
        system_state.mode = system_state.past_mode; 
 8001e52:	4b0c      	ldr	r3, [pc, #48]	@ (8001e84 <System_Alarm_Active_Mode_Handle+0x138>)
 8001e54:	785a      	ldrb	r2, [r3, #1]
 8001e56:	4b0b      	ldr	r3, [pc, #44]	@ (8001e84 <System_Alarm_Active_Mode_Handle+0x138>)
 8001e58:	701a      	strb	r2, [r3, #0]

        // Set the system past mode to alarm active mode
        system_state.past_mode = ALARM_ACTIVE_MODE; 
 8001e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e84 <System_Alarm_Active_Mode_Handle+0x138>)
 8001e5c:	2204      	movs	r2, #4
 8001e5e:	705a      	strb	r2, [r3, #1]

        // Reset the buzzer
        HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, BUZZER_INACTIVE); 
 8001e60:	2200      	movs	r2, #0
 8001e62:	2101      	movs	r1, #1
 8001e64:	4808      	ldr	r0, [pc, #32]	@ (8001e88 <System_Alarm_Active_Mode_Handle+0x13c>)
 8001e66:	f001 fd3e 	bl	80038e6 <HAL_GPIO_WritePin>
      }
      else if (button->hold_flag)
      {
        // Reserved
      }
      break;
 8001e6a:	e005      	b.n	8001e78 <System_Alarm_Active_Mode_Handle+0x12c>
      else if (button->hold_flag)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	7b9b      	ldrb	r3, [r3, #14]
      break;
 8001e70:	e002      	b.n	8001e78 <System_Alarm_Active_Mode_Handle+0x12c>

    default: 
      break;
 8001e72:	bf00      	nop
 8001e74:	e000      	b.n	8001e78 <System_Alarm_Active_Mode_Handle+0x12c>
      break;
 8001e76:	bf00      	nop
  }
}
 8001e78:	bf00      	nop
 8001e7a:	3708      	adds	r7, #8
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	200003e7 	.word	0x200003e7
 8001e84:	20000388 	.word	0x20000388
 8001e88:	40010c00 	.word	0x40010c00

08001e8c <HAL_GPIO_EXTI_Callback>:
  * @brief  Callback function to handle GPIO interrupts.
  * @param  GPIO_Pin: The pin number of the GPIO that triggered the interrupt.
  * @retval None
*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8001e96:	88fb      	ldrh	r3, [r7, #6]
 8001e98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001e9c:	d02a      	beq.n	8001ef4 <HAL_GPIO_EXTI_Callback+0x68>
 8001e9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001ea2:	dc2f      	bgt.n	8001f04 <HAL_GPIO_EXTI_Callback+0x78>
 8001ea4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001ea8:	d020      	beq.n	8001eec <HAL_GPIO_EXTI_Callback+0x60>
 8001eaa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001eae:	dc29      	bgt.n	8001f04 <HAL_GPIO_EXTI_Callback+0x78>
 8001eb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001eb4:	d016      	beq.n	8001ee4 <HAL_GPIO_EXTI_Callback+0x58>
 8001eb6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001eba:	dc23      	bgt.n	8001f04 <HAL_GPIO_EXTI_Callback+0x78>
 8001ebc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ec0:	d00c      	beq.n	8001edc <HAL_GPIO_EXTI_Callback+0x50>
 8001ec2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ec6:	dc1d      	bgt.n	8001f04 <HAL_GPIO_EXTI_Callback+0x78>
 8001ec8:	2b20      	cmp	r3, #32
 8001eca:	d003      	beq.n	8001ed4 <HAL_GPIO_EXTI_Callback+0x48>
 8001ecc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ed0:	d014      	beq.n	8001efc <HAL_GPIO_EXTI_Callback+0x70>
      button4.int_flag = true;
      break;  

    default:
      // Handle other GPIO interrupts if necessary
      break;
 8001ed2:	e017      	b.n	8001f04 <HAL_GPIO_EXTI_Callback+0x78>
      rtc_int_flag = true;
 8001ed4:	4b0e      	ldr	r3, [pc, #56]	@ (8001f10 <HAL_GPIO_EXTI_Callback+0x84>)
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	701a      	strb	r2, [r3, #0]
      break;
 8001eda:	e014      	b.n	8001f06 <HAL_GPIO_EXTI_Callback+0x7a>
      button0.int_flag = true;
 8001edc:	4b0d      	ldr	r3, [pc, #52]	@ (8001f14 <HAL_GPIO_EXTI_Callback+0x88>)
 8001ede:	2201      	movs	r2, #1
 8001ee0:	731a      	strb	r2, [r3, #12]
      break;
 8001ee2:	e010      	b.n	8001f06 <HAL_GPIO_EXTI_Callback+0x7a>
      button1.int_flag = true;
 8001ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8001f18 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	731a      	strb	r2, [r3, #12]
      break;
 8001eea:	e00c      	b.n	8001f06 <HAL_GPIO_EXTI_Callback+0x7a>
      button2.int_flag = true;
 8001eec:	4b0b      	ldr	r3, [pc, #44]	@ (8001f1c <HAL_GPIO_EXTI_Callback+0x90>)
 8001eee:	2201      	movs	r2, #1
 8001ef0:	731a      	strb	r2, [r3, #12]
      break;
 8001ef2:	e008      	b.n	8001f06 <HAL_GPIO_EXTI_Callback+0x7a>
      button3.int_flag = true;
 8001ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8001f20 <HAL_GPIO_EXTI_Callback+0x94>)
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	731a      	strb	r2, [r3, #12]
      break;  
 8001efa:	e004      	b.n	8001f06 <HAL_GPIO_EXTI_Callback+0x7a>
      button4.int_flag = true;
 8001efc:	4b09      	ldr	r3, [pc, #36]	@ (8001f24 <HAL_GPIO_EXTI_Callback+0x98>)
 8001efe:	2201      	movs	r2, #1
 8001f00:	731a      	strb	r2, [r3, #12]
      break;  
 8001f02:	e000      	b.n	8001f06 <HAL_GPIO_EXTI_Callback+0x7a>
      break;
 8001f04:	bf00      	nop
  }
}
 8001f06:	bf00      	nop
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bc80      	pop	{r7}
 8001f0e:	4770      	bx	lr
 8001f10:	200003e5 	.word	0x200003e5
 8001f14:	20000008 	.word	0x20000008
 8001f18:	20000018 	.word	0x20000018
 8001f1c:	20000028 	.word	0x20000028
 8001f20:	20000038 	.word	0x20000038
 8001f24:	20000048 	.word	0x20000048

08001f28 <HAL_UART_RxCpltCallback>:
  * @brief  Callback function to handle UART interrupts.
  * @param  huart: Pointer to the UART handle.
  * @retval None
*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  // Verify the UART instance to ensure the callback is for USART1
  // If the UART instance is USART1, store the received data into the uart_rx_data array
  if(huart->Instance == USART1)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a23      	ldr	r2, [pc, #140]	@ (8001fc4 <HAL_UART_RxCpltCallback+0x9c>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d13f      	bne.n	8001fba <HAL_UART_RxCpltCallback+0x92>
  {
    // Store the received data into the uart_rx_data array
    uart_hour 	  = uart_rx_data[0];
 8001f3a:	4b23      	ldr	r3, [pc, #140]	@ (8001fc8 <HAL_UART_RxCpltCallback+0xa0>)
 8001f3c:	781a      	ldrb	r2, [r3, #0]
 8001f3e:	4b23      	ldr	r3, [pc, #140]	@ (8001fcc <HAL_UART_RxCpltCallback+0xa4>)
 8001f40:	701a      	strb	r2, [r3, #0]
    uart_minute   = uart_rx_data[1];
 8001f42:	4b21      	ldr	r3, [pc, #132]	@ (8001fc8 <HAL_UART_RxCpltCallback+0xa0>)
 8001f44:	785a      	ldrb	r2, [r3, #1]
 8001f46:	4b22      	ldr	r3, [pc, #136]	@ (8001fd0 <HAL_UART_RxCpltCallback+0xa8>)
 8001f48:	701a      	strb	r2, [r3, #0]
    uart_dow      = uart_rx_data[5];
 8001f4a:	4b1f      	ldr	r3, [pc, #124]	@ (8001fc8 <HAL_UART_RxCpltCallback+0xa0>)
 8001f4c:	795a      	ldrb	r2, [r3, #5]
 8001f4e:	4b21      	ldr	r3, [pc, #132]	@ (8001fd4 <HAL_UART_RxCpltCallback+0xac>)
 8001f50:	701a      	strb	r2, [r3, #0]
    uart_day 	    = uart_rx_data[2];
 8001f52:	4b1d      	ldr	r3, [pc, #116]	@ (8001fc8 <HAL_UART_RxCpltCallback+0xa0>)
 8001f54:	789a      	ldrb	r2, [r3, #2]
 8001f56:	4b20      	ldr	r3, [pc, #128]	@ (8001fd8 <HAL_UART_RxCpltCallback+0xb0>)
 8001f58:	701a      	strb	r2, [r3, #0]
    uart_month	  = uart_rx_data[3];
 8001f5a:	4b1b      	ldr	r3, [pc, #108]	@ (8001fc8 <HAL_UART_RxCpltCallback+0xa0>)
 8001f5c:	78da      	ldrb	r2, [r3, #3]
 8001f5e:	4b1f      	ldr	r3, [pc, #124]	@ (8001fdc <HAL_UART_RxCpltCallback+0xb4>)
 8001f60:	701a      	strb	r2, [r3, #0]
    uart_year 	  = uart_rx_data[4];
 8001f62:	4b19      	ldr	r3, [pc, #100]	@ (8001fc8 <HAL_UART_RxCpltCallback+0xa0>)
 8001f64:	791a      	ldrb	r2, [r3, #4]
 8001f66:	4b1e      	ldr	r3, [pc, #120]	@ (8001fe0 <HAL_UART_RxCpltCallback+0xb8>)
 8001f68:	701a      	strb	r2, [r3, #0]
    uart_alarmNum = uart_rx_data[5];
 8001f6a:	4b17      	ldr	r3, [pc, #92]	@ (8001fc8 <HAL_UART_RxCpltCallback+0xa0>)
 8001f6c:	795a      	ldrb	r2, [r3, #5]
 8001f6e:	4b1d      	ldr	r3, [pc, #116]	@ (8001fe4 <HAL_UART_RxCpltCallback+0xbc>)
 8001f70:	701a      	strb	r2, [r3, #0]
    uart_alarmSta = uart_rx_data[6];
 8001f72:	4b15      	ldr	r3, [pc, #84]	@ (8001fc8 <HAL_UART_RxCpltCallback+0xa0>)
 8001f74:	799a      	ldrb	r2, [r3, #6]
 8001f76:	4b1c      	ldr	r3, [pc, #112]	@ (8001fe8 <HAL_UART_RxCpltCallback+0xc0>)
 8001f78:	701a      	strb	r2, [r3, #0]

    // For mode 2:
    if (uart_appMode == 2)
 8001f7a:	4b1c      	ldr	r3, [pc, #112]	@ (8001fec <HAL_UART_RxCpltCallback+0xc4>)
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d118      	bne.n	8001fb4 <HAL_UART_RxCpltCallback+0x8c>
    {
      for (int i = 0; i < 7; i++)
 8001f82:	2300      	movs	r3, #0
 8001f84:	60fb      	str	r3, [r7, #12]
 8001f86:	e012      	b.n	8001fae <HAL_UART_RxCpltCallback+0x86>
      {
        alarm_Info[uart_alarmNum-1][i] = uart_rx_data[i]; // Store the alarm information in the array. Alarm number is uart_alarmNum, information is uart_rx_data[i]
 8001f88:	4b16      	ldr	r3, [pc, #88]	@ (8001fe4 <HAL_UART_RxCpltCallback+0xbc>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	1e5a      	subs	r2, r3, #1
 8001f8e:	490e      	ldr	r1, [pc, #56]	@ (8001fc8 <HAL_UART_RxCpltCallback+0xa0>)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	440b      	add	r3, r1
 8001f94:	7818      	ldrb	r0, [r3, #0]
 8001f96:	4916      	ldr	r1, [pc, #88]	@ (8001ff0 <HAL_UART_RxCpltCallback+0xc8>)
 8001f98:	4613      	mov	r3, r2
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	1a9b      	subs	r3, r3, r2
 8001f9e:	18ca      	adds	r2, r1, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	701a      	strb	r2, [r3, #0]
      for (int i = 0; i < 7; i++)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	3301      	adds	r3, #1
 8001fac:	60fb      	str	r3, [r7, #12]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2b06      	cmp	r3, #6
 8001fb2:	dde9      	ble.n	8001f88 <HAL_UART_RxCpltCallback+0x60>
      }
    }

    // Set the UART receive flag
    uart_rx_flag = 1;
 8001fb4:	4b0f      	ldr	r3, [pc, #60]	@ (8001ff4 <HAL_UART_RxCpltCallback+0xcc>)
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	701a      	strb	r2, [r3, #0]
  }
}
 8001fba:	bf00      	nop
 8001fbc:	3714      	adds	r7, #20
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr
 8001fc4:	40013800 	.word	0x40013800
 8001fc8:	200003f8 	.word	0x200003f8
 8001fcc:	20000407 	.word	0x20000407
 8001fd0:	20000408 	.word	0x20000408
 8001fd4:	20000409 	.word	0x20000409
 8001fd8:	2000040a 	.word	0x2000040a
 8001fdc:	2000040b 	.word	0x2000040b
 8001fe0:	2000040c 	.word	0x2000040c
 8001fe4:	2000040d 	.word	0x2000040d
 8001fe8:	2000040e 	.word	0x2000040e
 8001fec:	20000410 	.word	0x20000410
 8001ff0:	20000414 	.word	0x20000414
 8001ff4:	200003f6 	.word	0x200003f6

08001ff8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  // Verify the UART instance to ensure the callback is for USART1
  // If the UART instance is USART1, set the UART transmit flag
  if(huart->Instance == USART1)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a0f      	ldr	r2, [pc, #60]	@ (8002044 <HAL_UART_TxCpltCallback+0x4c>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d116      	bne.n	8002038 <HAL_UART_TxCpltCallback+0x40>
  {
    // Set the UART transmit flag to indicate that the data has been sent
    sentCount += 1;
 800200a:	4b0f      	ldr	r3, [pc, #60]	@ (8002048 <HAL_UART_TxCpltCallback+0x50>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	3301      	adds	r3, #1
 8002010:	b2da      	uxtb	r2, r3
 8002012:	4b0d      	ldr	r3, [pc, #52]	@ (8002048 <HAL_UART_TxCpltCallback+0x50>)
 8002014:	701a      	strb	r2, [r3, #0]

    if (sentCount == 10) // If 10 alarms are sent, reset the sentCount variable
 8002016:	4b0c      	ldr	r3, [pc, #48]	@ (8002048 <HAL_UART_TxCpltCallback+0x50>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	2b0a      	cmp	r3, #10
 800201c:	d109      	bne.n	8002032 <HAL_UART_TxCpltCallback+0x3a>
    {
      sentCount = 0;
 800201e:	4b0a      	ldr	r3, [pc, #40]	@ (8002048 <HAL_UART_TxCpltCallback+0x50>)
 8002020:	2200      	movs	r2, #0
 8002022:	701a      	strb	r2, [r3, #0]
      uart_tx_flag = 0; // Reset the UART transmit flag
 8002024:	4b09      	ldr	r3, [pc, #36]	@ (800204c <HAL_UART_TxCpltCallback+0x54>)
 8002026:	2200      	movs	r2, #0
 8002028:	701a      	strb	r2, [r3, #0]
      uart_rx_data[0] = 0b01110000;
 800202a:	4b09      	ldr	r3, [pc, #36]	@ (8002050 <HAL_UART_TxCpltCallback+0x58>)
 800202c:	2270      	movs	r2, #112	@ 0x70
 800202e:	701a      	strb	r2, [r3, #0]
    else
    {
      uart_tx_flag = 1;
    }
  }
}
 8002030:	e002      	b.n	8002038 <HAL_UART_TxCpltCallback+0x40>
      uart_tx_flag = 1;
 8002032:	4b06      	ldr	r3, [pc, #24]	@ (800204c <HAL_UART_TxCpltCallback+0x54>)
 8002034:	2201      	movs	r2, #1
 8002036:	701a      	strb	r2, [r3, #0]
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	bc80      	pop	{r7}
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	40013800 	.word	0x40013800
 8002048:	20000411 	.word	0x20000411
 800204c:	200003f7 	.word	0x200003f7
 8002050:	200003f8 	.word	0x200003f8

08002054 <HAL_ADC_ConvCpltCallback>:
  * @brief  Callback function to handle ADC conversion complete interrupts.
  * @param  hadc: Pointer to the ADC handle.
  * @retval None
*/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
	// Verify the ADC instance to ensure the callback is for ADC1
  // If the ADC instance is ADC1, get the ADC value and calculate the battery percentage
  if (hadc == &hadc1)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a10      	ldr	r2, [pc, #64]	@ (80020a0 <HAL_ADC_ConvCpltCallback+0x4c>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d119      	bne.n	8002098 <HAL_ADC_ConvCpltCallback+0x44>
	{
    // Get the ADC value
    adc_data = HAL_ADC_GetValue(&hadc1);
 8002064:	480e      	ldr	r0, [pc, #56]	@ (80020a0 <HAL_ADC_ConvCpltCallback+0x4c>)
 8002066:	f000 fe73 	bl	8002d50 <HAL_ADC_GetValue>
 800206a:	4603      	mov	r3, r0
 800206c:	b29a      	uxth	r2, r3
 800206e:	4b0d      	ldr	r3, [pc, #52]	@ (80020a4 <HAL_ADC_ConvCpltCallback+0x50>)
 8002070:	801a      	strh	r2, [r3, #0]

    // Set the ADC valid flag
    adc_valid_flag = 1;
 8002072:	4b0d      	ldr	r3, [pc, #52]	@ (80020a8 <HAL_ADC_ConvCpltCallback+0x54>)
 8002074:	2201      	movs	r2, #1
 8002076:	701a      	strb	r2, [r3, #0]

    // Calculate the battery percentage
    battery_percentage = adc_data * 100 / 4095;
 8002078:	4b0a      	ldr	r3, [pc, #40]	@ (80020a4 <HAL_ADC_ConvCpltCallback+0x50>)
 800207a:	881b      	ldrh	r3, [r3, #0]
 800207c:	461a      	mov	r2, r3
 800207e:	2364      	movs	r3, #100	@ 0x64
 8002080:	fb02 f303 	mul.w	r3, r2, r3
 8002084:	4a09      	ldr	r2, [pc, #36]	@ (80020ac <HAL_ADC_ConvCpltCallback+0x58>)
 8002086:	fb82 1203 	smull	r1, r2, r2, r3
 800208a:	441a      	add	r2, r3
 800208c:	12d2      	asrs	r2, r2, #11
 800208e:	17db      	asrs	r3, r3, #31
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	b29a      	uxth	r2, r3
 8002094:	4b06      	ldr	r3, [pc, #24]	@ (80020b0 <HAL_ADC_ConvCpltCallback+0x5c>)
 8002096:	801a      	strh	r2, [r3, #0]
	}
}
 8002098:	bf00      	nop
 800209a:	3708      	adds	r7, #8
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	20000304 	.word	0x20000304
 80020a4:	200003f2 	.word	0x200003f2
 80020a8:	200003f1 	.word	0x200003f1
 80020ac:	80080081 	.word	0x80080081
 80020b0:	200003f4 	.word	0x200003f4

080020b4 <Update_alarm_data>:

void Update_alarm_data(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  sParam_data_alarm_setup_mode_1.hour     = alarm_get_data[0].hour;
 80020b8:	4b9e      	ldr	r3, [pc, #632]	@ (8002334 <Update_alarm_data+0x280>)
 80020ba:	789b      	ldrb	r3, [r3, #2]
 80020bc:	b2da      	uxtb	r2, r3
 80020be:	4b9e      	ldr	r3, [pc, #632]	@ (8002338 <Update_alarm_data+0x284>)
 80020c0:	709a      	strb	r2, [r3, #2]
  sParam_data_alarm_setup_mode_1.minute   = alarm_get_data[0].minute;
 80020c2:	4b9c      	ldr	r3, [pc, #624]	@ (8002334 <Update_alarm_data+0x280>)
 80020c4:	785b      	ldrb	r3, [r3, #1]
 80020c6:	b2da      	uxtb	r2, r3
 80020c8:	4b9b      	ldr	r3, [pc, #620]	@ (8002338 <Update_alarm_data+0x284>)
 80020ca:	705a      	strb	r2, [r3, #1]
  sParam_data_alarm_setup_mode_1.dy_dt    = alarm_get_data[0].dy_dt;
 80020cc:	4b99      	ldr	r3, [pc, #612]	@ (8002334 <Update_alarm_data+0x280>)
 80020ce:	78db      	ldrb	r3, [r3, #3]
 80020d0:	b2da      	uxtb	r2, r3
 80020d2:	4b99      	ldr	r3, [pc, #612]	@ (8002338 <Update_alarm_data+0x284>)
 80020d4:	70da      	strb	r2, [r3, #3]
  sParam_data_alarm_setup_mode_1.dow_dom  = alarm_get_data[0].on_off;
 80020d6:	4b97      	ldr	r3, [pc, #604]	@ (8002334 <Update_alarm_data+0x280>)
 80020d8:	795b      	ldrb	r3, [r3, #5]
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	461a      	mov	r2, r3
 80020de:	4b96      	ldr	r3, [pc, #600]	@ (8002338 <Update_alarm_data+0x284>)
 80020e0:	711a      	strb	r2, [r3, #4]
  sParam_data_alarm_setup_mode_1.on_off   = alarm_get_data[0].on_off;
 80020e2:	4b94      	ldr	r3, [pc, #592]	@ (8002334 <Update_alarm_data+0x280>)
 80020e4:	795b      	ldrb	r3, [r3, #5]
 80020e6:	b2da      	uxtb	r2, r3
 80020e8:	4b93      	ldr	r3, [pc, #588]	@ (8002338 <Update_alarm_data+0x284>)
 80020ea:	715a      	strb	r2, [r3, #5]
  sParam_data_alarm_setup_mode_1.second   = 0;
 80020ec:	4b92      	ldr	r3, [pc, #584]	@ (8002338 <Update_alarm_data+0x284>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	701a      	strb	r2, [r3, #0]

  sParam_data_alarm_setup_mode_2.hour     = alarm_get_data[1].hour;
 80020f2:	4b90      	ldr	r3, [pc, #576]	@ (8002334 <Update_alarm_data+0x280>)
 80020f4:	7a1b      	ldrb	r3, [r3, #8]
 80020f6:	b2da      	uxtb	r2, r3
 80020f8:	4b90      	ldr	r3, [pc, #576]	@ (800233c <Update_alarm_data+0x288>)
 80020fa:	709a      	strb	r2, [r3, #2]
  sParam_data_alarm_setup_mode_2.minute   = alarm_get_data[1].minute;
 80020fc:	4b8d      	ldr	r3, [pc, #564]	@ (8002334 <Update_alarm_data+0x280>)
 80020fe:	79db      	ldrb	r3, [r3, #7]
 8002100:	b2da      	uxtb	r2, r3
 8002102:	4b8e      	ldr	r3, [pc, #568]	@ (800233c <Update_alarm_data+0x288>)
 8002104:	705a      	strb	r2, [r3, #1]
  sParam_data_alarm_setup_mode_2.dy_dt    = alarm_get_data[1].dy_dt;
 8002106:	4b8b      	ldr	r3, [pc, #556]	@ (8002334 <Update_alarm_data+0x280>)
 8002108:	7a5b      	ldrb	r3, [r3, #9]
 800210a:	b2da      	uxtb	r2, r3
 800210c:	4b8b      	ldr	r3, [pc, #556]	@ (800233c <Update_alarm_data+0x288>)
 800210e:	70da      	strb	r2, [r3, #3]
  sParam_data_alarm_setup_mode_2.dow_dom  = alarm_get_data[1].on_off;
 8002110:	4b88      	ldr	r3, [pc, #544]	@ (8002334 <Update_alarm_data+0x280>)
 8002112:	7adb      	ldrb	r3, [r3, #11]
 8002114:	b2db      	uxtb	r3, r3
 8002116:	461a      	mov	r2, r3
 8002118:	4b88      	ldr	r3, [pc, #544]	@ (800233c <Update_alarm_data+0x288>)
 800211a:	711a      	strb	r2, [r3, #4]
  sParam_data_alarm_setup_mode_2.on_off   = alarm_get_data[1].on_off;
 800211c:	4b85      	ldr	r3, [pc, #532]	@ (8002334 <Update_alarm_data+0x280>)
 800211e:	7adb      	ldrb	r3, [r3, #11]
 8002120:	b2da      	uxtb	r2, r3
 8002122:	4b86      	ldr	r3, [pc, #536]	@ (800233c <Update_alarm_data+0x288>)
 8002124:	715a      	strb	r2, [r3, #5]
  sParam_data_alarm_setup_mode_2.second   = 0;
 8002126:	4b85      	ldr	r3, [pc, #532]	@ (800233c <Update_alarm_data+0x288>)
 8002128:	2200      	movs	r2, #0
 800212a:	701a      	strb	r2, [r3, #0]

  sParam_data_alarm_setup_mode_3.hour     = alarm_get_data[2].hour;
 800212c:	4b81      	ldr	r3, [pc, #516]	@ (8002334 <Update_alarm_data+0x280>)
 800212e:	7b9b      	ldrb	r3, [r3, #14]
 8002130:	b2da      	uxtb	r2, r3
 8002132:	4b83      	ldr	r3, [pc, #524]	@ (8002340 <Update_alarm_data+0x28c>)
 8002134:	709a      	strb	r2, [r3, #2]
  sParam_data_alarm_setup_mode_3.minute   = alarm_get_data[2].minute;
 8002136:	4b7f      	ldr	r3, [pc, #508]	@ (8002334 <Update_alarm_data+0x280>)
 8002138:	7b5b      	ldrb	r3, [r3, #13]
 800213a:	b2da      	uxtb	r2, r3
 800213c:	4b80      	ldr	r3, [pc, #512]	@ (8002340 <Update_alarm_data+0x28c>)
 800213e:	705a      	strb	r2, [r3, #1]
  sParam_data_alarm_setup_mode_3.dy_dt    = alarm_get_data[2].dy_dt;
 8002140:	4b7c      	ldr	r3, [pc, #496]	@ (8002334 <Update_alarm_data+0x280>)
 8002142:	7bdb      	ldrb	r3, [r3, #15]
 8002144:	b2da      	uxtb	r2, r3
 8002146:	4b7e      	ldr	r3, [pc, #504]	@ (8002340 <Update_alarm_data+0x28c>)
 8002148:	70da      	strb	r2, [r3, #3]
  sParam_data_alarm_setup_mode_3.dow_dom  = alarm_get_data[2].on_off;
 800214a:	4b7a      	ldr	r3, [pc, #488]	@ (8002334 <Update_alarm_data+0x280>)
 800214c:	7c5b      	ldrb	r3, [r3, #17]
 800214e:	b2db      	uxtb	r3, r3
 8002150:	461a      	mov	r2, r3
 8002152:	4b7b      	ldr	r3, [pc, #492]	@ (8002340 <Update_alarm_data+0x28c>)
 8002154:	711a      	strb	r2, [r3, #4]
  sParam_data_alarm_setup_mode_3.on_off   = alarm_get_data[2].on_off;
 8002156:	4b77      	ldr	r3, [pc, #476]	@ (8002334 <Update_alarm_data+0x280>)
 8002158:	7c5b      	ldrb	r3, [r3, #17]
 800215a:	b2da      	uxtb	r2, r3
 800215c:	4b78      	ldr	r3, [pc, #480]	@ (8002340 <Update_alarm_data+0x28c>)
 800215e:	715a      	strb	r2, [r3, #5]
  sParam_data_alarm_setup_mode_3.second   = 0;
 8002160:	4b77      	ldr	r3, [pc, #476]	@ (8002340 <Update_alarm_data+0x28c>)
 8002162:	2200      	movs	r2, #0
 8002164:	701a      	strb	r2, [r3, #0]

  sParam_data_alarm_setup_mode_4.hour     = alarm_get_data[3].hour;
 8002166:	4b73      	ldr	r3, [pc, #460]	@ (8002334 <Update_alarm_data+0x280>)
 8002168:	7d1b      	ldrb	r3, [r3, #20]
 800216a:	b2da      	uxtb	r2, r3
 800216c:	4b75      	ldr	r3, [pc, #468]	@ (8002344 <Update_alarm_data+0x290>)
 800216e:	709a      	strb	r2, [r3, #2]
  sParam_data_alarm_setup_mode_4.minute   = alarm_get_data[3].minute;
 8002170:	4b70      	ldr	r3, [pc, #448]	@ (8002334 <Update_alarm_data+0x280>)
 8002172:	7cdb      	ldrb	r3, [r3, #19]
 8002174:	b2da      	uxtb	r2, r3
 8002176:	4b73      	ldr	r3, [pc, #460]	@ (8002344 <Update_alarm_data+0x290>)
 8002178:	705a      	strb	r2, [r3, #1]
  sParam_data_alarm_setup_mode_4.dy_dt    = alarm_get_data[3].dy_dt;
 800217a:	4b6e      	ldr	r3, [pc, #440]	@ (8002334 <Update_alarm_data+0x280>)
 800217c:	7d5b      	ldrb	r3, [r3, #21]
 800217e:	b2da      	uxtb	r2, r3
 8002180:	4b70      	ldr	r3, [pc, #448]	@ (8002344 <Update_alarm_data+0x290>)
 8002182:	70da      	strb	r2, [r3, #3]
  sParam_data_alarm_setup_mode_4.dow_dom  = alarm_get_data[3].on_off;
 8002184:	4b6b      	ldr	r3, [pc, #428]	@ (8002334 <Update_alarm_data+0x280>)
 8002186:	7ddb      	ldrb	r3, [r3, #23]
 8002188:	b2db      	uxtb	r3, r3
 800218a:	461a      	mov	r2, r3
 800218c:	4b6d      	ldr	r3, [pc, #436]	@ (8002344 <Update_alarm_data+0x290>)
 800218e:	711a      	strb	r2, [r3, #4]
  sParam_data_alarm_setup_mode_4.on_off   = alarm_get_data[3].on_off;
 8002190:	4b68      	ldr	r3, [pc, #416]	@ (8002334 <Update_alarm_data+0x280>)
 8002192:	7ddb      	ldrb	r3, [r3, #23]
 8002194:	b2da      	uxtb	r2, r3
 8002196:	4b6b      	ldr	r3, [pc, #428]	@ (8002344 <Update_alarm_data+0x290>)
 8002198:	715a      	strb	r2, [r3, #5]
  sParam_data_alarm_setup_mode_4.second   = 0;
 800219a:	4b6a      	ldr	r3, [pc, #424]	@ (8002344 <Update_alarm_data+0x290>)
 800219c:	2200      	movs	r2, #0
 800219e:	701a      	strb	r2, [r3, #0]

  sParam_data_alarm_setup_mode_5.hour     = alarm_get_data[4].hour;
 80021a0:	4b64      	ldr	r3, [pc, #400]	@ (8002334 <Update_alarm_data+0x280>)
 80021a2:	7e9b      	ldrb	r3, [r3, #26]
 80021a4:	b2da      	uxtb	r2, r3
 80021a6:	4b68      	ldr	r3, [pc, #416]	@ (8002348 <Update_alarm_data+0x294>)
 80021a8:	709a      	strb	r2, [r3, #2]
  sParam_data_alarm_setup_mode_5.minute   = alarm_get_data[4].minute;
 80021aa:	4b62      	ldr	r3, [pc, #392]	@ (8002334 <Update_alarm_data+0x280>)
 80021ac:	7e5b      	ldrb	r3, [r3, #25]
 80021ae:	b2da      	uxtb	r2, r3
 80021b0:	4b65      	ldr	r3, [pc, #404]	@ (8002348 <Update_alarm_data+0x294>)
 80021b2:	705a      	strb	r2, [r3, #1]
  sParam_data_alarm_setup_mode_5.dy_dt    = alarm_get_data[4].dy_dt;
 80021b4:	4b5f      	ldr	r3, [pc, #380]	@ (8002334 <Update_alarm_data+0x280>)
 80021b6:	7edb      	ldrb	r3, [r3, #27]
 80021b8:	b2da      	uxtb	r2, r3
 80021ba:	4b63      	ldr	r3, [pc, #396]	@ (8002348 <Update_alarm_data+0x294>)
 80021bc:	70da      	strb	r2, [r3, #3]
  sParam_data_alarm_setup_mode_5.dow_dom  = alarm_get_data[4].on_off;
 80021be:	4b5d      	ldr	r3, [pc, #372]	@ (8002334 <Update_alarm_data+0x280>)
 80021c0:	7f5b      	ldrb	r3, [r3, #29]
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	461a      	mov	r2, r3
 80021c6:	4b60      	ldr	r3, [pc, #384]	@ (8002348 <Update_alarm_data+0x294>)
 80021c8:	711a      	strb	r2, [r3, #4]
  sParam_data_alarm_setup_mode_5.on_off   = alarm_get_data[4].on_off;
 80021ca:	4b5a      	ldr	r3, [pc, #360]	@ (8002334 <Update_alarm_data+0x280>)
 80021cc:	7f5b      	ldrb	r3, [r3, #29]
 80021ce:	b2da      	uxtb	r2, r3
 80021d0:	4b5d      	ldr	r3, [pc, #372]	@ (8002348 <Update_alarm_data+0x294>)
 80021d2:	715a      	strb	r2, [r3, #5]
  sParam_data_alarm_setup_mode_5.second   = 0;
 80021d4:	4b5c      	ldr	r3, [pc, #368]	@ (8002348 <Update_alarm_data+0x294>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	701a      	strb	r2, [r3, #0]

  sParam_data_alarm_setup_mode_6.hour     = alarm_get_data[5].hour;
 80021da:	4b56      	ldr	r3, [pc, #344]	@ (8002334 <Update_alarm_data+0x280>)
 80021dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021e0:	b2da      	uxtb	r2, r3
 80021e2:	4b5a      	ldr	r3, [pc, #360]	@ (800234c <Update_alarm_data+0x298>)
 80021e4:	709a      	strb	r2, [r3, #2]
  sParam_data_alarm_setup_mode_6.minute   = alarm_get_data[5].minute;
 80021e6:	4b53      	ldr	r3, [pc, #332]	@ (8002334 <Update_alarm_data+0x280>)
 80021e8:	7fdb      	ldrb	r3, [r3, #31]
 80021ea:	b2da      	uxtb	r2, r3
 80021ec:	4b57      	ldr	r3, [pc, #348]	@ (800234c <Update_alarm_data+0x298>)
 80021ee:	705a      	strb	r2, [r3, #1]
  sParam_data_alarm_setup_mode_6.dy_dt    = alarm_get_data[6].dy_dt;
 80021f0:	4b50      	ldr	r3, [pc, #320]	@ (8002334 <Update_alarm_data+0x280>)
 80021f2:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 80021f6:	b2da      	uxtb	r2, r3
 80021f8:	4b54      	ldr	r3, [pc, #336]	@ (800234c <Update_alarm_data+0x298>)
 80021fa:	70da      	strb	r2, [r3, #3]
  sParam_data_alarm_setup_mode_6.dow_dom  = alarm_get_data[5].on_off;
 80021fc:	4b4d      	ldr	r3, [pc, #308]	@ (8002334 <Update_alarm_data+0x280>)
 80021fe:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8002202:	b2db      	uxtb	r3, r3
 8002204:	461a      	mov	r2, r3
 8002206:	4b51      	ldr	r3, [pc, #324]	@ (800234c <Update_alarm_data+0x298>)
 8002208:	711a      	strb	r2, [r3, #4]
  sParam_data_alarm_setup_mode_6.on_off   = alarm_get_data[5].on_off;
 800220a:	4b4a      	ldr	r3, [pc, #296]	@ (8002334 <Update_alarm_data+0x280>)
 800220c:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8002210:	b2da      	uxtb	r2, r3
 8002212:	4b4e      	ldr	r3, [pc, #312]	@ (800234c <Update_alarm_data+0x298>)
 8002214:	715a      	strb	r2, [r3, #5]
  sParam_data_alarm_setup_mode_6.second   = 0;
 8002216:	4b4d      	ldr	r3, [pc, #308]	@ (800234c <Update_alarm_data+0x298>)
 8002218:	2200      	movs	r2, #0
 800221a:	701a      	strb	r2, [r3, #0]

  sParam_data_alarm_setup_mode_7.hour     = alarm_get_data[6].hour;
 800221c:	4b45      	ldr	r3, [pc, #276]	@ (8002334 <Update_alarm_data+0x280>)
 800221e:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8002222:	b2da      	uxtb	r2, r3
 8002224:	4b4a      	ldr	r3, [pc, #296]	@ (8002350 <Update_alarm_data+0x29c>)
 8002226:	709a      	strb	r2, [r3, #2]
  sParam_data_alarm_setup_mode_7.minute   = alarm_get_data[6].minute;
 8002228:	4b42      	ldr	r3, [pc, #264]	@ (8002334 <Update_alarm_data+0x280>)
 800222a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800222e:	b2da      	uxtb	r2, r3
 8002230:	4b47      	ldr	r3, [pc, #284]	@ (8002350 <Update_alarm_data+0x29c>)
 8002232:	705a      	strb	r2, [r3, #1]
  sParam_data_alarm_setup_mode_7.dy_dt    = alarm_get_data[6].dy_dt; 
 8002234:	4b3f      	ldr	r3, [pc, #252]	@ (8002334 <Update_alarm_data+0x280>)
 8002236:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800223a:	b2da      	uxtb	r2, r3
 800223c:	4b44      	ldr	r3, [pc, #272]	@ (8002350 <Update_alarm_data+0x29c>)
 800223e:	70da      	strb	r2, [r3, #3]
  sParam_data_alarm_setup_mode_7.dow_dom  = alarm_get_data[6].on_off;
 8002240:	4b3c      	ldr	r3, [pc, #240]	@ (8002334 <Update_alarm_data+0x280>)
 8002242:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002246:	b2db      	uxtb	r3, r3
 8002248:	461a      	mov	r2, r3
 800224a:	4b41      	ldr	r3, [pc, #260]	@ (8002350 <Update_alarm_data+0x29c>)
 800224c:	711a      	strb	r2, [r3, #4]
  sParam_data_alarm_setup_mode_7.on_off   = alarm_get_data[6].on_off;
 800224e:	4b39      	ldr	r3, [pc, #228]	@ (8002334 <Update_alarm_data+0x280>)
 8002250:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002254:	b2da      	uxtb	r2, r3
 8002256:	4b3e      	ldr	r3, [pc, #248]	@ (8002350 <Update_alarm_data+0x29c>)
 8002258:	715a      	strb	r2, [r3, #5]
  sParam_data_alarm_setup_mode_7.second   = 0;
 800225a:	4b3d      	ldr	r3, [pc, #244]	@ (8002350 <Update_alarm_data+0x29c>)
 800225c:	2200      	movs	r2, #0
 800225e:	701a      	strb	r2, [r3, #0]

  sParam_data_alarm_setup_mode_8.hour     = alarm_get_data[7].hour;
 8002260:	4b34      	ldr	r3, [pc, #208]	@ (8002334 <Update_alarm_data+0x280>)
 8002262:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002266:	b2da      	uxtb	r2, r3
 8002268:	4b3a      	ldr	r3, [pc, #232]	@ (8002354 <Update_alarm_data+0x2a0>)
 800226a:	709a      	strb	r2, [r3, #2]
  sParam_data_alarm_setup_mode_8.minute   = alarm_get_data[7].minute;
 800226c:	4b31      	ldr	r3, [pc, #196]	@ (8002334 <Update_alarm_data+0x280>)
 800226e:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8002272:	b2da      	uxtb	r2, r3
 8002274:	4b37      	ldr	r3, [pc, #220]	@ (8002354 <Update_alarm_data+0x2a0>)
 8002276:	705a      	strb	r2, [r3, #1]
  sParam_data_alarm_setup_mode_8.dy_dt    = alarm_get_data[7].dy_dt;
 8002278:	4b2e      	ldr	r3, [pc, #184]	@ (8002334 <Update_alarm_data+0x280>)
 800227a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800227e:	b2da      	uxtb	r2, r3
 8002280:	4b34      	ldr	r3, [pc, #208]	@ (8002354 <Update_alarm_data+0x2a0>)
 8002282:	70da      	strb	r2, [r3, #3]
  sParam_data_alarm_setup_mode_8.dow_dom  = alarm_get_data[7].on_off;
 8002284:	4b2b      	ldr	r3, [pc, #172]	@ (8002334 <Update_alarm_data+0x280>)
 8002286:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800228a:	b2db      	uxtb	r3, r3
 800228c:	461a      	mov	r2, r3
 800228e:	4b31      	ldr	r3, [pc, #196]	@ (8002354 <Update_alarm_data+0x2a0>)
 8002290:	711a      	strb	r2, [r3, #4]
  sParam_data_alarm_setup_mode_8.on_off   = alarm_get_data[7].on_off;
 8002292:	4b28      	ldr	r3, [pc, #160]	@ (8002334 <Update_alarm_data+0x280>)
 8002294:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8002298:	b2da      	uxtb	r2, r3
 800229a:	4b2e      	ldr	r3, [pc, #184]	@ (8002354 <Update_alarm_data+0x2a0>)
 800229c:	715a      	strb	r2, [r3, #5]
  sParam_data_alarm_setup_mode_8.second   = 0;
 800229e:	4b2d      	ldr	r3, [pc, #180]	@ (8002354 <Update_alarm_data+0x2a0>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	701a      	strb	r2, [r3, #0]

  sParam_data_alarm_setup_mode_9.hour     = alarm_get_data[8].hour;
 80022a4:	4b23      	ldr	r3, [pc, #140]	@ (8002334 <Update_alarm_data+0x280>)
 80022a6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80022aa:	b2da      	uxtb	r2, r3
 80022ac:	4b2a      	ldr	r3, [pc, #168]	@ (8002358 <Update_alarm_data+0x2a4>)
 80022ae:	709a      	strb	r2, [r3, #2]
  sParam_data_alarm_setup_mode_9.minute   = alarm_get_data[8].minute;
 80022b0:	4b20      	ldr	r3, [pc, #128]	@ (8002334 <Update_alarm_data+0x280>)
 80022b2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80022b6:	b2da      	uxtb	r2, r3
 80022b8:	4b27      	ldr	r3, [pc, #156]	@ (8002358 <Update_alarm_data+0x2a4>)
 80022ba:	705a      	strb	r2, [r3, #1]
  sParam_data_alarm_setup_mode_9.dy_dt    = alarm_get_data[8].dy_dt;
 80022bc:	4b1d      	ldr	r3, [pc, #116]	@ (8002334 <Update_alarm_data+0x280>)
 80022be:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80022c2:	b2da      	uxtb	r2, r3
 80022c4:	4b24      	ldr	r3, [pc, #144]	@ (8002358 <Update_alarm_data+0x2a4>)
 80022c6:	70da      	strb	r2, [r3, #3]
  sParam_data_alarm_setup_mode_9.dow_dom  = alarm_get_data[8].on_off;
 80022c8:	4b1a      	ldr	r3, [pc, #104]	@ (8002334 <Update_alarm_data+0x280>)
 80022ca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	461a      	mov	r2, r3
 80022d2:	4b21      	ldr	r3, [pc, #132]	@ (8002358 <Update_alarm_data+0x2a4>)
 80022d4:	711a      	strb	r2, [r3, #4]
  sParam_data_alarm_setup_mode_9.on_off   = alarm_get_data[8].on_off;
 80022d6:	4b17      	ldr	r3, [pc, #92]	@ (8002334 <Update_alarm_data+0x280>)
 80022d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022dc:	b2da      	uxtb	r2, r3
 80022de:	4b1e      	ldr	r3, [pc, #120]	@ (8002358 <Update_alarm_data+0x2a4>)
 80022e0:	715a      	strb	r2, [r3, #5]
  sParam_data_alarm_setup_mode_9.second   = 0;
 80022e2:	4b1d      	ldr	r3, [pc, #116]	@ (8002358 <Update_alarm_data+0x2a4>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	701a      	strb	r2, [r3, #0]

  sParam_data_alarm_setup_mode_10.hour     = alarm_get_data[9].hour;
 80022e8:	4b12      	ldr	r3, [pc, #72]	@ (8002334 <Update_alarm_data+0x280>)
 80022ea:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80022ee:	b2da      	uxtb	r2, r3
 80022f0:	4b1a      	ldr	r3, [pc, #104]	@ (800235c <Update_alarm_data+0x2a8>)
 80022f2:	709a      	strb	r2, [r3, #2]
  sParam_data_alarm_setup_mode_10.minute   = alarm_get_data[9].minute;
 80022f4:	4b0f      	ldr	r3, [pc, #60]	@ (8002334 <Update_alarm_data+0x280>)
 80022f6:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 80022fa:	b2da      	uxtb	r2, r3
 80022fc:	4b17      	ldr	r3, [pc, #92]	@ (800235c <Update_alarm_data+0x2a8>)
 80022fe:	705a      	strb	r2, [r3, #1]
  sParam_data_alarm_setup_mode_10.dy_dt    = alarm_get_data[9].dy_dt;
 8002300:	4b0c      	ldr	r3, [pc, #48]	@ (8002334 <Update_alarm_data+0x280>)
 8002302:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002306:	b2da      	uxtb	r2, r3
 8002308:	4b14      	ldr	r3, [pc, #80]	@ (800235c <Update_alarm_data+0x2a8>)
 800230a:	70da      	strb	r2, [r3, #3]
  sParam_data_alarm_setup_mode_10.dow_dom  = alarm_get_data[9].on_off;
 800230c:	4b09      	ldr	r3, [pc, #36]	@ (8002334 <Update_alarm_data+0x280>)
 800230e:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8002312:	b2db      	uxtb	r3, r3
 8002314:	461a      	mov	r2, r3
 8002316:	4b11      	ldr	r3, [pc, #68]	@ (800235c <Update_alarm_data+0x2a8>)
 8002318:	711a      	strb	r2, [r3, #4]
  sParam_data_alarm_setup_mode_10.on_off   = alarm_get_data[9].on_off;
 800231a:	4b06      	ldr	r3, [pc, #24]	@ (8002334 <Update_alarm_data+0x280>)
 800231c:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8002320:	b2da      	uxtb	r2, r3
 8002322:	4b0e      	ldr	r3, [pc, #56]	@ (800235c <Update_alarm_data+0x2a8>)
 8002324:	715a      	strb	r2, [r3, #5]
  sParam_data_alarm_setup_mode_10.second   = 0;
 8002326:	4b0d      	ldr	r3, [pc, #52]	@ (800235c <Update_alarm_data+0x2a8>)
 8002328:	2200      	movs	r2, #0
 800232a:	701a      	strb	r2, [r3, #0]

}
 800232c:	bf00      	nop
 800232e:	46bd      	mov	sp, r7
 8002330:	bc80      	pop	{r7}
 8002332:	4770      	bx	lr
 8002334:	200003a8 	.word	0x200003a8
 8002338:	20000460 	.word	0x20000460
 800233c:	20000468 	.word	0x20000468
 8002340:	20000470 	.word	0x20000470
 8002344:	20000478 	.word	0x20000478
 8002348:	20000480 	.word	0x20000480
 800234c:	20000488 	.word	0x20000488
 8002350:	20000490 	.word	0x20000490
 8002354:	20000498 	.word	0x20000498
 8002358:	200004a0 	.word	0x200004a0
 800235c:	200004a8 	.word	0x200004a8

08002360 <Alarm_Ring>:

void Alarm_Ring (void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  // Check if the buzzer cycle number is less than or equal to the maximum cycle number
  if (buzzer_cycle <= BUZZER_CYCLE_NUM)
 8002364:	4b3f      	ldr	r3, [pc, #252]	@ (8002464 <Alarm_Ring+0x104>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	2b0a      	cmp	r3, #10
 800236a:	d868      	bhi.n	800243e <Alarm_Ring+0xde>
  {
    // Check if the buzzer phase number is less than or equal to the maximum phase number
    if (buzzer_phase <= 4)
 800236c:	4b3e      	ldr	r3, [pc, #248]	@ (8002468 <Alarm_Ring+0x108>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	2b04      	cmp	r3, #4
 8002372:	d855      	bhi.n	8002420 <Alarm_Ring+0xc0>
    {
      // Check if the buzzer tick is within the specified delay time
      if      ((buzzer_phase == 0) && (HAL_GetTick() - buzzer_tick <= BUZZER_SHORT_DELAY))
 8002374:	4b3c      	ldr	r3, [pc, #240]	@ (8002468 <Alarm_Ring+0x108>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d10d      	bne.n	8002398 <Alarm_Ring+0x38>
 800237c:	f000 fb2c 	bl	80029d8 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	4b3a      	ldr	r3, [pc, #232]	@ (800246c <Alarm_Ring+0x10c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b64      	cmp	r3, #100	@ 0x64
 800238a:	d805      	bhi.n	8002398 <Alarm_Ring+0x38>
      {
        // Turn on the buzzer for a short duration
        HAL_GPIO_WritePin(GPIOB, BUZZER_Pin, BUZZER_ACTIVE);
 800238c:	2201      	movs	r2, #1
 800238e:	2101      	movs	r1, #1
 8002390:	4837      	ldr	r0, [pc, #220]	@ (8002470 <Alarm_Ring+0x110>)
 8002392:	f001 faa8 	bl	80038e6 <HAL_GPIO_WritePin>
 8002396:	e062      	b.n	800245e <Alarm_Ring+0xfe>
      }
      else if ((buzzer_phase == 1) && (HAL_GetTick() - buzzer_tick <= BUZZER_SHORT_DELAY))
 8002398:	4b33      	ldr	r3, [pc, #204]	@ (8002468 <Alarm_Ring+0x108>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d10d      	bne.n	80023bc <Alarm_Ring+0x5c>
 80023a0:	f000 fb1a 	bl	80029d8 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	4b31      	ldr	r3, [pc, #196]	@ (800246c <Alarm_Ring+0x10c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	2b64      	cmp	r3, #100	@ 0x64
 80023ae:	d805      	bhi.n	80023bc <Alarm_Ring+0x5c>
      {
        // Turn off the buzzer for a short duration
        HAL_GPIO_WritePin(GPIOB, BUZZER_Pin, BUZZER_INACTIVE);
 80023b0:	2200      	movs	r2, #0
 80023b2:	2101      	movs	r1, #1
 80023b4:	482e      	ldr	r0, [pc, #184]	@ (8002470 <Alarm_Ring+0x110>)
 80023b6:	f001 fa96 	bl	80038e6 <HAL_GPIO_WritePin>
 80023ba:	e050      	b.n	800245e <Alarm_Ring+0xfe>
      }
      else if ((buzzer_phase == 3) && (HAL_GetTick() - buzzer_tick <= BUZZER_MEDIUM_DELAY))
 80023bc:	4b2a      	ldr	r3, [pc, #168]	@ (8002468 <Alarm_Ring+0x108>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	2b03      	cmp	r3, #3
 80023c2:	d10e      	bne.n	80023e2 <Alarm_Ring+0x82>
 80023c4:	f000 fb08 	bl	80029d8 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	4b28      	ldr	r3, [pc, #160]	@ (800246c <Alarm_Ring+0x10c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80023d4:	d805      	bhi.n	80023e2 <Alarm_Ring+0x82>
      {
        // Turn on the buzzer for a medium duration
        HAL_GPIO_WritePin(GPIOB, BUZZER_Pin, BUZZER_ACTIVE);
 80023d6:	2201      	movs	r2, #1
 80023d8:	2101      	movs	r1, #1
 80023da:	4825      	ldr	r0, [pc, #148]	@ (8002470 <Alarm_Ring+0x110>)
 80023dc:	f001 fa83 	bl	80038e6 <HAL_GPIO_WritePin>
 80023e0:	e03d      	b.n	800245e <Alarm_Ring+0xfe>
      }
      else if ((buzzer_phase == 4) && (HAL_GetTick() - buzzer_tick <= BUZZER_LONG_DELAY))
 80023e2:	4b21      	ldr	r3, [pc, #132]	@ (8002468 <Alarm_Ring+0x108>)
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	2b04      	cmp	r3, #4
 80023e8:	d10e      	bne.n	8002408 <Alarm_Ring+0xa8>
 80023ea:	f000 faf5 	bl	80029d8 <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	4b1e      	ldr	r3, [pc, #120]	@ (800246c <Alarm_Ring+0x10c>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80023fa:	d805      	bhi.n	8002408 <Alarm_Ring+0xa8>
      {
        // Turn off the buzzer for a long duration
        HAL_GPIO_WritePin(GPIOB, BUZZER_Pin, BUZZER_INACTIVE);
 80023fc:	2200      	movs	r2, #0
 80023fe:	2101      	movs	r1, #1
 8002400:	481b      	ldr	r0, [pc, #108]	@ (8002470 <Alarm_Ring+0x110>)
 8002402:	f001 fa70 	bl	80038e6 <HAL_GPIO_WritePin>
 8002406:	e02a      	b.n	800245e <Alarm_Ring+0xfe>
      }
      else
      {
        // Reset the tick for the next phase
        buzzer_tick = HAL_GetTick(); 
 8002408:	f000 fae6 	bl	80029d8 <HAL_GetTick>
 800240c:	4603      	mov	r3, r0
 800240e:	4a17      	ldr	r2, [pc, #92]	@ (800246c <Alarm_Ring+0x10c>)
 8002410:	6013      	str	r3, [r2, #0]

        // Move to the next phase
        buzzer_phase++; 
 8002412:	4b15      	ldr	r3, [pc, #84]	@ (8002468 <Alarm_Ring+0x108>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	3301      	adds	r3, #1
 8002418:	b2da      	uxtb	r2, r3
 800241a:	4b13      	ldr	r3, [pc, #76]	@ (8002468 <Alarm_Ring+0x108>)
 800241c:	701a      	strb	r2, [r3, #0]
    system_state.past_mode = ALARM_ACTIVE_MODE; 

    // Reset the buzzer
    HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, BUZZER_INACTIVE); 
  }
}
 800241e:	e01e      	b.n	800245e <Alarm_Ring+0xfe>
      buzzer_tick = HAL_GetTick(); 
 8002420:	f000 fada 	bl	80029d8 <HAL_GetTick>
 8002424:	4603      	mov	r3, r0
 8002426:	4a11      	ldr	r2, [pc, #68]	@ (800246c <Alarm_Ring+0x10c>)
 8002428:	6013      	str	r3, [r2, #0]
      buzzer_phase = 0; 
 800242a:	4b0f      	ldr	r3, [pc, #60]	@ (8002468 <Alarm_Ring+0x108>)
 800242c:	2200      	movs	r2, #0
 800242e:	701a      	strb	r2, [r3, #0]
      buzzer_cycle++; 
 8002430:	4b0c      	ldr	r3, [pc, #48]	@ (8002464 <Alarm_Ring+0x104>)
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	3301      	adds	r3, #1
 8002436:	b2da      	uxtb	r2, r3
 8002438:	4b0a      	ldr	r3, [pc, #40]	@ (8002464 <Alarm_Ring+0x104>)
 800243a:	701a      	strb	r2, [r3, #0]
}
 800243c:	e00f      	b.n	800245e <Alarm_Ring+0xfe>
    alarm_active_flag = false; 
 800243e:	4b0d      	ldr	r3, [pc, #52]	@ (8002474 <Alarm_Ring+0x114>)
 8002440:	2200      	movs	r2, #0
 8002442:	701a      	strb	r2, [r3, #0]
    system_state.mode = system_state.past_mode; 
 8002444:	4b0c      	ldr	r3, [pc, #48]	@ (8002478 <Alarm_Ring+0x118>)
 8002446:	785a      	ldrb	r2, [r3, #1]
 8002448:	4b0b      	ldr	r3, [pc, #44]	@ (8002478 <Alarm_Ring+0x118>)
 800244a:	701a      	strb	r2, [r3, #0]
    system_state.past_mode = ALARM_ACTIVE_MODE; 
 800244c:	4b0a      	ldr	r3, [pc, #40]	@ (8002478 <Alarm_Ring+0x118>)
 800244e:	2204      	movs	r2, #4
 8002450:	705a      	strb	r2, [r3, #1]
    HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, BUZZER_INACTIVE); 
 8002452:	2200      	movs	r2, #0
 8002454:	2101      	movs	r1, #1
 8002456:	4806      	ldr	r0, [pc, #24]	@ (8002470 <Alarm_Ring+0x110>)
 8002458:	f001 fa45 	bl	80038e6 <HAL_GPIO_WritePin>
}
 800245c:	e7ff      	b.n	800245e <Alarm_Ring+0xfe>
 800245e:	bf00      	nop
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	2000045a 	.word	0x2000045a
 8002468:	2000045b 	.word	0x2000045b
 800246c:	2000045c 	.word	0x2000045c
 8002470:	40010c00 	.word	0x40010c00
 8002474:	200003e7 	.word	0x200003e7
 8002478:	20000388 	.word	0x20000388

0800247c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002480:	b672      	cpsid	i
}
 8002482:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002484:	bf00      	nop
 8002486:	e7fd      	b.n	8002484 <Error_Handler+0x8>

08002488 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800248c:	4b17      	ldr	r3, [pc, #92]	@ (80024ec <MX_SPI1_Init+0x64>)
 800248e:	4a18      	ldr	r2, [pc, #96]	@ (80024f0 <MX_SPI1_Init+0x68>)
 8002490:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002492:	4b16      	ldr	r3, [pc, #88]	@ (80024ec <MX_SPI1_Init+0x64>)
 8002494:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002498:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800249a:	4b14      	ldr	r3, [pc, #80]	@ (80024ec <MX_SPI1_Init+0x64>)
 800249c:	2200      	movs	r2, #0
 800249e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80024a0:	4b12      	ldr	r3, [pc, #72]	@ (80024ec <MX_SPI1_Init+0x64>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024a6:	4b11      	ldr	r3, [pc, #68]	@ (80024ec <MX_SPI1_Init+0x64>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024ac:	4b0f      	ldr	r3, [pc, #60]	@ (80024ec <MX_SPI1_Init+0x64>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80024b2:	4b0e      	ldr	r3, [pc, #56]	@ (80024ec <MX_SPI1_Init+0x64>)
 80024b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024b8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80024ba:	4b0c      	ldr	r3, [pc, #48]	@ (80024ec <MX_SPI1_Init+0x64>)
 80024bc:	2228      	movs	r2, #40	@ 0x28
 80024be:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024c0:	4b0a      	ldr	r3, [pc, #40]	@ (80024ec <MX_SPI1_Init+0x64>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80024c6:	4b09      	ldr	r3, [pc, #36]	@ (80024ec <MX_SPI1_Init+0x64>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024cc:	4b07      	ldr	r3, [pc, #28]	@ (80024ec <MX_SPI1_Init+0x64>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80024d2:	4b06      	ldr	r3, [pc, #24]	@ (80024ec <MX_SPI1_Init+0x64>)
 80024d4:	220a      	movs	r2, #10
 80024d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80024d8:	4804      	ldr	r0, [pc, #16]	@ (80024ec <MX_SPI1_Init+0x64>)
 80024da:	f002 ff79 	bl	80053d0 <HAL_SPI_Init>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80024e4:	f7ff ffca 	bl	800247c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80024e8:	bf00      	nop
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	200004b0 	.word	0x200004b0
 80024f0:	40013000 	.word	0x40013000

080024f4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b088      	sub	sp, #32
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024fc:	f107 0310 	add.w	r3, r7, #16
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]
 8002504:	605a      	str	r2, [r3, #4]
 8002506:	609a      	str	r2, [r3, #8]
 8002508:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a15      	ldr	r2, [pc, #84]	@ (8002564 <HAL_SPI_MspInit+0x70>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d123      	bne.n	800255c <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002514:	4b14      	ldr	r3, [pc, #80]	@ (8002568 <HAL_SPI_MspInit+0x74>)
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	4a13      	ldr	r2, [pc, #76]	@ (8002568 <HAL_SPI_MspInit+0x74>)
 800251a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800251e:	6193      	str	r3, [r2, #24]
 8002520:	4b11      	ldr	r3, [pc, #68]	@ (8002568 <HAL_SPI_MspInit+0x74>)
 8002522:	699b      	ldr	r3, [r3, #24]
 8002524:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002528:	60fb      	str	r3, [r7, #12]
 800252a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800252c:	4b0e      	ldr	r3, [pc, #56]	@ (8002568 <HAL_SPI_MspInit+0x74>)
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	4a0d      	ldr	r2, [pc, #52]	@ (8002568 <HAL_SPI_MspInit+0x74>)
 8002532:	f043 0304 	orr.w	r3, r3, #4
 8002536:	6193      	str	r3, [r2, #24]
 8002538:	4b0b      	ldr	r3, [pc, #44]	@ (8002568 <HAL_SPI_MspInit+0x74>)
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	60bb      	str	r3, [r7, #8]
 8002542:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|DIN_Pin;
 8002544:	23a0      	movs	r3, #160	@ 0xa0
 8002546:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002548:	2302      	movs	r3, #2
 800254a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800254c:	2303      	movs	r3, #3
 800254e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002550:	f107 0310 	add.w	r3, r7, #16
 8002554:	4619      	mov	r1, r3
 8002556:	4805      	ldr	r0, [pc, #20]	@ (800256c <HAL_SPI_MspInit+0x78>)
 8002558:	f001 f82a 	bl	80035b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800255c:	bf00      	nop
 800255e:	3720      	adds	r7, #32
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	40013000 	.word	0x40013000
 8002568:	40021000 	.word	0x40021000
 800256c:	40010800 	.word	0x40010800

08002570 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002576:	4b15      	ldr	r3, [pc, #84]	@ (80025cc <HAL_MspInit+0x5c>)
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	4a14      	ldr	r2, [pc, #80]	@ (80025cc <HAL_MspInit+0x5c>)
 800257c:	f043 0301 	orr.w	r3, r3, #1
 8002580:	6193      	str	r3, [r2, #24]
 8002582:	4b12      	ldr	r3, [pc, #72]	@ (80025cc <HAL_MspInit+0x5c>)
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	60bb      	str	r3, [r7, #8]
 800258c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800258e:	4b0f      	ldr	r3, [pc, #60]	@ (80025cc <HAL_MspInit+0x5c>)
 8002590:	69db      	ldr	r3, [r3, #28]
 8002592:	4a0e      	ldr	r2, [pc, #56]	@ (80025cc <HAL_MspInit+0x5c>)
 8002594:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002598:	61d3      	str	r3, [r2, #28]
 800259a:	4b0c      	ldr	r3, [pc, #48]	@ (80025cc <HAL_MspInit+0x5c>)
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025a2:	607b      	str	r3, [r7, #4]
 80025a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80025a6:	4b0a      	ldr	r3, [pc, #40]	@ (80025d0 <HAL_MspInit+0x60>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80025b2:	60fb      	str	r3, [r7, #12]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	4a04      	ldr	r2, [pc, #16]	@ (80025d0 <HAL_MspInit+0x60>)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025c2:	bf00      	nop
 80025c4:	3714      	adds	r7, #20
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bc80      	pop	{r7}
 80025ca:	4770      	bx	lr
 80025cc:	40021000 	.word	0x40021000
 80025d0:	40010000 	.word	0x40010000

080025d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025d8:	bf00      	nop
 80025da:	e7fd      	b.n	80025d8 <NMI_Handler+0x4>

080025dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025e0:	bf00      	nop
 80025e2:	e7fd      	b.n	80025e0 <HardFault_Handler+0x4>

080025e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025e8:	bf00      	nop
 80025ea:	e7fd      	b.n	80025e8 <MemManage_Handler+0x4>

080025ec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025f0:	bf00      	nop
 80025f2:	e7fd      	b.n	80025f0 <BusFault_Handler+0x4>

080025f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025f8:	bf00      	nop
 80025fa:	e7fd      	b.n	80025f8 <UsageFault_Handler+0x4>

080025fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002600:	bf00      	nop
 8002602:	46bd      	mov	sp, r7
 8002604:	bc80      	pop	{r7}
 8002606:	4770      	bx	lr

08002608 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800260c:	bf00      	nop
 800260e:	46bd      	mov	sp, r7
 8002610:	bc80      	pop	{r7}
 8002612:	4770      	bx	lr

08002614 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002618:	bf00      	nop
 800261a:	46bd      	mov	sp, r7
 800261c:	bc80      	pop	{r7}
 800261e:	4770      	bx	lr

08002620 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002624:	f000 f9c6 	bl	80029b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002628:	bf00      	nop
 800262a:	bd80      	pop	{r7, pc}

0800262c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002630:	4802      	ldr	r0, [pc, #8]	@ (800263c <ADC1_2_IRQHandler+0x10>)
 8002632:	f000 fb99 	bl	8002d68 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002636:	bf00      	nop
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	20000304 	.word	0x20000304

08002640 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RTC_IN5_Pin);
 8002644:	2020      	movs	r0, #32
 8002646:	f001 f97f 	bl	8003948 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON4_IN8_Pin);
 800264a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800264e:	f001 f97b 	bl	8003948 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002652:	bf00      	nop
 8002654:	bd80      	pop	{r7, pc}
	...

08002658 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800265c:	4802      	ldr	r0, [pc, #8]	@ (8002668 <USART1_IRQHandler+0x10>)
 800265e:	f003 f9e3 	bl	8005a28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002662:	bf00      	nop
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	2000050c 	.word	0x2000050c

0800266c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON0_IN12_Pin);
 8002670:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002674:	f001 f968 	bl	8003948 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON1_IN13_Pin);
 8002678:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800267c:	f001 f964 	bl	8003948 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON2_IN14_Pin);
 8002680:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002684:	f001 f960 	bl	8003948 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON3_IN15_Pin);
 8002688:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800268c:	f001 f95c 	bl	8003948 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002690:	bf00      	nop
 8002692:	bd80      	pop	{r7, pc}

08002694 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b086      	sub	sp, #24
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026a0:	2300      	movs	r3, #0
 80026a2:	617b      	str	r3, [r7, #20]
 80026a4:	e00a      	b.n	80026bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026a6:	f3af 8000 	nop.w
 80026aa:	4601      	mov	r1, r0
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	1c5a      	adds	r2, r3, #1
 80026b0:	60ba      	str	r2, [r7, #8]
 80026b2:	b2ca      	uxtb	r2, r1
 80026b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	3301      	adds	r3, #1
 80026ba:	617b      	str	r3, [r7, #20]
 80026bc:	697a      	ldr	r2, [r7, #20]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	dbf0      	blt.n	80026a6 <_read+0x12>
  }

  return len;
 80026c4:	687b      	ldr	r3, [r7, #4]
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3718      	adds	r7, #24
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b086      	sub	sp, #24
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	60f8      	str	r0, [r7, #12]
 80026d6:	60b9      	str	r1, [r7, #8]
 80026d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026da:	2300      	movs	r3, #0
 80026dc:	617b      	str	r3, [r7, #20]
 80026de:	e009      	b.n	80026f4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	1c5a      	adds	r2, r3, #1
 80026e4:	60ba      	str	r2, [r7, #8]
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	3301      	adds	r3, #1
 80026f2:	617b      	str	r3, [r7, #20]
 80026f4:	697a      	ldr	r2, [r7, #20]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	dbf1      	blt.n	80026e0 <_write+0x12>
  }
  return len;
 80026fc:	687b      	ldr	r3, [r7, #4]
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3718      	adds	r7, #24
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <_close>:

int _close(int file)
{
 8002706:	b480      	push	{r7}
 8002708:	b083      	sub	sp, #12
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800270e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002712:	4618      	mov	r0, r3
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	bc80      	pop	{r7}
 800271a:	4770      	bx	lr

0800271c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800272c:	605a      	str	r2, [r3, #4]
  return 0;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	bc80      	pop	{r7}
 8002738:	4770      	bx	lr

0800273a <_isatty>:

int _isatty(int file)
{
 800273a:	b480      	push	{r7}
 800273c:	b083      	sub	sp, #12
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002742:	2301      	movs	r3, #1
}
 8002744:	4618      	mov	r0, r3
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	bc80      	pop	{r7}
 800274c:	4770      	bx	lr

0800274e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800274e:	b480      	push	{r7}
 8002750:	b085      	sub	sp, #20
 8002752:	af00      	add	r7, sp, #0
 8002754:	60f8      	str	r0, [r7, #12]
 8002756:	60b9      	str	r1, [r7, #8]
 8002758:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	3714      	adds	r7, #20
 8002760:	46bd      	mov	sp, r7
 8002762:	bc80      	pop	{r7}
 8002764:	4770      	bx	lr
	...

08002768 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b086      	sub	sp, #24
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002770:	4a14      	ldr	r2, [pc, #80]	@ (80027c4 <_sbrk+0x5c>)
 8002772:	4b15      	ldr	r3, [pc, #84]	@ (80027c8 <_sbrk+0x60>)
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800277c:	4b13      	ldr	r3, [pc, #76]	@ (80027cc <_sbrk+0x64>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d102      	bne.n	800278a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002784:	4b11      	ldr	r3, [pc, #68]	@ (80027cc <_sbrk+0x64>)
 8002786:	4a12      	ldr	r2, [pc, #72]	@ (80027d0 <_sbrk+0x68>)
 8002788:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800278a:	4b10      	ldr	r3, [pc, #64]	@ (80027cc <_sbrk+0x64>)
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4413      	add	r3, r2
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	429a      	cmp	r2, r3
 8002796:	d207      	bcs.n	80027a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002798:	f008 fe54 	bl	800b444 <__errno>
 800279c:	4603      	mov	r3, r0
 800279e:	220c      	movs	r2, #12
 80027a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027a2:	f04f 33ff 	mov.w	r3, #4294967295
 80027a6:	e009      	b.n	80027bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027a8:	4b08      	ldr	r3, [pc, #32]	@ (80027cc <_sbrk+0x64>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027ae:	4b07      	ldr	r3, [pc, #28]	@ (80027cc <_sbrk+0x64>)
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4413      	add	r3, r2
 80027b6:	4a05      	ldr	r2, [pc, #20]	@ (80027cc <_sbrk+0x64>)
 80027b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027ba:	68fb      	ldr	r3, [r7, #12]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3718      	adds	r7, #24
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	20005000 	.word	0x20005000
 80027c8:	00000400 	.word	0x00000400
 80027cc:	20000508 	.word	0x20000508
 80027d0:	200006c0 	.word	0x200006c0

080027d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027d8:	bf00      	nop
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr

080027e0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80027e4:	4b11      	ldr	r3, [pc, #68]	@ (800282c <MX_USART1_UART_Init+0x4c>)
 80027e6:	4a12      	ldr	r2, [pc, #72]	@ (8002830 <MX_USART1_UART_Init+0x50>)
 80027e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80027ea:	4b10      	ldr	r3, [pc, #64]	@ (800282c <MX_USART1_UART_Init+0x4c>)
 80027ec:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80027f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80027f2:	4b0e      	ldr	r3, [pc, #56]	@ (800282c <MX_USART1_UART_Init+0x4c>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80027f8:	4b0c      	ldr	r3, [pc, #48]	@ (800282c <MX_USART1_UART_Init+0x4c>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80027fe:	4b0b      	ldr	r3, [pc, #44]	@ (800282c <MX_USART1_UART_Init+0x4c>)
 8002800:	2200      	movs	r2, #0
 8002802:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002804:	4b09      	ldr	r3, [pc, #36]	@ (800282c <MX_USART1_UART_Init+0x4c>)
 8002806:	220c      	movs	r2, #12
 8002808:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800280a:	4b08      	ldr	r3, [pc, #32]	@ (800282c <MX_USART1_UART_Init+0x4c>)
 800280c:	2200      	movs	r2, #0
 800280e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002810:	4b06      	ldr	r3, [pc, #24]	@ (800282c <MX_USART1_UART_Init+0x4c>)
 8002812:	2200      	movs	r2, #0
 8002814:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002816:	4805      	ldr	r0, [pc, #20]	@ (800282c <MX_USART1_UART_Init+0x4c>)
 8002818:	f003 f85b 	bl	80058d2 <HAL_UART_Init>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002822:	f7ff fe2b 	bl	800247c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002826:	bf00      	nop
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	2000050c 	.word	0x2000050c
 8002830:	40013800 	.word	0x40013800

08002834 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b088      	sub	sp, #32
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800283c:	f107 0310 	add.w	r3, r7, #16
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	605a      	str	r2, [r3, #4]
 8002846:	609a      	str	r2, [r3, #8]
 8002848:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a20      	ldr	r2, [pc, #128]	@ (80028d0 <HAL_UART_MspInit+0x9c>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d139      	bne.n	80028c8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002854:	4b1f      	ldr	r3, [pc, #124]	@ (80028d4 <HAL_UART_MspInit+0xa0>)
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	4a1e      	ldr	r2, [pc, #120]	@ (80028d4 <HAL_UART_MspInit+0xa0>)
 800285a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800285e:	6193      	str	r3, [r2, #24]
 8002860:	4b1c      	ldr	r3, [pc, #112]	@ (80028d4 <HAL_UART_MspInit+0xa0>)
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002868:	60fb      	str	r3, [r7, #12]
 800286a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800286c:	4b19      	ldr	r3, [pc, #100]	@ (80028d4 <HAL_UART_MspInit+0xa0>)
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	4a18      	ldr	r2, [pc, #96]	@ (80028d4 <HAL_UART_MspInit+0xa0>)
 8002872:	f043 0304 	orr.w	r3, r3, #4
 8002876:	6193      	str	r3, [r2, #24]
 8002878:	4b16      	ldr	r3, [pc, #88]	@ (80028d4 <HAL_UART_MspInit+0xa0>)
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	f003 0304 	and.w	r3, r3, #4
 8002880:	60bb      	str	r3, [r7, #8]
 8002882:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002884:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002888:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800288a:	2302      	movs	r3, #2
 800288c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800288e:	2303      	movs	r3, #3
 8002890:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002892:	f107 0310 	add.w	r3, r7, #16
 8002896:	4619      	mov	r1, r3
 8002898:	480f      	ldr	r0, [pc, #60]	@ (80028d8 <HAL_UART_MspInit+0xa4>)
 800289a:	f000 fe89 	bl	80035b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800289e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80028a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028a4:	2300      	movs	r3, #0
 80028a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a8:	2300      	movs	r3, #0
 80028aa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ac:	f107 0310 	add.w	r3, r7, #16
 80028b0:	4619      	mov	r1, r3
 80028b2:	4809      	ldr	r0, [pc, #36]	@ (80028d8 <HAL_UART_MspInit+0xa4>)
 80028b4:	f000 fe7c 	bl	80035b0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80028b8:	2200      	movs	r2, #0
 80028ba:	2100      	movs	r1, #0
 80028bc:	2025      	movs	r0, #37	@ 0x25
 80028be:	f000 fd8e 	bl	80033de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80028c2:	2025      	movs	r0, #37	@ 0x25
 80028c4:	f000 fda7 	bl	8003416 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80028c8:	bf00      	nop
 80028ca:	3720      	adds	r7, #32
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	40013800 	.word	0x40013800
 80028d4:	40021000 	.word	0x40021000
 80028d8:	40010800 	.word	0x40010800

080028dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80028dc:	f7ff ff7a 	bl	80027d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028e0:	480b      	ldr	r0, [pc, #44]	@ (8002910 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80028e2:	490c      	ldr	r1, [pc, #48]	@ (8002914 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80028e4:	4a0c      	ldr	r2, [pc, #48]	@ (8002918 <LoopFillZerobss+0x16>)
  movs r3, #0
 80028e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028e8:	e002      	b.n	80028f0 <LoopCopyDataInit>

080028ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028ee:	3304      	adds	r3, #4

080028f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028f4:	d3f9      	bcc.n	80028ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028f6:	4a09      	ldr	r2, [pc, #36]	@ (800291c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80028f8:	4c09      	ldr	r4, [pc, #36]	@ (8002920 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80028fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028fc:	e001      	b.n	8002902 <LoopFillZerobss>

080028fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002900:	3204      	adds	r2, #4

08002902 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002902:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002904:	d3fb      	bcc.n	80028fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002906:	f008 fda3 	bl	800b450 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800290a:	f7fd fde3 	bl	80004d4 <main>
  bx lr
 800290e:	4770      	bx	lr
  ldr r0, =_sdata
 8002910:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002914:	200002e8 	.word	0x200002e8
  ldr r2, =_sidata
 8002918:	0800fc2c 	.word	0x0800fc2c
  ldr r2, =_sbss
 800291c:	200002e8 	.word	0x200002e8
  ldr r4, =_ebss
 8002920:	200006bc 	.word	0x200006bc

08002924 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002924:	e7fe      	b.n	8002924 <CAN1_RX1_IRQHandler>
	...

08002928 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800292c:	4b08      	ldr	r3, [pc, #32]	@ (8002950 <HAL_Init+0x28>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a07      	ldr	r2, [pc, #28]	@ (8002950 <HAL_Init+0x28>)
 8002932:	f043 0310 	orr.w	r3, r3, #16
 8002936:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002938:	2003      	movs	r0, #3
 800293a:	f000 fd45 	bl	80033c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800293e:	200f      	movs	r0, #15
 8002940:	f000 f808 	bl	8002954 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002944:	f7ff fe14 	bl	8002570 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	40022000 	.word	0x40022000

08002954 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800295c:	4b12      	ldr	r3, [pc, #72]	@ (80029a8 <HAL_InitTick+0x54>)
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	4b12      	ldr	r3, [pc, #72]	@ (80029ac <HAL_InitTick+0x58>)
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	4619      	mov	r1, r3
 8002966:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800296a:	fbb3 f3f1 	udiv	r3, r3, r1
 800296e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002972:	4618      	mov	r0, r3
 8002974:	f000 fd5d 	bl	8003432 <HAL_SYSTICK_Config>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e00e      	b.n	80029a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2b0f      	cmp	r3, #15
 8002986:	d80a      	bhi.n	800299e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002988:	2200      	movs	r2, #0
 800298a:	6879      	ldr	r1, [r7, #4]
 800298c:	f04f 30ff 	mov.w	r0, #4294967295
 8002990:	f000 fd25 	bl	80033de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002994:	4a06      	ldr	r2, [pc, #24]	@ (80029b0 <HAL_InitTick+0x5c>)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800299a:	2300      	movs	r3, #0
 800299c:	e000      	b.n	80029a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3708      	adds	r7, #8
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	20000080 	.word	0x20000080
 80029ac:	20000088 	.word	0x20000088
 80029b0:	20000084 	.word	0x20000084

080029b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029b8:	4b05      	ldr	r3, [pc, #20]	@ (80029d0 <HAL_IncTick+0x1c>)
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	461a      	mov	r2, r3
 80029be:	4b05      	ldr	r3, [pc, #20]	@ (80029d4 <HAL_IncTick+0x20>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4413      	add	r3, r2
 80029c4:	4a03      	ldr	r2, [pc, #12]	@ (80029d4 <HAL_IncTick+0x20>)
 80029c6:	6013      	str	r3, [r2, #0]
}
 80029c8:	bf00      	nop
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bc80      	pop	{r7}
 80029ce:	4770      	bx	lr
 80029d0:	20000088 	.word	0x20000088
 80029d4:	20000554 	.word	0x20000554

080029d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  return uwTick;
 80029dc:	4b02      	ldr	r3, [pc, #8]	@ (80029e8 <HAL_GetTick+0x10>)
 80029de:	681b      	ldr	r3, [r3, #0]
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bc80      	pop	{r7}
 80029e6:	4770      	bx	lr
 80029e8:	20000554 	.word	0x20000554

080029ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029f4:	f7ff fff0 	bl	80029d8 <HAL_GetTick>
 80029f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a04:	d005      	beq.n	8002a12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a06:	4b0a      	ldr	r3, [pc, #40]	@ (8002a30 <HAL_Delay+0x44>)
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	4413      	add	r3, r2
 8002a10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a12:	bf00      	nop
 8002a14:	f7ff ffe0 	bl	80029d8 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d8f7      	bhi.n	8002a14 <HAL_Delay+0x28>
  {
  }
}
 8002a24:	bf00      	nop
 8002a26:	bf00      	nop
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	20000088 	.word	0x20000088

08002a34 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b086      	sub	sp, #24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002a40:	2300      	movs	r3, #0
 8002a42:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002a44:	2300      	movs	r3, #0
 8002a46:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d101      	bne.n	8002a56 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e0be      	b.n	8002bd4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d109      	bne.n	8002a78 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f7fd fba8 	bl	80001c8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f000 fb8f 	bl	800319c <ADC_ConversionStop_Disable>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a86:	f003 0310 	and.w	r3, r3, #16
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f040 8099 	bne.w	8002bc2 <HAL_ADC_Init+0x18e>
 8002a90:	7dfb      	ldrb	r3, [r7, #23]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f040 8095 	bne.w	8002bc2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a9c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002aa0:	f023 0302 	bic.w	r3, r3, #2
 8002aa4:	f043 0202 	orr.w	r2, r3, #2
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ab4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	7b1b      	ldrb	r3, [r3, #12]
 8002aba:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002abc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002abe:	68ba      	ldr	r2, [r7, #8]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002acc:	d003      	beq.n	8002ad6 <HAL_ADC_Init+0xa2>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d102      	bne.n	8002adc <HAL_ADC_Init+0xa8>
 8002ad6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ada:	e000      	b.n	8002ade <HAL_ADC_Init+0xaa>
 8002adc:	2300      	movs	r3, #0
 8002ade:	693a      	ldr	r2, [r7, #16]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	7d1b      	ldrb	r3, [r3, #20]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d119      	bne.n	8002b20 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	7b1b      	ldrb	r3, [r3, #12]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d109      	bne.n	8002b08 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	699b      	ldr	r3, [r3, #24]
 8002af8:	3b01      	subs	r3, #1
 8002afa:	035a      	lsls	r2, r3, #13
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002b04:	613b      	str	r3, [r7, #16]
 8002b06:	e00b      	b.n	8002b20 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b0c:	f043 0220 	orr.w	r2, r3, #32
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b18:	f043 0201 	orr.w	r2, r3, #1
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	430a      	orrs	r2, r1
 8002b32:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	689a      	ldr	r2, [r3, #8]
 8002b3a:	4b28      	ldr	r3, [pc, #160]	@ (8002bdc <HAL_ADC_Init+0x1a8>)
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	6812      	ldr	r2, [r2, #0]
 8002b42:	68b9      	ldr	r1, [r7, #8]
 8002b44:	430b      	orrs	r3, r1
 8002b46:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b50:	d003      	beq.n	8002b5a <HAL_ADC_Init+0x126>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d104      	bne.n	8002b64 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	051b      	lsls	r3, r3, #20
 8002b62:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b6a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	430a      	orrs	r2, r1
 8002b76:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689a      	ldr	r2, [r3, #8]
 8002b7e:	4b18      	ldr	r3, [pc, #96]	@ (8002be0 <HAL_ADC_Init+0x1ac>)
 8002b80:	4013      	ands	r3, r2
 8002b82:	68ba      	ldr	r2, [r7, #8]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d10b      	bne.n	8002ba0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b92:	f023 0303 	bic.w	r3, r3, #3
 8002b96:	f043 0201 	orr.w	r2, r3, #1
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002b9e:	e018      	b.n	8002bd2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ba4:	f023 0312 	bic.w	r3, r3, #18
 8002ba8:	f043 0210 	orr.w	r2, r3, #16
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb4:	f043 0201 	orr.w	r2, r3, #1
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002bc0:	e007      	b.n	8002bd2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bc6:	f043 0210 	orr.w	r2, r3, #16
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002bd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3718      	adds	r7, #24
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	ffe1f7fd 	.word	0xffe1f7fd
 8002be0:	ff1f0efe 	.word	0xff1f0efe

08002be4 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bec:	2300      	movs	r3, #0
 8002bee:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d101      	bne.n	8002bfe <HAL_ADC_Start_IT+0x1a>
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	e0a0      	b.n	8002d40 <HAL_ADC_Start_IT+0x15c>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2201      	movs	r2, #1
 8002c02:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 fa6e 	bl	80030e8 <ADC_Enable>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002c10:	7bfb      	ldrb	r3, [r7, #15]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	f040 808f 	bne.w	8002d36 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c1c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002c20:	f023 0301 	bic.w	r3, r3, #1
 8002c24:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a45      	ldr	r2, [pc, #276]	@ (8002d48 <HAL_ADC_Start_IT+0x164>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d105      	bne.n	8002c42 <HAL_ADC_Start_IT+0x5e>
 8002c36:	4b45      	ldr	r3, [pc, #276]	@ (8002d4c <HAL_ADC_Start_IT+0x168>)
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d115      	bne.n	8002c6e <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c46:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d026      	beq.n	8002caa <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c60:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002c64:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c6c:	e01d      	b.n	8002caa <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c72:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a33      	ldr	r2, [pc, #204]	@ (8002d4c <HAL_ADC_Start_IT+0x168>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d004      	beq.n	8002c8e <HAL_ADC_Start_IT+0xaa>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a2f      	ldr	r2, [pc, #188]	@ (8002d48 <HAL_ADC_Start_IT+0x164>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d10d      	bne.n	8002caa <HAL_ADC_Start_IT+0xc6>
 8002c8e:	4b2f      	ldr	r3, [pc, #188]	@ (8002d4c <HAL_ADC_Start_IT+0x168>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d007      	beq.n	8002caa <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c9e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002ca2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d006      	beq.n	8002cc4 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cba:	f023 0206 	bic.w	r2, r3, #6
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002cc2:	e002      	b.n	8002cca <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f06f 0202 	mvn.w	r2, #2
 8002cda:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	685a      	ldr	r2, [r3, #4]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f042 0220 	orr.w	r2, r2, #32
 8002cea:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002cf6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002cfa:	d113      	bne.n	8002d24 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002d00:	4a11      	ldr	r2, [pc, #68]	@ (8002d48 <HAL_ADC_Start_IT+0x164>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d105      	bne.n	8002d12 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002d06:	4b11      	ldr	r3, [pc, #68]	@ (8002d4c <HAL_ADC_Start_IT+0x168>)
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d108      	bne.n	8002d24 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	689a      	ldr	r2, [r3, #8]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002d20:	609a      	str	r2, [r3, #8]
 8002d22:	e00c      	b.n	8002d3e <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	689a      	ldr	r2, [r3, #8]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002d32:	609a      	str	r2, [r3, #8]
 8002d34:	e003      	b.n	8002d3e <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3710      	adds	r7, #16
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	40012800 	.word	0x40012800
 8002d4c:	40012400 	.word	0x40012400

08002d50 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bc80      	pop	{r7}
 8002d66:	4770      	bx	lr

08002d68 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	f003 0320 	and.w	r3, r3, #32
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d03e      	beq.n	8002e08 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f003 0302 	and.w	r3, r3, #2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d039      	beq.n	8002e08 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d98:	f003 0310 	and.w	r3, r3, #16
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d105      	bne.n	8002dac <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002da4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002db6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002dba:	d11d      	bne.n	8002df8 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d119      	bne.n	8002df8 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	685a      	ldr	r2, [r3, #4]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 0220 	bic.w	r2, r2, #32
 8002dd2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dd8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002de4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d105      	bne.n	8002df8 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002df0:	f043 0201 	orr.w	r2, r3, #1
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f7ff f92b 	bl	8002054 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f06f 0212 	mvn.w	r2, #18
 8002e06:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d04d      	beq.n	8002eae <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f003 0304 	and.w	r3, r3, #4
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d048      	beq.n	8002eae <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e20:	f003 0310 	and.w	r3, r3, #16
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d105      	bne.n	8002e34 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e2c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8002e3e:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8002e42:	d012      	beq.n	8002e6a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d125      	bne.n	8002e9e <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002e5c:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002e60:	d11d      	bne.n	8002e9e <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d119      	bne.n	8002e9e <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	685a      	ldr	r2, [r3, #4]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e78:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e7e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d105      	bne.n	8002e9e <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e96:	f043 0201 	orr.w	r2, r3, #1
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 f9bd 	bl	800321e <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f06f 020c 	mvn.w	r2, #12
 8002eac:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d012      	beq.n	8002ede <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00d      	beq.n	8002ede <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ec6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 f809 	bl	8002ee6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f06f 0201 	mvn.w	r2, #1
 8002edc:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002ede:	bf00      	nop
 8002ee0:	3710      	adds	r7, #16
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	b083      	sub	sp, #12
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002eee:	bf00      	nop
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bc80      	pop	{r7}
 8002ef6:	4770      	bx	lr

08002ef8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002ef8:	b480      	push	{r7}
 8002efa:	b085      	sub	sp, #20
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f02:	2300      	movs	r3, #0
 8002f04:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002f06:	2300      	movs	r3, #0
 8002f08:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d101      	bne.n	8002f18 <HAL_ADC_ConfigChannel+0x20>
 8002f14:	2302      	movs	r3, #2
 8002f16:	e0dc      	b.n	80030d2 <HAL_ADC_ConfigChannel+0x1da>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	2b06      	cmp	r3, #6
 8002f26:	d81c      	bhi.n	8002f62 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	685a      	ldr	r2, [r3, #4]
 8002f32:	4613      	mov	r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	4413      	add	r3, r2
 8002f38:	3b05      	subs	r3, #5
 8002f3a:	221f      	movs	r2, #31
 8002f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f40:	43db      	mvns	r3, r3
 8002f42:	4019      	ands	r1, r3
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	6818      	ldr	r0, [r3, #0]
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	685a      	ldr	r2, [r3, #4]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	4413      	add	r3, r2
 8002f52:	3b05      	subs	r3, #5
 8002f54:	fa00 f203 	lsl.w	r2, r0, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002f60:	e03c      	b.n	8002fdc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	2b0c      	cmp	r3, #12
 8002f68:	d81c      	bhi.n	8002fa4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685a      	ldr	r2, [r3, #4]
 8002f74:	4613      	mov	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4413      	add	r3, r2
 8002f7a:	3b23      	subs	r3, #35	@ 0x23
 8002f7c:	221f      	movs	r2, #31
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	43db      	mvns	r3, r3
 8002f84:	4019      	ands	r1, r3
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	6818      	ldr	r0, [r3, #0]
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	685a      	ldr	r2, [r3, #4]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	4413      	add	r3, r2
 8002f94:	3b23      	subs	r3, #35	@ 0x23
 8002f96:	fa00 f203 	lsl.w	r2, r0, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	631a      	str	r2, [r3, #48]	@ 0x30
 8002fa2:	e01b      	b.n	8002fdc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685a      	ldr	r2, [r3, #4]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	4413      	add	r3, r2
 8002fb4:	3b41      	subs	r3, #65	@ 0x41
 8002fb6:	221f      	movs	r2, #31
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	4019      	ands	r1, r3
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	6818      	ldr	r0, [r3, #0]
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685a      	ldr	r2, [r3, #4]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	4413      	add	r3, r2
 8002fce:	3b41      	subs	r3, #65	@ 0x41
 8002fd0:	fa00 f203 	lsl.w	r2, r0, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2b09      	cmp	r3, #9
 8002fe2:	d91c      	bls.n	800301e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68d9      	ldr	r1, [r3, #12]
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	4413      	add	r3, r2
 8002ff4:	3b1e      	subs	r3, #30
 8002ff6:	2207      	movs	r2, #7
 8002ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffc:	43db      	mvns	r3, r3
 8002ffe:	4019      	ands	r1, r3
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	6898      	ldr	r0, [r3, #8]
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	4613      	mov	r3, r2
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	4413      	add	r3, r2
 800300e:	3b1e      	subs	r3, #30
 8003010:	fa00 f203 	lsl.w	r2, r0, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	430a      	orrs	r2, r1
 800301a:	60da      	str	r2, [r3, #12]
 800301c:	e019      	b.n	8003052 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	6919      	ldr	r1, [r3, #16]
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	4613      	mov	r3, r2
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	4413      	add	r3, r2
 800302e:	2207      	movs	r2, #7
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	43db      	mvns	r3, r3
 8003036:	4019      	ands	r1, r3
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	6898      	ldr	r0, [r3, #8]
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	4613      	mov	r3, r2
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	4413      	add	r3, r2
 8003046:	fa00 f203 	lsl.w	r2, r0, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	430a      	orrs	r2, r1
 8003050:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2b10      	cmp	r3, #16
 8003058:	d003      	beq.n	8003062 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800305e:	2b11      	cmp	r3, #17
 8003060:	d132      	bne.n	80030c8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a1d      	ldr	r2, [pc, #116]	@ (80030dc <HAL_ADC_ConfigChannel+0x1e4>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d125      	bne.n	80030b8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d126      	bne.n	80030c8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	689a      	ldr	r2, [r3, #8]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8003088:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2b10      	cmp	r3, #16
 8003090:	d11a      	bne.n	80030c8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003092:	4b13      	ldr	r3, [pc, #76]	@ (80030e0 <HAL_ADC_ConfigChannel+0x1e8>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a13      	ldr	r2, [pc, #76]	@ (80030e4 <HAL_ADC_ConfigChannel+0x1ec>)
 8003098:	fba2 2303 	umull	r2, r3, r2, r3
 800309c:	0c9a      	lsrs	r2, r3, #18
 800309e:	4613      	mov	r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	4413      	add	r3, r2
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80030a8:	e002      	b.n	80030b0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	3b01      	subs	r3, #1
 80030ae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1f9      	bne.n	80030aa <HAL_ADC_ConfigChannel+0x1b2>
 80030b6:	e007      	b.n	80030c8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030bc:	f043 0220 	orr.w	r2, r3, #32
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80030d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3714      	adds	r7, #20
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bc80      	pop	{r7}
 80030da:	4770      	bx	lr
 80030dc:	40012400 	.word	0x40012400
 80030e0:	20000080 	.word	0x20000080
 80030e4:	431bde83 	.word	0x431bde83

080030e8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030f0:	2300      	movs	r3, #0
 80030f2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80030f4:	2300      	movs	r3, #0
 80030f6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	2b01      	cmp	r3, #1
 8003104:	d040      	beq.n	8003188 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	689a      	ldr	r2, [r3, #8]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f042 0201 	orr.w	r2, r2, #1
 8003114:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003116:	4b1f      	ldr	r3, [pc, #124]	@ (8003194 <ADC_Enable+0xac>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a1f      	ldr	r2, [pc, #124]	@ (8003198 <ADC_Enable+0xb0>)
 800311c:	fba2 2303 	umull	r2, r3, r2, r3
 8003120:	0c9b      	lsrs	r3, r3, #18
 8003122:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003124:	e002      	b.n	800312c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	3b01      	subs	r3, #1
 800312a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1f9      	bne.n	8003126 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003132:	f7ff fc51 	bl	80029d8 <HAL_GetTick>
 8003136:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003138:	e01f      	b.n	800317a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800313a:	f7ff fc4d 	bl	80029d8 <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	2b02      	cmp	r3, #2
 8003146:	d918      	bls.n	800317a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	2b01      	cmp	r3, #1
 8003154:	d011      	beq.n	800317a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800315a:	f043 0210 	orr.w	r2, r3, #16
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003166:	f043 0201 	orr.w	r2, r3, #1
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e007      	b.n	800318a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	2b01      	cmp	r3, #1
 8003186:	d1d8      	bne.n	800313a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3710      	adds	r7, #16
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	20000080 	.word	0x20000080
 8003198:	431bde83 	.word	0x431bde83

0800319c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031a4:	2300      	movs	r3, #0
 80031a6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d12e      	bne.n	8003214 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	689a      	ldr	r2, [r3, #8]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f022 0201 	bic.w	r2, r2, #1
 80031c4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80031c6:	f7ff fc07 	bl	80029d8 <HAL_GetTick>
 80031ca:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80031cc:	e01b      	b.n	8003206 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80031ce:	f7ff fc03 	bl	80029d8 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d914      	bls.n	8003206 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d10d      	bne.n	8003206 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ee:	f043 0210 	orr.w	r2, r3, #16
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031fa:	f043 0201 	orr.w	r2, r3, #1
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e007      	b.n	8003216 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	2b01      	cmp	r3, #1
 8003212:	d0dc      	beq.n	80031ce <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3710      	adds	r7, #16
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}

0800321e <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800321e:	b480      	push	{r7}
 8003220:	b083      	sub	sp, #12
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8003226:	bf00      	nop
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	bc80      	pop	{r7}
 800322e:	4770      	bx	lr

08003230 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f003 0307 	and.w	r3, r3, #7
 800323e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003240:	4b0c      	ldr	r3, [pc, #48]	@ (8003274 <__NVIC_SetPriorityGrouping+0x44>)
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003246:	68ba      	ldr	r2, [r7, #8]
 8003248:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800324c:	4013      	ands	r3, r2
 800324e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003258:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800325c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003260:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003262:	4a04      	ldr	r2, [pc, #16]	@ (8003274 <__NVIC_SetPriorityGrouping+0x44>)
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	60d3      	str	r3, [r2, #12]
}
 8003268:	bf00      	nop
 800326a:	3714      	adds	r7, #20
 800326c:	46bd      	mov	sp, r7
 800326e:	bc80      	pop	{r7}
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	e000ed00 	.word	0xe000ed00

08003278 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003278:	b480      	push	{r7}
 800327a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800327c:	4b04      	ldr	r3, [pc, #16]	@ (8003290 <__NVIC_GetPriorityGrouping+0x18>)
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	0a1b      	lsrs	r3, r3, #8
 8003282:	f003 0307 	and.w	r3, r3, #7
}
 8003286:	4618      	mov	r0, r3
 8003288:	46bd      	mov	sp, r7
 800328a:	bc80      	pop	{r7}
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	e000ed00 	.word	0xe000ed00

08003294 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	4603      	mov	r3, r0
 800329c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800329e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	db0b      	blt.n	80032be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032a6:	79fb      	ldrb	r3, [r7, #7]
 80032a8:	f003 021f 	and.w	r2, r3, #31
 80032ac:	4906      	ldr	r1, [pc, #24]	@ (80032c8 <__NVIC_EnableIRQ+0x34>)
 80032ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b2:	095b      	lsrs	r3, r3, #5
 80032b4:	2001      	movs	r0, #1
 80032b6:	fa00 f202 	lsl.w	r2, r0, r2
 80032ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032be:	bf00      	nop
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bc80      	pop	{r7}
 80032c6:	4770      	bx	lr
 80032c8:	e000e100 	.word	0xe000e100

080032cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	4603      	mov	r3, r0
 80032d4:	6039      	str	r1, [r7, #0]
 80032d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	db0a      	blt.n	80032f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	b2da      	uxtb	r2, r3
 80032e4:	490c      	ldr	r1, [pc, #48]	@ (8003318 <__NVIC_SetPriority+0x4c>)
 80032e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ea:	0112      	lsls	r2, r2, #4
 80032ec:	b2d2      	uxtb	r2, r2
 80032ee:	440b      	add	r3, r1
 80032f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032f4:	e00a      	b.n	800330c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	b2da      	uxtb	r2, r3
 80032fa:	4908      	ldr	r1, [pc, #32]	@ (800331c <__NVIC_SetPriority+0x50>)
 80032fc:	79fb      	ldrb	r3, [r7, #7]
 80032fe:	f003 030f 	and.w	r3, r3, #15
 8003302:	3b04      	subs	r3, #4
 8003304:	0112      	lsls	r2, r2, #4
 8003306:	b2d2      	uxtb	r2, r2
 8003308:	440b      	add	r3, r1
 800330a:	761a      	strb	r2, [r3, #24]
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	bc80      	pop	{r7}
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	e000e100 	.word	0xe000e100
 800331c:	e000ed00 	.word	0xe000ed00

08003320 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003320:	b480      	push	{r7}
 8003322:	b089      	sub	sp, #36	@ 0x24
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f003 0307 	and.w	r3, r3, #7
 8003332:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	f1c3 0307 	rsb	r3, r3, #7
 800333a:	2b04      	cmp	r3, #4
 800333c:	bf28      	it	cs
 800333e:	2304      	movcs	r3, #4
 8003340:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	3304      	adds	r3, #4
 8003346:	2b06      	cmp	r3, #6
 8003348:	d902      	bls.n	8003350 <NVIC_EncodePriority+0x30>
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	3b03      	subs	r3, #3
 800334e:	e000      	b.n	8003352 <NVIC_EncodePriority+0x32>
 8003350:	2300      	movs	r3, #0
 8003352:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003354:	f04f 32ff 	mov.w	r2, #4294967295
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	fa02 f303 	lsl.w	r3, r2, r3
 800335e:	43da      	mvns	r2, r3
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	401a      	ands	r2, r3
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003368:	f04f 31ff 	mov.w	r1, #4294967295
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	fa01 f303 	lsl.w	r3, r1, r3
 8003372:	43d9      	mvns	r1, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003378:	4313      	orrs	r3, r2
         );
}
 800337a:	4618      	mov	r0, r3
 800337c:	3724      	adds	r7, #36	@ 0x24
 800337e:	46bd      	mov	sp, r7
 8003380:	bc80      	pop	{r7}
 8003382:	4770      	bx	lr

08003384 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	3b01      	subs	r3, #1
 8003390:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003394:	d301      	bcc.n	800339a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003396:	2301      	movs	r3, #1
 8003398:	e00f      	b.n	80033ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800339a:	4a0a      	ldr	r2, [pc, #40]	@ (80033c4 <SysTick_Config+0x40>)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	3b01      	subs	r3, #1
 80033a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033a2:	210f      	movs	r1, #15
 80033a4:	f04f 30ff 	mov.w	r0, #4294967295
 80033a8:	f7ff ff90 	bl	80032cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033ac:	4b05      	ldr	r3, [pc, #20]	@ (80033c4 <SysTick_Config+0x40>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033b2:	4b04      	ldr	r3, [pc, #16]	@ (80033c4 <SysTick_Config+0x40>)
 80033b4:	2207      	movs	r2, #7
 80033b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3708      	adds	r7, #8
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	e000e010 	.word	0xe000e010

080033c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f7ff ff2d 	bl	8003230 <__NVIC_SetPriorityGrouping>
}
 80033d6:	bf00      	nop
 80033d8:	3708      	adds	r7, #8
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033de:	b580      	push	{r7, lr}
 80033e0:	b086      	sub	sp, #24
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	4603      	mov	r3, r0
 80033e6:	60b9      	str	r1, [r7, #8]
 80033e8:	607a      	str	r2, [r7, #4]
 80033ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033ec:	2300      	movs	r3, #0
 80033ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033f0:	f7ff ff42 	bl	8003278 <__NVIC_GetPriorityGrouping>
 80033f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	68b9      	ldr	r1, [r7, #8]
 80033fa:	6978      	ldr	r0, [r7, #20]
 80033fc:	f7ff ff90 	bl	8003320 <NVIC_EncodePriority>
 8003400:	4602      	mov	r2, r0
 8003402:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003406:	4611      	mov	r1, r2
 8003408:	4618      	mov	r0, r3
 800340a:	f7ff ff5f 	bl	80032cc <__NVIC_SetPriority>
}
 800340e:	bf00      	nop
 8003410:	3718      	adds	r7, #24
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b082      	sub	sp, #8
 800341a:	af00      	add	r7, sp, #0
 800341c:	4603      	mov	r3, r0
 800341e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003424:	4618      	mov	r0, r3
 8003426:	f7ff ff35 	bl	8003294 <__NVIC_EnableIRQ>
}
 800342a:	bf00      	nop
 800342c:	3708      	adds	r7, #8
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}

08003432 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003432:	b580      	push	{r7, lr}
 8003434:	b082      	sub	sp, #8
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f7ff ffa2 	bl	8003384 <SysTick_Config>
 8003440:	4603      	mov	r3, r0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3708      	adds	r7, #8
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}

0800344a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800344a:	b480      	push	{r7}
 800344c:	b085      	sub	sp, #20
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003452:	2300      	movs	r3, #0
 8003454:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b02      	cmp	r3, #2
 8003460:	d008      	beq.n	8003474 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2204      	movs	r2, #4
 8003466:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e020      	b.n	80034b6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f022 020e 	bic.w	r2, r2, #14
 8003482:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f022 0201 	bic.w	r2, r2, #1
 8003492:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800349c:	2101      	movs	r1, #1
 800349e:	fa01 f202 	lsl.w	r2, r1, r2
 80034a2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80034b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3714      	adds	r7, #20
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bc80      	pop	{r7}
 80034be:	4770      	bx	lr

080034c0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034c8:	2300      	movs	r3, #0
 80034ca:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d005      	beq.n	80034e4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2204      	movs	r2, #4
 80034dc:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	73fb      	strb	r3, [r7, #15]
 80034e2:	e051      	b.n	8003588 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 020e 	bic.w	r2, r2, #14
 80034f2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f022 0201 	bic.w	r2, r2, #1
 8003502:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a22      	ldr	r2, [pc, #136]	@ (8003594 <HAL_DMA_Abort_IT+0xd4>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d029      	beq.n	8003562 <HAL_DMA_Abort_IT+0xa2>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a21      	ldr	r2, [pc, #132]	@ (8003598 <HAL_DMA_Abort_IT+0xd8>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d022      	beq.n	800355e <HAL_DMA_Abort_IT+0x9e>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a1f      	ldr	r2, [pc, #124]	@ (800359c <HAL_DMA_Abort_IT+0xdc>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d01a      	beq.n	8003558 <HAL_DMA_Abort_IT+0x98>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a1e      	ldr	r2, [pc, #120]	@ (80035a0 <HAL_DMA_Abort_IT+0xe0>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d012      	beq.n	8003552 <HAL_DMA_Abort_IT+0x92>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a1c      	ldr	r2, [pc, #112]	@ (80035a4 <HAL_DMA_Abort_IT+0xe4>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d00a      	beq.n	800354c <HAL_DMA_Abort_IT+0x8c>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a1b      	ldr	r2, [pc, #108]	@ (80035a8 <HAL_DMA_Abort_IT+0xe8>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d102      	bne.n	8003546 <HAL_DMA_Abort_IT+0x86>
 8003540:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003544:	e00e      	b.n	8003564 <HAL_DMA_Abort_IT+0xa4>
 8003546:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800354a:	e00b      	b.n	8003564 <HAL_DMA_Abort_IT+0xa4>
 800354c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003550:	e008      	b.n	8003564 <HAL_DMA_Abort_IT+0xa4>
 8003552:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003556:	e005      	b.n	8003564 <HAL_DMA_Abort_IT+0xa4>
 8003558:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800355c:	e002      	b.n	8003564 <HAL_DMA_Abort_IT+0xa4>
 800355e:	2310      	movs	r3, #16
 8003560:	e000      	b.n	8003564 <HAL_DMA_Abort_IT+0xa4>
 8003562:	2301      	movs	r3, #1
 8003564:	4a11      	ldr	r2, [pc, #68]	@ (80035ac <HAL_DMA_Abort_IT+0xec>)
 8003566:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800357c:	2b00      	cmp	r3, #0
 800357e:	d003      	beq.n	8003588 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	4798      	blx	r3
    } 
  }
  return status;
 8003588:	7bfb      	ldrb	r3, [r7, #15]
}
 800358a:	4618      	mov	r0, r3
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	40020008 	.word	0x40020008
 8003598:	4002001c 	.word	0x4002001c
 800359c:	40020030 	.word	0x40020030
 80035a0:	40020044 	.word	0x40020044
 80035a4:	40020058 	.word	0x40020058
 80035a8:	4002006c 	.word	0x4002006c
 80035ac:	40020000 	.word	0x40020000

080035b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b08b      	sub	sp, #44	@ 0x2c
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035ba:	2300      	movs	r3, #0
 80035bc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80035be:	2300      	movs	r3, #0
 80035c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035c2:	e169      	b.n	8003898 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80035c4:	2201      	movs	r2, #1
 80035c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c8:	fa02 f303 	lsl.w	r3, r2, r3
 80035cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	69fa      	ldr	r2, [r7, #28]
 80035d4:	4013      	ands	r3, r2
 80035d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	429a      	cmp	r2, r3
 80035de:	f040 8158 	bne.w	8003892 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	4a9a      	ldr	r2, [pc, #616]	@ (8003850 <HAL_GPIO_Init+0x2a0>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d05e      	beq.n	80036aa <HAL_GPIO_Init+0xfa>
 80035ec:	4a98      	ldr	r2, [pc, #608]	@ (8003850 <HAL_GPIO_Init+0x2a0>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d875      	bhi.n	80036de <HAL_GPIO_Init+0x12e>
 80035f2:	4a98      	ldr	r2, [pc, #608]	@ (8003854 <HAL_GPIO_Init+0x2a4>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d058      	beq.n	80036aa <HAL_GPIO_Init+0xfa>
 80035f8:	4a96      	ldr	r2, [pc, #600]	@ (8003854 <HAL_GPIO_Init+0x2a4>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d86f      	bhi.n	80036de <HAL_GPIO_Init+0x12e>
 80035fe:	4a96      	ldr	r2, [pc, #600]	@ (8003858 <HAL_GPIO_Init+0x2a8>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d052      	beq.n	80036aa <HAL_GPIO_Init+0xfa>
 8003604:	4a94      	ldr	r2, [pc, #592]	@ (8003858 <HAL_GPIO_Init+0x2a8>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d869      	bhi.n	80036de <HAL_GPIO_Init+0x12e>
 800360a:	4a94      	ldr	r2, [pc, #592]	@ (800385c <HAL_GPIO_Init+0x2ac>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d04c      	beq.n	80036aa <HAL_GPIO_Init+0xfa>
 8003610:	4a92      	ldr	r2, [pc, #584]	@ (800385c <HAL_GPIO_Init+0x2ac>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d863      	bhi.n	80036de <HAL_GPIO_Init+0x12e>
 8003616:	4a92      	ldr	r2, [pc, #584]	@ (8003860 <HAL_GPIO_Init+0x2b0>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d046      	beq.n	80036aa <HAL_GPIO_Init+0xfa>
 800361c:	4a90      	ldr	r2, [pc, #576]	@ (8003860 <HAL_GPIO_Init+0x2b0>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d85d      	bhi.n	80036de <HAL_GPIO_Init+0x12e>
 8003622:	2b12      	cmp	r3, #18
 8003624:	d82a      	bhi.n	800367c <HAL_GPIO_Init+0xcc>
 8003626:	2b12      	cmp	r3, #18
 8003628:	d859      	bhi.n	80036de <HAL_GPIO_Init+0x12e>
 800362a:	a201      	add	r2, pc, #4	@ (adr r2, 8003630 <HAL_GPIO_Init+0x80>)
 800362c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003630:	080036ab 	.word	0x080036ab
 8003634:	08003685 	.word	0x08003685
 8003638:	08003697 	.word	0x08003697
 800363c:	080036d9 	.word	0x080036d9
 8003640:	080036df 	.word	0x080036df
 8003644:	080036df 	.word	0x080036df
 8003648:	080036df 	.word	0x080036df
 800364c:	080036df 	.word	0x080036df
 8003650:	080036df 	.word	0x080036df
 8003654:	080036df 	.word	0x080036df
 8003658:	080036df 	.word	0x080036df
 800365c:	080036df 	.word	0x080036df
 8003660:	080036df 	.word	0x080036df
 8003664:	080036df 	.word	0x080036df
 8003668:	080036df 	.word	0x080036df
 800366c:	080036df 	.word	0x080036df
 8003670:	080036df 	.word	0x080036df
 8003674:	0800368d 	.word	0x0800368d
 8003678:	080036a1 	.word	0x080036a1
 800367c:	4a79      	ldr	r2, [pc, #484]	@ (8003864 <HAL_GPIO_Init+0x2b4>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d013      	beq.n	80036aa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003682:	e02c      	b.n	80036de <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	623b      	str	r3, [r7, #32]
          break;
 800368a:	e029      	b.n	80036e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	3304      	adds	r3, #4
 8003692:	623b      	str	r3, [r7, #32]
          break;
 8003694:	e024      	b.n	80036e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	3308      	adds	r3, #8
 800369c:	623b      	str	r3, [r7, #32]
          break;
 800369e:	e01f      	b.n	80036e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	330c      	adds	r3, #12
 80036a6:	623b      	str	r3, [r7, #32]
          break;
 80036a8:	e01a      	b.n	80036e0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d102      	bne.n	80036b8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80036b2:	2304      	movs	r3, #4
 80036b4:	623b      	str	r3, [r7, #32]
          break;
 80036b6:	e013      	b.n	80036e0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d105      	bne.n	80036cc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80036c0:	2308      	movs	r3, #8
 80036c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	69fa      	ldr	r2, [r7, #28]
 80036c8:	611a      	str	r2, [r3, #16]
          break;
 80036ca:	e009      	b.n	80036e0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80036cc:	2308      	movs	r3, #8
 80036ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	69fa      	ldr	r2, [r7, #28]
 80036d4:	615a      	str	r2, [r3, #20]
          break;
 80036d6:	e003      	b.n	80036e0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80036d8:	2300      	movs	r3, #0
 80036da:	623b      	str	r3, [r7, #32]
          break;
 80036dc:	e000      	b.n	80036e0 <HAL_GPIO_Init+0x130>
          break;
 80036de:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	2bff      	cmp	r3, #255	@ 0xff
 80036e4:	d801      	bhi.n	80036ea <HAL_GPIO_Init+0x13a>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	e001      	b.n	80036ee <HAL_GPIO_Init+0x13e>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	3304      	adds	r3, #4
 80036ee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	2bff      	cmp	r3, #255	@ 0xff
 80036f4:	d802      	bhi.n	80036fc <HAL_GPIO_Init+0x14c>
 80036f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	e002      	b.n	8003702 <HAL_GPIO_Init+0x152>
 80036fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036fe:	3b08      	subs	r3, #8
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	210f      	movs	r1, #15
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	fa01 f303 	lsl.w	r3, r1, r3
 8003710:	43db      	mvns	r3, r3
 8003712:	401a      	ands	r2, r3
 8003714:	6a39      	ldr	r1, [r7, #32]
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	fa01 f303 	lsl.w	r3, r1, r3
 800371c:	431a      	orrs	r2, r3
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800372a:	2b00      	cmp	r3, #0
 800372c:	f000 80b1 	beq.w	8003892 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003730:	4b4d      	ldr	r3, [pc, #308]	@ (8003868 <HAL_GPIO_Init+0x2b8>)
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	4a4c      	ldr	r2, [pc, #304]	@ (8003868 <HAL_GPIO_Init+0x2b8>)
 8003736:	f043 0301 	orr.w	r3, r3, #1
 800373a:	6193      	str	r3, [r2, #24]
 800373c:	4b4a      	ldr	r3, [pc, #296]	@ (8003868 <HAL_GPIO_Init+0x2b8>)
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	f003 0301 	and.w	r3, r3, #1
 8003744:	60bb      	str	r3, [r7, #8]
 8003746:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003748:	4a48      	ldr	r2, [pc, #288]	@ (800386c <HAL_GPIO_Init+0x2bc>)
 800374a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800374c:	089b      	lsrs	r3, r3, #2
 800374e:	3302      	adds	r3, #2
 8003750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003754:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003758:	f003 0303 	and.w	r3, r3, #3
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	220f      	movs	r2, #15
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	43db      	mvns	r3, r3
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	4013      	ands	r3, r2
 800376a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a40      	ldr	r2, [pc, #256]	@ (8003870 <HAL_GPIO_Init+0x2c0>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d013      	beq.n	800379c <HAL_GPIO_Init+0x1ec>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a3f      	ldr	r2, [pc, #252]	@ (8003874 <HAL_GPIO_Init+0x2c4>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d00d      	beq.n	8003798 <HAL_GPIO_Init+0x1e8>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4a3e      	ldr	r2, [pc, #248]	@ (8003878 <HAL_GPIO_Init+0x2c8>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d007      	beq.n	8003794 <HAL_GPIO_Init+0x1e4>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a3d      	ldr	r2, [pc, #244]	@ (800387c <HAL_GPIO_Init+0x2cc>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d101      	bne.n	8003790 <HAL_GPIO_Init+0x1e0>
 800378c:	2303      	movs	r3, #3
 800378e:	e006      	b.n	800379e <HAL_GPIO_Init+0x1ee>
 8003790:	2304      	movs	r3, #4
 8003792:	e004      	b.n	800379e <HAL_GPIO_Init+0x1ee>
 8003794:	2302      	movs	r3, #2
 8003796:	e002      	b.n	800379e <HAL_GPIO_Init+0x1ee>
 8003798:	2301      	movs	r3, #1
 800379a:	e000      	b.n	800379e <HAL_GPIO_Init+0x1ee>
 800379c:	2300      	movs	r3, #0
 800379e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037a0:	f002 0203 	and.w	r2, r2, #3
 80037a4:	0092      	lsls	r2, r2, #2
 80037a6:	4093      	lsls	r3, r2
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80037ae:	492f      	ldr	r1, [pc, #188]	@ (800386c <HAL_GPIO_Init+0x2bc>)
 80037b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b2:	089b      	lsrs	r3, r3, #2
 80037b4:	3302      	adds	r3, #2
 80037b6:	68fa      	ldr	r2, [r7, #12]
 80037b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d006      	beq.n	80037d6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80037c8:	4b2d      	ldr	r3, [pc, #180]	@ (8003880 <HAL_GPIO_Init+0x2d0>)
 80037ca:	689a      	ldr	r2, [r3, #8]
 80037cc:	492c      	ldr	r1, [pc, #176]	@ (8003880 <HAL_GPIO_Init+0x2d0>)
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	608b      	str	r3, [r1, #8]
 80037d4:	e006      	b.n	80037e4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80037d6:	4b2a      	ldr	r3, [pc, #168]	@ (8003880 <HAL_GPIO_Init+0x2d0>)
 80037d8:	689a      	ldr	r2, [r3, #8]
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	43db      	mvns	r3, r3
 80037de:	4928      	ldr	r1, [pc, #160]	@ (8003880 <HAL_GPIO_Init+0x2d0>)
 80037e0:	4013      	ands	r3, r2
 80037e2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d006      	beq.n	80037fe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80037f0:	4b23      	ldr	r3, [pc, #140]	@ (8003880 <HAL_GPIO_Init+0x2d0>)
 80037f2:	68da      	ldr	r2, [r3, #12]
 80037f4:	4922      	ldr	r1, [pc, #136]	@ (8003880 <HAL_GPIO_Init+0x2d0>)
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	60cb      	str	r3, [r1, #12]
 80037fc:	e006      	b.n	800380c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80037fe:	4b20      	ldr	r3, [pc, #128]	@ (8003880 <HAL_GPIO_Init+0x2d0>)
 8003800:	68da      	ldr	r2, [r3, #12]
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	43db      	mvns	r3, r3
 8003806:	491e      	ldr	r1, [pc, #120]	@ (8003880 <HAL_GPIO_Init+0x2d0>)
 8003808:	4013      	ands	r3, r2
 800380a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d006      	beq.n	8003826 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003818:	4b19      	ldr	r3, [pc, #100]	@ (8003880 <HAL_GPIO_Init+0x2d0>)
 800381a:	685a      	ldr	r2, [r3, #4]
 800381c:	4918      	ldr	r1, [pc, #96]	@ (8003880 <HAL_GPIO_Init+0x2d0>)
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	4313      	orrs	r3, r2
 8003822:	604b      	str	r3, [r1, #4]
 8003824:	e006      	b.n	8003834 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003826:	4b16      	ldr	r3, [pc, #88]	@ (8003880 <HAL_GPIO_Init+0x2d0>)
 8003828:	685a      	ldr	r2, [r3, #4]
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	43db      	mvns	r3, r3
 800382e:	4914      	ldr	r1, [pc, #80]	@ (8003880 <HAL_GPIO_Init+0x2d0>)
 8003830:	4013      	ands	r3, r2
 8003832:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d021      	beq.n	8003884 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003840:	4b0f      	ldr	r3, [pc, #60]	@ (8003880 <HAL_GPIO_Init+0x2d0>)
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	490e      	ldr	r1, [pc, #56]	@ (8003880 <HAL_GPIO_Init+0x2d0>)
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	4313      	orrs	r3, r2
 800384a:	600b      	str	r3, [r1, #0]
 800384c:	e021      	b.n	8003892 <HAL_GPIO_Init+0x2e2>
 800384e:	bf00      	nop
 8003850:	10320000 	.word	0x10320000
 8003854:	10310000 	.word	0x10310000
 8003858:	10220000 	.word	0x10220000
 800385c:	10210000 	.word	0x10210000
 8003860:	10120000 	.word	0x10120000
 8003864:	10110000 	.word	0x10110000
 8003868:	40021000 	.word	0x40021000
 800386c:	40010000 	.word	0x40010000
 8003870:	40010800 	.word	0x40010800
 8003874:	40010c00 	.word	0x40010c00
 8003878:	40011000 	.word	0x40011000
 800387c:	40011400 	.word	0x40011400
 8003880:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003884:	4b0b      	ldr	r3, [pc, #44]	@ (80038b4 <HAL_GPIO_Init+0x304>)
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	43db      	mvns	r3, r3
 800388c:	4909      	ldr	r1, [pc, #36]	@ (80038b4 <HAL_GPIO_Init+0x304>)
 800388e:	4013      	ands	r3, r2
 8003890:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003894:	3301      	adds	r3, #1
 8003896:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800389e:	fa22 f303 	lsr.w	r3, r2, r3
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f47f ae8e 	bne.w	80035c4 <HAL_GPIO_Init+0x14>
  }
}
 80038a8:	bf00      	nop
 80038aa:	bf00      	nop
 80038ac:	372c      	adds	r7, #44	@ 0x2c
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bc80      	pop	{r7}
 80038b2:	4770      	bx	lr
 80038b4:	40010400 	.word	0x40010400

080038b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b085      	sub	sp, #20
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	460b      	mov	r3, r1
 80038c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689a      	ldr	r2, [r3, #8]
 80038c8:	887b      	ldrh	r3, [r7, #2]
 80038ca:	4013      	ands	r3, r2
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d002      	beq.n	80038d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80038d0:	2301      	movs	r3, #1
 80038d2:	73fb      	strb	r3, [r7, #15]
 80038d4:	e001      	b.n	80038da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80038d6:	2300      	movs	r3, #0
 80038d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80038da:	7bfb      	ldrb	r3, [r7, #15]
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3714      	adds	r7, #20
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bc80      	pop	{r7}
 80038e4:	4770      	bx	lr

080038e6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038e6:	b480      	push	{r7}
 80038e8:	b083      	sub	sp, #12
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
 80038ee:	460b      	mov	r3, r1
 80038f0:	807b      	strh	r3, [r7, #2]
 80038f2:	4613      	mov	r3, r2
 80038f4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038f6:	787b      	ldrb	r3, [r7, #1]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d003      	beq.n	8003904 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038fc:	887a      	ldrh	r2, [r7, #2]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003902:	e003      	b.n	800390c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003904:	887b      	ldrh	r3, [r7, #2]
 8003906:	041a      	lsls	r2, r3, #16
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	611a      	str	r2, [r3, #16]
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	bc80      	pop	{r7}
 8003914:	4770      	bx	lr

08003916 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003916:	b480      	push	{r7}
 8003918:	b085      	sub	sp, #20
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
 800391e:	460b      	mov	r3, r1
 8003920:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003928:	887a      	ldrh	r2, [r7, #2]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	4013      	ands	r3, r2
 800392e:	041a      	lsls	r2, r3, #16
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	43d9      	mvns	r1, r3
 8003934:	887b      	ldrh	r3, [r7, #2]
 8003936:	400b      	ands	r3, r1
 8003938:	431a      	orrs	r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	611a      	str	r2, [r3, #16]
}
 800393e:	bf00      	nop
 8003940:	3714      	adds	r7, #20
 8003942:	46bd      	mov	sp, r7
 8003944:	bc80      	pop	{r7}
 8003946:	4770      	bx	lr

08003948 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
 800394e:	4603      	mov	r3, r0
 8003950:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003952:	4b08      	ldr	r3, [pc, #32]	@ (8003974 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003954:	695a      	ldr	r2, [r3, #20]
 8003956:	88fb      	ldrh	r3, [r7, #6]
 8003958:	4013      	ands	r3, r2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d006      	beq.n	800396c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800395e:	4a05      	ldr	r2, [pc, #20]	@ (8003974 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003960:	88fb      	ldrh	r3, [r7, #6]
 8003962:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003964:	88fb      	ldrh	r3, [r7, #6]
 8003966:	4618      	mov	r0, r3
 8003968:	f7fe fa90 	bl	8001e8c <HAL_GPIO_EXTI_Callback>
  }
}
 800396c:	bf00      	nop
 800396e:	3708      	adds	r7, #8
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	40010400 	.word	0x40010400

08003978 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d101      	bne.n	800398a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e12b      	b.n	8003be2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b00      	cmp	r3, #0
 8003994:	d106      	bne.n	80039a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f7fc fd4a 	bl	8000438 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2224      	movs	r2, #36	@ 0x24
 80039a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f022 0201 	bic.w	r2, r2, #1
 80039ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80039ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80039da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80039dc:	f001 fbfc 	bl	80051d8 <HAL_RCC_GetPCLK1Freq>
 80039e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	4a81      	ldr	r2, [pc, #516]	@ (8003bec <HAL_I2C_Init+0x274>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d807      	bhi.n	80039fc <HAL_I2C_Init+0x84>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	4a80      	ldr	r2, [pc, #512]	@ (8003bf0 <HAL_I2C_Init+0x278>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	bf94      	ite	ls
 80039f4:	2301      	movls	r3, #1
 80039f6:	2300      	movhi	r3, #0
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	e006      	b.n	8003a0a <HAL_I2C_Init+0x92>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	4a7d      	ldr	r2, [pc, #500]	@ (8003bf4 <HAL_I2C_Init+0x27c>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	bf94      	ite	ls
 8003a04:	2301      	movls	r3, #1
 8003a06:	2300      	movhi	r3, #0
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d001      	beq.n	8003a12 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e0e7      	b.n	8003be2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	4a78      	ldr	r2, [pc, #480]	@ (8003bf8 <HAL_I2C_Init+0x280>)
 8003a16:	fba2 2303 	umull	r2, r3, r2, r3
 8003a1a:	0c9b      	lsrs	r3, r3, #18
 8003a1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68ba      	ldr	r2, [r7, #8]
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	4a6a      	ldr	r2, [pc, #424]	@ (8003bec <HAL_I2C_Init+0x274>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d802      	bhi.n	8003a4c <HAL_I2C_Init+0xd4>
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	3301      	adds	r3, #1
 8003a4a:	e009      	b.n	8003a60 <HAL_I2C_Init+0xe8>
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003a52:	fb02 f303 	mul.w	r3, r2, r3
 8003a56:	4a69      	ldr	r2, [pc, #420]	@ (8003bfc <HAL_I2C_Init+0x284>)
 8003a58:	fba2 2303 	umull	r2, r3, r2, r3
 8003a5c:	099b      	lsrs	r3, r3, #6
 8003a5e:	3301      	adds	r3, #1
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	6812      	ldr	r2, [r2, #0]
 8003a64:	430b      	orrs	r3, r1
 8003a66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	69db      	ldr	r3, [r3, #28]
 8003a6e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003a72:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	495c      	ldr	r1, [pc, #368]	@ (8003bec <HAL_I2C_Init+0x274>)
 8003a7c:	428b      	cmp	r3, r1
 8003a7e:	d819      	bhi.n	8003ab4 <HAL_I2C_Init+0x13c>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	1e59      	subs	r1, r3, #1
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	005b      	lsls	r3, r3, #1
 8003a8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a8e:	1c59      	adds	r1, r3, #1
 8003a90:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003a94:	400b      	ands	r3, r1
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00a      	beq.n	8003ab0 <HAL_I2C_Init+0x138>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	1e59      	subs	r1, r3, #1
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	005b      	lsls	r3, r3, #1
 8003aa4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aae:	e051      	b.n	8003b54 <HAL_I2C_Init+0x1dc>
 8003ab0:	2304      	movs	r3, #4
 8003ab2:	e04f      	b.n	8003b54 <HAL_I2C_Init+0x1dc>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d111      	bne.n	8003ae0 <HAL_I2C_Init+0x168>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	1e58      	subs	r0, r3, #1
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6859      	ldr	r1, [r3, #4]
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	005b      	lsls	r3, r3, #1
 8003ac8:	440b      	add	r3, r1
 8003aca:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ace:	3301      	adds	r3, #1
 8003ad0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	bf0c      	ite	eq
 8003ad8:	2301      	moveq	r3, #1
 8003ada:	2300      	movne	r3, #0
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	e012      	b.n	8003b06 <HAL_I2C_Init+0x18e>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	1e58      	subs	r0, r3, #1
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6859      	ldr	r1, [r3, #4]
 8003ae8:	460b      	mov	r3, r1
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	440b      	add	r3, r1
 8003aee:	0099      	lsls	r1, r3, #2
 8003af0:	440b      	add	r3, r1
 8003af2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003af6:	3301      	adds	r3, #1
 8003af8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	bf0c      	ite	eq
 8003b00:	2301      	moveq	r3, #1
 8003b02:	2300      	movne	r3, #0
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <HAL_I2C_Init+0x196>
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e022      	b.n	8003b54 <HAL_I2C_Init+0x1dc>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d10e      	bne.n	8003b34 <HAL_I2C_Init+0x1bc>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	1e58      	subs	r0, r3, #1
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6859      	ldr	r1, [r3, #4]
 8003b1e:	460b      	mov	r3, r1
 8003b20:	005b      	lsls	r3, r3, #1
 8003b22:	440b      	add	r3, r1
 8003b24:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b28:	3301      	adds	r3, #1
 8003b2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b32:	e00f      	b.n	8003b54 <HAL_I2C_Init+0x1dc>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	1e58      	subs	r0, r3, #1
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6859      	ldr	r1, [r3, #4]
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	440b      	add	r3, r1
 8003b42:	0099      	lsls	r1, r3, #2
 8003b44:	440b      	add	r3, r1
 8003b46:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b50:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003b54:	6879      	ldr	r1, [r7, #4]
 8003b56:	6809      	ldr	r1, [r1, #0]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	69da      	ldr	r2, [r3, #28]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a1b      	ldr	r3, [r3, #32]
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	430a      	orrs	r2, r1
 8003b76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003b82:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	6911      	ldr	r1, [r2, #16]
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	68d2      	ldr	r2, [r2, #12]
 8003b8e:	4311      	orrs	r1, r2
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	6812      	ldr	r2, [r2, #0]
 8003b94:	430b      	orrs	r3, r1
 8003b96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	695a      	ldr	r2, [r3, #20]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	699b      	ldr	r3, [r3, #24]
 8003baa:	431a      	orrs	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f042 0201 	orr.w	r2, r2, #1
 8003bc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2220      	movs	r2, #32
 8003bce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	000186a0 	.word	0x000186a0
 8003bf0:	001e847f 	.word	0x001e847f
 8003bf4:	003d08ff 	.word	0x003d08ff
 8003bf8:	431bde83 	.word	0x431bde83
 8003bfc:	10624dd3 	.word	0x10624dd3

08003c00 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b088      	sub	sp, #32
 8003c04:	af02      	add	r7, sp, #8
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	4608      	mov	r0, r1
 8003c0a:	4611      	mov	r1, r2
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	4603      	mov	r3, r0
 8003c10:	817b      	strh	r3, [r7, #10]
 8003c12:	460b      	mov	r3, r1
 8003c14:	813b      	strh	r3, [r7, #8]
 8003c16:	4613      	mov	r3, r2
 8003c18:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c1a:	f7fe fedd 	bl	80029d8 <HAL_GetTick>
 8003c1e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	2b20      	cmp	r3, #32
 8003c2a:	f040 80d9 	bne.w	8003de0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	9300      	str	r3, [sp, #0]
 8003c32:	2319      	movs	r3, #25
 8003c34:	2201      	movs	r2, #1
 8003c36:	496d      	ldr	r1, [pc, #436]	@ (8003dec <HAL_I2C_Mem_Write+0x1ec>)
 8003c38:	68f8      	ldr	r0, [r7, #12]
 8003c3a:	f000 fccd 	bl	80045d8 <I2C_WaitOnFlagUntilTimeout>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d001      	beq.n	8003c48 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003c44:	2302      	movs	r3, #2
 8003c46:	e0cc      	b.n	8003de2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d101      	bne.n	8003c56 <HAL_I2C_Mem_Write+0x56>
 8003c52:	2302      	movs	r3, #2
 8003c54:	e0c5      	b.n	8003de2 <HAL_I2C_Mem_Write+0x1e2>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0301 	and.w	r3, r3, #1
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d007      	beq.n	8003c7c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f042 0201 	orr.w	r2, r2, #1
 8003c7a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c8a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2221      	movs	r2, #33	@ 0x21
 8003c90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2240      	movs	r2, #64	@ 0x40
 8003c98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6a3a      	ldr	r2, [r7, #32]
 8003ca6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003cac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	4a4d      	ldr	r2, [pc, #308]	@ (8003df0 <HAL_I2C_Mem_Write+0x1f0>)
 8003cbc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003cbe:	88f8      	ldrh	r0, [r7, #6]
 8003cc0:	893a      	ldrh	r2, [r7, #8]
 8003cc2:	8979      	ldrh	r1, [r7, #10]
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	9301      	str	r3, [sp, #4]
 8003cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cca:	9300      	str	r3, [sp, #0]
 8003ccc:	4603      	mov	r3, r0
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	f000 fb04 	bl	80042dc <I2C_RequestMemoryWrite>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d052      	beq.n	8003d80 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e081      	b.n	8003de2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cde:	697a      	ldr	r2, [r7, #20]
 8003ce0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	f000 fd92 	bl	800480c <I2C_WaitOnTXEFlagUntilTimeout>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00d      	beq.n	8003d0a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf2:	2b04      	cmp	r3, #4
 8003cf4:	d107      	bne.n	8003d06 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d04:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e06b      	b.n	8003de2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d0e:	781a      	ldrb	r2, [r3, #0]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d1a:	1c5a      	adds	r2, r3, #1
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d24:	3b01      	subs	r3, #1
 8003d26:	b29a      	uxth	r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	3b01      	subs	r3, #1
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	695b      	ldr	r3, [r3, #20]
 8003d40:	f003 0304 	and.w	r3, r3, #4
 8003d44:	2b04      	cmp	r3, #4
 8003d46:	d11b      	bne.n	8003d80 <HAL_I2C_Mem_Write+0x180>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d017      	beq.n	8003d80 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d54:	781a      	ldrb	r2, [r3, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d60:	1c5a      	adds	r2, r3, #1
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d1aa      	bne.n	8003cde <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d88:	697a      	ldr	r2, [r7, #20]
 8003d8a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d8c:	68f8      	ldr	r0, [r7, #12]
 8003d8e:	f000 fd85 	bl	800489c <I2C_WaitOnBTFFlagUntilTimeout>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d00d      	beq.n	8003db4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d9c:	2b04      	cmp	r3, #4
 8003d9e:	d107      	bne.n	8003db0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dae:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e016      	b.n	8003de2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2220      	movs	r2, #32
 8003dc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	e000      	b.n	8003de2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003de0:	2302      	movs	r3, #2
  }
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3718      	adds	r7, #24
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	00100002 	.word	0x00100002
 8003df0:	ffff0000 	.word	0xffff0000

08003df4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b08c      	sub	sp, #48	@ 0x30
 8003df8:	af02      	add	r7, sp, #8
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	4608      	mov	r0, r1
 8003dfe:	4611      	mov	r1, r2
 8003e00:	461a      	mov	r2, r3
 8003e02:	4603      	mov	r3, r0
 8003e04:	817b      	strh	r3, [r7, #10]
 8003e06:	460b      	mov	r3, r1
 8003e08:	813b      	strh	r3, [r7, #8]
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e12:	f7fe fde1 	bl	80029d8 <HAL_GetTick>
 8003e16:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	2b20      	cmp	r3, #32
 8003e22:	f040 8250 	bne.w	80042c6 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e28:	9300      	str	r3, [sp, #0]
 8003e2a:	2319      	movs	r3, #25
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	4982      	ldr	r1, [pc, #520]	@ (8004038 <HAL_I2C_Mem_Read+0x244>)
 8003e30:	68f8      	ldr	r0, [r7, #12]
 8003e32:	f000 fbd1 	bl	80045d8 <I2C_WaitOnFlagUntilTimeout>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d001      	beq.n	8003e40 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003e3c:	2302      	movs	r3, #2
 8003e3e:	e243      	b.n	80042c8 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d101      	bne.n	8003e4e <HAL_I2C_Mem_Read+0x5a>
 8003e4a:	2302      	movs	r3, #2
 8003e4c:	e23c      	b.n	80042c8 <HAL_I2C_Mem_Read+0x4d4>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0301 	and.w	r3, r3, #1
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d007      	beq.n	8003e74 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f042 0201 	orr.w	r2, r2, #1
 8003e72:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e82:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2222      	movs	r2, #34	@ 0x22
 8003e88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2240      	movs	r2, #64	@ 0x40
 8003e90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e9e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003ea4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	4a62      	ldr	r2, [pc, #392]	@ (800403c <HAL_I2C_Mem_Read+0x248>)
 8003eb4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003eb6:	88f8      	ldrh	r0, [r7, #6]
 8003eb8:	893a      	ldrh	r2, [r7, #8]
 8003eba:	8979      	ldrh	r1, [r7, #10]
 8003ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ebe:	9301      	str	r3, [sp, #4]
 8003ec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ec2:	9300      	str	r3, [sp, #0]
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	68f8      	ldr	r0, [r7, #12]
 8003ec8:	f000 fa9e 	bl	8004408 <I2C_RequestMemoryRead>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d001      	beq.n	8003ed6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e1f8      	b.n	80042c8 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d113      	bne.n	8003f06 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ede:	2300      	movs	r3, #0
 8003ee0:	61fb      	str	r3, [r7, #28]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	695b      	ldr	r3, [r3, #20]
 8003ee8:	61fb      	str	r3, [r7, #28]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	61fb      	str	r3, [r7, #28]
 8003ef2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f02:	601a      	str	r2, [r3, #0]
 8003f04:	e1cc      	b.n	80042a0 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d11e      	bne.n	8003f4c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f1c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003f1e:	b672      	cpsid	i
}
 8003f20:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f22:	2300      	movs	r3, #0
 8003f24:	61bb      	str	r3, [r7, #24]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	695b      	ldr	r3, [r3, #20]
 8003f2c:	61bb      	str	r3, [r7, #24]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	61bb      	str	r3, [r7, #24]
 8003f36:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f46:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003f48:	b662      	cpsie	i
}
 8003f4a:	e035      	b.n	8003fb8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d11e      	bne.n	8003f92 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f62:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003f64:	b672      	cpsid	i
}
 8003f66:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f68:	2300      	movs	r3, #0
 8003f6a:	617b      	str	r3, [r7, #20]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	695b      	ldr	r3, [r3, #20]
 8003f72:	617b      	str	r3, [r7, #20]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	617b      	str	r3, [r7, #20]
 8003f7c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f8c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003f8e:	b662      	cpsie	i
}
 8003f90:	e012      	b.n	8003fb8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003fa0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	613b      	str	r3, [r7, #16]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	695b      	ldr	r3, [r3, #20]
 8003fac:	613b      	str	r3, [r7, #16]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	613b      	str	r3, [r7, #16]
 8003fb6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003fb8:	e172      	b.n	80042a0 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fbe:	2b03      	cmp	r3, #3
 8003fc0:	f200 811f 	bhi.w	8004202 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d123      	bne.n	8004014 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fce:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003fd0:	68f8      	ldr	r0, [r7, #12]
 8003fd2:	f000 fcab 	bl	800492c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d001      	beq.n	8003fe0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e173      	b.n	80042c8 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	691a      	ldr	r2, [r3, #16]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fea:	b2d2      	uxtb	r2, r2
 8003fec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff2:	1c5a      	adds	r2, r3, #1
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	b29a      	uxth	r2, r3
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004008:	b29b      	uxth	r3, r3
 800400a:	3b01      	subs	r3, #1
 800400c:	b29a      	uxth	r2, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004012:	e145      	b.n	80042a0 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004018:	2b02      	cmp	r3, #2
 800401a:	d152      	bne.n	80040c2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800401c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800401e:	9300      	str	r3, [sp, #0]
 8004020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004022:	2200      	movs	r2, #0
 8004024:	4906      	ldr	r1, [pc, #24]	@ (8004040 <HAL_I2C_Mem_Read+0x24c>)
 8004026:	68f8      	ldr	r0, [r7, #12]
 8004028:	f000 fad6 	bl	80045d8 <I2C_WaitOnFlagUntilTimeout>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d008      	beq.n	8004044 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e148      	b.n	80042c8 <HAL_I2C_Mem_Read+0x4d4>
 8004036:	bf00      	nop
 8004038:	00100002 	.word	0x00100002
 800403c:	ffff0000 	.word	0xffff0000
 8004040:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004044:	b672      	cpsid	i
}
 8004046:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004056:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	691a      	ldr	r2, [r3, #16]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004062:	b2d2      	uxtb	r2, r2
 8004064:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800406a:	1c5a      	adds	r2, r3, #1
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004074:	3b01      	subs	r3, #1
 8004076:	b29a      	uxth	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004080:	b29b      	uxth	r3, r3
 8004082:	3b01      	subs	r3, #1
 8004084:	b29a      	uxth	r2, r3
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800408a:	b662      	cpsie	i
}
 800408c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	691a      	ldr	r2, [r3, #16]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004098:	b2d2      	uxtb	r2, r2
 800409a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a0:	1c5a      	adds	r2, r3, #1
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040aa:	3b01      	subs	r3, #1
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	3b01      	subs	r3, #1
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80040c0:	e0ee      	b.n	80042a0 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c4:	9300      	str	r3, [sp, #0]
 80040c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040c8:	2200      	movs	r2, #0
 80040ca:	4981      	ldr	r1, [pc, #516]	@ (80042d0 <HAL_I2C_Mem_Read+0x4dc>)
 80040cc:	68f8      	ldr	r0, [r7, #12]
 80040ce:	f000 fa83 	bl	80045d8 <I2C_WaitOnFlagUntilTimeout>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d001      	beq.n	80040dc <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e0f5      	b.n	80042c8 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040ea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80040ec:	b672      	cpsid	i
}
 80040ee:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	691a      	ldr	r2, [r3, #16]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040fa:	b2d2      	uxtb	r2, r2
 80040fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004102:	1c5a      	adds	r2, r3, #1
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800410c:	3b01      	subs	r3, #1
 800410e:	b29a      	uxth	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004118:	b29b      	uxth	r3, r3
 800411a:	3b01      	subs	r3, #1
 800411c:	b29a      	uxth	r2, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004122:	4b6c      	ldr	r3, [pc, #432]	@ (80042d4 <HAL_I2C_Mem_Read+0x4e0>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	08db      	lsrs	r3, r3, #3
 8004128:	4a6b      	ldr	r2, [pc, #428]	@ (80042d8 <HAL_I2C_Mem_Read+0x4e4>)
 800412a:	fba2 2303 	umull	r2, r3, r2, r3
 800412e:	0a1a      	lsrs	r2, r3, #8
 8004130:	4613      	mov	r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	4413      	add	r3, r2
 8004136:	00da      	lsls	r2, r3, #3
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800413c:	6a3b      	ldr	r3, [r7, #32]
 800413e:	3b01      	subs	r3, #1
 8004140:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004142:	6a3b      	ldr	r3, [r7, #32]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d118      	bne.n	800417a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2200      	movs	r2, #0
 800414c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2220      	movs	r2, #32
 8004152:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004162:	f043 0220 	orr.w	r2, r3, #32
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800416a:	b662      	cpsie	i
}
 800416c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2200      	movs	r2, #0
 8004172:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e0a6      	b.n	80042c8 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	695b      	ldr	r3, [r3, #20]
 8004180:	f003 0304 	and.w	r3, r3, #4
 8004184:	2b04      	cmp	r3, #4
 8004186:	d1d9      	bne.n	800413c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004196:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	691a      	ldr	r2, [r3, #16]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a2:	b2d2      	uxtb	r2, r2
 80041a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041aa:	1c5a      	adds	r2, r3, #1
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041b4:	3b01      	subs	r3, #1
 80041b6:	b29a      	uxth	r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	3b01      	subs	r3, #1
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80041ca:	b662      	cpsie	i
}
 80041cc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	691a      	ldr	r2, [r3, #16]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d8:	b2d2      	uxtb	r2, r2
 80041da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e0:	1c5a      	adds	r2, r3, #1
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041ea:	3b01      	subs	r3, #1
 80041ec:	b29a      	uxth	r2, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	3b01      	subs	r3, #1
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004200:	e04e      	b.n	80042a0 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004202:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004204:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004206:	68f8      	ldr	r0, [r7, #12]
 8004208:	f000 fb90 	bl	800492c <I2C_WaitOnRXNEFlagUntilTimeout>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d001      	beq.n	8004216 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e058      	b.n	80042c8 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	691a      	ldr	r2, [r3, #16]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004220:	b2d2      	uxtb	r2, r2
 8004222:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004228:	1c5a      	adds	r2, r3, #1
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004232:	3b01      	subs	r3, #1
 8004234:	b29a      	uxth	r2, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800423e:	b29b      	uxth	r3, r3
 8004240:	3b01      	subs	r3, #1
 8004242:	b29a      	uxth	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	f003 0304 	and.w	r3, r3, #4
 8004252:	2b04      	cmp	r3, #4
 8004254:	d124      	bne.n	80042a0 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800425a:	2b03      	cmp	r3, #3
 800425c:	d107      	bne.n	800426e <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800426c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	691a      	ldr	r2, [r3, #16]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004278:	b2d2      	uxtb	r2, r2
 800427a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004280:	1c5a      	adds	r2, r3, #1
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800428a:	3b01      	subs	r3, #1
 800428c:	b29a      	uxth	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004296:	b29b      	uxth	r3, r3
 8004298:	3b01      	subs	r3, #1
 800429a:	b29a      	uxth	r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	f47f ae88 	bne.w	8003fba <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2220      	movs	r2, #32
 80042ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80042c2:	2300      	movs	r3, #0
 80042c4:	e000      	b.n	80042c8 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80042c6:	2302      	movs	r3, #2
  }
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3728      	adds	r7, #40	@ 0x28
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	00010004 	.word	0x00010004
 80042d4:	20000080 	.word	0x20000080
 80042d8:	14f8b589 	.word	0x14f8b589

080042dc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b088      	sub	sp, #32
 80042e0:	af02      	add	r7, sp, #8
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	4608      	mov	r0, r1
 80042e6:	4611      	mov	r1, r2
 80042e8:	461a      	mov	r2, r3
 80042ea:	4603      	mov	r3, r0
 80042ec:	817b      	strh	r3, [r7, #10]
 80042ee:	460b      	mov	r3, r1
 80042f0:	813b      	strh	r3, [r7, #8]
 80042f2:	4613      	mov	r3, r2
 80042f4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004304:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004308:	9300      	str	r3, [sp, #0]
 800430a:	6a3b      	ldr	r3, [r7, #32]
 800430c:	2200      	movs	r2, #0
 800430e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004312:	68f8      	ldr	r0, [r7, #12]
 8004314:	f000 f960 	bl	80045d8 <I2C_WaitOnFlagUntilTimeout>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00d      	beq.n	800433a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004328:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800432c:	d103      	bne.n	8004336 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004334:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e05f      	b.n	80043fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800433a:	897b      	ldrh	r3, [r7, #10]
 800433c:	b2db      	uxtb	r3, r3
 800433e:	461a      	mov	r2, r3
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004348:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800434a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800434c:	6a3a      	ldr	r2, [r7, #32]
 800434e:	492d      	ldr	r1, [pc, #180]	@ (8004404 <I2C_RequestMemoryWrite+0x128>)
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f000 f9bb 	bl	80046cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d001      	beq.n	8004360 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e04c      	b.n	80043fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004360:	2300      	movs	r3, #0
 8004362:	617b      	str	r3, [r7, #20]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	617b      	str	r3, [r7, #20]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	617b      	str	r3, [r7, #20]
 8004374:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004376:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004378:	6a39      	ldr	r1, [r7, #32]
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	f000 fa46 	bl	800480c <I2C_WaitOnTXEFlagUntilTimeout>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00d      	beq.n	80043a2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800438a:	2b04      	cmp	r3, #4
 800438c:	d107      	bne.n	800439e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800439c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e02b      	b.n	80043fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043a2:	88fb      	ldrh	r3, [r7, #6]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d105      	bne.n	80043b4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043a8:	893b      	ldrh	r3, [r7, #8]
 80043aa:	b2da      	uxtb	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	611a      	str	r2, [r3, #16]
 80043b2:	e021      	b.n	80043f8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80043b4:	893b      	ldrh	r3, [r7, #8]
 80043b6:	0a1b      	lsrs	r3, r3, #8
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	b2da      	uxtb	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043c4:	6a39      	ldr	r1, [r7, #32]
 80043c6:	68f8      	ldr	r0, [r7, #12]
 80043c8:	f000 fa20 	bl	800480c <I2C_WaitOnTXEFlagUntilTimeout>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00d      	beq.n	80043ee <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d6:	2b04      	cmp	r3, #4
 80043d8:	d107      	bne.n	80043ea <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e005      	b.n	80043fa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043ee:	893b      	ldrh	r3, [r7, #8]
 80043f0:	b2da      	uxtb	r2, r3
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3718      	adds	r7, #24
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	00010002 	.word	0x00010002

08004408 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b088      	sub	sp, #32
 800440c:	af02      	add	r7, sp, #8
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	4608      	mov	r0, r1
 8004412:	4611      	mov	r1, r2
 8004414:	461a      	mov	r2, r3
 8004416:	4603      	mov	r3, r0
 8004418:	817b      	strh	r3, [r7, #10]
 800441a:	460b      	mov	r3, r1
 800441c:	813b      	strh	r3, [r7, #8]
 800441e:	4613      	mov	r3, r2
 8004420:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004430:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004440:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004444:	9300      	str	r3, [sp, #0]
 8004446:	6a3b      	ldr	r3, [r7, #32]
 8004448:	2200      	movs	r2, #0
 800444a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800444e:	68f8      	ldr	r0, [r7, #12]
 8004450:	f000 f8c2 	bl	80045d8 <I2C_WaitOnFlagUntilTimeout>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00d      	beq.n	8004476 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004464:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004468:	d103      	bne.n	8004472 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004470:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e0aa      	b.n	80045cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004476:	897b      	ldrh	r3, [r7, #10]
 8004478:	b2db      	uxtb	r3, r3
 800447a:	461a      	mov	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004484:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004488:	6a3a      	ldr	r2, [r7, #32]
 800448a:	4952      	ldr	r1, [pc, #328]	@ (80045d4 <I2C_RequestMemoryRead+0x1cc>)
 800448c:	68f8      	ldr	r0, [r7, #12]
 800448e:	f000 f91d 	bl	80046cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d001      	beq.n	800449c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e097      	b.n	80045cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800449c:	2300      	movs	r3, #0
 800449e:	617b      	str	r3, [r7, #20]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	617b      	str	r3, [r7, #20]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	617b      	str	r3, [r7, #20]
 80044b0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044b4:	6a39      	ldr	r1, [r7, #32]
 80044b6:	68f8      	ldr	r0, [r7, #12]
 80044b8:	f000 f9a8 	bl	800480c <I2C_WaitOnTXEFlagUntilTimeout>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00d      	beq.n	80044de <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c6:	2b04      	cmp	r3, #4
 80044c8:	d107      	bne.n	80044da <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044d8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e076      	b.n	80045cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044de:	88fb      	ldrh	r3, [r7, #6]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d105      	bne.n	80044f0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044e4:	893b      	ldrh	r3, [r7, #8]
 80044e6:	b2da      	uxtb	r2, r3
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	611a      	str	r2, [r3, #16]
 80044ee:	e021      	b.n	8004534 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80044f0:	893b      	ldrh	r3, [r7, #8]
 80044f2:	0a1b      	lsrs	r3, r3, #8
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	b2da      	uxtb	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004500:	6a39      	ldr	r1, [r7, #32]
 8004502:	68f8      	ldr	r0, [r7, #12]
 8004504:	f000 f982 	bl	800480c <I2C_WaitOnTXEFlagUntilTimeout>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00d      	beq.n	800452a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004512:	2b04      	cmp	r3, #4
 8004514:	d107      	bne.n	8004526 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004524:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e050      	b.n	80045cc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800452a:	893b      	ldrh	r3, [r7, #8]
 800452c:	b2da      	uxtb	r2, r3
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004534:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004536:	6a39      	ldr	r1, [r7, #32]
 8004538:	68f8      	ldr	r0, [r7, #12]
 800453a:	f000 f967 	bl	800480c <I2C_WaitOnTXEFlagUntilTimeout>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d00d      	beq.n	8004560 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004548:	2b04      	cmp	r3, #4
 800454a:	d107      	bne.n	800455c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800455a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e035      	b.n	80045cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800456e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004572:	9300      	str	r3, [sp, #0]
 8004574:	6a3b      	ldr	r3, [r7, #32]
 8004576:	2200      	movs	r2, #0
 8004578:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800457c:	68f8      	ldr	r0, [r7, #12]
 800457e:	f000 f82b 	bl	80045d8 <I2C_WaitOnFlagUntilTimeout>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d00d      	beq.n	80045a4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004592:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004596:	d103      	bne.n	80045a0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800459e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e013      	b.n	80045cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80045a4:	897b      	ldrh	r3, [r7, #10]
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	f043 0301 	orr.w	r3, r3, #1
 80045ac:	b2da      	uxtb	r2, r3
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b6:	6a3a      	ldr	r2, [r7, #32]
 80045b8:	4906      	ldr	r1, [pc, #24]	@ (80045d4 <I2C_RequestMemoryRead+0x1cc>)
 80045ba:	68f8      	ldr	r0, [r7, #12]
 80045bc:	f000 f886 	bl	80046cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d001      	beq.n	80045ca <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e000      	b.n	80045cc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80045ca:	2300      	movs	r3, #0
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3718      	adds	r7, #24
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	00010002 	.word	0x00010002

080045d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	603b      	str	r3, [r7, #0]
 80045e4:	4613      	mov	r3, r2
 80045e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045e8:	e048      	b.n	800467c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f0:	d044      	beq.n	800467c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045f2:	f7fe f9f1 	bl	80029d8 <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	683a      	ldr	r2, [r7, #0]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d302      	bcc.n	8004608 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d139      	bne.n	800467c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	0c1b      	lsrs	r3, r3, #16
 800460c:	b2db      	uxtb	r3, r3
 800460e:	2b01      	cmp	r3, #1
 8004610:	d10d      	bne.n	800462e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	695b      	ldr	r3, [r3, #20]
 8004618:	43da      	mvns	r2, r3
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	4013      	ands	r3, r2
 800461e:	b29b      	uxth	r3, r3
 8004620:	2b00      	cmp	r3, #0
 8004622:	bf0c      	ite	eq
 8004624:	2301      	moveq	r3, #1
 8004626:	2300      	movne	r3, #0
 8004628:	b2db      	uxtb	r3, r3
 800462a:	461a      	mov	r2, r3
 800462c:	e00c      	b.n	8004648 <I2C_WaitOnFlagUntilTimeout+0x70>
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	43da      	mvns	r2, r3
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	4013      	ands	r3, r2
 800463a:	b29b      	uxth	r3, r3
 800463c:	2b00      	cmp	r3, #0
 800463e:	bf0c      	ite	eq
 8004640:	2301      	moveq	r3, #1
 8004642:	2300      	movne	r3, #0
 8004644:	b2db      	uxtb	r3, r3
 8004646:	461a      	mov	r2, r3
 8004648:	79fb      	ldrb	r3, [r7, #7]
 800464a:	429a      	cmp	r2, r3
 800464c:	d116      	bne.n	800467c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2200      	movs	r2, #0
 8004652:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2220      	movs	r2, #32
 8004658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004668:	f043 0220 	orr.w	r2, r3, #32
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2200      	movs	r2, #0
 8004674:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e023      	b.n	80046c4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	0c1b      	lsrs	r3, r3, #16
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b01      	cmp	r3, #1
 8004684:	d10d      	bne.n	80046a2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	695b      	ldr	r3, [r3, #20]
 800468c:	43da      	mvns	r2, r3
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	4013      	ands	r3, r2
 8004692:	b29b      	uxth	r3, r3
 8004694:	2b00      	cmp	r3, #0
 8004696:	bf0c      	ite	eq
 8004698:	2301      	moveq	r3, #1
 800469a:	2300      	movne	r3, #0
 800469c:	b2db      	uxtb	r3, r3
 800469e:	461a      	mov	r2, r3
 80046a0:	e00c      	b.n	80046bc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	43da      	mvns	r2, r3
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	4013      	ands	r3, r2
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	bf0c      	ite	eq
 80046b4:	2301      	moveq	r3, #1
 80046b6:	2300      	movne	r3, #0
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	461a      	mov	r2, r3
 80046bc:	79fb      	ldrb	r3, [r7, #7]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d093      	beq.n	80045ea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3710      	adds	r7, #16
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	607a      	str	r2, [r7, #4]
 80046d8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80046da:	e071      	b.n	80047c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046ea:	d123      	bne.n	8004734 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046fa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004704:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2200      	movs	r2, #0
 800470a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2220      	movs	r2, #32
 8004710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2200      	movs	r2, #0
 8004718:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004720:	f043 0204 	orr.w	r2, r3, #4
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e067      	b.n	8004804 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800473a:	d041      	beq.n	80047c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800473c:	f7fe f94c 	bl	80029d8 <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	429a      	cmp	r2, r3
 800474a:	d302      	bcc.n	8004752 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d136      	bne.n	80047c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	0c1b      	lsrs	r3, r3, #16
 8004756:	b2db      	uxtb	r3, r3
 8004758:	2b01      	cmp	r3, #1
 800475a:	d10c      	bne.n	8004776 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	695b      	ldr	r3, [r3, #20]
 8004762:	43da      	mvns	r2, r3
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	4013      	ands	r3, r2
 8004768:	b29b      	uxth	r3, r3
 800476a:	2b00      	cmp	r3, #0
 800476c:	bf14      	ite	ne
 800476e:	2301      	movne	r3, #1
 8004770:	2300      	moveq	r3, #0
 8004772:	b2db      	uxtb	r3, r3
 8004774:	e00b      	b.n	800478e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	699b      	ldr	r3, [r3, #24]
 800477c:	43da      	mvns	r2, r3
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	4013      	ands	r3, r2
 8004782:	b29b      	uxth	r3, r3
 8004784:	2b00      	cmp	r3, #0
 8004786:	bf14      	ite	ne
 8004788:	2301      	movne	r3, #1
 800478a:	2300      	moveq	r3, #0
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b00      	cmp	r3, #0
 8004790:	d016      	beq.n	80047c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2200      	movs	r2, #0
 8004796:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2220      	movs	r2, #32
 800479c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ac:	f043 0220 	orr.w	r2, r3, #32
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e021      	b.n	8004804 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	0c1b      	lsrs	r3, r3, #16
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d10c      	bne.n	80047e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	695b      	ldr	r3, [r3, #20]
 80047d0:	43da      	mvns	r2, r3
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	4013      	ands	r3, r2
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	2b00      	cmp	r3, #0
 80047da:	bf14      	ite	ne
 80047dc:	2301      	movne	r3, #1
 80047de:	2300      	moveq	r3, #0
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	e00b      	b.n	80047fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	43da      	mvns	r2, r3
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	4013      	ands	r3, r2
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	bf14      	ite	ne
 80047f6:	2301      	movne	r3, #1
 80047f8:	2300      	moveq	r3, #0
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	f47f af6d 	bne.w	80046dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	3710      	adds	r7, #16
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004818:	e034      	b.n	8004884 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800481a:	68f8      	ldr	r0, [r7, #12]
 800481c:	f000 f8e3 	bl	80049e6 <I2C_IsAcknowledgeFailed>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d001      	beq.n	800482a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e034      	b.n	8004894 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004830:	d028      	beq.n	8004884 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004832:	f7fe f8d1 	bl	80029d8 <HAL_GetTick>
 8004836:	4602      	mov	r2, r0
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	68ba      	ldr	r2, [r7, #8]
 800483e:	429a      	cmp	r2, r3
 8004840:	d302      	bcc.n	8004848 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d11d      	bne.n	8004884 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	695b      	ldr	r3, [r3, #20]
 800484e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004852:	2b80      	cmp	r3, #128	@ 0x80
 8004854:	d016      	beq.n	8004884 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2200      	movs	r2, #0
 800485a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2220      	movs	r2, #32
 8004860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2200      	movs	r2, #0
 8004868:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004870:	f043 0220 	orr.w	r2, r3, #32
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2200      	movs	r2, #0
 800487c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e007      	b.n	8004894 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	695b      	ldr	r3, [r3, #20]
 800488a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800488e:	2b80      	cmp	r3, #128	@ 0x80
 8004890:	d1c3      	bne.n	800481a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004892:	2300      	movs	r3, #0
}
 8004894:	4618      	mov	r0, r3
 8004896:	3710      	adds	r7, #16
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80048a8:	e034      	b.n	8004914 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	f000 f89b 	bl	80049e6 <I2C_IsAcknowledgeFailed>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d001      	beq.n	80048ba <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e034      	b.n	8004924 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c0:	d028      	beq.n	8004914 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048c2:	f7fe f889 	bl	80029d8 <HAL_GetTick>
 80048c6:	4602      	mov	r2, r0
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	68ba      	ldr	r2, [r7, #8]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d302      	bcc.n	80048d8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d11d      	bne.n	8004914 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	f003 0304 	and.w	r3, r3, #4
 80048e2:	2b04      	cmp	r3, #4
 80048e4:	d016      	beq.n	8004914 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2220      	movs	r2, #32
 80048f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004900:	f043 0220 	orr.w	r2, r3, #32
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e007      	b.n	8004924 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	695b      	ldr	r3, [r3, #20]
 800491a:	f003 0304 	and.w	r3, r3, #4
 800491e:	2b04      	cmp	r3, #4
 8004920:	d1c3      	bne.n	80048aa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	3710      	adds	r7, #16
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004938:	e049      	b.n	80049ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	695b      	ldr	r3, [r3, #20]
 8004940:	f003 0310 	and.w	r3, r3, #16
 8004944:	2b10      	cmp	r3, #16
 8004946:	d119      	bne.n	800497c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f06f 0210 	mvn.w	r2, #16
 8004950:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2220      	movs	r2, #32
 800495c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2200      	movs	r2, #0
 8004964:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2200      	movs	r2, #0
 8004974:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e030      	b.n	80049de <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800497c:	f7fe f82c 	bl	80029d8 <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	68ba      	ldr	r2, [r7, #8]
 8004988:	429a      	cmp	r2, r3
 800498a:	d302      	bcc.n	8004992 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d11d      	bne.n	80049ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	695b      	ldr	r3, [r3, #20]
 8004998:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800499c:	2b40      	cmp	r3, #64	@ 0x40
 800499e:	d016      	beq.n	80049ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2200      	movs	r2, #0
 80049a4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2220      	movs	r2, #32
 80049aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ba:	f043 0220 	orr.w	r2, r3, #32
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e007      	b.n	80049de <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	695b      	ldr	r3, [r3, #20]
 80049d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049d8:	2b40      	cmp	r3, #64	@ 0x40
 80049da:	d1ae      	bne.n	800493a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3710      	adds	r7, #16
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}

080049e6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80049e6:	b480      	push	{r7}
 80049e8:	b083      	sub	sp, #12
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	695b      	ldr	r3, [r3, #20]
 80049f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049fc:	d11b      	bne.n	8004a36 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004a06:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2220      	movs	r2, #32
 8004a12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a22:	f043 0204 	orr.w	r2, r3, #4
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e000      	b.n	8004a38 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bc80      	pop	{r7}
 8004a40:	4770      	bx	lr
	...

08004a44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b086      	sub	sp, #24
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d101      	bne.n	8004a56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e272      	b.n	8004f3c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0301 	and.w	r3, r3, #1
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	f000 8087 	beq.w	8004b72 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a64:	4b92      	ldr	r3, [pc, #584]	@ (8004cb0 <HAL_RCC_OscConfig+0x26c>)
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f003 030c 	and.w	r3, r3, #12
 8004a6c:	2b04      	cmp	r3, #4
 8004a6e:	d00c      	beq.n	8004a8a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004a70:	4b8f      	ldr	r3, [pc, #572]	@ (8004cb0 <HAL_RCC_OscConfig+0x26c>)
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f003 030c 	and.w	r3, r3, #12
 8004a78:	2b08      	cmp	r3, #8
 8004a7a:	d112      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x5e>
 8004a7c:	4b8c      	ldr	r3, [pc, #560]	@ (8004cb0 <HAL_RCC_OscConfig+0x26c>)
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a88:	d10b      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a8a:	4b89      	ldr	r3, [pc, #548]	@ (8004cb0 <HAL_RCC_OscConfig+0x26c>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d06c      	beq.n	8004b70 <HAL_RCC_OscConfig+0x12c>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d168      	bne.n	8004b70 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e24c      	b.n	8004f3c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004aaa:	d106      	bne.n	8004aba <HAL_RCC_OscConfig+0x76>
 8004aac:	4b80      	ldr	r3, [pc, #512]	@ (8004cb0 <HAL_RCC_OscConfig+0x26c>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a7f      	ldr	r2, [pc, #508]	@ (8004cb0 <HAL_RCC_OscConfig+0x26c>)
 8004ab2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ab6:	6013      	str	r3, [r2, #0]
 8004ab8:	e02e      	b.n	8004b18 <HAL_RCC_OscConfig+0xd4>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d10c      	bne.n	8004adc <HAL_RCC_OscConfig+0x98>
 8004ac2:	4b7b      	ldr	r3, [pc, #492]	@ (8004cb0 <HAL_RCC_OscConfig+0x26c>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a7a      	ldr	r2, [pc, #488]	@ (8004cb0 <HAL_RCC_OscConfig+0x26c>)
 8004ac8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004acc:	6013      	str	r3, [r2, #0]
 8004ace:	4b78      	ldr	r3, [pc, #480]	@ (8004cb0 <HAL_RCC_OscConfig+0x26c>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a77      	ldr	r2, [pc, #476]	@ (8004cb0 <HAL_RCC_OscConfig+0x26c>)
 8004ad4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ad8:	6013      	str	r3, [r2, #0]
 8004ada:	e01d      	b.n	8004b18 <HAL_RCC_OscConfig+0xd4>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ae4:	d10c      	bne.n	8004b00 <HAL_RCC_OscConfig+0xbc>
 8004ae6:	4b72      	ldr	r3, [pc, #456]	@ (8004cb0 <HAL_RCC_OscConfig+0x26c>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a71      	ldr	r2, [pc, #452]	@ (8004cb0 <HAL_RCC_OscConfig+0x26c>)
 8004aec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004af0:	6013      	str	r3, [r2, #0]
 8004af2:	4b6f      	ldr	r3, [pc, #444]	@ (8004cb0 <HAL_RCC_OscConfig+0x26c>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a6e      	ldr	r2, [pc, #440]	@ (8004cb0 <HAL_RCC_OscConfig+0x26c>)
 8004af8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004afc:	6013      	str	r3, [r2, #0]
 8004afe:	e00b      	b.n	8004b18 <HAL_RCC_OscConfig+0xd4>
 8004b00:	4b6b      	ldr	r3, [pc, #428]	@ (8004cb0 <HAL_RCC_OscConfig+0x26c>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a6a      	ldr	r2, [pc, #424]	@ (8004cb0 <HAL_RCC_OscConfig+0x26c>)
 8004b06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b0a:	6013      	str	r3, [r2, #0]
 8004b0c:	4b68      	ldr	r3, [pc, #416]	@ (8004cb0 <HAL_RCC_OscConfig+0x26c>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a67      	ldr	r2, [pc, #412]	@ (8004cb0 <HAL_RCC_OscConfig+0x26c>)
 8004b12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b16:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d013      	beq.n	8004b48 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b20:	f7fd ff5a 	bl	80029d8 <HAL_GetTick>
 8004b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b26:	e008      	b.n	8004b3a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b28:	f7fd ff56 	bl	80029d8 <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	2b64      	cmp	r3, #100	@ 0x64
 8004b34:	d901      	bls.n	8004b3a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e200      	b.n	8004f3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b3a:	4b5d      	ldr	r3, [pc, #372]	@ (8004cb0 <HAL_RCC_OscConfig+0x26c>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d0f0      	beq.n	8004b28 <HAL_RCC_OscConfig+0xe4>
 8004b46:	e014      	b.n	8004b72 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b48:	f7fd ff46 	bl	80029d8 <HAL_GetTick>
 8004b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b4e:	e008      	b.n	8004b62 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b50:	f7fd ff42 	bl	80029d8 <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	2b64      	cmp	r3, #100	@ 0x64
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e1ec      	b.n	8004f3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b62:	4b53      	ldr	r3, [pc, #332]	@ (8004cb0 <HAL_RCC_OscConfig+0x26c>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d1f0      	bne.n	8004b50 <HAL_RCC_OscConfig+0x10c>
 8004b6e:	e000      	b.n	8004b72 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0302 	and.w	r3, r3, #2
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d063      	beq.n	8004c46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b7e:	4b4c      	ldr	r3, [pc, #304]	@ (8004cb0 <HAL_RCC_OscConfig+0x26c>)
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	f003 030c 	and.w	r3, r3, #12
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00b      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004b8a:	4b49      	ldr	r3, [pc, #292]	@ (8004cb0 <HAL_RCC_OscConfig+0x26c>)
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	f003 030c 	and.w	r3, r3, #12
 8004b92:	2b08      	cmp	r3, #8
 8004b94:	d11c      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x18c>
 8004b96:	4b46      	ldr	r3, [pc, #280]	@ (8004cb0 <HAL_RCC_OscConfig+0x26c>)
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d116      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ba2:	4b43      	ldr	r3, [pc, #268]	@ (8004cb0 <HAL_RCC_OscConfig+0x26c>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0302 	and.w	r3, r3, #2
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d005      	beq.n	8004bba <HAL_RCC_OscConfig+0x176>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d001      	beq.n	8004bba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e1c0      	b.n	8004f3c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bba:	4b3d      	ldr	r3, [pc, #244]	@ (8004cb0 <HAL_RCC_OscConfig+0x26c>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	00db      	lsls	r3, r3, #3
 8004bc8:	4939      	ldr	r1, [pc, #228]	@ (8004cb0 <HAL_RCC_OscConfig+0x26c>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bce:	e03a      	b.n	8004c46 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d020      	beq.n	8004c1a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bd8:	4b36      	ldr	r3, [pc, #216]	@ (8004cb4 <HAL_RCC_OscConfig+0x270>)
 8004bda:	2201      	movs	r2, #1
 8004bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bde:	f7fd fefb 	bl	80029d8 <HAL_GetTick>
 8004be2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004be4:	e008      	b.n	8004bf8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004be6:	f7fd fef7 	bl	80029d8 <HAL_GetTick>
 8004bea:	4602      	mov	r2, r0
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d901      	bls.n	8004bf8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e1a1      	b.n	8004f3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bf8:	4b2d      	ldr	r3, [pc, #180]	@ (8004cb0 <HAL_RCC_OscConfig+0x26c>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0302 	and.w	r3, r3, #2
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d0f0      	beq.n	8004be6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c04:	4b2a      	ldr	r3, [pc, #168]	@ (8004cb0 <HAL_RCC_OscConfig+0x26c>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	695b      	ldr	r3, [r3, #20]
 8004c10:	00db      	lsls	r3, r3, #3
 8004c12:	4927      	ldr	r1, [pc, #156]	@ (8004cb0 <HAL_RCC_OscConfig+0x26c>)
 8004c14:	4313      	orrs	r3, r2
 8004c16:	600b      	str	r3, [r1, #0]
 8004c18:	e015      	b.n	8004c46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c1a:	4b26      	ldr	r3, [pc, #152]	@ (8004cb4 <HAL_RCC_OscConfig+0x270>)
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c20:	f7fd feda 	bl	80029d8 <HAL_GetTick>
 8004c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c26:	e008      	b.n	8004c3a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c28:	f7fd fed6 	bl	80029d8 <HAL_GetTick>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d901      	bls.n	8004c3a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e180      	b.n	8004f3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c3a:	4b1d      	ldr	r3, [pc, #116]	@ (8004cb0 <HAL_RCC_OscConfig+0x26c>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0302 	and.w	r3, r3, #2
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1f0      	bne.n	8004c28 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0308 	and.w	r3, r3, #8
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d03a      	beq.n	8004cc8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	699b      	ldr	r3, [r3, #24]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d019      	beq.n	8004c8e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c5a:	4b17      	ldr	r3, [pc, #92]	@ (8004cb8 <HAL_RCC_OscConfig+0x274>)
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c60:	f7fd feba 	bl	80029d8 <HAL_GetTick>
 8004c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c66:	e008      	b.n	8004c7a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c68:	f7fd feb6 	bl	80029d8 <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d901      	bls.n	8004c7a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e160      	b.n	8004f3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8004cb0 <HAL_RCC_OscConfig+0x26c>)
 8004c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c7e:	f003 0302 	and.w	r3, r3, #2
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d0f0      	beq.n	8004c68 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004c86:	2001      	movs	r0, #1
 8004c88:	f000 face 	bl	8005228 <RCC_Delay>
 8004c8c:	e01c      	b.n	8004cc8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8004cb8 <HAL_RCC_OscConfig+0x274>)
 8004c90:	2200      	movs	r2, #0
 8004c92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c94:	f7fd fea0 	bl	80029d8 <HAL_GetTick>
 8004c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c9a:	e00f      	b.n	8004cbc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c9c:	f7fd fe9c 	bl	80029d8 <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d908      	bls.n	8004cbc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e146      	b.n	8004f3c <HAL_RCC_OscConfig+0x4f8>
 8004cae:	bf00      	nop
 8004cb0:	40021000 	.word	0x40021000
 8004cb4:	42420000 	.word	0x42420000
 8004cb8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cbc:	4b92      	ldr	r3, [pc, #584]	@ (8004f08 <HAL_RCC_OscConfig+0x4c4>)
 8004cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cc0:	f003 0302 	and.w	r3, r3, #2
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d1e9      	bne.n	8004c9c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0304 	and.w	r3, r3, #4
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	f000 80a6 	beq.w	8004e22 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cda:	4b8b      	ldr	r3, [pc, #556]	@ (8004f08 <HAL_RCC_OscConfig+0x4c4>)
 8004cdc:	69db      	ldr	r3, [r3, #28]
 8004cde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d10d      	bne.n	8004d02 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ce6:	4b88      	ldr	r3, [pc, #544]	@ (8004f08 <HAL_RCC_OscConfig+0x4c4>)
 8004ce8:	69db      	ldr	r3, [r3, #28]
 8004cea:	4a87      	ldr	r2, [pc, #540]	@ (8004f08 <HAL_RCC_OscConfig+0x4c4>)
 8004cec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cf0:	61d3      	str	r3, [r2, #28]
 8004cf2:	4b85      	ldr	r3, [pc, #532]	@ (8004f08 <HAL_RCC_OscConfig+0x4c4>)
 8004cf4:	69db      	ldr	r3, [r3, #28]
 8004cf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cfa:	60bb      	str	r3, [r7, #8]
 8004cfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d02:	4b82      	ldr	r3, [pc, #520]	@ (8004f0c <HAL_RCC_OscConfig+0x4c8>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d118      	bne.n	8004d40 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d0e:	4b7f      	ldr	r3, [pc, #508]	@ (8004f0c <HAL_RCC_OscConfig+0x4c8>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a7e      	ldr	r2, [pc, #504]	@ (8004f0c <HAL_RCC_OscConfig+0x4c8>)
 8004d14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d1a:	f7fd fe5d 	bl	80029d8 <HAL_GetTick>
 8004d1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d20:	e008      	b.n	8004d34 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d22:	f7fd fe59 	bl	80029d8 <HAL_GetTick>
 8004d26:	4602      	mov	r2, r0
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	2b64      	cmp	r3, #100	@ 0x64
 8004d2e:	d901      	bls.n	8004d34 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e103      	b.n	8004f3c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d34:	4b75      	ldr	r3, [pc, #468]	@ (8004f0c <HAL_RCC_OscConfig+0x4c8>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d0f0      	beq.n	8004d22 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d106      	bne.n	8004d56 <HAL_RCC_OscConfig+0x312>
 8004d48:	4b6f      	ldr	r3, [pc, #444]	@ (8004f08 <HAL_RCC_OscConfig+0x4c4>)
 8004d4a:	6a1b      	ldr	r3, [r3, #32]
 8004d4c:	4a6e      	ldr	r2, [pc, #440]	@ (8004f08 <HAL_RCC_OscConfig+0x4c4>)
 8004d4e:	f043 0301 	orr.w	r3, r3, #1
 8004d52:	6213      	str	r3, [r2, #32]
 8004d54:	e02d      	b.n	8004db2 <HAL_RCC_OscConfig+0x36e>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d10c      	bne.n	8004d78 <HAL_RCC_OscConfig+0x334>
 8004d5e:	4b6a      	ldr	r3, [pc, #424]	@ (8004f08 <HAL_RCC_OscConfig+0x4c4>)
 8004d60:	6a1b      	ldr	r3, [r3, #32]
 8004d62:	4a69      	ldr	r2, [pc, #420]	@ (8004f08 <HAL_RCC_OscConfig+0x4c4>)
 8004d64:	f023 0301 	bic.w	r3, r3, #1
 8004d68:	6213      	str	r3, [r2, #32]
 8004d6a:	4b67      	ldr	r3, [pc, #412]	@ (8004f08 <HAL_RCC_OscConfig+0x4c4>)
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
 8004d6e:	4a66      	ldr	r2, [pc, #408]	@ (8004f08 <HAL_RCC_OscConfig+0x4c4>)
 8004d70:	f023 0304 	bic.w	r3, r3, #4
 8004d74:	6213      	str	r3, [r2, #32]
 8004d76:	e01c      	b.n	8004db2 <HAL_RCC_OscConfig+0x36e>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	2b05      	cmp	r3, #5
 8004d7e:	d10c      	bne.n	8004d9a <HAL_RCC_OscConfig+0x356>
 8004d80:	4b61      	ldr	r3, [pc, #388]	@ (8004f08 <HAL_RCC_OscConfig+0x4c4>)
 8004d82:	6a1b      	ldr	r3, [r3, #32]
 8004d84:	4a60      	ldr	r2, [pc, #384]	@ (8004f08 <HAL_RCC_OscConfig+0x4c4>)
 8004d86:	f043 0304 	orr.w	r3, r3, #4
 8004d8a:	6213      	str	r3, [r2, #32]
 8004d8c:	4b5e      	ldr	r3, [pc, #376]	@ (8004f08 <HAL_RCC_OscConfig+0x4c4>)
 8004d8e:	6a1b      	ldr	r3, [r3, #32]
 8004d90:	4a5d      	ldr	r2, [pc, #372]	@ (8004f08 <HAL_RCC_OscConfig+0x4c4>)
 8004d92:	f043 0301 	orr.w	r3, r3, #1
 8004d96:	6213      	str	r3, [r2, #32]
 8004d98:	e00b      	b.n	8004db2 <HAL_RCC_OscConfig+0x36e>
 8004d9a:	4b5b      	ldr	r3, [pc, #364]	@ (8004f08 <HAL_RCC_OscConfig+0x4c4>)
 8004d9c:	6a1b      	ldr	r3, [r3, #32]
 8004d9e:	4a5a      	ldr	r2, [pc, #360]	@ (8004f08 <HAL_RCC_OscConfig+0x4c4>)
 8004da0:	f023 0301 	bic.w	r3, r3, #1
 8004da4:	6213      	str	r3, [r2, #32]
 8004da6:	4b58      	ldr	r3, [pc, #352]	@ (8004f08 <HAL_RCC_OscConfig+0x4c4>)
 8004da8:	6a1b      	ldr	r3, [r3, #32]
 8004daa:	4a57      	ldr	r2, [pc, #348]	@ (8004f08 <HAL_RCC_OscConfig+0x4c4>)
 8004dac:	f023 0304 	bic.w	r3, r3, #4
 8004db0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d015      	beq.n	8004de6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dba:	f7fd fe0d 	bl	80029d8 <HAL_GetTick>
 8004dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dc0:	e00a      	b.n	8004dd8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dc2:	f7fd fe09 	bl	80029d8 <HAL_GetTick>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d901      	bls.n	8004dd8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	e0b1      	b.n	8004f3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dd8:	4b4b      	ldr	r3, [pc, #300]	@ (8004f08 <HAL_RCC_OscConfig+0x4c4>)
 8004dda:	6a1b      	ldr	r3, [r3, #32]
 8004ddc:	f003 0302 	and.w	r3, r3, #2
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d0ee      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x37e>
 8004de4:	e014      	b.n	8004e10 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004de6:	f7fd fdf7 	bl	80029d8 <HAL_GetTick>
 8004dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dec:	e00a      	b.n	8004e04 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dee:	f7fd fdf3 	bl	80029d8 <HAL_GetTick>
 8004df2:	4602      	mov	r2, r0
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d901      	bls.n	8004e04 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004e00:	2303      	movs	r3, #3
 8004e02:	e09b      	b.n	8004f3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e04:	4b40      	ldr	r3, [pc, #256]	@ (8004f08 <HAL_RCC_OscConfig+0x4c4>)
 8004e06:	6a1b      	ldr	r3, [r3, #32]
 8004e08:	f003 0302 	and.w	r3, r3, #2
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d1ee      	bne.n	8004dee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004e10:	7dfb      	ldrb	r3, [r7, #23]
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d105      	bne.n	8004e22 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e16:	4b3c      	ldr	r3, [pc, #240]	@ (8004f08 <HAL_RCC_OscConfig+0x4c4>)
 8004e18:	69db      	ldr	r3, [r3, #28]
 8004e1a:	4a3b      	ldr	r2, [pc, #236]	@ (8004f08 <HAL_RCC_OscConfig+0x4c4>)
 8004e1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e20:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	69db      	ldr	r3, [r3, #28]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	f000 8087 	beq.w	8004f3a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e2c:	4b36      	ldr	r3, [pc, #216]	@ (8004f08 <HAL_RCC_OscConfig+0x4c4>)
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	f003 030c 	and.w	r3, r3, #12
 8004e34:	2b08      	cmp	r3, #8
 8004e36:	d061      	beq.n	8004efc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	69db      	ldr	r3, [r3, #28]
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d146      	bne.n	8004ece <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e40:	4b33      	ldr	r3, [pc, #204]	@ (8004f10 <HAL_RCC_OscConfig+0x4cc>)
 8004e42:	2200      	movs	r2, #0
 8004e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e46:	f7fd fdc7 	bl	80029d8 <HAL_GetTick>
 8004e4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e4c:	e008      	b.n	8004e60 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e4e:	f7fd fdc3 	bl	80029d8 <HAL_GetTick>
 8004e52:	4602      	mov	r2, r0
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	1ad3      	subs	r3, r2, r3
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	d901      	bls.n	8004e60 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	e06d      	b.n	8004f3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e60:	4b29      	ldr	r3, [pc, #164]	@ (8004f08 <HAL_RCC_OscConfig+0x4c4>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d1f0      	bne.n	8004e4e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a1b      	ldr	r3, [r3, #32]
 8004e70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e74:	d108      	bne.n	8004e88 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004e76:	4b24      	ldr	r3, [pc, #144]	@ (8004f08 <HAL_RCC_OscConfig+0x4c4>)
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	4921      	ldr	r1, [pc, #132]	@ (8004f08 <HAL_RCC_OscConfig+0x4c4>)
 8004e84:	4313      	orrs	r3, r2
 8004e86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e88:	4b1f      	ldr	r3, [pc, #124]	@ (8004f08 <HAL_RCC_OscConfig+0x4c4>)
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a19      	ldr	r1, [r3, #32]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e98:	430b      	orrs	r3, r1
 8004e9a:	491b      	ldr	r1, [pc, #108]	@ (8004f08 <HAL_RCC_OscConfig+0x4c4>)
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ea0:	4b1b      	ldr	r3, [pc, #108]	@ (8004f10 <HAL_RCC_OscConfig+0x4cc>)
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ea6:	f7fd fd97 	bl	80029d8 <HAL_GetTick>
 8004eaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004eac:	e008      	b.n	8004ec0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eae:	f7fd fd93 	bl	80029d8 <HAL_GetTick>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d901      	bls.n	8004ec0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e03d      	b.n	8004f3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ec0:	4b11      	ldr	r3, [pc, #68]	@ (8004f08 <HAL_RCC_OscConfig+0x4c4>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d0f0      	beq.n	8004eae <HAL_RCC_OscConfig+0x46a>
 8004ecc:	e035      	b.n	8004f3a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ece:	4b10      	ldr	r3, [pc, #64]	@ (8004f10 <HAL_RCC_OscConfig+0x4cc>)
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ed4:	f7fd fd80 	bl	80029d8 <HAL_GetTick>
 8004ed8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004eda:	e008      	b.n	8004eee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004edc:	f7fd fd7c 	bl	80029d8 <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d901      	bls.n	8004eee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e026      	b.n	8004f3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004eee:	4b06      	ldr	r3, [pc, #24]	@ (8004f08 <HAL_RCC_OscConfig+0x4c4>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1f0      	bne.n	8004edc <HAL_RCC_OscConfig+0x498>
 8004efa:	e01e      	b.n	8004f3a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	69db      	ldr	r3, [r3, #28]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d107      	bne.n	8004f14 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e019      	b.n	8004f3c <HAL_RCC_OscConfig+0x4f8>
 8004f08:	40021000 	.word	0x40021000
 8004f0c:	40007000 	.word	0x40007000
 8004f10:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004f14:	4b0b      	ldr	r3, [pc, #44]	@ (8004f44 <HAL_RCC_OscConfig+0x500>)
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a1b      	ldr	r3, [r3, #32]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d106      	bne.n	8004f36 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d001      	beq.n	8004f3a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e000      	b.n	8004f3c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004f3a:	2300      	movs	r3, #0
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3718      	adds	r7, #24
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	40021000 	.word	0x40021000

08004f48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d101      	bne.n	8004f5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e0d0      	b.n	80050fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f5c:	4b6a      	ldr	r3, [pc, #424]	@ (8005108 <HAL_RCC_ClockConfig+0x1c0>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0307 	and.w	r3, r3, #7
 8004f64:	683a      	ldr	r2, [r7, #0]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d910      	bls.n	8004f8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f6a:	4b67      	ldr	r3, [pc, #412]	@ (8005108 <HAL_RCC_ClockConfig+0x1c0>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f023 0207 	bic.w	r2, r3, #7
 8004f72:	4965      	ldr	r1, [pc, #404]	@ (8005108 <HAL_RCC_ClockConfig+0x1c0>)
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f7a:	4b63      	ldr	r3, [pc, #396]	@ (8005108 <HAL_RCC_ClockConfig+0x1c0>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0307 	and.w	r3, r3, #7
 8004f82:	683a      	ldr	r2, [r7, #0]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d001      	beq.n	8004f8c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e0b8      	b.n	80050fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0302 	and.w	r3, r3, #2
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d020      	beq.n	8004fda <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0304 	and.w	r3, r3, #4
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d005      	beq.n	8004fb0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fa4:	4b59      	ldr	r3, [pc, #356]	@ (800510c <HAL_RCC_ClockConfig+0x1c4>)
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	4a58      	ldr	r2, [pc, #352]	@ (800510c <HAL_RCC_ClockConfig+0x1c4>)
 8004faa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004fae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0308 	and.w	r3, r3, #8
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d005      	beq.n	8004fc8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004fbc:	4b53      	ldr	r3, [pc, #332]	@ (800510c <HAL_RCC_ClockConfig+0x1c4>)
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	4a52      	ldr	r2, [pc, #328]	@ (800510c <HAL_RCC_ClockConfig+0x1c4>)
 8004fc2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004fc6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fc8:	4b50      	ldr	r3, [pc, #320]	@ (800510c <HAL_RCC_ClockConfig+0x1c4>)
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	494d      	ldr	r1, [pc, #308]	@ (800510c <HAL_RCC_ClockConfig+0x1c4>)
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0301 	and.w	r3, r3, #1
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d040      	beq.n	8005068 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d107      	bne.n	8004ffe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fee:	4b47      	ldr	r3, [pc, #284]	@ (800510c <HAL_RCC_ClockConfig+0x1c4>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d115      	bne.n	8005026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e07f      	b.n	80050fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	2b02      	cmp	r3, #2
 8005004:	d107      	bne.n	8005016 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005006:	4b41      	ldr	r3, [pc, #260]	@ (800510c <HAL_RCC_ClockConfig+0x1c4>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d109      	bne.n	8005026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e073      	b.n	80050fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005016:	4b3d      	ldr	r3, [pc, #244]	@ (800510c <HAL_RCC_ClockConfig+0x1c4>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0302 	and.w	r3, r3, #2
 800501e:	2b00      	cmp	r3, #0
 8005020:	d101      	bne.n	8005026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e06b      	b.n	80050fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005026:	4b39      	ldr	r3, [pc, #228]	@ (800510c <HAL_RCC_ClockConfig+0x1c4>)
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	f023 0203 	bic.w	r2, r3, #3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	4936      	ldr	r1, [pc, #216]	@ (800510c <HAL_RCC_ClockConfig+0x1c4>)
 8005034:	4313      	orrs	r3, r2
 8005036:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005038:	f7fd fcce 	bl	80029d8 <HAL_GetTick>
 800503c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800503e:	e00a      	b.n	8005056 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005040:	f7fd fcca 	bl	80029d8 <HAL_GetTick>
 8005044:	4602      	mov	r2, r0
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800504e:	4293      	cmp	r3, r2
 8005050:	d901      	bls.n	8005056 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e053      	b.n	80050fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005056:	4b2d      	ldr	r3, [pc, #180]	@ (800510c <HAL_RCC_ClockConfig+0x1c4>)
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	f003 020c 	and.w	r2, r3, #12
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	429a      	cmp	r2, r3
 8005066:	d1eb      	bne.n	8005040 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005068:	4b27      	ldr	r3, [pc, #156]	@ (8005108 <HAL_RCC_ClockConfig+0x1c0>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0307 	and.w	r3, r3, #7
 8005070:	683a      	ldr	r2, [r7, #0]
 8005072:	429a      	cmp	r2, r3
 8005074:	d210      	bcs.n	8005098 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005076:	4b24      	ldr	r3, [pc, #144]	@ (8005108 <HAL_RCC_ClockConfig+0x1c0>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f023 0207 	bic.w	r2, r3, #7
 800507e:	4922      	ldr	r1, [pc, #136]	@ (8005108 <HAL_RCC_ClockConfig+0x1c0>)
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	4313      	orrs	r3, r2
 8005084:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005086:	4b20      	ldr	r3, [pc, #128]	@ (8005108 <HAL_RCC_ClockConfig+0x1c0>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0307 	and.w	r3, r3, #7
 800508e:	683a      	ldr	r2, [r7, #0]
 8005090:	429a      	cmp	r2, r3
 8005092:	d001      	beq.n	8005098 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e032      	b.n	80050fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0304 	and.w	r3, r3, #4
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d008      	beq.n	80050b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050a4:	4b19      	ldr	r3, [pc, #100]	@ (800510c <HAL_RCC_ClockConfig+0x1c4>)
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	4916      	ldr	r1, [pc, #88]	@ (800510c <HAL_RCC_ClockConfig+0x1c4>)
 80050b2:	4313      	orrs	r3, r2
 80050b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0308 	and.w	r3, r3, #8
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d009      	beq.n	80050d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80050c2:	4b12      	ldr	r3, [pc, #72]	@ (800510c <HAL_RCC_ClockConfig+0x1c4>)
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	00db      	lsls	r3, r3, #3
 80050d0:	490e      	ldr	r1, [pc, #56]	@ (800510c <HAL_RCC_ClockConfig+0x1c4>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80050d6:	f000 f821 	bl	800511c <HAL_RCC_GetSysClockFreq>
 80050da:	4602      	mov	r2, r0
 80050dc:	4b0b      	ldr	r3, [pc, #44]	@ (800510c <HAL_RCC_ClockConfig+0x1c4>)
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	091b      	lsrs	r3, r3, #4
 80050e2:	f003 030f 	and.w	r3, r3, #15
 80050e6:	490a      	ldr	r1, [pc, #40]	@ (8005110 <HAL_RCC_ClockConfig+0x1c8>)
 80050e8:	5ccb      	ldrb	r3, [r1, r3]
 80050ea:	fa22 f303 	lsr.w	r3, r2, r3
 80050ee:	4a09      	ldr	r2, [pc, #36]	@ (8005114 <HAL_RCC_ClockConfig+0x1cc>)
 80050f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80050f2:	4b09      	ldr	r3, [pc, #36]	@ (8005118 <HAL_RCC_ClockConfig+0x1d0>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4618      	mov	r0, r3
 80050f8:	f7fd fc2c 	bl	8002954 <HAL_InitTick>

  return HAL_OK;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3710      	adds	r7, #16
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	40022000 	.word	0x40022000
 800510c:	40021000 	.word	0x40021000
 8005110:	0800c1e0 	.word	0x0800c1e0
 8005114:	20000080 	.word	0x20000080
 8005118:	20000084 	.word	0x20000084

0800511c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800511c:	b480      	push	{r7}
 800511e:	b087      	sub	sp, #28
 8005120:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005122:	2300      	movs	r3, #0
 8005124:	60fb      	str	r3, [r7, #12]
 8005126:	2300      	movs	r3, #0
 8005128:	60bb      	str	r3, [r7, #8]
 800512a:	2300      	movs	r3, #0
 800512c:	617b      	str	r3, [r7, #20]
 800512e:	2300      	movs	r3, #0
 8005130:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005132:	2300      	movs	r3, #0
 8005134:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005136:	4b1e      	ldr	r3, [pc, #120]	@ (80051b0 <HAL_RCC_GetSysClockFreq+0x94>)
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f003 030c 	and.w	r3, r3, #12
 8005142:	2b04      	cmp	r3, #4
 8005144:	d002      	beq.n	800514c <HAL_RCC_GetSysClockFreq+0x30>
 8005146:	2b08      	cmp	r3, #8
 8005148:	d003      	beq.n	8005152 <HAL_RCC_GetSysClockFreq+0x36>
 800514a:	e027      	b.n	800519c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800514c:	4b19      	ldr	r3, [pc, #100]	@ (80051b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800514e:	613b      	str	r3, [r7, #16]
      break;
 8005150:	e027      	b.n	80051a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	0c9b      	lsrs	r3, r3, #18
 8005156:	f003 030f 	and.w	r3, r3, #15
 800515a:	4a17      	ldr	r2, [pc, #92]	@ (80051b8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800515c:	5cd3      	ldrb	r3, [r2, r3]
 800515e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005166:	2b00      	cmp	r3, #0
 8005168:	d010      	beq.n	800518c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800516a:	4b11      	ldr	r3, [pc, #68]	@ (80051b0 <HAL_RCC_GetSysClockFreq+0x94>)
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	0c5b      	lsrs	r3, r3, #17
 8005170:	f003 0301 	and.w	r3, r3, #1
 8005174:	4a11      	ldr	r2, [pc, #68]	@ (80051bc <HAL_RCC_GetSysClockFreq+0xa0>)
 8005176:	5cd3      	ldrb	r3, [r2, r3]
 8005178:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a0d      	ldr	r2, [pc, #52]	@ (80051b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800517e:	fb03 f202 	mul.w	r2, r3, r2
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	fbb2 f3f3 	udiv	r3, r2, r3
 8005188:	617b      	str	r3, [r7, #20]
 800518a:	e004      	b.n	8005196 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a0c      	ldr	r2, [pc, #48]	@ (80051c0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005190:	fb02 f303 	mul.w	r3, r2, r3
 8005194:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	613b      	str	r3, [r7, #16]
      break;
 800519a:	e002      	b.n	80051a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800519c:	4b05      	ldr	r3, [pc, #20]	@ (80051b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800519e:	613b      	str	r3, [r7, #16]
      break;
 80051a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051a2:	693b      	ldr	r3, [r7, #16]
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	371c      	adds	r7, #28
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bc80      	pop	{r7}
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	40021000 	.word	0x40021000
 80051b4:	007a1200 	.word	0x007a1200
 80051b8:	0800c1f8 	.word	0x0800c1f8
 80051bc:	0800c208 	.word	0x0800c208
 80051c0:	003d0900 	.word	0x003d0900

080051c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051c4:	b480      	push	{r7}
 80051c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051c8:	4b02      	ldr	r3, [pc, #8]	@ (80051d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80051ca:	681b      	ldr	r3, [r3, #0]
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bc80      	pop	{r7}
 80051d2:	4770      	bx	lr
 80051d4:	20000080 	.word	0x20000080

080051d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80051dc:	f7ff fff2 	bl	80051c4 <HAL_RCC_GetHCLKFreq>
 80051e0:	4602      	mov	r2, r0
 80051e2:	4b05      	ldr	r3, [pc, #20]	@ (80051f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	0a1b      	lsrs	r3, r3, #8
 80051e8:	f003 0307 	and.w	r3, r3, #7
 80051ec:	4903      	ldr	r1, [pc, #12]	@ (80051fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80051ee:	5ccb      	ldrb	r3, [r1, r3]
 80051f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	40021000 	.word	0x40021000
 80051fc:	0800c1f0 	.word	0x0800c1f0

08005200 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005204:	f7ff ffde 	bl	80051c4 <HAL_RCC_GetHCLKFreq>
 8005208:	4602      	mov	r2, r0
 800520a:	4b05      	ldr	r3, [pc, #20]	@ (8005220 <HAL_RCC_GetPCLK2Freq+0x20>)
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	0adb      	lsrs	r3, r3, #11
 8005210:	f003 0307 	and.w	r3, r3, #7
 8005214:	4903      	ldr	r1, [pc, #12]	@ (8005224 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005216:	5ccb      	ldrb	r3, [r1, r3]
 8005218:	fa22 f303 	lsr.w	r3, r2, r3
}
 800521c:	4618      	mov	r0, r3
 800521e:	bd80      	pop	{r7, pc}
 8005220:	40021000 	.word	0x40021000
 8005224:	0800c1f0 	.word	0x0800c1f0

08005228 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005228:	b480      	push	{r7}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005230:	4b0a      	ldr	r3, [pc, #40]	@ (800525c <RCC_Delay+0x34>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a0a      	ldr	r2, [pc, #40]	@ (8005260 <RCC_Delay+0x38>)
 8005236:	fba2 2303 	umull	r2, r3, r2, r3
 800523a:	0a5b      	lsrs	r3, r3, #9
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	fb02 f303 	mul.w	r3, r2, r3
 8005242:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005244:	bf00      	nop
  }
  while (Delay --);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	1e5a      	subs	r2, r3, #1
 800524a:	60fa      	str	r2, [r7, #12]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d1f9      	bne.n	8005244 <RCC_Delay+0x1c>
}
 8005250:	bf00      	nop
 8005252:	bf00      	nop
 8005254:	3714      	adds	r7, #20
 8005256:	46bd      	mov	sp, r7
 8005258:	bc80      	pop	{r7}
 800525a:	4770      	bx	lr
 800525c:	20000080 	.word	0x20000080
 8005260:	10624dd3 	.word	0x10624dd3

08005264 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b086      	sub	sp, #24
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800526c:	2300      	movs	r3, #0
 800526e:	613b      	str	r3, [r7, #16]
 8005270:	2300      	movs	r3, #0
 8005272:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0301 	and.w	r3, r3, #1
 800527c:	2b00      	cmp	r3, #0
 800527e:	d07d      	beq.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005280:	2300      	movs	r3, #0
 8005282:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005284:	4b4f      	ldr	r3, [pc, #316]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005286:	69db      	ldr	r3, [r3, #28]
 8005288:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d10d      	bne.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005290:	4b4c      	ldr	r3, [pc, #304]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005292:	69db      	ldr	r3, [r3, #28]
 8005294:	4a4b      	ldr	r2, [pc, #300]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005296:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800529a:	61d3      	str	r3, [r2, #28]
 800529c:	4b49      	ldr	r3, [pc, #292]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800529e:	69db      	ldr	r3, [r3, #28]
 80052a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052a4:	60bb      	str	r3, [r7, #8]
 80052a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052a8:	2301      	movs	r3, #1
 80052aa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052ac:	4b46      	ldr	r3, [pc, #280]	@ (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d118      	bne.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052b8:	4b43      	ldr	r3, [pc, #268]	@ (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a42      	ldr	r2, [pc, #264]	@ (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80052be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052c4:	f7fd fb88 	bl	80029d8 <HAL_GetTick>
 80052c8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052ca:	e008      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052cc:	f7fd fb84 	bl	80029d8 <HAL_GetTick>
 80052d0:	4602      	mov	r2, r0
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	2b64      	cmp	r3, #100	@ 0x64
 80052d8:	d901      	bls.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e06d      	b.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052de:	4b3a      	ldr	r3, [pc, #232]	@ (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d0f0      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80052ea:	4b36      	ldr	r3, [pc, #216]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052ec:	6a1b      	ldr	r3, [r3, #32]
 80052ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052f2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d02e      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005302:	68fa      	ldr	r2, [r7, #12]
 8005304:	429a      	cmp	r2, r3
 8005306:	d027      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005308:	4b2e      	ldr	r3, [pc, #184]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800530a:	6a1b      	ldr	r3, [r3, #32]
 800530c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005310:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005312:	4b2e      	ldr	r3, [pc, #184]	@ (80053cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005314:	2201      	movs	r2, #1
 8005316:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005318:	4b2c      	ldr	r3, [pc, #176]	@ (80053cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800531a:	2200      	movs	r2, #0
 800531c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800531e:	4a29      	ldr	r2, [pc, #164]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f003 0301 	and.w	r3, r3, #1
 800532a:	2b00      	cmp	r3, #0
 800532c:	d014      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800532e:	f7fd fb53 	bl	80029d8 <HAL_GetTick>
 8005332:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005334:	e00a      	b.n	800534c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005336:	f7fd fb4f 	bl	80029d8 <HAL_GetTick>
 800533a:	4602      	mov	r2, r0
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	1ad3      	subs	r3, r2, r3
 8005340:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005344:	4293      	cmp	r3, r2
 8005346:	d901      	bls.n	800534c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005348:	2303      	movs	r3, #3
 800534a:	e036      	b.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800534c:	4b1d      	ldr	r3, [pc, #116]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800534e:	6a1b      	ldr	r3, [r3, #32]
 8005350:	f003 0302 	and.w	r3, r3, #2
 8005354:	2b00      	cmp	r3, #0
 8005356:	d0ee      	beq.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005358:	4b1a      	ldr	r3, [pc, #104]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800535a:	6a1b      	ldr	r3, [r3, #32]
 800535c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	4917      	ldr	r1, [pc, #92]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005366:	4313      	orrs	r3, r2
 8005368:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800536a:	7dfb      	ldrb	r3, [r7, #23]
 800536c:	2b01      	cmp	r3, #1
 800536e:	d105      	bne.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005370:	4b14      	ldr	r3, [pc, #80]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005372:	69db      	ldr	r3, [r3, #28]
 8005374:	4a13      	ldr	r2, [pc, #76]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005376:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800537a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0302 	and.w	r3, r3, #2
 8005384:	2b00      	cmp	r3, #0
 8005386:	d008      	beq.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005388:	4b0e      	ldr	r3, [pc, #56]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	490b      	ldr	r1, [pc, #44]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005396:	4313      	orrs	r3, r2
 8005398:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0310 	and.w	r3, r3, #16
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d008      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80053a6:	4b07      	ldr	r3, [pc, #28]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	4904      	ldr	r1, [pc, #16]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053b4:	4313      	orrs	r3, r2
 80053b6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3718      	adds	r7, #24
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	40021000 	.word	0x40021000
 80053c8:	40007000 	.word	0x40007000
 80053cc:	42420440 	.word	0x42420440

080053d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b082      	sub	sp, #8
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d101      	bne.n	80053e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e076      	b.n	80054d0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d108      	bne.n	80053fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80053f2:	d009      	beq.n	8005408 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	61da      	str	r2, [r3, #28]
 80053fa:	e005      	b.n	8005408 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005414:	b2db      	uxtb	r3, r3
 8005416:	2b00      	cmp	r3, #0
 8005418:	d106      	bne.n	8005428 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f7fd f866 	bl	80024f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2202      	movs	r2, #2
 800542c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800543e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005450:	431a      	orrs	r2, r3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800545a:	431a      	orrs	r2, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	f003 0302 	and.w	r3, r3, #2
 8005464:	431a      	orrs	r2, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	695b      	ldr	r3, [r3, #20]
 800546a:	f003 0301 	and.w	r3, r3, #1
 800546e:	431a      	orrs	r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	699b      	ldr	r3, [r3, #24]
 8005474:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005478:	431a      	orrs	r2, r3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	69db      	ldr	r3, [r3, #28]
 800547e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005482:	431a      	orrs	r2, r3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a1b      	ldr	r3, [r3, #32]
 8005488:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800548c:	ea42 0103 	orr.w	r1, r2, r3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005494:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	430a      	orrs	r2, r1
 800549e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	0c1a      	lsrs	r2, r3, #16
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f002 0204 	and.w	r2, r2, #4
 80054ae:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	69da      	ldr	r2, [r3, #28]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80054be:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2201      	movs	r2, #1
 80054ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80054ce:	2300      	movs	r3, #0
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3708      	adds	r7, #8
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b088      	sub	sp, #32
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	603b      	str	r3, [r7, #0]
 80054e4:	4613      	mov	r3, r2
 80054e6:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054e8:	f7fd fa76 	bl	80029d8 <HAL_GetTick>
 80054ec:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80054ee:	88fb      	ldrh	r3, [r7, #6]
 80054f0:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d001      	beq.n	8005502 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80054fe:	2302      	movs	r3, #2
 8005500:	e12a      	b.n	8005758 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d002      	beq.n	800550e <HAL_SPI_Transmit+0x36>
 8005508:	88fb      	ldrh	r3, [r7, #6]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d101      	bne.n	8005512 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e122      	b.n	8005758 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005518:	2b01      	cmp	r3, #1
 800551a:	d101      	bne.n	8005520 <HAL_SPI_Transmit+0x48>
 800551c:	2302      	movs	r3, #2
 800551e:	e11b      	b.n	8005758 <HAL_SPI_Transmit+0x280>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2203      	movs	r2, #3
 800552c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2200      	movs	r2, #0
 8005534:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	68ba      	ldr	r2, [r7, #8]
 800553a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	88fa      	ldrh	r2, [r7, #6]
 8005540:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	88fa      	ldrh	r2, [r7, #6]
 8005546:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2200      	movs	r2, #0
 800554c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2200      	movs	r2, #0
 8005552:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2200      	movs	r2, #0
 8005558:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2200      	movs	r2, #0
 8005564:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800556e:	d10f      	bne.n	8005590 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800557e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800558e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800559a:	2b40      	cmp	r3, #64	@ 0x40
 800559c:	d007      	beq.n	80055ae <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80055ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055b6:	d152      	bne.n	800565e <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d002      	beq.n	80055c6 <HAL_SPI_Transmit+0xee>
 80055c0:	8b7b      	ldrh	r3, [r7, #26]
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d145      	bne.n	8005652 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ca:	881a      	ldrh	r2, [r3, #0]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055d6:	1c9a      	adds	r2, r3, #2
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	3b01      	subs	r3, #1
 80055e4:	b29a      	uxth	r2, r3
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80055ea:	e032      	b.n	8005652 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	f003 0302 	and.w	r3, r3, #2
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d112      	bne.n	8005620 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055fe:	881a      	ldrh	r2, [r3, #0]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800560a:	1c9a      	adds	r2, r3, #2
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005614:	b29b      	uxth	r3, r3
 8005616:	3b01      	subs	r3, #1
 8005618:	b29a      	uxth	r2, r3
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800561e:	e018      	b.n	8005652 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005620:	f7fd f9da 	bl	80029d8 <HAL_GetTick>
 8005624:	4602      	mov	r2, r0
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	683a      	ldr	r2, [r7, #0]
 800562c:	429a      	cmp	r2, r3
 800562e:	d803      	bhi.n	8005638 <HAL_SPI_Transmit+0x160>
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005636:	d102      	bne.n	800563e <HAL_SPI_Transmit+0x166>
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d109      	bne.n	8005652 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2201      	movs	r2, #1
 8005642:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2200      	movs	r2, #0
 800564a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800564e:	2303      	movs	r3, #3
 8005650:	e082      	b.n	8005758 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005656:	b29b      	uxth	r3, r3
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1c7      	bne.n	80055ec <HAL_SPI_Transmit+0x114>
 800565c:	e053      	b.n	8005706 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d002      	beq.n	800566c <HAL_SPI_Transmit+0x194>
 8005666:	8b7b      	ldrh	r3, [r7, #26]
 8005668:	2b01      	cmp	r3, #1
 800566a:	d147      	bne.n	80056fc <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	330c      	adds	r3, #12
 8005676:	7812      	ldrb	r2, [r2, #0]
 8005678:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800567e:	1c5a      	adds	r2, r3, #1
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005688:	b29b      	uxth	r3, r3
 800568a:	3b01      	subs	r3, #1
 800568c:	b29a      	uxth	r2, r3
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005692:	e033      	b.n	80056fc <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	f003 0302 	and.w	r3, r3, #2
 800569e:	2b02      	cmp	r3, #2
 80056a0:	d113      	bne.n	80056ca <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	330c      	adds	r3, #12
 80056ac:	7812      	ldrb	r2, [r2, #0]
 80056ae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056b4:	1c5a      	adds	r2, r3, #1
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80056be:	b29b      	uxth	r3, r3
 80056c0:	3b01      	subs	r3, #1
 80056c2:	b29a      	uxth	r2, r3
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80056c8:	e018      	b.n	80056fc <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056ca:	f7fd f985 	bl	80029d8 <HAL_GetTick>
 80056ce:	4602      	mov	r2, r0
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	683a      	ldr	r2, [r7, #0]
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d803      	bhi.n	80056e2 <HAL_SPI_Transmit+0x20a>
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e0:	d102      	bne.n	80056e8 <HAL_SPI_Transmit+0x210>
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d109      	bne.n	80056fc <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80056f8:	2303      	movs	r3, #3
 80056fa:	e02d      	b.n	8005758 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005700:	b29b      	uxth	r3, r3
 8005702:	2b00      	cmp	r3, #0
 8005704:	d1c6      	bne.n	8005694 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005706:	69fa      	ldr	r2, [r7, #28]
 8005708:	6839      	ldr	r1, [r7, #0]
 800570a:	68f8      	ldr	r0, [r7, #12]
 800570c:	f000 f8b0 	bl	8005870 <SPI_EndRxTxTransaction>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d002      	beq.n	800571c <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2220      	movs	r2, #32
 800571a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d10a      	bne.n	800573a <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005724:	2300      	movs	r3, #0
 8005726:	617b      	str	r3, [r7, #20]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	617b      	str	r3, [r7, #20]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	617b      	str	r3, [r7, #20]
 8005738:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2201      	movs	r2, #1
 800573e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800574e:	2b00      	cmp	r3, #0
 8005750:	d001      	beq.n	8005756 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e000      	b.n	8005758 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005756:	2300      	movs	r3, #0
  }
}
 8005758:	4618      	mov	r0, r3
 800575a:	3720      	adds	r7, #32
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b088      	sub	sp, #32
 8005764:	af00      	add	r7, sp, #0
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	603b      	str	r3, [r7, #0]
 800576c:	4613      	mov	r3, r2
 800576e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005770:	f7fd f932 	bl	80029d8 <HAL_GetTick>
 8005774:	4602      	mov	r2, r0
 8005776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005778:	1a9b      	subs	r3, r3, r2
 800577a:	683a      	ldr	r2, [r7, #0]
 800577c:	4413      	add	r3, r2
 800577e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005780:	f7fd f92a 	bl	80029d8 <HAL_GetTick>
 8005784:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005786:	4b39      	ldr	r3, [pc, #228]	@ (800586c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	015b      	lsls	r3, r3, #5
 800578c:	0d1b      	lsrs	r3, r3, #20
 800578e:	69fa      	ldr	r2, [r7, #28]
 8005790:	fb02 f303 	mul.w	r3, r2, r3
 8005794:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005796:	e054      	b.n	8005842 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800579e:	d050      	beq.n	8005842 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80057a0:	f7fd f91a 	bl	80029d8 <HAL_GetTick>
 80057a4:	4602      	mov	r2, r0
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	69fa      	ldr	r2, [r7, #28]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d902      	bls.n	80057b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d13d      	bne.n	8005832 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	685a      	ldr	r2, [r3, #4]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80057c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80057ce:	d111      	bne.n	80057f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057d8:	d004      	beq.n	80057e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057e2:	d107      	bne.n	80057f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057fc:	d10f      	bne.n	800581e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800580c:	601a      	str	r2, [r3, #0]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800581c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2201      	movs	r2, #1
 8005822:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2200      	movs	r2, #0
 800582a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e017      	b.n	8005862 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d101      	bne.n	800583c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005838:	2300      	movs	r3, #0
 800583a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	3b01      	subs	r3, #1
 8005840:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	689a      	ldr	r2, [r3, #8]
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	4013      	ands	r3, r2
 800584c:	68ba      	ldr	r2, [r7, #8]
 800584e:	429a      	cmp	r2, r3
 8005850:	bf0c      	ite	eq
 8005852:	2301      	moveq	r3, #1
 8005854:	2300      	movne	r3, #0
 8005856:	b2db      	uxtb	r3, r3
 8005858:	461a      	mov	r2, r3
 800585a:	79fb      	ldrb	r3, [r7, #7]
 800585c:	429a      	cmp	r2, r3
 800585e:	d19b      	bne.n	8005798 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	3720      	adds	r7, #32
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	20000080 	.word	0x20000080

08005870 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b086      	sub	sp, #24
 8005874:	af02      	add	r7, sp, #8
 8005876:	60f8      	str	r0, [r7, #12]
 8005878:	60b9      	str	r1, [r7, #8]
 800587a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	9300      	str	r3, [sp, #0]
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	2201      	movs	r2, #1
 8005884:	2102      	movs	r1, #2
 8005886:	68f8      	ldr	r0, [r7, #12]
 8005888:	f7ff ff6a 	bl	8005760 <SPI_WaitFlagStateUntilTimeout>
 800588c:	4603      	mov	r3, r0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d007      	beq.n	80058a2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005896:	f043 0220 	orr.w	r2, r3, #32
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	e013      	b.n	80058ca <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	9300      	str	r3, [sp, #0]
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	2200      	movs	r2, #0
 80058aa:	2180      	movs	r1, #128	@ 0x80
 80058ac:	68f8      	ldr	r0, [r7, #12]
 80058ae:	f7ff ff57 	bl	8005760 <SPI_WaitFlagStateUntilTimeout>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d007      	beq.n	80058c8 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058bc:	f043 0220 	orr.w	r2, r3, #32
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80058c4:	2303      	movs	r3, #3
 80058c6:	e000      	b.n	80058ca <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3710      	adds	r7, #16
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}

080058d2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058d2:	b580      	push	{r7, lr}
 80058d4:	b082      	sub	sp, #8
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d101      	bne.n	80058e4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	e042      	b.n	800596a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d106      	bne.n	80058fe <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f7fc ff9b 	bl	8002834 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2224      	movs	r2, #36	@ 0x24
 8005902:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68da      	ldr	r2, [r3, #12]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005914:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 fd00 	bl	800631c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	691a      	ldr	r2, [r3, #16]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800592a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	695a      	ldr	r2, [r3, #20]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800593a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68da      	ldr	r2, [r3, #12]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800594a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2220      	movs	r2, #32
 8005956:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2220      	movs	r2, #32
 800595e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005968:	2300      	movs	r3, #0
}
 800596a:	4618      	mov	r0, r3
 800596c:	3708      	adds	r7, #8
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}

08005972 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005972:	b480      	push	{r7}
 8005974:	b085      	sub	sp, #20
 8005976:	af00      	add	r7, sp, #0
 8005978:	60f8      	str	r0, [r7, #12]
 800597a:	60b9      	str	r1, [r7, #8]
 800597c:	4613      	mov	r3, r2
 800597e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005986:	b2db      	uxtb	r3, r3
 8005988:	2b20      	cmp	r3, #32
 800598a:	d121      	bne.n	80059d0 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d002      	beq.n	8005998 <HAL_UART_Transmit_IT+0x26>
 8005992:	88fb      	ldrh	r3, [r7, #6]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d101      	bne.n	800599c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	e01a      	b.n	80059d2 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	68ba      	ldr	r2, [r7, #8]
 80059a0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	88fa      	ldrh	r2, [r7, #6]
 80059a6:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	88fa      	ldrh	r2, [r7, #6]
 80059ac:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2200      	movs	r2, #0
 80059b2:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2221      	movs	r2, #33	@ 0x21
 80059b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68da      	ldr	r2, [r3, #12]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80059ca:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80059cc:	2300      	movs	r3, #0
 80059ce:	e000      	b.n	80059d2 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80059d0:	2302      	movs	r3, #2
  }
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3714      	adds	r7, #20
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bc80      	pop	{r7}
 80059da:	4770      	bx	lr

080059dc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	4613      	mov	r3, r2
 80059e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	2b20      	cmp	r3, #32
 80059f4:	d112      	bne.n	8005a1c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d002      	beq.n	8005a02 <HAL_UART_Receive_IT+0x26>
 80059fc:	88fb      	ldrh	r3, [r7, #6]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d101      	bne.n	8005a06 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e00b      	b.n	8005a1e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005a0c:	88fb      	ldrh	r3, [r7, #6]
 8005a0e:	461a      	mov	r2, r3
 8005a10:	68b9      	ldr	r1, [r7, #8]
 8005a12:	68f8      	ldr	r0, [r7, #12]
 8005a14:	f000 faae 	bl	8005f74 <UART_Start_Receive_IT>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	e000      	b.n	8005a1e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005a1c:	2302      	movs	r3, #2
  }
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3710      	adds	r7, #16
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
	...

08005a28 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b0ba      	sub	sp, #232	@ 0xe8
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	695b      	ldr	r3, [r3, #20]
 8005a4a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005a54:	2300      	movs	r3, #0
 8005a56:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a5e:	f003 030f 	and.w	r3, r3, #15
 8005a62:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005a66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d10f      	bne.n	8005a8e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a72:	f003 0320 	and.w	r3, r3, #32
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d009      	beq.n	8005a8e <HAL_UART_IRQHandler+0x66>
 8005a7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a7e:	f003 0320 	and.w	r3, r3, #32
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d003      	beq.n	8005a8e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 fb8a 	bl	80061a0 <UART_Receive_IT>
      return;
 8005a8c:	e25b      	b.n	8005f46 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005a8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	f000 80de 	beq.w	8005c54 <HAL_UART_IRQHandler+0x22c>
 8005a98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a9c:	f003 0301 	and.w	r3, r3, #1
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d106      	bne.n	8005ab2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005aa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005aa8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	f000 80d1 	beq.w	8005c54 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ab6:	f003 0301 	and.w	r3, r3, #1
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00b      	beq.n	8005ad6 <HAL_UART_IRQHandler+0xae>
 8005abe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ac2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d005      	beq.n	8005ad6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ace:	f043 0201 	orr.w	r2, r3, #1
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ada:	f003 0304 	and.w	r3, r3, #4
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d00b      	beq.n	8005afa <HAL_UART_IRQHandler+0xd2>
 8005ae2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ae6:	f003 0301 	and.w	r3, r3, #1
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d005      	beq.n	8005afa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005af2:	f043 0202 	orr.w	r2, r3, #2
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005afe:	f003 0302 	and.w	r3, r3, #2
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d00b      	beq.n	8005b1e <HAL_UART_IRQHandler+0xf6>
 8005b06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b0a:	f003 0301 	and.w	r3, r3, #1
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d005      	beq.n	8005b1e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b16:	f043 0204 	orr.w	r2, r3, #4
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b22:	f003 0308 	and.w	r3, r3, #8
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d011      	beq.n	8005b4e <HAL_UART_IRQHandler+0x126>
 8005b2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b2e:	f003 0320 	and.w	r3, r3, #32
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d105      	bne.n	8005b42 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005b36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b3a:	f003 0301 	and.w	r3, r3, #1
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d005      	beq.n	8005b4e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b46:	f043 0208 	orr.w	r2, r3, #8
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	f000 81f2 	beq.w	8005f3c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b5c:	f003 0320 	and.w	r3, r3, #32
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d008      	beq.n	8005b76 <HAL_UART_IRQHandler+0x14e>
 8005b64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b68:	f003 0320 	and.w	r3, r3, #32
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d002      	beq.n	8005b76 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f000 fb15 	bl	80061a0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	695b      	ldr	r3, [r3, #20]
 8005b7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	bf14      	ite	ne
 8005b84:	2301      	movne	r3, #1
 8005b86:	2300      	moveq	r3, #0
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b92:	f003 0308 	and.w	r3, r3, #8
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d103      	bne.n	8005ba2 <HAL_UART_IRQHandler+0x17a>
 8005b9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d04f      	beq.n	8005c42 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 fa1f 	bl	8005fe6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	695b      	ldr	r3, [r3, #20]
 8005bae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d041      	beq.n	8005c3a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	3314      	adds	r3, #20
 8005bbc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005bc4:	e853 3f00 	ldrex	r3, [r3]
 8005bc8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005bcc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005bd0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bd4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	3314      	adds	r3, #20
 8005bde:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005be2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005be6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005bee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005bf2:	e841 2300 	strex	r3, r2, [r1]
 8005bf6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005bfa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d1d9      	bne.n	8005bb6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d013      	beq.n	8005c32 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c0e:	4a7e      	ldr	r2, [pc, #504]	@ (8005e08 <HAL_UART_IRQHandler+0x3e0>)
 8005c10:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c16:	4618      	mov	r0, r3
 8005c18:	f7fd fc52 	bl	80034c0 <HAL_DMA_Abort_IT>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d016      	beq.n	8005c50 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005c2c:	4610      	mov	r0, r2
 8005c2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c30:	e00e      	b.n	8005c50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 f98a 	bl	8005f4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c38:	e00a      	b.n	8005c50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 f986 	bl	8005f4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c40:	e006      	b.n	8005c50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 f982 	bl	8005f4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005c4e:	e175      	b.n	8005f3c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c50:	bf00      	nop
    return;
 8005c52:	e173      	b.n	8005f3c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	f040 814f 	bne.w	8005efc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005c5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c62:	f003 0310 	and.w	r3, r3, #16
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	f000 8148 	beq.w	8005efc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005c6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c70:	f003 0310 	and.w	r3, r3, #16
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	f000 8141 	beq.w	8005efc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	60bb      	str	r3, [r7, #8]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	60bb      	str	r3, [r7, #8]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	60bb      	str	r3, [r7, #8]
 8005c8e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	695b      	ldr	r3, [r3, #20]
 8005c96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	f000 80b6 	beq.w	8005e0c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005cac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	f000 8145 	beq.w	8005f40 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005cba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	f080 813e 	bcs.w	8005f40 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005cca:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cd0:	699b      	ldr	r3, [r3, #24]
 8005cd2:	2b20      	cmp	r3, #32
 8005cd4:	f000 8088 	beq.w	8005de8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	330c      	adds	r3, #12
 8005cde:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005ce6:	e853 3f00 	ldrex	r3, [r3]
 8005cea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005cee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005cf2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005cf6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	330c      	adds	r3, #12
 8005d00:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005d04:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005d08:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005d10:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005d14:	e841 2300 	strex	r3, r2, [r1]
 8005d18:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005d1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d1d9      	bne.n	8005cd8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	3314      	adds	r3, #20
 8005d2a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d2c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d2e:	e853 3f00 	ldrex	r3, [r3]
 8005d32:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005d34:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005d36:	f023 0301 	bic.w	r3, r3, #1
 8005d3a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	3314      	adds	r3, #20
 8005d44:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005d48:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005d4c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d4e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005d50:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005d54:	e841 2300 	strex	r3, r2, [r1]
 8005d58:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005d5a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d1e1      	bne.n	8005d24 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	3314      	adds	r3, #20
 8005d66:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d68:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d6a:	e853 3f00 	ldrex	r3, [r3]
 8005d6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005d70:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005d72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d76:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	3314      	adds	r3, #20
 8005d80:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005d84:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005d86:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d88:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005d8a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005d8c:	e841 2300 	strex	r3, r2, [r1]
 8005d90:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005d92:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d1e3      	bne.n	8005d60 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2220      	movs	r2, #32
 8005d9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	330c      	adds	r3, #12
 8005dac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005db0:	e853 3f00 	ldrex	r3, [r3]
 8005db4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005db6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005db8:	f023 0310 	bic.w	r3, r3, #16
 8005dbc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	330c      	adds	r3, #12
 8005dc6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005dca:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005dcc:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005dd0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005dd2:	e841 2300 	strex	r3, r2, [r1]
 8005dd6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005dd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d1e3      	bne.n	8005da6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005de2:	4618      	mov	r0, r3
 8005de4:	f7fd fb31 	bl	800344a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2202      	movs	r2, #2
 8005dec:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	4619      	mov	r1, r3
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f000 f8ad 	bl	8005f5e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e04:	e09c      	b.n	8005f40 <HAL_UART_IRQHandler+0x518>
 8005e06:	bf00      	nop
 8005e08:	080060ab 	.word	0x080060ab
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	1ad3      	subs	r3, r2, r3
 8005e18:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	f000 808e 	beq.w	8005f44 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005e28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	f000 8089 	beq.w	8005f44 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	330c      	adds	r3, #12
 8005e38:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e3c:	e853 3f00 	ldrex	r3, [r3]
 8005e40:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005e42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e48:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	330c      	adds	r3, #12
 8005e52:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005e56:	647a      	str	r2, [r7, #68]	@ 0x44
 8005e58:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e5a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e5c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e5e:	e841 2300 	strex	r3, r2, [r1]
 8005e62:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005e64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d1e3      	bne.n	8005e32 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	3314      	adds	r3, #20
 8005e70:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e74:	e853 3f00 	ldrex	r3, [r3]
 8005e78:	623b      	str	r3, [r7, #32]
   return(result);
 8005e7a:	6a3b      	ldr	r3, [r7, #32]
 8005e7c:	f023 0301 	bic.w	r3, r3, #1
 8005e80:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	3314      	adds	r3, #20
 8005e8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005e8e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e96:	e841 2300 	strex	r3, r2, [r1]
 8005e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d1e3      	bne.n	8005e6a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2220      	movs	r2, #32
 8005ea6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	330c      	adds	r3, #12
 8005eb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	e853 3f00 	ldrex	r3, [r3]
 8005ebe:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f023 0310 	bic.w	r3, r3, #16
 8005ec6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	330c      	adds	r3, #12
 8005ed0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005ed4:	61fa      	str	r2, [r7, #28]
 8005ed6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed8:	69b9      	ldr	r1, [r7, #24]
 8005eda:	69fa      	ldr	r2, [r7, #28]
 8005edc:	e841 2300 	strex	r3, r2, [r1]
 8005ee0:	617b      	str	r3, [r7, #20]
   return(result);
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d1e3      	bne.n	8005eb0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2202      	movs	r2, #2
 8005eec:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005eee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f000 f832 	bl	8005f5e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005efa:	e023      	b.n	8005f44 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005efc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d009      	beq.n	8005f1c <HAL_UART_IRQHandler+0x4f4>
 8005f08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d003      	beq.n	8005f1c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f000 f8dc 	bl	80060d2 <UART_Transmit_IT>
    return;
 8005f1a:	e014      	b.n	8005f46 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005f1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d00e      	beq.n	8005f46 <HAL_UART_IRQHandler+0x51e>
 8005f28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d008      	beq.n	8005f46 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f000 f91b 	bl	8006170 <UART_EndTransmit_IT>
    return;
 8005f3a:	e004      	b.n	8005f46 <HAL_UART_IRQHandler+0x51e>
    return;
 8005f3c:	bf00      	nop
 8005f3e:	e002      	b.n	8005f46 <HAL_UART_IRQHandler+0x51e>
      return;
 8005f40:	bf00      	nop
 8005f42:	e000      	b.n	8005f46 <HAL_UART_IRQHandler+0x51e>
      return;
 8005f44:	bf00      	nop
  }
}
 8005f46:	37e8      	adds	r7, #232	@ 0xe8
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005f54:	bf00      	nop
 8005f56:	370c      	adds	r7, #12
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bc80      	pop	{r7}
 8005f5c:	4770      	bx	lr

08005f5e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f5e:	b480      	push	{r7}
 8005f60:	b083      	sub	sp, #12
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
 8005f66:	460b      	mov	r3, r1
 8005f68:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f6a:	bf00      	nop
 8005f6c:	370c      	adds	r7, #12
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bc80      	pop	{r7}
 8005f72:	4770      	bx	lr

08005f74 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b085      	sub	sp, #20
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	60b9      	str	r1, [r7, #8]
 8005f7e:	4613      	mov	r3, r2
 8005f80:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	68ba      	ldr	r2, [r7, #8]
 8005f86:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	88fa      	ldrh	r2, [r7, #6]
 8005f8c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	88fa      	ldrh	r2, [r7, #6]
 8005f92:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2200      	movs	r2, #0
 8005f98:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2222      	movs	r2, #34	@ 0x22
 8005f9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d007      	beq.n	8005fba <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68da      	ldr	r2, [r3, #12]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005fb8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	695a      	ldr	r2, [r3, #20]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f042 0201 	orr.w	r2, r2, #1
 8005fc8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68da      	ldr	r2, [r3, #12]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f042 0220 	orr.w	r2, r2, #32
 8005fd8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005fda:	2300      	movs	r3, #0
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3714      	adds	r7, #20
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bc80      	pop	{r7}
 8005fe4:	4770      	bx	lr

08005fe6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fe6:	b480      	push	{r7}
 8005fe8:	b095      	sub	sp, #84	@ 0x54
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	330c      	adds	r3, #12
 8005ff4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ff8:	e853 3f00 	ldrex	r3, [r3]
 8005ffc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006000:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006004:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	330c      	adds	r3, #12
 800600c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800600e:	643a      	str	r2, [r7, #64]	@ 0x40
 8006010:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006012:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006014:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006016:	e841 2300 	strex	r3, r2, [r1]
 800601a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800601c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800601e:	2b00      	cmp	r3, #0
 8006020:	d1e5      	bne.n	8005fee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	3314      	adds	r3, #20
 8006028:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800602a:	6a3b      	ldr	r3, [r7, #32]
 800602c:	e853 3f00 	ldrex	r3, [r3]
 8006030:	61fb      	str	r3, [r7, #28]
   return(result);
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	f023 0301 	bic.w	r3, r3, #1
 8006038:	64bb      	str	r3, [r7, #72]	@ 0x48
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	3314      	adds	r3, #20
 8006040:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006042:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006044:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006046:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006048:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800604a:	e841 2300 	strex	r3, r2, [r1]
 800604e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006052:	2b00      	cmp	r3, #0
 8006054:	d1e5      	bne.n	8006022 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800605a:	2b01      	cmp	r3, #1
 800605c:	d119      	bne.n	8006092 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	330c      	adds	r3, #12
 8006064:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	e853 3f00 	ldrex	r3, [r3]
 800606c:	60bb      	str	r3, [r7, #8]
   return(result);
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	f023 0310 	bic.w	r3, r3, #16
 8006074:	647b      	str	r3, [r7, #68]	@ 0x44
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	330c      	adds	r3, #12
 800607c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800607e:	61ba      	str	r2, [r7, #24]
 8006080:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006082:	6979      	ldr	r1, [r7, #20]
 8006084:	69ba      	ldr	r2, [r7, #24]
 8006086:	e841 2300 	strex	r3, r2, [r1]
 800608a:	613b      	str	r3, [r7, #16]
   return(result);
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d1e5      	bne.n	800605e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2220      	movs	r2, #32
 8006096:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2200      	movs	r2, #0
 800609e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80060a0:	bf00      	nop
 80060a2:	3754      	adds	r7, #84	@ 0x54
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bc80      	pop	{r7}
 80060a8:	4770      	bx	lr

080060aa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80060aa:	b580      	push	{r7, lr}
 80060ac:	b084      	sub	sp, #16
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2200      	movs	r2, #0
 80060bc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2200      	movs	r2, #0
 80060c2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80060c4:	68f8      	ldr	r0, [r7, #12]
 80060c6:	f7ff ff41 	bl	8005f4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060ca:	bf00      	nop
 80060cc:	3710      	adds	r7, #16
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}

080060d2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80060d2:	b480      	push	{r7}
 80060d4:	b085      	sub	sp, #20
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	2b21      	cmp	r3, #33	@ 0x21
 80060e4:	d13e      	bne.n	8006164 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060ee:	d114      	bne.n	800611a <UART_Transmit_IT+0x48>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	691b      	ldr	r3, [r3, #16]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d110      	bne.n	800611a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6a1b      	ldr	r3, [r3, #32]
 80060fc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	881b      	ldrh	r3, [r3, #0]
 8006102:	461a      	mov	r2, r3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800610c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6a1b      	ldr	r3, [r3, #32]
 8006112:	1c9a      	adds	r2, r3, #2
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	621a      	str	r2, [r3, #32]
 8006118:	e008      	b.n	800612c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a1b      	ldr	r3, [r3, #32]
 800611e:	1c59      	adds	r1, r3, #1
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	6211      	str	r1, [r2, #32]
 8006124:	781a      	ldrb	r2, [r3, #0]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006130:	b29b      	uxth	r3, r3
 8006132:	3b01      	subs	r3, #1
 8006134:	b29b      	uxth	r3, r3
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	4619      	mov	r1, r3
 800613a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800613c:	2b00      	cmp	r3, #0
 800613e:	d10f      	bne.n	8006160 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68da      	ldr	r2, [r3, #12]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800614e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68da      	ldr	r2, [r3, #12]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800615e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006160:	2300      	movs	r3, #0
 8006162:	e000      	b.n	8006166 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006164:	2302      	movs	r3, #2
  }
}
 8006166:	4618      	mov	r0, r3
 8006168:	3714      	adds	r7, #20
 800616a:	46bd      	mov	sp, r7
 800616c:	bc80      	pop	{r7}
 800616e:	4770      	bx	lr

08006170 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b082      	sub	sp, #8
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68da      	ldr	r2, [r3, #12]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006186:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2220      	movs	r2, #32
 800618c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f7fb ff31 	bl	8001ff8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006196:	2300      	movs	r3, #0
}
 8006198:	4618      	mov	r0, r3
 800619a:	3708      	adds	r7, #8
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b08c      	sub	sp, #48	@ 0x30
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	2b22      	cmp	r3, #34	@ 0x22
 80061b2:	f040 80ae 	bne.w	8006312 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061be:	d117      	bne.n	80061f0 <UART_Receive_IT+0x50>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	691b      	ldr	r3, [r3, #16]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d113      	bne.n	80061f0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80061c8:	2300      	movs	r3, #0
 80061ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061d0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	b29b      	uxth	r3, r3
 80061da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061de:	b29a      	uxth	r2, r3
 80061e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061e2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061e8:	1c9a      	adds	r2, r3, #2
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	629a      	str	r2, [r3, #40]	@ 0x28
 80061ee:	e026      	b.n	800623e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80061f6:	2300      	movs	r3, #0
 80061f8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006202:	d007      	beq.n	8006214 <UART_Receive_IT+0x74>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d10a      	bne.n	8006222 <UART_Receive_IT+0x82>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d106      	bne.n	8006222 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	b2da      	uxtb	r2, r3
 800621c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800621e:	701a      	strb	r2, [r3, #0]
 8006220:	e008      	b.n	8006234 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	b2db      	uxtb	r3, r3
 800622a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800622e:	b2da      	uxtb	r2, r3
 8006230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006232:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006238:	1c5a      	adds	r2, r3, #1
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006242:	b29b      	uxth	r3, r3
 8006244:	3b01      	subs	r3, #1
 8006246:	b29b      	uxth	r3, r3
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	4619      	mov	r1, r3
 800624c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800624e:	2b00      	cmp	r3, #0
 8006250:	d15d      	bne.n	800630e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	68da      	ldr	r2, [r3, #12]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f022 0220 	bic.w	r2, r2, #32
 8006260:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68da      	ldr	r2, [r3, #12]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006270:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	695a      	ldr	r2, [r3, #20]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f022 0201 	bic.w	r2, r2, #1
 8006280:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2220      	movs	r2, #32
 8006286:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006294:	2b01      	cmp	r3, #1
 8006296:	d135      	bne.n	8006304 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	330c      	adds	r3, #12
 80062a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	e853 3f00 	ldrex	r3, [r3]
 80062ac:	613b      	str	r3, [r7, #16]
   return(result);
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	f023 0310 	bic.w	r3, r3, #16
 80062b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	330c      	adds	r3, #12
 80062bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062be:	623a      	str	r2, [r7, #32]
 80062c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c2:	69f9      	ldr	r1, [r7, #28]
 80062c4:	6a3a      	ldr	r2, [r7, #32]
 80062c6:	e841 2300 	strex	r3, r2, [r1]
 80062ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80062cc:	69bb      	ldr	r3, [r7, #24]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d1e5      	bne.n	800629e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f003 0310 	and.w	r3, r3, #16
 80062dc:	2b10      	cmp	r3, #16
 80062de:	d10a      	bne.n	80062f6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80062e0:	2300      	movs	r3, #0
 80062e2:	60fb      	str	r3, [r7, #12]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	60fb      	str	r3, [r7, #12]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	60fb      	str	r3, [r7, #12]
 80062f4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80062fa:	4619      	mov	r1, r3
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f7ff fe2e 	bl	8005f5e <HAL_UARTEx_RxEventCallback>
 8006302:	e002      	b.n	800630a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f7fb fe0f 	bl	8001f28 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800630a:	2300      	movs	r3, #0
 800630c:	e002      	b.n	8006314 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800630e:	2300      	movs	r3, #0
 8006310:	e000      	b.n	8006314 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006312:	2302      	movs	r3, #2
  }
}
 8006314:	4618      	mov	r0, r3
 8006316:	3730      	adds	r7, #48	@ 0x30
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	691b      	ldr	r3, [r3, #16]
 800632a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	68da      	ldr	r2, [r3, #12]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	430a      	orrs	r2, r1
 8006338:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	689a      	ldr	r2, [r3, #8]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	431a      	orrs	r2, r3
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	695b      	ldr	r3, [r3, #20]
 8006348:	4313      	orrs	r3, r2
 800634a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8006356:	f023 030c 	bic.w	r3, r3, #12
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	6812      	ldr	r2, [r2, #0]
 800635e:	68b9      	ldr	r1, [r7, #8]
 8006360:	430b      	orrs	r3, r1
 8006362:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	695b      	ldr	r3, [r3, #20]
 800636a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	699a      	ldr	r2, [r3, #24]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	430a      	orrs	r2, r1
 8006378:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a2c      	ldr	r2, [pc, #176]	@ (8006430 <UART_SetConfig+0x114>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d103      	bne.n	800638c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006384:	f7fe ff3c 	bl	8005200 <HAL_RCC_GetPCLK2Freq>
 8006388:	60f8      	str	r0, [r7, #12]
 800638a:	e002      	b.n	8006392 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800638c:	f7fe ff24 	bl	80051d8 <HAL_RCC_GetPCLK1Freq>
 8006390:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006392:	68fa      	ldr	r2, [r7, #12]
 8006394:	4613      	mov	r3, r2
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	4413      	add	r3, r2
 800639a:	009a      	lsls	r2, r3, #2
 800639c:	441a      	add	r2, r3
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80063a8:	4a22      	ldr	r2, [pc, #136]	@ (8006434 <UART_SetConfig+0x118>)
 80063aa:	fba2 2303 	umull	r2, r3, r2, r3
 80063ae:	095b      	lsrs	r3, r3, #5
 80063b0:	0119      	lsls	r1, r3, #4
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	4613      	mov	r3, r2
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	4413      	add	r3, r2
 80063ba:	009a      	lsls	r2, r3, #2
 80063bc:	441a      	add	r2, r3
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80063c8:	4b1a      	ldr	r3, [pc, #104]	@ (8006434 <UART_SetConfig+0x118>)
 80063ca:	fba3 0302 	umull	r0, r3, r3, r2
 80063ce:	095b      	lsrs	r3, r3, #5
 80063d0:	2064      	movs	r0, #100	@ 0x64
 80063d2:	fb00 f303 	mul.w	r3, r0, r3
 80063d6:	1ad3      	subs	r3, r2, r3
 80063d8:	011b      	lsls	r3, r3, #4
 80063da:	3332      	adds	r3, #50	@ 0x32
 80063dc:	4a15      	ldr	r2, [pc, #84]	@ (8006434 <UART_SetConfig+0x118>)
 80063de:	fba2 2303 	umull	r2, r3, r2, r3
 80063e2:	095b      	lsrs	r3, r3, #5
 80063e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80063e8:	4419      	add	r1, r3
 80063ea:	68fa      	ldr	r2, [r7, #12]
 80063ec:	4613      	mov	r3, r2
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	4413      	add	r3, r2
 80063f2:	009a      	lsls	r2, r3, #2
 80063f4:	441a      	add	r2, r3
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8006400:	4b0c      	ldr	r3, [pc, #48]	@ (8006434 <UART_SetConfig+0x118>)
 8006402:	fba3 0302 	umull	r0, r3, r3, r2
 8006406:	095b      	lsrs	r3, r3, #5
 8006408:	2064      	movs	r0, #100	@ 0x64
 800640a:	fb00 f303 	mul.w	r3, r0, r3
 800640e:	1ad3      	subs	r3, r2, r3
 8006410:	011b      	lsls	r3, r3, #4
 8006412:	3332      	adds	r3, #50	@ 0x32
 8006414:	4a07      	ldr	r2, [pc, #28]	@ (8006434 <UART_SetConfig+0x118>)
 8006416:	fba2 2303 	umull	r2, r3, r2, r3
 800641a:	095b      	lsrs	r3, r3, #5
 800641c:	f003 020f 	and.w	r2, r3, #15
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	440a      	add	r2, r1
 8006426:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006428:	bf00      	nop
 800642a:	3710      	adds	r7, #16
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}
 8006430:	40013800 	.word	0x40013800
 8006434:	51eb851f 	.word	0x51eb851f

08006438 <DEV_SPI_WriteByte>:
#include "DEV_Config.h"
#include "stm32f1xx_hal_spi.h"

extern SPI_HandleTypeDef hspi1;
void DEV_SPI_WriteByte(UBYTE value)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b082      	sub	sp, #8
 800643c:	af00      	add	r7, sp, #0
 800643e:	4603      	mov	r3, r0
 8006440:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&hspi1, &value, 1, 1000);
 8006442:	1df9      	adds	r1, r7, #7
 8006444:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006448:	2201      	movs	r2, #1
 800644a:	4803      	ldr	r0, [pc, #12]	@ (8006458 <DEV_SPI_WriteByte+0x20>)
 800644c:	f7ff f844 	bl	80054d8 <HAL_SPI_Transmit>
}
 8006450:	bf00      	nop
 8006452:	3708      	adds	r7, #8
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}
 8006458:	200004b0 	.word	0x200004b0

0800645c <EPD_2IN9_V2_Reset>:
/******************************************************************************
function :	Software reset
parameter:
******************************************************************************/
static void EPD_2IN9_V2_Reset(void)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8006460:	2201      	movs	r2, #1
 8006462:	2102      	movs	r1, #2
 8006464:	480b      	ldr	r0, [pc, #44]	@ (8006494 <EPD_2IN9_V2_Reset+0x38>)
 8006466:	f7fd fa3e 	bl	80038e6 <HAL_GPIO_WritePin>
    DEV_Delay_ms(10);
 800646a:	200a      	movs	r0, #10
 800646c:	f7fc fabe 	bl	80029ec <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 0);
 8006470:	2200      	movs	r2, #0
 8006472:	2102      	movs	r1, #2
 8006474:	4807      	ldr	r0, [pc, #28]	@ (8006494 <EPD_2IN9_V2_Reset+0x38>)
 8006476:	f7fd fa36 	bl	80038e6 <HAL_GPIO_WritePin>
    DEV_Delay_ms(2);
 800647a:	2002      	movs	r0, #2
 800647c:	f7fc fab6 	bl	80029ec <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8006480:	2201      	movs	r2, #1
 8006482:	2102      	movs	r1, #2
 8006484:	4803      	ldr	r0, [pc, #12]	@ (8006494 <EPD_2IN9_V2_Reset+0x38>)
 8006486:	f7fd fa2e 	bl	80038e6 <HAL_GPIO_WritePin>
    DEV_Delay_ms(10);
 800648a:	200a      	movs	r0, #10
 800648c:	f7fc faae 	bl	80029ec <HAL_Delay>
}
 8006490:	bf00      	nop
 8006492:	bd80      	pop	{r7, pc}
 8006494:	40010800 	.word	0x40010800

08006498 <EPD_2IN9_V2_SendCommand>:
function :	send command
parameter:
     Reg : Command register
******************************************************************************/
static void EPD_2IN9_V2_SendCommand(UBYTE Reg)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b082      	sub	sp, #8
 800649c:	af00      	add	r7, sp, #0
 800649e:	4603      	mov	r3, r0
 80064a0:	71fb      	strb	r3, [r7, #7]
    DEV_Digital_Write(EPD_DC_PIN, 0);
 80064a2:	2200      	movs	r2, #0
 80064a4:	2104      	movs	r1, #4
 80064a6:	480a      	ldr	r0, [pc, #40]	@ (80064d0 <EPD_2IN9_V2_SendCommand+0x38>)
 80064a8:	f7fd fa1d 	bl	80038e6 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 80064ac:	2200      	movs	r2, #0
 80064ae:	2108      	movs	r1, #8
 80064b0:	4807      	ldr	r0, [pc, #28]	@ (80064d0 <EPD_2IN9_V2_SendCommand+0x38>)
 80064b2:	f7fd fa18 	bl	80038e6 <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Reg);
 80064b6:	79fb      	ldrb	r3, [r7, #7]
 80064b8:	4618      	mov	r0, r3
 80064ba:	f7ff ffbd 	bl	8006438 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 80064be:	2201      	movs	r2, #1
 80064c0:	2108      	movs	r1, #8
 80064c2:	4803      	ldr	r0, [pc, #12]	@ (80064d0 <EPD_2IN9_V2_SendCommand+0x38>)
 80064c4:	f7fd fa0f 	bl	80038e6 <HAL_GPIO_WritePin>
}
 80064c8:	bf00      	nop
 80064ca:	3708      	adds	r7, #8
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}
 80064d0:	40010800 	.word	0x40010800

080064d4 <EPD_2IN9_V2_SendData>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void EPD_2IN9_V2_SendData(UBYTE Data)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b082      	sub	sp, #8
 80064d8:	af00      	add	r7, sp, #0
 80064da:	4603      	mov	r3, r0
 80064dc:	71fb      	strb	r3, [r7, #7]
    DEV_Digital_Write(EPD_DC_PIN, 1);
 80064de:	2201      	movs	r2, #1
 80064e0:	2104      	movs	r1, #4
 80064e2:	480a      	ldr	r0, [pc, #40]	@ (800650c <EPD_2IN9_V2_SendData+0x38>)
 80064e4:	f7fd f9ff 	bl	80038e6 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 80064e8:	2200      	movs	r2, #0
 80064ea:	2108      	movs	r1, #8
 80064ec:	4807      	ldr	r0, [pc, #28]	@ (800650c <EPD_2IN9_V2_SendData+0x38>)
 80064ee:	f7fd f9fa 	bl	80038e6 <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Data);
 80064f2:	79fb      	ldrb	r3, [r7, #7]
 80064f4:	4618      	mov	r0, r3
 80064f6:	f7ff ff9f 	bl	8006438 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 80064fa:	2201      	movs	r2, #1
 80064fc:	2108      	movs	r1, #8
 80064fe:	4803      	ldr	r0, [pc, #12]	@ (800650c <EPD_2IN9_V2_SendData+0x38>)
 8006500:	f7fd f9f1 	bl	80038e6 <HAL_GPIO_WritePin>
}
 8006504:	bf00      	nop
 8006506:	3708      	adds	r7, #8
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}
 800650c:	40010800 	.word	0x40010800

08006510 <EPD_2IN9_V2_ReadBusy>:
/******************************************************************************
function :	Wait until the busy_pin goes LOW
parameter:
******************************************************************************/
void EPD_2IN9_V2_ReadBusy(void)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	af00      	add	r7, sp, #0
    Debug("e-Paper busy\r\n");
 8006514:	480b      	ldr	r0, [pc, #44]	@ (8006544 <EPD_2IN9_V2_ReadBusy+0x34>)
 8006516:	f004 fe57 	bl	800b1c8 <puts>
	while(1)
	{	 //=1 BUSY
		if(DEV_Digital_Read(EPD_BUSY_PIN)==0) 
 800651a:	2101      	movs	r1, #1
 800651c:	480a      	ldr	r0, [pc, #40]	@ (8006548 <EPD_2IN9_V2_ReadBusy+0x38>)
 800651e:	f7fd f9cb 	bl	80038b8 <HAL_GPIO_ReadPin>
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d003      	beq.n	8006530 <EPD_2IN9_V2_ReadBusy+0x20>
			break;
		DEV_Delay_ms(50);
 8006528:	2032      	movs	r0, #50	@ 0x32
 800652a:	f7fc fa5f 	bl	80029ec <HAL_Delay>
		if(DEV_Digital_Read(EPD_BUSY_PIN)==0) 
 800652e:	e7f4      	b.n	800651a <EPD_2IN9_V2_ReadBusy+0xa>
			break;
 8006530:	bf00      	nop
	}
	DEV_Delay_ms(50);
 8006532:	2032      	movs	r0, #50	@ 0x32
 8006534:	f7fc fa5a 	bl	80029ec <HAL_Delay>
    Debug("e-Paper busy release\r\n");
 8006538:	4804      	ldr	r0, [pc, #16]	@ (800654c <EPD_2IN9_V2_ReadBusy+0x3c>)
 800653a:	f004 fe45 	bl	800b1c8 <puts>
}
 800653e:	bf00      	nop
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop
 8006544:	0800bd6c 	.word	0x0800bd6c
 8006548:	40010800 	.word	0x40010800
 800654c:	0800bd84 	.word	0x0800bd84

08006550 <EPD_2IN9_V2_LUT>:

static void EPD_2IN9_V2_LUT(UBYTE *lut)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b084      	sub	sp, #16
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
	UBYTE count;
	EPD_2IN9_V2_SendCommand(0x32);
 8006558:	2032      	movs	r0, #50	@ 0x32
 800655a:	f7ff ff9d 	bl	8006498 <EPD_2IN9_V2_SendCommand>
	for(count=0; count<153; count++) 
 800655e:	2300      	movs	r3, #0
 8006560:	73fb      	strb	r3, [r7, #15]
 8006562:	e009      	b.n	8006578 <EPD_2IN9_V2_LUT+0x28>
		EPD_2IN9_V2_SendData(lut[count]); 
 8006564:	7bfb      	ldrb	r3, [r7, #15]
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	4413      	add	r3, r2
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	4618      	mov	r0, r3
 800656e:	f7ff ffb1 	bl	80064d4 <EPD_2IN9_V2_SendData>
	for(count=0; count<153; count++) 
 8006572:	7bfb      	ldrb	r3, [r7, #15]
 8006574:	3301      	adds	r3, #1
 8006576:	73fb      	strb	r3, [r7, #15]
 8006578:	7bfb      	ldrb	r3, [r7, #15]
 800657a:	2b98      	cmp	r3, #152	@ 0x98
 800657c:	d9f2      	bls.n	8006564 <EPD_2IN9_V2_LUT+0x14>
	EPD_2IN9_V2_ReadBusy();
 800657e:	f7ff ffc7 	bl	8006510 <EPD_2IN9_V2_ReadBusy>
}
 8006582:	bf00      	nop
 8006584:	3710      	adds	r7, #16
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}

0800658a <EPD_2IN9_V2_LUT_by_host>:

static void EPD_2IN9_V2_LUT_by_host(UBYTE *lut)
{
 800658a:	b580      	push	{r7, lr}
 800658c:	b082      	sub	sp, #8
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
	EPD_2IN9_V2_LUT((UBYTE *)lut);			//lut
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f7ff ffdc 	bl	8006550 <EPD_2IN9_V2_LUT>
	EPD_2IN9_V2_SendCommand(0x3f);
 8006598:	203f      	movs	r0, #63	@ 0x3f
 800659a:	f7ff ff7d 	bl	8006498 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(*(lut+153));
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	3399      	adds	r3, #153	@ 0x99
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	4618      	mov	r0, r3
 80065a6:	f7ff ff95 	bl	80064d4 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendCommand(0x03);	// gate voltage
 80065aa:	2003      	movs	r0, #3
 80065ac:	f7ff ff74 	bl	8006498 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(*(lut+154));
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	339a      	adds	r3, #154	@ 0x9a
 80065b4:	781b      	ldrb	r3, [r3, #0]
 80065b6:	4618      	mov	r0, r3
 80065b8:	f7ff ff8c 	bl	80064d4 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendCommand(0x04);	// source voltage
 80065bc:	2004      	movs	r0, #4
 80065be:	f7ff ff6b 	bl	8006498 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(*(lut+155));	// VSH
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	339b      	adds	r3, #155	@ 0x9b
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	4618      	mov	r0, r3
 80065ca:	f7ff ff83 	bl	80064d4 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(*(lut+156));	// VSH2
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	339c      	adds	r3, #156	@ 0x9c
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	4618      	mov	r0, r3
 80065d6:	f7ff ff7d 	bl	80064d4 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(*(lut+157));	// VSL
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	339d      	adds	r3, #157	@ 0x9d
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	4618      	mov	r0, r3
 80065e2:	f7ff ff77 	bl	80064d4 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendCommand(0x2c);		// VCOM
 80065e6:	202c      	movs	r0, #44	@ 0x2c
 80065e8:	f7ff ff56 	bl	8006498 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(*(lut+158));
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	339e      	adds	r3, #158	@ 0x9e
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	4618      	mov	r0, r3
 80065f4:	f7ff ff6e 	bl	80064d4 <EPD_2IN9_V2_SendData>
	
}
 80065f8:	bf00      	nop
 80065fa:	3708      	adds	r7, #8
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}

08006600 <EPD_2IN9_V2_TurnOnDisplay>:
/******************************************************************************
function :	Turn On Display
parameter:
******************************************************************************/
static void EPD_2IN9_V2_TurnOnDisplay(void)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	af00      	add	r7, sp, #0
	EPD_2IN9_V2_SendCommand(0x22); //Display Update Control
 8006604:	2022      	movs	r0, #34	@ 0x22
 8006606:	f7ff ff47 	bl	8006498 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(0xc7);
 800660a:	20c7      	movs	r0, #199	@ 0xc7
 800660c:	f7ff ff62 	bl	80064d4 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendCommand(0x20); //Activate Display Update Sequence
 8006610:	2020      	movs	r0, #32
 8006612:	f7ff ff41 	bl	8006498 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_ReadBusy();
 8006616:	f7ff ff7b 	bl	8006510 <EPD_2IN9_V2_ReadBusy>
}
 800661a:	bf00      	nop
 800661c:	bd80      	pop	{r7, pc}

0800661e <EPD_2IN9_V2_TurnOnDisplay_Partial>:

static void EPD_2IN9_V2_TurnOnDisplay_Partial(void)
{
 800661e:	b580      	push	{r7, lr}
 8006620:	af00      	add	r7, sp, #0
	EPD_2IN9_V2_SendCommand(0x22); //Display Update Control
 8006622:	2022      	movs	r0, #34	@ 0x22
 8006624:	f7ff ff38 	bl	8006498 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(0x0F);   
 8006628:	200f      	movs	r0, #15
 800662a:	f7ff ff53 	bl	80064d4 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendCommand(0x20); //Activate Display Update Sequence
 800662e:	2020      	movs	r0, #32
 8006630:	f7ff ff32 	bl	8006498 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_ReadBusy();
 8006634:	f7ff ff6c 	bl	8006510 <EPD_2IN9_V2_ReadBusy>
}
 8006638:	bf00      	nop
 800663a:	bd80      	pop	{r7, pc}

0800663c <EPD_2IN9_V2_SetWindows>:
/******************************************************************************
function :	Setting the display window
parameter:
******************************************************************************/
static void EPD_2IN9_V2_SetWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend)
{
 800663c:	b590      	push	{r4, r7, lr}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
 8006642:	4604      	mov	r4, r0
 8006644:	4608      	mov	r0, r1
 8006646:	4611      	mov	r1, r2
 8006648:	461a      	mov	r2, r3
 800664a:	4623      	mov	r3, r4
 800664c:	80fb      	strh	r3, [r7, #6]
 800664e:	4603      	mov	r3, r0
 8006650:	80bb      	strh	r3, [r7, #4]
 8006652:	460b      	mov	r3, r1
 8006654:	807b      	strh	r3, [r7, #2]
 8006656:	4613      	mov	r3, r2
 8006658:	803b      	strh	r3, [r7, #0]
    EPD_2IN9_V2_SendCommand(0x44); // SET_RAM_X_ADDRESS_START_END_POSITION
 800665a:	2044      	movs	r0, #68	@ 0x44
 800665c:	f7ff ff1c 	bl	8006498 <EPD_2IN9_V2_SendCommand>
    EPD_2IN9_V2_SendData((Xstart>>3) & 0xFF);
 8006660:	88fb      	ldrh	r3, [r7, #6]
 8006662:	08db      	lsrs	r3, r3, #3
 8006664:	b29b      	uxth	r3, r3
 8006666:	b2db      	uxtb	r3, r3
 8006668:	4618      	mov	r0, r3
 800666a:	f7ff ff33 	bl	80064d4 <EPD_2IN9_V2_SendData>
    EPD_2IN9_V2_SendData((Xend>>3) & 0xFF);
 800666e:	887b      	ldrh	r3, [r7, #2]
 8006670:	08db      	lsrs	r3, r3, #3
 8006672:	b29b      	uxth	r3, r3
 8006674:	b2db      	uxtb	r3, r3
 8006676:	4618      	mov	r0, r3
 8006678:	f7ff ff2c 	bl	80064d4 <EPD_2IN9_V2_SendData>
	
    EPD_2IN9_V2_SendCommand(0x45); // SET_RAM_Y_ADDRESS_START_END_POSITION
 800667c:	2045      	movs	r0, #69	@ 0x45
 800667e:	f7ff ff0b 	bl	8006498 <EPD_2IN9_V2_SendCommand>
    EPD_2IN9_V2_SendData(Ystart & 0xFF);
 8006682:	88bb      	ldrh	r3, [r7, #4]
 8006684:	b2db      	uxtb	r3, r3
 8006686:	4618      	mov	r0, r3
 8006688:	f7ff ff24 	bl	80064d4 <EPD_2IN9_V2_SendData>
    EPD_2IN9_V2_SendData((Ystart >> 8) & 0xFF);
 800668c:	88bb      	ldrh	r3, [r7, #4]
 800668e:	0a1b      	lsrs	r3, r3, #8
 8006690:	b29b      	uxth	r3, r3
 8006692:	b2db      	uxtb	r3, r3
 8006694:	4618      	mov	r0, r3
 8006696:	f7ff ff1d 	bl	80064d4 <EPD_2IN9_V2_SendData>
    EPD_2IN9_V2_SendData(Yend & 0xFF);
 800669a:	883b      	ldrh	r3, [r7, #0]
 800669c:	b2db      	uxtb	r3, r3
 800669e:	4618      	mov	r0, r3
 80066a0:	f7ff ff18 	bl	80064d4 <EPD_2IN9_V2_SendData>
    EPD_2IN9_V2_SendData((Yend >> 8) & 0xFF);
 80066a4:	883b      	ldrh	r3, [r7, #0]
 80066a6:	0a1b      	lsrs	r3, r3, #8
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	4618      	mov	r0, r3
 80066ae:	f7ff ff11 	bl	80064d4 <EPD_2IN9_V2_SendData>
}
 80066b2:	bf00      	nop
 80066b4:	370c      	adds	r7, #12
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd90      	pop	{r4, r7, pc}

080066ba <EPD_2IN9_V2_SetCursor>:
/******************************************************************************
function :	Set Cursor
parameter:
******************************************************************************/
static void EPD_2IN9_V2_SetCursor(UWORD Xstart, UWORD Ystart)
{
 80066ba:	b580      	push	{r7, lr}
 80066bc:	b082      	sub	sp, #8
 80066be:	af00      	add	r7, sp, #0
 80066c0:	4603      	mov	r3, r0
 80066c2:	460a      	mov	r2, r1
 80066c4:	80fb      	strh	r3, [r7, #6]
 80066c6:	4613      	mov	r3, r2
 80066c8:	80bb      	strh	r3, [r7, #4]
    EPD_2IN9_V2_SendCommand(0x4E); // SET_RAM_X_ADDRESS_COUNTER
 80066ca:	204e      	movs	r0, #78	@ 0x4e
 80066cc:	f7ff fee4 	bl	8006498 <EPD_2IN9_V2_SendCommand>
    EPD_2IN9_V2_SendData(Xstart & 0xFF);
 80066d0:	88fb      	ldrh	r3, [r7, #6]
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	4618      	mov	r0, r3
 80066d6:	f7ff fefd 	bl	80064d4 <EPD_2IN9_V2_SendData>

    EPD_2IN9_V2_SendCommand(0x4F); // SET_RAM_Y_ADDRESS_COUNTER
 80066da:	204f      	movs	r0, #79	@ 0x4f
 80066dc:	f7ff fedc 	bl	8006498 <EPD_2IN9_V2_SendCommand>
    EPD_2IN9_V2_SendData(Ystart & 0xFF);
 80066e0:	88bb      	ldrh	r3, [r7, #4]
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	4618      	mov	r0, r3
 80066e6:	f7ff fef5 	bl	80064d4 <EPD_2IN9_V2_SendData>
    EPD_2IN9_V2_SendData((Ystart >> 8) & 0xFF);
 80066ea:	88bb      	ldrh	r3, [r7, #4]
 80066ec:	0a1b      	lsrs	r3, r3, #8
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	4618      	mov	r0, r3
 80066f4:	f7ff feee 	bl	80064d4 <EPD_2IN9_V2_SendData>
}
 80066f8:	bf00      	nop
 80066fa:	3708      	adds	r7, #8
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}

08006700 <EPD_2IN9_V2_Init>:
/******************************************************************************
function :	Initialize the e-Paper register
parameter:
******************************************************************************/
void EPD_2IN9_V2_Init(void)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	af00      	add	r7, sp, #0
	EPD_2IN9_V2_Reset();
 8006704:	f7ff feaa 	bl	800645c <EPD_2IN9_V2_Reset>
	DEV_Delay_ms(100);
 8006708:	2064      	movs	r0, #100	@ 0x64
 800670a:	f7fc f96f 	bl	80029ec <HAL_Delay>

	EPD_2IN9_V2_ReadBusy();   
 800670e:	f7ff feff 	bl	8006510 <EPD_2IN9_V2_ReadBusy>
	EPD_2IN9_V2_SendCommand(0x12); // soft reset
 8006712:	2012      	movs	r0, #18
 8006714:	f7ff fec0 	bl	8006498 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_ReadBusy();
 8006718:	f7ff fefa 	bl	8006510 <EPD_2IN9_V2_ReadBusy>
	
	EPD_2IN9_V2_SendCommand(0x01); //Driver output control      
 800671c:	2001      	movs	r0, #1
 800671e:	f7ff febb 	bl	8006498 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(0x27);
 8006722:	2027      	movs	r0, #39	@ 0x27
 8006724:	f7ff fed6 	bl	80064d4 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x01);
 8006728:	2001      	movs	r0, #1
 800672a:	f7ff fed3 	bl	80064d4 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x00);
 800672e:	2000      	movs	r0, #0
 8006730:	f7ff fed0 	bl	80064d4 <EPD_2IN9_V2_SendData>
	
	EPD_2IN9_V2_SendCommand(0x11); //data entry mode       
 8006734:	2011      	movs	r0, #17
 8006736:	f7ff feaf 	bl	8006498 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(0x03);
 800673a:	2003      	movs	r0, #3
 800673c:	f7ff feca 	bl	80064d4 <EPD_2IN9_V2_SendData>
	
	EPD_2IN9_V2_SetWindows(0, 0, EPD_2IN9_V2_WIDTH-1, EPD_2IN9_V2_HEIGHT-1);
 8006740:	f240 1327 	movw	r3, #295	@ 0x127
 8006744:	227f      	movs	r2, #127	@ 0x7f
 8006746:	2100      	movs	r1, #0
 8006748:	2000      	movs	r0, #0
 800674a:	f7ff ff77 	bl	800663c <EPD_2IN9_V2_SetWindows>
	
	EPD_2IN9_V2_SendCommand(0x21); //  Display update control
 800674e:	2021      	movs	r0, #33	@ 0x21
 8006750:	f7ff fea2 	bl	8006498 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(0x00);
 8006754:	2000      	movs	r0, #0
 8006756:	f7ff febd 	bl	80064d4 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x80);	
 800675a:	2080      	movs	r0, #128	@ 0x80
 800675c:	f7ff feba 	bl	80064d4 <EPD_2IN9_V2_SendData>
	
	EPD_2IN9_V2_SetCursor(0, 0);
 8006760:	2100      	movs	r1, #0
 8006762:	2000      	movs	r0, #0
 8006764:	f7ff ffa9 	bl	80066ba <EPD_2IN9_V2_SetCursor>
	EPD_2IN9_V2_ReadBusy();	
 8006768:	f7ff fed2 	bl	8006510 <EPD_2IN9_V2_ReadBusy>
	
	EPD_2IN9_V2_LUT_by_host(WS_20_30);
 800676c:	4802      	ldr	r0, [pc, #8]	@ (8006778 <EPD_2IN9_V2_Init+0x78>)
 800676e:	f7ff ff0c 	bl	800658a <EPD_2IN9_V2_LUT_by_host>
}
 8006772:	bf00      	nop
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	2000012c 	.word	0x2000012c

0800677c <EPD_2IN9_V2_Init_Fast>:

void EPD_2IN9_V2_Init_Fast(void)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	af00      	add	r7, sp, #0
	EPD_2IN9_V2_Reset();
 8006780:	f7ff fe6c 	bl	800645c <EPD_2IN9_V2_Reset>
	DEV_Delay_ms(100);
 8006784:	2064      	movs	r0, #100	@ 0x64
 8006786:	f7fc f931 	bl	80029ec <HAL_Delay>

	EPD_2IN9_V2_ReadBusy();   
 800678a:	f7ff fec1 	bl	8006510 <EPD_2IN9_V2_ReadBusy>
	EPD_2IN9_V2_SendCommand(0x12); // soft reset
 800678e:	2012      	movs	r0, #18
 8006790:	f7ff fe82 	bl	8006498 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_ReadBusy();
 8006794:	f7ff febc 	bl	8006510 <EPD_2IN9_V2_ReadBusy>
	
	EPD_2IN9_V2_SendCommand(0x01); //Driver output control      
 8006798:	2001      	movs	r0, #1
 800679a:	f7ff fe7d 	bl	8006498 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(0x27);
 800679e:	2027      	movs	r0, #39	@ 0x27
 80067a0:	f7ff fe98 	bl	80064d4 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x01);
 80067a4:	2001      	movs	r0, #1
 80067a6:	f7ff fe95 	bl	80064d4 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x00);
 80067aa:	2000      	movs	r0, #0
 80067ac:	f7ff fe92 	bl	80064d4 <EPD_2IN9_V2_SendData>
	
	EPD_2IN9_V2_SendCommand(0x11); //data entry mode       
 80067b0:	2011      	movs	r0, #17
 80067b2:	f7ff fe71 	bl	8006498 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(0x03);
 80067b6:	2003      	movs	r0, #3
 80067b8:	f7ff fe8c 	bl	80064d4 <EPD_2IN9_V2_SendData>
	
	EPD_2IN9_V2_SetWindows(0, 0, EPD_2IN9_V2_WIDTH-1, EPD_2IN9_V2_HEIGHT-1);
 80067bc:	f240 1327 	movw	r3, #295	@ 0x127
 80067c0:	227f      	movs	r2, #127	@ 0x7f
 80067c2:	2100      	movs	r1, #0
 80067c4:	2000      	movs	r0, #0
 80067c6:	f7ff ff39 	bl	800663c <EPD_2IN9_V2_SetWindows>
	
    EPD_2IN9_V2_SendCommand(0x3C);       
 80067ca:	203c      	movs	r0, #60	@ 0x3c
 80067cc:	f7ff fe64 	bl	8006498 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(0x05);
 80067d0:	2005      	movs	r0, #5
 80067d2:	f7ff fe7f 	bl	80064d4 <EPD_2IN9_V2_SendData>

	EPD_2IN9_V2_SendCommand(0x21); //  Display update control
 80067d6:	2021      	movs	r0, #33	@ 0x21
 80067d8:	f7ff fe5e 	bl	8006498 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(0x00);
 80067dc:	2000      	movs	r0, #0
 80067de:	f7ff fe79 	bl	80064d4 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x80);	
 80067e2:	2080      	movs	r0, #128	@ 0x80
 80067e4:	f7ff fe76 	bl	80064d4 <EPD_2IN9_V2_SendData>
	
	EPD_2IN9_V2_SetCursor(0, 0);
 80067e8:	2100      	movs	r1, #0
 80067ea:	2000      	movs	r0, #0
 80067ec:	f7ff ff65 	bl	80066ba <EPD_2IN9_V2_SetCursor>
	EPD_2IN9_V2_ReadBusy();	
 80067f0:	f7ff fe8e 	bl	8006510 <EPD_2IN9_V2_ReadBusy>
	
	EPD_2IN9_V2_LUT_by_host(WF_FULL);
 80067f4:	4802      	ldr	r0, [pc, #8]	@ (8006800 <EPD_2IN9_V2_Init_Fast+0x84>)
 80067f6:	f7ff fec8 	bl	800658a <EPD_2IN9_V2_LUT_by_host>
}
 80067fa:	bf00      	nop
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	bf00      	nop
 8006800:	200001cc 	.word	0x200001cc

08006804 <EPD_2IN9_V2_Clear>:
/******************************************************************************
function :	Clear screen
parameter:
******************************************************************************/
void EPD_2IN9_V2_Clear(void)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b082      	sub	sp, #8
 8006808:	af00      	add	r7, sp, #0
	UWORD i;
	
	EPD_2IN9_V2_SendCommand(0x24);   //write RAM for black(0)/white (1)
 800680a:	2024      	movs	r0, #36	@ 0x24
 800680c:	f7ff fe44 	bl	8006498 <EPD_2IN9_V2_SendCommand>
	for(i=0;i<4736;i++)
 8006810:	2300      	movs	r3, #0
 8006812:	80fb      	strh	r3, [r7, #6]
 8006814:	e005      	b.n	8006822 <EPD_2IN9_V2_Clear+0x1e>
	{
		EPD_2IN9_V2_SendData(0xff);
 8006816:	20ff      	movs	r0, #255	@ 0xff
 8006818:	f7ff fe5c 	bl	80064d4 <EPD_2IN9_V2_SendData>
	for(i=0;i<4736;i++)
 800681c:	88fb      	ldrh	r3, [r7, #6]
 800681e:	3301      	adds	r3, #1
 8006820:	80fb      	strh	r3, [r7, #6]
 8006822:	88fb      	ldrh	r3, [r7, #6]
 8006824:	f5b3 5f94 	cmp.w	r3, #4736	@ 0x1280
 8006828:	d3f5      	bcc.n	8006816 <EPD_2IN9_V2_Clear+0x12>
	}

	EPD_2IN9_V2_SendCommand(0x26);   //write RAM for black(0)/white (1)
 800682a:	2026      	movs	r0, #38	@ 0x26
 800682c:	f7ff fe34 	bl	8006498 <EPD_2IN9_V2_SendCommand>
	for(i=0;i<4736;i++)
 8006830:	2300      	movs	r3, #0
 8006832:	80fb      	strh	r3, [r7, #6]
 8006834:	e005      	b.n	8006842 <EPD_2IN9_V2_Clear+0x3e>
	{
		EPD_2IN9_V2_SendData(0xff);
 8006836:	20ff      	movs	r0, #255	@ 0xff
 8006838:	f7ff fe4c 	bl	80064d4 <EPD_2IN9_V2_SendData>
	for(i=0;i<4736;i++)
 800683c:	88fb      	ldrh	r3, [r7, #6]
 800683e:	3301      	adds	r3, #1
 8006840:	80fb      	strh	r3, [r7, #6]
 8006842:	88fb      	ldrh	r3, [r7, #6]
 8006844:	f5b3 5f94 	cmp.w	r3, #4736	@ 0x1280
 8006848:	d3f5      	bcc.n	8006836 <EPD_2IN9_V2_Clear+0x32>
	}
	EPD_2IN9_V2_TurnOnDisplay();
 800684a:	f7ff fed9 	bl	8006600 <EPD_2IN9_V2_TurnOnDisplay>
}
 800684e:	bf00      	nop
 8006850:	3708      	adds	r7, #8
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}

08006856 <EPD_2IN9_V2_Display>:
/******************************************************************************
function :	Sends the image buffer in RAM to e-Paper and displays
parameter:
******************************************************************************/
void EPD_2IN9_V2_Display(UBYTE *Image)
{
 8006856:	b580      	push	{r7, lr}
 8006858:	b084      	sub	sp, #16
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
	UWORD i;	
	EPD_2IN9_V2_SendCommand(0x24);   //write RAM for black(0)/white (1)
 800685e:	2024      	movs	r0, #36	@ 0x24
 8006860:	f7ff fe1a 	bl	8006498 <EPD_2IN9_V2_SendCommand>
	for(i=0;i<4736;i++)
 8006864:	2300      	movs	r3, #0
 8006866:	81fb      	strh	r3, [r7, #14]
 8006868:	e009      	b.n	800687e <EPD_2IN9_V2_Display+0x28>
	{
		EPD_2IN9_V2_SendData(Image[i]);
 800686a:	89fb      	ldrh	r3, [r7, #14]
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	4413      	add	r3, r2
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	4618      	mov	r0, r3
 8006874:	f7ff fe2e 	bl	80064d4 <EPD_2IN9_V2_SendData>
	for(i=0;i<4736;i++)
 8006878:	89fb      	ldrh	r3, [r7, #14]
 800687a:	3301      	adds	r3, #1
 800687c:	81fb      	strh	r3, [r7, #14]
 800687e:	89fb      	ldrh	r3, [r7, #14]
 8006880:	f5b3 5f94 	cmp.w	r3, #4736	@ 0x1280
 8006884:	d3f1      	bcc.n	800686a <EPD_2IN9_V2_Display+0x14>
	}
	EPD_2IN9_V2_TurnOnDisplay();	
 8006886:	f7ff febb 	bl	8006600 <EPD_2IN9_V2_TurnOnDisplay>
}
 800688a:	bf00      	nop
 800688c:	3710      	adds	r7, #16
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}

08006892 <EPD_2IN9_V2_Display_Base>:

void EPD_2IN9_V2_Display_Base(UBYTE *Image)
{
 8006892:	b580      	push	{r7, lr}
 8006894:	b084      	sub	sp, #16
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
	UWORD i;   

	EPD_2IN9_V2_SendCommand(0x24);   //Write Black and White image to RAM
 800689a:	2024      	movs	r0, #36	@ 0x24
 800689c:	f7ff fdfc 	bl	8006498 <EPD_2IN9_V2_SendCommand>
	for(i=0;i<4736;i++)
 80068a0:	2300      	movs	r3, #0
 80068a2:	81fb      	strh	r3, [r7, #14]
 80068a4:	e009      	b.n	80068ba <EPD_2IN9_V2_Display_Base+0x28>
	{               
		EPD_2IN9_V2_SendData(Image[i]);
 80068a6:	89fb      	ldrh	r3, [r7, #14]
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	4413      	add	r3, r2
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	4618      	mov	r0, r3
 80068b0:	f7ff fe10 	bl	80064d4 <EPD_2IN9_V2_SendData>
	for(i=0;i<4736;i++)
 80068b4:	89fb      	ldrh	r3, [r7, #14]
 80068b6:	3301      	adds	r3, #1
 80068b8:	81fb      	strh	r3, [r7, #14]
 80068ba:	89fb      	ldrh	r3, [r7, #14]
 80068bc:	f5b3 5f94 	cmp.w	r3, #4736	@ 0x1280
 80068c0:	d3f1      	bcc.n	80068a6 <EPD_2IN9_V2_Display_Base+0x14>
	}
	EPD_2IN9_V2_SendCommand(0x26);   //Write Black and White image to RAM
 80068c2:	2026      	movs	r0, #38	@ 0x26
 80068c4:	f7ff fde8 	bl	8006498 <EPD_2IN9_V2_SendCommand>
	for(i=0;i<4736;i++)
 80068c8:	2300      	movs	r3, #0
 80068ca:	81fb      	strh	r3, [r7, #14]
 80068cc:	e009      	b.n	80068e2 <EPD_2IN9_V2_Display_Base+0x50>
	{               
		EPD_2IN9_V2_SendData(Image[i]);
 80068ce:	89fb      	ldrh	r3, [r7, #14]
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	4413      	add	r3, r2
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	4618      	mov	r0, r3
 80068d8:	f7ff fdfc 	bl	80064d4 <EPD_2IN9_V2_SendData>
	for(i=0;i<4736;i++)
 80068dc:	89fb      	ldrh	r3, [r7, #14]
 80068de:	3301      	adds	r3, #1
 80068e0:	81fb      	strh	r3, [r7, #14]
 80068e2:	89fb      	ldrh	r3, [r7, #14]
 80068e4:	f5b3 5f94 	cmp.w	r3, #4736	@ 0x1280
 80068e8:	d3f1      	bcc.n	80068ce <EPD_2IN9_V2_Display_Base+0x3c>
	}
	EPD_2IN9_V2_TurnOnDisplay();	
 80068ea:	f7ff fe89 	bl	8006600 <EPD_2IN9_V2_TurnOnDisplay>
}
 80068ee:	bf00      	nop
 80068f0:	3710      	adds	r7, #16
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}
	...

080068f8 <EPD_2IN9_V2_Display_Partial>:

    EPD_2IN9_V2_TurnOnDisplay();
}

void EPD_2IN9_V2_Display_Partial(UBYTE *Image)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
	UWORD i;

//Reset
    DEV_Digital_Write(EPD_RST_PIN, 0);
 8006900:	2200      	movs	r2, #0
 8006902:	2102      	movs	r1, #2
 8006904:	4833      	ldr	r0, [pc, #204]	@ (80069d4 <EPD_2IN9_V2_Display_Partial+0xdc>)
 8006906:	f7fc ffee 	bl	80038e6 <HAL_GPIO_WritePin>
    DEV_Delay_ms(1);
 800690a:	2001      	movs	r0, #1
 800690c:	f7fc f86e 	bl	80029ec <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8006910:	2201      	movs	r2, #1
 8006912:	2102      	movs	r1, #2
 8006914:	482f      	ldr	r0, [pc, #188]	@ (80069d4 <EPD_2IN9_V2_Display_Partial+0xdc>)
 8006916:	f7fc ffe6 	bl	80038e6 <HAL_GPIO_WritePin>
    DEV_Delay_ms(2);
 800691a:	2002      	movs	r0, #2
 800691c:	f7fc f866 	bl	80029ec <HAL_Delay>

	EPD_2IN9_V2_LUT(_WF_PARTIAL_2IN9);
 8006920:	482d      	ldr	r0, [pc, #180]	@ (80069d8 <EPD_2IN9_V2_Display_Partial+0xe0>)
 8006922:	f7ff fe15 	bl	8006550 <EPD_2IN9_V2_LUT>
	EPD_2IN9_V2_SendCommand(0x37); 
 8006926:	2037      	movs	r0, #55	@ 0x37
 8006928:	f7ff fdb6 	bl	8006498 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(0x00);  
 800692c:	2000      	movs	r0, #0
 800692e:	f7ff fdd1 	bl	80064d4 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x00);  
 8006932:	2000      	movs	r0, #0
 8006934:	f7ff fdce 	bl	80064d4 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x00);  
 8006938:	2000      	movs	r0, #0
 800693a:	f7ff fdcb 	bl	80064d4 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x00); 
 800693e:	2000      	movs	r0, #0
 8006940:	f7ff fdc8 	bl	80064d4 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x00);  
 8006944:	2000      	movs	r0, #0
 8006946:	f7ff fdc5 	bl	80064d4 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x40);  
 800694a:	2040      	movs	r0, #64	@ 0x40
 800694c:	f7ff fdc2 	bl	80064d4 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x00);  
 8006950:	2000      	movs	r0, #0
 8006952:	f7ff fdbf 	bl	80064d4 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x00);   
 8006956:	2000      	movs	r0, #0
 8006958:	f7ff fdbc 	bl	80064d4 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x00);  
 800695c:	2000      	movs	r0, #0
 800695e:	f7ff fdb9 	bl	80064d4 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x00);
 8006962:	2000      	movs	r0, #0
 8006964:	f7ff fdb6 	bl	80064d4 <EPD_2IN9_V2_SendData>

	EPD_2IN9_V2_SendCommand(0x3C); //BorderWavefrom
 8006968:	203c      	movs	r0, #60	@ 0x3c
 800696a:	f7ff fd95 	bl	8006498 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(0x80);	
 800696e:	2080      	movs	r0, #128	@ 0x80
 8006970:	f7ff fdb0 	bl	80064d4 <EPD_2IN9_V2_SendData>

	EPD_2IN9_V2_SendCommand(0x22); 
 8006974:	2022      	movs	r0, #34	@ 0x22
 8006976:	f7ff fd8f 	bl	8006498 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(0xC0);   
 800697a:	20c0      	movs	r0, #192	@ 0xc0
 800697c:	f7ff fdaa 	bl	80064d4 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendCommand(0x20); 
 8006980:	2020      	movs	r0, #32
 8006982:	f7ff fd89 	bl	8006498 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_ReadBusy();  
 8006986:	f7ff fdc3 	bl	8006510 <EPD_2IN9_V2_ReadBusy>
	
	EPD_2IN9_V2_SetWindows(0, 0, EPD_2IN9_V2_WIDTH-1, EPD_2IN9_V2_HEIGHT-1);
 800698a:	f240 1327 	movw	r3, #295	@ 0x127
 800698e:	227f      	movs	r2, #127	@ 0x7f
 8006990:	2100      	movs	r1, #0
 8006992:	2000      	movs	r0, #0
 8006994:	f7ff fe52 	bl	800663c <EPD_2IN9_V2_SetWindows>
	EPD_2IN9_V2_SetCursor(0, 0);
 8006998:	2100      	movs	r1, #0
 800699a:	2000      	movs	r0, #0
 800699c:	f7ff fe8d 	bl	80066ba <EPD_2IN9_V2_SetCursor>

	EPD_2IN9_V2_SendCommand(0x24);   //Write Black and White image to RAM
 80069a0:	2024      	movs	r0, #36	@ 0x24
 80069a2:	f7ff fd79 	bl	8006498 <EPD_2IN9_V2_SendCommand>
	for(i=0;i<4736;i++)
 80069a6:	2300      	movs	r3, #0
 80069a8:	81fb      	strh	r3, [r7, #14]
 80069aa:	e009      	b.n	80069c0 <EPD_2IN9_V2_Display_Partial+0xc8>
	{
		EPD_2IN9_V2_SendData(Image[i]);
 80069ac:	89fb      	ldrh	r3, [r7, #14]
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	4413      	add	r3, r2
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	4618      	mov	r0, r3
 80069b6:	f7ff fd8d 	bl	80064d4 <EPD_2IN9_V2_SendData>
	for(i=0;i<4736;i++)
 80069ba:	89fb      	ldrh	r3, [r7, #14]
 80069bc:	3301      	adds	r3, #1
 80069be:	81fb      	strh	r3, [r7, #14]
 80069c0:	89fb      	ldrh	r3, [r7, #14]
 80069c2:	f5b3 5f94 	cmp.w	r3, #4736	@ 0x1280
 80069c6:	d3f1      	bcc.n	80069ac <EPD_2IN9_V2_Display_Partial+0xb4>
	} 
	EPD_2IN9_V2_TurnOnDisplay_Partial();
 80069c8:	f7ff fe29 	bl	800661e <EPD_2IN9_V2_TurnOnDisplay_Partial>
}
 80069cc:	bf00      	nop
 80069ce:	3710      	adds	r7, #16
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}
 80069d4:	40010800 	.word	0x40010800
 80069d8:	2000008c 	.word	0x2000008c

080069dc <EPD_2IN9_V2_Sleep>:
/******************************************************************************
function :	Enter sleep mode
parameter:
******************************************************************************/
void EPD_2IN9_V2_Sleep(void)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	af00      	add	r7, sp, #0
	EPD_2IN9_V2_SendCommand(0x10); //enter deep sleep
 80069e0:	2010      	movs	r0, #16
 80069e2:	f7ff fd59 	bl	8006498 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(0x01); 
 80069e6:	2001      	movs	r0, #1
 80069e8:	f7ff fd74 	bl	80064d4 <EPD_2IN9_V2_SendData>
	DEV_Delay_ms(100);
 80069ec:	2064      	movs	r0, #100	@ 0x64
 80069ee:	f7fb fffd 	bl	80029ec <HAL_Delay>
}
 80069f2:	bf00      	nop
 80069f4:	bd80      	pop	{r7, pc}
	...

080069f8 <default_mode>:
void drawn_alarm_setup_mode(uint16_t Xstart, uint16_t Ystart, ALARM_DATA_SETUP_MODE *sParam_data_alarm_setup_mode, sFONT Font);
void draw_battery(uint16_t battery_percentage);
void draw_day(uint16_t day, uint16_t date, uint16_t month, uint16_t year);

void default_mode(FLAG_SYSTEM *flag_default_mode, TIME_DATA *time_get_data, uint16_t battery_percentage)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b08a      	sub	sp, #40	@ 0x28
 80069fc:	af02      	add	r7, sp, #8
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	60b9      	str	r1, [r7, #8]
 8006a02:	4613      	mov	r3, r2
 8006a04:	80fb      	strh	r3, [r7, #6]
	UBYTE *BlackImage;

	UWORD Imagesize = ((EPD_2IN9_V2_WIDTH % 8 == 0)? (EPD_2IN9_V2_WIDTH / 8 ): (EPD_2IN9_V2_WIDTH / 8 + 1)) * EPD_2IN9_V2_HEIGHT;
 8006a06:	f44f 5394 	mov.w	r3, #4736	@ 0x1280
 8006a0a:	83bb      	strh	r3, [r7, #28]
    if((BlackImage = (UBYTE *)malloc(Imagesize)) == NULL) {
 8006a0c:	8bbb      	ldrh	r3, [r7, #28]
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f004 f9f2 	bl	800adf8 <malloc>
 8006a14:	4603      	mov	r3, r0
 8006a16:	61bb      	str	r3, [r7, #24]
 8006a18:	69bb      	ldr	r3, [r7, #24]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d102      	bne.n	8006a24 <default_mode+0x2c>
        printf("Failed to apply for black memory...\r\n");
 8006a1e:	485e      	ldr	r0, [pc, #376]	@ (8006b98 <default_mode+0x1a0>)
 8006a20:	f004 fbd2 	bl	800b1c8 <puts>
    }

    EPD_2IN9_V2_Init_Fast();
 8006a24:	f7ff feaa 	bl	800677c <EPD_2IN9_V2_Init_Fast>
    if(flag_default_mode ->flag_DEFAULT_MODE == 1)
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d145      	bne.n	8006abc <default_mode+0xc4>
    {
		EPD_2IN9_V2_Init();
 8006a30:	f7ff fe66 	bl	8006700 <EPD_2IN9_V2_Init>
    	EPD_2IN9_V2_Clear();
 8006a34:	f7ff fee6 	bl	8006804 <EPD_2IN9_V2_Clear>
    	EPD_2IN9_V2_Init_Fast();
 8006a38:	f7ff fea0 	bl	800677c <EPD_2IN9_V2_Init_Fast>
        Paint_ClearWindows(0, 0, EPD_2IN9_V2_HEIGHT, EPD_2IN9_V2_WIDTH, WHITE);
 8006a3c:	23ff      	movs	r3, #255	@ 0xff
 8006a3e:	9300      	str	r3, [sp, #0]
 8006a40:	2380      	movs	r3, #128	@ 0x80
 8006a42:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8006a46:	2100      	movs	r1, #0
 8006a48:	2000      	movs	r0, #0
 8006a4a:	f003 fd07 	bl	800a45c <Paint_ClearWindows>

    	Paint_NewImage(BlackImage, EPD_2IN9_V2_WIDTH, EPD_2IN9_V2_HEIGHT, 90, WHITE);
 8006a4e:	23ff      	movs	r3, #255	@ 0xff
 8006a50:	9300      	str	r3, [sp, #0]
 8006a52:	235a      	movs	r3, #90	@ 0x5a
 8006a54:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8006a58:	2180      	movs	r1, #128	@ 0x80
 8006a5a:	69b8      	ldr	r0, [r7, #24]
 8006a5c:	f003 faa6 	bl	8009fac <Paint_NewImage>
    	printf("Drawing\r\n");
 8006a60:	484e      	ldr	r0, [pc, #312]	@ (8006b9c <default_mode+0x1a4>)
 8006a62:	f004 fbb1 	bl	800b1c8 <puts>
    	//1.Select Image
    	Paint_SelectImage(BlackImage);
 8006a66:	69b8      	ldr	r0, [r7, #24]
 8006a68:	f003 faf4 	bl	800a054 <Paint_SelectImage>
    	Paint_Clear(WHITE);
 8006a6c:	20ff      	movs	r0, #255	@ 0xff
 8006a6e:	f003 fc4d 	bl	800a30c <Paint_Clear>

    	// 2.Drawing on the image
    	printf("Drawing:BlackImage\r\n");
 8006a72:	484b      	ldr	r0, [pc, #300]	@ (8006ba0 <default_mode+0x1a8>)
 8006a74:	f004 fba8 	bl	800b1c8 <puts>

    	// Paint_DrawString_EN(10, 0, "Duy Ngoc - 2251036", &Font16, BLACK, WHITE);
    	// Paint_DrawString_EN(10, 30, "Trung Nam - 2251032", &Font16, BLACK, WHITE);
    	// Paint_DrawString_EN(10, 60, "Hung Minh - 2251030", &Font16, BLACK, WHITE);

    	Paint_DrawString_EN(35, 40, "ChronoSync: Embedded Digital CLOCK ", &Font12, BLACK, WHITE);
 8006a78:	23ff      	movs	r3, #255	@ 0xff
 8006a7a:	9301      	str	r3, [sp, #4]
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	9300      	str	r3, [sp, #0]
 8006a80:	4b48      	ldr	r3, [pc, #288]	@ (8006ba4 <default_mode+0x1ac>)
 8006a82:	4a49      	ldr	r2, [pc, #292]	@ (8006ba8 <default_mode+0x1b0>)
 8006a84:	2128      	movs	r1, #40	@ 0x28
 8006a86:	2023      	movs	r0, #35	@ 0x23
 8006a88:	f003 ff9a 	bl	800a9c0 <Paint_DrawString_EN>


	    Paint_NewImage(BlackImage, EPD_2IN9_V2_WIDTH, EPD_2IN9_V2_HEIGHT, 90, WHITE);
 8006a8c:	23ff      	movs	r3, #255	@ 0xff
 8006a8e:	9300      	str	r3, [sp, #0]
 8006a90:	235a      	movs	r3, #90	@ 0x5a
 8006a92:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8006a96:	2180      	movs	r1, #128	@ 0x80
 8006a98:	69b8      	ldr	r0, [r7, #24]
 8006a9a:	f003 fa87 	bl	8009fac <Paint_NewImage>
        EPD_2IN9_V2_Display(BlackImage);
 8006a9e:	69b8      	ldr	r0, [r7, #24]
 8006aa0:	f7ff fed9 	bl	8006856 <EPD_2IN9_V2_Display>
        flag_default_mode->flag_ALARM_SETUP_MODE = 1;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	70da      	strb	r2, [r3, #3]
        flag_default_mode->flag_ALARM_VIEW_MODE = 1;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2201      	movs	r2, #1
 8006aae:	709a      	strb	r2, [r3, #2]
        flag_default_mode->flag_SYSTEM_SETUP_MODE = 1;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	711a      	strb	r2, [r3, #4]
        flag_default_mode->flag_TIME_SETUP_MODE = 1;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2201      	movs	r2, #1
 8006aba:	705a      	strb	r2, [r3, #1]
    }
        Paint_NewImage(BlackImage, EPD_2IN9_V2_WIDTH, EPD_2IN9_V2_HEIGHT, 90, WHITE);
 8006abc:	23ff      	movs	r3, #255	@ 0xff
 8006abe:	9300      	str	r3, [sp, #0]
 8006ac0:	235a      	movs	r3, #90	@ 0x5a
 8006ac2:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8006ac6:	2180      	movs	r1, #128	@ 0x80
 8006ac8:	69b8      	ldr	r0, [r7, #24]
 8006aca:	f003 fa6f 	bl	8009fac <Paint_NewImage>
        EPD_2IN9_V2_Display_Partial(BlackImage);
 8006ace:	69b8      	ldr	r0, [r7, #24]
 8006ad0:	f7ff ff12 	bl	80068f8 <EPD_2IN9_V2_Display_Partial>
    printf("Partial refresh\r\n");
 8006ad4:	4835      	ldr	r0, [pc, #212]	@ (8006bac <default_mode+0x1b4>)
 8006ad6:	f004 fb77 	bl	800b1c8 <puts>
    Paint_SelectImage(BlackImage);
 8006ada:	69b8      	ldr	r0, [r7, #24]
 8006adc:	f003 faba 	bl	800a054 <Paint_SelectImage>

    PAINT_TIME sPaint_time;
    sPaint_time.Hour = time_get_data->hour;
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	789b      	ldrb	r3, [r3, #2]
 8006ae4:	753b      	strb	r3, [r7, #20]
    sPaint_time.Min = time_get_data->minute;
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	785b      	ldrb	r3, [r3, #1]
 8006aea:	757b      	strb	r3, [r7, #21]
    sPaint_time.Sec = 0;
 8006aec:	2300      	movs	r3, #0
 8006aee:	75bb      	strb	r3, [r7, #22]
    UBYTE num = 3;
 8006af0:	2303      	movs	r3, #3
 8006af2:	77fb      	strb	r3, [r7, #31]
    for (;;) {
        Paint_ClearWindows(100, 60, 100 + Font20.Width * 7, 60 + Font20.Height, WHITE);
 8006af4:	4b2e      	ldr	r3, [pc, #184]	@ (8006bb0 <default_mode+0x1b8>)
 8006af6:	889b      	ldrh	r3, [r3, #4]
 8006af8:	461a      	mov	r2, r3
 8006afa:	00d2      	lsls	r2, r2, #3
 8006afc:	1ad3      	subs	r3, r2, r3
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	3364      	adds	r3, #100	@ 0x64
 8006b02:	b29a      	uxth	r2, r3
 8006b04:	4b2a      	ldr	r3, [pc, #168]	@ (8006bb0 <default_mode+0x1b8>)
 8006b06:	88db      	ldrh	r3, [r3, #6]
 8006b08:	333c      	adds	r3, #60	@ 0x3c
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	21ff      	movs	r1, #255	@ 0xff
 8006b0e:	9100      	str	r1, [sp, #0]
 8006b10:	213c      	movs	r1, #60	@ 0x3c
 8006b12:	2064      	movs	r0, #100	@ 0x64
 8006b14:	f003 fca2 	bl	800a45c <Paint_ClearWindows>
        Paint_ClearWindows(70, 100, 296, 100 + Font20.Height, WHITE);
 8006b18:	4b25      	ldr	r3, [pc, #148]	@ (8006bb0 <default_mode+0x1b8>)
 8006b1a:	88db      	ldrh	r3, [r3, #6]
 8006b1c:	3364      	adds	r3, #100	@ 0x64
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	22ff      	movs	r2, #255	@ 0xff
 8006b22:	9200      	str	r2, [sp, #0]
 8006b24:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8006b28:	2164      	movs	r1, #100	@ 0x64
 8006b2a:	2046      	movs	r0, #70	@ 0x46
 8006b2c:	f003 fc96 	bl	800a45c <Paint_ClearWindows>
        Paint_DrawTime(100, 60, &sPaint_time, &Font20, WHITE, BLACK);
 8006b30:	f107 0210 	add.w	r2, r7, #16
 8006b34:	2300      	movs	r3, #0
 8006b36:	9301      	str	r3, [sp, #4]
 8006b38:	23ff      	movs	r3, #255	@ 0xff
 8006b3a:	9300      	str	r3, [sp, #0]
 8006b3c:	4b1c      	ldr	r3, [pc, #112]	@ (8006bb0 <default_mode+0x1b8>)
 8006b3e:	213c      	movs	r1, #60	@ 0x3c
 8006b40:	2064      	movs	r0, #100	@ 0x64
 8006b42:	f004 f85f 	bl	800ac04 <Paint_DrawTime>
        draw_day(time_get_data->dayofweek, time_get_data->dateofmonth, time_get_data->month, time_get_data->year);
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	78db      	ldrb	r3, [r3, #3]
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	791b      	ldrb	r3, [r3, #4]
 8006b50:	4619      	mov	r1, r3
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	795b      	ldrb	r3, [r3, #5]
 8006b56:	461a      	mov	r2, r3
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	799b      	ldrb	r3, [r3, #6]
 8006b5c:	f002 ff5a 	bl	8009a14 <draw_day>
        draw_battery(battery_percentage);
 8006b60:	88fb      	ldrh	r3, [r7, #6]
 8006b62:	4618      	mov	r0, r3
 8006b64:	f003 f8d4 	bl	8009d10 <draw_battery>
        num = num - 1;
 8006b68:	7ffb      	ldrb	r3, [r7, #31]
 8006b6a:	3b01      	subs	r3, #1
 8006b6c:	77fb      	strb	r3, [r7, #31]
        if(num == 0) {
 8006b6e:	7ffb      	ldrb	r3, [r7, #31]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d003      	beq.n	8006b7c <default_mode+0x184>
            break;
        }
		EPD_2IN9_V2_Display_Partial(BlackImage);
 8006b74:	69b8      	ldr	r0, [r7, #24]
 8006b76:	f7ff febf 	bl	80068f8 <EPD_2IN9_V2_Display_Partial>
        Paint_ClearWindows(100, 60, 100 + Font20.Width * 7, 60 + Font20.Height, WHITE);
 8006b7a:	e7bb      	b.n	8006af4 <default_mode+0xfc>
            break;
 8006b7c:	bf00      	nop
    }
      EPD_2IN9_V2_Sleep();
 8006b7e:	f7ff ff2d 	bl	80069dc <EPD_2IN9_V2_Sleep>
      flag_default_mode->flag_DEFAULT_MODE = 0;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2200      	movs	r2, #0
 8006b86:	701a      	strb	r2, [r3, #0]
      free(BlackImage);
 8006b88:	69b8      	ldr	r0, [r7, #24]
 8006b8a:	f004 f93d 	bl	800ae08 <free>
}
 8006b8e:	bf00      	nop
 8006b90:	3720      	adds	r7, #32
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop
 8006b98:	0800bda4 	.word	0x0800bda4
 8006b9c:	0800bdcc 	.word	0x0800bdcc
 8006ba0:	0800bdd8 	.word	0x0800bdd8
 8006ba4:	2000026c 	.word	0x2000026c
 8006ba8:	0800bdec 	.word	0x0800bdec
 8006bac:	0800be10 	.word	0x0800be10
 8006bb0:	2000027c 	.word	0x2000027c

08006bb4 <system_setup_mode>:

// mode menu
void system_setup_mode (FLAG_SYSTEM *flag_set_up,  SYSTEM_STATE *system_state, uint8_t battery_percentage)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b088      	sub	sp, #32
 8006bb8:	af02      	add	r7, sp, #8
 8006bba:	60f8      	str	r0, [r7, #12]
 8006bbc:	60b9      	str	r1, [r7, #8]
 8006bbe:	4613      	mov	r3, r2
 8006bc0:	71fb      	strb	r3, [r7, #7]
	UBYTE *BlackImage;

	UWORD Imagesize = ((EPD_2IN9_V2_WIDTH % 8 == 0)? (EPD_2IN9_V2_WIDTH / 8 ): (EPD_2IN9_V2_WIDTH / 8 + 1)) * EPD_2IN9_V2_HEIGHT;
 8006bc2:	f44f 5394 	mov.w	r3, #4736	@ 0x1280
 8006bc6:	82bb      	strh	r3, [r7, #20]
    if((BlackImage = (UBYTE *)malloc(Imagesize)) == NULL) {
 8006bc8:	8abb      	ldrh	r3, [r7, #20]
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f004 f914 	bl	800adf8 <malloc>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	613b      	str	r3, [r7, #16]
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d102      	bne.n	8006be0 <system_setup_mode+0x2c>
        printf("Failed to apply for black memory...\r\n");
 8006bda:	486c      	ldr	r0, [pc, #432]	@ (8006d8c <system_setup_mode+0x1d8>)
 8006bdc:	f004 faf4 	bl	800b1c8 <puts>
    }

	EPD_2IN9_V2_Init();
 8006be0:	f7ff fd8e 	bl	8006700 <EPD_2IN9_V2_Init>
	if(flag_set_up->flag_SYSTEM_SETUP_MODE == 1)
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	791b      	ldrb	r3, [r3, #4]
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d129      	bne.n	8006c40 <system_setup_mode+0x8c>
	{
		EPD_2IN9_V2_Init();
 8006bec:	f7ff fd88 	bl	8006700 <EPD_2IN9_V2_Init>
    	EPD_2IN9_V2_Clear();
 8006bf0:	f7ff fe08 	bl	8006804 <EPD_2IN9_V2_Clear>
    	//DEV_Delay_ms(1000);
    	EPD_2IN9_V2_Init_Fast();
 8006bf4:	f7ff fdc2 	bl	800677c <EPD_2IN9_V2_Init_Fast>
    	Paint_NewImage(BlackImage, EPD_2IN9_V2_WIDTH, EPD_2IN9_V2_HEIGHT, 90, WHITE);
 8006bf8:	23ff      	movs	r3, #255	@ 0xff
 8006bfa:	9300      	str	r3, [sp, #0]
 8006bfc:	235a      	movs	r3, #90	@ 0x5a
 8006bfe:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8006c02:	2180      	movs	r1, #128	@ 0x80
 8006c04:	6938      	ldr	r0, [r7, #16]
 8006c06:	f003 f9d1 	bl	8009fac <Paint_NewImage>
    	printf("Drawing\r\n");
 8006c0a:	4861      	ldr	r0, [pc, #388]	@ (8006d90 <system_setup_mode+0x1dc>)
 8006c0c:	f004 fadc 	bl	800b1c8 <puts>
    	//1.Select Image
    	Paint_SelectImage(BlackImage);
 8006c10:	6938      	ldr	r0, [r7, #16]
 8006c12:	f003 fa1f 	bl	800a054 <Paint_SelectImage>
    	Paint_Clear(WHITE);
 8006c16:	20ff      	movs	r0, #255	@ 0xff
 8006c18:	f003 fb78 	bl	800a30c <Paint_Clear>

    	// 2.Drawing on the image
    	printf("Drawing:BlackImage\r\n");
 8006c1c:	485d      	ldr	r0, [pc, #372]	@ (8006d94 <system_setup_mode+0x1e0>)
 8006c1e:	f004 fad3 	bl	800b1c8 <puts>

 
    
    	EPD_2IN9_V2_Display_Base(BlackImage);
 8006c22:	6938      	ldr	r0, [r7, #16]
 8006c24:	f7ff fe35 	bl	8006892 <EPD_2IN9_V2_Display_Base>
        flag_set_up->flag_ALARM_SETUP_MODE  = 1;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	70da      	strb	r2, [r3, #3]
        flag_set_up->flag_ALARM_VIEW_MODE   = 1;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2201      	movs	r2, #1
 8006c32:	709a      	strb	r2, [r3, #2]
        flag_set_up->flag_DEFAULT_MODE      = 1;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2201      	movs	r2, #1
 8006c38:	701a      	strb	r2, [r3, #0]
        flag_set_up->flag_TIME_SETUP_MODE   = 1;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	705a      	strb	r2, [r3, #1]
	}

Paint_NewImage(BlackImage, EPD_2IN9_V2_WIDTH, EPD_2IN9_V2_HEIGHT, 90, WHITE);
 8006c40:	23ff      	movs	r3, #255	@ 0xff
 8006c42:	9300      	str	r3, [sp, #0]
 8006c44:	235a      	movs	r3, #90	@ 0x5a
 8006c46:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8006c4a:	2180      	movs	r1, #128	@ 0x80
 8006c4c:	6938      	ldr	r0, [r7, #16]
 8006c4e:	f003 f9ad 	bl	8009fac <Paint_NewImage>
printf("Partial refresh\r\n");
 8006c52:	4851      	ldr	r0, [pc, #324]	@ (8006d98 <system_setup_mode+0x1e4>)
 8006c54:	f004 fab8 	bl	800b1c8 <puts>
Paint_SelectImage(BlackImage);
 8006c58:	6938      	ldr	r0, [r7, #16]
 8006c5a:	f003 f9fb 	bl	800a054 <Paint_SelectImage>
UBYTE num = 3;
 8006c5e:	2303      	movs	r3, #3
 8006c60:	75fb      	strb	r3, [r7, #23]

    /*
    Paint_ClearWindows(150, 80, 150 + Font20.Width * 7, 80 + Font20.Height, WHITE);
    Paint_DrawTime(150, 80, &sPaint_time, &Font20, WHITE, BLACK);
*/
    draw_battery(battery_percentage);
 8006c62:	79fb      	ldrb	r3, [r7, #7]
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	4618      	mov	r0, r3
 8006c68:	f003 f852 	bl	8009d10 <draw_battery>
	switch (system_state->system_opt_cursor){
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	795b      	ldrb	r3, [r3, #5]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d002      	beq.n	8006c7a <system_setup_mode+0xc6>
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d039      	beq.n	8006cec <system_setup_mode+0x138>
        Paint_DrawString_EN(10, 0, "0. CLEAR ALL ALARM", &Font16, BLACK, WHITE);
        //mode_1
        Paint_ClearWindows(10, 40, 10 + Font16.Width * 20, 40 + Font16.Height, WHITE);
        Paint_DrawString_EN(10, 40, "1. CONTRIBUTOR INFO", &Font16, WHITE, BLACK);
        break;
       default: break;
 8006c78:	e071      	b.n	8006d5e <system_setup_mode+0x1aa>
        Paint_ClearWindows(10, 0, 10 + Font16.Width * 20, 0 + Font16.Height, WHITE);
 8006c7a:	4b48      	ldr	r3, [pc, #288]	@ (8006d9c <system_setup_mode+0x1e8>)
 8006c7c:	889b      	ldrh	r3, [r3, #4]
 8006c7e:	461a      	mov	r2, r3
 8006c80:	0092      	lsls	r2, r2, #2
 8006c82:	4413      	add	r3, r2
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	330a      	adds	r3, #10
 8006c8a:	b29a      	uxth	r2, r3
 8006c8c:	4b43      	ldr	r3, [pc, #268]	@ (8006d9c <system_setup_mode+0x1e8>)
 8006c8e:	88db      	ldrh	r3, [r3, #6]
 8006c90:	21ff      	movs	r1, #255	@ 0xff
 8006c92:	9100      	str	r1, [sp, #0]
 8006c94:	2100      	movs	r1, #0
 8006c96:	200a      	movs	r0, #10
 8006c98:	f003 fbe0 	bl	800a45c <Paint_ClearWindows>
        Paint_DrawString_EN(10, 0, "0. CLEAR ALL ALARM", &Font16, WHITE, BLACK);
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	9301      	str	r3, [sp, #4]
 8006ca0:	23ff      	movs	r3, #255	@ 0xff
 8006ca2:	9300      	str	r3, [sp, #0]
 8006ca4:	4b3d      	ldr	r3, [pc, #244]	@ (8006d9c <system_setup_mode+0x1e8>)
 8006ca6:	4a3e      	ldr	r2, [pc, #248]	@ (8006da0 <system_setup_mode+0x1ec>)
 8006ca8:	2100      	movs	r1, #0
 8006caa:	200a      	movs	r0, #10
 8006cac:	f003 fe88 	bl	800a9c0 <Paint_DrawString_EN>
        Paint_ClearWindows(10, 40, 10 + Font16.Width * 20, 40 + Font16.Height, WHITE);
 8006cb0:	4b3a      	ldr	r3, [pc, #232]	@ (8006d9c <system_setup_mode+0x1e8>)
 8006cb2:	889b      	ldrh	r3, [r3, #4]
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	0092      	lsls	r2, r2, #2
 8006cb8:	4413      	add	r3, r2
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	330a      	adds	r3, #10
 8006cc0:	b29a      	uxth	r2, r3
 8006cc2:	4b36      	ldr	r3, [pc, #216]	@ (8006d9c <system_setup_mode+0x1e8>)
 8006cc4:	88db      	ldrh	r3, [r3, #6]
 8006cc6:	3328      	adds	r3, #40	@ 0x28
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	21ff      	movs	r1, #255	@ 0xff
 8006ccc:	9100      	str	r1, [sp, #0]
 8006cce:	2128      	movs	r1, #40	@ 0x28
 8006cd0:	200a      	movs	r0, #10
 8006cd2:	f003 fbc3 	bl	800a45c <Paint_ClearWindows>
        Paint_DrawString_EN(10, 40, "1. CONTRIBUTOR INFO", &Font16, BLACK, WHITE);
 8006cd6:	23ff      	movs	r3, #255	@ 0xff
 8006cd8:	9301      	str	r3, [sp, #4]
 8006cda:	2300      	movs	r3, #0
 8006cdc:	9300      	str	r3, [sp, #0]
 8006cde:	4b2f      	ldr	r3, [pc, #188]	@ (8006d9c <system_setup_mode+0x1e8>)
 8006ce0:	4a30      	ldr	r2, [pc, #192]	@ (8006da4 <system_setup_mode+0x1f0>)
 8006ce2:	2128      	movs	r1, #40	@ 0x28
 8006ce4:	200a      	movs	r0, #10
 8006ce6:	f003 fe6b 	bl	800a9c0 <Paint_DrawString_EN>
        break;
 8006cea:	e038      	b.n	8006d5e <system_setup_mode+0x1aa>
        Paint_ClearWindows(10, 0, 10 + Font16.Width * 20, 0 + Font16.Height, WHITE);
 8006cec:	4b2b      	ldr	r3, [pc, #172]	@ (8006d9c <system_setup_mode+0x1e8>)
 8006cee:	889b      	ldrh	r3, [r3, #4]
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	0092      	lsls	r2, r2, #2
 8006cf4:	4413      	add	r3, r2
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	330a      	adds	r3, #10
 8006cfc:	b29a      	uxth	r2, r3
 8006cfe:	4b27      	ldr	r3, [pc, #156]	@ (8006d9c <system_setup_mode+0x1e8>)
 8006d00:	88db      	ldrh	r3, [r3, #6]
 8006d02:	21ff      	movs	r1, #255	@ 0xff
 8006d04:	9100      	str	r1, [sp, #0]
 8006d06:	2100      	movs	r1, #0
 8006d08:	200a      	movs	r0, #10
 8006d0a:	f003 fba7 	bl	800a45c <Paint_ClearWindows>
        Paint_DrawString_EN(10, 0, "0. CLEAR ALL ALARM", &Font16, BLACK, WHITE);
 8006d0e:	23ff      	movs	r3, #255	@ 0xff
 8006d10:	9301      	str	r3, [sp, #4]
 8006d12:	2300      	movs	r3, #0
 8006d14:	9300      	str	r3, [sp, #0]
 8006d16:	4b21      	ldr	r3, [pc, #132]	@ (8006d9c <system_setup_mode+0x1e8>)
 8006d18:	4a21      	ldr	r2, [pc, #132]	@ (8006da0 <system_setup_mode+0x1ec>)
 8006d1a:	2100      	movs	r1, #0
 8006d1c:	200a      	movs	r0, #10
 8006d1e:	f003 fe4f 	bl	800a9c0 <Paint_DrawString_EN>
        Paint_ClearWindows(10, 40, 10 + Font16.Width * 20, 40 + Font16.Height, WHITE);
 8006d22:	4b1e      	ldr	r3, [pc, #120]	@ (8006d9c <system_setup_mode+0x1e8>)
 8006d24:	889b      	ldrh	r3, [r3, #4]
 8006d26:	461a      	mov	r2, r3
 8006d28:	0092      	lsls	r2, r2, #2
 8006d2a:	4413      	add	r3, r2
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	330a      	adds	r3, #10
 8006d32:	b29a      	uxth	r2, r3
 8006d34:	4b19      	ldr	r3, [pc, #100]	@ (8006d9c <system_setup_mode+0x1e8>)
 8006d36:	88db      	ldrh	r3, [r3, #6]
 8006d38:	3328      	adds	r3, #40	@ 0x28
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	21ff      	movs	r1, #255	@ 0xff
 8006d3e:	9100      	str	r1, [sp, #0]
 8006d40:	2128      	movs	r1, #40	@ 0x28
 8006d42:	200a      	movs	r0, #10
 8006d44:	f003 fb8a 	bl	800a45c <Paint_ClearWindows>
        Paint_DrawString_EN(10, 40, "1. CONTRIBUTOR INFO", &Font16, WHITE, BLACK);
 8006d48:	2300      	movs	r3, #0
 8006d4a:	9301      	str	r3, [sp, #4]
 8006d4c:	23ff      	movs	r3, #255	@ 0xff
 8006d4e:	9300      	str	r3, [sp, #0]
 8006d50:	4b12      	ldr	r3, [pc, #72]	@ (8006d9c <system_setup_mode+0x1e8>)
 8006d52:	4a14      	ldr	r2, [pc, #80]	@ (8006da4 <system_setup_mode+0x1f0>)
 8006d54:	2128      	movs	r1, #40	@ 0x28
 8006d56:	200a      	movs	r0, #10
 8006d58:	f003 fe32 	bl	800a9c0 <Paint_DrawString_EN>
        break;
 8006d5c:	bf00      	nop
    }

    num = num - 1;
 8006d5e:	7dfb      	ldrb	r3, [r7, #23]
 8006d60:	3b01      	subs	r3, #1
 8006d62:	75fb      	strb	r3, [r7, #23]
    if(num == 0) {
 8006d64:	7dfb      	ldrb	r3, [r7, #23]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d003      	beq.n	8006d72 <system_setup_mode+0x1be>
        break;
    }
	EPD_2IN9_V2_Display_Partial(BlackImage);
 8006d6a:	6938      	ldr	r0, [r7, #16]
 8006d6c:	f7ff fdc4 	bl	80068f8 <EPD_2IN9_V2_Display_Partial>
    draw_battery(battery_percentage);
 8006d70:	e777      	b.n	8006c62 <system_setup_mode+0xae>
        break;
 8006d72:	bf00      	nop
}
  flag_set_up->flag_SYSTEM_SETUP_MODE = 0;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2200      	movs	r2, #0
 8006d78:	711a      	strb	r2, [r3, #4]
  EPD_2IN9_V2_Sleep();
 8006d7a:	f7ff fe2f 	bl	80069dc <EPD_2IN9_V2_Sleep>
  free(BlackImage);
 8006d7e:	6938      	ldr	r0, [r7, #16]
 8006d80:	f004 f842 	bl	800ae08 <free>
}
 8006d84:	bf00      	nop
 8006d86:	3718      	adds	r7, #24
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}
 8006d8c:	0800bda4 	.word	0x0800bda4
 8006d90:	0800bdcc 	.word	0x0800bdcc
 8006d94:	0800bdd8 	.word	0x0800bdd8
 8006d98:	0800be10 	.word	0x0800be10
 8006d9c:	20000274 	.word	0x20000274
 8006da0:	0800be24 	.word	0x0800be24
 8006da4:	0800be38 	.word	0x0800be38

08006da8 <alarm_view_mode>:

// alarm view mode
void alarm_view_mode (FLAG_SYSTEM *flag_alarm_view_mode, SYSTEM_STATE *system_state, SYSTEM_PARAM_DATA_ALARM_VIEW_MODE *alarm_view_mode, uint16_t battery_percentage)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b08a      	sub	sp, #40	@ 0x28
 8006dac:	af02      	add	r7, sp, #8
 8006dae:	60f8      	str	r0, [r7, #12]
 8006db0:	60b9      	str	r1, [r7, #8]
 8006db2:	607a      	str	r2, [r7, #4]
 8006db4:	807b      	strh	r3, [r7, #2]
	UBYTE *BlackImage;

	UWORD Imagesize = ((EPD_2IN9_V2_WIDTH % 8 == 0)? (EPD_2IN9_V2_WIDTH / 8 ): (EPD_2IN9_V2_WIDTH / 8 + 1)) * EPD_2IN9_V2_HEIGHT;
 8006db6:	f44f 5394 	mov.w	r3, #4736	@ 0x1280
 8006dba:	82fb      	strh	r3, [r7, #22]
    if((BlackImage = (UBYTE *)malloc(Imagesize)) == NULL) {
 8006dbc:	8afb      	ldrh	r3, [r7, #22]
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f004 f81a 	bl	800adf8 <malloc>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	613b      	str	r3, [r7, #16]
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d102      	bne.n	8006dd4 <alarm_view_mode+0x2c>
        printf("Failed to apply for black memory...\r\n");
 8006dce:	489e      	ldr	r0, [pc, #632]	@ (8007048 <alarm_view_mode+0x2a0>)
 8006dd0:	f004 f9fa 	bl	800b1c8 <puts>
    }

	EPD_2IN9_V2_Init();
 8006dd4:	f7ff fc94 	bl	8006700 <EPD_2IN9_V2_Init>
	if(flag_alarm_view_mode->flag_ALARM_VIEW_MODE == 1)
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	789b      	ldrb	r3, [r3, #2]
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	f040 8307 	bne.w	80073f0 <alarm_view_mode+0x648>
	{
		EPD_2IN9_V2_Init();
 8006de2:	f7ff fc8d 	bl	8006700 <EPD_2IN9_V2_Init>
    	EPD_2IN9_V2_Clear();
 8006de6:	f7ff fd0d 	bl	8006804 <EPD_2IN9_V2_Clear>
    	//DEV_Delay_ms(1000);
    	EPD_2IN9_V2_Init_Fast();
 8006dea:	f7ff fcc7 	bl	800677c <EPD_2IN9_V2_Init_Fast>
    	Paint_NewImage(BlackImage, EPD_2IN9_V2_WIDTH, EPD_2IN9_V2_HEIGHT, 90, WHITE);
 8006dee:	23ff      	movs	r3, #255	@ 0xff
 8006df0:	9300      	str	r3, [sp, #0]
 8006df2:	235a      	movs	r3, #90	@ 0x5a
 8006df4:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8006df8:	2180      	movs	r1, #128	@ 0x80
 8006dfa:	6938      	ldr	r0, [r7, #16]
 8006dfc:	f003 f8d6 	bl	8009fac <Paint_NewImage>
    	printf("Drawing\r\n");
 8006e00:	4892      	ldr	r0, [pc, #584]	@ (800704c <alarm_view_mode+0x2a4>)
 8006e02:	f004 f9e1 	bl	800b1c8 <puts>
    	//1.Select Image
    	Paint_SelectImage(BlackImage);
 8006e06:	6938      	ldr	r0, [r7, #16]
 8006e08:	f003 f924 	bl	800a054 <Paint_SelectImage>
    	Paint_Clear(WHITE);
 8006e0c:	20ff      	movs	r0, #255	@ 0xff
 8006e0e:	f003 fa7d 	bl	800a30c <Paint_Clear>

    	// 2.Drawing view mode
    	printf("Drawing:BlackImage\r\n");
 8006e12:	488f      	ldr	r0, [pc, #572]	@ (8007050 <alarm_view_mode+0x2a8>)
 8006e14:	f004 f9d8 	bl	800b1c8 <puts>
        //parameter 1
    	Paint_DrawString_EN(10, 0, "1.", &Font16, BLACK, WHITE);
 8006e18:	23ff      	movs	r3, #255	@ 0xff
 8006e1a:	9301      	str	r3, [sp, #4]
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	9300      	str	r3, [sp, #0]
 8006e20:	4b8c      	ldr	r3, [pc, #560]	@ (8007054 <alarm_view_mode+0x2ac>)
 8006e22:	4a8d      	ldr	r2, [pc, #564]	@ (8007058 <alarm_view_mode+0x2b0>)
 8006e24:	2100      	movs	r1, #0
 8006e26:	200a      	movs	r0, #10
 8006e28:	f003 fdca 	bl	800a9c0 <Paint_DrawString_EN>
        drawn_alarm_view_mode(140, 0, alarm_view_mode->sParam_data_alarm_setup_mode_1, Font16);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6819      	ldr	r1, [r3, #0]
 8006e30:	4b88      	ldr	r3, [pc, #544]	@ (8007054 <alarm_view_mode+0x2ac>)
 8006e32:	685a      	ldr	r2, [r3, #4]
 8006e34:	9200      	str	r2, [sp, #0]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	460a      	mov	r2, r1
 8006e3a:	2100      	movs	r1, #0
 8006e3c:	208c      	movs	r0, #140	@ 0x8c
 8006e3e:	f001 fe7b 	bl	8008b38 <drawn_alarm_view_mode>
        switch (alarm_view_mode->sParam_data_alarm_setup_mode_1->dy_dt)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	78db      	ldrb	r3, [r3, #3]
 8006e48:	2b02      	cmp	r3, #2
 8006e4a:	d06e      	beq.n	8006f2a <alarm_view_mode+0x182>
 8006e4c:	2b02      	cmp	r3, #2
 8006e4e:	dc6e      	bgt.n	8006f2e <alarm_view_mode+0x186>
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d002      	beq.n	8006e5a <alarm_view_mode+0xb2>
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d034      	beq.n	8006ec2 <alarm_view_mode+0x11a>
            Paint_DrawString_EN(230, 0, "DT", &Font16, BLACK, WHITE);
            break;
        case NOT_USED_MODE:
            break;
        default:
            break;
 8006e58:	e069      	b.n	8006f2e <alarm_view_mode+0x186>
            Paint_DrawNum(200, 0, alarm_view_mode->sParam_data_alarm_setup_mode_1->dow_dom/10, &Font16, BLACK, WHITE);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	791b      	ldrb	r3, [r3, #4]
 8006e60:	4a7e      	ldr	r2, [pc, #504]	@ (800705c <alarm_view_mode+0x2b4>)
 8006e62:	fba2 2303 	umull	r2, r3, r2, r3
 8006e66:	08db      	lsrs	r3, r3, #3
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	23ff      	movs	r3, #255	@ 0xff
 8006e6e:	9301      	str	r3, [sp, #4]
 8006e70:	2300      	movs	r3, #0
 8006e72:	9300      	str	r3, [sp, #0]
 8006e74:	4b77      	ldr	r3, [pc, #476]	@ (8007054 <alarm_view_mode+0x2ac>)
 8006e76:	2100      	movs	r1, #0
 8006e78:	20c8      	movs	r0, #200	@ 0xc8
 8006e7a:	f003 fdf5 	bl	800aa68 <Paint_DrawNum>
            Paint_DrawNum(210, 0, alarm_view_mode->sParam_data_alarm_setup_mode_1->dow_dom%10, &Font16, BLACK, WHITE);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	791a      	ldrb	r2, [r3, #4]
 8006e84:	4b75      	ldr	r3, [pc, #468]	@ (800705c <alarm_view_mode+0x2b4>)
 8006e86:	fba3 1302 	umull	r1, r3, r3, r2
 8006e8a:	08d9      	lsrs	r1, r3, #3
 8006e8c:	460b      	mov	r3, r1
 8006e8e:	009b      	lsls	r3, r3, #2
 8006e90:	440b      	add	r3, r1
 8006e92:	005b      	lsls	r3, r3, #1
 8006e94:	1ad3      	subs	r3, r2, r3
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	461a      	mov	r2, r3
 8006e9a:	23ff      	movs	r3, #255	@ 0xff
 8006e9c:	9301      	str	r3, [sp, #4]
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	9300      	str	r3, [sp, #0]
 8006ea2:	4b6c      	ldr	r3, [pc, #432]	@ (8007054 <alarm_view_mode+0x2ac>)
 8006ea4:	2100      	movs	r1, #0
 8006ea6:	20d2      	movs	r0, #210	@ 0xd2
 8006ea8:	f003 fdde 	bl	800aa68 <Paint_DrawNum>
            Paint_DrawString_EN(230, 0, "DY", &Font16, BLACK, WHITE);
 8006eac:	23ff      	movs	r3, #255	@ 0xff
 8006eae:	9301      	str	r3, [sp, #4]
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	9300      	str	r3, [sp, #0]
 8006eb4:	4b67      	ldr	r3, [pc, #412]	@ (8007054 <alarm_view_mode+0x2ac>)
 8006eb6:	4a6a      	ldr	r2, [pc, #424]	@ (8007060 <alarm_view_mode+0x2b8>)
 8006eb8:	2100      	movs	r1, #0
 8006eba:	20e6      	movs	r0, #230	@ 0xe6
 8006ebc:	f003 fd80 	bl	800a9c0 <Paint_DrawString_EN>
            break;
 8006ec0:	e036      	b.n	8006f30 <alarm_view_mode+0x188>
            Paint_DrawNum(200, 0, alarm_view_mode->sParam_data_alarm_setup_mode_1->dow_dom/10, &Font16, BLACK, WHITE);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	791b      	ldrb	r3, [r3, #4]
 8006ec8:	4a64      	ldr	r2, [pc, #400]	@ (800705c <alarm_view_mode+0x2b4>)
 8006eca:	fba2 2303 	umull	r2, r3, r2, r3
 8006ece:	08db      	lsrs	r3, r3, #3
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	23ff      	movs	r3, #255	@ 0xff
 8006ed6:	9301      	str	r3, [sp, #4]
 8006ed8:	2300      	movs	r3, #0
 8006eda:	9300      	str	r3, [sp, #0]
 8006edc:	4b5d      	ldr	r3, [pc, #372]	@ (8007054 <alarm_view_mode+0x2ac>)
 8006ede:	2100      	movs	r1, #0
 8006ee0:	20c8      	movs	r0, #200	@ 0xc8
 8006ee2:	f003 fdc1 	bl	800aa68 <Paint_DrawNum>
            Paint_DrawNum(210, 0, alarm_view_mode->sParam_data_alarm_setup_mode_1->dow_dom%10, &Font16, BLACK, WHITE);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	791a      	ldrb	r2, [r3, #4]
 8006eec:	4b5b      	ldr	r3, [pc, #364]	@ (800705c <alarm_view_mode+0x2b4>)
 8006eee:	fba3 1302 	umull	r1, r3, r3, r2
 8006ef2:	08d9      	lsrs	r1, r3, #3
 8006ef4:	460b      	mov	r3, r1
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	440b      	add	r3, r1
 8006efa:	005b      	lsls	r3, r3, #1
 8006efc:	1ad3      	subs	r3, r2, r3
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	461a      	mov	r2, r3
 8006f02:	23ff      	movs	r3, #255	@ 0xff
 8006f04:	9301      	str	r3, [sp, #4]
 8006f06:	2300      	movs	r3, #0
 8006f08:	9300      	str	r3, [sp, #0]
 8006f0a:	4b52      	ldr	r3, [pc, #328]	@ (8007054 <alarm_view_mode+0x2ac>)
 8006f0c:	2100      	movs	r1, #0
 8006f0e:	20d2      	movs	r0, #210	@ 0xd2
 8006f10:	f003 fdaa 	bl	800aa68 <Paint_DrawNum>
            Paint_DrawString_EN(230, 0, "DT", &Font16, BLACK, WHITE);
 8006f14:	23ff      	movs	r3, #255	@ 0xff
 8006f16:	9301      	str	r3, [sp, #4]
 8006f18:	2300      	movs	r3, #0
 8006f1a:	9300      	str	r3, [sp, #0]
 8006f1c:	4b4d      	ldr	r3, [pc, #308]	@ (8007054 <alarm_view_mode+0x2ac>)
 8006f1e:	4a51      	ldr	r2, [pc, #324]	@ (8007064 <alarm_view_mode+0x2bc>)
 8006f20:	2100      	movs	r1, #0
 8006f22:	20e6      	movs	r0, #230	@ 0xe6
 8006f24:	f003 fd4c 	bl	800a9c0 <Paint_DrawString_EN>
            break;
 8006f28:	e002      	b.n	8006f30 <alarm_view_mode+0x188>
            break;
 8006f2a:	bf00      	nop
 8006f2c:	e000      	b.n	8006f30 <alarm_view_mode+0x188>
            break;
 8006f2e:	bf00      	nop
        }
        //parameter 2
    	Paint_DrawString_EN(10, 20, "2.", &Font16, BLACK, WHITE);
 8006f30:	23ff      	movs	r3, #255	@ 0xff
 8006f32:	9301      	str	r3, [sp, #4]
 8006f34:	2300      	movs	r3, #0
 8006f36:	9300      	str	r3, [sp, #0]
 8006f38:	4b46      	ldr	r3, [pc, #280]	@ (8007054 <alarm_view_mode+0x2ac>)
 8006f3a:	4a4b      	ldr	r2, [pc, #300]	@ (8007068 <alarm_view_mode+0x2c0>)
 8006f3c:	2114      	movs	r1, #20
 8006f3e:	200a      	movs	r0, #10
 8006f40:	f003 fd3e 	bl	800a9c0 <Paint_DrawString_EN>
        drawn_alarm_view_mode(140, 20, alarm_view_mode->sParam_data_alarm_setup_mode_2, Font16);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6859      	ldr	r1, [r3, #4]
 8006f48:	4b42      	ldr	r3, [pc, #264]	@ (8007054 <alarm_view_mode+0x2ac>)
 8006f4a:	685a      	ldr	r2, [r3, #4]
 8006f4c:	9200      	str	r2, [sp, #0]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	460a      	mov	r2, r1
 8006f52:	2114      	movs	r1, #20
 8006f54:	208c      	movs	r0, #140	@ 0x8c
 8006f56:	f001 fdef 	bl	8008b38 <drawn_alarm_view_mode>
        switch (alarm_view_mode->sParam_data_alarm_setup_mode_2->dy_dt)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	78db      	ldrb	r3, [r3, #3]
 8006f60:	2b02      	cmp	r3, #2
 8006f62:	d06f      	beq.n	8007044 <alarm_view_mode+0x29c>
 8006f64:	2b02      	cmp	r3, #2
 8006f66:	f300 8081 	bgt.w	800706c <alarm_view_mode+0x2c4>
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d002      	beq.n	8006f74 <alarm_view_mode+0x1cc>
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d034      	beq.n	8006fdc <alarm_view_mode+0x234>
            Paint_DrawString_EN(230, 20, "DT", &Font16, BLACK, WHITE);
            break;
        case NOT_USED_MODE:
            break;
        default:
            break;
 8006f72:	e07b      	b.n	800706c <alarm_view_mode+0x2c4>
            Paint_DrawNum(200, 20, alarm_view_mode->sParam_data_alarm_setup_mode_2->dow_dom/10, &Font16, BLACK, WHITE);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	791b      	ldrb	r3, [r3, #4]
 8006f7a:	4a38      	ldr	r2, [pc, #224]	@ (800705c <alarm_view_mode+0x2b4>)
 8006f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8006f80:	08db      	lsrs	r3, r3, #3
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	461a      	mov	r2, r3
 8006f86:	23ff      	movs	r3, #255	@ 0xff
 8006f88:	9301      	str	r3, [sp, #4]
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	9300      	str	r3, [sp, #0]
 8006f8e:	4b31      	ldr	r3, [pc, #196]	@ (8007054 <alarm_view_mode+0x2ac>)
 8006f90:	2114      	movs	r1, #20
 8006f92:	20c8      	movs	r0, #200	@ 0xc8
 8006f94:	f003 fd68 	bl	800aa68 <Paint_DrawNum>
            Paint_DrawNum(210, 20, alarm_view_mode->sParam_data_alarm_setup_mode_2->dow_dom%10, &Font16, BLACK, WHITE);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	791a      	ldrb	r2, [r3, #4]
 8006f9e:	4b2f      	ldr	r3, [pc, #188]	@ (800705c <alarm_view_mode+0x2b4>)
 8006fa0:	fba3 1302 	umull	r1, r3, r3, r2
 8006fa4:	08d9      	lsrs	r1, r3, #3
 8006fa6:	460b      	mov	r3, r1
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	440b      	add	r3, r1
 8006fac:	005b      	lsls	r3, r3, #1
 8006fae:	1ad3      	subs	r3, r2, r3
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	23ff      	movs	r3, #255	@ 0xff
 8006fb6:	9301      	str	r3, [sp, #4]
 8006fb8:	2300      	movs	r3, #0
 8006fba:	9300      	str	r3, [sp, #0]
 8006fbc:	4b25      	ldr	r3, [pc, #148]	@ (8007054 <alarm_view_mode+0x2ac>)
 8006fbe:	2114      	movs	r1, #20
 8006fc0:	20d2      	movs	r0, #210	@ 0xd2
 8006fc2:	f003 fd51 	bl	800aa68 <Paint_DrawNum>
            Paint_DrawString_EN(230, 20, "DY", &Font16, BLACK, WHITE);
 8006fc6:	23ff      	movs	r3, #255	@ 0xff
 8006fc8:	9301      	str	r3, [sp, #4]
 8006fca:	2300      	movs	r3, #0
 8006fcc:	9300      	str	r3, [sp, #0]
 8006fce:	4b21      	ldr	r3, [pc, #132]	@ (8007054 <alarm_view_mode+0x2ac>)
 8006fd0:	4a23      	ldr	r2, [pc, #140]	@ (8007060 <alarm_view_mode+0x2b8>)
 8006fd2:	2114      	movs	r1, #20
 8006fd4:	20e6      	movs	r0, #230	@ 0xe6
 8006fd6:	f003 fcf3 	bl	800a9c0 <Paint_DrawString_EN>
            break;
 8006fda:	e048      	b.n	800706e <alarm_view_mode+0x2c6>
            Paint_DrawNum(200, 20, alarm_view_mode->sParam_data_alarm_setup_mode_2->dow_dom/10, &Font16, BLACK, WHITE);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	791b      	ldrb	r3, [r3, #4]
 8006fe2:	4a1e      	ldr	r2, [pc, #120]	@ (800705c <alarm_view_mode+0x2b4>)
 8006fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8006fe8:	08db      	lsrs	r3, r3, #3
 8006fea:	b2db      	uxtb	r3, r3
 8006fec:	461a      	mov	r2, r3
 8006fee:	23ff      	movs	r3, #255	@ 0xff
 8006ff0:	9301      	str	r3, [sp, #4]
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	9300      	str	r3, [sp, #0]
 8006ff6:	4b17      	ldr	r3, [pc, #92]	@ (8007054 <alarm_view_mode+0x2ac>)
 8006ff8:	2114      	movs	r1, #20
 8006ffa:	20c8      	movs	r0, #200	@ 0xc8
 8006ffc:	f003 fd34 	bl	800aa68 <Paint_DrawNum>
            Paint_DrawNum(210, 20, alarm_view_mode->sParam_data_alarm_setup_mode_2->dow_dom%10, &Font16, BLACK, WHITE);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	791a      	ldrb	r2, [r3, #4]
 8007006:	4b15      	ldr	r3, [pc, #84]	@ (800705c <alarm_view_mode+0x2b4>)
 8007008:	fba3 1302 	umull	r1, r3, r3, r2
 800700c:	08d9      	lsrs	r1, r3, #3
 800700e:	460b      	mov	r3, r1
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	440b      	add	r3, r1
 8007014:	005b      	lsls	r3, r3, #1
 8007016:	1ad3      	subs	r3, r2, r3
 8007018:	b2db      	uxtb	r3, r3
 800701a:	461a      	mov	r2, r3
 800701c:	23ff      	movs	r3, #255	@ 0xff
 800701e:	9301      	str	r3, [sp, #4]
 8007020:	2300      	movs	r3, #0
 8007022:	9300      	str	r3, [sp, #0]
 8007024:	4b0b      	ldr	r3, [pc, #44]	@ (8007054 <alarm_view_mode+0x2ac>)
 8007026:	2114      	movs	r1, #20
 8007028:	20d2      	movs	r0, #210	@ 0xd2
 800702a:	f003 fd1d 	bl	800aa68 <Paint_DrawNum>
            Paint_DrawString_EN(230, 20, "DT", &Font16, BLACK, WHITE);
 800702e:	23ff      	movs	r3, #255	@ 0xff
 8007030:	9301      	str	r3, [sp, #4]
 8007032:	2300      	movs	r3, #0
 8007034:	9300      	str	r3, [sp, #0]
 8007036:	4b07      	ldr	r3, [pc, #28]	@ (8007054 <alarm_view_mode+0x2ac>)
 8007038:	4a0a      	ldr	r2, [pc, #40]	@ (8007064 <alarm_view_mode+0x2bc>)
 800703a:	2114      	movs	r1, #20
 800703c:	20e6      	movs	r0, #230	@ 0xe6
 800703e:	f003 fcbf 	bl	800a9c0 <Paint_DrawString_EN>
            break;
 8007042:	e014      	b.n	800706e <alarm_view_mode+0x2c6>
            break;
 8007044:	bf00      	nop
 8007046:	e012      	b.n	800706e <alarm_view_mode+0x2c6>
 8007048:	0800bda4 	.word	0x0800bda4
 800704c:	0800bdcc 	.word	0x0800bdcc
 8007050:	0800bdd8 	.word	0x0800bdd8
 8007054:	20000274 	.word	0x20000274
 8007058:	0800be4c 	.word	0x0800be4c
 800705c:	cccccccd 	.word	0xcccccccd
 8007060:	0800be50 	.word	0x0800be50
 8007064:	0800be54 	.word	0x0800be54
 8007068:	0800be58 	.word	0x0800be58
            break;
 800706c:	bf00      	nop
        }
        //parameter 3
    	Paint_DrawString_EN(10, 40, "3.", &Font16, BLACK, WHITE);
 800706e:	23ff      	movs	r3, #255	@ 0xff
 8007070:	9301      	str	r3, [sp, #4]
 8007072:	2300      	movs	r3, #0
 8007074:	9300      	str	r3, [sp, #0]
 8007076:	4b9a      	ldr	r3, [pc, #616]	@ (80072e0 <alarm_view_mode+0x538>)
 8007078:	4a9a      	ldr	r2, [pc, #616]	@ (80072e4 <alarm_view_mode+0x53c>)
 800707a:	2128      	movs	r1, #40	@ 0x28
 800707c:	200a      	movs	r0, #10
 800707e:	f003 fc9f 	bl	800a9c0 <Paint_DrawString_EN>
        drawn_alarm_view_mode(140, 40, alarm_view_mode->sParam_data_alarm_setup_mode_3, Font16);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6899      	ldr	r1, [r3, #8]
 8007086:	4b96      	ldr	r3, [pc, #600]	@ (80072e0 <alarm_view_mode+0x538>)
 8007088:	685a      	ldr	r2, [r3, #4]
 800708a:	9200      	str	r2, [sp, #0]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	460a      	mov	r2, r1
 8007090:	2128      	movs	r1, #40	@ 0x28
 8007092:	208c      	movs	r0, #140	@ 0x8c
 8007094:	f001 fd50 	bl	8008b38 <drawn_alarm_view_mode>
        switch (alarm_view_mode->sParam_data_alarm_setup_mode_3->dy_dt)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	78db      	ldrb	r3, [r3, #3]
 800709e:	2b02      	cmp	r3, #2
 80070a0:	d06e      	beq.n	8007180 <alarm_view_mode+0x3d8>
 80070a2:	2b02      	cmp	r3, #2
 80070a4:	dc6e      	bgt.n	8007184 <alarm_view_mode+0x3dc>
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d002      	beq.n	80070b0 <alarm_view_mode+0x308>
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d034      	beq.n	8007118 <alarm_view_mode+0x370>
            Paint_DrawString_EN(230, 40, "DT", &Font16, BLACK, WHITE);
            break;
        case NOT_USED_MODE:
            break;
        default:
            break;
 80070ae:	e069      	b.n	8007184 <alarm_view_mode+0x3dc>
            Paint_DrawNum(200, 40, alarm_view_mode->sParam_data_alarm_setup_mode_3->dow_dom/10, &Font16, BLACK, WHITE);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	791b      	ldrb	r3, [r3, #4]
 80070b6:	4a8c      	ldr	r2, [pc, #560]	@ (80072e8 <alarm_view_mode+0x540>)
 80070b8:	fba2 2303 	umull	r2, r3, r2, r3
 80070bc:	08db      	lsrs	r3, r3, #3
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	461a      	mov	r2, r3
 80070c2:	23ff      	movs	r3, #255	@ 0xff
 80070c4:	9301      	str	r3, [sp, #4]
 80070c6:	2300      	movs	r3, #0
 80070c8:	9300      	str	r3, [sp, #0]
 80070ca:	4b85      	ldr	r3, [pc, #532]	@ (80072e0 <alarm_view_mode+0x538>)
 80070cc:	2128      	movs	r1, #40	@ 0x28
 80070ce:	20c8      	movs	r0, #200	@ 0xc8
 80070d0:	f003 fcca 	bl	800aa68 <Paint_DrawNum>
            Paint_DrawNum(210, 40, alarm_view_mode->sParam_data_alarm_setup_mode_3->dow_dom%10, &Font16, BLACK, WHITE);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	791a      	ldrb	r2, [r3, #4]
 80070da:	4b83      	ldr	r3, [pc, #524]	@ (80072e8 <alarm_view_mode+0x540>)
 80070dc:	fba3 1302 	umull	r1, r3, r3, r2
 80070e0:	08d9      	lsrs	r1, r3, #3
 80070e2:	460b      	mov	r3, r1
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	440b      	add	r3, r1
 80070e8:	005b      	lsls	r3, r3, #1
 80070ea:	1ad3      	subs	r3, r2, r3
 80070ec:	b2db      	uxtb	r3, r3
 80070ee:	461a      	mov	r2, r3
 80070f0:	23ff      	movs	r3, #255	@ 0xff
 80070f2:	9301      	str	r3, [sp, #4]
 80070f4:	2300      	movs	r3, #0
 80070f6:	9300      	str	r3, [sp, #0]
 80070f8:	4b79      	ldr	r3, [pc, #484]	@ (80072e0 <alarm_view_mode+0x538>)
 80070fa:	2128      	movs	r1, #40	@ 0x28
 80070fc:	20d2      	movs	r0, #210	@ 0xd2
 80070fe:	f003 fcb3 	bl	800aa68 <Paint_DrawNum>
            Paint_DrawString_EN(230, 40, "DY", &Font16, BLACK, WHITE);
 8007102:	23ff      	movs	r3, #255	@ 0xff
 8007104:	9301      	str	r3, [sp, #4]
 8007106:	2300      	movs	r3, #0
 8007108:	9300      	str	r3, [sp, #0]
 800710a:	4b75      	ldr	r3, [pc, #468]	@ (80072e0 <alarm_view_mode+0x538>)
 800710c:	4a77      	ldr	r2, [pc, #476]	@ (80072ec <alarm_view_mode+0x544>)
 800710e:	2128      	movs	r1, #40	@ 0x28
 8007110:	20e6      	movs	r0, #230	@ 0xe6
 8007112:	f003 fc55 	bl	800a9c0 <Paint_DrawString_EN>
            break;
 8007116:	e036      	b.n	8007186 <alarm_view_mode+0x3de>
            Paint_DrawNum(200, 40, alarm_view_mode->sParam_data_alarm_setup_mode_3->dow_dom/10, &Font16, BLACK, WHITE);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	791b      	ldrb	r3, [r3, #4]
 800711e:	4a72      	ldr	r2, [pc, #456]	@ (80072e8 <alarm_view_mode+0x540>)
 8007120:	fba2 2303 	umull	r2, r3, r2, r3
 8007124:	08db      	lsrs	r3, r3, #3
 8007126:	b2db      	uxtb	r3, r3
 8007128:	461a      	mov	r2, r3
 800712a:	23ff      	movs	r3, #255	@ 0xff
 800712c:	9301      	str	r3, [sp, #4]
 800712e:	2300      	movs	r3, #0
 8007130:	9300      	str	r3, [sp, #0]
 8007132:	4b6b      	ldr	r3, [pc, #428]	@ (80072e0 <alarm_view_mode+0x538>)
 8007134:	2128      	movs	r1, #40	@ 0x28
 8007136:	20c8      	movs	r0, #200	@ 0xc8
 8007138:	f003 fc96 	bl	800aa68 <Paint_DrawNum>
            Paint_DrawNum(210, 40, alarm_view_mode->sParam_data_alarm_setup_mode_3->dow_dom%10, &Font16, BLACK, WHITE);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	791a      	ldrb	r2, [r3, #4]
 8007142:	4b69      	ldr	r3, [pc, #420]	@ (80072e8 <alarm_view_mode+0x540>)
 8007144:	fba3 1302 	umull	r1, r3, r3, r2
 8007148:	08d9      	lsrs	r1, r3, #3
 800714a:	460b      	mov	r3, r1
 800714c:	009b      	lsls	r3, r3, #2
 800714e:	440b      	add	r3, r1
 8007150:	005b      	lsls	r3, r3, #1
 8007152:	1ad3      	subs	r3, r2, r3
 8007154:	b2db      	uxtb	r3, r3
 8007156:	461a      	mov	r2, r3
 8007158:	23ff      	movs	r3, #255	@ 0xff
 800715a:	9301      	str	r3, [sp, #4]
 800715c:	2300      	movs	r3, #0
 800715e:	9300      	str	r3, [sp, #0]
 8007160:	4b5f      	ldr	r3, [pc, #380]	@ (80072e0 <alarm_view_mode+0x538>)
 8007162:	2128      	movs	r1, #40	@ 0x28
 8007164:	20d2      	movs	r0, #210	@ 0xd2
 8007166:	f003 fc7f 	bl	800aa68 <Paint_DrawNum>
            Paint_DrawString_EN(230, 40, "DT", &Font16, BLACK, WHITE);
 800716a:	23ff      	movs	r3, #255	@ 0xff
 800716c:	9301      	str	r3, [sp, #4]
 800716e:	2300      	movs	r3, #0
 8007170:	9300      	str	r3, [sp, #0]
 8007172:	4b5b      	ldr	r3, [pc, #364]	@ (80072e0 <alarm_view_mode+0x538>)
 8007174:	4a5e      	ldr	r2, [pc, #376]	@ (80072f0 <alarm_view_mode+0x548>)
 8007176:	2128      	movs	r1, #40	@ 0x28
 8007178:	20e6      	movs	r0, #230	@ 0xe6
 800717a:	f003 fc21 	bl	800a9c0 <Paint_DrawString_EN>
            break;
 800717e:	e002      	b.n	8007186 <alarm_view_mode+0x3de>
            break;
 8007180:	bf00      	nop
 8007182:	e000      	b.n	8007186 <alarm_view_mode+0x3de>
            break;
 8007184:	bf00      	nop
        }
        //parameter 4
    	Paint_DrawString_EN(10, 60, "4.", &Font16, BLACK, WHITE);
 8007186:	23ff      	movs	r3, #255	@ 0xff
 8007188:	9301      	str	r3, [sp, #4]
 800718a:	2300      	movs	r3, #0
 800718c:	9300      	str	r3, [sp, #0]
 800718e:	4b54      	ldr	r3, [pc, #336]	@ (80072e0 <alarm_view_mode+0x538>)
 8007190:	4a58      	ldr	r2, [pc, #352]	@ (80072f4 <alarm_view_mode+0x54c>)
 8007192:	213c      	movs	r1, #60	@ 0x3c
 8007194:	200a      	movs	r0, #10
 8007196:	f003 fc13 	bl	800a9c0 <Paint_DrawString_EN>
        drawn_alarm_view_mode(140, 60, alarm_view_mode->sParam_data_alarm_setup_mode_4, Font16);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	68d9      	ldr	r1, [r3, #12]
 800719e:	4b50      	ldr	r3, [pc, #320]	@ (80072e0 <alarm_view_mode+0x538>)
 80071a0:	685a      	ldr	r2, [r3, #4]
 80071a2:	9200      	str	r2, [sp, #0]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	460a      	mov	r2, r1
 80071a8:	213c      	movs	r1, #60	@ 0x3c
 80071aa:	208c      	movs	r0, #140	@ 0x8c
 80071ac:	f001 fcc4 	bl	8008b38 <drawn_alarm_view_mode>
        switch (alarm_view_mode->sParam_data_alarm_setup_mode_4->dy_dt)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	68db      	ldr	r3, [r3, #12]
 80071b4:	78db      	ldrb	r3, [r3, #3]
 80071b6:	2b02      	cmp	r3, #2
 80071b8:	d06e      	beq.n	8007298 <alarm_view_mode+0x4f0>
 80071ba:	2b02      	cmp	r3, #2
 80071bc:	dc6e      	bgt.n	800729c <alarm_view_mode+0x4f4>
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d002      	beq.n	80071c8 <alarm_view_mode+0x420>
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d034      	beq.n	8007230 <alarm_view_mode+0x488>
            Paint_DrawString_EN(230, 60, "DT", &Font16, BLACK, WHITE);
            break;
        case NOT_USED_MODE:
            break;
        default:
            break;
 80071c6:	e069      	b.n	800729c <alarm_view_mode+0x4f4>
            Paint_DrawNum(200, 60, alarm_view_mode->sParam_data_alarm_setup_mode_4->dow_dom/10, &Font16, BLACK, WHITE);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	68db      	ldr	r3, [r3, #12]
 80071cc:	791b      	ldrb	r3, [r3, #4]
 80071ce:	4a46      	ldr	r2, [pc, #280]	@ (80072e8 <alarm_view_mode+0x540>)
 80071d0:	fba2 2303 	umull	r2, r3, r2, r3
 80071d4:	08db      	lsrs	r3, r3, #3
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	461a      	mov	r2, r3
 80071da:	23ff      	movs	r3, #255	@ 0xff
 80071dc:	9301      	str	r3, [sp, #4]
 80071de:	2300      	movs	r3, #0
 80071e0:	9300      	str	r3, [sp, #0]
 80071e2:	4b3f      	ldr	r3, [pc, #252]	@ (80072e0 <alarm_view_mode+0x538>)
 80071e4:	213c      	movs	r1, #60	@ 0x3c
 80071e6:	20c8      	movs	r0, #200	@ 0xc8
 80071e8:	f003 fc3e 	bl	800aa68 <Paint_DrawNum>
            Paint_DrawNum(210, 60, alarm_view_mode->sParam_data_alarm_setup_mode_4->dow_dom%10, &Font16, BLACK, WHITE);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	791a      	ldrb	r2, [r3, #4]
 80071f2:	4b3d      	ldr	r3, [pc, #244]	@ (80072e8 <alarm_view_mode+0x540>)
 80071f4:	fba3 1302 	umull	r1, r3, r3, r2
 80071f8:	08d9      	lsrs	r1, r3, #3
 80071fa:	460b      	mov	r3, r1
 80071fc:	009b      	lsls	r3, r3, #2
 80071fe:	440b      	add	r3, r1
 8007200:	005b      	lsls	r3, r3, #1
 8007202:	1ad3      	subs	r3, r2, r3
 8007204:	b2db      	uxtb	r3, r3
 8007206:	461a      	mov	r2, r3
 8007208:	23ff      	movs	r3, #255	@ 0xff
 800720a:	9301      	str	r3, [sp, #4]
 800720c:	2300      	movs	r3, #0
 800720e:	9300      	str	r3, [sp, #0]
 8007210:	4b33      	ldr	r3, [pc, #204]	@ (80072e0 <alarm_view_mode+0x538>)
 8007212:	213c      	movs	r1, #60	@ 0x3c
 8007214:	20d2      	movs	r0, #210	@ 0xd2
 8007216:	f003 fc27 	bl	800aa68 <Paint_DrawNum>
            Paint_DrawString_EN(230, 60, "DY", &Font16, BLACK, WHITE);
 800721a:	23ff      	movs	r3, #255	@ 0xff
 800721c:	9301      	str	r3, [sp, #4]
 800721e:	2300      	movs	r3, #0
 8007220:	9300      	str	r3, [sp, #0]
 8007222:	4b2f      	ldr	r3, [pc, #188]	@ (80072e0 <alarm_view_mode+0x538>)
 8007224:	4a31      	ldr	r2, [pc, #196]	@ (80072ec <alarm_view_mode+0x544>)
 8007226:	213c      	movs	r1, #60	@ 0x3c
 8007228:	20e6      	movs	r0, #230	@ 0xe6
 800722a:	f003 fbc9 	bl	800a9c0 <Paint_DrawString_EN>
            break;
 800722e:	e036      	b.n	800729e <alarm_view_mode+0x4f6>
            Paint_DrawNum(200, 60, alarm_view_mode->sParam_data_alarm_setup_mode_4->dow_dom/10, &Font16, BLACK, WHITE);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	68db      	ldr	r3, [r3, #12]
 8007234:	791b      	ldrb	r3, [r3, #4]
 8007236:	4a2c      	ldr	r2, [pc, #176]	@ (80072e8 <alarm_view_mode+0x540>)
 8007238:	fba2 2303 	umull	r2, r3, r2, r3
 800723c:	08db      	lsrs	r3, r3, #3
 800723e:	b2db      	uxtb	r3, r3
 8007240:	461a      	mov	r2, r3
 8007242:	23ff      	movs	r3, #255	@ 0xff
 8007244:	9301      	str	r3, [sp, #4]
 8007246:	2300      	movs	r3, #0
 8007248:	9300      	str	r3, [sp, #0]
 800724a:	4b25      	ldr	r3, [pc, #148]	@ (80072e0 <alarm_view_mode+0x538>)
 800724c:	213c      	movs	r1, #60	@ 0x3c
 800724e:	20c8      	movs	r0, #200	@ 0xc8
 8007250:	f003 fc0a 	bl	800aa68 <Paint_DrawNum>
            Paint_DrawNum(210, 60, alarm_view_mode->sParam_data_alarm_setup_mode_4->dow_dom%10, &Font16, BLACK, WHITE);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	68db      	ldr	r3, [r3, #12]
 8007258:	791a      	ldrb	r2, [r3, #4]
 800725a:	4b23      	ldr	r3, [pc, #140]	@ (80072e8 <alarm_view_mode+0x540>)
 800725c:	fba3 1302 	umull	r1, r3, r3, r2
 8007260:	08d9      	lsrs	r1, r3, #3
 8007262:	460b      	mov	r3, r1
 8007264:	009b      	lsls	r3, r3, #2
 8007266:	440b      	add	r3, r1
 8007268:	005b      	lsls	r3, r3, #1
 800726a:	1ad3      	subs	r3, r2, r3
 800726c:	b2db      	uxtb	r3, r3
 800726e:	461a      	mov	r2, r3
 8007270:	23ff      	movs	r3, #255	@ 0xff
 8007272:	9301      	str	r3, [sp, #4]
 8007274:	2300      	movs	r3, #0
 8007276:	9300      	str	r3, [sp, #0]
 8007278:	4b19      	ldr	r3, [pc, #100]	@ (80072e0 <alarm_view_mode+0x538>)
 800727a:	213c      	movs	r1, #60	@ 0x3c
 800727c:	20d2      	movs	r0, #210	@ 0xd2
 800727e:	f003 fbf3 	bl	800aa68 <Paint_DrawNum>
            Paint_DrawString_EN(230, 60, "DT", &Font16, BLACK, WHITE);
 8007282:	23ff      	movs	r3, #255	@ 0xff
 8007284:	9301      	str	r3, [sp, #4]
 8007286:	2300      	movs	r3, #0
 8007288:	9300      	str	r3, [sp, #0]
 800728a:	4b15      	ldr	r3, [pc, #84]	@ (80072e0 <alarm_view_mode+0x538>)
 800728c:	4a18      	ldr	r2, [pc, #96]	@ (80072f0 <alarm_view_mode+0x548>)
 800728e:	213c      	movs	r1, #60	@ 0x3c
 8007290:	20e6      	movs	r0, #230	@ 0xe6
 8007292:	f003 fb95 	bl	800a9c0 <Paint_DrawString_EN>
            break;
 8007296:	e002      	b.n	800729e <alarm_view_mode+0x4f6>
            break;
 8007298:	bf00      	nop
 800729a:	e000      	b.n	800729e <alarm_view_mode+0x4f6>
            break;
 800729c:	bf00      	nop
        }
        //parameter 5
    	Paint_DrawString_EN(10, 80, "5.", &Font16, BLACK, WHITE);
 800729e:	23ff      	movs	r3, #255	@ 0xff
 80072a0:	9301      	str	r3, [sp, #4]
 80072a2:	2300      	movs	r3, #0
 80072a4:	9300      	str	r3, [sp, #0]
 80072a6:	4b0e      	ldr	r3, [pc, #56]	@ (80072e0 <alarm_view_mode+0x538>)
 80072a8:	4a13      	ldr	r2, [pc, #76]	@ (80072f8 <alarm_view_mode+0x550>)
 80072aa:	2150      	movs	r1, #80	@ 0x50
 80072ac:	200a      	movs	r0, #10
 80072ae:	f003 fb87 	bl	800a9c0 <Paint_DrawString_EN>
        drawn_alarm_view_mode(140, 80, alarm_view_mode->sParam_data_alarm_setup_mode_5, Font16);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6919      	ldr	r1, [r3, #16]
 80072b6:	4b0a      	ldr	r3, [pc, #40]	@ (80072e0 <alarm_view_mode+0x538>)
 80072b8:	685a      	ldr	r2, [r3, #4]
 80072ba:	9200      	str	r2, [sp, #0]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	460a      	mov	r2, r1
 80072c0:	2150      	movs	r1, #80	@ 0x50
 80072c2:	208c      	movs	r0, #140	@ 0x8c
 80072c4:	f001 fc38 	bl	8008b38 <drawn_alarm_view_mode>
        switch (alarm_view_mode->sParam_data_alarm_setup_mode_5->dy_dt)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	691b      	ldr	r3, [r3, #16]
 80072cc:	78db      	ldrb	r3, [r3, #3]
 80072ce:	2b02      	cmp	r3, #2
 80072d0:	d07c      	beq.n	80073cc <alarm_view_mode+0x624>
 80072d2:	2b02      	cmp	r3, #2
 80072d4:	dc7c      	bgt.n	80073d0 <alarm_view_mode+0x628>
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d010      	beq.n	80072fc <alarm_view_mode+0x554>
 80072da:	2b01      	cmp	r3, #1
 80072dc:	d042      	beq.n	8007364 <alarm_view_mode+0x5bc>
            Paint_DrawString_EN(230, 80, "DY", &Font16, BLACK, WHITE);
            break;
        case NOT_USED_MODE:
            break;
        default:
            break;
 80072de:	e077      	b.n	80073d0 <alarm_view_mode+0x628>
 80072e0:	20000274 	.word	0x20000274
 80072e4:	0800be5c 	.word	0x0800be5c
 80072e8:	cccccccd 	.word	0xcccccccd
 80072ec:	0800be50 	.word	0x0800be50
 80072f0:	0800be54 	.word	0x0800be54
 80072f4:	0800be60 	.word	0x0800be60
 80072f8:	0800be64 	.word	0x0800be64
            Paint_DrawNum(200, 80, alarm_view_mode->sParam_data_alarm_setup_mode_5->dow_dom/10, &Font16, BLACK, WHITE);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	691b      	ldr	r3, [r3, #16]
 8007300:	791b      	ldrb	r3, [r3, #4]
 8007302:	4aa9      	ldr	r2, [pc, #676]	@ (80075a8 <alarm_view_mode+0x800>)
 8007304:	fba2 2303 	umull	r2, r3, r2, r3
 8007308:	08db      	lsrs	r3, r3, #3
 800730a:	b2db      	uxtb	r3, r3
 800730c:	461a      	mov	r2, r3
 800730e:	23ff      	movs	r3, #255	@ 0xff
 8007310:	9301      	str	r3, [sp, #4]
 8007312:	2300      	movs	r3, #0
 8007314:	9300      	str	r3, [sp, #0]
 8007316:	4ba5      	ldr	r3, [pc, #660]	@ (80075ac <alarm_view_mode+0x804>)
 8007318:	2150      	movs	r1, #80	@ 0x50
 800731a:	20c8      	movs	r0, #200	@ 0xc8
 800731c:	f003 fba4 	bl	800aa68 <Paint_DrawNum>
            Paint_DrawNum(210, 80, alarm_view_mode->sParam_data_alarm_setup_mode_5->dow_dom%10, &Font16, BLACK, WHITE);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	691b      	ldr	r3, [r3, #16]
 8007324:	791a      	ldrb	r2, [r3, #4]
 8007326:	4ba0      	ldr	r3, [pc, #640]	@ (80075a8 <alarm_view_mode+0x800>)
 8007328:	fba3 1302 	umull	r1, r3, r3, r2
 800732c:	08d9      	lsrs	r1, r3, #3
 800732e:	460b      	mov	r3, r1
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	440b      	add	r3, r1
 8007334:	005b      	lsls	r3, r3, #1
 8007336:	1ad3      	subs	r3, r2, r3
 8007338:	b2db      	uxtb	r3, r3
 800733a:	461a      	mov	r2, r3
 800733c:	23ff      	movs	r3, #255	@ 0xff
 800733e:	9301      	str	r3, [sp, #4]
 8007340:	2300      	movs	r3, #0
 8007342:	9300      	str	r3, [sp, #0]
 8007344:	4b99      	ldr	r3, [pc, #612]	@ (80075ac <alarm_view_mode+0x804>)
 8007346:	2150      	movs	r1, #80	@ 0x50
 8007348:	20d2      	movs	r0, #210	@ 0xd2
 800734a:	f003 fb8d 	bl	800aa68 <Paint_DrawNum>
            Paint_DrawString_EN(230, 80, "DY", &Font16, BLACK, WHITE);
 800734e:	23ff      	movs	r3, #255	@ 0xff
 8007350:	9301      	str	r3, [sp, #4]
 8007352:	2300      	movs	r3, #0
 8007354:	9300      	str	r3, [sp, #0]
 8007356:	4b95      	ldr	r3, [pc, #596]	@ (80075ac <alarm_view_mode+0x804>)
 8007358:	4a95      	ldr	r2, [pc, #596]	@ (80075b0 <alarm_view_mode+0x808>)
 800735a:	2150      	movs	r1, #80	@ 0x50
 800735c:	20e6      	movs	r0, #230	@ 0xe6
 800735e:	f003 fb2f 	bl	800a9c0 <Paint_DrawString_EN>
            break;
 8007362:	e036      	b.n	80073d2 <alarm_view_mode+0x62a>
            Paint_DrawNum(200, 80, alarm_view_mode->sParam_data_alarm_setup_mode_5->dow_dom/10, &Font16, BLACK, WHITE);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	691b      	ldr	r3, [r3, #16]
 8007368:	791b      	ldrb	r3, [r3, #4]
 800736a:	4a8f      	ldr	r2, [pc, #572]	@ (80075a8 <alarm_view_mode+0x800>)
 800736c:	fba2 2303 	umull	r2, r3, r2, r3
 8007370:	08db      	lsrs	r3, r3, #3
 8007372:	b2db      	uxtb	r3, r3
 8007374:	461a      	mov	r2, r3
 8007376:	23ff      	movs	r3, #255	@ 0xff
 8007378:	9301      	str	r3, [sp, #4]
 800737a:	2300      	movs	r3, #0
 800737c:	9300      	str	r3, [sp, #0]
 800737e:	4b8b      	ldr	r3, [pc, #556]	@ (80075ac <alarm_view_mode+0x804>)
 8007380:	2150      	movs	r1, #80	@ 0x50
 8007382:	20c8      	movs	r0, #200	@ 0xc8
 8007384:	f003 fb70 	bl	800aa68 <Paint_DrawNum>
            Paint_DrawNum(210, 80, alarm_view_mode->sParam_data_alarm_setup_mode_5->dow_dom%10, &Font16, BLACK, WHITE);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	691b      	ldr	r3, [r3, #16]
 800738c:	791a      	ldrb	r2, [r3, #4]
 800738e:	4b86      	ldr	r3, [pc, #536]	@ (80075a8 <alarm_view_mode+0x800>)
 8007390:	fba3 1302 	umull	r1, r3, r3, r2
 8007394:	08d9      	lsrs	r1, r3, #3
 8007396:	460b      	mov	r3, r1
 8007398:	009b      	lsls	r3, r3, #2
 800739a:	440b      	add	r3, r1
 800739c:	005b      	lsls	r3, r3, #1
 800739e:	1ad3      	subs	r3, r2, r3
 80073a0:	b2db      	uxtb	r3, r3
 80073a2:	461a      	mov	r2, r3
 80073a4:	23ff      	movs	r3, #255	@ 0xff
 80073a6:	9301      	str	r3, [sp, #4]
 80073a8:	2300      	movs	r3, #0
 80073aa:	9300      	str	r3, [sp, #0]
 80073ac:	4b7f      	ldr	r3, [pc, #508]	@ (80075ac <alarm_view_mode+0x804>)
 80073ae:	2150      	movs	r1, #80	@ 0x50
 80073b0:	20d2      	movs	r0, #210	@ 0xd2
 80073b2:	f003 fb59 	bl	800aa68 <Paint_DrawNum>
            Paint_DrawString_EN(230, 80, "DY", &Font16, BLACK, WHITE);
 80073b6:	23ff      	movs	r3, #255	@ 0xff
 80073b8:	9301      	str	r3, [sp, #4]
 80073ba:	2300      	movs	r3, #0
 80073bc:	9300      	str	r3, [sp, #0]
 80073be:	4b7b      	ldr	r3, [pc, #492]	@ (80075ac <alarm_view_mode+0x804>)
 80073c0:	4a7b      	ldr	r2, [pc, #492]	@ (80075b0 <alarm_view_mode+0x808>)
 80073c2:	2150      	movs	r1, #80	@ 0x50
 80073c4:	20e6      	movs	r0, #230	@ 0xe6
 80073c6:	f003 fafb 	bl	800a9c0 <Paint_DrawString_EN>
            break;
 80073ca:	e002      	b.n	80073d2 <alarm_view_mode+0x62a>
            break;
 80073cc:	bf00      	nop
 80073ce:	e000      	b.n	80073d2 <alarm_view_mode+0x62a>
            break;
 80073d0:	bf00      	nop
        }
    	EPD_2IN9_V2_Display_Base(BlackImage);
 80073d2:	6938      	ldr	r0, [r7, #16]
 80073d4:	f7ff fa5d 	bl	8006892 <EPD_2IN9_V2_Display_Base>
        flag_alarm_view_mode->flag_ALARM_SETUP_MODE  = 1;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2201      	movs	r2, #1
 80073dc:	70da      	strb	r2, [r3, #3]
        flag_alarm_view_mode->flag_SYSTEM_SETUP_MODE = 1;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2201      	movs	r2, #1
 80073e2:	711a      	strb	r2, [r3, #4]
        flag_alarm_view_mode->flag_DEFAULT_MODE      = 1;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2201      	movs	r2, #1
 80073e8:	701a      	strb	r2, [r3, #0]
        flag_alarm_view_mode->flag_TIME_SETUP_MODE   = 1;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2201      	movs	r2, #1
 80073ee:	705a      	strb	r2, [r3, #1]
	}
    UBYTE num = 3;
 80073f0:	2303      	movs	r3, #3
 80073f2:	77fb      	strb	r3, [r7, #31]
    uint32_t count_change_screen;
    if(system_state->alarm_view_cursor < 5)
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	791b      	ldrb	r3, [r3, #4]
 80073f8:	2b04      	cmp	r3, #4
 80073fa:	d802      	bhi.n	8007402 <alarm_view_mode+0x65a>
    {
        count_change_screen = 0;
 80073fc:	2300      	movs	r3, #0
 80073fe:	61bb      	str	r3, [r7, #24]
 8007400:	e001      	b.n	8007406 <alarm_view_mode+0x65e>
    }

    else
    {
        count_change_screen = 1;
 8007402:	2301      	movs	r3, #1
 8007404:	61bb      	str	r3, [r7, #24]
    }

    if(count_change_screen  == 0)
 8007406:	69bb      	ldr	r3, [r7, #24]
 8007408:	2b00      	cmp	r3, #0
 800740a:	f040 859f 	bne.w	8007f4c <alarm_view_mode+0x11a4>
    {
        for (;;) {
            draw_battery(battery_percentage);
 800740e:	887b      	ldrh	r3, [r7, #2]
 8007410:	4618      	mov	r0, r3
 8007412:	f002 fc7d 	bl	8009d10 <draw_battery>
            /*
            Paint_ClearWindows(150, 80, 150 + Font20.Width * 7, 80 + Font20.Height, WHITE);
            Paint_DrawTime(150, 80, &sPaint_time, &Font20, WHITE, BLACK);
        */
            switch (system_state->alarm_view_cursor)
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	791b      	ldrb	r3, [r3, #4]
 800741a:	2b04      	cmp	r3, #4
 800741c:	f200 8586 	bhi.w	8007f2c <alarm_view_mode+0x1184>
 8007420:	a201      	add	r2, pc, #4	@ (adr r2, 8007428 <alarm_view_mode+0x680>)
 8007422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007426:	bf00      	nop
 8007428:	0800743d 	.word	0x0800743d
 800742c:	080079f9 	.word	0x080079f9
 8007430:	08007b5d 	.word	0x08007b5d
 8007434:	08007c9b 	.word	0x08007c9b
 8007438:	08007df1 	.word	0x08007df1
            {
                case 0:
                //parameter 1
                Paint_ClearWindows(10, 0, 255, Font16.Height, WHITE);
 800743c:	4b5b      	ldr	r3, [pc, #364]	@ (80075ac <alarm_view_mode+0x804>)
 800743e:	88db      	ldrh	r3, [r3, #6]
 8007440:	22ff      	movs	r2, #255	@ 0xff
 8007442:	9200      	str	r2, [sp, #0]
 8007444:	22ff      	movs	r2, #255	@ 0xff
 8007446:	2100      	movs	r1, #0
 8007448:	200a      	movs	r0, #10
 800744a:	f003 f807 	bl	800a45c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 0, "1.", &Font16, WHITE, BLACK);
 800744e:	2300      	movs	r3, #0
 8007450:	9301      	str	r3, [sp, #4]
 8007452:	23ff      	movs	r3, #255	@ 0xff
 8007454:	9300      	str	r3, [sp, #0]
 8007456:	4b55      	ldr	r3, [pc, #340]	@ (80075ac <alarm_view_mode+0x804>)
 8007458:	4a56      	ldr	r2, [pc, #344]	@ (80075b4 <alarm_view_mode+0x80c>)
 800745a:	2100      	movs	r1, #0
 800745c:	200a      	movs	r0, #10
 800745e:	f003 faaf 	bl	800a9c0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 0, alarm_view_mode->sParam_data_alarm_setup_mode_1, Font16);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6819      	ldr	r1, [r3, #0]
 8007466:	4b51      	ldr	r3, [pc, #324]	@ (80075ac <alarm_view_mode+0x804>)
 8007468:	685a      	ldr	r2, [r3, #4]
 800746a:	9200      	str	r2, [sp, #0]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	460a      	mov	r2, r1
 8007470:	2100      	movs	r1, #0
 8007472:	208c      	movs	r0, #140	@ 0x8c
 8007474:	f001 fb60 	bl	8008b38 <drawn_alarm_view_mode>
                switch (alarm_view_mode->sParam_data_alarm_setup_mode_1->dy_dt)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	78db      	ldrb	r3, [r3, #3]
 800747e:	2b02      	cmp	r3, #2
 8007480:	d06e      	beq.n	8007560 <alarm_view_mode+0x7b8>
 8007482:	2b02      	cmp	r3, #2
 8007484:	dc6e      	bgt.n	8007564 <alarm_view_mode+0x7bc>
 8007486:	2b00      	cmp	r3, #0
 8007488:	d002      	beq.n	8007490 <alarm_view_mode+0x6e8>
 800748a:	2b01      	cmp	r3, #1
 800748c:	d034      	beq.n	80074f8 <alarm_view_mode+0x750>
                        Paint_DrawString_EN(230, 0, "DT", &Font16, BLACK, WHITE);
                        break;
                    case NOT_USED_MODE:
                        break;
                    default:
                        break;
 800748e:	e069      	b.n	8007564 <alarm_view_mode+0x7bc>
                        Paint_DrawNum(200, 0, alarm_view_mode->sParam_data_alarm_setup_mode_1->dow_dom/10, &Font16, BLACK, WHITE);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	791b      	ldrb	r3, [r3, #4]
 8007496:	4a44      	ldr	r2, [pc, #272]	@ (80075a8 <alarm_view_mode+0x800>)
 8007498:	fba2 2303 	umull	r2, r3, r2, r3
 800749c:	08db      	lsrs	r3, r3, #3
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	461a      	mov	r2, r3
 80074a2:	23ff      	movs	r3, #255	@ 0xff
 80074a4:	9301      	str	r3, [sp, #4]
 80074a6:	2300      	movs	r3, #0
 80074a8:	9300      	str	r3, [sp, #0]
 80074aa:	4b40      	ldr	r3, [pc, #256]	@ (80075ac <alarm_view_mode+0x804>)
 80074ac:	2100      	movs	r1, #0
 80074ae:	20c8      	movs	r0, #200	@ 0xc8
 80074b0:	f003 fada 	bl	800aa68 <Paint_DrawNum>
                        Paint_DrawNum(210, 0, alarm_view_mode->sParam_data_alarm_setup_mode_1->dow_dom%10, &Font16, BLACK, WHITE);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	791a      	ldrb	r2, [r3, #4]
 80074ba:	4b3b      	ldr	r3, [pc, #236]	@ (80075a8 <alarm_view_mode+0x800>)
 80074bc:	fba3 1302 	umull	r1, r3, r3, r2
 80074c0:	08d9      	lsrs	r1, r3, #3
 80074c2:	460b      	mov	r3, r1
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	440b      	add	r3, r1
 80074c8:	005b      	lsls	r3, r3, #1
 80074ca:	1ad3      	subs	r3, r2, r3
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	461a      	mov	r2, r3
 80074d0:	23ff      	movs	r3, #255	@ 0xff
 80074d2:	9301      	str	r3, [sp, #4]
 80074d4:	2300      	movs	r3, #0
 80074d6:	9300      	str	r3, [sp, #0]
 80074d8:	4b34      	ldr	r3, [pc, #208]	@ (80075ac <alarm_view_mode+0x804>)
 80074da:	2100      	movs	r1, #0
 80074dc:	20d2      	movs	r0, #210	@ 0xd2
 80074de:	f003 fac3 	bl	800aa68 <Paint_DrawNum>
                        Paint_DrawString_EN(230, 0, "DY", &Font16, BLACK, WHITE);
 80074e2:	23ff      	movs	r3, #255	@ 0xff
 80074e4:	9301      	str	r3, [sp, #4]
 80074e6:	2300      	movs	r3, #0
 80074e8:	9300      	str	r3, [sp, #0]
 80074ea:	4b30      	ldr	r3, [pc, #192]	@ (80075ac <alarm_view_mode+0x804>)
 80074ec:	4a30      	ldr	r2, [pc, #192]	@ (80075b0 <alarm_view_mode+0x808>)
 80074ee:	2100      	movs	r1, #0
 80074f0:	20e6      	movs	r0, #230	@ 0xe6
 80074f2:	f003 fa65 	bl	800a9c0 <Paint_DrawString_EN>
                        break;
 80074f6:	e036      	b.n	8007566 <alarm_view_mode+0x7be>
                        Paint_DrawNum(200, 0, alarm_view_mode->sParam_data_alarm_setup_mode_1->dow_dom/10, &Font16, BLACK, WHITE);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	791b      	ldrb	r3, [r3, #4]
 80074fe:	4a2a      	ldr	r2, [pc, #168]	@ (80075a8 <alarm_view_mode+0x800>)
 8007500:	fba2 2303 	umull	r2, r3, r2, r3
 8007504:	08db      	lsrs	r3, r3, #3
 8007506:	b2db      	uxtb	r3, r3
 8007508:	461a      	mov	r2, r3
 800750a:	23ff      	movs	r3, #255	@ 0xff
 800750c:	9301      	str	r3, [sp, #4]
 800750e:	2300      	movs	r3, #0
 8007510:	9300      	str	r3, [sp, #0]
 8007512:	4b26      	ldr	r3, [pc, #152]	@ (80075ac <alarm_view_mode+0x804>)
 8007514:	2100      	movs	r1, #0
 8007516:	20c8      	movs	r0, #200	@ 0xc8
 8007518:	f003 faa6 	bl	800aa68 <Paint_DrawNum>
                        Paint_DrawNum(210, 0, alarm_view_mode->sParam_data_alarm_setup_mode_1->dow_dom%10, &Font16, BLACK, WHITE);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	791a      	ldrb	r2, [r3, #4]
 8007522:	4b21      	ldr	r3, [pc, #132]	@ (80075a8 <alarm_view_mode+0x800>)
 8007524:	fba3 1302 	umull	r1, r3, r3, r2
 8007528:	08d9      	lsrs	r1, r3, #3
 800752a:	460b      	mov	r3, r1
 800752c:	009b      	lsls	r3, r3, #2
 800752e:	440b      	add	r3, r1
 8007530:	005b      	lsls	r3, r3, #1
 8007532:	1ad3      	subs	r3, r2, r3
 8007534:	b2db      	uxtb	r3, r3
 8007536:	461a      	mov	r2, r3
 8007538:	23ff      	movs	r3, #255	@ 0xff
 800753a:	9301      	str	r3, [sp, #4]
 800753c:	2300      	movs	r3, #0
 800753e:	9300      	str	r3, [sp, #0]
 8007540:	4b1a      	ldr	r3, [pc, #104]	@ (80075ac <alarm_view_mode+0x804>)
 8007542:	2100      	movs	r1, #0
 8007544:	20d2      	movs	r0, #210	@ 0xd2
 8007546:	f003 fa8f 	bl	800aa68 <Paint_DrawNum>
                        Paint_DrawString_EN(230, 0, "DT", &Font16, BLACK, WHITE);
 800754a:	23ff      	movs	r3, #255	@ 0xff
 800754c:	9301      	str	r3, [sp, #4]
 800754e:	2300      	movs	r3, #0
 8007550:	9300      	str	r3, [sp, #0]
 8007552:	4b16      	ldr	r3, [pc, #88]	@ (80075ac <alarm_view_mode+0x804>)
 8007554:	4a18      	ldr	r2, [pc, #96]	@ (80075b8 <alarm_view_mode+0x810>)
 8007556:	2100      	movs	r1, #0
 8007558:	20e6      	movs	r0, #230	@ 0xe6
 800755a:	f003 fa31 	bl	800a9c0 <Paint_DrawString_EN>
                        break;
 800755e:	e002      	b.n	8007566 <alarm_view_mode+0x7be>
                        break;
 8007560:	bf00      	nop
 8007562:	e000      	b.n	8007566 <alarm_view_mode+0x7be>
                        break;
 8007564:	bf00      	nop
                    }
       //parameter 2
       Paint_DrawString_EN(10, 20, "2.", &Font16, BLACK, WHITE);
 8007566:	23ff      	movs	r3, #255	@ 0xff
 8007568:	9301      	str	r3, [sp, #4]
 800756a:	2300      	movs	r3, #0
 800756c:	9300      	str	r3, [sp, #0]
 800756e:	4b0f      	ldr	r3, [pc, #60]	@ (80075ac <alarm_view_mode+0x804>)
 8007570:	4a12      	ldr	r2, [pc, #72]	@ (80075bc <alarm_view_mode+0x814>)
 8007572:	2114      	movs	r1, #20
 8007574:	200a      	movs	r0, #10
 8007576:	f003 fa23 	bl	800a9c0 <Paint_DrawString_EN>
       drawn_alarm_view_mode(140, 20, alarm_view_mode->sParam_data_alarm_setup_mode_2, Font16);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6859      	ldr	r1, [r3, #4]
 800757e:	4b0b      	ldr	r3, [pc, #44]	@ (80075ac <alarm_view_mode+0x804>)
 8007580:	685a      	ldr	r2, [r3, #4]
 8007582:	9200      	str	r2, [sp, #0]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	460a      	mov	r2, r1
 8007588:	2114      	movs	r1, #20
 800758a:	208c      	movs	r0, #140	@ 0x8c
 800758c:	f001 fad4 	bl	8008b38 <drawn_alarm_view_mode>
       switch (alarm_view_mode->sParam_data_alarm_setup_mode_2->dy_dt)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	78db      	ldrb	r3, [r3, #3]
 8007596:	2b02      	cmp	r3, #2
 8007598:	d07a      	beq.n	8007690 <alarm_view_mode+0x8e8>
 800759a:	2b02      	cmp	r3, #2
 800759c:	dc7a      	bgt.n	8007694 <alarm_view_mode+0x8ec>
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d00e      	beq.n	80075c0 <alarm_view_mode+0x818>
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d040      	beq.n	8007628 <alarm_view_mode+0x880>
           Paint_DrawString_EN(230, 20, "DT", &Font16, BLACK, WHITE);
           break;
       case NOT_USED_MODE:
           break;
       default:
           break;
 80075a6:	e075      	b.n	8007694 <alarm_view_mode+0x8ec>
 80075a8:	cccccccd 	.word	0xcccccccd
 80075ac:	20000274 	.word	0x20000274
 80075b0:	0800be50 	.word	0x0800be50
 80075b4:	0800be4c 	.word	0x0800be4c
 80075b8:	0800be54 	.word	0x0800be54
 80075bc:	0800be58 	.word	0x0800be58
           Paint_DrawNum(200, 20, alarm_view_mode->sParam_data_alarm_setup_mode_2->dow_dom/10, &Font16, BLACK, WHITE);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	791b      	ldrb	r3, [r3, #4]
 80075c6:	4aa4      	ldr	r2, [pc, #656]	@ (8007858 <alarm_view_mode+0xab0>)
 80075c8:	fba2 2303 	umull	r2, r3, r2, r3
 80075cc:	08db      	lsrs	r3, r3, #3
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	461a      	mov	r2, r3
 80075d2:	23ff      	movs	r3, #255	@ 0xff
 80075d4:	9301      	str	r3, [sp, #4]
 80075d6:	2300      	movs	r3, #0
 80075d8:	9300      	str	r3, [sp, #0]
 80075da:	4ba0      	ldr	r3, [pc, #640]	@ (800785c <alarm_view_mode+0xab4>)
 80075dc:	2114      	movs	r1, #20
 80075de:	20c8      	movs	r0, #200	@ 0xc8
 80075e0:	f003 fa42 	bl	800aa68 <Paint_DrawNum>
           Paint_DrawNum(210, 20, alarm_view_mode->sParam_data_alarm_setup_mode_2->dow_dom%10, &Font16, BLACK, WHITE);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	791a      	ldrb	r2, [r3, #4]
 80075ea:	4b9b      	ldr	r3, [pc, #620]	@ (8007858 <alarm_view_mode+0xab0>)
 80075ec:	fba3 1302 	umull	r1, r3, r3, r2
 80075f0:	08d9      	lsrs	r1, r3, #3
 80075f2:	460b      	mov	r3, r1
 80075f4:	009b      	lsls	r3, r3, #2
 80075f6:	440b      	add	r3, r1
 80075f8:	005b      	lsls	r3, r3, #1
 80075fa:	1ad3      	subs	r3, r2, r3
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	461a      	mov	r2, r3
 8007600:	23ff      	movs	r3, #255	@ 0xff
 8007602:	9301      	str	r3, [sp, #4]
 8007604:	2300      	movs	r3, #0
 8007606:	9300      	str	r3, [sp, #0]
 8007608:	4b94      	ldr	r3, [pc, #592]	@ (800785c <alarm_view_mode+0xab4>)
 800760a:	2114      	movs	r1, #20
 800760c:	20d2      	movs	r0, #210	@ 0xd2
 800760e:	f003 fa2b 	bl	800aa68 <Paint_DrawNum>
           Paint_DrawString_EN(230, 20, "DY", &Font16, BLACK, WHITE);
 8007612:	23ff      	movs	r3, #255	@ 0xff
 8007614:	9301      	str	r3, [sp, #4]
 8007616:	2300      	movs	r3, #0
 8007618:	9300      	str	r3, [sp, #0]
 800761a:	4b90      	ldr	r3, [pc, #576]	@ (800785c <alarm_view_mode+0xab4>)
 800761c:	4a90      	ldr	r2, [pc, #576]	@ (8007860 <alarm_view_mode+0xab8>)
 800761e:	2114      	movs	r1, #20
 8007620:	20e6      	movs	r0, #230	@ 0xe6
 8007622:	f003 f9cd 	bl	800a9c0 <Paint_DrawString_EN>
           break;
 8007626:	e036      	b.n	8007696 <alarm_view_mode+0x8ee>
           Paint_DrawNum(200, 20, alarm_view_mode->sParam_data_alarm_setup_mode_2->dow_dom/10, &Font16, BLACK, WHITE);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	791b      	ldrb	r3, [r3, #4]
 800762e:	4a8a      	ldr	r2, [pc, #552]	@ (8007858 <alarm_view_mode+0xab0>)
 8007630:	fba2 2303 	umull	r2, r3, r2, r3
 8007634:	08db      	lsrs	r3, r3, #3
 8007636:	b2db      	uxtb	r3, r3
 8007638:	461a      	mov	r2, r3
 800763a:	23ff      	movs	r3, #255	@ 0xff
 800763c:	9301      	str	r3, [sp, #4]
 800763e:	2300      	movs	r3, #0
 8007640:	9300      	str	r3, [sp, #0]
 8007642:	4b86      	ldr	r3, [pc, #536]	@ (800785c <alarm_view_mode+0xab4>)
 8007644:	2114      	movs	r1, #20
 8007646:	20c8      	movs	r0, #200	@ 0xc8
 8007648:	f003 fa0e 	bl	800aa68 <Paint_DrawNum>
           Paint_DrawNum(210, 20, alarm_view_mode->sParam_data_alarm_setup_mode_2->dow_dom%10, &Font16, BLACK, WHITE);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	791a      	ldrb	r2, [r3, #4]
 8007652:	4b81      	ldr	r3, [pc, #516]	@ (8007858 <alarm_view_mode+0xab0>)
 8007654:	fba3 1302 	umull	r1, r3, r3, r2
 8007658:	08d9      	lsrs	r1, r3, #3
 800765a:	460b      	mov	r3, r1
 800765c:	009b      	lsls	r3, r3, #2
 800765e:	440b      	add	r3, r1
 8007660:	005b      	lsls	r3, r3, #1
 8007662:	1ad3      	subs	r3, r2, r3
 8007664:	b2db      	uxtb	r3, r3
 8007666:	461a      	mov	r2, r3
 8007668:	23ff      	movs	r3, #255	@ 0xff
 800766a:	9301      	str	r3, [sp, #4]
 800766c:	2300      	movs	r3, #0
 800766e:	9300      	str	r3, [sp, #0]
 8007670:	4b7a      	ldr	r3, [pc, #488]	@ (800785c <alarm_view_mode+0xab4>)
 8007672:	2114      	movs	r1, #20
 8007674:	20d2      	movs	r0, #210	@ 0xd2
 8007676:	f003 f9f7 	bl	800aa68 <Paint_DrawNum>
           Paint_DrawString_EN(230, 20, "DT", &Font16, BLACK, WHITE);
 800767a:	23ff      	movs	r3, #255	@ 0xff
 800767c:	9301      	str	r3, [sp, #4]
 800767e:	2300      	movs	r3, #0
 8007680:	9300      	str	r3, [sp, #0]
 8007682:	4b76      	ldr	r3, [pc, #472]	@ (800785c <alarm_view_mode+0xab4>)
 8007684:	4a77      	ldr	r2, [pc, #476]	@ (8007864 <alarm_view_mode+0xabc>)
 8007686:	2114      	movs	r1, #20
 8007688:	20e6      	movs	r0, #230	@ 0xe6
 800768a:	f003 f999 	bl	800a9c0 <Paint_DrawString_EN>
           break;
 800768e:	e002      	b.n	8007696 <alarm_view_mode+0x8ee>
           break;
 8007690:	bf00      	nop
 8007692:	e000      	b.n	8007696 <alarm_view_mode+0x8ee>
           break;
 8007694:	bf00      	nop
       }
       //parameter 3
       Paint_DrawString_EN(10, 40, "3.", &Font16, BLACK, WHITE);
 8007696:	23ff      	movs	r3, #255	@ 0xff
 8007698:	9301      	str	r3, [sp, #4]
 800769a:	2300      	movs	r3, #0
 800769c:	9300      	str	r3, [sp, #0]
 800769e:	4b6f      	ldr	r3, [pc, #444]	@ (800785c <alarm_view_mode+0xab4>)
 80076a0:	4a71      	ldr	r2, [pc, #452]	@ (8007868 <alarm_view_mode+0xac0>)
 80076a2:	2128      	movs	r1, #40	@ 0x28
 80076a4:	200a      	movs	r0, #10
 80076a6:	f003 f98b 	bl	800a9c0 <Paint_DrawString_EN>
       drawn_alarm_view_mode(140, 40, alarm_view_mode->sParam_data_alarm_setup_mode_3, Font16);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6899      	ldr	r1, [r3, #8]
 80076ae:	4b6b      	ldr	r3, [pc, #428]	@ (800785c <alarm_view_mode+0xab4>)
 80076b0:	685a      	ldr	r2, [r3, #4]
 80076b2:	9200      	str	r2, [sp, #0]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	460a      	mov	r2, r1
 80076b8:	2128      	movs	r1, #40	@ 0x28
 80076ba:	208c      	movs	r0, #140	@ 0x8c
 80076bc:	f001 fa3c 	bl	8008b38 <drawn_alarm_view_mode>
       switch (alarm_view_mode->sParam_data_alarm_setup_mode_3->dy_dt)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	78db      	ldrb	r3, [r3, #3]
 80076c6:	2b02      	cmp	r3, #2
 80076c8:	d06e      	beq.n	80077a8 <alarm_view_mode+0xa00>
 80076ca:	2b02      	cmp	r3, #2
 80076cc:	dc6e      	bgt.n	80077ac <alarm_view_mode+0xa04>
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d002      	beq.n	80076d8 <alarm_view_mode+0x930>
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d034      	beq.n	8007740 <alarm_view_mode+0x998>
           Paint_DrawString_EN(230, 40, "DT", &Font16, BLACK, WHITE);
           break;
       case NOT_USED_MODE:
           break;
       default:
           break;
 80076d6:	e069      	b.n	80077ac <alarm_view_mode+0xa04>
           Paint_DrawNum(200, 40, alarm_view_mode->sParam_data_alarm_setup_mode_3->dow_dom/10, &Font16, BLACK, WHITE);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	689b      	ldr	r3, [r3, #8]
 80076dc:	791b      	ldrb	r3, [r3, #4]
 80076de:	4a5e      	ldr	r2, [pc, #376]	@ (8007858 <alarm_view_mode+0xab0>)
 80076e0:	fba2 2303 	umull	r2, r3, r2, r3
 80076e4:	08db      	lsrs	r3, r3, #3
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	461a      	mov	r2, r3
 80076ea:	23ff      	movs	r3, #255	@ 0xff
 80076ec:	9301      	str	r3, [sp, #4]
 80076ee:	2300      	movs	r3, #0
 80076f0:	9300      	str	r3, [sp, #0]
 80076f2:	4b5a      	ldr	r3, [pc, #360]	@ (800785c <alarm_view_mode+0xab4>)
 80076f4:	2128      	movs	r1, #40	@ 0x28
 80076f6:	20c8      	movs	r0, #200	@ 0xc8
 80076f8:	f003 f9b6 	bl	800aa68 <Paint_DrawNum>
           Paint_DrawNum(210, 40, alarm_view_mode->sParam_data_alarm_setup_mode_3->dow_dom%10, &Font16, BLACK, WHITE);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	791a      	ldrb	r2, [r3, #4]
 8007702:	4b55      	ldr	r3, [pc, #340]	@ (8007858 <alarm_view_mode+0xab0>)
 8007704:	fba3 1302 	umull	r1, r3, r3, r2
 8007708:	08d9      	lsrs	r1, r3, #3
 800770a:	460b      	mov	r3, r1
 800770c:	009b      	lsls	r3, r3, #2
 800770e:	440b      	add	r3, r1
 8007710:	005b      	lsls	r3, r3, #1
 8007712:	1ad3      	subs	r3, r2, r3
 8007714:	b2db      	uxtb	r3, r3
 8007716:	461a      	mov	r2, r3
 8007718:	23ff      	movs	r3, #255	@ 0xff
 800771a:	9301      	str	r3, [sp, #4]
 800771c:	2300      	movs	r3, #0
 800771e:	9300      	str	r3, [sp, #0]
 8007720:	4b4e      	ldr	r3, [pc, #312]	@ (800785c <alarm_view_mode+0xab4>)
 8007722:	2128      	movs	r1, #40	@ 0x28
 8007724:	20d2      	movs	r0, #210	@ 0xd2
 8007726:	f003 f99f 	bl	800aa68 <Paint_DrawNum>
           Paint_DrawString_EN(230, 40, "DY", &Font16, BLACK, WHITE);
 800772a:	23ff      	movs	r3, #255	@ 0xff
 800772c:	9301      	str	r3, [sp, #4]
 800772e:	2300      	movs	r3, #0
 8007730:	9300      	str	r3, [sp, #0]
 8007732:	4b4a      	ldr	r3, [pc, #296]	@ (800785c <alarm_view_mode+0xab4>)
 8007734:	4a4a      	ldr	r2, [pc, #296]	@ (8007860 <alarm_view_mode+0xab8>)
 8007736:	2128      	movs	r1, #40	@ 0x28
 8007738:	20e6      	movs	r0, #230	@ 0xe6
 800773a:	f003 f941 	bl	800a9c0 <Paint_DrawString_EN>
           break;
 800773e:	e036      	b.n	80077ae <alarm_view_mode+0xa06>
           Paint_DrawNum(200, 40, alarm_view_mode->sParam_data_alarm_setup_mode_3->dow_dom/10, &Font16, BLACK, WHITE);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	791b      	ldrb	r3, [r3, #4]
 8007746:	4a44      	ldr	r2, [pc, #272]	@ (8007858 <alarm_view_mode+0xab0>)
 8007748:	fba2 2303 	umull	r2, r3, r2, r3
 800774c:	08db      	lsrs	r3, r3, #3
 800774e:	b2db      	uxtb	r3, r3
 8007750:	461a      	mov	r2, r3
 8007752:	23ff      	movs	r3, #255	@ 0xff
 8007754:	9301      	str	r3, [sp, #4]
 8007756:	2300      	movs	r3, #0
 8007758:	9300      	str	r3, [sp, #0]
 800775a:	4b40      	ldr	r3, [pc, #256]	@ (800785c <alarm_view_mode+0xab4>)
 800775c:	2128      	movs	r1, #40	@ 0x28
 800775e:	20c8      	movs	r0, #200	@ 0xc8
 8007760:	f003 f982 	bl	800aa68 <Paint_DrawNum>
           Paint_DrawNum(210, 40, alarm_view_mode->sParam_data_alarm_setup_mode_3->dow_dom%10, &Font16, BLACK, WHITE);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	791a      	ldrb	r2, [r3, #4]
 800776a:	4b3b      	ldr	r3, [pc, #236]	@ (8007858 <alarm_view_mode+0xab0>)
 800776c:	fba3 1302 	umull	r1, r3, r3, r2
 8007770:	08d9      	lsrs	r1, r3, #3
 8007772:	460b      	mov	r3, r1
 8007774:	009b      	lsls	r3, r3, #2
 8007776:	440b      	add	r3, r1
 8007778:	005b      	lsls	r3, r3, #1
 800777a:	1ad3      	subs	r3, r2, r3
 800777c:	b2db      	uxtb	r3, r3
 800777e:	461a      	mov	r2, r3
 8007780:	23ff      	movs	r3, #255	@ 0xff
 8007782:	9301      	str	r3, [sp, #4]
 8007784:	2300      	movs	r3, #0
 8007786:	9300      	str	r3, [sp, #0]
 8007788:	4b34      	ldr	r3, [pc, #208]	@ (800785c <alarm_view_mode+0xab4>)
 800778a:	2128      	movs	r1, #40	@ 0x28
 800778c:	20d2      	movs	r0, #210	@ 0xd2
 800778e:	f003 f96b 	bl	800aa68 <Paint_DrawNum>
           Paint_DrawString_EN(230, 40, "DT", &Font16, BLACK, WHITE);
 8007792:	23ff      	movs	r3, #255	@ 0xff
 8007794:	9301      	str	r3, [sp, #4]
 8007796:	2300      	movs	r3, #0
 8007798:	9300      	str	r3, [sp, #0]
 800779a:	4b30      	ldr	r3, [pc, #192]	@ (800785c <alarm_view_mode+0xab4>)
 800779c:	4a31      	ldr	r2, [pc, #196]	@ (8007864 <alarm_view_mode+0xabc>)
 800779e:	2128      	movs	r1, #40	@ 0x28
 80077a0:	20e6      	movs	r0, #230	@ 0xe6
 80077a2:	f003 f90d 	bl	800a9c0 <Paint_DrawString_EN>
           break;
 80077a6:	e002      	b.n	80077ae <alarm_view_mode+0xa06>
           break;
 80077a8:	bf00      	nop
 80077aa:	e000      	b.n	80077ae <alarm_view_mode+0xa06>
           break;
 80077ac:	bf00      	nop
       }
       //parameter 4
       Paint_DrawString_EN(10, 60, "4.", &Font16, BLACK, WHITE);
 80077ae:	23ff      	movs	r3, #255	@ 0xff
 80077b0:	9301      	str	r3, [sp, #4]
 80077b2:	2300      	movs	r3, #0
 80077b4:	9300      	str	r3, [sp, #0]
 80077b6:	4b29      	ldr	r3, [pc, #164]	@ (800785c <alarm_view_mode+0xab4>)
 80077b8:	4a2c      	ldr	r2, [pc, #176]	@ (800786c <alarm_view_mode+0xac4>)
 80077ba:	213c      	movs	r1, #60	@ 0x3c
 80077bc:	200a      	movs	r0, #10
 80077be:	f003 f8ff 	bl	800a9c0 <Paint_DrawString_EN>
       drawn_alarm_view_mode(140, 60, alarm_view_mode->sParam_data_alarm_setup_mode_4, Font16);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	68d9      	ldr	r1, [r3, #12]
 80077c6:	4b25      	ldr	r3, [pc, #148]	@ (800785c <alarm_view_mode+0xab4>)
 80077c8:	685a      	ldr	r2, [r3, #4]
 80077ca:	9200      	str	r2, [sp, #0]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	460a      	mov	r2, r1
 80077d0:	213c      	movs	r1, #60	@ 0x3c
 80077d2:	208c      	movs	r0, #140	@ 0x8c
 80077d4:	f001 f9b0 	bl	8008b38 <drawn_alarm_view_mode>
       switch (alarm_view_mode->sParam_data_alarm_setup_mode_4->dy_dt)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	68db      	ldr	r3, [r3, #12]
 80077dc:	78db      	ldrb	r3, [r3, #3]
 80077de:	2b02      	cmp	r3, #2
 80077e0:	d07a      	beq.n	80078d8 <alarm_view_mode+0xb30>
 80077e2:	2b02      	cmp	r3, #2
 80077e4:	dc7a      	bgt.n	80078dc <alarm_view_mode+0xb34>
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d002      	beq.n	80077f0 <alarm_view_mode+0xa48>
 80077ea:	2b01      	cmp	r3, #1
 80077ec:	d040      	beq.n	8007870 <alarm_view_mode+0xac8>
           Paint_DrawString_EN(230, 60, "DT", &Font16, BLACK, WHITE);
           break;
       case NOT_USED_MODE:
           break;
       default:
           break;
 80077ee:	e075      	b.n	80078dc <alarm_view_mode+0xb34>
           Paint_DrawNum(200, 60, alarm_view_mode->sParam_data_alarm_setup_mode_4->dow_dom/10, &Font16, BLACK, WHITE);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	68db      	ldr	r3, [r3, #12]
 80077f4:	791b      	ldrb	r3, [r3, #4]
 80077f6:	4a18      	ldr	r2, [pc, #96]	@ (8007858 <alarm_view_mode+0xab0>)
 80077f8:	fba2 2303 	umull	r2, r3, r2, r3
 80077fc:	08db      	lsrs	r3, r3, #3
 80077fe:	b2db      	uxtb	r3, r3
 8007800:	461a      	mov	r2, r3
 8007802:	23ff      	movs	r3, #255	@ 0xff
 8007804:	9301      	str	r3, [sp, #4]
 8007806:	2300      	movs	r3, #0
 8007808:	9300      	str	r3, [sp, #0]
 800780a:	4b14      	ldr	r3, [pc, #80]	@ (800785c <alarm_view_mode+0xab4>)
 800780c:	213c      	movs	r1, #60	@ 0x3c
 800780e:	20c8      	movs	r0, #200	@ 0xc8
 8007810:	f003 f92a 	bl	800aa68 <Paint_DrawNum>
           Paint_DrawNum(210, 60, alarm_view_mode->sParam_data_alarm_setup_mode_4->dow_dom%10, &Font16, BLACK, WHITE);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	791a      	ldrb	r2, [r3, #4]
 800781a:	4b0f      	ldr	r3, [pc, #60]	@ (8007858 <alarm_view_mode+0xab0>)
 800781c:	fba3 1302 	umull	r1, r3, r3, r2
 8007820:	08d9      	lsrs	r1, r3, #3
 8007822:	460b      	mov	r3, r1
 8007824:	009b      	lsls	r3, r3, #2
 8007826:	440b      	add	r3, r1
 8007828:	005b      	lsls	r3, r3, #1
 800782a:	1ad3      	subs	r3, r2, r3
 800782c:	b2db      	uxtb	r3, r3
 800782e:	461a      	mov	r2, r3
 8007830:	23ff      	movs	r3, #255	@ 0xff
 8007832:	9301      	str	r3, [sp, #4]
 8007834:	2300      	movs	r3, #0
 8007836:	9300      	str	r3, [sp, #0]
 8007838:	4b08      	ldr	r3, [pc, #32]	@ (800785c <alarm_view_mode+0xab4>)
 800783a:	213c      	movs	r1, #60	@ 0x3c
 800783c:	20d2      	movs	r0, #210	@ 0xd2
 800783e:	f003 f913 	bl	800aa68 <Paint_DrawNum>
           Paint_DrawString_EN(230, 60, "DY", &Font16, BLACK, WHITE);
 8007842:	23ff      	movs	r3, #255	@ 0xff
 8007844:	9301      	str	r3, [sp, #4]
 8007846:	2300      	movs	r3, #0
 8007848:	9300      	str	r3, [sp, #0]
 800784a:	4b04      	ldr	r3, [pc, #16]	@ (800785c <alarm_view_mode+0xab4>)
 800784c:	4a04      	ldr	r2, [pc, #16]	@ (8007860 <alarm_view_mode+0xab8>)
 800784e:	213c      	movs	r1, #60	@ 0x3c
 8007850:	20e6      	movs	r0, #230	@ 0xe6
 8007852:	f003 f8b5 	bl	800a9c0 <Paint_DrawString_EN>
           break;
 8007856:	e042      	b.n	80078de <alarm_view_mode+0xb36>
 8007858:	cccccccd 	.word	0xcccccccd
 800785c:	20000274 	.word	0x20000274
 8007860:	0800be50 	.word	0x0800be50
 8007864:	0800be54 	.word	0x0800be54
 8007868:	0800be5c 	.word	0x0800be5c
 800786c:	0800be60 	.word	0x0800be60
           Paint_DrawNum(200, 60, alarm_view_mode->sParam_data_alarm_setup_mode_4->dow_dom/10, &Font16, BLACK, WHITE);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	68db      	ldr	r3, [r3, #12]
 8007874:	791b      	ldrb	r3, [r3, #4]
 8007876:	4ab0      	ldr	r2, [pc, #704]	@ (8007b38 <alarm_view_mode+0xd90>)
 8007878:	fba2 2303 	umull	r2, r3, r2, r3
 800787c:	08db      	lsrs	r3, r3, #3
 800787e:	b2db      	uxtb	r3, r3
 8007880:	461a      	mov	r2, r3
 8007882:	23ff      	movs	r3, #255	@ 0xff
 8007884:	9301      	str	r3, [sp, #4]
 8007886:	2300      	movs	r3, #0
 8007888:	9300      	str	r3, [sp, #0]
 800788a:	4bac      	ldr	r3, [pc, #688]	@ (8007b3c <alarm_view_mode+0xd94>)
 800788c:	213c      	movs	r1, #60	@ 0x3c
 800788e:	20c8      	movs	r0, #200	@ 0xc8
 8007890:	f003 f8ea 	bl	800aa68 <Paint_DrawNum>
           Paint_DrawNum(210, 60, alarm_view_mode->sParam_data_alarm_setup_mode_4->dow_dom%10, &Font16, BLACK, WHITE);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	68db      	ldr	r3, [r3, #12]
 8007898:	791a      	ldrb	r2, [r3, #4]
 800789a:	4ba7      	ldr	r3, [pc, #668]	@ (8007b38 <alarm_view_mode+0xd90>)
 800789c:	fba3 1302 	umull	r1, r3, r3, r2
 80078a0:	08d9      	lsrs	r1, r3, #3
 80078a2:	460b      	mov	r3, r1
 80078a4:	009b      	lsls	r3, r3, #2
 80078a6:	440b      	add	r3, r1
 80078a8:	005b      	lsls	r3, r3, #1
 80078aa:	1ad3      	subs	r3, r2, r3
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	461a      	mov	r2, r3
 80078b0:	23ff      	movs	r3, #255	@ 0xff
 80078b2:	9301      	str	r3, [sp, #4]
 80078b4:	2300      	movs	r3, #0
 80078b6:	9300      	str	r3, [sp, #0]
 80078b8:	4ba0      	ldr	r3, [pc, #640]	@ (8007b3c <alarm_view_mode+0xd94>)
 80078ba:	213c      	movs	r1, #60	@ 0x3c
 80078bc:	20d2      	movs	r0, #210	@ 0xd2
 80078be:	f003 f8d3 	bl	800aa68 <Paint_DrawNum>
           Paint_DrawString_EN(230, 60, "DT", &Font16, BLACK, WHITE);
 80078c2:	23ff      	movs	r3, #255	@ 0xff
 80078c4:	9301      	str	r3, [sp, #4]
 80078c6:	2300      	movs	r3, #0
 80078c8:	9300      	str	r3, [sp, #0]
 80078ca:	4b9c      	ldr	r3, [pc, #624]	@ (8007b3c <alarm_view_mode+0xd94>)
 80078cc:	4a9c      	ldr	r2, [pc, #624]	@ (8007b40 <alarm_view_mode+0xd98>)
 80078ce:	213c      	movs	r1, #60	@ 0x3c
 80078d0:	20e6      	movs	r0, #230	@ 0xe6
 80078d2:	f003 f875 	bl	800a9c0 <Paint_DrawString_EN>
           break;
 80078d6:	e002      	b.n	80078de <alarm_view_mode+0xb36>
           break;
 80078d8:	bf00      	nop
 80078da:	e000      	b.n	80078de <alarm_view_mode+0xb36>
           break;
 80078dc:	bf00      	nop
       }
       //parameter 5
       Paint_DrawString_EN(10, 80, "5.", &Font16, BLACK, WHITE);
 80078de:	23ff      	movs	r3, #255	@ 0xff
 80078e0:	9301      	str	r3, [sp, #4]
 80078e2:	2300      	movs	r3, #0
 80078e4:	9300      	str	r3, [sp, #0]
 80078e6:	4b95      	ldr	r3, [pc, #596]	@ (8007b3c <alarm_view_mode+0xd94>)
 80078e8:	4a96      	ldr	r2, [pc, #600]	@ (8007b44 <alarm_view_mode+0xd9c>)
 80078ea:	2150      	movs	r1, #80	@ 0x50
 80078ec:	200a      	movs	r0, #10
 80078ee:	f003 f867 	bl	800a9c0 <Paint_DrawString_EN>
       drawn_alarm_view_mode(140, 80, alarm_view_mode->sParam_data_alarm_setup_mode_5, Font16);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6919      	ldr	r1, [r3, #16]
 80078f6:	4b91      	ldr	r3, [pc, #580]	@ (8007b3c <alarm_view_mode+0xd94>)
 80078f8:	685a      	ldr	r2, [r3, #4]
 80078fa:	9200      	str	r2, [sp, #0]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	460a      	mov	r2, r1
 8007900:	2150      	movs	r1, #80	@ 0x50
 8007902:	208c      	movs	r0, #140	@ 0x8c
 8007904:	f001 f918 	bl	8008b38 <drawn_alarm_view_mode>
       switch (alarm_view_mode->sParam_data_alarm_setup_mode_5->dy_dt)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	691b      	ldr	r3, [r3, #16]
 800790c:	78db      	ldrb	r3, [r3, #3]
 800790e:	2b02      	cmp	r3, #2
 8007910:	d06e      	beq.n	80079f0 <alarm_view_mode+0xc48>
 8007912:	2b02      	cmp	r3, #2
 8007914:	dc6e      	bgt.n	80079f4 <alarm_view_mode+0xc4c>
 8007916:	2b00      	cmp	r3, #0
 8007918:	d002      	beq.n	8007920 <alarm_view_mode+0xb78>
 800791a:	2b01      	cmp	r3, #1
 800791c:	d034      	beq.n	8007988 <alarm_view_mode+0xbe0>
           Paint_DrawString_EN(230, 80, "DY", &Font16, BLACK, WHITE);
           break;
       case NOT_USED_MODE:
           break;
       default:
           break;
 800791e:	e069      	b.n	80079f4 <alarm_view_mode+0xc4c>
           Paint_DrawNum(200, 80, alarm_view_mode->sParam_data_alarm_setup_mode_5->dow_dom/10, &Font16, BLACK, WHITE);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	691b      	ldr	r3, [r3, #16]
 8007924:	791b      	ldrb	r3, [r3, #4]
 8007926:	4a84      	ldr	r2, [pc, #528]	@ (8007b38 <alarm_view_mode+0xd90>)
 8007928:	fba2 2303 	umull	r2, r3, r2, r3
 800792c:	08db      	lsrs	r3, r3, #3
 800792e:	b2db      	uxtb	r3, r3
 8007930:	461a      	mov	r2, r3
 8007932:	23ff      	movs	r3, #255	@ 0xff
 8007934:	9301      	str	r3, [sp, #4]
 8007936:	2300      	movs	r3, #0
 8007938:	9300      	str	r3, [sp, #0]
 800793a:	4b80      	ldr	r3, [pc, #512]	@ (8007b3c <alarm_view_mode+0xd94>)
 800793c:	2150      	movs	r1, #80	@ 0x50
 800793e:	20c8      	movs	r0, #200	@ 0xc8
 8007940:	f003 f892 	bl	800aa68 <Paint_DrawNum>
           Paint_DrawNum(210, 80, alarm_view_mode->sParam_data_alarm_setup_mode_5->dow_dom%10, &Font16, BLACK, WHITE);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	691b      	ldr	r3, [r3, #16]
 8007948:	791a      	ldrb	r2, [r3, #4]
 800794a:	4b7b      	ldr	r3, [pc, #492]	@ (8007b38 <alarm_view_mode+0xd90>)
 800794c:	fba3 1302 	umull	r1, r3, r3, r2
 8007950:	08d9      	lsrs	r1, r3, #3
 8007952:	460b      	mov	r3, r1
 8007954:	009b      	lsls	r3, r3, #2
 8007956:	440b      	add	r3, r1
 8007958:	005b      	lsls	r3, r3, #1
 800795a:	1ad3      	subs	r3, r2, r3
 800795c:	b2db      	uxtb	r3, r3
 800795e:	461a      	mov	r2, r3
 8007960:	23ff      	movs	r3, #255	@ 0xff
 8007962:	9301      	str	r3, [sp, #4]
 8007964:	2300      	movs	r3, #0
 8007966:	9300      	str	r3, [sp, #0]
 8007968:	4b74      	ldr	r3, [pc, #464]	@ (8007b3c <alarm_view_mode+0xd94>)
 800796a:	2150      	movs	r1, #80	@ 0x50
 800796c:	20d2      	movs	r0, #210	@ 0xd2
 800796e:	f003 f87b 	bl	800aa68 <Paint_DrawNum>
           Paint_DrawString_EN(230, 80, "DY", &Font16, BLACK, WHITE);
 8007972:	23ff      	movs	r3, #255	@ 0xff
 8007974:	9301      	str	r3, [sp, #4]
 8007976:	2300      	movs	r3, #0
 8007978:	9300      	str	r3, [sp, #0]
 800797a:	4b70      	ldr	r3, [pc, #448]	@ (8007b3c <alarm_view_mode+0xd94>)
 800797c:	4a72      	ldr	r2, [pc, #456]	@ (8007b48 <alarm_view_mode+0xda0>)
 800797e:	2150      	movs	r1, #80	@ 0x50
 8007980:	20e6      	movs	r0, #230	@ 0xe6
 8007982:	f003 f81d 	bl	800a9c0 <Paint_DrawString_EN>
           break;
 8007986:	e036      	b.n	80079f6 <alarm_view_mode+0xc4e>
           Paint_DrawNum(200, 80, alarm_view_mode->sParam_data_alarm_setup_mode_5->dow_dom/10, &Font16, BLACK, WHITE);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	691b      	ldr	r3, [r3, #16]
 800798c:	791b      	ldrb	r3, [r3, #4]
 800798e:	4a6a      	ldr	r2, [pc, #424]	@ (8007b38 <alarm_view_mode+0xd90>)
 8007990:	fba2 2303 	umull	r2, r3, r2, r3
 8007994:	08db      	lsrs	r3, r3, #3
 8007996:	b2db      	uxtb	r3, r3
 8007998:	461a      	mov	r2, r3
 800799a:	23ff      	movs	r3, #255	@ 0xff
 800799c:	9301      	str	r3, [sp, #4]
 800799e:	2300      	movs	r3, #0
 80079a0:	9300      	str	r3, [sp, #0]
 80079a2:	4b66      	ldr	r3, [pc, #408]	@ (8007b3c <alarm_view_mode+0xd94>)
 80079a4:	2150      	movs	r1, #80	@ 0x50
 80079a6:	20c8      	movs	r0, #200	@ 0xc8
 80079a8:	f003 f85e 	bl	800aa68 <Paint_DrawNum>
           Paint_DrawNum(210, 80, alarm_view_mode->sParam_data_alarm_setup_mode_5->dow_dom%10, &Font16, BLACK, WHITE);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	691b      	ldr	r3, [r3, #16]
 80079b0:	791a      	ldrb	r2, [r3, #4]
 80079b2:	4b61      	ldr	r3, [pc, #388]	@ (8007b38 <alarm_view_mode+0xd90>)
 80079b4:	fba3 1302 	umull	r1, r3, r3, r2
 80079b8:	08d9      	lsrs	r1, r3, #3
 80079ba:	460b      	mov	r3, r1
 80079bc:	009b      	lsls	r3, r3, #2
 80079be:	440b      	add	r3, r1
 80079c0:	005b      	lsls	r3, r3, #1
 80079c2:	1ad3      	subs	r3, r2, r3
 80079c4:	b2db      	uxtb	r3, r3
 80079c6:	461a      	mov	r2, r3
 80079c8:	23ff      	movs	r3, #255	@ 0xff
 80079ca:	9301      	str	r3, [sp, #4]
 80079cc:	2300      	movs	r3, #0
 80079ce:	9300      	str	r3, [sp, #0]
 80079d0:	4b5a      	ldr	r3, [pc, #360]	@ (8007b3c <alarm_view_mode+0xd94>)
 80079d2:	2150      	movs	r1, #80	@ 0x50
 80079d4:	20d2      	movs	r0, #210	@ 0xd2
 80079d6:	f003 f847 	bl	800aa68 <Paint_DrawNum>
           Paint_DrawString_EN(230, 80, "DY", &Font16, BLACK, WHITE);
 80079da:	23ff      	movs	r3, #255	@ 0xff
 80079dc:	9301      	str	r3, [sp, #4]
 80079de:	2300      	movs	r3, #0
 80079e0:	9300      	str	r3, [sp, #0]
 80079e2:	4b56      	ldr	r3, [pc, #344]	@ (8007b3c <alarm_view_mode+0xd94>)
 80079e4:	4a58      	ldr	r2, [pc, #352]	@ (8007b48 <alarm_view_mode+0xda0>)
 80079e6:	2150      	movs	r1, #80	@ 0x50
 80079e8:	20e6      	movs	r0, #230	@ 0xe6
 80079ea:	f002 ffe9 	bl	800a9c0 <Paint_DrawString_EN>
           break;
 80079ee:	e002      	b.n	80079f6 <alarm_view_mode+0xc4e>
           break;
 80079f0:	bf00      	nop
 80079f2:	e29c      	b.n	8007f2e <alarm_view_mode+0x1186>
           break;
 80079f4:	bf00      	nop
       }

                break;
 80079f6:	e29a      	b.n	8007f2e <alarm_view_mode+0x1186>
        
                case 1:
                //parameter 1
                Paint_ClearWindows(10, 0, 200, Font16.Height, WHITE);
 80079f8:	4b50      	ldr	r3, [pc, #320]	@ (8007b3c <alarm_view_mode+0xd94>)
 80079fa:	88db      	ldrh	r3, [r3, #6]
 80079fc:	22ff      	movs	r2, #255	@ 0xff
 80079fe:	9200      	str	r2, [sp, #0]
 8007a00:	22c8      	movs	r2, #200	@ 0xc8
 8007a02:	2100      	movs	r1, #0
 8007a04:	200a      	movs	r0, #10
 8007a06:	f002 fd29 	bl	800a45c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 0, "1.", &Font16, BLACK, WHITE);
 8007a0a:	23ff      	movs	r3, #255	@ 0xff
 8007a0c:	9301      	str	r3, [sp, #4]
 8007a0e:	2300      	movs	r3, #0
 8007a10:	9300      	str	r3, [sp, #0]
 8007a12:	4b4a      	ldr	r3, [pc, #296]	@ (8007b3c <alarm_view_mode+0xd94>)
 8007a14:	4a4d      	ldr	r2, [pc, #308]	@ (8007b4c <alarm_view_mode+0xda4>)
 8007a16:	2100      	movs	r1, #0
 8007a18:	200a      	movs	r0, #10
 8007a1a:	f002 ffd1 	bl	800a9c0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 0, alarm_view_mode->sParam_data_alarm_setup_mode_1, Font16);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6819      	ldr	r1, [r3, #0]
 8007a22:	4b46      	ldr	r3, [pc, #280]	@ (8007b3c <alarm_view_mode+0xd94>)
 8007a24:	685a      	ldr	r2, [r3, #4]
 8007a26:	9200      	str	r2, [sp, #0]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	460a      	mov	r2, r1
 8007a2c:	2100      	movs	r1, #0
 8007a2e:	208c      	movs	r0, #140	@ 0x8c
 8007a30:	f001 f882 	bl	8008b38 <drawn_alarm_view_mode>
               
                //parameter 2
                Paint_ClearWindows(10, 20, 200, 20 + Font16.Height, WHITE);
 8007a34:	4b41      	ldr	r3, [pc, #260]	@ (8007b3c <alarm_view_mode+0xd94>)
 8007a36:	88db      	ldrh	r3, [r3, #6]
 8007a38:	3314      	adds	r3, #20
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	22ff      	movs	r2, #255	@ 0xff
 8007a3e:	9200      	str	r2, [sp, #0]
 8007a40:	22c8      	movs	r2, #200	@ 0xc8
 8007a42:	2114      	movs	r1, #20
 8007a44:	200a      	movs	r0, #10
 8007a46:	f002 fd09 	bl	800a45c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 20, "2.", &Font16, WHITE, BLACK);
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	9301      	str	r3, [sp, #4]
 8007a4e:	23ff      	movs	r3, #255	@ 0xff
 8007a50:	9300      	str	r3, [sp, #0]
 8007a52:	4b3a      	ldr	r3, [pc, #232]	@ (8007b3c <alarm_view_mode+0xd94>)
 8007a54:	4a3e      	ldr	r2, [pc, #248]	@ (8007b50 <alarm_view_mode+0xda8>)
 8007a56:	2114      	movs	r1, #20
 8007a58:	200a      	movs	r0, #10
 8007a5a:	f002 ffb1 	bl	800a9c0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 20, alarm_view_mode->sParam_data_alarm_setup_mode_2, Font16);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6859      	ldr	r1, [r3, #4]
 8007a62:	4b36      	ldr	r3, [pc, #216]	@ (8007b3c <alarm_view_mode+0xd94>)
 8007a64:	685a      	ldr	r2, [r3, #4]
 8007a66:	9200      	str	r2, [sp, #0]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	460a      	mov	r2, r1
 8007a6c:	2114      	movs	r1, #20
 8007a6e:	208c      	movs	r0, #140	@ 0x8c
 8007a70:	f001 f862 	bl	8008b38 <drawn_alarm_view_mode>
                //parameter 3
                Paint_ClearWindows(10, 40, 200, 40 + Font16.Height, WHITE);
 8007a74:	4b31      	ldr	r3, [pc, #196]	@ (8007b3c <alarm_view_mode+0xd94>)
 8007a76:	88db      	ldrh	r3, [r3, #6]
 8007a78:	3328      	adds	r3, #40	@ 0x28
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	22ff      	movs	r2, #255	@ 0xff
 8007a7e:	9200      	str	r2, [sp, #0]
 8007a80:	22c8      	movs	r2, #200	@ 0xc8
 8007a82:	2128      	movs	r1, #40	@ 0x28
 8007a84:	200a      	movs	r0, #10
 8007a86:	f002 fce9 	bl	800a45c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 40, "3.", &Font16, BLACK, WHITE);
 8007a8a:	23ff      	movs	r3, #255	@ 0xff
 8007a8c:	9301      	str	r3, [sp, #4]
 8007a8e:	2300      	movs	r3, #0
 8007a90:	9300      	str	r3, [sp, #0]
 8007a92:	4b2a      	ldr	r3, [pc, #168]	@ (8007b3c <alarm_view_mode+0xd94>)
 8007a94:	4a2f      	ldr	r2, [pc, #188]	@ (8007b54 <alarm_view_mode+0xdac>)
 8007a96:	2128      	movs	r1, #40	@ 0x28
 8007a98:	200a      	movs	r0, #10
 8007a9a:	f002 ff91 	bl	800a9c0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 40, alarm_view_mode->sParam_data_alarm_setup_mode_3, Font16);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6899      	ldr	r1, [r3, #8]
 8007aa2:	4b26      	ldr	r3, [pc, #152]	@ (8007b3c <alarm_view_mode+0xd94>)
 8007aa4:	685a      	ldr	r2, [r3, #4]
 8007aa6:	9200      	str	r2, [sp, #0]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	460a      	mov	r2, r1
 8007aac:	2128      	movs	r1, #40	@ 0x28
 8007aae:	208c      	movs	r0, #140	@ 0x8c
 8007ab0:	f001 f842 	bl	8008b38 <drawn_alarm_view_mode>
                //parameter 4
                Paint_ClearWindows(10, 60, 200, 60 + Font16.Height, WHITE);
 8007ab4:	4b21      	ldr	r3, [pc, #132]	@ (8007b3c <alarm_view_mode+0xd94>)
 8007ab6:	88db      	ldrh	r3, [r3, #6]
 8007ab8:	333c      	adds	r3, #60	@ 0x3c
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	22ff      	movs	r2, #255	@ 0xff
 8007abe:	9200      	str	r2, [sp, #0]
 8007ac0:	22c8      	movs	r2, #200	@ 0xc8
 8007ac2:	213c      	movs	r1, #60	@ 0x3c
 8007ac4:	200a      	movs	r0, #10
 8007ac6:	f002 fcc9 	bl	800a45c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 60, "4.", &Font16, BLACK, WHITE);
 8007aca:	23ff      	movs	r3, #255	@ 0xff
 8007acc:	9301      	str	r3, [sp, #4]
 8007ace:	2300      	movs	r3, #0
 8007ad0:	9300      	str	r3, [sp, #0]
 8007ad2:	4b1a      	ldr	r3, [pc, #104]	@ (8007b3c <alarm_view_mode+0xd94>)
 8007ad4:	4a20      	ldr	r2, [pc, #128]	@ (8007b58 <alarm_view_mode+0xdb0>)
 8007ad6:	213c      	movs	r1, #60	@ 0x3c
 8007ad8:	200a      	movs	r0, #10
 8007ada:	f002 ff71 	bl	800a9c0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 60, alarm_view_mode->sParam_data_alarm_setup_mode_4, Font16);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	68d9      	ldr	r1, [r3, #12]
 8007ae2:	4b16      	ldr	r3, [pc, #88]	@ (8007b3c <alarm_view_mode+0xd94>)
 8007ae4:	685a      	ldr	r2, [r3, #4]
 8007ae6:	9200      	str	r2, [sp, #0]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	460a      	mov	r2, r1
 8007aec:	213c      	movs	r1, #60	@ 0x3c
 8007aee:	208c      	movs	r0, #140	@ 0x8c
 8007af0:	f001 f822 	bl	8008b38 <drawn_alarm_view_mode>
                //parameter 5
                Paint_ClearWindows(10, 80, 200, 80 + Font16.Height, WHITE);
 8007af4:	4b11      	ldr	r3, [pc, #68]	@ (8007b3c <alarm_view_mode+0xd94>)
 8007af6:	88db      	ldrh	r3, [r3, #6]
 8007af8:	3350      	adds	r3, #80	@ 0x50
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	22ff      	movs	r2, #255	@ 0xff
 8007afe:	9200      	str	r2, [sp, #0]
 8007b00:	22c8      	movs	r2, #200	@ 0xc8
 8007b02:	2150      	movs	r1, #80	@ 0x50
 8007b04:	200a      	movs	r0, #10
 8007b06:	f002 fca9 	bl	800a45c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 80, "5.", &Font16, BLACK, WHITE);
 8007b0a:	23ff      	movs	r3, #255	@ 0xff
 8007b0c:	9301      	str	r3, [sp, #4]
 8007b0e:	2300      	movs	r3, #0
 8007b10:	9300      	str	r3, [sp, #0]
 8007b12:	4b0a      	ldr	r3, [pc, #40]	@ (8007b3c <alarm_view_mode+0xd94>)
 8007b14:	4a0b      	ldr	r2, [pc, #44]	@ (8007b44 <alarm_view_mode+0xd9c>)
 8007b16:	2150      	movs	r1, #80	@ 0x50
 8007b18:	200a      	movs	r0, #10
 8007b1a:	f002 ff51 	bl	800a9c0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 80, alarm_view_mode->sParam_data_alarm_setup_mode_5, Font16);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6919      	ldr	r1, [r3, #16]
 8007b22:	4b06      	ldr	r3, [pc, #24]	@ (8007b3c <alarm_view_mode+0xd94>)
 8007b24:	685a      	ldr	r2, [r3, #4]
 8007b26:	9200      	str	r2, [sp, #0]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	460a      	mov	r2, r1
 8007b2c:	2150      	movs	r1, #80	@ 0x50
 8007b2e:	208c      	movs	r0, #140	@ 0x8c
 8007b30:	f001 f802 	bl	8008b38 <drawn_alarm_view_mode>
                break;
 8007b34:	e1fb      	b.n	8007f2e <alarm_view_mode+0x1186>
 8007b36:	bf00      	nop
 8007b38:	cccccccd 	.word	0xcccccccd
 8007b3c:	20000274 	.word	0x20000274
 8007b40:	0800be54 	.word	0x0800be54
 8007b44:	0800be64 	.word	0x0800be64
 8007b48:	0800be50 	.word	0x0800be50
 8007b4c:	0800be4c 	.word	0x0800be4c
 8007b50:	0800be58 	.word	0x0800be58
 8007b54:	0800be5c 	.word	0x0800be5c
 8007b58:	0800be60 	.word	0x0800be60
        
                case 2:
                //parameter 1
                Paint_ClearWindows(10, 0, 200, Font16.Height, WHITE);
 8007b5c:	4b9e      	ldr	r3, [pc, #632]	@ (8007dd8 <alarm_view_mode+0x1030>)
 8007b5e:	88db      	ldrh	r3, [r3, #6]
 8007b60:	22ff      	movs	r2, #255	@ 0xff
 8007b62:	9200      	str	r2, [sp, #0]
 8007b64:	22c8      	movs	r2, #200	@ 0xc8
 8007b66:	2100      	movs	r1, #0
 8007b68:	200a      	movs	r0, #10
 8007b6a:	f002 fc77 	bl	800a45c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 0, "1.", &Font16, BLACK, WHITE);
 8007b6e:	23ff      	movs	r3, #255	@ 0xff
 8007b70:	9301      	str	r3, [sp, #4]
 8007b72:	2300      	movs	r3, #0
 8007b74:	9300      	str	r3, [sp, #0]
 8007b76:	4b98      	ldr	r3, [pc, #608]	@ (8007dd8 <alarm_view_mode+0x1030>)
 8007b78:	4a98      	ldr	r2, [pc, #608]	@ (8007ddc <alarm_view_mode+0x1034>)
 8007b7a:	2100      	movs	r1, #0
 8007b7c:	200a      	movs	r0, #10
 8007b7e:	f002 ff1f 	bl	800a9c0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 0, alarm_view_mode->sParam_data_alarm_setup_mode_1, Font16);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6819      	ldr	r1, [r3, #0]
 8007b86:	4b94      	ldr	r3, [pc, #592]	@ (8007dd8 <alarm_view_mode+0x1030>)
 8007b88:	685a      	ldr	r2, [r3, #4]
 8007b8a:	9200      	str	r2, [sp, #0]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	460a      	mov	r2, r1
 8007b90:	2100      	movs	r1, #0
 8007b92:	208c      	movs	r0, #140	@ 0x8c
 8007b94:	f000 ffd0 	bl	8008b38 <drawn_alarm_view_mode>
                
                //parameter 2
                Paint_ClearWindows(10, 20, 200, 20 + Font16.Height, WHITE);
 8007b98:	4b8f      	ldr	r3, [pc, #572]	@ (8007dd8 <alarm_view_mode+0x1030>)
 8007b9a:	88db      	ldrh	r3, [r3, #6]
 8007b9c:	3314      	adds	r3, #20
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	22ff      	movs	r2, #255	@ 0xff
 8007ba2:	9200      	str	r2, [sp, #0]
 8007ba4:	22c8      	movs	r2, #200	@ 0xc8
 8007ba6:	2114      	movs	r1, #20
 8007ba8:	200a      	movs	r0, #10
 8007baa:	f002 fc57 	bl	800a45c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 20, "2.", &Font16, BLACK, WHITE);
 8007bae:	23ff      	movs	r3, #255	@ 0xff
 8007bb0:	9301      	str	r3, [sp, #4]
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	9300      	str	r3, [sp, #0]
 8007bb6:	4b88      	ldr	r3, [pc, #544]	@ (8007dd8 <alarm_view_mode+0x1030>)
 8007bb8:	4a89      	ldr	r2, [pc, #548]	@ (8007de0 <alarm_view_mode+0x1038>)
 8007bba:	2114      	movs	r1, #20
 8007bbc:	200a      	movs	r0, #10
 8007bbe:	f002 feff 	bl	800a9c0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 20, alarm_view_mode->sParam_data_alarm_setup_mode_2, Font16);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6859      	ldr	r1, [r3, #4]
 8007bc6:	4b84      	ldr	r3, [pc, #528]	@ (8007dd8 <alarm_view_mode+0x1030>)
 8007bc8:	685a      	ldr	r2, [r3, #4]
 8007bca:	9200      	str	r2, [sp, #0]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	460a      	mov	r2, r1
 8007bd0:	2114      	movs	r1, #20
 8007bd2:	208c      	movs	r0, #140	@ 0x8c
 8007bd4:	f000 ffb0 	bl	8008b38 <drawn_alarm_view_mode>

                //parameter 3
                Paint_ClearWindows(10, 40, 200, 40 + Font16.Height, WHITE);
 8007bd8:	4b7f      	ldr	r3, [pc, #508]	@ (8007dd8 <alarm_view_mode+0x1030>)
 8007bda:	88db      	ldrh	r3, [r3, #6]
 8007bdc:	3328      	adds	r3, #40	@ 0x28
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	22ff      	movs	r2, #255	@ 0xff
 8007be2:	9200      	str	r2, [sp, #0]
 8007be4:	22c8      	movs	r2, #200	@ 0xc8
 8007be6:	2128      	movs	r1, #40	@ 0x28
 8007be8:	200a      	movs	r0, #10
 8007bea:	f002 fc37 	bl	800a45c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 40, "3.", &Font16, WHITE, BLACK);
 8007bee:	2300      	movs	r3, #0
 8007bf0:	9301      	str	r3, [sp, #4]
 8007bf2:	23ff      	movs	r3, #255	@ 0xff
 8007bf4:	9300      	str	r3, [sp, #0]
 8007bf6:	4b78      	ldr	r3, [pc, #480]	@ (8007dd8 <alarm_view_mode+0x1030>)
 8007bf8:	4a7a      	ldr	r2, [pc, #488]	@ (8007de4 <alarm_view_mode+0x103c>)
 8007bfa:	2128      	movs	r1, #40	@ 0x28
 8007bfc:	200a      	movs	r0, #10
 8007bfe:	f002 fedf 	bl	800a9c0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 40, alarm_view_mode->sParam_data_alarm_setup_mode_3, Font16);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6899      	ldr	r1, [r3, #8]
 8007c06:	4b74      	ldr	r3, [pc, #464]	@ (8007dd8 <alarm_view_mode+0x1030>)
 8007c08:	685a      	ldr	r2, [r3, #4]
 8007c0a:	9200      	str	r2, [sp, #0]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	460a      	mov	r2, r1
 8007c10:	2128      	movs	r1, #40	@ 0x28
 8007c12:	208c      	movs	r0, #140	@ 0x8c
 8007c14:	f000 ff90 	bl	8008b38 <drawn_alarm_view_mode>

                //parameter 4
                Paint_ClearWindows(10, 60, 200, 60 + Font16.Height, WHITE);
 8007c18:	4b6f      	ldr	r3, [pc, #444]	@ (8007dd8 <alarm_view_mode+0x1030>)
 8007c1a:	88db      	ldrh	r3, [r3, #6]
 8007c1c:	333c      	adds	r3, #60	@ 0x3c
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	22ff      	movs	r2, #255	@ 0xff
 8007c22:	9200      	str	r2, [sp, #0]
 8007c24:	22c8      	movs	r2, #200	@ 0xc8
 8007c26:	213c      	movs	r1, #60	@ 0x3c
 8007c28:	200a      	movs	r0, #10
 8007c2a:	f002 fc17 	bl	800a45c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 60, "4.", &Font16, BLACK, WHITE);
 8007c2e:	23ff      	movs	r3, #255	@ 0xff
 8007c30:	9301      	str	r3, [sp, #4]
 8007c32:	2300      	movs	r3, #0
 8007c34:	9300      	str	r3, [sp, #0]
 8007c36:	4b68      	ldr	r3, [pc, #416]	@ (8007dd8 <alarm_view_mode+0x1030>)
 8007c38:	4a6b      	ldr	r2, [pc, #428]	@ (8007de8 <alarm_view_mode+0x1040>)
 8007c3a:	213c      	movs	r1, #60	@ 0x3c
 8007c3c:	200a      	movs	r0, #10
 8007c3e:	f002 febf 	bl	800a9c0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 60, alarm_view_mode->sParam_data_alarm_setup_mode_4, Font16);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	68d9      	ldr	r1, [r3, #12]
 8007c46:	4b64      	ldr	r3, [pc, #400]	@ (8007dd8 <alarm_view_mode+0x1030>)
 8007c48:	685a      	ldr	r2, [r3, #4]
 8007c4a:	9200      	str	r2, [sp, #0]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	460a      	mov	r2, r1
 8007c50:	213c      	movs	r1, #60	@ 0x3c
 8007c52:	208c      	movs	r0, #140	@ 0x8c
 8007c54:	f000 ff70 	bl	8008b38 <drawn_alarm_view_mode>

                //parameter 5
                Paint_ClearWindows(10, 80, 200, 80 + Font16.Height, WHITE);
 8007c58:	4b5f      	ldr	r3, [pc, #380]	@ (8007dd8 <alarm_view_mode+0x1030>)
 8007c5a:	88db      	ldrh	r3, [r3, #6]
 8007c5c:	3350      	adds	r3, #80	@ 0x50
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	22ff      	movs	r2, #255	@ 0xff
 8007c62:	9200      	str	r2, [sp, #0]
 8007c64:	22c8      	movs	r2, #200	@ 0xc8
 8007c66:	2150      	movs	r1, #80	@ 0x50
 8007c68:	200a      	movs	r0, #10
 8007c6a:	f002 fbf7 	bl	800a45c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 80, "5.", &Font16, BLACK, WHITE);
 8007c6e:	23ff      	movs	r3, #255	@ 0xff
 8007c70:	9301      	str	r3, [sp, #4]
 8007c72:	2300      	movs	r3, #0
 8007c74:	9300      	str	r3, [sp, #0]
 8007c76:	4b58      	ldr	r3, [pc, #352]	@ (8007dd8 <alarm_view_mode+0x1030>)
 8007c78:	4a5c      	ldr	r2, [pc, #368]	@ (8007dec <alarm_view_mode+0x1044>)
 8007c7a:	2150      	movs	r1, #80	@ 0x50
 8007c7c:	200a      	movs	r0, #10
 8007c7e:	f002 fe9f 	bl	800a9c0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 80, alarm_view_mode->sParam_data_alarm_setup_mode_5, Font16);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6919      	ldr	r1, [r3, #16]
 8007c86:	4b54      	ldr	r3, [pc, #336]	@ (8007dd8 <alarm_view_mode+0x1030>)
 8007c88:	685a      	ldr	r2, [r3, #4]
 8007c8a:	9200      	str	r2, [sp, #0]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	460a      	mov	r2, r1
 8007c90:	2150      	movs	r1, #80	@ 0x50
 8007c92:	208c      	movs	r0, #140	@ 0x8c
 8007c94:	f000 ff50 	bl	8008b38 <drawn_alarm_view_mode>

                break;
 8007c98:	e149      	b.n	8007f2e <alarm_view_mode+0x1186>
                case 3:
                //parameter 1
                Paint_ClearWindows(10, 0, 200, Font16.Height, WHITE);
 8007c9a:	4b4f      	ldr	r3, [pc, #316]	@ (8007dd8 <alarm_view_mode+0x1030>)
 8007c9c:	88db      	ldrh	r3, [r3, #6]
 8007c9e:	22ff      	movs	r2, #255	@ 0xff
 8007ca0:	9200      	str	r2, [sp, #0]
 8007ca2:	22c8      	movs	r2, #200	@ 0xc8
 8007ca4:	2100      	movs	r1, #0
 8007ca6:	200a      	movs	r0, #10
 8007ca8:	f002 fbd8 	bl	800a45c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 0, "1.", &Font16, BLACK, WHITE);
 8007cac:	23ff      	movs	r3, #255	@ 0xff
 8007cae:	9301      	str	r3, [sp, #4]
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	9300      	str	r3, [sp, #0]
 8007cb4:	4b48      	ldr	r3, [pc, #288]	@ (8007dd8 <alarm_view_mode+0x1030>)
 8007cb6:	4a49      	ldr	r2, [pc, #292]	@ (8007ddc <alarm_view_mode+0x1034>)
 8007cb8:	2100      	movs	r1, #0
 8007cba:	200a      	movs	r0, #10
 8007cbc:	f002 fe80 	bl	800a9c0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 0, alarm_view_mode->sParam_data_alarm_setup_mode_1, Font16);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6819      	ldr	r1, [r3, #0]
 8007cc4:	4b44      	ldr	r3, [pc, #272]	@ (8007dd8 <alarm_view_mode+0x1030>)
 8007cc6:	685a      	ldr	r2, [r3, #4]
 8007cc8:	9200      	str	r2, [sp, #0]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	460a      	mov	r2, r1
 8007cce:	2100      	movs	r1, #0
 8007cd0:	208c      	movs	r0, #140	@ 0x8c
 8007cd2:	f000 ff31 	bl	8008b38 <drawn_alarm_view_mode>

                //parameter 2
                Paint_ClearWindows(10, 20, 200, 20 + Font16.Height, WHITE);
 8007cd6:	4b40      	ldr	r3, [pc, #256]	@ (8007dd8 <alarm_view_mode+0x1030>)
 8007cd8:	88db      	ldrh	r3, [r3, #6]
 8007cda:	3314      	adds	r3, #20
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	22ff      	movs	r2, #255	@ 0xff
 8007ce0:	9200      	str	r2, [sp, #0]
 8007ce2:	22c8      	movs	r2, #200	@ 0xc8
 8007ce4:	2114      	movs	r1, #20
 8007ce6:	200a      	movs	r0, #10
 8007ce8:	f002 fbb8 	bl	800a45c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 20, "2.", &Font16, BLACK, WHITE);
 8007cec:	23ff      	movs	r3, #255	@ 0xff
 8007cee:	9301      	str	r3, [sp, #4]
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	9300      	str	r3, [sp, #0]
 8007cf4:	4b38      	ldr	r3, [pc, #224]	@ (8007dd8 <alarm_view_mode+0x1030>)
 8007cf6:	4a3a      	ldr	r2, [pc, #232]	@ (8007de0 <alarm_view_mode+0x1038>)
 8007cf8:	2114      	movs	r1, #20
 8007cfa:	200a      	movs	r0, #10
 8007cfc:	f002 fe60 	bl	800a9c0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 20, alarm_view_mode->sParam_data_alarm_setup_mode_2, Font16);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6859      	ldr	r1, [r3, #4]
 8007d04:	4b34      	ldr	r3, [pc, #208]	@ (8007dd8 <alarm_view_mode+0x1030>)
 8007d06:	685a      	ldr	r2, [r3, #4]
 8007d08:	9200      	str	r2, [sp, #0]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	460a      	mov	r2, r1
 8007d0e:	2114      	movs	r1, #20
 8007d10:	208c      	movs	r0, #140	@ 0x8c
 8007d12:	f000 ff11 	bl	8008b38 <drawn_alarm_view_mode>
                //parameter 3

                Paint_ClearWindows(10, 40, 200, 40 + Font16.Height, WHITE);
 8007d16:	4b30      	ldr	r3, [pc, #192]	@ (8007dd8 <alarm_view_mode+0x1030>)
 8007d18:	88db      	ldrh	r3, [r3, #6]
 8007d1a:	3328      	adds	r3, #40	@ 0x28
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	22ff      	movs	r2, #255	@ 0xff
 8007d20:	9200      	str	r2, [sp, #0]
 8007d22:	22c8      	movs	r2, #200	@ 0xc8
 8007d24:	2128      	movs	r1, #40	@ 0x28
 8007d26:	200a      	movs	r0, #10
 8007d28:	f002 fb98 	bl	800a45c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 40, "3.", &Font16, BLACK, WHITE);
 8007d2c:	23ff      	movs	r3, #255	@ 0xff
 8007d2e:	9301      	str	r3, [sp, #4]
 8007d30:	2300      	movs	r3, #0
 8007d32:	9300      	str	r3, [sp, #0]
 8007d34:	4b28      	ldr	r3, [pc, #160]	@ (8007dd8 <alarm_view_mode+0x1030>)
 8007d36:	4a2b      	ldr	r2, [pc, #172]	@ (8007de4 <alarm_view_mode+0x103c>)
 8007d38:	2128      	movs	r1, #40	@ 0x28
 8007d3a:	200a      	movs	r0, #10
 8007d3c:	f002 fe40 	bl	800a9c0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 40, alarm_view_mode->sParam_data_alarm_setup_mode_3, Font16);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6899      	ldr	r1, [r3, #8]
 8007d44:	4b24      	ldr	r3, [pc, #144]	@ (8007dd8 <alarm_view_mode+0x1030>)
 8007d46:	685a      	ldr	r2, [r3, #4]
 8007d48:	9200      	str	r2, [sp, #0]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	460a      	mov	r2, r1
 8007d4e:	2128      	movs	r1, #40	@ 0x28
 8007d50:	208c      	movs	r0, #140	@ 0x8c
 8007d52:	f000 fef1 	bl	8008b38 <drawn_alarm_view_mode>

                //parameter 4

                Paint_ClearWindows(10, 60, 200, 60 + Font16.Height, WHITE);
 8007d56:	4b20      	ldr	r3, [pc, #128]	@ (8007dd8 <alarm_view_mode+0x1030>)
 8007d58:	88db      	ldrh	r3, [r3, #6]
 8007d5a:	333c      	adds	r3, #60	@ 0x3c
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	22ff      	movs	r2, #255	@ 0xff
 8007d60:	9200      	str	r2, [sp, #0]
 8007d62:	22c8      	movs	r2, #200	@ 0xc8
 8007d64:	213c      	movs	r1, #60	@ 0x3c
 8007d66:	200a      	movs	r0, #10
 8007d68:	f002 fb78 	bl	800a45c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 60, "4.", &Font16, WHITE, BLACK);
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	9301      	str	r3, [sp, #4]
 8007d70:	23ff      	movs	r3, #255	@ 0xff
 8007d72:	9300      	str	r3, [sp, #0]
 8007d74:	4b18      	ldr	r3, [pc, #96]	@ (8007dd8 <alarm_view_mode+0x1030>)
 8007d76:	4a1c      	ldr	r2, [pc, #112]	@ (8007de8 <alarm_view_mode+0x1040>)
 8007d78:	213c      	movs	r1, #60	@ 0x3c
 8007d7a:	200a      	movs	r0, #10
 8007d7c:	f002 fe20 	bl	800a9c0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 60, alarm_view_mode->sParam_data_alarm_setup_mode_4, Font16);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	68d9      	ldr	r1, [r3, #12]
 8007d84:	4b14      	ldr	r3, [pc, #80]	@ (8007dd8 <alarm_view_mode+0x1030>)
 8007d86:	685a      	ldr	r2, [r3, #4]
 8007d88:	9200      	str	r2, [sp, #0]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	460a      	mov	r2, r1
 8007d8e:	213c      	movs	r1, #60	@ 0x3c
 8007d90:	208c      	movs	r0, #140	@ 0x8c
 8007d92:	f000 fed1 	bl	8008b38 <drawn_alarm_view_mode>

                //parameter 5
                Paint_ClearWindows(10, 80, 200, 80 + Font16.Height, WHITE);
 8007d96:	4b10      	ldr	r3, [pc, #64]	@ (8007dd8 <alarm_view_mode+0x1030>)
 8007d98:	88db      	ldrh	r3, [r3, #6]
 8007d9a:	3350      	adds	r3, #80	@ 0x50
 8007d9c:	b29b      	uxth	r3, r3
 8007d9e:	22ff      	movs	r2, #255	@ 0xff
 8007da0:	9200      	str	r2, [sp, #0]
 8007da2:	22c8      	movs	r2, #200	@ 0xc8
 8007da4:	2150      	movs	r1, #80	@ 0x50
 8007da6:	200a      	movs	r0, #10
 8007da8:	f002 fb58 	bl	800a45c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 80, "5.", &Font16, BLACK, WHITE);
 8007dac:	23ff      	movs	r3, #255	@ 0xff
 8007dae:	9301      	str	r3, [sp, #4]
 8007db0:	2300      	movs	r3, #0
 8007db2:	9300      	str	r3, [sp, #0]
 8007db4:	4b08      	ldr	r3, [pc, #32]	@ (8007dd8 <alarm_view_mode+0x1030>)
 8007db6:	4a0d      	ldr	r2, [pc, #52]	@ (8007dec <alarm_view_mode+0x1044>)
 8007db8:	2150      	movs	r1, #80	@ 0x50
 8007dba:	200a      	movs	r0, #10
 8007dbc:	f002 fe00 	bl	800a9c0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 80, alarm_view_mode->sParam_data_alarm_setup_mode_5, Font16);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6919      	ldr	r1, [r3, #16]
 8007dc4:	4b04      	ldr	r3, [pc, #16]	@ (8007dd8 <alarm_view_mode+0x1030>)
 8007dc6:	685a      	ldr	r2, [r3, #4]
 8007dc8:	9200      	str	r2, [sp, #0]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	460a      	mov	r2, r1
 8007dce:	2150      	movs	r1, #80	@ 0x50
 8007dd0:	208c      	movs	r0, #140	@ 0x8c
 8007dd2:	f000 feb1 	bl	8008b38 <drawn_alarm_view_mode>

                break;
 8007dd6:	e0aa      	b.n	8007f2e <alarm_view_mode+0x1186>
 8007dd8:	20000274 	.word	0x20000274
 8007ddc:	0800be4c 	.word	0x0800be4c
 8007de0:	0800be58 	.word	0x0800be58
 8007de4:	0800be5c 	.word	0x0800be5c
 8007de8:	0800be60 	.word	0x0800be60
 8007dec:	0800be64 	.word	0x0800be64
        
                case 4:
                //parameter 1
                Paint_ClearWindows(10, 0, 200, Font16.Height, WHITE);
 8007df0:	4b62      	ldr	r3, [pc, #392]	@ (8007f7c <alarm_view_mode+0x11d4>)
 8007df2:	88db      	ldrh	r3, [r3, #6]
 8007df4:	22ff      	movs	r2, #255	@ 0xff
 8007df6:	9200      	str	r2, [sp, #0]
 8007df8:	22c8      	movs	r2, #200	@ 0xc8
 8007dfa:	2100      	movs	r1, #0
 8007dfc:	200a      	movs	r0, #10
 8007dfe:	f002 fb2d 	bl	800a45c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 0, "1.", &Font16, BLACK, WHITE);
 8007e02:	23ff      	movs	r3, #255	@ 0xff
 8007e04:	9301      	str	r3, [sp, #4]
 8007e06:	2300      	movs	r3, #0
 8007e08:	9300      	str	r3, [sp, #0]
 8007e0a:	4b5c      	ldr	r3, [pc, #368]	@ (8007f7c <alarm_view_mode+0x11d4>)
 8007e0c:	4a5c      	ldr	r2, [pc, #368]	@ (8007f80 <alarm_view_mode+0x11d8>)
 8007e0e:	2100      	movs	r1, #0
 8007e10:	200a      	movs	r0, #10
 8007e12:	f002 fdd5 	bl	800a9c0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 0, alarm_view_mode->sParam_data_alarm_setup_mode_1, Font16);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6819      	ldr	r1, [r3, #0]
 8007e1a:	4b58      	ldr	r3, [pc, #352]	@ (8007f7c <alarm_view_mode+0x11d4>)
 8007e1c:	685a      	ldr	r2, [r3, #4]
 8007e1e:	9200      	str	r2, [sp, #0]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	460a      	mov	r2, r1
 8007e24:	2100      	movs	r1, #0
 8007e26:	208c      	movs	r0, #140	@ 0x8c
 8007e28:	f000 fe86 	bl	8008b38 <drawn_alarm_view_mode>

                //parameter 2
                Paint_ClearWindows(10, 20, 200, 20 + Font16.Height, WHITE);
 8007e2c:	4b53      	ldr	r3, [pc, #332]	@ (8007f7c <alarm_view_mode+0x11d4>)
 8007e2e:	88db      	ldrh	r3, [r3, #6]
 8007e30:	3314      	adds	r3, #20
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	22ff      	movs	r2, #255	@ 0xff
 8007e36:	9200      	str	r2, [sp, #0]
 8007e38:	22c8      	movs	r2, #200	@ 0xc8
 8007e3a:	2114      	movs	r1, #20
 8007e3c:	200a      	movs	r0, #10
 8007e3e:	f002 fb0d 	bl	800a45c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 20, "2.", &Font16, BLACK, WHITE);
 8007e42:	23ff      	movs	r3, #255	@ 0xff
 8007e44:	9301      	str	r3, [sp, #4]
 8007e46:	2300      	movs	r3, #0
 8007e48:	9300      	str	r3, [sp, #0]
 8007e4a:	4b4c      	ldr	r3, [pc, #304]	@ (8007f7c <alarm_view_mode+0x11d4>)
 8007e4c:	4a4d      	ldr	r2, [pc, #308]	@ (8007f84 <alarm_view_mode+0x11dc>)
 8007e4e:	2114      	movs	r1, #20
 8007e50:	200a      	movs	r0, #10
 8007e52:	f002 fdb5 	bl	800a9c0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 20, alarm_view_mode->sParam_data_alarm_setup_mode_2, Font16);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6859      	ldr	r1, [r3, #4]
 8007e5a:	4b48      	ldr	r3, [pc, #288]	@ (8007f7c <alarm_view_mode+0x11d4>)
 8007e5c:	685a      	ldr	r2, [r3, #4]
 8007e5e:	9200      	str	r2, [sp, #0]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	460a      	mov	r2, r1
 8007e64:	2114      	movs	r1, #20
 8007e66:	208c      	movs	r0, #140	@ 0x8c
 8007e68:	f000 fe66 	bl	8008b38 <drawn_alarm_view_mode>

                //parameter 3
                Paint_ClearWindows(10, 40, 200, 40 + Font16.Height, WHITE);
 8007e6c:	4b43      	ldr	r3, [pc, #268]	@ (8007f7c <alarm_view_mode+0x11d4>)
 8007e6e:	88db      	ldrh	r3, [r3, #6]
 8007e70:	3328      	adds	r3, #40	@ 0x28
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	22ff      	movs	r2, #255	@ 0xff
 8007e76:	9200      	str	r2, [sp, #0]
 8007e78:	22c8      	movs	r2, #200	@ 0xc8
 8007e7a:	2128      	movs	r1, #40	@ 0x28
 8007e7c:	200a      	movs	r0, #10
 8007e7e:	f002 faed 	bl	800a45c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 40, "3.", &Font16, BLACK, WHITE);
 8007e82:	23ff      	movs	r3, #255	@ 0xff
 8007e84:	9301      	str	r3, [sp, #4]
 8007e86:	2300      	movs	r3, #0
 8007e88:	9300      	str	r3, [sp, #0]
 8007e8a:	4b3c      	ldr	r3, [pc, #240]	@ (8007f7c <alarm_view_mode+0x11d4>)
 8007e8c:	4a3e      	ldr	r2, [pc, #248]	@ (8007f88 <alarm_view_mode+0x11e0>)
 8007e8e:	2128      	movs	r1, #40	@ 0x28
 8007e90:	200a      	movs	r0, #10
 8007e92:	f002 fd95 	bl	800a9c0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 40, alarm_view_mode->sParam_data_alarm_setup_mode_3, Font16);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6899      	ldr	r1, [r3, #8]
 8007e9a:	4b38      	ldr	r3, [pc, #224]	@ (8007f7c <alarm_view_mode+0x11d4>)
 8007e9c:	685a      	ldr	r2, [r3, #4]
 8007e9e:	9200      	str	r2, [sp, #0]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	460a      	mov	r2, r1
 8007ea4:	2128      	movs	r1, #40	@ 0x28
 8007ea6:	208c      	movs	r0, #140	@ 0x8c
 8007ea8:	f000 fe46 	bl	8008b38 <drawn_alarm_view_mode>

                //parameter 4
                Paint_ClearWindows(10, 60, 200, 60 + Font16.Height, WHITE);
 8007eac:	4b33      	ldr	r3, [pc, #204]	@ (8007f7c <alarm_view_mode+0x11d4>)
 8007eae:	88db      	ldrh	r3, [r3, #6]
 8007eb0:	333c      	adds	r3, #60	@ 0x3c
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	22ff      	movs	r2, #255	@ 0xff
 8007eb6:	9200      	str	r2, [sp, #0]
 8007eb8:	22c8      	movs	r2, #200	@ 0xc8
 8007eba:	213c      	movs	r1, #60	@ 0x3c
 8007ebc:	200a      	movs	r0, #10
 8007ebe:	f002 facd 	bl	800a45c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 60, "4.", &Font16, BLACK, WHITE);
 8007ec2:	23ff      	movs	r3, #255	@ 0xff
 8007ec4:	9301      	str	r3, [sp, #4]
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	9300      	str	r3, [sp, #0]
 8007eca:	4b2c      	ldr	r3, [pc, #176]	@ (8007f7c <alarm_view_mode+0x11d4>)
 8007ecc:	4a2f      	ldr	r2, [pc, #188]	@ (8007f8c <alarm_view_mode+0x11e4>)
 8007ece:	213c      	movs	r1, #60	@ 0x3c
 8007ed0:	200a      	movs	r0, #10
 8007ed2:	f002 fd75 	bl	800a9c0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 60, alarm_view_mode->sParam_data_alarm_setup_mode_4, Font16);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	68d9      	ldr	r1, [r3, #12]
 8007eda:	4b28      	ldr	r3, [pc, #160]	@ (8007f7c <alarm_view_mode+0x11d4>)
 8007edc:	685a      	ldr	r2, [r3, #4]
 8007ede:	9200      	str	r2, [sp, #0]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	460a      	mov	r2, r1
 8007ee4:	213c      	movs	r1, #60	@ 0x3c
 8007ee6:	208c      	movs	r0, #140	@ 0x8c
 8007ee8:	f000 fe26 	bl	8008b38 <drawn_alarm_view_mode>

                //parameter 5
                Paint_ClearWindows(10, 80, 200, 80 + Font16.Height, WHITE);
 8007eec:	4b23      	ldr	r3, [pc, #140]	@ (8007f7c <alarm_view_mode+0x11d4>)
 8007eee:	88db      	ldrh	r3, [r3, #6]
 8007ef0:	3350      	adds	r3, #80	@ 0x50
 8007ef2:	b29b      	uxth	r3, r3
 8007ef4:	22ff      	movs	r2, #255	@ 0xff
 8007ef6:	9200      	str	r2, [sp, #0]
 8007ef8:	22c8      	movs	r2, #200	@ 0xc8
 8007efa:	2150      	movs	r1, #80	@ 0x50
 8007efc:	200a      	movs	r0, #10
 8007efe:	f002 faad 	bl	800a45c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 80, "5.", &Font16, WHITE, BLACK);
 8007f02:	2300      	movs	r3, #0
 8007f04:	9301      	str	r3, [sp, #4]
 8007f06:	23ff      	movs	r3, #255	@ 0xff
 8007f08:	9300      	str	r3, [sp, #0]
 8007f0a:	4b1c      	ldr	r3, [pc, #112]	@ (8007f7c <alarm_view_mode+0x11d4>)
 8007f0c:	4a20      	ldr	r2, [pc, #128]	@ (8007f90 <alarm_view_mode+0x11e8>)
 8007f0e:	2150      	movs	r1, #80	@ 0x50
 8007f10:	200a      	movs	r0, #10
 8007f12:	f002 fd55 	bl	800a9c0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 80, alarm_view_mode->sParam_data_alarm_setup_mode_5, Font16);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6919      	ldr	r1, [r3, #16]
 8007f1a:	4b18      	ldr	r3, [pc, #96]	@ (8007f7c <alarm_view_mode+0x11d4>)
 8007f1c:	685a      	ldr	r2, [r3, #4]
 8007f1e:	9200      	str	r2, [sp, #0]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	460a      	mov	r2, r1
 8007f24:	2150      	movs	r1, #80	@ 0x50
 8007f26:	208c      	movs	r0, #140	@ 0x8c
 8007f28:	f000 fe06 	bl	8008b38 <drawn_alarm_view_mode>
                default: break;
 8007f2c:	bf00      	nop
            }

    num = num - 1;
 8007f2e:	7ffb      	ldrb	r3, [r7, #31]
 8007f30:	3b01      	subs	r3, #1
 8007f32:	77fb      	strb	r3, [r7, #31]
    if(num == 0) {
 8007f34:	7ffb      	ldrb	r3, [r7, #31]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d103      	bne.n	8007f42 <alarm_view_mode+0x119a>
        num = 3;
 8007f3a:	2303      	movs	r3, #3
 8007f3c:	77fb      	strb	r3, [r7, #31]
        break;
 8007f3e:	f000 bde3 	b.w	8008b08 <alarm_view_mode+0x1d60>
    }
	EPD_2IN9_V2_Display_Partial(BlackImage);
 8007f42:	6938      	ldr	r0, [r7, #16]
 8007f44:	f7fe fcd8 	bl	80068f8 <EPD_2IN9_V2_Display_Partial>
            draw_battery(battery_percentage);
 8007f48:	f7ff ba61 	b.w	800740e <alarm_view_mode+0x666>

    else
    {
        for (;;) 
        {
            draw_battery(battery_percentage);
 8007f4c:	887b      	ldrh	r3, [r7, #2]
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f001 fede 	bl	8009d10 <draw_battery>
            /*
            Paint_ClearWindows(150, 80, 150 + Font20.Width * 7, 80 + Font20.Height, WHITE);
            Paint_DrawTime(150, 80, &sPaint_time, &Font20, WHITE, BLACK);
        */
            switch (system_state->alarm_view_cursor)
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	791b      	ldrb	r3, [r3, #4]
 8007f58:	3b05      	subs	r3, #5
 8007f5a:	2b04      	cmp	r3, #4
 8007f5c:	f200 85c5 	bhi.w	8008aea <alarm_view_mode+0x1d42>
 8007f60:	a201      	add	r2, pc, #4	@ (adr r2, 8007f68 <alarm_view_mode+0x11c0>)
 8007f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f66:	bf00      	nop
 8007f68:	08007f95 	.word	0x08007f95
 8007f6c:	080085b5 	.word	0x080085b5
 8007f70:	08008719 	.word	0x08008719
 8007f74:	08008857 	.word	0x08008857
 8007f78:	080089ad 	.word	0x080089ad
 8007f7c:	20000274 	.word	0x20000274
 8007f80:	0800be4c 	.word	0x0800be4c
 8007f84:	0800be58 	.word	0x0800be58
 8007f88:	0800be5c 	.word	0x0800be5c
 8007f8c:	0800be60 	.word	0x0800be60
 8007f90:	0800be64 	.word	0x0800be64
            {
                case 5:
                //parameter 1
                Paint_ClearWindows(10, 0, 255, Font16.Height, WHITE);
 8007f94:	4bab      	ldr	r3, [pc, #684]	@ (8008244 <alarm_view_mode+0x149c>)
 8007f96:	88db      	ldrh	r3, [r3, #6]
 8007f98:	22ff      	movs	r2, #255	@ 0xff
 8007f9a:	9200      	str	r2, [sp, #0]
 8007f9c:	22ff      	movs	r2, #255	@ 0xff
 8007f9e:	2100      	movs	r1, #0
 8007fa0:	200a      	movs	r0, #10
 8007fa2:	f002 fa5b 	bl	800a45c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 0, "6.", &Font16, WHITE, BLACK);
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	9301      	str	r3, [sp, #4]
 8007faa:	23ff      	movs	r3, #255	@ 0xff
 8007fac:	9300      	str	r3, [sp, #0]
 8007fae:	4ba5      	ldr	r3, [pc, #660]	@ (8008244 <alarm_view_mode+0x149c>)
 8007fb0:	4aa5      	ldr	r2, [pc, #660]	@ (8008248 <alarm_view_mode+0x14a0>)
 8007fb2:	2100      	movs	r1, #0
 8007fb4:	200a      	movs	r0, #10
 8007fb6:	f002 fd03 	bl	800a9c0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 0, alarm_view_mode->sParam_data_alarm_setup_mode_6, Font16);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6959      	ldr	r1, [r3, #20]
 8007fbe:	4ba1      	ldr	r3, [pc, #644]	@ (8008244 <alarm_view_mode+0x149c>)
 8007fc0:	685a      	ldr	r2, [r3, #4]
 8007fc2:	9200      	str	r2, [sp, #0]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	460a      	mov	r2, r1
 8007fc8:	2100      	movs	r1, #0
 8007fca:	208c      	movs	r0, #140	@ 0x8c
 8007fcc:	f000 fdb4 	bl	8008b38 <drawn_alarm_view_mode>

                //parameter 2
                Paint_ClearWindows(10, 20, 255, 20 + Font16.Height, WHITE);
 8007fd0:	4b9c      	ldr	r3, [pc, #624]	@ (8008244 <alarm_view_mode+0x149c>)
 8007fd2:	88db      	ldrh	r3, [r3, #6]
 8007fd4:	3314      	adds	r3, #20
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	22ff      	movs	r2, #255	@ 0xff
 8007fda:	9200      	str	r2, [sp, #0]
 8007fdc:	22ff      	movs	r2, #255	@ 0xff
 8007fde:	2114      	movs	r1, #20
 8007fe0:	200a      	movs	r0, #10
 8007fe2:	f002 fa3b 	bl	800a45c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 20, "7.", &Font16, BLACK, WHITE);
 8007fe6:	23ff      	movs	r3, #255	@ 0xff
 8007fe8:	9301      	str	r3, [sp, #4]
 8007fea:	2300      	movs	r3, #0
 8007fec:	9300      	str	r3, [sp, #0]
 8007fee:	4b95      	ldr	r3, [pc, #596]	@ (8008244 <alarm_view_mode+0x149c>)
 8007ff0:	4a96      	ldr	r2, [pc, #600]	@ (800824c <alarm_view_mode+0x14a4>)
 8007ff2:	2114      	movs	r1, #20
 8007ff4:	200a      	movs	r0, #10
 8007ff6:	f002 fce3 	bl	800a9c0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 20, alarm_view_mode->sParam_data_alarm_setup_mode_7, Font16);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6999      	ldr	r1, [r3, #24]
 8007ffe:	4b91      	ldr	r3, [pc, #580]	@ (8008244 <alarm_view_mode+0x149c>)
 8008000:	685a      	ldr	r2, [r3, #4]
 8008002:	9200      	str	r2, [sp, #0]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	460a      	mov	r2, r1
 8008008:	2114      	movs	r1, #20
 800800a:	208c      	movs	r0, #140	@ 0x8c
 800800c:	f000 fd94 	bl	8008b38 <drawn_alarm_view_mode>

                //parameter 3
                Paint_ClearWindows(10, 40, 255, 40 + Font16.Height, WHITE);
 8008010:	4b8c      	ldr	r3, [pc, #560]	@ (8008244 <alarm_view_mode+0x149c>)
 8008012:	88db      	ldrh	r3, [r3, #6]
 8008014:	3328      	adds	r3, #40	@ 0x28
 8008016:	b29b      	uxth	r3, r3
 8008018:	22ff      	movs	r2, #255	@ 0xff
 800801a:	9200      	str	r2, [sp, #0]
 800801c:	22ff      	movs	r2, #255	@ 0xff
 800801e:	2128      	movs	r1, #40	@ 0x28
 8008020:	200a      	movs	r0, #10
 8008022:	f002 fa1b 	bl	800a45c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 40, "8.", &Font16, BLACK, WHITE);
 8008026:	23ff      	movs	r3, #255	@ 0xff
 8008028:	9301      	str	r3, [sp, #4]
 800802a:	2300      	movs	r3, #0
 800802c:	9300      	str	r3, [sp, #0]
 800802e:	4b85      	ldr	r3, [pc, #532]	@ (8008244 <alarm_view_mode+0x149c>)
 8008030:	4a87      	ldr	r2, [pc, #540]	@ (8008250 <alarm_view_mode+0x14a8>)
 8008032:	2128      	movs	r1, #40	@ 0x28
 8008034:	200a      	movs	r0, #10
 8008036:	f002 fcc3 	bl	800a9c0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 40, alarm_view_mode->sParam_data_alarm_setup_mode_8, Font16);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	69d9      	ldr	r1, [r3, #28]
 800803e:	4b81      	ldr	r3, [pc, #516]	@ (8008244 <alarm_view_mode+0x149c>)
 8008040:	685a      	ldr	r2, [r3, #4]
 8008042:	9200      	str	r2, [sp, #0]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	460a      	mov	r2, r1
 8008048:	2128      	movs	r1, #40	@ 0x28
 800804a:	208c      	movs	r0, #140	@ 0x8c
 800804c:	f000 fd74 	bl	8008b38 <drawn_alarm_view_mode>

                //parameter 4
                Paint_ClearWindows(10, 60, 255, 60 + Font16.Height, WHITE);
 8008050:	4b7c      	ldr	r3, [pc, #496]	@ (8008244 <alarm_view_mode+0x149c>)
 8008052:	88db      	ldrh	r3, [r3, #6]
 8008054:	333c      	adds	r3, #60	@ 0x3c
 8008056:	b29b      	uxth	r3, r3
 8008058:	22ff      	movs	r2, #255	@ 0xff
 800805a:	9200      	str	r2, [sp, #0]
 800805c:	22ff      	movs	r2, #255	@ 0xff
 800805e:	213c      	movs	r1, #60	@ 0x3c
 8008060:	200a      	movs	r0, #10
 8008062:	f002 f9fb 	bl	800a45c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 60, "9.", &Font16, BLACK, WHITE);
 8008066:	23ff      	movs	r3, #255	@ 0xff
 8008068:	9301      	str	r3, [sp, #4]
 800806a:	2300      	movs	r3, #0
 800806c:	9300      	str	r3, [sp, #0]
 800806e:	4b75      	ldr	r3, [pc, #468]	@ (8008244 <alarm_view_mode+0x149c>)
 8008070:	4a78      	ldr	r2, [pc, #480]	@ (8008254 <alarm_view_mode+0x14ac>)
 8008072:	213c      	movs	r1, #60	@ 0x3c
 8008074:	200a      	movs	r0, #10
 8008076:	f002 fca3 	bl	800a9c0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 60, alarm_view_mode->sParam_data_alarm_setup_mode_9, Font16);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6a19      	ldr	r1, [r3, #32]
 800807e:	4b71      	ldr	r3, [pc, #452]	@ (8008244 <alarm_view_mode+0x149c>)
 8008080:	685a      	ldr	r2, [r3, #4]
 8008082:	9200      	str	r2, [sp, #0]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	460a      	mov	r2, r1
 8008088:	213c      	movs	r1, #60	@ 0x3c
 800808a:	208c      	movs	r0, #140	@ 0x8c
 800808c:	f000 fd54 	bl	8008b38 <drawn_alarm_view_mode>

                //parameter 5
                Paint_ClearWindows(10, 80, 255, 80 + Font16.Height, WHITE);
 8008090:	4b6c      	ldr	r3, [pc, #432]	@ (8008244 <alarm_view_mode+0x149c>)
 8008092:	88db      	ldrh	r3, [r3, #6]
 8008094:	3350      	adds	r3, #80	@ 0x50
 8008096:	b29b      	uxth	r3, r3
 8008098:	22ff      	movs	r2, #255	@ 0xff
 800809a:	9200      	str	r2, [sp, #0]
 800809c:	22ff      	movs	r2, #255	@ 0xff
 800809e:	2150      	movs	r1, #80	@ 0x50
 80080a0:	200a      	movs	r0, #10
 80080a2:	f002 f9db 	bl	800a45c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 80, "10.", &Font16, BLACK, WHITE);
 80080a6:	23ff      	movs	r3, #255	@ 0xff
 80080a8:	9301      	str	r3, [sp, #4]
 80080aa:	2300      	movs	r3, #0
 80080ac:	9300      	str	r3, [sp, #0]
 80080ae:	4b65      	ldr	r3, [pc, #404]	@ (8008244 <alarm_view_mode+0x149c>)
 80080b0:	4a69      	ldr	r2, [pc, #420]	@ (8008258 <alarm_view_mode+0x14b0>)
 80080b2:	2150      	movs	r1, #80	@ 0x50
 80080b4:	200a      	movs	r0, #10
 80080b6:	f002 fc83 	bl	800a9c0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 80, alarm_view_mode->sParam_data_alarm_setup_mode_10, Font16);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80080be:	4b61      	ldr	r3, [pc, #388]	@ (8008244 <alarm_view_mode+0x149c>)
 80080c0:	685a      	ldr	r2, [r3, #4]
 80080c2:	9200      	str	r2, [sp, #0]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	460a      	mov	r2, r1
 80080c8:	2150      	movs	r1, #80	@ 0x50
 80080ca:	208c      	movs	r0, #140	@ 0x8c
 80080cc:	f000 fd34 	bl	8008b38 <drawn_alarm_view_mode>
                
                switch (alarm_view_mode->sParam_data_alarm_setup_mode_6->dy_dt)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	695b      	ldr	r3, [r3, #20]
 80080d4:	78db      	ldrb	r3, [r3, #3]
 80080d6:	2b02      	cmp	r3, #2
 80080d8:	d06e      	beq.n	80081b8 <alarm_view_mode+0x1410>
 80080da:	2b02      	cmp	r3, #2
 80080dc:	dc6e      	bgt.n	80081bc <alarm_view_mode+0x1414>
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d002      	beq.n	80080e8 <alarm_view_mode+0x1340>
 80080e2:	2b01      	cmp	r3, #1
 80080e4:	d034      	beq.n	8008150 <alarm_view_mode+0x13a8>
                        Paint_DrawString_EN(230, 0, "DT", &Font16, BLACK, WHITE);
                        break;
                    case NOT_USED_MODE:
                        break;
                    default:
                        break;
 80080e6:	e069      	b.n	80081bc <alarm_view_mode+0x1414>
                        Paint_DrawNum(200, 0, alarm_view_mode->sParam_data_alarm_setup_mode_6->dow_dom/10, &Font16, BLACK, WHITE);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	695b      	ldr	r3, [r3, #20]
 80080ec:	791b      	ldrb	r3, [r3, #4]
 80080ee:	4a5b      	ldr	r2, [pc, #364]	@ (800825c <alarm_view_mode+0x14b4>)
 80080f0:	fba2 2303 	umull	r2, r3, r2, r3
 80080f4:	08db      	lsrs	r3, r3, #3
 80080f6:	b2db      	uxtb	r3, r3
 80080f8:	461a      	mov	r2, r3
 80080fa:	23ff      	movs	r3, #255	@ 0xff
 80080fc:	9301      	str	r3, [sp, #4]
 80080fe:	2300      	movs	r3, #0
 8008100:	9300      	str	r3, [sp, #0]
 8008102:	4b50      	ldr	r3, [pc, #320]	@ (8008244 <alarm_view_mode+0x149c>)
 8008104:	2100      	movs	r1, #0
 8008106:	20c8      	movs	r0, #200	@ 0xc8
 8008108:	f002 fcae 	bl	800aa68 <Paint_DrawNum>
                        Paint_DrawNum(210, 0, alarm_view_mode->sParam_data_alarm_setup_mode_6->dow_dom%10, &Font16, BLACK, WHITE);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	695b      	ldr	r3, [r3, #20]
 8008110:	791a      	ldrb	r2, [r3, #4]
 8008112:	4b52      	ldr	r3, [pc, #328]	@ (800825c <alarm_view_mode+0x14b4>)
 8008114:	fba3 1302 	umull	r1, r3, r3, r2
 8008118:	08d9      	lsrs	r1, r3, #3
 800811a:	460b      	mov	r3, r1
 800811c:	009b      	lsls	r3, r3, #2
 800811e:	440b      	add	r3, r1
 8008120:	005b      	lsls	r3, r3, #1
 8008122:	1ad3      	subs	r3, r2, r3
 8008124:	b2db      	uxtb	r3, r3
 8008126:	461a      	mov	r2, r3
 8008128:	23ff      	movs	r3, #255	@ 0xff
 800812a:	9301      	str	r3, [sp, #4]
 800812c:	2300      	movs	r3, #0
 800812e:	9300      	str	r3, [sp, #0]
 8008130:	4b44      	ldr	r3, [pc, #272]	@ (8008244 <alarm_view_mode+0x149c>)
 8008132:	2100      	movs	r1, #0
 8008134:	20d2      	movs	r0, #210	@ 0xd2
 8008136:	f002 fc97 	bl	800aa68 <Paint_DrawNum>
                        Paint_DrawString_EN(230, 0, "DY", &Font16, BLACK, WHITE);
 800813a:	23ff      	movs	r3, #255	@ 0xff
 800813c:	9301      	str	r3, [sp, #4]
 800813e:	2300      	movs	r3, #0
 8008140:	9300      	str	r3, [sp, #0]
 8008142:	4b40      	ldr	r3, [pc, #256]	@ (8008244 <alarm_view_mode+0x149c>)
 8008144:	4a46      	ldr	r2, [pc, #280]	@ (8008260 <alarm_view_mode+0x14b8>)
 8008146:	2100      	movs	r1, #0
 8008148:	20e6      	movs	r0, #230	@ 0xe6
 800814a:	f002 fc39 	bl	800a9c0 <Paint_DrawString_EN>
                        break;
 800814e:	e036      	b.n	80081be <alarm_view_mode+0x1416>
                        Paint_DrawNum(200, 0, alarm_view_mode->sParam_data_alarm_setup_mode_6->dow_dom/10, &Font16, BLACK, WHITE);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	695b      	ldr	r3, [r3, #20]
 8008154:	791b      	ldrb	r3, [r3, #4]
 8008156:	4a41      	ldr	r2, [pc, #260]	@ (800825c <alarm_view_mode+0x14b4>)
 8008158:	fba2 2303 	umull	r2, r3, r2, r3
 800815c:	08db      	lsrs	r3, r3, #3
 800815e:	b2db      	uxtb	r3, r3
 8008160:	461a      	mov	r2, r3
 8008162:	23ff      	movs	r3, #255	@ 0xff
 8008164:	9301      	str	r3, [sp, #4]
 8008166:	2300      	movs	r3, #0
 8008168:	9300      	str	r3, [sp, #0]
 800816a:	4b36      	ldr	r3, [pc, #216]	@ (8008244 <alarm_view_mode+0x149c>)
 800816c:	2100      	movs	r1, #0
 800816e:	20c8      	movs	r0, #200	@ 0xc8
 8008170:	f002 fc7a 	bl	800aa68 <Paint_DrawNum>
                        Paint_DrawNum(210, 0, alarm_view_mode->sParam_data_alarm_setup_mode_6->dow_dom%10, &Font16, BLACK, WHITE);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	695b      	ldr	r3, [r3, #20]
 8008178:	791a      	ldrb	r2, [r3, #4]
 800817a:	4b38      	ldr	r3, [pc, #224]	@ (800825c <alarm_view_mode+0x14b4>)
 800817c:	fba3 1302 	umull	r1, r3, r3, r2
 8008180:	08d9      	lsrs	r1, r3, #3
 8008182:	460b      	mov	r3, r1
 8008184:	009b      	lsls	r3, r3, #2
 8008186:	440b      	add	r3, r1
 8008188:	005b      	lsls	r3, r3, #1
 800818a:	1ad3      	subs	r3, r2, r3
 800818c:	b2db      	uxtb	r3, r3
 800818e:	461a      	mov	r2, r3
 8008190:	23ff      	movs	r3, #255	@ 0xff
 8008192:	9301      	str	r3, [sp, #4]
 8008194:	2300      	movs	r3, #0
 8008196:	9300      	str	r3, [sp, #0]
 8008198:	4b2a      	ldr	r3, [pc, #168]	@ (8008244 <alarm_view_mode+0x149c>)
 800819a:	2100      	movs	r1, #0
 800819c:	20d2      	movs	r0, #210	@ 0xd2
 800819e:	f002 fc63 	bl	800aa68 <Paint_DrawNum>
                        Paint_DrawString_EN(230, 0, "DT", &Font16, BLACK, WHITE);
 80081a2:	23ff      	movs	r3, #255	@ 0xff
 80081a4:	9301      	str	r3, [sp, #4]
 80081a6:	2300      	movs	r3, #0
 80081a8:	9300      	str	r3, [sp, #0]
 80081aa:	4b26      	ldr	r3, [pc, #152]	@ (8008244 <alarm_view_mode+0x149c>)
 80081ac:	4a2d      	ldr	r2, [pc, #180]	@ (8008264 <alarm_view_mode+0x14bc>)
 80081ae:	2100      	movs	r1, #0
 80081b0:	20e6      	movs	r0, #230	@ 0xe6
 80081b2:	f002 fc05 	bl	800a9c0 <Paint_DrawString_EN>
                        break;
 80081b6:	e002      	b.n	80081be <alarm_view_mode+0x1416>
                        break;
 80081b8:	bf00      	nop
 80081ba:	e000      	b.n	80081be <alarm_view_mode+0x1416>
                        break;
 80081bc:	bf00      	nop
                    }

                switch (alarm_view_mode->sParam_data_alarm_setup_mode_7->dy_dt)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	699b      	ldr	r3, [r3, #24]
 80081c2:	78db      	ldrb	r3, [r3, #3]
 80081c4:	2b02      	cmp	r3, #2
 80081c6:	f000 8083 	beq.w	80082d0 <alarm_view_mode+0x1528>
 80081ca:	2b02      	cmp	r3, #2
 80081cc:	f300 8082 	bgt.w	80082d4 <alarm_view_mode+0x152c>
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d002      	beq.n	80081da <alarm_view_mode+0x1432>
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	d047      	beq.n	8008268 <alarm_view_mode+0x14c0>
                        Paint_DrawString_EN(230, 20, "DT", &Font16, BLACK, WHITE);
                        break;
                    case NOT_USED_MODE:
                        break;
                    default:
                        break;
 80081d8:	e07c      	b.n	80082d4 <alarm_view_mode+0x152c>
                        Paint_DrawNum(200, 20, alarm_view_mode->sParam_data_alarm_setup_mode_7->dow_dom/10, &Font16, BLACK, WHITE);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	699b      	ldr	r3, [r3, #24]
 80081de:	791b      	ldrb	r3, [r3, #4]
 80081e0:	4a1e      	ldr	r2, [pc, #120]	@ (800825c <alarm_view_mode+0x14b4>)
 80081e2:	fba2 2303 	umull	r2, r3, r2, r3
 80081e6:	08db      	lsrs	r3, r3, #3
 80081e8:	b2db      	uxtb	r3, r3
 80081ea:	461a      	mov	r2, r3
 80081ec:	23ff      	movs	r3, #255	@ 0xff
 80081ee:	9301      	str	r3, [sp, #4]
 80081f0:	2300      	movs	r3, #0
 80081f2:	9300      	str	r3, [sp, #0]
 80081f4:	4b13      	ldr	r3, [pc, #76]	@ (8008244 <alarm_view_mode+0x149c>)
 80081f6:	2114      	movs	r1, #20
 80081f8:	20c8      	movs	r0, #200	@ 0xc8
 80081fa:	f002 fc35 	bl	800aa68 <Paint_DrawNum>
                        Paint_DrawNum(210, 20, alarm_view_mode->sParam_data_alarm_setup_mode_7->dow_dom%10, &Font16, BLACK, WHITE);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	699b      	ldr	r3, [r3, #24]
 8008202:	791a      	ldrb	r2, [r3, #4]
 8008204:	4b15      	ldr	r3, [pc, #84]	@ (800825c <alarm_view_mode+0x14b4>)
 8008206:	fba3 1302 	umull	r1, r3, r3, r2
 800820a:	08d9      	lsrs	r1, r3, #3
 800820c:	460b      	mov	r3, r1
 800820e:	009b      	lsls	r3, r3, #2
 8008210:	440b      	add	r3, r1
 8008212:	005b      	lsls	r3, r3, #1
 8008214:	1ad3      	subs	r3, r2, r3
 8008216:	b2db      	uxtb	r3, r3
 8008218:	461a      	mov	r2, r3
 800821a:	23ff      	movs	r3, #255	@ 0xff
 800821c:	9301      	str	r3, [sp, #4]
 800821e:	2300      	movs	r3, #0
 8008220:	9300      	str	r3, [sp, #0]
 8008222:	4b08      	ldr	r3, [pc, #32]	@ (8008244 <alarm_view_mode+0x149c>)
 8008224:	2114      	movs	r1, #20
 8008226:	20d2      	movs	r0, #210	@ 0xd2
 8008228:	f002 fc1e 	bl	800aa68 <Paint_DrawNum>
                        Paint_DrawString_EN(230, 20, "DY", &Font16, BLACK, WHITE);
 800822c:	23ff      	movs	r3, #255	@ 0xff
 800822e:	9301      	str	r3, [sp, #4]
 8008230:	2300      	movs	r3, #0
 8008232:	9300      	str	r3, [sp, #0]
 8008234:	4b03      	ldr	r3, [pc, #12]	@ (8008244 <alarm_view_mode+0x149c>)
 8008236:	4a0a      	ldr	r2, [pc, #40]	@ (8008260 <alarm_view_mode+0x14b8>)
 8008238:	2114      	movs	r1, #20
 800823a:	20e6      	movs	r0, #230	@ 0xe6
 800823c:	f002 fbc0 	bl	800a9c0 <Paint_DrawString_EN>
                        break;
 8008240:	e049      	b.n	80082d6 <alarm_view_mode+0x152e>
 8008242:	bf00      	nop
 8008244:	20000274 	.word	0x20000274
 8008248:	0800be68 	.word	0x0800be68
 800824c:	0800be6c 	.word	0x0800be6c
 8008250:	0800be70 	.word	0x0800be70
 8008254:	0800be74 	.word	0x0800be74
 8008258:	0800be78 	.word	0x0800be78
 800825c:	cccccccd 	.word	0xcccccccd
 8008260:	0800be50 	.word	0x0800be50
 8008264:	0800be54 	.word	0x0800be54
                        Paint_DrawNum(200, 20, alarm_view_mode->sParam_data_alarm_setup_mode_7->dow_dom/10, &Font16, BLACK, WHITE);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	699b      	ldr	r3, [r3, #24]
 800826c:	791b      	ldrb	r3, [r3, #4]
 800826e:	4a97      	ldr	r2, [pc, #604]	@ (80084cc <alarm_view_mode+0x1724>)
 8008270:	fba2 2303 	umull	r2, r3, r2, r3
 8008274:	08db      	lsrs	r3, r3, #3
 8008276:	b2db      	uxtb	r3, r3
 8008278:	461a      	mov	r2, r3
 800827a:	23ff      	movs	r3, #255	@ 0xff
 800827c:	9301      	str	r3, [sp, #4]
 800827e:	2300      	movs	r3, #0
 8008280:	9300      	str	r3, [sp, #0]
 8008282:	4b93      	ldr	r3, [pc, #588]	@ (80084d0 <alarm_view_mode+0x1728>)
 8008284:	2114      	movs	r1, #20
 8008286:	20c8      	movs	r0, #200	@ 0xc8
 8008288:	f002 fbee 	bl	800aa68 <Paint_DrawNum>
                        Paint_DrawNum(210, 20, alarm_view_mode->sParam_data_alarm_setup_mode_7->dow_dom%10, &Font16, BLACK, WHITE);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	699b      	ldr	r3, [r3, #24]
 8008290:	791a      	ldrb	r2, [r3, #4]
 8008292:	4b8e      	ldr	r3, [pc, #568]	@ (80084cc <alarm_view_mode+0x1724>)
 8008294:	fba3 1302 	umull	r1, r3, r3, r2
 8008298:	08d9      	lsrs	r1, r3, #3
 800829a:	460b      	mov	r3, r1
 800829c:	009b      	lsls	r3, r3, #2
 800829e:	440b      	add	r3, r1
 80082a0:	005b      	lsls	r3, r3, #1
 80082a2:	1ad3      	subs	r3, r2, r3
 80082a4:	b2db      	uxtb	r3, r3
 80082a6:	461a      	mov	r2, r3
 80082a8:	23ff      	movs	r3, #255	@ 0xff
 80082aa:	9301      	str	r3, [sp, #4]
 80082ac:	2300      	movs	r3, #0
 80082ae:	9300      	str	r3, [sp, #0]
 80082b0:	4b87      	ldr	r3, [pc, #540]	@ (80084d0 <alarm_view_mode+0x1728>)
 80082b2:	2114      	movs	r1, #20
 80082b4:	20d2      	movs	r0, #210	@ 0xd2
 80082b6:	f002 fbd7 	bl	800aa68 <Paint_DrawNum>
                        Paint_DrawString_EN(230, 20, "DT", &Font16, BLACK, WHITE);
 80082ba:	23ff      	movs	r3, #255	@ 0xff
 80082bc:	9301      	str	r3, [sp, #4]
 80082be:	2300      	movs	r3, #0
 80082c0:	9300      	str	r3, [sp, #0]
 80082c2:	4b83      	ldr	r3, [pc, #524]	@ (80084d0 <alarm_view_mode+0x1728>)
 80082c4:	4a83      	ldr	r2, [pc, #524]	@ (80084d4 <alarm_view_mode+0x172c>)
 80082c6:	2114      	movs	r1, #20
 80082c8:	20e6      	movs	r0, #230	@ 0xe6
 80082ca:	f002 fb79 	bl	800a9c0 <Paint_DrawString_EN>
                        break;
 80082ce:	e002      	b.n	80082d6 <alarm_view_mode+0x152e>
                        break;
 80082d0:	bf00      	nop
 80082d2:	e000      	b.n	80082d6 <alarm_view_mode+0x152e>
                        break;
 80082d4:	bf00      	nop
                    }

        switch (alarm_view_mode->sParam_data_alarm_setup_mode_8->dy_dt)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	69db      	ldr	r3, [r3, #28]
 80082da:	78db      	ldrb	r3, [r3, #3]
 80082dc:	2b02      	cmp	r3, #2
 80082de:	d06e      	beq.n	80083be <alarm_view_mode+0x1616>
 80082e0:	2b02      	cmp	r3, #2
 80082e2:	dc6e      	bgt.n	80083c2 <alarm_view_mode+0x161a>
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d002      	beq.n	80082ee <alarm_view_mode+0x1546>
 80082e8:	2b01      	cmp	r3, #1
 80082ea:	d034      	beq.n	8008356 <alarm_view_mode+0x15ae>
           Paint_DrawString_EN(230, 40, "DT", &Font16, BLACK, WHITE);
           break;
        case NOT_USED_MODE:
           break;
        default:
           break;
 80082ec:	e069      	b.n	80083c2 <alarm_view_mode+0x161a>
           Paint_DrawNum(200, 40, alarm_view_mode->sParam_data_alarm_setup_mode_8->dow_dom/10, &Font16, BLACK, WHITE);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	69db      	ldr	r3, [r3, #28]
 80082f2:	791b      	ldrb	r3, [r3, #4]
 80082f4:	4a75      	ldr	r2, [pc, #468]	@ (80084cc <alarm_view_mode+0x1724>)
 80082f6:	fba2 2303 	umull	r2, r3, r2, r3
 80082fa:	08db      	lsrs	r3, r3, #3
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	461a      	mov	r2, r3
 8008300:	23ff      	movs	r3, #255	@ 0xff
 8008302:	9301      	str	r3, [sp, #4]
 8008304:	2300      	movs	r3, #0
 8008306:	9300      	str	r3, [sp, #0]
 8008308:	4b71      	ldr	r3, [pc, #452]	@ (80084d0 <alarm_view_mode+0x1728>)
 800830a:	2128      	movs	r1, #40	@ 0x28
 800830c:	20c8      	movs	r0, #200	@ 0xc8
 800830e:	f002 fbab 	bl	800aa68 <Paint_DrawNum>
           Paint_DrawNum(210, 40, alarm_view_mode->sParam_data_alarm_setup_mode_8->dow_dom%10, &Font16, BLACK, WHITE);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	69db      	ldr	r3, [r3, #28]
 8008316:	791a      	ldrb	r2, [r3, #4]
 8008318:	4b6c      	ldr	r3, [pc, #432]	@ (80084cc <alarm_view_mode+0x1724>)
 800831a:	fba3 1302 	umull	r1, r3, r3, r2
 800831e:	08d9      	lsrs	r1, r3, #3
 8008320:	460b      	mov	r3, r1
 8008322:	009b      	lsls	r3, r3, #2
 8008324:	440b      	add	r3, r1
 8008326:	005b      	lsls	r3, r3, #1
 8008328:	1ad3      	subs	r3, r2, r3
 800832a:	b2db      	uxtb	r3, r3
 800832c:	461a      	mov	r2, r3
 800832e:	23ff      	movs	r3, #255	@ 0xff
 8008330:	9301      	str	r3, [sp, #4]
 8008332:	2300      	movs	r3, #0
 8008334:	9300      	str	r3, [sp, #0]
 8008336:	4b66      	ldr	r3, [pc, #408]	@ (80084d0 <alarm_view_mode+0x1728>)
 8008338:	2128      	movs	r1, #40	@ 0x28
 800833a:	20d2      	movs	r0, #210	@ 0xd2
 800833c:	f002 fb94 	bl	800aa68 <Paint_DrawNum>
           Paint_DrawString_EN(230, 40, "DY", &Font16, BLACK, WHITE);
 8008340:	23ff      	movs	r3, #255	@ 0xff
 8008342:	9301      	str	r3, [sp, #4]
 8008344:	2300      	movs	r3, #0
 8008346:	9300      	str	r3, [sp, #0]
 8008348:	4b61      	ldr	r3, [pc, #388]	@ (80084d0 <alarm_view_mode+0x1728>)
 800834a:	4a63      	ldr	r2, [pc, #396]	@ (80084d8 <alarm_view_mode+0x1730>)
 800834c:	2128      	movs	r1, #40	@ 0x28
 800834e:	20e6      	movs	r0, #230	@ 0xe6
 8008350:	f002 fb36 	bl	800a9c0 <Paint_DrawString_EN>
           break;
 8008354:	e036      	b.n	80083c4 <alarm_view_mode+0x161c>
           Paint_DrawNum(200, 40, alarm_view_mode->sParam_data_alarm_setup_mode_8->dow_dom/10, &Font16, BLACK, WHITE);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	69db      	ldr	r3, [r3, #28]
 800835a:	791b      	ldrb	r3, [r3, #4]
 800835c:	4a5b      	ldr	r2, [pc, #364]	@ (80084cc <alarm_view_mode+0x1724>)
 800835e:	fba2 2303 	umull	r2, r3, r2, r3
 8008362:	08db      	lsrs	r3, r3, #3
 8008364:	b2db      	uxtb	r3, r3
 8008366:	461a      	mov	r2, r3
 8008368:	23ff      	movs	r3, #255	@ 0xff
 800836a:	9301      	str	r3, [sp, #4]
 800836c:	2300      	movs	r3, #0
 800836e:	9300      	str	r3, [sp, #0]
 8008370:	4b57      	ldr	r3, [pc, #348]	@ (80084d0 <alarm_view_mode+0x1728>)
 8008372:	2128      	movs	r1, #40	@ 0x28
 8008374:	20c8      	movs	r0, #200	@ 0xc8
 8008376:	f002 fb77 	bl	800aa68 <Paint_DrawNum>
           Paint_DrawNum(210, 40, alarm_view_mode->sParam_data_alarm_setup_mode_8->dow_dom%10, &Font16, BLACK, WHITE);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	69db      	ldr	r3, [r3, #28]
 800837e:	791a      	ldrb	r2, [r3, #4]
 8008380:	4b52      	ldr	r3, [pc, #328]	@ (80084cc <alarm_view_mode+0x1724>)
 8008382:	fba3 1302 	umull	r1, r3, r3, r2
 8008386:	08d9      	lsrs	r1, r3, #3
 8008388:	460b      	mov	r3, r1
 800838a:	009b      	lsls	r3, r3, #2
 800838c:	440b      	add	r3, r1
 800838e:	005b      	lsls	r3, r3, #1
 8008390:	1ad3      	subs	r3, r2, r3
 8008392:	b2db      	uxtb	r3, r3
 8008394:	461a      	mov	r2, r3
 8008396:	23ff      	movs	r3, #255	@ 0xff
 8008398:	9301      	str	r3, [sp, #4]
 800839a:	2300      	movs	r3, #0
 800839c:	9300      	str	r3, [sp, #0]
 800839e:	4b4c      	ldr	r3, [pc, #304]	@ (80084d0 <alarm_view_mode+0x1728>)
 80083a0:	2128      	movs	r1, #40	@ 0x28
 80083a2:	20d2      	movs	r0, #210	@ 0xd2
 80083a4:	f002 fb60 	bl	800aa68 <Paint_DrawNum>
           Paint_DrawString_EN(230, 40, "DT", &Font16, BLACK, WHITE);
 80083a8:	23ff      	movs	r3, #255	@ 0xff
 80083aa:	9301      	str	r3, [sp, #4]
 80083ac:	2300      	movs	r3, #0
 80083ae:	9300      	str	r3, [sp, #0]
 80083b0:	4b47      	ldr	r3, [pc, #284]	@ (80084d0 <alarm_view_mode+0x1728>)
 80083b2:	4a48      	ldr	r2, [pc, #288]	@ (80084d4 <alarm_view_mode+0x172c>)
 80083b4:	2128      	movs	r1, #40	@ 0x28
 80083b6:	20e6      	movs	r0, #230	@ 0xe6
 80083b8:	f002 fb02 	bl	800a9c0 <Paint_DrawString_EN>
           break;
 80083bc:	e002      	b.n	80083c4 <alarm_view_mode+0x161c>
           break;
 80083be:	bf00      	nop
 80083c0:	e000      	b.n	80083c4 <alarm_view_mode+0x161c>
           break;
 80083c2:	bf00      	nop
        }
    switch (alarm_view_mode->sParam_data_alarm_setup_mode_9->dy_dt)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6a1b      	ldr	r3, [r3, #32]
 80083c8:	78db      	ldrb	r3, [r3, #3]
 80083ca:	2b02      	cmp	r3, #2
 80083cc:	d06e      	beq.n	80084ac <alarm_view_mode+0x1704>
 80083ce:	2b02      	cmp	r3, #2
 80083d0:	dc6e      	bgt.n	80084b0 <alarm_view_mode+0x1708>
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d002      	beq.n	80083dc <alarm_view_mode+0x1634>
 80083d6:	2b01      	cmp	r3, #1
 80083d8:	d034      	beq.n	8008444 <alarm_view_mode+0x169c>
           Paint_DrawString_EN(230, 60, "DT", &Font16, BLACK, WHITE);
           break;
       case NOT_USED_MODE:
           break;
       default:
           break;
 80083da:	e069      	b.n	80084b0 <alarm_view_mode+0x1708>
           Paint_DrawNum(200, 60, alarm_view_mode->sParam_data_alarm_setup_mode_9->dow_dom/10, &Font16, BLACK, WHITE);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6a1b      	ldr	r3, [r3, #32]
 80083e0:	791b      	ldrb	r3, [r3, #4]
 80083e2:	4a3a      	ldr	r2, [pc, #232]	@ (80084cc <alarm_view_mode+0x1724>)
 80083e4:	fba2 2303 	umull	r2, r3, r2, r3
 80083e8:	08db      	lsrs	r3, r3, #3
 80083ea:	b2db      	uxtb	r3, r3
 80083ec:	461a      	mov	r2, r3
 80083ee:	23ff      	movs	r3, #255	@ 0xff
 80083f0:	9301      	str	r3, [sp, #4]
 80083f2:	2300      	movs	r3, #0
 80083f4:	9300      	str	r3, [sp, #0]
 80083f6:	4b36      	ldr	r3, [pc, #216]	@ (80084d0 <alarm_view_mode+0x1728>)
 80083f8:	213c      	movs	r1, #60	@ 0x3c
 80083fa:	20c8      	movs	r0, #200	@ 0xc8
 80083fc:	f002 fb34 	bl	800aa68 <Paint_DrawNum>
           Paint_DrawNum(210, 60, alarm_view_mode->sParam_data_alarm_setup_mode_9->dow_dom%10, &Font16, BLACK, WHITE);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6a1b      	ldr	r3, [r3, #32]
 8008404:	791a      	ldrb	r2, [r3, #4]
 8008406:	4b31      	ldr	r3, [pc, #196]	@ (80084cc <alarm_view_mode+0x1724>)
 8008408:	fba3 1302 	umull	r1, r3, r3, r2
 800840c:	08d9      	lsrs	r1, r3, #3
 800840e:	460b      	mov	r3, r1
 8008410:	009b      	lsls	r3, r3, #2
 8008412:	440b      	add	r3, r1
 8008414:	005b      	lsls	r3, r3, #1
 8008416:	1ad3      	subs	r3, r2, r3
 8008418:	b2db      	uxtb	r3, r3
 800841a:	461a      	mov	r2, r3
 800841c:	23ff      	movs	r3, #255	@ 0xff
 800841e:	9301      	str	r3, [sp, #4]
 8008420:	2300      	movs	r3, #0
 8008422:	9300      	str	r3, [sp, #0]
 8008424:	4b2a      	ldr	r3, [pc, #168]	@ (80084d0 <alarm_view_mode+0x1728>)
 8008426:	213c      	movs	r1, #60	@ 0x3c
 8008428:	20d2      	movs	r0, #210	@ 0xd2
 800842a:	f002 fb1d 	bl	800aa68 <Paint_DrawNum>
           Paint_DrawString_EN(230, 60, "DY", &Font16, BLACK, WHITE);
 800842e:	23ff      	movs	r3, #255	@ 0xff
 8008430:	9301      	str	r3, [sp, #4]
 8008432:	2300      	movs	r3, #0
 8008434:	9300      	str	r3, [sp, #0]
 8008436:	4b26      	ldr	r3, [pc, #152]	@ (80084d0 <alarm_view_mode+0x1728>)
 8008438:	4a27      	ldr	r2, [pc, #156]	@ (80084d8 <alarm_view_mode+0x1730>)
 800843a:	213c      	movs	r1, #60	@ 0x3c
 800843c:	20e6      	movs	r0, #230	@ 0xe6
 800843e:	f002 fabf 	bl	800a9c0 <Paint_DrawString_EN>
           break;
 8008442:	e036      	b.n	80084b2 <alarm_view_mode+0x170a>
           Paint_DrawNum(200, 60, alarm_view_mode->sParam_data_alarm_setup_mode_9->dow_dom/10, &Font16, BLACK, WHITE);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6a1b      	ldr	r3, [r3, #32]
 8008448:	791b      	ldrb	r3, [r3, #4]
 800844a:	4a20      	ldr	r2, [pc, #128]	@ (80084cc <alarm_view_mode+0x1724>)
 800844c:	fba2 2303 	umull	r2, r3, r2, r3
 8008450:	08db      	lsrs	r3, r3, #3
 8008452:	b2db      	uxtb	r3, r3
 8008454:	461a      	mov	r2, r3
 8008456:	23ff      	movs	r3, #255	@ 0xff
 8008458:	9301      	str	r3, [sp, #4]
 800845a:	2300      	movs	r3, #0
 800845c:	9300      	str	r3, [sp, #0]
 800845e:	4b1c      	ldr	r3, [pc, #112]	@ (80084d0 <alarm_view_mode+0x1728>)
 8008460:	213c      	movs	r1, #60	@ 0x3c
 8008462:	20c8      	movs	r0, #200	@ 0xc8
 8008464:	f002 fb00 	bl	800aa68 <Paint_DrawNum>
           Paint_DrawNum(210, 60, alarm_view_mode->sParam_data_alarm_setup_mode_9->dow_dom%10, &Font16, BLACK, WHITE);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6a1b      	ldr	r3, [r3, #32]
 800846c:	791a      	ldrb	r2, [r3, #4]
 800846e:	4b17      	ldr	r3, [pc, #92]	@ (80084cc <alarm_view_mode+0x1724>)
 8008470:	fba3 1302 	umull	r1, r3, r3, r2
 8008474:	08d9      	lsrs	r1, r3, #3
 8008476:	460b      	mov	r3, r1
 8008478:	009b      	lsls	r3, r3, #2
 800847a:	440b      	add	r3, r1
 800847c:	005b      	lsls	r3, r3, #1
 800847e:	1ad3      	subs	r3, r2, r3
 8008480:	b2db      	uxtb	r3, r3
 8008482:	461a      	mov	r2, r3
 8008484:	23ff      	movs	r3, #255	@ 0xff
 8008486:	9301      	str	r3, [sp, #4]
 8008488:	2300      	movs	r3, #0
 800848a:	9300      	str	r3, [sp, #0]
 800848c:	4b10      	ldr	r3, [pc, #64]	@ (80084d0 <alarm_view_mode+0x1728>)
 800848e:	213c      	movs	r1, #60	@ 0x3c
 8008490:	20d2      	movs	r0, #210	@ 0xd2
 8008492:	f002 fae9 	bl	800aa68 <Paint_DrawNum>
           Paint_DrawString_EN(230, 60, "DT", &Font16, BLACK, WHITE);
 8008496:	23ff      	movs	r3, #255	@ 0xff
 8008498:	9301      	str	r3, [sp, #4]
 800849a:	2300      	movs	r3, #0
 800849c:	9300      	str	r3, [sp, #0]
 800849e:	4b0c      	ldr	r3, [pc, #48]	@ (80084d0 <alarm_view_mode+0x1728>)
 80084a0:	4a0c      	ldr	r2, [pc, #48]	@ (80084d4 <alarm_view_mode+0x172c>)
 80084a2:	213c      	movs	r1, #60	@ 0x3c
 80084a4:	20e6      	movs	r0, #230	@ 0xe6
 80084a6:	f002 fa8b 	bl	800a9c0 <Paint_DrawString_EN>
           break;
 80084aa:	e002      	b.n	80084b2 <alarm_view_mode+0x170a>
           break;
 80084ac:	bf00      	nop
 80084ae:	e000      	b.n	80084b2 <alarm_view_mode+0x170a>
           break;
 80084b0:	bf00      	nop
       }
    switch (alarm_view_mode->sParam_data_alarm_setup_mode_10->dy_dt)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084b6:	78db      	ldrb	r3, [r3, #3]
 80084b8:	2b02      	cmp	r3, #2
 80084ba:	d077      	beq.n	80085ac <alarm_view_mode+0x1804>
 80084bc:	2b02      	cmp	r3, #2
 80084be:	dc77      	bgt.n	80085b0 <alarm_view_mode+0x1808>
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d00b      	beq.n	80084dc <alarm_view_mode+0x1734>
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d03d      	beq.n	8008544 <alarm_view_mode+0x179c>
           Paint_DrawString_EN(230, 80, "DT", &Font16, BLACK, WHITE);
           break;
       case NOT_USED_MODE:
           break;
       default:
           break;
 80084c8:	e072      	b.n	80085b0 <alarm_view_mode+0x1808>
 80084ca:	bf00      	nop
 80084cc:	cccccccd 	.word	0xcccccccd
 80084d0:	20000274 	.word	0x20000274
 80084d4:	0800be54 	.word	0x0800be54
 80084d8:	0800be50 	.word	0x0800be50
           Paint_DrawNum(200, 80, alarm_view_mode->sParam_data_alarm_setup_mode_10->dow_dom/10, &Font16, BLACK, WHITE);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084e0:	791b      	ldrb	r3, [r3, #4]
 80084e2:	4a84      	ldr	r2, [pc, #528]	@ (80086f4 <alarm_view_mode+0x194c>)
 80084e4:	fba2 2303 	umull	r2, r3, r2, r3
 80084e8:	08db      	lsrs	r3, r3, #3
 80084ea:	b2db      	uxtb	r3, r3
 80084ec:	461a      	mov	r2, r3
 80084ee:	23ff      	movs	r3, #255	@ 0xff
 80084f0:	9301      	str	r3, [sp, #4]
 80084f2:	2300      	movs	r3, #0
 80084f4:	9300      	str	r3, [sp, #0]
 80084f6:	4b80      	ldr	r3, [pc, #512]	@ (80086f8 <alarm_view_mode+0x1950>)
 80084f8:	2150      	movs	r1, #80	@ 0x50
 80084fa:	20c8      	movs	r0, #200	@ 0xc8
 80084fc:	f002 fab4 	bl	800aa68 <Paint_DrawNum>
           Paint_DrawNum(210, 80, alarm_view_mode->sParam_data_alarm_setup_mode_10->dow_dom%10, &Font16, BLACK, WHITE);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008504:	791a      	ldrb	r2, [r3, #4]
 8008506:	4b7b      	ldr	r3, [pc, #492]	@ (80086f4 <alarm_view_mode+0x194c>)
 8008508:	fba3 1302 	umull	r1, r3, r3, r2
 800850c:	08d9      	lsrs	r1, r3, #3
 800850e:	460b      	mov	r3, r1
 8008510:	009b      	lsls	r3, r3, #2
 8008512:	440b      	add	r3, r1
 8008514:	005b      	lsls	r3, r3, #1
 8008516:	1ad3      	subs	r3, r2, r3
 8008518:	b2db      	uxtb	r3, r3
 800851a:	461a      	mov	r2, r3
 800851c:	23ff      	movs	r3, #255	@ 0xff
 800851e:	9301      	str	r3, [sp, #4]
 8008520:	2300      	movs	r3, #0
 8008522:	9300      	str	r3, [sp, #0]
 8008524:	4b74      	ldr	r3, [pc, #464]	@ (80086f8 <alarm_view_mode+0x1950>)
 8008526:	2150      	movs	r1, #80	@ 0x50
 8008528:	20d2      	movs	r0, #210	@ 0xd2
 800852a:	f002 fa9d 	bl	800aa68 <Paint_DrawNum>
           Paint_DrawString_EN(230, 80, "DY", &Font16, BLACK, WHITE);
 800852e:	23ff      	movs	r3, #255	@ 0xff
 8008530:	9301      	str	r3, [sp, #4]
 8008532:	2300      	movs	r3, #0
 8008534:	9300      	str	r3, [sp, #0]
 8008536:	4b70      	ldr	r3, [pc, #448]	@ (80086f8 <alarm_view_mode+0x1950>)
 8008538:	4a70      	ldr	r2, [pc, #448]	@ (80086fc <alarm_view_mode+0x1954>)
 800853a:	2150      	movs	r1, #80	@ 0x50
 800853c:	20e6      	movs	r0, #230	@ 0xe6
 800853e:	f002 fa3f 	bl	800a9c0 <Paint_DrawString_EN>
           break;
 8008542:	e036      	b.n	80085b2 <alarm_view_mode+0x180a>
           Paint_DrawNum(200, 80, alarm_view_mode->sParam_data_alarm_setup_mode_10->dow_dom/10, &Font16, BLACK, WHITE);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008548:	791b      	ldrb	r3, [r3, #4]
 800854a:	4a6a      	ldr	r2, [pc, #424]	@ (80086f4 <alarm_view_mode+0x194c>)
 800854c:	fba2 2303 	umull	r2, r3, r2, r3
 8008550:	08db      	lsrs	r3, r3, #3
 8008552:	b2db      	uxtb	r3, r3
 8008554:	461a      	mov	r2, r3
 8008556:	23ff      	movs	r3, #255	@ 0xff
 8008558:	9301      	str	r3, [sp, #4]
 800855a:	2300      	movs	r3, #0
 800855c:	9300      	str	r3, [sp, #0]
 800855e:	4b66      	ldr	r3, [pc, #408]	@ (80086f8 <alarm_view_mode+0x1950>)
 8008560:	2150      	movs	r1, #80	@ 0x50
 8008562:	20c8      	movs	r0, #200	@ 0xc8
 8008564:	f002 fa80 	bl	800aa68 <Paint_DrawNum>
           Paint_DrawNum(210, 80, alarm_view_mode->sParam_data_alarm_setup_mode_10->dow_dom%10, &Font16, BLACK, WHITE);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800856c:	791a      	ldrb	r2, [r3, #4]
 800856e:	4b61      	ldr	r3, [pc, #388]	@ (80086f4 <alarm_view_mode+0x194c>)
 8008570:	fba3 1302 	umull	r1, r3, r3, r2
 8008574:	08d9      	lsrs	r1, r3, #3
 8008576:	460b      	mov	r3, r1
 8008578:	009b      	lsls	r3, r3, #2
 800857a:	440b      	add	r3, r1
 800857c:	005b      	lsls	r3, r3, #1
 800857e:	1ad3      	subs	r3, r2, r3
 8008580:	b2db      	uxtb	r3, r3
 8008582:	461a      	mov	r2, r3
 8008584:	23ff      	movs	r3, #255	@ 0xff
 8008586:	9301      	str	r3, [sp, #4]
 8008588:	2300      	movs	r3, #0
 800858a:	9300      	str	r3, [sp, #0]
 800858c:	4b5a      	ldr	r3, [pc, #360]	@ (80086f8 <alarm_view_mode+0x1950>)
 800858e:	2150      	movs	r1, #80	@ 0x50
 8008590:	20d2      	movs	r0, #210	@ 0xd2
 8008592:	f002 fa69 	bl	800aa68 <Paint_DrawNum>
           Paint_DrawString_EN(230, 80, "DT", &Font16, BLACK, WHITE);
 8008596:	23ff      	movs	r3, #255	@ 0xff
 8008598:	9301      	str	r3, [sp, #4]
 800859a:	2300      	movs	r3, #0
 800859c:	9300      	str	r3, [sp, #0]
 800859e:	4b56      	ldr	r3, [pc, #344]	@ (80086f8 <alarm_view_mode+0x1950>)
 80085a0:	4a57      	ldr	r2, [pc, #348]	@ (8008700 <alarm_view_mode+0x1958>)
 80085a2:	2150      	movs	r1, #80	@ 0x50
 80085a4:	20e6      	movs	r0, #230	@ 0xe6
 80085a6:	f002 fa0b 	bl	800a9c0 <Paint_DrawString_EN>
           break;
 80085aa:	e002      	b.n	80085b2 <alarm_view_mode+0x180a>
           break;
 80085ac:	bf00      	nop
 80085ae:	e29d      	b.n	8008aec <alarm_view_mode+0x1d44>
           break;
 80085b0:	bf00      	nop
       }
                // change to another
                break;
 80085b2:	e29b      	b.n	8008aec <alarm_view_mode+0x1d44>
        
                case 6:
                //parameter 1
                Paint_ClearWindows(10, 0, 200, Font16.Height, WHITE);
 80085b4:	4b50      	ldr	r3, [pc, #320]	@ (80086f8 <alarm_view_mode+0x1950>)
 80085b6:	88db      	ldrh	r3, [r3, #6]
 80085b8:	22ff      	movs	r2, #255	@ 0xff
 80085ba:	9200      	str	r2, [sp, #0]
 80085bc:	22c8      	movs	r2, #200	@ 0xc8
 80085be:	2100      	movs	r1, #0
 80085c0:	200a      	movs	r0, #10
 80085c2:	f001 ff4b 	bl	800a45c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 0, "6.", &Font16, BLACK, WHITE);
 80085c6:	23ff      	movs	r3, #255	@ 0xff
 80085c8:	9301      	str	r3, [sp, #4]
 80085ca:	2300      	movs	r3, #0
 80085cc:	9300      	str	r3, [sp, #0]
 80085ce:	4b4a      	ldr	r3, [pc, #296]	@ (80086f8 <alarm_view_mode+0x1950>)
 80085d0:	4a4c      	ldr	r2, [pc, #304]	@ (8008704 <alarm_view_mode+0x195c>)
 80085d2:	2100      	movs	r1, #0
 80085d4:	200a      	movs	r0, #10
 80085d6:	f002 f9f3 	bl	800a9c0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 0, alarm_view_mode->sParam_data_alarm_setup_mode_6, Font16);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6959      	ldr	r1, [r3, #20]
 80085de:	4b46      	ldr	r3, [pc, #280]	@ (80086f8 <alarm_view_mode+0x1950>)
 80085e0:	685a      	ldr	r2, [r3, #4]
 80085e2:	9200      	str	r2, [sp, #0]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	460a      	mov	r2, r1
 80085e8:	2100      	movs	r1, #0
 80085ea:	208c      	movs	r0, #140	@ 0x8c
 80085ec:	f000 faa4 	bl	8008b38 <drawn_alarm_view_mode>

                //parameter 2
                Paint_ClearWindows(10, 20, 200, 20 + Font16.Height, WHITE);
 80085f0:	4b41      	ldr	r3, [pc, #260]	@ (80086f8 <alarm_view_mode+0x1950>)
 80085f2:	88db      	ldrh	r3, [r3, #6]
 80085f4:	3314      	adds	r3, #20
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	22ff      	movs	r2, #255	@ 0xff
 80085fa:	9200      	str	r2, [sp, #0]
 80085fc:	22c8      	movs	r2, #200	@ 0xc8
 80085fe:	2114      	movs	r1, #20
 8008600:	200a      	movs	r0, #10
 8008602:	f001 ff2b 	bl	800a45c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 20, "7.", &Font16, WHITE, BLACK);
 8008606:	2300      	movs	r3, #0
 8008608:	9301      	str	r3, [sp, #4]
 800860a:	23ff      	movs	r3, #255	@ 0xff
 800860c:	9300      	str	r3, [sp, #0]
 800860e:	4b3a      	ldr	r3, [pc, #232]	@ (80086f8 <alarm_view_mode+0x1950>)
 8008610:	4a3d      	ldr	r2, [pc, #244]	@ (8008708 <alarm_view_mode+0x1960>)
 8008612:	2114      	movs	r1, #20
 8008614:	200a      	movs	r0, #10
 8008616:	f002 f9d3 	bl	800a9c0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 20, alarm_view_mode->sParam_data_alarm_setup_mode_7, Font16);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6999      	ldr	r1, [r3, #24]
 800861e:	4b36      	ldr	r3, [pc, #216]	@ (80086f8 <alarm_view_mode+0x1950>)
 8008620:	685a      	ldr	r2, [r3, #4]
 8008622:	9200      	str	r2, [sp, #0]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	460a      	mov	r2, r1
 8008628:	2114      	movs	r1, #20
 800862a:	208c      	movs	r0, #140	@ 0x8c
 800862c:	f000 fa84 	bl	8008b38 <drawn_alarm_view_mode>

                //parameter 3
                Paint_ClearWindows(10, 40, 200, 40 + Font16.Height, WHITE);
 8008630:	4b31      	ldr	r3, [pc, #196]	@ (80086f8 <alarm_view_mode+0x1950>)
 8008632:	88db      	ldrh	r3, [r3, #6]
 8008634:	3328      	adds	r3, #40	@ 0x28
 8008636:	b29b      	uxth	r3, r3
 8008638:	22ff      	movs	r2, #255	@ 0xff
 800863a:	9200      	str	r2, [sp, #0]
 800863c:	22c8      	movs	r2, #200	@ 0xc8
 800863e:	2128      	movs	r1, #40	@ 0x28
 8008640:	200a      	movs	r0, #10
 8008642:	f001 ff0b 	bl	800a45c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 40, "8.", &Font16, BLACK, WHITE);
 8008646:	23ff      	movs	r3, #255	@ 0xff
 8008648:	9301      	str	r3, [sp, #4]
 800864a:	2300      	movs	r3, #0
 800864c:	9300      	str	r3, [sp, #0]
 800864e:	4b2a      	ldr	r3, [pc, #168]	@ (80086f8 <alarm_view_mode+0x1950>)
 8008650:	4a2e      	ldr	r2, [pc, #184]	@ (800870c <alarm_view_mode+0x1964>)
 8008652:	2128      	movs	r1, #40	@ 0x28
 8008654:	200a      	movs	r0, #10
 8008656:	f002 f9b3 	bl	800a9c0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 40, alarm_view_mode->sParam_data_alarm_setup_mode_8, Font16);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	69d9      	ldr	r1, [r3, #28]
 800865e:	4b26      	ldr	r3, [pc, #152]	@ (80086f8 <alarm_view_mode+0x1950>)
 8008660:	685a      	ldr	r2, [r3, #4]
 8008662:	9200      	str	r2, [sp, #0]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	460a      	mov	r2, r1
 8008668:	2128      	movs	r1, #40	@ 0x28
 800866a:	208c      	movs	r0, #140	@ 0x8c
 800866c:	f000 fa64 	bl	8008b38 <drawn_alarm_view_mode>

                //parameter 4
                Paint_ClearWindows(10, 60, 200, 60 + Font16.Height, WHITE);
 8008670:	4b21      	ldr	r3, [pc, #132]	@ (80086f8 <alarm_view_mode+0x1950>)
 8008672:	88db      	ldrh	r3, [r3, #6]
 8008674:	333c      	adds	r3, #60	@ 0x3c
 8008676:	b29b      	uxth	r3, r3
 8008678:	22ff      	movs	r2, #255	@ 0xff
 800867a:	9200      	str	r2, [sp, #0]
 800867c:	22c8      	movs	r2, #200	@ 0xc8
 800867e:	213c      	movs	r1, #60	@ 0x3c
 8008680:	200a      	movs	r0, #10
 8008682:	f001 feeb 	bl	800a45c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 60, "9.", &Font16, BLACK, WHITE);
 8008686:	23ff      	movs	r3, #255	@ 0xff
 8008688:	9301      	str	r3, [sp, #4]
 800868a:	2300      	movs	r3, #0
 800868c:	9300      	str	r3, [sp, #0]
 800868e:	4b1a      	ldr	r3, [pc, #104]	@ (80086f8 <alarm_view_mode+0x1950>)
 8008690:	4a1f      	ldr	r2, [pc, #124]	@ (8008710 <alarm_view_mode+0x1968>)
 8008692:	213c      	movs	r1, #60	@ 0x3c
 8008694:	200a      	movs	r0, #10
 8008696:	f002 f993 	bl	800a9c0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 60, alarm_view_mode->sParam_data_alarm_setup_mode_9, Font16);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6a19      	ldr	r1, [r3, #32]
 800869e:	4b16      	ldr	r3, [pc, #88]	@ (80086f8 <alarm_view_mode+0x1950>)
 80086a0:	685a      	ldr	r2, [r3, #4]
 80086a2:	9200      	str	r2, [sp, #0]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	460a      	mov	r2, r1
 80086a8:	213c      	movs	r1, #60	@ 0x3c
 80086aa:	208c      	movs	r0, #140	@ 0x8c
 80086ac:	f000 fa44 	bl	8008b38 <drawn_alarm_view_mode>

                //parameter 5
                Paint_ClearWindows(10, 80, 200, 80 + Font16.Height, WHITE);
 80086b0:	4b11      	ldr	r3, [pc, #68]	@ (80086f8 <alarm_view_mode+0x1950>)
 80086b2:	88db      	ldrh	r3, [r3, #6]
 80086b4:	3350      	adds	r3, #80	@ 0x50
 80086b6:	b29b      	uxth	r3, r3
 80086b8:	22ff      	movs	r2, #255	@ 0xff
 80086ba:	9200      	str	r2, [sp, #0]
 80086bc:	22c8      	movs	r2, #200	@ 0xc8
 80086be:	2150      	movs	r1, #80	@ 0x50
 80086c0:	200a      	movs	r0, #10
 80086c2:	f001 fecb 	bl	800a45c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 80, "10.", &Font16, BLACK, WHITE);
 80086c6:	23ff      	movs	r3, #255	@ 0xff
 80086c8:	9301      	str	r3, [sp, #4]
 80086ca:	2300      	movs	r3, #0
 80086cc:	9300      	str	r3, [sp, #0]
 80086ce:	4b0a      	ldr	r3, [pc, #40]	@ (80086f8 <alarm_view_mode+0x1950>)
 80086d0:	4a10      	ldr	r2, [pc, #64]	@ (8008714 <alarm_view_mode+0x196c>)
 80086d2:	2150      	movs	r1, #80	@ 0x50
 80086d4:	200a      	movs	r0, #10
 80086d6:	f002 f973 	bl	800a9c0 <Paint_DrawString_EN>
                 drawn_alarm_view_mode(140, 80, alarm_view_mode->sParam_data_alarm_setup_mode_10, Font16);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80086de:	4b06      	ldr	r3, [pc, #24]	@ (80086f8 <alarm_view_mode+0x1950>)
 80086e0:	685a      	ldr	r2, [r3, #4]
 80086e2:	9200      	str	r2, [sp, #0]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	460a      	mov	r2, r1
 80086e8:	2150      	movs	r1, #80	@ 0x50
 80086ea:	208c      	movs	r0, #140	@ 0x8c
 80086ec:	f000 fa24 	bl	8008b38 <drawn_alarm_view_mode>
               
                break;
 80086f0:	e1fc      	b.n	8008aec <alarm_view_mode+0x1d44>
 80086f2:	bf00      	nop
 80086f4:	cccccccd 	.word	0xcccccccd
 80086f8:	20000274 	.word	0x20000274
 80086fc:	0800be50 	.word	0x0800be50
 8008700:	0800be54 	.word	0x0800be54
 8008704:	0800be68 	.word	0x0800be68
 8008708:	0800be6c 	.word	0x0800be6c
 800870c:	0800be70 	.word	0x0800be70
 8008710:	0800be74 	.word	0x0800be74
 8008714:	0800be78 	.word	0x0800be78
        
                case 7:
                //parameter 1
                Paint_ClearWindows(10, 0, 200, Font16.Height, WHITE);
 8008718:	4b9e      	ldr	r3, [pc, #632]	@ (8008994 <alarm_view_mode+0x1bec>)
 800871a:	88db      	ldrh	r3, [r3, #6]
 800871c:	22ff      	movs	r2, #255	@ 0xff
 800871e:	9200      	str	r2, [sp, #0]
 8008720:	22c8      	movs	r2, #200	@ 0xc8
 8008722:	2100      	movs	r1, #0
 8008724:	200a      	movs	r0, #10
 8008726:	f001 fe99 	bl	800a45c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 0, "6.", &Font16, BLACK, WHITE);
 800872a:	23ff      	movs	r3, #255	@ 0xff
 800872c:	9301      	str	r3, [sp, #4]
 800872e:	2300      	movs	r3, #0
 8008730:	9300      	str	r3, [sp, #0]
 8008732:	4b98      	ldr	r3, [pc, #608]	@ (8008994 <alarm_view_mode+0x1bec>)
 8008734:	4a98      	ldr	r2, [pc, #608]	@ (8008998 <alarm_view_mode+0x1bf0>)
 8008736:	2100      	movs	r1, #0
 8008738:	200a      	movs	r0, #10
 800873a:	f002 f941 	bl	800a9c0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 0, alarm_view_mode->sParam_data_alarm_setup_mode_6, Font16);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6959      	ldr	r1, [r3, #20]
 8008742:	4b94      	ldr	r3, [pc, #592]	@ (8008994 <alarm_view_mode+0x1bec>)
 8008744:	685a      	ldr	r2, [r3, #4]
 8008746:	9200      	str	r2, [sp, #0]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	460a      	mov	r2, r1
 800874c:	2100      	movs	r1, #0
 800874e:	208c      	movs	r0, #140	@ 0x8c
 8008750:	f000 f9f2 	bl	8008b38 <drawn_alarm_view_mode>

                //parameter 2
                Paint_ClearWindows(10, 20, 200, 20 + Font16.Height, WHITE);
 8008754:	4b8f      	ldr	r3, [pc, #572]	@ (8008994 <alarm_view_mode+0x1bec>)
 8008756:	88db      	ldrh	r3, [r3, #6]
 8008758:	3314      	adds	r3, #20
 800875a:	b29b      	uxth	r3, r3
 800875c:	22ff      	movs	r2, #255	@ 0xff
 800875e:	9200      	str	r2, [sp, #0]
 8008760:	22c8      	movs	r2, #200	@ 0xc8
 8008762:	2114      	movs	r1, #20
 8008764:	200a      	movs	r0, #10
 8008766:	f001 fe79 	bl	800a45c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 20, "7.", &Font16, BLACK, WHITE);
 800876a:	23ff      	movs	r3, #255	@ 0xff
 800876c:	9301      	str	r3, [sp, #4]
 800876e:	2300      	movs	r3, #0
 8008770:	9300      	str	r3, [sp, #0]
 8008772:	4b88      	ldr	r3, [pc, #544]	@ (8008994 <alarm_view_mode+0x1bec>)
 8008774:	4a89      	ldr	r2, [pc, #548]	@ (800899c <alarm_view_mode+0x1bf4>)
 8008776:	2114      	movs	r1, #20
 8008778:	200a      	movs	r0, #10
 800877a:	f002 f921 	bl	800a9c0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 20, alarm_view_mode->sParam_data_alarm_setup_mode_7, Font16);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6999      	ldr	r1, [r3, #24]
 8008782:	4b84      	ldr	r3, [pc, #528]	@ (8008994 <alarm_view_mode+0x1bec>)
 8008784:	685a      	ldr	r2, [r3, #4]
 8008786:	9200      	str	r2, [sp, #0]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	460a      	mov	r2, r1
 800878c:	2114      	movs	r1, #20
 800878e:	208c      	movs	r0, #140	@ 0x8c
 8008790:	f000 f9d2 	bl	8008b38 <drawn_alarm_view_mode>

                //parameter 3
                Paint_ClearWindows(10, 40, 200, 40 + Font16.Height, WHITE);
 8008794:	4b7f      	ldr	r3, [pc, #508]	@ (8008994 <alarm_view_mode+0x1bec>)
 8008796:	88db      	ldrh	r3, [r3, #6]
 8008798:	3328      	adds	r3, #40	@ 0x28
 800879a:	b29b      	uxth	r3, r3
 800879c:	22ff      	movs	r2, #255	@ 0xff
 800879e:	9200      	str	r2, [sp, #0]
 80087a0:	22c8      	movs	r2, #200	@ 0xc8
 80087a2:	2128      	movs	r1, #40	@ 0x28
 80087a4:	200a      	movs	r0, #10
 80087a6:	f001 fe59 	bl	800a45c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 40, "8.", &Font16, WHITE, BLACK);
 80087aa:	2300      	movs	r3, #0
 80087ac:	9301      	str	r3, [sp, #4]
 80087ae:	23ff      	movs	r3, #255	@ 0xff
 80087b0:	9300      	str	r3, [sp, #0]
 80087b2:	4b78      	ldr	r3, [pc, #480]	@ (8008994 <alarm_view_mode+0x1bec>)
 80087b4:	4a7a      	ldr	r2, [pc, #488]	@ (80089a0 <alarm_view_mode+0x1bf8>)
 80087b6:	2128      	movs	r1, #40	@ 0x28
 80087b8:	200a      	movs	r0, #10
 80087ba:	f002 f901 	bl	800a9c0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 40, alarm_view_mode->sParam_data_alarm_setup_mode_8, Font16);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	69d9      	ldr	r1, [r3, #28]
 80087c2:	4b74      	ldr	r3, [pc, #464]	@ (8008994 <alarm_view_mode+0x1bec>)
 80087c4:	685a      	ldr	r2, [r3, #4]
 80087c6:	9200      	str	r2, [sp, #0]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	460a      	mov	r2, r1
 80087cc:	2128      	movs	r1, #40	@ 0x28
 80087ce:	208c      	movs	r0, #140	@ 0x8c
 80087d0:	f000 f9b2 	bl	8008b38 <drawn_alarm_view_mode>

                //parameter 4
                Paint_ClearWindows(10, 60, 200, 60 + Font16.Height, WHITE);
 80087d4:	4b6f      	ldr	r3, [pc, #444]	@ (8008994 <alarm_view_mode+0x1bec>)
 80087d6:	88db      	ldrh	r3, [r3, #6]
 80087d8:	333c      	adds	r3, #60	@ 0x3c
 80087da:	b29b      	uxth	r3, r3
 80087dc:	22ff      	movs	r2, #255	@ 0xff
 80087de:	9200      	str	r2, [sp, #0]
 80087e0:	22c8      	movs	r2, #200	@ 0xc8
 80087e2:	213c      	movs	r1, #60	@ 0x3c
 80087e4:	200a      	movs	r0, #10
 80087e6:	f001 fe39 	bl	800a45c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 60, "9.", &Font16, BLACK, WHITE);
 80087ea:	23ff      	movs	r3, #255	@ 0xff
 80087ec:	9301      	str	r3, [sp, #4]
 80087ee:	2300      	movs	r3, #0
 80087f0:	9300      	str	r3, [sp, #0]
 80087f2:	4b68      	ldr	r3, [pc, #416]	@ (8008994 <alarm_view_mode+0x1bec>)
 80087f4:	4a6b      	ldr	r2, [pc, #428]	@ (80089a4 <alarm_view_mode+0x1bfc>)
 80087f6:	213c      	movs	r1, #60	@ 0x3c
 80087f8:	200a      	movs	r0, #10
 80087fa:	f002 f8e1 	bl	800a9c0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 60, alarm_view_mode->sParam_data_alarm_setup_mode_9, Font16);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6a19      	ldr	r1, [r3, #32]
 8008802:	4b64      	ldr	r3, [pc, #400]	@ (8008994 <alarm_view_mode+0x1bec>)
 8008804:	685a      	ldr	r2, [r3, #4]
 8008806:	9200      	str	r2, [sp, #0]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	460a      	mov	r2, r1
 800880c:	213c      	movs	r1, #60	@ 0x3c
 800880e:	208c      	movs	r0, #140	@ 0x8c
 8008810:	f000 f992 	bl	8008b38 <drawn_alarm_view_mode>

                //parameter 5
                Paint_ClearWindows(10, 80, 200, 80 + Font16.Height, WHITE);
 8008814:	4b5f      	ldr	r3, [pc, #380]	@ (8008994 <alarm_view_mode+0x1bec>)
 8008816:	88db      	ldrh	r3, [r3, #6]
 8008818:	3350      	adds	r3, #80	@ 0x50
 800881a:	b29b      	uxth	r3, r3
 800881c:	22ff      	movs	r2, #255	@ 0xff
 800881e:	9200      	str	r2, [sp, #0]
 8008820:	22c8      	movs	r2, #200	@ 0xc8
 8008822:	2150      	movs	r1, #80	@ 0x50
 8008824:	200a      	movs	r0, #10
 8008826:	f001 fe19 	bl	800a45c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 80, "10.", &Font16, BLACK, WHITE);
 800882a:	23ff      	movs	r3, #255	@ 0xff
 800882c:	9301      	str	r3, [sp, #4]
 800882e:	2300      	movs	r3, #0
 8008830:	9300      	str	r3, [sp, #0]
 8008832:	4b58      	ldr	r3, [pc, #352]	@ (8008994 <alarm_view_mode+0x1bec>)
 8008834:	4a5c      	ldr	r2, [pc, #368]	@ (80089a8 <alarm_view_mode+0x1c00>)
 8008836:	2150      	movs	r1, #80	@ 0x50
 8008838:	200a      	movs	r0, #10
 800883a:	f002 f8c1 	bl	800a9c0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 80, alarm_view_mode->sParam_data_alarm_setup_mode_10, Font16);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8008842:	4b54      	ldr	r3, [pc, #336]	@ (8008994 <alarm_view_mode+0x1bec>)
 8008844:	685a      	ldr	r2, [r3, #4]
 8008846:	9200      	str	r2, [sp, #0]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	460a      	mov	r2, r1
 800884c:	2150      	movs	r1, #80	@ 0x50
 800884e:	208c      	movs	r0, #140	@ 0x8c
 8008850:	f000 f972 	bl	8008b38 <drawn_alarm_view_mode>

                break;
 8008854:	e14a      	b.n	8008aec <alarm_view_mode+0x1d44>
        
                case 8:
                //parameter 1
                Paint_ClearWindows(10, 0, 200, Font16.Height, WHITE);
 8008856:	4b4f      	ldr	r3, [pc, #316]	@ (8008994 <alarm_view_mode+0x1bec>)
 8008858:	88db      	ldrh	r3, [r3, #6]
 800885a:	22ff      	movs	r2, #255	@ 0xff
 800885c:	9200      	str	r2, [sp, #0]
 800885e:	22c8      	movs	r2, #200	@ 0xc8
 8008860:	2100      	movs	r1, #0
 8008862:	200a      	movs	r0, #10
 8008864:	f001 fdfa 	bl	800a45c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 0, "6.", &Font16, BLACK, WHITE);
 8008868:	23ff      	movs	r3, #255	@ 0xff
 800886a:	9301      	str	r3, [sp, #4]
 800886c:	2300      	movs	r3, #0
 800886e:	9300      	str	r3, [sp, #0]
 8008870:	4b48      	ldr	r3, [pc, #288]	@ (8008994 <alarm_view_mode+0x1bec>)
 8008872:	4a49      	ldr	r2, [pc, #292]	@ (8008998 <alarm_view_mode+0x1bf0>)
 8008874:	2100      	movs	r1, #0
 8008876:	200a      	movs	r0, #10
 8008878:	f002 f8a2 	bl	800a9c0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 0, alarm_view_mode->sParam_data_alarm_setup_mode_6, Font16);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6959      	ldr	r1, [r3, #20]
 8008880:	4b44      	ldr	r3, [pc, #272]	@ (8008994 <alarm_view_mode+0x1bec>)
 8008882:	685a      	ldr	r2, [r3, #4]
 8008884:	9200      	str	r2, [sp, #0]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	460a      	mov	r2, r1
 800888a:	2100      	movs	r1, #0
 800888c:	208c      	movs	r0, #140	@ 0x8c
 800888e:	f000 f953 	bl	8008b38 <drawn_alarm_view_mode>

                //parameter 2
                Paint_ClearWindows(10, 20, 200, 20 + Font16.Height, WHITE);
 8008892:	4b40      	ldr	r3, [pc, #256]	@ (8008994 <alarm_view_mode+0x1bec>)
 8008894:	88db      	ldrh	r3, [r3, #6]
 8008896:	3314      	adds	r3, #20
 8008898:	b29b      	uxth	r3, r3
 800889a:	22ff      	movs	r2, #255	@ 0xff
 800889c:	9200      	str	r2, [sp, #0]
 800889e:	22c8      	movs	r2, #200	@ 0xc8
 80088a0:	2114      	movs	r1, #20
 80088a2:	200a      	movs	r0, #10
 80088a4:	f001 fdda 	bl	800a45c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 20, "7.", &Font16, BLACK, WHITE);
 80088a8:	23ff      	movs	r3, #255	@ 0xff
 80088aa:	9301      	str	r3, [sp, #4]
 80088ac:	2300      	movs	r3, #0
 80088ae:	9300      	str	r3, [sp, #0]
 80088b0:	4b38      	ldr	r3, [pc, #224]	@ (8008994 <alarm_view_mode+0x1bec>)
 80088b2:	4a3a      	ldr	r2, [pc, #232]	@ (800899c <alarm_view_mode+0x1bf4>)
 80088b4:	2114      	movs	r1, #20
 80088b6:	200a      	movs	r0, #10
 80088b8:	f002 f882 	bl	800a9c0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 20, alarm_view_mode->sParam_data_alarm_setup_mode_7, Font16);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6999      	ldr	r1, [r3, #24]
 80088c0:	4b34      	ldr	r3, [pc, #208]	@ (8008994 <alarm_view_mode+0x1bec>)
 80088c2:	685a      	ldr	r2, [r3, #4]
 80088c4:	9200      	str	r2, [sp, #0]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	460a      	mov	r2, r1
 80088ca:	2114      	movs	r1, #20
 80088cc:	208c      	movs	r0, #140	@ 0x8c
 80088ce:	f000 f933 	bl	8008b38 <drawn_alarm_view_mode>

                //parameter 3
                Paint_ClearWindows(10, 40, 200, 40 + Font16.Height, WHITE);
 80088d2:	4b30      	ldr	r3, [pc, #192]	@ (8008994 <alarm_view_mode+0x1bec>)
 80088d4:	88db      	ldrh	r3, [r3, #6]
 80088d6:	3328      	adds	r3, #40	@ 0x28
 80088d8:	b29b      	uxth	r3, r3
 80088da:	22ff      	movs	r2, #255	@ 0xff
 80088dc:	9200      	str	r2, [sp, #0]
 80088de:	22c8      	movs	r2, #200	@ 0xc8
 80088e0:	2128      	movs	r1, #40	@ 0x28
 80088e2:	200a      	movs	r0, #10
 80088e4:	f001 fdba 	bl	800a45c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 40, "8.", &Font16, BLACK, WHITE);
 80088e8:	23ff      	movs	r3, #255	@ 0xff
 80088ea:	9301      	str	r3, [sp, #4]
 80088ec:	2300      	movs	r3, #0
 80088ee:	9300      	str	r3, [sp, #0]
 80088f0:	4b28      	ldr	r3, [pc, #160]	@ (8008994 <alarm_view_mode+0x1bec>)
 80088f2:	4a2b      	ldr	r2, [pc, #172]	@ (80089a0 <alarm_view_mode+0x1bf8>)
 80088f4:	2128      	movs	r1, #40	@ 0x28
 80088f6:	200a      	movs	r0, #10
 80088f8:	f002 f862 	bl	800a9c0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 40, alarm_view_mode->sParam_data_alarm_setup_mode_8, Font16);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	69d9      	ldr	r1, [r3, #28]
 8008900:	4b24      	ldr	r3, [pc, #144]	@ (8008994 <alarm_view_mode+0x1bec>)
 8008902:	685a      	ldr	r2, [r3, #4]
 8008904:	9200      	str	r2, [sp, #0]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	460a      	mov	r2, r1
 800890a:	2128      	movs	r1, #40	@ 0x28
 800890c:	208c      	movs	r0, #140	@ 0x8c
 800890e:	f000 f913 	bl	8008b38 <drawn_alarm_view_mode>

                //parameter 4
                Paint_ClearWindows(10, 60, 200, 60 + Font16.Height, WHITE);
 8008912:	4b20      	ldr	r3, [pc, #128]	@ (8008994 <alarm_view_mode+0x1bec>)
 8008914:	88db      	ldrh	r3, [r3, #6]
 8008916:	333c      	adds	r3, #60	@ 0x3c
 8008918:	b29b      	uxth	r3, r3
 800891a:	22ff      	movs	r2, #255	@ 0xff
 800891c:	9200      	str	r2, [sp, #0]
 800891e:	22c8      	movs	r2, #200	@ 0xc8
 8008920:	213c      	movs	r1, #60	@ 0x3c
 8008922:	200a      	movs	r0, #10
 8008924:	f001 fd9a 	bl	800a45c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 60, "9.", &Font16, WHITE, BLACK);
 8008928:	2300      	movs	r3, #0
 800892a:	9301      	str	r3, [sp, #4]
 800892c:	23ff      	movs	r3, #255	@ 0xff
 800892e:	9300      	str	r3, [sp, #0]
 8008930:	4b18      	ldr	r3, [pc, #96]	@ (8008994 <alarm_view_mode+0x1bec>)
 8008932:	4a1c      	ldr	r2, [pc, #112]	@ (80089a4 <alarm_view_mode+0x1bfc>)
 8008934:	213c      	movs	r1, #60	@ 0x3c
 8008936:	200a      	movs	r0, #10
 8008938:	f002 f842 	bl	800a9c0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 60, alarm_view_mode->sParam_data_alarm_setup_mode_9, Font16);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6a19      	ldr	r1, [r3, #32]
 8008940:	4b14      	ldr	r3, [pc, #80]	@ (8008994 <alarm_view_mode+0x1bec>)
 8008942:	685a      	ldr	r2, [r3, #4]
 8008944:	9200      	str	r2, [sp, #0]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	460a      	mov	r2, r1
 800894a:	213c      	movs	r1, #60	@ 0x3c
 800894c:	208c      	movs	r0, #140	@ 0x8c
 800894e:	f000 f8f3 	bl	8008b38 <drawn_alarm_view_mode>

                //parameter 5
                Paint_ClearWindows(10, 80, 200, 80 + Font16.Height, WHITE);
 8008952:	4b10      	ldr	r3, [pc, #64]	@ (8008994 <alarm_view_mode+0x1bec>)
 8008954:	88db      	ldrh	r3, [r3, #6]
 8008956:	3350      	adds	r3, #80	@ 0x50
 8008958:	b29b      	uxth	r3, r3
 800895a:	22ff      	movs	r2, #255	@ 0xff
 800895c:	9200      	str	r2, [sp, #0]
 800895e:	22c8      	movs	r2, #200	@ 0xc8
 8008960:	2150      	movs	r1, #80	@ 0x50
 8008962:	200a      	movs	r0, #10
 8008964:	f001 fd7a 	bl	800a45c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 80, "10.", &Font16, BLACK, WHITE);
 8008968:	23ff      	movs	r3, #255	@ 0xff
 800896a:	9301      	str	r3, [sp, #4]
 800896c:	2300      	movs	r3, #0
 800896e:	9300      	str	r3, [sp, #0]
 8008970:	4b08      	ldr	r3, [pc, #32]	@ (8008994 <alarm_view_mode+0x1bec>)
 8008972:	4a0d      	ldr	r2, [pc, #52]	@ (80089a8 <alarm_view_mode+0x1c00>)
 8008974:	2150      	movs	r1, #80	@ 0x50
 8008976:	200a      	movs	r0, #10
 8008978:	f002 f822 	bl	800a9c0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 80, alarm_view_mode->sParam_data_alarm_setup_mode_10, Font16);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8008980:	4b04      	ldr	r3, [pc, #16]	@ (8008994 <alarm_view_mode+0x1bec>)
 8008982:	685a      	ldr	r2, [r3, #4]
 8008984:	9200      	str	r2, [sp, #0]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	460a      	mov	r2, r1
 800898a:	2150      	movs	r1, #80	@ 0x50
 800898c:	208c      	movs	r0, #140	@ 0x8c
 800898e:	f000 f8d3 	bl	8008b38 <drawn_alarm_view_mode>

                break;
 8008992:	e0ab      	b.n	8008aec <alarm_view_mode+0x1d44>
 8008994:	20000274 	.word	0x20000274
 8008998:	0800be68 	.word	0x0800be68
 800899c:	0800be6c 	.word	0x0800be6c
 80089a0:	0800be70 	.word	0x0800be70
 80089a4:	0800be74 	.word	0x0800be74
 80089a8:	0800be78 	.word	0x0800be78
        
                case 9:
                //parameter 1

                Paint_ClearWindows(10, 0, 200, Font16.Height, WHITE);
 80089ac:	4b5c      	ldr	r3, [pc, #368]	@ (8008b20 <alarm_view_mode+0x1d78>)
 80089ae:	88db      	ldrh	r3, [r3, #6]
 80089b0:	22ff      	movs	r2, #255	@ 0xff
 80089b2:	9200      	str	r2, [sp, #0]
 80089b4:	22c8      	movs	r2, #200	@ 0xc8
 80089b6:	2100      	movs	r1, #0
 80089b8:	200a      	movs	r0, #10
 80089ba:	f001 fd4f 	bl	800a45c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 0, "6.", &Font16, BLACK, WHITE);
 80089be:	23ff      	movs	r3, #255	@ 0xff
 80089c0:	9301      	str	r3, [sp, #4]
 80089c2:	2300      	movs	r3, #0
 80089c4:	9300      	str	r3, [sp, #0]
 80089c6:	4b56      	ldr	r3, [pc, #344]	@ (8008b20 <alarm_view_mode+0x1d78>)
 80089c8:	4a56      	ldr	r2, [pc, #344]	@ (8008b24 <alarm_view_mode+0x1d7c>)
 80089ca:	2100      	movs	r1, #0
 80089cc:	200a      	movs	r0, #10
 80089ce:	f001 fff7 	bl	800a9c0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 0, alarm_view_mode->sParam_data_alarm_setup_mode_6, Font16);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6959      	ldr	r1, [r3, #20]
 80089d6:	4b52      	ldr	r3, [pc, #328]	@ (8008b20 <alarm_view_mode+0x1d78>)
 80089d8:	685a      	ldr	r2, [r3, #4]
 80089da:	9200      	str	r2, [sp, #0]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	460a      	mov	r2, r1
 80089e0:	2100      	movs	r1, #0
 80089e2:	208c      	movs	r0, #140	@ 0x8c
 80089e4:	f000 f8a8 	bl	8008b38 <drawn_alarm_view_mode>

                //parameter 2

                Paint_ClearWindows(10, 20, 200, 20 + Font16.Height, WHITE);
 80089e8:	4b4d      	ldr	r3, [pc, #308]	@ (8008b20 <alarm_view_mode+0x1d78>)
 80089ea:	88db      	ldrh	r3, [r3, #6]
 80089ec:	3314      	adds	r3, #20
 80089ee:	b29b      	uxth	r3, r3
 80089f0:	22ff      	movs	r2, #255	@ 0xff
 80089f2:	9200      	str	r2, [sp, #0]
 80089f4:	22c8      	movs	r2, #200	@ 0xc8
 80089f6:	2114      	movs	r1, #20
 80089f8:	200a      	movs	r0, #10
 80089fa:	f001 fd2f 	bl	800a45c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 20, "7.", &Font16, BLACK, WHITE);
 80089fe:	23ff      	movs	r3, #255	@ 0xff
 8008a00:	9301      	str	r3, [sp, #4]
 8008a02:	2300      	movs	r3, #0
 8008a04:	9300      	str	r3, [sp, #0]
 8008a06:	4b46      	ldr	r3, [pc, #280]	@ (8008b20 <alarm_view_mode+0x1d78>)
 8008a08:	4a47      	ldr	r2, [pc, #284]	@ (8008b28 <alarm_view_mode+0x1d80>)
 8008a0a:	2114      	movs	r1, #20
 8008a0c:	200a      	movs	r0, #10
 8008a0e:	f001 ffd7 	bl	800a9c0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 20, alarm_view_mode->sParam_data_alarm_setup_mode_7, Font16);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6999      	ldr	r1, [r3, #24]
 8008a16:	4b42      	ldr	r3, [pc, #264]	@ (8008b20 <alarm_view_mode+0x1d78>)
 8008a18:	685a      	ldr	r2, [r3, #4]
 8008a1a:	9200      	str	r2, [sp, #0]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	460a      	mov	r2, r1
 8008a20:	2114      	movs	r1, #20
 8008a22:	208c      	movs	r0, #140	@ 0x8c
 8008a24:	f000 f888 	bl	8008b38 <drawn_alarm_view_mode>

                //parameter 3

                Paint_ClearWindows(10, 40, 200, 40 + Font16.Height, WHITE);
 8008a28:	4b3d      	ldr	r3, [pc, #244]	@ (8008b20 <alarm_view_mode+0x1d78>)
 8008a2a:	88db      	ldrh	r3, [r3, #6]
 8008a2c:	3328      	adds	r3, #40	@ 0x28
 8008a2e:	b29b      	uxth	r3, r3
 8008a30:	22ff      	movs	r2, #255	@ 0xff
 8008a32:	9200      	str	r2, [sp, #0]
 8008a34:	22c8      	movs	r2, #200	@ 0xc8
 8008a36:	2128      	movs	r1, #40	@ 0x28
 8008a38:	200a      	movs	r0, #10
 8008a3a:	f001 fd0f 	bl	800a45c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 40, "8.", &Font16, BLACK, WHITE);
 8008a3e:	23ff      	movs	r3, #255	@ 0xff
 8008a40:	9301      	str	r3, [sp, #4]
 8008a42:	2300      	movs	r3, #0
 8008a44:	9300      	str	r3, [sp, #0]
 8008a46:	4b36      	ldr	r3, [pc, #216]	@ (8008b20 <alarm_view_mode+0x1d78>)
 8008a48:	4a38      	ldr	r2, [pc, #224]	@ (8008b2c <alarm_view_mode+0x1d84>)
 8008a4a:	2128      	movs	r1, #40	@ 0x28
 8008a4c:	200a      	movs	r0, #10
 8008a4e:	f001 ffb7 	bl	800a9c0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 40, alarm_view_mode->sParam_data_alarm_setup_mode_8, Font16);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	69d9      	ldr	r1, [r3, #28]
 8008a56:	4b32      	ldr	r3, [pc, #200]	@ (8008b20 <alarm_view_mode+0x1d78>)
 8008a58:	685a      	ldr	r2, [r3, #4]
 8008a5a:	9200      	str	r2, [sp, #0]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	460a      	mov	r2, r1
 8008a60:	2128      	movs	r1, #40	@ 0x28
 8008a62:	208c      	movs	r0, #140	@ 0x8c
 8008a64:	f000 f868 	bl	8008b38 <drawn_alarm_view_mode>

                //parameter 4

                Paint_ClearWindows(10, 60, 200, 60 + Font16.Height, WHITE);
 8008a68:	4b2d      	ldr	r3, [pc, #180]	@ (8008b20 <alarm_view_mode+0x1d78>)
 8008a6a:	88db      	ldrh	r3, [r3, #6]
 8008a6c:	333c      	adds	r3, #60	@ 0x3c
 8008a6e:	b29b      	uxth	r3, r3
 8008a70:	22ff      	movs	r2, #255	@ 0xff
 8008a72:	9200      	str	r2, [sp, #0]
 8008a74:	22c8      	movs	r2, #200	@ 0xc8
 8008a76:	213c      	movs	r1, #60	@ 0x3c
 8008a78:	200a      	movs	r0, #10
 8008a7a:	f001 fcef 	bl	800a45c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 60, "9.", &Font16, BLACK, WHITE);
 8008a7e:	23ff      	movs	r3, #255	@ 0xff
 8008a80:	9301      	str	r3, [sp, #4]
 8008a82:	2300      	movs	r3, #0
 8008a84:	9300      	str	r3, [sp, #0]
 8008a86:	4b26      	ldr	r3, [pc, #152]	@ (8008b20 <alarm_view_mode+0x1d78>)
 8008a88:	4a29      	ldr	r2, [pc, #164]	@ (8008b30 <alarm_view_mode+0x1d88>)
 8008a8a:	213c      	movs	r1, #60	@ 0x3c
 8008a8c:	200a      	movs	r0, #10
 8008a8e:	f001 ff97 	bl	800a9c0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 60, alarm_view_mode->sParam_data_alarm_setup_mode_9, Font16);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6a19      	ldr	r1, [r3, #32]
 8008a96:	4b22      	ldr	r3, [pc, #136]	@ (8008b20 <alarm_view_mode+0x1d78>)
 8008a98:	685a      	ldr	r2, [r3, #4]
 8008a9a:	9200      	str	r2, [sp, #0]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	460a      	mov	r2, r1
 8008aa0:	213c      	movs	r1, #60	@ 0x3c
 8008aa2:	208c      	movs	r0, #140	@ 0x8c
 8008aa4:	f000 f848 	bl	8008b38 <drawn_alarm_view_mode>

                //parameter 5

                Paint_ClearWindows(10, 80, 200, 80 + Font16.Height, WHITE);
 8008aa8:	4b1d      	ldr	r3, [pc, #116]	@ (8008b20 <alarm_view_mode+0x1d78>)
 8008aaa:	88db      	ldrh	r3, [r3, #6]
 8008aac:	3350      	adds	r3, #80	@ 0x50
 8008aae:	b29b      	uxth	r3, r3
 8008ab0:	22ff      	movs	r2, #255	@ 0xff
 8008ab2:	9200      	str	r2, [sp, #0]
 8008ab4:	22c8      	movs	r2, #200	@ 0xc8
 8008ab6:	2150      	movs	r1, #80	@ 0x50
 8008ab8:	200a      	movs	r0, #10
 8008aba:	f001 fccf 	bl	800a45c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 80, "10.", &Font16, WHITE, BLACK);
 8008abe:	2300      	movs	r3, #0
 8008ac0:	9301      	str	r3, [sp, #4]
 8008ac2:	23ff      	movs	r3, #255	@ 0xff
 8008ac4:	9300      	str	r3, [sp, #0]
 8008ac6:	4b16      	ldr	r3, [pc, #88]	@ (8008b20 <alarm_view_mode+0x1d78>)
 8008ac8:	4a1a      	ldr	r2, [pc, #104]	@ (8008b34 <alarm_view_mode+0x1d8c>)
 8008aca:	2150      	movs	r1, #80	@ 0x50
 8008acc:	200a      	movs	r0, #10
 8008ace:	f001 ff77 	bl	800a9c0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 80, alarm_view_mode->sParam_data_alarm_setup_mode_10, Font16);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8008ad6:	4b12      	ldr	r3, [pc, #72]	@ (8008b20 <alarm_view_mode+0x1d78>)
 8008ad8:	685a      	ldr	r2, [r3, #4]
 8008ada:	9200      	str	r2, [sp, #0]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	460a      	mov	r2, r1
 8008ae0:	2150      	movs	r1, #80	@ 0x50
 8008ae2:	208c      	movs	r0, #140	@ 0x8c
 8008ae4:	f000 f828 	bl	8008b38 <drawn_alarm_view_mode>

                break;
 8008ae8:	e000      	b.n	8008aec <alarm_view_mode+0x1d44>
        
                default: break;
 8008aea:	bf00      	nop
            }

            num = num - 1;
 8008aec:	7ffb      	ldrb	r3, [r7, #31]
 8008aee:	3b01      	subs	r3, #1
 8008af0:	77fb      	strb	r3, [r7, #31]
            if(num == 0) {
 8008af2:	7ffb      	ldrb	r3, [r7, #31]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d102      	bne.n	8008afe <alarm_view_mode+0x1d56>
                num = 3;
 8008af8:	2303      	movs	r3, #3
 8008afa:	77fb      	strb	r3, [r7, #31]
                break;
 8008afc:	e004      	b.n	8008b08 <alarm_view_mode+0x1d60>
            }
	        EPD_2IN9_V2_Display_Partial(BlackImage);
 8008afe:	6938      	ldr	r0, [r7, #16]
 8008b00:	f7fd fefa 	bl	80068f8 <EPD_2IN9_V2_Display_Partial>
            draw_battery(battery_percentage);
 8008b04:	f7ff ba22 	b.w	8007f4c <alarm_view_mode+0x11a4>
    }
}

  flag_alarm_view_mode->flag_ALARM_VIEW_MODE = 0;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	709a      	strb	r2, [r3, #2]
  EPD_2IN9_V2_Sleep();
 8008b0e:	f7fd ff65 	bl	80069dc <EPD_2IN9_V2_Sleep>
  free(BlackImage);
 8008b12:	6938      	ldr	r0, [r7, #16]
 8008b14:	f002 f978 	bl	800ae08 <free>
}
 8008b18:	bf00      	nop
 8008b1a:	3720      	adds	r7, #32
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}
 8008b20:	20000274 	.word	0x20000274
 8008b24:	0800be68 	.word	0x0800be68
 8008b28:	0800be6c 	.word	0x0800be6c
 8008b2c:	0800be70 	.word	0x0800be70
 8008b30:	0800be74 	.word	0x0800be74
 8008b34:	0800be78 	.word	0x0800be78

08008b38 <drawn_alarm_view_mode>:

void drawn_alarm_view_mode(uint16_t Xstart, uint16_t Ystart, ALARM_DATA_SETUP_MODE *sParam_data_alarm_setup_mode, sFONT Font)
{
 8008b38:	b082      	sub	sp, #8
 8008b3a:	b590      	push	{r4, r7, lr}
 8008b3c:	b089      	sub	sp, #36	@ 0x24
 8008b3e:	af04      	add	r7, sp, #16
 8008b40:	603a      	str	r2, [r7, #0]
 8008b42:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b44:	4603      	mov	r3, r0
 8008b46:	80fb      	strh	r3, [r7, #6]
 8008b48:	460b      	mov	r3, r1
 8008b4a:	80bb      	strh	r3, [r7, #4]
    PAINT_TIME sPaint_time;
    sPaint_time.Hour = sParam_data_alarm_setup_mode->hour;
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	789b      	ldrb	r3, [r3, #2]
 8008b50:	733b      	strb	r3, [r7, #12]
    sPaint_time.Min = sParam_data_alarm_setup_mode->minute;
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	785b      	ldrb	r3, [r3, #1]
 8008b56:	737b      	strb	r3, [r7, #13]
    sPaint_time.Sec = sParam_data_alarm_setup_mode->second;
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	73bb      	strb	r3, [r7, #14]
    Paint_DrawTime(50, Ystart, &sPaint_time, &Font, WHITE, BLACK);
 8008b5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008b62:	f107 0208 	add.w	r2, r7, #8
 8008b66:	88b9      	ldrh	r1, [r7, #4]
 8008b68:	2000      	movs	r0, #0
 8008b6a:	9001      	str	r0, [sp, #4]
 8008b6c:	20ff      	movs	r0, #255	@ 0xff
 8008b6e:	9000      	str	r0, [sp, #0]
 8008b70:	2032      	movs	r0, #50	@ 0x32
 8008b72:	f002 f847 	bl	800ac04 <Paint_DrawTime>
    if(sParam_data_alarm_setup_mode->on_off == TRUE)
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	795b      	ldrb	r3, [r3, #5]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d01d      	beq.n	8008bba <drawn_alarm_view_mode+0x82>
    {
    Paint_DrawRectangle(Xstart, Ystart + 2, Xstart + 10, Ystart + 12, BLACK, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 8008b7e:	88bb      	ldrh	r3, [r7, #4]
 8008b80:	3302      	adds	r3, #2
 8008b82:	b299      	uxth	r1, r3
 8008b84:	88fb      	ldrh	r3, [r7, #6]
 8008b86:	330a      	adds	r3, #10
 8008b88:	b29a      	uxth	r2, r3
 8008b8a:	88bb      	ldrh	r3, [r7, #4]
 8008b8c:	330c      	adds	r3, #12
 8008b8e:	b29b      	uxth	r3, r3
 8008b90:	88f8      	ldrh	r0, [r7, #6]
 8008b92:	2401      	movs	r4, #1
 8008b94:	9402      	str	r4, [sp, #8]
 8008b96:	2401      	movs	r4, #1
 8008b98:	9401      	str	r4, [sp, #4]
 8008b9a:	2400      	movs	r4, #0
 8008b9c:	9400      	str	r4, [sp, #0]
 8008b9e:	f001 fde3 	bl	800a768 <Paint_DrawRectangle>
    Paint_DrawString_EN(Xstart + 20, Ystart, "ON", &Font16, BLACK, WHITE);
 8008ba2:	88fb      	ldrh	r3, [r7, #6]
 8008ba4:	3314      	adds	r3, #20
 8008ba6:	b298      	uxth	r0, r3
 8008ba8:	88b9      	ldrh	r1, [r7, #4]
 8008baa:	23ff      	movs	r3, #255	@ 0xff
 8008bac:	9301      	str	r3, [sp, #4]
 8008bae:	2300      	movs	r3, #0
 8008bb0:	9300      	str	r3, [sp, #0]
 8008bb2:	4b18      	ldr	r3, [pc, #96]	@ (8008c14 <drawn_alarm_view_mode+0xdc>)
 8008bb4:	4a18      	ldr	r2, [pc, #96]	@ (8008c18 <drawn_alarm_view_mode+0xe0>)
 8008bb6:	f001 ff03 	bl	800a9c0 <Paint_DrawString_EN>
    }

    if(sParam_data_alarm_setup_mode->on_off == FALSE)
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	795b      	ldrb	r3, [r3, #5]
 8008bbe:	f083 0301 	eor.w	r3, r3, #1
 8008bc2:	b2db      	uxtb	r3, r3
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d01d      	beq.n	8008c04 <drawn_alarm_view_mode+0xcc>
    {
    Paint_DrawRectangle(Xstart, Ystart + 2, Xstart + 10, Ystart + 12, BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 8008bc8:	88bb      	ldrh	r3, [r7, #4]
 8008bca:	3302      	adds	r3, #2
 8008bcc:	b299      	uxth	r1, r3
 8008bce:	88fb      	ldrh	r3, [r7, #6]
 8008bd0:	330a      	adds	r3, #10
 8008bd2:	b29a      	uxth	r2, r3
 8008bd4:	88bb      	ldrh	r3, [r7, #4]
 8008bd6:	330c      	adds	r3, #12
 8008bd8:	b29b      	uxth	r3, r3
 8008bda:	88f8      	ldrh	r0, [r7, #6]
 8008bdc:	2400      	movs	r4, #0
 8008bde:	9402      	str	r4, [sp, #8]
 8008be0:	2401      	movs	r4, #1
 8008be2:	9401      	str	r4, [sp, #4]
 8008be4:	2400      	movs	r4, #0
 8008be6:	9400      	str	r4, [sp, #0]
 8008be8:	f001 fdbe 	bl	800a768 <Paint_DrawRectangle>
    Paint_DrawString_EN(Xstart + 20, Ystart, "OFF", &Font16, BLACK, WHITE);
 8008bec:	88fb      	ldrh	r3, [r7, #6]
 8008bee:	3314      	adds	r3, #20
 8008bf0:	b298      	uxth	r0, r3
 8008bf2:	88b9      	ldrh	r1, [r7, #4]
 8008bf4:	23ff      	movs	r3, #255	@ 0xff
 8008bf6:	9301      	str	r3, [sp, #4]
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	9300      	str	r3, [sp, #0]
 8008bfc:	4b05      	ldr	r3, [pc, #20]	@ (8008c14 <drawn_alarm_view_mode+0xdc>)
 8008bfe:	4a07      	ldr	r2, [pc, #28]	@ (8008c1c <drawn_alarm_view_mode+0xe4>)
 8008c00:	f001 fede 	bl	800a9c0 <Paint_DrawString_EN>
    }
}
 8008c04:	bf00      	nop
 8008c06:	3714      	adds	r7, #20
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8008c0e:	b002      	add	sp, #8
 8008c10:	4770      	bx	lr
 8008c12:	bf00      	nop
 8008c14:	20000274 	.word	0x20000274
 8008c18:	0800be7c 	.word	0x0800be7c
 8008c1c:	0800be80 	.word	0x0800be80

08008c20 <alarm_setup_mode>:

//alarm setup mode
void alarm_setup_mode(FLAG_SYSTEM *flag_alarm_set_up_mode, SYSTEM_STATE *system_state, ALARM_SETUP_DATA *alarm_setup_data, uint16_t battery_percentage)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b08a      	sub	sp, #40	@ 0x28
 8008c24:	af02      	add	r7, sp, #8
 8008c26:	60f8      	str	r0, [r7, #12]
 8008c28:	60b9      	str	r1, [r7, #8]
 8008c2a:	607a      	str	r2, [r7, #4]
 8008c2c:	807b      	strh	r3, [r7, #2]
	UBYTE *BlackImage;
    UBYTE num = 3;
 8008c2e:	2303      	movs	r3, #3
 8008c30:	77fb      	strb	r3, [r7, #31]
	UWORD Imagesize = ((EPD_2IN9_V2_WIDTH % 8 == 0)? (EPD_2IN9_V2_WIDTH / 8 ): (EPD_2IN9_V2_WIDTH / 8 + 1)) * EPD_2IN9_V2_HEIGHT;
 8008c32:	f44f 5394 	mov.w	r3, #4736	@ 0x1280
 8008c36:	83bb      	strh	r3, [r7, #28]
    if((BlackImage = (UBYTE *)malloc(Imagesize)) == NULL) {
 8008c38:	8bbb      	ldrh	r3, [r7, #28]
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f002 f8dc 	bl	800adf8 <malloc>
 8008c40:	4603      	mov	r3, r0
 8008c42:	61bb      	str	r3, [r7, #24]
 8008c44:	69bb      	ldr	r3, [r7, #24]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d102      	bne.n	8008c50 <alarm_setup_mode+0x30>
        printf("Failed to apply for black memory...\r\n");
 8008c4a:	48a8      	ldr	r0, [pc, #672]	@ (8008eec <alarm_setup_mode+0x2cc>)
 8008c4c:	f002 fabc 	bl	800b1c8 <puts>
    }
    ALARM_DATA_SETUP_MODE *alarm_setup_data_store = malloc(sizeof(ALARM_DATA_SETUP_MODE));
 8008c50:	2006      	movs	r0, #6
 8008c52:	f002 f8d1 	bl	800adf8 <malloc>
 8008c56:	4603      	mov	r3, r0
 8008c58:	617b      	str	r3, [r7, #20]
    alarm_setup_data_store->hour    = alarm_setup_data->hour;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	785a      	ldrb	r2, [r3, #1]
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	709a      	strb	r2, [r3, #2]
    alarm_setup_data_store->minute  = alarm_setup_data->minute;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	781a      	ldrb	r2, [r3, #0]
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	705a      	strb	r2, [r3, #1]
    alarm_setup_data_store->on_off  = alarm_setup_data->on_off;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	791a      	ldrb	r2, [r3, #4]
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	715a      	strb	r2, [r3, #5]

    
	EPD_2IN9_V2_Init();
 8008c72:	f7fd fd45 	bl	8006700 <EPD_2IN9_V2_Init>
	if(flag_alarm_set_up_mode->flag_ALARM_SETUP_MODE == 1)
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	78db      	ldrb	r3, [r3, #3]
 8008c7a:	2b01      	cmp	r3, #1
 8008c7c:	d133      	bne.n	8008ce6 <alarm_setup_mode+0xc6>
	{
        flag_alarm_set_up_mode->flag_ALARM_VIEW_MODE    = 1;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	2201      	movs	r2, #1
 8008c82:	709a      	strb	r2, [r3, #2]
        flag_alarm_set_up_mode->flag_DEFAULT_MODE       = 1;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2201      	movs	r2, #1
 8008c88:	701a      	strb	r2, [r3, #0]
        flag_alarm_set_up_mode->flag_SYSTEM_SETUP_MODE  = 1;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	2201      	movs	r2, #1
 8008c8e:	711a      	strb	r2, [r3, #4]
        flag_alarm_set_up_mode->flag_TIME_SETUP_MODE    = 1;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	2201      	movs	r2, #1
 8008c94:	705a      	strb	r2, [r3, #1]

		EPD_2IN9_V2_Init();
 8008c96:	f7fd fd33 	bl	8006700 <EPD_2IN9_V2_Init>
    	EPD_2IN9_V2_Clear();
 8008c9a:	f7fd fdb3 	bl	8006804 <EPD_2IN9_V2_Clear>
    	DEV_Delay_ms(1000);
 8008c9e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8008ca2:	f7f9 fea3 	bl	80029ec <HAL_Delay>
    	EPD_2IN9_V2_Init_Fast();
 8008ca6:	f7fd fd69 	bl	800677c <EPD_2IN9_V2_Init_Fast>
    	Paint_NewImage(BlackImage, EPD_2IN9_V2_WIDTH, EPD_2IN9_V2_HEIGHT, 90, WHITE);
 8008caa:	23ff      	movs	r3, #255	@ 0xff
 8008cac:	9300      	str	r3, [sp, #0]
 8008cae:	235a      	movs	r3, #90	@ 0x5a
 8008cb0:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8008cb4:	2180      	movs	r1, #128	@ 0x80
 8008cb6:	69b8      	ldr	r0, [r7, #24]
 8008cb8:	f001 f978 	bl	8009fac <Paint_NewImage>
    	printf("Drawing\r\n");
 8008cbc:	488c      	ldr	r0, [pc, #560]	@ (8008ef0 <alarm_setup_mode+0x2d0>)
 8008cbe:	f002 fa83 	bl	800b1c8 <puts>
    	//1.Select Image
    	Paint_SelectImage(BlackImage);
 8008cc2:	69b8      	ldr	r0, [r7, #24]
 8008cc4:	f001 f9c6 	bl	800a054 <Paint_SelectImage>
    	Paint_Clear(WHITE);
 8008cc8:	20ff      	movs	r0, #255	@ 0xff
 8008cca:	f001 fb1f 	bl	800a30c <Paint_Clear>

    	// 2.Drawing on the image
           
            drawn_alarm_setup_mode(90, 100, alarm_setup_data_store, Font24);
 8008cce:	4b89      	ldr	r3, [pc, #548]	@ (8008ef4 <alarm_setup_mode+0x2d4>)
 8008cd0:	685a      	ldr	r2, [r3, #4]
 8008cd2:	9200      	str	r2, [sp, #0]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	697a      	ldr	r2, [r7, #20]
 8008cd8:	2164      	movs	r1, #100	@ 0x64
 8008cda:	205a      	movs	r0, #90	@ 0x5a
 8008cdc:	f000 f95a 	bl	8008f94 <drawn_alarm_setup_mode>
    //     case NOT_USED_MODE:
    //         break;
    //     default:
    //         break;
    // }
            EPD_2IN9_V2_Display_Base(BlackImage);
 8008ce0:	69b8      	ldr	r0, [r7, #24]
 8008ce2:	f7fd fdd6 	bl	8006892 <EPD_2IN9_V2_Display_Base>

        // num = num - 1;
        // if(num == 0) {
        // }
		// EPD_2IN9_V2_Display_Partial(BlackImage);
        switch (system_state->alarm_setup_cursor)
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	78db      	ldrb	r3, [r3, #3]
 8008cea:	2b04      	cmp	r3, #4
 8008cec:	f000 8106 	beq.w	8008efc <alarm_setup_mode+0x2dc>
 8008cf0:	2b04      	cmp	r3, #4
 8008cf2:	f300 813b 	bgt.w	8008f6c <alarm_setup_mode+0x34c>
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d003      	beq.n	8008d02 <alarm_setup_mode+0xe2>
 8008cfa:	2b01      	cmp	r3, #1
 8008cfc:	f000 808e 	beq.w	8008e1c <alarm_setup_mode+0x1fc>
            //     }
            //     EPD_2IN9_V2_Display_Partial(BlackImage);
            // }
            // break;
        default:
            break;
 8008d00:	e134      	b.n	8008f6c <alarm_setup_mode+0x34c>
                Paint_ClearWindows(100, 50, 100 + Font24.Width * 7, 50 + Font24.Height, WHITE);
 8008d02:	4b7c      	ldr	r3, [pc, #496]	@ (8008ef4 <alarm_setup_mode+0x2d4>)
 8008d04:	889b      	ldrh	r3, [r3, #4]
 8008d06:	461a      	mov	r2, r3
 8008d08:	00d2      	lsls	r2, r2, #3
 8008d0a:	1ad3      	subs	r3, r2, r3
 8008d0c:	b29b      	uxth	r3, r3
 8008d0e:	3364      	adds	r3, #100	@ 0x64
 8008d10:	b29a      	uxth	r2, r3
 8008d12:	4b78      	ldr	r3, [pc, #480]	@ (8008ef4 <alarm_setup_mode+0x2d4>)
 8008d14:	88db      	ldrh	r3, [r3, #6]
 8008d16:	3332      	adds	r3, #50	@ 0x32
 8008d18:	b29b      	uxth	r3, r3
 8008d1a:	21ff      	movs	r1, #255	@ 0xff
 8008d1c:	9100      	str	r1, [sp, #0]
 8008d1e:	2132      	movs	r1, #50	@ 0x32
 8008d20:	2064      	movs	r0, #100	@ 0x64
 8008d22:	f001 fb9b 	bl	800a45c <Paint_ClearWindows>
                drawn_alarm_setup_mode(90, 100, alarm_setup_data_store, Font24);
 8008d26:	4b73      	ldr	r3, [pc, #460]	@ (8008ef4 <alarm_setup_mode+0x2d4>)
 8008d28:	685a      	ldr	r2, [r3, #4]
 8008d2a:	9200      	str	r2, [sp, #0]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	697a      	ldr	r2, [r7, #20]
 8008d30:	2164      	movs	r1, #100	@ 0x64
 8008d32:	205a      	movs	r0, #90	@ 0x5a
 8008d34:	f000 f92e 	bl	8008f94 <drawn_alarm_setup_mode>
                    draw_battery(battery_percentage);
 8008d38:	887b      	ldrh	r3, [r7, #2]
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f000 ffe8 	bl	8009d10 <draw_battery>
                    Paint_ClearWindows(100 + Font24.Width * 2 + Font24.Width / 2, 50, 100 + Font24.Width * 4 +  Font24.Width / 4, 50 + Font24.Height, WHITE);
 8008d40:	4b6c      	ldr	r3, [pc, #432]	@ (8008ef4 <alarm_setup_mode+0x2d4>)
 8008d42:	889b      	ldrh	r3, [r3, #4]
 8008d44:	3332      	adds	r3, #50	@ 0x32
 8008d46:	b29b      	uxth	r3, r3
 8008d48:	005b      	lsls	r3, r3, #1
 8008d4a:	b29a      	uxth	r2, r3
 8008d4c:	4b69      	ldr	r3, [pc, #420]	@ (8008ef4 <alarm_setup_mode+0x2d4>)
 8008d4e:	889b      	ldrh	r3, [r3, #4]
 8008d50:	085b      	lsrs	r3, r3, #1
 8008d52:	b29b      	uxth	r3, r3
 8008d54:	4413      	add	r3, r2
 8008d56:	b298      	uxth	r0, r3
 8008d58:	4b66      	ldr	r3, [pc, #408]	@ (8008ef4 <alarm_setup_mode+0x2d4>)
 8008d5a:	889b      	ldrh	r3, [r3, #4]
 8008d5c:	3319      	adds	r3, #25
 8008d5e:	b29b      	uxth	r3, r3
 8008d60:	009b      	lsls	r3, r3, #2
 8008d62:	b29a      	uxth	r2, r3
 8008d64:	4b63      	ldr	r3, [pc, #396]	@ (8008ef4 <alarm_setup_mode+0x2d4>)
 8008d66:	889b      	ldrh	r3, [r3, #4]
 8008d68:	089b      	lsrs	r3, r3, #2
 8008d6a:	b29b      	uxth	r3, r3
 8008d6c:	4413      	add	r3, r2
 8008d6e:	b29a      	uxth	r2, r3
 8008d70:	4b60      	ldr	r3, [pc, #384]	@ (8008ef4 <alarm_setup_mode+0x2d4>)
 8008d72:	88db      	ldrh	r3, [r3, #6]
 8008d74:	3332      	adds	r3, #50	@ 0x32
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	21ff      	movs	r1, #255	@ 0xff
 8008d7a:	9100      	str	r1, [sp, #0]
 8008d7c:	2132      	movs	r1, #50	@ 0x32
 8008d7e:	f001 fb6d 	bl	800a45c <Paint_ClearWindows>
                    Paint_DrawNum(100 + Font24.Width * 2 + Font24.Width / 2, 50, alarm_setup_data->minute / 10, &Font24, WHITE, BLACK);
 8008d82:	4b5c      	ldr	r3, [pc, #368]	@ (8008ef4 <alarm_setup_mode+0x2d4>)
 8008d84:	889b      	ldrh	r3, [r3, #4]
 8008d86:	3332      	adds	r3, #50	@ 0x32
 8008d88:	b29b      	uxth	r3, r3
 8008d8a:	005b      	lsls	r3, r3, #1
 8008d8c:	b29a      	uxth	r2, r3
 8008d8e:	4b59      	ldr	r3, [pc, #356]	@ (8008ef4 <alarm_setup_mode+0x2d4>)
 8008d90:	889b      	ldrh	r3, [r3, #4]
 8008d92:	085b      	lsrs	r3, r3, #1
 8008d94:	b29b      	uxth	r3, r3
 8008d96:	4413      	add	r3, r2
 8008d98:	b298      	uxth	r0, r3
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	781b      	ldrb	r3, [r3, #0]
 8008d9e:	4a56      	ldr	r2, [pc, #344]	@ (8008ef8 <alarm_setup_mode+0x2d8>)
 8008da0:	fba2 2303 	umull	r2, r3, r2, r3
 8008da4:	08db      	lsrs	r3, r3, #3
 8008da6:	b2db      	uxtb	r3, r3
 8008da8:	461a      	mov	r2, r3
 8008daa:	2300      	movs	r3, #0
 8008dac:	9301      	str	r3, [sp, #4]
 8008dae:	23ff      	movs	r3, #255	@ 0xff
 8008db0:	9300      	str	r3, [sp, #0]
 8008db2:	4b50      	ldr	r3, [pc, #320]	@ (8008ef4 <alarm_setup_mode+0x2d4>)
 8008db4:	2132      	movs	r1, #50	@ 0x32
 8008db6:	f001 fe57 	bl	800aa68 <Paint_DrawNum>
                    Paint_DrawNum(100 + Font24.Width * 3 + Font24.Width / 2, 50, alarm_setup_data->minute % 10, &Font24, WHITE, BLACK);
 8008dba:	4b4e      	ldr	r3, [pc, #312]	@ (8008ef4 <alarm_setup_mode+0x2d4>)
 8008dbc:	889b      	ldrh	r3, [r3, #4]
 8008dbe:	461a      	mov	r2, r3
 8008dc0:	0052      	lsls	r2, r2, #1
 8008dc2:	4413      	add	r3, r2
 8008dc4:	b29a      	uxth	r2, r3
 8008dc6:	4b4b      	ldr	r3, [pc, #300]	@ (8008ef4 <alarm_setup_mode+0x2d4>)
 8008dc8:	889b      	ldrh	r3, [r3, #4]
 8008dca:	085b      	lsrs	r3, r3, #1
 8008dcc:	b29b      	uxth	r3, r3
 8008dce:	4413      	add	r3, r2
 8008dd0:	b29b      	uxth	r3, r3
 8008dd2:	3364      	adds	r3, #100	@ 0x64
 8008dd4:	b298      	uxth	r0, r3
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	781a      	ldrb	r2, [r3, #0]
 8008dda:	4b47      	ldr	r3, [pc, #284]	@ (8008ef8 <alarm_setup_mode+0x2d8>)
 8008ddc:	fba3 1302 	umull	r1, r3, r3, r2
 8008de0:	08d9      	lsrs	r1, r3, #3
 8008de2:	460b      	mov	r3, r1
 8008de4:	009b      	lsls	r3, r3, #2
 8008de6:	440b      	add	r3, r1
 8008de8:	005b      	lsls	r3, r3, #1
 8008dea:	1ad3      	subs	r3, r2, r3
 8008dec:	b2db      	uxtb	r3, r3
 8008dee:	461a      	mov	r2, r3
 8008df0:	2300      	movs	r3, #0
 8008df2:	9301      	str	r3, [sp, #4]
 8008df4:	23ff      	movs	r3, #255	@ 0xff
 8008df6:	9300      	str	r3, [sp, #0]
 8008df8:	4b3e      	ldr	r3, [pc, #248]	@ (8008ef4 <alarm_setup_mode+0x2d4>)
 8008dfa:	2132      	movs	r1, #50	@ 0x32
 8008dfc:	f001 fe34 	bl	800aa68 <Paint_DrawNum>
                    num = num - 1;
 8008e00:	7ffb      	ldrb	r3, [r7, #31]
 8008e02:	3b01      	subs	r3, #1
 8008e04:	77fb      	strb	r3, [r7, #31]
                    if(num == 0) {
 8008e06:	7ffb      	ldrb	r3, [r7, #31]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d103      	bne.n	8008e14 <alarm_setup_mode+0x1f4>
                        num = 3;
 8008e0c:	2303      	movs	r3, #3
 8008e0e:	77fb      	strb	r3, [r7, #31]
                        break;
 8008e10:	bf00      	nop
            break;
 8008e12:	e0ac      	b.n	8008f6e <alarm_setup_mode+0x34e>
                    EPD_2IN9_V2_Display_Partial(BlackImage);
 8008e14:	69b8      	ldr	r0, [r7, #24]
 8008e16:	f7fd fd6f 	bl	80068f8 <EPD_2IN9_V2_Display_Partial>
                    draw_battery(battery_percentage);
 8008e1a:	e78d      	b.n	8008d38 <alarm_setup_mode+0x118>
                Paint_ClearWindows(100, 50, 100 + Font24.Width * 7, 50 + Font24.Height, WHITE);
 8008e1c:	4b35      	ldr	r3, [pc, #212]	@ (8008ef4 <alarm_setup_mode+0x2d4>)
 8008e1e:	889b      	ldrh	r3, [r3, #4]
 8008e20:	461a      	mov	r2, r3
 8008e22:	00d2      	lsls	r2, r2, #3
 8008e24:	1ad3      	subs	r3, r2, r3
 8008e26:	b29b      	uxth	r3, r3
 8008e28:	3364      	adds	r3, #100	@ 0x64
 8008e2a:	b29a      	uxth	r2, r3
 8008e2c:	4b31      	ldr	r3, [pc, #196]	@ (8008ef4 <alarm_setup_mode+0x2d4>)
 8008e2e:	88db      	ldrh	r3, [r3, #6]
 8008e30:	3332      	adds	r3, #50	@ 0x32
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	21ff      	movs	r1, #255	@ 0xff
 8008e36:	9100      	str	r1, [sp, #0]
 8008e38:	2132      	movs	r1, #50	@ 0x32
 8008e3a:	2064      	movs	r0, #100	@ 0x64
 8008e3c:	f001 fb0e 	bl	800a45c <Paint_ClearWindows>
                drawn_alarm_setup_mode(90, 100, alarm_setup_data_store, Font24);
 8008e40:	4b2c      	ldr	r3, [pc, #176]	@ (8008ef4 <alarm_setup_mode+0x2d4>)
 8008e42:	685a      	ldr	r2, [r3, #4]
 8008e44:	9200      	str	r2, [sp, #0]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	697a      	ldr	r2, [r7, #20]
 8008e4a:	2164      	movs	r1, #100	@ 0x64
 8008e4c:	205a      	movs	r0, #90	@ 0x5a
 8008e4e:	f000 f8a1 	bl	8008f94 <drawn_alarm_setup_mode>
                    draw_battery(battery_percentage);
 8008e52:	887b      	ldrh	r3, [r7, #2]
 8008e54:	4618      	mov	r0, r3
 8008e56:	f000 ff5b 	bl	8009d10 <draw_battery>
                    Paint_ClearWindows(100, 50, 100 + Font24.Width * 2, 50 + Font24.Height, WHITE);
 8008e5a:	4b26      	ldr	r3, [pc, #152]	@ (8008ef4 <alarm_setup_mode+0x2d4>)
 8008e5c:	889b      	ldrh	r3, [r3, #4]
 8008e5e:	3332      	adds	r3, #50	@ 0x32
 8008e60:	b29b      	uxth	r3, r3
 8008e62:	005b      	lsls	r3, r3, #1
 8008e64:	b29a      	uxth	r2, r3
 8008e66:	4b23      	ldr	r3, [pc, #140]	@ (8008ef4 <alarm_setup_mode+0x2d4>)
 8008e68:	88db      	ldrh	r3, [r3, #6]
 8008e6a:	3332      	adds	r3, #50	@ 0x32
 8008e6c:	b29b      	uxth	r3, r3
 8008e6e:	21ff      	movs	r1, #255	@ 0xff
 8008e70:	9100      	str	r1, [sp, #0]
 8008e72:	2132      	movs	r1, #50	@ 0x32
 8008e74:	2064      	movs	r0, #100	@ 0x64
 8008e76:	f001 faf1 	bl	800a45c <Paint_ClearWindows>
                    Paint_DrawNum(100, 50, alarm_setup_data->hour / 10, &Font24, WHITE, BLACK);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	785b      	ldrb	r3, [r3, #1]
 8008e7e:	4a1e      	ldr	r2, [pc, #120]	@ (8008ef8 <alarm_setup_mode+0x2d8>)
 8008e80:	fba2 2303 	umull	r2, r3, r2, r3
 8008e84:	08db      	lsrs	r3, r3, #3
 8008e86:	b2db      	uxtb	r3, r3
 8008e88:	461a      	mov	r2, r3
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	9301      	str	r3, [sp, #4]
 8008e8e:	23ff      	movs	r3, #255	@ 0xff
 8008e90:	9300      	str	r3, [sp, #0]
 8008e92:	4b18      	ldr	r3, [pc, #96]	@ (8008ef4 <alarm_setup_mode+0x2d4>)
 8008e94:	2132      	movs	r1, #50	@ 0x32
 8008e96:	2064      	movs	r0, #100	@ 0x64
 8008e98:	f001 fde6 	bl	800aa68 <Paint_DrawNum>
                    Paint_DrawNum(100 + Font24.Width * 1, 50, alarm_setup_data->hour % 10, &Font24, WHITE, BLACK);
 8008e9c:	4b15      	ldr	r3, [pc, #84]	@ (8008ef4 <alarm_setup_mode+0x2d4>)
 8008e9e:	889b      	ldrh	r3, [r3, #4]
 8008ea0:	3364      	adds	r3, #100	@ 0x64
 8008ea2:	b298      	uxth	r0, r3
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	785a      	ldrb	r2, [r3, #1]
 8008ea8:	4b13      	ldr	r3, [pc, #76]	@ (8008ef8 <alarm_setup_mode+0x2d8>)
 8008eaa:	fba3 1302 	umull	r1, r3, r3, r2
 8008eae:	08d9      	lsrs	r1, r3, #3
 8008eb0:	460b      	mov	r3, r1
 8008eb2:	009b      	lsls	r3, r3, #2
 8008eb4:	440b      	add	r3, r1
 8008eb6:	005b      	lsls	r3, r3, #1
 8008eb8:	1ad3      	subs	r3, r2, r3
 8008eba:	b2db      	uxtb	r3, r3
 8008ebc:	461a      	mov	r2, r3
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	9301      	str	r3, [sp, #4]
 8008ec2:	23ff      	movs	r3, #255	@ 0xff
 8008ec4:	9300      	str	r3, [sp, #0]
 8008ec6:	4b0b      	ldr	r3, [pc, #44]	@ (8008ef4 <alarm_setup_mode+0x2d4>)
 8008ec8:	2132      	movs	r1, #50	@ 0x32
 8008eca:	f001 fdcd 	bl	800aa68 <Paint_DrawNum>
                    num = num - 1;
 8008ece:	7ffb      	ldrb	r3, [r7, #31]
 8008ed0:	3b01      	subs	r3, #1
 8008ed2:	77fb      	strb	r3, [r7, #31]
                    if(num == 0) {
 8008ed4:	7ffb      	ldrb	r3, [r7, #31]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d103      	bne.n	8008ee2 <alarm_setup_mode+0x2c2>
                        num = 3;
 8008eda:	2303      	movs	r3, #3
 8008edc:	77fb      	strb	r3, [r7, #31]
                        break;
 8008ede:	bf00      	nop
            break;
 8008ee0:	e045      	b.n	8008f6e <alarm_setup_mode+0x34e>
		            EPD_2IN9_V2_Display_Partial(BlackImage);
 8008ee2:	69b8      	ldr	r0, [r7, #24]
 8008ee4:	f7fd fd08 	bl	80068f8 <EPD_2IN9_V2_Display_Partial>
                    draw_battery(battery_percentage);
 8008ee8:	e7b3      	b.n	8008e52 <alarm_setup_mode+0x232>
 8008eea:	bf00      	nop
 8008eec:	0800bda4 	.word	0x0800bda4
 8008ef0:	0800bdcc 	.word	0x0800bdcc
 8008ef4:	20000284 	.word	0x20000284
 8008ef8:	cccccccd 	.word	0xcccccccd
                Paint_ClearWindows(100, 50, 100 + Font24.Width * 7, 50 + Font24.Height, WHITE);
 8008efc:	4b23      	ldr	r3, [pc, #140]	@ (8008f8c <alarm_setup_mode+0x36c>)
 8008efe:	889b      	ldrh	r3, [r3, #4]
 8008f00:	461a      	mov	r2, r3
 8008f02:	00d2      	lsls	r2, r2, #3
 8008f04:	1ad3      	subs	r3, r2, r3
 8008f06:	b29b      	uxth	r3, r3
 8008f08:	3364      	adds	r3, #100	@ 0x64
 8008f0a:	b29a      	uxth	r2, r3
 8008f0c:	4b1f      	ldr	r3, [pc, #124]	@ (8008f8c <alarm_setup_mode+0x36c>)
 8008f0e:	88db      	ldrh	r3, [r3, #6]
 8008f10:	3332      	adds	r3, #50	@ 0x32
 8008f12:	b29b      	uxth	r3, r3
 8008f14:	21ff      	movs	r1, #255	@ 0xff
 8008f16:	9100      	str	r1, [sp, #0]
 8008f18:	2132      	movs	r1, #50	@ 0x32
 8008f1a:	2064      	movs	r0, #100	@ 0x64
 8008f1c:	f001 fa9e 	bl	800a45c <Paint_ClearWindows>
                    draw_battery(battery_percentage);
 8008f20:	887b      	ldrh	r3, [r7, #2]
 8008f22:	4618      	mov	r0, r3
 8008f24:	f000 fef4 	bl	8009d10 <draw_battery>
                    Paint_ClearWindows(90, 100, 90 + 100, 100 + Font16.Height, WHITE);
 8008f28:	4b19      	ldr	r3, [pc, #100]	@ (8008f90 <alarm_setup_mode+0x370>)
 8008f2a:	88db      	ldrh	r3, [r3, #6]
 8008f2c:	3364      	adds	r3, #100	@ 0x64
 8008f2e:	b29b      	uxth	r3, r3
 8008f30:	22ff      	movs	r2, #255	@ 0xff
 8008f32:	9200      	str	r2, [sp, #0]
 8008f34:	22be      	movs	r2, #190	@ 0xbe
 8008f36:	2164      	movs	r1, #100	@ 0x64
 8008f38:	205a      	movs	r0, #90	@ 0x5a
 8008f3a:	f001 fa8f 	bl	800a45c <Paint_ClearWindows>
                    drawn_alarm_setup_mode(90, 100, alarm_setup_data_store, Font24);
 8008f3e:	4b13      	ldr	r3, [pc, #76]	@ (8008f8c <alarm_setup_mode+0x36c>)
 8008f40:	685a      	ldr	r2, [r3, #4]
 8008f42:	9200      	str	r2, [sp, #0]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	697a      	ldr	r2, [r7, #20]
 8008f48:	2164      	movs	r1, #100	@ 0x64
 8008f4a:	205a      	movs	r0, #90	@ 0x5a
 8008f4c:	f000 f822 	bl	8008f94 <drawn_alarm_setup_mode>
                    num = num - 1;
 8008f50:	7ffb      	ldrb	r3, [r7, #31]
 8008f52:	3b01      	subs	r3, #1
 8008f54:	77fb      	strb	r3, [r7, #31]
                    if(num == 0) {
 8008f56:	7ffb      	ldrb	r3, [r7, #31]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d103      	bne.n	8008f64 <alarm_setup_mode+0x344>
                        num = 3;
 8008f5c:	2303      	movs	r3, #3
 8008f5e:	77fb      	strb	r3, [r7, #31]
                        break;
 8008f60:	bf00      	nop
            break;
 8008f62:	e004      	b.n	8008f6e <alarm_setup_mode+0x34e>
                    EPD_2IN9_V2_Display_Partial(BlackImage);
 8008f64:	69b8      	ldr	r0, [r7, #24]
 8008f66:	f7fd fcc7 	bl	80068f8 <EPD_2IN9_V2_Display_Partial>
                    draw_battery(battery_percentage);
 8008f6a:	e7d9      	b.n	8008f20 <alarm_setup_mode+0x300>
            break;
 8008f6c:	bf00      	nop
        }
      EPD_2IN9_V2_Sleep();
 8008f6e:	f7fd fd35 	bl	80069dc <EPD_2IN9_V2_Sleep>
      flag_alarm_set_up_mode->flag_ALARM_SETUP_MODE = 0;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	2200      	movs	r2, #0
 8008f76:	70da      	strb	r2, [r3, #3]
      free(BlackImage);
 8008f78:	69b8      	ldr	r0, [r7, #24]
 8008f7a:	f001 ff45 	bl	800ae08 <free>
      free(alarm_setup_data_store);
 8008f7e:	6978      	ldr	r0, [r7, #20]
 8008f80:	f001 ff42 	bl	800ae08 <free>
    //   free(sParam_data_alarm_setup_mode);
}
 8008f84:	bf00      	nop
 8008f86:	3720      	adds	r7, #32
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}
 8008f8c:	20000284 	.word	0x20000284
 8008f90:	20000274 	.word	0x20000274

08008f94 <drawn_alarm_setup_mode>:

void drawn_alarm_setup_mode(uint16_t Xstart, uint16_t Ystart, ALARM_DATA_SETUP_MODE *sParam_data_alarm_setup_mode, sFONT Font)
{
 8008f94:	b082      	sub	sp, #8
 8008f96:	b590      	push	{r4, r7, lr}
 8008f98:	b089      	sub	sp, #36	@ 0x24
 8008f9a:	af04      	add	r7, sp, #16
 8008f9c:	603a      	str	r2, [r7, #0]
 8008f9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	80fb      	strh	r3, [r7, #6]
 8008fa4:	460b      	mov	r3, r1
 8008fa6:	80bb      	strh	r3, [r7, #4]
    PAINT_TIME sPaint_time;
    sPaint_time.Hour = sParam_data_alarm_setup_mode->hour;
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	789b      	ldrb	r3, [r3, #2]
 8008fac:	733b      	strb	r3, [r7, #12]
    sPaint_time.Min = sParam_data_alarm_setup_mode->minute;
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	785b      	ldrb	r3, [r3, #1]
 8008fb2:	737b      	strb	r3, [r7, #13]
    sPaint_time.Sec = sParam_data_alarm_setup_mode->second;
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	781b      	ldrb	r3, [r3, #0]
 8008fb8:	73bb      	strb	r3, [r7, #14]
    Paint_DrawTime(100, 50, &sPaint_time, &Font, WHITE, BLACK);
 8008fba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008fbe:	f107 0208 	add.w	r2, r7, #8
 8008fc2:	2100      	movs	r1, #0
 8008fc4:	9101      	str	r1, [sp, #4]
 8008fc6:	21ff      	movs	r1, #255	@ 0xff
 8008fc8:	9100      	str	r1, [sp, #0]
 8008fca:	2132      	movs	r1, #50	@ 0x32
 8008fcc:	2064      	movs	r0, #100	@ 0x64
 8008fce:	f001 fe19 	bl	800ac04 <Paint_DrawTime>
    Paint_DrawString_EN(Xstart + 20, Ystart, "ON", &Font16, BLACK, WHITE);
 8008fd2:	88fb      	ldrh	r3, [r7, #6]
 8008fd4:	3314      	adds	r3, #20
 8008fd6:	b298      	uxth	r0, r3
 8008fd8:	88b9      	ldrh	r1, [r7, #4]
 8008fda:	23ff      	movs	r3, #255	@ 0xff
 8008fdc:	9301      	str	r3, [sp, #4]
 8008fde:	2300      	movs	r3, #0
 8008fe0:	9300      	str	r3, [sp, #0]
 8008fe2:	4b3d      	ldr	r3, [pc, #244]	@ (80090d8 <drawn_alarm_setup_mode+0x144>)
 8008fe4:	4a3d      	ldr	r2, [pc, #244]	@ (80090dc <drawn_alarm_setup_mode+0x148>)
 8008fe6:	f001 fceb 	bl	800a9c0 <Paint_DrawString_EN>
    Paint_DrawString_EN(Xstart + 50, Ystart, "/", &Font16, WHITE, BLACK);
 8008fea:	88fb      	ldrh	r3, [r7, #6]
 8008fec:	3332      	adds	r3, #50	@ 0x32
 8008fee:	b298      	uxth	r0, r3
 8008ff0:	88b9      	ldrh	r1, [r7, #4]
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	9301      	str	r3, [sp, #4]
 8008ff6:	23ff      	movs	r3, #255	@ 0xff
 8008ff8:	9300      	str	r3, [sp, #0]
 8008ffa:	4b37      	ldr	r3, [pc, #220]	@ (80090d8 <drawn_alarm_setup_mode+0x144>)
 8008ffc:	4a38      	ldr	r2, [pc, #224]	@ (80090e0 <drawn_alarm_setup_mode+0x14c>)
 8008ffe:	f001 fcdf 	bl	800a9c0 <Paint_DrawString_EN>
    Paint_DrawString_EN(Xstart + 90, Ystart, "OFF", &Font16, BLACK, WHITE);
 8009002:	88fb      	ldrh	r3, [r7, #6]
 8009004:	335a      	adds	r3, #90	@ 0x5a
 8009006:	b298      	uxth	r0, r3
 8009008:	88b9      	ldrh	r1, [r7, #4]
 800900a:	23ff      	movs	r3, #255	@ 0xff
 800900c:	9301      	str	r3, [sp, #4]
 800900e:	2300      	movs	r3, #0
 8009010:	9300      	str	r3, [sp, #0]
 8009012:	4b31      	ldr	r3, [pc, #196]	@ (80090d8 <drawn_alarm_setup_mode+0x144>)
 8009014:	4a33      	ldr	r2, [pc, #204]	@ (80090e4 <drawn_alarm_setup_mode+0x150>)
 8009016:	f001 fcd3 	bl	800a9c0 <Paint_DrawString_EN>

    if(sParam_data_alarm_setup_mode->on_off == TRUE)
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	795b      	ldrb	r3, [r3, #5]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d025      	beq.n	800906e <drawn_alarm_setup_mode+0xda>
    {
        Paint_DrawRectangle(Xstart, Ystart + 2, Xstart + 10, Ystart + 12, BLACK, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 8009022:	88bb      	ldrh	r3, [r7, #4]
 8009024:	3302      	adds	r3, #2
 8009026:	b299      	uxth	r1, r3
 8009028:	88fb      	ldrh	r3, [r7, #6]
 800902a:	330a      	adds	r3, #10
 800902c:	b29a      	uxth	r2, r3
 800902e:	88bb      	ldrh	r3, [r7, #4]
 8009030:	330c      	adds	r3, #12
 8009032:	b29b      	uxth	r3, r3
 8009034:	88f8      	ldrh	r0, [r7, #6]
 8009036:	2401      	movs	r4, #1
 8009038:	9402      	str	r4, [sp, #8]
 800903a:	2401      	movs	r4, #1
 800903c:	9401      	str	r4, [sp, #4]
 800903e:	2400      	movs	r4, #0
 8009040:	9400      	str	r4, [sp, #0]
 8009042:	f001 fb91 	bl	800a768 <Paint_DrawRectangle>
        Paint_DrawRectangle(Xstart + 70, Ystart + 2, Xstart + 80, Ystart + 12, BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 8009046:	88fb      	ldrh	r3, [r7, #6]
 8009048:	3346      	adds	r3, #70	@ 0x46
 800904a:	b298      	uxth	r0, r3
 800904c:	88bb      	ldrh	r3, [r7, #4]
 800904e:	3302      	adds	r3, #2
 8009050:	b299      	uxth	r1, r3
 8009052:	88fb      	ldrh	r3, [r7, #6]
 8009054:	3350      	adds	r3, #80	@ 0x50
 8009056:	b29a      	uxth	r2, r3
 8009058:	88bb      	ldrh	r3, [r7, #4]
 800905a:	330c      	adds	r3, #12
 800905c:	b29b      	uxth	r3, r3
 800905e:	2400      	movs	r4, #0
 8009060:	9402      	str	r4, [sp, #8]
 8009062:	2401      	movs	r4, #1
 8009064:	9401      	str	r4, [sp, #4]
 8009066:	2400      	movs	r4, #0
 8009068:	9400      	str	r4, [sp, #0]
 800906a:	f001 fb7d 	bl	800a768 <Paint_DrawRectangle>

    }

    if(sParam_data_alarm_setup_mode->on_off == FALSE)
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	795b      	ldrb	r3, [r3, #5]
 8009072:	f083 0301 	eor.w	r3, r3, #1
 8009076:	b2db      	uxtb	r3, r3
 8009078:	2b00      	cmp	r3, #0
 800907a:	d025      	beq.n	80090c8 <drawn_alarm_setup_mode+0x134>
    {
        Paint_DrawRectangle(Xstart, Ystart + 2, Xstart + 10, Ystart + 12, BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 800907c:	88bb      	ldrh	r3, [r7, #4]
 800907e:	3302      	adds	r3, #2
 8009080:	b299      	uxth	r1, r3
 8009082:	88fb      	ldrh	r3, [r7, #6]
 8009084:	330a      	adds	r3, #10
 8009086:	b29a      	uxth	r2, r3
 8009088:	88bb      	ldrh	r3, [r7, #4]
 800908a:	330c      	adds	r3, #12
 800908c:	b29b      	uxth	r3, r3
 800908e:	88f8      	ldrh	r0, [r7, #6]
 8009090:	2400      	movs	r4, #0
 8009092:	9402      	str	r4, [sp, #8]
 8009094:	2401      	movs	r4, #1
 8009096:	9401      	str	r4, [sp, #4]
 8009098:	2400      	movs	r4, #0
 800909a:	9400      	str	r4, [sp, #0]
 800909c:	f001 fb64 	bl	800a768 <Paint_DrawRectangle>
        Paint_DrawRectangle(Xstart + 70, Ystart + 2, Xstart + 80, Ystart + 12, BLACK, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 80090a0:	88fb      	ldrh	r3, [r7, #6]
 80090a2:	3346      	adds	r3, #70	@ 0x46
 80090a4:	b298      	uxth	r0, r3
 80090a6:	88bb      	ldrh	r3, [r7, #4]
 80090a8:	3302      	adds	r3, #2
 80090aa:	b299      	uxth	r1, r3
 80090ac:	88fb      	ldrh	r3, [r7, #6]
 80090ae:	3350      	adds	r3, #80	@ 0x50
 80090b0:	b29a      	uxth	r2, r3
 80090b2:	88bb      	ldrh	r3, [r7, #4]
 80090b4:	330c      	adds	r3, #12
 80090b6:	b29b      	uxth	r3, r3
 80090b8:	2401      	movs	r4, #1
 80090ba:	9402      	str	r4, [sp, #8]
 80090bc:	2401      	movs	r4, #1
 80090be:	9401      	str	r4, [sp, #4]
 80090c0:	2400      	movs	r4, #0
 80090c2:	9400      	str	r4, [sp, #0]
 80090c4:	f001 fb50 	bl	800a768 <Paint_DrawRectangle>
    }
}
 80090c8:	bf00      	nop
 80090ca:	3714      	adds	r7, #20
 80090cc:	46bd      	mov	sp, r7
 80090ce:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80090d2:	b002      	add	sp, #8
 80090d4:	4770      	bx	lr
 80090d6:	bf00      	nop
 80090d8:	20000274 	.word	0x20000274
 80090dc:	0800be7c 	.word	0x0800be7c
 80090e0:	0800be84 	.word	0x0800be84
 80090e4:	0800be80 	.word	0x0800be80

080090e8 <time_setup_mode>:

//Time setup mode
void time_setup_mode(FLAG_SYSTEM *flag_time_set_up_mode, SYSTEM_STATE *system_param, TIME_SETUP_DATA *time_setup_param, uint16_t battery_percentage)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b08e      	sub	sp, #56	@ 0x38
 80090ec:	af02      	add	r7, sp, #8
 80090ee:	60f8      	str	r0, [r7, #12]
 80090f0:	60b9      	str	r1, [r7, #8]
 80090f2:	607a      	str	r2, [r7, #4]
 80090f4:	807b      	strh	r3, [r7, #2]
    UBYTE *BlackImage;
    UBYTE num = 3;
 80090f6:	2303      	movs	r3, #3
 80090f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	UWORD Imagesize = ((EPD_2IN9_V2_WIDTH % 8 == 0)? (EPD_2IN9_V2_WIDTH / 8 ): (EPD_2IN9_V2_WIDTH / 8 + 1)) * EPD_2IN9_V2_HEIGHT;
 80090fc:	f44f 5394 	mov.w	r3, #4736	@ 0x1280
 8009100:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    if((BlackImage = (UBYTE *)malloc(Imagesize)) == NULL) {
 8009102:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8009104:	4618      	mov	r0, r3
 8009106:	f001 fe77 	bl	800adf8 <malloc>
 800910a:	4603      	mov	r3, r0
 800910c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800910e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009110:	2b00      	cmp	r3, #0
 8009112:	d102      	bne.n	800911a <time_setup_mode+0x32>
        printf("Failed to apply for black memory...\r\n");
 8009114:	48c1      	ldr	r0, [pc, #772]	@ (800941c <time_setup_mode+0x334>)
 8009116:	f002 f857 	bl	800b1c8 <puts>
    }


    
	EPD_2IN9_V2_Init();
 800911a:	f7fd faf1 	bl	8006700 <EPD_2IN9_V2_Init>
    PAINT_TIME sPaint_time;
    sPaint_time.Hour = time_setup_param->hour;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	785b      	ldrb	r3, [r3, #1]
 8009122:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    sPaint_time.Min = time_setup_param->minute;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	781b      	ldrb	r3, [r3, #0]
 800912a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    sPaint_time.Sec = 0;
 800912e:	2300      	movs	r3, #0
 8009130:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if(flag_time_set_up_mode->flag_TIME_SETUP_MODE == 1)
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	785b      	ldrb	r3, [r3, #1]
 8009138:	2b01      	cmp	r3, #1
 800913a:	d151      	bne.n	80091e0 <time_setup_mode+0xf8>
	{
        flag_time_set_up_mode->flag_ALARM_SETUP_MODE    = 1;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	2201      	movs	r2, #1
 8009140:	70da      	strb	r2, [r3, #3]
        flag_time_set_up_mode->flag_ALARM_VIEW_MODE     = 1;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	2201      	movs	r2, #1
 8009146:	709a      	strb	r2, [r3, #2]
        flag_time_set_up_mode->flag_SYSTEM_SETUP_MODE   = 1;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	2201      	movs	r2, #1
 800914c:	711a      	strb	r2, [r3, #4]
        flag_time_set_up_mode->flag_DEFAULT_MODE        = 1;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	2201      	movs	r2, #1
 8009152:	701a      	strb	r2, [r3, #0]

		EPD_2IN9_V2_Init();
 8009154:	f7fd fad4 	bl	8006700 <EPD_2IN9_V2_Init>
    	EPD_2IN9_V2_Clear();
 8009158:	f7fd fb54 	bl	8006804 <EPD_2IN9_V2_Clear>
    	DEV_Delay_ms(1000);
 800915c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8009160:	f7f9 fc44 	bl	80029ec <HAL_Delay>
    	EPD_2IN9_V2_Init_Fast();
 8009164:	f7fd fb0a 	bl	800677c <EPD_2IN9_V2_Init_Fast>
    	Paint_NewImage(BlackImage, EPD_2IN9_V2_WIDTH, EPD_2IN9_V2_HEIGHT, 90, WHITE);
 8009168:	23ff      	movs	r3, #255	@ 0xff
 800916a:	9300      	str	r3, [sp, #0]
 800916c:	235a      	movs	r3, #90	@ 0x5a
 800916e:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8009172:	2180      	movs	r1, #128	@ 0x80
 8009174:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009176:	f000 ff19 	bl	8009fac <Paint_NewImage>
    	printf("Drawing\r\n");
 800917a:	48a9      	ldr	r0, [pc, #676]	@ (8009420 <time_setup_mode+0x338>)
 800917c:	f002 f824 	bl	800b1c8 <puts>
    	//1.Select Image
    	Paint_SelectImage(BlackImage);
 8009180:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009182:	f000 ff67 	bl	800a054 <Paint_SelectImage>
    	Paint_Clear(WHITE);
 8009186:	20ff      	movs	r0, #255	@ 0xff
 8009188:	f001 f8c0 	bl	800a30c <Paint_Clear>

    	// 2.Drawing on the image       
        Paint_ClearWindows(80, 100, 220, 100 + Font16.Height, WHITE);
 800918c:	4ba5      	ldr	r3, [pc, #660]	@ (8009424 <time_setup_mode+0x33c>)
 800918e:	88db      	ldrh	r3, [r3, #6]
 8009190:	3364      	adds	r3, #100	@ 0x64
 8009192:	b29b      	uxth	r3, r3
 8009194:	22ff      	movs	r2, #255	@ 0xff
 8009196:	9200      	str	r2, [sp, #0]
 8009198:	22dc      	movs	r2, #220	@ 0xdc
 800919a:	2164      	movs	r1, #100	@ 0x64
 800919c:	2050      	movs	r0, #80	@ 0x50
 800919e:	f001 f95d 	bl	800a45c <Paint_ClearWindows>
        Paint_DrawTime(100, 50, &sPaint_time, &Font24, WHITE, BLACK);
 80091a2:	f107 0220 	add.w	r2, r7, #32
 80091a6:	2300      	movs	r3, #0
 80091a8:	9301      	str	r3, [sp, #4]
 80091aa:	23ff      	movs	r3, #255	@ 0xff
 80091ac:	9300      	str	r3, [sp, #0]
 80091ae:	4b9e      	ldr	r3, [pc, #632]	@ (8009428 <time_setup_mode+0x340>)
 80091b0:	2132      	movs	r1, #50	@ 0x32
 80091b2:	2064      	movs	r0, #100	@ 0x64
 80091b4:	f001 fd26 	bl	800ac04 <Paint_DrawTime>
        draw_day(time_setup_param->dow, time_setup_param->dom, time_setup_param->month, time_setup_param->year);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	789b      	ldrb	r3, [r3, #2]
 80091bc:	4618      	mov	r0, r3
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	78db      	ldrb	r3, [r3, #3]
 80091c2:	4619      	mov	r1, r3
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	791b      	ldrb	r3, [r3, #4]
 80091c8:	461a      	mov	r2, r3
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	795b      	ldrb	r3, [r3, #5]
 80091ce:	f000 fc21 	bl	8009a14 <draw_day>
        draw_battery(battery_percentage);
 80091d2:	887b      	ldrh	r3, [r7, #2]
 80091d4:	4618      	mov	r0, r3
 80091d6:	f000 fd9b 	bl	8009d10 <draw_battery>
        // drawn_alarm_setup_mode(90, 100, time_setup_param, Font24);
    	EPD_2IN9_V2_Display_Base(BlackImage);
 80091da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80091dc:	f7fd fb59 	bl	8006892 <EPD_2IN9_V2_Display_Base>
        // }
		// EPD_2IN9_V2_Display_Partial(BlackImage);
        char day_string[5];
    char month_string[5];

    switch (time_setup_param->dow)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	789b      	ldrb	r3, [r3, #2]
 80091e4:	3b01      	subs	r3, #1
 80091e6:	2b06      	cmp	r3, #6
 80091e8:	d85b      	bhi.n	80092a2 <time_setup_mode+0x1ba>
 80091ea:	a201      	add	r2, pc, #4	@ (adr r2, 80091f0 <time_setup_mode+0x108>)
 80091ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091f0:	0800920d 	.word	0x0800920d
 80091f4:	08009223 	.word	0x08009223
 80091f8:	08009239 	.word	0x08009239
 80091fc:	0800924f 	.word	0x0800924f
 8009200:	08009265 	.word	0x08009265
 8009204:	08009277 	.word	0x08009277
 8009208:	0800928d 	.word	0x0800928d
    {
    case 1:
        day_string[0] = 'S';
 800920c:	2353      	movs	r3, #83	@ 0x53
 800920e:	763b      	strb	r3, [r7, #24]
        day_string[1] = 'U';
 8009210:	2355      	movs	r3, #85	@ 0x55
 8009212:	767b      	strb	r3, [r7, #25]
        day_string[2] = 'N';
 8009214:	234e      	movs	r3, #78	@ 0x4e
 8009216:	76bb      	strb	r3, [r7, #26]
        day_string[3] = NULL;
 8009218:	2300      	movs	r3, #0
 800921a:	76fb      	strb	r3, [r7, #27]
        day_string[4] = NULL;
 800921c:	2300      	movs	r3, #0
 800921e:	773b      	strb	r3, [r7, #28]
        break;
 8009220:	e040      	b.n	80092a4 <time_setup_mode+0x1bc>
    case 2:
        day_string[0] = 'M';
 8009222:	234d      	movs	r3, #77	@ 0x4d
 8009224:	763b      	strb	r3, [r7, #24]
        day_string[1] = 'O';
 8009226:	234f      	movs	r3, #79	@ 0x4f
 8009228:	767b      	strb	r3, [r7, #25]
        day_string[2] = 'N';
 800922a:	234e      	movs	r3, #78	@ 0x4e
 800922c:	76bb      	strb	r3, [r7, #26]
        day_string[3] = NULL;
 800922e:	2300      	movs	r3, #0
 8009230:	76fb      	strb	r3, [r7, #27]
        day_string[4] = NULL;
 8009232:	2300      	movs	r3, #0
 8009234:	773b      	strb	r3, [r7, #28]
        break;
 8009236:	e035      	b.n	80092a4 <time_setup_mode+0x1bc>

    case 3:
        day_string[0] = 'T';
 8009238:	2354      	movs	r3, #84	@ 0x54
 800923a:	763b      	strb	r3, [r7, #24]
        day_string[1] = 'U';
 800923c:	2355      	movs	r3, #85	@ 0x55
 800923e:	767b      	strb	r3, [r7, #25]
        day_string[2] = 'E';
 8009240:	2345      	movs	r3, #69	@ 0x45
 8009242:	76bb      	strb	r3, [r7, #26]
        day_string[3] = 'S';
 8009244:	2353      	movs	r3, #83	@ 0x53
 8009246:	76fb      	strb	r3, [r7, #27]
        day_string[4] = NULL;
 8009248:	2300      	movs	r3, #0
 800924a:	773b      	strb	r3, [r7, #28]
        break;
 800924c:	e02a      	b.n	80092a4 <time_setup_mode+0x1bc>

    case 4:
        day_string[0] = 'W';
 800924e:	2357      	movs	r3, #87	@ 0x57
 8009250:	763b      	strb	r3, [r7, #24]
        day_string[1] = 'E';
 8009252:	2345      	movs	r3, #69	@ 0x45
 8009254:	767b      	strb	r3, [r7, #25]
        day_string[2] = 'D';
 8009256:	2344      	movs	r3, #68	@ 0x44
 8009258:	76bb      	strb	r3, [r7, #26]
        day_string[3] = 'N';
 800925a:	234e      	movs	r3, #78	@ 0x4e
 800925c:	76fb      	strb	r3, [r7, #27]
        day_string[4] = NULL;
 800925e:	2300      	movs	r3, #0
 8009260:	773b      	strb	r3, [r7, #28]
        break;
 8009262:	e01f      	b.n	80092a4 <time_setup_mode+0x1bc>

    case 5:
        day_string[0] = 'T';
 8009264:	2354      	movs	r3, #84	@ 0x54
 8009266:	763b      	strb	r3, [r7, #24]
        day_string[1] = 'H';
 8009268:	2348      	movs	r3, #72	@ 0x48
 800926a:	767b      	strb	r3, [r7, #25]
        day_string[2] = 'U';
 800926c:	2355      	movs	r3, #85	@ 0x55
 800926e:	76bb      	strb	r3, [r7, #26]
        day_string[3] = 'R';
 8009270:	2352      	movs	r3, #82	@ 0x52
 8009272:	76fb      	strb	r3, [r7, #27]
        break;
 8009274:	e016      	b.n	80092a4 <time_setup_mode+0x1bc>

    case 6:
        day_string[0] = 'F';
 8009276:	2346      	movs	r3, #70	@ 0x46
 8009278:	763b      	strb	r3, [r7, #24]
        day_string[1] = 'R';
 800927a:	2352      	movs	r3, #82	@ 0x52
 800927c:	767b      	strb	r3, [r7, #25]
        day_string[2] = 'I';
 800927e:	2349      	movs	r3, #73	@ 0x49
 8009280:	76bb      	strb	r3, [r7, #26]
        day_string[3] = NULL;
 8009282:	2300      	movs	r3, #0
 8009284:	76fb      	strb	r3, [r7, #27]
        day_string[4] = NULL;
 8009286:	2300      	movs	r3, #0
 8009288:	773b      	strb	r3, [r7, #28]
        break;
 800928a:	e00b      	b.n	80092a4 <time_setup_mode+0x1bc>

    case 7:
        day_string[0] = 'S';
 800928c:	2353      	movs	r3, #83	@ 0x53
 800928e:	763b      	strb	r3, [r7, #24]
        day_string[1] = 'A';
 8009290:	2341      	movs	r3, #65	@ 0x41
 8009292:	767b      	strb	r3, [r7, #25]
        day_string[2] = 'T';
 8009294:	2354      	movs	r3, #84	@ 0x54
 8009296:	76bb      	strb	r3, [r7, #26]
        day_string[3] = NULL;
 8009298:	2300      	movs	r3, #0
 800929a:	76fb      	strb	r3, [r7, #27]
        day_string[4] = NULL;
 800929c:	2300      	movs	r3, #0
 800929e:	773b      	strb	r3, [r7, #28]
        break;
 80092a0:	e000      	b.n	80092a4 <time_setup_mode+0x1bc>

    default:
        break;
 80092a2:	bf00      	nop
    }

switch (time_setup_param->month)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	791b      	ldrb	r3, [r3, #4]
 80092a8:	3b01      	subs	r3, #1
 80092aa:	2b0b      	cmp	r3, #11
 80092ac:	f200 80a0 	bhi.w	80093f0 <time_setup_mode+0x308>
 80092b0:	a201      	add	r2, pc, #4	@ (adr r2, 80092b8 <time_setup_mode+0x1d0>)
 80092b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092b6:	bf00      	nop
 80092b8:	080092e9 	.word	0x080092e9
 80092bc:	080092ff 	.word	0x080092ff
 80092c0:	08009315 	.word	0x08009315
 80092c4:	0800932b 	.word	0x0800932b
 80092c8:	08009341 	.word	0x08009341
 80092cc:	08009357 	.word	0x08009357
 80092d0:	0800936d 	.word	0x0800936d
 80092d4:	08009383 	.word	0x08009383
 80092d8:	08009399 	.word	0x08009399
 80092dc:	080093af 	.word	0x080093af
 80092e0:	080093c5 	.word	0x080093c5
 80092e4:	080093db 	.word	0x080093db
    {
    case 1:
        month_string[0] = 'J';
 80092e8:	234a      	movs	r3, #74	@ 0x4a
 80092ea:	743b      	strb	r3, [r7, #16]
        month_string[1] = 'A';
 80092ec:	2341      	movs	r3, #65	@ 0x41
 80092ee:	747b      	strb	r3, [r7, #17]
        month_string[2] = 'N';
 80092f0:	234e      	movs	r3, #78	@ 0x4e
 80092f2:	74bb      	strb	r3, [r7, #18]
        month_string[3] = NULL;
 80092f4:	2300      	movs	r3, #0
 80092f6:	74fb      	strb	r3, [r7, #19]
        month_string[4] = NULL;
 80092f8:	2300      	movs	r3, #0
 80092fa:	753b      	strb	r3, [r7, #20]
        break;
 80092fc:	e079      	b.n	80093f2 <time_setup_mode+0x30a>
    case 2:
        month_string[0] = 'F';
 80092fe:	2346      	movs	r3, #70	@ 0x46
 8009300:	743b      	strb	r3, [r7, #16]
        month_string[1] = 'E';
 8009302:	2345      	movs	r3, #69	@ 0x45
 8009304:	747b      	strb	r3, [r7, #17]
        month_string[2] = 'B';
 8009306:	2342      	movs	r3, #66	@ 0x42
 8009308:	74bb      	strb	r3, [r7, #18]
        month_string[3] = NULL;
 800930a:	2300      	movs	r3, #0
 800930c:	74fb      	strb	r3, [r7, #19]
        month_string[4] = NULL;
 800930e:	2300      	movs	r3, #0
 8009310:	753b      	strb	r3, [r7, #20]
        break;
 8009312:	e06e      	b.n	80093f2 <time_setup_mode+0x30a>

    case 3:
        month_string[0] = 'M';
 8009314:	234d      	movs	r3, #77	@ 0x4d
 8009316:	743b      	strb	r3, [r7, #16]
        month_string[1] = 'A';
 8009318:	2341      	movs	r3, #65	@ 0x41
 800931a:	747b      	strb	r3, [r7, #17]
        month_string[2] = 'R';
 800931c:	2352      	movs	r3, #82	@ 0x52
 800931e:	74bb      	strb	r3, [r7, #18]
        month_string[3] = NULL;
 8009320:	2300      	movs	r3, #0
 8009322:	74fb      	strb	r3, [r7, #19]
        month_string[4] = NULL;
 8009324:	2300      	movs	r3, #0
 8009326:	753b      	strb	r3, [r7, #20]
        break;
 8009328:	e063      	b.n	80093f2 <time_setup_mode+0x30a>

    case 4:
        month_string[0] = 'A';
 800932a:	2341      	movs	r3, #65	@ 0x41
 800932c:	743b      	strb	r3, [r7, #16]
        month_string[1] = 'P';
 800932e:	2350      	movs	r3, #80	@ 0x50
 8009330:	747b      	strb	r3, [r7, #17]
        month_string[2] = 'I';
 8009332:	2349      	movs	r3, #73	@ 0x49
 8009334:	74bb      	strb	r3, [r7, #18]
        month_string[3] = 'R';
 8009336:	2352      	movs	r3, #82	@ 0x52
 8009338:	74fb      	strb	r3, [r7, #19]
        month_string[4] = NULL;
 800933a:	2300      	movs	r3, #0
 800933c:	753b      	strb	r3, [r7, #20]
        break;
 800933e:	e058      	b.n	80093f2 <time_setup_mode+0x30a>

    case 5:
        month_string[0] = 'M';
 8009340:	234d      	movs	r3, #77	@ 0x4d
 8009342:	743b      	strb	r3, [r7, #16]
        month_string[1] = 'A';
 8009344:	2341      	movs	r3, #65	@ 0x41
 8009346:	747b      	strb	r3, [r7, #17]
        month_string[2] = 'Y';
 8009348:	2359      	movs	r3, #89	@ 0x59
 800934a:	74bb      	strb	r3, [r7, #18]
        month_string[3] = NULL;
 800934c:	2300      	movs	r3, #0
 800934e:	74fb      	strb	r3, [r7, #19]
        month_string[4] = NULL;
 8009350:	2300      	movs	r3, #0
 8009352:	753b      	strb	r3, [r7, #20]
        break;
 8009354:	e04d      	b.n	80093f2 <time_setup_mode+0x30a>

    case 6:
        month_string[0] = 'J';
 8009356:	234a      	movs	r3, #74	@ 0x4a
 8009358:	743b      	strb	r3, [r7, #16]
        month_string[1] = 'U';
 800935a:	2355      	movs	r3, #85	@ 0x55
 800935c:	747b      	strb	r3, [r7, #17]
        month_string[2] = 'N';
 800935e:	234e      	movs	r3, #78	@ 0x4e
 8009360:	74bb      	strb	r3, [r7, #18]
        month_string[3] = 'E';
 8009362:	2345      	movs	r3, #69	@ 0x45
 8009364:	74fb      	strb	r3, [r7, #19]
        month_string[4] = NULL;
 8009366:	2300      	movs	r3, #0
 8009368:	753b      	strb	r3, [r7, #20]
        break;
 800936a:	e042      	b.n	80093f2 <time_setup_mode+0x30a>

    case 7:
        month_string[0] = 'J';
 800936c:	234a      	movs	r3, #74	@ 0x4a
 800936e:	743b      	strb	r3, [r7, #16]
        month_string[1] = 'U';
 8009370:	2355      	movs	r3, #85	@ 0x55
 8009372:	747b      	strb	r3, [r7, #17]
        month_string[2] = 'L';
 8009374:	234c      	movs	r3, #76	@ 0x4c
 8009376:	74bb      	strb	r3, [r7, #18]
        month_string[3] = 'Y';
 8009378:	2359      	movs	r3, #89	@ 0x59
 800937a:	74fb      	strb	r3, [r7, #19]
        month_string[4] = NULL;
 800937c:	2300      	movs	r3, #0
 800937e:	753b      	strb	r3, [r7, #20]
        break;
 8009380:	e037      	b.n	80093f2 <time_setup_mode+0x30a>

    case 8:
        month_string[0] = 'A';
 8009382:	2341      	movs	r3, #65	@ 0x41
 8009384:	743b      	strb	r3, [r7, #16]
        month_string[1] = 'U';
 8009386:	2355      	movs	r3, #85	@ 0x55
 8009388:	747b      	strb	r3, [r7, #17]
        month_string[2] = 'G';
 800938a:	2347      	movs	r3, #71	@ 0x47
 800938c:	74bb      	strb	r3, [r7, #18]
        month_string[3] = NULL;
 800938e:	2300      	movs	r3, #0
 8009390:	74fb      	strb	r3, [r7, #19]
        month_string[4] = NULL;
 8009392:	2300      	movs	r3, #0
 8009394:	753b      	strb	r3, [r7, #20]
        break;
 8009396:	e02c      	b.n	80093f2 <time_setup_mode+0x30a>

    case 9:
        month_string[0] = 'S';
 8009398:	2353      	movs	r3, #83	@ 0x53
 800939a:	743b      	strb	r3, [r7, #16]
        month_string[1] = 'E';
 800939c:	2345      	movs	r3, #69	@ 0x45
 800939e:	747b      	strb	r3, [r7, #17]
        month_string[2] = 'P';
 80093a0:	2350      	movs	r3, #80	@ 0x50
 80093a2:	74bb      	strb	r3, [r7, #18]
        month_string[3] = 'T';
 80093a4:	2354      	movs	r3, #84	@ 0x54
 80093a6:	74fb      	strb	r3, [r7, #19]
        month_string[4] = NULL;
 80093a8:	2300      	movs	r3, #0
 80093aa:	753b      	strb	r3, [r7, #20]
        break;
 80093ac:	e021      	b.n	80093f2 <time_setup_mode+0x30a>
    case 10:
        month_string[0] = 'O';
 80093ae:	234f      	movs	r3, #79	@ 0x4f
 80093b0:	743b      	strb	r3, [r7, #16]
        month_string[1] = 'C';
 80093b2:	2343      	movs	r3, #67	@ 0x43
 80093b4:	747b      	strb	r3, [r7, #17]
        month_string[2] = 'T';
 80093b6:	2354      	movs	r3, #84	@ 0x54
 80093b8:	74bb      	strb	r3, [r7, #18]
        month_string[3] = NULL;
 80093ba:	2300      	movs	r3, #0
 80093bc:	74fb      	strb	r3, [r7, #19]
        month_string[4] = NULL;
 80093be:	2300      	movs	r3, #0
 80093c0:	753b      	strb	r3, [r7, #20]
        break;
 80093c2:	e016      	b.n	80093f2 <time_setup_mode+0x30a>

    case 11:
        month_string[0] = 'N';
 80093c4:	234e      	movs	r3, #78	@ 0x4e
 80093c6:	743b      	strb	r3, [r7, #16]
        month_string[1] = 'O';
 80093c8:	234f      	movs	r3, #79	@ 0x4f
 80093ca:	747b      	strb	r3, [r7, #17]
        month_string[2] = 'V';
 80093cc:	2356      	movs	r3, #86	@ 0x56
 80093ce:	74bb      	strb	r3, [r7, #18]
        month_string[3] = NULL;
 80093d0:	2300      	movs	r3, #0
 80093d2:	74fb      	strb	r3, [r7, #19]
        month_string[4] = NULL;
 80093d4:	2300      	movs	r3, #0
 80093d6:	753b      	strb	r3, [r7, #20]
        break;
 80093d8:	e00b      	b.n	80093f2 <time_setup_mode+0x30a>

    case 12:
        month_string[0] = 'D';
 80093da:	2344      	movs	r3, #68	@ 0x44
 80093dc:	743b      	strb	r3, [r7, #16]
        month_string[1] = 'E';
 80093de:	2345      	movs	r3, #69	@ 0x45
 80093e0:	747b      	strb	r3, [r7, #17]
        month_string[2] = 'C';
 80093e2:	2343      	movs	r3, #67	@ 0x43
 80093e4:	74bb      	strb	r3, [r7, #18]
        month_string[3] = NULL;
 80093e6:	2300      	movs	r3, #0
 80093e8:	74fb      	strb	r3, [r7, #19]
        month_string[4] = NULL;
 80093ea:	2300      	movs	r3, #0
 80093ec:	753b      	strb	r3, [r7, #20]
        break;
 80093ee:	e000      	b.n	80093f2 <time_setup_mode+0x30a>
    default:
        break;
 80093f0:	bf00      	nop
    }
    
        //translate day month
        switch (system_param->time_setup_cursor)
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	789b      	ldrb	r3, [r3, #2]
 80093f6:	2b05      	cmp	r3, #5
 80093f8:	f200 82f9 	bhi.w	80099ee <time_setup_mode+0x906>
 80093fc:	a201      	add	r2, pc, #4	@ (adr r2, 8009404 <time_setup_mode+0x31c>)
 80093fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009402:	bf00      	nop
 8009404:	0800942d 	.word	0x0800942d
 8009408:	0800957b 	.word	0x0800957b
 800940c:	08009689 	.word	0x08009689
 8009410:	080097fd 	.word	0x080097fd
 8009414:	08009743 	.word	0x08009743
 8009418:	080098fd 	.word	0x080098fd
 800941c:	0800bda4 	.word	0x0800bda4
 8009420:	0800bdcc 	.word	0x0800bdcc
 8009424:	20000274 	.word	0x20000274
 8009428:	20000284 	.word	0x20000284
        {
            case TIME_MINUTE:
                /* code */
                Paint_ClearWindows(100, 50, 100 + Font24.Width * 7, 50 + Font24.Height, WHITE);
 800942c:	4b93      	ldr	r3, [pc, #588]	@ (800967c <time_setup_mode+0x594>)
 800942e:	889b      	ldrh	r3, [r3, #4]
 8009430:	461a      	mov	r2, r3
 8009432:	00d2      	lsls	r2, r2, #3
 8009434:	1ad3      	subs	r3, r2, r3
 8009436:	b29b      	uxth	r3, r3
 8009438:	3364      	adds	r3, #100	@ 0x64
 800943a:	b29a      	uxth	r2, r3
 800943c:	4b8f      	ldr	r3, [pc, #572]	@ (800967c <time_setup_mode+0x594>)
 800943e:	88db      	ldrh	r3, [r3, #6]
 8009440:	3332      	adds	r3, #50	@ 0x32
 8009442:	b29b      	uxth	r3, r3
 8009444:	21ff      	movs	r1, #255	@ 0xff
 8009446:	9100      	str	r1, [sp, #0]
 8009448:	2132      	movs	r1, #50	@ 0x32
 800944a:	2064      	movs	r0, #100	@ 0x64
 800944c:	f001 f806 	bl	800a45c <Paint_ClearWindows>
                Paint_DrawTime(100, 50, &sPaint_time,  &Font24, WHITE, BLACK);
 8009450:	f107 0220 	add.w	r2, r7, #32
 8009454:	2300      	movs	r3, #0
 8009456:	9301      	str	r3, [sp, #4]
 8009458:	23ff      	movs	r3, #255	@ 0xff
 800945a:	9300      	str	r3, [sp, #0]
 800945c:	4b87      	ldr	r3, [pc, #540]	@ (800967c <time_setup_mode+0x594>)
 800945e:	2132      	movs	r1, #50	@ 0x32
 8009460:	2064      	movs	r0, #100	@ 0x64
 8009462:	f001 fbcf 	bl	800ac04 <Paint_DrawTime>
                Paint_ClearWindows(80, 100, 220, 100 + Font16.Height, WHITE);
 8009466:	4b86      	ldr	r3, [pc, #536]	@ (8009680 <time_setup_mode+0x598>)
 8009468:	88db      	ldrh	r3, [r3, #6]
 800946a:	3364      	adds	r3, #100	@ 0x64
 800946c:	b29b      	uxth	r3, r3
 800946e:	22ff      	movs	r2, #255	@ 0xff
 8009470:	9200      	str	r2, [sp, #0]
 8009472:	22dc      	movs	r2, #220	@ 0xdc
 8009474:	2164      	movs	r1, #100	@ 0x64
 8009476:	2050      	movs	r0, #80	@ 0x50
 8009478:	f000 fff0 	bl	800a45c <Paint_ClearWindows>
                draw_day(time_setup_param->dow, time_setup_param->dom, time_setup_param->month, time_setup_param->year);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	789b      	ldrb	r3, [r3, #2]
 8009480:	4618      	mov	r0, r3
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	78db      	ldrb	r3, [r3, #3]
 8009486:	4619      	mov	r1, r3
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	791b      	ldrb	r3, [r3, #4]
 800948c:	461a      	mov	r2, r3
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	795b      	ldrb	r3, [r3, #5]
 8009492:	f000 fabf 	bl	8009a14 <draw_day>
                for(;;)
                {
                    Paint_ClearWindows(100 + Font24.Width * 2 + Font24.Width / 2, 50, 100 + Font24.Width * 4 +  Font24.Width / 4, 50 + Font24.Height, WHITE);
 8009496:	4b79      	ldr	r3, [pc, #484]	@ (800967c <time_setup_mode+0x594>)
 8009498:	889b      	ldrh	r3, [r3, #4]
 800949a:	3332      	adds	r3, #50	@ 0x32
 800949c:	b29b      	uxth	r3, r3
 800949e:	005b      	lsls	r3, r3, #1
 80094a0:	b29a      	uxth	r2, r3
 80094a2:	4b76      	ldr	r3, [pc, #472]	@ (800967c <time_setup_mode+0x594>)
 80094a4:	889b      	ldrh	r3, [r3, #4]
 80094a6:	085b      	lsrs	r3, r3, #1
 80094a8:	b29b      	uxth	r3, r3
 80094aa:	4413      	add	r3, r2
 80094ac:	b298      	uxth	r0, r3
 80094ae:	4b73      	ldr	r3, [pc, #460]	@ (800967c <time_setup_mode+0x594>)
 80094b0:	889b      	ldrh	r3, [r3, #4]
 80094b2:	3319      	adds	r3, #25
 80094b4:	b29b      	uxth	r3, r3
 80094b6:	009b      	lsls	r3, r3, #2
 80094b8:	b29a      	uxth	r2, r3
 80094ba:	4b70      	ldr	r3, [pc, #448]	@ (800967c <time_setup_mode+0x594>)
 80094bc:	889b      	ldrh	r3, [r3, #4]
 80094be:	089b      	lsrs	r3, r3, #2
 80094c0:	b29b      	uxth	r3, r3
 80094c2:	4413      	add	r3, r2
 80094c4:	b29a      	uxth	r2, r3
 80094c6:	4b6d      	ldr	r3, [pc, #436]	@ (800967c <time_setup_mode+0x594>)
 80094c8:	88db      	ldrh	r3, [r3, #6]
 80094ca:	3332      	adds	r3, #50	@ 0x32
 80094cc:	b29b      	uxth	r3, r3
 80094ce:	21ff      	movs	r1, #255	@ 0xff
 80094d0:	9100      	str	r1, [sp, #0]
 80094d2:	2132      	movs	r1, #50	@ 0x32
 80094d4:	f000 ffc2 	bl	800a45c <Paint_ClearWindows>
                    Paint_DrawNum(100 + Font24.Width * 2 + Font24.Width / 2, 50, time_setup_param->minute / 10, &Font24, WHITE, BLACK);
 80094d8:	4b68      	ldr	r3, [pc, #416]	@ (800967c <time_setup_mode+0x594>)
 80094da:	889b      	ldrh	r3, [r3, #4]
 80094dc:	3332      	adds	r3, #50	@ 0x32
 80094de:	b29b      	uxth	r3, r3
 80094e0:	005b      	lsls	r3, r3, #1
 80094e2:	b29a      	uxth	r2, r3
 80094e4:	4b65      	ldr	r3, [pc, #404]	@ (800967c <time_setup_mode+0x594>)
 80094e6:	889b      	ldrh	r3, [r3, #4]
 80094e8:	085b      	lsrs	r3, r3, #1
 80094ea:	b29b      	uxth	r3, r3
 80094ec:	4413      	add	r3, r2
 80094ee:	b298      	uxth	r0, r3
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	781b      	ldrb	r3, [r3, #0]
 80094f4:	4a63      	ldr	r2, [pc, #396]	@ (8009684 <time_setup_mode+0x59c>)
 80094f6:	fba2 2303 	umull	r2, r3, r2, r3
 80094fa:	08db      	lsrs	r3, r3, #3
 80094fc:	b2db      	uxtb	r3, r3
 80094fe:	461a      	mov	r2, r3
 8009500:	2300      	movs	r3, #0
 8009502:	9301      	str	r3, [sp, #4]
 8009504:	23ff      	movs	r3, #255	@ 0xff
 8009506:	9300      	str	r3, [sp, #0]
 8009508:	4b5c      	ldr	r3, [pc, #368]	@ (800967c <time_setup_mode+0x594>)
 800950a:	2132      	movs	r1, #50	@ 0x32
 800950c:	f001 faac 	bl	800aa68 <Paint_DrawNum>
                    Paint_DrawNum(100 + Font24.Width * 3 + Font24.Width / 2, 50, time_setup_param->minute % 10, &Font24, WHITE, BLACK);
 8009510:	4b5a      	ldr	r3, [pc, #360]	@ (800967c <time_setup_mode+0x594>)
 8009512:	889b      	ldrh	r3, [r3, #4]
 8009514:	461a      	mov	r2, r3
 8009516:	0052      	lsls	r2, r2, #1
 8009518:	4413      	add	r3, r2
 800951a:	b29a      	uxth	r2, r3
 800951c:	4b57      	ldr	r3, [pc, #348]	@ (800967c <time_setup_mode+0x594>)
 800951e:	889b      	ldrh	r3, [r3, #4]
 8009520:	085b      	lsrs	r3, r3, #1
 8009522:	b29b      	uxth	r3, r3
 8009524:	4413      	add	r3, r2
 8009526:	b29b      	uxth	r3, r3
 8009528:	3364      	adds	r3, #100	@ 0x64
 800952a:	b298      	uxth	r0, r3
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	781a      	ldrb	r2, [r3, #0]
 8009530:	4b54      	ldr	r3, [pc, #336]	@ (8009684 <time_setup_mode+0x59c>)
 8009532:	fba3 1302 	umull	r1, r3, r3, r2
 8009536:	08d9      	lsrs	r1, r3, #3
 8009538:	460b      	mov	r3, r1
 800953a:	009b      	lsls	r3, r3, #2
 800953c:	440b      	add	r3, r1
 800953e:	005b      	lsls	r3, r3, #1
 8009540:	1ad3      	subs	r3, r2, r3
 8009542:	b2db      	uxtb	r3, r3
 8009544:	461a      	mov	r2, r3
 8009546:	2300      	movs	r3, #0
 8009548:	9301      	str	r3, [sp, #4]
 800954a:	23ff      	movs	r3, #255	@ 0xff
 800954c:	9300      	str	r3, [sp, #0]
 800954e:	4b4b      	ldr	r3, [pc, #300]	@ (800967c <time_setup_mode+0x594>)
 8009550:	2132      	movs	r1, #50	@ 0x32
 8009552:	f001 fa89 	bl	800aa68 <Paint_DrawNum>
                    num = num - 1;
 8009556:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800955a:	3b01      	subs	r3, #1
 800955c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                    if(num == 0) {
 8009560:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009564:	2b00      	cmp	r3, #0
 8009566:	d104      	bne.n	8009572 <time_setup_mode+0x48a>
                        num = 3;
 8009568:	2303      	movs	r3, #3
 800956a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                        break;
 800956e:	bf00      	nop
                    }
                    EPD_2IN9_V2_Display_Partial(BlackImage);
                }
                break;
 8009570:	e23e      	b.n	80099f0 <time_setup_mode+0x908>
                    EPD_2IN9_V2_Display_Partial(BlackImage);
 8009572:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009574:	f7fd f9c0 	bl	80068f8 <EPD_2IN9_V2_Display_Partial>
                    Paint_ClearWindows(100 + Font24.Width * 2 + Font24.Width / 2, 50, 100 + Font24.Width * 4 +  Font24.Width / 4, 50 + Font24.Height, WHITE);
 8009578:	e78d      	b.n	8009496 <time_setup_mode+0x3ae>
            //set hour
            case TIME_HOUR:
                /* code */
                Paint_ClearWindows(100, 50, 100 + Font24.Width * 7, 50 + Font24.Height, WHITE);
 800957a:	4b40      	ldr	r3, [pc, #256]	@ (800967c <time_setup_mode+0x594>)
 800957c:	889b      	ldrh	r3, [r3, #4]
 800957e:	461a      	mov	r2, r3
 8009580:	00d2      	lsls	r2, r2, #3
 8009582:	1ad3      	subs	r3, r2, r3
 8009584:	b29b      	uxth	r3, r3
 8009586:	3364      	adds	r3, #100	@ 0x64
 8009588:	b29a      	uxth	r2, r3
 800958a:	4b3c      	ldr	r3, [pc, #240]	@ (800967c <time_setup_mode+0x594>)
 800958c:	88db      	ldrh	r3, [r3, #6]
 800958e:	3332      	adds	r3, #50	@ 0x32
 8009590:	b29b      	uxth	r3, r3
 8009592:	21ff      	movs	r1, #255	@ 0xff
 8009594:	9100      	str	r1, [sp, #0]
 8009596:	2132      	movs	r1, #50	@ 0x32
 8009598:	2064      	movs	r0, #100	@ 0x64
 800959a:	f000 ff5f 	bl	800a45c <Paint_ClearWindows>
                Paint_DrawTime(100, 50, &sPaint_time,  &Font24, WHITE, BLACK);
 800959e:	f107 0220 	add.w	r2, r7, #32
 80095a2:	2300      	movs	r3, #0
 80095a4:	9301      	str	r3, [sp, #4]
 80095a6:	23ff      	movs	r3, #255	@ 0xff
 80095a8:	9300      	str	r3, [sp, #0]
 80095aa:	4b34      	ldr	r3, [pc, #208]	@ (800967c <time_setup_mode+0x594>)
 80095ac:	2132      	movs	r1, #50	@ 0x32
 80095ae:	2064      	movs	r0, #100	@ 0x64
 80095b0:	f001 fb28 	bl	800ac04 <Paint_DrawTime>
                Paint_ClearWindows(80, 100, 220, 100 + Font16.Height, WHITE);
 80095b4:	4b32      	ldr	r3, [pc, #200]	@ (8009680 <time_setup_mode+0x598>)
 80095b6:	88db      	ldrh	r3, [r3, #6]
 80095b8:	3364      	adds	r3, #100	@ 0x64
 80095ba:	b29b      	uxth	r3, r3
 80095bc:	22ff      	movs	r2, #255	@ 0xff
 80095be:	9200      	str	r2, [sp, #0]
 80095c0:	22dc      	movs	r2, #220	@ 0xdc
 80095c2:	2164      	movs	r1, #100	@ 0x64
 80095c4:	2050      	movs	r0, #80	@ 0x50
 80095c6:	f000 ff49 	bl	800a45c <Paint_ClearWindows>
                draw_day(time_setup_param->dow, time_setup_param->dom, time_setup_param->month, time_setup_param->year);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	789b      	ldrb	r3, [r3, #2]
 80095ce:	4618      	mov	r0, r3
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	78db      	ldrb	r3, [r3, #3]
 80095d4:	4619      	mov	r1, r3
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	791b      	ldrb	r3, [r3, #4]
 80095da:	461a      	mov	r2, r3
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	795b      	ldrb	r3, [r3, #5]
 80095e0:	f000 fa18 	bl	8009a14 <draw_day>
                for(;;)
                {
                    Paint_ClearWindows(100, 50, 100 + Font24.Width * 2, 50 + Font24.Height, WHITE);
 80095e4:	4b25      	ldr	r3, [pc, #148]	@ (800967c <time_setup_mode+0x594>)
 80095e6:	889b      	ldrh	r3, [r3, #4]
 80095e8:	3332      	adds	r3, #50	@ 0x32
 80095ea:	b29b      	uxth	r3, r3
 80095ec:	005b      	lsls	r3, r3, #1
 80095ee:	b29a      	uxth	r2, r3
 80095f0:	4b22      	ldr	r3, [pc, #136]	@ (800967c <time_setup_mode+0x594>)
 80095f2:	88db      	ldrh	r3, [r3, #6]
 80095f4:	3332      	adds	r3, #50	@ 0x32
 80095f6:	b29b      	uxth	r3, r3
 80095f8:	21ff      	movs	r1, #255	@ 0xff
 80095fa:	9100      	str	r1, [sp, #0]
 80095fc:	2132      	movs	r1, #50	@ 0x32
 80095fe:	2064      	movs	r0, #100	@ 0x64
 8009600:	f000 ff2c 	bl	800a45c <Paint_ClearWindows>
                    Paint_DrawNum(100, 50, time_setup_param->hour / 10, &Font24, WHITE, BLACK);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	785b      	ldrb	r3, [r3, #1]
 8009608:	4a1e      	ldr	r2, [pc, #120]	@ (8009684 <time_setup_mode+0x59c>)
 800960a:	fba2 2303 	umull	r2, r3, r2, r3
 800960e:	08db      	lsrs	r3, r3, #3
 8009610:	b2db      	uxtb	r3, r3
 8009612:	461a      	mov	r2, r3
 8009614:	2300      	movs	r3, #0
 8009616:	9301      	str	r3, [sp, #4]
 8009618:	23ff      	movs	r3, #255	@ 0xff
 800961a:	9300      	str	r3, [sp, #0]
 800961c:	4b17      	ldr	r3, [pc, #92]	@ (800967c <time_setup_mode+0x594>)
 800961e:	2132      	movs	r1, #50	@ 0x32
 8009620:	2064      	movs	r0, #100	@ 0x64
 8009622:	f001 fa21 	bl	800aa68 <Paint_DrawNum>
                    Paint_DrawNum(100 + Font24.Width * 1, 50, time_setup_param->hour % 10, &Font24, WHITE, BLACK);
 8009626:	4b15      	ldr	r3, [pc, #84]	@ (800967c <time_setup_mode+0x594>)
 8009628:	889b      	ldrh	r3, [r3, #4]
 800962a:	3364      	adds	r3, #100	@ 0x64
 800962c:	b298      	uxth	r0, r3
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	785a      	ldrb	r2, [r3, #1]
 8009632:	4b14      	ldr	r3, [pc, #80]	@ (8009684 <time_setup_mode+0x59c>)
 8009634:	fba3 1302 	umull	r1, r3, r3, r2
 8009638:	08d9      	lsrs	r1, r3, #3
 800963a:	460b      	mov	r3, r1
 800963c:	009b      	lsls	r3, r3, #2
 800963e:	440b      	add	r3, r1
 8009640:	005b      	lsls	r3, r3, #1
 8009642:	1ad3      	subs	r3, r2, r3
 8009644:	b2db      	uxtb	r3, r3
 8009646:	461a      	mov	r2, r3
 8009648:	2300      	movs	r3, #0
 800964a:	9301      	str	r3, [sp, #4]
 800964c:	23ff      	movs	r3, #255	@ 0xff
 800964e:	9300      	str	r3, [sp, #0]
 8009650:	4b0a      	ldr	r3, [pc, #40]	@ (800967c <time_setup_mode+0x594>)
 8009652:	2132      	movs	r1, #50	@ 0x32
 8009654:	f001 fa08 	bl	800aa68 <Paint_DrawNum>
                    num = num - 1;
 8009658:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800965c:	3b01      	subs	r3, #1
 800965e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                    if(num == 0) {
 8009662:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009666:	2b00      	cmp	r3, #0
 8009668:	d104      	bne.n	8009674 <time_setup_mode+0x58c>
                        num = 3;
 800966a:	2303      	movs	r3, #3
 800966c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                        break;
 8009670:	bf00      	nop
                    }
		            EPD_2IN9_V2_Display_Partial(BlackImage);
                }
            break;
 8009672:	e1bd      	b.n	80099f0 <time_setup_mode+0x908>
		            EPD_2IN9_V2_Display_Partial(BlackImage);
 8009674:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009676:	f7fd f93f 	bl	80068f8 <EPD_2IN9_V2_Display_Partial>
                    Paint_ClearWindows(100, 50, 100 + Font24.Width * 2, 50 + Font24.Height, WHITE);
 800967a:	e7b3      	b.n	80095e4 <time_setup_mode+0x4fc>
 800967c:	20000284 	.word	0x20000284
 8009680:	20000274 	.word	0x20000274
 8009684:	cccccccd 	.word	0xcccccccd
            case TIME_DOW:
            /* code */
            Paint_ClearWindows(100, 50, 100 + Font24.Width * 7, 50 + Font24.Height, WHITE);
 8009688:	4b99      	ldr	r3, [pc, #612]	@ (80098f0 <time_setup_mode+0x808>)
 800968a:	889b      	ldrh	r3, [r3, #4]
 800968c:	461a      	mov	r2, r3
 800968e:	00d2      	lsls	r2, r2, #3
 8009690:	1ad3      	subs	r3, r2, r3
 8009692:	b29b      	uxth	r3, r3
 8009694:	3364      	adds	r3, #100	@ 0x64
 8009696:	b29a      	uxth	r2, r3
 8009698:	4b95      	ldr	r3, [pc, #596]	@ (80098f0 <time_setup_mode+0x808>)
 800969a:	88db      	ldrh	r3, [r3, #6]
 800969c:	3332      	adds	r3, #50	@ 0x32
 800969e:	b29b      	uxth	r3, r3
 80096a0:	21ff      	movs	r1, #255	@ 0xff
 80096a2:	9100      	str	r1, [sp, #0]
 80096a4:	2132      	movs	r1, #50	@ 0x32
 80096a6:	2064      	movs	r0, #100	@ 0x64
 80096a8:	f000 fed8 	bl	800a45c <Paint_ClearWindows>
            Paint_DrawTime(100, 50, &sPaint_time,  &Font24, WHITE, BLACK);
 80096ac:	f107 0220 	add.w	r2, r7, #32
 80096b0:	2300      	movs	r3, #0
 80096b2:	9301      	str	r3, [sp, #4]
 80096b4:	23ff      	movs	r3, #255	@ 0xff
 80096b6:	9300      	str	r3, [sp, #0]
 80096b8:	4b8d      	ldr	r3, [pc, #564]	@ (80098f0 <time_setup_mode+0x808>)
 80096ba:	2132      	movs	r1, #50	@ 0x32
 80096bc:	2064      	movs	r0, #100	@ 0x64
 80096be:	f001 faa1 	bl	800ac04 <Paint_DrawTime>
            Paint_ClearWindows(80, 100, 220, 100 + Font16.Height, WHITE);
 80096c2:	4b8c      	ldr	r3, [pc, #560]	@ (80098f4 <time_setup_mode+0x80c>)
 80096c4:	88db      	ldrh	r3, [r3, #6]
 80096c6:	3364      	adds	r3, #100	@ 0x64
 80096c8:	b29b      	uxth	r3, r3
 80096ca:	22ff      	movs	r2, #255	@ 0xff
 80096cc:	9200      	str	r2, [sp, #0]
 80096ce:	22dc      	movs	r2, #220	@ 0xdc
 80096d0:	2164      	movs	r1, #100	@ 0x64
 80096d2:	2050      	movs	r0, #80	@ 0x50
 80096d4:	f000 fec2 	bl	800a45c <Paint_ClearWindows>
            draw_day(time_setup_param->dow, time_setup_param->dom, time_setup_param->month, time_setup_param->year);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	789b      	ldrb	r3, [r3, #2]
 80096dc:	4618      	mov	r0, r3
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	78db      	ldrb	r3, [r3, #3]
 80096e2:	4619      	mov	r1, r3
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	791b      	ldrb	r3, [r3, #4]
 80096e8:	461a      	mov	r2, r3
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	795b      	ldrb	r3, [r3, #5]
 80096ee:	f000 f991 	bl	8009a14 <draw_day>
            for(;;)
            {
                Paint_ClearWindows(85, 100, 120, 100 + Font16.Height, WHITE);
 80096f2:	4b80      	ldr	r3, [pc, #512]	@ (80098f4 <time_setup_mode+0x80c>)
 80096f4:	88db      	ldrh	r3, [r3, #6]
 80096f6:	3364      	adds	r3, #100	@ 0x64
 80096f8:	b29b      	uxth	r3, r3
 80096fa:	22ff      	movs	r2, #255	@ 0xff
 80096fc:	9200      	str	r2, [sp, #0]
 80096fe:	2278      	movs	r2, #120	@ 0x78
 8009700:	2164      	movs	r1, #100	@ 0x64
 8009702:	2055      	movs	r0, #85	@ 0x55
 8009704:	f000 feaa 	bl	800a45c <Paint_ClearWindows>
                Paint_DrawString_EN(80, 100, &day_string[0], &Font16, WHITE, BLACK);
 8009708:	f107 0218 	add.w	r2, r7, #24
 800970c:	2300      	movs	r3, #0
 800970e:	9301      	str	r3, [sp, #4]
 8009710:	23ff      	movs	r3, #255	@ 0xff
 8009712:	9300      	str	r3, [sp, #0]
 8009714:	4b77      	ldr	r3, [pc, #476]	@ (80098f4 <time_setup_mode+0x80c>)
 8009716:	2164      	movs	r1, #100	@ 0x64
 8009718:	2050      	movs	r0, #80	@ 0x50
 800971a:	f001 f951 	bl	800a9c0 <Paint_DrawString_EN>
                num = num - 1;
 800971e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009722:	3b01      	subs	r3, #1
 8009724:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                if(num == 0) {
 8009728:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800972c:	2b00      	cmp	r3, #0
 800972e:	d104      	bne.n	800973a <time_setup_mode+0x652>
                    num = 3;
 8009730:	2303      	movs	r3, #3
 8009732:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                    break;
 8009736:	bf00      	nop
                }
                EPD_2IN9_V2_Display_Partial(BlackImage);
            }
            break;
 8009738:	e15a      	b.n	80099f0 <time_setup_mode+0x908>
                EPD_2IN9_V2_Display_Partial(BlackImage);
 800973a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800973c:	f7fd f8dc 	bl	80068f8 <EPD_2IN9_V2_Display_Partial>
                Paint_ClearWindows(85, 100, 120, 100 + Font16.Height, WHITE);
 8009740:	e7d7      	b.n	80096f2 <time_setup_mode+0x60a>
            //set second
            case TIME_MONTH:
            /* code */
                Paint_ClearWindows(100, 50, 100 + Font24.Width * 7, 50 + Font24.Height, WHITE);
 8009742:	4b6b      	ldr	r3, [pc, #428]	@ (80098f0 <time_setup_mode+0x808>)
 8009744:	889b      	ldrh	r3, [r3, #4]
 8009746:	461a      	mov	r2, r3
 8009748:	00d2      	lsls	r2, r2, #3
 800974a:	1ad3      	subs	r3, r2, r3
 800974c:	b29b      	uxth	r3, r3
 800974e:	3364      	adds	r3, #100	@ 0x64
 8009750:	b29a      	uxth	r2, r3
 8009752:	4b67      	ldr	r3, [pc, #412]	@ (80098f0 <time_setup_mode+0x808>)
 8009754:	88db      	ldrh	r3, [r3, #6]
 8009756:	3332      	adds	r3, #50	@ 0x32
 8009758:	b29b      	uxth	r3, r3
 800975a:	21ff      	movs	r1, #255	@ 0xff
 800975c:	9100      	str	r1, [sp, #0]
 800975e:	2132      	movs	r1, #50	@ 0x32
 8009760:	2064      	movs	r0, #100	@ 0x64
 8009762:	f000 fe7b 	bl	800a45c <Paint_ClearWindows>
                Paint_DrawTime(100, 50, &sPaint_time,  &Font24, WHITE, BLACK);
 8009766:	f107 0220 	add.w	r2, r7, #32
 800976a:	2300      	movs	r3, #0
 800976c:	9301      	str	r3, [sp, #4]
 800976e:	23ff      	movs	r3, #255	@ 0xff
 8009770:	9300      	str	r3, [sp, #0]
 8009772:	4b5f      	ldr	r3, [pc, #380]	@ (80098f0 <time_setup_mode+0x808>)
 8009774:	2132      	movs	r1, #50	@ 0x32
 8009776:	2064      	movs	r0, #100	@ 0x64
 8009778:	f001 fa44 	bl	800ac04 <Paint_DrawTime>
                Paint_ClearWindows(80, 100, 220, 100 + Font16.Height, WHITE);
 800977c:	4b5d      	ldr	r3, [pc, #372]	@ (80098f4 <time_setup_mode+0x80c>)
 800977e:	88db      	ldrh	r3, [r3, #6]
 8009780:	3364      	adds	r3, #100	@ 0x64
 8009782:	b29b      	uxth	r3, r3
 8009784:	22ff      	movs	r2, #255	@ 0xff
 8009786:	9200      	str	r2, [sp, #0]
 8009788:	22dc      	movs	r2, #220	@ 0xdc
 800978a:	2164      	movs	r1, #100	@ 0x64
 800978c:	2050      	movs	r0, #80	@ 0x50
 800978e:	f000 fe65 	bl	800a45c <Paint_ClearWindows>
                draw_day(time_setup_param->dow, time_setup_param->dom, time_setup_param->month, time_setup_param->year);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	789b      	ldrb	r3, [r3, #2]
 8009796:	4618      	mov	r0, r3
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	78db      	ldrb	r3, [r3, #3]
 800979c:	4619      	mov	r1, r3
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	791b      	ldrb	r3, [r3, #4]
 80097a2:	461a      	mov	r2, r3
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	795b      	ldrb	r3, [r3, #5]
 80097a8:	f000 f934 	bl	8009a14 <draw_day>
                for(;;)
                {
                    Paint_ClearWindows(135, 100, 170, 100 + Font16.Height, WHITE);
 80097ac:	4b51      	ldr	r3, [pc, #324]	@ (80098f4 <time_setup_mode+0x80c>)
 80097ae:	88db      	ldrh	r3, [r3, #6]
 80097b0:	3364      	adds	r3, #100	@ 0x64
 80097b2:	b29b      	uxth	r3, r3
 80097b4:	22ff      	movs	r2, #255	@ 0xff
 80097b6:	9200      	str	r2, [sp, #0]
 80097b8:	22aa      	movs	r2, #170	@ 0xaa
 80097ba:	2164      	movs	r1, #100	@ 0x64
 80097bc:	2087      	movs	r0, #135	@ 0x87
 80097be:	f000 fe4d 	bl	800a45c <Paint_ClearWindows>
                    Paint_DrawString_EN(130, 100, &month_string[0], &Font16, WHITE, BLACK);
 80097c2:	f107 0210 	add.w	r2, r7, #16
 80097c6:	2300      	movs	r3, #0
 80097c8:	9301      	str	r3, [sp, #4]
 80097ca:	23ff      	movs	r3, #255	@ 0xff
 80097cc:	9300      	str	r3, [sp, #0]
 80097ce:	4b49      	ldr	r3, [pc, #292]	@ (80098f4 <time_setup_mode+0x80c>)
 80097d0:	2164      	movs	r1, #100	@ 0x64
 80097d2:	2082      	movs	r0, #130	@ 0x82
 80097d4:	f001 f8f4 	bl	800a9c0 <Paint_DrawString_EN>
                    num = num - 1;
 80097d8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80097dc:	3b01      	subs	r3, #1
 80097de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                    if(num == 0) {
 80097e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d104      	bne.n	80097f4 <time_setup_mode+0x70c>
                        num = 3;
 80097ea:	2303      	movs	r3, #3
 80097ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                        break;
 80097f0:	bf00      	nop
                    }
                    EPD_2IN9_V2_Display_Partial(BlackImage);
                }
            break;
 80097f2:	e0fd      	b.n	80099f0 <time_setup_mode+0x908>
                    EPD_2IN9_V2_Display_Partial(BlackImage);
 80097f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80097f6:	f7fd f87f 	bl	80068f8 <EPD_2IN9_V2_Display_Partial>
                    Paint_ClearWindows(135, 100, 170, 100 + Font16.Height, WHITE);
 80097fa:	e7d7      	b.n	80097ac <time_setup_mode+0x6c4>

            case TIME_DOM:
            /* code */
                Paint_ClearWindows(100, 50, 100 + Font24.Width * 7, 50 + Font24.Height, WHITE);
 80097fc:	4b3c      	ldr	r3, [pc, #240]	@ (80098f0 <time_setup_mode+0x808>)
 80097fe:	889b      	ldrh	r3, [r3, #4]
 8009800:	461a      	mov	r2, r3
 8009802:	00d2      	lsls	r2, r2, #3
 8009804:	1ad3      	subs	r3, r2, r3
 8009806:	b29b      	uxth	r3, r3
 8009808:	3364      	adds	r3, #100	@ 0x64
 800980a:	b29a      	uxth	r2, r3
 800980c:	4b38      	ldr	r3, [pc, #224]	@ (80098f0 <time_setup_mode+0x808>)
 800980e:	88db      	ldrh	r3, [r3, #6]
 8009810:	3332      	adds	r3, #50	@ 0x32
 8009812:	b29b      	uxth	r3, r3
 8009814:	21ff      	movs	r1, #255	@ 0xff
 8009816:	9100      	str	r1, [sp, #0]
 8009818:	2132      	movs	r1, #50	@ 0x32
 800981a:	2064      	movs	r0, #100	@ 0x64
 800981c:	f000 fe1e 	bl	800a45c <Paint_ClearWindows>
                Paint_DrawTime(100, 50, &sPaint_time,  &Font24, WHITE, BLACK);
 8009820:	f107 0220 	add.w	r2, r7, #32
 8009824:	2300      	movs	r3, #0
 8009826:	9301      	str	r3, [sp, #4]
 8009828:	23ff      	movs	r3, #255	@ 0xff
 800982a:	9300      	str	r3, [sp, #0]
 800982c:	4b30      	ldr	r3, [pc, #192]	@ (80098f0 <time_setup_mode+0x808>)
 800982e:	2132      	movs	r1, #50	@ 0x32
 8009830:	2064      	movs	r0, #100	@ 0x64
 8009832:	f001 f9e7 	bl	800ac04 <Paint_DrawTime>
                Paint_ClearWindows(80, 100, 220, 100 + Font16.Height, WHITE);
 8009836:	4b2f      	ldr	r3, [pc, #188]	@ (80098f4 <time_setup_mode+0x80c>)
 8009838:	88db      	ldrh	r3, [r3, #6]
 800983a:	3364      	adds	r3, #100	@ 0x64
 800983c:	b29b      	uxth	r3, r3
 800983e:	22ff      	movs	r2, #255	@ 0xff
 8009840:	9200      	str	r2, [sp, #0]
 8009842:	22dc      	movs	r2, #220	@ 0xdc
 8009844:	2164      	movs	r1, #100	@ 0x64
 8009846:	2050      	movs	r0, #80	@ 0x50
 8009848:	f000 fe08 	bl	800a45c <Paint_ClearWindows>
                draw_day(time_setup_param->dow, time_setup_param->dom, time_setup_param->month, time_setup_param->year);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	789b      	ldrb	r3, [r3, #2]
 8009850:	4618      	mov	r0, r3
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	78db      	ldrb	r3, [r3, #3]
 8009856:	4619      	mov	r1, r3
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	791b      	ldrb	r3, [r3, #4]
 800985c:	461a      	mov	r2, r3
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	795b      	ldrb	r3, [r3, #5]
 8009862:	f000 f8d7 	bl	8009a14 <draw_day>
                for(;;)
                {
                    Paint_ClearWindows(180, 100, 200, 100 + Font16.Height, WHITE);
 8009866:	4b23      	ldr	r3, [pc, #140]	@ (80098f4 <time_setup_mode+0x80c>)
 8009868:	88db      	ldrh	r3, [r3, #6]
 800986a:	3364      	adds	r3, #100	@ 0x64
 800986c:	b29b      	uxth	r3, r3
 800986e:	22ff      	movs	r2, #255	@ 0xff
 8009870:	9200      	str	r2, [sp, #0]
 8009872:	22c8      	movs	r2, #200	@ 0xc8
 8009874:	2164      	movs	r1, #100	@ 0x64
 8009876:	20b4      	movs	r0, #180	@ 0xb4
 8009878:	f000 fdf0 	bl	800a45c <Paint_ClearWindows>
                    Paint_DrawNum(180, 100, time_setup_param->dom / 10, &Font16, BLACK, WHITE);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	78db      	ldrb	r3, [r3, #3]
 8009880:	4a1d      	ldr	r2, [pc, #116]	@ (80098f8 <time_setup_mode+0x810>)
 8009882:	fba2 2303 	umull	r2, r3, r2, r3
 8009886:	08db      	lsrs	r3, r3, #3
 8009888:	b2db      	uxtb	r3, r3
 800988a:	461a      	mov	r2, r3
 800988c:	23ff      	movs	r3, #255	@ 0xff
 800988e:	9301      	str	r3, [sp, #4]
 8009890:	2300      	movs	r3, #0
 8009892:	9300      	str	r3, [sp, #0]
 8009894:	4b17      	ldr	r3, [pc, #92]	@ (80098f4 <time_setup_mode+0x80c>)
 8009896:	2164      	movs	r1, #100	@ 0x64
 8009898:	20b4      	movs	r0, #180	@ 0xb4
 800989a:	f001 f8e5 	bl	800aa68 <Paint_DrawNum>
                    Paint_DrawNum(190, 100, time_setup_param->dom % 10, &Font16, BLACK, WHITE);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	78da      	ldrb	r2, [r3, #3]
 80098a2:	4b15      	ldr	r3, [pc, #84]	@ (80098f8 <time_setup_mode+0x810>)
 80098a4:	fba3 1302 	umull	r1, r3, r3, r2
 80098a8:	08d9      	lsrs	r1, r3, #3
 80098aa:	460b      	mov	r3, r1
 80098ac:	009b      	lsls	r3, r3, #2
 80098ae:	440b      	add	r3, r1
 80098b0:	005b      	lsls	r3, r3, #1
 80098b2:	1ad3      	subs	r3, r2, r3
 80098b4:	b2db      	uxtb	r3, r3
 80098b6:	461a      	mov	r2, r3
 80098b8:	23ff      	movs	r3, #255	@ 0xff
 80098ba:	9301      	str	r3, [sp, #4]
 80098bc:	2300      	movs	r3, #0
 80098be:	9300      	str	r3, [sp, #0]
 80098c0:	4b0c      	ldr	r3, [pc, #48]	@ (80098f4 <time_setup_mode+0x80c>)
 80098c2:	2164      	movs	r1, #100	@ 0x64
 80098c4:	20be      	movs	r0, #190	@ 0xbe
 80098c6:	f001 f8cf 	bl	800aa68 <Paint_DrawNum>
                    num = num - 1;
 80098ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80098ce:	3b01      	subs	r3, #1
 80098d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                    if(num == 0) {
 80098d4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d104      	bne.n	80098e6 <time_setup_mode+0x7fe>
                        num = 3;
 80098dc:	2303      	movs	r3, #3
 80098de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                        break;
 80098e2:	bf00      	nop
                    }
                    EPD_2IN9_V2_Display_Partial(BlackImage);
                }
            break;
 80098e4:	e084      	b.n	80099f0 <time_setup_mode+0x908>
                    EPD_2IN9_V2_Display_Partial(BlackImage);
 80098e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80098e8:	f7fd f806 	bl	80068f8 <EPD_2IN9_V2_Display_Partial>
                    Paint_ClearWindows(180, 100, 200, 100 + Font16.Height, WHITE);
 80098ec:	e7bb      	b.n	8009866 <time_setup_mode+0x77e>
 80098ee:	bf00      	nop
 80098f0:	20000284 	.word	0x20000284
 80098f4:	20000274 	.word	0x20000274
 80098f8:	cccccccd 	.word	0xcccccccd

            case TIME_YEAR:
            /* code */
                Paint_ClearWindows(100, 50, 100 + Font24.Width * 7, 50 + Font24.Height, WHITE);
 80098fc:	4b42      	ldr	r3, [pc, #264]	@ (8009a08 <time_setup_mode+0x920>)
 80098fe:	889b      	ldrh	r3, [r3, #4]
 8009900:	461a      	mov	r2, r3
 8009902:	00d2      	lsls	r2, r2, #3
 8009904:	1ad3      	subs	r3, r2, r3
 8009906:	b29b      	uxth	r3, r3
 8009908:	3364      	adds	r3, #100	@ 0x64
 800990a:	b29a      	uxth	r2, r3
 800990c:	4b3e      	ldr	r3, [pc, #248]	@ (8009a08 <time_setup_mode+0x920>)
 800990e:	88db      	ldrh	r3, [r3, #6]
 8009910:	3332      	adds	r3, #50	@ 0x32
 8009912:	b29b      	uxth	r3, r3
 8009914:	21ff      	movs	r1, #255	@ 0xff
 8009916:	9100      	str	r1, [sp, #0]
 8009918:	2132      	movs	r1, #50	@ 0x32
 800991a:	2064      	movs	r0, #100	@ 0x64
 800991c:	f000 fd9e 	bl	800a45c <Paint_ClearWindows>
                Paint_DrawTime(100, 50, &sPaint_time,  &Font24, WHITE, BLACK);
 8009920:	f107 0220 	add.w	r2, r7, #32
 8009924:	2300      	movs	r3, #0
 8009926:	9301      	str	r3, [sp, #4]
 8009928:	23ff      	movs	r3, #255	@ 0xff
 800992a:	9300      	str	r3, [sp, #0]
 800992c:	4b36      	ldr	r3, [pc, #216]	@ (8009a08 <time_setup_mode+0x920>)
 800992e:	2132      	movs	r1, #50	@ 0x32
 8009930:	2064      	movs	r0, #100	@ 0x64
 8009932:	f001 f967 	bl	800ac04 <Paint_DrawTime>
                Paint_ClearWindows(80, 100, 220, 100 + Font16.Height, WHITE);
 8009936:	4b35      	ldr	r3, [pc, #212]	@ (8009a0c <time_setup_mode+0x924>)
 8009938:	88db      	ldrh	r3, [r3, #6]
 800993a:	3364      	adds	r3, #100	@ 0x64
 800993c:	b29b      	uxth	r3, r3
 800993e:	22ff      	movs	r2, #255	@ 0xff
 8009940:	9200      	str	r2, [sp, #0]
 8009942:	22dc      	movs	r2, #220	@ 0xdc
 8009944:	2164      	movs	r1, #100	@ 0x64
 8009946:	2050      	movs	r0, #80	@ 0x50
 8009948:	f000 fd88 	bl	800a45c <Paint_ClearWindows>
                draw_day(time_setup_param->dow, time_setup_param->dom, time_setup_param->month, time_setup_param->year);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	789b      	ldrb	r3, [r3, #2]
 8009950:	4618      	mov	r0, r3
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	78db      	ldrb	r3, [r3, #3]
 8009956:	4619      	mov	r1, r3
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	791b      	ldrb	r3, [r3, #4]
 800995c:	461a      	mov	r2, r3
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	795b      	ldrb	r3, [r3, #5]
 8009962:	f000 f857 	bl	8009a14 <draw_day>
                for(;;)
                {
                    Paint_ClearWindows(210, 100, 230, 100 + Font16.Height, WHITE);
 8009966:	4b29      	ldr	r3, [pc, #164]	@ (8009a0c <time_setup_mode+0x924>)
 8009968:	88db      	ldrh	r3, [r3, #6]
 800996a:	3364      	adds	r3, #100	@ 0x64
 800996c:	b29b      	uxth	r3, r3
 800996e:	22ff      	movs	r2, #255	@ 0xff
 8009970:	9200      	str	r2, [sp, #0]
 8009972:	22e6      	movs	r2, #230	@ 0xe6
 8009974:	2164      	movs	r1, #100	@ 0x64
 8009976:	20d2      	movs	r0, #210	@ 0xd2
 8009978:	f000 fd70 	bl	800a45c <Paint_ClearWindows>
                    Paint_DrawNum(210, 100, time_setup_param->year / 10, &Font16, BLACK, WHITE);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	795b      	ldrb	r3, [r3, #5]
 8009980:	4a23      	ldr	r2, [pc, #140]	@ (8009a10 <time_setup_mode+0x928>)
 8009982:	fba2 2303 	umull	r2, r3, r2, r3
 8009986:	08db      	lsrs	r3, r3, #3
 8009988:	b2db      	uxtb	r3, r3
 800998a:	461a      	mov	r2, r3
 800998c:	23ff      	movs	r3, #255	@ 0xff
 800998e:	9301      	str	r3, [sp, #4]
 8009990:	2300      	movs	r3, #0
 8009992:	9300      	str	r3, [sp, #0]
 8009994:	4b1d      	ldr	r3, [pc, #116]	@ (8009a0c <time_setup_mode+0x924>)
 8009996:	2164      	movs	r1, #100	@ 0x64
 8009998:	20d2      	movs	r0, #210	@ 0xd2
 800999a:	f001 f865 	bl	800aa68 <Paint_DrawNum>
                    Paint_DrawNum(220, 100, time_setup_param->year % 10, &Font16, BLACK, WHITE);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	795a      	ldrb	r2, [r3, #5]
 80099a2:	4b1b      	ldr	r3, [pc, #108]	@ (8009a10 <time_setup_mode+0x928>)
 80099a4:	fba3 1302 	umull	r1, r3, r3, r2
 80099a8:	08d9      	lsrs	r1, r3, #3
 80099aa:	460b      	mov	r3, r1
 80099ac:	009b      	lsls	r3, r3, #2
 80099ae:	440b      	add	r3, r1
 80099b0:	005b      	lsls	r3, r3, #1
 80099b2:	1ad3      	subs	r3, r2, r3
 80099b4:	b2db      	uxtb	r3, r3
 80099b6:	461a      	mov	r2, r3
 80099b8:	23ff      	movs	r3, #255	@ 0xff
 80099ba:	9301      	str	r3, [sp, #4]
 80099bc:	2300      	movs	r3, #0
 80099be:	9300      	str	r3, [sp, #0]
 80099c0:	4b12      	ldr	r3, [pc, #72]	@ (8009a0c <time_setup_mode+0x924>)
 80099c2:	2164      	movs	r1, #100	@ 0x64
 80099c4:	20dc      	movs	r0, #220	@ 0xdc
 80099c6:	f001 f84f 	bl	800aa68 <Paint_DrawNum>
                    num = num - 1;
 80099ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80099ce:	3b01      	subs	r3, #1
 80099d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                    if(num == 0) {
 80099d4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d104      	bne.n	80099e6 <time_setup_mode+0x8fe>
                        num = 3;
 80099dc:	2303      	movs	r3, #3
 80099de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                        break;
 80099e2:	bf00      	nop
                    }
                    EPD_2IN9_V2_Display_Partial(BlackImage);
                }
            break;
 80099e4:	e004      	b.n	80099f0 <time_setup_mode+0x908>
                    EPD_2IN9_V2_Display_Partial(BlackImage);
 80099e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80099e8:	f7fc ff86 	bl	80068f8 <EPD_2IN9_V2_Display_Partial>
                    Paint_ClearWindows(210, 100, 230, 100 + Font16.Height, WHITE);
 80099ec:	e7bb      	b.n	8009966 <time_setup_mode+0x87e>
        default:
            break;
 80099ee:	bf00      	nop
        }
      EPD_2IN9_V2_Sleep();
 80099f0:	f7fc fff4 	bl	80069dc <EPD_2IN9_V2_Sleep>
      flag_time_set_up_mode->flag_TIME_SETUP_MODE  = 0;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2200      	movs	r2, #0
 80099f8:	705a      	strb	r2, [r3, #1]
      free(BlackImage);
 80099fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80099fc:	f001 fa04 	bl	800ae08 <free>
}
 8009a00:	bf00      	nop
 8009a02:	3730      	adds	r7, #48	@ 0x30
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}
 8009a08:	20000284 	.word	0x20000284
 8009a0c:	20000274 	.word	0x20000274
 8009a10:	cccccccd 	.word	0xcccccccd

08009a14 <draw_day>:

void draw_day(uint16_t day, uint16_t date, uint16_t month, uint16_t year)
{
 8009a14:	b590      	push	{r4, r7, lr}
 8009a16:	b089      	sub	sp, #36	@ 0x24
 8009a18:	af02      	add	r7, sp, #8
 8009a1a:	4604      	mov	r4, r0
 8009a1c:	4608      	mov	r0, r1
 8009a1e:	4611      	mov	r1, r2
 8009a20:	461a      	mov	r2, r3
 8009a22:	4623      	mov	r3, r4
 8009a24:	80fb      	strh	r3, [r7, #6]
 8009a26:	4603      	mov	r3, r0
 8009a28:	80bb      	strh	r3, [r7, #4]
 8009a2a:	460b      	mov	r3, r1
 8009a2c:	807b      	strh	r3, [r7, #2]
 8009a2e:	4613      	mov	r3, r2
 8009a30:	803b      	strh	r3, [r7, #0]
    char day_string[5];
    char month_string[5];

    switch (day)
 8009a32:	88fb      	ldrh	r3, [r7, #6]
 8009a34:	3b01      	subs	r3, #1
 8009a36:	2b06      	cmp	r3, #6
 8009a38:	d85b      	bhi.n	8009af2 <draw_day+0xde>
 8009a3a:	a201      	add	r2, pc, #4	@ (adr r2, 8009a40 <draw_day+0x2c>)
 8009a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a40:	08009a5d 	.word	0x08009a5d
 8009a44:	08009a73 	.word	0x08009a73
 8009a48:	08009a89 	.word	0x08009a89
 8009a4c:	08009a9f 	.word	0x08009a9f
 8009a50:	08009ab5 	.word	0x08009ab5
 8009a54:	08009ac7 	.word	0x08009ac7
 8009a58:	08009add 	.word	0x08009add
    {
    case 1:
        day_string[0] = 'S';
 8009a5c:	2353      	movs	r3, #83	@ 0x53
 8009a5e:	743b      	strb	r3, [r7, #16]
        day_string[1] = 'U';
 8009a60:	2355      	movs	r3, #85	@ 0x55
 8009a62:	747b      	strb	r3, [r7, #17]
        day_string[2] = 'N';
 8009a64:	234e      	movs	r3, #78	@ 0x4e
 8009a66:	74bb      	strb	r3, [r7, #18]
        day_string[3] = NULL;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	74fb      	strb	r3, [r7, #19]
        day_string[4] = NULL;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	753b      	strb	r3, [r7, #20]
        break;
 8009a70:	e040      	b.n	8009af4 <draw_day+0xe0>
    case 2:
        day_string[0] = 'M';
 8009a72:	234d      	movs	r3, #77	@ 0x4d
 8009a74:	743b      	strb	r3, [r7, #16]
        day_string[1] = 'O';
 8009a76:	234f      	movs	r3, #79	@ 0x4f
 8009a78:	747b      	strb	r3, [r7, #17]
        day_string[2] = 'N';
 8009a7a:	234e      	movs	r3, #78	@ 0x4e
 8009a7c:	74bb      	strb	r3, [r7, #18]
        day_string[3] = NULL;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	74fb      	strb	r3, [r7, #19]
        day_string[4] = NULL;
 8009a82:	2300      	movs	r3, #0
 8009a84:	753b      	strb	r3, [r7, #20]
        break;
 8009a86:	e035      	b.n	8009af4 <draw_day+0xe0>

    case 3:
        day_string[0] = 'T';
 8009a88:	2354      	movs	r3, #84	@ 0x54
 8009a8a:	743b      	strb	r3, [r7, #16]
        day_string[1] = 'U';
 8009a8c:	2355      	movs	r3, #85	@ 0x55
 8009a8e:	747b      	strb	r3, [r7, #17]
        day_string[2] = 'E';
 8009a90:	2345      	movs	r3, #69	@ 0x45
 8009a92:	74bb      	strb	r3, [r7, #18]
        day_string[3] = 'S';
 8009a94:	2353      	movs	r3, #83	@ 0x53
 8009a96:	74fb      	strb	r3, [r7, #19]
        day_string[4] = NULL;
 8009a98:	2300      	movs	r3, #0
 8009a9a:	753b      	strb	r3, [r7, #20]
        break;
 8009a9c:	e02a      	b.n	8009af4 <draw_day+0xe0>

    case 4:
        day_string[0] = 'W';
 8009a9e:	2357      	movs	r3, #87	@ 0x57
 8009aa0:	743b      	strb	r3, [r7, #16]
        day_string[1] = 'E';
 8009aa2:	2345      	movs	r3, #69	@ 0x45
 8009aa4:	747b      	strb	r3, [r7, #17]
        day_string[2] = 'D';
 8009aa6:	2344      	movs	r3, #68	@ 0x44
 8009aa8:	74bb      	strb	r3, [r7, #18]
        day_string[3] = 'N';
 8009aaa:	234e      	movs	r3, #78	@ 0x4e
 8009aac:	74fb      	strb	r3, [r7, #19]
        day_string[4] = NULL;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	753b      	strb	r3, [r7, #20]
        break;
 8009ab2:	e01f      	b.n	8009af4 <draw_day+0xe0>

    case 5:
        day_string[0] = 'T';
 8009ab4:	2354      	movs	r3, #84	@ 0x54
 8009ab6:	743b      	strb	r3, [r7, #16]
        day_string[1] = 'H';
 8009ab8:	2348      	movs	r3, #72	@ 0x48
 8009aba:	747b      	strb	r3, [r7, #17]
        day_string[2] = 'U';
 8009abc:	2355      	movs	r3, #85	@ 0x55
 8009abe:	74bb      	strb	r3, [r7, #18]
        day_string[3] = 'R';
 8009ac0:	2352      	movs	r3, #82	@ 0x52
 8009ac2:	74fb      	strb	r3, [r7, #19]
        break;
 8009ac4:	e016      	b.n	8009af4 <draw_day+0xe0>

    case 6:
        day_string[0] = 'F';
 8009ac6:	2346      	movs	r3, #70	@ 0x46
 8009ac8:	743b      	strb	r3, [r7, #16]
        day_string[1] = 'R';
 8009aca:	2352      	movs	r3, #82	@ 0x52
 8009acc:	747b      	strb	r3, [r7, #17]
        day_string[2] = 'I';
 8009ace:	2349      	movs	r3, #73	@ 0x49
 8009ad0:	74bb      	strb	r3, [r7, #18]
        day_string[3] = NULL;
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	74fb      	strb	r3, [r7, #19]
        day_string[4] = NULL;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	753b      	strb	r3, [r7, #20]
        break;
 8009ada:	e00b      	b.n	8009af4 <draw_day+0xe0>

    case 7:
        day_string[0] = 'S';
 8009adc:	2353      	movs	r3, #83	@ 0x53
 8009ade:	743b      	strb	r3, [r7, #16]
        day_string[1] = 'A';
 8009ae0:	2341      	movs	r3, #65	@ 0x41
 8009ae2:	747b      	strb	r3, [r7, #17]
        day_string[2] = 'T';
 8009ae4:	2354      	movs	r3, #84	@ 0x54
 8009ae6:	74bb      	strb	r3, [r7, #18]
        day_string[3] = NULL;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	74fb      	strb	r3, [r7, #19]
        day_string[4] = NULL;
 8009aec:	2300      	movs	r3, #0
 8009aee:	753b      	strb	r3, [r7, #20]
        break;
 8009af0:	e000      	b.n	8009af4 <draw_day+0xe0>

    default:
        break;
 8009af2:	bf00      	nop
    }

switch (month)
 8009af4:	887b      	ldrh	r3, [r7, #2]
 8009af6:	3b01      	subs	r3, #1
 8009af8:	2b0b      	cmp	r3, #11
 8009afa:	f200 809f 	bhi.w	8009c3c <draw_day+0x228>
 8009afe:	a201      	add	r2, pc, #4	@ (adr r2, 8009b04 <draw_day+0xf0>)
 8009b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b04:	08009b35 	.word	0x08009b35
 8009b08:	08009b4b 	.word	0x08009b4b
 8009b0c:	08009b61 	.word	0x08009b61
 8009b10:	08009b77 	.word	0x08009b77
 8009b14:	08009b8d 	.word	0x08009b8d
 8009b18:	08009ba3 	.word	0x08009ba3
 8009b1c:	08009bb9 	.word	0x08009bb9
 8009b20:	08009bcf 	.word	0x08009bcf
 8009b24:	08009be5 	.word	0x08009be5
 8009b28:	08009bfb 	.word	0x08009bfb
 8009b2c:	08009c11 	.word	0x08009c11
 8009b30:	08009c27 	.word	0x08009c27
    {
    case 1:
        month_string[0] = 'J';
 8009b34:	234a      	movs	r3, #74	@ 0x4a
 8009b36:	723b      	strb	r3, [r7, #8]
        month_string[1] = 'A';
 8009b38:	2341      	movs	r3, #65	@ 0x41
 8009b3a:	727b      	strb	r3, [r7, #9]
        month_string[2] = 'N';
 8009b3c:	234e      	movs	r3, #78	@ 0x4e
 8009b3e:	72bb      	strb	r3, [r7, #10]
        month_string[3] = NULL;
 8009b40:	2300      	movs	r3, #0
 8009b42:	72fb      	strb	r3, [r7, #11]
        month_string[4] = NULL;
 8009b44:	2300      	movs	r3, #0
 8009b46:	733b      	strb	r3, [r7, #12]
        break;
 8009b48:	e079      	b.n	8009c3e <draw_day+0x22a>
    case 2:
        month_string[0] = 'F';
 8009b4a:	2346      	movs	r3, #70	@ 0x46
 8009b4c:	723b      	strb	r3, [r7, #8]
        month_string[1] = 'E';
 8009b4e:	2345      	movs	r3, #69	@ 0x45
 8009b50:	727b      	strb	r3, [r7, #9]
        month_string[2] = 'B';
 8009b52:	2342      	movs	r3, #66	@ 0x42
 8009b54:	72bb      	strb	r3, [r7, #10]
        month_string[3] = NULL;
 8009b56:	2300      	movs	r3, #0
 8009b58:	72fb      	strb	r3, [r7, #11]
        month_string[4] = NULL;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	733b      	strb	r3, [r7, #12]
        break;
 8009b5e:	e06e      	b.n	8009c3e <draw_day+0x22a>

    case 3:
        month_string[0] = 'M';
 8009b60:	234d      	movs	r3, #77	@ 0x4d
 8009b62:	723b      	strb	r3, [r7, #8]
        month_string[1] = 'A';
 8009b64:	2341      	movs	r3, #65	@ 0x41
 8009b66:	727b      	strb	r3, [r7, #9]
        month_string[2] = 'R';
 8009b68:	2352      	movs	r3, #82	@ 0x52
 8009b6a:	72bb      	strb	r3, [r7, #10]
        month_string[3] = NULL;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	72fb      	strb	r3, [r7, #11]
        month_string[4] = NULL;
 8009b70:	2300      	movs	r3, #0
 8009b72:	733b      	strb	r3, [r7, #12]
        break;
 8009b74:	e063      	b.n	8009c3e <draw_day+0x22a>

    case 4:
        month_string[0] = 'A';
 8009b76:	2341      	movs	r3, #65	@ 0x41
 8009b78:	723b      	strb	r3, [r7, #8]
        month_string[1] = 'P';
 8009b7a:	2350      	movs	r3, #80	@ 0x50
 8009b7c:	727b      	strb	r3, [r7, #9]
        month_string[2] = 'I';
 8009b7e:	2349      	movs	r3, #73	@ 0x49
 8009b80:	72bb      	strb	r3, [r7, #10]
        month_string[3] = 'R';
 8009b82:	2352      	movs	r3, #82	@ 0x52
 8009b84:	72fb      	strb	r3, [r7, #11]
        month_string[4] = NULL;
 8009b86:	2300      	movs	r3, #0
 8009b88:	733b      	strb	r3, [r7, #12]
        break;
 8009b8a:	e058      	b.n	8009c3e <draw_day+0x22a>

    case 5:
        month_string[0] = 'M';
 8009b8c:	234d      	movs	r3, #77	@ 0x4d
 8009b8e:	723b      	strb	r3, [r7, #8]
        month_string[1] = 'A';
 8009b90:	2341      	movs	r3, #65	@ 0x41
 8009b92:	727b      	strb	r3, [r7, #9]
        month_string[2] = 'Y';
 8009b94:	2359      	movs	r3, #89	@ 0x59
 8009b96:	72bb      	strb	r3, [r7, #10]
        month_string[3] = NULL;
 8009b98:	2300      	movs	r3, #0
 8009b9a:	72fb      	strb	r3, [r7, #11]
        month_string[4] = NULL;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	733b      	strb	r3, [r7, #12]
        break;
 8009ba0:	e04d      	b.n	8009c3e <draw_day+0x22a>

    case 6:
        month_string[0] = 'J';
 8009ba2:	234a      	movs	r3, #74	@ 0x4a
 8009ba4:	723b      	strb	r3, [r7, #8]
        month_string[1] = 'U';
 8009ba6:	2355      	movs	r3, #85	@ 0x55
 8009ba8:	727b      	strb	r3, [r7, #9]
        month_string[2] = 'N';
 8009baa:	234e      	movs	r3, #78	@ 0x4e
 8009bac:	72bb      	strb	r3, [r7, #10]
        month_string[3] = 'E';
 8009bae:	2345      	movs	r3, #69	@ 0x45
 8009bb0:	72fb      	strb	r3, [r7, #11]
        month_string[4] = NULL;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	733b      	strb	r3, [r7, #12]
        break;
 8009bb6:	e042      	b.n	8009c3e <draw_day+0x22a>

    case 7:
        month_string[0] = 'J';
 8009bb8:	234a      	movs	r3, #74	@ 0x4a
 8009bba:	723b      	strb	r3, [r7, #8]
        month_string[1] = 'U';
 8009bbc:	2355      	movs	r3, #85	@ 0x55
 8009bbe:	727b      	strb	r3, [r7, #9]
        month_string[2] = 'L';
 8009bc0:	234c      	movs	r3, #76	@ 0x4c
 8009bc2:	72bb      	strb	r3, [r7, #10]
        month_string[3] = 'Y';
 8009bc4:	2359      	movs	r3, #89	@ 0x59
 8009bc6:	72fb      	strb	r3, [r7, #11]
        month_string[4] = NULL;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	733b      	strb	r3, [r7, #12]
        break;
 8009bcc:	e037      	b.n	8009c3e <draw_day+0x22a>

    case 8:
        month_string[0] = 'A';
 8009bce:	2341      	movs	r3, #65	@ 0x41
 8009bd0:	723b      	strb	r3, [r7, #8]
        month_string[1] = 'U';
 8009bd2:	2355      	movs	r3, #85	@ 0x55
 8009bd4:	727b      	strb	r3, [r7, #9]
        month_string[2] = 'G';
 8009bd6:	2347      	movs	r3, #71	@ 0x47
 8009bd8:	72bb      	strb	r3, [r7, #10]
        month_string[3] = NULL;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	72fb      	strb	r3, [r7, #11]
        month_string[4] = NULL;
 8009bde:	2300      	movs	r3, #0
 8009be0:	733b      	strb	r3, [r7, #12]
        break;
 8009be2:	e02c      	b.n	8009c3e <draw_day+0x22a>

    case 9:
        month_string[0] = 'S';
 8009be4:	2353      	movs	r3, #83	@ 0x53
 8009be6:	723b      	strb	r3, [r7, #8]
        month_string[1] = 'E';
 8009be8:	2345      	movs	r3, #69	@ 0x45
 8009bea:	727b      	strb	r3, [r7, #9]
        month_string[2] = 'P';
 8009bec:	2350      	movs	r3, #80	@ 0x50
 8009bee:	72bb      	strb	r3, [r7, #10]
        month_string[3] = 'T';
 8009bf0:	2354      	movs	r3, #84	@ 0x54
 8009bf2:	72fb      	strb	r3, [r7, #11]
        month_string[4] = NULL;
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	733b      	strb	r3, [r7, #12]
        break;
 8009bf8:	e021      	b.n	8009c3e <draw_day+0x22a>
    case 10:
        month_string[0] = 'O';
 8009bfa:	234f      	movs	r3, #79	@ 0x4f
 8009bfc:	723b      	strb	r3, [r7, #8]
        month_string[1] = 'C';
 8009bfe:	2343      	movs	r3, #67	@ 0x43
 8009c00:	727b      	strb	r3, [r7, #9]
        month_string[2] = 'T';
 8009c02:	2354      	movs	r3, #84	@ 0x54
 8009c04:	72bb      	strb	r3, [r7, #10]
        month_string[3] = NULL;
 8009c06:	2300      	movs	r3, #0
 8009c08:	72fb      	strb	r3, [r7, #11]
        month_string[4] = NULL;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	733b      	strb	r3, [r7, #12]
        break;
 8009c0e:	e016      	b.n	8009c3e <draw_day+0x22a>

    case 11:
        month_string[0] = 'N';
 8009c10:	234e      	movs	r3, #78	@ 0x4e
 8009c12:	723b      	strb	r3, [r7, #8]
        month_string[1] = 'O';
 8009c14:	234f      	movs	r3, #79	@ 0x4f
 8009c16:	727b      	strb	r3, [r7, #9]
        month_string[2] = 'V';
 8009c18:	2356      	movs	r3, #86	@ 0x56
 8009c1a:	72bb      	strb	r3, [r7, #10]
        month_string[3] = NULL;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	72fb      	strb	r3, [r7, #11]
        month_string[4] = NULL;
 8009c20:	2300      	movs	r3, #0
 8009c22:	733b      	strb	r3, [r7, #12]
        break;
 8009c24:	e00b      	b.n	8009c3e <draw_day+0x22a>

    case 12:
        month_string[0] = 'D';
 8009c26:	2344      	movs	r3, #68	@ 0x44
 8009c28:	723b      	strb	r3, [r7, #8]
        month_string[1] = 'E';
 8009c2a:	2345      	movs	r3, #69	@ 0x45
 8009c2c:	727b      	strb	r3, [r7, #9]
        month_string[2] = 'C';
 8009c2e:	2343      	movs	r3, #67	@ 0x43
 8009c30:	72bb      	strb	r3, [r7, #10]
        month_string[3] = NULL;
 8009c32:	2300      	movs	r3, #0
 8009c34:	72fb      	strb	r3, [r7, #11]
        month_string[4] = NULL;
 8009c36:	2300      	movs	r3, #0
 8009c38:	733b      	strb	r3, [r7, #12]
        break;
 8009c3a:	e000      	b.n	8009c3e <draw_day+0x22a>
    default:
        break;
 8009c3c:	bf00      	nop
    }




    Paint_DrawString_EN(80, 100, &day_string[0], &Font16, BLACK, WHITE);
 8009c3e:	f107 0210 	add.w	r2, r7, #16
 8009c42:	23ff      	movs	r3, #255	@ 0xff
 8009c44:	9301      	str	r3, [sp, #4]
 8009c46:	2300      	movs	r3, #0
 8009c48:	9300      	str	r3, [sp, #0]
 8009c4a:	4b2f      	ldr	r3, [pc, #188]	@ (8009d08 <draw_day+0x2f4>)
 8009c4c:	2164      	movs	r1, #100	@ 0x64
 8009c4e:	2050      	movs	r0, #80	@ 0x50
 8009c50:	f000 feb6 	bl	800a9c0 <Paint_DrawString_EN>
    Paint_DrawString_EN(130, 100, &month_string[0], &Font16, BLACK, WHITE);
 8009c54:	f107 0208 	add.w	r2, r7, #8
 8009c58:	23ff      	movs	r3, #255	@ 0xff
 8009c5a:	9301      	str	r3, [sp, #4]
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	9300      	str	r3, [sp, #0]
 8009c60:	4b29      	ldr	r3, [pc, #164]	@ (8009d08 <draw_day+0x2f4>)
 8009c62:	2164      	movs	r1, #100	@ 0x64
 8009c64:	2082      	movs	r0, #130	@ 0x82
 8009c66:	f000 feab 	bl	800a9c0 <Paint_DrawString_EN>
    Paint_DrawNum(180, 100, date / 10, &Font16, WHITE, BLACK);
 8009c6a:	88bb      	ldrh	r3, [r7, #4]
 8009c6c:	4a27      	ldr	r2, [pc, #156]	@ (8009d0c <draw_day+0x2f8>)
 8009c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8009c72:	08db      	lsrs	r3, r3, #3
 8009c74:	b29b      	uxth	r3, r3
 8009c76:	461a      	mov	r2, r3
 8009c78:	2300      	movs	r3, #0
 8009c7a:	9301      	str	r3, [sp, #4]
 8009c7c:	23ff      	movs	r3, #255	@ 0xff
 8009c7e:	9300      	str	r3, [sp, #0]
 8009c80:	4b21      	ldr	r3, [pc, #132]	@ (8009d08 <draw_day+0x2f4>)
 8009c82:	2164      	movs	r1, #100	@ 0x64
 8009c84:	20b4      	movs	r0, #180	@ 0xb4
 8009c86:	f000 feef 	bl	800aa68 <Paint_DrawNum>
    Paint_DrawNum(190, 100, date % 10, &Font16, WHITE, BLACK);
 8009c8a:	88ba      	ldrh	r2, [r7, #4]
 8009c8c:	4b1f      	ldr	r3, [pc, #124]	@ (8009d0c <draw_day+0x2f8>)
 8009c8e:	fba3 1302 	umull	r1, r3, r3, r2
 8009c92:	08d9      	lsrs	r1, r3, #3
 8009c94:	460b      	mov	r3, r1
 8009c96:	009b      	lsls	r3, r3, #2
 8009c98:	440b      	add	r3, r1
 8009c9a:	005b      	lsls	r3, r3, #1
 8009c9c:	1ad3      	subs	r3, r2, r3
 8009c9e:	b29b      	uxth	r3, r3
 8009ca0:	461a      	mov	r2, r3
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	9301      	str	r3, [sp, #4]
 8009ca6:	23ff      	movs	r3, #255	@ 0xff
 8009ca8:	9300      	str	r3, [sp, #0]
 8009caa:	4b17      	ldr	r3, [pc, #92]	@ (8009d08 <draw_day+0x2f4>)
 8009cac:	2164      	movs	r1, #100	@ 0x64
 8009cae:	20be      	movs	r0, #190	@ 0xbe
 8009cb0:	f000 feda 	bl	800aa68 <Paint_DrawNum>
    Paint_DrawNum(210, 100, year / 10, &Font16, WHITE, BLACK);
 8009cb4:	883b      	ldrh	r3, [r7, #0]
 8009cb6:	4a15      	ldr	r2, [pc, #84]	@ (8009d0c <draw_day+0x2f8>)
 8009cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8009cbc:	08db      	lsrs	r3, r3, #3
 8009cbe:	b29b      	uxth	r3, r3
 8009cc0:	461a      	mov	r2, r3
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	9301      	str	r3, [sp, #4]
 8009cc6:	23ff      	movs	r3, #255	@ 0xff
 8009cc8:	9300      	str	r3, [sp, #0]
 8009cca:	4b0f      	ldr	r3, [pc, #60]	@ (8009d08 <draw_day+0x2f4>)
 8009ccc:	2164      	movs	r1, #100	@ 0x64
 8009cce:	20d2      	movs	r0, #210	@ 0xd2
 8009cd0:	f000 feca 	bl	800aa68 <Paint_DrawNum>
    Paint_DrawNum(220, 100, year % 10, &Font16, WHITE, BLACK);
 8009cd4:	883a      	ldrh	r2, [r7, #0]
 8009cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8009d0c <draw_day+0x2f8>)
 8009cd8:	fba3 1302 	umull	r1, r3, r3, r2
 8009cdc:	08d9      	lsrs	r1, r3, #3
 8009cde:	460b      	mov	r3, r1
 8009ce0:	009b      	lsls	r3, r3, #2
 8009ce2:	440b      	add	r3, r1
 8009ce4:	005b      	lsls	r3, r3, #1
 8009ce6:	1ad3      	subs	r3, r2, r3
 8009ce8:	b29b      	uxth	r3, r3
 8009cea:	461a      	mov	r2, r3
 8009cec:	2300      	movs	r3, #0
 8009cee:	9301      	str	r3, [sp, #4]
 8009cf0:	23ff      	movs	r3, #255	@ 0xff
 8009cf2:	9300      	str	r3, [sp, #0]
 8009cf4:	4b04      	ldr	r3, [pc, #16]	@ (8009d08 <draw_day+0x2f4>)
 8009cf6:	2164      	movs	r1, #100	@ 0x64
 8009cf8:	20dc      	movs	r0, #220	@ 0xdc
 8009cfa:	f000 feb5 	bl	800aa68 <Paint_DrawNum>

}
 8009cfe:	bf00      	nop
 8009d00:	371c      	adds	r7, #28
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd90      	pop	{r4, r7, pc}
 8009d06:	bf00      	nop
 8009d08:	20000274 	.word	0x20000274
 8009d0c:	cccccccd 	.word	0xcccccccd

08009d10 <draw_battery>:

void draw_battery(uint16_t battery_percentage)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b086      	sub	sp, #24
 8009d14:	af04      	add	r7, sp, #16
 8009d16:	4603      	mov	r3, r0
 8009d18:	80fb      	strh	r3, [r7, #6]
    Paint_ClearWindows(260, 0, 296, 15 + Font16.Height, WHITE);
 8009d1a:	4ba3      	ldr	r3, [pc, #652]	@ (8009fa8 <draw_battery+0x298>)
 8009d1c:	88db      	ldrh	r3, [r3, #6]
 8009d1e:	330f      	adds	r3, #15
 8009d20:	b29b      	uxth	r3, r3
 8009d22:	22ff      	movs	r2, #255	@ 0xff
 8009d24:	9200      	str	r2, [sp, #0]
 8009d26:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8009d2a:	2100      	movs	r1, #0
 8009d2c:	f44f 7082 	mov.w	r0, #260	@ 0x104
 8009d30:	f000 fb94 	bl	800a45c <Paint_ClearWindows>
    if((battery_percentage < 100) && (battery_percentage > 75))
 8009d34:	88fb      	ldrh	r3, [r7, #6]
 8009d36:	2b63      	cmp	r3, #99	@ 0x63
 8009d38:	d83b      	bhi.n	8009db2 <draw_battery+0xa2>
 8009d3a:	88fb      	ldrh	r3, [r7, #6]
 8009d3c:	2b4b      	cmp	r3, #75	@ 0x4b
 8009d3e:	d938      	bls.n	8009db2 <draw_battery+0xa2>
    {
        Paint_DrawRectangle(260, 2, 265, 10, BLACK, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 8009d40:	2301      	movs	r3, #1
 8009d42:	9302      	str	r3, [sp, #8]
 8009d44:	2301      	movs	r3, #1
 8009d46:	9301      	str	r3, [sp, #4]
 8009d48:	2300      	movs	r3, #0
 8009d4a:	9300      	str	r3, [sp, #0]
 8009d4c:	230a      	movs	r3, #10
 8009d4e:	f240 1209 	movw	r2, #265	@ 0x109
 8009d52:	2102      	movs	r1, #2
 8009d54:	f44f 7082 	mov.w	r0, #260	@ 0x104
 8009d58:	f000 fd06 	bl	800a768 <Paint_DrawRectangle>
        Paint_DrawRectangle(265, 2, 270, 10, BLACK, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	9302      	str	r3, [sp, #8]
 8009d60:	2301      	movs	r3, #1
 8009d62:	9301      	str	r3, [sp, #4]
 8009d64:	2300      	movs	r3, #0
 8009d66:	9300      	str	r3, [sp, #0]
 8009d68:	230a      	movs	r3, #10
 8009d6a:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 8009d6e:	2102      	movs	r1, #2
 8009d70:	f240 1009 	movw	r0, #265	@ 0x109
 8009d74:	f000 fcf8 	bl	800a768 <Paint_DrawRectangle>
        Paint_DrawRectangle(270, 2, 275, 10, BLACK, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 8009d78:	2301      	movs	r3, #1
 8009d7a:	9302      	str	r3, [sp, #8]
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	9301      	str	r3, [sp, #4]
 8009d80:	2300      	movs	r3, #0
 8009d82:	9300      	str	r3, [sp, #0]
 8009d84:	230a      	movs	r3, #10
 8009d86:	f240 1213 	movw	r2, #275	@ 0x113
 8009d8a:	2102      	movs	r1, #2
 8009d8c:	f44f 7087 	mov.w	r0, #270	@ 0x10e
 8009d90:	f000 fcea 	bl	800a768 <Paint_DrawRectangle>
        Paint_DrawRectangle(275, 2, 280, 10, BLACK, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 8009d94:	2301      	movs	r3, #1
 8009d96:	9302      	str	r3, [sp, #8]
 8009d98:	2301      	movs	r3, #1
 8009d9a:	9301      	str	r3, [sp, #4]
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	9300      	str	r3, [sp, #0]
 8009da0:	230a      	movs	r3, #10
 8009da2:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8009da6:	2102      	movs	r1, #2
 8009da8:	f240 1013 	movw	r0, #275	@ 0x113
 8009dac:	f000 fcdc 	bl	800a768 <Paint_DrawRectangle>
 8009db0:	e0f5      	b.n	8009f9e <draw_battery+0x28e>
    }
    else if ((battery_percentage < 75) && (battery_percentage > 50)){
 8009db2:	88fb      	ldrh	r3, [r7, #6]
 8009db4:	2b4a      	cmp	r3, #74	@ 0x4a
 8009db6:	d83b      	bhi.n	8009e30 <draw_battery+0x120>
 8009db8:	88fb      	ldrh	r3, [r7, #6]
 8009dba:	2b32      	cmp	r3, #50	@ 0x32
 8009dbc:	d938      	bls.n	8009e30 <draw_battery+0x120>
        Paint_DrawRectangle(260, 2, 265, 10, BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	9302      	str	r3, [sp, #8]
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	9301      	str	r3, [sp, #4]
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	9300      	str	r3, [sp, #0]
 8009dca:	230a      	movs	r3, #10
 8009dcc:	f240 1209 	movw	r2, #265	@ 0x109
 8009dd0:	2102      	movs	r1, #2
 8009dd2:	f44f 7082 	mov.w	r0, #260	@ 0x104
 8009dd6:	f000 fcc7 	bl	800a768 <Paint_DrawRectangle>
        Paint_DrawRectangle(265, 2, 270, 10, BLACK, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 8009dda:	2301      	movs	r3, #1
 8009ddc:	9302      	str	r3, [sp, #8]
 8009dde:	2301      	movs	r3, #1
 8009de0:	9301      	str	r3, [sp, #4]
 8009de2:	2300      	movs	r3, #0
 8009de4:	9300      	str	r3, [sp, #0]
 8009de6:	230a      	movs	r3, #10
 8009de8:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 8009dec:	2102      	movs	r1, #2
 8009dee:	f240 1009 	movw	r0, #265	@ 0x109
 8009df2:	f000 fcb9 	bl	800a768 <Paint_DrawRectangle>
        Paint_DrawRectangle(270, 2, 275, 10, BLACK, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 8009df6:	2301      	movs	r3, #1
 8009df8:	9302      	str	r3, [sp, #8]
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	9301      	str	r3, [sp, #4]
 8009dfe:	2300      	movs	r3, #0
 8009e00:	9300      	str	r3, [sp, #0]
 8009e02:	230a      	movs	r3, #10
 8009e04:	f240 1213 	movw	r2, #275	@ 0x113
 8009e08:	2102      	movs	r1, #2
 8009e0a:	f44f 7087 	mov.w	r0, #270	@ 0x10e
 8009e0e:	f000 fcab 	bl	800a768 <Paint_DrawRectangle>
        Paint_DrawRectangle(275, 2, 280, 10, BLACK, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 8009e12:	2301      	movs	r3, #1
 8009e14:	9302      	str	r3, [sp, #8]
 8009e16:	2301      	movs	r3, #1
 8009e18:	9301      	str	r3, [sp, #4]
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	9300      	str	r3, [sp, #0]
 8009e1e:	230a      	movs	r3, #10
 8009e20:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8009e24:	2102      	movs	r1, #2
 8009e26:	f240 1013 	movw	r0, #275	@ 0x113
 8009e2a:	f000 fc9d 	bl	800a768 <Paint_DrawRectangle>
 8009e2e:	e0b6      	b.n	8009f9e <draw_battery+0x28e>
    }

    else if ((battery_percentage < 50) && (battery_percentage > 25)){
 8009e30:	88fb      	ldrh	r3, [r7, #6]
 8009e32:	2b31      	cmp	r3, #49	@ 0x31
 8009e34:	d83b      	bhi.n	8009eae <draw_battery+0x19e>
 8009e36:	88fb      	ldrh	r3, [r7, #6]
 8009e38:	2b19      	cmp	r3, #25
 8009e3a:	d938      	bls.n	8009eae <draw_battery+0x19e>
        Paint_DrawRectangle(260, 2, 265, 10, BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	9302      	str	r3, [sp, #8]
 8009e40:	2301      	movs	r3, #1
 8009e42:	9301      	str	r3, [sp, #4]
 8009e44:	2300      	movs	r3, #0
 8009e46:	9300      	str	r3, [sp, #0]
 8009e48:	230a      	movs	r3, #10
 8009e4a:	f240 1209 	movw	r2, #265	@ 0x109
 8009e4e:	2102      	movs	r1, #2
 8009e50:	f44f 7082 	mov.w	r0, #260	@ 0x104
 8009e54:	f000 fc88 	bl	800a768 <Paint_DrawRectangle>
        Paint_DrawRectangle(265, 2, 270, 10, BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 8009e58:	2300      	movs	r3, #0
 8009e5a:	9302      	str	r3, [sp, #8]
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	9301      	str	r3, [sp, #4]
 8009e60:	2300      	movs	r3, #0
 8009e62:	9300      	str	r3, [sp, #0]
 8009e64:	230a      	movs	r3, #10
 8009e66:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 8009e6a:	2102      	movs	r1, #2
 8009e6c:	f240 1009 	movw	r0, #265	@ 0x109
 8009e70:	f000 fc7a 	bl	800a768 <Paint_DrawRectangle>
        Paint_DrawRectangle(270, 2, 275, 10, BLACK, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 8009e74:	2301      	movs	r3, #1
 8009e76:	9302      	str	r3, [sp, #8]
 8009e78:	2301      	movs	r3, #1
 8009e7a:	9301      	str	r3, [sp, #4]
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	9300      	str	r3, [sp, #0]
 8009e80:	230a      	movs	r3, #10
 8009e82:	f240 1213 	movw	r2, #275	@ 0x113
 8009e86:	2102      	movs	r1, #2
 8009e88:	f44f 7087 	mov.w	r0, #270	@ 0x10e
 8009e8c:	f000 fc6c 	bl	800a768 <Paint_DrawRectangle>
        Paint_DrawRectangle(275, 2, 280, 10, BLACK, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 8009e90:	2301      	movs	r3, #1
 8009e92:	9302      	str	r3, [sp, #8]
 8009e94:	2301      	movs	r3, #1
 8009e96:	9301      	str	r3, [sp, #4]
 8009e98:	2300      	movs	r3, #0
 8009e9a:	9300      	str	r3, [sp, #0]
 8009e9c:	230a      	movs	r3, #10
 8009e9e:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8009ea2:	2102      	movs	r1, #2
 8009ea4:	f240 1013 	movw	r0, #275	@ 0x113
 8009ea8:	f000 fc5e 	bl	800a768 <Paint_DrawRectangle>
 8009eac:	e077      	b.n	8009f9e <draw_battery+0x28e>
    }

    else if ((battery_percentage < 25) && (battery_percentage > 5)){
 8009eae:	88fb      	ldrh	r3, [r7, #6]
 8009eb0:	2b18      	cmp	r3, #24
 8009eb2:	d83b      	bhi.n	8009f2c <draw_battery+0x21c>
 8009eb4:	88fb      	ldrh	r3, [r7, #6]
 8009eb6:	2b05      	cmp	r3, #5
 8009eb8:	d938      	bls.n	8009f2c <draw_battery+0x21c>
        Paint_DrawRectangle(260, 2, 265, 10, BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 8009eba:	2300      	movs	r3, #0
 8009ebc:	9302      	str	r3, [sp, #8]
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	9301      	str	r3, [sp, #4]
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	9300      	str	r3, [sp, #0]
 8009ec6:	230a      	movs	r3, #10
 8009ec8:	f240 1209 	movw	r2, #265	@ 0x109
 8009ecc:	2102      	movs	r1, #2
 8009ece:	f44f 7082 	mov.w	r0, #260	@ 0x104
 8009ed2:	f000 fc49 	bl	800a768 <Paint_DrawRectangle>
        Paint_DrawRectangle(265, 2, 270, 10, BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	9302      	str	r3, [sp, #8]
 8009eda:	2301      	movs	r3, #1
 8009edc:	9301      	str	r3, [sp, #4]
 8009ede:	2300      	movs	r3, #0
 8009ee0:	9300      	str	r3, [sp, #0]
 8009ee2:	230a      	movs	r3, #10
 8009ee4:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 8009ee8:	2102      	movs	r1, #2
 8009eea:	f240 1009 	movw	r0, #265	@ 0x109
 8009eee:	f000 fc3b 	bl	800a768 <Paint_DrawRectangle>
        Paint_DrawRectangle(270, 2, 275, 10, BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	9302      	str	r3, [sp, #8]
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	9301      	str	r3, [sp, #4]
 8009efa:	2300      	movs	r3, #0
 8009efc:	9300      	str	r3, [sp, #0]
 8009efe:	230a      	movs	r3, #10
 8009f00:	f240 1213 	movw	r2, #275	@ 0x113
 8009f04:	2102      	movs	r1, #2
 8009f06:	f44f 7087 	mov.w	r0, #270	@ 0x10e
 8009f0a:	f000 fc2d 	bl	800a768 <Paint_DrawRectangle>
        Paint_DrawRectangle(275, 2, 280, 10, BLACK, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 8009f0e:	2301      	movs	r3, #1
 8009f10:	9302      	str	r3, [sp, #8]
 8009f12:	2301      	movs	r3, #1
 8009f14:	9301      	str	r3, [sp, #4]
 8009f16:	2300      	movs	r3, #0
 8009f18:	9300      	str	r3, [sp, #0]
 8009f1a:	230a      	movs	r3, #10
 8009f1c:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8009f20:	2102      	movs	r1, #2
 8009f22:	f240 1013 	movw	r0, #275	@ 0x113
 8009f26:	f000 fc1f 	bl	800a768 <Paint_DrawRectangle>
 8009f2a:	e038      	b.n	8009f9e <draw_battery+0x28e>
    }

    else
    {
        Paint_DrawRectangle(260, 2, 265, 10, BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	9302      	str	r3, [sp, #8]
 8009f30:	2301      	movs	r3, #1
 8009f32:	9301      	str	r3, [sp, #4]
 8009f34:	2300      	movs	r3, #0
 8009f36:	9300      	str	r3, [sp, #0]
 8009f38:	230a      	movs	r3, #10
 8009f3a:	f240 1209 	movw	r2, #265	@ 0x109
 8009f3e:	2102      	movs	r1, #2
 8009f40:	f44f 7082 	mov.w	r0, #260	@ 0x104
 8009f44:	f000 fc10 	bl	800a768 <Paint_DrawRectangle>
        Paint_DrawRectangle(265, 2, 270, 10, BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 8009f48:	2300      	movs	r3, #0
 8009f4a:	9302      	str	r3, [sp, #8]
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	9301      	str	r3, [sp, #4]
 8009f50:	2300      	movs	r3, #0
 8009f52:	9300      	str	r3, [sp, #0]
 8009f54:	230a      	movs	r3, #10
 8009f56:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 8009f5a:	2102      	movs	r1, #2
 8009f5c:	f240 1009 	movw	r0, #265	@ 0x109
 8009f60:	f000 fc02 	bl	800a768 <Paint_DrawRectangle>
        Paint_DrawRectangle(270, 2, 275, 10, BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 8009f64:	2300      	movs	r3, #0
 8009f66:	9302      	str	r3, [sp, #8]
 8009f68:	2301      	movs	r3, #1
 8009f6a:	9301      	str	r3, [sp, #4]
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	9300      	str	r3, [sp, #0]
 8009f70:	230a      	movs	r3, #10
 8009f72:	f240 1213 	movw	r2, #275	@ 0x113
 8009f76:	2102      	movs	r1, #2
 8009f78:	f44f 7087 	mov.w	r0, #270	@ 0x10e
 8009f7c:	f000 fbf4 	bl	800a768 <Paint_DrawRectangle>
        Paint_DrawRectangle(275, 2, 280, 10, BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 8009f80:	2300      	movs	r3, #0
 8009f82:	9302      	str	r3, [sp, #8]
 8009f84:	2301      	movs	r3, #1
 8009f86:	9301      	str	r3, [sp, #4]
 8009f88:	2300      	movs	r3, #0
 8009f8a:	9300      	str	r3, [sp, #0]
 8009f8c:	230a      	movs	r3, #10
 8009f8e:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8009f92:	2102      	movs	r1, #2
 8009f94:	f240 1013 	movw	r0, #275	@ 0x113
 8009f98:	f000 fbe6 	bl	800a768 <Paint_DrawRectangle>
    }
 8009f9c:	bf00      	nop
 8009f9e:	bf00      	nop
 8009fa0:	3708      	adds	r7, #8
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}
 8009fa6:	bf00      	nop
 8009fa8:	20000274 	.word	0x20000274

08009fac <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UBYTE *image, UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 8009fac:	b480      	push	{r7}
 8009fae:	b085      	sub	sp, #20
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	60f8      	str	r0, [r7, #12]
 8009fb4:	4608      	mov	r0, r1
 8009fb6:	4611      	mov	r1, r2
 8009fb8:	461a      	mov	r2, r3
 8009fba:	4603      	mov	r3, r0
 8009fbc:	817b      	strh	r3, [r7, #10]
 8009fbe:	460b      	mov	r3, r1
 8009fc0:	813b      	strh	r3, [r7, #8]
 8009fc2:	4613      	mov	r3, r2
 8009fc4:	80fb      	strh	r3, [r7, #6]
    Paint.Image = NULL;
 8009fc6:	4b22      	ldr	r3, [pc, #136]	@ (800a050 <Paint_NewImage+0xa4>)
 8009fc8:	2200      	movs	r2, #0
 8009fca:	601a      	str	r2, [r3, #0]
    Paint.Image = image;
 8009fcc:	4a20      	ldr	r2, [pc, #128]	@ (800a050 <Paint_NewImage+0xa4>)
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	6013      	str	r3, [r2, #0]

    Paint.WidthMemory = Width;
 8009fd2:	4a1f      	ldr	r2, [pc, #124]	@ (800a050 <Paint_NewImage+0xa4>)
 8009fd4:	897b      	ldrh	r3, [r7, #10]
 8009fd6:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 8009fd8:	4a1d      	ldr	r2, [pc, #116]	@ (800a050 <Paint_NewImage+0xa4>)
 8009fda:	893b      	ldrh	r3, [r7, #8]
 8009fdc:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 8009fde:	4a1c      	ldr	r2, [pc, #112]	@ (800a050 <Paint_NewImage+0xa4>)
 8009fe0:	8b3b      	ldrh	r3, [r7, #24]
 8009fe2:	8193      	strh	r3, [r2, #12]
	Paint.Scale = 2;
 8009fe4:	4b1a      	ldr	r3, [pc, #104]	@ (800a050 <Paint_NewImage+0xa4>)
 8009fe6:	2202      	movs	r2, #2
 8009fe8:	82da      	strh	r2, [r3, #22]
		
    Paint.WidthByte = (Width % 8 == 0)? (Width / 8 ): (Width / 8 + 1);
 8009fea:	897b      	ldrh	r3, [r7, #10]
 8009fec:	f003 0307 	and.w	r3, r3, #7
 8009ff0:	b29b      	uxth	r3, r3
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d103      	bne.n	8009ffe <Paint_NewImage+0x52>
 8009ff6:	897b      	ldrh	r3, [r7, #10]
 8009ff8:	08db      	lsrs	r3, r3, #3
 8009ffa:	b29b      	uxth	r3, r3
 8009ffc:	e004      	b.n	800a008 <Paint_NewImage+0x5c>
 8009ffe:	897b      	ldrh	r3, [r7, #10]
 800a000:	08db      	lsrs	r3, r3, #3
 800a002:	b29b      	uxth	r3, r3
 800a004:	3301      	adds	r3, #1
 800a006:	b29b      	uxth	r3, r3
 800a008:	4a11      	ldr	r2, [pc, #68]	@ (800a050 <Paint_NewImage+0xa4>)
 800a00a:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 800a00c:	4a10      	ldr	r2, [pc, #64]	@ (800a050 <Paint_NewImage+0xa4>)
 800a00e:	893b      	ldrh	r3, [r7, #8]
 800a010:	8293      	strh	r3, [r2, #20]
//    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
//    printf(" EPD_WIDTH / 8 = %d\r\n",  122 / 8);
   
    Paint.Rotate = Rotate;
 800a012:	4a0f      	ldr	r2, [pc, #60]	@ (800a050 <Paint_NewImage+0xa4>)
 800a014:	88fb      	ldrh	r3, [r7, #6]
 800a016:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 800a018:	4b0d      	ldr	r3, [pc, #52]	@ (800a050 <Paint_NewImage+0xa4>)
 800a01a:	2200      	movs	r2, #0
 800a01c:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 800a01e:	88fb      	ldrh	r3, [r7, #6]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d002      	beq.n	800a02a <Paint_NewImage+0x7e>
 800a024:	88fb      	ldrh	r3, [r7, #6]
 800a026:	2bb4      	cmp	r3, #180	@ 0xb4
 800a028:	d106      	bne.n	800a038 <Paint_NewImage+0x8c>
        Paint.Width = Width;
 800a02a:	4a09      	ldr	r2, [pc, #36]	@ (800a050 <Paint_NewImage+0xa4>)
 800a02c:	897b      	ldrh	r3, [r7, #10]
 800a02e:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 800a030:	4a07      	ldr	r2, [pc, #28]	@ (800a050 <Paint_NewImage+0xa4>)
 800a032:	893b      	ldrh	r3, [r7, #8]
 800a034:	80d3      	strh	r3, [r2, #6]
 800a036:	e006      	b.n	800a046 <Paint_NewImage+0x9a>
    } else {
        Paint.Width = Height;
 800a038:	4a05      	ldr	r2, [pc, #20]	@ (800a050 <Paint_NewImage+0xa4>)
 800a03a:	893b      	ldrh	r3, [r7, #8]
 800a03c:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 800a03e:	4a04      	ldr	r2, [pc, #16]	@ (800a050 <Paint_NewImage+0xa4>)
 800a040:	897b      	ldrh	r3, [r7, #10]
 800a042:	80d3      	strh	r3, [r2, #6]
    }
}
 800a044:	bf00      	nop
 800a046:	bf00      	nop
 800a048:	3714      	adds	r7, #20
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bc80      	pop	{r7}
 800a04e:	4770      	bx	lr
 800a050:	20000558 	.word	0x20000558

0800a054 <Paint_SelectImage>:
function: Select Image
parameter:
    image : Pointer to the image cache
******************************************************************************/
void Paint_SelectImage(UBYTE *image)
{
 800a054:	b480      	push	{r7}
 800a056:	b083      	sub	sp, #12
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
    Paint.Image = image;
 800a05c:	4a03      	ldr	r2, [pc, #12]	@ (800a06c <Paint_SelectImage+0x18>)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6013      	str	r3, [r2, #0]
}
 800a062:	bf00      	nop
 800a064:	370c      	adds	r7, #12
 800a066:	46bd      	mov	sp, r7
 800a068:	bc80      	pop	{r7}
 800a06a:	4770      	bx	lr
 800a06c:	20000558 	.word	0x20000558

0800a070 <Paint_SetPixel>:
    Xpoint : At point X
    Ypoint : At point Y
    Color  : Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b08a      	sub	sp, #40	@ 0x28
 800a074:	af00      	add	r7, sp, #0
 800a076:	4603      	mov	r3, r0
 800a078:	80fb      	strh	r3, [r7, #6]
 800a07a:	460b      	mov	r3, r1
 800a07c:	80bb      	strh	r3, [r7, #4]
 800a07e:	4613      	mov	r3, r2
 800a080:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 800a082:	4ba0      	ldr	r3, [pc, #640]	@ (800a304 <Paint_SetPixel+0x294>)
 800a084:	889b      	ldrh	r3, [r3, #4]
 800a086:	88fa      	ldrh	r2, [r7, #6]
 800a088:	429a      	cmp	r2, r3
 800a08a:	d804      	bhi.n	800a096 <Paint_SetPixel+0x26>
 800a08c:	4b9d      	ldr	r3, [pc, #628]	@ (800a304 <Paint_SetPixel+0x294>)
 800a08e:	88db      	ldrh	r3, [r3, #6]
 800a090:	88ba      	ldrh	r2, [r7, #4]
 800a092:	429a      	cmp	r2, r3
 800a094:	d903      	bls.n	800a09e <Paint_SetPixel+0x2e>
        Debug("Exceeding display boundaries\r\n");
 800a096:	489c      	ldr	r0, [pc, #624]	@ (800a308 <Paint_SetPixel+0x298>)
 800a098:	f001 f896 	bl	800b1c8 <puts>
        return;
 800a09c:	e12e      	b.n	800a2fc <Paint_SetPixel+0x28c>
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 800a09e:	4b99      	ldr	r3, [pc, #612]	@ (800a304 <Paint_SetPixel+0x294>)
 800a0a0:	89db      	ldrh	r3, [r3, #14]
 800a0a2:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800a0a6:	d02b      	beq.n	800a100 <Paint_SetPixel+0x90>
 800a0a8:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800a0ac:	f300 8123 	bgt.w	800a2f6 <Paint_SetPixel+0x286>
 800a0b0:	2bb4      	cmp	r3, #180	@ 0xb4
 800a0b2:	d016      	beq.n	800a0e2 <Paint_SetPixel+0x72>
 800a0b4:	2bb4      	cmp	r3, #180	@ 0xb4
 800a0b6:	f300 811e 	bgt.w	800a2f6 <Paint_SetPixel+0x286>
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d002      	beq.n	800a0c4 <Paint_SetPixel+0x54>
 800a0be:	2b5a      	cmp	r3, #90	@ 0x5a
 800a0c0:	d005      	beq.n	800a0ce <Paint_SetPixel+0x5e>
    case 270:
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;
    default:
        return;
 800a0c2:	e118      	b.n	800a2f6 <Paint_SetPixel+0x286>
        X = Xpoint;
 800a0c4:	88fb      	ldrh	r3, [r7, #6]
 800a0c6:	84fb      	strh	r3, [r7, #38]	@ 0x26
        Y = Ypoint;  
 800a0c8:	88bb      	ldrh	r3, [r7, #4]
 800a0ca:	84bb      	strh	r3, [r7, #36]	@ 0x24
        break;
 800a0cc:	e022      	b.n	800a114 <Paint_SetPixel+0xa4>
        X = Paint.WidthMemory - Ypoint - 1;
 800a0ce:	4b8d      	ldr	r3, [pc, #564]	@ (800a304 <Paint_SetPixel+0x294>)
 800a0d0:	891a      	ldrh	r2, [r3, #8]
 800a0d2:	88bb      	ldrh	r3, [r7, #4]
 800a0d4:	1ad3      	subs	r3, r2, r3
 800a0d6:	b29b      	uxth	r3, r3
 800a0d8:	3b01      	subs	r3, #1
 800a0da:	84fb      	strh	r3, [r7, #38]	@ 0x26
        Y = Xpoint;
 800a0dc:	88fb      	ldrh	r3, [r7, #6]
 800a0de:	84bb      	strh	r3, [r7, #36]	@ 0x24
        break;
 800a0e0:	e018      	b.n	800a114 <Paint_SetPixel+0xa4>
        X = Paint.WidthMemory - Xpoint - 1;
 800a0e2:	4b88      	ldr	r3, [pc, #544]	@ (800a304 <Paint_SetPixel+0x294>)
 800a0e4:	891a      	ldrh	r2, [r3, #8]
 800a0e6:	88fb      	ldrh	r3, [r7, #6]
 800a0e8:	1ad3      	subs	r3, r2, r3
 800a0ea:	b29b      	uxth	r3, r3
 800a0ec:	3b01      	subs	r3, #1
 800a0ee:	84fb      	strh	r3, [r7, #38]	@ 0x26
        Y = Paint.HeightMemory - Ypoint - 1;
 800a0f0:	4b84      	ldr	r3, [pc, #528]	@ (800a304 <Paint_SetPixel+0x294>)
 800a0f2:	895a      	ldrh	r2, [r3, #10]
 800a0f4:	88bb      	ldrh	r3, [r7, #4]
 800a0f6:	1ad3      	subs	r3, r2, r3
 800a0f8:	b29b      	uxth	r3, r3
 800a0fa:	3b01      	subs	r3, #1
 800a0fc:	84bb      	strh	r3, [r7, #36]	@ 0x24
        break;
 800a0fe:	e009      	b.n	800a114 <Paint_SetPixel+0xa4>
        X = Ypoint;
 800a100:	88bb      	ldrh	r3, [r7, #4]
 800a102:	84fb      	strh	r3, [r7, #38]	@ 0x26
        Y = Paint.HeightMemory - Xpoint - 1;
 800a104:	4b7f      	ldr	r3, [pc, #508]	@ (800a304 <Paint_SetPixel+0x294>)
 800a106:	895a      	ldrh	r2, [r3, #10]
 800a108:	88fb      	ldrh	r3, [r7, #6]
 800a10a:	1ad3      	subs	r3, r2, r3
 800a10c:	b29b      	uxth	r3, r3
 800a10e:	3b01      	subs	r3, #1
 800a110:	84bb      	strh	r3, [r7, #36]	@ 0x24
        break;
 800a112:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 800a114:	4b7b      	ldr	r3, [pc, #492]	@ (800a304 <Paint_SetPixel+0x294>)
 800a116:	8a1b      	ldrh	r3, [r3, #16]
 800a118:	2b03      	cmp	r3, #3
 800a11a:	f200 80ee 	bhi.w	800a2fa <Paint_SetPixel+0x28a>
 800a11e:	a201      	add	r2, pc, #4	@ (adr r2, 800a124 <Paint_SetPixel+0xb4>)
 800a120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a124:	0800a173 	.word	0x0800a173
 800a128:	0800a135 	.word	0x0800a135
 800a12c:	0800a145 	.word	0x0800a145
 800a130:	0800a155 	.word	0x0800a155
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 800a134:	4b73      	ldr	r3, [pc, #460]	@ (800a304 <Paint_SetPixel+0x294>)
 800a136:	891a      	ldrh	r2, [r3, #8]
 800a138:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a13a:	1ad3      	subs	r3, r2, r3
 800a13c:	b29b      	uxth	r3, r3
 800a13e:	3b01      	subs	r3, #1
 800a140:	84fb      	strh	r3, [r7, #38]	@ 0x26
        break;
 800a142:	e017      	b.n	800a174 <Paint_SetPixel+0x104>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 800a144:	4b6f      	ldr	r3, [pc, #444]	@ (800a304 <Paint_SetPixel+0x294>)
 800a146:	895a      	ldrh	r2, [r3, #10]
 800a148:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a14a:	1ad3      	subs	r3, r2, r3
 800a14c:	b29b      	uxth	r3, r3
 800a14e:	3b01      	subs	r3, #1
 800a150:	84bb      	strh	r3, [r7, #36]	@ 0x24
        break;
 800a152:	e00f      	b.n	800a174 <Paint_SetPixel+0x104>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 800a154:	4b6b      	ldr	r3, [pc, #428]	@ (800a304 <Paint_SetPixel+0x294>)
 800a156:	891a      	ldrh	r2, [r3, #8]
 800a158:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a15a:	1ad3      	subs	r3, r2, r3
 800a15c:	b29b      	uxth	r3, r3
 800a15e:	3b01      	subs	r3, #1
 800a160:	84fb      	strh	r3, [r7, #38]	@ 0x26
        Y = Paint.HeightMemory - Y - 1;
 800a162:	4b68      	ldr	r3, [pc, #416]	@ (800a304 <Paint_SetPixel+0x294>)
 800a164:	895a      	ldrh	r2, [r3, #10]
 800a166:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a168:	1ad3      	subs	r3, r2, r3
 800a16a:	b29b      	uxth	r3, r3
 800a16c:	3b01      	subs	r3, #1
 800a16e:	84bb      	strh	r3, [r7, #36]	@ 0x24
        break;
 800a170:	e000      	b.n	800a174 <Paint_SetPixel+0x104>
        break;
 800a172:	bf00      	nop
    default:
        return;
    }

    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 800a174:	4b63      	ldr	r3, [pc, #396]	@ (800a304 <Paint_SetPixel+0x294>)
 800a176:	891b      	ldrh	r3, [r3, #8]
 800a178:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800a17a:	429a      	cmp	r2, r3
 800a17c:	d804      	bhi.n	800a188 <Paint_SetPixel+0x118>
 800a17e:	4b61      	ldr	r3, [pc, #388]	@ (800a304 <Paint_SetPixel+0x294>)
 800a180:	895b      	ldrh	r3, [r3, #10]
 800a182:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a184:	429a      	cmp	r2, r3
 800a186:	d903      	bls.n	800a190 <Paint_SetPixel+0x120>
        Debug("Exceeding display boundaries\r\n");
 800a188:	485f      	ldr	r0, [pc, #380]	@ (800a308 <Paint_SetPixel+0x298>)
 800a18a:	f001 f81d 	bl	800b1c8 <puts>
        return;
 800a18e:	e0b5      	b.n	800a2fc <Paint_SetPixel+0x28c>
    }
    
    if(Paint.Scale == 2){
 800a190:	4b5c      	ldr	r3, [pc, #368]	@ (800a304 <Paint_SetPixel+0x294>)
 800a192:	8adb      	ldrh	r3, [r3, #22]
 800a194:	2b02      	cmp	r3, #2
 800a196:	d138      	bne.n	800a20a <Paint_SetPixel+0x19a>
        UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
 800a198:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a19a:	08db      	lsrs	r3, r3, #3
 800a19c:	b29b      	uxth	r3, r3
 800a19e:	4619      	mov	r1, r3
 800a1a0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a1a2:	4a58      	ldr	r2, [pc, #352]	@ (800a304 <Paint_SetPixel+0x294>)
 800a1a4:	8a52      	ldrh	r2, [r2, #18]
 800a1a6:	fb02 f303 	mul.w	r3, r2, r3
 800a1aa:	440b      	add	r3, r1
 800a1ac:	613b      	str	r3, [r7, #16]
        UBYTE Rdata = Paint.Image[Addr];
 800a1ae:	4b55      	ldr	r3, [pc, #340]	@ (800a304 <Paint_SetPixel+0x294>)
 800a1b0:	681a      	ldr	r2, [r3, #0]
 800a1b2:	693b      	ldr	r3, [r7, #16]
 800a1b4:	4413      	add	r3, r2
 800a1b6:	781b      	ldrb	r3, [r3, #0]
 800a1b8:	73fb      	strb	r3, [r7, #15]
        if(Color == BLACK)
 800a1ba:	887b      	ldrh	r3, [r7, #2]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d112      	bne.n	800a1e6 <Paint_SetPixel+0x176>
            Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 800a1c0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a1c2:	f003 0307 	and.w	r3, r3, #7
 800a1c6:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800a1ca:	fa42 f303 	asr.w	r3, r2, r3
 800a1ce:	b25a      	sxtb	r2, r3
 800a1d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a1d4:	4013      	ands	r3, r2
 800a1d6:	b259      	sxtb	r1, r3
 800a1d8:	4b4a      	ldr	r3, [pc, #296]	@ (800a304 <Paint_SetPixel+0x294>)
 800a1da:	681a      	ldr	r2, [r3, #0]
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	4413      	add	r3, r2
 800a1e0:	b2ca      	uxtb	r2, r1
 800a1e2:	701a      	strb	r2, [r3, #0]
 800a1e4:	e08a      	b.n	800a2fc <Paint_SetPixel+0x28c>
        else
            Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
 800a1e6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a1e8:	f003 0307 	and.w	r3, r3, #7
 800a1ec:	2280      	movs	r2, #128	@ 0x80
 800a1ee:	fa42 f303 	asr.w	r3, r2, r3
 800a1f2:	b25a      	sxtb	r2, r3
 800a1f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a1f8:	4313      	orrs	r3, r2
 800a1fa:	b259      	sxtb	r1, r3
 800a1fc:	4b41      	ldr	r3, [pc, #260]	@ (800a304 <Paint_SetPixel+0x294>)
 800a1fe:	681a      	ldr	r2, [r3, #0]
 800a200:	693b      	ldr	r3, [r7, #16]
 800a202:	4413      	add	r3, r2
 800a204:	b2ca      	uxtb	r2, r1
 800a206:	701a      	strb	r2, [r3, #0]
 800a208:	e078      	b.n	800a2fc <Paint_SetPixel+0x28c>
    }else if(Paint.Scale == 4){
 800a20a:	4b3e      	ldr	r3, [pc, #248]	@ (800a304 <Paint_SetPixel+0x294>)
 800a20c:	8adb      	ldrh	r3, [r3, #22]
 800a20e:	2b04      	cmp	r3, #4
 800a210:	d136      	bne.n	800a280 <Paint_SetPixel+0x210>
        UDOUBLE Addr = X / 4 + Y * Paint.WidthByte;
 800a212:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a214:	089b      	lsrs	r3, r3, #2
 800a216:	b29b      	uxth	r3, r3
 800a218:	4619      	mov	r1, r3
 800a21a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a21c:	4a39      	ldr	r2, [pc, #228]	@ (800a304 <Paint_SetPixel+0x294>)
 800a21e:	8a52      	ldrh	r2, [r2, #18]
 800a220:	fb02 f303 	mul.w	r3, r2, r3
 800a224:	440b      	add	r3, r1
 800a226:	61bb      	str	r3, [r7, #24]
        Color = Color % 4;//Guaranteed color scale is 4  --- 0~3
 800a228:	887b      	ldrh	r3, [r7, #2]
 800a22a:	f003 0303 	and.w	r3, r3, #3
 800a22e:	807b      	strh	r3, [r7, #2]
        UBYTE Rdata = Paint.Image[Addr];
 800a230:	4b34      	ldr	r3, [pc, #208]	@ (800a304 <Paint_SetPixel+0x294>)
 800a232:	681a      	ldr	r2, [r3, #0]
 800a234:	69bb      	ldr	r3, [r7, #24]
 800a236:	4413      	add	r3, r2
 800a238:	781b      	ldrb	r3, [r3, #0]
 800a23a:	75fb      	strb	r3, [r7, #23]
        
        Rdata = Rdata & (~(0xC0 >> ((X % 4)*2)));
 800a23c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a23e:	f003 0303 	and.w	r3, r3, #3
 800a242:	005b      	lsls	r3, r3, #1
 800a244:	f06f 02c0 	mvn.w	r2, #192	@ 0xc0
 800a248:	fa42 f303 	asr.w	r3, r2, r3
 800a24c:	b25a      	sxtb	r2, r3
 800a24e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a252:	4013      	ands	r3, r2
 800a254:	b25b      	sxtb	r3, r3
 800a256:	75fb      	strb	r3, [r7, #23]
        Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4)*2));
 800a258:	887b      	ldrh	r3, [r7, #2]
 800a25a:	019a      	lsls	r2, r3, #6
 800a25c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a25e:	f003 0303 	and.w	r3, r3, #3
 800a262:	005b      	lsls	r3, r3, #1
 800a264:	fa42 f303 	asr.w	r3, r2, r3
 800a268:	b25a      	sxtb	r2, r3
 800a26a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a26e:	4313      	orrs	r3, r2
 800a270:	b259      	sxtb	r1, r3
 800a272:	4b24      	ldr	r3, [pc, #144]	@ (800a304 <Paint_SetPixel+0x294>)
 800a274:	681a      	ldr	r2, [r3, #0]
 800a276:	69bb      	ldr	r3, [r7, #24]
 800a278:	4413      	add	r3, r2
 800a27a:	b2ca      	uxtb	r2, r1
 800a27c:	701a      	strb	r2, [r3, #0]
 800a27e:	e03d      	b.n	800a2fc <Paint_SetPixel+0x28c>
    }else if(Paint.Scale == 6 || Paint.Scale == 7){
 800a280:	4b20      	ldr	r3, [pc, #128]	@ (800a304 <Paint_SetPixel+0x294>)
 800a282:	8adb      	ldrh	r3, [r3, #22]
 800a284:	2b06      	cmp	r3, #6
 800a286:	d003      	beq.n	800a290 <Paint_SetPixel+0x220>
 800a288:	4b1e      	ldr	r3, [pc, #120]	@ (800a304 <Paint_SetPixel+0x294>)
 800a28a:	8adb      	ldrh	r3, [r3, #22]
 800a28c:	2b07      	cmp	r3, #7
 800a28e:	d135      	bne.n	800a2fc <Paint_SetPixel+0x28c>
		UDOUBLE Addr = X / 2  + Y * Paint.WidthByte;
 800a290:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a292:	085b      	lsrs	r3, r3, #1
 800a294:	b29b      	uxth	r3, r3
 800a296:	4619      	mov	r1, r3
 800a298:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a29a:	4a1a      	ldr	r2, [pc, #104]	@ (800a304 <Paint_SetPixel+0x294>)
 800a29c:	8a52      	ldrh	r2, [r2, #18]
 800a29e:	fb02 f303 	mul.w	r3, r2, r3
 800a2a2:	440b      	add	r3, r1
 800a2a4:	623b      	str	r3, [r7, #32]
		UBYTE Rdata = Paint.Image[Addr];
 800a2a6:	4b17      	ldr	r3, [pc, #92]	@ (800a304 <Paint_SetPixel+0x294>)
 800a2a8:	681a      	ldr	r2, [r3, #0]
 800a2aa:	6a3b      	ldr	r3, [r7, #32]
 800a2ac:	4413      	add	r3, r2
 800a2ae:	781b      	ldrb	r3, [r3, #0]
 800a2b0:	77fb      	strb	r3, [r7, #31]
		Rdata = Rdata & (~(0xF0 >> ((X % 2)*4)));//Clear first, then set value
 800a2b2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a2b4:	f003 0301 	and.w	r3, r3, #1
 800a2b8:	009b      	lsls	r3, r3, #2
 800a2ba:	f06f 02f0 	mvn.w	r2, #240	@ 0xf0
 800a2be:	fa42 f303 	asr.w	r3, r2, r3
 800a2c2:	b25a      	sxtb	r2, r3
 800a2c4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a2c8:	4013      	ands	r3, r2
 800a2ca:	b25b      	sxtb	r3, r3
 800a2cc:	77fb      	strb	r3, [r7, #31]
		Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2)*4));
 800a2ce:	887b      	ldrh	r3, [r7, #2]
 800a2d0:	011a      	lsls	r2, r3, #4
 800a2d2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a2d4:	f003 0301 	and.w	r3, r3, #1
 800a2d8:	009b      	lsls	r3, r3, #2
 800a2da:	fa42 f303 	asr.w	r3, r2, r3
 800a2de:	b25a      	sxtb	r2, r3
 800a2e0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a2e4:	4313      	orrs	r3, r2
 800a2e6:	b259      	sxtb	r1, r3
 800a2e8:	4b06      	ldr	r3, [pc, #24]	@ (800a304 <Paint_SetPixel+0x294>)
 800a2ea:	681a      	ldr	r2, [r3, #0]
 800a2ec:	6a3b      	ldr	r3, [r7, #32]
 800a2ee:	4413      	add	r3, r2
 800a2f0:	b2ca      	uxtb	r2, r1
 800a2f2:	701a      	strb	r2, [r3, #0]
 800a2f4:	e002      	b.n	800a2fc <Paint_SetPixel+0x28c>
        return;
 800a2f6:	bf00      	nop
 800a2f8:	e000      	b.n	800a2fc <Paint_SetPixel+0x28c>
        return;
 800a2fa:	bf00      	nop
		//printf("Add =  %d ,data = %d\r\n",Addr,Rdata);
		}
}
 800a2fc:	3728      	adds	r7, #40	@ 0x28
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}
 800a302:	bf00      	nop
 800a304:	20000558 	.word	0x20000558
 800a308:	0800bfb0 	.word	0x0800bfb0

0800a30c <Paint_Clear>:
function: Clear the color of the picture
parameter:
    Color : Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{
 800a30c:	b480      	push	{r7}
 800a30e:	b089      	sub	sp, #36	@ 0x24
 800a310:	af00      	add	r7, sp, #0
 800a312:	4603      	mov	r3, r0
 800a314:	80fb      	strh	r3, [r7, #6]
	if(Paint.Scale == 2) {
 800a316:	4b50      	ldr	r3, [pc, #320]	@ (800a458 <Paint_Clear+0x14c>)
 800a318:	8adb      	ldrh	r3, [r3, #22]
 800a31a:	2b02      	cmp	r3, #2
 800a31c:	d125      	bne.n	800a36a <Paint_Clear+0x5e>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 800a31e:	2300      	movs	r3, #0
 800a320:	83fb      	strh	r3, [r7, #30]
 800a322:	e01c      	b.n	800a35e <Paint_Clear+0x52>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 800a324:	2300      	movs	r3, #0
 800a326:	83bb      	strh	r3, [r7, #28]
 800a328:	e011      	b.n	800a34e <Paint_Clear+0x42>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 800a32a:	8bba      	ldrh	r2, [r7, #28]
 800a32c:	8bfb      	ldrh	r3, [r7, #30]
 800a32e:	494a      	ldr	r1, [pc, #296]	@ (800a458 <Paint_Clear+0x14c>)
 800a330:	8a49      	ldrh	r1, [r1, #18]
 800a332:	fb01 f303 	mul.w	r3, r1, r3
 800a336:	4413      	add	r3, r2
 800a338:	60bb      	str	r3, [r7, #8]
				Paint.Image[Addr] = Color;
 800a33a:	4b47      	ldr	r3, [pc, #284]	@ (800a458 <Paint_Clear+0x14c>)
 800a33c:	681a      	ldr	r2, [r3, #0]
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	4413      	add	r3, r2
 800a342:	88fa      	ldrh	r2, [r7, #6]
 800a344:	b2d2      	uxtb	r2, r2
 800a346:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 800a348:	8bbb      	ldrh	r3, [r7, #28]
 800a34a:	3301      	adds	r3, #1
 800a34c:	83bb      	strh	r3, [r7, #28]
 800a34e:	4b42      	ldr	r3, [pc, #264]	@ (800a458 <Paint_Clear+0x14c>)
 800a350:	8a5b      	ldrh	r3, [r3, #18]
 800a352:	8bba      	ldrh	r2, [r7, #28]
 800a354:	429a      	cmp	r2, r3
 800a356:	d3e8      	bcc.n	800a32a <Paint_Clear+0x1e>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 800a358:	8bfb      	ldrh	r3, [r7, #30]
 800a35a:	3301      	adds	r3, #1
 800a35c:	83fb      	strh	r3, [r7, #30]
 800a35e:	4b3e      	ldr	r3, [pc, #248]	@ (800a458 <Paint_Clear+0x14c>)
 800a360:	8a9b      	ldrh	r3, [r3, #20]
 800a362:	8bfa      	ldrh	r2, [r7, #30]
 800a364:	429a      	cmp	r2, r3
 800a366:	d3dd      	bcc.n	800a324 <Paint_Clear+0x18>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
				Paint.Image[Addr] = (Color<<4)|Color;
			}
		}		
	}
}
 800a368:	e070      	b.n	800a44c <Paint_Clear+0x140>
    }else if(Paint.Scale == 4) {
 800a36a:	4b3b      	ldr	r3, [pc, #236]	@ (800a458 <Paint_Clear+0x14c>)
 800a36c:	8adb      	ldrh	r3, [r3, #22]
 800a36e:	2b04      	cmp	r3, #4
 800a370:	d138      	bne.n	800a3e4 <Paint_Clear+0xd8>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 800a372:	2300      	movs	r3, #0
 800a374:	837b      	strh	r3, [r7, #26]
 800a376:	e02f      	b.n	800a3d8 <Paint_Clear+0xcc>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 800a378:	2300      	movs	r3, #0
 800a37a:	833b      	strh	r3, [r7, #24]
 800a37c:	e024      	b.n	800a3c8 <Paint_Clear+0xbc>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 800a37e:	8b3a      	ldrh	r2, [r7, #24]
 800a380:	8b7b      	ldrh	r3, [r7, #26]
 800a382:	4935      	ldr	r1, [pc, #212]	@ (800a458 <Paint_Clear+0x14c>)
 800a384:	8a49      	ldrh	r1, [r1, #18]
 800a386:	fb01 f303 	mul.w	r3, r1, r3
 800a38a:	4413      	add	r3, r2
 800a38c:	60fb      	str	r3, [r7, #12]
				Paint.Image[Addr] = (Color<<6)|(Color<<4)|(Color<<2)|Color;
 800a38e:	88fb      	ldrh	r3, [r7, #6]
 800a390:	b25b      	sxtb	r3, r3
 800a392:	019b      	lsls	r3, r3, #6
 800a394:	b25a      	sxtb	r2, r3
 800a396:	88fb      	ldrh	r3, [r7, #6]
 800a398:	b25b      	sxtb	r3, r3
 800a39a:	011b      	lsls	r3, r3, #4
 800a39c:	b25b      	sxtb	r3, r3
 800a39e:	4313      	orrs	r3, r2
 800a3a0:	b25a      	sxtb	r2, r3
 800a3a2:	88fb      	ldrh	r3, [r7, #6]
 800a3a4:	b25b      	sxtb	r3, r3
 800a3a6:	009b      	lsls	r3, r3, #2
 800a3a8:	b25b      	sxtb	r3, r3
 800a3aa:	4313      	orrs	r3, r2
 800a3ac:	b25a      	sxtb	r2, r3
 800a3ae:	88fb      	ldrh	r3, [r7, #6]
 800a3b0:	b25b      	sxtb	r3, r3
 800a3b2:	4313      	orrs	r3, r2
 800a3b4:	b259      	sxtb	r1, r3
 800a3b6:	4b28      	ldr	r3, [pc, #160]	@ (800a458 <Paint_Clear+0x14c>)
 800a3b8:	681a      	ldr	r2, [r3, #0]
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	4413      	add	r3, r2
 800a3be:	b2ca      	uxtb	r2, r1
 800a3c0:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 800a3c2:	8b3b      	ldrh	r3, [r7, #24]
 800a3c4:	3301      	adds	r3, #1
 800a3c6:	833b      	strh	r3, [r7, #24]
 800a3c8:	4b23      	ldr	r3, [pc, #140]	@ (800a458 <Paint_Clear+0x14c>)
 800a3ca:	8a5b      	ldrh	r3, [r3, #18]
 800a3cc:	8b3a      	ldrh	r2, [r7, #24]
 800a3ce:	429a      	cmp	r2, r3
 800a3d0:	d3d5      	bcc.n	800a37e <Paint_Clear+0x72>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 800a3d2:	8b7b      	ldrh	r3, [r7, #26]
 800a3d4:	3301      	adds	r3, #1
 800a3d6:	837b      	strh	r3, [r7, #26]
 800a3d8:	4b1f      	ldr	r3, [pc, #124]	@ (800a458 <Paint_Clear+0x14c>)
 800a3da:	8a9b      	ldrh	r3, [r3, #20]
 800a3dc:	8b7a      	ldrh	r2, [r7, #26]
 800a3de:	429a      	cmp	r2, r3
 800a3e0:	d3ca      	bcc.n	800a378 <Paint_Clear+0x6c>
}
 800a3e2:	e033      	b.n	800a44c <Paint_Clear+0x140>
	}else if(Paint.Scale == 6 || Paint.Scale == 7) {
 800a3e4:	4b1c      	ldr	r3, [pc, #112]	@ (800a458 <Paint_Clear+0x14c>)
 800a3e6:	8adb      	ldrh	r3, [r3, #22]
 800a3e8:	2b06      	cmp	r3, #6
 800a3ea:	d003      	beq.n	800a3f4 <Paint_Clear+0xe8>
 800a3ec:	4b1a      	ldr	r3, [pc, #104]	@ (800a458 <Paint_Clear+0x14c>)
 800a3ee:	8adb      	ldrh	r3, [r3, #22]
 800a3f0:	2b07      	cmp	r3, #7
 800a3f2:	d12b      	bne.n	800a44c <Paint_Clear+0x140>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	82fb      	strh	r3, [r7, #22]
 800a3f8:	e023      	b.n	800a442 <Paint_Clear+0x136>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	82bb      	strh	r3, [r7, #20]
 800a3fe:	e018      	b.n	800a432 <Paint_Clear+0x126>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 800a400:	8aba      	ldrh	r2, [r7, #20]
 800a402:	8afb      	ldrh	r3, [r7, #22]
 800a404:	4914      	ldr	r1, [pc, #80]	@ (800a458 <Paint_Clear+0x14c>)
 800a406:	8a49      	ldrh	r1, [r1, #18]
 800a408:	fb01 f303 	mul.w	r3, r1, r3
 800a40c:	4413      	add	r3, r2
 800a40e:	613b      	str	r3, [r7, #16]
				Paint.Image[Addr] = (Color<<4)|Color;
 800a410:	88fb      	ldrh	r3, [r7, #6]
 800a412:	b25b      	sxtb	r3, r3
 800a414:	011b      	lsls	r3, r3, #4
 800a416:	b25a      	sxtb	r2, r3
 800a418:	88fb      	ldrh	r3, [r7, #6]
 800a41a:	b25b      	sxtb	r3, r3
 800a41c:	4313      	orrs	r3, r2
 800a41e:	b259      	sxtb	r1, r3
 800a420:	4b0d      	ldr	r3, [pc, #52]	@ (800a458 <Paint_Clear+0x14c>)
 800a422:	681a      	ldr	r2, [r3, #0]
 800a424:	693b      	ldr	r3, [r7, #16]
 800a426:	4413      	add	r3, r2
 800a428:	b2ca      	uxtb	r2, r1
 800a42a:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 800a42c:	8abb      	ldrh	r3, [r7, #20]
 800a42e:	3301      	adds	r3, #1
 800a430:	82bb      	strh	r3, [r7, #20]
 800a432:	4b09      	ldr	r3, [pc, #36]	@ (800a458 <Paint_Clear+0x14c>)
 800a434:	8a5b      	ldrh	r3, [r3, #18]
 800a436:	8aba      	ldrh	r2, [r7, #20]
 800a438:	429a      	cmp	r2, r3
 800a43a:	d3e1      	bcc.n	800a400 <Paint_Clear+0xf4>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 800a43c:	8afb      	ldrh	r3, [r7, #22]
 800a43e:	3301      	adds	r3, #1
 800a440:	82fb      	strh	r3, [r7, #22]
 800a442:	4b05      	ldr	r3, [pc, #20]	@ (800a458 <Paint_Clear+0x14c>)
 800a444:	8a9b      	ldrh	r3, [r3, #20]
 800a446:	8afa      	ldrh	r2, [r7, #22]
 800a448:	429a      	cmp	r2, r3
 800a44a:	d3d6      	bcc.n	800a3fa <Paint_Clear+0xee>
}
 800a44c:	bf00      	nop
 800a44e:	3724      	adds	r7, #36	@ 0x24
 800a450:	46bd      	mov	sp, r7
 800a452:	bc80      	pop	{r7}
 800a454:	4770      	bx	lr
 800a456:	bf00      	nop
 800a458:	20000558 	.word	0x20000558

0800a45c <Paint_ClearWindows>:
    Xend   : x end point
    Yend   : y end point
    Color  : Painted colors
******************************************************************************/
void Paint_ClearWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, UWORD Color)
{
 800a45c:	b590      	push	{r4, r7, lr}
 800a45e:	b085      	sub	sp, #20
 800a460:	af00      	add	r7, sp, #0
 800a462:	4604      	mov	r4, r0
 800a464:	4608      	mov	r0, r1
 800a466:	4611      	mov	r1, r2
 800a468:	461a      	mov	r2, r3
 800a46a:	4623      	mov	r3, r4
 800a46c:	80fb      	strh	r3, [r7, #6]
 800a46e:	4603      	mov	r3, r0
 800a470:	80bb      	strh	r3, [r7, #4]
 800a472:	460b      	mov	r3, r1
 800a474:	807b      	strh	r3, [r7, #2]
 800a476:	4613      	mov	r3, r2
 800a478:	803b      	strh	r3, [r7, #0]
    UWORD X, Y;
    for (Y = Ystart; Y < Yend; Y++) {
 800a47a:	88bb      	ldrh	r3, [r7, #4]
 800a47c:	81bb      	strh	r3, [r7, #12]
 800a47e:	e012      	b.n	800a4a6 <Paint_ClearWindows+0x4a>
        for (X = Xstart; X < Xend; X++) {//8 pixel =  1 byte
 800a480:	88fb      	ldrh	r3, [r7, #6]
 800a482:	81fb      	strh	r3, [r7, #14]
 800a484:	e008      	b.n	800a498 <Paint_ClearWindows+0x3c>
            Paint_SetPixel(X, Y, Color);
 800a486:	8c3a      	ldrh	r2, [r7, #32]
 800a488:	89b9      	ldrh	r1, [r7, #12]
 800a48a:	89fb      	ldrh	r3, [r7, #14]
 800a48c:	4618      	mov	r0, r3
 800a48e:	f7ff fdef 	bl	800a070 <Paint_SetPixel>
        for (X = Xstart; X < Xend; X++) {//8 pixel =  1 byte
 800a492:	89fb      	ldrh	r3, [r7, #14]
 800a494:	3301      	adds	r3, #1
 800a496:	81fb      	strh	r3, [r7, #14]
 800a498:	89fa      	ldrh	r2, [r7, #14]
 800a49a:	887b      	ldrh	r3, [r7, #2]
 800a49c:	429a      	cmp	r2, r3
 800a49e:	d3f2      	bcc.n	800a486 <Paint_ClearWindows+0x2a>
    for (Y = Ystart; Y < Yend; Y++) {
 800a4a0:	89bb      	ldrh	r3, [r7, #12]
 800a4a2:	3301      	adds	r3, #1
 800a4a4:	81bb      	strh	r3, [r7, #12]
 800a4a6:	89ba      	ldrh	r2, [r7, #12]
 800a4a8:	883b      	ldrh	r3, [r7, #0]
 800a4aa:	429a      	cmp	r2, r3
 800a4ac:	d3e8      	bcc.n	800a480 <Paint_ClearWindows+0x24>
        }
    }
}
 800a4ae:	bf00      	nop
 800a4b0:	bf00      	nop
 800a4b2:	3714      	adds	r7, #20
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bd90      	pop	{r4, r7, pc}

0800a4b8 <Paint_DrawPoint>:
    Dot_Pixel	: point size
    Dot_Style	: point Style
******************************************************************************/
void Paint_DrawPoint(UWORD Xpoint, UWORD Ypoint, UWORD Color,
                     DOT_PIXEL Dot_Pixel, DOT_STYLE Dot_Style)
{
 800a4b8:	b590      	push	{r4, r7, lr}
 800a4ba:	b085      	sub	sp, #20
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	4604      	mov	r4, r0
 800a4c0:	4608      	mov	r0, r1
 800a4c2:	4611      	mov	r1, r2
 800a4c4:	461a      	mov	r2, r3
 800a4c6:	4623      	mov	r3, r4
 800a4c8:	80fb      	strh	r3, [r7, #6]
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	80bb      	strh	r3, [r7, #4]
 800a4ce:	460b      	mov	r3, r1
 800a4d0:	807b      	strh	r3, [r7, #2]
 800a4d2:	4613      	mov	r3, r2
 800a4d4:	707b      	strb	r3, [r7, #1]
    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 800a4d6:	4b4a      	ldr	r3, [pc, #296]	@ (800a600 <Paint_DrawPoint+0x148>)
 800a4d8:	889b      	ldrh	r3, [r3, #4]
 800a4da:	88fa      	ldrh	r2, [r7, #6]
 800a4dc:	429a      	cmp	r2, r3
 800a4de:	d804      	bhi.n	800a4ea <Paint_DrawPoint+0x32>
 800a4e0:	4b47      	ldr	r3, [pc, #284]	@ (800a600 <Paint_DrawPoint+0x148>)
 800a4e2:	88db      	ldrh	r3, [r3, #6]
 800a4e4:	88ba      	ldrh	r2, [r7, #4]
 800a4e6:	429a      	cmp	r2, r3
 800a4e8:	d911      	bls.n	800a50e <Paint_DrawPoint+0x56>
        Debug("Paint_DrawPoint Input exceeds the normal display range\r\n");
 800a4ea:	4846      	ldr	r0, [pc, #280]	@ (800a604 <Paint_DrawPoint+0x14c>)
 800a4ec:	f000 fe6c 	bl	800b1c8 <puts>
				printf("Xpoint = %d , Paint.Width = %d  \r\n ",Xpoint,Paint.Width);
 800a4f0:	88fb      	ldrh	r3, [r7, #6]
 800a4f2:	4a43      	ldr	r2, [pc, #268]	@ (800a600 <Paint_DrawPoint+0x148>)
 800a4f4:	8892      	ldrh	r2, [r2, #4]
 800a4f6:	4619      	mov	r1, r3
 800a4f8:	4843      	ldr	r0, [pc, #268]	@ (800a608 <Paint_DrawPoint+0x150>)
 800a4fa:	f000 fdfd 	bl	800b0f8 <iprintf>
				printf("Ypoint = %d , Paint.Height = %d  \r\n ",Ypoint,Paint.Height);
 800a4fe:	88bb      	ldrh	r3, [r7, #4]
 800a500:	4a3f      	ldr	r2, [pc, #252]	@ (800a600 <Paint_DrawPoint+0x148>)
 800a502:	88d2      	ldrh	r2, [r2, #6]
 800a504:	4619      	mov	r1, r3
 800a506:	4841      	ldr	r0, [pc, #260]	@ (800a60c <Paint_DrawPoint+0x154>)
 800a508:	f000 fdf6 	bl	800b0f8 <iprintf>
        return;
 800a50c:	e074      	b.n	800a5f8 <Paint_DrawPoint+0x140>
    }

    int16_t XDir_Num , YDir_Num;
    if (Dot_Style == DOT_FILL_AROUND) {
 800a50e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a512:	2b01      	cmp	r3, #1
 800a514:	d144      	bne.n	800a5a0 <Paint_DrawPoint+0xe8>
        for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 800a516:	2300      	movs	r3, #0
 800a518:	81fb      	strh	r3, [r7, #14]
 800a51a:	e039      	b.n	800a590 <Paint_DrawPoint+0xd8>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 800a51c:	2300      	movs	r3, #0
 800a51e:	81bb      	strh	r3, [r7, #12]
 800a520:	e029      	b.n	800a576 <Paint_DrawPoint+0xbe>
                if(Xpoint + XDir_Num - Dot_Pixel < 0 || Ypoint + YDir_Num - Dot_Pixel < 0)
 800a522:	88fa      	ldrh	r2, [r7, #6]
 800a524:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a528:	441a      	add	r2, r3
 800a52a:	787b      	ldrb	r3, [r7, #1]
 800a52c:	1ad3      	subs	r3, r2, r3
 800a52e:	2b00      	cmp	r3, #0
 800a530:	db28      	blt.n	800a584 <Paint_DrawPoint+0xcc>
 800a532:	88ba      	ldrh	r2, [r7, #4]
 800a534:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800a538:	441a      	add	r2, r3
 800a53a:	787b      	ldrb	r3, [r7, #1]
 800a53c:	1ad3      	subs	r3, r2, r3
 800a53e:	2b00      	cmp	r3, #0
 800a540:	db20      	blt.n	800a584 <Paint_DrawPoint+0xcc>
                    break;
                // printf("x = %d, y = %d\r\n", Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel);
                Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 800a542:	89fa      	ldrh	r2, [r7, #14]
 800a544:	88fb      	ldrh	r3, [r7, #6]
 800a546:	4413      	add	r3, r2
 800a548:	b29a      	uxth	r2, r3
 800a54a:	787b      	ldrb	r3, [r7, #1]
 800a54c:	b29b      	uxth	r3, r3
 800a54e:	1ad3      	subs	r3, r2, r3
 800a550:	b298      	uxth	r0, r3
 800a552:	89ba      	ldrh	r2, [r7, #12]
 800a554:	88bb      	ldrh	r3, [r7, #4]
 800a556:	4413      	add	r3, r2
 800a558:	b29a      	uxth	r2, r3
 800a55a:	787b      	ldrb	r3, [r7, #1]
 800a55c:	b29b      	uxth	r3, r3
 800a55e:	1ad3      	subs	r3, r2, r3
 800a560:	b29b      	uxth	r3, r3
 800a562:	887a      	ldrh	r2, [r7, #2]
 800a564:	4619      	mov	r1, r3
 800a566:	f7ff fd83 	bl	800a070 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 800a56a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800a56e:	b29b      	uxth	r3, r3
 800a570:	3301      	adds	r3, #1
 800a572:	b29b      	uxth	r3, r3
 800a574:	81bb      	strh	r3, [r7, #12]
 800a576:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800a57a:	787b      	ldrb	r3, [r7, #1]
 800a57c:	005b      	lsls	r3, r3, #1
 800a57e:	3b01      	subs	r3, #1
 800a580:	429a      	cmp	r2, r3
 800a582:	dbce      	blt.n	800a522 <Paint_DrawPoint+0x6a>
        for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 800a584:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a588:	b29b      	uxth	r3, r3
 800a58a:	3301      	adds	r3, #1
 800a58c:	b29b      	uxth	r3, r3
 800a58e:	81fb      	strh	r3, [r7, #14]
 800a590:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800a594:	787b      	ldrb	r3, [r7, #1]
 800a596:	005b      	lsls	r3, r3, #1
 800a598:	3b01      	subs	r3, #1
 800a59a:	429a      	cmp	r2, r3
 800a59c:	dbbe      	blt.n	800a51c <Paint_DrawPoint+0x64>
 800a59e:	e02b      	b.n	800a5f8 <Paint_DrawPoint+0x140>
            }
        }
    } else {
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	81fb      	strh	r3, [r7, #14]
 800a5a4:	e023      	b.n	800a5ee <Paint_DrawPoint+0x136>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	81bb      	strh	r3, [r7, #12]
 800a5aa:	e015      	b.n	800a5d8 <Paint_DrawPoint+0x120>
                Paint_SetPixel(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color);
 800a5ac:	89fa      	ldrh	r2, [r7, #14]
 800a5ae:	88fb      	ldrh	r3, [r7, #6]
 800a5b0:	4413      	add	r3, r2
 800a5b2:	b29b      	uxth	r3, r3
 800a5b4:	3b01      	subs	r3, #1
 800a5b6:	b298      	uxth	r0, r3
 800a5b8:	89ba      	ldrh	r2, [r7, #12]
 800a5ba:	88bb      	ldrh	r3, [r7, #4]
 800a5bc:	4413      	add	r3, r2
 800a5be:	b29b      	uxth	r3, r3
 800a5c0:	3b01      	subs	r3, #1
 800a5c2:	b29b      	uxth	r3, r3
 800a5c4:	887a      	ldrh	r2, [r7, #2]
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	f7ff fd52 	bl	800a070 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 800a5cc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800a5d0:	b29b      	uxth	r3, r3
 800a5d2:	3301      	adds	r3, #1
 800a5d4:	b29b      	uxth	r3, r3
 800a5d6:	81bb      	strh	r3, [r7, #12]
 800a5d8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800a5dc:	787b      	ldrb	r3, [r7, #1]
 800a5de:	429a      	cmp	r2, r3
 800a5e0:	dbe4      	blt.n	800a5ac <Paint_DrawPoint+0xf4>
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 800a5e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a5e6:	b29b      	uxth	r3, r3
 800a5e8:	3301      	adds	r3, #1
 800a5ea:	b29b      	uxth	r3, r3
 800a5ec:	81fb      	strh	r3, [r7, #14]
 800a5ee:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800a5f2:	787b      	ldrb	r3, [r7, #1]
 800a5f4:	429a      	cmp	r2, r3
 800a5f6:	dbd6      	blt.n	800a5a6 <Paint_DrawPoint+0xee>
            }
        }
    }
}
 800a5f8:	3714      	adds	r7, #20
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd90      	pop	{r4, r7, pc}
 800a5fe:	bf00      	nop
 800a600:	20000558 	.word	0x20000558
 800a604:	0800bfd8 	.word	0x0800bfd8
 800a608:	0800c018 	.word	0x0800c018
 800a60c:	0800c03c 	.word	0x0800c03c

0800a610 <Paint_DrawLine>:
    Line_width : Line width
    Line_Style: Solid and dotted lines
******************************************************************************/
void Paint_DrawLine(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend,
                    UWORD Color, DOT_PIXEL Line_width, LINE_STYLE Line_Style)
{
 800a610:	b590      	push	{r4, r7, lr}
 800a612:	b08d      	sub	sp, #52	@ 0x34
 800a614:	af02      	add	r7, sp, #8
 800a616:	4604      	mov	r4, r0
 800a618:	4608      	mov	r0, r1
 800a61a:	4611      	mov	r1, r2
 800a61c:	461a      	mov	r2, r3
 800a61e:	4623      	mov	r3, r4
 800a620:	80fb      	strh	r3, [r7, #6]
 800a622:	4603      	mov	r3, r0
 800a624:	80bb      	strh	r3, [r7, #4]
 800a626:	460b      	mov	r3, r1
 800a628:	807b      	strh	r3, [r7, #2]
 800a62a:	4613      	mov	r3, r2
 800a62c:	803b      	strh	r3, [r7, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800a62e:	4b4b      	ldr	r3, [pc, #300]	@ (800a75c <Paint_DrawLine+0x14c>)
 800a630:	889b      	ldrh	r3, [r3, #4]
 800a632:	88fa      	ldrh	r2, [r7, #6]
 800a634:	429a      	cmp	r2, r3
 800a636:	d80e      	bhi.n	800a656 <Paint_DrawLine+0x46>
 800a638:	4b48      	ldr	r3, [pc, #288]	@ (800a75c <Paint_DrawLine+0x14c>)
 800a63a:	88db      	ldrh	r3, [r3, #6]
 800a63c:	88ba      	ldrh	r2, [r7, #4]
 800a63e:	429a      	cmp	r2, r3
 800a640:	d809      	bhi.n	800a656 <Paint_DrawLine+0x46>
        Xend > Paint.Width || Yend > Paint.Height) {
 800a642:	4b46      	ldr	r3, [pc, #280]	@ (800a75c <Paint_DrawLine+0x14c>)
 800a644:	889b      	ldrh	r3, [r3, #4]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800a646:	887a      	ldrh	r2, [r7, #2]
 800a648:	429a      	cmp	r2, r3
 800a64a:	d804      	bhi.n	800a656 <Paint_DrawLine+0x46>
        Xend > Paint.Width || Yend > Paint.Height) {
 800a64c:	4b43      	ldr	r3, [pc, #268]	@ (800a75c <Paint_DrawLine+0x14c>)
 800a64e:	88db      	ldrh	r3, [r3, #6]
 800a650:	883a      	ldrh	r2, [r7, #0]
 800a652:	429a      	cmp	r2, r3
 800a654:	d903      	bls.n	800a65e <Paint_DrawLine+0x4e>
        Debug("Paint_DrawLine Input exceeds the normal display range\r\n");
 800a656:	4842      	ldr	r0, [pc, #264]	@ (800a760 <Paint_DrawLine+0x150>)
 800a658:	f000 fdb6 	bl	800b1c8 <puts>
        return;
 800a65c:	e07a      	b.n	800a754 <Paint_DrawLine+0x144>
    }

    UWORD Xpoint = Xstart;
 800a65e:	88fb      	ldrh	r3, [r7, #6]
 800a660:	84fb      	strh	r3, [r7, #38]	@ 0x26
    UWORD Ypoint = Ystart;
 800a662:	88bb      	ldrh	r3, [r7, #4]
 800a664:	84bb      	strh	r3, [r7, #36]	@ 0x24
    int dx = (int)Xend - (int)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 800a666:	887a      	ldrh	r2, [r7, #2]
 800a668:	88fb      	ldrh	r3, [r7, #6]
 800a66a:	1ad3      	subs	r3, r2, r3
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	bfb8      	it	lt
 800a670:	425b      	neglt	r3, r3
 800a672:	61bb      	str	r3, [r7, #24]
    int dy = (int)Yend - (int)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 800a674:	883a      	ldrh	r2, [r7, #0]
 800a676:	88bb      	ldrh	r3, [r7, #4]
 800a678:	1ad3      	subs	r3, r2, r3
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	bfb8      	it	lt
 800a67e:	425b      	neglt	r3, r3
 800a680:	425b      	negs	r3, r3
 800a682:	617b      	str	r3, [r7, #20]

    // Increment direction, 1 is positive, -1 is counter;
    int XAddway = Xstart < Xend ? 1 : -1;
 800a684:	88fa      	ldrh	r2, [r7, #6]
 800a686:	887b      	ldrh	r3, [r7, #2]
 800a688:	429a      	cmp	r2, r3
 800a68a:	d201      	bcs.n	800a690 <Paint_DrawLine+0x80>
 800a68c:	2301      	movs	r3, #1
 800a68e:	e001      	b.n	800a694 <Paint_DrawLine+0x84>
 800a690:	f04f 33ff 	mov.w	r3, #4294967295
 800a694:	613b      	str	r3, [r7, #16]
    int YAddway = Ystart < Yend ? 1 : -1;
 800a696:	88ba      	ldrh	r2, [r7, #4]
 800a698:	883b      	ldrh	r3, [r7, #0]
 800a69a:	429a      	cmp	r2, r3
 800a69c:	d201      	bcs.n	800a6a2 <Paint_DrawLine+0x92>
 800a69e:	2301      	movs	r3, #1
 800a6a0:	e001      	b.n	800a6a6 <Paint_DrawLine+0x96>
 800a6a2:	f04f 33ff 	mov.w	r3, #4294967295
 800a6a6:	60fb      	str	r3, [r7, #12]

    //Cumulative error
    int Esp = dx + dy;
 800a6a8:	69ba      	ldr	r2, [r7, #24]
 800a6aa:	697b      	ldr	r3, [r7, #20]
 800a6ac:	4413      	add	r3, r2
 800a6ae:	623b      	str	r3, [r7, #32]
    char Dotted_Len = 0;
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	77fb      	strb	r3, [r7, #31]

    for (;;) {
        Dotted_Len++;
 800a6b4:	7ffb      	ldrb	r3, [r7, #31]
 800a6b6:	3301      	adds	r3, #1
 800a6b8:	77fb      	strb	r3, [r7, #31]
        //Painted dotted line, 2 point is really virtual
        if (Line_Style == LINE_STYLE_DOTTED && Dotted_Len % 3 == 0) {
 800a6ba:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800a6be:	2b01      	cmp	r3, #1
 800a6c0:	d117      	bne.n	800a6f2 <Paint_DrawLine+0xe2>
 800a6c2:	7ffa      	ldrb	r2, [r7, #31]
 800a6c4:	4b27      	ldr	r3, [pc, #156]	@ (800a764 <Paint_DrawLine+0x154>)
 800a6c6:	fba3 1302 	umull	r1, r3, r3, r2
 800a6ca:	0859      	lsrs	r1, r3, #1
 800a6cc:	460b      	mov	r3, r1
 800a6ce:	005b      	lsls	r3, r3, #1
 800a6d0:	440b      	add	r3, r1
 800a6d2:	1ad3      	subs	r3, r2, r3
 800a6d4:	b2db      	uxtb	r3, r3
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d10b      	bne.n	800a6f2 <Paint_DrawLine+0xe2>
            //Debug("LINE_DOTTED\r\n");
            Paint_DrawPoint(Xpoint, Ypoint, IMAGE_BACKGROUND, Line_width, DOT_STYLE_DFT);
 800a6da:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800a6de:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 800a6e0:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 800a6e2:	2201      	movs	r2, #1
 800a6e4:	9200      	str	r2, [sp, #0]
 800a6e6:	22ff      	movs	r2, #255	@ 0xff
 800a6e8:	f7ff fee6 	bl	800a4b8 <Paint_DrawPoint>
            Dotted_Len = 0;
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	77fb      	strb	r3, [r7, #31]
 800a6f0:	e008      	b.n	800a704 <Paint_DrawLine+0xf4>
        } else {
            Paint_DrawPoint(Xpoint, Ypoint, Color, Line_width, DOT_STYLE_DFT);
 800a6f2:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800a6f6:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 800a6f8:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 800a6fa:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 800a6fc:	2401      	movs	r4, #1
 800a6fe:	9400      	str	r4, [sp, #0]
 800a700:	f7ff feda 	bl	800a4b8 <Paint_DrawPoint>
        }
        if (2 * Esp >= dy) {
 800a704:	6a3b      	ldr	r3, [r7, #32]
 800a706:	005b      	lsls	r3, r3, #1
 800a708:	697a      	ldr	r2, [r7, #20]
 800a70a:	429a      	cmp	r2, r3
 800a70c:	dc0c      	bgt.n	800a728 <Paint_DrawLine+0x118>
            if (Xpoint == Xend)
 800a70e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800a710:	887b      	ldrh	r3, [r7, #2]
 800a712:	429a      	cmp	r2, r3
 800a714:	d01b      	beq.n	800a74e <Paint_DrawLine+0x13e>
                break;
            Esp += dy;
 800a716:	6a3a      	ldr	r2, [r7, #32]
 800a718:	697b      	ldr	r3, [r7, #20]
 800a71a:	4413      	add	r3, r2
 800a71c:	623b      	str	r3, [r7, #32]
            Xpoint += XAddway;
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	b29a      	uxth	r2, r3
 800a722:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a724:	4413      	add	r3, r2
 800a726:	84fb      	strh	r3, [r7, #38]	@ 0x26
        }
        if (2 * Esp <= dx) {
 800a728:	6a3b      	ldr	r3, [r7, #32]
 800a72a:	005b      	lsls	r3, r3, #1
 800a72c:	69ba      	ldr	r2, [r7, #24]
 800a72e:	429a      	cmp	r2, r3
 800a730:	dbc0      	blt.n	800a6b4 <Paint_DrawLine+0xa4>
            if (Ypoint == Yend)
 800a732:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a734:	883b      	ldrh	r3, [r7, #0]
 800a736:	429a      	cmp	r2, r3
 800a738:	d00b      	beq.n	800a752 <Paint_DrawLine+0x142>
                break;
            Esp += dx;
 800a73a:	6a3a      	ldr	r2, [r7, #32]
 800a73c:	69bb      	ldr	r3, [r7, #24]
 800a73e:	4413      	add	r3, r2
 800a740:	623b      	str	r3, [r7, #32]
            Ypoint += YAddway;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	b29a      	uxth	r2, r3
 800a746:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a748:	4413      	add	r3, r2
 800a74a:	84bb      	strh	r3, [r7, #36]	@ 0x24
        Dotted_Len++;
 800a74c:	e7b2      	b.n	800a6b4 <Paint_DrawLine+0xa4>
                break;
 800a74e:	bf00      	nop
 800a750:	e000      	b.n	800a754 <Paint_DrawLine+0x144>
                break;
 800a752:	bf00      	nop
        }
    }
}
 800a754:	372c      	adds	r7, #44	@ 0x2c
 800a756:	46bd      	mov	sp, r7
 800a758:	bd90      	pop	{r4, r7, pc}
 800a75a:	bf00      	nop
 800a75c:	20000558 	.word	0x20000558
 800a760:	0800c064 	.word	0x0800c064
 800a764:	aaaaaaab 	.word	0xaaaaaaab

0800a768 <Paint_DrawRectangle>:
    Line_width: Line width
    Draw_Fill : Whether to fill the inside of the rectangle
******************************************************************************/
void Paint_DrawRectangle(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend,
                         UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Draw_Fill)
{
 800a768:	b590      	push	{r4, r7, lr}
 800a76a:	b089      	sub	sp, #36	@ 0x24
 800a76c:	af04      	add	r7, sp, #16
 800a76e:	4604      	mov	r4, r0
 800a770:	4608      	mov	r0, r1
 800a772:	4611      	mov	r1, r2
 800a774:	461a      	mov	r2, r3
 800a776:	4623      	mov	r3, r4
 800a778:	80fb      	strh	r3, [r7, #6]
 800a77a:	4603      	mov	r3, r0
 800a77c:	80bb      	strh	r3, [r7, #4]
 800a77e:	460b      	mov	r3, r1
 800a780:	807b      	strh	r3, [r7, #2]
 800a782:	4613      	mov	r3, r2
 800a784:	803b      	strh	r3, [r7, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800a786:	4b38      	ldr	r3, [pc, #224]	@ (800a868 <Paint_DrawRectangle+0x100>)
 800a788:	889b      	ldrh	r3, [r3, #4]
 800a78a:	88fa      	ldrh	r2, [r7, #6]
 800a78c:	429a      	cmp	r2, r3
 800a78e:	d80e      	bhi.n	800a7ae <Paint_DrawRectangle+0x46>
 800a790:	4b35      	ldr	r3, [pc, #212]	@ (800a868 <Paint_DrawRectangle+0x100>)
 800a792:	88db      	ldrh	r3, [r3, #6]
 800a794:	88ba      	ldrh	r2, [r7, #4]
 800a796:	429a      	cmp	r2, r3
 800a798:	d809      	bhi.n	800a7ae <Paint_DrawRectangle+0x46>
        Xend > Paint.Width || Yend > Paint.Height) {
 800a79a:	4b33      	ldr	r3, [pc, #204]	@ (800a868 <Paint_DrawRectangle+0x100>)
 800a79c:	889b      	ldrh	r3, [r3, #4]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800a79e:	887a      	ldrh	r2, [r7, #2]
 800a7a0:	429a      	cmp	r2, r3
 800a7a2:	d804      	bhi.n	800a7ae <Paint_DrawRectangle+0x46>
        Xend > Paint.Width || Yend > Paint.Height) {
 800a7a4:	4b30      	ldr	r3, [pc, #192]	@ (800a868 <Paint_DrawRectangle+0x100>)
 800a7a6:	88db      	ldrh	r3, [r3, #6]
 800a7a8:	883a      	ldrh	r2, [r7, #0]
 800a7aa:	429a      	cmp	r2, r3
 800a7ac:	d903      	bls.n	800a7b6 <Paint_DrawRectangle+0x4e>
        Debug("Input exceeds the normal display range\r\n");
 800a7ae:	482f      	ldr	r0, [pc, #188]	@ (800a86c <Paint_DrawRectangle+0x104>)
 800a7b0:	f000 fd0a 	bl	800b1c8 <puts>
        return;
 800a7b4:	e054      	b.n	800a860 <Paint_DrawRectangle+0xf8>
    }

    if (Draw_Fill) {
 800a7b6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d018      	beq.n	800a7f0 <Paint_DrawRectangle+0x88>
        UWORD Ypoint;
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
 800a7be:	88bb      	ldrh	r3, [r7, #4]
 800a7c0:	81fb      	strh	r3, [r7, #14]
 800a7c2:	e010      	b.n	800a7e6 <Paint_DrawRectangle+0x7e>
            Paint_DrawLine(Xstart, Ypoint, Xend, Ypoint, Color , Line_width, LINE_STYLE_SOLID);
 800a7c4:	89fc      	ldrh	r4, [r7, #14]
 800a7c6:	887a      	ldrh	r2, [r7, #2]
 800a7c8:	89f9      	ldrh	r1, [r7, #14]
 800a7ca:	88f8      	ldrh	r0, [r7, #6]
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	9302      	str	r3, [sp, #8]
 800a7d0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a7d4:	9301      	str	r3, [sp, #4]
 800a7d6:	8c3b      	ldrh	r3, [r7, #32]
 800a7d8:	9300      	str	r3, [sp, #0]
 800a7da:	4623      	mov	r3, r4
 800a7dc:	f7ff ff18 	bl	800a610 <Paint_DrawLine>
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
 800a7e0:	89fb      	ldrh	r3, [r7, #14]
 800a7e2:	3301      	adds	r3, #1
 800a7e4:	81fb      	strh	r3, [r7, #14]
 800a7e6:	89fa      	ldrh	r2, [r7, #14]
 800a7e8:	883b      	ldrh	r3, [r7, #0]
 800a7ea:	429a      	cmp	r2, r3
 800a7ec:	d3ea      	bcc.n	800a7c4 <Paint_DrawRectangle+0x5c>
 800a7ee:	e037      	b.n	800a860 <Paint_DrawRectangle+0xf8>
        }
    } else {
        Paint_DrawLine(Xstart, Ystart, Xend, Ystart, Color, Line_width, LINE_STYLE_SOLID);
 800a7f0:	88bc      	ldrh	r4, [r7, #4]
 800a7f2:	887a      	ldrh	r2, [r7, #2]
 800a7f4:	88b9      	ldrh	r1, [r7, #4]
 800a7f6:	88f8      	ldrh	r0, [r7, #6]
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	9302      	str	r3, [sp, #8]
 800a7fc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a800:	9301      	str	r3, [sp, #4]
 800a802:	8c3b      	ldrh	r3, [r7, #32]
 800a804:	9300      	str	r3, [sp, #0]
 800a806:	4623      	mov	r3, r4
 800a808:	f7ff ff02 	bl	800a610 <Paint_DrawLine>
        Paint_DrawLine(Xstart, Ystart, Xstart, Yend, Color, Line_width, LINE_STYLE_SOLID);
 800a80c:	883c      	ldrh	r4, [r7, #0]
 800a80e:	88fa      	ldrh	r2, [r7, #6]
 800a810:	88b9      	ldrh	r1, [r7, #4]
 800a812:	88f8      	ldrh	r0, [r7, #6]
 800a814:	2300      	movs	r3, #0
 800a816:	9302      	str	r3, [sp, #8]
 800a818:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a81c:	9301      	str	r3, [sp, #4]
 800a81e:	8c3b      	ldrh	r3, [r7, #32]
 800a820:	9300      	str	r3, [sp, #0]
 800a822:	4623      	mov	r3, r4
 800a824:	f7ff fef4 	bl	800a610 <Paint_DrawLine>
        Paint_DrawLine(Xend, Yend, Xend, Ystart, Color, Line_width, LINE_STYLE_SOLID);
 800a828:	88bc      	ldrh	r4, [r7, #4]
 800a82a:	887a      	ldrh	r2, [r7, #2]
 800a82c:	8839      	ldrh	r1, [r7, #0]
 800a82e:	8878      	ldrh	r0, [r7, #2]
 800a830:	2300      	movs	r3, #0
 800a832:	9302      	str	r3, [sp, #8]
 800a834:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a838:	9301      	str	r3, [sp, #4]
 800a83a:	8c3b      	ldrh	r3, [r7, #32]
 800a83c:	9300      	str	r3, [sp, #0]
 800a83e:	4623      	mov	r3, r4
 800a840:	f7ff fee6 	bl	800a610 <Paint_DrawLine>
        Paint_DrawLine(Xend, Yend, Xstart, Yend, Color, Line_width, LINE_STYLE_SOLID);
 800a844:	883c      	ldrh	r4, [r7, #0]
 800a846:	88fa      	ldrh	r2, [r7, #6]
 800a848:	8839      	ldrh	r1, [r7, #0]
 800a84a:	8878      	ldrh	r0, [r7, #2]
 800a84c:	2300      	movs	r3, #0
 800a84e:	9302      	str	r3, [sp, #8]
 800a850:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a854:	9301      	str	r3, [sp, #4]
 800a856:	8c3b      	ldrh	r3, [r7, #32]
 800a858:	9300      	str	r3, [sp, #0]
 800a85a:	4623      	mov	r3, r4
 800a85c:	f7ff fed8 	bl	800a610 <Paint_DrawLine>
    }
}
 800a860:	3714      	adds	r7, #20
 800a862:	46bd      	mov	sp, r7
 800a864:	bd90      	pop	{r4, r7, pc}
 800a866:	bf00      	nop
 800a868:	20000558 	.word	0x20000558
 800a86c:	0800c0a4 	.word	0x0800c0a4

0800a870 <Paint_DrawChar>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b088      	sub	sp, #32
 800a874:	af00      	add	r7, sp, #0
 800a876:	607b      	str	r3, [r7, #4]
 800a878:	4603      	mov	r3, r0
 800a87a:	81fb      	strh	r3, [r7, #14]
 800a87c:	460b      	mov	r3, r1
 800a87e:	81bb      	strh	r3, [r7, #12]
 800a880:	4613      	mov	r3, r2
 800a882:	72fb      	strb	r3, [r7, #11]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 800a884:	4b4c      	ldr	r3, [pc, #304]	@ (800a9b8 <Paint_DrawChar+0x148>)
 800a886:	889b      	ldrh	r3, [r3, #4]
 800a888:	89fa      	ldrh	r2, [r7, #14]
 800a88a:	429a      	cmp	r2, r3
 800a88c:	d804      	bhi.n	800a898 <Paint_DrawChar+0x28>
 800a88e:	4b4a      	ldr	r3, [pc, #296]	@ (800a9b8 <Paint_DrawChar+0x148>)
 800a890:	88db      	ldrh	r3, [r3, #6]
 800a892:	89ba      	ldrh	r2, [r7, #12]
 800a894:	429a      	cmp	r2, r3
 800a896:	d903      	bls.n	800a8a0 <Paint_DrawChar+0x30>
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 800a898:	4848      	ldr	r0, [pc, #288]	@ (800a9bc <Paint_DrawChar+0x14c>)
 800a89a:	f000 fc95 	bl	800b1c8 <puts>
        return;
 800a89e:	e087      	b.n	800a9b0 <Paint_DrawChar+0x140>
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 800a8a0:	7afb      	ldrb	r3, [r7, #11]
 800a8a2:	3b20      	subs	r3, #32
 800a8a4:	687a      	ldr	r2, [r7, #4]
 800a8a6:	88d2      	ldrh	r2, [r2, #6]
 800a8a8:	fb02 f303 	mul.w	r3, r2, r3
 800a8ac:	687a      	ldr	r2, [r7, #4]
 800a8ae:	8892      	ldrh	r2, [r2, #4]
 800a8b0:	08d2      	lsrs	r2, r2, #3
 800a8b2:	b292      	uxth	r2, r2
 800a8b4:	4611      	mov	r1, r2
 800a8b6:	687a      	ldr	r2, [r7, #4]
 800a8b8:	8892      	ldrh	r2, [r2, #4]
 800a8ba:	f002 0207 	and.w	r2, r2, #7
 800a8be:	b292      	uxth	r2, r2
 800a8c0:	2a00      	cmp	r2, #0
 800a8c2:	bf14      	ite	ne
 800a8c4:	2201      	movne	r2, #1
 800a8c6:	2200      	moveq	r2, #0
 800a8c8:	b2d2      	uxtb	r2, r2
 800a8ca:	440a      	add	r2, r1
 800a8cc:	fb02 f303 	mul.w	r3, r2, r3
 800a8d0:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681a      	ldr	r2, [r3, #0]
 800a8d6:	697b      	ldr	r3, [r7, #20]
 800a8d8:	4413      	add	r3, r2
 800a8da:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 800a8dc:	2300      	movs	r3, #0
 800a8de:	83fb      	strh	r3, [r7, #30]
 800a8e0:	e061      	b.n	800a9a6 <Paint_DrawChar+0x136>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	83bb      	strh	r3, [r7, #28]
 800a8e6:	e04c      	b.n	800a982 <Paint_DrawChar+0x112>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 800a8e8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800a8ea:	2bff      	cmp	r3, #255	@ 0xff
 800a8ec:	d118      	bne.n	800a920 <Paint_DrawChar+0xb0>
                if (*ptr & (0x80 >> (Column % 8)))
 800a8ee:	69bb      	ldr	r3, [r7, #24]
 800a8f0:	781b      	ldrb	r3, [r3, #0]
 800a8f2:	4619      	mov	r1, r3
 800a8f4:	8bbb      	ldrh	r3, [r7, #28]
 800a8f6:	f003 0307 	and.w	r3, r3, #7
 800a8fa:	2280      	movs	r2, #128	@ 0x80
 800a8fc:	fa42 f303 	asr.w	r3, r2, r3
 800a900:	400b      	ands	r3, r1
 800a902:	2b00      	cmp	r3, #0
 800a904:	d031      	beq.n	800a96a <Paint_DrawChar+0xfa>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 800a906:	89fa      	ldrh	r2, [r7, #14]
 800a908:	8bbb      	ldrh	r3, [r7, #28]
 800a90a:	4413      	add	r3, r2
 800a90c:	b298      	uxth	r0, r3
 800a90e:	89ba      	ldrh	r2, [r7, #12]
 800a910:	8bfb      	ldrh	r3, [r7, #30]
 800a912:	4413      	add	r3, r2
 800a914:	b29b      	uxth	r3, r3
 800a916:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800a918:	4619      	mov	r1, r3
 800a91a:	f7ff fba9 	bl	800a070 <Paint_SetPixel>
 800a91e:	e024      	b.n	800a96a <Paint_DrawChar+0xfa>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 800a920:	69bb      	ldr	r3, [r7, #24]
 800a922:	781b      	ldrb	r3, [r3, #0]
 800a924:	4619      	mov	r1, r3
 800a926:	8bbb      	ldrh	r3, [r7, #28]
 800a928:	f003 0307 	and.w	r3, r3, #7
 800a92c:	2280      	movs	r2, #128	@ 0x80
 800a92e:	fa42 f303 	asr.w	r3, r2, r3
 800a932:	400b      	ands	r3, r1
 800a934:	2b00      	cmp	r3, #0
 800a936:	d00c      	beq.n	800a952 <Paint_DrawChar+0xe2>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 800a938:	89fa      	ldrh	r2, [r7, #14]
 800a93a:	8bbb      	ldrh	r3, [r7, #28]
 800a93c:	4413      	add	r3, r2
 800a93e:	b298      	uxth	r0, r3
 800a940:	89ba      	ldrh	r2, [r7, #12]
 800a942:	8bfb      	ldrh	r3, [r7, #30]
 800a944:	4413      	add	r3, r2
 800a946:	b29b      	uxth	r3, r3
 800a948:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800a94a:	4619      	mov	r1, r3
 800a94c:	f7ff fb90 	bl	800a070 <Paint_SetPixel>
 800a950:	e00b      	b.n	800a96a <Paint_DrawChar+0xfa>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 800a952:	89fa      	ldrh	r2, [r7, #14]
 800a954:	8bbb      	ldrh	r3, [r7, #28]
 800a956:	4413      	add	r3, r2
 800a958:	b298      	uxth	r0, r3
 800a95a:	89ba      	ldrh	r2, [r7, #12]
 800a95c:	8bfb      	ldrh	r3, [r7, #30]
 800a95e:	4413      	add	r3, r2
 800a960:	b29b      	uxth	r3, r3
 800a962:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800a964:	4619      	mov	r1, r3
 800a966:	f7ff fb83 	bl	800a070 <Paint_SetPixel>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 800a96a:	8bbb      	ldrh	r3, [r7, #28]
 800a96c:	f003 0307 	and.w	r3, r3, #7
 800a970:	b29b      	uxth	r3, r3
 800a972:	2b07      	cmp	r3, #7
 800a974:	d102      	bne.n	800a97c <Paint_DrawChar+0x10c>
                ptr++;
 800a976:	69bb      	ldr	r3, [r7, #24]
 800a978:	3301      	adds	r3, #1
 800a97a:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 800a97c:	8bbb      	ldrh	r3, [r7, #28]
 800a97e:	3301      	adds	r3, #1
 800a980:	83bb      	strh	r3, [r7, #28]
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	889b      	ldrh	r3, [r3, #4]
 800a986:	8bba      	ldrh	r2, [r7, #28]
 800a988:	429a      	cmp	r2, r3
 800a98a:	d3ad      	bcc.n	800a8e8 <Paint_DrawChar+0x78>
        }// Write a line
        if (Font->Width % 8 != 0)
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	889b      	ldrh	r3, [r3, #4]
 800a990:	f003 0307 	and.w	r3, r3, #7
 800a994:	b29b      	uxth	r3, r3
 800a996:	2b00      	cmp	r3, #0
 800a998:	d002      	beq.n	800a9a0 <Paint_DrawChar+0x130>
            ptr++;
 800a99a:	69bb      	ldr	r3, [r7, #24]
 800a99c:	3301      	adds	r3, #1
 800a99e:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 800a9a0:	8bfb      	ldrh	r3, [r7, #30]
 800a9a2:	3301      	adds	r3, #1
 800a9a4:	83fb      	strh	r3, [r7, #30]
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	88db      	ldrh	r3, [r3, #6]
 800a9aa:	8bfa      	ldrh	r2, [r7, #30]
 800a9ac:	429a      	cmp	r2, r3
 800a9ae:	d398      	bcc.n	800a8e2 <Paint_DrawChar+0x72>
    }// Write all
}
 800a9b0:	3720      	adds	r7, #32
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}
 800a9b6:	bf00      	nop
 800a9b8:	20000558 	.word	0x20000558
 800a9bc:	0800c114 	.word	0x0800c114

0800a9c0 <Paint_DrawString_EN>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b088      	sub	sp, #32
 800a9c4:	af02      	add	r7, sp, #8
 800a9c6:	60ba      	str	r2, [r7, #8]
 800a9c8:	607b      	str	r3, [r7, #4]
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	81fb      	strh	r3, [r7, #14]
 800a9ce:	460b      	mov	r3, r1
 800a9d0:	81bb      	strh	r3, [r7, #12]
    UWORD Xpoint = Xstart;
 800a9d2:	89fb      	ldrh	r3, [r7, #14]
 800a9d4:	82fb      	strh	r3, [r7, #22]
    UWORD Ypoint = Ystart;
 800a9d6:	89bb      	ldrh	r3, [r7, #12]
 800a9d8:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 800a9da:	4b21      	ldr	r3, [pc, #132]	@ (800aa60 <Paint_DrawString_EN+0xa0>)
 800a9dc:	889b      	ldrh	r3, [r3, #4]
 800a9de:	89fa      	ldrh	r2, [r7, #14]
 800a9e0:	429a      	cmp	r2, r3
 800a9e2:	d804      	bhi.n	800a9ee <Paint_DrawString_EN+0x2e>
 800a9e4:	4b1e      	ldr	r3, [pc, #120]	@ (800aa60 <Paint_DrawString_EN+0xa0>)
 800a9e6:	88db      	ldrh	r3, [r3, #6]
 800a9e8:	89ba      	ldrh	r2, [r7, #12]
 800a9ea:	429a      	cmp	r2, r3
 800a9ec:	d931      	bls.n	800aa52 <Paint_DrawString_EN+0x92>
        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 800a9ee:	481d      	ldr	r0, [pc, #116]	@ (800aa64 <Paint_DrawString_EN+0xa4>)
 800a9f0:	f000 fbea 	bl	800b1c8 <puts>
        return;
 800a9f4:	e031      	b.n	800aa5a <Paint_DrawString_EN+0x9a>
    }

    while (* pString != '\0') {
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 800a9f6:	8afb      	ldrh	r3, [r7, #22]
 800a9f8:	687a      	ldr	r2, [r7, #4]
 800a9fa:	8892      	ldrh	r2, [r2, #4]
 800a9fc:	4413      	add	r3, r2
 800a9fe:	4a18      	ldr	r2, [pc, #96]	@ (800aa60 <Paint_DrawString_EN+0xa0>)
 800aa00:	8892      	ldrh	r2, [r2, #4]
 800aa02:	4293      	cmp	r3, r2
 800aa04:	dd06      	ble.n	800aa14 <Paint_DrawString_EN+0x54>
            Xpoint = Xstart;
 800aa06:	89fb      	ldrh	r3, [r7, #14]
 800aa08:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	88da      	ldrh	r2, [r3, #6]
 800aa0e:	8abb      	ldrh	r3, [r7, #20]
 800aa10:	4413      	add	r3, r2
 800aa12:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 800aa14:	8abb      	ldrh	r3, [r7, #20]
 800aa16:	687a      	ldr	r2, [r7, #4]
 800aa18:	88d2      	ldrh	r2, [r2, #6]
 800aa1a:	4413      	add	r3, r2
 800aa1c:	4a10      	ldr	r2, [pc, #64]	@ (800aa60 <Paint_DrawString_EN+0xa0>)
 800aa1e:	88d2      	ldrh	r2, [r2, #6]
 800aa20:	4293      	cmp	r3, r2
 800aa22:	dd03      	ble.n	800aa2c <Paint_DrawString_EN+0x6c>
            Xpoint = Xstart;
 800aa24:	89fb      	ldrh	r3, [r7, #14]
 800aa26:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 800aa28:	89bb      	ldrh	r3, [r7, #12]
 800aa2a:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 800aa2c:	68bb      	ldr	r3, [r7, #8]
 800aa2e:	781a      	ldrb	r2, [r3, #0]
 800aa30:	8ab9      	ldrh	r1, [r7, #20]
 800aa32:	8af8      	ldrh	r0, [r7, #22]
 800aa34:	8c3b      	ldrh	r3, [r7, #32]
 800aa36:	9301      	str	r3, [sp, #4]
 800aa38:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800aa3a:	9300      	str	r3, [sp, #0]
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f7ff ff17 	bl	800a870 <Paint_DrawChar>

        //The next character of the address
        pString ++;
 800aa42:	68bb      	ldr	r3, [r7, #8]
 800aa44:	3301      	adds	r3, #1
 800aa46:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	889a      	ldrh	r2, [r3, #4]
 800aa4c:	8afb      	ldrh	r3, [r7, #22]
 800aa4e:	4413      	add	r3, r2
 800aa50:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0') {
 800aa52:	68bb      	ldr	r3, [r7, #8]
 800aa54:	781b      	ldrb	r3, [r3, #0]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d1cd      	bne.n	800a9f6 <Paint_DrawString_EN+0x36>
    }
}
 800aa5a:	3718      	adds	r7, #24
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bd80      	pop	{r7, pc}
 800aa60:	20000558 	.word	0x20000558
 800aa64:	0800c154 	.word	0x0800c154

0800aa68 <Paint_DrawNum>:
    Color_Background : Select the background color
******************************************************************************/
#define  ARRAY_LEN 255
void Paint_DrawNum(UWORD Xpoint, UWORD Ypoint, int32_t Nummber,
                   sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 800aa68:	b590      	push	{r4, r7, lr}
 800aa6a:	f5ad 7d09 	sub.w	sp, sp, #548	@ 0x224
 800aa6e:	af02      	add	r7, sp, #8
 800aa70:	4604      	mov	r4, r0
 800aa72:	4608      	mov	r0, r1
 800aa74:	f507 7106 	add.w	r1, r7, #536	@ 0x218
 800aa78:	f5a1 7104 	sub.w	r1, r1, #528	@ 0x210
 800aa7c:	600a      	str	r2, [r1, #0]
 800aa7e:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 800aa82:	f5a2 7205 	sub.w	r2, r2, #532	@ 0x214
 800aa86:	6013      	str	r3, [r2, #0]
 800aa88:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800aa8c:	f2a3 230a 	subw	r3, r3, #522	@ 0x20a
 800aa90:	4622      	mov	r2, r4
 800aa92:	801a      	strh	r2, [r3, #0]
 800aa94:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800aa98:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800aa9c:	4602      	mov	r2, r0
 800aa9e:	801a      	strh	r2, [r3, #0]

    int16_t Num_Bit = 0, Str_Bit = 0;
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	f8a7 3214 	strh.w	r3, [r7, #532]	@ 0x214
    uint8_t Str_Array[ARRAY_LEN] = {0}, Num_Array[ARRAY_LEN] = {0};
 800aaac:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800aab0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aab4:	4618      	mov	r0, r3
 800aab6:	23ff      	movs	r3, #255	@ 0xff
 800aab8:	461a      	mov	r2, r3
 800aaba:	2100      	movs	r1, #0
 800aabc:	f000 fc64 	bl	800b388 <memset>
 800aac0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800aac4:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800aac8:	4618      	mov	r0, r3
 800aaca:	23ff      	movs	r3, #255	@ 0xff
 800aacc:	461a      	mov	r2, r3
 800aace:	2100      	movs	r1, #0
 800aad0:	f000 fc5a 	bl	800b388 <memset>
    uint8_t *pStr = Str_Array;
 800aad4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aad8:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 800aadc:	4b46      	ldr	r3, [pc, #280]	@ (800abf8 <Paint_DrawNum+0x190>)
 800aade:	889b      	ldrh	r3, [r3, #4]
 800aae0:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 800aae4:	f2a2 220a 	subw	r2, r2, #522	@ 0x20a
 800aae8:	8812      	ldrh	r2, [r2, #0]
 800aaea:	429a      	cmp	r2, r3
 800aaec:	d808      	bhi.n	800ab00 <Paint_DrawNum+0x98>
 800aaee:	4b42      	ldr	r3, [pc, #264]	@ (800abf8 <Paint_DrawNum+0x190>)
 800aaf0:	88db      	ldrh	r3, [r3, #6]
 800aaf2:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 800aaf6:	f5a2 7203 	sub.w	r2, r2, #524	@ 0x20c
 800aafa:	8812      	ldrh	r2, [r2, #0]
 800aafc:	429a      	cmp	r2, r3
 800aafe:	d903      	bls.n	800ab08 <Paint_DrawNum+0xa0>
        Debug("Paint_DisNum Input exceeds the normal display range\r\n");
 800ab00:	483e      	ldr	r0, [pc, #248]	@ (800abfc <Paint_DrawNum+0x194>)
 800ab02:	f000 fb61 	bl	800b1c8 <puts>
 800ab06:	e072      	b.n	800abee <Paint_DrawNum+0x186>
        return;
    }

    //Converts a number to a string
    do {
        Num_Array[Num_Bit] = Nummber % 10 + '0';
 800ab08:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800ab0c:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800ab10:	681a      	ldr	r2, [r3, #0]
 800ab12:	4b3b      	ldr	r3, [pc, #236]	@ (800ac00 <Paint_DrawNum+0x198>)
 800ab14:	fb83 1302 	smull	r1, r3, r3, r2
 800ab18:	1099      	asrs	r1, r3, #2
 800ab1a:	17d3      	asrs	r3, r2, #31
 800ab1c:	1ac9      	subs	r1, r1, r3
 800ab1e:	460b      	mov	r3, r1
 800ab20:	009b      	lsls	r3, r3, #2
 800ab22:	440b      	add	r3, r1
 800ab24:	005b      	lsls	r3, r3, #1
 800ab26:	1ad1      	subs	r1, r2, r3
 800ab28:	b2ca      	uxtb	r2, r1
 800ab2a:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	@ 0x216
 800ab2e:	3230      	adds	r2, #48	@ 0x30
 800ab30:	b2d1      	uxtb	r1, r2
 800ab32:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 800ab36:	f5a2 7202 	sub.w	r2, r2, #520	@ 0x208
 800ab3a:	54d1      	strb	r1, [r2, r3]
        Num_Bit++;
 800ab3c:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	@ 0x216
 800ab40:	b29b      	uxth	r3, r3
 800ab42:	3301      	adds	r3, #1
 800ab44:	b29b      	uxth	r3, r3
 800ab46:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
        Nummber /= 10;
 800ab4a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800ab4e:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 800ab52:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800ab56:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	4928      	ldr	r1, [pc, #160]	@ (800ac00 <Paint_DrawNum+0x198>)
 800ab5e:	fb81 0103 	smull	r0, r1, r1, r3
 800ab62:	1089      	asrs	r1, r1, #2
 800ab64:	17db      	asrs	r3, r3, #31
 800ab66:	1acb      	subs	r3, r1, r3
 800ab68:	6013      	str	r3, [r2, #0]
    } while(Nummber);
 800ab6a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800ab6e:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d1c7      	bne.n	800ab08 <Paint_DrawNum+0xa0>
    

    //The string is inverted
    while (Num_Bit > 0) {
 800ab78:	e01c      	b.n	800abb4 <Paint_DrawNum+0x14c>
        Str_Array[Str_Bit] = Num_Array[Num_Bit - 1];
 800ab7a:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	@ 0x216
 800ab7e:	1e5a      	subs	r2, r3, #1
 800ab80:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	@ 0x214
 800ab84:	f507 7106 	add.w	r1, r7, #536	@ 0x218
 800ab88:	f5a1 7102 	sub.w	r1, r1, #520	@ 0x208
 800ab8c:	5c89      	ldrb	r1, [r1, r2]
 800ab8e:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 800ab92:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800ab96:	54d1      	strb	r1, [r2, r3]
        Str_Bit ++;
 800ab98:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	@ 0x214
 800ab9c:	b29b      	uxth	r3, r3
 800ab9e:	3301      	adds	r3, #1
 800aba0:	b29b      	uxth	r3, r3
 800aba2:	f8a7 3214 	strh.w	r3, [r7, #532]	@ 0x214
        Num_Bit --;
 800aba6:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	@ 0x216
 800abaa:	b29b      	uxth	r3, r3
 800abac:	3b01      	subs	r3, #1
 800abae:	b29b      	uxth	r3, r3
 800abb0:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
    while (Num_Bit > 0) {
 800abb4:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	@ 0x216
 800abb8:	2b00      	cmp	r3, #0
 800abba:	dcde      	bgt.n	800ab7a <Paint_DrawNum+0x112>
    }

    //show
    Paint_DrawString_EN(Xpoint, Ypoint, (const char*)pStr, Font, Color_Background, Color_Foreground);
 800abbc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800abc0:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800abc4:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 800abc8:	f5a2 7203 	sub.w	r2, r2, #524	@ 0x20c
 800abcc:	8811      	ldrh	r1, [r2, #0]
 800abce:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 800abd2:	f2a2 220a 	subw	r2, r2, #522	@ 0x20a
 800abd6:	8810      	ldrh	r0, [r2, #0]
 800abd8:	f8b7 2228 	ldrh.w	r2, [r7, #552]	@ 0x228
 800abdc:	9201      	str	r2, [sp, #4]
 800abde:	f8b7 222c 	ldrh.w	r2, [r7, #556]	@ 0x22c
 800abe2:	9200      	str	r2, [sp, #0]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 800abea:	f7ff fee9 	bl	800a9c0 <Paint_DrawString_EN>
}
 800abee:	f507 7707 	add.w	r7, r7, #540	@ 0x21c
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bd90      	pop	{r4, r7, pc}
 800abf6:	bf00      	nop
 800abf8:	20000558 	.word	0x20000558
 800abfc:	0800c198 	.word	0x0800c198
 800ac00:	66666667 	.word	0x66666667

0800ac04 <Paint_DrawTime>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawTime(UWORD Xstart, UWORD Ystart, PAINT_TIME *pTime, sFONT* Font,
                    UWORD Color_Foreground, UWORD Color_Background)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b08a      	sub	sp, #40	@ 0x28
 800ac08:	af02      	add	r7, sp, #8
 800ac0a:	60ba      	str	r2, [r7, #8]
 800ac0c:	607b      	str	r3, [r7, #4]
 800ac0e:	4603      	mov	r3, r0
 800ac10:	81fb      	strh	r3, [r7, #14]
 800ac12:	460b      	mov	r3, r1
 800ac14:	81bb      	strh	r3, [r7, #12]
    uint8_t value[10] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};
 800ac16:	4a76      	ldr	r2, [pc, #472]	@ (800adf0 <Paint_DrawTime+0x1ec>)
 800ac18:	f107 0314 	add.w	r3, r7, #20
 800ac1c:	ca07      	ldmia	r2, {r0, r1, r2}
 800ac1e:	c303      	stmia	r3!, {r0, r1}
 800ac20:	801a      	strh	r2, [r3, #0]

    UWORD Dx = Font->Width;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	889b      	ldrh	r3, [r3, #4]
 800ac26:	83fb      	strh	r3, [r7, #30]

    //Write data into the cache
    Paint_DrawChar(Xstart                           , Ystart, value[pTime->Hour / 10], Font, Color_Background, Color_Foreground);
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	791b      	ldrb	r3, [r3, #4]
 800ac2c:	4a71      	ldr	r2, [pc, #452]	@ (800adf4 <Paint_DrawTime+0x1f0>)
 800ac2e:	fba2 2303 	umull	r2, r3, r2, r3
 800ac32:	08db      	lsrs	r3, r3, #3
 800ac34:	b2db      	uxtb	r3, r3
 800ac36:	3320      	adds	r3, #32
 800ac38:	443b      	add	r3, r7
 800ac3a:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800ac3e:	89b9      	ldrh	r1, [r7, #12]
 800ac40:	89f8      	ldrh	r0, [r7, #14]
 800ac42:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ac44:	9301      	str	r3, [sp, #4]
 800ac46:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800ac48:	9300      	str	r3, [sp, #0]
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	f7ff fe10 	bl	800a870 <Paint_DrawChar>
    Paint_DrawChar(Xstart + Dx                      , Ystart, value[pTime->Hour % 10], Font, Color_Background, Color_Foreground);
 800ac50:	89fa      	ldrh	r2, [r7, #14]
 800ac52:	8bfb      	ldrh	r3, [r7, #30]
 800ac54:	4413      	add	r3, r2
 800ac56:	b298      	uxth	r0, r3
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	791a      	ldrb	r2, [r3, #4]
 800ac5c:	4b65      	ldr	r3, [pc, #404]	@ (800adf4 <Paint_DrawTime+0x1f0>)
 800ac5e:	fba3 1302 	umull	r1, r3, r3, r2
 800ac62:	08d9      	lsrs	r1, r3, #3
 800ac64:	460b      	mov	r3, r1
 800ac66:	009b      	lsls	r3, r3, #2
 800ac68:	440b      	add	r3, r1
 800ac6a:	005b      	lsls	r3, r3, #1
 800ac6c:	1ad3      	subs	r3, r2, r3
 800ac6e:	b2db      	uxtb	r3, r3
 800ac70:	3320      	adds	r3, #32
 800ac72:	443b      	add	r3, r7
 800ac74:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800ac78:	89b9      	ldrh	r1, [r7, #12]
 800ac7a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ac7c:	9301      	str	r3, [sp, #4]
 800ac7e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800ac80:	9300      	str	r3, [sp, #0]
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	f7ff fdf4 	bl	800a870 <Paint_DrawChar>
    Paint_DrawChar(Xstart + Dx  + Dx / 4 + Dx / 2   , Ystart, ':'                    , Font, Color_Background, Color_Foreground);
 800ac88:	89fa      	ldrh	r2, [r7, #14]
 800ac8a:	8bfb      	ldrh	r3, [r7, #30]
 800ac8c:	4413      	add	r3, r2
 800ac8e:	b29a      	uxth	r2, r3
 800ac90:	8bfb      	ldrh	r3, [r7, #30]
 800ac92:	089b      	lsrs	r3, r3, #2
 800ac94:	b29b      	uxth	r3, r3
 800ac96:	4413      	add	r3, r2
 800ac98:	b29a      	uxth	r2, r3
 800ac9a:	8bfb      	ldrh	r3, [r7, #30]
 800ac9c:	085b      	lsrs	r3, r3, #1
 800ac9e:	b29b      	uxth	r3, r3
 800aca0:	4413      	add	r3, r2
 800aca2:	b298      	uxth	r0, r3
 800aca4:	89b9      	ldrh	r1, [r7, #12]
 800aca6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800aca8:	9301      	str	r3, [sp, #4]
 800acaa:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800acac:	9300      	str	r3, [sp, #0]
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	223a      	movs	r2, #58	@ 0x3a
 800acb2:	f7ff fddd 	bl	800a870 <Paint_DrawChar>
    Paint_DrawChar(Xstart + Dx * 2 + Dx / 2         , Ystart, value[pTime->Min / 10] , Font, Color_Background, Color_Foreground);
 800acb6:	8bfb      	ldrh	r3, [r7, #30]
 800acb8:	005b      	lsls	r3, r3, #1
 800acba:	b29a      	uxth	r2, r3
 800acbc:	89fb      	ldrh	r3, [r7, #14]
 800acbe:	4413      	add	r3, r2
 800acc0:	b29a      	uxth	r2, r3
 800acc2:	8bfb      	ldrh	r3, [r7, #30]
 800acc4:	085b      	lsrs	r3, r3, #1
 800acc6:	b29b      	uxth	r3, r3
 800acc8:	4413      	add	r3, r2
 800acca:	b298      	uxth	r0, r3
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	795b      	ldrb	r3, [r3, #5]
 800acd0:	4a48      	ldr	r2, [pc, #288]	@ (800adf4 <Paint_DrawTime+0x1f0>)
 800acd2:	fba2 2303 	umull	r2, r3, r2, r3
 800acd6:	08db      	lsrs	r3, r3, #3
 800acd8:	b2db      	uxtb	r3, r3
 800acda:	3320      	adds	r3, #32
 800acdc:	443b      	add	r3, r7
 800acde:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800ace2:	89b9      	ldrh	r1, [r7, #12]
 800ace4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ace6:	9301      	str	r3, [sp, #4]
 800ace8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800acea:	9300      	str	r3, [sp, #0]
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	f7ff fdbf 	bl	800a870 <Paint_DrawChar>
    Paint_DrawChar(Xstart + Dx * 3 + Dx / 2         , Ystart, value[pTime->Min % 10] , Font, Color_Background, Color_Foreground);
 800acf2:	8bfb      	ldrh	r3, [r7, #30]
 800acf4:	461a      	mov	r2, r3
 800acf6:	0052      	lsls	r2, r2, #1
 800acf8:	4413      	add	r3, r2
 800acfa:	b29a      	uxth	r2, r3
 800acfc:	89fb      	ldrh	r3, [r7, #14]
 800acfe:	4413      	add	r3, r2
 800ad00:	b29a      	uxth	r2, r3
 800ad02:	8bfb      	ldrh	r3, [r7, #30]
 800ad04:	085b      	lsrs	r3, r3, #1
 800ad06:	b29b      	uxth	r3, r3
 800ad08:	4413      	add	r3, r2
 800ad0a:	b298      	uxth	r0, r3
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	795a      	ldrb	r2, [r3, #5]
 800ad10:	4b38      	ldr	r3, [pc, #224]	@ (800adf4 <Paint_DrawTime+0x1f0>)
 800ad12:	fba3 1302 	umull	r1, r3, r3, r2
 800ad16:	08d9      	lsrs	r1, r3, #3
 800ad18:	460b      	mov	r3, r1
 800ad1a:	009b      	lsls	r3, r3, #2
 800ad1c:	440b      	add	r3, r1
 800ad1e:	005b      	lsls	r3, r3, #1
 800ad20:	1ad3      	subs	r3, r2, r3
 800ad22:	b2db      	uxtb	r3, r3
 800ad24:	3320      	adds	r3, #32
 800ad26:	443b      	add	r3, r7
 800ad28:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800ad2c:	89b9      	ldrh	r1, [r7, #12]
 800ad2e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ad30:	9301      	str	r3, [sp, #4]
 800ad32:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800ad34:	9300      	str	r3, [sp, #0]
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f7ff fd9a 	bl	800a870 <Paint_DrawChar>
    Paint_DrawChar(Xstart + Dx * 4 + Dx / 2 - Dx / 4, Ystart, ':'                    , Font, Color_Background, Color_Foreground);
 800ad3c:	8bfb      	ldrh	r3, [r7, #30]
 800ad3e:	009b      	lsls	r3, r3, #2
 800ad40:	b29a      	uxth	r2, r3
 800ad42:	89fb      	ldrh	r3, [r7, #14]
 800ad44:	4413      	add	r3, r2
 800ad46:	b29a      	uxth	r2, r3
 800ad48:	8bfb      	ldrh	r3, [r7, #30]
 800ad4a:	085b      	lsrs	r3, r3, #1
 800ad4c:	b29b      	uxth	r3, r3
 800ad4e:	4413      	add	r3, r2
 800ad50:	b29a      	uxth	r2, r3
 800ad52:	8bfb      	ldrh	r3, [r7, #30]
 800ad54:	089b      	lsrs	r3, r3, #2
 800ad56:	b29b      	uxth	r3, r3
 800ad58:	1ad3      	subs	r3, r2, r3
 800ad5a:	b298      	uxth	r0, r3
 800ad5c:	89b9      	ldrh	r1, [r7, #12]
 800ad5e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ad60:	9301      	str	r3, [sp, #4]
 800ad62:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800ad64:	9300      	str	r3, [sp, #0]
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	223a      	movs	r2, #58	@ 0x3a
 800ad6a:	f7ff fd81 	bl	800a870 <Paint_DrawChar>
    Paint_DrawChar(Xstart + Dx * 5                  , Ystart, value[pTime->Sec / 10] , Font, Color_Background, Color_Foreground);
 800ad6e:	8bfb      	ldrh	r3, [r7, #30]
 800ad70:	461a      	mov	r2, r3
 800ad72:	0092      	lsls	r2, r2, #2
 800ad74:	4413      	add	r3, r2
 800ad76:	b29a      	uxth	r2, r3
 800ad78:	89fb      	ldrh	r3, [r7, #14]
 800ad7a:	4413      	add	r3, r2
 800ad7c:	b298      	uxth	r0, r3
 800ad7e:	68bb      	ldr	r3, [r7, #8]
 800ad80:	799b      	ldrb	r3, [r3, #6]
 800ad82:	4a1c      	ldr	r2, [pc, #112]	@ (800adf4 <Paint_DrawTime+0x1f0>)
 800ad84:	fba2 2303 	umull	r2, r3, r2, r3
 800ad88:	08db      	lsrs	r3, r3, #3
 800ad8a:	b2db      	uxtb	r3, r3
 800ad8c:	3320      	adds	r3, #32
 800ad8e:	443b      	add	r3, r7
 800ad90:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800ad94:	89b9      	ldrh	r1, [r7, #12]
 800ad96:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ad98:	9301      	str	r3, [sp, #4]
 800ad9a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800ad9c:	9300      	str	r3, [sp, #0]
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	f7ff fd66 	bl	800a870 <Paint_DrawChar>
    Paint_DrawChar(Xstart + Dx * 6                  , Ystart, value[pTime->Sec % 10] , Font, Color_Background, Color_Foreground);
 800ada4:	8bfb      	ldrh	r3, [r7, #30]
 800ada6:	461a      	mov	r2, r3
 800ada8:	0052      	lsls	r2, r2, #1
 800adaa:	4413      	add	r3, r2
 800adac:	005b      	lsls	r3, r3, #1
 800adae:	b29a      	uxth	r2, r3
 800adb0:	89fb      	ldrh	r3, [r7, #14]
 800adb2:	4413      	add	r3, r2
 800adb4:	b298      	uxth	r0, r3
 800adb6:	68bb      	ldr	r3, [r7, #8]
 800adb8:	799a      	ldrb	r2, [r3, #6]
 800adba:	4b0e      	ldr	r3, [pc, #56]	@ (800adf4 <Paint_DrawTime+0x1f0>)
 800adbc:	fba3 1302 	umull	r1, r3, r3, r2
 800adc0:	08d9      	lsrs	r1, r3, #3
 800adc2:	460b      	mov	r3, r1
 800adc4:	009b      	lsls	r3, r3, #2
 800adc6:	440b      	add	r3, r1
 800adc8:	005b      	lsls	r3, r3, #1
 800adca:	1ad3      	subs	r3, r2, r3
 800adcc:	b2db      	uxtb	r3, r3
 800adce:	3320      	adds	r3, #32
 800add0:	443b      	add	r3, r7
 800add2:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800add6:	89b9      	ldrh	r1, [r7, #12]
 800add8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800adda:	9301      	str	r3, [sp, #4]
 800addc:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800adde:	9300      	str	r3, [sp, #0]
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	f7ff fd45 	bl	800a870 <Paint_DrawChar>
}
 800ade6:	bf00      	nop
 800ade8:	3720      	adds	r7, #32
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}
 800adee:	bf00      	nop
 800adf0:	0800c1d4 	.word	0x0800c1d4
 800adf4:	cccccccd 	.word	0xcccccccd

0800adf8 <malloc>:
 800adf8:	4b02      	ldr	r3, [pc, #8]	@ (800ae04 <malloc+0xc>)
 800adfa:	4601      	mov	r1, r0
 800adfc:	6818      	ldr	r0, [r3, #0]
 800adfe:	f000 b82d 	b.w	800ae5c <_malloc_r>
 800ae02:	bf00      	nop
 800ae04:	20000298 	.word	0x20000298

0800ae08 <free>:
 800ae08:	4b02      	ldr	r3, [pc, #8]	@ (800ae14 <free+0xc>)
 800ae0a:	4601      	mov	r1, r0
 800ae0c:	6818      	ldr	r0, [r3, #0]
 800ae0e:	f000 bb47 	b.w	800b4a0 <_free_r>
 800ae12:	bf00      	nop
 800ae14:	20000298 	.word	0x20000298

0800ae18 <sbrk_aligned>:
 800ae18:	b570      	push	{r4, r5, r6, lr}
 800ae1a:	4e0f      	ldr	r6, [pc, #60]	@ (800ae58 <sbrk_aligned+0x40>)
 800ae1c:	460c      	mov	r4, r1
 800ae1e:	6831      	ldr	r1, [r6, #0]
 800ae20:	4605      	mov	r5, r0
 800ae22:	b911      	cbnz	r1, 800ae2a <sbrk_aligned+0x12>
 800ae24:	f000 faec 	bl	800b400 <_sbrk_r>
 800ae28:	6030      	str	r0, [r6, #0]
 800ae2a:	4621      	mov	r1, r4
 800ae2c:	4628      	mov	r0, r5
 800ae2e:	f000 fae7 	bl	800b400 <_sbrk_r>
 800ae32:	1c43      	adds	r3, r0, #1
 800ae34:	d103      	bne.n	800ae3e <sbrk_aligned+0x26>
 800ae36:	f04f 34ff 	mov.w	r4, #4294967295
 800ae3a:	4620      	mov	r0, r4
 800ae3c:	bd70      	pop	{r4, r5, r6, pc}
 800ae3e:	1cc4      	adds	r4, r0, #3
 800ae40:	f024 0403 	bic.w	r4, r4, #3
 800ae44:	42a0      	cmp	r0, r4
 800ae46:	d0f8      	beq.n	800ae3a <sbrk_aligned+0x22>
 800ae48:	1a21      	subs	r1, r4, r0
 800ae4a:	4628      	mov	r0, r5
 800ae4c:	f000 fad8 	bl	800b400 <_sbrk_r>
 800ae50:	3001      	adds	r0, #1
 800ae52:	d1f2      	bne.n	800ae3a <sbrk_aligned+0x22>
 800ae54:	e7ef      	b.n	800ae36 <sbrk_aligned+0x1e>
 800ae56:	bf00      	nop
 800ae58:	20000570 	.word	0x20000570

0800ae5c <_malloc_r>:
 800ae5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae60:	1ccd      	adds	r5, r1, #3
 800ae62:	f025 0503 	bic.w	r5, r5, #3
 800ae66:	3508      	adds	r5, #8
 800ae68:	2d0c      	cmp	r5, #12
 800ae6a:	bf38      	it	cc
 800ae6c:	250c      	movcc	r5, #12
 800ae6e:	2d00      	cmp	r5, #0
 800ae70:	4606      	mov	r6, r0
 800ae72:	db01      	blt.n	800ae78 <_malloc_r+0x1c>
 800ae74:	42a9      	cmp	r1, r5
 800ae76:	d904      	bls.n	800ae82 <_malloc_r+0x26>
 800ae78:	230c      	movs	r3, #12
 800ae7a:	6033      	str	r3, [r6, #0]
 800ae7c:	2000      	movs	r0, #0
 800ae7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae82:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800af58 <_malloc_r+0xfc>
 800ae86:	f000 f869 	bl	800af5c <__malloc_lock>
 800ae8a:	f8d8 3000 	ldr.w	r3, [r8]
 800ae8e:	461c      	mov	r4, r3
 800ae90:	bb44      	cbnz	r4, 800aee4 <_malloc_r+0x88>
 800ae92:	4629      	mov	r1, r5
 800ae94:	4630      	mov	r0, r6
 800ae96:	f7ff ffbf 	bl	800ae18 <sbrk_aligned>
 800ae9a:	1c43      	adds	r3, r0, #1
 800ae9c:	4604      	mov	r4, r0
 800ae9e:	d158      	bne.n	800af52 <_malloc_r+0xf6>
 800aea0:	f8d8 4000 	ldr.w	r4, [r8]
 800aea4:	4627      	mov	r7, r4
 800aea6:	2f00      	cmp	r7, #0
 800aea8:	d143      	bne.n	800af32 <_malloc_r+0xd6>
 800aeaa:	2c00      	cmp	r4, #0
 800aeac:	d04b      	beq.n	800af46 <_malloc_r+0xea>
 800aeae:	6823      	ldr	r3, [r4, #0]
 800aeb0:	4639      	mov	r1, r7
 800aeb2:	4630      	mov	r0, r6
 800aeb4:	eb04 0903 	add.w	r9, r4, r3
 800aeb8:	f000 faa2 	bl	800b400 <_sbrk_r>
 800aebc:	4581      	cmp	r9, r0
 800aebe:	d142      	bne.n	800af46 <_malloc_r+0xea>
 800aec0:	6821      	ldr	r1, [r4, #0]
 800aec2:	4630      	mov	r0, r6
 800aec4:	1a6d      	subs	r5, r5, r1
 800aec6:	4629      	mov	r1, r5
 800aec8:	f7ff ffa6 	bl	800ae18 <sbrk_aligned>
 800aecc:	3001      	adds	r0, #1
 800aece:	d03a      	beq.n	800af46 <_malloc_r+0xea>
 800aed0:	6823      	ldr	r3, [r4, #0]
 800aed2:	442b      	add	r3, r5
 800aed4:	6023      	str	r3, [r4, #0]
 800aed6:	f8d8 3000 	ldr.w	r3, [r8]
 800aeda:	685a      	ldr	r2, [r3, #4]
 800aedc:	bb62      	cbnz	r2, 800af38 <_malloc_r+0xdc>
 800aede:	f8c8 7000 	str.w	r7, [r8]
 800aee2:	e00f      	b.n	800af04 <_malloc_r+0xa8>
 800aee4:	6822      	ldr	r2, [r4, #0]
 800aee6:	1b52      	subs	r2, r2, r5
 800aee8:	d420      	bmi.n	800af2c <_malloc_r+0xd0>
 800aeea:	2a0b      	cmp	r2, #11
 800aeec:	d917      	bls.n	800af1e <_malloc_r+0xc2>
 800aeee:	1961      	adds	r1, r4, r5
 800aef0:	42a3      	cmp	r3, r4
 800aef2:	6025      	str	r5, [r4, #0]
 800aef4:	bf18      	it	ne
 800aef6:	6059      	strne	r1, [r3, #4]
 800aef8:	6863      	ldr	r3, [r4, #4]
 800aefa:	bf08      	it	eq
 800aefc:	f8c8 1000 	streq.w	r1, [r8]
 800af00:	5162      	str	r2, [r4, r5]
 800af02:	604b      	str	r3, [r1, #4]
 800af04:	4630      	mov	r0, r6
 800af06:	f000 f82f 	bl	800af68 <__malloc_unlock>
 800af0a:	f104 000b 	add.w	r0, r4, #11
 800af0e:	1d23      	adds	r3, r4, #4
 800af10:	f020 0007 	bic.w	r0, r0, #7
 800af14:	1ac2      	subs	r2, r0, r3
 800af16:	bf1c      	itt	ne
 800af18:	1a1b      	subne	r3, r3, r0
 800af1a:	50a3      	strne	r3, [r4, r2]
 800af1c:	e7af      	b.n	800ae7e <_malloc_r+0x22>
 800af1e:	6862      	ldr	r2, [r4, #4]
 800af20:	42a3      	cmp	r3, r4
 800af22:	bf0c      	ite	eq
 800af24:	f8c8 2000 	streq.w	r2, [r8]
 800af28:	605a      	strne	r2, [r3, #4]
 800af2a:	e7eb      	b.n	800af04 <_malloc_r+0xa8>
 800af2c:	4623      	mov	r3, r4
 800af2e:	6864      	ldr	r4, [r4, #4]
 800af30:	e7ae      	b.n	800ae90 <_malloc_r+0x34>
 800af32:	463c      	mov	r4, r7
 800af34:	687f      	ldr	r7, [r7, #4]
 800af36:	e7b6      	b.n	800aea6 <_malloc_r+0x4a>
 800af38:	461a      	mov	r2, r3
 800af3a:	685b      	ldr	r3, [r3, #4]
 800af3c:	42a3      	cmp	r3, r4
 800af3e:	d1fb      	bne.n	800af38 <_malloc_r+0xdc>
 800af40:	2300      	movs	r3, #0
 800af42:	6053      	str	r3, [r2, #4]
 800af44:	e7de      	b.n	800af04 <_malloc_r+0xa8>
 800af46:	230c      	movs	r3, #12
 800af48:	4630      	mov	r0, r6
 800af4a:	6033      	str	r3, [r6, #0]
 800af4c:	f000 f80c 	bl	800af68 <__malloc_unlock>
 800af50:	e794      	b.n	800ae7c <_malloc_r+0x20>
 800af52:	6005      	str	r5, [r0, #0]
 800af54:	e7d6      	b.n	800af04 <_malloc_r+0xa8>
 800af56:	bf00      	nop
 800af58:	20000574 	.word	0x20000574

0800af5c <__malloc_lock>:
 800af5c:	4801      	ldr	r0, [pc, #4]	@ (800af64 <__malloc_lock+0x8>)
 800af5e:	f000 ba9c 	b.w	800b49a <__retarget_lock_acquire_recursive>
 800af62:	bf00      	nop
 800af64:	200006b8 	.word	0x200006b8

0800af68 <__malloc_unlock>:
 800af68:	4801      	ldr	r0, [pc, #4]	@ (800af70 <__malloc_unlock+0x8>)
 800af6a:	f000 ba97 	b.w	800b49c <__retarget_lock_release_recursive>
 800af6e:	bf00      	nop
 800af70:	200006b8 	.word	0x200006b8

0800af74 <std>:
 800af74:	2300      	movs	r3, #0
 800af76:	b510      	push	{r4, lr}
 800af78:	4604      	mov	r4, r0
 800af7a:	e9c0 3300 	strd	r3, r3, [r0]
 800af7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800af82:	6083      	str	r3, [r0, #8]
 800af84:	8181      	strh	r1, [r0, #12]
 800af86:	6643      	str	r3, [r0, #100]	@ 0x64
 800af88:	81c2      	strh	r2, [r0, #14]
 800af8a:	6183      	str	r3, [r0, #24]
 800af8c:	4619      	mov	r1, r3
 800af8e:	2208      	movs	r2, #8
 800af90:	305c      	adds	r0, #92	@ 0x5c
 800af92:	f000 f9f9 	bl	800b388 <memset>
 800af96:	4b0d      	ldr	r3, [pc, #52]	@ (800afcc <std+0x58>)
 800af98:	6224      	str	r4, [r4, #32]
 800af9a:	6263      	str	r3, [r4, #36]	@ 0x24
 800af9c:	4b0c      	ldr	r3, [pc, #48]	@ (800afd0 <std+0x5c>)
 800af9e:	62a3      	str	r3, [r4, #40]	@ 0x28
 800afa0:	4b0c      	ldr	r3, [pc, #48]	@ (800afd4 <std+0x60>)
 800afa2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800afa4:	4b0c      	ldr	r3, [pc, #48]	@ (800afd8 <std+0x64>)
 800afa6:	6323      	str	r3, [r4, #48]	@ 0x30
 800afa8:	4b0c      	ldr	r3, [pc, #48]	@ (800afdc <std+0x68>)
 800afaa:	429c      	cmp	r4, r3
 800afac:	d006      	beq.n	800afbc <std+0x48>
 800afae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800afb2:	4294      	cmp	r4, r2
 800afb4:	d002      	beq.n	800afbc <std+0x48>
 800afb6:	33d0      	adds	r3, #208	@ 0xd0
 800afb8:	429c      	cmp	r4, r3
 800afba:	d105      	bne.n	800afc8 <std+0x54>
 800afbc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800afc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afc4:	f000 ba68 	b.w	800b498 <__retarget_lock_init_recursive>
 800afc8:	bd10      	pop	{r4, pc}
 800afca:	bf00      	nop
 800afcc:	0800b1d9 	.word	0x0800b1d9
 800afd0:	0800b1fb 	.word	0x0800b1fb
 800afd4:	0800b233 	.word	0x0800b233
 800afd8:	0800b257 	.word	0x0800b257
 800afdc:	20000578 	.word	0x20000578

0800afe0 <stdio_exit_handler>:
 800afe0:	4a02      	ldr	r2, [pc, #8]	@ (800afec <stdio_exit_handler+0xc>)
 800afe2:	4903      	ldr	r1, [pc, #12]	@ (800aff0 <stdio_exit_handler+0x10>)
 800afe4:	4803      	ldr	r0, [pc, #12]	@ (800aff4 <stdio_exit_handler+0x14>)
 800afe6:	f000 b869 	b.w	800b0bc <_fwalk_sglue>
 800afea:	bf00      	nop
 800afec:	2000028c 	.word	0x2000028c
 800aff0:	0800bbd1 	.word	0x0800bbd1
 800aff4:	2000029c 	.word	0x2000029c

0800aff8 <cleanup_stdio>:
 800aff8:	6841      	ldr	r1, [r0, #4]
 800affa:	4b0c      	ldr	r3, [pc, #48]	@ (800b02c <cleanup_stdio+0x34>)
 800affc:	b510      	push	{r4, lr}
 800affe:	4299      	cmp	r1, r3
 800b000:	4604      	mov	r4, r0
 800b002:	d001      	beq.n	800b008 <cleanup_stdio+0x10>
 800b004:	f000 fde4 	bl	800bbd0 <_fflush_r>
 800b008:	68a1      	ldr	r1, [r4, #8]
 800b00a:	4b09      	ldr	r3, [pc, #36]	@ (800b030 <cleanup_stdio+0x38>)
 800b00c:	4299      	cmp	r1, r3
 800b00e:	d002      	beq.n	800b016 <cleanup_stdio+0x1e>
 800b010:	4620      	mov	r0, r4
 800b012:	f000 fddd 	bl	800bbd0 <_fflush_r>
 800b016:	68e1      	ldr	r1, [r4, #12]
 800b018:	4b06      	ldr	r3, [pc, #24]	@ (800b034 <cleanup_stdio+0x3c>)
 800b01a:	4299      	cmp	r1, r3
 800b01c:	d004      	beq.n	800b028 <cleanup_stdio+0x30>
 800b01e:	4620      	mov	r0, r4
 800b020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b024:	f000 bdd4 	b.w	800bbd0 <_fflush_r>
 800b028:	bd10      	pop	{r4, pc}
 800b02a:	bf00      	nop
 800b02c:	20000578 	.word	0x20000578
 800b030:	200005e0 	.word	0x200005e0
 800b034:	20000648 	.word	0x20000648

0800b038 <global_stdio_init.part.0>:
 800b038:	b510      	push	{r4, lr}
 800b03a:	4b0b      	ldr	r3, [pc, #44]	@ (800b068 <global_stdio_init.part.0+0x30>)
 800b03c:	4c0b      	ldr	r4, [pc, #44]	@ (800b06c <global_stdio_init.part.0+0x34>)
 800b03e:	4a0c      	ldr	r2, [pc, #48]	@ (800b070 <global_stdio_init.part.0+0x38>)
 800b040:	4620      	mov	r0, r4
 800b042:	601a      	str	r2, [r3, #0]
 800b044:	2104      	movs	r1, #4
 800b046:	2200      	movs	r2, #0
 800b048:	f7ff ff94 	bl	800af74 <std>
 800b04c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b050:	2201      	movs	r2, #1
 800b052:	2109      	movs	r1, #9
 800b054:	f7ff ff8e 	bl	800af74 <std>
 800b058:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b05c:	2202      	movs	r2, #2
 800b05e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b062:	2112      	movs	r1, #18
 800b064:	f7ff bf86 	b.w	800af74 <std>
 800b068:	200006b0 	.word	0x200006b0
 800b06c:	20000578 	.word	0x20000578
 800b070:	0800afe1 	.word	0x0800afe1

0800b074 <__sfp_lock_acquire>:
 800b074:	4801      	ldr	r0, [pc, #4]	@ (800b07c <__sfp_lock_acquire+0x8>)
 800b076:	f000 ba10 	b.w	800b49a <__retarget_lock_acquire_recursive>
 800b07a:	bf00      	nop
 800b07c:	200006b9 	.word	0x200006b9

0800b080 <__sfp_lock_release>:
 800b080:	4801      	ldr	r0, [pc, #4]	@ (800b088 <__sfp_lock_release+0x8>)
 800b082:	f000 ba0b 	b.w	800b49c <__retarget_lock_release_recursive>
 800b086:	bf00      	nop
 800b088:	200006b9 	.word	0x200006b9

0800b08c <__sinit>:
 800b08c:	b510      	push	{r4, lr}
 800b08e:	4604      	mov	r4, r0
 800b090:	f7ff fff0 	bl	800b074 <__sfp_lock_acquire>
 800b094:	6a23      	ldr	r3, [r4, #32]
 800b096:	b11b      	cbz	r3, 800b0a0 <__sinit+0x14>
 800b098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b09c:	f7ff bff0 	b.w	800b080 <__sfp_lock_release>
 800b0a0:	4b04      	ldr	r3, [pc, #16]	@ (800b0b4 <__sinit+0x28>)
 800b0a2:	6223      	str	r3, [r4, #32]
 800b0a4:	4b04      	ldr	r3, [pc, #16]	@ (800b0b8 <__sinit+0x2c>)
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d1f5      	bne.n	800b098 <__sinit+0xc>
 800b0ac:	f7ff ffc4 	bl	800b038 <global_stdio_init.part.0>
 800b0b0:	e7f2      	b.n	800b098 <__sinit+0xc>
 800b0b2:	bf00      	nop
 800b0b4:	0800aff9 	.word	0x0800aff9
 800b0b8:	200006b0 	.word	0x200006b0

0800b0bc <_fwalk_sglue>:
 800b0bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0c0:	4607      	mov	r7, r0
 800b0c2:	4688      	mov	r8, r1
 800b0c4:	4614      	mov	r4, r2
 800b0c6:	2600      	movs	r6, #0
 800b0c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b0cc:	f1b9 0901 	subs.w	r9, r9, #1
 800b0d0:	d505      	bpl.n	800b0de <_fwalk_sglue+0x22>
 800b0d2:	6824      	ldr	r4, [r4, #0]
 800b0d4:	2c00      	cmp	r4, #0
 800b0d6:	d1f7      	bne.n	800b0c8 <_fwalk_sglue+0xc>
 800b0d8:	4630      	mov	r0, r6
 800b0da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0de:	89ab      	ldrh	r3, [r5, #12]
 800b0e0:	2b01      	cmp	r3, #1
 800b0e2:	d907      	bls.n	800b0f4 <_fwalk_sglue+0x38>
 800b0e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b0e8:	3301      	adds	r3, #1
 800b0ea:	d003      	beq.n	800b0f4 <_fwalk_sglue+0x38>
 800b0ec:	4629      	mov	r1, r5
 800b0ee:	4638      	mov	r0, r7
 800b0f0:	47c0      	blx	r8
 800b0f2:	4306      	orrs	r6, r0
 800b0f4:	3568      	adds	r5, #104	@ 0x68
 800b0f6:	e7e9      	b.n	800b0cc <_fwalk_sglue+0x10>

0800b0f8 <iprintf>:
 800b0f8:	b40f      	push	{r0, r1, r2, r3}
 800b0fa:	b507      	push	{r0, r1, r2, lr}
 800b0fc:	4906      	ldr	r1, [pc, #24]	@ (800b118 <iprintf+0x20>)
 800b0fe:	ab04      	add	r3, sp, #16
 800b100:	6808      	ldr	r0, [r1, #0]
 800b102:	f853 2b04 	ldr.w	r2, [r3], #4
 800b106:	6881      	ldr	r1, [r0, #8]
 800b108:	9301      	str	r3, [sp, #4]
 800b10a:	f000 fa39 	bl	800b580 <_vfiprintf_r>
 800b10e:	b003      	add	sp, #12
 800b110:	f85d eb04 	ldr.w	lr, [sp], #4
 800b114:	b004      	add	sp, #16
 800b116:	4770      	bx	lr
 800b118:	20000298 	.word	0x20000298

0800b11c <_puts_r>:
 800b11c:	6a03      	ldr	r3, [r0, #32]
 800b11e:	b570      	push	{r4, r5, r6, lr}
 800b120:	4605      	mov	r5, r0
 800b122:	460e      	mov	r6, r1
 800b124:	6884      	ldr	r4, [r0, #8]
 800b126:	b90b      	cbnz	r3, 800b12c <_puts_r+0x10>
 800b128:	f7ff ffb0 	bl	800b08c <__sinit>
 800b12c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b12e:	07db      	lsls	r3, r3, #31
 800b130:	d405      	bmi.n	800b13e <_puts_r+0x22>
 800b132:	89a3      	ldrh	r3, [r4, #12]
 800b134:	0598      	lsls	r0, r3, #22
 800b136:	d402      	bmi.n	800b13e <_puts_r+0x22>
 800b138:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b13a:	f000 f9ae 	bl	800b49a <__retarget_lock_acquire_recursive>
 800b13e:	89a3      	ldrh	r3, [r4, #12]
 800b140:	0719      	lsls	r1, r3, #28
 800b142:	d502      	bpl.n	800b14a <_puts_r+0x2e>
 800b144:	6923      	ldr	r3, [r4, #16]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d135      	bne.n	800b1b6 <_puts_r+0x9a>
 800b14a:	4621      	mov	r1, r4
 800b14c:	4628      	mov	r0, r5
 800b14e:	f000 f8c5 	bl	800b2dc <__swsetup_r>
 800b152:	b380      	cbz	r0, 800b1b6 <_puts_r+0x9a>
 800b154:	f04f 35ff 	mov.w	r5, #4294967295
 800b158:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b15a:	07da      	lsls	r2, r3, #31
 800b15c:	d405      	bmi.n	800b16a <_puts_r+0x4e>
 800b15e:	89a3      	ldrh	r3, [r4, #12]
 800b160:	059b      	lsls	r3, r3, #22
 800b162:	d402      	bmi.n	800b16a <_puts_r+0x4e>
 800b164:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b166:	f000 f999 	bl	800b49c <__retarget_lock_release_recursive>
 800b16a:	4628      	mov	r0, r5
 800b16c:	bd70      	pop	{r4, r5, r6, pc}
 800b16e:	2b00      	cmp	r3, #0
 800b170:	da04      	bge.n	800b17c <_puts_r+0x60>
 800b172:	69a2      	ldr	r2, [r4, #24]
 800b174:	429a      	cmp	r2, r3
 800b176:	dc17      	bgt.n	800b1a8 <_puts_r+0x8c>
 800b178:	290a      	cmp	r1, #10
 800b17a:	d015      	beq.n	800b1a8 <_puts_r+0x8c>
 800b17c:	6823      	ldr	r3, [r4, #0]
 800b17e:	1c5a      	adds	r2, r3, #1
 800b180:	6022      	str	r2, [r4, #0]
 800b182:	7019      	strb	r1, [r3, #0]
 800b184:	68a3      	ldr	r3, [r4, #8]
 800b186:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b18a:	3b01      	subs	r3, #1
 800b18c:	60a3      	str	r3, [r4, #8]
 800b18e:	2900      	cmp	r1, #0
 800b190:	d1ed      	bne.n	800b16e <_puts_r+0x52>
 800b192:	2b00      	cmp	r3, #0
 800b194:	da11      	bge.n	800b1ba <_puts_r+0x9e>
 800b196:	4622      	mov	r2, r4
 800b198:	210a      	movs	r1, #10
 800b19a:	4628      	mov	r0, r5
 800b19c:	f000 f85f 	bl	800b25e <__swbuf_r>
 800b1a0:	3001      	adds	r0, #1
 800b1a2:	d0d7      	beq.n	800b154 <_puts_r+0x38>
 800b1a4:	250a      	movs	r5, #10
 800b1a6:	e7d7      	b.n	800b158 <_puts_r+0x3c>
 800b1a8:	4622      	mov	r2, r4
 800b1aa:	4628      	mov	r0, r5
 800b1ac:	f000 f857 	bl	800b25e <__swbuf_r>
 800b1b0:	3001      	adds	r0, #1
 800b1b2:	d1e7      	bne.n	800b184 <_puts_r+0x68>
 800b1b4:	e7ce      	b.n	800b154 <_puts_r+0x38>
 800b1b6:	3e01      	subs	r6, #1
 800b1b8:	e7e4      	b.n	800b184 <_puts_r+0x68>
 800b1ba:	6823      	ldr	r3, [r4, #0]
 800b1bc:	1c5a      	adds	r2, r3, #1
 800b1be:	6022      	str	r2, [r4, #0]
 800b1c0:	220a      	movs	r2, #10
 800b1c2:	701a      	strb	r2, [r3, #0]
 800b1c4:	e7ee      	b.n	800b1a4 <_puts_r+0x88>
	...

0800b1c8 <puts>:
 800b1c8:	4b02      	ldr	r3, [pc, #8]	@ (800b1d4 <puts+0xc>)
 800b1ca:	4601      	mov	r1, r0
 800b1cc:	6818      	ldr	r0, [r3, #0]
 800b1ce:	f7ff bfa5 	b.w	800b11c <_puts_r>
 800b1d2:	bf00      	nop
 800b1d4:	20000298 	.word	0x20000298

0800b1d8 <__sread>:
 800b1d8:	b510      	push	{r4, lr}
 800b1da:	460c      	mov	r4, r1
 800b1dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1e0:	f000 f8fc 	bl	800b3dc <_read_r>
 800b1e4:	2800      	cmp	r0, #0
 800b1e6:	bfab      	itete	ge
 800b1e8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b1ea:	89a3      	ldrhlt	r3, [r4, #12]
 800b1ec:	181b      	addge	r3, r3, r0
 800b1ee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b1f2:	bfac      	ite	ge
 800b1f4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b1f6:	81a3      	strhlt	r3, [r4, #12]
 800b1f8:	bd10      	pop	{r4, pc}

0800b1fa <__swrite>:
 800b1fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1fe:	461f      	mov	r7, r3
 800b200:	898b      	ldrh	r3, [r1, #12]
 800b202:	4605      	mov	r5, r0
 800b204:	05db      	lsls	r3, r3, #23
 800b206:	460c      	mov	r4, r1
 800b208:	4616      	mov	r6, r2
 800b20a:	d505      	bpl.n	800b218 <__swrite+0x1e>
 800b20c:	2302      	movs	r3, #2
 800b20e:	2200      	movs	r2, #0
 800b210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b214:	f000 f8d0 	bl	800b3b8 <_lseek_r>
 800b218:	89a3      	ldrh	r3, [r4, #12]
 800b21a:	4632      	mov	r2, r6
 800b21c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b220:	81a3      	strh	r3, [r4, #12]
 800b222:	4628      	mov	r0, r5
 800b224:	463b      	mov	r3, r7
 800b226:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b22a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b22e:	f000 b8f7 	b.w	800b420 <_write_r>

0800b232 <__sseek>:
 800b232:	b510      	push	{r4, lr}
 800b234:	460c      	mov	r4, r1
 800b236:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b23a:	f000 f8bd 	bl	800b3b8 <_lseek_r>
 800b23e:	1c43      	adds	r3, r0, #1
 800b240:	89a3      	ldrh	r3, [r4, #12]
 800b242:	bf15      	itete	ne
 800b244:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b246:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b24a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b24e:	81a3      	strheq	r3, [r4, #12]
 800b250:	bf18      	it	ne
 800b252:	81a3      	strhne	r3, [r4, #12]
 800b254:	bd10      	pop	{r4, pc}

0800b256 <__sclose>:
 800b256:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b25a:	f000 b89d 	b.w	800b398 <_close_r>

0800b25e <__swbuf_r>:
 800b25e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b260:	460e      	mov	r6, r1
 800b262:	4614      	mov	r4, r2
 800b264:	4605      	mov	r5, r0
 800b266:	b118      	cbz	r0, 800b270 <__swbuf_r+0x12>
 800b268:	6a03      	ldr	r3, [r0, #32]
 800b26a:	b90b      	cbnz	r3, 800b270 <__swbuf_r+0x12>
 800b26c:	f7ff ff0e 	bl	800b08c <__sinit>
 800b270:	69a3      	ldr	r3, [r4, #24]
 800b272:	60a3      	str	r3, [r4, #8]
 800b274:	89a3      	ldrh	r3, [r4, #12]
 800b276:	071a      	lsls	r2, r3, #28
 800b278:	d501      	bpl.n	800b27e <__swbuf_r+0x20>
 800b27a:	6923      	ldr	r3, [r4, #16]
 800b27c:	b943      	cbnz	r3, 800b290 <__swbuf_r+0x32>
 800b27e:	4621      	mov	r1, r4
 800b280:	4628      	mov	r0, r5
 800b282:	f000 f82b 	bl	800b2dc <__swsetup_r>
 800b286:	b118      	cbz	r0, 800b290 <__swbuf_r+0x32>
 800b288:	f04f 37ff 	mov.w	r7, #4294967295
 800b28c:	4638      	mov	r0, r7
 800b28e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b290:	6823      	ldr	r3, [r4, #0]
 800b292:	6922      	ldr	r2, [r4, #16]
 800b294:	b2f6      	uxtb	r6, r6
 800b296:	1a98      	subs	r0, r3, r2
 800b298:	6963      	ldr	r3, [r4, #20]
 800b29a:	4637      	mov	r7, r6
 800b29c:	4283      	cmp	r3, r0
 800b29e:	dc05      	bgt.n	800b2ac <__swbuf_r+0x4e>
 800b2a0:	4621      	mov	r1, r4
 800b2a2:	4628      	mov	r0, r5
 800b2a4:	f000 fc94 	bl	800bbd0 <_fflush_r>
 800b2a8:	2800      	cmp	r0, #0
 800b2aa:	d1ed      	bne.n	800b288 <__swbuf_r+0x2a>
 800b2ac:	68a3      	ldr	r3, [r4, #8]
 800b2ae:	3b01      	subs	r3, #1
 800b2b0:	60a3      	str	r3, [r4, #8]
 800b2b2:	6823      	ldr	r3, [r4, #0]
 800b2b4:	1c5a      	adds	r2, r3, #1
 800b2b6:	6022      	str	r2, [r4, #0]
 800b2b8:	701e      	strb	r6, [r3, #0]
 800b2ba:	6962      	ldr	r2, [r4, #20]
 800b2bc:	1c43      	adds	r3, r0, #1
 800b2be:	429a      	cmp	r2, r3
 800b2c0:	d004      	beq.n	800b2cc <__swbuf_r+0x6e>
 800b2c2:	89a3      	ldrh	r3, [r4, #12]
 800b2c4:	07db      	lsls	r3, r3, #31
 800b2c6:	d5e1      	bpl.n	800b28c <__swbuf_r+0x2e>
 800b2c8:	2e0a      	cmp	r6, #10
 800b2ca:	d1df      	bne.n	800b28c <__swbuf_r+0x2e>
 800b2cc:	4621      	mov	r1, r4
 800b2ce:	4628      	mov	r0, r5
 800b2d0:	f000 fc7e 	bl	800bbd0 <_fflush_r>
 800b2d4:	2800      	cmp	r0, #0
 800b2d6:	d0d9      	beq.n	800b28c <__swbuf_r+0x2e>
 800b2d8:	e7d6      	b.n	800b288 <__swbuf_r+0x2a>
	...

0800b2dc <__swsetup_r>:
 800b2dc:	b538      	push	{r3, r4, r5, lr}
 800b2de:	4b29      	ldr	r3, [pc, #164]	@ (800b384 <__swsetup_r+0xa8>)
 800b2e0:	4605      	mov	r5, r0
 800b2e2:	6818      	ldr	r0, [r3, #0]
 800b2e4:	460c      	mov	r4, r1
 800b2e6:	b118      	cbz	r0, 800b2f0 <__swsetup_r+0x14>
 800b2e8:	6a03      	ldr	r3, [r0, #32]
 800b2ea:	b90b      	cbnz	r3, 800b2f0 <__swsetup_r+0x14>
 800b2ec:	f7ff fece 	bl	800b08c <__sinit>
 800b2f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2f4:	0719      	lsls	r1, r3, #28
 800b2f6:	d422      	bmi.n	800b33e <__swsetup_r+0x62>
 800b2f8:	06da      	lsls	r2, r3, #27
 800b2fa:	d407      	bmi.n	800b30c <__swsetup_r+0x30>
 800b2fc:	2209      	movs	r2, #9
 800b2fe:	602a      	str	r2, [r5, #0]
 800b300:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b304:	f04f 30ff 	mov.w	r0, #4294967295
 800b308:	81a3      	strh	r3, [r4, #12]
 800b30a:	e033      	b.n	800b374 <__swsetup_r+0x98>
 800b30c:	0758      	lsls	r0, r3, #29
 800b30e:	d512      	bpl.n	800b336 <__swsetup_r+0x5a>
 800b310:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b312:	b141      	cbz	r1, 800b326 <__swsetup_r+0x4a>
 800b314:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b318:	4299      	cmp	r1, r3
 800b31a:	d002      	beq.n	800b322 <__swsetup_r+0x46>
 800b31c:	4628      	mov	r0, r5
 800b31e:	f000 f8bf 	bl	800b4a0 <_free_r>
 800b322:	2300      	movs	r3, #0
 800b324:	6363      	str	r3, [r4, #52]	@ 0x34
 800b326:	89a3      	ldrh	r3, [r4, #12]
 800b328:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b32c:	81a3      	strh	r3, [r4, #12]
 800b32e:	2300      	movs	r3, #0
 800b330:	6063      	str	r3, [r4, #4]
 800b332:	6923      	ldr	r3, [r4, #16]
 800b334:	6023      	str	r3, [r4, #0]
 800b336:	89a3      	ldrh	r3, [r4, #12]
 800b338:	f043 0308 	orr.w	r3, r3, #8
 800b33c:	81a3      	strh	r3, [r4, #12]
 800b33e:	6923      	ldr	r3, [r4, #16]
 800b340:	b94b      	cbnz	r3, 800b356 <__swsetup_r+0x7a>
 800b342:	89a3      	ldrh	r3, [r4, #12]
 800b344:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b348:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b34c:	d003      	beq.n	800b356 <__swsetup_r+0x7a>
 800b34e:	4621      	mov	r1, r4
 800b350:	4628      	mov	r0, r5
 800b352:	f000 fc8a 	bl	800bc6a <__smakebuf_r>
 800b356:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b35a:	f013 0201 	ands.w	r2, r3, #1
 800b35e:	d00a      	beq.n	800b376 <__swsetup_r+0x9a>
 800b360:	2200      	movs	r2, #0
 800b362:	60a2      	str	r2, [r4, #8]
 800b364:	6962      	ldr	r2, [r4, #20]
 800b366:	4252      	negs	r2, r2
 800b368:	61a2      	str	r2, [r4, #24]
 800b36a:	6922      	ldr	r2, [r4, #16]
 800b36c:	b942      	cbnz	r2, 800b380 <__swsetup_r+0xa4>
 800b36e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b372:	d1c5      	bne.n	800b300 <__swsetup_r+0x24>
 800b374:	bd38      	pop	{r3, r4, r5, pc}
 800b376:	0799      	lsls	r1, r3, #30
 800b378:	bf58      	it	pl
 800b37a:	6962      	ldrpl	r2, [r4, #20]
 800b37c:	60a2      	str	r2, [r4, #8]
 800b37e:	e7f4      	b.n	800b36a <__swsetup_r+0x8e>
 800b380:	2000      	movs	r0, #0
 800b382:	e7f7      	b.n	800b374 <__swsetup_r+0x98>
 800b384:	20000298 	.word	0x20000298

0800b388 <memset>:
 800b388:	4603      	mov	r3, r0
 800b38a:	4402      	add	r2, r0
 800b38c:	4293      	cmp	r3, r2
 800b38e:	d100      	bne.n	800b392 <memset+0xa>
 800b390:	4770      	bx	lr
 800b392:	f803 1b01 	strb.w	r1, [r3], #1
 800b396:	e7f9      	b.n	800b38c <memset+0x4>

0800b398 <_close_r>:
 800b398:	b538      	push	{r3, r4, r5, lr}
 800b39a:	2300      	movs	r3, #0
 800b39c:	4d05      	ldr	r5, [pc, #20]	@ (800b3b4 <_close_r+0x1c>)
 800b39e:	4604      	mov	r4, r0
 800b3a0:	4608      	mov	r0, r1
 800b3a2:	602b      	str	r3, [r5, #0]
 800b3a4:	f7f7 f9af 	bl	8002706 <_close>
 800b3a8:	1c43      	adds	r3, r0, #1
 800b3aa:	d102      	bne.n	800b3b2 <_close_r+0x1a>
 800b3ac:	682b      	ldr	r3, [r5, #0]
 800b3ae:	b103      	cbz	r3, 800b3b2 <_close_r+0x1a>
 800b3b0:	6023      	str	r3, [r4, #0]
 800b3b2:	bd38      	pop	{r3, r4, r5, pc}
 800b3b4:	200006b4 	.word	0x200006b4

0800b3b8 <_lseek_r>:
 800b3b8:	b538      	push	{r3, r4, r5, lr}
 800b3ba:	4604      	mov	r4, r0
 800b3bc:	4608      	mov	r0, r1
 800b3be:	4611      	mov	r1, r2
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	4d05      	ldr	r5, [pc, #20]	@ (800b3d8 <_lseek_r+0x20>)
 800b3c4:	602a      	str	r2, [r5, #0]
 800b3c6:	461a      	mov	r2, r3
 800b3c8:	f7f7 f9c1 	bl	800274e <_lseek>
 800b3cc:	1c43      	adds	r3, r0, #1
 800b3ce:	d102      	bne.n	800b3d6 <_lseek_r+0x1e>
 800b3d0:	682b      	ldr	r3, [r5, #0]
 800b3d2:	b103      	cbz	r3, 800b3d6 <_lseek_r+0x1e>
 800b3d4:	6023      	str	r3, [r4, #0]
 800b3d6:	bd38      	pop	{r3, r4, r5, pc}
 800b3d8:	200006b4 	.word	0x200006b4

0800b3dc <_read_r>:
 800b3dc:	b538      	push	{r3, r4, r5, lr}
 800b3de:	4604      	mov	r4, r0
 800b3e0:	4608      	mov	r0, r1
 800b3e2:	4611      	mov	r1, r2
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	4d05      	ldr	r5, [pc, #20]	@ (800b3fc <_read_r+0x20>)
 800b3e8:	602a      	str	r2, [r5, #0]
 800b3ea:	461a      	mov	r2, r3
 800b3ec:	f7f7 f952 	bl	8002694 <_read>
 800b3f0:	1c43      	adds	r3, r0, #1
 800b3f2:	d102      	bne.n	800b3fa <_read_r+0x1e>
 800b3f4:	682b      	ldr	r3, [r5, #0]
 800b3f6:	b103      	cbz	r3, 800b3fa <_read_r+0x1e>
 800b3f8:	6023      	str	r3, [r4, #0]
 800b3fa:	bd38      	pop	{r3, r4, r5, pc}
 800b3fc:	200006b4 	.word	0x200006b4

0800b400 <_sbrk_r>:
 800b400:	b538      	push	{r3, r4, r5, lr}
 800b402:	2300      	movs	r3, #0
 800b404:	4d05      	ldr	r5, [pc, #20]	@ (800b41c <_sbrk_r+0x1c>)
 800b406:	4604      	mov	r4, r0
 800b408:	4608      	mov	r0, r1
 800b40a:	602b      	str	r3, [r5, #0]
 800b40c:	f7f7 f9ac 	bl	8002768 <_sbrk>
 800b410:	1c43      	adds	r3, r0, #1
 800b412:	d102      	bne.n	800b41a <_sbrk_r+0x1a>
 800b414:	682b      	ldr	r3, [r5, #0]
 800b416:	b103      	cbz	r3, 800b41a <_sbrk_r+0x1a>
 800b418:	6023      	str	r3, [r4, #0]
 800b41a:	bd38      	pop	{r3, r4, r5, pc}
 800b41c:	200006b4 	.word	0x200006b4

0800b420 <_write_r>:
 800b420:	b538      	push	{r3, r4, r5, lr}
 800b422:	4604      	mov	r4, r0
 800b424:	4608      	mov	r0, r1
 800b426:	4611      	mov	r1, r2
 800b428:	2200      	movs	r2, #0
 800b42a:	4d05      	ldr	r5, [pc, #20]	@ (800b440 <_write_r+0x20>)
 800b42c:	602a      	str	r2, [r5, #0]
 800b42e:	461a      	mov	r2, r3
 800b430:	f7f7 f94d 	bl	80026ce <_write>
 800b434:	1c43      	adds	r3, r0, #1
 800b436:	d102      	bne.n	800b43e <_write_r+0x1e>
 800b438:	682b      	ldr	r3, [r5, #0]
 800b43a:	b103      	cbz	r3, 800b43e <_write_r+0x1e>
 800b43c:	6023      	str	r3, [r4, #0]
 800b43e:	bd38      	pop	{r3, r4, r5, pc}
 800b440:	200006b4 	.word	0x200006b4

0800b444 <__errno>:
 800b444:	4b01      	ldr	r3, [pc, #4]	@ (800b44c <__errno+0x8>)
 800b446:	6818      	ldr	r0, [r3, #0]
 800b448:	4770      	bx	lr
 800b44a:	bf00      	nop
 800b44c:	20000298 	.word	0x20000298

0800b450 <__libc_init_array>:
 800b450:	b570      	push	{r4, r5, r6, lr}
 800b452:	2600      	movs	r6, #0
 800b454:	4d0c      	ldr	r5, [pc, #48]	@ (800b488 <__libc_init_array+0x38>)
 800b456:	4c0d      	ldr	r4, [pc, #52]	@ (800b48c <__libc_init_array+0x3c>)
 800b458:	1b64      	subs	r4, r4, r5
 800b45a:	10a4      	asrs	r4, r4, #2
 800b45c:	42a6      	cmp	r6, r4
 800b45e:	d109      	bne.n	800b474 <__libc_init_array+0x24>
 800b460:	f000 fc70 	bl	800bd44 <_init>
 800b464:	2600      	movs	r6, #0
 800b466:	4d0a      	ldr	r5, [pc, #40]	@ (800b490 <__libc_init_array+0x40>)
 800b468:	4c0a      	ldr	r4, [pc, #40]	@ (800b494 <__libc_init_array+0x44>)
 800b46a:	1b64      	subs	r4, r4, r5
 800b46c:	10a4      	asrs	r4, r4, #2
 800b46e:	42a6      	cmp	r6, r4
 800b470:	d105      	bne.n	800b47e <__libc_init_array+0x2e>
 800b472:	bd70      	pop	{r4, r5, r6, pc}
 800b474:	f855 3b04 	ldr.w	r3, [r5], #4
 800b478:	4798      	blx	r3
 800b47a:	3601      	adds	r6, #1
 800b47c:	e7ee      	b.n	800b45c <__libc_init_array+0xc>
 800b47e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b482:	4798      	blx	r3
 800b484:	3601      	adds	r6, #1
 800b486:	e7f2      	b.n	800b46e <__libc_init_array+0x1e>
 800b488:	0800fc24 	.word	0x0800fc24
 800b48c:	0800fc24 	.word	0x0800fc24
 800b490:	0800fc24 	.word	0x0800fc24
 800b494:	0800fc28 	.word	0x0800fc28

0800b498 <__retarget_lock_init_recursive>:
 800b498:	4770      	bx	lr

0800b49a <__retarget_lock_acquire_recursive>:
 800b49a:	4770      	bx	lr

0800b49c <__retarget_lock_release_recursive>:
 800b49c:	4770      	bx	lr
	...

0800b4a0 <_free_r>:
 800b4a0:	b538      	push	{r3, r4, r5, lr}
 800b4a2:	4605      	mov	r5, r0
 800b4a4:	2900      	cmp	r1, #0
 800b4a6:	d040      	beq.n	800b52a <_free_r+0x8a>
 800b4a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4ac:	1f0c      	subs	r4, r1, #4
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	bfb8      	it	lt
 800b4b2:	18e4      	addlt	r4, r4, r3
 800b4b4:	f7ff fd52 	bl	800af5c <__malloc_lock>
 800b4b8:	4a1c      	ldr	r2, [pc, #112]	@ (800b52c <_free_r+0x8c>)
 800b4ba:	6813      	ldr	r3, [r2, #0]
 800b4bc:	b933      	cbnz	r3, 800b4cc <_free_r+0x2c>
 800b4be:	6063      	str	r3, [r4, #4]
 800b4c0:	6014      	str	r4, [r2, #0]
 800b4c2:	4628      	mov	r0, r5
 800b4c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b4c8:	f7ff bd4e 	b.w	800af68 <__malloc_unlock>
 800b4cc:	42a3      	cmp	r3, r4
 800b4ce:	d908      	bls.n	800b4e2 <_free_r+0x42>
 800b4d0:	6820      	ldr	r0, [r4, #0]
 800b4d2:	1821      	adds	r1, r4, r0
 800b4d4:	428b      	cmp	r3, r1
 800b4d6:	bf01      	itttt	eq
 800b4d8:	6819      	ldreq	r1, [r3, #0]
 800b4da:	685b      	ldreq	r3, [r3, #4]
 800b4dc:	1809      	addeq	r1, r1, r0
 800b4de:	6021      	streq	r1, [r4, #0]
 800b4e0:	e7ed      	b.n	800b4be <_free_r+0x1e>
 800b4e2:	461a      	mov	r2, r3
 800b4e4:	685b      	ldr	r3, [r3, #4]
 800b4e6:	b10b      	cbz	r3, 800b4ec <_free_r+0x4c>
 800b4e8:	42a3      	cmp	r3, r4
 800b4ea:	d9fa      	bls.n	800b4e2 <_free_r+0x42>
 800b4ec:	6811      	ldr	r1, [r2, #0]
 800b4ee:	1850      	adds	r0, r2, r1
 800b4f0:	42a0      	cmp	r0, r4
 800b4f2:	d10b      	bne.n	800b50c <_free_r+0x6c>
 800b4f4:	6820      	ldr	r0, [r4, #0]
 800b4f6:	4401      	add	r1, r0
 800b4f8:	1850      	adds	r0, r2, r1
 800b4fa:	4283      	cmp	r3, r0
 800b4fc:	6011      	str	r1, [r2, #0]
 800b4fe:	d1e0      	bne.n	800b4c2 <_free_r+0x22>
 800b500:	6818      	ldr	r0, [r3, #0]
 800b502:	685b      	ldr	r3, [r3, #4]
 800b504:	4408      	add	r0, r1
 800b506:	6010      	str	r0, [r2, #0]
 800b508:	6053      	str	r3, [r2, #4]
 800b50a:	e7da      	b.n	800b4c2 <_free_r+0x22>
 800b50c:	d902      	bls.n	800b514 <_free_r+0x74>
 800b50e:	230c      	movs	r3, #12
 800b510:	602b      	str	r3, [r5, #0]
 800b512:	e7d6      	b.n	800b4c2 <_free_r+0x22>
 800b514:	6820      	ldr	r0, [r4, #0]
 800b516:	1821      	adds	r1, r4, r0
 800b518:	428b      	cmp	r3, r1
 800b51a:	bf01      	itttt	eq
 800b51c:	6819      	ldreq	r1, [r3, #0]
 800b51e:	685b      	ldreq	r3, [r3, #4]
 800b520:	1809      	addeq	r1, r1, r0
 800b522:	6021      	streq	r1, [r4, #0]
 800b524:	6063      	str	r3, [r4, #4]
 800b526:	6054      	str	r4, [r2, #4]
 800b528:	e7cb      	b.n	800b4c2 <_free_r+0x22>
 800b52a:	bd38      	pop	{r3, r4, r5, pc}
 800b52c:	20000574 	.word	0x20000574

0800b530 <__sfputc_r>:
 800b530:	6893      	ldr	r3, [r2, #8]
 800b532:	b410      	push	{r4}
 800b534:	3b01      	subs	r3, #1
 800b536:	2b00      	cmp	r3, #0
 800b538:	6093      	str	r3, [r2, #8]
 800b53a:	da07      	bge.n	800b54c <__sfputc_r+0x1c>
 800b53c:	6994      	ldr	r4, [r2, #24]
 800b53e:	42a3      	cmp	r3, r4
 800b540:	db01      	blt.n	800b546 <__sfputc_r+0x16>
 800b542:	290a      	cmp	r1, #10
 800b544:	d102      	bne.n	800b54c <__sfputc_r+0x1c>
 800b546:	bc10      	pop	{r4}
 800b548:	f7ff be89 	b.w	800b25e <__swbuf_r>
 800b54c:	6813      	ldr	r3, [r2, #0]
 800b54e:	1c58      	adds	r0, r3, #1
 800b550:	6010      	str	r0, [r2, #0]
 800b552:	7019      	strb	r1, [r3, #0]
 800b554:	4608      	mov	r0, r1
 800b556:	bc10      	pop	{r4}
 800b558:	4770      	bx	lr

0800b55a <__sfputs_r>:
 800b55a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b55c:	4606      	mov	r6, r0
 800b55e:	460f      	mov	r7, r1
 800b560:	4614      	mov	r4, r2
 800b562:	18d5      	adds	r5, r2, r3
 800b564:	42ac      	cmp	r4, r5
 800b566:	d101      	bne.n	800b56c <__sfputs_r+0x12>
 800b568:	2000      	movs	r0, #0
 800b56a:	e007      	b.n	800b57c <__sfputs_r+0x22>
 800b56c:	463a      	mov	r2, r7
 800b56e:	4630      	mov	r0, r6
 800b570:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b574:	f7ff ffdc 	bl	800b530 <__sfputc_r>
 800b578:	1c43      	adds	r3, r0, #1
 800b57a:	d1f3      	bne.n	800b564 <__sfputs_r+0xa>
 800b57c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b580 <_vfiprintf_r>:
 800b580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b584:	460d      	mov	r5, r1
 800b586:	4614      	mov	r4, r2
 800b588:	4698      	mov	r8, r3
 800b58a:	4606      	mov	r6, r0
 800b58c:	b09d      	sub	sp, #116	@ 0x74
 800b58e:	b118      	cbz	r0, 800b598 <_vfiprintf_r+0x18>
 800b590:	6a03      	ldr	r3, [r0, #32]
 800b592:	b90b      	cbnz	r3, 800b598 <_vfiprintf_r+0x18>
 800b594:	f7ff fd7a 	bl	800b08c <__sinit>
 800b598:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b59a:	07d9      	lsls	r1, r3, #31
 800b59c:	d405      	bmi.n	800b5aa <_vfiprintf_r+0x2a>
 800b59e:	89ab      	ldrh	r3, [r5, #12]
 800b5a0:	059a      	lsls	r2, r3, #22
 800b5a2:	d402      	bmi.n	800b5aa <_vfiprintf_r+0x2a>
 800b5a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b5a6:	f7ff ff78 	bl	800b49a <__retarget_lock_acquire_recursive>
 800b5aa:	89ab      	ldrh	r3, [r5, #12]
 800b5ac:	071b      	lsls	r3, r3, #28
 800b5ae:	d501      	bpl.n	800b5b4 <_vfiprintf_r+0x34>
 800b5b0:	692b      	ldr	r3, [r5, #16]
 800b5b2:	b99b      	cbnz	r3, 800b5dc <_vfiprintf_r+0x5c>
 800b5b4:	4629      	mov	r1, r5
 800b5b6:	4630      	mov	r0, r6
 800b5b8:	f7ff fe90 	bl	800b2dc <__swsetup_r>
 800b5bc:	b170      	cbz	r0, 800b5dc <_vfiprintf_r+0x5c>
 800b5be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b5c0:	07dc      	lsls	r4, r3, #31
 800b5c2:	d504      	bpl.n	800b5ce <_vfiprintf_r+0x4e>
 800b5c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b5c8:	b01d      	add	sp, #116	@ 0x74
 800b5ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5ce:	89ab      	ldrh	r3, [r5, #12]
 800b5d0:	0598      	lsls	r0, r3, #22
 800b5d2:	d4f7      	bmi.n	800b5c4 <_vfiprintf_r+0x44>
 800b5d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b5d6:	f7ff ff61 	bl	800b49c <__retarget_lock_release_recursive>
 800b5da:	e7f3      	b.n	800b5c4 <_vfiprintf_r+0x44>
 800b5dc:	2300      	movs	r3, #0
 800b5de:	9309      	str	r3, [sp, #36]	@ 0x24
 800b5e0:	2320      	movs	r3, #32
 800b5e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b5e6:	2330      	movs	r3, #48	@ 0x30
 800b5e8:	f04f 0901 	mov.w	r9, #1
 800b5ec:	f8cd 800c 	str.w	r8, [sp, #12]
 800b5f0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800b79c <_vfiprintf_r+0x21c>
 800b5f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b5f8:	4623      	mov	r3, r4
 800b5fa:	469a      	mov	sl, r3
 800b5fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b600:	b10a      	cbz	r2, 800b606 <_vfiprintf_r+0x86>
 800b602:	2a25      	cmp	r2, #37	@ 0x25
 800b604:	d1f9      	bne.n	800b5fa <_vfiprintf_r+0x7a>
 800b606:	ebba 0b04 	subs.w	fp, sl, r4
 800b60a:	d00b      	beq.n	800b624 <_vfiprintf_r+0xa4>
 800b60c:	465b      	mov	r3, fp
 800b60e:	4622      	mov	r2, r4
 800b610:	4629      	mov	r1, r5
 800b612:	4630      	mov	r0, r6
 800b614:	f7ff ffa1 	bl	800b55a <__sfputs_r>
 800b618:	3001      	adds	r0, #1
 800b61a:	f000 80a7 	beq.w	800b76c <_vfiprintf_r+0x1ec>
 800b61e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b620:	445a      	add	r2, fp
 800b622:	9209      	str	r2, [sp, #36]	@ 0x24
 800b624:	f89a 3000 	ldrb.w	r3, [sl]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	f000 809f 	beq.w	800b76c <_vfiprintf_r+0x1ec>
 800b62e:	2300      	movs	r3, #0
 800b630:	f04f 32ff 	mov.w	r2, #4294967295
 800b634:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b638:	f10a 0a01 	add.w	sl, sl, #1
 800b63c:	9304      	str	r3, [sp, #16]
 800b63e:	9307      	str	r3, [sp, #28]
 800b640:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b644:	931a      	str	r3, [sp, #104]	@ 0x68
 800b646:	4654      	mov	r4, sl
 800b648:	2205      	movs	r2, #5
 800b64a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b64e:	4853      	ldr	r0, [pc, #332]	@ (800b79c <_vfiprintf_r+0x21c>)
 800b650:	f000 fb6a 	bl	800bd28 <memchr>
 800b654:	9a04      	ldr	r2, [sp, #16]
 800b656:	b9d8      	cbnz	r0, 800b690 <_vfiprintf_r+0x110>
 800b658:	06d1      	lsls	r1, r2, #27
 800b65a:	bf44      	itt	mi
 800b65c:	2320      	movmi	r3, #32
 800b65e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b662:	0713      	lsls	r3, r2, #28
 800b664:	bf44      	itt	mi
 800b666:	232b      	movmi	r3, #43	@ 0x2b
 800b668:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b66c:	f89a 3000 	ldrb.w	r3, [sl]
 800b670:	2b2a      	cmp	r3, #42	@ 0x2a
 800b672:	d015      	beq.n	800b6a0 <_vfiprintf_r+0x120>
 800b674:	4654      	mov	r4, sl
 800b676:	2000      	movs	r0, #0
 800b678:	f04f 0c0a 	mov.w	ip, #10
 800b67c:	9a07      	ldr	r2, [sp, #28]
 800b67e:	4621      	mov	r1, r4
 800b680:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b684:	3b30      	subs	r3, #48	@ 0x30
 800b686:	2b09      	cmp	r3, #9
 800b688:	d94b      	bls.n	800b722 <_vfiprintf_r+0x1a2>
 800b68a:	b1b0      	cbz	r0, 800b6ba <_vfiprintf_r+0x13a>
 800b68c:	9207      	str	r2, [sp, #28]
 800b68e:	e014      	b.n	800b6ba <_vfiprintf_r+0x13a>
 800b690:	eba0 0308 	sub.w	r3, r0, r8
 800b694:	fa09 f303 	lsl.w	r3, r9, r3
 800b698:	4313      	orrs	r3, r2
 800b69a:	46a2      	mov	sl, r4
 800b69c:	9304      	str	r3, [sp, #16]
 800b69e:	e7d2      	b.n	800b646 <_vfiprintf_r+0xc6>
 800b6a0:	9b03      	ldr	r3, [sp, #12]
 800b6a2:	1d19      	adds	r1, r3, #4
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	9103      	str	r1, [sp, #12]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	bfbb      	ittet	lt
 800b6ac:	425b      	neglt	r3, r3
 800b6ae:	f042 0202 	orrlt.w	r2, r2, #2
 800b6b2:	9307      	strge	r3, [sp, #28]
 800b6b4:	9307      	strlt	r3, [sp, #28]
 800b6b6:	bfb8      	it	lt
 800b6b8:	9204      	strlt	r2, [sp, #16]
 800b6ba:	7823      	ldrb	r3, [r4, #0]
 800b6bc:	2b2e      	cmp	r3, #46	@ 0x2e
 800b6be:	d10a      	bne.n	800b6d6 <_vfiprintf_r+0x156>
 800b6c0:	7863      	ldrb	r3, [r4, #1]
 800b6c2:	2b2a      	cmp	r3, #42	@ 0x2a
 800b6c4:	d132      	bne.n	800b72c <_vfiprintf_r+0x1ac>
 800b6c6:	9b03      	ldr	r3, [sp, #12]
 800b6c8:	3402      	adds	r4, #2
 800b6ca:	1d1a      	adds	r2, r3, #4
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	9203      	str	r2, [sp, #12]
 800b6d0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b6d4:	9305      	str	r3, [sp, #20]
 800b6d6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800b7a0 <_vfiprintf_r+0x220>
 800b6da:	2203      	movs	r2, #3
 800b6dc:	4650      	mov	r0, sl
 800b6de:	7821      	ldrb	r1, [r4, #0]
 800b6e0:	f000 fb22 	bl	800bd28 <memchr>
 800b6e4:	b138      	cbz	r0, 800b6f6 <_vfiprintf_r+0x176>
 800b6e6:	2240      	movs	r2, #64	@ 0x40
 800b6e8:	9b04      	ldr	r3, [sp, #16]
 800b6ea:	eba0 000a 	sub.w	r0, r0, sl
 800b6ee:	4082      	lsls	r2, r0
 800b6f0:	4313      	orrs	r3, r2
 800b6f2:	3401      	adds	r4, #1
 800b6f4:	9304      	str	r3, [sp, #16]
 800b6f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6fa:	2206      	movs	r2, #6
 800b6fc:	4829      	ldr	r0, [pc, #164]	@ (800b7a4 <_vfiprintf_r+0x224>)
 800b6fe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b702:	f000 fb11 	bl	800bd28 <memchr>
 800b706:	2800      	cmp	r0, #0
 800b708:	d03f      	beq.n	800b78a <_vfiprintf_r+0x20a>
 800b70a:	4b27      	ldr	r3, [pc, #156]	@ (800b7a8 <_vfiprintf_r+0x228>)
 800b70c:	bb1b      	cbnz	r3, 800b756 <_vfiprintf_r+0x1d6>
 800b70e:	9b03      	ldr	r3, [sp, #12]
 800b710:	3307      	adds	r3, #7
 800b712:	f023 0307 	bic.w	r3, r3, #7
 800b716:	3308      	adds	r3, #8
 800b718:	9303      	str	r3, [sp, #12]
 800b71a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b71c:	443b      	add	r3, r7
 800b71e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b720:	e76a      	b.n	800b5f8 <_vfiprintf_r+0x78>
 800b722:	460c      	mov	r4, r1
 800b724:	2001      	movs	r0, #1
 800b726:	fb0c 3202 	mla	r2, ip, r2, r3
 800b72a:	e7a8      	b.n	800b67e <_vfiprintf_r+0xfe>
 800b72c:	2300      	movs	r3, #0
 800b72e:	f04f 0c0a 	mov.w	ip, #10
 800b732:	4619      	mov	r1, r3
 800b734:	3401      	adds	r4, #1
 800b736:	9305      	str	r3, [sp, #20]
 800b738:	4620      	mov	r0, r4
 800b73a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b73e:	3a30      	subs	r2, #48	@ 0x30
 800b740:	2a09      	cmp	r2, #9
 800b742:	d903      	bls.n	800b74c <_vfiprintf_r+0x1cc>
 800b744:	2b00      	cmp	r3, #0
 800b746:	d0c6      	beq.n	800b6d6 <_vfiprintf_r+0x156>
 800b748:	9105      	str	r1, [sp, #20]
 800b74a:	e7c4      	b.n	800b6d6 <_vfiprintf_r+0x156>
 800b74c:	4604      	mov	r4, r0
 800b74e:	2301      	movs	r3, #1
 800b750:	fb0c 2101 	mla	r1, ip, r1, r2
 800b754:	e7f0      	b.n	800b738 <_vfiprintf_r+0x1b8>
 800b756:	ab03      	add	r3, sp, #12
 800b758:	9300      	str	r3, [sp, #0]
 800b75a:	462a      	mov	r2, r5
 800b75c:	4630      	mov	r0, r6
 800b75e:	4b13      	ldr	r3, [pc, #76]	@ (800b7ac <_vfiprintf_r+0x22c>)
 800b760:	a904      	add	r1, sp, #16
 800b762:	f3af 8000 	nop.w
 800b766:	4607      	mov	r7, r0
 800b768:	1c78      	adds	r0, r7, #1
 800b76a:	d1d6      	bne.n	800b71a <_vfiprintf_r+0x19a>
 800b76c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b76e:	07d9      	lsls	r1, r3, #31
 800b770:	d405      	bmi.n	800b77e <_vfiprintf_r+0x1fe>
 800b772:	89ab      	ldrh	r3, [r5, #12]
 800b774:	059a      	lsls	r2, r3, #22
 800b776:	d402      	bmi.n	800b77e <_vfiprintf_r+0x1fe>
 800b778:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b77a:	f7ff fe8f 	bl	800b49c <__retarget_lock_release_recursive>
 800b77e:	89ab      	ldrh	r3, [r5, #12]
 800b780:	065b      	lsls	r3, r3, #25
 800b782:	f53f af1f 	bmi.w	800b5c4 <_vfiprintf_r+0x44>
 800b786:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b788:	e71e      	b.n	800b5c8 <_vfiprintf_r+0x48>
 800b78a:	ab03      	add	r3, sp, #12
 800b78c:	9300      	str	r3, [sp, #0]
 800b78e:	462a      	mov	r2, r5
 800b790:	4630      	mov	r0, r6
 800b792:	4b06      	ldr	r3, [pc, #24]	@ (800b7ac <_vfiprintf_r+0x22c>)
 800b794:	a904      	add	r1, sp, #16
 800b796:	f000 f87d 	bl	800b894 <_printf_i>
 800b79a:	e7e4      	b.n	800b766 <_vfiprintf_r+0x1e6>
 800b79c:	0800fbf0 	.word	0x0800fbf0
 800b7a0:	0800fbf6 	.word	0x0800fbf6
 800b7a4:	0800fbfa 	.word	0x0800fbfa
 800b7a8:	00000000 	.word	0x00000000
 800b7ac:	0800b55b 	.word	0x0800b55b

0800b7b0 <_printf_common>:
 800b7b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7b4:	4616      	mov	r6, r2
 800b7b6:	4698      	mov	r8, r3
 800b7b8:	688a      	ldr	r2, [r1, #8]
 800b7ba:	690b      	ldr	r3, [r1, #16]
 800b7bc:	4607      	mov	r7, r0
 800b7be:	4293      	cmp	r3, r2
 800b7c0:	bfb8      	it	lt
 800b7c2:	4613      	movlt	r3, r2
 800b7c4:	6033      	str	r3, [r6, #0]
 800b7c6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b7ca:	460c      	mov	r4, r1
 800b7cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b7d0:	b10a      	cbz	r2, 800b7d6 <_printf_common+0x26>
 800b7d2:	3301      	adds	r3, #1
 800b7d4:	6033      	str	r3, [r6, #0]
 800b7d6:	6823      	ldr	r3, [r4, #0]
 800b7d8:	0699      	lsls	r1, r3, #26
 800b7da:	bf42      	ittt	mi
 800b7dc:	6833      	ldrmi	r3, [r6, #0]
 800b7de:	3302      	addmi	r3, #2
 800b7e0:	6033      	strmi	r3, [r6, #0]
 800b7e2:	6825      	ldr	r5, [r4, #0]
 800b7e4:	f015 0506 	ands.w	r5, r5, #6
 800b7e8:	d106      	bne.n	800b7f8 <_printf_common+0x48>
 800b7ea:	f104 0a19 	add.w	sl, r4, #25
 800b7ee:	68e3      	ldr	r3, [r4, #12]
 800b7f0:	6832      	ldr	r2, [r6, #0]
 800b7f2:	1a9b      	subs	r3, r3, r2
 800b7f4:	42ab      	cmp	r3, r5
 800b7f6:	dc2b      	bgt.n	800b850 <_printf_common+0xa0>
 800b7f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b7fc:	6822      	ldr	r2, [r4, #0]
 800b7fe:	3b00      	subs	r3, #0
 800b800:	bf18      	it	ne
 800b802:	2301      	movne	r3, #1
 800b804:	0692      	lsls	r2, r2, #26
 800b806:	d430      	bmi.n	800b86a <_printf_common+0xba>
 800b808:	4641      	mov	r1, r8
 800b80a:	4638      	mov	r0, r7
 800b80c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b810:	47c8      	blx	r9
 800b812:	3001      	adds	r0, #1
 800b814:	d023      	beq.n	800b85e <_printf_common+0xae>
 800b816:	6823      	ldr	r3, [r4, #0]
 800b818:	6922      	ldr	r2, [r4, #16]
 800b81a:	f003 0306 	and.w	r3, r3, #6
 800b81e:	2b04      	cmp	r3, #4
 800b820:	bf14      	ite	ne
 800b822:	2500      	movne	r5, #0
 800b824:	6833      	ldreq	r3, [r6, #0]
 800b826:	f04f 0600 	mov.w	r6, #0
 800b82a:	bf08      	it	eq
 800b82c:	68e5      	ldreq	r5, [r4, #12]
 800b82e:	f104 041a 	add.w	r4, r4, #26
 800b832:	bf08      	it	eq
 800b834:	1aed      	subeq	r5, r5, r3
 800b836:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b83a:	bf08      	it	eq
 800b83c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b840:	4293      	cmp	r3, r2
 800b842:	bfc4      	itt	gt
 800b844:	1a9b      	subgt	r3, r3, r2
 800b846:	18ed      	addgt	r5, r5, r3
 800b848:	42b5      	cmp	r5, r6
 800b84a:	d11a      	bne.n	800b882 <_printf_common+0xd2>
 800b84c:	2000      	movs	r0, #0
 800b84e:	e008      	b.n	800b862 <_printf_common+0xb2>
 800b850:	2301      	movs	r3, #1
 800b852:	4652      	mov	r2, sl
 800b854:	4641      	mov	r1, r8
 800b856:	4638      	mov	r0, r7
 800b858:	47c8      	blx	r9
 800b85a:	3001      	adds	r0, #1
 800b85c:	d103      	bne.n	800b866 <_printf_common+0xb6>
 800b85e:	f04f 30ff 	mov.w	r0, #4294967295
 800b862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b866:	3501      	adds	r5, #1
 800b868:	e7c1      	b.n	800b7ee <_printf_common+0x3e>
 800b86a:	2030      	movs	r0, #48	@ 0x30
 800b86c:	18e1      	adds	r1, r4, r3
 800b86e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b872:	1c5a      	adds	r2, r3, #1
 800b874:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b878:	4422      	add	r2, r4
 800b87a:	3302      	adds	r3, #2
 800b87c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b880:	e7c2      	b.n	800b808 <_printf_common+0x58>
 800b882:	2301      	movs	r3, #1
 800b884:	4622      	mov	r2, r4
 800b886:	4641      	mov	r1, r8
 800b888:	4638      	mov	r0, r7
 800b88a:	47c8      	blx	r9
 800b88c:	3001      	adds	r0, #1
 800b88e:	d0e6      	beq.n	800b85e <_printf_common+0xae>
 800b890:	3601      	adds	r6, #1
 800b892:	e7d9      	b.n	800b848 <_printf_common+0x98>

0800b894 <_printf_i>:
 800b894:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b898:	7e0f      	ldrb	r7, [r1, #24]
 800b89a:	4691      	mov	r9, r2
 800b89c:	2f78      	cmp	r7, #120	@ 0x78
 800b89e:	4680      	mov	r8, r0
 800b8a0:	460c      	mov	r4, r1
 800b8a2:	469a      	mov	sl, r3
 800b8a4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b8a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b8aa:	d807      	bhi.n	800b8bc <_printf_i+0x28>
 800b8ac:	2f62      	cmp	r7, #98	@ 0x62
 800b8ae:	d80a      	bhi.n	800b8c6 <_printf_i+0x32>
 800b8b0:	2f00      	cmp	r7, #0
 800b8b2:	f000 80d1 	beq.w	800ba58 <_printf_i+0x1c4>
 800b8b6:	2f58      	cmp	r7, #88	@ 0x58
 800b8b8:	f000 80b8 	beq.w	800ba2c <_printf_i+0x198>
 800b8bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b8c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b8c4:	e03a      	b.n	800b93c <_printf_i+0xa8>
 800b8c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b8ca:	2b15      	cmp	r3, #21
 800b8cc:	d8f6      	bhi.n	800b8bc <_printf_i+0x28>
 800b8ce:	a101      	add	r1, pc, #4	@ (adr r1, 800b8d4 <_printf_i+0x40>)
 800b8d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b8d4:	0800b92d 	.word	0x0800b92d
 800b8d8:	0800b941 	.word	0x0800b941
 800b8dc:	0800b8bd 	.word	0x0800b8bd
 800b8e0:	0800b8bd 	.word	0x0800b8bd
 800b8e4:	0800b8bd 	.word	0x0800b8bd
 800b8e8:	0800b8bd 	.word	0x0800b8bd
 800b8ec:	0800b941 	.word	0x0800b941
 800b8f0:	0800b8bd 	.word	0x0800b8bd
 800b8f4:	0800b8bd 	.word	0x0800b8bd
 800b8f8:	0800b8bd 	.word	0x0800b8bd
 800b8fc:	0800b8bd 	.word	0x0800b8bd
 800b900:	0800ba3f 	.word	0x0800ba3f
 800b904:	0800b96b 	.word	0x0800b96b
 800b908:	0800b9f9 	.word	0x0800b9f9
 800b90c:	0800b8bd 	.word	0x0800b8bd
 800b910:	0800b8bd 	.word	0x0800b8bd
 800b914:	0800ba61 	.word	0x0800ba61
 800b918:	0800b8bd 	.word	0x0800b8bd
 800b91c:	0800b96b 	.word	0x0800b96b
 800b920:	0800b8bd 	.word	0x0800b8bd
 800b924:	0800b8bd 	.word	0x0800b8bd
 800b928:	0800ba01 	.word	0x0800ba01
 800b92c:	6833      	ldr	r3, [r6, #0]
 800b92e:	1d1a      	adds	r2, r3, #4
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	6032      	str	r2, [r6, #0]
 800b934:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b938:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b93c:	2301      	movs	r3, #1
 800b93e:	e09c      	b.n	800ba7a <_printf_i+0x1e6>
 800b940:	6833      	ldr	r3, [r6, #0]
 800b942:	6820      	ldr	r0, [r4, #0]
 800b944:	1d19      	adds	r1, r3, #4
 800b946:	6031      	str	r1, [r6, #0]
 800b948:	0606      	lsls	r6, r0, #24
 800b94a:	d501      	bpl.n	800b950 <_printf_i+0xbc>
 800b94c:	681d      	ldr	r5, [r3, #0]
 800b94e:	e003      	b.n	800b958 <_printf_i+0xc4>
 800b950:	0645      	lsls	r5, r0, #25
 800b952:	d5fb      	bpl.n	800b94c <_printf_i+0xb8>
 800b954:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b958:	2d00      	cmp	r5, #0
 800b95a:	da03      	bge.n	800b964 <_printf_i+0xd0>
 800b95c:	232d      	movs	r3, #45	@ 0x2d
 800b95e:	426d      	negs	r5, r5
 800b960:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b964:	230a      	movs	r3, #10
 800b966:	4858      	ldr	r0, [pc, #352]	@ (800bac8 <_printf_i+0x234>)
 800b968:	e011      	b.n	800b98e <_printf_i+0xfa>
 800b96a:	6821      	ldr	r1, [r4, #0]
 800b96c:	6833      	ldr	r3, [r6, #0]
 800b96e:	0608      	lsls	r0, r1, #24
 800b970:	f853 5b04 	ldr.w	r5, [r3], #4
 800b974:	d402      	bmi.n	800b97c <_printf_i+0xe8>
 800b976:	0649      	lsls	r1, r1, #25
 800b978:	bf48      	it	mi
 800b97a:	b2ad      	uxthmi	r5, r5
 800b97c:	2f6f      	cmp	r7, #111	@ 0x6f
 800b97e:	6033      	str	r3, [r6, #0]
 800b980:	bf14      	ite	ne
 800b982:	230a      	movne	r3, #10
 800b984:	2308      	moveq	r3, #8
 800b986:	4850      	ldr	r0, [pc, #320]	@ (800bac8 <_printf_i+0x234>)
 800b988:	2100      	movs	r1, #0
 800b98a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b98e:	6866      	ldr	r6, [r4, #4]
 800b990:	2e00      	cmp	r6, #0
 800b992:	60a6      	str	r6, [r4, #8]
 800b994:	db05      	blt.n	800b9a2 <_printf_i+0x10e>
 800b996:	6821      	ldr	r1, [r4, #0]
 800b998:	432e      	orrs	r6, r5
 800b99a:	f021 0104 	bic.w	r1, r1, #4
 800b99e:	6021      	str	r1, [r4, #0]
 800b9a0:	d04b      	beq.n	800ba3a <_printf_i+0x1a6>
 800b9a2:	4616      	mov	r6, r2
 800b9a4:	fbb5 f1f3 	udiv	r1, r5, r3
 800b9a8:	fb03 5711 	mls	r7, r3, r1, r5
 800b9ac:	5dc7      	ldrb	r7, [r0, r7]
 800b9ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b9b2:	462f      	mov	r7, r5
 800b9b4:	42bb      	cmp	r3, r7
 800b9b6:	460d      	mov	r5, r1
 800b9b8:	d9f4      	bls.n	800b9a4 <_printf_i+0x110>
 800b9ba:	2b08      	cmp	r3, #8
 800b9bc:	d10b      	bne.n	800b9d6 <_printf_i+0x142>
 800b9be:	6823      	ldr	r3, [r4, #0]
 800b9c0:	07df      	lsls	r7, r3, #31
 800b9c2:	d508      	bpl.n	800b9d6 <_printf_i+0x142>
 800b9c4:	6923      	ldr	r3, [r4, #16]
 800b9c6:	6861      	ldr	r1, [r4, #4]
 800b9c8:	4299      	cmp	r1, r3
 800b9ca:	bfde      	ittt	le
 800b9cc:	2330      	movle	r3, #48	@ 0x30
 800b9ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b9d2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b9d6:	1b92      	subs	r2, r2, r6
 800b9d8:	6122      	str	r2, [r4, #16]
 800b9da:	464b      	mov	r3, r9
 800b9dc:	4621      	mov	r1, r4
 800b9de:	4640      	mov	r0, r8
 800b9e0:	f8cd a000 	str.w	sl, [sp]
 800b9e4:	aa03      	add	r2, sp, #12
 800b9e6:	f7ff fee3 	bl	800b7b0 <_printf_common>
 800b9ea:	3001      	adds	r0, #1
 800b9ec:	d14a      	bne.n	800ba84 <_printf_i+0x1f0>
 800b9ee:	f04f 30ff 	mov.w	r0, #4294967295
 800b9f2:	b004      	add	sp, #16
 800b9f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9f8:	6823      	ldr	r3, [r4, #0]
 800b9fa:	f043 0320 	orr.w	r3, r3, #32
 800b9fe:	6023      	str	r3, [r4, #0]
 800ba00:	2778      	movs	r7, #120	@ 0x78
 800ba02:	4832      	ldr	r0, [pc, #200]	@ (800bacc <_printf_i+0x238>)
 800ba04:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ba08:	6823      	ldr	r3, [r4, #0]
 800ba0a:	6831      	ldr	r1, [r6, #0]
 800ba0c:	061f      	lsls	r7, r3, #24
 800ba0e:	f851 5b04 	ldr.w	r5, [r1], #4
 800ba12:	d402      	bmi.n	800ba1a <_printf_i+0x186>
 800ba14:	065f      	lsls	r7, r3, #25
 800ba16:	bf48      	it	mi
 800ba18:	b2ad      	uxthmi	r5, r5
 800ba1a:	6031      	str	r1, [r6, #0]
 800ba1c:	07d9      	lsls	r1, r3, #31
 800ba1e:	bf44      	itt	mi
 800ba20:	f043 0320 	orrmi.w	r3, r3, #32
 800ba24:	6023      	strmi	r3, [r4, #0]
 800ba26:	b11d      	cbz	r5, 800ba30 <_printf_i+0x19c>
 800ba28:	2310      	movs	r3, #16
 800ba2a:	e7ad      	b.n	800b988 <_printf_i+0xf4>
 800ba2c:	4826      	ldr	r0, [pc, #152]	@ (800bac8 <_printf_i+0x234>)
 800ba2e:	e7e9      	b.n	800ba04 <_printf_i+0x170>
 800ba30:	6823      	ldr	r3, [r4, #0]
 800ba32:	f023 0320 	bic.w	r3, r3, #32
 800ba36:	6023      	str	r3, [r4, #0]
 800ba38:	e7f6      	b.n	800ba28 <_printf_i+0x194>
 800ba3a:	4616      	mov	r6, r2
 800ba3c:	e7bd      	b.n	800b9ba <_printf_i+0x126>
 800ba3e:	6833      	ldr	r3, [r6, #0]
 800ba40:	6825      	ldr	r5, [r4, #0]
 800ba42:	1d18      	adds	r0, r3, #4
 800ba44:	6961      	ldr	r1, [r4, #20]
 800ba46:	6030      	str	r0, [r6, #0]
 800ba48:	062e      	lsls	r6, r5, #24
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	d501      	bpl.n	800ba52 <_printf_i+0x1be>
 800ba4e:	6019      	str	r1, [r3, #0]
 800ba50:	e002      	b.n	800ba58 <_printf_i+0x1c4>
 800ba52:	0668      	lsls	r0, r5, #25
 800ba54:	d5fb      	bpl.n	800ba4e <_printf_i+0x1ba>
 800ba56:	8019      	strh	r1, [r3, #0]
 800ba58:	2300      	movs	r3, #0
 800ba5a:	4616      	mov	r6, r2
 800ba5c:	6123      	str	r3, [r4, #16]
 800ba5e:	e7bc      	b.n	800b9da <_printf_i+0x146>
 800ba60:	6833      	ldr	r3, [r6, #0]
 800ba62:	2100      	movs	r1, #0
 800ba64:	1d1a      	adds	r2, r3, #4
 800ba66:	6032      	str	r2, [r6, #0]
 800ba68:	681e      	ldr	r6, [r3, #0]
 800ba6a:	6862      	ldr	r2, [r4, #4]
 800ba6c:	4630      	mov	r0, r6
 800ba6e:	f000 f95b 	bl	800bd28 <memchr>
 800ba72:	b108      	cbz	r0, 800ba78 <_printf_i+0x1e4>
 800ba74:	1b80      	subs	r0, r0, r6
 800ba76:	6060      	str	r0, [r4, #4]
 800ba78:	6863      	ldr	r3, [r4, #4]
 800ba7a:	6123      	str	r3, [r4, #16]
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ba82:	e7aa      	b.n	800b9da <_printf_i+0x146>
 800ba84:	4632      	mov	r2, r6
 800ba86:	4649      	mov	r1, r9
 800ba88:	4640      	mov	r0, r8
 800ba8a:	6923      	ldr	r3, [r4, #16]
 800ba8c:	47d0      	blx	sl
 800ba8e:	3001      	adds	r0, #1
 800ba90:	d0ad      	beq.n	800b9ee <_printf_i+0x15a>
 800ba92:	6823      	ldr	r3, [r4, #0]
 800ba94:	079b      	lsls	r3, r3, #30
 800ba96:	d413      	bmi.n	800bac0 <_printf_i+0x22c>
 800ba98:	68e0      	ldr	r0, [r4, #12]
 800ba9a:	9b03      	ldr	r3, [sp, #12]
 800ba9c:	4298      	cmp	r0, r3
 800ba9e:	bfb8      	it	lt
 800baa0:	4618      	movlt	r0, r3
 800baa2:	e7a6      	b.n	800b9f2 <_printf_i+0x15e>
 800baa4:	2301      	movs	r3, #1
 800baa6:	4632      	mov	r2, r6
 800baa8:	4649      	mov	r1, r9
 800baaa:	4640      	mov	r0, r8
 800baac:	47d0      	blx	sl
 800baae:	3001      	adds	r0, #1
 800bab0:	d09d      	beq.n	800b9ee <_printf_i+0x15a>
 800bab2:	3501      	adds	r5, #1
 800bab4:	68e3      	ldr	r3, [r4, #12]
 800bab6:	9903      	ldr	r1, [sp, #12]
 800bab8:	1a5b      	subs	r3, r3, r1
 800baba:	42ab      	cmp	r3, r5
 800babc:	dcf2      	bgt.n	800baa4 <_printf_i+0x210>
 800babe:	e7eb      	b.n	800ba98 <_printf_i+0x204>
 800bac0:	2500      	movs	r5, #0
 800bac2:	f104 0619 	add.w	r6, r4, #25
 800bac6:	e7f5      	b.n	800bab4 <_printf_i+0x220>
 800bac8:	0800fc01 	.word	0x0800fc01
 800bacc:	0800fc12 	.word	0x0800fc12

0800bad0 <__sflush_r>:
 800bad0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bad6:	0716      	lsls	r6, r2, #28
 800bad8:	4605      	mov	r5, r0
 800bada:	460c      	mov	r4, r1
 800badc:	d454      	bmi.n	800bb88 <__sflush_r+0xb8>
 800bade:	684b      	ldr	r3, [r1, #4]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	dc02      	bgt.n	800baea <__sflush_r+0x1a>
 800bae4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	dd48      	ble.n	800bb7c <__sflush_r+0xac>
 800baea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800baec:	2e00      	cmp	r6, #0
 800baee:	d045      	beq.n	800bb7c <__sflush_r+0xac>
 800baf0:	2300      	movs	r3, #0
 800baf2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800baf6:	682f      	ldr	r7, [r5, #0]
 800baf8:	6a21      	ldr	r1, [r4, #32]
 800bafa:	602b      	str	r3, [r5, #0]
 800bafc:	d030      	beq.n	800bb60 <__sflush_r+0x90>
 800bafe:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bb00:	89a3      	ldrh	r3, [r4, #12]
 800bb02:	0759      	lsls	r1, r3, #29
 800bb04:	d505      	bpl.n	800bb12 <__sflush_r+0x42>
 800bb06:	6863      	ldr	r3, [r4, #4]
 800bb08:	1ad2      	subs	r2, r2, r3
 800bb0a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bb0c:	b10b      	cbz	r3, 800bb12 <__sflush_r+0x42>
 800bb0e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bb10:	1ad2      	subs	r2, r2, r3
 800bb12:	2300      	movs	r3, #0
 800bb14:	4628      	mov	r0, r5
 800bb16:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bb18:	6a21      	ldr	r1, [r4, #32]
 800bb1a:	47b0      	blx	r6
 800bb1c:	1c43      	adds	r3, r0, #1
 800bb1e:	89a3      	ldrh	r3, [r4, #12]
 800bb20:	d106      	bne.n	800bb30 <__sflush_r+0x60>
 800bb22:	6829      	ldr	r1, [r5, #0]
 800bb24:	291d      	cmp	r1, #29
 800bb26:	d82b      	bhi.n	800bb80 <__sflush_r+0xb0>
 800bb28:	4a28      	ldr	r2, [pc, #160]	@ (800bbcc <__sflush_r+0xfc>)
 800bb2a:	40ca      	lsrs	r2, r1
 800bb2c:	07d6      	lsls	r6, r2, #31
 800bb2e:	d527      	bpl.n	800bb80 <__sflush_r+0xb0>
 800bb30:	2200      	movs	r2, #0
 800bb32:	6062      	str	r2, [r4, #4]
 800bb34:	6922      	ldr	r2, [r4, #16]
 800bb36:	04d9      	lsls	r1, r3, #19
 800bb38:	6022      	str	r2, [r4, #0]
 800bb3a:	d504      	bpl.n	800bb46 <__sflush_r+0x76>
 800bb3c:	1c42      	adds	r2, r0, #1
 800bb3e:	d101      	bne.n	800bb44 <__sflush_r+0x74>
 800bb40:	682b      	ldr	r3, [r5, #0]
 800bb42:	b903      	cbnz	r3, 800bb46 <__sflush_r+0x76>
 800bb44:	6560      	str	r0, [r4, #84]	@ 0x54
 800bb46:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bb48:	602f      	str	r7, [r5, #0]
 800bb4a:	b1b9      	cbz	r1, 800bb7c <__sflush_r+0xac>
 800bb4c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bb50:	4299      	cmp	r1, r3
 800bb52:	d002      	beq.n	800bb5a <__sflush_r+0x8a>
 800bb54:	4628      	mov	r0, r5
 800bb56:	f7ff fca3 	bl	800b4a0 <_free_r>
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	6363      	str	r3, [r4, #52]	@ 0x34
 800bb5e:	e00d      	b.n	800bb7c <__sflush_r+0xac>
 800bb60:	2301      	movs	r3, #1
 800bb62:	4628      	mov	r0, r5
 800bb64:	47b0      	blx	r6
 800bb66:	4602      	mov	r2, r0
 800bb68:	1c50      	adds	r0, r2, #1
 800bb6a:	d1c9      	bne.n	800bb00 <__sflush_r+0x30>
 800bb6c:	682b      	ldr	r3, [r5, #0]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d0c6      	beq.n	800bb00 <__sflush_r+0x30>
 800bb72:	2b1d      	cmp	r3, #29
 800bb74:	d001      	beq.n	800bb7a <__sflush_r+0xaa>
 800bb76:	2b16      	cmp	r3, #22
 800bb78:	d11d      	bne.n	800bbb6 <__sflush_r+0xe6>
 800bb7a:	602f      	str	r7, [r5, #0]
 800bb7c:	2000      	movs	r0, #0
 800bb7e:	e021      	b.n	800bbc4 <__sflush_r+0xf4>
 800bb80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb84:	b21b      	sxth	r3, r3
 800bb86:	e01a      	b.n	800bbbe <__sflush_r+0xee>
 800bb88:	690f      	ldr	r7, [r1, #16]
 800bb8a:	2f00      	cmp	r7, #0
 800bb8c:	d0f6      	beq.n	800bb7c <__sflush_r+0xac>
 800bb8e:	0793      	lsls	r3, r2, #30
 800bb90:	bf18      	it	ne
 800bb92:	2300      	movne	r3, #0
 800bb94:	680e      	ldr	r6, [r1, #0]
 800bb96:	bf08      	it	eq
 800bb98:	694b      	ldreq	r3, [r1, #20]
 800bb9a:	1bf6      	subs	r6, r6, r7
 800bb9c:	600f      	str	r7, [r1, #0]
 800bb9e:	608b      	str	r3, [r1, #8]
 800bba0:	2e00      	cmp	r6, #0
 800bba2:	ddeb      	ble.n	800bb7c <__sflush_r+0xac>
 800bba4:	4633      	mov	r3, r6
 800bba6:	463a      	mov	r2, r7
 800bba8:	4628      	mov	r0, r5
 800bbaa:	6a21      	ldr	r1, [r4, #32]
 800bbac:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800bbb0:	47e0      	blx	ip
 800bbb2:	2800      	cmp	r0, #0
 800bbb4:	dc07      	bgt.n	800bbc6 <__sflush_r+0xf6>
 800bbb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bbbe:	f04f 30ff 	mov.w	r0, #4294967295
 800bbc2:	81a3      	strh	r3, [r4, #12]
 800bbc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbc6:	4407      	add	r7, r0
 800bbc8:	1a36      	subs	r6, r6, r0
 800bbca:	e7e9      	b.n	800bba0 <__sflush_r+0xd0>
 800bbcc:	20400001 	.word	0x20400001

0800bbd0 <_fflush_r>:
 800bbd0:	b538      	push	{r3, r4, r5, lr}
 800bbd2:	690b      	ldr	r3, [r1, #16]
 800bbd4:	4605      	mov	r5, r0
 800bbd6:	460c      	mov	r4, r1
 800bbd8:	b913      	cbnz	r3, 800bbe0 <_fflush_r+0x10>
 800bbda:	2500      	movs	r5, #0
 800bbdc:	4628      	mov	r0, r5
 800bbde:	bd38      	pop	{r3, r4, r5, pc}
 800bbe0:	b118      	cbz	r0, 800bbea <_fflush_r+0x1a>
 800bbe2:	6a03      	ldr	r3, [r0, #32]
 800bbe4:	b90b      	cbnz	r3, 800bbea <_fflush_r+0x1a>
 800bbe6:	f7ff fa51 	bl	800b08c <__sinit>
 800bbea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d0f3      	beq.n	800bbda <_fflush_r+0xa>
 800bbf2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bbf4:	07d0      	lsls	r0, r2, #31
 800bbf6:	d404      	bmi.n	800bc02 <_fflush_r+0x32>
 800bbf8:	0599      	lsls	r1, r3, #22
 800bbfa:	d402      	bmi.n	800bc02 <_fflush_r+0x32>
 800bbfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bbfe:	f7ff fc4c 	bl	800b49a <__retarget_lock_acquire_recursive>
 800bc02:	4628      	mov	r0, r5
 800bc04:	4621      	mov	r1, r4
 800bc06:	f7ff ff63 	bl	800bad0 <__sflush_r>
 800bc0a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bc0c:	4605      	mov	r5, r0
 800bc0e:	07da      	lsls	r2, r3, #31
 800bc10:	d4e4      	bmi.n	800bbdc <_fflush_r+0xc>
 800bc12:	89a3      	ldrh	r3, [r4, #12]
 800bc14:	059b      	lsls	r3, r3, #22
 800bc16:	d4e1      	bmi.n	800bbdc <_fflush_r+0xc>
 800bc18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bc1a:	f7ff fc3f 	bl	800b49c <__retarget_lock_release_recursive>
 800bc1e:	e7dd      	b.n	800bbdc <_fflush_r+0xc>

0800bc20 <__swhatbuf_r>:
 800bc20:	b570      	push	{r4, r5, r6, lr}
 800bc22:	460c      	mov	r4, r1
 800bc24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc28:	4615      	mov	r5, r2
 800bc2a:	2900      	cmp	r1, #0
 800bc2c:	461e      	mov	r6, r3
 800bc2e:	b096      	sub	sp, #88	@ 0x58
 800bc30:	da0c      	bge.n	800bc4c <__swhatbuf_r+0x2c>
 800bc32:	89a3      	ldrh	r3, [r4, #12]
 800bc34:	2100      	movs	r1, #0
 800bc36:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bc3a:	bf14      	ite	ne
 800bc3c:	2340      	movne	r3, #64	@ 0x40
 800bc3e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bc42:	2000      	movs	r0, #0
 800bc44:	6031      	str	r1, [r6, #0]
 800bc46:	602b      	str	r3, [r5, #0]
 800bc48:	b016      	add	sp, #88	@ 0x58
 800bc4a:	bd70      	pop	{r4, r5, r6, pc}
 800bc4c:	466a      	mov	r2, sp
 800bc4e:	f000 f849 	bl	800bce4 <_fstat_r>
 800bc52:	2800      	cmp	r0, #0
 800bc54:	dbed      	blt.n	800bc32 <__swhatbuf_r+0x12>
 800bc56:	9901      	ldr	r1, [sp, #4]
 800bc58:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bc5c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bc60:	4259      	negs	r1, r3
 800bc62:	4159      	adcs	r1, r3
 800bc64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bc68:	e7eb      	b.n	800bc42 <__swhatbuf_r+0x22>

0800bc6a <__smakebuf_r>:
 800bc6a:	898b      	ldrh	r3, [r1, #12]
 800bc6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bc6e:	079d      	lsls	r5, r3, #30
 800bc70:	4606      	mov	r6, r0
 800bc72:	460c      	mov	r4, r1
 800bc74:	d507      	bpl.n	800bc86 <__smakebuf_r+0x1c>
 800bc76:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bc7a:	6023      	str	r3, [r4, #0]
 800bc7c:	6123      	str	r3, [r4, #16]
 800bc7e:	2301      	movs	r3, #1
 800bc80:	6163      	str	r3, [r4, #20]
 800bc82:	b003      	add	sp, #12
 800bc84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc86:	466a      	mov	r2, sp
 800bc88:	ab01      	add	r3, sp, #4
 800bc8a:	f7ff ffc9 	bl	800bc20 <__swhatbuf_r>
 800bc8e:	9f00      	ldr	r7, [sp, #0]
 800bc90:	4605      	mov	r5, r0
 800bc92:	4639      	mov	r1, r7
 800bc94:	4630      	mov	r0, r6
 800bc96:	f7ff f8e1 	bl	800ae5c <_malloc_r>
 800bc9a:	b948      	cbnz	r0, 800bcb0 <__smakebuf_r+0x46>
 800bc9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bca0:	059a      	lsls	r2, r3, #22
 800bca2:	d4ee      	bmi.n	800bc82 <__smakebuf_r+0x18>
 800bca4:	f023 0303 	bic.w	r3, r3, #3
 800bca8:	f043 0302 	orr.w	r3, r3, #2
 800bcac:	81a3      	strh	r3, [r4, #12]
 800bcae:	e7e2      	b.n	800bc76 <__smakebuf_r+0xc>
 800bcb0:	89a3      	ldrh	r3, [r4, #12]
 800bcb2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bcb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bcba:	81a3      	strh	r3, [r4, #12]
 800bcbc:	9b01      	ldr	r3, [sp, #4]
 800bcbe:	6020      	str	r0, [r4, #0]
 800bcc0:	b15b      	cbz	r3, 800bcda <__smakebuf_r+0x70>
 800bcc2:	4630      	mov	r0, r6
 800bcc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bcc8:	f000 f81e 	bl	800bd08 <_isatty_r>
 800bccc:	b128      	cbz	r0, 800bcda <__smakebuf_r+0x70>
 800bcce:	89a3      	ldrh	r3, [r4, #12]
 800bcd0:	f023 0303 	bic.w	r3, r3, #3
 800bcd4:	f043 0301 	orr.w	r3, r3, #1
 800bcd8:	81a3      	strh	r3, [r4, #12]
 800bcda:	89a3      	ldrh	r3, [r4, #12]
 800bcdc:	431d      	orrs	r5, r3
 800bcde:	81a5      	strh	r5, [r4, #12]
 800bce0:	e7cf      	b.n	800bc82 <__smakebuf_r+0x18>
	...

0800bce4 <_fstat_r>:
 800bce4:	b538      	push	{r3, r4, r5, lr}
 800bce6:	2300      	movs	r3, #0
 800bce8:	4d06      	ldr	r5, [pc, #24]	@ (800bd04 <_fstat_r+0x20>)
 800bcea:	4604      	mov	r4, r0
 800bcec:	4608      	mov	r0, r1
 800bcee:	4611      	mov	r1, r2
 800bcf0:	602b      	str	r3, [r5, #0]
 800bcf2:	f7f6 fd13 	bl	800271c <_fstat>
 800bcf6:	1c43      	adds	r3, r0, #1
 800bcf8:	d102      	bne.n	800bd00 <_fstat_r+0x1c>
 800bcfa:	682b      	ldr	r3, [r5, #0]
 800bcfc:	b103      	cbz	r3, 800bd00 <_fstat_r+0x1c>
 800bcfe:	6023      	str	r3, [r4, #0]
 800bd00:	bd38      	pop	{r3, r4, r5, pc}
 800bd02:	bf00      	nop
 800bd04:	200006b4 	.word	0x200006b4

0800bd08 <_isatty_r>:
 800bd08:	b538      	push	{r3, r4, r5, lr}
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	4d05      	ldr	r5, [pc, #20]	@ (800bd24 <_isatty_r+0x1c>)
 800bd0e:	4604      	mov	r4, r0
 800bd10:	4608      	mov	r0, r1
 800bd12:	602b      	str	r3, [r5, #0]
 800bd14:	f7f6 fd11 	bl	800273a <_isatty>
 800bd18:	1c43      	adds	r3, r0, #1
 800bd1a:	d102      	bne.n	800bd22 <_isatty_r+0x1a>
 800bd1c:	682b      	ldr	r3, [r5, #0]
 800bd1e:	b103      	cbz	r3, 800bd22 <_isatty_r+0x1a>
 800bd20:	6023      	str	r3, [r4, #0]
 800bd22:	bd38      	pop	{r3, r4, r5, pc}
 800bd24:	200006b4 	.word	0x200006b4

0800bd28 <memchr>:
 800bd28:	4603      	mov	r3, r0
 800bd2a:	b510      	push	{r4, lr}
 800bd2c:	b2c9      	uxtb	r1, r1
 800bd2e:	4402      	add	r2, r0
 800bd30:	4293      	cmp	r3, r2
 800bd32:	4618      	mov	r0, r3
 800bd34:	d101      	bne.n	800bd3a <memchr+0x12>
 800bd36:	2000      	movs	r0, #0
 800bd38:	e003      	b.n	800bd42 <memchr+0x1a>
 800bd3a:	7804      	ldrb	r4, [r0, #0]
 800bd3c:	3301      	adds	r3, #1
 800bd3e:	428c      	cmp	r4, r1
 800bd40:	d1f6      	bne.n	800bd30 <memchr+0x8>
 800bd42:	bd10      	pop	{r4, pc}

0800bd44 <_init>:
 800bd44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd46:	bf00      	nop
 800bd48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd4a:	bc08      	pop	{r3}
 800bd4c:	469e      	mov	lr, r3
 800bd4e:	4770      	bx	lr

0800bd50 <_fini>:
 800bd50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd52:	bf00      	nop
 800bd54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd56:	bc08      	pop	{r3}
 800bd58:	469e      	mov	lr, r3
 800bd5a:	4770      	bx	lr
