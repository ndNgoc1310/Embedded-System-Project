
ES_Project_Digital-Clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052e4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080053f0  080053f0  000063f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800541c  0800541c  0000705c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800541c  0800541c  0000705c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800541c  0800541c  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800541c  0800541c  0000641c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005420  08005420  00006420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005424  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  2000005c  08005480  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  08005480  000071a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d7e1  00000000  00000000  00007085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024e1  00000000  00000000  00014866  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be0  00000000  00000000  00016d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000095c  00000000  00000000  00017928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001833d  00000000  00000000  00018284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010eef  00000000  00000000  000305c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089ed5  00000000  00000000  000414b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cb385  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fc0  00000000  00000000  000cb3c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  000ce388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	080053d8 	.word	0x080053d8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	080053d8 	.word	0x080053d8

0800014c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000152:	1d3b      	adds	r3, r7, #4
 8000154:	2200      	movs	r2, #0
 8000156:	601a      	str	r2, [r3, #0]
 8000158:	605a      	str	r2, [r3, #4]
 800015a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800015c:	4b18      	ldr	r3, [pc, #96]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800015e:	4a19      	ldr	r2, [pc, #100]	@ (80001c4 <MX_ADC1_Init+0x78>)
 8000160:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000162:	4b17      	ldr	r3, [pc, #92]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000164:	2200      	movs	r2, #0
 8000166:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000168:	4b15      	ldr	r3, [pc, #84]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800016a:	2200      	movs	r2, #0
 800016c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800016e:	4b14      	ldr	r3, [pc, #80]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000170:	2200      	movs	r2, #0
 8000172:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000174:	4b12      	ldr	r3, [pc, #72]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000176:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800017a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800017c:	4b10      	ldr	r3, [pc, #64]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800017e:	2200      	movs	r2, #0
 8000180:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000182:	4b0f      	ldr	r3, [pc, #60]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000184:	2201      	movs	r2, #1
 8000186:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000188:	480d      	ldr	r0, [pc, #52]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800018a:	f001 fed3 	bl	8001f34 <HAL_ADC_Init>
 800018e:	4603      	mov	r3, r0
 8000190:	2b00      	cmp	r3, #0
 8000192:	d001      	beq.n	8000198 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000194:	f001 fd06 	bl	8001ba4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000198:	2304      	movs	r3, #4
 800019a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800019c:	2301      	movs	r3, #1
 800019e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001a0:	2300      	movs	r3, #0
 80001a2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	4619      	mov	r1, r3
 80001a8:	4805      	ldr	r0, [pc, #20]	@ (80001c0 <MX_ADC1_Init+0x74>)
 80001aa:	f002 f925 	bl	80023f8 <HAL_ADC_ConfigChannel>
 80001ae:	4603      	mov	r3, r0
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d001      	beq.n	80001b8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80001b4:	f001 fcf6 	bl	8001ba4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80001b8:	bf00      	nop
 80001ba:	3710      	adds	r7, #16
 80001bc:	46bd      	mov	sp, r7
 80001be:	bd80      	pop	{r7, pc}
 80001c0:	20000078 	.word	0x20000078
 80001c4:	40012400 	.word	0x40012400

080001c8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b088      	sub	sp, #32
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001d0:	f107 0310 	add.w	r3, r7, #16
 80001d4:	2200      	movs	r2, #0
 80001d6:	601a      	str	r2, [r3, #0]
 80001d8:	605a      	str	r2, [r3, #4]
 80001da:	609a      	str	r2, [r3, #8]
 80001dc:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	4a18      	ldr	r2, [pc, #96]	@ (8000244 <HAL_ADC_MspInit+0x7c>)
 80001e4:	4293      	cmp	r3, r2
 80001e6:	d129      	bne.n	800023c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80001e8:	4b17      	ldr	r3, [pc, #92]	@ (8000248 <HAL_ADC_MspInit+0x80>)
 80001ea:	699b      	ldr	r3, [r3, #24]
 80001ec:	4a16      	ldr	r2, [pc, #88]	@ (8000248 <HAL_ADC_MspInit+0x80>)
 80001ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80001f2:	6193      	str	r3, [r2, #24]
 80001f4:	4b14      	ldr	r3, [pc, #80]	@ (8000248 <HAL_ADC_MspInit+0x80>)
 80001f6:	699b      	ldr	r3, [r3, #24]
 80001f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80001fc:	60fb      	str	r3, [r7, #12]
 80001fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000200:	4b11      	ldr	r3, [pc, #68]	@ (8000248 <HAL_ADC_MspInit+0x80>)
 8000202:	699b      	ldr	r3, [r3, #24]
 8000204:	4a10      	ldr	r2, [pc, #64]	@ (8000248 <HAL_ADC_MspInit+0x80>)
 8000206:	f043 0304 	orr.w	r3, r3, #4
 800020a:	6193      	str	r3, [r2, #24]
 800020c:	4b0e      	ldr	r3, [pc, #56]	@ (8000248 <HAL_ADC_MspInit+0x80>)
 800020e:	699b      	ldr	r3, [r3, #24]
 8000210:	f003 0304 	and.w	r3, r3, #4
 8000214:	60bb      	str	r3, [r7, #8]
 8000216:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000218:	2310      	movs	r3, #16
 800021a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800021c:	2303      	movs	r3, #3
 800021e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000220:	f107 0310 	add.w	r3, r7, #16
 8000224:	4619      	mov	r1, r3
 8000226:	4809      	ldr	r0, [pc, #36]	@ (800024c <HAL_ADC_MspInit+0x84>)
 8000228:	f002 fc42 	bl	8002ab0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800022c:	2200      	movs	r2, #0
 800022e:	2100      	movs	r1, #0
 8000230:	2012      	movs	r0, #18
 8000232:	f002 fb54 	bl	80028de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000236:	2012      	movs	r0, #18
 8000238:	f002 fb6d 	bl	8002916 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800023c:	bf00      	nop
 800023e:	3720      	adds	r7, #32
 8000240:	46bd      	mov	sp, r7
 8000242:	bd80      	pop	{r7, pc}
 8000244:	40012400 	.word	0x40012400
 8000248:	40021000 	.word	0x40021000
 800024c:	40010800 	.word	0x40010800

08000250 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b088      	sub	sp, #32
 8000254:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000256:	f107 0310 	add.w	r3, r7, #16
 800025a:	2200      	movs	r2, #0
 800025c:	601a      	str	r2, [r3, #0]
 800025e:	605a      	str	r2, [r3, #4]
 8000260:	609a      	str	r2, [r3, #8]
 8000262:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000264:	4b28      	ldr	r3, [pc, #160]	@ (8000308 <MX_GPIO_Init+0xb8>)
 8000266:	699b      	ldr	r3, [r3, #24]
 8000268:	4a27      	ldr	r2, [pc, #156]	@ (8000308 <MX_GPIO_Init+0xb8>)
 800026a:	f043 0320 	orr.w	r3, r3, #32
 800026e:	6193      	str	r3, [r2, #24]
 8000270:	4b25      	ldr	r3, [pc, #148]	@ (8000308 <MX_GPIO_Init+0xb8>)
 8000272:	699b      	ldr	r3, [r3, #24]
 8000274:	f003 0320 	and.w	r3, r3, #32
 8000278:	60fb      	str	r3, [r7, #12]
 800027a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800027c:	4b22      	ldr	r3, [pc, #136]	@ (8000308 <MX_GPIO_Init+0xb8>)
 800027e:	699b      	ldr	r3, [r3, #24]
 8000280:	4a21      	ldr	r2, [pc, #132]	@ (8000308 <MX_GPIO_Init+0xb8>)
 8000282:	f043 0304 	orr.w	r3, r3, #4
 8000286:	6193      	str	r3, [r2, #24]
 8000288:	4b1f      	ldr	r3, [pc, #124]	@ (8000308 <MX_GPIO_Init+0xb8>)
 800028a:	699b      	ldr	r3, [r3, #24]
 800028c:	f003 0304 	and.w	r3, r3, #4
 8000290:	60bb      	str	r3, [r7, #8]
 8000292:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000294:	4b1c      	ldr	r3, [pc, #112]	@ (8000308 <MX_GPIO_Init+0xb8>)
 8000296:	699b      	ldr	r3, [r3, #24]
 8000298:	4a1b      	ldr	r2, [pc, #108]	@ (8000308 <MX_GPIO_Init+0xb8>)
 800029a:	f043 0308 	orr.w	r3, r3, #8
 800029e:	6193      	str	r3, [r2, #24]
 80002a0:	4b19      	ldr	r3, [pc, #100]	@ (8000308 <MX_GPIO_Init+0xb8>)
 80002a2:	699b      	ldr	r3, [r3, #24]
 80002a4:	f003 0308 	and.w	r3, r3, #8
 80002a8:	607b      	str	r3, [r7, #4]
 80002aa:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : BUTTON0_IN12_Pin BUTTON1_IN13_Pin BUTTON2_IN14_Pin BUTTON3_IN15_Pin
                           RTC_IN5_Pin */
  GPIO_InitStruct.Pin = BUTTON0_IN12_Pin|BUTTON1_IN13_Pin|BUTTON2_IN14_Pin|BUTTON3_IN15_Pin
 80002ac:	f24f 0320 	movw	r3, #61472	@ 0xf020
 80002b0:	613b      	str	r3, [r7, #16]
                          |RTC_IN5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80002b2:	4b16      	ldr	r3, [pc, #88]	@ (800030c <MX_GPIO_Init+0xbc>)
 80002b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002b6:	2301      	movs	r3, #1
 80002b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002ba:	f107 0310 	add.w	r3, r7, #16
 80002be:	4619      	mov	r1, r3
 80002c0:	4813      	ldr	r0, [pc, #76]	@ (8000310 <MX_GPIO_Init+0xc0>)
 80002c2:	f002 fbf5 	bl	8002ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON4_IN8_Pin */
  GPIO_InitStruct.Pin = BUTTON4_IN8_Pin;
 80002c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80002ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80002cc:	4b0f      	ldr	r3, [pc, #60]	@ (800030c <MX_GPIO_Init+0xbc>)
 80002ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002d0:	2301      	movs	r3, #1
 80002d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON4_IN8_GPIO_Port, &GPIO_InitStruct);
 80002d4:	f107 0310 	add.w	r3, r7, #16
 80002d8:	4619      	mov	r1, r3
 80002da:	480e      	ldr	r0, [pc, #56]	@ (8000314 <MX_GPIO_Init+0xc4>)
 80002dc:	f002 fbe8 	bl	8002ab0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80002e0:	2200      	movs	r2, #0
 80002e2:	2100      	movs	r1, #0
 80002e4:	2017      	movs	r0, #23
 80002e6:	f002 fafa 	bl	80028de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80002ea:	2017      	movs	r0, #23
 80002ec:	f002 fb13 	bl	8002916 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80002f0:	2200      	movs	r2, #0
 80002f2:	2100      	movs	r1, #0
 80002f4:	2028      	movs	r0, #40	@ 0x28
 80002f6:	f002 faf2 	bl	80028de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80002fa:	2028      	movs	r0, #40	@ 0x28
 80002fc:	f002 fb0b 	bl	8002916 <HAL_NVIC_EnableIRQ>

}
 8000300:	bf00      	nop
 8000302:	3720      	adds	r7, #32
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}
 8000308:	40021000 	.word	0x40021000
 800030c:	10210000 	.word	0x10210000
 8000310:	40010c00 	.word	0x40010c00
 8000314:	40010800 	.word	0x40010800

08000318 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800031c:	4b12      	ldr	r3, [pc, #72]	@ (8000368 <MX_I2C1_Init+0x50>)
 800031e:	4a13      	ldr	r2, [pc, #76]	@ (800036c <MX_I2C1_Init+0x54>)
 8000320:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000322:	4b11      	ldr	r3, [pc, #68]	@ (8000368 <MX_I2C1_Init+0x50>)
 8000324:	4a12      	ldr	r2, [pc, #72]	@ (8000370 <MX_I2C1_Init+0x58>)
 8000326:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000328:	4b0f      	ldr	r3, [pc, #60]	@ (8000368 <MX_I2C1_Init+0x50>)
 800032a:	2200      	movs	r2, #0
 800032c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800032e:	4b0e      	ldr	r3, [pc, #56]	@ (8000368 <MX_I2C1_Init+0x50>)
 8000330:	2200      	movs	r2, #0
 8000332:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000334:	4b0c      	ldr	r3, [pc, #48]	@ (8000368 <MX_I2C1_Init+0x50>)
 8000336:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800033a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800033c:	4b0a      	ldr	r3, [pc, #40]	@ (8000368 <MX_I2C1_Init+0x50>)
 800033e:	2200      	movs	r2, #0
 8000340:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000342:	4b09      	ldr	r3, [pc, #36]	@ (8000368 <MX_I2C1_Init+0x50>)
 8000344:	2200      	movs	r2, #0
 8000346:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000348:	4b07      	ldr	r3, [pc, #28]	@ (8000368 <MX_I2C1_Init+0x50>)
 800034a:	2200      	movs	r2, #0
 800034c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800034e:	4b06      	ldr	r3, [pc, #24]	@ (8000368 <MX_I2C1_Init+0x50>)
 8000350:	2200      	movs	r2, #0
 8000352:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000354:	4804      	ldr	r0, [pc, #16]	@ (8000368 <MX_I2C1_Init+0x50>)
 8000356:	f002 fd5f 	bl	8002e18 <HAL_I2C_Init>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d001      	beq.n	8000364 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000360:	f001 fc20 	bl	8001ba4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000364:	bf00      	nop
 8000366:	bd80      	pop	{r7, pc}
 8000368:	200000a8 	.word	0x200000a8
 800036c:	40005400 	.word	0x40005400
 8000370:	00061a80 	.word	0x00061a80

08000374 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b088      	sub	sp, #32
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800037c:	f107 0310 	add.w	r3, r7, #16
 8000380:	2200      	movs	r2, #0
 8000382:	601a      	str	r2, [r3, #0]
 8000384:	605a      	str	r2, [r3, #4]
 8000386:	609a      	str	r2, [r3, #8]
 8000388:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	4a15      	ldr	r2, [pc, #84]	@ (80003e4 <HAL_I2C_MspInit+0x70>)
 8000390:	4293      	cmp	r3, r2
 8000392:	d123      	bne.n	80003dc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000394:	4b14      	ldr	r3, [pc, #80]	@ (80003e8 <HAL_I2C_MspInit+0x74>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	4a13      	ldr	r2, [pc, #76]	@ (80003e8 <HAL_I2C_MspInit+0x74>)
 800039a:	f043 0308 	orr.w	r3, r3, #8
 800039e:	6193      	str	r3, [r2, #24]
 80003a0:	4b11      	ldr	r3, [pc, #68]	@ (80003e8 <HAL_I2C_MspInit+0x74>)
 80003a2:	699b      	ldr	r3, [r3, #24]
 80003a4:	f003 0308 	and.w	r3, r3, #8
 80003a8:	60fb      	str	r3, [r7, #12]
 80003aa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80003ac:	23c0      	movs	r3, #192	@ 0xc0
 80003ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80003b0:	2312      	movs	r3, #18
 80003b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003b4:	2303      	movs	r3, #3
 80003b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003b8:	f107 0310 	add.w	r3, r7, #16
 80003bc:	4619      	mov	r1, r3
 80003be:	480b      	ldr	r0, [pc, #44]	@ (80003ec <HAL_I2C_MspInit+0x78>)
 80003c0:	f002 fb76 	bl	8002ab0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80003c4:	4b08      	ldr	r3, [pc, #32]	@ (80003e8 <HAL_I2C_MspInit+0x74>)
 80003c6:	69db      	ldr	r3, [r3, #28]
 80003c8:	4a07      	ldr	r2, [pc, #28]	@ (80003e8 <HAL_I2C_MspInit+0x74>)
 80003ca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80003ce:	61d3      	str	r3, [r2, #28]
 80003d0:	4b05      	ldr	r3, [pc, #20]	@ (80003e8 <HAL_I2C_MspInit+0x74>)
 80003d2:	69db      	ldr	r3, [r3, #28]
 80003d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80003d8:	60bb      	str	r3, [r7, #8]
 80003da:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80003dc:	bf00      	nop
 80003de:	3720      	adds	r7, #32
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	40005400 	.word	0x40005400
 80003e8:	40021000 	.word	0x40021000
 80003ec:	40010c00 	.word	0x40010c00

080003f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003f2:	b08b      	sub	sp, #44	@ 0x2c
 80003f4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003f6:	f001 fd17 	bl	8001e28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003fa:	f000 f8e1 	bl	80005c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003fe:	f7ff ff27 	bl	8000250 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000402:	f7ff ff89 	bl	8000318 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000406:	f7ff fea1 	bl	800014c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800040a:	f001 fc69 	bl	8001ce0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // Set time to the RTC module through I2C interface (Run only once after reset the RTC).
  //    void Time_Set(uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom, uint8_t month, uint8_t year)
  Time_Set
 800040e:	2319      	movs	r3, #25
 8000410:	9302      	str	r3, [sp, #8]
 8000412:	2304      	movs	r3, #4
 8000414:	9301      	str	r3, [sp, #4]
 8000416:	230c      	movs	r3, #12
 8000418:	9300      	str	r3, [sp, #0]
 800041a:	2307      	movs	r3, #7
 800041c:	2216      	movs	r2, #22
 800041e:	2112      	movs	r1, #18
 8000420:	2000      	movs	r0, #0
 8000422:	f000 f965 	bl	80006f0 <Time_Set>
     4, // Month: 1-12
    25  // Year: 0-99 (0 = 2000, 1 = 2001, ..., 99 = 2099)
  );

  // Initialize RTC module (Run only once after reset the RTC).
  Time_Ctrl 
 8000426:	2300      	movs	r3, #0
 8000428:	9301      	str	r3, [sp, #4]
 800042a:	2300      	movs	r3, #0
 800042c:	9300      	str	r3, [sp, #0]
 800042e:	2300      	movs	r3, #0
 8000430:	2200      	movs	r2, #0
 8000432:	2100      	movs	r1, #0
 8000434:	2000      	movs	r0, #0
 8000436:	f000 fa03 	bl	8000840 <Time_Ctrl>
     0, // Day of the week: 1-7 (1 = Sunday, 2 = Monday, ..., 7 = Saturday), or Date of the month: 1-31
     0  // Select: 1 = day of week, 0 = date of month
  );   

  // Initially retrieve the time values from the RTC module
  Time_Get(&time_get_data);
 800043a:	4851      	ldr	r0, [pc, #324]	@ (8000580 <main+0x190>)
 800043c:	f000 f9ac 	bl	8000798 <Time_Get>

  // Clear all alarms in the EEPROM module
  for (int i = 0; i < 10; i++)
 8000440:	2300      	movs	r3, #0
 8000442:	617b      	str	r3, [r7, #20]
 8000444:	e007      	b.n	8000456 <main+0x66>
  {
    Alarm_Clear(i);
 8000446:	697b      	ldr	r3, [r7, #20]
 8000448:	b2db      	uxtb	r3, r3
 800044a:	4618      	mov	r0, r3
 800044c:	f000 fb70 	bl	8000b30 <Alarm_Clear>
  for (int i = 0; i < 10; i++)
 8000450:	697b      	ldr	r3, [r7, #20]
 8000452:	3301      	adds	r3, #1
 8000454:	617b      	str	r3, [r7, #20]
 8000456:	697b      	ldr	r3, [r7, #20]
 8000458:	2b09      	cmp	r3, #9
 800045a:	ddf4      	ble.n	8000446 <main+0x56>
  //   false, // true = ON, false = OFF 
  //    1     // Slot number of the alarm in the EEPROM module (0-9)
  // );  

  // Initially retrieve the alarm values from the EEPROM module
  for (int i = 0; i <= 10; i++)
 800045c:	2300      	movs	r3, #0
 800045e:	613b      	str	r3, [r7, #16]
 8000460:	e00c      	b.n	800047c <main+0x8c>
  {
    Alarm_Get(i, &alarm_get_data[i]);
 8000462:	693b      	ldr	r3, [r7, #16]
 8000464:	b2da      	uxtb	r2, r3
 8000466:	693b      	ldr	r3, [r7, #16]
 8000468:	009b      	lsls	r3, r3, #2
 800046a:	4946      	ldr	r1, [pc, #280]	@ (8000584 <main+0x194>)
 800046c:	440b      	add	r3, r1
 800046e:	4619      	mov	r1, r3
 8000470:	4610      	mov	r0, r2
 8000472:	f000 fb2f 	bl	8000ad4 <Alarm_Get>
  for (int i = 0; i <= 10; i++)
 8000476:	693b      	ldr	r3, [r7, #16]
 8000478:	3301      	adds	r3, #1
 800047a:	613b      	str	r3, [r7, #16]
 800047c:	693b      	ldr	r3, [r7, #16]
 800047e:	2b0a      	cmp	r3, #10
 8000480:	ddef      	ble.n	8000462 <main+0x72>
  // Set the initial system parameters to current time values and default settings for convenience
  system_param_data =
  (SYSTEM_PARAM_DATA)
  {
    0,                          // Seconds: 0-59
    time_get_data.minute,       // Minutes: 0-59
 8000482:	4b3f      	ldr	r3, [pc, #252]	@ (8000580 <main+0x190>)
 8000484:	785b      	ldrb	r3, [r3, #1]
 8000486:	fa5f fc83 	uxtb.w	ip, r3
    time_get_data.hour,         // Hours: 0-23
 800048a:	4b3d      	ldr	r3, [pc, #244]	@ (8000580 <main+0x190>)
 800048c:	789b      	ldrb	r3, [r3, #2]
 800048e:	b2de      	uxtb	r6, r3
    time_get_data.dayofweek,    // Day of the week: 1-7 (1 = Sunday, 2 = Monday, ..., 7 = Saturday)
 8000490:	4b3b      	ldr	r3, [pc, #236]	@ (8000580 <main+0x190>)
 8000492:	78db      	ldrb	r3, [r3, #3]
 8000494:	b2dd      	uxtb	r5, r3
    time_get_data.dateofmonth,  // Date of the month: 1-31
 8000496:	4b3a      	ldr	r3, [pc, #232]	@ (8000580 <main+0x190>)
 8000498:	791b      	ldrb	r3, [r3, #4]
 800049a:	b2dc      	uxtb	r4, r3
    time_get_data.month,        // Month: 1-12
 800049c:	4b38      	ldr	r3, [pc, #224]	@ (8000580 <main+0x190>)
 800049e:	795b      	ldrb	r3, [r3, #5]
 80004a0:	b2d8      	uxtb	r0, r3
    time_get_data.year,         // Year: 0-99 (0 = 2000, 1 = 2001, ..., 99 = 2099)
 80004a2:	4b37      	ldr	r3, [pc, #220]	@ (8000580 <main+0x190>)
 80004a4:	799b      	ldrb	r3, [r3, #6]
 80004a6:	b2d9      	uxtb	r1, r3
    NOT_USED_MODE,              // Select: DAY_OF_WEEK_MODE, DATE_OF_MONTH_MODE, NOT_USED_MODE
    time_get_data.dayofweek,    // Day of the week: 1-7 (1 = Sunday, 2 = Monday, ..., 7 = Saturday), or Date of the month: 1-31
 80004a8:	4b35      	ldr	r3, [pc, #212]	@ (8000580 <main+0x190>)
 80004aa:	78db      	ldrb	r3, [r3, #3]
 80004ac:	b2da      	uxtb	r2, r3
  system_param_data =
 80004ae:	4b36      	ldr	r3, [pc, #216]	@ (8000588 <main+0x198>)
 80004b0:	f04f 0e00 	mov.w	lr, #0
 80004b4:	f883 e000 	strb.w	lr, [r3]
 80004b8:	4b33      	ldr	r3, [pc, #204]	@ (8000588 <main+0x198>)
 80004ba:	f883 c001 	strb.w	ip, [r3, #1]
 80004be:	4b32      	ldr	r3, [pc, #200]	@ (8000588 <main+0x198>)
 80004c0:	709e      	strb	r6, [r3, #2]
 80004c2:	4b31      	ldr	r3, [pc, #196]	@ (8000588 <main+0x198>)
 80004c4:	70dd      	strb	r5, [r3, #3]
 80004c6:	4b30      	ldr	r3, [pc, #192]	@ (8000588 <main+0x198>)
 80004c8:	711c      	strb	r4, [r3, #4]
 80004ca:	4b2f      	ldr	r3, [pc, #188]	@ (8000588 <main+0x198>)
 80004cc:	7158      	strb	r0, [r3, #5]
 80004ce:	4b2e      	ldr	r3, [pc, #184]	@ (8000588 <main+0x198>)
 80004d0:	7199      	strb	r1, [r3, #6]
 80004d2:	4b2d      	ldr	r3, [pc, #180]	@ (8000588 <main+0x198>)
 80004d4:	2102      	movs	r1, #2
 80004d6:	71d9      	strb	r1, [r3, #7]
 80004d8:	4b2b      	ldr	r3, [pc, #172]	@ (8000588 <main+0x198>)
 80004da:	721a      	strb	r2, [r3, #8]
 80004dc:	4b2a      	ldr	r3, [pc, #168]	@ (8000588 <main+0x198>)
 80004de:	2201      	movs	r2, #1
 80004e0:	725a      	strb	r2, [r3, #9]
    true                        // true = ON, false = OFF
  };

  // Initialize the UART module to receive data
  //    HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size);
  HAL_UART_Receive_IT(&huart1, uart_rx_data, 2);
 80004e2:	2202      	movs	r2, #2
 80004e4:	4929      	ldr	r1, [pc, #164]	@ (800058c <main+0x19c>)
 80004e6:	482a      	ldr	r0, [pc, #168]	@ (8000590 <main+0x1a0>)
 80004e8:	f004 fa12 	bl	8004910 <HAL_UART_Receive_IT>

  // Initialize the ADC module to monitor battery voltage
  //    HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc);
  HAL_ADC_Start_IT(&hadc1);
 80004ec:	4829      	ldr	r0, [pc, #164]	@ (8000594 <main+0x1a4>)
 80004ee:	f001 fdf9 	bl	80020e4 <HAL_ADC_Start_IT>
    
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    Button_Handle(&button0);
 80004f2:	4829      	ldr	r0, [pc, #164]	@ (8000598 <main+0x1a8>)
 80004f4:	f000 fc3a 	bl	8000d6c <Button_Handle>
    Button_Handle(&button1);
 80004f8:	4828      	ldr	r0, [pc, #160]	@ (800059c <main+0x1ac>)
 80004fa:	f000 fc37 	bl	8000d6c <Button_Handle>
    Button_Handle(&button2);
 80004fe:	4828      	ldr	r0, [pc, #160]	@ (80005a0 <main+0x1b0>)
 8000500:	f000 fc34 	bl	8000d6c <Button_Handle>
    Button_Handle(&button3);
 8000504:	4827      	ldr	r0, [pc, #156]	@ (80005a4 <main+0x1b4>)
 8000506:	f000 fc31 	bl	8000d6c <Button_Handle>
    Button_Handle(&button4);
 800050a:	4827      	ldr	r0, [pc, #156]	@ (80005a8 <main+0x1b8>)
 800050c:	f000 fc2e 	bl	8000d6c <Button_Handle>
    //   //    void Button_Handle(BUTTON *button)
    //   Button_Handle(&button4);
    // }

    // Check if the RTC Interrupt Flag is set (RTC Interrupt Flag) on PB4 (Activated every second)
    if (rtc_int_flag)
 8000510:	4b26      	ldr	r3, [pc, #152]	@ (80005ac <main+0x1bc>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	b2db      	uxtb	r3, r3
 8000516:	2b00      	cmp	r3, #0
 8000518:	d019      	beq.n	800054e <main+0x15e>
    {
      // Retrieve the time values from the RTC module
      Time_Get(&time_get_data);
 800051a:	4819      	ldr	r0, [pc, #100]	@ (8000580 <main+0x190>)
 800051c:	f000 f93c 	bl	8000798 <Time_Get>
      
      // Check the alarms
      //   void Alarm_Check (ALARM *alarm_check_data, TIME *time_get_data)
      Alarm_Check(&alarm_check_data, &time_get_data);
 8000520:	4917      	ldr	r1, [pc, #92]	@ (8000580 <main+0x190>)
 8000522:	4823      	ldr	r0, [pc, #140]	@ (80005b0 <main+0x1c0>)
 8000524:	f000 fb26 	bl	8000b74 <Alarm_Check>

      // Reset the RTC Interrupt Flag
      rtc_int_flag = false;
 8000528:	4b20      	ldr	r3, [pc, #128]	@ (80005ac <main+0x1bc>)
 800052a:	2200      	movs	r2, #0
 800052c:	701a      	strb	r2, [r3, #0]

      // Toggle the debug RTC interrupt flag for debugging purposes
      debug_rtc_int = !debug_rtc_int;
 800052e:	4b21      	ldr	r3, [pc, #132]	@ (80005b4 <main+0x1c4>)
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	b2db      	uxtb	r3, r3
 8000534:	2b00      	cmp	r3, #0
 8000536:	bf14      	ite	ne
 8000538:	2301      	movne	r3, #1
 800053a:	2300      	moveq	r3, #0
 800053c:	b2db      	uxtb	r3, r3
 800053e:	f083 0301 	eor.w	r3, r3, #1
 8000542:	b2db      	uxtb	r3, r3
 8000544:	f003 0301 	and.w	r3, r3, #1
 8000548:	b2da      	uxtb	r2, r3
 800054a:	4b1a      	ldr	r3, [pc, #104]	@ (80005b4 <main+0x1c4>)
 800054c:	701a      	strb	r2, [r3, #0]
    }

    // Check if the ADC interrupt flag is set (ADC Valid Flag)
    if (adc_valid_flag)
 800054e:	4b1a      	ldr	r3, [pc, #104]	@ (80005b8 <main+0x1c8>)
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	b2db      	uxtb	r3, r3
 8000554:	2b00      	cmp	r3, #0
 8000556:	d005      	beq.n	8000564 <main+0x174>
	  {
      // Re-enable the ADC interrupt to continue monitoring ADC values
      HAL_ADC_Start_IT(&hadc1);
 8000558:	480e      	ldr	r0, [pc, #56]	@ (8000594 <main+0x1a4>)
 800055a:	f001 fdc3 	bl	80020e4 <HAL_ADC_Start_IT>

      // Delay for 100ms to allow the ADC to stabilize
      HAL_Delay(100);
 800055e:	2064      	movs	r0, #100	@ 0x64
 8000560:	f001 fcc4 	bl	8001eec <HAL_Delay>
	  }

    // Check if the UART interrupt flag is set (UART Receive Flag)
    if (uart_rx_flag)
 8000564:	4b15      	ldr	r3, [pc, #84]	@ (80005bc <main+0x1cc>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	b2db      	uxtb	r3, r3
 800056a:	2b00      	cmp	r3, #0
 800056c:	d0c1      	beq.n	80004f2 <main+0x102>
	  {
      // Re-enable the UART interrupt to continue receiving data
      HAL_UART_Receive_IT(&huart1,uart_rx_data,2); 
 800056e:	2202      	movs	r2, #2
 8000570:	4906      	ldr	r1, [pc, #24]	@ (800058c <main+0x19c>)
 8000572:	4807      	ldr	r0, [pc, #28]	@ (8000590 <main+0x1a0>)
 8000574:	f004 f9cc 	bl	8004910 <HAL_UART_Receive_IT>
      
      // Delay for 100ms to allow the UART to stabilize
      HAL_Delay(100);
 8000578:	2064      	movs	r0, #100	@ 0x64
 800057a:	f001 fcb7 	bl	8001eec <HAL_Delay>
    Button_Handle(&button0);
 800057e:	e7b8      	b.n	80004f2 <main+0x102>
 8000580:	2000010c 	.word	0x2000010c
 8000584:	20000114 	.word	0x20000114
 8000588:	20000100 	.word	0x20000100
 800058c:	20000150 	.word	0x20000150
 8000590:	20000154 	.word	0x20000154
 8000594:	20000078 	.word	0x20000078
 8000598:	20000000 	.word	0x20000000
 800059c:	20000010 	.word	0x20000010
 80005a0:	20000020 	.word	0x20000020
 80005a4:	20000030 	.word	0x20000030
 80005a8:	20000040 	.word	0x20000040
 80005ac:	20000140 	.word	0x20000140
 80005b0:	2000013c 	.word	0x2000013c
 80005b4:	20000142 	.word	0x20000142
 80005b8:	20000149 	.word	0x20000149
 80005bc:	2000014e 	.word	0x2000014e

080005c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b094      	sub	sp, #80	@ 0x50
 80005c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80005ca:	2228      	movs	r2, #40	@ 0x28
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f004 fed6 	bl	8005380 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d4:	f107 0314 	add.w	r3, r7, #20
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005e4:	1d3b      	adds	r3, r7, #4
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f0:	2301      	movs	r3, #1
 80005f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80005fa:	2300      	movs	r3, #0
 80005fc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005fe:	2301      	movs	r3, #1
 8000600:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000602:	2302      	movs	r3, #2
 8000604:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000606:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800060a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800060c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000610:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000612:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000616:	4618      	mov	r0, r3
 8000618:	f003 fc64 	bl	8003ee4 <HAL_RCC_OscConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000622:	f001 fabf 	bl	8001ba4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000626:	230f      	movs	r3, #15
 8000628:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062a:	2302      	movs	r3, #2
 800062c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062e:	2300      	movs	r3, #0
 8000630:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000632:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000636:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800063c:	f107 0314 	add.w	r3, r7, #20
 8000640:	2102      	movs	r1, #2
 8000642:	4618      	mov	r0, r3
 8000644:	f003 fed0 	bl	80043e8 <HAL_RCC_ClockConfig>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800064e:	f001 faa9 	bl	8001ba4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000652:	2302      	movs	r3, #2
 8000654:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000656:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800065a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	4618      	mov	r0, r3
 8000660:	f004 f850 	bl	8004704 <HAL_RCCEx_PeriphCLKConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800066a:	f001 fa9b 	bl	8001ba4 <Error_Handler>
  }
}
 800066e:	bf00      	nop
 8000670:	3750      	adds	r7, #80	@ 0x50
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
	...

08000678 <Dec_To_BCD>:
  * @brief  Convert a normal decimal number to Binary Coded Decimal (BCD).
  * @param  val: Decimal number to be converted.
  * @retval uint8_t: BCD representation of the input decimal number.
  */
uint8_t Dec_To_BCD(int val)
{
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  return (uint8_t)( (val/10*16) + (val%10) );
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	4a0e      	ldr	r2, [pc, #56]	@ (80006bc <Dec_To_BCD+0x44>)
 8000684:	fb82 1203 	smull	r1, r2, r2, r3
 8000688:	1092      	asrs	r2, r2, #2
 800068a:	17db      	asrs	r3, r3, #31
 800068c:	1ad3      	subs	r3, r2, r3
 800068e:	b2db      	uxtb	r3, r3
 8000690:	011b      	lsls	r3, r3, #4
 8000692:	b2d8      	uxtb	r0, r3
 8000694:	687a      	ldr	r2, [r7, #4]
 8000696:	4b09      	ldr	r3, [pc, #36]	@ (80006bc <Dec_To_BCD+0x44>)
 8000698:	fb83 1302 	smull	r1, r3, r3, r2
 800069c:	1099      	asrs	r1, r3, #2
 800069e:	17d3      	asrs	r3, r2, #31
 80006a0:	1ac9      	subs	r1, r1, r3
 80006a2:	460b      	mov	r3, r1
 80006a4:	009b      	lsls	r3, r3, #2
 80006a6:	440b      	add	r3, r1
 80006a8:	005b      	lsls	r3, r3, #1
 80006aa:	1ad1      	subs	r1, r2, r3
 80006ac:	b2cb      	uxtb	r3, r1
 80006ae:	4403      	add	r3, r0
 80006b0:	b2db      	uxtb	r3, r3
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bc80      	pop	{r7}
 80006ba:	4770      	bx	lr
 80006bc:	66666667 	.word	0x66666667

080006c0 <BCD_To_Dec>:
  * @brief  Convert a Binary Coded Decimal (BCD) value to a normal decimal number.
  * @param  val: BCD value to be converted.
  * @retval int: Decimal representation of the input BCD value.
  */
int BCD_To_Dec(uint8_t val)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	4603      	mov	r3, r0
 80006c8:	71fb      	strb	r3, [r7, #7]
  return (int)( (val/16*10) + (val%16) );
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	091b      	lsrs	r3, r3, #4
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	461a      	mov	r2, r3
 80006d2:	4613      	mov	r3, r2
 80006d4:	009b      	lsls	r3, r3, #2
 80006d6:	4413      	add	r3, r2
 80006d8:	005b      	lsls	r3, r3, #1
 80006da:	461a      	mov	r2, r3
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	f003 030f 	and.w	r3, r3, #15
 80006e2:	4413      	add	r3, r2
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	370c      	adds	r7, #12
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bc80      	pop	{r7}
 80006ec:	4770      	bx	lr
	...

080006f0 <Time_Set>:
  * @param  month: Month: 1-12
  * @param  year: Year: 0-99 (0 = 2000, 1 = 2001, ..., 99 = 2099)
  * @retval None
*/
void Time_Set (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom, uint8_t month, uint8_t year)
{
 80006f0:	b590      	push	{r4, r7, lr}
 80006f2:	b089      	sub	sp, #36	@ 0x24
 80006f4:	af04      	add	r7, sp, #16
 80006f6:	4604      	mov	r4, r0
 80006f8:	4608      	mov	r0, r1
 80006fa:	4611      	mov	r1, r2
 80006fc:	461a      	mov	r2, r3
 80006fe:	4623      	mov	r3, r4
 8000700:	71fb      	strb	r3, [r7, #7]
 8000702:	4603      	mov	r3, r0
 8000704:	71bb      	strb	r3, [r7, #6]
 8000706:	460b      	mov	r3, r1
 8000708:	717b      	strb	r3, [r7, #5]
 800070a:	4613      	mov	r3, r2
 800070c:	713b      	strb	r3, [r7, #4]
	// A blank array (7 slots) to contain the time values
  uint8_t setTime[7];

  // Store the time values (converted in to BCD code) into the blank array
	setTime[0] = Dec_To_BCD(sec);
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	4618      	mov	r0, r3
 8000712:	f7ff ffb1 	bl	8000678 <Dec_To_BCD>
 8000716:	4603      	mov	r3, r0
 8000718:	723b      	strb	r3, [r7, #8]
	setTime[1] = Dec_To_BCD(min);
 800071a:	79bb      	ldrb	r3, [r7, #6]
 800071c:	4618      	mov	r0, r3
 800071e:	f7ff ffab 	bl	8000678 <Dec_To_BCD>
 8000722:	4603      	mov	r3, r0
 8000724:	727b      	strb	r3, [r7, #9]
	setTime[2] = Dec_To_BCD(hour);
 8000726:	797b      	ldrb	r3, [r7, #5]
 8000728:	4618      	mov	r0, r3
 800072a:	f7ff ffa5 	bl	8000678 <Dec_To_BCD>
 800072e:	4603      	mov	r3, r0
 8000730:	72bb      	strb	r3, [r7, #10]
	setTime[3] = Dec_To_BCD(dow);
 8000732:	793b      	ldrb	r3, [r7, #4]
 8000734:	4618      	mov	r0, r3
 8000736:	f7ff ff9f 	bl	8000678 <Dec_To_BCD>
 800073a:	4603      	mov	r3, r0
 800073c:	72fb      	strb	r3, [r7, #11]
	setTime[4] = Dec_To_BCD(dom);
 800073e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000742:	4618      	mov	r0, r3
 8000744:	f7ff ff98 	bl	8000678 <Dec_To_BCD>
 8000748:	4603      	mov	r3, r0
 800074a:	733b      	strb	r3, [r7, #12]
	setTime[5] = Dec_To_BCD(month);
 800074c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff ff91 	bl	8000678 <Dec_To_BCD>
 8000756:	4603      	mov	r3, r0
 8000758:	737b      	strb	r3, [r7, #13]
	setTime[6] = Dec_To_BCD(year);
 800075a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff ff8a 	bl	8000678 <Dec_To_BCD>
 8000764:	4603      	mov	r3, r0
 8000766:	73bb      	strb	r3, [r7, #14]

  // Send the array containing the time values to the RTC module through I2C interface at address 00h - 06h (size of value: 7 bytes)
  // HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
  //    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);	
  HAL_I2C_Mem_Write(DS3231_I2C, DS3231_ADDR, 0x00, 1, setTime, sizeof(setTime), 1000);
 8000768:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800076c:	9302      	str	r3, [sp, #8]
 800076e:	2307      	movs	r3, #7
 8000770:	9301      	str	r3, [sp, #4]
 8000772:	f107 0308 	add.w	r3, r7, #8
 8000776:	9300      	str	r3, [sp, #0]
 8000778:	2301      	movs	r3, #1
 800077a:	2200      	movs	r2, #0
 800077c:	21d0      	movs	r1, #208	@ 0xd0
 800077e:	4805      	ldr	r0, [pc, #20]	@ (8000794 <Time_Set+0xa4>)
 8000780:	f002 fc8e 	bl	80030a0 <HAL_I2C_Mem_Write>

  // Delay for 1ms to allow the RTC module to process the data
  HAL_Delay(1);
 8000784:	2001      	movs	r0, #1
 8000786:	f001 fbb1 	bl	8001eec <HAL_Delay>
}
 800078a:	bf00      	nop
 800078c:	3714      	adds	r7, #20
 800078e:	46bd      	mov	sp, r7
 8000790:	bd90      	pop	{r4, r7, pc}
 8000792:	bf00      	nop
 8000794:	200000a8 	.word	0x200000a8

08000798 <Time_Get>:
  * @brief  Get time from the RTC module through I2C interface.
  * @param  time_get_data: Pointer to a TIME structure to store the retrieved time values.
  * @retval None
*/
void Time_Get (volatile TIME *time_get_data)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b088      	sub	sp, #32
 800079c:	af04      	add	r7, sp, #16
 800079e:	6078      	str	r0, [r7, #4]
  uint8_t getTime[7];

  // Receive the time values from the RTC module through I2C interface, then store them into the blank array (size of value: 7 bytes)
  // HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
  //    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);  
  HAL_I2C_Mem_Read(DS3231_I2C, DS3231_ADDR, 0x00, 1, getTime, sizeof(getTime), 1000);
 80007a0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007a4:	9302      	str	r3, [sp, #8]
 80007a6:	2307      	movs	r3, #7
 80007a8:	9301      	str	r3, [sp, #4]
 80007aa:	f107 0308 	add.w	r3, r7, #8
 80007ae:	9300      	str	r3, [sp, #0]
 80007b0:	2301      	movs	r3, #1
 80007b2:	2200      	movs	r2, #0
 80007b4:	21d0      	movs	r1, #208	@ 0xd0
 80007b6:	4821      	ldr	r0, [pc, #132]	@ (800083c <Time_Get+0xa4>)
 80007b8:	f002 fd6c 	bl	8003294 <HAL_I2C_Mem_Read>

  // Delay for 1ms to allow the RTC module to process the data
  HAL_Delay(1);
 80007bc:	2001      	movs	r0, #1
 80007be:	f001 fb95 	bl	8001eec <HAL_Delay>

  // Store the time values (converted from BCD code to decimal) into the time variable
	time_get_data->second       = BCD_To_Dec(getTime[0]);
 80007c2:	7a3b      	ldrb	r3, [r7, #8]
 80007c4:	4618      	mov	r0, r3
 80007c6:	f7ff ff7b 	bl	80006c0 <BCD_To_Dec>
 80007ca:	4603      	mov	r3, r0
 80007cc:	b2da      	uxtb	r2, r3
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	701a      	strb	r2, [r3, #0]
	time_get_data->minute       = BCD_To_Dec(getTime[1]);
 80007d2:	7a7b      	ldrb	r3, [r7, #9]
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff ff73 	bl	80006c0 <BCD_To_Dec>
 80007da:	4603      	mov	r3, r0
 80007dc:	b2da      	uxtb	r2, r3
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	705a      	strb	r2, [r3, #1]
	time_get_data->hour         = BCD_To_Dec(getTime[2]);
 80007e2:	7abb      	ldrb	r3, [r7, #10]
 80007e4:	4618      	mov	r0, r3
 80007e6:	f7ff ff6b 	bl	80006c0 <BCD_To_Dec>
 80007ea:	4603      	mov	r3, r0
 80007ec:	b2da      	uxtb	r2, r3
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	709a      	strb	r2, [r3, #2]
	time_get_data->dayofweek    = BCD_To_Dec(getTime[3]);
 80007f2:	7afb      	ldrb	r3, [r7, #11]
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff ff63 	bl	80006c0 <BCD_To_Dec>
 80007fa:	4603      	mov	r3, r0
 80007fc:	b2da      	uxtb	r2, r3
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	70da      	strb	r2, [r3, #3]
	time_get_data->dateofmonth  = BCD_To_Dec(getTime[4]);
 8000802:	7b3b      	ldrb	r3, [r7, #12]
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff ff5b 	bl	80006c0 <BCD_To_Dec>
 800080a:	4603      	mov	r3, r0
 800080c:	b2da      	uxtb	r2, r3
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	711a      	strb	r2, [r3, #4]
	time_get_data->month        = BCD_To_Dec(getTime[5]);
 8000812:	7b7b      	ldrb	r3, [r7, #13]
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff ff53 	bl	80006c0 <BCD_To_Dec>
 800081a:	4603      	mov	r3, r0
 800081c:	b2da      	uxtb	r2, r3
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	715a      	strb	r2, [r3, #5]
	time_get_data->year         = BCD_To_Dec(getTime[6]);
 8000822:	7bbb      	ldrb	r3, [r7, #14]
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff ff4b 	bl	80006c0 <BCD_To_Dec>
 800082a:	4603      	mov	r3, r0
 800082c:	b2da      	uxtb	r2, r3
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	719a      	strb	r2, [r3, #6]
}
 8000832:	bf00      	nop
 8000834:	3710      	adds	r7, #16
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	200000a8 	.word	0x200000a8

08000840 <Time_Ctrl>:
  * @param  dow_dom: Day of the week or date of the month (1-7 or 1-31).
  * @param  dy_dt: Day of week or date of month (1 = day of week, 0 = date of month, 0 = not used).
  * @retval None
*/
void Time_Ctrl (uint8_t mode, uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow_dom, bool dy_dt)
{
 8000840:	b590      	push	{r4, r7, lr}
 8000842:	b08b      	sub	sp, #44	@ 0x2c
 8000844:	af04      	add	r7, sp, #16
 8000846:	4604      	mov	r4, r0
 8000848:	4608      	mov	r0, r1
 800084a:	4611      	mov	r1, r2
 800084c:	461a      	mov	r2, r3
 800084e:	4623      	mov	r3, r4
 8000850:	71fb      	strb	r3, [r7, #7]
 8000852:	4603      	mov	r3, r0
 8000854:	71bb      	strb	r3, [r7, #6]
 8000856:	460b      	mov	r3, r1
 8000858:	717b      	strb	r3, [r7, #5]
 800085a:	4613      	mov	r3, r2
 800085c:	713b      	strb	r3, [r7, #4]
  // A blank array (4 slots) to contain the RTC alarm settings
  uint8_t ctrlTime[4];

  // A mask bit to set the Control register in the RTC module
  //    Address 0Eh: A1IE = 1
  uint8_t ctrlAlarm = 1; 
 800085e:	2301      	movs	r3, #1
 8000860:	73fb      	strb	r3, [r7, #15]

  // A mask bit to set the alarm modes (Bit 7) in the RTC module
  uint8_t maskBit = 128;
 8000862:	2380      	movs	r3, #128	@ 0x80
 8000864:	75fb      	strb	r3, [r7, #23]

  // A mask bit for selection of [day of week] or [date of month] (Bit 6) in the RTC module
  //    If the input [day of week]/ [date of month] selection is 1, the mask bit will be 64.
  uint8_t dyDt = (dy_dt == true) ? 64 : 0;
 8000866:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <Time_Ctrl+0x32>
 800086e:	2340      	movs	r3, #64	@ 0x40
 8000870:	e000      	b.n	8000874 <Time_Ctrl+0x34>
 8000872:	2300      	movs	r3, #0
 8000874:	75bb      	strb	r3, [r7, #22]

  // Store the RTC alarm time settings (converted into BCD code) into the blank array
  ctrlTime[0] = Dec_To_BCD(sec);
 8000876:	79bb      	ldrb	r3, [r7, #6]
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff fefd 	bl	8000678 <Dec_To_BCD>
 800087e:	4603      	mov	r3, r0
 8000880:	743b      	strb	r3, [r7, #16]
	ctrlTime[1] = Dec_To_BCD(min);
 8000882:	797b      	ldrb	r3, [r7, #5]
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff fef7 	bl	8000678 <Dec_To_BCD>
 800088a:	4603      	mov	r3, r0
 800088c:	747b      	strb	r3, [r7, #17]
	ctrlTime[2] = Dec_To_BCD(hour);
 800088e:	793b      	ldrb	r3, [r7, #4]
 8000890:	4618      	mov	r0, r3
 8000892:	f7ff fef1 	bl	8000678 <Dec_To_BCD>
 8000896:	4603      	mov	r3, r0
 8000898:	74bb      	strb	r3, [r7, #18]
	ctrlTime[3] = Dec_To_BCD(dow_dom);
 800089a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800089e:	4618      	mov	r0, r3
 80008a0:	f7ff feea 	bl	8000678 <Dec_To_BCD>
 80008a4:	4603      	mov	r3, r0
 80008a6:	74fb      	strb	r3, [r7, #19]
  //      1    : Alarm when seconds match
  //      2    : Alarm when minutes and seconds match
  //      3    : Alarm when hours, minutes, and seconds match
  //      4    : Alarm when date, hours, minutes, and seconds match
  //      5    : Alarm when day, hours, minutes, and seconds match
  switch (mode)
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	2b05      	cmp	r3, #5
 80008ac:	d865      	bhi.n	800097a <Time_Ctrl+0x13a>
 80008ae:	a201      	add	r2, pc, #4	@ (adr r2, 80008b4 <Time_Ctrl+0x74>)
 80008b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008b4:	080008cd 	.word	0x080008cd
 80008b8:	080008f7 	.word	0x080008f7
 80008bc:	0800091b 	.word	0x0800091b
 80008c0:	08000939 	.word	0x08000939
 80008c4:	08000951 	.word	0x08000951
 80008c8:	08000963 	.word	0x08000963
  {
    case 0:
      // Alarm mask bit: A1M4:A1M1 = b1111, DY/DT = X
      ctrlTime[0] += maskBit;
 80008cc:	7c3a      	ldrb	r2, [r7, #16]
 80008ce:	7dfb      	ldrb	r3, [r7, #23]
 80008d0:	4413      	add	r3, r2
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	743b      	strb	r3, [r7, #16]
      ctrlTime[1] += maskBit;
 80008d6:	7c7a      	ldrb	r2, [r7, #17]
 80008d8:	7dfb      	ldrb	r3, [r7, #23]
 80008da:	4413      	add	r3, r2
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	747b      	strb	r3, [r7, #17]
      ctrlTime[2] += maskBit;
 80008e0:	7cba      	ldrb	r2, [r7, #18]
 80008e2:	7dfb      	ldrb	r3, [r7, #23]
 80008e4:	4413      	add	r3, r2
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	74bb      	strb	r3, [r7, #18]
      ctrlTime[3] += maskBit;
 80008ea:	7cfa      	ldrb	r2, [r7, #19]
 80008ec:	7dfb      	ldrb	r3, [r7, #23]
 80008ee:	4413      	add	r3, r2
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	74fb      	strb	r3, [r7, #19]
      break;
 80008f4:	e04a      	b.n	800098c <Time_Ctrl+0x14c>
    case 1:
      // Alarm mask bit: A1M4:A1M1 = b1110, DY/DT = X
      ctrlTime[0] += 0;
 80008f6:	7c3b      	ldrb	r3, [r7, #16]
 80008f8:	743b      	strb	r3, [r7, #16]
      ctrlTime[1] += maskBit;
 80008fa:	7c7a      	ldrb	r2, [r7, #17]
 80008fc:	7dfb      	ldrb	r3, [r7, #23]
 80008fe:	4413      	add	r3, r2
 8000900:	b2db      	uxtb	r3, r3
 8000902:	747b      	strb	r3, [r7, #17]
      ctrlTime[2] += maskBit;
 8000904:	7cba      	ldrb	r2, [r7, #18]
 8000906:	7dfb      	ldrb	r3, [r7, #23]
 8000908:	4413      	add	r3, r2
 800090a:	b2db      	uxtb	r3, r3
 800090c:	74bb      	strb	r3, [r7, #18]
      ctrlTime[3] += maskBit;
 800090e:	7cfa      	ldrb	r2, [r7, #19]
 8000910:	7dfb      	ldrb	r3, [r7, #23]
 8000912:	4413      	add	r3, r2
 8000914:	b2db      	uxtb	r3, r3
 8000916:	74fb      	strb	r3, [r7, #19]
      break;
 8000918:	e038      	b.n	800098c <Time_Ctrl+0x14c>
    case 2:
      // Alarm mask bit: A1M4:A1M1 = b1100, DY/DT = X
      ctrlTime[0] += 0;
 800091a:	7c3b      	ldrb	r3, [r7, #16]
 800091c:	743b      	strb	r3, [r7, #16]
      ctrlTime[1] += 0;
 800091e:	7c7b      	ldrb	r3, [r7, #17]
 8000920:	747b      	strb	r3, [r7, #17]
      ctrlTime[2] += maskBit;
 8000922:	7cba      	ldrb	r2, [r7, #18]
 8000924:	7dfb      	ldrb	r3, [r7, #23]
 8000926:	4413      	add	r3, r2
 8000928:	b2db      	uxtb	r3, r3
 800092a:	74bb      	strb	r3, [r7, #18]
      ctrlTime[3] += maskBit;
 800092c:	7cfa      	ldrb	r2, [r7, #19]
 800092e:	7dfb      	ldrb	r3, [r7, #23]
 8000930:	4413      	add	r3, r2
 8000932:	b2db      	uxtb	r3, r3
 8000934:	74fb      	strb	r3, [r7, #19]
      break;
 8000936:	e029      	b.n	800098c <Time_Ctrl+0x14c>
    case 3:
      // Alarm mask bit: A1M4:A1M1 = b1000, DY/DT = X
      ctrlTime[0] += 0;
 8000938:	7c3b      	ldrb	r3, [r7, #16]
 800093a:	743b      	strb	r3, [r7, #16]
      ctrlTime[1] += 0;
 800093c:	7c7b      	ldrb	r3, [r7, #17]
 800093e:	747b      	strb	r3, [r7, #17]
      ctrlTime[2] += 0;
 8000940:	7cbb      	ldrb	r3, [r7, #18]
 8000942:	74bb      	strb	r3, [r7, #18]
      ctrlTime[3] += maskBit;
 8000944:	7cfa      	ldrb	r2, [r7, #19]
 8000946:	7dfb      	ldrb	r3, [r7, #23]
 8000948:	4413      	add	r3, r2
 800094a:	b2db      	uxtb	r3, r3
 800094c:	74fb      	strb	r3, [r7, #19]
      break;
 800094e:	e01d      	b.n	800098c <Time_Ctrl+0x14c>
    case 4:
      // Alarm mask bit: A1M4:A1M1 = b0000, DY/DT = 0
      ctrlTime[0] += 0;
 8000950:	7c3b      	ldrb	r3, [r7, #16]
 8000952:	743b      	strb	r3, [r7, #16]
      ctrlTime[1] += 0;
 8000954:	7c7b      	ldrb	r3, [r7, #17]
 8000956:	747b      	strb	r3, [r7, #17]
      ctrlTime[2] += 0;
 8000958:	7cbb      	ldrb	r3, [r7, #18]
 800095a:	74bb      	strb	r3, [r7, #18]
      ctrlTime[3] += 0;
 800095c:	7cfb      	ldrb	r3, [r7, #19]
 800095e:	74fb      	strb	r3, [r7, #19]
      break;
 8000960:	e014      	b.n	800098c <Time_Ctrl+0x14c>
    case 5:
      // Alarm mask bit: A1M4:A1M1 = b0000, DY/DT = 1
      ctrlTime[0] += 0;
 8000962:	7c3b      	ldrb	r3, [r7, #16]
 8000964:	743b      	strb	r3, [r7, #16]
      ctrlTime[1] += 0;
 8000966:	7c7b      	ldrb	r3, [r7, #17]
 8000968:	747b      	strb	r3, [r7, #17]
      ctrlTime[2] += 0;
 800096a:	7cbb      	ldrb	r3, [r7, #18]
 800096c:	74bb      	strb	r3, [r7, #18]
      ctrlTime[3] += dyDt;
 800096e:	7cfa      	ldrb	r2, [r7, #19]
 8000970:	7dbb      	ldrb	r3, [r7, #22]
 8000972:	4413      	add	r3, r2
 8000974:	b2db      	uxtb	r3, r3
 8000976:	74fb      	strb	r3, [r7, #19]
      break;
 8000978:	e008      	b.n	800098c <Time_Ctrl+0x14c>
    default:
      // Alarm mask bit: A1M4:A1M1 = b0000, DY/DT = 0
      ctrlTime[0] += 0;
 800097a:	7c3b      	ldrb	r3, [r7, #16]
 800097c:	743b      	strb	r3, [r7, #16]
      ctrlTime[1] += 0;
 800097e:	7c7b      	ldrb	r3, [r7, #17]
 8000980:	747b      	strb	r3, [r7, #17]
      ctrlTime[2] += 0;
 8000982:	7cbb      	ldrb	r3, [r7, #18]
 8000984:	74bb      	strb	r3, [r7, #18]
      ctrlTime[3] += 0;
 8000986:	7cfb      	ldrb	r3, [r7, #19]
 8000988:	74fb      	strb	r3, [r7, #19]
      break;
 800098a:	bf00      	nop
  }

  // Send the array containing the RTC alarm mode setting to the RTC module through I2C interface at address 07h - 0Ah (size of value: 4 bytes)
  // HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
  //    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);	  
  HAL_I2C_Mem_Write(DS3231_I2C, DS3231_ADDR, 0x07, 1, ctrlTime, sizeof(ctrlTime), 1000);
 800098c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000990:	9302      	str	r3, [sp, #8]
 8000992:	2304      	movs	r3, #4
 8000994:	9301      	str	r3, [sp, #4]
 8000996:	f107 0310 	add.w	r3, r7, #16
 800099a:	9300      	str	r3, [sp, #0]
 800099c:	2301      	movs	r3, #1
 800099e:	2207      	movs	r2, #7
 80009a0:	21d0      	movs	r1, #208	@ 0xd0
 80009a2:	480d      	ldr	r0, [pc, #52]	@ (80009d8 <Time_Ctrl+0x198>)
 80009a4:	f002 fb7c 	bl	80030a0 <HAL_I2C_Mem_Write>

  // Delay for 1ms to allow the RTC module to process the data
  HAL_Delay(1);
 80009a8:	2001      	movs	r0, #1
 80009aa:	f001 fa9f 	bl	8001eec <HAL_Delay>

  // Send the alarm control mask bits to the RTC module through I2C interface at address 0Eh (size of value: 1 byte)
  // HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
  //    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);	  
  HAL_I2C_Mem_Write(DS3231_I2C, DS3231_ADDR, 0x0E, 1, &ctrlAlarm, sizeof(ctrlAlarm), 1000);
 80009ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009b2:	9302      	str	r3, [sp, #8]
 80009b4:	2301      	movs	r3, #1
 80009b6:	9301      	str	r3, [sp, #4]
 80009b8:	f107 030f 	add.w	r3, r7, #15
 80009bc:	9300      	str	r3, [sp, #0]
 80009be:	2301      	movs	r3, #1
 80009c0:	220e      	movs	r2, #14
 80009c2:	21d0      	movs	r1, #208	@ 0xd0
 80009c4:	4804      	ldr	r0, [pc, #16]	@ (80009d8 <Time_Ctrl+0x198>)
 80009c6:	f002 fb6b 	bl	80030a0 <HAL_I2C_Mem_Write>

  // Delay for 1ms to allow the RTC module to process the data
  HAL_Delay(1);
 80009ca:	2001      	movs	r0, #1
 80009cc:	f001 fa8e 	bl	8001eec <HAL_Delay>
}
 80009d0:	bf00      	nop
 80009d2:	371c      	adds	r7, #28
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd90      	pop	{r4, r7, pc}
 80009d8:	200000a8 	.word	0x200000a8

080009dc <Time_Init>:
  * @param  month: Month: 1-12
  * @param  year: Year: 0-99 (0 = 2000, 1 = 2001, ..., 99 = 2099)
  * @retval None
*/
void Time_Init (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom, uint8_t month, uint8_t year)
{
 80009dc:	b590      	push	{r4, r7, lr}
 80009de:	b087      	sub	sp, #28
 80009e0:	af04      	add	r7, sp, #16
 80009e2:	4604      	mov	r4, r0
 80009e4:	4608      	mov	r0, r1
 80009e6:	4611      	mov	r1, r2
 80009e8:	461a      	mov	r2, r3
 80009ea:	4623      	mov	r3, r4
 80009ec:	71fb      	strb	r3, [r7, #7]
 80009ee:	4603      	mov	r3, r0
 80009f0:	71bb      	strb	r3, [r7, #6]
 80009f2:	460b      	mov	r3, r1
 80009f4:	717b      	strb	r3, [r7, #5]
 80009f6:	4613      	mov	r3, r2
 80009f8:	713b      	strb	r3, [r7, #4]
  // This function is intended for initial setup of the RTC module after a reset.
  // It should not be called repeatedly unless reinitialization is required.
  //    Time_Set (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom, uint8_t month, uint8_t year)
  Time_Set (sec, min, hour, dow, dom, month, year);
 80009fa:	793c      	ldrb	r4, [r7, #4]
 80009fc:	797a      	ldrb	r2, [r7, #5]
 80009fe:	79b9      	ldrb	r1, [r7, #6]
 8000a00:	79f8      	ldrb	r0, [r7, #7]
 8000a02:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000a06:	9302      	str	r3, [sp, #8]
 8000a08:	7f3b      	ldrb	r3, [r7, #28]
 8000a0a:	9301      	str	r3, [sp, #4]
 8000a0c:	7e3b      	ldrb	r3, [r7, #24]
 8000a0e:	9300      	str	r3, [sp, #0]
 8000a10:	4623      	mov	r3, r4
 8000a12:	f7ff fe6d 	bl	80006f0 <Time_Set>
  //        2    : Alarm when minutes and seconds match
  //        3    : Alarm when hours, minutes, and seconds match
  //        4    : Alarm when date, hours, minutes, and seconds match
  //        5    : Alarm when day, hours, minutes, and seconds match
  //      For mode 0, the remaining input are don't-care values
  Time_Ctrl 
 8000a16:	2300      	movs	r3, #0
 8000a18:	9301      	str	r3, [sp, #4]
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	9300      	str	r3, [sp, #0]
 8000a1e:	2300      	movs	r3, #0
 8000a20:	2200      	movs	r2, #0
 8000a22:	2100      	movs	r1, #0
 8000a24:	2000      	movs	r0, #0
 8000a26:	f7ff ff0b 	bl	8000840 <Time_Ctrl>
     0, // Minutes: 0-59
     0, // Hours: 0-23
     0, // Day of the week: 1-7 (1 = Sunday, 2 = Monday, ..., 7 = Saturday), or Date of the month: 1-31
     0  // Select: 1 = day of week, 0 = date of month
  );   
}
 8000a2a:	bf00      	nop
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd90      	pop	{r4, r7, pc}
	...

08000a34 <Alarm_Set>:
  * @param  on_off: On/ Off state of the alarm (1 = ON, 0 = OFF)
  * @param  slot: Slot number of the alarm in the EEPROM module (0-9)
  * @retval None
*/
void Alarm_Set (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow_dom, ALARM_DY_DT_MODE dy_dt, bool on_off, uint8_t slot)
{
 8000a34:	b590      	push	{r4, r7, lr}
 8000a36:	b089      	sub	sp, #36	@ 0x24
 8000a38:	af04      	add	r7, sp, #16
 8000a3a:	4604      	mov	r4, r0
 8000a3c:	4608      	mov	r0, r1
 8000a3e:	4611      	mov	r1, r2
 8000a40:	461a      	mov	r2, r3
 8000a42:	4623      	mov	r3, r4
 8000a44:	71fb      	strb	r3, [r7, #7]
 8000a46:	4603      	mov	r3, r0
 8000a48:	71bb      	strb	r3, [r7, #6]
 8000a4a:	460b      	mov	r3, r1
 8000a4c:	717b      	strb	r3, [r7, #5]
 8000a4e:	4613      	mov	r3, r2
 8000a50:	713b      	strb	r3, [r7, #4]
  // Internal address of the alarm in the EEPROM module (0-8192, or 13 bits)
  uint16_t address = slot * 4;
 8000a52:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	81fb      	strh	r3, [r7, #14]

  // Add an ON/OFF (1 bit) signal into the alarm package by using the MSB of the second register
  if (on_off)
 8000a5c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d002      	beq.n	8000a6a <Alarm_Set+0x36>
  {
    sec += (1 << 7);
 8000a64:	79fb      	ldrb	r3, [r7, #7]
 8000a66:	3b80      	subs	r3, #128	@ 0x80
 8000a68:	71fb      	strb	r3, [r7, #7]
  }

  // Add a [day of week] or [date of month] (1 bit) signal into the alarm package by using bit 6 of the dow_dom register
  switch (dy_dt)
 8000a6a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000a6e:	2b02      	cmp	r3, #2
 8000a70:	d00d      	beq.n	8000a8e <Alarm_Set+0x5a>
 8000a72:	2b02      	cmp	r3, #2
 8000a74:	dc0d      	bgt.n	8000a92 <Alarm_Set+0x5e>
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d005      	beq.n	8000a86 <Alarm_Set+0x52>
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d109      	bne.n	8000a92 <Alarm_Set+0x5e>
  {
    // Date of the month
    case DATE_OF_MONTH_MODE:
      // Decoding: [Bit 7] = 1, [Bit 6] = 0
      dow_dom += (1 << 7);
 8000a7e:	793b      	ldrb	r3, [r7, #4]
 8000a80:	3b80      	subs	r3, #128	@ 0x80
 8000a82:	713b      	strb	r3, [r7, #4]
      break;
 8000a84:	e006      	b.n	8000a94 <Alarm_Set+0x60>

    // Day of the week
    case DAY_OF_WEEK_MODE:
      // Decoding: [Bit 7] = 1, [Bit 6] = 1
      dow_dom += ((1 << 7) | (1 << 6));
 8000a86:	793b      	ldrb	r3, [r7, #4]
 8000a88:	3b40      	subs	r3, #64	@ 0x40
 8000a8a:	713b      	strb	r3, [r7, #4]
      break;
 8000a8c:	e002      	b.n	8000a94 <Alarm_Set+0x60>

    // Not used
    case NOT_USED_MODE:
      // Decoding: [Bit 7] = 0, [Bit 6] = 0
      dow_dom += 0;
      break;
 8000a8e:	bf00      	nop
 8000a90:	e000      	b.n	8000a94 <Alarm_Set+0x60>

    default:
      dow_dom += 0;
      break;
 8000a92:	bf00      	nop

  // A blank array (4 slots) to contain the alarm values
  uint8_t setAlarm[4];
  
  // Store the alarm values into the blank array
  setAlarm[0] = sec;
 8000a94:	79fb      	ldrb	r3, [r7, #7]
 8000a96:	723b      	strb	r3, [r7, #8]
  setAlarm[1] = min;
 8000a98:	79bb      	ldrb	r3, [r7, #6]
 8000a9a:	727b      	strb	r3, [r7, #9]
  setAlarm[2] = hour;
 8000a9c:	797b      	ldrb	r3, [r7, #5]
 8000a9e:	72bb      	strb	r3, [r7, #10]
  setAlarm[3] = dow_dom;
 8000aa0:	793b      	ldrb	r3, [r7, #4]
 8000aa2:	72fb      	strb	r3, [r7, #11]

  // HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
  //    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);
  HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, address, 1, setAlarm, sizeof(setAlarm), 1000);
 8000aa4:	89fa      	ldrh	r2, [r7, #14]
 8000aa6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000aaa:	9302      	str	r3, [sp, #8]
 8000aac:	2304      	movs	r3, #4
 8000aae:	9301      	str	r3, [sp, #4]
 8000ab0:	f107 0308 	add.w	r3, r7, #8
 8000ab4:	9300      	str	r3, [sp, #0]
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	21a0      	movs	r1, #160	@ 0xa0
 8000aba:	4805      	ldr	r0, [pc, #20]	@ (8000ad0 <Alarm_Set+0x9c>)
 8000abc:	f002 faf0 	bl	80030a0 <HAL_I2C_Mem_Write>
  //     +  8 [2nd Word Address Byte]   + 1 [ACK from Client]      +
  //     + {8 [1st Data Word]           + 1 [ACK from Client]} * 4 + 
  //     +  1 [Stop Condition by Host] 
  //     =  65 cycles  
  //    Neccesary delay time = 65 cycles / 400 kHz = 162.5 us = ~ 0.17 ms
  HAL_Delay(1);
 8000ac0:	2001      	movs	r0, #1
 8000ac2:	f001 fa13 	bl	8001eec <HAL_Delay>
}
 8000ac6:	bf00      	nop
 8000ac8:	3714      	adds	r7, #20
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd90      	pop	{r4, r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	200000a8 	.word	0x200000a8

08000ad4 <Alarm_Get>:
  * @param  slot: Slot number of the alarm in the EEPROM module (0-9)
  * @param  alarm_get_data: Pointer to an ALARM structure to store the retrieved alarm values
  * @retval None
*/
void Alarm_Get (uint8_t slot, volatile ALARM *alarm_get_data)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b088      	sub	sp, #32
 8000ad8:	af04      	add	r7, sp, #16
 8000ada:	4603      	mov	r3, r0
 8000adc:	6039      	str	r1, [r7, #0]
 8000ade:	71fb      	strb	r3, [r7, #7]
  // Address of the alarm in the EEPROM module (0-8192, or 13 bits)
  uint16_t address = slot * 4;
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	b29b      	uxth	r3, r3
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	81fb      	strh	r3, [r7, #14]
  // A blank array (4 slots) to contain the alarm values received from the EEPROM module
  uint8_t getAlarm[4];

  // HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
  //    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);
  HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, address, 1, getAlarm, sizeof(getAlarm), 1000);
 8000ae8:	89fa      	ldrh	r2, [r7, #14]
 8000aea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000aee:	9302      	str	r3, [sp, #8]
 8000af0:	2304      	movs	r3, #4
 8000af2:	9301      	str	r3, [sp, #4]
 8000af4:	f107 0308 	add.w	r3, r7, #8
 8000af8:	9300      	str	r3, [sp, #0]
 8000afa:	2301      	movs	r3, #1
 8000afc:	21a0      	movs	r1, #160	@ 0xa0
 8000afe:	480b      	ldr	r0, [pc, #44]	@ (8000b2c <Alarm_Get+0x58>)
 8000b00:	f002 fbc8 	bl	8003294 <HAL_I2C_Mem_Read>
  //     +  8 [Device Address Byte]     + 1 [ACK from Client]      +
  //     + {8 [1st Data Word]           + 1 [ACK from Client]} * 4 + 
  //     +  1 [Stop Condition by Host] 
  //     =  75 cycles
  //    Neccesary delay time = 75 cycles / 400 kHz = 187.5 us = ~ 0.19 ms
  HAL_Delay(1);
 8000b04:	2001      	movs	r0, #1
 8000b06:	f001 f9f1 	bl	8001eec <HAL_Delay>

  // Store the alarm values into the alarm variable
  alarm_get_data->second  = getAlarm[0];
 8000b0a:	7a3a      	ldrb	r2, [r7, #8]
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	701a      	strb	r2, [r3, #0]
  alarm_get_data->minute  = getAlarm[1];
 8000b10:	7a7a      	ldrb	r2, [r7, #9]
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	705a      	strb	r2, [r3, #1]
  alarm_get_data->hour    = getAlarm[2];
 8000b16:	7aba      	ldrb	r2, [r7, #10]
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	709a      	strb	r2, [r3, #2]
  alarm_get_data->dow_dom = getAlarm[3];
 8000b1c:	7afa      	ldrb	r2, [r7, #11]
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	70da      	strb	r2, [r3, #3]
}
 8000b22:	bf00      	nop
 8000b24:	3710      	adds	r7, #16
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	200000a8 	.word	0x200000a8

08000b30 <Alarm_Clear>:
  * @brief  Clear a single alarm from the EEPROM module.
  * @param  slot: Slot number of the alarm in the EEPROM module (0-9)
  * @retval None
*/
void Alarm_Clear (uint8_t slot)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b088      	sub	sp, #32
 8000b34:	af04      	add	r7, sp, #16
 8000b36:	4603      	mov	r3, r0
 8000b38:	71fb      	strb	r3, [r7, #7]
  // Address of the alarm in the EEPROM module (0-8192, or 13 bits)
  uint16_t address = slot * 4;
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	b29b      	uxth	r3, r3
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	81fb      	strh	r3, [r7, #14]

  // A blank array (4 slots) to contain the alarm values to be cleared
  uint8_t clearAlarm[4] = {0, 0, 0, 0};
 8000b42:	2300      	movs	r3, #0
 8000b44:	60bb      	str	r3, [r7, #8]

  // HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
  //    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);
  HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, address, 1, clearAlarm, sizeof(clearAlarm), 1000);
 8000b46:	89fa      	ldrh	r2, [r7, #14]
 8000b48:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b4c:	9302      	str	r3, [sp, #8]
 8000b4e:	2304      	movs	r3, #4
 8000b50:	9301      	str	r3, [sp, #4]
 8000b52:	f107 0308 	add.w	r3, r7, #8
 8000b56:	9300      	str	r3, [sp, #0]
 8000b58:	2301      	movs	r3, #1
 8000b5a:	21a0      	movs	r1, #160	@ 0xa0
 8000b5c:	4804      	ldr	r0, [pc, #16]	@ (8000b70 <Alarm_Clear+0x40>)
 8000b5e:	f002 fa9f 	bl	80030a0 <HAL_I2C_Mem_Write>
  //     +  8 [2nd Word Address Byte]   + 1 [ACK from Client]      +
  //     + {8 [1st Data Word]           + 1 [ACK from Client]} * 4 + 
  //     +  1 [Stop Condition by Host] 
  //     =  65 cycles  
  //    Neccesary delay time = 65 cycles / 400 kHz = 162.5 us = ~ 0.17 ms
  HAL_Delay(1);
 8000b62:	2001      	movs	r0, #1
 8000b64:	f001 f9c2 	bl	8001eec <HAL_Delay>
}
 8000b68:	bf00      	nop
 8000b6a:	3710      	adds	r7, #16
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	200000a8 	.word	0x200000a8

08000b74 <Alarm_Check>:
  * @param  time_get_data: Pointer to a TIME structure to store the current time values
  * @retval None
  * @note   This function compares the current time with all alarms stored in the EEPROM module.
*/
void Alarm_Check (volatile ALARM *alarm_check_data, volatile TIME *time_get_data)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	6039      	str	r1, [r7, #0]
  // Compare the current time with all alarms stored in the EEPROM module
  for (int i = 0; i < ALARM_SLOT_NUM; i++)
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	bf00      	nop
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	2b09      	cmp	r3, #9
 8000b88:	dc4e      	bgt.n	8000c28 <Alarm_Check+0xb4>
  {
    // Retrieve the alarm values from the EEPROM module
    //    void Alarm_Get (uint8_t address, ALARM *alarm_get_data)
    Alarm_Get(i, alarm_check_data);
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	6879      	ldr	r1, [r7, #4]
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff ff9f 	bl	8000ad4 <Alarm_Get>

    // Check if the alarm is at ON or OFF state by checking the MSB of the second register
    if (!(alarm_check_data->second >= (1 << 7)))
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	b25b      	sxtb	r3, r3
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	da44      	bge.n	8000c2c <Alarm_Check+0xb8>
      break;
    }

    // Check if the current time matches the alarm time (day of week or date of month)
    //    by first check if the alarm is at [day of week] or [date of month] mode by examining the MSB of the dow_dom register
    if (alarm_check_data->dow_dom >= (1 << 7))
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	78db      	ldrb	r3, [r3, #3]
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	b25b      	sxtb	r3, r3
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	da1b      	bge.n	8000be6 <Alarm_Check+0x72>
    {
      // Check if the alarm is at the [day of week] mode by checking the mask bit (bit 6) of the dow_dom register
      if ((alarm_check_data->dow_dom & 0x7F) >= (1 << 6))
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	78db      	ldrb	r3, [r3, #3]
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d00a      	beq.n	8000bd2 <Alarm_Check+0x5e>
      {
        // Check if the [day of week] matches the current time
        //    by unmasking the MSB and bit 6 of the dow_dom register to get the original value of the dow_dom register
        if ((alarm_check_data->dow_dom & 0x3F) != time_get_data->dayofweek)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	78db      	ldrb	r3, [r3, #3]
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000bc6:	683a      	ldr	r2, [r7, #0]
 8000bc8:	78d2      	ldrb	r2, [r2, #3]
 8000bca:	b2d2      	uxtb	r2, r2
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d00a      	beq.n	8000be6 <Alarm_Check+0x72>
        {
          // Skip if the current time does NOT match the alarm time (day of week)
          break;
 8000bd0:	e035      	b.n	8000c3e <Alarm_Check+0xca>
      }
      else
      {
        // Check if the [date of month] matches the current time
        //    by unmasking the MSB of the dow_dom register to get the original value of the dow_dom register
        if ((alarm_check_data->dow_dom & 0x7F) != time_get_data->dateofmonth)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	78db      	ldrb	r3, [r3, #3]
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000bdc:	683a      	ldr	r2, [r7, #0]
 8000bde:	7912      	ldrb	r2, [r2, #4]
 8000be0:	b2d2      	uxtb	r2, r2
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d124      	bne.n	8000c30 <Alarm_Check+0xbc>
        }
      }
    }

    // Check if the current time matches the alarm time (hour)
    if (alarm_check_data->hour != time_get_data->hour)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	789b      	ldrb	r3, [r3, #2]
 8000bea:	b2da      	uxtb	r2, r3
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	789b      	ldrb	r3, [r3, #2]
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	d11e      	bne.n	8000c34 <Alarm_Check+0xc0>
      // Skip if the current time does NOT match the alarm time (hour)
      break;
    }

    // Check if the current time matches the alarm time (minute)
    if (alarm_check_data->minute != time_get_data->minute)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	785b      	ldrb	r3, [r3, #1]
 8000bfa:	b2da      	uxtb	r2, r3
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	785b      	ldrb	r3, [r3, #1]
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	429a      	cmp	r2, r3
 8000c04:	d118      	bne.n	8000c38 <Alarm_Check+0xc4>
      break;
    }

    // Check if the current time matches the alarm time (second)
    //    by unmasking the MSB of the second register to get the original value of the second register
    if ((alarm_check_data->second & 0x7F) != time_get_data->second)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000c10:	683a      	ldr	r2, [r7, #0]
 8000c12:	7812      	ldrb	r2, [r2, #0]
 8000c14:	b2d2      	uxtb	r2, r2
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d110      	bne.n	8000c3c <Alarm_Check+0xc8>
      // Skip if the current time does NOT match the alarm time (second)
      break;
    }

    // If all the above checks pass, the alarm is activated
    debug_alarm_activate_ctr++;
 8000c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c48 <Alarm_Check+0xd4>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	3301      	adds	r3, #1
 8000c20:	b2da      	uxtb	r2, r3
 8000c22:	4b09      	ldr	r3, [pc, #36]	@ (8000c48 <Alarm_Check+0xd4>)
 8000c24:	701a      	strb	r2, [r3, #0]
    break;
 8000c26:	e00a      	b.n	8000c3e <Alarm_Check+0xca>
  }

}
 8000c28:	bf00      	nop
 8000c2a:	e008      	b.n	8000c3e <Alarm_Check+0xca>
      break;
 8000c2c:	bf00      	nop
 8000c2e:	e006      	b.n	8000c3e <Alarm_Check+0xca>
          break;
 8000c30:	bf00      	nop
 8000c32:	e004      	b.n	8000c3e <Alarm_Check+0xca>
      break;
 8000c34:	bf00      	nop
 8000c36:	e002      	b.n	8000c3e <Alarm_Check+0xca>
      break;
 8000c38:	bf00      	nop
 8000c3a:	e000      	b.n	8000c3e <Alarm_Check+0xca>
      break;
 8000c3c:	bf00      	nop
}
 8000c3e:	bf00      	nop
 8000c40:	3710      	adds	r7, #16
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20000141 	.word	0x20000141

08000c4c <Button_Debounce>:
  * * @param  button->hold_latch: 
  * * @param  button->start_tick: Start time of the button press event (in milliseconds).
  * @retval None
*/
void Button_Debounce(BUTTON *button)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  // Handle button state transitions and debounce logic
  switch (button->state)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	79db      	ldrb	r3, [r3, #7]
 8000c58:	2b02      	cmp	r3, #2
 8000c5a:	d03b      	beq.n	8000cd4 <Button_Debounce+0x88>
 8000c5c:	2b02      	cmp	r3, #2
 8000c5e:	dc6c      	bgt.n	8000d3a <Button_Debounce+0xee>
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d002      	beq.n	8000c6a <Button_Debounce+0x1e>
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d017      	beq.n	8000c98 <Button_Debounce+0x4c>
 8000c68:	e067      	b.n	8000d3a <Button_Debounce+0xee>
  {
    // Initial state: Button is released (HIGH)
    case BUTTON_RELEASED:

      button->press_flag = false;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	735a      	strb	r2, [r3, #13]
      button->hold_flag = false;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2200      	movs	r2, #0
 8000c74:	739a      	strb	r2, [r3, #14]
      button->latch = false;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2200      	movs	r2, #0
 8000c7a:	73da      	strb	r2, [r3, #15]
    
      // Check if interrupt flag is set
      if (button->int_flag) 
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	7b1b      	ldrb	r3, [r3, #12]
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d069      	beq.n	8000d5a <Button_Debounce+0x10e>
      {
        // Record the start time for debounce
        button->start_tick = HAL_GetTick();
 8000c86:	f001 f927 	bl	8001ed8 <HAL_GetTick>
 8000c8a:	4602      	mov	r2, r0
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	609a      	str	r2, [r3, #8]

        // Transition to waiting state
        button->state = BUTTON_WAITING;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2201      	movs	r2, #1
 8000c94:	71da      	strb	r2, [r3, #7]
      }
      break;
 8000c96:	e060      	b.n	8000d5a <Button_Debounce+0x10e>

    // Waiting state: Button is pressed (LOW) but not yet confirmed
    case BUTTON_WAITING:
      // Check if debounce delay has passed
      if (HAL_GetTick() - button->start_tick >= BUTTON_DEBOUNCE_DELAY) 
 8000c98:	f001 f91e 	bl	8001ed8 <HAL_GetTick>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	689b      	ldr	r3, [r3, #8]
 8000ca2:	1ad3      	subs	r3, r2, r3
 8000ca4:	2b22      	cmp	r3, #34	@ 0x22
 8000ca6:	d95a      	bls.n	8000d5e <Button_Debounce+0x112>
      {
        // Check if button is still pressed (LOW state) after debounce delay
        if (HAL_GPIO_ReadPin(button->gpio_port, button->gpio_pin) == GPIO_PIN_RESET) 
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	889b      	ldrh	r3, [r3, #4]
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4610      	mov	r0, r2
 8000cb4:	f002 f880 	bl	8002db8 <HAL_GPIO_ReadPin>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d103      	bne.n	8000cc6 <Button_Debounce+0x7a>
        {
          // Transition to pressed state
          button->state = BUTTON_PRESSED;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2202      	movs	r2, #2
 8000cc2:	71da      	strb	r2, [r3, #7]
          // Reset interrupt flag and return to released state
          button->int_flag = false;  
          button->state = BUTTON_RELEASED;
        }
      }
      break;
 8000cc4:	e04b      	b.n	8000d5e <Button_Debounce+0x112>
          button->int_flag = false;  
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2200      	movs	r2, #0
 8000cca:	731a      	strb	r2, [r3, #12]
          button->state = BUTTON_RELEASED;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2200      	movs	r2, #0
 8000cd0:	71da      	strb	r2, [r3, #7]
      break;
 8000cd2:	e044      	b.n	8000d5e <Button_Debounce+0x112>
    
    // Pressed state: Button is pressed (LOW)
    case BUTTON_PRESSED:
      // Check if button is released (HIGH state)
      if (HAL_GPIO_ReadPin(button->gpio_port, button->gpio_pin) == GPIO_PIN_SET) 
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	889b      	ldrh	r3, [r3, #4]
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4610      	mov	r0, r2
 8000ce0:	f002 f86a 	bl	8002db8 <HAL_GPIO_ReadPin>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d112      	bne.n	8000d10 <Button_Debounce+0xc4>
      {
        // Check if press duration is less than hold threshold
        if (HAL_GetTick() - button->start_tick < BUTTON_HOLD_TH)
 8000cea:	f001 f8f5 	bl	8001ed8 <HAL_GetTick>
 8000cee:	4602      	mov	r2, r0
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	689b      	ldr	r3, [r3, #8]
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8000cfa:	d202      	bcs.n	8000d02 <Button_Debounce+0xb6>
        {
          // Set press flag for short press
          button->press_flag = true;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2201      	movs	r2, #1
 8000d00:	735a      	strb	r2, [r3, #13]
        }
      
        // Reset interrupt flag and return to released state
        button->int_flag = false;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2200      	movs	r2, #0
 8000d06:	731a      	strb	r2, [r3, #12]

        //button->latch = false;
        button->state = BUTTON_RELEASED;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	71da      	strb	r2, [r3, #7]
      else if ((HAL_GetTick() - button->start_tick >= BUTTON_HOLD_TH) && !button->hold_flag)
      {
        // Set hold flag for long press
        button->hold_flag = true;
      }
      break;
 8000d0e:	e028      	b.n	8000d62 <Button_Debounce+0x116>
      else if ((HAL_GetTick() - button->start_tick >= BUTTON_HOLD_TH) && !button->hold_flag)
 8000d10:	f001 f8e2 	bl	8001ed8 <HAL_GetTick>
 8000d14:	4602      	mov	r2, r0
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	1ad3      	subs	r3, r2, r3
 8000d1c:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8000d20:	d31f      	bcc.n	8000d62 <Button_Debounce+0x116>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	7b9b      	ldrb	r3, [r3, #14]
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	f083 0301 	eor.w	r3, r3, #1
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d017      	beq.n	8000d62 <Button_Debounce+0x116>
        button->hold_flag = true;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2201      	movs	r2, #1
 8000d36:	739a      	strb	r2, [r3, #14]
      break;
 8000d38:	e013      	b.n	8000d62 <Button_Debounce+0x116>

    default:
      // Reset all flags and return to released state
      button->state = BUTTON_RELEASED;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	71da      	strb	r2, [r3, #7]
      button->int_flag = false;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2200      	movs	r2, #0
 8000d44:	731a      	strb	r2, [r3, #12]
      button->press_flag = false;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2200      	movs	r2, #0
 8000d4a:	735a      	strb	r2, [r3, #13]
      button->hold_flag = false;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2200      	movs	r2, #0
 8000d50:	739a      	strb	r2, [r3, #14]
      button->latch = false;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2200      	movs	r2, #0
 8000d56:	73da      	strb	r2, [r3, #15]
      break;
 8000d58:	e004      	b.n	8000d64 <Button_Debounce+0x118>
      break;
 8000d5a:	bf00      	nop
 8000d5c:	e002      	b.n	8000d64 <Button_Debounce+0x118>
      break;
 8000d5e:	bf00      	nop
 8000d60:	e000      	b.n	8000d64 <Button_Debounce+0x118>
      break;
 8000d62:	bf00      	nop
  }
}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <Button_Handle>:
 * * @param  button->hold_flag: Flag indicating if the button is held down (LOW)
 * @retval None
 */

void Button_Handle(BUTTON *button) 
{
 8000d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d6e:	b09b      	sub	sp, #108	@ 0x6c
 8000d70:	af04      	add	r7, sp, #16
 8000d72:	6078      	str	r0, [r7, #4]
  // Initialize the start tick for button hold detection
  uint32_t startTick = 0;
 8000d74:	2300      	movs	r3, #0
 8000d76:	637b      	str	r3, [r7, #52]	@ 0x34
  
  // Perform button debouncing to filter out noise
  Button_Debounce(button);
 8000d78:	6878      	ldr	r0, [r7, #4]
 8000d7a:	f7ff ff67 	bl	8000c4c <Button_Debounce>

  // Check if the button is pressed or held
  if (button->press_flag)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	7b5b      	ldrb	r3, [r3, #13]
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d009      	beq.n	8000d9c <Button_Handle+0x30>
  {
    // Increment the debug counter for the button
    debug_button_counter[button->index]++;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	799b      	ldrb	r3, [r3, #6]
 8000d8c:	4aad      	ldr	r2, [pc, #692]	@ (8001044 <Button_Handle+0x2d8>)
 8000d8e:	5cd2      	ldrb	r2, [r2, r3]
 8000d90:	b2d2      	uxtb	r2, r2
 8000d92:	3201      	adds	r2, #1
 8000d94:	b2d1      	uxtb	r1, r2
 8000d96:	4aab      	ldr	r2, [pc, #684]	@ (8001044 <Button_Handle+0x2d8>)
 8000d98:	54d1      	strb	r1, [r2, r3]
 8000d9a:	e017      	b.n	8000dcc <Button_Handle+0x60>
  }
  else if (button->hold_flag)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	7b9b      	ldrb	r3, [r3, #14]
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d012      	beq.n	8000dcc <Button_Handle+0x60>
  {
    // Check if the button is held down for a certain duration
    if (HAL_GetTick() - startTick >= BUTTON_HOLD_CYCLE) 
 8000da6:	f001 f897 	bl	8001ed8 <HAL_GetTick>
 8000daa:	4602      	mov	r2, r0
 8000dac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000dae:	1ad3      	subs	r3, r2, r3
 8000db0:	2bf9      	cmp	r3, #249	@ 0xf9
 8000db2:	d908      	bls.n	8000dc6 <Button_Handle+0x5a>
    {
      // Increment the debug counter for the button
      debug_button_counter[button->index]++;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	799b      	ldrb	r3, [r3, #6]
 8000db8:	4aa2      	ldr	r2, [pc, #648]	@ (8001044 <Button_Handle+0x2d8>)
 8000dba:	5cd2      	ldrb	r2, [r2, r3]
 8000dbc:	b2d2      	uxtb	r2, r2
 8000dbe:	3201      	adds	r2, #1
 8000dc0:	b2d1      	uxtb	r1, r2
 8000dc2:	4aa0      	ldr	r2, [pc, #640]	@ (8001044 <Button_Handle+0x2d8>)
 8000dc4:	54d1      	strb	r1, [r2, r3]
    }
    // Reset the start tick for the next hold cycle
    startTick = HAL_GetTick();
 8000dc6:	f001 f887 	bl	8001ed8 <HAL_GetTick>
 8000dca:	6378      	str	r0, [r7, #52]	@ 0x34
  }

  // Check if the button is pressed or held
  if (button->press_flag || button->hold_flag) 
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	7b5b      	ldrb	r3, [r3, #13]
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d105      	bne.n	8000de2 <Button_Handle+0x76>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	7b9b      	ldrb	r3, [r3, #14]
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	f000 8635 	beq.w	8001a4c <Button_Handle+0xce0>
  {
    // Handle button actions based on the current system mode
    switch (system_state.mode) 
 8000de2:	4b99      	ldr	r3, [pc, #612]	@ (8001048 <Button_Handle+0x2dc>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	2b05      	cmp	r3, #5
 8000de8:	f200 862f 	bhi.w	8001a4a <Button_Handle+0xcde>
 8000dec:	a201      	add	r2, pc, #4	@ (adr r2, 8000df4 <Button_Handle+0x88>)
 8000dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000df2:	bf00      	nop
 8000df4:	08000e0d 	.word	0x08000e0d
 8000df8:	08000ec9 	.word	0x08000ec9
 8000dfc:	08001321 	.word	0x08001321
 8000e00:	080017ff 	.word	0x080017ff
 8000e04:	080018d1 	.word	0x080018d1
 8000e08:	08001999 	.word	0x08001999
    {
      // Default mode: Handle button actions in default mode
      case DEFAULT_MODE: 
        // Handle button press actions based on the button index
        switch (button->index) 
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	799b      	ldrb	r3, [r3, #6]
 8000e10:	2b04      	cmp	r3, #4
 8000e12:	d850      	bhi.n	8000eb6 <Button_Handle+0x14a>
 8000e14:	a201      	add	r2, pc, #4	@ (adr r2, 8000e1c <Button_Handle+0xb0>)
 8000e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e1a:	bf00      	nop
 8000e1c:	08000e31 	.word	0x08000e31
 8000e20:	08000e5b 	.word	0x08000e5b
 8000e24:	08000e6b 	.word	0x08000e6b
 8000e28:	08000e7b 	.word	0x08000e7b
 8000e2c:	08000e99 	.word	0x08000e99
        {
          // Button 0: If pressed, cycle through the modes; if held, do nothing (reserved for future use)
          case 0:
          if      (button->press_flag)  system_state.mode = (system_state.mode < 5) ? (system_state.mode + 1) : 0;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	7b5b      	ldrb	r3, [r3, #13]
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d00c      	beq.n	8000e54 <Button_Handle+0xe8>
 8000e3a:	4b83      	ldr	r3, [pc, #524]	@ (8001048 <Button_Handle+0x2dc>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	2b04      	cmp	r3, #4
 8000e40:	d804      	bhi.n	8000e4c <Button_Handle+0xe0>
 8000e42:	4b81      	ldr	r3, [pc, #516]	@ (8001048 <Button_Handle+0x2dc>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	3301      	adds	r3, #1
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	e000      	b.n	8000e4e <Button_Handle+0xe2>
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	4a7e      	ldr	r2, [pc, #504]	@ (8001048 <Button_Handle+0x2dc>)
 8000e50:	7013      	strb	r3, [r2, #0]
          else if (button->hold_flag)
            {
              // Reserved
            }
            break;
 8000e52:	e037      	b.n	8000ec4 <Button_Handle+0x158>
          else if (button->hold_flag)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	7b9b      	ldrb	r3, [r3, #14]
            break;
 8000e58:	e034      	b.n	8000ec4 <Button_Handle+0x158>
          
          // Button 1: Reserved for future use
          case 1: 
            if (button->press_flag)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	7b5b      	ldrb	r3, [r3, #13]
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d12b      	bne.n	8000ebc <Button_Handle+0x150>
            {
              // Reserved
            }
            else if (button->hold_flag)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	7b9b      	ldrb	r3, [r3, #14]
            {
              // Reserved
            }
            break;
 8000e68:	e028      	b.n	8000ebc <Button_Handle+0x150>

          // Button 2: Reserved for future use
          case 2: 
            if (button->press_flag)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	7b5b      	ldrb	r3, [r3, #13]
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d126      	bne.n	8000ec2 <Button_Handle+0x156>
            {
              // Reserved
            }
            else if (button->hold_flag)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	7b9b      	ldrb	r3, [r3, #14]
            {
              // Reserved
            }
            break;
 8000e78:	e023      	b.n	8000ec2 <Button_Handle+0x156>
          
          // Button 3: If pressed, quick jump to Time Setup; if held, do nothing (reserved for future use)
          case 3:
            if (button->press_flag) 
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	7b5b      	ldrb	r3, [r3, #13]
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d006      	beq.n	8000e92 <Button_Handle+0x126>
            {
              // Quick jump to Time Setup
              system_state.mode = TIME_SETUP_MODE;
 8000e84:	4b70      	ldr	r3, [pc, #448]	@ (8001048 <Button_Handle+0x2dc>)
 8000e86:	2201      	movs	r2, #1
 8000e88:	701a      	strb	r2, [r3, #0]

              // Set the parameter select to the first parameter
              system_state.param_select = SET_SECOND;
 8000e8a:	4b6f      	ldr	r3, [pc, #444]	@ (8001048 <Button_Handle+0x2dc>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	705a      	strb	r2, [r3, #1]
            }
            else if (button->hold_flag)
            {
              // Reserved
            }
            break;
 8000e90:	e018      	b.n	8000ec4 <Button_Handle+0x158>
            else if (button->hold_flag)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	7b9b      	ldrb	r3, [r3, #14]
            break;
 8000e96:	e015      	b.n	8000ec4 <Button_Handle+0x158>

          // Button 4: If pressed, quick jump to Alarm Setup; if held, do nothing (reserved for future use)
          case 4:
            if (button->press_flag)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	7b5b      	ldrb	r3, [r3, #13]
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d006      	beq.n	8000eb0 <Button_Handle+0x144>
            {
              // Quick jump to Alarm Setup
              system_state.mode = ALARM_SETUP_MODE;
 8000ea2:	4b69      	ldr	r3, [pc, #420]	@ (8001048 <Button_Handle+0x2dc>)
 8000ea4:	2202      	movs	r2, #2
 8000ea6:	701a      	strb	r2, [r3, #0]

              // Set the parameter select to the first parameter
              system_state.param_select = SET_SECOND;
 8000ea8:	4b67      	ldr	r3, [pc, #412]	@ (8001048 <Button_Handle+0x2dc>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	705a      	strb	r2, [r3, #1]
            }
            else if (button->hold_flag)
            {
              // Reserved
            }
            break;
 8000eae:	e009      	b.n	8000ec4 <Button_Handle+0x158>
            else if (button->hold_flag)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	7b9b      	ldrb	r3, [r3, #14]
            break;
 8000eb4:	e006      	b.n	8000ec4 <Button_Handle+0x158>

          default: 
            break;
 8000eb6:	bf00      	nop
 8000eb8:	f000 bdc8 	b.w	8001a4c <Button_Handle+0xce0>
            break;
 8000ebc:	bf00      	nop
 8000ebe:	f000 bdc5 	b.w	8001a4c <Button_Handle+0xce0>
            break;
 8000ec2:	bf00      	nop
        }
        break;
 8000ec4:	f000 bdc2 	b.w	8001a4c <Button_Handle+0xce0>

      // Time setup mode: Handle button actions in time setup mode based on the button index
      case TIME_SETUP_MODE: 
        switch (button->index) 
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	799b      	ldrb	r3, [r3, #6]
 8000ecc:	2b04      	cmp	r3, #4
 8000ece:	f200 820d 	bhi.w	80012ec <Button_Handle+0x580>
 8000ed2:	a201      	add	r2, pc, #4	@ (adr r2, 8000ed8 <Button_Handle+0x16c>)
 8000ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ed8:	08000eed 	.word	0x08000eed
 8000edc:	08000f9d 	.word	0x08000f9d
 8000ee0:	080010fb 	.word	0x080010fb
 8000ee4:	08001231 	.word	0x08001231
 8000ee8:	080012b3 	.word	0x080012b3
        {
          // Button 0: If pressed, cycle through the system modes; if held, set the mode to default
          case 0:
            // If pressed, cycle through the time system modes, but the temporary setting data is still retained (avoid accidental press)
            if (button->press_flag)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	7b5b      	ldrb	r3, [r3, #13]
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d00c      	beq.n	8000f10 <Button_Handle+0x1a4>
            {
              system_state.mode = (system_state.mode < 5) ? (system_state.mode + 1) : 0;
 8000ef6:	4b54      	ldr	r3, [pc, #336]	@ (8001048 <Button_Handle+0x2dc>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	2b04      	cmp	r3, #4
 8000efc:	d804      	bhi.n	8000f08 <Button_Handle+0x19c>
 8000efe:	4b52      	ldr	r3, [pc, #328]	@ (8001048 <Button_Handle+0x2dc>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	3301      	adds	r3, #1
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	e000      	b.n	8000f0a <Button_Handle+0x19e>
 8000f08:	2300      	movs	r3, #0
 8000f0a:	4a4f      	ldr	r2, [pc, #316]	@ (8001048 <Button_Handle+0x2dc>)
 8000f0c:	7013      	strb	r3, [r2, #0]
                NOT_USED_MODE,              // Select: DAY_OF_WEEK_MODE, DATE_OF_MONTH_MODE, NOT_USED_MODE
                time_get_data.dayofweek,    // Day of the week: 1-7 (1 = Sunday, 2 = Monday, ..., 7 = Saturday), or Date of the month: 1-31
                true                        // true = ON, false = OFF
              };
            }
            break;
 8000f0e:	e1ef      	b.n	80012f0 <Button_Handle+0x584>
            else if (button->hold_flag && !button->latch)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	7b9b      	ldrb	r3, [r3, #14]
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	f000 81ea 	beq.w	80012f0 <Button_Handle+0x584>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	7bdb      	ldrb	r3, [r3, #15]
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	f083 0301 	eor.w	r3, r3, #1
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	f000 81e1 	beq.w	80012f0 <Button_Handle+0x584>
              system_state.mode = DEFAULT_MODE; 
 8000f2e:	4b46      	ldr	r3, [pc, #280]	@ (8001048 <Button_Handle+0x2dc>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	701a      	strb	r2, [r3, #0]
              button->latch = true;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2201      	movs	r2, #1
 8000f38:	73da      	strb	r2, [r3, #15]
                time_get_data.minute,       // Minutes: 0-59
 8000f3a:	4b44      	ldr	r3, [pc, #272]	@ (800104c <Button_Handle+0x2e0>)
 8000f3c:	785b      	ldrb	r3, [r3, #1]
 8000f3e:	fa5f fc83 	uxtb.w	ip, r3
                time_get_data.hour,         // Hours: 0-23
 8000f42:	4b42      	ldr	r3, [pc, #264]	@ (800104c <Button_Handle+0x2e0>)
 8000f44:	789b      	ldrb	r3, [r3, #2]
 8000f46:	b2de      	uxtb	r6, r3
                time_get_data.dayofweek,    // Day of the week: 1-7 (1 = Sunday, 2 = Monday, ..., 7 = Saturday)
 8000f48:	4b40      	ldr	r3, [pc, #256]	@ (800104c <Button_Handle+0x2e0>)
 8000f4a:	78db      	ldrb	r3, [r3, #3]
 8000f4c:	b2dd      	uxtb	r5, r3
                time_get_data.dateofmonth,  // Date of the month: 1-31
 8000f4e:	4b3f      	ldr	r3, [pc, #252]	@ (800104c <Button_Handle+0x2e0>)
 8000f50:	791b      	ldrb	r3, [r3, #4]
 8000f52:	b2dc      	uxtb	r4, r3
                time_get_data.month,        // Month: 1-12
 8000f54:	4b3d      	ldr	r3, [pc, #244]	@ (800104c <Button_Handle+0x2e0>)
 8000f56:	795b      	ldrb	r3, [r3, #5]
 8000f58:	b2d8      	uxtb	r0, r3
                time_get_data.year,         // Year: 0-99 (0 = 2000, 1 = 2001, ..., 99 = 2099)
 8000f5a:	4b3c      	ldr	r3, [pc, #240]	@ (800104c <Button_Handle+0x2e0>)
 8000f5c:	799b      	ldrb	r3, [r3, #6]
 8000f5e:	b2d9      	uxtb	r1, r3
                time_get_data.dayofweek,    // Day of the week: 1-7 (1 = Sunday, 2 = Monday, ..., 7 = Saturday), or Date of the month: 1-31
 8000f60:	4b3a      	ldr	r3, [pc, #232]	@ (800104c <Button_Handle+0x2e0>)
 8000f62:	78db      	ldrb	r3, [r3, #3]
 8000f64:	b2da      	uxtb	r2, r3
              system_param_data =
 8000f66:	4b3a      	ldr	r3, [pc, #232]	@ (8001050 <Button_Handle+0x2e4>)
 8000f68:	f04f 0e00 	mov.w	lr, #0
 8000f6c:	f883 e000 	strb.w	lr, [r3]
 8000f70:	4b37      	ldr	r3, [pc, #220]	@ (8001050 <Button_Handle+0x2e4>)
 8000f72:	f883 c001 	strb.w	ip, [r3, #1]
 8000f76:	4b36      	ldr	r3, [pc, #216]	@ (8001050 <Button_Handle+0x2e4>)
 8000f78:	709e      	strb	r6, [r3, #2]
 8000f7a:	4b35      	ldr	r3, [pc, #212]	@ (8001050 <Button_Handle+0x2e4>)
 8000f7c:	70dd      	strb	r5, [r3, #3]
 8000f7e:	4b34      	ldr	r3, [pc, #208]	@ (8001050 <Button_Handle+0x2e4>)
 8000f80:	711c      	strb	r4, [r3, #4]
 8000f82:	4b33      	ldr	r3, [pc, #204]	@ (8001050 <Button_Handle+0x2e4>)
 8000f84:	7158      	strb	r0, [r3, #5]
 8000f86:	4b32      	ldr	r3, [pc, #200]	@ (8001050 <Button_Handle+0x2e4>)
 8000f88:	7199      	strb	r1, [r3, #6]
 8000f8a:	4b31      	ldr	r3, [pc, #196]	@ (8001050 <Button_Handle+0x2e4>)
 8000f8c:	2102      	movs	r1, #2
 8000f8e:	71d9      	strb	r1, [r3, #7]
 8000f90:	4b2f      	ldr	r3, [pc, #188]	@ (8001050 <Button_Handle+0x2e4>)
 8000f92:	721a      	strb	r2, [r3, #8]
 8000f94:	4b2e      	ldr	r3, [pc, #184]	@ (8001050 <Button_Handle+0x2e4>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	725a      	strb	r2, [r3, #9]
            break;
 8000f9a:	e1a9      	b.n	80012f0 <Button_Handle+0x584>
          
          // Button 1: If pressed, increment the selected parameter; if held, increment continuously
          case 1: 
            // Pointer to the selected parameter, its maximum value, and minimum value
            uint8_t *paramPtr1 = NULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	657b      	str	r3, [r7, #84]	@ 0x54
            uint8_t maxValue1 = 0;    
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
            uint8_t minValue1 = 0;  
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52

            // Determine the parameter to increment based on the current selection
            switch (system_state.param_select)
 8000fac:	4b26      	ldr	r3, [pc, #152]	@ (8001048 <Button_Handle+0x2dc>)
 8000fae:	785b      	ldrb	r3, [r3, #1]
 8000fb0:	2b06      	cmp	r3, #6
 8000fb2:	d862      	bhi.n	800107a <Button_Handle+0x30e>
 8000fb4:	a201      	add	r2, pc, #4	@ (adr r2, 8000fbc <Button_Handle+0x250>)
 8000fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fba:	bf00      	nop
 8000fbc:	08000fd9 	.word	0x08000fd9
 8000fc0:	08000feb 	.word	0x08000feb
 8000fc4:	08000ffd 	.word	0x08000ffd
 8000fc8:	0800100f 	.word	0x0800100f
 8000fcc:	08001021 	.word	0x08001021
 8000fd0:	08001033 	.word	0x08001033
 8000fd4:	08001069 	.word	0x08001069
            {
              case SET_SECOND:  paramPtr1 = &system_param_data.second;  maxValue1 = 59; minValue1 = 0; break;
 8000fd8:	4b1d      	ldr	r3, [pc, #116]	@ (8001050 <Button_Handle+0x2e4>)
 8000fda:	657b      	str	r3, [r7, #84]	@ 0x54
 8000fdc:	233b      	movs	r3, #59	@ 0x3b
 8000fde:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8000fe8:	e048      	b.n	800107c <Button_Handle+0x310>
              case SET_MINUTE:  paramPtr1 = &system_param_data.minute;  maxValue1 = 59; minValue1 = 0; break;
 8000fea:	4b1a      	ldr	r3, [pc, #104]	@ (8001054 <Button_Handle+0x2e8>)
 8000fec:	657b      	str	r3, [r7, #84]	@ 0x54
 8000fee:	233b      	movs	r3, #59	@ 0x3b
 8000ff0:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8000ffa:	e03f      	b.n	800107c <Button_Handle+0x310>
              case SET_HOUR:    paramPtr1 = &system_param_data.hour;    maxValue1 = 23; minValue1 = 0; break;
 8000ffc:	4b16      	ldr	r3, [pc, #88]	@ (8001058 <Button_Handle+0x2ec>)
 8000ffe:	657b      	str	r3, [r7, #84]	@ 0x54
 8001000:	2317      	movs	r3, #23
 8001002:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8001006:	2300      	movs	r3, #0
 8001008:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 800100c:	e036      	b.n	800107c <Button_Handle+0x310>
              case SET_DOW:     paramPtr1 = &system_param_data.dow;     maxValue1 = 7;  minValue1 = 1; break;
 800100e:	4b13      	ldr	r3, [pc, #76]	@ (800105c <Button_Handle+0x2f0>)
 8001010:	657b      	str	r3, [r7, #84]	@ 0x54
 8001012:	2307      	movs	r3, #7
 8001014:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8001018:	2301      	movs	r3, #1
 800101a:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 800101e:	e02d      	b.n	800107c <Button_Handle+0x310>
              case SET_DOM:     paramPtr1 = &system_param_data.dom;     maxValue1 = 31; minValue1 = 1; break;
 8001020:	4b0f      	ldr	r3, [pc, #60]	@ (8001060 <Button_Handle+0x2f4>)
 8001022:	657b      	str	r3, [r7, #84]	@ 0x54
 8001024:	231f      	movs	r3, #31
 8001026:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 800102a:	2301      	movs	r3, #1
 800102c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8001030:	e024      	b.n	800107c <Button_Handle+0x310>
              case SET_MONTH:   paramPtr1 = &system_param_data.month;   maxValue1 = 12; minValue1 = 1; break;
 8001032:	4b0c      	ldr	r3, [pc, #48]	@ (8001064 <Button_Handle+0x2f8>)
 8001034:	657b      	str	r3, [r7, #84]	@ 0x54
 8001036:	230c      	movs	r3, #12
 8001038:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 800103c:	2301      	movs	r3, #1
 800103e:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8001042:	e01b      	b.n	800107c <Button_Handle+0x310>
 8001044:	20000144 	.word	0x20000144
 8001048:	200000fc 	.word	0x200000fc
 800104c:	2000010c 	.word	0x2000010c
 8001050:	20000100 	.word	0x20000100
 8001054:	20000101 	.word	0x20000101
 8001058:	20000102 	.word	0x20000102
 800105c:	20000103 	.word	0x20000103
 8001060:	20000104 	.word	0x20000104
 8001064:	20000105 	.word	0x20000105
              case SET_YEAR:    paramPtr1 = &system_param_data.year;    maxValue1 = 99; minValue1 = 0; break;
 8001068:	4ba4      	ldr	r3, [pc, #656]	@ (80012fc <Button_Handle+0x590>)
 800106a:	657b      	str	r3, [r7, #84]	@ 0x54
 800106c:	2363      	movs	r3, #99	@ 0x63
 800106e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8001072:	2300      	movs	r3, #0
 8001074:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8001078:	e000      	b.n	800107c <Button_Handle+0x310>
              default: break;
 800107a:	bf00      	nop
            }

            // Initialize the start tick for button 1 hold detection
            uint32_t startTick1 = 0;
 800107c:	2300      	movs	r3, #0
 800107e:	627b      	str	r3, [r7, #36]	@ 0x24

            // Check if the button is pressed or held
            if (button->press_flag) 
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	7b5b      	ldrb	r3, [r3, #13]
 8001084:	b2db      	uxtb	r3, r3
 8001086:	2b00      	cmp	r3, #0
 8001088:	d013      	beq.n	80010b2 <Button_Handle+0x346>
            {
              // Increment the selected parameter value once for a button press
              if (paramPtr1) 
 800108a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800108c:	2b00      	cmp	r3, #0
 800108e:	f000 8131 	beq.w	80012f4 <Button_Handle+0x588>
              {
                // Increment the parameter value, wrapping around if necessary
                *paramPtr1 = (*paramPtr1 < maxValue1) ? (*paramPtr1 + 1) : minValue1;
 8001092:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 800109a:	429a      	cmp	r2, r3
 800109c:	d904      	bls.n	80010a8 <Button_Handle+0x33c>
 800109e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	3301      	adds	r3, #1
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	e001      	b.n	80010ac <Button_Handle+0x340>
 80010a8:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 80010ac:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80010ae:	7013      	strb	r3, [r2, #0]

                // Update the start tick for the next hold cycle
                startTick1 = HAL_GetTick();
              }
            } 
            break;
 80010b0:	e120      	b.n	80012f4 <Button_Handle+0x588>
            else if (button->hold_flag) 
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	7b9b      	ldrb	r3, [r3, #14]
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	f000 811b 	beq.w	80012f4 <Button_Handle+0x588>
              if (HAL_GetTick() - startTick1 >= BUTTON_HOLD_CYCLE) 
 80010be:	f000 ff0b 	bl	8001ed8 <HAL_GetTick>
 80010c2:	4602      	mov	r2, r0
 80010c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	2bf9      	cmp	r3, #249	@ 0xf9
 80010ca:	f240 8113 	bls.w	80012f4 <Button_Handle+0x588>
                if (paramPtr1) 
 80010ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d00e      	beq.n	80010f2 <Button_Handle+0x386>
                  *paramPtr1 = (*paramPtr1 < maxValue1) ? (*paramPtr1 + 1) : minValue1;
 80010d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 80010dc:	429a      	cmp	r2, r3
 80010de:	d904      	bls.n	80010ea <Button_Handle+0x37e>
 80010e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	3301      	adds	r3, #1
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	e001      	b.n	80010ee <Button_Handle+0x382>
 80010ea:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 80010ee:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80010f0:	7013      	strb	r3, [r2, #0]
                startTick1 = HAL_GetTick();
 80010f2:	f000 fef1 	bl	8001ed8 <HAL_GetTick>
 80010f6:	6278      	str	r0, [r7, #36]	@ 0x24
            break;
 80010f8:	e0fc      	b.n	80012f4 <Button_Handle+0x588>
          
            // Button 2: If pressed, decrement the selected parameter; if held, decrement continuously
            case 2: 
              // Pointer to the selected parameter, its maximum value, and minimum value
              uint8_t *paramPtr2 = NULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
              uint8_t maxValue2 = 0;    
 80010fe:	2300      	movs	r3, #0
 8001100:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
              uint8_t minValue2 = 0;  
 8001104:	2300      	movs	r3, #0
 8001106:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a

              // Determine the parameter to decrement based on the current selection
              switch (system_state.param_select)
 800110a:	4b7d      	ldr	r3, [pc, #500]	@ (8001300 <Button_Handle+0x594>)
 800110c:	785b      	ldrb	r3, [r3, #1]
 800110e:	2b06      	cmp	r3, #6
 8001110:	d84f      	bhi.n	80011b2 <Button_Handle+0x446>
 8001112:	a201      	add	r2, pc, #4	@ (adr r2, 8001118 <Button_Handle+0x3ac>)
 8001114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001118:	08001135 	.word	0x08001135
 800111c:	08001147 	.word	0x08001147
 8001120:	08001159 	.word	0x08001159
 8001124:	0800116b 	.word	0x0800116b
 8001128:	0800117d 	.word	0x0800117d
 800112c:	0800118f 	.word	0x0800118f
 8001130:	080011a1 	.word	0x080011a1
              {
                case SET_SECOND:  paramPtr2 = &system_param_data.second;  maxValue2 = 59; minValue2 = 0; break;
 8001134:	4b73      	ldr	r3, [pc, #460]	@ (8001304 <Button_Handle+0x598>)
 8001136:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001138:	233b      	movs	r3, #59	@ 0x3b
 800113a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 800113e:	2300      	movs	r3, #0
 8001140:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 8001144:	e036      	b.n	80011b4 <Button_Handle+0x448>
                case SET_MINUTE:  paramPtr2 = &system_param_data.minute;  maxValue2 = 59; minValue2 = 0; break;
 8001146:	4b70      	ldr	r3, [pc, #448]	@ (8001308 <Button_Handle+0x59c>)
 8001148:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800114a:	233b      	movs	r3, #59	@ 0x3b
 800114c:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 8001150:	2300      	movs	r3, #0
 8001152:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 8001156:	e02d      	b.n	80011b4 <Button_Handle+0x448>
                case SET_HOUR:    paramPtr2 = &system_param_data.hour;    maxValue2 = 23; minValue2 = 0; break;
 8001158:	4b6c      	ldr	r3, [pc, #432]	@ (800130c <Button_Handle+0x5a0>)
 800115a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800115c:	2317      	movs	r3, #23
 800115e:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 8001162:	2300      	movs	r3, #0
 8001164:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 8001168:	e024      	b.n	80011b4 <Button_Handle+0x448>
                case SET_DOW:     paramPtr2 = &system_param_data.dow;     maxValue2 = 7;  minValue2 = 1; break;
 800116a:	4b69      	ldr	r3, [pc, #420]	@ (8001310 <Button_Handle+0x5a4>)
 800116c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800116e:	2307      	movs	r3, #7
 8001170:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 8001174:	2301      	movs	r3, #1
 8001176:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 800117a:	e01b      	b.n	80011b4 <Button_Handle+0x448>
                case SET_DOM:     paramPtr2 = &system_param_data.dom;     maxValue2 = 31; minValue2 = 1; break;
 800117c:	4b65      	ldr	r3, [pc, #404]	@ (8001314 <Button_Handle+0x5a8>)
 800117e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001180:	231f      	movs	r3, #31
 8001182:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 8001186:	2301      	movs	r3, #1
 8001188:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 800118c:	e012      	b.n	80011b4 <Button_Handle+0x448>
                case SET_MONTH:   paramPtr2 = &system_param_data.month;   maxValue2 = 12; minValue2 = 1; break;
 800118e:	4b62      	ldr	r3, [pc, #392]	@ (8001318 <Button_Handle+0x5ac>)
 8001190:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001192:	230c      	movs	r3, #12
 8001194:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 8001198:	2301      	movs	r3, #1
 800119a:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 800119e:	e009      	b.n	80011b4 <Button_Handle+0x448>
                case SET_YEAR:    paramPtr2 = &system_param_data.year;    maxValue2 = 99; minValue2 = 0; break;
 80011a0:	4b56      	ldr	r3, [pc, #344]	@ (80012fc <Button_Handle+0x590>)
 80011a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80011a4:	2363      	movs	r3, #99	@ 0x63
 80011a6:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 80011aa:	2300      	movs	r3, #0
 80011ac:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 80011b0:	e000      	b.n	80011b4 <Button_Handle+0x448>
                default: break;
 80011b2:	bf00      	nop
              }

              // Initialize the start tick for button 2 hold detection
              uint32_t startTick2 = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	62bb      	str	r3, [r7, #40]	@ 0x28

              // Check if the button is pressed or held
              if (button->press_flag) 
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	7b5b      	ldrb	r3, [r3, #13]
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d013      	beq.n	80011ea <Button_Handle+0x47e>
              {
                // Decrement the selected parameter value once for a button press
                if (paramPtr2) 
 80011c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	f000 8097 	beq.w	80012f8 <Button_Handle+0x58c>
                {
                  // Decrement the parameter value, wrapping around if necessary
                  *paramPtr2 = (*paramPtr2 > minValue2) ? (*paramPtr2 - 1) : maxValue2;
 80011ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	f897 204a 	ldrb.w	r2, [r7, #74]	@ 0x4a
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d204      	bcs.n	80011e0 <Button_Handle+0x474>
 80011d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	3b01      	subs	r3, #1
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	e001      	b.n	80011e4 <Button_Handle+0x478>
 80011e0:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80011e4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80011e6:	7013      	strb	r3, [r2, #0]

                  // Update the start tick for the next hold cycle
                  startTick2 = HAL_GetTick();
                }
              } 
              break;
 80011e8:	e086      	b.n	80012f8 <Button_Handle+0x58c>
              else if (button->hold_flag) 
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	7b9b      	ldrb	r3, [r3, #14]
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	f000 8081 	beq.w	80012f8 <Button_Handle+0x58c>
                if (HAL_GetTick() - startTick2 >= BUTTON_HOLD_CYCLE) 
 80011f6:	f000 fe6f 	bl	8001ed8 <HAL_GetTick>
 80011fa:	4602      	mov	r2, r0
 80011fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	2bf9      	cmp	r3, #249	@ 0xf9
 8001202:	d979      	bls.n	80012f8 <Button_Handle+0x58c>
                  if (paramPtr2) 
 8001204:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001206:	2b00      	cmp	r3, #0
 8001208:	d00e      	beq.n	8001228 <Button_Handle+0x4bc>
                    *paramPtr2 = (*paramPtr2 > minValue2) ? (*paramPtr2 - 1) : maxValue2;
 800120a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	f897 204a 	ldrb.w	r2, [r7, #74]	@ 0x4a
 8001212:	429a      	cmp	r2, r3
 8001214:	d204      	bcs.n	8001220 <Button_Handle+0x4b4>
 8001216:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	3b01      	subs	r3, #1
 800121c:	b2db      	uxtb	r3, r3
 800121e:	e001      	b.n	8001224 <Button_Handle+0x4b8>
 8001220:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001224:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001226:	7013      	strb	r3, [r2, #0]
                  startTick2 = HAL_GetTick();
 8001228:	f000 fe56 	bl	8001ed8 <HAL_GetTick>
 800122c:	62b8      	str	r0, [r7, #40]	@ 0x28
              break;
 800122e:	e063      	b.n	80012f8 <Button_Handle+0x58c>
          
          // Button 3: If pressed, move to the next field; if held, set the time using the current parameter values
          case 3: 
            // If the button is pressed, move to the next parameter field, wrapping around if necessary
            if(button->press_flag)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	7b5b      	ldrb	r3, [r3, #13]
 8001234:	b2db      	uxtb	r3, r3
 8001236:	2b00      	cmp	r3, #0
 8001238:	d014      	beq.n	8001264 <Button_Handle+0x4f8>
            {
              if (system_state.param_select == SET_YEAR)
 800123a:	4b31      	ldr	r3, [pc, #196]	@ (8001300 <Button_Handle+0x594>)
 800123c:	785b      	ldrb	r3, [r3, #1]
 800123e:	2b06      	cmp	r3, #6
 8001240:	d103      	bne.n	800124a <Button_Handle+0x4de>
              {
                system_state.param_select = SET_SECOND;
 8001242:	4b2f      	ldr	r3, [pc, #188]	@ (8001300 <Button_Handle+0x594>)
 8001244:	2200      	movs	r2, #0
 8001246:	705a      	strb	r2, [r3, #1]

              button->latch = true;

              break;
            }
            break;
 8001248:	e068      	b.n	800131c <Button_Handle+0x5b0>
                system_state.param_select = (system_state.param_select < 9) ? (system_state.param_select + 1) : 0;
 800124a:	4b2d      	ldr	r3, [pc, #180]	@ (8001300 <Button_Handle+0x594>)
 800124c:	785b      	ldrb	r3, [r3, #1]
 800124e:	2b08      	cmp	r3, #8
 8001250:	d804      	bhi.n	800125c <Button_Handle+0x4f0>
 8001252:	4b2b      	ldr	r3, [pc, #172]	@ (8001300 <Button_Handle+0x594>)
 8001254:	785b      	ldrb	r3, [r3, #1]
 8001256:	3301      	adds	r3, #1
 8001258:	b2db      	uxtb	r3, r3
 800125a:	e000      	b.n	800125e <Button_Handle+0x4f2>
 800125c:	2300      	movs	r3, #0
 800125e:	4a28      	ldr	r2, [pc, #160]	@ (8001300 <Button_Handle+0x594>)
 8001260:	7053      	strb	r3, [r2, #1]
            break;
 8001262:	e05b      	b.n	800131c <Button_Handle+0x5b0>
            else if (button->hold_flag && !button->latch) 
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	7b9b      	ldrb	r3, [r3, #14]
 8001268:	b2db      	uxtb	r3, r3
 800126a:	2b00      	cmp	r3, #0
 800126c:	d056      	beq.n	800131c <Button_Handle+0x5b0>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	7bdb      	ldrb	r3, [r3, #15]
 8001272:	b2db      	uxtb	r3, r3
 8001274:	f083 0301 	eor.w	r3, r3, #1
 8001278:	b2db      	uxtb	r3, r3
 800127a:	2b00      	cmp	r3, #0
 800127c:	d04e      	beq.n	800131c <Button_Handle+0x5b0>
              Time_Init
 800127e:	4b21      	ldr	r3, [pc, #132]	@ (8001304 <Button_Handle+0x598>)
 8001280:	7818      	ldrb	r0, [r3, #0]
 8001282:	4b20      	ldr	r3, [pc, #128]	@ (8001304 <Button_Handle+0x598>)
 8001284:	785c      	ldrb	r4, [r3, #1]
 8001286:	4b1f      	ldr	r3, [pc, #124]	@ (8001304 <Button_Handle+0x598>)
 8001288:	789d      	ldrb	r5, [r3, #2]
 800128a:	4b1e      	ldr	r3, [pc, #120]	@ (8001304 <Button_Handle+0x598>)
 800128c:	78de      	ldrb	r6, [r3, #3]
 800128e:	4b1d      	ldr	r3, [pc, #116]	@ (8001304 <Button_Handle+0x598>)
 8001290:	791b      	ldrb	r3, [r3, #4]
 8001292:	4a1c      	ldr	r2, [pc, #112]	@ (8001304 <Button_Handle+0x598>)
 8001294:	7952      	ldrb	r2, [r2, #5]
 8001296:	491b      	ldr	r1, [pc, #108]	@ (8001304 <Button_Handle+0x598>)
 8001298:	7989      	ldrb	r1, [r1, #6]
 800129a:	9102      	str	r1, [sp, #8]
 800129c:	9201      	str	r2, [sp, #4]
 800129e:	9300      	str	r3, [sp, #0]
 80012a0:	4633      	mov	r3, r6
 80012a2:	462a      	mov	r2, r5
 80012a4:	4621      	mov	r1, r4
 80012a6:	f7ff fb99 	bl	80009dc <Time_Init>
              button->latch = true;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2201      	movs	r2, #1
 80012ae:	73da      	strb	r2, [r3, #15]
              break;
 80012b0:	e035      	b.n	800131e <Button_Handle+0x5b2>

          // Button 4: If pressed, move to the previous field; if held, do nothing (reserved for future use)
          case 4: 
            // If the button is pressed, move to the previous parameter field, wrapping around if necessary
            if (button->press_flag)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	7b5b      	ldrb	r3, [r3, #13]
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d014      	beq.n	80012e6 <Button_Handle+0x57a>
            {
              if (system_state.param_select == SET_SECOND)
 80012bc:	4b10      	ldr	r3, [pc, #64]	@ (8001300 <Button_Handle+0x594>)
 80012be:	785b      	ldrb	r3, [r3, #1]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d103      	bne.n	80012cc <Button_Handle+0x560>
              {
                system_state.param_select = SET_YEAR;
 80012c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001300 <Button_Handle+0x594>)
 80012c6:	2206      	movs	r2, #6
 80012c8:	705a      	strb	r2, [r3, #1]
            // If the button is held down, do nothing (reserved for future use)
            else if (button->hold_flag) 
            {
             // Reserved
            }
            break;
 80012ca:	e028      	b.n	800131e <Button_Handle+0x5b2>
                system_state.param_select = (system_state.param_select > 0) ? (system_state.param_select - 1) : 9;
 80012cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001300 <Button_Handle+0x594>)
 80012ce:	785b      	ldrb	r3, [r3, #1]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d004      	beq.n	80012de <Button_Handle+0x572>
 80012d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001300 <Button_Handle+0x594>)
 80012d6:	785b      	ldrb	r3, [r3, #1]
 80012d8:	3b01      	subs	r3, #1
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	e000      	b.n	80012e0 <Button_Handle+0x574>
 80012de:	2309      	movs	r3, #9
 80012e0:	4a07      	ldr	r2, [pc, #28]	@ (8001300 <Button_Handle+0x594>)
 80012e2:	7053      	strb	r3, [r2, #1]
            break;
 80012e4:	e01b      	b.n	800131e <Button_Handle+0x5b2>
            else if (button->hold_flag) 
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	7b9b      	ldrb	r3, [r3, #14]
            break;
 80012ea:	e018      	b.n	800131e <Button_Handle+0x5b2>

          default: 
            break;
 80012ec:	bf00      	nop
 80012ee:	e3ad      	b.n	8001a4c <Button_Handle+0xce0>
            break;
 80012f0:	bf00      	nop
 80012f2:	e3ab      	b.n	8001a4c <Button_Handle+0xce0>
            break;
 80012f4:	bf00      	nop
 80012f6:	e3a9      	b.n	8001a4c <Button_Handle+0xce0>
              break;
 80012f8:	bf00      	nop
 80012fa:	e3a7      	b.n	8001a4c <Button_Handle+0xce0>
 80012fc:	20000106 	.word	0x20000106
 8001300:	200000fc 	.word	0x200000fc
 8001304:	20000100 	.word	0x20000100
 8001308:	20000101 	.word	0x20000101
 800130c:	20000102 	.word	0x20000102
 8001310:	20000103 	.word	0x20000103
 8001314:	20000104 	.word	0x20000104
 8001318:	20000105 	.word	0x20000105
            break;
 800131c:	bf00      	nop
        }
        break;
 800131e:	e395      	b.n	8001a4c <Button_Handle+0xce0>
      
      // Alarm setup mode: Handle button actions in alarm setup mode based on the button index
      case ALARM_SETUP_MODE: 
        switch (button->index) 
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	799b      	ldrb	r3, [r3, #6]
 8001324:	2b04      	cmp	r3, #4
 8001326:	f200 825a 	bhi.w	80017de <Button_Handle+0xa72>
 800132a:	a201      	add	r2, pc, #4	@ (adr r2, 8001330 <Button_Handle+0x5c4>)
 800132c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001330:	08001345 	.word	0x08001345
 8001334:	080013f5 	.word	0x080013f5
 8001338:	0800153f 	.word	0x0800153f
 800133c:	080016fb 	.word	0x080016fb
 8001340:	080017ab 	.word	0x080017ab
        {
          // Button 0: If pressed, cycle through the system modes; if held, set the mode to default
          case 0:
            // If pressed, cycle through the time system modes, but the temporary setting data is still retained (avoid accidental press)
            if (button->press_flag)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	7b5b      	ldrb	r3, [r3, #13]
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2b00      	cmp	r3, #0
 800134c:	d00c      	beq.n	8001368 <Button_Handle+0x5fc>
            {
              system_state.mode = (system_state.mode < 5) ? (system_state.mode + 1) : 0;
 800134e:	4bac      	ldr	r3, [pc, #688]	@ (8001600 <Button_Handle+0x894>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	2b04      	cmp	r3, #4
 8001354:	d804      	bhi.n	8001360 <Button_Handle+0x5f4>
 8001356:	4baa      	ldr	r3, [pc, #680]	@ (8001600 <Button_Handle+0x894>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	3301      	adds	r3, #1
 800135c:	b2db      	uxtb	r3, r3
 800135e:	e000      	b.n	8001362 <Button_Handle+0x5f6>
 8001360:	2300      	movs	r3, #0
 8001362:	4aa7      	ldr	r2, [pc, #668]	@ (8001600 <Button_Handle+0x894>)
 8001364:	7013      	strb	r3, [r2, #0]
                NOT_USED_MODE,              // Select: DAY_OF_WEEK_MODE, DATE_OF_MONTH_MODE, NOT_USED_MODE
                time_get_data.dayofweek,    // Day of the week: 1-7 (1 = Sunday, 2 = Monday, ..., 7 = Saturday), or Date of the month: 1-31
                true                        // true = ON, false = OFF
              };
            }
            break;
 8001366:	e23c      	b.n	80017e2 <Button_Handle+0xa76>
            else if (button->hold_flag && !button->latch)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	7b9b      	ldrb	r3, [r3, #14]
 800136c:	b2db      	uxtb	r3, r3
 800136e:	2b00      	cmp	r3, #0
 8001370:	f000 8237 	beq.w	80017e2 <Button_Handle+0xa76>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	7bdb      	ldrb	r3, [r3, #15]
 8001378:	b2db      	uxtb	r3, r3
 800137a:	f083 0301 	eor.w	r3, r3, #1
 800137e:	b2db      	uxtb	r3, r3
 8001380:	2b00      	cmp	r3, #0
 8001382:	f000 822e 	beq.w	80017e2 <Button_Handle+0xa76>
              system_state.mode = DEFAULT_MODE; 
 8001386:	4b9e      	ldr	r3, [pc, #632]	@ (8001600 <Button_Handle+0x894>)
 8001388:	2200      	movs	r2, #0
 800138a:	701a      	strb	r2, [r3, #0]
              button->latch = true;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2201      	movs	r2, #1
 8001390:	73da      	strb	r2, [r3, #15]
                time_get_data.minute,       // Minutes: 0-59
 8001392:	4b9c      	ldr	r3, [pc, #624]	@ (8001604 <Button_Handle+0x898>)
 8001394:	785b      	ldrb	r3, [r3, #1]
 8001396:	fa5f fc83 	uxtb.w	ip, r3
                time_get_data.hour,         // Hours: 0-23
 800139a:	4b9a      	ldr	r3, [pc, #616]	@ (8001604 <Button_Handle+0x898>)
 800139c:	789b      	ldrb	r3, [r3, #2]
 800139e:	b2de      	uxtb	r6, r3
                time_get_data.dayofweek,    // Day of the week: 1-7 (1 = Sunday, 2 = Monday, ..., 7 = Saturday)
 80013a0:	4b98      	ldr	r3, [pc, #608]	@ (8001604 <Button_Handle+0x898>)
 80013a2:	78db      	ldrb	r3, [r3, #3]
 80013a4:	b2dd      	uxtb	r5, r3
                time_get_data.dateofmonth,  // Date of the month: 1-31
 80013a6:	4b97      	ldr	r3, [pc, #604]	@ (8001604 <Button_Handle+0x898>)
 80013a8:	791b      	ldrb	r3, [r3, #4]
 80013aa:	b2dc      	uxtb	r4, r3
                time_get_data.month,        // Month: 1-12
 80013ac:	4b95      	ldr	r3, [pc, #596]	@ (8001604 <Button_Handle+0x898>)
 80013ae:	795b      	ldrb	r3, [r3, #5]
 80013b0:	b2d8      	uxtb	r0, r3
                time_get_data.year,         // Year: 0-99 (0 = 2000, 1 = 2001, ..., 99 = 2099)
 80013b2:	4b94      	ldr	r3, [pc, #592]	@ (8001604 <Button_Handle+0x898>)
 80013b4:	799b      	ldrb	r3, [r3, #6]
 80013b6:	b2d9      	uxtb	r1, r3
                time_get_data.dayofweek,    // Day of the week: 1-7 (1 = Sunday, 2 = Monday, ..., 7 = Saturday), or Date of the month: 1-31
 80013b8:	4b92      	ldr	r3, [pc, #584]	@ (8001604 <Button_Handle+0x898>)
 80013ba:	78db      	ldrb	r3, [r3, #3]
 80013bc:	b2da      	uxtb	r2, r3
              system_param_data =
 80013be:	4b92      	ldr	r3, [pc, #584]	@ (8001608 <Button_Handle+0x89c>)
 80013c0:	f04f 0e00 	mov.w	lr, #0
 80013c4:	f883 e000 	strb.w	lr, [r3]
 80013c8:	4b8f      	ldr	r3, [pc, #572]	@ (8001608 <Button_Handle+0x89c>)
 80013ca:	f883 c001 	strb.w	ip, [r3, #1]
 80013ce:	4b8e      	ldr	r3, [pc, #568]	@ (8001608 <Button_Handle+0x89c>)
 80013d0:	709e      	strb	r6, [r3, #2]
 80013d2:	4b8d      	ldr	r3, [pc, #564]	@ (8001608 <Button_Handle+0x89c>)
 80013d4:	70dd      	strb	r5, [r3, #3]
 80013d6:	4b8c      	ldr	r3, [pc, #560]	@ (8001608 <Button_Handle+0x89c>)
 80013d8:	711c      	strb	r4, [r3, #4]
 80013da:	4b8b      	ldr	r3, [pc, #556]	@ (8001608 <Button_Handle+0x89c>)
 80013dc:	7158      	strb	r0, [r3, #5]
 80013de:	4b8a      	ldr	r3, [pc, #552]	@ (8001608 <Button_Handle+0x89c>)
 80013e0:	7199      	strb	r1, [r3, #6]
 80013e2:	4b89      	ldr	r3, [pc, #548]	@ (8001608 <Button_Handle+0x89c>)
 80013e4:	2102      	movs	r1, #2
 80013e6:	71d9      	strb	r1, [r3, #7]
 80013e8:	4b87      	ldr	r3, [pc, #540]	@ (8001608 <Button_Handle+0x89c>)
 80013ea:	721a      	strb	r2, [r3, #8]
 80013ec:	4b86      	ldr	r3, [pc, #536]	@ (8001608 <Button_Handle+0x89c>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	725a      	strb	r2, [r3, #9]
            break;
 80013f2:	e1f6      	b.n	80017e2 <Button_Handle+0xa76>

          // Button 1: If pressed, increment the selected parameter; if held, increment continuously
          case 1: 
            // Pointer to the selected parameter, its maximum value, and minimum value
            uint8_t *paramPtr1 = NULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	647b      	str	r3, [r7, #68]	@ 0x44
            uint8_t maxValue1 = 0;    
 80013f8:	2300      	movs	r3, #0
 80013fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
            uint8_t minValue1 = 0;  
 80013fe:	2300      	movs	r3, #0
 8001400:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42

            // Determine the parameter to increment based on the current selection
            switch (system_state.param_select)
 8001404:	4b7e      	ldr	r3, [pc, #504]	@ (8001600 <Button_Handle+0x894>)
 8001406:	785b      	ldrb	r3, [r3, #1]
 8001408:	2b09      	cmp	r3, #9
 800140a:	d854      	bhi.n	80014b6 <Button_Handle+0x74a>
 800140c:	a201      	add	r2, pc, #4	@ (adr r2, 8001414 <Button_Handle+0x6a8>)
 800140e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001412:	bf00      	nop
 8001414:	0800143d 	.word	0x0800143d
 8001418:	0800144f 	.word	0x0800144f
 800141c:	08001461 	.word	0x08001461
 8001420:	080014b7 	.word	0x080014b7
 8001424:	080014b7 	.word	0x080014b7
 8001428:	080014b7 	.word	0x080014b7
 800142c:	080014b7 	.word	0x080014b7
 8001430:	08001473 	.word	0x08001473
 8001434:	08001485 	.word	0x08001485
 8001438:	08001497 	.word	0x08001497
            {
              case SET_SECOND:  paramPtr1 = &system_param_data.second;  maxValue1 = 59; minValue1 = 0; break;
 800143c:	4b72      	ldr	r3, [pc, #456]	@ (8001608 <Button_Handle+0x89c>)
 800143e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001440:	233b      	movs	r3, #59	@ 0x3b
 8001442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8001446:	2300      	movs	r3, #0
 8001448:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800144c:	e034      	b.n	80014b8 <Button_Handle+0x74c>
              case SET_MINUTE:  paramPtr1 = &system_param_data.minute;  maxValue1 = 59; minValue1 = 0; break;
 800144e:	4b6f      	ldr	r3, [pc, #444]	@ (800160c <Button_Handle+0x8a0>)
 8001450:	647b      	str	r3, [r7, #68]	@ 0x44
 8001452:	233b      	movs	r3, #59	@ 0x3b
 8001454:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8001458:	2300      	movs	r3, #0
 800145a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800145e:	e02b      	b.n	80014b8 <Button_Handle+0x74c>
              case SET_HOUR:    paramPtr1 = &system_param_data.hour;    maxValue1 = 23; minValue1 = 0; break;
 8001460:	4b6b      	ldr	r3, [pc, #428]	@ (8001610 <Button_Handle+0x8a4>)
 8001462:	647b      	str	r3, [r7, #68]	@ 0x44
 8001464:	2317      	movs	r3, #23
 8001466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800146a:	2300      	movs	r3, #0
 800146c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8001470:	e022      	b.n	80014b8 <Button_Handle+0x74c>
              case SET_DY_DT:   paramPtr1 = (uint8_t *)&system_param_data.dy_dt; maxValue1 = 2; minValue1 = 0; break;
 8001472:	4b68      	ldr	r3, [pc, #416]	@ (8001614 <Button_Handle+0x8a8>)
 8001474:	647b      	str	r3, [r7, #68]	@ 0x44
 8001476:	2302      	movs	r3, #2
 8001478:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800147c:	2300      	movs	r3, #0
 800147e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8001482:	e019      	b.n	80014b8 <Button_Handle+0x74c>
              case SET_DOW_DOM: paramPtr1 = &system_param_data.dom;     maxValue1 = 31; minValue1 = 1; break;
 8001484:	4b64      	ldr	r3, [pc, #400]	@ (8001618 <Button_Handle+0x8ac>)
 8001486:	647b      	str	r3, [r7, #68]	@ 0x44
 8001488:	231f      	movs	r3, #31
 800148a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800148e:	2301      	movs	r3, #1
 8001490:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8001494:	e010      	b.n	80014b8 <Button_Handle+0x74c>
              case SET_ON_OFF:  system_param_data.on_off = !system_param_data.on_off;                  break;
 8001496:	4b5c      	ldr	r3, [pc, #368]	@ (8001608 <Button_Handle+0x89c>)
 8001498:	7a5b      	ldrb	r3, [r3, #9]
 800149a:	2b00      	cmp	r3, #0
 800149c:	bf14      	ite	ne
 800149e:	2301      	movne	r3, #1
 80014a0:	2300      	moveq	r3, #0
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	f083 0301 	eor.w	r3, r3, #1
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	b2da      	uxtb	r2, r3
 80014b0:	4b55      	ldr	r3, [pc, #340]	@ (8001608 <Button_Handle+0x89c>)
 80014b2:	725a      	strb	r2, [r3, #9]
 80014b4:	e000      	b.n	80014b8 <Button_Handle+0x74c>
              default: break;
 80014b6:	bf00      	nop
            }

            if (system_state.param_select == SET_ON_OFF)
 80014b8:	4b51      	ldr	r3, [pc, #324]	@ (8001600 <Button_Handle+0x894>)
 80014ba:	785b      	ldrb	r3, [r3, #1]
 80014bc:	2b09      	cmp	r3, #9
 80014be:	f000 8192 	beq.w	80017e6 <Button_Handle+0xa7a>
            {
              break;
            }

            // Initialize the start tick for button 1 hold detection
            uint32_t startTick1 = 0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            
            // Check if the button is pressed or held
            if (button->press_flag) 
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	7b5b      	ldrb	r3, [r3, #13]
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d013      	beq.n	80014f8 <Button_Handle+0x78c>
            {
              // Increment the selected parameter value once for a button press
              if (paramPtr1) 
 80014d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	f000 8189 	beq.w	80017ea <Button_Handle+0xa7e>
              {
                // Increment the parameter value, wrapping around if necessary
                *paramPtr1 = (*paramPtr1 < maxValue1) ? (*paramPtr1 + 1) : minValue1;
 80014d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d904      	bls.n	80014ee <Button_Handle+0x782>
 80014e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	3301      	adds	r3, #1
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	e001      	b.n	80014f2 <Button_Handle+0x786>
 80014ee:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 80014f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80014f4:	7013      	strb	r3, [r2, #0]

              // Update the start tick for the next hold cycle
              startTick1 = HAL_GetTick();
            } 
            
            break;
 80014f6:	e178      	b.n	80017ea <Button_Handle+0xa7e>
            else if (button->hold_flag) 
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	7b9b      	ldrb	r3, [r3, #14]
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b00      	cmp	r3, #0
 8001500:	f000 8173 	beq.w	80017ea <Button_Handle+0xa7e>
              if (HAL_GetTick() - startTick1 >= BUTTON_HOLD_CYCLE) 
 8001504:	f000 fce8 	bl	8001ed8 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2bf9      	cmp	r3, #249	@ 0xf9
 8001510:	d911      	bls.n	8001536 <Button_Handle+0x7ca>
                if (paramPtr1) 
 8001512:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001514:	2b00      	cmp	r3, #0
 8001516:	d00e      	beq.n	8001536 <Button_Handle+0x7ca>
                  *paramPtr1 = (*paramPtr1 < maxValue1) ? (*paramPtr1 + 1) : minValue1;
 8001518:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8001520:	429a      	cmp	r2, r3
 8001522:	d904      	bls.n	800152e <Button_Handle+0x7c2>
 8001524:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	3301      	adds	r3, #1
 800152a:	b2db      	uxtb	r3, r3
 800152c:	e001      	b.n	8001532 <Button_Handle+0x7c6>
 800152e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8001532:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001534:	7013      	strb	r3, [r2, #0]
              startTick1 = HAL_GetTick();
 8001536:	f000 fccf 	bl	8001ed8 <HAL_GetTick>
 800153a:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 800153c:	e155      	b.n	80017ea <Button_Handle+0xa7e>

            case 2: // BTN2: Decrement current value or scroll slots
            {
              // Pointer to the selected parameter, its maximum value, and minimum value
              uint8_t *paramPtr2 = NULL;
 800153e:	2300      	movs	r3, #0
 8001540:	63fb      	str	r3, [r7, #60]	@ 0x3c
              uint8_t maxValue2 = 0;    
 8001542:	2300      	movs	r3, #0
 8001544:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
              uint8_t minValue2 = 0;  
 8001548:	2300      	movs	r3, #0
 800154a:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

              // Determine the parameter to decrement based on the current selection
              switch (system_state.param_select)
 800154e:	4b2c      	ldr	r3, [pc, #176]	@ (8001600 <Button_Handle+0x894>)
 8001550:	785b      	ldrb	r3, [r3, #1]
 8001552:	2b09      	cmp	r3, #9
 8001554:	d864      	bhi.n	8001620 <Button_Handle+0x8b4>
 8001556:	a201      	add	r2, pc, #4	@ (adr r2, 800155c <Button_Handle+0x7f0>)
 8001558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800155c:	08001585 	.word	0x08001585
 8001560:	08001597 	.word	0x08001597
 8001564:	080015a9 	.word	0x080015a9
 8001568:	08001621 	.word	0x08001621
 800156c:	08001621 	.word	0x08001621
 8001570:	08001621 	.word	0x08001621
 8001574:	08001621 	.word	0x08001621
 8001578:	080015bb 	.word	0x080015bb
 800157c:	080015cd 	.word	0x080015cd
 8001580:	080015df 	.word	0x080015df
              {
                case SET_SECOND:  paramPtr2 = &system_param_data.second;  maxValue2 = 59; minValue2 = 0; break;
 8001584:	4b20      	ldr	r3, [pc, #128]	@ (8001608 <Button_Handle+0x89c>)
 8001586:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001588:	233b      	movs	r3, #59	@ 0x3b
 800158a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 800158e:	2300      	movs	r3, #0
 8001590:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 8001594:	e045      	b.n	8001622 <Button_Handle+0x8b6>
                case SET_MINUTE:  paramPtr2 = &system_param_data.minute;  maxValue2 = 59; minValue2 = 0; break;
 8001596:	4b1d      	ldr	r3, [pc, #116]	@ (800160c <Button_Handle+0x8a0>)
 8001598:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800159a:	233b      	movs	r3, #59	@ 0x3b
 800159c:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 80015a0:	2300      	movs	r3, #0
 80015a2:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 80015a6:	e03c      	b.n	8001622 <Button_Handle+0x8b6>
                case SET_HOUR:    paramPtr2 = &system_param_data.hour;    maxValue2 = 23; minValue2 = 0; break;
 80015a8:	4b19      	ldr	r3, [pc, #100]	@ (8001610 <Button_Handle+0x8a4>)
 80015aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80015ac:	2317      	movs	r3, #23
 80015ae:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 80015b2:	2300      	movs	r3, #0
 80015b4:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 80015b8:	e033      	b.n	8001622 <Button_Handle+0x8b6>
                case SET_DY_DT:   paramPtr2 = (uint8_t *)&system_param_data.dy_dt; maxValue2 = 2; minValue2 = 0; break;
 80015ba:	4b16      	ldr	r3, [pc, #88]	@ (8001614 <Button_Handle+0x8a8>)
 80015bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80015be:	2302      	movs	r3, #2
 80015c0:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 80015c4:	2300      	movs	r3, #0
 80015c6:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 80015ca:	e02a      	b.n	8001622 <Button_Handle+0x8b6>
                case SET_DOW_DOM: paramPtr2 = &system_param_data.dow_dom; maxValue2 = 31; minValue2 = 1; break;
 80015cc:	4b13      	ldr	r3, [pc, #76]	@ (800161c <Button_Handle+0x8b0>)
 80015ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80015d0:	231f      	movs	r3, #31
 80015d2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 80015d6:	2301      	movs	r3, #1
 80015d8:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 80015dc:	e021      	b.n	8001622 <Button_Handle+0x8b6>
                case SET_ON_OFF:  system_param_data.on_off = !system_param_data.on_off;                  break;
 80015de:	4b0a      	ldr	r3, [pc, #40]	@ (8001608 <Button_Handle+0x89c>)
 80015e0:	7a5b      	ldrb	r3, [r3, #9]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	bf14      	ite	ne
 80015e6:	2301      	movne	r3, #1
 80015e8:	2300      	moveq	r3, #0
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	f083 0301 	eor.w	r3, r3, #1
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	b2da      	uxtb	r2, r3
 80015f8:	4b03      	ldr	r3, [pc, #12]	@ (8001608 <Button_Handle+0x89c>)
 80015fa:	725a      	strb	r2, [r3, #9]
 80015fc:	e011      	b.n	8001622 <Button_Handle+0x8b6>
 80015fe:	bf00      	nop
 8001600:	200000fc 	.word	0x200000fc
 8001604:	2000010c 	.word	0x2000010c
 8001608:	20000100 	.word	0x20000100
 800160c:	20000101 	.word	0x20000101
 8001610:	20000102 	.word	0x20000102
 8001614:	20000107 	.word	0x20000107
 8001618:	20000104 	.word	0x20000104
 800161c:	20000108 	.word	0x20000108
                default: break;
 8001620:	bf00      	nop
              }

              if (system_state.param_select == SET_ON_OFF)
 8001622:	4b96      	ldr	r3, [pc, #600]	@ (800187c <Button_Handle+0xb10>)
 8001624:	785b      	ldrb	r3, [r3, #1]
 8001626:	2b09      	cmp	r3, #9
 8001628:	f000 80e1 	beq.w	80017ee <Button_Handle+0xa82>
              {
                break;
              }

              // Initialize the start tick for button 2 hold detection
              uint32_t startTick2 = 0;
 800162c:	2300      	movs	r3, #0
 800162e:	633b      	str	r3, [r7, #48]	@ 0x30

              // Check if the button is pressed or held
              if (button->press_flag) 
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	7b5b      	ldrb	r3, [r3, #13]
 8001634:	b2db      	uxtb	r3, r3
 8001636:	2b00      	cmp	r3, #0
 8001638:	d027      	beq.n	800168a <Button_Handle+0x91e>
              {
                // Check if the selected parameter is ON/OFF
                if (system_state.param_select == SET_ON_OFF) 
 800163a:	4b90      	ldr	r3, [pc, #576]	@ (800187c <Button_Handle+0xb10>)
 800163c:	785b      	ldrb	r3, [r3, #1]
 800163e:	2b09      	cmp	r3, #9
 8001640:	d10f      	bne.n	8001662 <Button_Handle+0x8f6>
                {
                  // Toggle the on/off state of the alarm
                  system_param_data.on_off = !system_param_data.on_off;
 8001642:	4b8f      	ldr	r3, [pc, #572]	@ (8001880 <Button_Handle+0xb14>)
 8001644:	7a5b      	ldrb	r3, [r3, #9]
 8001646:	2b00      	cmp	r3, #0
 8001648:	bf14      	ite	ne
 800164a:	2301      	movne	r3, #1
 800164c:	2300      	moveq	r3, #0
 800164e:	b2db      	uxtb	r3, r3
 8001650:	f083 0301 	eor.w	r3, r3, #1
 8001654:	b2db      	uxtb	r3, r3
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	b2da      	uxtb	r2, r3
 800165c:	4b88      	ldr	r3, [pc, #544]	@ (8001880 <Button_Handle+0xb14>)
 800165e:	725a      	strb	r2, [r3, #9]
                  // Update the start tick for the next hold cycle
                  startTick2 = HAL_GetTick();
                }
              } 

              break;
 8001660:	e0c7      	b.n	80017f2 <Button_Handle+0xa86>
                  if (paramPtr2) 
 8001662:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001664:	2b00      	cmp	r3, #0
 8001666:	f000 80c4 	beq.w	80017f2 <Button_Handle+0xa86>
                    *paramPtr2 = (*paramPtr2 > minValue2) ? (*paramPtr2 - 1) : maxValue2;
 800166a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 8001672:	429a      	cmp	r2, r3
 8001674:	d204      	bcs.n	8001680 <Button_Handle+0x914>
 8001676:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	3b01      	subs	r3, #1
 800167c:	b2db      	uxtb	r3, r3
 800167e:	e001      	b.n	8001684 <Button_Handle+0x918>
 8001680:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001684:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001686:	7013      	strb	r3, [r2, #0]
              break;
 8001688:	e0b3      	b.n	80017f2 <Button_Handle+0xa86>
              else if (button->hold_flag) 
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	7b9b      	ldrb	r3, [r3, #14]
 800168e:	b2db      	uxtb	r3, r3
 8001690:	2b00      	cmp	r3, #0
 8001692:	f000 80ae 	beq.w	80017f2 <Button_Handle+0xa86>
                if (HAL_GetTick() - startTick2 >= BUTTON_HOLD_CYCLE) 
 8001696:	f000 fc1f 	bl	8001ed8 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	2bf9      	cmp	r3, #249	@ 0xf9
 80016a2:	f240 80a6 	bls.w	80017f2 <Button_Handle+0xa86>
                  if (system_state.param_select == SET_ON_OFF) 
 80016a6:	4b75      	ldr	r3, [pc, #468]	@ (800187c <Button_Handle+0xb10>)
 80016a8:	785b      	ldrb	r3, [r3, #1]
 80016aa:	2b09      	cmp	r3, #9
 80016ac:	d10f      	bne.n	80016ce <Button_Handle+0x962>
                    system_param_data.on_off = !system_param_data.on_off;
 80016ae:	4b74      	ldr	r3, [pc, #464]	@ (8001880 <Button_Handle+0xb14>)
 80016b0:	7a5b      	ldrb	r3, [r3, #9]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	bf14      	ite	ne
 80016b6:	2301      	movne	r3, #1
 80016b8:	2300      	moveq	r3, #0
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	f083 0301 	eor.w	r3, r3, #1
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	b2da      	uxtb	r2, r3
 80016c8:	4b6d      	ldr	r3, [pc, #436]	@ (8001880 <Button_Handle+0xb14>)
 80016ca:	725a      	strb	r2, [r3, #9]
 80016cc:	e011      	b.n	80016f2 <Button_Handle+0x986>
                    if (paramPtr2) 
 80016ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d00e      	beq.n	80016f2 <Button_Handle+0x986>
                      *paramPtr2 = (*paramPtr2 > minValue2) ? (*paramPtr2 - 1) : maxValue2;
 80016d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 80016dc:	429a      	cmp	r2, r3
 80016de:	d204      	bcs.n	80016ea <Button_Handle+0x97e>
 80016e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	3b01      	subs	r3, #1
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	e001      	b.n	80016ee <Button_Handle+0x982>
 80016ea:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80016ee:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80016f0:	7013      	strb	r3, [r2, #0]
                  startTick2 = HAL_GetTick();
 80016f2:	f000 fbf1 	bl	8001ed8 <HAL_GetTick>
 80016f6:	6338      	str	r0, [r7, #48]	@ 0x30
              break;
 80016f8:	e07b      	b.n	80017f2 <Button_Handle+0xa86>
            }
          
          // Button 3: If pressed, move to the next field; if held, save the alarm and return to default mode
          case 3:
            // If the button is pressed, move to the next parameter field, wrapping around if necessary  
            if (button->press_flag)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	7b5b      	ldrb	r3, [r3, #13]
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	2b00      	cmp	r3, #0
 8001702:	d014      	beq.n	800172e <Button_Handle+0x9c2>
            {
              if (system_state.param_select == SET_HOUR)
 8001704:	4b5d      	ldr	r3, [pc, #372]	@ (800187c <Button_Handle+0xb10>)
 8001706:	785b      	ldrb	r3, [r3, #1]
 8001708:	2b02      	cmp	r3, #2
 800170a:	d103      	bne.n	8001714 <Button_Handle+0x9a8>
              {
                system_state.param_select = SET_DY_DT;
 800170c:	4b5b      	ldr	r3, [pc, #364]	@ (800187c <Button_Handle+0xb10>)
 800170e:	2207      	movs	r2, #7
 8001710:	705a      	strb	r2, [r3, #1]
              system_state.slot_free = (system_state.slot_free < 9) ? (system_state.slot_free + 1) : 0;

              button->latch = true;

            }
            break;
 8001712:	e070      	b.n	80017f6 <Button_Handle+0xa8a>
                system_state.param_select = (system_state.param_select < 9) ? (system_state.param_select + 1) : 0;
 8001714:	4b59      	ldr	r3, [pc, #356]	@ (800187c <Button_Handle+0xb10>)
 8001716:	785b      	ldrb	r3, [r3, #1]
 8001718:	2b08      	cmp	r3, #8
 800171a:	d804      	bhi.n	8001726 <Button_Handle+0x9ba>
 800171c:	4b57      	ldr	r3, [pc, #348]	@ (800187c <Button_Handle+0xb10>)
 800171e:	785b      	ldrb	r3, [r3, #1]
 8001720:	3301      	adds	r3, #1
 8001722:	b2db      	uxtb	r3, r3
 8001724:	e000      	b.n	8001728 <Button_Handle+0x9bc>
 8001726:	2300      	movs	r3, #0
 8001728:	4a54      	ldr	r2, [pc, #336]	@ (800187c <Button_Handle+0xb10>)
 800172a:	7053      	strb	r3, [r2, #1]
            break;
 800172c:	e063      	b.n	80017f6 <Button_Handle+0xa8a>
            else if (button->hold_flag && !button->latch) 
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	7b9b      	ldrb	r3, [r3, #14]
 8001732:	b2db      	uxtb	r3, r3
 8001734:	2b00      	cmp	r3, #0
 8001736:	d05e      	beq.n	80017f6 <Button_Handle+0xa8a>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	7bdb      	ldrb	r3, [r3, #15]
 800173c:	b2db      	uxtb	r3, r3
 800173e:	f083 0301 	eor.w	r3, r3, #1
 8001742:	b2db      	uxtb	r3, r3
 8001744:	2b00      	cmp	r3, #0
 8001746:	d056      	beq.n	80017f6 <Button_Handle+0xa8a>
              Alarm_Set
 8001748:	4b4d      	ldr	r3, [pc, #308]	@ (8001880 <Button_Handle+0xb14>)
 800174a:	7818      	ldrb	r0, [r3, #0]
 800174c:	4b4c      	ldr	r3, [pc, #304]	@ (8001880 <Button_Handle+0xb14>)
 800174e:	785c      	ldrb	r4, [r3, #1]
 8001750:	4b4b      	ldr	r3, [pc, #300]	@ (8001880 <Button_Handle+0xb14>)
 8001752:	789d      	ldrb	r5, [r3, #2]
 8001754:	4b4a      	ldr	r3, [pc, #296]	@ (8001880 <Button_Handle+0xb14>)
 8001756:	7a1e      	ldrb	r6, [r3, #8]
 8001758:	4b49      	ldr	r3, [pc, #292]	@ (8001880 <Button_Handle+0xb14>)
 800175a:	79db      	ldrb	r3, [r3, #7]
 800175c:	4a48      	ldr	r2, [pc, #288]	@ (8001880 <Button_Handle+0xb14>)
 800175e:	7a52      	ldrb	r2, [r2, #9]
 8001760:	4946      	ldr	r1, [pc, #280]	@ (800187c <Button_Handle+0xb10>)
 8001762:	7889      	ldrb	r1, [r1, #2]
 8001764:	9102      	str	r1, [sp, #8]
 8001766:	9201      	str	r2, [sp, #4]
 8001768:	9300      	str	r3, [sp, #0]
 800176a:	4633      	mov	r3, r6
 800176c:	462a      	mov	r2, r5
 800176e:	4621      	mov	r1, r4
 8001770:	f7ff f960 	bl	8000a34 <Alarm_Set>
              Alarm_Get(system_state.slot_free, &alarm_get_data[system_state.slot_free]);
 8001774:	4b41      	ldr	r3, [pc, #260]	@ (800187c <Button_Handle+0xb10>)
 8001776:	789a      	ldrb	r2, [r3, #2]
 8001778:	4b40      	ldr	r3, [pc, #256]	@ (800187c <Button_Handle+0xb10>)
 800177a:	789b      	ldrb	r3, [r3, #2]
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	4941      	ldr	r1, [pc, #260]	@ (8001884 <Button_Handle+0xb18>)
 8001780:	440b      	add	r3, r1
 8001782:	4619      	mov	r1, r3
 8001784:	4610      	mov	r0, r2
 8001786:	f7ff f9a5 	bl	8000ad4 <Alarm_Get>
              system_state.slot_free = (system_state.slot_free < 9) ? (system_state.slot_free + 1) : 0;
 800178a:	4b3c      	ldr	r3, [pc, #240]	@ (800187c <Button_Handle+0xb10>)
 800178c:	789b      	ldrb	r3, [r3, #2]
 800178e:	2b08      	cmp	r3, #8
 8001790:	d804      	bhi.n	800179c <Button_Handle+0xa30>
 8001792:	4b3a      	ldr	r3, [pc, #232]	@ (800187c <Button_Handle+0xb10>)
 8001794:	789b      	ldrb	r3, [r3, #2]
 8001796:	3301      	adds	r3, #1
 8001798:	b2db      	uxtb	r3, r3
 800179a:	e000      	b.n	800179e <Button_Handle+0xa32>
 800179c:	2300      	movs	r3, #0
 800179e:	4a37      	ldr	r2, [pc, #220]	@ (800187c <Button_Handle+0xb10>)
 80017a0:	7093      	strb	r3, [r2, #2]
              button->latch = true;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2201      	movs	r2, #1
 80017a6:	73da      	strb	r2, [r3, #15]
            break;
 80017a8:	e025      	b.n	80017f6 <Button_Handle+0xa8a>

          case 4: // BTN4: Go back to previous field
            if (button->press_flag) 
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	7b5b      	ldrb	r3, [r3, #13]
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d022      	beq.n	80017fa <Button_Handle+0xa8e>
            {
              if (system_state.param_select == SET_DY_DT)
 80017b4:	4b31      	ldr	r3, [pc, #196]	@ (800187c <Button_Handle+0xb10>)
 80017b6:	785b      	ldrb	r3, [r3, #1]
 80017b8:	2b07      	cmp	r3, #7
 80017ba:	d103      	bne.n	80017c4 <Button_Handle+0xa58>
              {
                system_state.param_select = SET_HOUR;
 80017bc:	4b2f      	ldr	r3, [pc, #188]	@ (800187c <Button_Handle+0xb10>)
 80017be:	2202      	movs	r2, #2
 80017c0:	705a      	strb	r2, [r3, #1]
              else
              {
                system_state.param_select = (system_state.param_select > 0) ? (system_state.param_select - 1) : 9;
              }                   
            }
            break;
 80017c2:	e01a      	b.n	80017fa <Button_Handle+0xa8e>
                system_state.param_select = (system_state.param_select > 0) ? (system_state.param_select - 1) : 9;
 80017c4:	4b2d      	ldr	r3, [pc, #180]	@ (800187c <Button_Handle+0xb10>)
 80017c6:	785b      	ldrb	r3, [r3, #1]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d004      	beq.n	80017d6 <Button_Handle+0xa6a>
 80017cc:	4b2b      	ldr	r3, [pc, #172]	@ (800187c <Button_Handle+0xb10>)
 80017ce:	785b      	ldrb	r3, [r3, #1]
 80017d0:	3b01      	subs	r3, #1
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	e000      	b.n	80017d8 <Button_Handle+0xa6c>
 80017d6:	2309      	movs	r3, #9
 80017d8:	4a28      	ldr	r2, [pc, #160]	@ (800187c <Button_Handle+0xb10>)
 80017da:	7053      	strb	r3, [r2, #1]
            break;
 80017dc:	e00d      	b.n	80017fa <Button_Handle+0xa8e>

          default:
            // Reserved for future use
            break;
 80017de:	bf00      	nop
 80017e0:	e134      	b.n	8001a4c <Button_Handle+0xce0>
            break;
 80017e2:	bf00      	nop
 80017e4:	e132      	b.n	8001a4c <Button_Handle+0xce0>
              break;
 80017e6:	bf00      	nop
 80017e8:	e130      	b.n	8001a4c <Button_Handle+0xce0>
            break;
 80017ea:	bf00      	nop
 80017ec:	e12e      	b.n	8001a4c <Button_Handle+0xce0>
                break;
 80017ee:	bf00      	nop
 80017f0:	e12c      	b.n	8001a4c <Button_Handle+0xce0>
              break;
 80017f2:	bf00      	nop
 80017f4:	e12a      	b.n	8001a4c <Button_Handle+0xce0>
            break;
 80017f6:	bf00      	nop
 80017f8:	e128      	b.n	8001a4c <Button_Handle+0xce0>
            break;
 80017fa:	bf00      	nop
        }
        break;
 80017fc:	e126      	b.n	8001a4c <Button_Handle+0xce0>

      case ALARM_REVIEW_MODE: 
        // Handle button actions in alarm review mode
        switch (button->index) 
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	799b      	ldrb	r3, [r3, #6]
 8001802:	2b04      	cmp	r3, #4
 8001804:	d858      	bhi.n	80018b8 <Button_Handle+0xb4c>
 8001806:	a201      	add	r2, pc, #4	@ (adr r2, 800180c <Button_Handle+0xaa0>)
 8001808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800180c:	08001821 	.word	0x08001821
 8001810:	0800186d 	.word	0x0800186d
 8001814:	08001889 	.word	0x08001889
 8001818:	08001899 	.word	0x08001899
 800181c:	080018a9 	.word	0x080018a9
        {
          // Button 0: If pressed, cycle through the time setup fields; if held, set the mode to default
          case 0:
            // If pressed, cycle through the time setup fields
            if (button->press_flag)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	7b5b      	ldrb	r3, [r3, #13]
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b00      	cmp	r3, #0
 8001828:	d00c      	beq.n	8001844 <Button_Handle+0xad8>
            {
              system_state.mode = (system_state.mode < 5) ? (system_state.mode + 1) : 0;
 800182a:	4b14      	ldr	r3, [pc, #80]	@ (800187c <Button_Handle+0xb10>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	2b04      	cmp	r3, #4
 8001830:	d804      	bhi.n	800183c <Button_Handle+0xad0>
 8001832:	4b12      	ldr	r3, [pc, #72]	@ (800187c <Button_Handle+0xb10>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	3301      	adds	r3, #1
 8001838:	b2db      	uxtb	r3, r3
 800183a:	e000      	b.n	800183e <Button_Handle+0xad2>
 800183c:	2300      	movs	r3, #0
 800183e:	4a0f      	ldr	r2, [pc, #60]	@ (800187c <Button_Handle+0xb10>)
 8001840:	7013      	strb	r3, [r2, #0]
            else if (button->hold_flag && !button->latch)
            {
              system_state.mode = DEFAULT_MODE; 
              button->latch = true;
            }
            break;
 8001842:	e03b      	b.n	80018bc <Button_Handle+0xb50>
            else if (button->hold_flag && !button->latch)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	7b9b      	ldrb	r3, [r3, #14]
 8001848:	b2db      	uxtb	r3, r3
 800184a:	2b00      	cmp	r3, #0
 800184c:	d036      	beq.n	80018bc <Button_Handle+0xb50>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	7bdb      	ldrb	r3, [r3, #15]
 8001852:	b2db      	uxtb	r3, r3
 8001854:	f083 0301 	eor.w	r3, r3, #1
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b00      	cmp	r3, #0
 800185c:	d02e      	beq.n	80018bc <Button_Handle+0xb50>
              system_state.mode = DEFAULT_MODE; 
 800185e:	4b07      	ldr	r3, [pc, #28]	@ (800187c <Button_Handle+0xb10>)
 8001860:	2200      	movs	r2, #0
 8001862:	701a      	strb	r2, [r3, #0]
              button->latch = true;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2201      	movs	r2, #1
 8001868:	73da      	strb	r2, [r3, #15]
            break;
 800186a:	e027      	b.n	80018bc <Button_Handle+0xb50>

          case 1:
            if      (button->press_flag)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	7b5b      	ldrb	r3, [r3, #13]
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b00      	cmp	r3, #0
 8001874:	d124      	bne.n	80018c0 <Button_Handle+0xb54>
            {

            }
            else if (button->hold_flag)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	7b9b      	ldrb	r3, [r3, #14]
            {

            }
            break;
 800187a:	e021      	b.n	80018c0 <Button_Handle+0xb54>
 800187c:	200000fc 	.word	0x200000fc
 8001880:	20000100 	.word	0x20000100
 8001884:	20000114 	.word	0x20000114

          case 2:
            if      (button->press_flag)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	7b5b      	ldrb	r3, [r3, #13]
 800188c:	b2db      	uxtb	r3, r3
 800188e:	2b00      	cmp	r3, #0
 8001890:	d118      	bne.n	80018c4 <Button_Handle+0xb58>
            {

            }
            else if (button->hold_flag)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	7b9b      	ldrb	r3, [r3, #14]
            {

            }
            break;
 8001896:	e015      	b.n	80018c4 <Button_Handle+0xb58>
          
          case 3:
            if      (button->press_flag)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	7b5b      	ldrb	r3, [r3, #13]
 800189c:	b2db      	uxtb	r3, r3
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d112      	bne.n	80018c8 <Button_Handle+0xb5c>
            {

            }
            else if (button->hold_flag)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	7b9b      	ldrb	r3, [r3, #14]
            {

            }
            break;
 80018a6:	e00f      	b.n	80018c8 <Button_Handle+0xb5c>

          case 4: 
            if      (button->press_flag)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	7b5b      	ldrb	r3, [r3, #13]
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d10c      	bne.n	80018cc <Button_Handle+0xb60>
            {

            }
            else if (button->hold_flag)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	7b9b      	ldrb	r3, [r3, #14]
            {

            }
            break;
 80018b6:	e009      	b.n	80018cc <Button_Handle+0xb60>

          default: 
            break;
 80018b8:	bf00      	nop
 80018ba:	e0c7      	b.n	8001a4c <Button_Handle+0xce0>
            break;
 80018bc:	bf00      	nop
 80018be:	e0c5      	b.n	8001a4c <Button_Handle+0xce0>
            break;
 80018c0:	bf00      	nop
 80018c2:	e0c3      	b.n	8001a4c <Button_Handle+0xce0>
            break;
 80018c4:	bf00      	nop
 80018c6:	e0c1      	b.n	8001a4c <Button_Handle+0xce0>
            break;
 80018c8:	bf00      	nop
 80018ca:	e0bf      	b.n	8001a4c <Button_Handle+0xce0>
            break;
 80018cc:	bf00      	nop
        }
        break;
 80018ce:	e0bd      	b.n	8001a4c <Button_Handle+0xce0>

      case ALARM_ACTIVE_MODE: 
        // Handle button actions in alarm active mode
        switch (button->index) 
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	799b      	ldrb	r3, [r3, #6]
 80018d4:	2b04      	cmp	r3, #4
 80018d6:	d853      	bhi.n	8001980 <Button_Handle+0xc14>
 80018d8:	a201      	add	r2, pc, #4	@ (adr r2, 80018e0 <Button_Handle+0xb74>)
 80018da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018de:	bf00      	nop
 80018e0:	080018f5 	.word	0x080018f5
 80018e4:	08001941 	.word	0x08001941
 80018e8:	08001951 	.word	0x08001951
 80018ec:	08001961 	.word	0x08001961
 80018f0:	08001971 	.word	0x08001971
        {
          // Button 0: If pressed, cycle through the time setup fields; if held, set the mode to default
          case 0:
            // If pressed, cycle through the time setup fields
            if (button->press_flag)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	7b5b      	ldrb	r3, [r3, #13]
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d00c      	beq.n	8001918 <Button_Handle+0xbac>
            {
              system_state.mode = (system_state.mode < 5) ? (system_state.mode + 1) : 0;
 80018fe:	4b57      	ldr	r3, [pc, #348]	@ (8001a5c <Button_Handle+0xcf0>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	2b04      	cmp	r3, #4
 8001904:	d804      	bhi.n	8001910 <Button_Handle+0xba4>
 8001906:	4b55      	ldr	r3, [pc, #340]	@ (8001a5c <Button_Handle+0xcf0>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	3301      	adds	r3, #1
 800190c:	b2db      	uxtb	r3, r3
 800190e:	e000      	b.n	8001912 <Button_Handle+0xba6>
 8001910:	2300      	movs	r3, #0
 8001912:	4a52      	ldr	r2, [pc, #328]	@ (8001a5c <Button_Handle+0xcf0>)
 8001914:	7013      	strb	r3, [r2, #0]
            else if (button->hold_flag && !button->latch)
            {
              system_state.mode = DEFAULT_MODE; 
              button->latch = true;
            }
            break;
 8001916:	e035      	b.n	8001984 <Button_Handle+0xc18>
            else if (button->hold_flag && !button->latch)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	7b9b      	ldrb	r3, [r3, #14]
 800191c:	b2db      	uxtb	r3, r3
 800191e:	2b00      	cmp	r3, #0
 8001920:	d030      	beq.n	8001984 <Button_Handle+0xc18>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	7bdb      	ldrb	r3, [r3, #15]
 8001926:	b2db      	uxtb	r3, r3
 8001928:	f083 0301 	eor.w	r3, r3, #1
 800192c:	b2db      	uxtb	r3, r3
 800192e:	2b00      	cmp	r3, #0
 8001930:	d028      	beq.n	8001984 <Button_Handle+0xc18>
              system_state.mode = DEFAULT_MODE; 
 8001932:	4b4a      	ldr	r3, [pc, #296]	@ (8001a5c <Button_Handle+0xcf0>)
 8001934:	2200      	movs	r2, #0
 8001936:	701a      	strb	r2, [r3, #0]
              button->latch = true;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2201      	movs	r2, #1
 800193c:	73da      	strb	r2, [r3, #15]
            break;
 800193e:	e021      	b.n	8001984 <Button_Handle+0xc18>

          case 1:
            if      (button->press_flag)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	7b5b      	ldrb	r3, [r3, #13]
 8001944:	b2db      	uxtb	r3, r3
 8001946:	2b00      	cmp	r3, #0
 8001948:	d11e      	bne.n	8001988 <Button_Handle+0xc1c>
            {

            }
            else if (button->hold_flag)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	7b9b      	ldrb	r3, [r3, #14]
            {

            }
            break;
 800194e:	e01b      	b.n	8001988 <Button_Handle+0xc1c>

          case 2:
            if      (button->press_flag)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	7b5b      	ldrb	r3, [r3, #13]
 8001954:	b2db      	uxtb	r3, r3
 8001956:	2b00      	cmp	r3, #0
 8001958:	d118      	bne.n	800198c <Button_Handle+0xc20>
            {

            }
            else if (button->hold_flag)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	7b9b      	ldrb	r3, [r3, #14]
            {

            }
            break;
 800195e:	e015      	b.n	800198c <Button_Handle+0xc20>
          
          case 3:
            if      (button->press_flag)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	7b5b      	ldrb	r3, [r3, #13]
 8001964:	b2db      	uxtb	r3, r3
 8001966:	2b00      	cmp	r3, #0
 8001968:	d112      	bne.n	8001990 <Button_Handle+0xc24>
            {

            }
            else if (button->hold_flag)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	7b9b      	ldrb	r3, [r3, #14]
            {

            }
            break;
 800196e:	e00f      	b.n	8001990 <Button_Handle+0xc24>

          case 4: 
            if      (button->press_flag)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	7b5b      	ldrb	r3, [r3, #13]
 8001974:	b2db      	uxtb	r3, r3
 8001976:	2b00      	cmp	r3, #0
 8001978:	d10c      	bne.n	8001994 <Button_Handle+0xc28>
            {

            }
            else if (button->hold_flag)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	7b9b      	ldrb	r3, [r3, #14]
            {

            }
            break;
 800197e:	e009      	b.n	8001994 <Button_Handle+0xc28>

          default: 
            break;
 8001980:	bf00      	nop
 8001982:	e063      	b.n	8001a4c <Button_Handle+0xce0>
            break;
 8001984:	bf00      	nop
 8001986:	e061      	b.n	8001a4c <Button_Handle+0xce0>
            break;
 8001988:	bf00      	nop
 800198a:	e05f      	b.n	8001a4c <Button_Handle+0xce0>
            break;
 800198c:	bf00      	nop
 800198e:	e05d      	b.n	8001a4c <Button_Handle+0xce0>
            break;
 8001990:	bf00      	nop
 8001992:	e05b      	b.n	8001a4c <Button_Handle+0xce0>
            break;
 8001994:	bf00      	nop
        }
        break;
 8001996:	e059      	b.n	8001a4c <Button_Handle+0xce0>

      case SYSTEM_OPTIONS_MODE: 
        // Handle button actions in system options mode
        switch (button->index) 
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	799b      	ldrb	r3, [r3, #6]
 800199c:	2b04      	cmp	r3, #4
 800199e:	d848      	bhi.n	8001a32 <Button_Handle+0xcc6>
 80019a0:	a201      	add	r2, pc, #4	@ (adr r2, 80019a8 <Button_Handle+0xc3c>)
 80019a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019a6:	bf00      	nop
 80019a8:	080019bd 	.word	0x080019bd
 80019ac:	080019f3 	.word	0x080019f3
 80019b0:	08001a03 	.word	0x08001a03
 80019b4:	08001a13 	.word	0x08001a13
 80019b8:	08001a23 	.word	0x08001a23
        {
          // Button 0: If pressed, cycle through the time setup fields; if held, set the mode to default
          case 0:
            // If pressed, cycle through the time setup fields
            if      (button->press_flag)  system_state.mode = (system_state.mode < 5) ? (system_state.mode + 1) : 0;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	7b5b      	ldrb	r3, [r3, #13]
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d00c      	beq.n	80019e0 <Button_Handle+0xc74>
 80019c6:	4b25      	ldr	r3, [pc, #148]	@ (8001a5c <Button_Handle+0xcf0>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b04      	cmp	r3, #4
 80019cc:	d804      	bhi.n	80019d8 <Button_Handle+0xc6c>
 80019ce:	4b23      	ldr	r3, [pc, #140]	@ (8001a5c <Button_Handle+0xcf0>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	3301      	adds	r3, #1
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	e000      	b.n	80019da <Button_Handle+0xc6e>
 80019d8:	2300      	movs	r3, #0
 80019da:	4a20      	ldr	r2, [pc, #128]	@ (8001a5c <Button_Handle+0xcf0>)
 80019dc:	7013      	strb	r3, [r2, #0]

            // If held, set the mode to default
            else if (button->hold_flag)   system_state.mode = DEFAULT_MODE;
            break;
 80019de:	e02a      	b.n	8001a36 <Button_Handle+0xcca>
            else if (button->hold_flag)   system_state.mode = DEFAULT_MODE;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	7b9b      	ldrb	r3, [r3, #14]
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d025      	beq.n	8001a36 <Button_Handle+0xcca>
 80019ea:	4b1c      	ldr	r3, [pc, #112]	@ (8001a5c <Button_Handle+0xcf0>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	701a      	strb	r2, [r3, #0]
            break;
 80019f0:	e021      	b.n	8001a36 <Button_Handle+0xcca>

          case 1:
            if      (button->press_flag)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	7b5b      	ldrb	r3, [r3, #13]
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d11e      	bne.n	8001a3a <Button_Handle+0xcce>
            {

            }
            else if (button->hold_flag)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	7b9b      	ldrb	r3, [r3, #14]
            {

            }
            break;
 8001a00:	e01b      	b.n	8001a3a <Button_Handle+0xcce>

          case 2:
            if      (button->press_flag)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	7b5b      	ldrb	r3, [r3, #13]
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d118      	bne.n	8001a3e <Button_Handle+0xcd2>
            {

            }
            else if (button->hold_flag)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	7b9b      	ldrb	r3, [r3, #14]
            {

            }
            break;
 8001a10:	e015      	b.n	8001a3e <Button_Handle+0xcd2>
          
          case 3:
            if      (button->press_flag)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	7b5b      	ldrb	r3, [r3, #13]
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d112      	bne.n	8001a42 <Button_Handle+0xcd6>
            {

            }
            else if (button->hold_flag)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	7b9b      	ldrb	r3, [r3, #14]
            {

            }
            break;
 8001a20:	e00f      	b.n	8001a42 <Button_Handle+0xcd6>

          case 4: 
            if      (button->press_flag)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	7b5b      	ldrb	r3, [r3, #13]
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d10c      	bne.n	8001a46 <Button_Handle+0xcda>
            {

            }
            else if (button->hold_flag)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	7b9b      	ldrb	r3, [r3, #14]
            {

            }
            break;
 8001a30:	e009      	b.n	8001a46 <Button_Handle+0xcda>

          default: 
            break;
 8001a32:	bf00      	nop
 8001a34:	e00a      	b.n	8001a4c <Button_Handle+0xce0>
            break;
 8001a36:	bf00      	nop
 8001a38:	e008      	b.n	8001a4c <Button_Handle+0xce0>
            break;
 8001a3a:	bf00      	nop
 8001a3c:	e006      	b.n	8001a4c <Button_Handle+0xce0>
            break;
 8001a3e:	bf00      	nop
 8001a40:	e004      	b.n	8001a4c <Button_Handle+0xce0>
            break;
 8001a42:	bf00      	nop
 8001a44:	e002      	b.n	8001a4c <Button_Handle+0xce0>
            break;
 8001a46:	bf00      	nop
        }
        break;
 8001a48:	e000      	b.n	8001a4c <Button_Handle+0xce0>

      default:
        // Handle other button presses in default mode
        break;
 8001a4a:	bf00      	nop
    }
  }

  button->press_flag = false;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	735a      	strb	r2, [r3, #13]
}
 8001a52:	bf00      	nop
 8001a54:	375c      	adds	r7, #92	@ 0x5c
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	200000fc 	.word	0x200000fc

08001a60 <HAL_GPIO_EXTI_Callback>:
  * @brief  Callback function to handle GPIO interrupts.
  * @param  GPIO_Pin: The pin number of the GPIO that triggered the interrupt.
  * @retval None
*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8001a6a:	88fb      	ldrh	r3, [r7, #6]
 8001a6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001a70:	d02a      	beq.n	8001ac8 <HAL_GPIO_EXTI_Callback+0x68>
 8001a72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001a76:	dc2f      	bgt.n	8001ad8 <HAL_GPIO_EXTI_Callback+0x78>
 8001a78:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001a7c:	d020      	beq.n	8001ac0 <HAL_GPIO_EXTI_Callback+0x60>
 8001a7e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001a82:	dc29      	bgt.n	8001ad8 <HAL_GPIO_EXTI_Callback+0x78>
 8001a84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001a88:	d016      	beq.n	8001ab8 <HAL_GPIO_EXTI_Callback+0x58>
 8001a8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001a8e:	dc23      	bgt.n	8001ad8 <HAL_GPIO_EXTI_Callback+0x78>
 8001a90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a94:	d00c      	beq.n	8001ab0 <HAL_GPIO_EXTI_Callback+0x50>
 8001a96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a9a:	dc1d      	bgt.n	8001ad8 <HAL_GPIO_EXTI_Callback+0x78>
 8001a9c:	2b20      	cmp	r3, #32
 8001a9e:	d003      	beq.n	8001aa8 <HAL_GPIO_EXTI_Callback+0x48>
 8001aa0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001aa4:	d014      	beq.n	8001ad0 <HAL_GPIO_EXTI_Callback+0x70>
      button4.int_flag = true;
      break;  

    default:
      // Handle other GPIO interrupts if necessary
      break;
 8001aa6:	e017      	b.n	8001ad8 <HAL_GPIO_EXTI_Callback+0x78>
      rtc_int_flag = true;
 8001aa8:	4b0e      	ldr	r3, [pc, #56]	@ (8001ae4 <HAL_GPIO_EXTI_Callback+0x84>)
 8001aaa:	2201      	movs	r2, #1
 8001aac:	701a      	strb	r2, [r3, #0]
      break;
 8001aae:	e014      	b.n	8001ada <HAL_GPIO_EXTI_Callback+0x7a>
      button0.int_flag = true;
 8001ab0:	4b0d      	ldr	r3, [pc, #52]	@ (8001ae8 <HAL_GPIO_EXTI_Callback+0x88>)
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	731a      	strb	r2, [r3, #12]
      break;
 8001ab6:	e010      	b.n	8001ada <HAL_GPIO_EXTI_Callback+0x7a>
      button1.int_flag = true;
 8001ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8001aec <HAL_GPIO_EXTI_Callback+0x8c>)
 8001aba:	2201      	movs	r2, #1
 8001abc:	731a      	strb	r2, [r3, #12]
      break;
 8001abe:	e00c      	b.n	8001ada <HAL_GPIO_EXTI_Callback+0x7a>
      button2.int_flag = true;
 8001ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8001af0 <HAL_GPIO_EXTI_Callback+0x90>)
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	731a      	strb	r2, [r3, #12]
      break;
 8001ac6:	e008      	b.n	8001ada <HAL_GPIO_EXTI_Callback+0x7a>
      button3.int_flag = true;
 8001ac8:	4b0a      	ldr	r3, [pc, #40]	@ (8001af4 <HAL_GPIO_EXTI_Callback+0x94>)
 8001aca:	2201      	movs	r2, #1
 8001acc:	731a      	strb	r2, [r3, #12]
      break;  
 8001ace:	e004      	b.n	8001ada <HAL_GPIO_EXTI_Callback+0x7a>
      button4.int_flag = true;
 8001ad0:	4b09      	ldr	r3, [pc, #36]	@ (8001af8 <HAL_GPIO_EXTI_Callback+0x98>)
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	731a      	strb	r2, [r3, #12]
      break;  
 8001ad6:	e000      	b.n	8001ada <HAL_GPIO_EXTI_Callback+0x7a>
      break;
 8001ad8:	bf00      	nop
  }
}
 8001ada:	bf00      	nop
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr
 8001ae4:	20000140 	.word	0x20000140
 8001ae8:	20000000 	.word	0x20000000
 8001aec:	20000010 	.word	0x20000010
 8001af0:	20000020 	.word	0x20000020
 8001af4:	20000030 	.word	0x20000030
 8001af8:	20000040 	.word	0x20000040

08001afc <HAL_UART_RxCpltCallback>:
  * @brief  Callback function to handle UART interrupts.
  * @param  huart: Pointer to the UART handle.
  * @retval None
*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  // Verify the UART instance to ensure the callback is for USART1
  // If the UART instance is USART1, store the received data into the uart_rx_data array
  if(huart->Instance == USART1)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a09      	ldr	r2, [pc, #36]	@ (8001b30 <HAL_UART_RxCpltCallback+0x34>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d10a      	bne.n	8001b24 <HAL_UART_RxCpltCallback+0x28>
  {
    // Store the received data into the uart_rx_data array
    uart_rx_hour = uart_rx_data[0];
 8001b0e:	4b09      	ldr	r3, [pc, #36]	@ (8001b34 <HAL_UART_RxCpltCallback+0x38>)
 8001b10:	781a      	ldrb	r2, [r3, #0]
 8001b12:	4b09      	ldr	r3, [pc, #36]	@ (8001b38 <HAL_UART_RxCpltCallback+0x3c>)
 8001b14:	701a      	strb	r2, [r3, #0]
    uart_rx_minute = uart_rx_data[1];
 8001b16:	4b07      	ldr	r3, [pc, #28]	@ (8001b34 <HAL_UART_RxCpltCallback+0x38>)
 8001b18:	785a      	ldrb	r2, [r3, #1]
 8001b1a:	4b08      	ldr	r3, [pc, #32]	@ (8001b3c <HAL_UART_RxCpltCallback+0x40>)
 8001b1c:	701a      	strb	r2, [r3, #0]

    // Set the UART receive flag
    uart_rx_flag = 1;
 8001b1e:	4b08      	ldr	r3, [pc, #32]	@ (8001b40 <HAL_UART_RxCpltCallback+0x44>)
 8001b20:	2201      	movs	r2, #1
 8001b22:	701a      	strb	r2, [r3, #0]
  }
}
 8001b24:	bf00      	nop
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bc80      	pop	{r7}
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	40013800 	.word	0x40013800
 8001b34:	20000150 	.word	0x20000150
 8001b38:	20000152 	.word	0x20000152
 8001b3c:	20000153 	.word	0x20000153
 8001b40:	2000014e 	.word	0x2000014e

08001b44 <HAL_ADC_ConvCpltCallback>:
  * @brief  Callback function to handle ADC conversion complete interrupts.
  * @param  hadc: Pointer to the ADC handle.
  * @retval None
*/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
	// Verify the ADC instance to ensure the callback is for ADC1
  // If the ADC instance is ADC1, get the ADC value and calculate the battery percentage
  if (hadc == &hadc1)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4a10      	ldr	r2, [pc, #64]	@ (8001b90 <HAL_ADC_ConvCpltCallback+0x4c>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d119      	bne.n	8001b88 <HAL_ADC_ConvCpltCallback+0x44>
	{
    // Get the ADC value
    adc_data = HAL_ADC_GetValue(&hadc1);
 8001b54:	480e      	ldr	r0, [pc, #56]	@ (8001b90 <HAL_ADC_ConvCpltCallback+0x4c>)
 8001b56:	f000 fb7b 	bl	8002250 <HAL_ADC_GetValue>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001b94 <HAL_ADC_ConvCpltCallback+0x50>)
 8001b60:	801a      	strh	r2, [r3, #0]

    // Set the ADC valid flag
    adc_valid_flag = 1;
 8001b62:	4b0d      	ldr	r3, [pc, #52]	@ (8001b98 <HAL_ADC_ConvCpltCallback+0x54>)
 8001b64:	2201      	movs	r2, #1
 8001b66:	701a      	strb	r2, [r3, #0]

    // Calculate the battery percentage
    battery_percentage = adc_data * 100 / 4095;
 8001b68:	4b0a      	ldr	r3, [pc, #40]	@ (8001b94 <HAL_ADC_ConvCpltCallback+0x50>)
 8001b6a:	881b      	ldrh	r3, [r3, #0]
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	2364      	movs	r3, #100	@ 0x64
 8001b70:	fb02 f303 	mul.w	r3, r2, r3
 8001b74:	4a09      	ldr	r2, [pc, #36]	@ (8001b9c <HAL_ADC_ConvCpltCallback+0x58>)
 8001b76:	fb82 1203 	smull	r1, r2, r2, r3
 8001b7a:	441a      	add	r2, r3
 8001b7c:	12d2      	asrs	r2, r2, #11
 8001b7e:	17db      	asrs	r3, r3, #31
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	b29a      	uxth	r2, r3
 8001b84:	4b06      	ldr	r3, [pc, #24]	@ (8001ba0 <HAL_ADC_ConvCpltCallback+0x5c>)
 8001b86:	801a      	strh	r2, [r3, #0]
	}
}
 8001b88:	bf00      	nop
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	20000078 	.word	0x20000078
 8001b94:	2000014a 	.word	0x2000014a
 8001b98:	20000149 	.word	0x20000149
 8001b9c:	80080081 	.word	0x80080081
 8001ba0:	2000014c 	.word	0x2000014c

08001ba4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ba8:	b672      	cpsid	i
}
 8001baa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bac:	bf00      	nop
 8001bae:	e7fd      	b.n	8001bac <Error_Handler+0x8>

08001bb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001bb6:	4b15      	ldr	r3, [pc, #84]	@ (8001c0c <HAL_MspInit+0x5c>)
 8001bb8:	699b      	ldr	r3, [r3, #24]
 8001bba:	4a14      	ldr	r2, [pc, #80]	@ (8001c0c <HAL_MspInit+0x5c>)
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	6193      	str	r3, [r2, #24]
 8001bc2:	4b12      	ldr	r3, [pc, #72]	@ (8001c0c <HAL_MspInit+0x5c>)
 8001bc4:	699b      	ldr	r3, [r3, #24]
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	60bb      	str	r3, [r7, #8]
 8001bcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bce:	4b0f      	ldr	r3, [pc, #60]	@ (8001c0c <HAL_MspInit+0x5c>)
 8001bd0:	69db      	ldr	r3, [r3, #28]
 8001bd2:	4a0e      	ldr	r2, [pc, #56]	@ (8001c0c <HAL_MspInit+0x5c>)
 8001bd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bd8:	61d3      	str	r3, [r2, #28]
 8001bda:	4b0c      	ldr	r3, [pc, #48]	@ (8001c0c <HAL_MspInit+0x5c>)
 8001bdc:	69db      	ldr	r3, [r3, #28]
 8001bde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001be2:	607b      	str	r3, [r7, #4]
 8001be4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001be6:	4b0a      	ldr	r3, [pc, #40]	@ (8001c10 <HAL_MspInit+0x60>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	4a04      	ldr	r2, [pc, #16]	@ (8001c10 <HAL_MspInit+0x60>)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c02:	bf00      	nop
 8001c04:	3714      	adds	r7, #20
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bc80      	pop	{r7}
 8001c0a:	4770      	bx	lr
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	40010000 	.word	0x40010000

08001c14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c18:	bf00      	nop
 8001c1a:	e7fd      	b.n	8001c18 <NMI_Handler+0x4>

08001c1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c20:	bf00      	nop
 8001c22:	e7fd      	b.n	8001c20 <HardFault_Handler+0x4>

08001c24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c28:	bf00      	nop
 8001c2a:	e7fd      	b.n	8001c28 <MemManage_Handler+0x4>

08001c2c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c30:	bf00      	nop
 8001c32:	e7fd      	b.n	8001c30 <BusFault_Handler+0x4>

08001c34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c38:	bf00      	nop
 8001c3a:	e7fd      	b.n	8001c38 <UsageFault_Handler+0x4>

08001c3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c40:	bf00      	nop
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bc80      	pop	{r7}
 8001c46:	4770      	bx	lr

08001c48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c4c:	bf00      	nop
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr

08001c54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c58:	bf00      	nop
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bc80      	pop	{r7}
 8001c5e:	4770      	bx	lr

08001c60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c64:	f000 f926 	bl	8001eb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c68:	bf00      	nop
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001c70:	4802      	ldr	r0, [pc, #8]	@ (8001c7c <ADC1_2_IRQHandler+0x10>)
 8001c72:	f000 faf9 	bl	8002268 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	20000078 	.word	0x20000078

08001c80 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RTC_IN5_Pin);
 8001c84:	2020      	movs	r0, #32
 8001c86:	f001 f8af 	bl	8002de8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON4_IN8_Pin);
 8001c8a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001c8e:	f001 f8ab 	bl	8002de8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
	...

08001c98 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c9c:	4802      	ldr	r0, [pc, #8]	@ (8001ca8 <USART1_IRQHandler+0x10>)
 8001c9e:	f002 fe5d 	bl	800495c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ca2:	bf00      	nop
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20000154 	.word	0x20000154

08001cac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON0_IN12_Pin);
 8001cb0:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001cb4:	f001 f898 	bl	8002de8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON1_IN13_Pin);
 8001cb8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001cbc:	f001 f894 	bl	8002de8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON2_IN14_Pin);
 8001cc0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001cc4:	f001 f890 	bl	8002de8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON3_IN15_Pin);
 8001cc8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001ccc:	f001 f88c 	bl	8002de8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001cd0:	bf00      	nop
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cd8:	bf00      	nop
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bc80      	pop	{r7}
 8001cde:	4770      	bx	lr

08001ce0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ce4:	4b11      	ldr	r3, [pc, #68]	@ (8001d2c <MX_USART1_UART_Init+0x4c>)
 8001ce6:	4a12      	ldr	r2, [pc, #72]	@ (8001d30 <MX_USART1_UART_Init+0x50>)
 8001ce8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001cea:	4b10      	ldr	r3, [pc, #64]	@ (8001d2c <MX_USART1_UART_Init+0x4c>)
 8001cec:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001cf0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cf2:	4b0e      	ldr	r3, [pc, #56]	@ (8001d2c <MX_USART1_UART_Init+0x4c>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8001d2c <MX_USART1_UART_Init+0x4c>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cfe:	4b0b      	ldr	r3, [pc, #44]	@ (8001d2c <MX_USART1_UART_Init+0x4c>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d04:	4b09      	ldr	r3, [pc, #36]	@ (8001d2c <MX_USART1_UART_Init+0x4c>)
 8001d06:	220c      	movs	r2, #12
 8001d08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d0a:	4b08      	ldr	r3, [pc, #32]	@ (8001d2c <MX_USART1_UART_Init+0x4c>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d10:	4b06      	ldr	r3, [pc, #24]	@ (8001d2c <MX_USART1_UART_Init+0x4c>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d16:	4805      	ldr	r0, [pc, #20]	@ (8001d2c <MX_USART1_UART_Init+0x4c>)
 8001d18:	f002 fdaa 	bl	8004870 <HAL_UART_Init>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d22:	f7ff ff3f 	bl	8001ba4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	20000154 	.word	0x20000154
 8001d30:	40013800 	.word	0x40013800

08001d34 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b088      	sub	sp, #32
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d3c:	f107 0310 	add.w	r3, r7, #16
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]
 8001d46:	609a      	str	r2, [r3, #8]
 8001d48:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a20      	ldr	r2, [pc, #128]	@ (8001dd0 <HAL_UART_MspInit+0x9c>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d139      	bne.n	8001dc8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d54:	4b1f      	ldr	r3, [pc, #124]	@ (8001dd4 <HAL_UART_MspInit+0xa0>)
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	4a1e      	ldr	r2, [pc, #120]	@ (8001dd4 <HAL_UART_MspInit+0xa0>)
 8001d5a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d5e:	6193      	str	r3, [r2, #24]
 8001d60:	4b1c      	ldr	r3, [pc, #112]	@ (8001dd4 <HAL_UART_MspInit+0xa0>)
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d68:	60fb      	str	r3, [r7, #12]
 8001d6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6c:	4b19      	ldr	r3, [pc, #100]	@ (8001dd4 <HAL_UART_MspInit+0xa0>)
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	4a18      	ldr	r2, [pc, #96]	@ (8001dd4 <HAL_UART_MspInit+0xa0>)
 8001d72:	f043 0304 	orr.w	r3, r3, #4
 8001d76:	6193      	str	r3, [r2, #24]
 8001d78:	4b16      	ldr	r3, [pc, #88]	@ (8001dd4 <HAL_UART_MspInit+0xa0>)
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	f003 0304 	and.w	r3, r3, #4
 8001d80:	60bb      	str	r3, [r7, #8]
 8001d82:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d88:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d92:	f107 0310 	add.w	r3, r7, #16
 8001d96:	4619      	mov	r1, r3
 8001d98:	480f      	ldr	r0, [pc, #60]	@ (8001dd8 <HAL_UART_MspInit+0xa4>)
 8001d9a:	f000 fe89 	bl	8002ab0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001da2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001da4:	2300      	movs	r3, #0
 8001da6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dac:	f107 0310 	add.w	r3, r7, #16
 8001db0:	4619      	mov	r1, r3
 8001db2:	4809      	ldr	r0, [pc, #36]	@ (8001dd8 <HAL_UART_MspInit+0xa4>)
 8001db4:	f000 fe7c 	bl	8002ab0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001db8:	2200      	movs	r2, #0
 8001dba:	2100      	movs	r1, #0
 8001dbc:	2025      	movs	r0, #37	@ 0x25
 8001dbe:	f000 fd8e 	bl	80028de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001dc2:	2025      	movs	r0, #37	@ 0x25
 8001dc4:	f000 fda7 	bl	8002916 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001dc8:	bf00      	nop
 8001dca:	3720      	adds	r7, #32
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40013800 	.word	0x40013800
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	40010800 	.word	0x40010800

08001ddc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ddc:	f7ff ff7a 	bl	8001cd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001de0:	480b      	ldr	r0, [pc, #44]	@ (8001e10 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001de2:	490c      	ldr	r1, [pc, #48]	@ (8001e14 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001de4:	4a0c      	ldr	r2, [pc, #48]	@ (8001e18 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001de6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001de8:	e002      	b.n	8001df0 <LoopCopyDataInit>

08001dea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dee:	3304      	adds	r3, #4

08001df0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001df0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001df2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001df4:	d3f9      	bcc.n	8001dea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001df6:	4a09      	ldr	r2, [pc, #36]	@ (8001e1c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001df8:	4c09      	ldr	r4, [pc, #36]	@ (8001e20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001dfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dfc:	e001      	b.n	8001e02 <LoopFillZerobss>

08001dfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e00:	3204      	adds	r2, #4

08001e02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e04:	d3fb      	bcc.n	8001dfe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e06:	f003 fac3 	bl	8005390 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e0a:	f7fe faf1 	bl	80003f0 <main>
  bx lr
 8001e0e:	4770      	bx	lr
  ldr r0, =_sdata
 8001e10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e14:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001e18:	08005424 	.word	0x08005424
  ldr r2, =_sbss
 8001e1c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001e20:	200001a0 	.word	0x200001a0

08001e24 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e24:	e7fe      	b.n	8001e24 <CAN1_RX1_IRQHandler>
	...

08001e28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e2c:	4b08      	ldr	r3, [pc, #32]	@ (8001e50 <HAL_Init+0x28>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a07      	ldr	r2, [pc, #28]	@ (8001e50 <HAL_Init+0x28>)
 8001e32:	f043 0310 	orr.w	r3, r3, #16
 8001e36:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e38:	2003      	movs	r0, #3
 8001e3a:	f000 fd45 	bl	80028c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e3e:	200f      	movs	r0, #15
 8001e40:	f000 f808 	bl	8001e54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e44:	f7ff feb4 	bl	8001bb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	40022000 	.word	0x40022000

08001e54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e5c:	4b12      	ldr	r3, [pc, #72]	@ (8001ea8 <HAL_InitTick+0x54>)
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	4b12      	ldr	r3, [pc, #72]	@ (8001eac <HAL_InitTick+0x58>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	4619      	mov	r1, r3
 8001e66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e72:	4618      	mov	r0, r3
 8001e74:	f000 fd5d 	bl	8002932 <HAL_SYSTICK_Config>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e00e      	b.n	8001ea0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2b0f      	cmp	r3, #15
 8001e86:	d80a      	bhi.n	8001e9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e88:	2200      	movs	r2, #0
 8001e8a:	6879      	ldr	r1, [r7, #4]
 8001e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e90:	f000 fd25 	bl	80028de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e94:	4a06      	ldr	r2, [pc, #24]	@ (8001eb0 <HAL_InitTick+0x5c>)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	e000      	b.n	8001ea0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3708      	adds	r7, #8
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	20000050 	.word	0x20000050
 8001eac:	20000058 	.word	0x20000058
 8001eb0:	20000054 	.word	0x20000054

08001eb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001eb8:	4b05      	ldr	r3, [pc, #20]	@ (8001ed0 <HAL_IncTick+0x1c>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	4b05      	ldr	r3, [pc, #20]	@ (8001ed4 <HAL_IncTick+0x20>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	4a03      	ldr	r2, [pc, #12]	@ (8001ed4 <HAL_IncTick+0x20>)
 8001ec6:	6013      	str	r3, [r2, #0]
}
 8001ec8:	bf00      	nop
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bc80      	pop	{r7}
 8001ece:	4770      	bx	lr
 8001ed0:	20000058 	.word	0x20000058
 8001ed4:	2000019c 	.word	0x2000019c

08001ed8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  return uwTick;
 8001edc:	4b02      	ldr	r3, [pc, #8]	@ (8001ee8 <HAL_GetTick+0x10>)
 8001ede:	681b      	ldr	r3, [r3, #0]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bc80      	pop	{r7}
 8001ee6:	4770      	bx	lr
 8001ee8:	2000019c 	.word	0x2000019c

08001eec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ef4:	f7ff fff0 	bl	8001ed8 <HAL_GetTick>
 8001ef8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f04:	d005      	beq.n	8001f12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f06:	4b0a      	ldr	r3, [pc, #40]	@ (8001f30 <HAL_Delay+0x44>)
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	4413      	add	r3, r2
 8001f10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f12:	bf00      	nop
 8001f14:	f7ff ffe0 	bl	8001ed8 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d8f7      	bhi.n	8001f14 <HAL_Delay+0x28>
  {
  }
}
 8001f24:	bf00      	nop
 8001f26:	bf00      	nop
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	20000058 	.word	0x20000058

08001f34 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001f40:	2300      	movs	r3, #0
 8001f42:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001f44:	2300      	movs	r3, #0
 8001f46:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d101      	bne.n	8001f56 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e0be      	b.n	80020d4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d109      	bne.n	8001f78 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f7fe f928 	bl	80001c8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f000 fb8f 	bl	800269c <ADC_ConversionStop_Disable>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f86:	f003 0310 	and.w	r3, r3, #16
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	f040 8099 	bne.w	80020c2 <HAL_ADC_Init+0x18e>
 8001f90:	7dfb      	ldrb	r3, [r7, #23]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f040 8095 	bne.w	80020c2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f9c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001fa0:	f023 0302 	bic.w	r3, r3, #2
 8001fa4:	f043 0202 	orr.w	r2, r3, #2
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001fb4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	7b1b      	ldrb	r3, [r3, #12]
 8001fba:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001fbc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001fbe:	68ba      	ldr	r2, [r7, #8]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001fcc:	d003      	beq.n	8001fd6 <HAL_ADC_Init+0xa2>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d102      	bne.n	8001fdc <HAL_ADC_Init+0xa8>
 8001fd6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fda:	e000      	b.n	8001fde <HAL_ADC_Init+0xaa>
 8001fdc:	2300      	movs	r3, #0
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	7d1b      	ldrb	r3, [r3, #20]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d119      	bne.n	8002020 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	7b1b      	ldrb	r3, [r3, #12]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d109      	bne.n	8002008 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	035a      	lsls	r2, r3, #13
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002004:	613b      	str	r3, [r7, #16]
 8002006:	e00b      	b.n	8002020 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800200c:	f043 0220 	orr.w	r2, r3, #32
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002018:	f043 0201 	orr.w	r2, r3, #1
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	430a      	orrs	r2, r1
 8002032:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	689a      	ldr	r2, [r3, #8]
 800203a:	4b28      	ldr	r3, [pc, #160]	@ (80020dc <HAL_ADC_Init+0x1a8>)
 800203c:	4013      	ands	r3, r2
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	6812      	ldr	r2, [r2, #0]
 8002042:	68b9      	ldr	r1, [r7, #8]
 8002044:	430b      	orrs	r3, r1
 8002046:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002050:	d003      	beq.n	800205a <HAL_ADC_Init+0x126>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d104      	bne.n	8002064 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	3b01      	subs	r3, #1
 8002060:	051b      	lsls	r3, r3, #20
 8002062:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800206a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	430a      	orrs	r2, r1
 8002076:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	689a      	ldr	r2, [r3, #8]
 800207e:	4b18      	ldr	r3, [pc, #96]	@ (80020e0 <HAL_ADC_Init+0x1ac>)
 8002080:	4013      	ands	r3, r2
 8002082:	68ba      	ldr	r2, [r7, #8]
 8002084:	429a      	cmp	r2, r3
 8002086:	d10b      	bne.n	80020a0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002092:	f023 0303 	bic.w	r3, r3, #3
 8002096:	f043 0201 	orr.w	r2, r3, #1
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800209e:	e018      	b.n	80020d2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020a4:	f023 0312 	bic.w	r3, r3, #18
 80020a8:	f043 0210 	orr.w	r2, r3, #16
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020b4:	f043 0201 	orr.w	r2, r3, #1
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80020c0:	e007      	b.n	80020d2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020c6:	f043 0210 	orr.w	r2, r3, #16
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80020d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3718      	adds	r7, #24
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	ffe1f7fd 	.word	0xffe1f7fd
 80020e0:	ff1f0efe 	.word	0xff1f0efe

080020e4 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020ec:	2300      	movs	r3, #0
 80020ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d101      	bne.n	80020fe <HAL_ADC_Start_IT+0x1a>
 80020fa:	2302      	movs	r3, #2
 80020fc:	e0a0      	b.n	8002240 <HAL_ADC_Start_IT+0x15c>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2201      	movs	r2, #1
 8002102:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 fa6e 	bl	80025e8 <ADC_Enable>
 800210c:	4603      	mov	r3, r0
 800210e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002110:	7bfb      	ldrb	r3, [r7, #15]
 8002112:	2b00      	cmp	r3, #0
 8002114:	f040 808f 	bne.w	8002236 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800211c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002120:	f023 0301 	bic.w	r3, r3, #1
 8002124:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a45      	ldr	r2, [pc, #276]	@ (8002248 <HAL_ADC_Start_IT+0x164>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d105      	bne.n	8002142 <HAL_ADC_Start_IT+0x5e>
 8002136:	4b45      	ldr	r3, [pc, #276]	@ (800224c <HAL_ADC_Start_IT+0x168>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d115      	bne.n	800216e <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002146:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002158:	2b00      	cmp	r3, #0
 800215a:	d026      	beq.n	80021aa <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002160:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002164:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800216c:	e01d      	b.n	80021aa <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002172:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a33      	ldr	r2, [pc, #204]	@ (800224c <HAL_ADC_Start_IT+0x168>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d004      	beq.n	800218e <HAL_ADC_Start_IT+0xaa>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a2f      	ldr	r2, [pc, #188]	@ (8002248 <HAL_ADC_Start_IT+0x164>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d10d      	bne.n	80021aa <HAL_ADC_Start_IT+0xc6>
 800218e:	4b2f      	ldr	r3, [pc, #188]	@ (800224c <HAL_ADC_Start_IT+0x168>)
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002196:	2b00      	cmp	r3, #0
 8002198:	d007      	beq.n	80021aa <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800219e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80021a2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d006      	beq.n	80021c4 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ba:	f023 0206 	bic.w	r2, r3, #6
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80021c2:	e002      	b.n	80021ca <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f06f 0202 	mvn.w	r2, #2
 80021da:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	685a      	ldr	r2, [r3, #4]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f042 0220 	orr.w	r2, r2, #32
 80021ea:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80021f6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80021fa:	d113      	bne.n	8002224 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002200:	4a11      	ldr	r2, [pc, #68]	@ (8002248 <HAL_ADC_Start_IT+0x164>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d105      	bne.n	8002212 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002206:	4b11      	ldr	r3, [pc, #68]	@ (800224c <HAL_ADC_Start_IT+0x168>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800220e:	2b00      	cmp	r3, #0
 8002210:	d108      	bne.n	8002224 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002220:	609a      	str	r2, [r3, #8]
 8002222:	e00c      	b.n	800223e <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	689a      	ldr	r2, [r3, #8]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002232:	609a      	str	r2, [r3, #8]
 8002234:	e003      	b.n	800223e <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 800223e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002240:	4618      	mov	r0, r3
 8002242:	3710      	adds	r7, #16
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	40012800 	.word	0x40012800
 800224c:	40012400 	.word	0x40012400

08002250 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800225e:	4618      	mov	r0, r3
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	bc80      	pop	{r7}
 8002266:	4770      	bx	lr

08002268 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	f003 0320 	and.w	r3, r3, #32
 8002286:	2b00      	cmp	r3, #0
 8002288:	d03e      	beq.n	8002308 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d039      	beq.n	8002308 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002298:	f003 0310 	and.w	r3, r3, #16
 800229c:	2b00      	cmp	r3, #0
 800229e:	d105      	bne.n	80022ac <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022a4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80022b6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80022ba:	d11d      	bne.n	80022f8 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d119      	bne.n	80022f8 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	685a      	ldr	r2, [r3, #4]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f022 0220 	bic.w	r2, r2, #32
 80022d2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d105      	bne.n	80022f8 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022f0:	f043 0201 	orr.w	r2, r3, #1
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f7ff fc23 	bl	8001b44 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f06f 0212 	mvn.w	r2, #18
 8002306:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800230e:	2b00      	cmp	r3, #0
 8002310:	d04d      	beq.n	80023ae <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	2b00      	cmp	r3, #0
 800231a:	d048      	beq.n	80023ae <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002320:	f003 0310 	and.w	r3, r3, #16
 8002324:	2b00      	cmp	r3, #0
 8002326:	d105      	bne.n	8002334 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800232c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800233e:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8002342:	d012      	beq.n	800236a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800234e:	2b00      	cmp	r3, #0
 8002350:	d125      	bne.n	800239e <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800235c:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002360:	d11d      	bne.n	800239e <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002366:	2b00      	cmp	r3, #0
 8002368:	d119      	bne.n	800239e <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	685a      	ldr	r2, [r3, #4]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002378:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800237e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800238a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800238e:	2b00      	cmp	r3, #0
 8002390:	d105      	bne.n	800239e <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002396:	f043 0201 	orr.w	r2, r3, #1
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f000 f9bd 	bl	800271e <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f06f 020c 	mvn.w	r2, #12
 80023ac:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d012      	beq.n	80023de <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00d      	beq.n	80023de <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023c6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 f809 	bl	80023e6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f06f 0201 	mvn.w	r2, #1
 80023dc:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80023de:	bf00      	nop
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80023e6:	b480      	push	{r7}
 80023e8:	b083      	sub	sp, #12
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80023ee:	bf00      	nop
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bc80      	pop	{r7}
 80023f6:	4770      	bx	lr

080023f8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002402:	2300      	movs	r3, #0
 8002404:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002406:	2300      	movs	r3, #0
 8002408:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002410:	2b01      	cmp	r3, #1
 8002412:	d101      	bne.n	8002418 <HAL_ADC_ConfigChannel+0x20>
 8002414:	2302      	movs	r3, #2
 8002416:	e0dc      	b.n	80025d2 <HAL_ADC_ConfigChannel+0x1da>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	2b06      	cmp	r3, #6
 8002426:	d81c      	bhi.n	8002462 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685a      	ldr	r2, [r3, #4]
 8002432:	4613      	mov	r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	4413      	add	r3, r2
 8002438:	3b05      	subs	r3, #5
 800243a:	221f      	movs	r2, #31
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	43db      	mvns	r3, r3
 8002442:	4019      	ands	r1, r3
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	6818      	ldr	r0, [r3, #0]
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685a      	ldr	r2, [r3, #4]
 800244c:	4613      	mov	r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	4413      	add	r3, r2
 8002452:	3b05      	subs	r3, #5
 8002454:	fa00 f203 	lsl.w	r2, r0, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	430a      	orrs	r2, r1
 800245e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002460:	e03c      	b.n	80024dc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	2b0c      	cmp	r3, #12
 8002468:	d81c      	bhi.n	80024a4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685a      	ldr	r2, [r3, #4]
 8002474:	4613      	mov	r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	4413      	add	r3, r2
 800247a:	3b23      	subs	r3, #35	@ 0x23
 800247c:	221f      	movs	r2, #31
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	43db      	mvns	r3, r3
 8002484:	4019      	ands	r1, r3
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	6818      	ldr	r0, [r3, #0]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685a      	ldr	r2, [r3, #4]
 800248e:	4613      	mov	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4413      	add	r3, r2
 8002494:	3b23      	subs	r3, #35	@ 0x23
 8002496:	fa00 f203 	lsl.w	r2, r0, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	430a      	orrs	r2, r1
 80024a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80024a2:	e01b      	b.n	80024dc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685a      	ldr	r2, [r3, #4]
 80024ae:	4613      	mov	r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	4413      	add	r3, r2
 80024b4:	3b41      	subs	r3, #65	@ 0x41
 80024b6:	221f      	movs	r2, #31
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	43db      	mvns	r3, r3
 80024be:	4019      	ands	r1, r3
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	6818      	ldr	r0, [r3, #0]
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685a      	ldr	r2, [r3, #4]
 80024c8:	4613      	mov	r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	4413      	add	r3, r2
 80024ce:	3b41      	subs	r3, #65	@ 0x41
 80024d0:	fa00 f203 	lsl.w	r2, r0, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	430a      	orrs	r2, r1
 80024da:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2b09      	cmp	r3, #9
 80024e2:	d91c      	bls.n	800251e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	68d9      	ldr	r1, [r3, #12]
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	4613      	mov	r3, r2
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	4413      	add	r3, r2
 80024f4:	3b1e      	subs	r3, #30
 80024f6:	2207      	movs	r2, #7
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	43db      	mvns	r3, r3
 80024fe:	4019      	ands	r1, r3
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	6898      	ldr	r0, [r3, #8]
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	4613      	mov	r3, r2
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	4413      	add	r3, r2
 800250e:	3b1e      	subs	r3, #30
 8002510:	fa00 f203 	lsl.w	r2, r0, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	430a      	orrs	r2, r1
 800251a:	60da      	str	r2, [r3, #12]
 800251c:	e019      	b.n	8002552 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6919      	ldr	r1, [r3, #16]
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	4613      	mov	r3, r2
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	4413      	add	r3, r2
 800252e:	2207      	movs	r2, #7
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	43db      	mvns	r3, r3
 8002536:	4019      	ands	r1, r3
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	6898      	ldr	r0, [r3, #8]
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	4613      	mov	r3, r2
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	4413      	add	r3, r2
 8002546:	fa00 f203 	lsl.w	r2, r0, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	430a      	orrs	r2, r1
 8002550:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2b10      	cmp	r3, #16
 8002558:	d003      	beq.n	8002562 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800255e:	2b11      	cmp	r3, #17
 8002560:	d132      	bne.n	80025c8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a1d      	ldr	r2, [pc, #116]	@ (80025dc <HAL_ADC_ConfigChannel+0x1e4>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d125      	bne.n	80025b8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d126      	bne.n	80025c8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002588:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2b10      	cmp	r3, #16
 8002590:	d11a      	bne.n	80025c8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002592:	4b13      	ldr	r3, [pc, #76]	@ (80025e0 <HAL_ADC_ConfigChannel+0x1e8>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a13      	ldr	r2, [pc, #76]	@ (80025e4 <HAL_ADC_ConfigChannel+0x1ec>)
 8002598:	fba2 2303 	umull	r2, r3, r2, r3
 800259c:	0c9a      	lsrs	r2, r3, #18
 800259e:	4613      	mov	r3, r2
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	4413      	add	r3, r2
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025a8:	e002      	b.n	80025b0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	3b01      	subs	r3, #1
 80025ae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1f9      	bne.n	80025aa <HAL_ADC_ConfigChannel+0x1b2>
 80025b6:	e007      	b.n	80025c8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025bc:	f043 0220 	orr.w	r2, r3, #32
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80025d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3714      	adds	r7, #20
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bc80      	pop	{r7}
 80025da:	4770      	bx	lr
 80025dc:	40012400 	.word	0x40012400
 80025e0:	20000050 	.word	0x20000050
 80025e4:	431bde83 	.word	0x431bde83

080025e8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025f0:	2300      	movs	r3, #0
 80025f2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80025f4:	2300      	movs	r3, #0
 80025f6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b01      	cmp	r3, #1
 8002604:	d040      	beq.n	8002688 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	689a      	ldr	r2, [r3, #8]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f042 0201 	orr.w	r2, r2, #1
 8002614:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002616:	4b1f      	ldr	r3, [pc, #124]	@ (8002694 <ADC_Enable+0xac>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a1f      	ldr	r2, [pc, #124]	@ (8002698 <ADC_Enable+0xb0>)
 800261c:	fba2 2303 	umull	r2, r3, r2, r3
 8002620:	0c9b      	lsrs	r3, r3, #18
 8002622:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002624:	e002      	b.n	800262c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	3b01      	subs	r3, #1
 800262a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1f9      	bne.n	8002626 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002632:	f7ff fc51 	bl	8001ed8 <HAL_GetTick>
 8002636:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002638:	e01f      	b.n	800267a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800263a:	f7ff fc4d 	bl	8001ed8 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d918      	bls.n	800267a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	2b01      	cmp	r3, #1
 8002654:	d011      	beq.n	800267a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800265a:	f043 0210 	orr.w	r2, r3, #16
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002666:	f043 0201 	orr.w	r2, r3, #1
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e007      	b.n	800268a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f003 0301 	and.w	r3, r3, #1
 8002684:	2b01      	cmp	r3, #1
 8002686:	d1d8      	bne.n	800263a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	20000050 	.word	0x20000050
 8002698:	431bde83 	.word	0x431bde83

0800269c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026a4:	2300      	movs	r3, #0
 80026a6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d12e      	bne.n	8002714 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f022 0201 	bic.w	r2, r2, #1
 80026c4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80026c6:	f7ff fc07 	bl	8001ed8 <HAL_GetTick>
 80026ca:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80026cc:	e01b      	b.n	8002706 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80026ce:	f7ff fc03 	bl	8001ed8 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d914      	bls.n	8002706 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d10d      	bne.n	8002706 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ee:	f043 0210 	orr.w	r2, r3, #16
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026fa:	f043 0201 	orr.w	r2, r3, #1
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e007      	b.n	8002716 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f003 0301 	and.w	r3, r3, #1
 8002710:	2b01      	cmp	r3, #1
 8002712:	d0dc      	beq.n	80026ce <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800271e:	b480      	push	{r7}
 8002720:	b083      	sub	sp, #12
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002726:	bf00      	nop
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	bc80      	pop	{r7}
 800272e:	4770      	bx	lr

08002730 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002730:	b480      	push	{r7}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f003 0307 	and.w	r3, r3, #7
 800273e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002740:	4b0c      	ldr	r3, [pc, #48]	@ (8002774 <__NVIC_SetPriorityGrouping+0x44>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002746:	68ba      	ldr	r2, [r7, #8]
 8002748:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800274c:	4013      	ands	r3, r2
 800274e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002758:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800275c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002760:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002762:	4a04      	ldr	r2, [pc, #16]	@ (8002774 <__NVIC_SetPriorityGrouping+0x44>)
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	60d3      	str	r3, [r2, #12]
}
 8002768:	bf00      	nop
 800276a:	3714      	adds	r7, #20
 800276c:	46bd      	mov	sp, r7
 800276e:	bc80      	pop	{r7}
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	e000ed00 	.word	0xe000ed00

08002778 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800277c:	4b04      	ldr	r3, [pc, #16]	@ (8002790 <__NVIC_GetPriorityGrouping+0x18>)
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	0a1b      	lsrs	r3, r3, #8
 8002782:	f003 0307 	and.w	r3, r3, #7
}
 8002786:	4618      	mov	r0, r3
 8002788:	46bd      	mov	sp, r7
 800278a:	bc80      	pop	{r7}
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	e000ed00 	.word	0xe000ed00

08002794 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	4603      	mov	r3, r0
 800279c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800279e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	db0b      	blt.n	80027be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027a6:	79fb      	ldrb	r3, [r7, #7]
 80027a8:	f003 021f 	and.w	r2, r3, #31
 80027ac:	4906      	ldr	r1, [pc, #24]	@ (80027c8 <__NVIC_EnableIRQ+0x34>)
 80027ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b2:	095b      	lsrs	r3, r3, #5
 80027b4:	2001      	movs	r0, #1
 80027b6:	fa00 f202 	lsl.w	r2, r0, r2
 80027ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027be:	bf00      	nop
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bc80      	pop	{r7}
 80027c6:	4770      	bx	lr
 80027c8:	e000e100 	.word	0xe000e100

080027cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	4603      	mov	r3, r0
 80027d4:	6039      	str	r1, [r7, #0]
 80027d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	db0a      	blt.n	80027f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	b2da      	uxtb	r2, r3
 80027e4:	490c      	ldr	r1, [pc, #48]	@ (8002818 <__NVIC_SetPriority+0x4c>)
 80027e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ea:	0112      	lsls	r2, r2, #4
 80027ec:	b2d2      	uxtb	r2, r2
 80027ee:	440b      	add	r3, r1
 80027f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027f4:	e00a      	b.n	800280c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	b2da      	uxtb	r2, r3
 80027fa:	4908      	ldr	r1, [pc, #32]	@ (800281c <__NVIC_SetPriority+0x50>)
 80027fc:	79fb      	ldrb	r3, [r7, #7]
 80027fe:	f003 030f 	and.w	r3, r3, #15
 8002802:	3b04      	subs	r3, #4
 8002804:	0112      	lsls	r2, r2, #4
 8002806:	b2d2      	uxtb	r2, r2
 8002808:	440b      	add	r3, r1
 800280a:	761a      	strb	r2, [r3, #24]
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	bc80      	pop	{r7}
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	e000e100 	.word	0xe000e100
 800281c:	e000ed00 	.word	0xe000ed00

08002820 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002820:	b480      	push	{r7}
 8002822:	b089      	sub	sp, #36	@ 0x24
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f003 0307 	and.w	r3, r3, #7
 8002832:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	f1c3 0307 	rsb	r3, r3, #7
 800283a:	2b04      	cmp	r3, #4
 800283c:	bf28      	it	cs
 800283e:	2304      	movcs	r3, #4
 8002840:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	3304      	adds	r3, #4
 8002846:	2b06      	cmp	r3, #6
 8002848:	d902      	bls.n	8002850 <NVIC_EncodePriority+0x30>
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	3b03      	subs	r3, #3
 800284e:	e000      	b.n	8002852 <NVIC_EncodePriority+0x32>
 8002850:	2300      	movs	r3, #0
 8002852:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002854:	f04f 32ff 	mov.w	r2, #4294967295
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	fa02 f303 	lsl.w	r3, r2, r3
 800285e:	43da      	mvns	r2, r3
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	401a      	ands	r2, r3
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002868:	f04f 31ff 	mov.w	r1, #4294967295
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	fa01 f303 	lsl.w	r3, r1, r3
 8002872:	43d9      	mvns	r1, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002878:	4313      	orrs	r3, r2
         );
}
 800287a:	4618      	mov	r0, r3
 800287c:	3724      	adds	r7, #36	@ 0x24
 800287e:	46bd      	mov	sp, r7
 8002880:	bc80      	pop	{r7}
 8002882:	4770      	bx	lr

08002884 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	3b01      	subs	r3, #1
 8002890:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002894:	d301      	bcc.n	800289a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002896:	2301      	movs	r3, #1
 8002898:	e00f      	b.n	80028ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800289a:	4a0a      	ldr	r2, [pc, #40]	@ (80028c4 <SysTick_Config+0x40>)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	3b01      	subs	r3, #1
 80028a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028a2:	210f      	movs	r1, #15
 80028a4:	f04f 30ff 	mov.w	r0, #4294967295
 80028a8:	f7ff ff90 	bl	80027cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028ac:	4b05      	ldr	r3, [pc, #20]	@ (80028c4 <SysTick_Config+0x40>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028b2:	4b04      	ldr	r3, [pc, #16]	@ (80028c4 <SysTick_Config+0x40>)
 80028b4:	2207      	movs	r2, #7
 80028b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	e000e010 	.word	0xe000e010

080028c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f7ff ff2d 	bl	8002730 <__NVIC_SetPriorityGrouping>
}
 80028d6:	bf00      	nop
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028de:	b580      	push	{r7, lr}
 80028e0:	b086      	sub	sp, #24
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	4603      	mov	r3, r0
 80028e6:	60b9      	str	r1, [r7, #8]
 80028e8:	607a      	str	r2, [r7, #4]
 80028ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028ec:	2300      	movs	r3, #0
 80028ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028f0:	f7ff ff42 	bl	8002778 <__NVIC_GetPriorityGrouping>
 80028f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	68b9      	ldr	r1, [r7, #8]
 80028fa:	6978      	ldr	r0, [r7, #20]
 80028fc:	f7ff ff90 	bl	8002820 <NVIC_EncodePriority>
 8002900:	4602      	mov	r2, r0
 8002902:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002906:	4611      	mov	r1, r2
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff ff5f 	bl	80027cc <__NVIC_SetPriority>
}
 800290e:	bf00      	nop
 8002910:	3718      	adds	r7, #24
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b082      	sub	sp, #8
 800291a:	af00      	add	r7, sp, #0
 800291c:	4603      	mov	r3, r0
 800291e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002924:	4618      	mov	r0, r3
 8002926:	f7ff ff35 	bl	8002794 <__NVIC_EnableIRQ>
}
 800292a:	bf00      	nop
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002932:	b580      	push	{r7, lr}
 8002934:	b082      	sub	sp, #8
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f7ff ffa2 	bl	8002884 <SysTick_Config>
 8002940:	4603      	mov	r3, r0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800294a:	b480      	push	{r7}
 800294c:	b085      	sub	sp, #20
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002952:	2300      	movs	r3, #0
 8002954:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d008      	beq.n	8002974 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2204      	movs	r2, #4
 8002966:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e020      	b.n	80029b6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f022 020e 	bic.w	r2, r2, #14
 8002982:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f022 0201 	bic.w	r2, r2, #1
 8002992:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800299c:	2101      	movs	r1, #1
 800299e:	fa01 f202 	lsl.w	r2, r1, r2
 80029a2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80029b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3714      	adds	r7, #20
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bc80      	pop	{r7}
 80029be:	4770      	bx	lr

080029c0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029c8:	2300      	movs	r3, #0
 80029ca:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d005      	beq.n	80029e4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2204      	movs	r2, #4
 80029dc:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	73fb      	strb	r3, [r7, #15]
 80029e2:	e051      	b.n	8002a88 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f022 020e 	bic.w	r2, r2, #14
 80029f2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f022 0201 	bic.w	r2, r2, #1
 8002a02:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a22      	ldr	r2, [pc, #136]	@ (8002a94 <HAL_DMA_Abort_IT+0xd4>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d029      	beq.n	8002a62 <HAL_DMA_Abort_IT+0xa2>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a21      	ldr	r2, [pc, #132]	@ (8002a98 <HAL_DMA_Abort_IT+0xd8>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d022      	beq.n	8002a5e <HAL_DMA_Abort_IT+0x9e>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a1f      	ldr	r2, [pc, #124]	@ (8002a9c <HAL_DMA_Abort_IT+0xdc>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d01a      	beq.n	8002a58 <HAL_DMA_Abort_IT+0x98>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a1e      	ldr	r2, [pc, #120]	@ (8002aa0 <HAL_DMA_Abort_IT+0xe0>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d012      	beq.n	8002a52 <HAL_DMA_Abort_IT+0x92>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a1c      	ldr	r2, [pc, #112]	@ (8002aa4 <HAL_DMA_Abort_IT+0xe4>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d00a      	beq.n	8002a4c <HAL_DMA_Abort_IT+0x8c>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a1b      	ldr	r2, [pc, #108]	@ (8002aa8 <HAL_DMA_Abort_IT+0xe8>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d102      	bne.n	8002a46 <HAL_DMA_Abort_IT+0x86>
 8002a40:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002a44:	e00e      	b.n	8002a64 <HAL_DMA_Abort_IT+0xa4>
 8002a46:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a4a:	e00b      	b.n	8002a64 <HAL_DMA_Abort_IT+0xa4>
 8002a4c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a50:	e008      	b.n	8002a64 <HAL_DMA_Abort_IT+0xa4>
 8002a52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a56:	e005      	b.n	8002a64 <HAL_DMA_Abort_IT+0xa4>
 8002a58:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a5c:	e002      	b.n	8002a64 <HAL_DMA_Abort_IT+0xa4>
 8002a5e:	2310      	movs	r3, #16
 8002a60:	e000      	b.n	8002a64 <HAL_DMA_Abort_IT+0xa4>
 8002a62:	2301      	movs	r3, #1
 8002a64:	4a11      	ldr	r2, [pc, #68]	@ (8002aac <HAL_DMA_Abort_IT+0xec>)
 8002a66:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d003      	beq.n	8002a88 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	4798      	blx	r3
    } 
  }
  return status;
 8002a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	40020008 	.word	0x40020008
 8002a98:	4002001c 	.word	0x4002001c
 8002a9c:	40020030 	.word	0x40020030
 8002aa0:	40020044 	.word	0x40020044
 8002aa4:	40020058 	.word	0x40020058
 8002aa8:	4002006c 	.word	0x4002006c
 8002aac:	40020000 	.word	0x40020000

08002ab0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b08b      	sub	sp, #44	@ 0x2c
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002aba:	2300      	movs	r3, #0
 8002abc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ac2:	e169      	b.n	8002d98 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	69fa      	ldr	r2, [r7, #28]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	f040 8158 	bne.w	8002d92 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	4a9a      	ldr	r2, [pc, #616]	@ (8002d50 <HAL_GPIO_Init+0x2a0>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d05e      	beq.n	8002baa <HAL_GPIO_Init+0xfa>
 8002aec:	4a98      	ldr	r2, [pc, #608]	@ (8002d50 <HAL_GPIO_Init+0x2a0>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d875      	bhi.n	8002bde <HAL_GPIO_Init+0x12e>
 8002af2:	4a98      	ldr	r2, [pc, #608]	@ (8002d54 <HAL_GPIO_Init+0x2a4>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d058      	beq.n	8002baa <HAL_GPIO_Init+0xfa>
 8002af8:	4a96      	ldr	r2, [pc, #600]	@ (8002d54 <HAL_GPIO_Init+0x2a4>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d86f      	bhi.n	8002bde <HAL_GPIO_Init+0x12e>
 8002afe:	4a96      	ldr	r2, [pc, #600]	@ (8002d58 <HAL_GPIO_Init+0x2a8>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d052      	beq.n	8002baa <HAL_GPIO_Init+0xfa>
 8002b04:	4a94      	ldr	r2, [pc, #592]	@ (8002d58 <HAL_GPIO_Init+0x2a8>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d869      	bhi.n	8002bde <HAL_GPIO_Init+0x12e>
 8002b0a:	4a94      	ldr	r2, [pc, #592]	@ (8002d5c <HAL_GPIO_Init+0x2ac>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d04c      	beq.n	8002baa <HAL_GPIO_Init+0xfa>
 8002b10:	4a92      	ldr	r2, [pc, #584]	@ (8002d5c <HAL_GPIO_Init+0x2ac>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d863      	bhi.n	8002bde <HAL_GPIO_Init+0x12e>
 8002b16:	4a92      	ldr	r2, [pc, #584]	@ (8002d60 <HAL_GPIO_Init+0x2b0>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d046      	beq.n	8002baa <HAL_GPIO_Init+0xfa>
 8002b1c:	4a90      	ldr	r2, [pc, #576]	@ (8002d60 <HAL_GPIO_Init+0x2b0>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d85d      	bhi.n	8002bde <HAL_GPIO_Init+0x12e>
 8002b22:	2b12      	cmp	r3, #18
 8002b24:	d82a      	bhi.n	8002b7c <HAL_GPIO_Init+0xcc>
 8002b26:	2b12      	cmp	r3, #18
 8002b28:	d859      	bhi.n	8002bde <HAL_GPIO_Init+0x12e>
 8002b2a:	a201      	add	r2, pc, #4	@ (adr r2, 8002b30 <HAL_GPIO_Init+0x80>)
 8002b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b30:	08002bab 	.word	0x08002bab
 8002b34:	08002b85 	.word	0x08002b85
 8002b38:	08002b97 	.word	0x08002b97
 8002b3c:	08002bd9 	.word	0x08002bd9
 8002b40:	08002bdf 	.word	0x08002bdf
 8002b44:	08002bdf 	.word	0x08002bdf
 8002b48:	08002bdf 	.word	0x08002bdf
 8002b4c:	08002bdf 	.word	0x08002bdf
 8002b50:	08002bdf 	.word	0x08002bdf
 8002b54:	08002bdf 	.word	0x08002bdf
 8002b58:	08002bdf 	.word	0x08002bdf
 8002b5c:	08002bdf 	.word	0x08002bdf
 8002b60:	08002bdf 	.word	0x08002bdf
 8002b64:	08002bdf 	.word	0x08002bdf
 8002b68:	08002bdf 	.word	0x08002bdf
 8002b6c:	08002bdf 	.word	0x08002bdf
 8002b70:	08002bdf 	.word	0x08002bdf
 8002b74:	08002b8d 	.word	0x08002b8d
 8002b78:	08002ba1 	.word	0x08002ba1
 8002b7c:	4a79      	ldr	r2, [pc, #484]	@ (8002d64 <HAL_GPIO_Init+0x2b4>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d013      	beq.n	8002baa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002b82:	e02c      	b.n	8002bde <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	623b      	str	r3, [r7, #32]
          break;
 8002b8a:	e029      	b.n	8002be0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	3304      	adds	r3, #4
 8002b92:	623b      	str	r3, [r7, #32]
          break;
 8002b94:	e024      	b.n	8002be0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	3308      	adds	r3, #8
 8002b9c:	623b      	str	r3, [r7, #32]
          break;
 8002b9e:	e01f      	b.n	8002be0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	330c      	adds	r3, #12
 8002ba6:	623b      	str	r3, [r7, #32]
          break;
 8002ba8:	e01a      	b.n	8002be0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d102      	bne.n	8002bb8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002bb2:	2304      	movs	r3, #4
 8002bb4:	623b      	str	r3, [r7, #32]
          break;
 8002bb6:	e013      	b.n	8002be0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d105      	bne.n	8002bcc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002bc0:	2308      	movs	r3, #8
 8002bc2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	69fa      	ldr	r2, [r7, #28]
 8002bc8:	611a      	str	r2, [r3, #16]
          break;
 8002bca:	e009      	b.n	8002be0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002bcc:	2308      	movs	r3, #8
 8002bce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	69fa      	ldr	r2, [r7, #28]
 8002bd4:	615a      	str	r2, [r3, #20]
          break;
 8002bd6:	e003      	b.n	8002be0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	623b      	str	r3, [r7, #32]
          break;
 8002bdc:	e000      	b.n	8002be0 <HAL_GPIO_Init+0x130>
          break;
 8002bde:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	2bff      	cmp	r3, #255	@ 0xff
 8002be4:	d801      	bhi.n	8002bea <HAL_GPIO_Init+0x13a>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	e001      	b.n	8002bee <HAL_GPIO_Init+0x13e>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	3304      	adds	r3, #4
 8002bee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	2bff      	cmp	r3, #255	@ 0xff
 8002bf4:	d802      	bhi.n	8002bfc <HAL_GPIO_Init+0x14c>
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	e002      	b.n	8002c02 <HAL_GPIO_Init+0x152>
 8002bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bfe:	3b08      	subs	r3, #8
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	210f      	movs	r1, #15
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c10:	43db      	mvns	r3, r3
 8002c12:	401a      	ands	r2, r3
 8002c14:	6a39      	ldr	r1, [r7, #32]
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	fa01 f303 	lsl.w	r3, r1, r3
 8002c1c:	431a      	orrs	r2, r3
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f000 80b1 	beq.w	8002d92 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c30:	4b4d      	ldr	r3, [pc, #308]	@ (8002d68 <HAL_GPIO_Init+0x2b8>)
 8002c32:	699b      	ldr	r3, [r3, #24]
 8002c34:	4a4c      	ldr	r2, [pc, #304]	@ (8002d68 <HAL_GPIO_Init+0x2b8>)
 8002c36:	f043 0301 	orr.w	r3, r3, #1
 8002c3a:	6193      	str	r3, [r2, #24]
 8002c3c:	4b4a      	ldr	r3, [pc, #296]	@ (8002d68 <HAL_GPIO_Init+0x2b8>)
 8002c3e:	699b      	ldr	r3, [r3, #24]
 8002c40:	f003 0301 	and.w	r3, r3, #1
 8002c44:	60bb      	str	r3, [r7, #8]
 8002c46:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002c48:	4a48      	ldr	r2, [pc, #288]	@ (8002d6c <HAL_GPIO_Init+0x2bc>)
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c4c:	089b      	lsrs	r3, r3, #2
 8002c4e:	3302      	adds	r3, #2
 8002c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c54:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c58:	f003 0303 	and.w	r3, r3, #3
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	220f      	movs	r2, #15
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	43db      	mvns	r3, r3
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4a40      	ldr	r2, [pc, #256]	@ (8002d70 <HAL_GPIO_Init+0x2c0>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d013      	beq.n	8002c9c <HAL_GPIO_Init+0x1ec>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	4a3f      	ldr	r2, [pc, #252]	@ (8002d74 <HAL_GPIO_Init+0x2c4>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d00d      	beq.n	8002c98 <HAL_GPIO_Init+0x1e8>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4a3e      	ldr	r2, [pc, #248]	@ (8002d78 <HAL_GPIO_Init+0x2c8>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d007      	beq.n	8002c94 <HAL_GPIO_Init+0x1e4>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a3d      	ldr	r2, [pc, #244]	@ (8002d7c <HAL_GPIO_Init+0x2cc>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d101      	bne.n	8002c90 <HAL_GPIO_Init+0x1e0>
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e006      	b.n	8002c9e <HAL_GPIO_Init+0x1ee>
 8002c90:	2304      	movs	r3, #4
 8002c92:	e004      	b.n	8002c9e <HAL_GPIO_Init+0x1ee>
 8002c94:	2302      	movs	r3, #2
 8002c96:	e002      	b.n	8002c9e <HAL_GPIO_Init+0x1ee>
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e000      	b.n	8002c9e <HAL_GPIO_Init+0x1ee>
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ca0:	f002 0203 	and.w	r2, r2, #3
 8002ca4:	0092      	lsls	r2, r2, #2
 8002ca6:	4093      	lsls	r3, r2
 8002ca8:	68fa      	ldr	r2, [r7, #12]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002cae:	492f      	ldr	r1, [pc, #188]	@ (8002d6c <HAL_GPIO_Init+0x2bc>)
 8002cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb2:	089b      	lsrs	r3, r3, #2
 8002cb4:	3302      	adds	r3, #2
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d006      	beq.n	8002cd6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002cc8:	4b2d      	ldr	r3, [pc, #180]	@ (8002d80 <HAL_GPIO_Init+0x2d0>)
 8002cca:	689a      	ldr	r2, [r3, #8]
 8002ccc:	492c      	ldr	r1, [pc, #176]	@ (8002d80 <HAL_GPIO_Init+0x2d0>)
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	608b      	str	r3, [r1, #8]
 8002cd4:	e006      	b.n	8002ce4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002cd6:	4b2a      	ldr	r3, [pc, #168]	@ (8002d80 <HAL_GPIO_Init+0x2d0>)
 8002cd8:	689a      	ldr	r2, [r3, #8]
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	43db      	mvns	r3, r3
 8002cde:	4928      	ldr	r1, [pc, #160]	@ (8002d80 <HAL_GPIO_Init+0x2d0>)
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d006      	beq.n	8002cfe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002cf0:	4b23      	ldr	r3, [pc, #140]	@ (8002d80 <HAL_GPIO_Init+0x2d0>)
 8002cf2:	68da      	ldr	r2, [r3, #12]
 8002cf4:	4922      	ldr	r1, [pc, #136]	@ (8002d80 <HAL_GPIO_Init+0x2d0>)
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	60cb      	str	r3, [r1, #12]
 8002cfc:	e006      	b.n	8002d0c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002cfe:	4b20      	ldr	r3, [pc, #128]	@ (8002d80 <HAL_GPIO_Init+0x2d0>)
 8002d00:	68da      	ldr	r2, [r3, #12]
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	43db      	mvns	r3, r3
 8002d06:	491e      	ldr	r1, [pc, #120]	@ (8002d80 <HAL_GPIO_Init+0x2d0>)
 8002d08:	4013      	ands	r3, r2
 8002d0a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d006      	beq.n	8002d26 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002d18:	4b19      	ldr	r3, [pc, #100]	@ (8002d80 <HAL_GPIO_Init+0x2d0>)
 8002d1a:	685a      	ldr	r2, [r3, #4]
 8002d1c:	4918      	ldr	r1, [pc, #96]	@ (8002d80 <HAL_GPIO_Init+0x2d0>)
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	604b      	str	r3, [r1, #4]
 8002d24:	e006      	b.n	8002d34 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002d26:	4b16      	ldr	r3, [pc, #88]	@ (8002d80 <HAL_GPIO_Init+0x2d0>)
 8002d28:	685a      	ldr	r2, [r3, #4]
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	4914      	ldr	r1, [pc, #80]	@ (8002d80 <HAL_GPIO_Init+0x2d0>)
 8002d30:	4013      	ands	r3, r2
 8002d32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d021      	beq.n	8002d84 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002d40:	4b0f      	ldr	r3, [pc, #60]	@ (8002d80 <HAL_GPIO_Init+0x2d0>)
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	490e      	ldr	r1, [pc, #56]	@ (8002d80 <HAL_GPIO_Init+0x2d0>)
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	600b      	str	r3, [r1, #0]
 8002d4c:	e021      	b.n	8002d92 <HAL_GPIO_Init+0x2e2>
 8002d4e:	bf00      	nop
 8002d50:	10320000 	.word	0x10320000
 8002d54:	10310000 	.word	0x10310000
 8002d58:	10220000 	.word	0x10220000
 8002d5c:	10210000 	.word	0x10210000
 8002d60:	10120000 	.word	0x10120000
 8002d64:	10110000 	.word	0x10110000
 8002d68:	40021000 	.word	0x40021000
 8002d6c:	40010000 	.word	0x40010000
 8002d70:	40010800 	.word	0x40010800
 8002d74:	40010c00 	.word	0x40010c00
 8002d78:	40011000 	.word	0x40011000
 8002d7c:	40011400 	.word	0x40011400
 8002d80:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002d84:	4b0b      	ldr	r3, [pc, #44]	@ (8002db4 <HAL_GPIO_Init+0x304>)
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	43db      	mvns	r3, r3
 8002d8c:	4909      	ldr	r1, [pc, #36]	@ (8002db4 <HAL_GPIO_Init+0x304>)
 8002d8e:	4013      	ands	r3, r2
 8002d90:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d94:	3301      	adds	r3, #1
 8002d96:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	f47f ae8e 	bne.w	8002ac4 <HAL_GPIO_Init+0x14>
  }
}
 8002da8:	bf00      	nop
 8002daa:	bf00      	nop
 8002dac:	372c      	adds	r7, #44	@ 0x2c
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bc80      	pop	{r7}
 8002db2:	4770      	bx	lr
 8002db4:	40010400 	.word	0x40010400

08002db8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689a      	ldr	r2, [r3, #8]
 8002dc8:	887b      	ldrh	r3, [r7, #2]
 8002dca:	4013      	ands	r3, r2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d002      	beq.n	8002dd6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	73fb      	strb	r3, [r7, #15]
 8002dd4:	e001      	b.n	8002dda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3714      	adds	r7, #20
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bc80      	pop	{r7}
 8002de4:	4770      	bx	lr
	...

08002de8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	4603      	mov	r3, r0
 8002df0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002df2:	4b08      	ldr	r3, [pc, #32]	@ (8002e14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002df4:	695a      	ldr	r2, [r3, #20]
 8002df6:	88fb      	ldrh	r3, [r7, #6]
 8002df8:	4013      	ands	r3, r2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d006      	beq.n	8002e0c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002dfe:	4a05      	ldr	r2, [pc, #20]	@ (8002e14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e00:	88fb      	ldrh	r3, [r7, #6]
 8002e02:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e04:	88fb      	ldrh	r3, [r7, #6]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7fe fe2a 	bl	8001a60 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e0c:	bf00      	nop
 8002e0e:	3708      	adds	r7, #8
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	40010400 	.word	0x40010400

08002e18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e12b      	b.n	8003082 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d106      	bne.n	8002e44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f7fd fa98 	bl	8000374 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2224      	movs	r2, #36	@ 0x24
 8002e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f022 0201 	bic.w	r2, r2, #1
 8002e5a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e6a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e7a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e7c:	f001 fbfc 	bl	8004678 <HAL_RCC_GetPCLK1Freq>
 8002e80:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	4a81      	ldr	r2, [pc, #516]	@ (800308c <HAL_I2C_Init+0x274>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d807      	bhi.n	8002e9c <HAL_I2C_Init+0x84>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	4a80      	ldr	r2, [pc, #512]	@ (8003090 <HAL_I2C_Init+0x278>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	bf94      	ite	ls
 8002e94:	2301      	movls	r3, #1
 8002e96:	2300      	movhi	r3, #0
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	e006      	b.n	8002eaa <HAL_I2C_Init+0x92>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	4a7d      	ldr	r2, [pc, #500]	@ (8003094 <HAL_I2C_Init+0x27c>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	bf94      	ite	ls
 8002ea4:	2301      	movls	r3, #1
 8002ea6:	2300      	movhi	r3, #0
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e0e7      	b.n	8003082 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	4a78      	ldr	r2, [pc, #480]	@ (8003098 <HAL_I2C_Init+0x280>)
 8002eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eba:	0c9b      	lsrs	r3, r3, #18
 8002ebc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68ba      	ldr	r2, [r7, #8]
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	6a1b      	ldr	r3, [r3, #32]
 8002ed8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	4a6a      	ldr	r2, [pc, #424]	@ (800308c <HAL_I2C_Init+0x274>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d802      	bhi.n	8002eec <HAL_I2C_Init+0xd4>
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	3301      	adds	r3, #1
 8002eea:	e009      	b.n	8002f00 <HAL_I2C_Init+0xe8>
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002ef2:	fb02 f303 	mul.w	r3, r2, r3
 8002ef6:	4a69      	ldr	r2, [pc, #420]	@ (800309c <HAL_I2C_Init+0x284>)
 8002ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8002efc:	099b      	lsrs	r3, r3, #6
 8002efe:	3301      	adds	r3, #1
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	6812      	ldr	r2, [r2, #0]
 8002f04:	430b      	orrs	r3, r1
 8002f06:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	69db      	ldr	r3, [r3, #28]
 8002f0e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002f12:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	495c      	ldr	r1, [pc, #368]	@ (800308c <HAL_I2C_Init+0x274>)
 8002f1c:	428b      	cmp	r3, r1
 8002f1e:	d819      	bhi.n	8002f54 <HAL_I2C_Init+0x13c>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	1e59      	subs	r1, r3, #1
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f2e:	1c59      	adds	r1, r3, #1
 8002f30:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002f34:	400b      	ands	r3, r1
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d00a      	beq.n	8002f50 <HAL_I2C_Init+0x138>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	1e59      	subs	r1, r3, #1
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f48:	3301      	adds	r3, #1
 8002f4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f4e:	e051      	b.n	8002ff4 <HAL_I2C_Init+0x1dc>
 8002f50:	2304      	movs	r3, #4
 8002f52:	e04f      	b.n	8002ff4 <HAL_I2C_Init+0x1dc>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d111      	bne.n	8002f80 <HAL_I2C_Init+0x168>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	1e58      	subs	r0, r3, #1
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6859      	ldr	r1, [r3, #4]
 8002f64:	460b      	mov	r3, r1
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	440b      	add	r3, r1
 8002f6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f6e:	3301      	adds	r3, #1
 8002f70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	bf0c      	ite	eq
 8002f78:	2301      	moveq	r3, #1
 8002f7a:	2300      	movne	r3, #0
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	e012      	b.n	8002fa6 <HAL_I2C_Init+0x18e>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	1e58      	subs	r0, r3, #1
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6859      	ldr	r1, [r3, #4]
 8002f88:	460b      	mov	r3, r1
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	440b      	add	r3, r1
 8002f8e:	0099      	lsls	r1, r3, #2
 8002f90:	440b      	add	r3, r1
 8002f92:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f96:	3301      	adds	r3, #1
 8002f98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	bf0c      	ite	eq
 8002fa0:	2301      	moveq	r3, #1
 8002fa2:	2300      	movne	r3, #0
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <HAL_I2C_Init+0x196>
 8002faa:	2301      	movs	r3, #1
 8002fac:	e022      	b.n	8002ff4 <HAL_I2C_Init+0x1dc>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d10e      	bne.n	8002fd4 <HAL_I2C_Init+0x1bc>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	1e58      	subs	r0, r3, #1
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6859      	ldr	r1, [r3, #4]
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	440b      	add	r3, r1
 8002fc4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fc8:	3301      	adds	r3, #1
 8002fca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002fd2:	e00f      	b.n	8002ff4 <HAL_I2C_Init+0x1dc>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	1e58      	subs	r0, r3, #1
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6859      	ldr	r1, [r3, #4]
 8002fdc:	460b      	mov	r3, r1
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	440b      	add	r3, r1
 8002fe2:	0099      	lsls	r1, r3, #2
 8002fe4:	440b      	add	r3, r1
 8002fe6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fea:	3301      	adds	r3, #1
 8002fec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ff0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002ff4:	6879      	ldr	r1, [r7, #4]
 8002ff6:	6809      	ldr	r1, [r1, #0]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	69da      	ldr	r2, [r3, #28]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	431a      	orrs	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	430a      	orrs	r2, r1
 8003016:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003022:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	6911      	ldr	r1, [r2, #16]
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	68d2      	ldr	r2, [r2, #12]
 800302e:	4311      	orrs	r1, r2
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	6812      	ldr	r2, [r2, #0]
 8003034:	430b      	orrs	r3, r1
 8003036:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	695a      	ldr	r2, [r3, #20]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	431a      	orrs	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	430a      	orrs	r2, r1
 8003052:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f042 0201 	orr.w	r2, r2, #1
 8003062:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2220      	movs	r2, #32
 800306e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	000186a0 	.word	0x000186a0
 8003090:	001e847f 	.word	0x001e847f
 8003094:	003d08ff 	.word	0x003d08ff
 8003098:	431bde83 	.word	0x431bde83
 800309c:	10624dd3 	.word	0x10624dd3

080030a0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b088      	sub	sp, #32
 80030a4:	af02      	add	r7, sp, #8
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	4608      	mov	r0, r1
 80030aa:	4611      	mov	r1, r2
 80030ac:	461a      	mov	r2, r3
 80030ae:	4603      	mov	r3, r0
 80030b0:	817b      	strh	r3, [r7, #10]
 80030b2:	460b      	mov	r3, r1
 80030b4:	813b      	strh	r3, [r7, #8]
 80030b6:	4613      	mov	r3, r2
 80030b8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030ba:	f7fe ff0d 	bl	8001ed8 <HAL_GetTick>
 80030be:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	2b20      	cmp	r3, #32
 80030ca:	f040 80d9 	bne.w	8003280 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	9300      	str	r3, [sp, #0]
 80030d2:	2319      	movs	r3, #25
 80030d4:	2201      	movs	r2, #1
 80030d6:	496d      	ldr	r1, [pc, #436]	@ (800328c <HAL_I2C_Mem_Write+0x1ec>)
 80030d8:	68f8      	ldr	r0, [r7, #12]
 80030da:	f000 fccd 	bl	8003a78 <I2C_WaitOnFlagUntilTimeout>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d001      	beq.n	80030e8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80030e4:	2302      	movs	r3, #2
 80030e6:	e0cc      	b.n	8003282 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d101      	bne.n	80030f6 <HAL_I2C_Mem_Write+0x56>
 80030f2:	2302      	movs	r3, #2
 80030f4:	e0c5      	b.n	8003282 <HAL_I2C_Mem_Write+0x1e2>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0301 	and.w	r3, r3, #1
 8003108:	2b01      	cmp	r3, #1
 800310a:	d007      	beq.n	800311c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f042 0201 	orr.w	r2, r2, #1
 800311a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800312a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2221      	movs	r2, #33	@ 0x21
 8003130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2240      	movs	r2, #64	@ 0x40
 8003138:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6a3a      	ldr	r2, [r7, #32]
 8003146:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800314c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003152:	b29a      	uxth	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	4a4d      	ldr	r2, [pc, #308]	@ (8003290 <HAL_I2C_Mem_Write+0x1f0>)
 800315c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800315e:	88f8      	ldrh	r0, [r7, #6]
 8003160:	893a      	ldrh	r2, [r7, #8]
 8003162:	8979      	ldrh	r1, [r7, #10]
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	9301      	str	r3, [sp, #4]
 8003168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800316a:	9300      	str	r3, [sp, #0]
 800316c:	4603      	mov	r3, r0
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f000 fb04 	bl	800377c <I2C_RequestMemoryWrite>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d052      	beq.n	8003220 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e081      	b.n	8003282 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f000 fd92 	bl	8003cac <I2C_WaitOnTXEFlagUntilTimeout>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00d      	beq.n	80031aa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003192:	2b04      	cmp	r3, #4
 8003194:	d107      	bne.n	80031a6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e06b      	b.n	8003282 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ae:	781a      	ldrb	r2, [r3, #0]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ba:	1c5a      	adds	r2, r3, #1
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031c4:	3b01      	subs	r3, #1
 80031c6:	b29a      	uxth	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	3b01      	subs	r3, #1
 80031d4:	b29a      	uxth	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	695b      	ldr	r3, [r3, #20]
 80031e0:	f003 0304 	and.w	r3, r3, #4
 80031e4:	2b04      	cmp	r3, #4
 80031e6:	d11b      	bne.n	8003220 <HAL_I2C_Mem_Write+0x180>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d017      	beq.n	8003220 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f4:	781a      	ldrb	r2, [r3, #0]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003200:	1c5a      	adds	r2, r3, #1
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800320a:	3b01      	subs	r3, #1
 800320c:	b29a      	uxth	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003216:	b29b      	uxth	r3, r3
 8003218:	3b01      	subs	r3, #1
 800321a:	b29a      	uxth	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003224:	2b00      	cmp	r3, #0
 8003226:	d1aa      	bne.n	800317e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003228:	697a      	ldr	r2, [r7, #20]
 800322a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800322c:	68f8      	ldr	r0, [r7, #12]
 800322e:	f000 fd85 	bl	8003d3c <I2C_WaitOnBTFFlagUntilTimeout>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d00d      	beq.n	8003254 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800323c:	2b04      	cmp	r3, #4
 800323e:	d107      	bne.n	8003250 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800324e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e016      	b.n	8003282 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003262:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2220      	movs	r2, #32
 8003268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800327c:	2300      	movs	r3, #0
 800327e:	e000      	b.n	8003282 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003280:	2302      	movs	r3, #2
  }
}
 8003282:	4618      	mov	r0, r3
 8003284:	3718      	adds	r7, #24
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	00100002 	.word	0x00100002
 8003290:	ffff0000 	.word	0xffff0000

08003294 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b08c      	sub	sp, #48	@ 0x30
 8003298:	af02      	add	r7, sp, #8
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	4608      	mov	r0, r1
 800329e:	4611      	mov	r1, r2
 80032a0:	461a      	mov	r2, r3
 80032a2:	4603      	mov	r3, r0
 80032a4:	817b      	strh	r3, [r7, #10]
 80032a6:	460b      	mov	r3, r1
 80032a8:	813b      	strh	r3, [r7, #8]
 80032aa:	4613      	mov	r3, r2
 80032ac:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80032ae:	2300      	movs	r3, #0
 80032b0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032b2:	f7fe fe11 	bl	8001ed8 <HAL_GetTick>
 80032b6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	2b20      	cmp	r3, #32
 80032c2:	f040 8250 	bne.w	8003766 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c8:	9300      	str	r3, [sp, #0]
 80032ca:	2319      	movs	r3, #25
 80032cc:	2201      	movs	r2, #1
 80032ce:	4982      	ldr	r1, [pc, #520]	@ (80034d8 <HAL_I2C_Mem_Read+0x244>)
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	f000 fbd1 	bl	8003a78 <I2C_WaitOnFlagUntilTimeout>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d001      	beq.n	80032e0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80032dc:	2302      	movs	r3, #2
 80032de:	e243      	b.n	8003768 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d101      	bne.n	80032ee <HAL_I2C_Mem_Read+0x5a>
 80032ea:	2302      	movs	r3, #2
 80032ec:	e23c      	b.n	8003768 <HAL_I2C_Mem_Read+0x4d4>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2201      	movs	r2, #1
 80032f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	2b01      	cmp	r3, #1
 8003302:	d007      	beq.n	8003314 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f042 0201 	orr.w	r2, r2, #1
 8003312:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003322:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2222      	movs	r2, #34	@ 0x22
 8003328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2240      	movs	r2, #64	@ 0x40
 8003330:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800333e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003344:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800334a:	b29a      	uxth	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	4a62      	ldr	r2, [pc, #392]	@ (80034dc <HAL_I2C_Mem_Read+0x248>)
 8003354:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003356:	88f8      	ldrh	r0, [r7, #6]
 8003358:	893a      	ldrh	r2, [r7, #8]
 800335a:	8979      	ldrh	r1, [r7, #10]
 800335c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800335e:	9301      	str	r3, [sp, #4]
 8003360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003362:	9300      	str	r3, [sp, #0]
 8003364:	4603      	mov	r3, r0
 8003366:	68f8      	ldr	r0, [r7, #12]
 8003368:	f000 fa9e 	bl	80038a8 <I2C_RequestMemoryRead>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e1f8      	b.n	8003768 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800337a:	2b00      	cmp	r3, #0
 800337c:	d113      	bne.n	80033a6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800337e:	2300      	movs	r3, #0
 8003380:	61fb      	str	r3, [r7, #28]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	695b      	ldr	r3, [r3, #20]
 8003388:	61fb      	str	r3, [r7, #28]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	61fb      	str	r3, [r7, #28]
 8003392:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033a2:	601a      	str	r2, [r3, #0]
 80033a4:	e1cc      	b.n	8003740 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d11e      	bne.n	80033ec <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033bc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80033be:	b672      	cpsid	i
}
 80033c0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033c2:	2300      	movs	r3, #0
 80033c4:	61bb      	str	r3, [r7, #24]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	695b      	ldr	r3, [r3, #20]
 80033cc:	61bb      	str	r3, [r7, #24]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	61bb      	str	r3, [r7, #24]
 80033d6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033e6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80033e8:	b662      	cpsie	i
}
 80033ea:	e035      	b.n	8003458 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d11e      	bne.n	8003432 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003402:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003404:	b672      	cpsid	i
}
 8003406:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003408:	2300      	movs	r3, #0
 800340a:	617b      	str	r3, [r7, #20]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	695b      	ldr	r3, [r3, #20]
 8003412:	617b      	str	r3, [r7, #20]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	617b      	str	r3, [r7, #20]
 800341c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800342c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800342e:	b662      	cpsie	i
}
 8003430:	e012      	b.n	8003458 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003440:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003442:	2300      	movs	r3, #0
 8003444:	613b      	str	r3, [r7, #16]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	695b      	ldr	r3, [r3, #20]
 800344c:	613b      	str	r3, [r7, #16]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	613b      	str	r3, [r7, #16]
 8003456:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003458:	e172      	b.n	8003740 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800345e:	2b03      	cmp	r3, #3
 8003460:	f200 811f 	bhi.w	80036a2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003468:	2b01      	cmp	r3, #1
 800346a:	d123      	bne.n	80034b4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800346c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800346e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003470:	68f8      	ldr	r0, [r7, #12]
 8003472:	f000 fcab 	bl	8003dcc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d001      	beq.n	8003480 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e173      	b.n	8003768 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	691a      	ldr	r2, [r3, #16]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800348a:	b2d2      	uxtb	r2, r2
 800348c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003492:	1c5a      	adds	r2, r3, #1
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800349c:	3b01      	subs	r3, #1
 800349e:	b29a      	uxth	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	3b01      	subs	r3, #1
 80034ac:	b29a      	uxth	r2, r3
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80034b2:	e145      	b.n	8003740 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d152      	bne.n	8003562 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034be:	9300      	str	r3, [sp, #0]
 80034c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034c2:	2200      	movs	r2, #0
 80034c4:	4906      	ldr	r1, [pc, #24]	@ (80034e0 <HAL_I2C_Mem_Read+0x24c>)
 80034c6:	68f8      	ldr	r0, [r7, #12]
 80034c8:	f000 fad6 	bl	8003a78 <I2C_WaitOnFlagUntilTimeout>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d008      	beq.n	80034e4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e148      	b.n	8003768 <HAL_I2C_Mem_Read+0x4d4>
 80034d6:	bf00      	nop
 80034d8:	00100002 	.word	0x00100002
 80034dc:	ffff0000 	.word	0xffff0000
 80034e0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80034e4:	b672      	cpsid	i
}
 80034e6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	691a      	ldr	r2, [r3, #16]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003502:	b2d2      	uxtb	r2, r2
 8003504:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800350a:	1c5a      	adds	r2, r3, #1
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003514:	3b01      	subs	r3, #1
 8003516:	b29a      	uxth	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003520:	b29b      	uxth	r3, r3
 8003522:	3b01      	subs	r3, #1
 8003524:	b29a      	uxth	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800352a:	b662      	cpsie	i
}
 800352c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	691a      	ldr	r2, [r3, #16]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003538:	b2d2      	uxtb	r2, r2
 800353a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003540:	1c5a      	adds	r2, r3, #1
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800354a:	3b01      	subs	r3, #1
 800354c:	b29a      	uxth	r2, r3
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003556:	b29b      	uxth	r3, r3
 8003558:	3b01      	subs	r3, #1
 800355a:	b29a      	uxth	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003560:	e0ee      	b.n	8003740 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003564:	9300      	str	r3, [sp, #0]
 8003566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003568:	2200      	movs	r2, #0
 800356a:	4981      	ldr	r1, [pc, #516]	@ (8003770 <HAL_I2C_Mem_Read+0x4dc>)
 800356c:	68f8      	ldr	r0, [r7, #12]
 800356e:	f000 fa83 	bl	8003a78 <I2C_WaitOnFlagUntilTimeout>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d001      	beq.n	800357c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e0f5      	b.n	8003768 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800358a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800358c:	b672      	cpsid	i
}
 800358e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	691a      	ldr	r2, [r3, #16]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800359a:	b2d2      	uxtb	r2, r2
 800359c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a2:	1c5a      	adds	r2, r3, #1
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035ac:	3b01      	subs	r3, #1
 80035ae:	b29a      	uxth	r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	3b01      	subs	r3, #1
 80035bc:	b29a      	uxth	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80035c2:	4b6c      	ldr	r3, [pc, #432]	@ (8003774 <HAL_I2C_Mem_Read+0x4e0>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	08db      	lsrs	r3, r3, #3
 80035c8:	4a6b      	ldr	r2, [pc, #428]	@ (8003778 <HAL_I2C_Mem_Read+0x4e4>)
 80035ca:	fba2 2303 	umull	r2, r3, r2, r3
 80035ce:	0a1a      	lsrs	r2, r3, #8
 80035d0:	4613      	mov	r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	4413      	add	r3, r2
 80035d6:	00da      	lsls	r2, r3, #3
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80035dc:	6a3b      	ldr	r3, [r7, #32]
 80035de:	3b01      	subs	r3, #1
 80035e0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80035e2:	6a3b      	ldr	r3, [r7, #32]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d118      	bne.n	800361a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2220      	movs	r2, #32
 80035f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003602:	f043 0220 	orr.w	r2, r3, #32
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800360a:	b662      	cpsie	i
}
 800360c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e0a6      	b.n	8003768 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	695b      	ldr	r3, [r3, #20]
 8003620:	f003 0304 	and.w	r3, r3, #4
 8003624:	2b04      	cmp	r3, #4
 8003626:	d1d9      	bne.n	80035dc <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003636:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	691a      	ldr	r2, [r3, #16]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003642:	b2d2      	uxtb	r2, r2
 8003644:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800364a:	1c5a      	adds	r2, r3, #1
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003654:	3b01      	subs	r3, #1
 8003656:	b29a      	uxth	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003660:	b29b      	uxth	r3, r3
 8003662:	3b01      	subs	r3, #1
 8003664:	b29a      	uxth	r2, r3
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800366a:	b662      	cpsie	i
}
 800366c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	691a      	ldr	r2, [r3, #16]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003678:	b2d2      	uxtb	r2, r2
 800367a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003680:	1c5a      	adds	r2, r3, #1
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800368a:	3b01      	subs	r3, #1
 800368c:	b29a      	uxth	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003696:	b29b      	uxth	r3, r3
 8003698:	3b01      	subs	r3, #1
 800369a:	b29a      	uxth	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80036a0:	e04e      	b.n	8003740 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036a4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80036a6:	68f8      	ldr	r0, [r7, #12]
 80036a8:	f000 fb90 	bl	8003dcc <I2C_WaitOnRXNEFlagUntilTimeout>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d001      	beq.n	80036b6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e058      	b.n	8003768 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	691a      	ldr	r2, [r3, #16]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c0:	b2d2      	uxtb	r2, r2
 80036c2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c8:	1c5a      	adds	r2, r3, #1
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036d2:	3b01      	subs	r3, #1
 80036d4:	b29a      	uxth	r2, r3
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036de:	b29b      	uxth	r3, r3
 80036e0:	3b01      	subs	r3, #1
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	695b      	ldr	r3, [r3, #20]
 80036ee:	f003 0304 	and.w	r3, r3, #4
 80036f2:	2b04      	cmp	r3, #4
 80036f4:	d124      	bne.n	8003740 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036fa:	2b03      	cmp	r3, #3
 80036fc:	d107      	bne.n	800370e <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800370c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	691a      	ldr	r2, [r3, #16]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003718:	b2d2      	uxtb	r2, r2
 800371a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003720:	1c5a      	adds	r2, r3, #1
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800372a:	3b01      	subs	r3, #1
 800372c:	b29a      	uxth	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003736:	b29b      	uxth	r3, r3
 8003738:	3b01      	subs	r3, #1
 800373a:	b29a      	uxth	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003744:	2b00      	cmp	r3, #0
 8003746:	f47f ae88 	bne.w	800345a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2220      	movs	r2, #32
 800374e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003762:	2300      	movs	r3, #0
 8003764:	e000      	b.n	8003768 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8003766:	2302      	movs	r3, #2
  }
}
 8003768:	4618      	mov	r0, r3
 800376a:	3728      	adds	r7, #40	@ 0x28
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	00010004 	.word	0x00010004
 8003774:	20000050 	.word	0x20000050
 8003778:	14f8b589 	.word	0x14f8b589

0800377c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b088      	sub	sp, #32
 8003780:	af02      	add	r7, sp, #8
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	4608      	mov	r0, r1
 8003786:	4611      	mov	r1, r2
 8003788:	461a      	mov	r2, r3
 800378a:	4603      	mov	r3, r0
 800378c:	817b      	strh	r3, [r7, #10]
 800378e:	460b      	mov	r3, r1
 8003790:	813b      	strh	r3, [r7, #8]
 8003792:	4613      	mov	r3, r2
 8003794:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037a4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a8:	9300      	str	r3, [sp, #0]
 80037aa:	6a3b      	ldr	r3, [r7, #32]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80037b2:	68f8      	ldr	r0, [r7, #12]
 80037b4:	f000 f960 	bl	8003a78 <I2C_WaitOnFlagUntilTimeout>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00d      	beq.n	80037da <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037cc:	d103      	bne.n	80037d6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037d4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e05f      	b.n	800389a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037da:	897b      	ldrh	r3, [r7, #10]
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	461a      	mov	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80037e8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ec:	6a3a      	ldr	r2, [r7, #32]
 80037ee:	492d      	ldr	r1, [pc, #180]	@ (80038a4 <I2C_RequestMemoryWrite+0x128>)
 80037f0:	68f8      	ldr	r0, [r7, #12]
 80037f2:	f000 f9bb 	bl	8003b6c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d001      	beq.n	8003800 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e04c      	b.n	800389a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003800:	2300      	movs	r3, #0
 8003802:	617b      	str	r3, [r7, #20]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	695b      	ldr	r3, [r3, #20]
 800380a:	617b      	str	r3, [r7, #20]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	617b      	str	r3, [r7, #20]
 8003814:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003816:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003818:	6a39      	ldr	r1, [r7, #32]
 800381a:	68f8      	ldr	r0, [r7, #12]
 800381c:	f000 fa46 	bl	8003cac <I2C_WaitOnTXEFlagUntilTimeout>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00d      	beq.n	8003842 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382a:	2b04      	cmp	r3, #4
 800382c:	d107      	bne.n	800383e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800383c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e02b      	b.n	800389a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003842:	88fb      	ldrh	r3, [r7, #6]
 8003844:	2b01      	cmp	r3, #1
 8003846:	d105      	bne.n	8003854 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003848:	893b      	ldrh	r3, [r7, #8]
 800384a:	b2da      	uxtb	r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	611a      	str	r2, [r3, #16]
 8003852:	e021      	b.n	8003898 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003854:	893b      	ldrh	r3, [r7, #8]
 8003856:	0a1b      	lsrs	r3, r3, #8
 8003858:	b29b      	uxth	r3, r3
 800385a:	b2da      	uxtb	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003862:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003864:	6a39      	ldr	r1, [r7, #32]
 8003866:	68f8      	ldr	r0, [r7, #12]
 8003868:	f000 fa20 	bl	8003cac <I2C_WaitOnTXEFlagUntilTimeout>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00d      	beq.n	800388e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003876:	2b04      	cmp	r3, #4
 8003878:	d107      	bne.n	800388a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003888:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e005      	b.n	800389a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800388e:	893b      	ldrh	r3, [r7, #8]
 8003890:	b2da      	uxtb	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3718      	adds	r7, #24
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	00010002 	.word	0x00010002

080038a8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b088      	sub	sp, #32
 80038ac:	af02      	add	r7, sp, #8
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	4608      	mov	r0, r1
 80038b2:	4611      	mov	r1, r2
 80038b4:	461a      	mov	r2, r3
 80038b6:	4603      	mov	r3, r0
 80038b8:	817b      	strh	r3, [r7, #10]
 80038ba:	460b      	mov	r3, r1
 80038bc:	813b      	strh	r3, [r7, #8]
 80038be:	4613      	mov	r3, r2
 80038c0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80038d0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e4:	9300      	str	r3, [sp, #0]
 80038e6:	6a3b      	ldr	r3, [r7, #32]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80038ee:	68f8      	ldr	r0, [r7, #12]
 80038f0:	f000 f8c2 	bl	8003a78 <I2C_WaitOnFlagUntilTimeout>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00d      	beq.n	8003916 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003904:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003908:	d103      	bne.n	8003912 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003910:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e0aa      	b.n	8003a6c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003916:	897b      	ldrh	r3, [r7, #10]
 8003918:	b2db      	uxtb	r3, r3
 800391a:	461a      	mov	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003924:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003928:	6a3a      	ldr	r2, [r7, #32]
 800392a:	4952      	ldr	r1, [pc, #328]	@ (8003a74 <I2C_RequestMemoryRead+0x1cc>)
 800392c:	68f8      	ldr	r0, [r7, #12]
 800392e:	f000 f91d 	bl	8003b6c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d001      	beq.n	800393c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e097      	b.n	8003a6c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800393c:	2300      	movs	r3, #0
 800393e:	617b      	str	r3, [r7, #20]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	617b      	str	r3, [r7, #20]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	617b      	str	r3, [r7, #20]
 8003950:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003952:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003954:	6a39      	ldr	r1, [r7, #32]
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	f000 f9a8 	bl	8003cac <I2C_WaitOnTXEFlagUntilTimeout>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00d      	beq.n	800397e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003966:	2b04      	cmp	r3, #4
 8003968:	d107      	bne.n	800397a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003978:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e076      	b.n	8003a6c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800397e:	88fb      	ldrh	r3, [r7, #6]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d105      	bne.n	8003990 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003984:	893b      	ldrh	r3, [r7, #8]
 8003986:	b2da      	uxtb	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	611a      	str	r2, [r3, #16]
 800398e:	e021      	b.n	80039d4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003990:	893b      	ldrh	r3, [r7, #8]
 8003992:	0a1b      	lsrs	r3, r3, #8
 8003994:	b29b      	uxth	r3, r3
 8003996:	b2da      	uxtb	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800399e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039a0:	6a39      	ldr	r1, [r7, #32]
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f000 f982 	bl	8003cac <I2C_WaitOnTXEFlagUntilTimeout>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00d      	beq.n	80039ca <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b2:	2b04      	cmp	r3, #4
 80039b4:	d107      	bne.n	80039c6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e050      	b.n	8003a6c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80039ca:	893b      	ldrh	r3, [r7, #8]
 80039cc:	b2da      	uxtb	r2, r3
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039d6:	6a39      	ldr	r1, [r7, #32]
 80039d8:	68f8      	ldr	r0, [r7, #12]
 80039da:	f000 f967 	bl	8003cac <I2C_WaitOnTXEFlagUntilTimeout>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00d      	beq.n	8003a00 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e8:	2b04      	cmp	r3, #4
 80039ea:	d107      	bne.n	80039fc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039fa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e035      	b.n	8003a6c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a0e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a12:	9300      	str	r3, [sp, #0]
 8003a14:	6a3b      	ldr	r3, [r7, #32]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003a1c:	68f8      	ldr	r0, [r7, #12]
 8003a1e:	f000 f82b 	bl	8003a78 <I2C_WaitOnFlagUntilTimeout>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00d      	beq.n	8003a44 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a36:	d103      	bne.n	8003a40 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a3e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e013      	b.n	8003a6c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003a44:	897b      	ldrh	r3, [r7, #10]
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	f043 0301 	orr.w	r3, r3, #1
 8003a4c:	b2da      	uxtb	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a56:	6a3a      	ldr	r2, [r7, #32]
 8003a58:	4906      	ldr	r1, [pc, #24]	@ (8003a74 <I2C_RequestMemoryRead+0x1cc>)
 8003a5a:	68f8      	ldr	r0, [r7, #12]
 8003a5c:	f000 f886 	bl	8003b6c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d001      	beq.n	8003a6a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e000      	b.n	8003a6c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003a6a:	2300      	movs	r3, #0
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3718      	adds	r7, #24
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	00010002 	.word	0x00010002

08003a78 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	603b      	str	r3, [r7, #0]
 8003a84:	4613      	mov	r3, r2
 8003a86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a88:	e048      	b.n	8003b1c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a90:	d044      	beq.n	8003b1c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a92:	f7fe fa21 	bl	8001ed8 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	683a      	ldr	r2, [r7, #0]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d302      	bcc.n	8003aa8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d139      	bne.n	8003b1c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	0c1b      	lsrs	r3, r3, #16
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d10d      	bne.n	8003ace <I2C_WaitOnFlagUntilTimeout+0x56>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	695b      	ldr	r3, [r3, #20]
 8003ab8:	43da      	mvns	r2, r3
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	4013      	ands	r3, r2
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	bf0c      	ite	eq
 8003ac4:	2301      	moveq	r3, #1
 8003ac6:	2300      	movne	r3, #0
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	461a      	mov	r2, r3
 8003acc:	e00c      	b.n	8003ae8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	43da      	mvns	r2, r3
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	bf0c      	ite	eq
 8003ae0:	2301      	moveq	r3, #1
 8003ae2:	2300      	movne	r3, #0
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	79fb      	ldrb	r3, [r7, #7]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d116      	bne.n	8003b1c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2220      	movs	r2, #32
 8003af8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b08:	f043 0220 	orr.w	r2, r3, #32
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e023      	b.n	8003b64 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	0c1b      	lsrs	r3, r3, #16
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d10d      	bne.n	8003b42 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	695b      	ldr	r3, [r3, #20]
 8003b2c:	43da      	mvns	r2, r3
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	4013      	ands	r3, r2
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	bf0c      	ite	eq
 8003b38:	2301      	moveq	r3, #1
 8003b3a:	2300      	movne	r3, #0
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	461a      	mov	r2, r3
 8003b40:	e00c      	b.n	8003b5c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	43da      	mvns	r2, r3
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	bf0c      	ite	eq
 8003b54:	2301      	moveq	r3, #1
 8003b56:	2300      	movne	r3, #0
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	79fb      	ldrb	r3, [r7, #7]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d093      	beq.n	8003a8a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3710      	adds	r7, #16
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	607a      	str	r2, [r7, #4]
 8003b78:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b7a:	e071      	b.n	8003c60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b8a:	d123      	bne.n	8003bd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b9a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003ba4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2220      	movs	r2, #32
 8003bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc0:	f043 0204 	orr.w	r2, r3, #4
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e067      	b.n	8003ca4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bda:	d041      	beq.n	8003c60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bdc:	f7fe f97c 	bl	8001ed8 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d302      	bcc.n	8003bf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d136      	bne.n	8003c60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	0c1b      	lsrs	r3, r3, #16
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d10c      	bne.n	8003c16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	695b      	ldr	r3, [r3, #20]
 8003c02:	43da      	mvns	r2, r3
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	4013      	ands	r3, r2
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	bf14      	ite	ne
 8003c0e:	2301      	movne	r3, #1
 8003c10:	2300      	moveq	r3, #0
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	e00b      	b.n	8003c2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	43da      	mvns	r2, r3
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	4013      	ands	r3, r2
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	bf14      	ite	ne
 8003c28:	2301      	movne	r3, #1
 8003c2a:	2300      	moveq	r3, #0
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d016      	beq.n	8003c60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2200      	movs	r2, #0
 8003c36:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2220      	movs	r2, #32
 8003c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c4c:	f043 0220 	orr.w	r2, r3, #32
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e021      	b.n	8003ca4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	0c1b      	lsrs	r3, r3, #16
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d10c      	bne.n	8003c84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	695b      	ldr	r3, [r3, #20]
 8003c70:	43da      	mvns	r2, r3
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	4013      	ands	r3, r2
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	bf14      	ite	ne
 8003c7c:	2301      	movne	r3, #1
 8003c7e:	2300      	moveq	r3, #0
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	e00b      	b.n	8003c9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	699b      	ldr	r3, [r3, #24]
 8003c8a:	43da      	mvns	r2, r3
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	4013      	ands	r3, r2
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	bf14      	ite	ne
 8003c96:	2301      	movne	r3, #1
 8003c98:	2300      	moveq	r3, #0
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f47f af6d 	bne.w	8003b7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003ca2:	2300      	movs	r3, #0
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3710      	adds	r7, #16
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cb8:	e034      	b.n	8003d24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003cba:	68f8      	ldr	r0, [r7, #12]
 8003cbc:	f000 f8e3 	bl	8003e86 <I2C_IsAcknowledgeFailed>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e034      	b.n	8003d34 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd0:	d028      	beq.n	8003d24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cd2:	f7fe f901 	bl	8001ed8 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	68ba      	ldr	r2, [r7, #8]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d302      	bcc.n	8003ce8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d11d      	bne.n	8003d24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cf2:	2b80      	cmp	r3, #128	@ 0x80
 8003cf4:	d016      	beq.n	8003d24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2220      	movs	r2, #32
 8003d00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d10:	f043 0220 	orr.w	r2, r3, #32
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e007      	b.n	8003d34 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d2e:	2b80      	cmp	r3, #128	@ 0x80
 8003d30:	d1c3      	bne.n	8003cba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3710      	adds	r7, #16
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d48:	e034      	b.n	8003db4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d4a:	68f8      	ldr	r0, [r7, #12]
 8003d4c:	f000 f89b 	bl	8003e86 <I2C_IsAcknowledgeFailed>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d001      	beq.n	8003d5a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e034      	b.n	8003dc4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d60:	d028      	beq.n	8003db4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d62:	f7fe f8b9 	bl	8001ed8 <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	68ba      	ldr	r2, [r7, #8]
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d302      	bcc.n	8003d78 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d11d      	bne.n	8003db4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	f003 0304 	and.w	r3, r3, #4
 8003d82:	2b04      	cmp	r3, #4
 8003d84:	d016      	beq.n	8003db4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2220      	movs	r2, #32
 8003d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da0:	f043 0220 	orr.w	r2, r3, #32
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e007      	b.n	8003dc4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	f003 0304 	and.w	r3, r3, #4
 8003dbe:	2b04      	cmp	r3, #4
 8003dc0:	d1c3      	bne.n	8003d4a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3710      	adds	r7, #16
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003dd8:	e049      	b.n	8003e6e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	695b      	ldr	r3, [r3, #20]
 8003de0:	f003 0310 	and.w	r3, r3, #16
 8003de4:	2b10      	cmp	r3, #16
 8003de6:	d119      	bne.n	8003e1c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f06f 0210 	mvn.w	r2, #16
 8003df0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2220      	movs	r2, #32
 8003dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e030      	b.n	8003e7e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e1c:	f7fe f85c 	bl	8001ed8 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	68ba      	ldr	r2, [r7, #8]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d302      	bcc.n	8003e32 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d11d      	bne.n	8003e6e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	695b      	ldr	r3, [r3, #20]
 8003e38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e3c:	2b40      	cmp	r3, #64	@ 0x40
 8003e3e:	d016      	beq.n	8003e6e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2200      	movs	r2, #0
 8003e44:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2220      	movs	r2, #32
 8003e4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e5a:	f043 0220 	orr.w	r2, r3, #32
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e007      	b.n	8003e7e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e78:	2b40      	cmp	r3, #64	@ 0x40
 8003e7a:	d1ae      	bne.n	8003dda <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003e86:	b480      	push	{r7}
 8003e88:	b083      	sub	sp, #12
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e9c:	d11b      	bne.n	8003ed6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003ea6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2220      	movs	r2, #32
 8003eb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec2:	f043 0204 	orr.w	r2, r3, #4
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e000      	b.n	8003ed8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bc80      	pop	{r7}
 8003ee0:	4770      	bx	lr
	...

08003ee4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b086      	sub	sp, #24
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d101      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e272      	b.n	80043dc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	f000 8087 	beq.w	8004012 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f04:	4b92      	ldr	r3, [pc, #584]	@ (8004150 <HAL_RCC_OscConfig+0x26c>)
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f003 030c 	and.w	r3, r3, #12
 8003f0c:	2b04      	cmp	r3, #4
 8003f0e:	d00c      	beq.n	8003f2a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003f10:	4b8f      	ldr	r3, [pc, #572]	@ (8004150 <HAL_RCC_OscConfig+0x26c>)
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f003 030c 	and.w	r3, r3, #12
 8003f18:	2b08      	cmp	r3, #8
 8003f1a:	d112      	bne.n	8003f42 <HAL_RCC_OscConfig+0x5e>
 8003f1c:	4b8c      	ldr	r3, [pc, #560]	@ (8004150 <HAL_RCC_OscConfig+0x26c>)
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f28:	d10b      	bne.n	8003f42 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f2a:	4b89      	ldr	r3, [pc, #548]	@ (8004150 <HAL_RCC_OscConfig+0x26c>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d06c      	beq.n	8004010 <HAL_RCC_OscConfig+0x12c>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d168      	bne.n	8004010 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e24c      	b.n	80043dc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f4a:	d106      	bne.n	8003f5a <HAL_RCC_OscConfig+0x76>
 8003f4c:	4b80      	ldr	r3, [pc, #512]	@ (8004150 <HAL_RCC_OscConfig+0x26c>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a7f      	ldr	r2, [pc, #508]	@ (8004150 <HAL_RCC_OscConfig+0x26c>)
 8003f52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f56:	6013      	str	r3, [r2, #0]
 8003f58:	e02e      	b.n	8003fb8 <HAL_RCC_OscConfig+0xd4>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d10c      	bne.n	8003f7c <HAL_RCC_OscConfig+0x98>
 8003f62:	4b7b      	ldr	r3, [pc, #492]	@ (8004150 <HAL_RCC_OscConfig+0x26c>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a7a      	ldr	r2, [pc, #488]	@ (8004150 <HAL_RCC_OscConfig+0x26c>)
 8003f68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f6c:	6013      	str	r3, [r2, #0]
 8003f6e:	4b78      	ldr	r3, [pc, #480]	@ (8004150 <HAL_RCC_OscConfig+0x26c>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a77      	ldr	r2, [pc, #476]	@ (8004150 <HAL_RCC_OscConfig+0x26c>)
 8003f74:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f78:	6013      	str	r3, [r2, #0]
 8003f7a:	e01d      	b.n	8003fb8 <HAL_RCC_OscConfig+0xd4>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f84:	d10c      	bne.n	8003fa0 <HAL_RCC_OscConfig+0xbc>
 8003f86:	4b72      	ldr	r3, [pc, #456]	@ (8004150 <HAL_RCC_OscConfig+0x26c>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a71      	ldr	r2, [pc, #452]	@ (8004150 <HAL_RCC_OscConfig+0x26c>)
 8003f8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f90:	6013      	str	r3, [r2, #0]
 8003f92:	4b6f      	ldr	r3, [pc, #444]	@ (8004150 <HAL_RCC_OscConfig+0x26c>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a6e      	ldr	r2, [pc, #440]	@ (8004150 <HAL_RCC_OscConfig+0x26c>)
 8003f98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f9c:	6013      	str	r3, [r2, #0]
 8003f9e:	e00b      	b.n	8003fb8 <HAL_RCC_OscConfig+0xd4>
 8003fa0:	4b6b      	ldr	r3, [pc, #428]	@ (8004150 <HAL_RCC_OscConfig+0x26c>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a6a      	ldr	r2, [pc, #424]	@ (8004150 <HAL_RCC_OscConfig+0x26c>)
 8003fa6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003faa:	6013      	str	r3, [r2, #0]
 8003fac:	4b68      	ldr	r3, [pc, #416]	@ (8004150 <HAL_RCC_OscConfig+0x26c>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a67      	ldr	r2, [pc, #412]	@ (8004150 <HAL_RCC_OscConfig+0x26c>)
 8003fb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003fb6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d013      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc0:	f7fd ff8a 	bl	8001ed8 <HAL_GetTick>
 8003fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fc6:	e008      	b.n	8003fda <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fc8:	f7fd ff86 	bl	8001ed8 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	2b64      	cmp	r3, #100	@ 0x64
 8003fd4:	d901      	bls.n	8003fda <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e200      	b.n	80043dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fda:	4b5d      	ldr	r3, [pc, #372]	@ (8004150 <HAL_RCC_OscConfig+0x26c>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d0f0      	beq.n	8003fc8 <HAL_RCC_OscConfig+0xe4>
 8003fe6:	e014      	b.n	8004012 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe8:	f7fd ff76 	bl	8001ed8 <HAL_GetTick>
 8003fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fee:	e008      	b.n	8004002 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ff0:	f7fd ff72 	bl	8001ed8 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b64      	cmp	r3, #100	@ 0x64
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e1ec      	b.n	80043dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004002:	4b53      	ldr	r3, [pc, #332]	@ (8004150 <HAL_RCC_OscConfig+0x26c>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1f0      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x10c>
 800400e:	e000      	b.n	8004012 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004010:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d063      	beq.n	80040e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800401e:	4b4c      	ldr	r3, [pc, #304]	@ (8004150 <HAL_RCC_OscConfig+0x26c>)
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f003 030c 	and.w	r3, r3, #12
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00b      	beq.n	8004042 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800402a:	4b49      	ldr	r3, [pc, #292]	@ (8004150 <HAL_RCC_OscConfig+0x26c>)
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f003 030c 	and.w	r3, r3, #12
 8004032:	2b08      	cmp	r3, #8
 8004034:	d11c      	bne.n	8004070 <HAL_RCC_OscConfig+0x18c>
 8004036:	4b46      	ldr	r3, [pc, #280]	@ (8004150 <HAL_RCC_OscConfig+0x26c>)
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d116      	bne.n	8004070 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004042:	4b43      	ldr	r3, [pc, #268]	@ (8004150 <HAL_RCC_OscConfig+0x26c>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0302 	and.w	r3, r3, #2
 800404a:	2b00      	cmp	r3, #0
 800404c:	d005      	beq.n	800405a <HAL_RCC_OscConfig+0x176>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	2b01      	cmp	r3, #1
 8004054:	d001      	beq.n	800405a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e1c0      	b.n	80043dc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800405a:	4b3d      	ldr	r3, [pc, #244]	@ (8004150 <HAL_RCC_OscConfig+0x26c>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	00db      	lsls	r3, r3, #3
 8004068:	4939      	ldr	r1, [pc, #228]	@ (8004150 <HAL_RCC_OscConfig+0x26c>)
 800406a:	4313      	orrs	r3, r2
 800406c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800406e:	e03a      	b.n	80040e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	691b      	ldr	r3, [r3, #16]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d020      	beq.n	80040ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004078:	4b36      	ldr	r3, [pc, #216]	@ (8004154 <HAL_RCC_OscConfig+0x270>)
 800407a:	2201      	movs	r2, #1
 800407c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800407e:	f7fd ff2b 	bl	8001ed8 <HAL_GetTick>
 8004082:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004084:	e008      	b.n	8004098 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004086:	f7fd ff27 	bl	8001ed8 <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	2b02      	cmp	r3, #2
 8004092:	d901      	bls.n	8004098 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e1a1      	b.n	80043dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004098:	4b2d      	ldr	r3, [pc, #180]	@ (8004150 <HAL_RCC_OscConfig+0x26c>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0302 	and.w	r3, r3, #2
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d0f0      	beq.n	8004086 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040a4:	4b2a      	ldr	r3, [pc, #168]	@ (8004150 <HAL_RCC_OscConfig+0x26c>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	695b      	ldr	r3, [r3, #20]
 80040b0:	00db      	lsls	r3, r3, #3
 80040b2:	4927      	ldr	r1, [pc, #156]	@ (8004150 <HAL_RCC_OscConfig+0x26c>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	600b      	str	r3, [r1, #0]
 80040b8:	e015      	b.n	80040e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040ba:	4b26      	ldr	r3, [pc, #152]	@ (8004154 <HAL_RCC_OscConfig+0x270>)
 80040bc:	2200      	movs	r2, #0
 80040be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c0:	f7fd ff0a 	bl	8001ed8 <HAL_GetTick>
 80040c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040c6:	e008      	b.n	80040da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040c8:	f7fd ff06 	bl	8001ed8 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d901      	bls.n	80040da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e180      	b.n	80043dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040da:	4b1d      	ldr	r3, [pc, #116]	@ (8004150 <HAL_RCC_OscConfig+0x26c>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0302 	and.w	r3, r3, #2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1f0      	bne.n	80040c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0308 	and.w	r3, r3, #8
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d03a      	beq.n	8004168 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	699b      	ldr	r3, [r3, #24]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d019      	beq.n	800412e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040fa:	4b17      	ldr	r3, [pc, #92]	@ (8004158 <HAL_RCC_OscConfig+0x274>)
 80040fc:	2201      	movs	r2, #1
 80040fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004100:	f7fd feea 	bl	8001ed8 <HAL_GetTick>
 8004104:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004106:	e008      	b.n	800411a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004108:	f7fd fee6 	bl	8001ed8 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b02      	cmp	r3, #2
 8004114:	d901      	bls.n	800411a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e160      	b.n	80043dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800411a:	4b0d      	ldr	r3, [pc, #52]	@ (8004150 <HAL_RCC_OscConfig+0x26c>)
 800411c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b00      	cmp	r3, #0
 8004124:	d0f0      	beq.n	8004108 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004126:	2001      	movs	r0, #1
 8004128:	f000 face 	bl	80046c8 <RCC_Delay>
 800412c:	e01c      	b.n	8004168 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800412e:	4b0a      	ldr	r3, [pc, #40]	@ (8004158 <HAL_RCC_OscConfig+0x274>)
 8004130:	2200      	movs	r2, #0
 8004132:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004134:	f7fd fed0 	bl	8001ed8 <HAL_GetTick>
 8004138:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800413a:	e00f      	b.n	800415c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800413c:	f7fd fecc 	bl	8001ed8 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	2b02      	cmp	r3, #2
 8004148:	d908      	bls.n	800415c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e146      	b.n	80043dc <HAL_RCC_OscConfig+0x4f8>
 800414e:	bf00      	nop
 8004150:	40021000 	.word	0x40021000
 8004154:	42420000 	.word	0x42420000
 8004158:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800415c:	4b92      	ldr	r3, [pc, #584]	@ (80043a8 <HAL_RCC_OscConfig+0x4c4>)
 800415e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004160:	f003 0302 	and.w	r3, r3, #2
 8004164:	2b00      	cmp	r3, #0
 8004166:	d1e9      	bne.n	800413c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0304 	and.w	r3, r3, #4
 8004170:	2b00      	cmp	r3, #0
 8004172:	f000 80a6 	beq.w	80042c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004176:	2300      	movs	r3, #0
 8004178:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800417a:	4b8b      	ldr	r3, [pc, #556]	@ (80043a8 <HAL_RCC_OscConfig+0x4c4>)
 800417c:	69db      	ldr	r3, [r3, #28]
 800417e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d10d      	bne.n	80041a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004186:	4b88      	ldr	r3, [pc, #544]	@ (80043a8 <HAL_RCC_OscConfig+0x4c4>)
 8004188:	69db      	ldr	r3, [r3, #28]
 800418a:	4a87      	ldr	r2, [pc, #540]	@ (80043a8 <HAL_RCC_OscConfig+0x4c4>)
 800418c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004190:	61d3      	str	r3, [r2, #28]
 8004192:	4b85      	ldr	r3, [pc, #532]	@ (80043a8 <HAL_RCC_OscConfig+0x4c4>)
 8004194:	69db      	ldr	r3, [r3, #28]
 8004196:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800419a:	60bb      	str	r3, [r7, #8]
 800419c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800419e:	2301      	movs	r3, #1
 80041a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041a2:	4b82      	ldr	r3, [pc, #520]	@ (80043ac <HAL_RCC_OscConfig+0x4c8>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d118      	bne.n	80041e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041ae:	4b7f      	ldr	r3, [pc, #508]	@ (80043ac <HAL_RCC_OscConfig+0x4c8>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a7e      	ldr	r2, [pc, #504]	@ (80043ac <HAL_RCC_OscConfig+0x4c8>)
 80041b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041ba:	f7fd fe8d 	bl	8001ed8 <HAL_GetTick>
 80041be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041c0:	e008      	b.n	80041d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041c2:	f7fd fe89 	bl	8001ed8 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	2b64      	cmp	r3, #100	@ 0x64
 80041ce:	d901      	bls.n	80041d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	e103      	b.n	80043dc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041d4:	4b75      	ldr	r3, [pc, #468]	@ (80043ac <HAL_RCC_OscConfig+0x4c8>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d0f0      	beq.n	80041c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d106      	bne.n	80041f6 <HAL_RCC_OscConfig+0x312>
 80041e8:	4b6f      	ldr	r3, [pc, #444]	@ (80043a8 <HAL_RCC_OscConfig+0x4c4>)
 80041ea:	6a1b      	ldr	r3, [r3, #32]
 80041ec:	4a6e      	ldr	r2, [pc, #440]	@ (80043a8 <HAL_RCC_OscConfig+0x4c4>)
 80041ee:	f043 0301 	orr.w	r3, r3, #1
 80041f2:	6213      	str	r3, [r2, #32]
 80041f4:	e02d      	b.n	8004252 <HAL_RCC_OscConfig+0x36e>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d10c      	bne.n	8004218 <HAL_RCC_OscConfig+0x334>
 80041fe:	4b6a      	ldr	r3, [pc, #424]	@ (80043a8 <HAL_RCC_OscConfig+0x4c4>)
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	4a69      	ldr	r2, [pc, #420]	@ (80043a8 <HAL_RCC_OscConfig+0x4c4>)
 8004204:	f023 0301 	bic.w	r3, r3, #1
 8004208:	6213      	str	r3, [r2, #32]
 800420a:	4b67      	ldr	r3, [pc, #412]	@ (80043a8 <HAL_RCC_OscConfig+0x4c4>)
 800420c:	6a1b      	ldr	r3, [r3, #32]
 800420e:	4a66      	ldr	r2, [pc, #408]	@ (80043a8 <HAL_RCC_OscConfig+0x4c4>)
 8004210:	f023 0304 	bic.w	r3, r3, #4
 8004214:	6213      	str	r3, [r2, #32]
 8004216:	e01c      	b.n	8004252 <HAL_RCC_OscConfig+0x36e>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	2b05      	cmp	r3, #5
 800421e:	d10c      	bne.n	800423a <HAL_RCC_OscConfig+0x356>
 8004220:	4b61      	ldr	r3, [pc, #388]	@ (80043a8 <HAL_RCC_OscConfig+0x4c4>)
 8004222:	6a1b      	ldr	r3, [r3, #32]
 8004224:	4a60      	ldr	r2, [pc, #384]	@ (80043a8 <HAL_RCC_OscConfig+0x4c4>)
 8004226:	f043 0304 	orr.w	r3, r3, #4
 800422a:	6213      	str	r3, [r2, #32]
 800422c:	4b5e      	ldr	r3, [pc, #376]	@ (80043a8 <HAL_RCC_OscConfig+0x4c4>)
 800422e:	6a1b      	ldr	r3, [r3, #32]
 8004230:	4a5d      	ldr	r2, [pc, #372]	@ (80043a8 <HAL_RCC_OscConfig+0x4c4>)
 8004232:	f043 0301 	orr.w	r3, r3, #1
 8004236:	6213      	str	r3, [r2, #32]
 8004238:	e00b      	b.n	8004252 <HAL_RCC_OscConfig+0x36e>
 800423a:	4b5b      	ldr	r3, [pc, #364]	@ (80043a8 <HAL_RCC_OscConfig+0x4c4>)
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	4a5a      	ldr	r2, [pc, #360]	@ (80043a8 <HAL_RCC_OscConfig+0x4c4>)
 8004240:	f023 0301 	bic.w	r3, r3, #1
 8004244:	6213      	str	r3, [r2, #32]
 8004246:	4b58      	ldr	r3, [pc, #352]	@ (80043a8 <HAL_RCC_OscConfig+0x4c4>)
 8004248:	6a1b      	ldr	r3, [r3, #32]
 800424a:	4a57      	ldr	r2, [pc, #348]	@ (80043a8 <HAL_RCC_OscConfig+0x4c4>)
 800424c:	f023 0304 	bic.w	r3, r3, #4
 8004250:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d015      	beq.n	8004286 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800425a:	f7fd fe3d 	bl	8001ed8 <HAL_GetTick>
 800425e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004260:	e00a      	b.n	8004278 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004262:	f7fd fe39 	bl	8001ed8 <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004270:	4293      	cmp	r3, r2
 8004272:	d901      	bls.n	8004278 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e0b1      	b.n	80043dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004278:	4b4b      	ldr	r3, [pc, #300]	@ (80043a8 <HAL_RCC_OscConfig+0x4c4>)
 800427a:	6a1b      	ldr	r3, [r3, #32]
 800427c:	f003 0302 	and.w	r3, r3, #2
 8004280:	2b00      	cmp	r3, #0
 8004282:	d0ee      	beq.n	8004262 <HAL_RCC_OscConfig+0x37e>
 8004284:	e014      	b.n	80042b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004286:	f7fd fe27 	bl	8001ed8 <HAL_GetTick>
 800428a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800428c:	e00a      	b.n	80042a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800428e:	f7fd fe23 	bl	8001ed8 <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	f241 3288 	movw	r2, #5000	@ 0x1388
 800429c:	4293      	cmp	r3, r2
 800429e:	d901      	bls.n	80042a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	e09b      	b.n	80043dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042a4:	4b40      	ldr	r3, [pc, #256]	@ (80043a8 <HAL_RCC_OscConfig+0x4c4>)
 80042a6:	6a1b      	ldr	r3, [r3, #32]
 80042a8:	f003 0302 	and.w	r3, r3, #2
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d1ee      	bne.n	800428e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80042b0:	7dfb      	ldrb	r3, [r7, #23]
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d105      	bne.n	80042c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042b6:	4b3c      	ldr	r3, [pc, #240]	@ (80043a8 <HAL_RCC_OscConfig+0x4c4>)
 80042b8:	69db      	ldr	r3, [r3, #28]
 80042ba:	4a3b      	ldr	r2, [pc, #236]	@ (80043a8 <HAL_RCC_OscConfig+0x4c4>)
 80042bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	69db      	ldr	r3, [r3, #28]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	f000 8087 	beq.w	80043da <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042cc:	4b36      	ldr	r3, [pc, #216]	@ (80043a8 <HAL_RCC_OscConfig+0x4c4>)
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f003 030c 	and.w	r3, r3, #12
 80042d4:	2b08      	cmp	r3, #8
 80042d6:	d061      	beq.n	800439c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	69db      	ldr	r3, [r3, #28]
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d146      	bne.n	800436e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042e0:	4b33      	ldr	r3, [pc, #204]	@ (80043b0 <HAL_RCC_OscConfig+0x4cc>)
 80042e2:	2200      	movs	r2, #0
 80042e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e6:	f7fd fdf7 	bl	8001ed8 <HAL_GetTick>
 80042ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042ec:	e008      	b.n	8004300 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042ee:	f7fd fdf3 	bl	8001ed8 <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d901      	bls.n	8004300 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e06d      	b.n	80043dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004300:	4b29      	ldr	r3, [pc, #164]	@ (80043a8 <HAL_RCC_OscConfig+0x4c4>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d1f0      	bne.n	80042ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a1b      	ldr	r3, [r3, #32]
 8004310:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004314:	d108      	bne.n	8004328 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004316:	4b24      	ldr	r3, [pc, #144]	@ (80043a8 <HAL_RCC_OscConfig+0x4c4>)
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	4921      	ldr	r1, [pc, #132]	@ (80043a8 <HAL_RCC_OscConfig+0x4c4>)
 8004324:	4313      	orrs	r3, r2
 8004326:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004328:	4b1f      	ldr	r3, [pc, #124]	@ (80043a8 <HAL_RCC_OscConfig+0x4c4>)
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a19      	ldr	r1, [r3, #32]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004338:	430b      	orrs	r3, r1
 800433a:	491b      	ldr	r1, [pc, #108]	@ (80043a8 <HAL_RCC_OscConfig+0x4c4>)
 800433c:	4313      	orrs	r3, r2
 800433e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004340:	4b1b      	ldr	r3, [pc, #108]	@ (80043b0 <HAL_RCC_OscConfig+0x4cc>)
 8004342:	2201      	movs	r2, #1
 8004344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004346:	f7fd fdc7 	bl	8001ed8 <HAL_GetTick>
 800434a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800434c:	e008      	b.n	8004360 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800434e:	f7fd fdc3 	bl	8001ed8 <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	2b02      	cmp	r3, #2
 800435a:	d901      	bls.n	8004360 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e03d      	b.n	80043dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004360:	4b11      	ldr	r3, [pc, #68]	@ (80043a8 <HAL_RCC_OscConfig+0x4c4>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d0f0      	beq.n	800434e <HAL_RCC_OscConfig+0x46a>
 800436c:	e035      	b.n	80043da <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800436e:	4b10      	ldr	r3, [pc, #64]	@ (80043b0 <HAL_RCC_OscConfig+0x4cc>)
 8004370:	2200      	movs	r2, #0
 8004372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004374:	f7fd fdb0 	bl	8001ed8 <HAL_GetTick>
 8004378:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800437a:	e008      	b.n	800438e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800437c:	f7fd fdac 	bl	8001ed8 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b02      	cmp	r3, #2
 8004388:	d901      	bls.n	800438e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e026      	b.n	80043dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800438e:	4b06      	ldr	r3, [pc, #24]	@ (80043a8 <HAL_RCC_OscConfig+0x4c4>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1f0      	bne.n	800437c <HAL_RCC_OscConfig+0x498>
 800439a:	e01e      	b.n	80043da <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	69db      	ldr	r3, [r3, #28]
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d107      	bne.n	80043b4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e019      	b.n	80043dc <HAL_RCC_OscConfig+0x4f8>
 80043a8:	40021000 	.word	0x40021000
 80043ac:	40007000 	.word	0x40007000
 80043b0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80043b4:	4b0b      	ldr	r3, [pc, #44]	@ (80043e4 <HAL_RCC_OscConfig+0x500>)
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a1b      	ldr	r3, [r3, #32]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d106      	bne.n	80043d6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d001      	beq.n	80043da <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e000      	b.n	80043dc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80043da:	2300      	movs	r3, #0
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3718      	adds	r7, #24
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	40021000 	.word	0x40021000

080043e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d101      	bne.n	80043fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e0d0      	b.n	800459e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043fc:	4b6a      	ldr	r3, [pc, #424]	@ (80045a8 <HAL_RCC_ClockConfig+0x1c0>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0307 	and.w	r3, r3, #7
 8004404:	683a      	ldr	r2, [r7, #0]
 8004406:	429a      	cmp	r2, r3
 8004408:	d910      	bls.n	800442c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800440a:	4b67      	ldr	r3, [pc, #412]	@ (80045a8 <HAL_RCC_ClockConfig+0x1c0>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f023 0207 	bic.w	r2, r3, #7
 8004412:	4965      	ldr	r1, [pc, #404]	@ (80045a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	4313      	orrs	r3, r2
 8004418:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800441a:	4b63      	ldr	r3, [pc, #396]	@ (80045a8 <HAL_RCC_ClockConfig+0x1c0>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0307 	and.w	r3, r3, #7
 8004422:	683a      	ldr	r2, [r7, #0]
 8004424:	429a      	cmp	r2, r3
 8004426:	d001      	beq.n	800442c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e0b8      	b.n	800459e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0302 	and.w	r3, r3, #2
 8004434:	2b00      	cmp	r3, #0
 8004436:	d020      	beq.n	800447a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0304 	and.w	r3, r3, #4
 8004440:	2b00      	cmp	r3, #0
 8004442:	d005      	beq.n	8004450 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004444:	4b59      	ldr	r3, [pc, #356]	@ (80045ac <HAL_RCC_ClockConfig+0x1c4>)
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	4a58      	ldr	r2, [pc, #352]	@ (80045ac <HAL_RCC_ClockConfig+0x1c4>)
 800444a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800444e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0308 	and.w	r3, r3, #8
 8004458:	2b00      	cmp	r3, #0
 800445a:	d005      	beq.n	8004468 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800445c:	4b53      	ldr	r3, [pc, #332]	@ (80045ac <HAL_RCC_ClockConfig+0x1c4>)
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	4a52      	ldr	r2, [pc, #328]	@ (80045ac <HAL_RCC_ClockConfig+0x1c4>)
 8004462:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004466:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004468:	4b50      	ldr	r3, [pc, #320]	@ (80045ac <HAL_RCC_ClockConfig+0x1c4>)
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	494d      	ldr	r1, [pc, #308]	@ (80045ac <HAL_RCC_ClockConfig+0x1c4>)
 8004476:	4313      	orrs	r3, r2
 8004478:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0301 	and.w	r3, r3, #1
 8004482:	2b00      	cmp	r3, #0
 8004484:	d040      	beq.n	8004508 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	2b01      	cmp	r3, #1
 800448c:	d107      	bne.n	800449e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800448e:	4b47      	ldr	r3, [pc, #284]	@ (80045ac <HAL_RCC_ClockConfig+0x1c4>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d115      	bne.n	80044c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e07f      	b.n	800459e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d107      	bne.n	80044b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044a6:	4b41      	ldr	r3, [pc, #260]	@ (80045ac <HAL_RCC_ClockConfig+0x1c4>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d109      	bne.n	80044c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e073      	b.n	800459e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044b6:	4b3d      	ldr	r3, [pc, #244]	@ (80045ac <HAL_RCC_ClockConfig+0x1c4>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0302 	and.w	r3, r3, #2
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d101      	bne.n	80044c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e06b      	b.n	800459e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044c6:	4b39      	ldr	r3, [pc, #228]	@ (80045ac <HAL_RCC_ClockConfig+0x1c4>)
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f023 0203 	bic.w	r2, r3, #3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	4936      	ldr	r1, [pc, #216]	@ (80045ac <HAL_RCC_ClockConfig+0x1c4>)
 80044d4:	4313      	orrs	r3, r2
 80044d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044d8:	f7fd fcfe 	bl	8001ed8 <HAL_GetTick>
 80044dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044de:	e00a      	b.n	80044f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044e0:	f7fd fcfa 	bl	8001ed8 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d901      	bls.n	80044f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e053      	b.n	800459e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044f6:	4b2d      	ldr	r3, [pc, #180]	@ (80045ac <HAL_RCC_ClockConfig+0x1c4>)
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f003 020c 	and.w	r2, r3, #12
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	429a      	cmp	r2, r3
 8004506:	d1eb      	bne.n	80044e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004508:	4b27      	ldr	r3, [pc, #156]	@ (80045a8 <HAL_RCC_ClockConfig+0x1c0>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0307 	and.w	r3, r3, #7
 8004510:	683a      	ldr	r2, [r7, #0]
 8004512:	429a      	cmp	r2, r3
 8004514:	d210      	bcs.n	8004538 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004516:	4b24      	ldr	r3, [pc, #144]	@ (80045a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f023 0207 	bic.w	r2, r3, #7
 800451e:	4922      	ldr	r1, [pc, #136]	@ (80045a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	4313      	orrs	r3, r2
 8004524:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004526:	4b20      	ldr	r3, [pc, #128]	@ (80045a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0307 	and.w	r3, r3, #7
 800452e:	683a      	ldr	r2, [r7, #0]
 8004530:	429a      	cmp	r2, r3
 8004532:	d001      	beq.n	8004538 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e032      	b.n	800459e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0304 	and.w	r3, r3, #4
 8004540:	2b00      	cmp	r3, #0
 8004542:	d008      	beq.n	8004556 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004544:	4b19      	ldr	r3, [pc, #100]	@ (80045ac <HAL_RCC_ClockConfig+0x1c4>)
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	4916      	ldr	r1, [pc, #88]	@ (80045ac <HAL_RCC_ClockConfig+0x1c4>)
 8004552:	4313      	orrs	r3, r2
 8004554:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0308 	and.w	r3, r3, #8
 800455e:	2b00      	cmp	r3, #0
 8004560:	d009      	beq.n	8004576 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004562:	4b12      	ldr	r3, [pc, #72]	@ (80045ac <HAL_RCC_ClockConfig+0x1c4>)
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	00db      	lsls	r3, r3, #3
 8004570:	490e      	ldr	r1, [pc, #56]	@ (80045ac <HAL_RCC_ClockConfig+0x1c4>)
 8004572:	4313      	orrs	r3, r2
 8004574:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004576:	f000 f821 	bl	80045bc <HAL_RCC_GetSysClockFreq>
 800457a:	4602      	mov	r2, r0
 800457c:	4b0b      	ldr	r3, [pc, #44]	@ (80045ac <HAL_RCC_ClockConfig+0x1c4>)
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	091b      	lsrs	r3, r3, #4
 8004582:	f003 030f 	and.w	r3, r3, #15
 8004586:	490a      	ldr	r1, [pc, #40]	@ (80045b0 <HAL_RCC_ClockConfig+0x1c8>)
 8004588:	5ccb      	ldrb	r3, [r1, r3]
 800458a:	fa22 f303 	lsr.w	r3, r2, r3
 800458e:	4a09      	ldr	r2, [pc, #36]	@ (80045b4 <HAL_RCC_ClockConfig+0x1cc>)
 8004590:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004592:	4b09      	ldr	r3, [pc, #36]	@ (80045b8 <HAL_RCC_ClockConfig+0x1d0>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4618      	mov	r0, r3
 8004598:	f7fd fc5c 	bl	8001e54 <HAL_InitTick>

  return HAL_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3710      	adds	r7, #16
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	40022000 	.word	0x40022000
 80045ac:	40021000 	.word	0x40021000
 80045b0:	080053f0 	.word	0x080053f0
 80045b4:	20000050 	.word	0x20000050
 80045b8:	20000054 	.word	0x20000054

080045bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045bc:	b480      	push	{r7}
 80045be:	b087      	sub	sp, #28
 80045c0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80045c2:	2300      	movs	r3, #0
 80045c4:	60fb      	str	r3, [r7, #12]
 80045c6:	2300      	movs	r3, #0
 80045c8:	60bb      	str	r3, [r7, #8]
 80045ca:	2300      	movs	r3, #0
 80045cc:	617b      	str	r3, [r7, #20]
 80045ce:	2300      	movs	r3, #0
 80045d0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80045d2:	2300      	movs	r3, #0
 80045d4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80045d6:	4b1e      	ldr	r3, [pc, #120]	@ (8004650 <HAL_RCC_GetSysClockFreq+0x94>)
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f003 030c 	and.w	r3, r3, #12
 80045e2:	2b04      	cmp	r3, #4
 80045e4:	d002      	beq.n	80045ec <HAL_RCC_GetSysClockFreq+0x30>
 80045e6:	2b08      	cmp	r3, #8
 80045e8:	d003      	beq.n	80045f2 <HAL_RCC_GetSysClockFreq+0x36>
 80045ea:	e027      	b.n	800463c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80045ec:	4b19      	ldr	r3, [pc, #100]	@ (8004654 <HAL_RCC_GetSysClockFreq+0x98>)
 80045ee:	613b      	str	r3, [r7, #16]
      break;
 80045f0:	e027      	b.n	8004642 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	0c9b      	lsrs	r3, r3, #18
 80045f6:	f003 030f 	and.w	r3, r3, #15
 80045fa:	4a17      	ldr	r2, [pc, #92]	@ (8004658 <HAL_RCC_GetSysClockFreq+0x9c>)
 80045fc:	5cd3      	ldrb	r3, [r2, r3]
 80045fe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d010      	beq.n	800462c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800460a:	4b11      	ldr	r3, [pc, #68]	@ (8004650 <HAL_RCC_GetSysClockFreq+0x94>)
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	0c5b      	lsrs	r3, r3, #17
 8004610:	f003 0301 	and.w	r3, r3, #1
 8004614:	4a11      	ldr	r2, [pc, #68]	@ (800465c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004616:	5cd3      	ldrb	r3, [r2, r3]
 8004618:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a0d      	ldr	r2, [pc, #52]	@ (8004654 <HAL_RCC_GetSysClockFreq+0x98>)
 800461e:	fb03 f202 	mul.w	r2, r3, r2
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	fbb2 f3f3 	udiv	r3, r2, r3
 8004628:	617b      	str	r3, [r7, #20]
 800462a:	e004      	b.n	8004636 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a0c      	ldr	r2, [pc, #48]	@ (8004660 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004630:	fb02 f303 	mul.w	r3, r2, r3
 8004634:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	613b      	str	r3, [r7, #16]
      break;
 800463a:	e002      	b.n	8004642 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800463c:	4b05      	ldr	r3, [pc, #20]	@ (8004654 <HAL_RCC_GetSysClockFreq+0x98>)
 800463e:	613b      	str	r3, [r7, #16]
      break;
 8004640:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004642:	693b      	ldr	r3, [r7, #16]
}
 8004644:	4618      	mov	r0, r3
 8004646:	371c      	adds	r7, #28
 8004648:	46bd      	mov	sp, r7
 800464a:	bc80      	pop	{r7}
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	40021000 	.word	0x40021000
 8004654:	007a1200 	.word	0x007a1200
 8004658:	08005408 	.word	0x08005408
 800465c:	08005418 	.word	0x08005418
 8004660:	003d0900 	.word	0x003d0900

08004664 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004664:	b480      	push	{r7}
 8004666:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004668:	4b02      	ldr	r3, [pc, #8]	@ (8004674 <HAL_RCC_GetHCLKFreq+0x10>)
 800466a:	681b      	ldr	r3, [r3, #0]
}
 800466c:	4618      	mov	r0, r3
 800466e:	46bd      	mov	sp, r7
 8004670:	bc80      	pop	{r7}
 8004672:	4770      	bx	lr
 8004674:	20000050 	.word	0x20000050

08004678 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800467c:	f7ff fff2 	bl	8004664 <HAL_RCC_GetHCLKFreq>
 8004680:	4602      	mov	r2, r0
 8004682:	4b05      	ldr	r3, [pc, #20]	@ (8004698 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	0a1b      	lsrs	r3, r3, #8
 8004688:	f003 0307 	and.w	r3, r3, #7
 800468c:	4903      	ldr	r1, [pc, #12]	@ (800469c <HAL_RCC_GetPCLK1Freq+0x24>)
 800468e:	5ccb      	ldrb	r3, [r1, r3]
 8004690:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004694:	4618      	mov	r0, r3
 8004696:	bd80      	pop	{r7, pc}
 8004698:	40021000 	.word	0x40021000
 800469c:	08005400 	.word	0x08005400

080046a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80046a4:	f7ff ffde 	bl	8004664 <HAL_RCC_GetHCLKFreq>
 80046a8:	4602      	mov	r2, r0
 80046aa:	4b05      	ldr	r3, [pc, #20]	@ (80046c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	0adb      	lsrs	r3, r3, #11
 80046b0:	f003 0307 	and.w	r3, r3, #7
 80046b4:	4903      	ldr	r1, [pc, #12]	@ (80046c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046b6:	5ccb      	ldrb	r3, [r1, r3]
 80046b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046bc:	4618      	mov	r0, r3
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	40021000 	.word	0x40021000
 80046c4:	08005400 	.word	0x08005400

080046c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b085      	sub	sp, #20
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80046d0:	4b0a      	ldr	r3, [pc, #40]	@ (80046fc <RCC_Delay+0x34>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a0a      	ldr	r2, [pc, #40]	@ (8004700 <RCC_Delay+0x38>)
 80046d6:	fba2 2303 	umull	r2, r3, r2, r3
 80046da:	0a5b      	lsrs	r3, r3, #9
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	fb02 f303 	mul.w	r3, r2, r3
 80046e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80046e4:	bf00      	nop
  }
  while (Delay --);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	1e5a      	subs	r2, r3, #1
 80046ea:	60fa      	str	r2, [r7, #12]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1f9      	bne.n	80046e4 <RCC_Delay+0x1c>
}
 80046f0:	bf00      	nop
 80046f2:	bf00      	nop
 80046f4:	3714      	adds	r7, #20
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bc80      	pop	{r7}
 80046fa:	4770      	bx	lr
 80046fc:	20000050 	.word	0x20000050
 8004700:	10624dd3 	.word	0x10624dd3

08004704 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b086      	sub	sp, #24
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800470c:	2300      	movs	r3, #0
 800470e:	613b      	str	r3, [r7, #16]
 8004710:	2300      	movs	r3, #0
 8004712:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0301 	and.w	r3, r3, #1
 800471c:	2b00      	cmp	r3, #0
 800471e:	d07d      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004720:	2300      	movs	r3, #0
 8004722:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004724:	4b4f      	ldr	r3, [pc, #316]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004726:	69db      	ldr	r3, [r3, #28]
 8004728:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d10d      	bne.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004730:	4b4c      	ldr	r3, [pc, #304]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004732:	69db      	ldr	r3, [r3, #28]
 8004734:	4a4b      	ldr	r2, [pc, #300]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004736:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800473a:	61d3      	str	r3, [r2, #28]
 800473c:	4b49      	ldr	r3, [pc, #292]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800473e:	69db      	ldr	r3, [r3, #28]
 8004740:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004744:	60bb      	str	r3, [r7, #8]
 8004746:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004748:	2301      	movs	r3, #1
 800474a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800474c:	4b46      	ldr	r3, [pc, #280]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004754:	2b00      	cmp	r3, #0
 8004756:	d118      	bne.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004758:	4b43      	ldr	r3, [pc, #268]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a42      	ldr	r2, [pc, #264]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800475e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004762:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004764:	f7fd fbb8 	bl	8001ed8 <HAL_GetTick>
 8004768:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800476a:	e008      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800476c:	f7fd fbb4 	bl	8001ed8 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b64      	cmp	r3, #100	@ 0x64
 8004778:	d901      	bls.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e06d      	b.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800477e:	4b3a      	ldr	r3, [pc, #232]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004786:	2b00      	cmp	r3, #0
 8004788:	d0f0      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800478a:	4b36      	ldr	r3, [pc, #216]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800478c:	6a1b      	ldr	r3, [r3, #32]
 800478e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004792:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d02e      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047a2:	68fa      	ldr	r2, [r7, #12]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d027      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047a8:	4b2e      	ldr	r3, [pc, #184]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047aa:	6a1b      	ldr	r3, [r3, #32]
 80047ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047b0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047b2:	4b2e      	ldr	r3, [pc, #184]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80047b4:	2201      	movs	r2, #1
 80047b6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047b8:	4b2c      	ldr	r3, [pc, #176]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80047ba:	2200      	movs	r2, #0
 80047bc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80047be:	4a29      	ldr	r2, [pc, #164]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f003 0301 	and.w	r3, r3, #1
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d014      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ce:	f7fd fb83 	bl	8001ed8 <HAL_GetTick>
 80047d2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047d4:	e00a      	b.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047d6:	f7fd fb7f 	bl	8001ed8 <HAL_GetTick>
 80047da:	4602      	mov	r2, r0
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d901      	bls.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80047e8:	2303      	movs	r3, #3
 80047ea:	e036      	b.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047ec:	4b1d      	ldr	r3, [pc, #116]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047ee:	6a1b      	ldr	r3, [r3, #32]
 80047f0:	f003 0302 	and.w	r3, r3, #2
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d0ee      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047f8:	4b1a      	ldr	r3, [pc, #104]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047fa:	6a1b      	ldr	r3, [r3, #32]
 80047fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	4917      	ldr	r1, [pc, #92]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004806:	4313      	orrs	r3, r2
 8004808:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800480a:	7dfb      	ldrb	r3, [r7, #23]
 800480c:	2b01      	cmp	r3, #1
 800480e:	d105      	bne.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004810:	4b14      	ldr	r3, [pc, #80]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004812:	69db      	ldr	r3, [r3, #28]
 8004814:	4a13      	ldr	r2, [pc, #76]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004816:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800481a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0302 	and.w	r3, r3, #2
 8004824:	2b00      	cmp	r3, #0
 8004826:	d008      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004828:	4b0e      	ldr	r3, [pc, #56]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	490b      	ldr	r1, [pc, #44]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004836:	4313      	orrs	r3, r2
 8004838:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0310 	and.w	r3, r3, #16
 8004842:	2b00      	cmp	r3, #0
 8004844:	d008      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004846:	4b07      	ldr	r3, [pc, #28]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	4904      	ldr	r1, [pc, #16]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004854:	4313      	orrs	r3, r2
 8004856:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3718      	adds	r7, #24
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	40021000 	.word	0x40021000
 8004868:	40007000 	.word	0x40007000
 800486c:	42420440 	.word	0x42420440

08004870 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d101      	bne.n	8004882 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e042      	b.n	8004908 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b00      	cmp	r3, #0
 800488c:	d106      	bne.n	800489c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f7fd fa4c 	bl	8001d34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2224      	movs	r2, #36	@ 0x24
 80048a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68da      	ldr	r2, [r3, #12]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80048b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f000 fcd5 	bl	8005264 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	691a      	ldr	r2, [r3, #16]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80048c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	695a      	ldr	r2, [r3, #20]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80048d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68da      	ldr	r2, [r3, #12]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80048e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2220      	movs	r2, #32
 80048f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2220      	movs	r2, #32
 80048fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	3708      	adds	r7, #8
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	60b9      	str	r1, [r7, #8]
 800491a:	4613      	mov	r3, r2
 800491c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004924:	b2db      	uxtb	r3, r3
 8004926:	2b20      	cmp	r3, #32
 8004928:	d112      	bne.n	8004950 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d002      	beq.n	8004936 <HAL_UART_Receive_IT+0x26>
 8004930:	88fb      	ldrh	r3, [r7, #6]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d101      	bne.n	800493a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e00b      	b.n	8004952 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004940:	88fb      	ldrh	r3, [r7, #6]
 8004942:	461a      	mov	r2, r3
 8004944:	68b9      	ldr	r1, [r7, #8]
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	f000 fab7 	bl	8004eba <UART_Start_Receive_IT>
 800494c:	4603      	mov	r3, r0
 800494e:	e000      	b.n	8004952 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004950:	2302      	movs	r3, #2
  }
}
 8004952:	4618      	mov	r0, r3
 8004954:	3710      	adds	r7, #16
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
	...

0800495c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b0ba      	sub	sp, #232	@ 0xe8
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	695b      	ldr	r3, [r3, #20]
 800497e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004982:	2300      	movs	r3, #0
 8004984:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004988:	2300      	movs	r3, #0
 800498a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800498e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004992:	f003 030f 	and.w	r3, r3, #15
 8004996:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800499a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d10f      	bne.n	80049c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049a6:	f003 0320 	and.w	r3, r3, #32
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d009      	beq.n	80049c2 <HAL_UART_IRQHandler+0x66>
 80049ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049b2:	f003 0320 	and.w	r3, r3, #32
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d003      	beq.n	80049c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 fb93 	bl	80050e6 <UART_Receive_IT>
      return;
 80049c0:	e25b      	b.n	8004e7a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80049c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	f000 80de 	beq.w	8004b88 <HAL_UART_IRQHandler+0x22c>
 80049cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80049d0:	f003 0301 	and.w	r3, r3, #1
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d106      	bne.n	80049e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80049d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049dc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	f000 80d1 	beq.w	8004b88 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80049e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00b      	beq.n	8004a0a <HAL_UART_IRQHandler+0xae>
 80049f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d005      	beq.n	8004a0a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a02:	f043 0201 	orr.w	r2, r3, #1
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a0e:	f003 0304 	and.w	r3, r3, #4
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00b      	beq.n	8004a2e <HAL_UART_IRQHandler+0xd2>
 8004a16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a1a:	f003 0301 	and.w	r3, r3, #1
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d005      	beq.n	8004a2e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a26:	f043 0202 	orr.w	r2, r3, #2
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a32:	f003 0302 	and.w	r3, r3, #2
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00b      	beq.n	8004a52 <HAL_UART_IRQHandler+0xf6>
 8004a3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a3e:	f003 0301 	and.w	r3, r3, #1
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d005      	beq.n	8004a52 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a4a:	f043 0204 	orr.w	r2, r3, #4
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a56:	f003 0308 	and.w	r3, r3, #8
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d011      	beq.n	8004a82 <HAL_UART_IRQHandler+0x126>
 8004a5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a62:	f003 0320 	and.w	r3, r3, #32
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d105      	bne.n	8004a76 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004a6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a6e:	f003 0301 	and.w	r3, r3, #1
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d005      	beq.n	8004a82 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a7a:	f043 0208 	orr.w	r2, r3, #8
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	f000 81f2 	beq.w	8004e70 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a90:	f003 0320 	and.w	r3, r3, #32
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d008      	beq.n	8004aaa <HAL_UART_IRQHandler+0x14e>
 8004a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a9c:	f003 0320 	and.w	r3, r3, #32
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d002      	beq.n	8004aaa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f000 fb1e 	bl	80050e6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	695b      	ldr	r3, [r3, #20]
 8004ab0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	bf14      	ite	ne
 8004ab8:	2301      	movne	r3, #1
 8004aba:	2300      	moveq	r3, #0
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ac6:	f003 0308 	and.w	r3, r3, #8
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d103      	bne.n	8004ad6 <HAL_UART_IRQHandler+0x17a>
 8004ace:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d04f      	beq.n	8004b76 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 fa28 	bl	8004f2c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	695b      	ldr	r3, [r3, #20]
 8004ae2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d041      	beq.n	8004b6e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	3314      	adds	r3, #20
 8004af0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004af8:	e853 3f00 	ldrex	r3, [r3]
 8004afc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004b00:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004b04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	3314      	adds	r3, #20
 8004b12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004b16:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004b1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004b22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004b26:	e841 2300 	strex	r3, r2, [r1]
 8004b2a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004b2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d1d9      	bne.n	8004aea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d013      	beq.n	8004b66 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b42:	4a7e      	ldr	r2, [pc, #504]	@ (8004d3c <HAL_UART_IRQHandler+0x3e0>)
 8004b44:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f7fd ff38 	bl	80029c0 <HAL_DMA_Abort_IT>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d016      	beq.n	8004b84 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004b60:	4610      	mov	r0, r2
 8004b62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b64:	e00e      	b.n	8004b84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 f993 	bl	8004e92 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b6c:	e00a      	b.n	8004b84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 f98f 	bl	8004e92 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b74:	e006      	b.n	8004b84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 f98b 	bl	8004e92 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004b82:	e175      	b.n	8004e70 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b84:	bf00      	nop
    return;
 8004b86:	e173      	b.n	8004e70 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	f040 814f 	bne.w	8004e30 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b96:	f003 0310 	and.w	r3, r3, #16
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	f000 8148 	beq.w	8004e30 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ba4:	f003 0310 	and.w	r3, r3, #16
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f000 8141 	beq.w	8004e30 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004bae:	2300      	movs	r3, #0
 8004bb0:	60bb      	str	r3, [r7, #8]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	60bb      	str	r3, [r7, #8]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	60bb      	str	r3, [r7, #8]
 8004bc2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	f000 80b6 	beq.w	8004d40 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004be0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	f000 8145 	beq.w	8004e74 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004bee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	f080 813e 	bcs.w	8004e74 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004bfe:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c04:	699b      	ldr	r3, [r3, #24]
 8004c06:	2b20      	cmp	r3, #32
 8004c08:	f000 8088 	beq.w	8004d1c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	330c      	adds	r3, #12
 8004c12:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c16:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004c1a:	e853 3f00 	ldrex	r3, [r3]
 8004c1e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004c22:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004c26:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c2a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	330c      	adds	r3, #12
 8004c34:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004c38:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004c3c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c40:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004c44:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004c48:	e841 2300 	strex	r3, r2, [r1]
 8004c4c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004c50:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d1d9      	bne.n	8004c0c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	3314      	adds	r3, #20
 8004c5e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c60:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c62:	e853 3f00 	ldrex	r3, [r3]
 8004c66:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004c68:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004c6a:	f023 0301 	bic.w	r3, r3, #1
 8004c6e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	3314      	adds	r3, #20
 8004c78:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004c7c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004c80:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c82:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004c84:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004c88:	e841 2300 	strex	r3, r2, [r1]
 8004c8c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004c8e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d1e1      	bne.n	8004c58 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	3314      	adds	r3, #20
 8004c9a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c9c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c9e:	e853 3f00 	ldrex	r3, [r3]
 8004ca2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004ca4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ca6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004caa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	3314      	adds	r3, #20
 8004cb4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004cb8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004cba:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cbc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004cbe:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004cc0:	e841 2300 	strex	r3, r2, [r1]
 8004cc4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004cc6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d1e3      	bne.n	8004c94 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2220      	movs	r2, #32
 8004cd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	330c      	adds	r3, #12
 8004ce0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ce4:	e853 3f00 	ldrex	r3, [r3]
 8004ce8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004cea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004cec:	f023 0310 	bic.w	r3, r3, #16
 8004cf0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	330c      	adds	r3, #12
 8004cfa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004cfe:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004d00:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d02:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004d04:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004d06:	e841 2300 	strex	r3, r2, [r1]
 8004d0a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004d0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1e3      	bne.n	8004cda <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d16:	4618      	mov	r0, r3
 8004d18:	f7fd fe17 	bl	800294a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2202      	movs	r2, #2
 8004d20:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	4619      	mov	r1, r3
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 f8b6 	bl	8004ea4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d38:	e09c      	b.n	8004e74 <HAL_UART_IRQHandler+0x518>
 8004d3a:	bf00      	nop
 8004d3c:	08004ff1 	.word	0x08004ff1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	f000 808e 	beq.w	8004e78 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004d5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	f000 8089 	beq.w	8004e78 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	330c      	adds	r3, #12
 8004d6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d70:	e853 3f00 	ldrex	r3, [r3]
 8004d74:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004d76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d7c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	330c      	adds	r3, #12
 8004d86:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004d8a:	647a      	str	r2, [r7, #68]	@ 0x44
 8004d8c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004d90:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d92:	e841 2300 	strex	r3, r2, [r1]
 8004d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004d98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1e3      	bne.n	8004d66 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	3314      	adds	r3, #20
 8004da4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da8:	e853 3f00 	ldrex	r3, [r3]
 8004dac:	623b      	str	r3, [r7, #32]
   return(result);
 8004dae:	6a3b      	ldr	r3, [r7, #32]
 8004db0:	f023 0301 	bic.w	r3, r3, #1
 8004db4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	3314      	adds	r3, #20
 8004dbe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004dc2:	633a      	str	r2, [r7, #48]	@ 0x30
 8004dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004dc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004dca:	e841 2300 	strex	r3, r2, [r1]
 8004dce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d1e3      	bne.n	8004d9e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2220      	movs	r2, #32
 8004dda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	330c      	adds	r3, #12
 8004dea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	e853 3f00 	ldrex	r3, [r3]
 8004df2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f023 0310 	bic.w	r3, r3, #16
 8004dfa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	330c      	adds	r3, #12
 8004e04:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004e08:	61fa      	str	r2, [r7, #28]
 8004e0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e0c:	69b9      	ldr	r1, [r7, #24]
 8004e0e:	69fa      	ldr	r2, [r7, #28]
 8004e10:	e841 2300 	strex	r3, r2, [r1]
 8004e14:	617b      	str	r3, [r7, #20]
   return(result);
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d1e3      	bne.n	8004de4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2202      	movs	r2, #2
 8004e20:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e22:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004e26:	4619      	mov	r1, r3
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f000 f83b 	bl	8004ea4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e2e:	e023      	b.n	8004e78 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004e30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d009      	beq.n	8004e50 <HAL_UART_IRQHandler+0x4f4>
 8004e3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d003      	beq.n	8004e50 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f000 f8e5 	bl	8005018 <UART_Transmit_IT>
    return;
 8004e4e:	e014      	b.n	8004e7a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004e50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d00e      	beq.n	8004e7a <HAL_UART_IRQHandler+0x51e>
 8004e5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d008      	beq.n	8004e7a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f000 f924 	bl	80050b6 <UART_EndTransmit_IT>
    return;
 8004e6e:	e004      	b.n	8004e7a <HAL_UART_IRQHandler+0x51e>
    return;
 8004e70:	bf00      	nop
 8004e72:	e002      	b.n	8004e7a <HAL_UART_IRQHandler+0x51e>
      return;
 8004e74:	bf00      	nop
 8004e76:	e000      	b.n	8004e7a <HAL_UART_IRQHandler+0x51e>
      return;
 8004e78:	bf00      	nop
  }
}
 8004e7a:	37e8      	adds	r7, #232	@ 0xe8
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004e88:	bf00      	nop
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bc80      	pop	{r7}
 8004e90:	4770      	bx	lr

08004e92 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e92:	b480      	push	{r7}
 8004e94:	b083      	sub	sp, #12
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004e9a:	bf00      	nop
 8004e9c:	370c      	adds	r7, #12
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bc80      	pop	{r7}
 8004ea2:	4770      	bx	lr

08004ea4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	460b      	mov	r3, r1
 8004eae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004eb0:	bf00      	nop
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bc80      	pop	{r7}
 8004eb8:	4770      	bx	lr

08004eba <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b085      	sub	sp, #20
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	60f8      	str	r0, [r7, #12]
 8004ec2:	60b9      	str	r1, [r7, #8]
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	68ba      	ldr	r2, [r7, #8]
 8004ecc:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	88fa      	ldrh	r2, [r7, #6]
 8004ed2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	88fa      	ldrh	r2, [r7, #6]
 8004ed8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2200      	movs	r2, #0
 8004ede:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2222      	movs	r2, #34	@ 0x22
 8004ee4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	691b      	ldr	r3, [r3, #16]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d007      	beq.n	8004f00 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	68da      	ldr	r2, [r3, #12]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004efe:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	695a      	ldr	r2, [r3, #20]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f042 0201 	orr.w	r2, r2, #1
 8004f0e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68da      	ldr	r2, [r3, #12]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f042 0220 	orr.w	r2, r2, #32
 8004f1e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3714      	adds	r7, #20
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bc80      	pop	{r7}
 8004f2a:	4770      	bx	lr

08004f2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b095      	sub	sp, #84	@ 0x54
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	330c      	adds	r3, #12
 8004f3a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f3e:	e853 3f00 	ldrex	r3, [r3]
 8004f42:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f46:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	330c      	adds	r3, #12
 8004f52:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004f54:	643a      	str	r2, [r7, #64]	@ 0x40
 8004f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f58:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f5a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f5c:	e841 2300 	strex	r3, r2, [r1]
 8004f60:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d1e5      	bne.n	8004f34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	3314      	adds	r3, #20
 8004f6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f70:	6a3b      	ldr	r3, [r7, #32]
 8004f72:	e853 3f00 	ldrex	r3, [r3]
 8004f76:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	f023 0301 	bic.w	r3, r3, #1
 8004f7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	3314      	adds	r3, #20
 8004f86:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f88:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f90:	e841 2300 	strex	r3, r2, [r1]
 8004f94:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d1e5      	bne.n	8004f68 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d119      	bne.n	8004fd8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	330c      	adds	r3, #12
 8004faa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	e853 3f00 	ldrex	r3, [r3]
 8004fb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	f023 0310 	bic.w	r3, r3, #16
 8004fba:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	330c      	adds	r3, #12
 8004fc2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004fc4:	61ba      	str	r2, [r7, #24]
 8004fc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc8:	6979      	ldr	r1, [r7, #20]
 8004fca:	69ba      	ldr	r2, [r7, #24]
 8004fcc:	e841 2300 	strex	r3, r2, [r1]
 8004fd0:	613b      	str	r3, [r7, #16]
   return(result);
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d1e5      	bne.n	8004fa4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2220      	movs	r2, #32
 8004fdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004fe6:	bf00      	nop
 8004fe8:	3754      	adds	r7, #84	@ 0x54
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bc80      	pop	{r7}
 8004fee:	4770      	bx	lr

08004ff0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ffc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2200      	movs	r2, #0
 8005002:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2200      	movs	r2, #0
 8005008:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800500a:	68f8      	ldr	r0, [r7, #12]
 800500c:	f7ff ff41 	bl	8004e92 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005010:	bf00      	nop
 8005012:	3710      	adds	r7, #16
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005018:	b480      	push	{r7}
 800501a:	b085      	sub	sp, #20
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005026:	b2db      	uxtb	r3, r3
 8005028:	2b21      	cmp	r3, #33	@ 0x21
 800502a:	d13e      	bne.n	80050aa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005034:	d114      	bne.n	8005060 <UART_Transmit_IT+0x48>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d110      	bne.n	8005060 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a1b      	ldr	r3, [r3, #32]
 8005042:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	881b      	ldrh	r3, [r3, #0]
 8005048:	461a      	mov	r2, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005052:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a1b      	ldr	r3, [r3, #32]
 8005058:	1c9a      	adds	r2, r3, #2
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	621a      	str	r2, [r3, #32]
 800505e:	e008      	b.n	8005072 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a1b      	ldr	r3, [r3, #32]
 8005064:	1c59      	adds	r1, r3, #1
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	6211      	str	r1, [r2, #32]
 800506a:	781a      	ldrb	r2, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005076:	b29b      	uxth	r3, r3
 8005078:	3b01      	subs	r3, #1
 800507a:	b29b      	uxth	r3, r3
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	4619      	mov	r1, r3
 8005080:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005082:	2b00      	cmp	r3, #0
 8005084:	d10f      	bne.n	80050a6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68da      	ldr	r2, [r3, #12]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005094:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68da      	ldr	r2, [r3, #12]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80050a4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80050a6:	2300      	movs	r3, #0
 80050a8:	e000      	b.n	80050ac <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80050aa:	2302      	movs	r3, #2
  }
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3714      	adds	r7, #20
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bc80      	pop	{r7}
 80050b4:	4770      	bx	lr

080050b6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80050b6:	b580      	push	{r7, lr}
 80050b8:	b082      	sub	sp, #8
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68da      	ldr	r2, [r3, #12]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050cc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2220      	movs	r2, #32
 80050d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f7ff fed2 	bl	8004e80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3708      	adds	r7, #8
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80050e6:	b580      	push	{r7, lr}
 80050e8:	b08c      	sub	sp, #48	@ 0x30
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	2b22      	cmp	r3, #34	@ 0x22
 80050f8:	f040 80ae 	bne.w	8005258 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005104:	d117      	bne.n	8005136 <UART_Receive_IT+0x50>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d113      	bne.n	8005136 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800510e:	2300      	movs	r3, #0
 8005110:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005116:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	b29b      	uxth	r3, r3
 8005120:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005124:	b29a      	uxth	r2, r3
 8005126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005128:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800512e:	1c9a      	adds	r2, r3, #2
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	629a      	str	r2, [r3, #40]	@ 0x28
 8005134:	e026      	b.n	8005184 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800513a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800513c:	2300      	movs	r3, #0
 800513e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005148:	d007      	beq.n	800515a <UART_Receive_IT+0x74>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d10a      	bne.n	8005168 <UART_Receive_IT+0x82>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d106      	bne.n	8005168 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	b2da      	uxtb	r2, r3
 8005162:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005164:	701a      	strb	r2, [r3, #0]
 8005166:	e008      	b.n	800517a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	b2db      	uxtb	r3, r3
 8005170:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005174:	b2da      	uxtb	r2, r3
 8005176:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005178:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800517e:	1c5a      	adds	r2, r3, #1
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005188:	b29b      	uxth	r3, r3
 800518a:	3b01      	subs	r3, #1
 800518c:	b29b      	uxth	r3, r3
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	4619      	mov	r1, r3
 8005192:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005194:	2b00      	cmp	r3, #0
 8005196:	d15d      	bne.n	8005254 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	68da      	ldr	r2, [r3, #12]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f022 0220 	bic.w	r2, r2, #32
 80051a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68da      	ldr	r2, [r3, #12]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80051b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	695a      	ldr	r2, [r3, #20]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f022 0201 	bic.w	r2, r2, #1
 80051c6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2220      	movs	r2, #32
 80051cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d135      	bne.n	800524a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	330c      	adds	r3, #12
 80051ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	e853 3f00 	ldrex	r3, [r3]
 80051f2:	613b      	str	r3, [r7, #16]
   return(result);
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	f023 0310 	bic.w	r3, r3, #16
 80051fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	330c      	adds	r3, #12
 8005202:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005204:	623a      	str	r2, [r7, #32]
 8005206:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005208:	69f9      	ldr	r1, [r7, #28]
 800520a:	6a3a      	ldr	r2, [r7, #32]
 800520c:	e841 2300 	strex	r3, r2, [r1]
 8005210:	61bb      	str	r3, [r7, #24]
   return(result);
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d1e5      	bne.n	80051e4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0310 	and.w	r3, r3, #16
 8005222:	2b10      	cmp	r3, #16
 8005224:	d10a      	bne.n	800523c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005226:	2300      	movs	r3, #0
 8005228:	60fb      	str	r3, [r7, #12]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	60fb      	str	r3, [r7, #12]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	60fb      	str	r3, [r7, #12]
 800523a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005240:	4619      	mov	r1, r3
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f7ff fe2e 	bl	8004ea4 <HAL_UARTEx_RxEventCallback>
 8005248:	e002      	b.n	8005250 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f7fc fc56 	bl	8001afc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005250:	2300      	movs	r3, #0
 8005252:	e002      	b.n	800525a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005254:	2300      	movs	r3, #0
 8005256:	e000      	b.n	800525a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005258:	2302      	movs	r3, #2
  }
}
 800525a:	4618      	mov	r0, r3
 800525c:	3730      	adds	r7, #48	@ 0x30
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
	...

08005264 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	68da      	ldr	r2, [r3, #12]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	430a      	orrs	r2, r1
 8005280:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	689a      	ldr	r2, [r3, #8]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	431a      	orrs	r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	695b      	ldr	r3, [r3, #20]
 8005290:	4313      	orrs	r3, r2
 8005292:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800529e:	f023 030c 	bic.w	r3, r3, #12
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	6812      	ldr	r2, [r2, #0]
 80052a6:	68b9      	ldr	r1, [r7, #8]
 80052a8:	430b      	orrs	r3, r1
 80052aa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	695b      	ldr	r3, [r3, #20]
 80052b2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	699a      	ldr	r2, [r3, #24]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	430a      	orrs	r2, r1
 80052c0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a2c      	ldr	r2, [pc, #176]	@ (8005378 <UART_SetConfig+0x114>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d103      	bne.n	80052d4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80052cc:	f7ff f9e8 	bl	80046a0 <HAL_RCC_GetPCLK2Freq>
 80052d0:	60f8      	str	r0, [r7, #12]
 80052d2:	e002      	b.n	80052da <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80052d4:	f7ff f9d0 	bl	8004678 <HAL_RCC_GetPCLK1Freq>
 80052d8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052da:	68fa      	ldr	r2, [r7, #12]
 80052dc:	4613      	mov	r3, r2
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	4413      	add	r3, r2
 80052e2:	009a      	lsls	r2, r3, #2
 80052e4:	441a      	add	r2, r3
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f0:	4a22      	ldr	r2, [pc, #136]	@ (800537c <UART_SetConfig+0x118>)
 80052f2:	fba2 2303 	umull	r2, r3, r2, r3
 80052f6:	095b      	lsrs	r3, r3, #5
 80052f8:	0119      	lsls	r1, r3, #4
 80052fa:	68fa      	ldr	r2, [r7, #12]
 80052fc:	4613      	mov	r3, r2
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	4413      	add	r3, r2
 8005302:	009a      	lsls	r2, r3, #2
 8005304:	441a      	add	r2, r3
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005310:	4b1a      	ldr	r3, [pc, #104]	@ (800537c <UART_SetConfig+0x118>)
 8005312:	fba3 0302 	umull	r0, r3, r3, r2
 8005316:	095b      	lsrs	r3, r3, #5
 8005318:	2064      	movs	r0, #100	@ 0x64
 800531a:	fb00 f303 	mul.w	r3, r0, r3
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	011b      	lsls	r3, r3, #4
 8005322:	3332      	adds	r3, #50	@ 0x32
 8005324:	4a15      	ldr	r2, [pc, #84]	@ (800537c <UART_SetConfig+0x118>)
 8005326:	fba2 2303 	umull	r2, r3, r2, r3
 800532a:	095b      	lsrs	r3, r3, #5
 800532c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005330:	4419      	add	r1, r3
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	4613      	mov	r3, r2
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	4413      	add	r3, r2
 800533a:	009a      	lsls	r2, r3, #2
 800533c:	441a      	add	r2, r3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	fbb2 f2f3 	udiv	r2, r2, r3
 8005348:	4b0c      	ldr	r3, [pc, #48]	@ (800537c <UART_SetConfig+0x118>)
 800534a:	fba3 0302 	umull	r0, r3, r3, r2
 800534e:	095b      	lsrs	r3, r3, #5
 8005350:	2064      	movs	r0, #100	@ 0x64
 8005352:	fb00 f303 	mul.w	r3, r0, r3
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	011b      	lsls	r3, r3, #4
 800535a:	3332      	adds	r3, #50	@ 0x32
 800535c:	4a07      	ldr	r2, [pc, #28]	@ (800537c <UART_SetConfig+0x118>)
 800535e:	fba2 2303 	umull	r2, r3, r2, r3
 8005362:	095b      	lsrs	r3, r3, #5
 8005364:	f003 020f 	and.w	r2, r3, #15
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	440a      	add	r2, r1
 800536e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005370:	bf00      	nop
 8005372:	3710      	adds	r7, #16
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}
 8005378:	40013800 	.word	0x40013800
 800537c:	51eb851f 	.word	0x51eb851f

08005380 <memset>:
 8005380:	4603      	mov	r3, r0
 8005382:	4402      	add	r2, r0
 8005384:	4293      	cmp	r3, r2
 8005386:	d100      	bne.n	800538a <memset+0xa>
 8005388:	4770      	bx	lr
 800538a:	f803 1b01 	strb.w	r1, [r3], #1
 800538e:	e7f9      	b.n	8005384 <memset+0x4>

08005390 <__libc_init_array>:
 8005390:	b570      	push	{r4, r5, r6, lr}
 8005392:	2600      	movs	r6, #0
 8005394:	4d0c      	ldr	r5, [pc, #48]	@ (80053c8 <__libc_init_array+0x38>)
 8005396:	4c0d      	ldr	r4, [pc, #52]	@ (80053cc <__libc_init_array+0x3c>)
 8005398:	1b64      	subs	r4, r4, r5
 800539a:	10a4      	asrs	r4, r4, #2
 800539c:	42a6      	cmp	r6, r4
 800539e:	d109      	bne.n	80053b4 <__libc_init_array+0x24>
 80053a0:	f000 f81a 	bl	80053d8 <_init>
 80053a4:	2600      	movs	r6, #0
 80053a6:	4d0a      	ldr	r5, [pc, #40]	@ (80053d0 <__libc_init_array+0x40>)
 80053a8:	4c0a      	ldr	r4, [pc, #40]	@ (80053d4 <__libc_init_array+0x44>)
 80053aa:	1b64      	subs	r4, r4, r5
 80053ac:	10a4      	asrs	r4, r4, #2
 80053ae:	42a6      	cmp	r6, r4
 80053b0:	d105      	bne.n	80053be <__libc_init_array+0x2e>
 80053b2:	bd70      	pop	{r4, r5, r6, pc}
 80053b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80053b8:	4798      	blx	r3
 80053ba:	3601      	adds	r6, #1
 80053bc:	e7ee      	b.n	800539c <__libc_init_array+0xc>
 80053be:	f855 3b04 	ldr.w	r3, [r5], #4
 80053c2:	4798      	blx	r3
 80053c4:	3601      	adds	r6, #1
 80053c6:	e7f2      	b.n	80053ae <__libc_init_array+0x1e>
 80053c8:	0800541c 	.word	0x0800541c
 80053cc:	0800541c 	.word	0x0800541c
 80053d0:	0800541c 	.word	0x0800541c
 80053d4:	08005420 	.word	0x08005420

080053d8 <_init>:
 80053d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053da:	bf00      	nop
 80053dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053de:	bc08      	pop	{r3}
 80053e0:	469e      	mov	lr, r3
 80053e2:	4770      	bx	lr

080053e4 <_fini>:
 80053e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053e6:	bf00      	nop
 80053e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053ea:	bc08      	pop	{r3}
 80053ec:	469e      	mov	lr, r3
 80053ee:	4770      	bx	lr
