
ES_Project_Digital-Clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005464  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08005570  08005570  00006570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055ac  080055ac  0000705c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080055ac  080055ac  0000705c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080055ac  080055ac  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055ac  080055ac  000065ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080055b0  080055b0  000065b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080055b4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  2000005c  08005610  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b0  08005610  000071b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d8eb  00000000  00000000  00007085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002507  00000000  00000000  00014970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  00016e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000984  00000000  00000000  00017a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018344  00000000  00000000  0001841c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010fee  00000000  00000000  00030760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089ff1  00000000  00000000  0004174e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cb73f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030fc  00000000  00000000  000cb784  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  000ce880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08005558 	.word	0x08005558

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08005558 	.word	0x08005558

0800014c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000152:	1d3b      	adds	r3, r7, #4
 8000154:	2200      	movs	r2, #0
 8000156:	601a      	str	r2, [r3, #0]
 8000158:	605a      	str	r2, [r3, #4]
 800015a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800015c:	4b18      	ldr	r3, [pc, #96]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800015e:	4a19      	ldr	r2, [pc, #100]	@ (80001c4 <MX_ADC1_Init+0x78>)
 8000160:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000162:	4b17      	ldr	r3, [pc, #92]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000164:	2200      	movs	r2, #0
 8000166:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000168:	4b15      	ldr	r3, [pc, #84]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800016a:	2200      	movs	r2, #0
 800016c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800016e:	4b14      	ldr	r3, [pc, #80]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000170:	2200      	movs	r2, #0
 8000172:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000174:	4b12      	ldr	r3, [pc, #72]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000176:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800017a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800017c:	4b10      	ldr	r3, [pc, #64]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800017e:	2200      	movs	r2, #0
 8000180:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000182:	4b0f      	ldr	r3, [pc, #60]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000184:	2201      	movs	r2, #1
 8000186:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000188:	480d      	ldr	r0, [pc, #52]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800018a:	f001 ff93 	bl	80020b4 <HAL_ADC_Init>
 800018e:	4603      	mov	r3, r0
 8000190:	2b00      	cmp	r3, #0
 8000192:	d001      	beq.n	8000198 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000194:	f001 fdc6 	bl	8001d24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000198:	2304      	movs	r3, #4
 800019a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800019c:	2301      	movs	r3, #1
 800019e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001a0:	2300      	movs	r3, #0
 80001a2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	4619      	mov	r1, r3
 80001a8:	4805      	ldr	r0, [pc, #20]	@ (80001c0 <MX_ADC1_Init+0x74>)
 80001aa:	f002 f9e5 	bl	8002578 <HAL_ADC_ConfigChannel>
 80001ae:	4603      	mov	r3, r0
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d001      	beq.n	80001b8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80001b4:	f001 fdb6 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80001b8:	bf00      	nop
 80001ba:	3710      	adds	r7, #16
 80001bc:	46bd      	mov	sp, r7
 80001be:	bd80      	pop	{r7, pc}
 80001c0:	20000078 	.word	0x20000078
 80001c4:	40012400 	.word	0x40012400

080001c8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b088      	sub	sp, #32
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001d0:	f107 0310 	add.w	r3, r7, #16
 80001d4:	2200      	movs	r2, #0
 80001d6:	601a      	str	r2, [r3, #0]
 80001d8:	605a      	str	r2, [r3, #4]
 80001da:	609a      	str	r2, [r3, #8]
 80001dc:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	4a18      	ldr	r2, [pc, #96]	@ (8000244 <HAL_ADC_MspInit+0x7c>)
 80001e4:	4293      	cmp	r3, r2
 80001e6:	d129      	bne.n	800023c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80001e8:	4b17      	ldr	r3, [pc, #92]	@ (8000248 <HAL_ADC_MspInit+0x80>)
 80001ea:	699b      	ldr	r3, [r3, #24]
 80001ec:	4a16      	ldr	r2, [pc, #88]	@ (8000248 <HAL_ADC_MspInit+0x80>)
 80001ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80001f2:	6193      	str	r3, [r2, #24]
 80001f4:	4b14      	ldr	r3, [pc, #80]	@ (8000248 <HAL_ADC_MspInit+0x80>)
 80001f6:	699b      	ldr	r3, [r3, #24]
 80001f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80001fc:	60fb      	str	r3, [r7, #12]
 80001fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000200:	4b11      	ldr	r3, [pc, #68]	@ (8000248 <HAL_ADC_MspInit+0x80>)
 8000202:	699b      	ldr	r3, [r3, #24]
 8000204:	4a10      	ldr	r2, [pc, #64]	@ (8000248 <HAL_ADC_MspInit+0x80>)
 8000206:	f043 0304 	orr.w	r3, r3, #4
 800020a:	6193      	str	r3, [r2, #24]
 800020c:	4b0e      	ldr	r3, [pc, #56]	@ (8000248 <HAL_ADC_MspInit+0x80>)
 800020e:	699b      	ldr	r3, [r3, #24]
 8000210:	f003 0304 	and.w	r3, r3, #4
 8000214:	60bb      	str	r3, [r7, #8]
 8000216:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000218:	2310      	movs	r3, #16
 800021a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800021c:	2303      	movs	r3, #3
 800021e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000220:	f107 0310 	add.w	r3, r7, #16
 8000224:	4619      	mov	r1, r3
 8000226:	4809      	ldr	r0, [pc, #36]	@ (800024c <HAL_ADC_MspInit+0x84>)
 8000228:	f002 fd02 	bl	8002c30 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800022c:	2200      	movs	r2, #0
 800022e:	2100      	movs	r1, #0
 8000230:	2012      	movs	r0, #18
 8000232:	f002 fc14 	bl	8002a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000236:	2012      	movs	r0, #18
 8000238:	f002 fc2d 	bl	8002a96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800023c:	bf00      	nop
 800023e:	3720      	adds	r7, #32
 8000240:	46bd      	mov	sp, r7
 8000242:	bd80      	pop	{r7, pc}
 8000244:	40012400 	.word	0x40012400
 8000248:	40021000 	.word	0x40021000
 800024c:	40010800 	.word	0x40010800

08000250 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b088      	sub	sp, #32
 8000254:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000256:	f107 0310 	add.w	r3, r7, #16
 800025a:	2200      	movs	r2, #0
 800025c:	601a      	str	r2, [r3, #0]
 800025e:	605a      	str	r2, [r3, #4]
 8000260:	609a      	str	r2, [r3, #8]
 8000262:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000264:	4b2e      	ldr	r3, [pc, #184]	@ (8000320 <MX_GPIO_Init+0xd0>)
 8000266:	699b      	ldr	r3, [r3, #24]
 8000268:	4a2d      	ldr	r2, [pc, #180]	@ (8000320 <MX_GPIO_Init+0xd0>)
 800026a:	f043 0320 	orr.w	r3, r3, #32
 800026e:	6193      	str	r3, [r2, #24]
 8000270:	4b2b      	ldr	r3, [pc, #172]	@ (8000320 <MX_GPIO_Init+0xd0>)
 8000272:	699b      	ldr	r3, [r3, #24]
 8000274:	f003 0320 	and.w	r3, r3, #32
 8000278:	60fb      	str	r3, [r7, #12]
 800027a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800027c:	4b28      	ldr	r3, [pc, #160]	@ (8000320 <MX_GPIO_Init+0xd0>)
 800027e:	699b      	ldr	r3, [r3, #24]
 8000280:	4a27      	ldr	r2, [pc, #156]	@ (8000320 <MX_GPIO_Init+0xd0>)
 8000282:	f043 0304 	orr.w	r3, r3, #4
 8000286:	6193      	str	r3, [r2, #24]
 8000288:	4b25      	ldr	r3, [pc, #148]	@ (8000320 <MX_GPIO_Init+0xd0>)
 800028a:	699b      	ldr	r3, [r3, #24]
 800028c:	f003 0304 	and.w	r3, r3, #4
 8000290:	60bb      	str	r3, [r7, #8]
 8000292:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000294:	4b22      	ldr	r3, [pc, #136]	@ (8000320 <MX_GPIO_Init+0xd0>)
 8000296:	699b      	ldr	r3, [r3, #24]
 8000298:	4a21      	ldr	r2, [pc, #132]	@ (8000320 <MX_GPIO_Init+0xd0>)
 800029a:	f043 0308 	orr.w	r3, r3, #8
 800029e:	6193      	str	r3, [r2, #24]
 80002a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000320 <MX_GPIO_Init+0xd0>)
 80002a2:	699b      	ldr	r3, [r3, #24]
 80002a4:	f003 0308 	and.w	r3, r3, #8
 80002a8:	607b      	str	r3, [r7, #4]
 80002aa:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : BUTTON0_IN12_Pin BUTTON1_IN13_Pin BUTTON2_IN14_Pin BUTTON3_IN15_Pin */
  GPIO_InitStruct.Pin = BUTTON0_IN12_Pin|BUTTON1_IN13_Pin|BUTTON2_IN14_Pin|BUTTON3_IN15_Pin;
 80002ac:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80002b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80002b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000324 <MX_GPIO_Init+0xd4>)
 80002b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80002b6:	2302      	movs	r3, #2
 80002b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002ba:	f107 0310 	add.w	r3, r7, #16
 80002be:	4619      	mov	r1, r3
 80002c0:	4819      	ldr	r0, [pc, #100]	@ (8000328 <MX_GPIO_Init+0xd8>)
 80002c2:	f002 fcb5 	bl	8002c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON4_IN8_Pin */
  GPIO_InitStruct.Pin = BUTTON4_IN8_Pin;
 80002c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80002ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80002cc:	4b15      	ldr	r3, [pc, #84]	@ (8000324 <MX_GPIO_Init+0xd4>)
 80002ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80002d0:	2302      	movs	r3, #2
 80002d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON4_IN8_GPIO_Port, &GPIO_InitStruct);
 80002d4:	f107 0310 	add.w	r3, r7, #16
 80002d8:	4619      	mov	r1, r3
 80002da:	4814      	ldr	r0, [pc, #80]	@ (800032c <MX_GPIO_Init+0xdc>)
 80002dc:	f002 fca8 	bl	8002c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : RTC_IN5_Pin */
  GPIO_InitStruct.Pin = RTC_IN5_Pin;
 80002e0:	2320      	movs	r3, #32
 80002e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80002e4:	4b12      	ldr	r3, [pc, #72]	@ (8000330 <MX_GPIO_Init+0xe0>)
 80002e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002e8:	2301      	movs	r3, #1
 80002ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RTC_IN5_GPIO_Port, &GPIO_InitStruct);
 80002ec:	f107 0310 	add.w	r3, r7, #16
 80002f0:	4619      	mov	r1, r3
 80002f2:	480d      	ldr	r0, [pc, #52]	@ (8000328 <MX_GPIO_Init+0xd8>)
 80002f4:	f002 fc9c 	bl	8002c30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80002f8:	2200      	movs	r2, #0
 80002fa:	2100      	movs	r1, #0
 80002fc:	2017      	movs	r0, #23
 80002fe:	f002 fbae 	bl	8002a5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000302:	2017      	movs	r0, #23
 8000304:	f002 fbc7 	bl	8002a96 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000308:	2200      	movs	r2, #0
 800030a:	2100      	movs	r1, #0
 800030c:	2028      	movs	r0, #40	@ 0x28
 800030e:	f002 fba6 	bl	8002a5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000312:	2028      	movs	r0, #40	@ 0x28
 8000314:	f002 fbbf 	bl	8002a96 <HAL_NVIC_EnableIRQ>

}
 8000318:	bf00      	nop
 800031a:	3720      	adds	r7, #32
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}
 8000320:	40021000 	.word	0x40021000
 8000324:	10110000 	.word	0x10110000
 8000328:	40010c00 	.word	0x40010c00
 800032c:	40010800 	.word	0x40010800
 8000330:	10210000 	.word	0x10210000

08000334 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000338:	4b12      	ldr	r3, [pc, #72]	@ (8000384 <MX_I2C1_Init+0x50>)
 800033a:	4a13      	ldr	r2, [pc, #76]	@ (8000388 <MX_I2C1_Init+0x54>)
 800033c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800033e:	4b11      	ldr	r3, [pc, #68]	@ (8000384 <MX_I2C1_Init+0x50>)
 8000340:	4a12      	ldr	r2, [pc, #72]	@ (800038c <MX_I2C1_Init+0x58>)
 8000342:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000344:	4b0f      	ldr	r3, [pc, #60]	@ (8000384 <MX_I2C1_Init+0x50>)
 8000346:	2200      	movs	r2, #0
 8000348:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800034a:	4b0e      	ldr	r3, [pc, #56]	@ (8000384 <MX_I2C1_Init+0x50>)
 800034c:	2200      	movs	r2, #0
 800034e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000350:	4b0c      	ldr	r3, [pc, #48]	@ (8000384 <MX_I2C1_Init+0x50>)
 8000352:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000356:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000358:	4b0a      	ldr	r3, [pc, #40]	@ (8000384 <MX_I2C1_Init+0x50>)
 800035a:	2200      	movs	r2, #0
 800035c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800035e:	4b09      	ldr	r3, [pc, #36]	@ (8000384 <MX_I2C1_Init+0x50>)
 8000360:	2200      	movs	r2, #0
 8000362:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000364:	4b07      	ldr	r3, [pc, #28]	@ (8000384 <MX_I2C1_Init+0x50>)
 8000366:	2200      	movs	r2, #0
 8000368:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800036a:	4b06      	ldr	r3, [pc, #24]	@ (8000384 <MX_I2C1_Init+0x50>)
 800036c:	2200      	movs	r2, #0
 800036e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000370:	4804      	ldr	r0, [pc, #16]	@ (8000384 <MX_I2C1_Init+0x50>)
 8000372:	f002 fe11 	bl	8002f98 <HAL_I2C_Init>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800037c:	f001 fcd2 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000380:	bf00      	nop
 8000382:	bd80      	pop	{r7, pc}
 8000384:	200000a8 	.word	0x200000a8
 8000388:	40005400 	.word	0x40005400
 800038c:	00061a80 	.word	0x00061a80

08000390 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b088      	sub	sp, #32
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000398:	f107 0310 	add.w	r3, r7, #16
 800039c:	2200      	movs	r2, #0
 800039e:	601a      	str	r2, [r3, #0]
 80003a0:	605a      	str	r2, [r3, #4]
 80003a2:	609a      	str	r2, [r3, #8]
 80003a4:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	4a15      	ldr	r2, [pc, #84]	@ (8000400 <HAL_I2C_MspInit+0x70>)
 80003ac:	4293      	cmp	r3, r2
 80003ae:	d123      	bne.n	80003f8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003b0:	4b14      	ldr	r3, [pc, #80]	@ (8000404 <HAL_I2C_MspInit+0x74>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	4a13      	ldr	r2, [pc, #76]	@ (8000404 <HAL_I2C_MspInit+0x74>)
 80003b6:	f043 0308 	orr.w	r3, r3, #8
 80003ba:	6193      	str	r3, [r2, #24]
 80003bc:	4b11      	ldr	r3, [pc, #68]	@ (8000404 <HAL_I2C_MspInit+0x74>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	f003 0308 	and.w	r3, r3, #8
 80003c4:	60fb      	str	r3, [r7, #12]
 80003c6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80003c8:	23c0      	movs	r3, #192	@ 0xc0
 80003ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80003cc:	2312      	movs	r3, #18
 80003ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003d0:	2303      	movs	r3, #3
 80003d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003d4:	f107 0310 	add.w	r3, r7, #16
 80003d8:	4619      	mov	r1, r3
 80003da:	480b      	ldr	r0, [pc, #44]	@ (8000408 <HAL_I2C_MspInit+0x78>)
 80003dc:	f002 fc28 	bl	8002c30 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80003e0:	4b08      	ldr	r3, [pc, #32]	@ (8000404 <HAL_I2C_MspInit+0x74>)
 80003e2:	69db      	ldr	r3, [r3, #28]
 80003e4:	4a07      	ldr	r2, [pc, #28]	@ (8000404 <HAL_I2C_MspInit+0x74>)
 80003e6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80003ea:	61d3      	str	r3, [r2, #28]
 80003ec:	4b05      	ldr	r3, [pc, #20]	@ (8000404 <HAL_I2C_MspInit+0x74>)
 80003ee:	69db      	ldr	r3, [r3, #28]
 80003f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80003f4:	60bb      	str	r3, [r7, #8]
 80003f6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80003f8:	bf00      	nop
 80003fa:	3720      	adds	r7, #32
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	40005400 	.word	0x40005400
 8000404:	40021000 	.word	0x40021000
 8000408:	40010c00 	.word	0x40010c00

0800040c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800040c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800040e:	b087      	sub	sp, #28
 8000410:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000412:	f001 fdc9 	bl	8001fa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000416:	f000 f8b1 	bl	800057c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800041a:	f7ff ff19 	bl	8000250 <MX_GPIO_Init>
  MX_I2C1_Init();
 800041e:	f7ff ff89 	bl	8000334 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000422:	f7ff fe93 	bl	800014c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000426:	f001 fd1b 	bl	8001e60 <MX_USART1_UART_Init>
//     4, // Month: 1-12
//    25  // Year: 0-99 (0 = 2000, 1 = 2001, ..., 99 = 2099)
//  );

  // Initialize RTC module (Run only once after reset the RTC).
  Time_Ctrl 
 800042a:	2300      	movs	r3, #0
 800042c:	9301      	str	r3, [sp, #4]
 800042e:	2300      	movs	r3, #0
 8000430:	9300      	str	r3, [sp, #0]
 8000432:	2300      	movs	r3, #0
 8000434:	2200      	movs	r2, #0
 8000436:	2100      	movs	r1, #0
 8000438:	2000      	movs	r0, #0
 800043a:	f000 f9df 	bl	80007fc <Time_Ctrl>
     0, // Day of the week: 1-7 (1 = Sunday, 2 = Monday, ..., 7 = Saturday), or Date of the month: 1-31
     0  // Select: 1 = day of week, 0 = date of month
  );   

  // Initially retrieve the time values from the RTC module
  Time_Get(&time_get_data);
 800043e:	4844      	ldr	r0, [pc, #272]	@ (8000550 <main+0x144>)
 8000440:	f000 f988 	bl	8000754 <Time_Get>
  //   false, // true = ON, false = OFF 
  //    1     // Slot number of the alarm in the EEPROM module (0-9)
  // );  

  // Initially retrieve the alarm slot pointer data from the EEPROM module
  Alarm_Slot_Pointer_Get();
 8000444:	f000 fbb6 	bl	8000bb4 <Alarm_Slot_Pointer_Get>

  // Initially retrieve the alarm values from the EEPROM module and send to system memory
  for (int i = 0; i < alarm_slot_ptr; i++)
 8000448:	2300      	movs	r3, #0
 800044a:	60fb      	str	r3, [r7, #12]
 800044c:	e00e      	b.n	800046c <main+0x60>
  {
    Alarm_Get(i, &alarm_get_data[i]);
 800044e:	68fb      	ldr	r3, [r7, #12]
 8000450:	b2d8      	uxtb	r0, r3
 8000452:	68fa      	ldr	r2, [r7, #12]
 8000454:	4613      	mov	r3, r2
 8000456:	005b      	lsls	r3, r3, #1
 8000458:	4413      	add	r3, r2
 800045a:	005b      	lsls	r3, r3, #1
 800045c:	4a3d      	ldr	r2, [pc, #244]	@ (8000554 <main+0x148>)
 800045e:	4413      	add	r3, r2
 8000460:	4619      	mov	r1, r3
 8000462:	f000 fb15 	bl	8000a90 <Alarm_Get>
  for (int i = 0; i < alarm_slot_ptr; i++)
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	3301      	adds	r3, #1
 800046a:	60fb      	str	r3, [r7, #12]
 800046c:	4b3a      	ldr	r3, [pc, #232]	@ (8000558 <main+0x14c>)
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	461a      	mov	r2, r3
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	4293      	cmp	r3, r2
 8000476:	dbea      	blt.n	800044e <main+0x42>

  // Set the initial system parameters to current time values and default settings for convenience
  system_param_data =
  (SYSTEM_PARAM_DATA)
  {
    time_get_data.minute,       // Minutes: 0-59
 8000478:	4b35      	ldr	r3, [pc, #212]	@ (8000550 <main+0x144>)
 800047a:	785b      	ldrb	r3, [r3, #1]
 800047c:	fa5f fc83 	uxtb.w	ip, r3
    time_get_data.hour,         // Hours: 0-23
 8000480:	4b33      	ldr	r3, [pc, #204]	@ (8000550 <main+0x144>)
 8000482:	789b      	ldrb	r3, [r3, #2]
 8000484:	b2de      	uxtb	r6, r3
    time_get_data.dayofweek,    // Day of the week: 1-7 (1 = Sunday, 2 = Monday, ..., 7 = Saturday)
 8000486:	4b32      	ldr	r3, [pc, #200]	@ (8000550 <main+0x144>)
 8000488:	78db      	ldrb	r3, [r3, #3]
 800048a:	b2dd      	uxtb	r5, r3
    time_get_data.dateofmonth,  // Date of the month: 1-31
 800048c:	4b30      	ldr	r3, [pc, #192]	@ (8000550 <main+0x144>)
 800048e:	791b      	ldrb	r3, [r3, #4]
 8000490:	b2dc      	uxtb	r4, r3
    time_get_data.month,        // Month: 1-12
 8000492:	4b2f      	ldr	r3, [pc, #188]	@ (8000550 <main+0x144>)
 8000494:	795b      	ldrb	r3, [r3, #5]
 8000496:	b2d8      	uxtb	r0, r3
    time_get_data.year,         // Year: 0-99 (0 = 2000, 1 = 2001, ..., 99 = 2099)
 8000498:	4b2d      	ldr	r3, [pc, #180]	@ (8000550 <main+0x144>)
 800049a:	799b      	ldrb	r3, [r3, #6]
 800049c:	b2d9      	uxtb	r1, r3
    NOT_USED_MODE,              // Select: DAY_OF_WEEK_MODE, DATE_OF_MONTH_MODE, NOT_USED_MODE
    time_get_data.dayofweek,    // Day of the week: 1-7 (1 = Sunday, 2 = Monday, ..., 7 = Saturday), or Date of the month: 1-31
 800049e:	4b2c      	ldr	r3, [pc, #176]	@ (8000550 <main+0x144>)
 80004a0:	78db      	ldrb	r3, [r3, #3]
 80004a2:	b2da      	uxtb	r2, r3
  system_param_data =
 80004a4:	4b2d      	ldr	r3, [pc, #180]	@ (800055c <main+0x150>)
 80004a6:	f883 c000 	strb.w	ip, [r3]
 80004aa:	4b2c      	ldr	r3, [pc, #176]	@ (800055c <main+0x150>)
 80004ac:	705e      	strb	r6, [r3, #1]
 80004ae:	4b2b      	ldr	r3, [pc, #172]	@ (800055c <main+0x150>)
 80004b0:	709d      	strb	r5, [r3, #2]
 80004b2:	4b2a      	ldr	r3, [pc, #168]	@ (800055c <main+0x150>)
 80004b4:	70dc      	strb	r4, [r3, #3]
 80004b6:	4b29      	ldr	r3, [pc, #164]	@ (800055c <main+0x150>)
 80004b8:	7118      	strb	r0, [r3, #4]
 80004ba:	4b28      	ldr	r3, [pc, #160]	@ (800055c <main+0x150>)
 80004bc:	7159      	strb	r1, [r3, #5]
 80004be:	4b27      	ldr	r3, [pc, #156]	@ (800055c <main+0x150>)
 80004c0:	2102      	movs	r1, #2
 80004c2:	7199      	strb	r1, [r3, #6]
 80004c4:	4b25      	ldr	r3, [pc, #148]	@ (800055c <main+0x150>)
 80004c6:	71da      	strb	r2, [r3, #7]
 80004c8:	4b24      	ldr	r3, [pc, #144]	@ (800055c <main+0x150>)
 80004ca:	2201      	movs	r2, #1
 80004cc:	721a      	strb	r2, [r3, #8]
    true                        // true = ON, false = OFF
  };

  // Initialize the UART module to receive data
  //    HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size);
  HAL_UART_Receive_IT(&huart1, uart_rx_data, 2);
 80004ce:	2202      	movs	r2, #2
 80004d0:	4923      	ldr	r1, [pc, #140]	@ (8000560 <main+0x154>)
 80004d2:	4824      	ldr	r0, [pc, #144]	@ (8000564 <main+0x158>)
 80004d4:	f004 fadc 	bl	8004a90 <HAL_UART_Receive_IT>

  // Initialize the ADC module to monitor battery voltage
  //    HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc);
  HAL_ADC_Start_IT(&hadc1);
 80004d8:	4823      	ldr	r0, [pc, #140]	@ (8000568 <main+0x15c>)
 80004da:	f001 fec3 	bl	8002264 <HAL_ADC_Start_IT>
    
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    Button_Handle();
 80004de:	f000 fc7d 	bl	8000ddc <Button_Handle>

    // Check if the RTC Interrupt Flag is set (RTC Interrupt Flag) on PB4 (Activated every second)
    if (rtc_int_flag)
 80004e2:	4b22      	ldr	r3, [pc, #136]	@ (800056c <main+0x160>)
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	b2db      	uxtb	r3, r3
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d018      	beq.n	800051e <main+0x112>
    {
      // Retrieve the time values from the RTC module
      Time_Get(&time_get_data);
 80004ec:	4818      	ldr	r0, [pc, #96]	@ (8000550 <main+0x144>)
 80004ee:	f000 f931 	bl	8000754 <Time_Get>
      
      // Check the alarms
      //   void Alarm_Check (volatile TIME_DATA *time_get_data)
      Alarm_Check(&time_get_data);
 80004f2:	4817      	ldr	r0, [pc, #92]	@ (8000550 <main+0x144>)
 80004f4:	f000 fb78 	bl	8000be8 <Alarm_Check>

      // Reset the RTC Interrupt Flag
      rtc_int_flag = false;
 80004f8:	4b1c      	ldr	r3, [pc, #112]	@ (800056c <main+0x160>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	701a      	strb	r2, [r3, #0]

      // Toggle the debug RTC interrupt flag for debugging purposes
      debug_rtc_int = !debug_rtc_int;
 80004fe:	4b1c      	ldr	r3, [pc, #112]	@ (8000570 <main+0x164>)
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	b2db      	uxtb	r3, r3
 8000504:	2b00      	cmp	r3, #0
 8000506:	bf14      	ite	ne
 8000508:	2301      	movne	r3, #1
 800050a:	2300      	moveq	r3, #0
 800050c:	b2db      	uxtb	r3, r3
 800050e:	f083 0301 	eor.w	r3, r3, #1
 8000512:	b2db      	uxtb	r3, r3
 8000514:	f003 0301 	and.w	r3, r3, #1
 8000518:	b2da      	uxtb	r2, r3
 800051a:	4b15      	ldr	r3, [pc, #84]	@ (8000570 <main+0x164>)
 800051c:	701a      	strb	r2, [r3, #0]
    }

    // Check if the ADC interrupt flag is set (ADC Valid Flag)
    if (adc_valid_flag)
 800051e:	4b15      	ldr	r3, [pc, #84]	@ (8000574 <main+0x168>)
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	b2db      	uxtb	r3, r3
 8000524:	2b00      	cmp	r3, #0
 8000526:	d005      	beq.n	8000534 <main+0x128>
	  {
      // Re-enable the ADC interrupt to continue monitoring ADC values
      HAL_ADC_Start_IT(&hadc1);
 8000528:	480f      	ldr	r0, [pc, #60]	@ (8000568 <main+0x15c>)
 800052a:	f001 fe9b 	bl	8002264 <HAL_ADC_Start_IT>

      // Delay for 100ms to allow the ADC to stabilize
      HAL_Delay(100);
 800052e:	2064      	movs	r0, #100	@ 0x64
 8000530:	f001 fd9c 	bl	800206c <HAL_Delay>
	  }

    // Check if the UART interrupt flag is set (UART Receive Flag)
    if (uart_rx_flag)
 8000534:	4b10      	ldr	r3, [pc, #64]	@ (8000578 <main+0x16c>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	b2db      	uxtb	r3, r3
 800053a:	2b00      	cmp	r3, #0
 800053c:	d0cf      	beq.n	80004de <main+0xd2>
	  {
      // Re-enable the UART interrupt to continue receiving data
      HAL_UART_Receive_IT(&huart1,uart_rx_data,2); 
 800053e:	2202      	movs	r2, #2
 8000540:	4907      	ldr	r1, [pc, #28]	@ (8000560 <main+0x154>)
 8000542:	4808      	ldr	r0, [pc, #32]	@ (8000564 <main+0x158>)
 8000544:	f004 faa4 	bl	8004a90 <HAL_UART_Receive_IT>
      
      // Delay for 100ms to allow the UART to stabilize
      HAL_Delay(100);
 8000548:	2064      	movs	r0, #100	@ 0x64
 800054a:	f001 fd8f 	bl	800206c <HAL_Delay>
    Button_Handle();
 800054e:	e7c6      	b.n	80004de <main+0xd2>
 8000550:	2000010c 	.word	0x2000010c
 8000554:	20000114 	.word	0x20000114
 8000558:	20000150 	.word	0x20000150
 800055c:	20000100 	.word	0x20000100
 8000560:	20000160 	.word	0x20000160
 8000564:	20000164 	.word	0x20000164
 8000568:	20000078 	.word	0x20000078
 800056c:	20000151 	.word	0x20000151
 8000570:	20000153 	.word	0x20000153
 8000574:	20000159 	.word	0x20000159
 8000578:	2000015e 	.word	0x2000015e

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b094      	sub	sp, #80	@ 0x50
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000586:	2228      	movs	r2, #40	@ 0x28
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f004 ffb8 	bl	8005500 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	f107 0314 	add.w	r3, r7, #20
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005a0:	1d3b      	adds	r3, r7, #4
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	605a      	str	r2, [r3, #4]
 80005a8:	609a      	str	r2, [r3, #8]
 80005aa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ac:	2301      	movs	r3, #1
 80005ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80005b6:	2300      	movs	r3, #0
 80005b8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ba:	2301      	movs	r3, #1
 80005bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005be:	2302      	movs	r3, #2
 80005c0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005c8:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80005cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80005d2:	4618      	mov	r0, r3
 80005d4:	f003 fd46 	bl	8004064 <HAL_RCC_OscConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005de:	f001 fba1 	bl	8001d24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e2:	230f      	movs	r3, #15
 80005e4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e6:	2302      	movs	r3, #2
 80005e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005f2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005f8:	f107 0314 	add.w	r3, r7, #20
 80005fc:	2102      	movs	r1, #2
 80005fe:	4618      	mov	r0, r3
 8000600:	f003 ffb2 	bl	8004568 <HAL_RCC_ClockConfig>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800060a:	f001 fb8b 	bl	8001d24 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800060e:	2302      	movs	r3, #2
 8000610:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000612:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000616:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	4618      	mov	r0, r3
 800061c:	f004 f932 	bl	8004884 <HAL_RCCEx_PeriphCLKConfig>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000626:	f001 fb7d 	bl	8001d24 <Error_Handler>
  }
}
 800062a:	bf00      	nop
 800062c:	3750      	adds	r7, #80	@ 0x50
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
	...

08000634 <Dec_To_BCD>:
  * @brief  Convert a normal decimal number to Binary Coded Decimal (BCD).
  * @param  val: Decimal number to be converted.
  * @retval uint8_t: BCD representation of the input decimal number.
  */
uint8_t Dec_To_BCD(int val)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  return (uint8_t)( (val/10*16) + (val%10) );
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	4a0e      	ldr	r2, [pc, #56]	@ (8000678 <Dec_To_BCD+0x44>)
 8000640:	fb82 1203 	smull	r1, r2, r2, r3
 8000644:	1092      	asrs	r2, r2, #2
 8000646:	17db      	asrs	r3, r3, #31
 8000648:	1ad3      	subs	r3, r2, r3
 800064a:	b2db      	uxtb	r3, r3
 800064c:	011b      	lsls	r3, r3, #4
 800064e:	b2d8      	uxtb	r0, r3
 8000650:	687a      	ldr	r2, [r7, #4]
 8000652:	4b09      	ldr	r3, [pc, #36]	@ (8000678 <Dec_To_BCD+0x44>)
 8000654:	fb83 1302 	smull	r1, r3, r3, r2
 8000658:	1099      	asrs	r1, r3, #2
 800065a:	17d3      	asrs	r3, r2, #31
 800065c:	1ac9      	subs	r1, r1, r3
 800065e:	460b      	mov	r3, r1
 8000660:	009b      	lsls	r3, r3, #2
 8000662:	440b      	add	r3, r1
 8000664:	005b      	lsls	r3, r3, #1
 8000666:	1ad1      	subs	r1, r2, r3
 8000668:	b2cb      	uxtb	r3, r1
 800066a:	4403      	add	r3, r0
 800066c:	b2db      	uxtb	r3, r3
}
 800066e:	4618      	mov	r0, r3
 8000670:	370c      	adds	r7, #12
 8000672:	46bd      	mov	sp, r7
 8000674:	bc80      	pop	{r7}
 8000676:	4770      	bx	lr
 8000678:	66666667 	.word	0x66666667

0800067c <BCD_To_Dec>:
  * @brief  Convert a Binary Coded Decimal (BCD) value to a normal decimal number.
  * @param  val: BCD value to be converted.
  * @retval int: Decimal representation of the input BCD value.
  */
int BCD_To_Dec(uint8_t val)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	4603      	mov	r3, r0
 8000684:	71fb      	strb	r3, [r7, #7]
  return (int)( (val/16*10) + (val%16) );
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	091b      	lsrs	r3, r3, #4
 800068a:	b2db      	uxtb	r3, r3
 800068c:	461a      	mov	r2, r3
 800068e:	4613      	mov	r3, r2
 8000690:	009b      	lsls	r3, r3, #2
 8000692:	4413      	add	r3, r2
 8000694:	005b      	lsls	r3, r3, #1
 8000696:	461a      	mov	r2, r3
 8000698:	79fb      	ldrb	r3, [r7, #7]
 800069a:	f003 030f 	and.w	r3, r3, #15
 800069e:	4413      	add	r3, r2
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	370c      	adds	r7, #12
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bc80      	pop	{r7}
 80006a8:	4770      	bx	lr
	...

080006ac <Time_Set>:
  * @param  month: Month: 1-12
  * @param  year: Year: 0-99 (0 = 2000, 1 = 2001, ..., 99 = 2099)
  * @retval None
*/
void Time_Set (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom, uint8_t month, uint8_t year)
{
 80006ac:	b590      	push	{r4, r7, lr}
 80006ae:	b089      	sub	sp, #36	@ 0x24
 80006b0:	af04      	add	r7, sp, #16
 80006b2:	4604      	mov	r4, r0
 80006b4:	4608      	mov	r0, r1
 80006b6:	4611      	mov	r1, r2
 80006b8:	461a      	mov	r2, r3
 80006ba:	4623      	mov	r3, r4
 80006bc:	71fb      	strb	r3, [r7, #7]
 80006be:	4603      	mov	r3, r0
 80006c0:	71bb      	strb	r3, [r7, #6]
 80006c2:	460b      	mov	r3, r1
 80006c4:	717b      	strb	r3, [r7, #5]
 80006c6:	4613      	mov	r3, r2
 80006c8:	713b      	strb	r3, [r7, #4]
	// A blank array (7 slots) to contain the time values
  uint8_t setTime[7];

  // Store the time values (converted in to BCD code) into the blank array
	setTime[0] = Dec_To_BCD(sec);
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	4618      	mov	r0, r3
 80006ce:	f7ff ffb1 	bl	8000634 <Dec_To_BCD>
 80006d2:	4603      	mov	r3, r0
 80006d4:	723b      	strb	r3, [r7, #8]
	setTime[1] = Dec_To_BCD(min);
 80006d6:	79bb      	ldrb	r3, [r7, #6]
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff ffab 	bl	8000634 <Dec_To_BCD>
 80006de:	4603      	mov	r3, r0
 80006e0:	727b      	strb	r3, [r7, #9]
	setTime[2] = Dec_To_BCD(hour);
 80006e2:	797b      	ldrb	r3, [r7, #5]
 80006e4:	4618      	mov	r0, r3
 80006e6:	f7ff ffa5 	bl	8000634 <Dec_To_BCD>
 80006ea:	4603      	mov	r3, r0
 80006ec:	72bb      	strb	r3, [r7, #10]
	setTime[3] = Dec_To_BCD(dow);
 80006ee:	793b      	ldrb	r3, [r7, #4]
 80006f0:	4618      	mov	r0, r3
 80006f2:	f7ff ff9f 	bl	8000634 <Dec_To_BCD>
 80006f6:	4603      	mov	r3, r0
 80006f8:	72fb      	strb	r3, [r7, #11]
	setTime[4] = Dec_To_BCD(dom);
 80006fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80006fe:	4618      	mov	r0, r3
 8000700:	f7ff ff98 	bl	8000634 <Dec_To_BCD>
 8000704:	4603      	mov	r3, r0
 8000706:	733b      	strb	r3, [r7, #12]
	setTime[5] = Dec_To_BCD(month);
 8000708:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800070c:	4618      	mov	r0, r3
 800070e:	f7ff ff91 	bl	8000634 <Dec_To_BCD>
 8000712:	4603      	mov	r3, r0
 8000714:	737b      	strb	r3, [r7, #13]
	setTime[6] = Dec_To_BCD(year);
 8000716:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff ff8a 	bl	8000634 <Dec_To_BCD>
 8000720:	4603      	mov	r3, r0
 8000722:	73bb      	strb	r3, [r7, #14]

  // Send the array containing the time values to the RTC module through I2C interface at address 00h - 06h (size of value: 7 bytes)
  // HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
  //    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);	
  HAL_I2C_Mem_Write(DS3231_I2C, DS3231_ADDR, 0x00, 1, setTime, sizeof(setTime), 1000);
 8000724:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000728:	9302      	str	r3, [sp, #8]
 800072a:	2307      	movs	r3, #7
 800072c:	9301      	str	r3, [sp, #4]
 800072e:	f107 0308 	add.w	r3, r7, #8
 8000732:	9300      	str	r3, [sp, #0]
 8000734:	2301      	movs	r3, #1
 8000736:	2200      	movs	r2, #0
 8000738:	21d0      	movs	r1, #208	@ 0xd0
 800073a:	4805      	ldr	r0, [pc, #20]	@ (8000750 <Time_Set+0xa4>)
 800073c:	f002 fd70 	bl	8003220 <HAL_I2C_Mem_Write>

  // Delay for 1ms to allow the RTC module to process the data
  HAL_Delay(1);
 8000740:	2001      	movs	r0, #1
 8000742:	f001 fc93 	bl	800206c <HAL_Delay>
}
 8000746:	bf00      	nop
 8000748:	3714      	adds	r7, #20
 800074a:	46bd      	mov	sp, r7
 800074c:	bd90      	pop	{r4, r7, pc}
 800074e:	bf00      	nop
 8000750:	200000a8 	.word	0x200000a8

08000754 <Time_Get>:
  * @brief  Get time from the RTC module through I2C interface.
  * @param  time_get_data: Pointer to a TIME structure to store the retrieved time values.
  * @retval None
*/
void Time_Get (volatile TIME_DATA *time_get_data)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b088      	sub	sp, #32
 8000758:	af04      	add	r7, sp, #16
 800075a:	6078      	str	r0, [r7, #4]
  uint8_t getTime[7];

  // Receive the time values from the RTC module through I2C interface, then store them into the blank array (size of value: 7 bytes)
  // HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
  //    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);  
  HAL_I2C_Mem_Read(DS3231_I2C, DS3231_ADDR, 0x00, 1, getTime, sizeof(getTime), 1000);
 800075c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000760:	9302      	str	r3, [sp, #8]
 8000762:	2307      	movs	r3, #7
 8000764:	9301      	str	r3, [sp, #4]
 8000766:	f107 0308 	add.w	r3, r7, #8
 800076a:	9300      	str	r3, [sp, #0]
 800076c:	2301      	movs	r3, #1
 800076e:	2200      	movs	r2, #0
 8000770:	21d0      	movs	r1, #208	@ 0xd0
 8000772:	4821      	ldr	r0, [pc, #132]	@ (80007f8 <Time_Get+0xa4>)
 8000774:	f002 fe4e 	bl	8003414 <HAL_I2C_Mem_Read>

  // Delay for 1ms to allow the RTC module to process the data
  HAL_Delay(1);
 8000778:	2001      	movs	r0, #1
 800077a:	f001 fc77 	bl	800206c <HAL_Delay>

  // Store the time values (converted from BCD code to decimal) into the time variable
	time_get_data->second       = BCD_To_Dec(getTime[0]);
 800077e:	7a3b      	ldrb	r3, [r7, #8]
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff ff7b 	bl	800067c <BCD_To_Dec>
 8000786:	4603      	mov	r3, r0
 8000788:	b2da      	uxtb	r2, r3
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	701a      	strb	r2, [r3, #0]
	time_get_data->minute       = BCD_To_Dec(getTime[1]);
 800078e:	7a7b      	ldrb	r3, [r7, #9]
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff ff73 	bl	800067c <BCD_To_Dec>
 8000796:	4603      	mov	r3, r0
 8000798:	b2da      	uxtb	r2, r3
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	705a      	strb	r2, [r3, #1]
	time_get_data->hour         = BCD_To_Dec(getTime[2]);
 800079e:	7abb      	ldrb	r3, [r7, #10]
 80007a0:	4618      	mov	r0, r3
 80007a2:	f7ff ff6b 	bl	800067c <BCD_To_Dec>
 80007a6:	4603      	mov	r3, r0
 80007a8:	b2da      	uxtb	r2, r3
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	709a      	strb	r2, [r3, #2]
	time_get_data->dayofweek    = BCD_To_Dec(getTime[3]);
 80007ae:	7afb      	ldrb	r3, [r7, #11]
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff ff63 	bl	800067c <BCD_To_Dec>
 80007b6:	4603      	mov	r3, r0
 80007b8:	b2da      	uxtb	r2, r3
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	70da      	strb	r2, [r3, #3]
	time_get_data->dateofmonth  = BCD_To_Dec(getTime[4]);
 80007be:	7b3b      	ldrb	r3, [r7, #12]
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff ff5b 	bl	800067c <BCD_To_Dec>
 80007c6:	4603      	mov	r3, r0
 80007c8:	b2da      	uxtb	r2, r3
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	711a      	strb	r2, [r3, #4]
	time_get_data->month        = BCD_To_Dec(getTime[5]);
 80007ce:	7b7b      	ldrb	r3, [r7, #13]
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff ff53 	bl	800067c <BCD_To_Dec>
 80007d6:	4603      	mov	r3, r0
 80007d8:	b2da      	uxtb	r2, r3
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	715a      	strb	r2, [r3, #5]
	time_get_data->year         = BCD_To_Dec(getTime[6]);
 80007de:	7bbb      	ldrb	r3, [r7, #14]
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff ff4b 	bl	800067c <BCD_To_Dec>
 80007e6:	4603      	mov	r3, r0
 80007e8:	b2da      	uxtb	r2, r3
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	719a      	strb	r2, [r3, #6]
}
 80007ee:	bf00      	nop
 80007f0:	3710      	adds	r7, #16
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	200000a8 	.word	0x200000a8

080007fc <Time_Ctrl>:
  * @param  dow_dom: Day of the week or date of the month (1-7 or 1-31).
  * @param  dy_dt: Day of week or date of month (1 = day of week, 0 = date of month, 0 = not used).
  * @retval None
*/
void Time_Ctrl (uint8_t mode, uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow_dom, bool dy_dt)
{
 80007fc:	b590      	push	{r4, r7, lr}
 80007fe:	b08b      	sub	sp, #44	@ 0x2c
 8000800:	af04      	add	r7, sp, #16
 8000802:	4604      	mov	r4, r0
 8000804:	4608      	mov	r0, r1
 8000806:	4611      	mov	r1, r2
 8000808:	461a      	mov	r2, r3
 800080a:	4623      	mov	r3, r4
 800080c:	71fb      	strb	r3, [r7, #7]
 800080e:	4603      	mov	r3, r0
 8000810:	71bb      	strb	r3, [r7, #6]
 8000812:	460b      	mov	r3, r1
 8000814:	717b      	strb	r3, [r7, #5]
 8000816:	4613      	mov	r3, r2
 8000818:	713b      	strb	r3, [r7, #4]
  // A blank array (4 slots) to contain the RTC alarm settings
  uint8_t ctrlTime[4];

  // A mask bit to set the Control register in the RTC module
  //    Address 0Eh: A1IE = 1
  uint8_t ctrlAlarm = 1; 
 800081a:	2301      	movs	r3, #1
 800081c:	73fb      	strb	r3, [r7, #15]

  // A mask bit to set the alarm modes (Bit 7) in the RTC module
  uint8_t maskBit = 128;
 800081e:	2380      	movs	r3, #128	@ 0x80
 8000820:	75fb      	strb	r3, [r7, #23]

  // A mask bit for selection of [day of week] or [date of month] (Bit 6) in the RTC module
  //    If the input [day of week]/ [date of month] selection is 1, the mask bit will be 64.
  uint8_t dyDt = (dy_dt == true) ? 64 : 0;
 8000822:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <Time_Ctrl+0x32>
 800082a:	2340      	movs	r3, #64	@ 0x40
 800082c:	e000      	b.n	8000830 <Time_Ctrl+0x34>
 800082e:	2300      	movs	r3, #0
 8000830:	75bb      	strb	r3, [r7, #22]

  // Store the RTC alarm time settings (converted into BCD code) into the blank array
  ctrlTime[0] = Dec_To_BCD(sec);
 8000832:	79bb      	ldrb	r3, [r7, #6]
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff fefd 	bl	8000634 <Dec_To_BCD>
 800083a:	4603      	mov	r3, r0
 800083c:	743b      	strb	r3, [r7, #16]
	ctrlTime[1] = Dec_To_BCD(min);
 800083e:	797b      	ldrb	r3, [r7, #5]
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff fef7 	bl	8000634 <Dec_To_BCD>
 8000846:	4603      	mov	r3, r0
 8000848:	747b      	strb	r3, [r7, #17]
	ctrlTime[2] = Dec_To_BCD(hour);
 800084a:	793b      	ldrb	r3, [r7, #4]
 800084c:	4618      	mov	r0, r3
 800084e:	f7ff fef1 	bl	8000634 <Dec_To_BCD>
 8000852:	4603      	mov	r3, r0
 8000854:	74bb      	strb	r3, [r7, #18]
	ctrlTime[3] = Dec_To_BCD(dow_dom);
 8000856:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff feea 	bl	8000634 <Dec_To_BCD>
 8000860:	4603      	mov	r3, r0
 8000862:	74fb      	strb	r3, [r7, #19]
  //      1    : Alarm when seconds match
  //      2    : Alarm when minutes and seconds match
  //      3    : Alarm when hours, minutes, and seconds match
  //      4    : Alarm when date, hours, minutes, and seconds match
  //      5    : Alarm when day, hours, minutes, and seconds match
  switch (mode)
 8000864:	79fb      	ldrb	r3, [r7, #7]
 8000866:	2b05      	cmp	r3, #5
 8000868:	d865      	bhi.n	8000936 <Time_Ctrl+0x13a>
 800086a:	a201      	add	r2, pc, #4	@ (adr r2, 8000870 <Time_Ctrl+0x74>)
 800086c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000870:	08000889 	.word	0x08000889
 8000874:	080008b3 	.word	0x080008b3
 8000878:	080008d7 	.word	0x080008d7
 800087c:	080008f5 	.word	0x080008f5
 8000880:	0800090d 	.word	0x0800090d
 8000884:	0800091f 	.word	0x0800091f
  {
    case 0:
      // Alarm mask bit: A1M4:A1M1 = b1111, DY/DT = X
      ctrlTime[0] += maskBit;
 8000888:	7c3a      	ldrb	r2, [r7, #16]
 800088a:	7dfb      	ldrb	r3, [r7, #23]
 800088c:	4413      	add	r3, r2
 800088e:	b2db      	uxtb	r3, r3
 8000890:	743b      	strb	r3, [r7, #16]
      ctrlTime[1] += maskBit;
 8000892:	7c7a      	ldrb	r2, [r7, #17]
 8000894:	7dfb      	ldrb	r3, [r7, #23]
 8000896:	4413      	add	r3, r2
 8000898:	b2db      	uxtb	r3, r3
 800089a:	747b      	strb	r3, [r7, #17]
      ctrlTime[2] += maskBit;
 800089c:	7cba      	ldrb	r2, [r7, #18]
 800089e:	7dfb      	ldrb	r3, [r7, #23]
 80008a0:	4413      	add	r3, r2
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	74bb      	strb	r3, [r7, #18]
      ctrlTime[3] += maskBit;
 80008a6:	7cfa      	ldrb	r2, [r7, #19]
 80008a8:	7dfb      	ldrb	r3, [r7, #23]
 80008aa:	4413      	add	r3, r2
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	74fb      	strb	r3, [r7, #19]
      break;
 80008b0:	e04a      	b.n	8000948 <Time_Ctrl+0x14c>
    case 1:
      // Alarm mask bit: A1M4:A1M1 = b1110, DY/DT = X
      ctrlTime[0] += 0;
 80008b2:	7c3b      	ldrb	r3, [r7, #16]
 80008b4:	743b      	strb	r3, [r7, #16]
      ctrlTime[1] += maskBit;
 80008b6:	7c7a      	ldrb	r2, [r7, #17]
 80008b8:	7dfb      	ldrb	r3, [r7, #23]
 80008ba:	4413      	add	r3, r2
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	747b      	strb	r3, [r7, #17]
      ctrlTime[2] += maskBit;
 80008c0:	7cba      	ldrb	r2, [r7, #18]
 80008c2:	7dfb      	ldrb	r3, [r7, #23]
 80008c4:	4413      	add	r3, r2
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	74bb      	strb	r3, [r7, #18]
      ctrlTime[3] += maskBit;
 80008ca:	7cfa      	ldrb	r2, [r7, #19]
 80008cc:	7dfb      	ldrb	r3, [r7, #23]
 80008ce:	4413      	add	r3, r2
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	74fb      	strb	r3, [r7, #19]
      break;
 80008d4:	e038      	b.n	8000948 <Time_Ctrl+0x14c>
    case 2:
      // Alarm mask bit: A1M4:A1M1 = b1100, DY/DT = X
      ctrlTime[0] += 0;
 80008d6:	7c3b      	ldrb	r3, [r7, #16]
 80008d8:	743b      	strb	r3, [r7, #16]
      ctrlTime[1] += 0;
 80008da:	7c7b      	ldrb	r3, [r7, #17]
 80008dc:	747b      	strb	r3, [r7, #17]
      ctrlTime[2] += maskBit;
 80008de:	7cba      	ldrb	r2, [r7, #18]
 80008e0:	7dfb      	ldrb	r3, [r7, #23]
 80008e2:	4413      	add	r3, r2
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	74bb      	strb	r3, [r7, #18]
      ctrlTime[3] += maskBit;
 80008e8:	7cfa      	ldrb	r2, [r7, #19]
 80008ea:	7dfb      	ldrb	r3, [r7, #23]
 80008ec:	4413      	add	r3, r2
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	74fb      	strb	r3, [r7, #19]
      break;
 80008f2:	e029      	b.n	8000948 <Time_Ctrl+0x14c>
    case 3:
      // Alarm mask bit: A1M4:A1M1 = b1000, DY/DT = X
      ctrlTime[0] += 0;
 80008f4:	7c3b      	ldrb	r3, [r7, #16]
 80008f6:	743b      	strb	r3, [r7, #16]
      ctrlTime[1] += 0;
 80008f8:	7c7b      	ldrb	r3, [r7, #17]
 80008fa:	747b      	strb	r3, [r7, #17]
      ctrlTime[2] += 0;
 80008fc:	7cbb      	ldrb	r3, [r7, #18]
 80008fe:	74bb      	strb	r3, [r7, #18]
      ctrlTime[3] += maskBit;
 8000900:	7cfa      	ldrb	r2, [r7, #19]
 8000902:	7dfb      	ldrb	r3, [r7, #23]
 8000904:	4413      	add	r3, r2
 8000906:	b2db      	uxtb	r3, r3
 8000908:	74fb      	strb	r3, [r7, #19]
      break;
 800090a:	e01d      	b.n	8000948 <Time_Ctrl+0x14c>
    case 4:
      // Alarm mask bit: A1M4:A1M1 = b0000, DY/DT = 0
      ctrlTime[0] += 0;
 800090c:	7c3b      	ldrb	r3, [r7, #16]
 800090e:	743b      	strb	r3, [r7, #16]
      ctrlTime[1] += 0;
 8000910:	7c7b      	ldrb	r3, [r7, #17]
 8000912:	747b      	strb	r3, [r7, #17]
      ctrlTime[2] += 0;
 8000914:	7cbb      	ldrb	r3, [r7, #18]
 8000916:	74bb      	strb	r3, [r7, #18]
      ctrlTime[3] += 0;
 8000918:	7cfb      	ldrb	r3, [r7, #19]
 800091a:	74fb      	strb	r3, [r7, #19]
      break;
 800091c:	e014      	b.n	8000948 <Time_Ctrl+0x14c>
    case 5:
      // Alarm mask bit: A1M4:A1M1 = b0000, DY/DT = 1
      ctrlTime[0] += 0;
 800091e:	7c3b      	ldrb	r3, [r7, #16]
 8000920:	743b      	strb	r3, [r7, #16]
      ctrlTime[1] += 0;
 8000922:	7c7b      	ldrb	r3, [r7, #17]
 8000924:	747b      	strb	r3, [r7, #17]
      ctrlTime[2] += 0;
 8000926:	7cbb      	ldrb	r3, [r7, #18]
 8000928:	74bb      	strb	r3, [r7, #18]
      ctrlTime[3] += dyDt;
 800092a:	7cfa      	ldrb	r2, [r7, #19]
 800092c:	7dbb      	ldrb	r3, [r7, #22]
 800092e:	4413      	add	r3, r2
 8000930:	b2db      	uxtb	r3, r3
 8000932:	74fb      	strb	r3, [r7, #19]
      break;
 8000934:	e008      	b.n	8000948 <Time_Ctrl+0x14c>
    default:
      // Alarm mask bit: A1M4:A1M1 = b0000, DY/DT = 0
      ctrlTime[0] += 0;
 8000936:	7c3b      	ldrb	r3, [r7, #16]
 8000938:	743b      	strb	r3, [r7, #16]
      ctrlTime[1] += 0;
 800093a:	7c7b      	ldrb	r3, [r7, #17]
 800093c:	747b      	strb	r3, [r7, #17]
      ctrlTime[2] += 0;
 800093e:	7cbb      	ldrb	r3, [r7, #18]
 8000940:	74bb      	strb	r3, [r7, #18]
      ctrlTime[3] += 0;
 8000942:	7cfb      	ldrb	r3, [r7, #19]
 8000944:	74fb      	strb	r3, [r7, #19]
      break;
 8000946:	bf00      	nop
  }

  // Send the array containing the RTC alarm mode setting to the RTC module through I2C interface at address 07h - 0Ah (size of value: 4 bytes)
  // HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
  //    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);	  
  HAL_I2C_Mem_Write(DS3231_I2C, DS3231_ADDR, 0x07, 1, ctrlTime, sizeof(ctrlTime), 1000);
 8000948:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800094c:	9302      	str	r3, [sp, #8]
 800094e:	2304      	movs	r3, #4
 8000950:	9301      	str	r3, [sp, #4]
 8000952:	f107 0310 	add.w	r3, r7, #16
 8000956:	9300      	str	r3, [sp, #0]
 8000958:	2301      	movs	r3, #1
 800095a:	2207      	movs	r2, #7
 800095c:	21d0      	movs	r1, #208	@ 0xd0
 800095e:	480d      	ldr	r0, [pc, #52]	@ (8000994 <Time_Ctrl+0x198>)
 8000960:	f002 fc5e 	bl	8003220 <HAL_I2C_Mem_Write>

  // Delay for 1ms to allow the RTC module to process the data
  HAL_Delay(1);
 8000964:	2001      	movs	r0, #1
 8000966:	f001 fb81 	bl	800206c <HAL_Delay>

  // Send the alarm control mask bits to the RTC module through I2C interface at address 0Eh (size of value: 1 byte)
  // HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
  //    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);	  
  HAL_I2C_Mem_Write(DS3231_I2C, DS3231_ADDR, 0x0E, 1, &ctrlAlarm, sizeof(ctrlAlarm), 1000);
 800096a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800096e:	9302      	str	r3, [sp, #8]
 8000970:	2301      	movs	r3, #1
 8000972:	9301      	str	r3, [sp, #4]
 8000974:	f107 030f 	add.w	r3, r7, #15
 8000978:	9300      	str	r3, [sp, #0]
 800097a:	2301      	movs	r3, #1
 800097c:	220e      	movs	r2, #14
 800097e:	21d0      	movs	r1, #208	@ 0xd0
 8000980:	4804      	ldr	r0, [pc, #16]	@ (8000994 <Time_Ctrl+0x198>)
 8000982:	f002 fc4d 	bl	8003220 <HAL_I2C_Mem_Write>

  // Delay for 1ms to allow the RTC module to process the data
  HAL_Delay(1);
 8000986:	2001      	movs	r0, #1
 8000988:	f001 fb70 	bl	800206c <HAL_Delay>
}
 800098c:	bf00      	nop
 800098e:	371c      	adds	r7, #28
 8000990:	46bd      	mov	sp, r7
 8000992:	bd90      	pop	{r4, r7, pc}
 8000994:	200000a8 	.word	0x200000a8

08000998 <Time_Init>:
  * @param  month: Month: 1-12
  * @param  year: Year: 0-99 (0 = 2000, 1 = 2001, ..., 99 = 2099)
  * @retval None
*/
void Time_Init (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom, uint8_t month, uint8_t year)
{
 8000998:	b590      	push	{r4, r7, lr}
 800099a:	b087      	sub	sp, #28
 800099c:	af04      	add	r7, sp, #16
 800099e:	4604      	mov	r4, r0
 80009a0:	4608      	mov	r0, r1
 80009a2:	4611      	mov	r1, r2
 80009a4:	461a      	mov	r2, r3
 80009a6:	4623      	mov	r3, r4
 80009a8:	71fb      	strb	r3, [r7, #7]
 80009aa:	4603      	mov	r3, r0
 80009ac:	71bb      	strb	r3, [r7, #6]
 80009ae:	460b      	mov	r3, r1
 80009b0:	717b      	strb	r3, [r7, #5]
 80009b2:	4613      	mov	r3, r2
 80009b4:	713b      	strb	r3, [r7, #4]
  // This function is intended for initial setup of the RTC module after a reset.
  // It should not be called repeatedly unless reinitialization is required.
  //    Time_Set (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom, uint8_t month, uint8_t year)
  Time_Set (sec, min, hour, dow, dom, month, year);
 80009b6:	793c      	ldrb	r4, [r7, #4]
 80009b8:	797a      	ldrb	r2, [r7, #5]
 80009ba:	79b9      	ldrb	r1, [r7, #6]
 80009bc:	79f8      	ldrb	r0, [r7, #7]
 80009be:	f897 3020 	ldrb.w	r3, [r7, #32]
 80009c2:	9302      	str	r3, [sp, #8]
 80009c4:	7f3b      	ldrb	r3, [r7, #28]
 80009c6:	9301      	str	r3, [sp, #4]
 80009c8:	7e3b      	ldrb	r3, [r7, #24]
 80009ca:	9300      	str	r3, [sp, #0]
 80009cc:	4623      	mov	r3, r4
 80009ce:	f7ff fe6d 	bl	80006ac <Time_Set>
  //        2    : Alarm when minutes and seconds match
  //        3    : Alarm when hours, minutes, and seconds match
  //        4    : Alarm when date, hours, minutes, and seconds match
  //        5    : Alarm when day, hours, minutes, and seconds match
  //      For mode 0, the remaining input are don't-care values
  Time_Ctrl 
 80009d2:	2300      	movs	r3, #0
 80009d4:	9301      	str	r3, [sp, #4]
 80009d6:	2300      	movs	r3, #0
 80009d8:	9300      	str	r3, [sp, #0]
 80009da:	2300      	movs	r3, #0
 80009dc:	2200      	movs	r2, #0
 80009de:	2100      	movs	r1, #0
 80009e0:	2000      	movs	r0, #0
 80009e2:	f7ff ff0b 	bl	80007fc <Time_Ctrl>
     0, // Minutes: 0-59
     0, // Hours: 0-23
     0, // Day of the week: 1-7 (1 = Sunday, 2 = Monday, ..., 7 = Saturday), or Date of the month: 1-31
     0  // Select: 1 = day of week, 0 = date of month
  );   
}
 80009e6:	bf00      	nop
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd90      	pop	{r4, r7, pc}
	...

080009f0 <Alarm_Set>:
  * @param  on_off: On/ Off state of the alarm (1 = ON, 0 = OFF)
  * @param  slot: Slot number of the alarm in the EEPROM module (0-9)
  * @retval None
*/
void Alarm_Set (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow_dom, ALARM_DY_DT_MODE dy_dt, bool on_off, uint8_t slot)
{
 80009f0:	b590      	push	{r4, r7, lr}
 80009f2:	b089      	sub	sp, #36	@ 0x24
 80009f4:	af04      	add	r7, sp, #16
 80009f6:	4604      	mov	r4, r0
 80009f8:	4608      	mov	r0, r1
 80009fa:	4611      	mov	r1, r2
 80009fc:	461a      	mov	r2, r3
 80009fe:	4623      	mov	r3, r4
 8000a00:	71fb      	strb	r3, [r7, #7]
 8000a02:	4603      	mov	r3, r0
 8000a04:	71bb      	strb	r3, [r7, #6]
 8000a06:	460b      	mov	r3, r1
 8000a08:	717b      	strb	r3, [r7, #5]
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	713b      	strb	r3, [r7, #4]
  // Internal address of the alarm in the EEPROM module (0-8192, or 13 bits)
  uint16_t address = slot * 4;
 8000a0e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000a12:	b29b      	uxth	r3, r3
 8000a14:	009b      	lsls	r3, r3, #2
 8000a16:	81fb      	strh	r3, [r7, #14]

  // Add an ON/OFF (1 bit) signal into the alarm package by using the MSB of the second register
  if (on_off)
 8000a18:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d002      	beq.n	8000a26 <Alarm_Set+0x36>
  {
    sec += (1 << 7);
 8000a20:	79fb      	ldrb	r3, [r7, #7]
 8000a22:	3b80      	subs	r3, #128	@ 0x80
 8000a24:	71fb      	strb	r3, [r7, #7]
  }

  // Add a [day of week] or [date of month] (1 bit) signal into the alarm package by using bit 6 of the dow_dom register
  switch (dy_dt)
 8000a26:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000a2a:	2b02      	cmp	r3, #2
 8000a2c:	d00d      	beq.n	8000a4a <Alarm_Set+0x5a>
 8000a2e:	2b02      	cmp	r3, #2
 8000a30:	dc0d      	bgt.n	8000a4e <Alarm_Set+0x5e>
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d005      	beq.n	8000a42 <Alarm_Set+0x52>
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d109      	bne.n	8000a4e <Alarm_Set+0x5e>
  {
    // Date of the month
    case DATE_OF_MONTH_MODE:
      // Decoding: [Bit 7] = 1, [Bit 6] = 0
      dow_dom += (1 << 7);
 8000a3a:	793b      	ldrb	r3, [r7, #4]
 8000a3c:	3b80      	subs	r3, #128	@ 0x80
 8000a3e:	713b      	strb	r3, [r7, #4]
      break;
 8000a40:	e006      	b.n	8000a50 <Alarm_Set+0x60>

    // Day of the week
    case DAY_OF_WEEK_MODE:
      // Decoding: [Bit 7] = 1, [Bit 6] = 1
      dow_dom += ((1 << 7) | (1 << 6));
 8000a42:	793b      	ldrb	r3, [r7, #4]
 8000a44:	3b40      	subs	r3, #64	@ 0x40
 8000a46:	713b      	strb	r3, [r7, #4]
      break;
 8000a48:	e002      	b.n	8000a50 <Alarm_Set+0x60>

    // Not used
    case NOT_USED_MODE:
      // Decoding: [Bit 7] = 0, [Bit 6] = 0
      dow_dom += 0;
      break;
 8000a4a:	bf00      	nop
 8000a4c:	e000      	b.n	8000a50 <Alarm_Set+0x60>

    default:
      dow_dom += 0;
      break;
 8000a4e:	bf00      	nop

  // A blank array (4 slots) to contain the alarm values
  uint8_t setAlarm[4];
  
  // Store the alarm values into the blank array
  setAlarm[0] = sec;
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	723b      	strb	r3, [r7, #8]
  setAlarm[1] = min;
 8000a54:	79bb      	ldrb	r3, [r7, #6]
 8000a56:	727b      	strb	r3, [r7, #9]
  setAlarm[2] = hour;
 8000a58:	797b      	ldrb	r3, [r7, #5]
 8000a5a:	72bb      	strb	r3, [r7, #10]
  setAlarm[3] = dow_dom;
 8000a5c:	793b      	ldrb	r3, [r7, #4]
 8000a5e:	72fb      	strb	r3, [r7, #11]

  // HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
  //    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);
  HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, address, 1, setAlarm, sizeof(setAlarm), 1000);
 8000a60:	89fa      	ldrh	r2, [r7, #14]
 8000a62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a66:	9302      	str	r3, [sp, #8]
 8000a68:	2304      	movs	r3, #4
 8000a6a:	9301      	str	r3, [sp, #4]
 8000a6c:	f107 0308 	add.w	r3, r7, #8
 8000a70:	9300      	str	r3, [sp, #0]
 8000a72:	2301      	movs	r3, #1
 8000a74:	21a0      	movs	r1, #160	@ 0xa0
 8000a76:	4805      	ldr	r0, [pc, #20]	@ (8000a8c <Alarm_Set+0x9c>)
 8000a78:	f002 fbd2 	bl	8003220 <HAL_I2C_Mem_Write>
  //     +  8 [2nd Word Address Byte]   + 1 [ACK from Client]      +
  //     + {8 [1st Data Word]           + 1 [ACK from Client]} * 4 + 
  //     +  1 [Stop Condition by Host] 
  //     =  65 cycles  
  //    Neccesary delay time = 65 cycles / 400 kHz = 162.5 us = ~ 0.17 ms
  HAL_Delay(1);
 8000a7c:	2001      	movs	r0, #1
 8000a7e:	f001 faf5 	bl	800206c <HAL_Delay>
}
 8000a82:	bf00      	nop
 8000a84:	3714      	adds	r7, #20
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd90      	pop	{r4, r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	200000a8 	.word	0x200000a8

08000a90 <Alarm_Get>:
  * @param  slot: Slot number of the alarm in the EEPROM module (0-9)
  * @param  alarm_get_data: Pointer to an ALARM_DATA structure to store the retrieved alarm values
  * @retval None
*/
void Alarm_Get (uint8_t slot, volatile ALARM_DATA *alarm_get_data)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b088      	sub	sp, #32
 8000a94:	af04      	add	r7, sp, #16
 8000a96:	4603      	mov	r3, r0
 8000a98:	6039      	str	r1, [r7, #0]
 8000a9a:	71fb      	strb	r3, [r7, #7]
  // Address of the alarm in the EEPROM module (0-8192, or 13 bits)
  uint16_t address = slot * 4;
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
 8000a9e:	b29b      	uxth	r3, r3
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	81fb      	strh	r3, [r7, #14]
  // A blank array (4 slots) to contain the alarm values received from the EEPROM module
  uint8_t getAlarm[4];

  // HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
  //    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);
  HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, address, 1, getAlarm, sizeof(getAlarm), 1000);
 8000aa4:	89fa      	ldrh	r2, [r7, #14]
 8000aa6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000aaa:	9302      	str	r3, [sp, #8]
 8000aac:	2304      	movs	r3, #4
 8000aae:	9301      	str	r3, [sp, #4]
 8000ab0:	f107 0308 	add.w	r3, r7, #8
 8000ab4:	9300      	str	r3, [sp, #0]
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	21a0      	movs	r1, #160	@ 0xa0
 8000aba:	481f      	ldr	r0, [pc, #124]	@ (8000b38 <Alarm_Get+0xa8>)
 8000abc:	f002 fcaa 	bl	8003414 <HAL_I2C_Mem_Read>
  //     +  8 [Device Address Byte]     + 1 [ACK from Client]      +
  //     + {8 [1st Data Word]           + 1 [ACK from Client]} * 4 + 
  //     +  1 [Stop Condition by Host] 
  //     =  75 cycles
  //    Neccesary delay time = 75 cycles / 400 kHz = 187.5 us = ~ 0.19 ms
  HAL_Delay(1);
 8000ac0:	2001      	movs	r0, #1
 8000ac2:	f001 fad3 	bl	800206c <HAL_Delay>

  // Store the alarm values into the alarm variable
  alarm_get_data->second = 0;
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	2200      	movs	r2, #0
 8000aca:	701a      	strb	r2, [r3, #0]
  alarm_get_data->minute = getAlarm[1];
 8000acc:	7a7a      	ldrb	r2, [r7, #9]
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	705a      	strb	r2, [r3, #1]
  alarm_get_data->hour = getAlarm[2];
 8000ad2:	7aba      	ldrb	r2, [r7, #10]
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	709a      	strb	r2, [r3, #2]
  
  if (getAlarm[3] >= (1 << 7))
 8000ad8:	7afb      	ldrb	r3, [r7, #11]
 8000ada:	b25b      	sxtb	r3, r3
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	da18      	bge.n	8000b12 <Alarm_Get+0x82>
  {
    if ((getAlarm[3] & 0x7F) >= (1 << 6))
 8000ae0:	7afb      	ldrb	r3, [r7, #11]
 8000ae2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d009      	beq.n	8000afe <Alarm_Get+0x6e>
    {
      alarm_get_data->dy_dt = DAY_OF_WEEK_MODE;
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	2200      	movs	r2, #0
 8000aee:	70da      	strb	r2, [r3, #3]
      alarm_get_data->dow_dom = getAlarm[3] & 0x3F;
 8000af0:	7afb      	ldrb	r3, [r7, #11]
 8000af2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000af6:	b2da      	uxtb	r2, r3
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	711a      	strb	r2, [r3, #4]
 8000afc:	e00c      	b.n	8000b18 <Alarm_Get+0x88>
    }
    else 
    {
      alarm_get_data->dy_dt = DATE_OF_MONTH_MODE;
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	2201      	movs	r2, #1
 8000b02:	70da      	strb	r2, [r3, #3]
      alarm_get_data->dow_dom = getAlarm[3] & 0x7F;
 8000b04:	7afb      	ldrb	r3, [r7, #11]
 8000b06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000b0a:	b2da      	uxtb	r2, r3
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	711a      	strb	r2, [r3, #4]
 8000b10:	e002      	b.n	8000b18 <Alarm_Get+0x88>
    }
  }
  else alarm_get_data->dy_dt = NOT_USED_MODE;
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	2202      	movs	r2, #2
 8000b16:	70da      	strb	r2, [r3, #3]

  if (getAlarm[0] >= (1 << 7)) alarm_get_data->on_off = true;
 8000b18:	7a3b      	ldrb	r3, [r7, #8]
 8000b1a:	b25b      	sxtb	r3, r3
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	da03      	bge.n	8000b28 <Alarm_Get+0x98>
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	2201      	movs	r2, #1
 8000b24:	715a      	strb	r2, [r3, #5]
  else alarm_get_data->on_off = false;
}
 8000b26:	e002      	b.n	8000b2e <Alarm_Get+0x9e>
  else alarm_get_data->on_off = false;
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	715a      	strb	r2, [r3, #5]
}
 8000b2e:	bf00      	nop
 8000b30:	3710      	adds	r7, #16
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	200000a8 	.word	0x200000a8

08000b3c <Alarm_Clear>:
  * @brief  Clear a single alarm from the EEPROM module.
  * @param  slot: Slot number of the alarm in the EEPROM module (0-9)
  * @retval None
*/
void Alarm_Clear (uint8_t slot)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b088      	sub	sp, #32
 8000b40:	af04      	add	r7, sp, #16
 8000b42:	4603      	mov	r3, r0
 8000b44:	71fb      	strb	r3, [r7, #7]
  // Address of the alarm in the EEPROM module (0-8192, or 13 bits)
  uint16_t address = slot * 4;
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	b29b      	uxth	r3, r3
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	81fb      	strh	r3, [r7, #14]

  // A blank array (4 slots) to contain the alarm values to be cleared
  uint8_t clearAlarm[4] = {0, 0, 0, 0};
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60bb      	str	r3, [r7, #8]

  // HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
  //    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);
  HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, address, 1, clearAlarm, sizeof(clearAlarm), 1000);
 8000b52:	89fa      	ldrh	r2, [r7, #14]
 8000b54:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b58:	9302      	str	r3, [sp, #8]
 8000b5a:	2304      	movs	r3, #4
 8000b5c:	9301      	str	r3, [sp, #4]
 8000b5e:	f107 0308 	add.w	r3, r7, #8
 8000b62:	9300      	str	r3, [sp, #0]
 8000b64:	2301      	movs	r3, #1
 8000b66:	21a0      	movs	r1, #160	@ 0xa0
 8000b68:	4804      	ldr	r0, [pc, #16]	@ (8000b7c <Alarm_Clear+0x40>)
 8000b6a:	f002 fb59 	bl	8003220 <HAL_I2C_Mem_Write>
  //     +  8 [2nd Word Address Byte]   + 1 [ACK from Client]      +
  //     + {8 [1st Data Word]           + 1 [ACK from Client]} * 4 + 
  //     +  1 [Stop Condition by Host] 
  //     =  65 cycles  
  //    Neccesary delay time = 65 cycles / 400 kHz = 162.5 us = ~ 0.17 ms
  HAL_Delay(1);
 8000b6e:	2001      	movs	r0, #1
 8000b70:	f001 fa7c 	bl	800206c <HAL_Delay>
}
 8000b74:	bf00      	nop
 8000b76:	3710      	adds	r7, #16
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	200000a8 	.word	0x200000a8

08000b80 <Alarm_Slot_Pointer_Set>:
/**
 * @brief Save the data of pointer for the alarm slot to EEPROM module.
  * @retval None
 */
void Alarm_Slot_Pointer_Set (void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af04      	add	r7, sp, #16
  // HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
  //    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);
  HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, ALARM_SLOT_PTR_ADDR, 1, &alarm_slot_ptr, sizeof(alarm_slot_ptr), 1000);
 8000b86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b8a:	9302      	str	r3, [sp, #8]
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	9301      	str	r3, [sp, #4]
 8000b90:	4b06      	ldr	r3, [pc, #24]	@ (8000bac <Alarm_Slot_Pointer_Set+0x2c>)
 8000b92:	9300      	str	r3, [sp, #0]
 8000b94:	2301      	movs	r3, #1
 8000b96:	2228      	movs	r2, #40	@ 0x28
 8000b98:	21a0      	movs	r1, #160	@ 0xa0
 8000b9a:	4805      	ldr	r0, [pc, #20]	@ (8000bb0 <Alarm_Slot_Pointer_Set+0x30>)
 8000b9c:	f002 fb40 	bl	8003220 <HAL_I2C_Mem_Write>
  //     +  8 [2nd Word Address Byte]   + 1 [ACK from Client]  +
  //     +  8 [1st Data Word]           + 1 [ACK from Client]} + 
  //     +  1 [Stop Condition by Host] 
  //     =  38 cycles  
  //    Neccesary delay time = 65 cycles / 400 kHz = 95 us = ~ 0.01 ms
  HAL_Delay(1);
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	f001 fa63 	bl	800206c <HAL_Delay>
}
 8000ba6:	bf00      	nop
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20000150 	.word	0x20000150
 8000bb0:	200000a8 	.word	0x200000a8

08000bb4 <Alarm_Slot_Pointer_Get>:
/**
 * @brief Retrieve the data of pointer for the alarm slot from EEPROM module.
  * @retval None
 */
void Alarm_Slot_Pointer_Get (void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af04      	add	r7, sp, #16
  // HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
  //    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);
  HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, ALARM_SLOT_PTR_ADDR, 1, &alarm_slot_ptr, sizeof(alarm_slot_ptr), 1000);
 8000bba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bbe:	9302      	str	r3, [sp, #8]
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	9301      	str	r3, [sp, #4]
 8000bc4:	4b06      	ldr	r3, [pc, #24]	@ (8000be0 <Alarm_Slot_Pointer_Get+0x2c>)
 8000bc6:	9300      	str	r3, [sp, #0]
 8000bc8:	2301      	movs	r3, #1
 8000bca:	2228      	movs	r2, #40	@ 0x28
 8000bcc:	21a0      	movs	r1, #160	@ 0xa0
 8000bce:	4805      	ldr	r0, [pc, #20]	@ (8000be4 <Alarm_Slot_Pointer_Get+0x30>)
 8000bd0:	f002 fc20 	bl	8003414 <HAL_I2C_Mem_Read>
  //     +  8 [Device Address Byte]     + 1 [ACK from Client]  +
  //     +  8 [1st Data Word]           + 1 [ACK from Client]} + 
  //     +  1 [Stop Condition by Host] 
  //     =  48 cycles
  //    Neccesary delay time = 75 cycles / 400 kHz = 0.12 ms
  HAL_Delay(1);
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	f001 fa49 	bl	800206c <HAL_Delay>
}
 8000bda:	bf00      	nop
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	20000150 	.word	0x20000150
 8000be4:	200000a8 	.word	0x200000a8

08000be8 <Alarm_Check>:
  * @param  time_get_data: Pointer to a TIME structure to store the current time values
  * @retval None
  * @note   This function compares the current time with all alarms stored in the EEPROM module.
*/
void Alarm_Check (volatile TIME_DATA *time_get_data)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  volatile ALARM_DATA alarmCheckData = {0};
 8000bf0:	f107 030c 	add.w	r3, r7, #12
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	809a      	strh	r2, [r3, #4]

  // Compare the current time with all available alarms in the EEPROM module
  for (int i = 0; i < alarm_slot_ptr; i++)
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	617b      	str	r3, [r7, #20]
 8000bfe:	e04e      	b.n	8000c9e <Alarm_Check+0xb6>
  {
    // Retrieve the alarm values from the EEPROM module
    //    void Alarm_Get (uint8_t slot, ALARM_DATA *alarm_get_data)
    Alarm_Get(i, &alarmCheckData);
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	f107 020c 	add.w	r2, r7, #12
 8000c08:	4611      	mov	r1, r2
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff ff40 	bl	8000a90 <Alarm_Get>

    // Check if the alarm is at ON or OFF state by checking the MSB of the second register
    if (!alarmCheckData.on_off)
 8000c10:	7c7b      	ldrb	r3, [r7, #17]
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	f083 0301 	eor.w	r3, r3, #1
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d131      	bne.n	8000c82 <Alarm_Check+0x9a>
      // Skip if the alarm is OFF
      continue;
    }

    // Check if the current time matches the alarm time (day of week)
    if ((alarmCheckData.dy_dt == DAY_OF_WEEK_MODE)
 8000c1e:	7bfb      	ldrb	r3, [r7, #15]
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d106      	bne.n	8000c34 <Alarm_Check+0x4c>
    &&  (alarmCheckData.dow_dom != time_get_data->dayofweek))
 8000c26:	7c3b      	ldrb	r3, [r7, #16]
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	78db      	ldrb	r3, [r3, #3]
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d128      	bne.n	8000c86 <Alarm_Check+0x9e>
      // Skip if the current time does NOT match the alarm time (day of week)
      continue;
    }

    // Check if the current time matches the alarm time (date of month)
    if ((alarmCheckData.dy_dt == DATE_OF_MONTH_MODE)
 8000c34:	7bfb      	ldrb	r3, [r7, #15]
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	d106      	bne.n	8000c4a <Alarm_Check+0x62>
    &&  (alarmCheckData.dow_dom != time_get_data->dateofmonth))
 8000c3c:	7c3b      	ldrb	r3, [r7, #16]
 8000c3e:	b2da      	uxtb	r2, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	791b      	ldrb	r3, [r3, #4]
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	429a      	cmp	r2, r3
 8000c48:	d11f      	bne.n	8000c8a <Alarm_Check+0xa2>
      // Skip if the current time does NOT match the alarm time (date of month)
      continue;
    }

    // Check if the current time matches the alarm time (hour)
    if (alarmCheckData.hour != time_get_data->hour)
 8000c4a:	7bbb      	ldrb	r3, [r7, #14]
 8000c4c:	b2da      	uxtb	r2, r3
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	789b      	ldrb	r3, [r3, #2]
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d11a      	bne.n	8000c8e <Alarm_Check+0xa6>
      // Skip if the current time does NOT match the alarm time (hour)
      continue;
    }

    // Check if the current time matches the alarm time (minute)
    if (alarmCheckData.minute != time_get_data->minute)
 8000c58:	7b7b      	ldrb	r3, [r7, #13]
 8000c5a:	b2da      	uxtb	r2, r3
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	785b      	ldrb	r3, [r3, #1]
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d115      	bne.n	8000c92 <Alarm_Check+0xaa>
      // Skip if the current time does NOT match the alarm time (minute)
      continue;
    }

    // Check if the current time matches the alarm time (second)
    if (alarmCheckData.second != time_get_data->second)
 8000c66:	7b3b      	ldrb	r3, [r7, #12]
 8000c68:	b2da      	uxtb	r2, r3
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d110      	bne.n	8000c96 <Alarm_Check+0xae>
      // Skip if the current time does NOT match the alarm time (second)
      continue;
    }

    // If all the above checks pass, the alarm is activated
    debug_alarm_activate_ctr++;
 8000c74:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb4 <Alarm_Check+0xcc>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	b2da      	uxtb	r2, r3
 8000c7c:	4b0d      	ldr	r3, [pc, #52]	@ (8000cb4 <Alarm_Check+0xcc>)
 8000c7e:	701a      	strb	r2, [r3, #0]

    // Stop checking time matching
    // to make sure that only one alarm can be activated at a time
    break;
 8000c80:	e014      	b.n	8000cac <Alarm_Check+0xc4>
      continue;
 8000c82:	bf00      	nop
 8000c84:	e008      	b.n	8000c98 <Alarm_Check+0xb0>
      continue;
 8000c86:	bf00      	nop
 8000c88:	e006      	b.n	8000c98 <Alarm_Check+0xb0>
      continue;
 8000c8a:	bf00      	nop
 8000c8c:	e004      	b.n	8000c98 <Alarm_Check+0xb0>
      continue;
 8000c8e:	bf00      	nop
 8000c90:	e002      	b.n	8000c98 <Alarm_Check+0xb0>
      continue;
 8000c92:	bf00      	nop
 8000c94:	e000      	b.n	8000c98 <Alarm_Check+0xb0>
      continue;
 8000c96:	bf00      	nop
  for (int i = 0; i < alarm_slot_ptr; i++)
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	617b      	str	r3, [r7, #20]
 8000c9e:	4b06      	ldr	r3, [pc, #24]	@ (8000cb8 <Alarm_Check+0xd0>)
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	dbaa      	blt.n	8000c00 <Alarm_Check+0x18>
  }
}
 8000caa:	bf00      	nop
 8000cac:	bf00      	nop
 8000cae:	3718      	adds	r7, #24
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20000152 	.word	0x20000152
 8000cb8:	20000150 	.word	0x20000150

08000cbc <Button_Debounce>:
  * * @param  button->hold_latch: 
  * * @param  button->start_tick: Start time of the button press event (in milliseconds).
  * @retval None
*/
void Button_Debounce(BUTTON_DATA *button)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  // Handle button state transitions and debounce logic
  switch (button->state)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	79db      	ldrb	r3, [r3, #7]
 8000cc8:	2b02      	cmp	r3, #2
 8000cca:	d03b      	beq.n	8000d44 <Button_Debounce+0x88>
 8000ccc:	2b02      	cmp	r3, #2
 8000cce:	dc6c      	bgt.n	8000daa <Button_Debounce+0xee>
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d002      	beq.n	8000cda <Button_Debounce+0x1e>
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d017      	beq.n	8000d08 <Button_Debounce+0x4c>
 8000cd8:	e067      	b.n	8000daa <Button_Debounce+0xee>
  {
    // Initial state: Button is released (HIGH)
    case BUTTON_RELEASED:

      button->press_flag = false;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2200      	movs	r2, #0
 8000cde:	735a      	strb	r2, [r3, #13]
      button->hold_flag = false;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	739a      	strb	r2, [r3, #14]
      button->latch = false;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2200      	movs	r2, #0
 8000cea:	73da      	strb	r2, [r3, #15]
    
      // Check if interrupt flag is set
      if (button->int_flag) 
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	7b1b      	ldrb	r3, [r3, #12]
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d069      	beq.n	8000dca <Button_Debounce+0x10e>
      {
        // Record the start time for debounce
        button->start_tick = HAL_GetTick();
 8000cf6:	f001 f9af 	bl	8002058 <HAL_GetTick>
 8000cfa:	4602      	mov	r2, r0
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	609a      	str	r2, [r3, #8]

        // Transition to waiting state
        button->state = BUTTON_WAITING;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2201      	movs	r2, #1
 8000d04:	71da      	strb	r2, [r3, #7]
      }
      break;
 8000d06:	e060      	b.n	8000dca <Button_Debounce+0x10e>

    // Waiting state: Button is pressed (LOW) but not yet confirmed
    case BUTTON_WAITING:
      // Check if debounce delay has passed
      if (HAL_GetTick() - button->start_tick >= BUTTON_DEBOUNCE_DELAY) 
 8000d08:	f001 f9a6 	bl	8002058 <HAL_GetTick>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	689b      	ldr	r3, [r3, #8]
 8000d12:	1ad3      	subs	r3, r2, r3
 8000d14:	2b1d      	cmp	r3, #29
 8000d16:	d95a      	bls.n	8000dce <Button_Debounce+0x112>
      {
        // Check if button is still pressed (LOW state) after debounce delay
        if (HAL_GPIO_ReadPin(button->gpio_port, button->gpio_pin) == BUTTON_ACTIVE) 
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	889b      	ldrh	r3, [r3, #4]
 8000d20:	4619      	mov	r1, r3
 8000d22:	4610      	mov	r0, r2
 8000d24:	f002 f908 	bl	8002f38 <HAL_GPIO_ReadPin>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d103      	bne.n	8000d36 <Button_Debounce+0x7a>
        {
          // Transition to pressed state
          button->state = BUTTON_PRESSED;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2202      	movs	r2, #2
 8000d32:	71da      	strb	r2, [r3, #7]
          // Reset interrupt flag and return to released state
          button->int_flag = false;  
          button->state = BUTTON_RELEASED;
        }
      }
      break;
 8000d34:	e04b      	b.n	8000dce <Button_Debounce+0x112>
          button->int_flag = false;  
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2200      	movs	r2, #0
 8000d3a:	731a      	strb	r2, [r3, #12]
          button->state = BUTTON_RELEASED;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2200      	movs	r2, #0
 8000d40:	71da      	strb	r2, [r3, #7]
      break;
 8000d42:	e044      	b.n	8000dce <Button_Debounce+0x112>
    
    // Pressed state: Button is pressed (LOW)
    case BUTTON_PRESSED:
      // Check if button is released (HIGH state)
      if (HAL_GPIO_ReadPin(button->gpio_port, button->gpio_pin) != BUTTON_ACTIVE) 
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	889b      	ldrh	r3, [r3, #4]
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4610      	mov	r0, r2
 8000d50:	f002 f8f2 	bl	8002f38 <HAL_GPIO_ReadPin>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d012      	beq.n	8000d80 <Button_Debounce+0xc4>
      {
        // Check if press duration is less than hold threshold
        if (HAL_GetTick() - button->start_tick < BUTTON_HOLD_TH)
 8000d5a:	f001 f97d 	bl	8002058 <HAL_GetTick>
 8000d5e:	4602      	mov	r2, r0
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	689b      	ldr	r3, [r3, #8]
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8000d6a:	d202      	bcs.n	8000d72 <Button_Debounce+0xb6>
        {
          // Set press flag for short press
          button->press_flag = true;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2201      	movs	r2, #1
 8000d70:	735a      	strb	r2, [r3, #13]
        }
      
        // Reset interrupt flag and return to released state
        button->int_flag = false;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2200      	movs	r2, #0
 8000d76:	731a      	strb	r2, [r3, #12]

        //button->latch = false;
        button->state = BUTTON_RELEASED;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	71da      	strb	r2, [r3, #7]
      else if ((HAL_GetTick() - button->start_tick >= BUTTON_HOLD_TH) && !button->hold_flag)
      {
        // Set hold flag for long press
        button->hold_flag = true;
      }
      break;
 8000d7e:	e028      	b.n	8000dd2 <Button_Debounce+0x116>
      else if ((HAL_GetTick() - button->start_tick >= BUTTON_HOLD_TH) && !button->hold_flag)
 8000d80:	f001 f96a 	bl	8002058 <HAL_GetTick>
 8000d84:	4602      	mov	r2, r0
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	689b      	ldr	r3, [r3, #8]
 8000d8a:	1ad3      	subs	r3, r2, r3
 8000d8c:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8000d90:	d31f      	bcc.n	8000dd2 <Button_Debounce+0x116>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	7b9b      	ldrb	r3, [r3, #14]
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	f083 0301 	eor.w	r3, r3, #1
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d017      	beq.n	8000dd2 <Button_Debounce+0x116>
        button->hold_flag = true;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2201      	movs	r2, #1
 8000da6:	739a      	strb	r2, [r3, #14]
      break;
 8000da8:	e013      	b.n	8000dd2 <Button_Debounce+0x116>

    default:
      // Reset all flags and return to released state
      button->state = BUTTON_RELEASED;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2200      	movs	r2, #0
 8000dae:	71da      	strb	r2, [r3, #7]
      button->int_flag = false;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2200      	movs	r2, #0
 8000db4:	731a      	strb	r2, [r3, #12]
      button->press_flag = false;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2200      	movs	r2, #0
 8000dba:	735a      	strb	r2, [r3, #13]
      button->hold_flag = false;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	739a      	strb	r2, [r3, #14]
      button->latch = false;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	73da      	strb	r2, [r3, #15]
      break;
 8000dc8:	e004      	b.n	8000dd4 <Button_Debounce+0x118>
      break;
 8000dca:	bf00      	nop
 8000dcc:	e002      	b.n	8000dd4 <Button_Debounce+0x118>
      break;
 8000dce:	bf00      	nop
 8000dd0:	e000      	b.n	8000dd4 <Button_Debounce+0x118>
      break;
 8000dd2:	bf00      	nop
  }
}
 8000dd4:	bf00      	nop
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <Button_Handle>:
/**
 * @brief  Button interrupt handler function to be called in main loop
 * @retval None
 */
void Button_Handle (void) 
{
 8000ddc:	b590      	push	{r4, r7, lr}
 8000dde:	b087      	sub	sp, #28
 8000de0:	af00      	add	r7, sp, #0
  // An empty button variable containing reset values for button pointer initiallization
  BUTTON_DATA buttonReset = {GPIOB, BUTTON0_IN12_Pin, 0, BUTTON_RELEASED, 0, false, false, false, false};
 8000de2:	4b5d      	ldr	r3, [pc, #372]	@ (8000f58 <Button_Handle+0x17c>)
 8000de4:	463c      	mov	r4, r7
 8000de6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000de8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  // Initially point to an empty button variable
  BUTTON_DATA *button = &buttonReset;
 8000dec:	463b      	mov	r3, r7
 8000dee:	617b      	str	r3, [r7, #20]

  // Perform button debouncing to filter out noise
  Button_Debounce(&button0);
 8000df0:	485a      	ldr	r0, [pc, #360]	@ (8000f5c <Button_Handle+0x180>)
 8000df2:	f7ff ff63 	bl	8000cbc <Button_Debounce>
  Button_Debounce(&button1);
 8000df6:	485a      	ldr	r0, [pc, #360]	@ (8000f60 <Button_Handle+0x184>)
 8000df8:	f7ff ff60 	bl	8000cbc <Button_Debounce>
  Button_Debounce(&button2);
 8000dfc:	4859      	ldr	r0, [pc, #356]	@ (8000f64 <Button_Handle+0x188>)
 8000dfe:	f7ff ff5d 	bl	8000cbc <Button_Debounce>
  Button_Debounce(&button3);
 8000e02:	4859      	ldr	r0, [pc, #356]	@ (8000f68 <Button_Handle+0x18c>)
 8000e04:	f7ff ff5a 	bl	8000cbc <Button_Debounce>
  Button_Debounce(&button4);
 8000e08:	4858      	ldr	r0, [pc, #352]	@ (8000f6c <Button_Handle+0x190>)
 8000e0a:	f7ff ff57 	bl	8000cbc <Button_Debounce>

  
  if      (button0.press_flag || button0.hold_flag) button = &button0;
 8000e0e:	4b53      	ldr	r3, [pc, #332]	@ (8000f5c <Button_Handle+0x180>)
 8000e10:	7b5b      	ldrb	r3, [r3, #13]
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d104      	bne.n	8000e22 <Button_Handle+0x46>
 8000e18:	4b50      	ldr	r3, [pc, #320]	@ (8000f5c <Button_Handle+0x180>)
 8000e1a:	7b9b      	ldrb	r3, [r3, #14]
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d002      	beq.n	8000e28 <Button_Handle+0x4c>
 8000e22:	4b4e      	ldr	r3, [pc, #312]	@ (8000f5c <Button_Handle+0x180>)
 8000e24:	617b      	str	r3, [r7, #20]
 8000e26:	e032      	b.n	8000e8e <Button_Handle+0xb2>
  else if (button1.press_flag || button1.hold_flag) button = &button1;
 8000e28:	4b4d      	ldr	r3, [pc, #308]	@ (8000f60 <Button_Handle+0x184>)
 8000e2a:	7b5b      	ldrb	r3, [r3, #13]
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d104      	bne.n	8000e3c <Button_Handle+0x60>
 8000e32:	4b4b      	ldr	r3, [pc, #300]	@ (8000f60 <Button_Handle+0x184>)
 8000e34:	7b9b      	ldrb	r3, [r3, #14]
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d002      	beq.n	8000e42 <Button_Handle+0x66>
 8000e3c:	4b48      	ldr	r3, [pc, #288]	@ (8000f60 <Button_Handle+0x184>)
 8000e3e:	617b      	str	r3, [r7, #20]
 8000e40:	e025      	b.n	8000e8e <Button_Handle+0xb2>
  else if (button2.press_flag || button2.hold_flag) button = &button2;
 8000e42:	4b48      	ldr	r3, [pc, #288]	@ (8000f64 <Button_Handle+0x188>)
 8000e44:	7b5b      	ldrb	r3, [r3, #13]
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d104      	bne.n	8000e56 <Button_Handle+0x7a>
 8000e4c:	4b45      	ldr	r3, [pc, #276]	@ (8000f64 <Button_Handle+0x188>)
 8000e4e:	7b9b      	ldrb	r3, [r3, #14]
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d002      	beq.n	8000e5c <Button_Handle+0x80>
 8000e56:	4b43      	ldr	r3, [pc, #268]	@ (8000f64 <Button_Handle+0x188>)
 8000e58:	617b      	str	r3, [r7, #20]
 8000e5a:	e018      	b.n	8000e8e <Button_Handle+0xb2>
  else if (button3.press_flag || button3.hold_flag) button = &button3;
 8000e5c:	4b42      	ldr	r3, [pc, #264]	@ (8000f68 <Button_Handle+0x18c>)
 8000e5e:	7b5b      	ldrb	r3, [r3, #13]
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d104      	bne.n	8000e70 <Button_Handle+0x94>
 8000e66:	4b40      	ldr	r3, [pc, #256]	@ (8000f68 <Button_Handle+0x18c>)
 8000e68:	7b9b      	ldrb	r3, [r3, #14]
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d002      	beq.n	8000e76 <Button_Handle+0x9a>
 8000e70:	4b3d      	ldr	r3, [pc, #244]	@ (8000f68 <Button_Handle+0x18c>)
 8000e72:	617b      	str	r3, [r7, #20]
 8000e74:	e00b      	b.n	8000e8e <Button_Handle+0xb2>
  else if (button4.press_flag || button4.hold_flag) button = &button4;
 8000e76:	4b3d      	ldr	r3, [pc, #244]	@ (8000f6c <Button_Handle+0x190>)
 8000e78:	7b5b      	ldrb	r3, [r3, #13]
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d104      	bne.n	8000e8a <Button_Handle+0xae>
 8000e80:	4b3a      	ldr	r3, [pc, #232]	@ (8000f6c <Button_Handle+0x190>)
 8000e82:	7b9b      	ldrb	r3, [r3, #14]
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <Button_Handle+0xb2>
 8000e8a:	4b38      	ldr	r3, [pc, #224]	@ (8000f6c <Button_Handle+0x190>)
 8000e8c:	617b      	str	r3, [r7, #20]
  

  // Debugging: Initialize the start tick for button hold detection
  uint32_t startTick = 0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	613b      	str	r3, [r7, #16]
  
  // Debugging: Check if the button is pressed or held by increment its counter in activation
  if (button->press_flag)
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	7b5b      	ldrb	r3, [r3, #13]
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d009      	beq.n	8000eb0 <Button_Handle+0xd4>
  {
    // Increment the debug counter for the button
    debug_button_counter[button->index]++;
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	799b      	ldrb	r3, [r3, #6]
 8000ea0:	4a33      	ldr	r2, [pc, #204]	@ (8000f70 <Button_Handle+0x194>)
 8000ea2:	5cd2      	ldrb	r2, [r2, r3]
 8000ea4:	b2d2      	uxtb	r2, r2
 8000ea6:	3201      	adds	r2, #1
 8000ea8:	b2d1      	uxtb	r1, r2
 8000eaa:	4a31      	ldr	r2, [pc, #196]	@ (8000f70 <Button_Handle+0x194>)
 8000eac:	54d1      	strb	r1, [r2, r3]
 8000eae:	e017      	b.n	8000ee0 <Button_Handle+0x104>
  }
  else if (button->hold_flag)
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	7b9b      	ldrb	r3, [r3, #14]
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d012      	beq.n	8000ee0 <Button_Handle+0x104>
  {
    // Check if the button is held down for a certain duration
    if (HAL_GetTick() - startTick >= BUTTON_HOLD_CYCLE) 
 8000eba:	f001 f8cd 	bl	8002058 <HAL_GetTick>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	1ad3      	subs	r3, r2, r3
 8000ec4:	2bf9      	cmp	r3, #249	@ 0xf9
 8000ec6:	d90b      	bls.n	8000ee0 <Button_Handle+0x104>
    {
      // Increment the debug counter for the button
      debug_button_counter[button->index]++;
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	799b      	ldrb	r3, [r3, #6]
 8000ecc:	4a28      	ldr	r2, [pc, #160]	@ (8000f70 <Button_Handle+0x194>)
 8000ece:	5cd2      	ldrb	r2, [r2, r3]
 8000ed0:	b2d2      	uxtb	r2, r2
 8000ed2:	3201      	adds	r2, #1
 8000ed4:	b2d1      	uxtb	r1, r2
 8000ed6:	4a26      	ldr	r2, [pc, #152]	@ (8000f70 <Button_Handle+0x194>)
 8000ed8:	54d1      	strb	r1, [r2, r3]

      // Reset the start tick for the next hold cycle
      startTick = HAL_GetTick();
 8000eda:	f001 f8bd 	bl	8002058 <HAL_GetTick>
 8000ede:	6138      	str	r0, [r7, #16]
    }
  }

  // Check if the button is pressed or held
  if (button->press_flag || button->hold_flag) 
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	7b5b      	ldrb	r3, [r3, #13]
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d104      	bne.n	8000ef4 <Button_Handle+0x118>
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	7b9b      	ldrb	r3, [r3, #14]
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d02c      	beq.n	8000f4e <Button_Handle+0x172>
  {
    // Handle button actions based on the current system mode
    switch (system_state.mode) 
 8000ef4:	4b1f      	ldr	r3, [pc, #124]	@ (8000f74 <Button_Handle+0x198>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	2b05      	cmp	r3, #5
 8000efa:	d827      	bhi.n	8000f4c <Button_Handle+0x170>
 8000efc:	a201      	add	r2, pc, #4	@ (adr r2, 8000f04 <Button_Handle+0x128>)
 8000efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f02:	bf00      	nop
 8000f04:	08000f1d 	.word	0x08000f1d
 8000f08:	08000f25 	.word	0x08000f25
 8000f0c:	08000f2d 	.word	0x08000f2d
 8000f10:	08000f35 	.word	0x08000f35
 8000f14:	08000f3d 	.word	0x08000f3d
 8000f18:	08000f45 	.word	0x08000f45
    {
      case DEFAULT_MODE: 
        System_Default_Mode_Handle (button);
 8000f1c:	6978      	ldr	r0, [r7, #20]
 8000f1e:	f000 f82b 	bl	8000f78 <System_Default_Mode_Handle>
        break;
 8000f22:	e014      	b.n	8000f4e <Button_Handle+0x172>

      case TIME_SETUP_MODE: 
        System_Time_Setup_Mode_Handle (button);
 8000f24:	6978      	ldr	r0, [r7, #20]
 8000f26:	f000 f88d 	bl	8001044 <System_Time_Setup_Mode_Handle>
        break;
 8000f2a:	e010      	b.n	8000f4e <Button_Handle+0x172>
      
      case ALARM_SETUP_MODE: 
        System_Alarm_Setup_Mode_Handle (button);
 8000f2c:	6978      	ldr	r0, [r7, #20]
 8000f2e:	f000 fa85 	bl	800143c <System_Alarm_Setup_Mode_Handle>
        break;
 8000f32:	e00c      	b.n	8000f4e <Button_Handle+0x172>

      case ALARM_VIEW_MODE: 
        System_Alarm_View_Mode_Handle (button);
 8000f34:	6978      	ldr	r0, [r7, #20]
 8000f36:	f000 fd13 	bl	8001960 <System_Alarm_View_Mode_Handle>
        break;
 8000f3a:	e008      	b.n	8000f4e <Button_Handle+0x172>

      case ALARM_ACTIVE_MODE: 
        System_Alarm_Active_Mode_Handle (button);
 8000f3c:	6978      	ldr	r0, [r7, #20]
 8000f3e:	f000 fd7d 	bl	8001a3c <System_Alarm_Active_Mode_Handle>
        break;
 8000f42:	e004      	b.n	8000f4e <Button_Handle+0x172>

      case SYSTEM_OPTIONS_MODE:
        System_Options_Mode_Handle (button);
 8000f44:	6978      	ldr	r0, [r7, #20]
 8000f46:	f000 fde7 	bl	8001b18 <System_Options_Mode_Handle>
        break;
 8000f4a:	e000      	b.n	8000f4e <Button_Handle+0x172>

      default:
        break;
 8000f4c:	bf00      	nop
    }
  }
}
 8000f4e:	bf00      	nop
 8000f50:	371c      	adds	r7, #28
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd90      	pop	{r4, r7, pc}
 8000f56:	bf00      	nop
 8000f58:	08005570 	.word	0x08005570
 8000f5c:	20000000 	.word	0x20000000
 8000f60:	20000010 	.word	0x20000010
 8000f64:	20000020 	.word	0x20000020
 8000f68:	20000030 	.word	0x20000030
 8000f6c:	20000040 	.word	0x20000040
 8000f70:	20000154 	.word	0x20000154
 8000f74:	200000fc 	.word	0x200000fc

08000f78 <System_Default_Mode_Handle>:
 * @brief  Handles the default system mode based on button actions.
 * @param  button: Pointer to the BUTTON_DATA structure containing button state and index.
 * @retval None
 */
void System_Default_Mode_Handle (BUTTON_DATA *button)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  switch (button->index) 
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	799b      	ldrb	r3, [r3, #6]
 8000f84:	2b04      	cmp	r3, #4
 8000f86:	d850      	bhi.n	800102a <System_Default_Mode_Handle+0xb2>
 8000f88:	a201      	add	r2, pc, #4	@ (adr r2, 8000f90 <System_Default_Mode_Handle+0x18>)
 8000f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f8e:	bf00      	nop
 8000f90:	08000fa5 	.word	0x08000fa5
 8000f94:	08000fcf 	.word	0x08000fcf
 8000f98:	08000fdf 	.word	0x08000fdf
 8000f9c:	08000fef 	.word	0x08000fef
 8000fa0:	0800100d 	.word	0x0800100d
  {
    // Button 0: If pressed, cycle through the modes; if held, do nothing (reserved for future use)
    case 0:
      if      (button->press_flag)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	7b5b      	ldrb	r3, [r3, #13]
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d00c      	beq.n	8000fc8 <System_Default_Mode_Handle+0x50>
      {
        system_state.mode = (system_state.mode < (SYSTEM_MODE_NUM - 1)) ? (system_state.mode + 1) : 0;
 8000fae:	4b24      	ldr	r3, [pc, #144]	@ (8001040 <System_Default_Mode_Handle+0xc8>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	2b04      	cmp	r3, #4
 8000fb4:	d804      	bhi.n	8000fc0 <System_Default_Mode_Handle+0x48>
 8000fb6:	4b22      	ldr	r3, [pc, #136]	@ (8001040 <System_Default_Mode_Handle+0xc8>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	e000      	b.n	8000fc2 <System_Default_Mode_Handle+0x4a>
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	4a1f      	ldr	r2, [pc, #124]	@ (8001040 <System_Default_Mode_Handle+0xc8>)
 8000fc4:	7013      	strb	r3, [r2, #0]

      else if (button->hold_flag)
      {
        // Reserved
      }
      break;
 8000fc6:	e035      	b.n	8001034 <System_Default_Mode_Handle+0xbc>
      else if (button->hold_flag)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	7b9b      	ldrb	r3, [r3, #14]
      break;
 8000fcc:	e032      	b.n	8001034 <System_Default_Mode_Handle+0xbc>
    
    // Button 1: Reserved for future use
    case 1: 
      if (button->press_flag)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	7b5b      	ldrb	r3, [r3, #13]
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d12a      	bne.n	800102e <System_Default_Mode_Handle+0xb6>
      {
        // Reserved
      }
      else if (button->hold_flag)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	7b9b      	ldrb	r3, [r3, #14]
      {
        // Reserved
      }
      break;
 8000fdc:	e027      	b.n	800102e <System_Default_Mode_Handle+0xb6>

    // Button 2: Reserved for future use
    case 2: 
      if (button->press_flag)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	7b5b      	ldrb	r3, [r3, #13]
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d124      	bne.n	8001032 <System_Default_Mode_Handle+0xba>
      {
        // Reserved
      }
      else if (button->hold_flag)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	7b9b      	ldrb	r3, [r3, #14]
      {
        // Reserved
      }
      break;
 8000fec:	e021      	b.n	8001032 <System_Default_Mode_Handle+0xba>
    
    // Button 3: If pressed, quick jump to Time Setup; if held, do nothing (reserved for future use)
    case 3:
      if (button->press_flag) 
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	7b5b      	ldrb	r3, [r3, #13]
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d006      	beq.n	8001006 <System_Default_Mode_Handle+0x8e>
      {
        // Quick jump to Time Setup
        system_state.mode = TIME_SETUP_MODE;
 8000ff8:	4b11      	ldr	r3, [pc, #68]	@ (8001040 <System_Default_Mode_Handle+0xc8>)
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	701a      	strb	r2, [r3, #0]

        // Set the parameter select to the first parameter
        system_state.param_select = SET_MINUTE;
 8000ffe:	4b10      	ldr	r3, [pc, #64]	@ (8001040 <System_Default_Mode_Handle+0xc8>)
 8001000:	2200      	movs	r2, #0
 8001002:	705a      	strb	r2, [r3, #1]
      }
      else if (button->hold_flag)
      {
        // Reserved
      }
      break;
 8001004:	e016      	b.n	8001034 <System_Default_Mode_Handle+0xbc>
      else if (button->hold_flag)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	7b9b      	ldrb	r3, [r3, #14]
      break;
 800100a:	e013      	b.n	8001034 <System_Default_Mode_Handle+0xbc>

    // Button 4: If pressed, quick jump to Alarm Setup; if held, do nothing (reserved for future use)
    case 4:
      if (button->press_flag)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	7b5b      	ldrb	r3, [r3, #13]
 8001010:	b2db      	uxtb	r3, r3
 8001012:	2b00      	cmp	r3, #0
 8001014:	d006      	beq.n	8001024 <System_Default_Mode_Handle+0xac>
      {
        // Quick jump to Alarm Setup
        system_state.mode = ALARM_SETUP_MODE;
 8001016:	4b0a      	ldr	r3, [pc, #40]	@ (8001040 <System_Default_Mode_Handle+0xc8>)
 8001018:	2202      	movs	r2, #2
 800101a:	701a      	strb	r2, [r3, #0]

        // Set the parameter select to the first parameter
        system_state.param_select = SET_MINUTE;
 800101c:	4b08      	ldr	r3, [pc, #32]	@ (8001040 <System_Default_Mode_Handle+0xc8>)
 800101e:	2200      	movs	r2, #0
 8001020:	705a      	strb	r2, [r3, #1]
      }
      else if (button->hold_flag)
      {
        // Reserved
      }
      break;
 8001022:	e007      	b.n	8001034 <System_Default_Mode_Handle+0xbc>
      else if (button->hold_flag)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	7b9b      	ldrb	r3, [r3, #14]
      break;
 8001028:	e004      	b.n	8001034 <System_Default_Mode_Handle+0xbc>

    default: 
      break;
 800102a:	bf00      	nop
 800102c:	e002      	b.n	8001034 <System_Default_Mode_Handle+0xbc>
      break;
 800102e:	bf00      	nop
 8001030:	e000      	b.n	8001034 <System_Default_Mode_Handle+0xbc>
      break;
 8001032:	bf00      	nop
  }
}
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	bc80      	pop	{r7}
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	200000fc 	.word	0x200000fc

08001044 <System_Time_Setup_Mode_Handle>:
 * @brief  Handles the time setup mode based on button actions.
 * @param  button: Pointer to the BUTTON structure containing button state and index.
 * @retval None
 */
void System_Time_Setup_Mode_Handle (BUTTON_DATA *button)
{
 8001044:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001046:	b091      	sub	sp, #68	@ 0x44
 8001048:	af04      	add	r7, sp, #16
 800104a:	6078      	str	r0, [r7, #4]
  switch (button->index) 
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	799b      	ldrb	r3, [r3, #6]
 8001050:	2b04      	cmp	r3, #4
 8001052:	f200 81e2 	bhi.w	800141a <System_Time_Setup_Mode_Handle+0x3d6>
 8001056:	a201      	add	r2, pc, #4	@ (adr r2, 800105c <System_Time_Setup_Mode_Handle+0x18>)
 8001058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800105c:	08001071 	.word	0x08001071
 8001060:	08001117 	.word	0x08001117
 8001064:	08001239 	.word	0x08001239
 8001068:	08001379 	.word	0x08001379
 800106c:	080013ed 	.word	0x080013ed
  {
    // Button 0: If pressed, cycle through the system modes; if held, set the mode to default
    case 0:
      // If pressed, cycle through the time system modes, but the temporary setting data is still retained (avoid accidental press)
      if (button->press_flag)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	7b5b      	ldrb	r3, [r3, #13]
 8001074:	b2db      	uxtb	r3, r3
 8001076:	2b00      	cmp	r3, #0
 8001078:	d00c      	beq.n	8001094 <System_Time_Setup_Mode_Handle+0x50>
      {
        system_state.mode = (system_state.mode < (SYSTEM_MODE_NUM - 1)) ? (system_state.mode + 1) : 0;
 800107a:	4ba6      	ldr	r3, [pc, #664]	@ (8001314 <System_Time_Setup_Mode_Handle+0x2d0>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	2b04      	cmp	r3, #4
 8001080:	d804      	bhi.n	800108c <System_Time_Setup_Mode_Handle+0x48>
 8001082:	4ba4      	ldr	r3, [pc, #656]	@ (8001314 <System_Time_Setup_Mode_Handle+0x2d0>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	3301      	adds	r3, #1
 8001088:	b2db      	uxtb	r3, r3
 800108a:	e000      	b.n	800108e <System_Time_Setup_Mode_Handle+0x4a>
 800108c:	2300      	movs	r3, #0
 800108e:	4aa1      	ldr	r2, [pc, #644]	@ (8001314 <System_Time_Setup_Mode_Handle+0x2d0>)
 8001090:	7013      	strb	r3, [r2, #0]
          NOT_USED_MODE,              // Select: DAY_OF_WEEK_MODE, DATE_OF_MONTH_MODE, NOT_USED_MODE
          time_get_data.dayofweek,    // Day of the week: 1-7 (1 = Sunday, 2 = Monday, ..., 7 = Saturday), or Date of the month: 1-31
          true                        // true = ON, false = OFF
        };
      }
      break;
 8001092:	e1c4      	b.n	800141e <System_Time_Setup_Mode_Handle+0x3da>
      else if (button->hold_flag && !button->latch)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	7b9b      	ldrb	r3, [r3, #14]
 8001098:	b2db      	uxtb	r3, r3
 800109a:	2b00      	cmp	r3, #0
 800109c:	f000 81bf 	beq.w	800141e <System_Time_Setup_Mode_Handle+0x3da>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	7bdb      	ldrb	r3, [r3, #15]
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	f083 0301 	eor.w	r3, r3, #1
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	f000 81b6 	beq.w	800141e <System_Time_Setup_Mode_Handle+0x3da>
        system_state.mode = DEFAULT_MODE; 
 80010b2:	4b98      	ldr	r3, [pc, #608]	@ (8001314 <System_Time_Setup_Mode_Handle+0x2d0>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	701a      	strb	r2, [r3, #0]
        button->latch = true;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2201      	movs	r2, #1
 80010bc:	73da      	strb	r2, [r3, #15]
          time_get_data.minute,       // Minutes: 0-59
 80010be:	4b96      	ldr	r3, [pc, #600]	@ (8001318 <System_Time_Setup_Mode_Handle+0x2d4>)
 80010c0:	785b      	ldrb	r3, [r3, #1]
 80010c2:	fa5f fc83 	uxtb.w	ip, r3
          time_get_data.hour,         // Hours: 0-23
 80010c6:	4b94      	ldr	r3, [pc, #592]	@ (8001318 <System_Time_Setup_Mode_Handle+0x2d4>)
 80010c8:	789b      	ldrb	r3, [r3, #2]
 80010ca:	b2de      	uxtb	r6, r3
          time_get_data.dayofweek,    // Day of the week: 1-7 (1 = Sunday, 2 = Monday, ..., 7 = Saturday)
 80010cc:	4b92      	ldr	r3, [pc, #584]	@ (8001318 <System_Time_Setup_Mode_Handle+0x2d4>)
 80010ce:	78db      	ldrb	r3, [r3, #3]
 80010d0:	b2dd      	uxtb	r5, r3
          time_get_data.dateofmonth,  // Date of the month: 1-31
 80010d2:	4b91      	ldr	r3, [pc, #580]	@ (8001318 <System_Time_Setup_Mode_Handle+0x2d4>)
 80010d4:	791b      	ldrb	r3, [r3, #4]
 80010d6:	b2dc      	uxtb	r4, r3
          time_get_data.month,        // Month: 1-12
 80010d8:	4b8f      	ldr	r3, [pc, #572]	@ (8001318 <System_Time_Setup_Mode_Handle+0x2d4>)
 80010da:	795b      	ldrb	r3, [r3, #5]
 80010dc:	b2d8      	uxtb	r0, r3
          time_get_data.year,         // Year: 0-99 (0 = 2000, 1 = 2001, ..., 99 = 2099)
 80010de:	4b8e      	ldr	r3, [pc, #568]	@ (8001318 <System_Time_Setup_Mode_Handle+0x2d4>)
 80010e0:	799b      	ldrb	r3, [r3, #6]
 80010e2:	b2d9      	uxtb	r1, r3
          time_get_data.dayofweek,    // Day of the week: 1-7 (1 = Sunday, 2 = Monday, ..., 7 = Saturday), or Date of the month: 1-31
 80010e4:	4b8c      	ldr	r3, [pc, #560]	@ (8001318 <System_Time_Setup_Mode_Handle+0x2d4>)
 80010e6:	78db      	ldrb	r3, [r3, #3]
 80010e8:	b2da      	uxtb	r2, r3
        system_param_data =
 80010ea:	4b8c      	ldr	r3, [pc, #560]	@ (800131c <System_Time_Setup_Mode_Handle+0x2d8>)
 80010ec:	f883 c000 	strb.w	ip, [r3]
 80010f0:	4b8a      	ldr	r3, [pc, #552]	@ (800131c <System_Time_Setup_Mode_Handle+0x2d8>)
 80010f2:	705e      	strb	r6, [r3, #1]
 80010f4:	4b89      	ldr	r3, [pc, #548]	@ (800131c <System_Time_Setup_Mode_Handle+0x2d8>)
 80010f6:	709d      	strb	r5, [r3, #2]
 80010f8:	4b88      	ldr	r3, [pc, #544]	@ (800131c <System_Time_Setup_Mode_Handle+0x2d8>)
 80010fa:	70dc      	strb	r4, [r3, #3]
 80010fc:	4b87      	ldr	r3, [pc, #540]	@ (800131c <System_Time_Setup_Mode_Handle+0x2d8>)
 80010fe:	7118      	strb	r0, [r3, #4]
 8001100:	4b86      	ldr	r3, [pc, #536]	@ (800131c <System_Time_Setup_Mode_Handle+0x2d8>)
 8001102:	7159      	strb	r1, [r3, #5]
 8001104:	4b85      	ldr	r3, [pc, #532]	@ (800131c <System_Time_Setup_Mode_Handle+0x2d8>)
 8001106:	2102      	movs	r1, #2
 8001108:	7199      	strb	r1, [r3, #6]
 800110a:	4b84      	ldr	r3, [pc, #528]	@ (800131c <System_Time_Setup_Mode_Handle+0x2d8>)
 800110c:	71da      	strb	r2, [r3, #7]
 800110e:	4b83      	ldr	r3, [pc, #524]	@ (800131c <System_Time_Setup_Mode_Handle+0x2d8>)
 8001110:	2201      	movs	r2, #1
 8001112:	721a      	strb	r2, [r3, #8]
      break;
 8001114:	e183      	b.n	800141e <System_Time_Setup_Mode_Handle+0x3da>
    
    // Button 1: If pressed, increment the selected parameter; if held, increment continuously
    case 1: 
      // Pointer to the selected parameter, its maximum value, and minimum value
      uint8_t *paramPtr1 = NULL;
 8001116:	2300      	movs	r3, #0
 8001118:	62fb      	str	r3, [r7, #44]	@ 0x2c
      uint8_t maxValue1 = 0;    
 800111a:	2300      	movs	r3, #0
 800111c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
      uint8_t minValue1 = 0;  
 8001120:	2300      	movs	r3, #0
 8001122:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

      // Determine the parameter to increment based on the current selection
      switch (system_state.param_select)
 8001126:	4b7b      	ldr	r3, [pc, #492]	@ (8001314 <System_Time_Setup_Mode_Handle+0x2d0>)
 8001128:	785b      	ldrb	r3, [r3, #1]
 800112a:	2b05      	cmp	r3, #5
 800112c:	d844      	bhi.n	80011b8 <System_Time_Setup_Mode_Handle+0x174>
 800112e:	a201      	add	r2, pc, #4	@ (adr r2, 8001134 <System_Time_Setup_Mode_Handle+0xf0>)
 8001130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001134:	0800114d 	.word	0x0800114d
 8001138:	0800115f 	.word	0x0800115f
 800113c:	08001171 	.word	0x08001171
 8001140:	08001183 	.word	0x08001183
 8001144:	08001195 	.word	0x08001195
 8001148:	080011a7 	.word	0x080011a7
      {
        case SET_MINUTE:  paramPtr1 = &system_param_data.minute;  maxValue1 = 59; minValue1 = 0; break;
 800114c:	4b73      	ldr	r3, [pc, #460]	@ (800131c <System_Time_Setup_Mode_Handle+0x2d8>)
 800114e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001150:	233b      	movs	r3, #59	@ 0x3b
 8001152:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001156:	2300      	movs	r3, #0
 8001158:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800115c:	e02d      	b.n	80011ba <System_Time_Setup_Mode_Handle+0x176>
        case SET_HOUR:    paramPtr1 = &system_param_data.hour;    maxValue1 = 23; minValue1 = 0; break;
 800115e:	4b70      	ldr	r3, [pc, #448]	@ (8001320 <System_Time_Setup_Mode_Handle+0x2dc>)
 8001160:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001162:	2317      	movs	r3, #23
 8001164:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001168:	2300      	movs	r3, #0
 800116a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800116e:	e024      	b.n	80011ba <System_Time_Setup_Mode_Handle+0x176>
        case SET_DOW:     paramPtr1 = &system_param_data.dow;     maxValue1 = 7;  minValue1 = 1; break;
 8001170:	4b6c      	ldr	r3, [pc, #432]	@ (8001324 <System_Time_Setup_Mode_Handle+0x2e0>)
 8001172:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001174:	2307      	movs	r3, #7
 8001176:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800117a:	2301      	movs	r3, #1
 800117c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8001180:	e01b      	b.n	80011ba <System_Time_Setup_Mode_Handle+0x176>
        case SET_DOM:     paramPtr1 = &system_param_data.dom;     maxValue1 = 31; minValue1 = 1; break;
 8001182:	4b69      	ldr	r3, [pc, #420]	@ (8001328 <System_Time_Setup_Mode_Handle+0x2e4>)
 8001184:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001186:	231f      	movs	r3, #31
 8001188:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800118c:	2301      	movs	r3, #1
 800118e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8001192:	e012      	b.n	80011ba <System_Time_Setup_Mode_Handle+0x176>
        case SET_MONTH:   paramPtr1 = &system_param_data.month;   maxValue1 = 12; minValue1 = 1; break;
 8001194:	4b65      	ldr	r3, [pc, #404]	@ (800132c <System_Time_Setup_Mode_Handle+0x2e8>)
 8001196:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001198:	230c      	movs	r3, #12
 800119a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800119e:	2301      	movs	r3, #1
 80011a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80011a4:	e009      	b.n	80011ba <System_Time_Setup_Mode_Handle+0x176>
        case SET_YEAR:    paramPtr1 = &system_param_data.year;    maxValue1 = 99; minValue1 = 0; break;
 80011a6:	4b62      	ldr	r3, [pc, #392]	@ (8001330 <System_Time_Setup_Mode_Handle+0x2ec>)
 80011a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80011aa:	2363      	movs	r3, #99	@ 0x63
 80011ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80011b0:	2300      	movs	r3, #0
 80011b2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80011b6:	e000      	b.n	80011ba <System_Time_Setup_Mode_Handle+0x176>
        default: break;
 80011b8:	bf00      	nop
      }

      // Initialize the start tick for button 1 hold detection
      uint32_t startTick1 = 0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	61bb      	str	r3, [r7, #24]

      // Check if the button is pressed or held
      if (button->press_flag) 
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	7b5b      	ldrb	r3, [r3, #13]
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d013      	beq.n	80011f0 <System_Time_Setup_Mode_Handle+0x1ac>
      {
        // Increment the selected parameter value once for a button press
        if (paramPtr1) 
 80011c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	f000 8129 	beq.w	8001422 <System_Time_Setup_Mode_Handle+0x3de>
        {
          // Increment the parameter value, wrapping around if necessary
          *paramPtr1 = (*paramPtr1 < maxValue1) ? (*paramPtr1 + 1) : minValue1;
 80011d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80011d8:	429a      	cmp	r2, r3
 80011da:	d904      	bls.n	80011e6 <System_Time_Setup_Mode_Handle+0x1a2>
 80011dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	3301      	adds	r3, #1
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	e001      	b.n	80011ea <System_Time_Setup_Mode_Handle+0x1a6>
 80011e6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80011ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80011ec:	7013      	strb	r3, [r2, #0]

          // Update the start tick for the next hold cycle
          startTick1 = HAL_GetTick();
        }
      } 
      break;
 80011ee:	e118      	b.n	8001422 <System_Time_Setup_Mode_Handle+0x3de>
      else if (button->hold_flag) 
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	7b9b      	ldrb	r3, [r3, #14]
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f000 8113 	beq.w	8001422 <System_Time_Setup_Mode_Handle+0x3de>
        if (HAL_GetTick() - startTick1 >= BUTTON_HOLD_CYCLE) 
 80011fc:	f000 ff2c 	bl	8002058 <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	2bf9      	cmp	r3, #249	@ 0xf9
 8001208:	f240 810b 	bls.w	8001422 <System_Time_Setup_Mode_Handle+0x3de>
          if (paramPtr1) 
 800120c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800120e:	2b00      	cmp	r3, #0
 8001210:	d00e      	beq.n	8001230 <System_Time_Setup_Mode_Handle+0x1ec>
            *paramPtr1 = (*paramPtr1 < maxValue1) ? (*paramPtr1 + 1) : minValue1;
 8001212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800121a:	429a      	cmp	r2, r3
 800121c:	d904      	bls.n	8001228 <System_Time_Setup_Mode_Handle+0x1e4>
 800121e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	3301      	adds	r3, #1
 8001224:	b2db      	uxtb	r3, r3
 8001226:	e001      	b.n	800122c <System_Time_Setup_Mode_Handle+0x1e8>
 8001228:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800122c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800122e:	7013      	strb	r3, [r2, #0]
          startTick1 = HAL_GetTick();
 8001230:	f000 ff12 	bl	8002058 <HAL_GetTick>
 8001234:	61b8      	str	r0, [r7, #24]
      break;
 8001236:	e0f4      	b.n	8001422 <System_Time_Setup_Mode_Handle+0x3de>
    
      // Button 2: If pressed, decrement the selected parameter; if held, decrement continuously
      case 2: 
        // Pointer to the selected parameter, its maximum value, and minimum value
        uint8_t *paramPtr2 = NULL;
 8001238:	2300      	movs	r3, #0
 800123a:	627b      	str	r3, [r7, #36]	@ 0x24
        uint8_t maxValue2 = 0;    
 800123c:	2300      	movs	r3, #0
 800123e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        uint8_t minValue2 = 0;  
 8001242:	2300      	movs	r3, #0
 8001244:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

        // Determine the parameter to decrement based on the current selection
        switch (system_state.param_select)
 8001248:	4b32      	ldr	r3, [pc, #200]	@ (8001314 <System_Time_Setup_Mode_Handle+0x2d0>)
 800124a:	785b      	ldrb	r3, [r3, #1]
 800124c:	2b05      	cmp	r3, #5
 800124e:	d845      	bhi.n	80012dc <System_Time_Setup_Mode_Handle+0x298>
 8001250:	a201      	add	r2, pc, #4	@ (adr r2, 8001258 <System_Time_Setup_Mode_Handle+0x214>)
 8001252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001256:	bf00      	nop
 8001258:	08001271 	.word	0x08001271
 800125c:	08001283 	.word	0x08001283
 8001260:	08001295 	.word	0x08001295
 8001264:	080012a7 	.word	0x080012a7
 8001268:	080012b9 	.word	0x080012b9
 800126c:	080012cb 	.word	0x080012cb
        {
          case SET_MINUTE:  paramPtr2 = &system_param_data.minute;  maxValue2 = 59; minValue2 = 0; break;
 8001270:	4b2a      	ldr	r3, [pc, #168]	@ (800131c <System_Time_Setup_Mode_Handle+0x2d8>)
 8001272:	627b      	str	r3, [r7, #36]	@ 0x24
 8001274:	233b      	movs	r3, #59	@ 0x3b
 8001276:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800127a:	2300      	movs	r3, #0
 800127c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001280:	e02d      	b.n	80012de <System_Time_Setup_Mode_Handle+0x29a>
          case SET_HOUR:    paramPtr2 = &system_param_data.hour;    maxValue2 = 23; minValue2 = 0; break;
 8001282:	4b27      	ldr	r3, [pc, #156]	@ (8001320 <System_Time_Setup_Mode_Handle+0x2dc>)
 8001284:	627b      	str	r3, [r7, #36]	@ 0x24
 8001286:	2317      	movs	r3, #23
 8001288:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800128c:	2300      	movs	r3, #0
 800128e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001292:	e024      	b.n	80012de <System_Time_Setup_Mode_Handle+0x29a>
          case SET_DOW:     paramPtr2 = &system_param_data.dow;     maxValue2 = 7;  minValue2 = 1; break;
 8001294:	4b23      	ldr	r3, [pc, #140]	@ (8001324 <System_Time_Setup_Mode_Handle+0x2e0>)
 8001296:	627b      	str	r3, [r7, #36]	@ 0x24
 8001298:	2307      	movs	r3, #7
 800129a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800129e:	2301      	movs	r3, #1
 80012a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80012a4:	e01b      	b.n	80012de <System_Time_Setup_Mode_Handle+0x29a>
          case SET_DOM:     paramPtr2 = &system_param_data.dom;     maxValue2 = 31; minValue2 = 1; break;
 80012a6:	4b20      	ldr	r3, [pc, #128]	@ (8001328 <System_Time_Setup_Mode_Handle+0x2e4>)
 80012a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80012aa:	231f      	movs	r3, #31
 80012ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80012b0:	2301      	movs	r3, #1
 80012b2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80012b6:	e012      	b.n	80012de <System_Time_Setup_Mode_Handle+0x29a>
          case SET_MONTH:   paramPtr2 = &system_param_data.month;   maxValue2 = 12; minValue2 = 1; break;
 80012b8:	4b1c      	ldr	r3, [pc, #112]	@ (800132c <System_Time_Setup_Mode_Handle+0x2e8>)
 80012ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80012bc:	230c      	movs	r3, #12
 80012be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80012c2:	2301      	movs	r3, #1
 80012c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80012c8:	e009      	b.n	80012de <System_Time_Setup_Mode_Handle+0x29a>
          case SET_YEAR:    paramPtr2 = &system_param_data.year;    maxValue2 = 99; minValue2 = 0; break;
 80012ca:	4b19      	ldr	r3, [pc, #100]	@ (8001330 <System_Time_Setup_Mode_Handle+0x2ec>)
 80012cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80012ce:	2363      	movs	r3, #99	@ 0x63
 80012d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80012d4:	2300      	movs	r3, #0
 80012d6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80012da:	e000      	b.n	80012de <System_Time_Setup_Mode_Handle+0x29a>
          default: break;
 80012dc:	bf00      	nop
        }

        // Initialize the start tick for button 2 hold detection
        uint32_t startTick2 = 0;
 80012de:	2300      	movs	r3, #0
 80012e0:	61fb      	str	r3, [r7, #28]

        // Check if the button is pressed or held
        if (button->press_flag) 
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	7b5b      	ldrb	r3, [r3, #13]
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d023      	beq.n	8001334 <System_Time_Setup_Mode_Handle+0x2f0>
        {
          // Decrement the selected parameter value once for a button press
          if (paramPtr2) 
 80012ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	f000 8099 	beq.w	8001426 <System_Time_Setup_Mode_Handle+0x3e2>
          {
            // Decrement the parameter value, wrapping around if necessary
            *paramPtr2 = (*paramPtr2 > minValue2) ? (*paramPtr2 - 1) : maxValue2;
 80012f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d204      	bcs.n	800130a <System_Time_Setup_Mode_Handle+0x2c6>
 8001300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	3b01      	subs	r3, #1
 8001306:	b2db      	uxtb	r3, r3
 8001308:	e001      	b.n	800130e <System_Time_Setup_Mode_Handle+0x2ca>
 800130a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800130e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001310:	7013      	strb	r3, [r2, #0]

            // Update the start tick for the next hold cycle
            startTick2 = HAL_GetTick();
          }
        } 
        break;
 8001312:	e088      	b.n	8001426 <System_Time_Setup_Mode_Handle+0x3e2>
 8001314:	200000fc 	.word	0x200000fc
 8001318:	2000010c 	.word	0x2000010c
 800131c:	20000100 	.word	0x20000100
 8001320:	20000101 	.word	0x20000101
 8001324:	20000102 	.word	0x20000102
 8001328:	20000103 	.word	0x20000103
 800132c:	20000104 	.word	0x20000104
 8001330:	20000105 	.word	0x20000105
        else if (button->hold_flag) 
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	7b9b      	ldrb	r3, [r3, #14]
 8001338:	b2db      	uxtb	r3, r3
 800133a:	2b00      	cmp	r3, #0
 800133c:	d073      	beq.n	8001426 <System_Time_Setup_Mode_Handle+0x3e2>
          if (HAL_GetTick() - startTick2 >= BUTTON_HOLD_CYCLE) 
 800133e:	f000 fe8b 	bl	8002058 <HAL_GetTick>
 8001342:	4602      	mov	r2, r0
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	2bf9      	cmp	r3, #249	@ 0xf9
 800134a:	d96c      	bls.n	8001426 <System_Time_Setup_Mode_Handle+0x3e2>
            if (paramPtr2) 
 800134c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800134e:	2b00      	cmp	r3, #0
 8001350:	d00e      	beq.n	8001370 <System_Time_Setup_Mode_Handle+0x32c>
              *paramPtr2 = (*paramPtr2 > minValue2) ? (*paramPtr2 - 1) : maxValue2;
 8001352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 800135a:	429a      	cmp	r2, r3
 800135c:	d204      	bcs.n	8001368 <System_Time_Setup_Mode_Handle+0x324>
 800135e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	3b01      	subs	r3, #1
 8001364:	b2db      	uxtb	r3, r3
 8001366:	e001      	b.n	800136c <System_Time_Setup_Mode_Handle+0x328>
 8001368:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800136c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800136e:	7013      	strb	r3, [r2, #0]
            startTick2 = HAL_GetTick();
 8001370:	f000 fe72 	bl	8002058 <HAL_GetTick>
 8001374:	61f8      	str	r0, [r7, #28]
        break;
 8001376:	e056      	b.n	8001426 <System_Time_Setup_Mode_Handle+0x3e2>
    
    // Button 3: If pressed, move to the next field; if held, set the time using the current parameter values
    case 3: 
      // If the button is pressed, move to the next parameter field, wrapping around if necessary
      if(button->press_flag)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	7b5b      	ldrb	r3, [r3, #13]
 800137c:	b2db      	uxtb	r3, r3
 800137e:	2b00      	cmp	r3, #0
 8001380:	d00e      	beq.n	80013a0 <System_Time_Setup_Mode_Handle+0x35c>
      {
        if (system_state.param_select == SET_YEAR)
 8001382:	4b2c      	ldr	r3, [pc, #176]	@ (8001434 <System_Time_Setup_Mode_Handle+0x3f0>)
 8001384:	785b      	ldrb	r3, [r3, #1]
 8001386:	2b05      	cmp	r3, #5
 8001388:	d103      	bne.n	8001392 <System_Time_Setup_Mode_Handle+0x34e>
        {
          system_state.param_select = SET_MINUTE;
 800138a:	4b2a      	ldr	r3, [pc, #168]	@ (8001434 <System_Time_Setup_Mode_Handle+0x3f0>)
 800138c:	2200      	movs	r2, #0
 800138e:	705a      	strb	r2, [r3, #1]

        button->latch = true;

        break;
      }
      break;
 8001390:	e04b      	b.n	800142a <System_Time_Setup_Mode_Handle+0x3e6>
          system_state.param_select += 1;
 8001392:	4b28      	ldr	r3, [pc, #160]	@ (8001434 <System_Time_Setup_Mode_Handle+0x3f0>)
 8001394:	785b      	ldrb	r3, [r3, #1]
 8001396:	3301      	adds	r3, #1
 8001398:	b2da      	uxtb	r2, r3
 800139a:	4b26      	ldr	r3, [pc, #152]	@ (8001434 <System_Time_Setup_Mode_Handle+0x3f0>)
 800139c:	705a      	strb	r2, [r3, #1]
      break;
 800139e:	e044      	b.n	800142a <System_Time_Setup_Mode_Handle+0x3e6>
      else if (button->hold_flag && !button->latch) 
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	7b9b      	ldrb	r3, [r3, #14]
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d03f      	beq.n	800142a <System_Time_Setup_Mode_Handle+0x3e6>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	7bdb      	ldrb	r3, [r3, #15]
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	f083 0301 	eor.w	r3, r3, #1
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d037      	beq.n	800142a <System_Time_Setup_Mode_Handle+0x3e6>
        Time_Init
 80013ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001438 <System_Time_Setup_Mode_Handle+0x3f4>)
 80013bc:	7818      	ldrb	r0, [r3, #0]
 80013be:	4b1e      	ldr	r3, [pc, #120]	@ (8001438 <System_Time_Setup_Mode_Handle+0x3f4>)
 80013c0:	785c      	ldrb	r4, [r3, #1]
 80013c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001438 <System_Time_Setup_Mode_Handle+0x3f4>)
 80013c4:	789d      	ldrb	r5, [r3, #2]
 80013c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001438 <System_Time_Setup_Mode_Handle+0x3f4>)
 80013c8:	78db      	ldrb	r3, [r3, #3]
 80013ca:	4a1b      	ldr	r2, [pc, #108]	@ (8001438 <System_Time_Setup_Mode_Handle+0x3f4>)
 80013cc:	7912      	ldrb	r2, [r2, #4]
 80013ce:	491a      	ldr	r1, [pc, #104]	@ (8001438 <System_Time_Setup_Mode_Handle+0x3f4>)
 80013d0:	7949      	ldrb	r1, [r1, #5]
 80013d2:	9102      	str	r1, [sp, #8]
 80013d4:	9201      	str	r2, [sp, #4]
 80013d6:	9300      	str	r3, [sp, #0]
 80013d8:	462b      	mov	r3, r5
 80013da:	4622      	mov	r2, r4
 80013dc:	4601      	mov	r1, r0
 80013de:	2000      	movs	r0, #0
 80013e0:	f7ff fada 	bl	8000998 <Time_Init>
        button->latch = true;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2201      	movs	r2, #1
 80013e8:	73da      	strb	r2, [r3, #15]
        break;
 80013ea:	e01f      	b.n	800142c <System_Time_Setup_Mode_Handle+0x3e8>

    // Button 4: If pressed, move to the previous field; if held, do nothing (reserved for future use)
    case 4: 
      // If the button is pressed, move to the previous parameter field, wrapping around if necessary
      if (button->press_flag)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	7b5b      	ldrb	r3, [r3, #13]
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d00e      	beq.n	8001414 <System_Time_Setup_Mode_Handle+0x3d0>
      {
        if (system_state.param_select == SET_MINUTE)
 80013f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001434 <System_Time_Setup_Mode_Handle+0x3f0>)
 80013f8:	785b      	ldrb	r3, [r3, #1]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d103      	bne.n	8001406 <System_Time_Setup_Mode_Handle+0x3c2>
        {
          system_state.param_select = SET_YEAR;
 80013fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001434 <System_Time_Setup_Mode_Handle+0x3f0>)
 8001400:	2205      	movs	r2, #5
 8001402:	705a      	strb	r2, [r3, #1]
      // If the button is held down, do nothing (reserved for future use)
      else if (button->hold_flag) 
      {
        // Reserved
      }
      break;
 8001404:	e012      	b.n	800142c <System_Time_Setup_Mode_Handle+0x3e8>
          system_state.param_select -= 1;
 8001406:	4b0b      	ldr	r3, [pc, #44]	@ (8001434 <System_Time_Setup_Mode_Handle+0x3f0>)
 8001408:	785b      	ldrb	r3, [r3, #1]
 800140a:	3b01      	subs	r3, #1
 800140c:	b2da      	uxtb	r2, r3
 800140e:	4b09      	ldr	r3, [pc, #36]	@ (8001434 <System_Time_Setup_Mode_Handle+0x3f0>)
 8001410:	705a      	strb	r2, [r3, #1]
      break;
 8001412:	e00b      	b.n	800142c <System_Time_Setup_Mode_Handle+0x3e8>
      else if (button->hold_flag) 
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	7b9b      	ldrb	r3, [r3, #14]
      break;
 8001418:	e008      	b.n	800142c <System_Time_Setup_Mode_Handle+0x3e8>

    default: 
      break;
 800141a:	bf00      	nop
 800141c:	e006      	b.n	800142c <System_Time_Setup_Mode_Handle+0x3e8>
      break;
 800141e:	bf00      	nop
 8001420:	e004      	b.n	800142c <System_Time_Setup_Mode_Handle+0x3e8>
      break;
 8001422:	bf00      	nop
 8001424:	e002      	b.n	800142c <System_Time_Setup_Mode_Handle+0x3e8>
        break;
 8001426:	bf00      	nop
 8001428:	e000      	b.n	800142c <System_Time_Setup_Mode_Handle+0x3e8>
      break;
 800142a:	bf00      	nop
  }
}
 800142c:	bf00      	nop
 800142e:	3734      	adds	r7, #52	@ 0x34
 8001430:	46bd      	mov	sp, r7
 8001432:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001434:	200000fc 	.word	0x200000fc
 8001438:	20000100 	.word	0x20000100

0800143c <System_Alarm_Setup_Mode_Handle>:
 * @brief  Handles the alarm setup mode based on button actions.
 * @param  button: Pointer to the BUTTON structure containing button state and index.
 * @retval None
 */
void System_Alarm_Setup_Mode_Handle (BUTTON_DATA *button)
{
 800143c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800143e:	b091      	sub	sp, #68	@ 0x44
 8001440:	af04      	add	r7, sp, #16
 8001442:	6078      	str	r0, [r7, #4]
  switch (button->index) 
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	799b      	ldrb	r3, [r3, #6]
 8001448:	2b04      	cmp	r3, #4
 800144a:	f200 826d 	bhi.w	8001928 <System_Alarm_Setup_Mode_Handle+0x4ec>
 800144e:	a201      	add	r2, pc, #4	@ (adr r2, 8001454 <System_Alarm_Setup_Mode_Handle+0x18>)
 8001450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001454:	08001469 	.word	0x08001469
 8001458:	0800150f 	.word	0x0800150f
 800145c:	08001641 	.word	0x08001641
 8001460:	080017df 	.word	0x080017df
 8001464:	080018a1 	.word	0x080018a1
  {
    // Button 0: If pressed, cycle through the system modes; if held, set the mode to default
    case 0:
      // If pressed, cycle through the time system modes, but the temporary setting data is still retained (avoid accidental press)
      if (button->press_flag)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	7b5b      	ldrb	r3, [r3, #13]
 800146c:	b2db      	uxtb	r3, r3
 800146e:	2b00      	cmp	r3, #0
 8001470:	d00c      	beq.n	800148c <System_Alarm_Setup_Mode_Handle+0x50>
      {
        system_state.mode = (system_state.mode < (SYSTEM_MODE_NUM - 1)) ? (system_state.mode + 1) : 0;
 8001472:	4b9e      	ldr	r3, [pc, #632]	@ (80016ec <System_Alarm_Setup_Mode_Handle+0x2b0>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	2b04      	cmp	r3, #4
 8001478:	d804      	bhi.n	8001484 <System_Alarm_Setup_Mode_Handle+0x48>
 800147a:	4b9c      	ldr	r3, [pc, #624]	@ (80016ec <System_Alarm_Setup_Mode_Handle+0x2b0>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	3301      	adds	r3, #1
 8001480:	b2db      	uxtb	r3, r3
 8001482:	e000      	b.n	8001486 <System_Alarm_Setup_Mode_Handle+0x4a>
 8001484:	2300      	movs	r3, #0
 8001486:	4a99      	ldr	r2, [pc, #612]	@ (80016ec <System_Alarm_Setup_Mode_Handle+0x2b0>)
 8001488:	7013      	strb	r3, [r2, #0]
          NOT_USED_MODE,              // Select: DAY_OF_WEEK_MODE, DATE_OF_MONTH_MODE, NOT_USED_MODE
          time_get_data.dayofweek,    // Day of the week: 1-7 (1 = Sunday, 2 = Monday, ..., 7 = Saturday), or Date of the month: 1-31
          true                        // true = ON, false = OFF
        };
      }
      break;
 800148a:	e24f      	b.n	800192c <System_Alarm_Setup_Mode_Handle+0x4f0>
      else if (button->hold_flag && !button->latch)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	7b9b      	ldrb	r3, [r3, #14]
 8001490:	b2db      	uxtb	r3, r3
 8001492:	2b00      	cmp	r3, #0
 8001494:	f000 824a 	beq.w	800192c <System_Alarm_Setup_Mode_Handle+0x4f0>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	7bdb      	ldrb	r3, [r3, #15]
 800149c:	b2db      	uxtb	r3, r3
 800149e:	f083 0301 	eor.w	r3, r3, #1
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	f000 8241 	beq.w	800192c <System_Alarm_Setup_Mode_Handle+0x4f0>
        system_state.mode = DEFAULT_MODE; 
 80014aa:	4b90      	ldr	r3, [pc, #576]	@ (80016ec <System_Alarm_Setup_Mode_Handle+0x2b0>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	701a      	strb	r2, [r3, #0]
        button->latch = true;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2201      	movs	r2, #1
 80014b4:	73da      	strb	r2, [r3, #15]
          time_get_data.minute,       // Minutes: 0-59
 80014b6:	4b8e      	ldr	r3, [pc, #568]	@ (80016f0 <System_Alarm_Setup_Mode_Handle+0x2b4>)
 80014b8:	785b      	ldrb	r3, [r3, #1]
 80014ba:	fa5f fc83 	uxtb.w	ip, r3
          time_get_data.hour,         // Hours: 0-23
 80014be:	4b8c      	ldr	r3, [pc, #560]	@ (80016f0 <System_Alarm_Setup_Mode_Handle+0x2b4>)
 80014c0:	789b      	ldrb	r3, [r3, #2]
 80014c2:	b2de      	uxtb	r6, r3
          time_get_data.dayofweek,    // Day of the week: 1-7 (1 = Sunday, 2 = Monday, ..., 7 = Saturday)
 80014c4:	4b8a      	ldr	r3, [pc, #552]	@ (80016f0 <System_Alarm_Setup_Mode_Handle+0x2b4>)
 80014c6:	78db      	ldrb	r3, [r3, #3]
 80014c8:	b2dd      	uxtb	r5, r3
          time_get_data.dateofmonth,  // Date of the month: 1-31
 80014ca:	4b89      	ldr	r3, [pc, #548]	@ (80016f0 <System_Alarm_Setup_Mode_Handle+0x2b4>)
 80014cc:	791b      	ldrb	r3, [r3, #4]
 80014ce:	b2dc      	uxtb	r4, r3
          time_get_data.month,        // Month: 1-12
 80014d0:	4b87      	ldr	r3, [pc, #540]	@ (80016f0 <System_Alarm_Setup_Mode_Handle+0x2b4>)
 80014d2:	795b      	ldrb	r3, [r3, #5]
 80014d4:	b2d8      	uxtb	r0, r3
          time_get_data.year,         // Year: 0-99 (0 = 2000, 1 = 2001, ..., 99 = 2099)
 80014d6:	4b86      	ldr	r3, [pc, #536]	@ (80016f0 <System_Alarm_Setup_Mode_Handle+0x2b4>)
 80014d8:	799b      	ldrb	r3, [r3, #6]
 80014da:	b2d9      	uxtb	r1, r3
          time_get_data.dayofweek,    // Day of the week: 1-7 (1 = Sunday, 2 = Monday, ..., 7 = Saturday), or Date of the month: 1-31
 80014dc:	4b84      	ldr	r3, [pc, #528]	@ (80016f0 <System_Alarm_Setup_Mode_Handle+0x2b4>)
 80014de:	78db      	ldrb	r3, [r3, #3]
 80014e0:	b2da      	uxtb	r2, r3
        system_param_data =
 80014e2:	4b84      	ldr	r3, [pc, #528]	@ (80016f4 <System_Alarm_Setup_Mode_Handle+0x2b8>)
 80014e4:	f883 c000 	strb.w	ip, [r3]
 80014e8:	4b82      	ldr	r3, [pc, #520]	@ (80016f4 <System_Alarm_Setup_Mode_Handle+0x2b8>)
 80014ea:	705e      	strb	r6, [r3, #1]
 80014ec:	4b81      	ldr	r3, [pc, #516]	@ (80016f4 <System_Alarm_Setup_Mode_Handle+0x2b8>)
 80014ee:	709d      	strb	r5, [r3, #2]
 80014f0:	4b80      	ldr	r3, [pc, #512]	@ (80016f4 <System_Alarm_Setup_Mode_Handle+0x2b8>)
 80014f2:	70dc      	strb	r4, [r3, #3]
 80014f4:	4b7f      	ldr	r3, [pc, #508]	@ (80016f4 <System_Alarm_Setup_Mode_Handle+0x2b8>)
 80014f6:	7118      	strb	r0, [r3, #4]
 80014f8:	4b7e      	ldr	r3, [pc, #504]	@ (80016f4 <System_Alarm_Setup_Mode_Handle+0x2b8>)
 80014fa:	7159      	strb	r1, [r3, #5]
 80014fc:	4b7d      	ldr	r3, [pc, #500]	@ (80016f4 <System_Alarm_Setup_Mode_Handle+0x2b8>)
 80014fe:	2102      	movs	r1, #2
 8001500:	7199      	strb	r1, [r3, #6]
 8001502:	4b7c      	ldr	r3, [pc, #496]	@ (80016f4 <System_Alarm_Setup_Mode_Handle+0x2b8>)
 8001504:	71da      	strb	r2, [r3, #7]
 8001506:	4b7b      	ldr	r3, [pc, #492]	@ (80016f4 <System_Alarm_Setup_Mode_Handle+0x2b8>)
 8001508:	2201      	movs	r2, #1
 800150a:	721a      	strb	r2, [r3, #8]
      break;
 800150c:	e20e      	b.n	800192c <System_Alarm_Setup_Mode_Handle+0x4f0>

    // Button 1: If pressed, increment the selected parameter; if held, increment continuously
    case 1: 
      // Pointer to the selected parameter, its maximum value, and minimum value
      uint8_t *paramPtr1 = NULL;
 800150e:	2300      	movs	r3, #0
 8001510:	62fb      	str	r3, [r7, #44]	@ 0x2c
      uint8_t maxValue1 = 0;    
 8001512:	2300      	movs	r3, #0
 8001514:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
      uint8_t minValue1 = 0;  
 8001518:	2300      	movs	r3, #0
 800151a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

      // Determine the parameter to increment based on the current selection
      switch (system_state.param_select)
 800151e:	4b73      	ldr	r3, [pc, #460]	@ (80016ec <System_Alarm_Setup_Mode_Handle+0x2b0>)
 8001520:	785b      	ldrb	r3, [r3, #1]
 8001522:	2b08      	cmp	r3, #8
 8001524:	d848      	bhi.n	80015b8 <System_Alarm_Setup_Mode_Handle+0x17c>
 8001526:	a201      	add	r2, pc, #4	@ (adr r2, 800152c <System_Alarm_Setup_Mode_Handle+0xf0>)
 8001528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800152c:	08001551 	.word	0x08001551
 8001530:	08001563 	.word	0x08001563
 8001534:	080015b9 	.word	0x080015b9
 8001538:	080015b9 	.word	0x080015b9
 800153c:	080015b9 	.word	0x080015b9
 8001540:	080015b9 	.word	0x080015b9
 8001544:	08001575 	.word	0x08001575
 8001548:	08001587 	.word	0x08001587
 800154c:	08001599 	.word	0x08001599
      {
        case SET_MINUTE:  paramPtr1 = &system_param_data.minute;  maxValue1 = 59; minValue1 = 0; break;
 8001550:	4b68      	ldr	r3, [pc, #416]	@ (80016f4 <System_Alarm_Setup_Mode_Handle+0x2b8>)
 8001552:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001554:	233b      	movs	r3, #59	@ 0x3b
 8001556:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800155a:	2300      	movs	r3, #0
 800155c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8001560:	e02b      	b.n	80015ba <System_Alarm_Setup_Mode_Handle+0x17e>
        case SET_HOUR:    paramPtr1 = &system_param_data.hour;    maxValue1 = 23; minValue1 = 0; break;
 8001562:	4b65      	ldr	r3, [pc, #404]	@ (80016f8 <System_Alarm_Setup_Mode_Handle+0x2bc>)
 8001564:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001566:	2317      	movs	r3, #23
 8001568:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800156c:	2300      	movs	r3, #0
 800156e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8001572:	e022      	b.n	80015ba <System_Alarm_Setup_Mode_Handle+0x17e>
        case SET_DY_DT:   paramPtr1 = (uint8_t *)&system_param_data.dy_dt; maxValue1 = 2; minValue1 = 0; break;
 8001574:	4b61      	ldr	r3, [pc, #388]	@ (80016fc <System_Alarm_Setup_Mode_Handle+0x2c0>)
 8001576:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001578:	2302      	movs	r3, #2
 800157a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800157e:	2300      	movs	r3, #0
 8001580:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8001584:	e019      	b.n	80015ba <System_Alarm_Setup_Mode_Handle+0x17e>
        case SET_DOW_DOM: paramPtr1 = &system_param_data.dow_dom; maxValue1 = 31; minValue1 = 1; break;
 8001586:	4b5e      	ldr	r3, [pc, #376]	@ (8001700 <System_Alarm_Setup_Mode_Handle+0x2c4>)
 8001588:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800158a:	231f      	movs	r3, #31
 800158c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001590:	2301      	movs	r3, #1
 8001592:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8001596:	e010      	b.n	80015ba <System_Alarm_Setup_Mode_Handle+0x17e>
        case SET_ON_OFF:  system_param_data.on_off = !system_param_data.on_off;                  break;
 8001598:	4b56      	ldr	r3, [pc, #344]	@ (80016f4 <System_Alarm_Setup_Mode_Handle+0x2b8>)
 800159a:	7a1b      	ldrb	r3, [r3, #8]
 800159c:	2b00      	cmp	r3, #0
 800159e:	bf14      	ite	ne
 80015a0:	2301      	movne	r3, #1
 80015a2:	2300      	moveq	r3, #0
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	f083 0301 	eor.w	r3, r3, #1
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	f003 0301 	and.w	r3, r3, #1
 80015b0:	b2da      	uxtb	r2, r3
 80015b2:	4b50      	ldr	r3, [pc, #320]	@ (80016f4 <System_Alarm_Setup_Mode_Handle+0x2b8>)
 80015b4:	721a      	strb	r2, [r3, #8]
 80015b6:	e000      	b.n	80015ba <System_Alarm_Setup_Mode_Handle+0x17e>
        default: break;
 80015b8:	bf00      	nop
      }

      if (system_state.param_select == SET_ON_OFF)
 80015ba:	4b4c      	ldr	r3, [pc, #304]	@ (80016ec <System_Alarm_Setup_Mode_Handle+0x2b0>)
 80015bc:	785b      	ldrb	r3, [r3, #1]
 80015be:	2b08      	cmp	r3, #8
 80015c0:	f000 81b6 	beq.w	8001930 <System_Alarm_Setup_Mode_Handle+0x4f4>
      {
        break;
      }

      // Initialize the start tick for button 1 hold detection
      uint32_t startTick1 = 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	617b      	str	r3, [r7, #20]
      
      // Check if the button is pressed or held
      if (button->press_flag) 
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	7b5b      	ldrb	r3, [r3, #13]
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d013      	beq.n	80015fa <System_Alarm_Setup_Mode_Handle+0x1be>
      {
        // Increment the selected parameter value once for a button press
        if (paramPtr1) 
 80015d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f000 81ad 	beq.w	8001934 <System_Alarm_Setup_Mode_Handle+0x4f8>
        {
          // Increment the parameter value, wrapping around if necessary
          *paramPtr1 = (*paramPtr1 < maxValue1) ? (*paramPtr1 + 1) : minValue1;
 80015da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d904      	bls.n	80015f0 <System_Alarm_Setup_Mode_Handle+0x1b4>
 80015e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	3301      	adds	r3, #1
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	e001      	b.n	80015f4 <System_Alarm_Setup_Mode_Handle+0x1b8>
 80015f0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80015f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80015f6:	7013      	strb	r3, [r2, #0]

        // Update the start tick for the next hold cycle
        startTick1 = HAL_GetTick();
      } 
      
      break;
 80015f8:	e19c      	b.n	8001934 <System_Alarm_Setup_Mode_Handle+0x4f8>
      else if (button->hold_flag) 
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	7b9b      	ldrb	r3, [r3, #14]
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	2b00      	cmp	r3, #0
 8001602:	f000 8197 	beq.w	8001934 <System_Alarm_Setup_Mode_Handle+0x4f8>
        if (HAL_GetTick() - startTick1 >= BUTTON_HOLD_CYCLE) 
 8001606:	f000 fd27 	bl	8002058 <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	2bf9      	cmp	r3, #249	@ 0xf9
 8001612:	d911      	bls.n	8001638 <System_Alarm_Setup_Mode_Handle+0x1fc>
          if (paramPtr1) 
 8001614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001616:	2b00      	cmp	r3, #0
 8001618:	d00e      	beq.n	8001638 <System_Alarm_Setup_Mode_Handle+0x1fc>
            *paramPtr1 = (*paramPtr1 < maxValue1) ? (*paramPtr1 + 1) : minValue1;
 800161a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8001622:	429a      	cmp	r2, r3
 8001624:	d904      	bls.n	8001630 <System_Alarm_Setup_Mode_Handle+0x1f4>
 8001626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	3301      	adds	r3, #1
 800162c:	b2db      	uxtb	r3, r3
 800162e:	e001      	b.n	8001634 <System_Alarm_Setup_Mode_Handle+0x1f8>
 8001630:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001634:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001636:	7013      	strb	r3, [r2, #0]
        startTick1 = HAL_GetTick();
 8001638:	f000 fd0e 	bl	8002058 <HAL_GetTick>
 800163c:	6178      	str	r0, [r7, #20]
      break;
 800163e:	e179      	b.n	8001934 <System_Alarm_Setup_Mode_Handle+0x4f8>

      case 2: // BTN2: Decrement current value or scroll slots
      {
        // Pointer to the selected parameter, its maximum value, and minimum value
        uint8_t *paramPtr2 = NULL;
 8001640:	2300      	movs	r3, #0
 8001642:	627b      	str	r3, [r7, #36]	@ 0x24
        uint8_t maxValue2 = 0;    
 8001644:	2300      	movs	r3, #0
 8001646:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        uint8_t minValue2 = 0;  
 800164a:	2300      	movs	r3, #0
 800164c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

        // Determine the parameter to decrement based on the current selection
        switch (system_state.param_select)
 8001650:	4b26      	ldr	r3, [pc, #152]	@ (80016ec <System_Alarm_Setup_Mode_Handle+0x2b0>)
 8001652:	785b      	ldrb	r3, [r3, #1]
 8001654:	2b08      	cmp	r3, #8
 8001656:	d855      	bhi.n	8001704 <System_Alarm_Setup_Mode_Handle+0x2c8>
 8001658:	a201      	add	r2, pc, #4	@ (adr r2, 8001660 <System_Alarm_Setup_Mode_Handle+0x224>)
 800165a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800165e:	bf00      	nop
 8001660:	08001685 	.word	0x08001685
 8001664:	08001697 	.word	0x08001697
 8001668:	08001705 	.word	0x08001705
 800166c:	08001705 	.word	0x08001705
 8001670:	08001705 	.word	0x08001705
 8001674:	08001705 	.word	0x08001705
 8001678:	080016a9 	.word	0x080016a9
 800167c:	080016bb 	.word	0x080016bb
 8001680:	080016cd 	.word	0x080016cd
        {
          case SET_MINUTE:  paramPtr2 = &system_param_data.minute;  maxValue2 = 59; minValue2 = 0; break;
 8001684:	4b1b      	ldr	r3, [pc, #108]	@ (80016f4 <System_Alarm_Setup_Mode_Handle+0x2b8>)
 8001686:	627b      	str	r3, [r7, #36]	@ 0x24
 8001688:	233b      	movs	r3, #59	@ 0x3b
 800168a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800168e:	2300      	movs	r3, #0
 8001690:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001694:	e037      	b.n	8001706 <System_Alarm_Setup_Mode_Handle+0x2ca>
          case SET_HOUR:    paramPtr2 = &system_param_data.hour;    maxValue2 = 23; minValue2 = 0; break;
 8001696:	4b18      	ldr	r3, [pc, #96]	@ (80016f8 <System_Alarm_Setup_Mode_Handle+0x2bc>)
 8001698:	627b      	str	r3, [r7, #36]	@ 0x24
 800169a:	2317      	movs	r3, #23
 800169c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80016a0:	2300      	movs	r3, #0
 80016a2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80016a6:	e02e      	b.n	8001706 <System_Alarm_Setup_Mode_Handle+0x2ca>
          case SET_DY_DT:   paramPtr2 = (uint8_t *)&system_param_data.dy_dt; maxValue2 = 2; minValue2 = 0; break;
 80016a8:	4b14      	ldr	r3, [pc, #80]	@ (80016fc <System_Alarm_Setup_Mode_Handle+0x2c0>)
 80016aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80016ac:	2302      	movs	r3, #2
 80016ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80016b2:	2300      	movs	r3, #0
 80016b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80016b8:	e025      	b.n	8001706 <System_Alarm_Setup_Mode_Handle+0x2ca>
          case SET_DOW_DOM: paramPtr2 = &system_param_data.dow_dom; maxValue2 = 31; minValue2 = 1; break;
 80016ba:	4b11      	ldr	r3, [pc, #68]	@ (8001700 <System_Alarm_Setup_Mode_Handle+0x2c4>)
 80016bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80016be:	231f      	movs	r3, #31
 80016c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80016c4:	2301      	movs	r3, #1
 80016c6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80016ca:	e01c      	b.n	8001706 <System_Alarm_Setup_Mode_Handle+0x2ca>
          case SET_ON_OFF:  system_param_data.on_off = !system_param_data.on_off;                  break;
 80016cc:	4b09      	ldr	r3, [pc, #36]	@ (80016f4 <System_Alarm_Setup_Mode_Handle+0x2b8>)
 80016ce:	7a1b      	ldrb	r3, [r3, #8]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	bf14      	ite	ne
 80016d4:	2301      	movne	r3, #1
 80016d6:	2300      	moveq	r3, #0
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	f083 0301 	eor.w	r3, r3, #1
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	f003 0301 	and.w	r3, r3, #1
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	4b03      	ldr	r3, [pc, #12]	@ (80016f4 <System_Alarm_Setup_Mode_Handle+0x2b8>)
 80016e8:	721a      	strb	r2, [r3, #8]
 80016ea:	e00c      	b.n	8001706 <System_Alarm_Setup_Mode_Handle+0x2ca>
 80016ec:	200000fc 	.word	0x200000fc
 80016f0:	2000010c 	.word	0x2000010c
 80016f4:	20000100 	.word	0x20000100
 80016f8:	20000101 	.word	0x20000101
 80016fc:	20000106 	.word	0x20000106
 8001700:	20000107 	.word	0x20000107
          default: break;
 8001704:	bf00      	nop
        }

        if (system_state.param_select == SET_ON_OFF)
 8001706:	4b92      	ldr	r3, [pc, #584]	@ (8001950 <System_Alarm_Setup_Mode_Handle+0x514>)
 8001708:	785b      	ldrb	r3, [r3, #1]
 800170a:	2b08      	cmp	r3, #8
 800170c:	f000 8114 	beq.w	8001938 <System_Alarm_Setup_Mode_Handle+0x4fc>
        {
          break;
        }

        // Initialize the start tick for button 2 hold detection
        uint32_t startTick2 = 0;
 8001710:	2300      	movs	r3, #0
 8001712:	61bb      	str	r3, [r7, #24]

        // Check if the button is pressed or held
        if (button->press_flag) 
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	7b5b      	ldrb	r3, [r3, #13]
 8001718:	b2db      	uxtb	r3, r3
 800171a:	2b00      	cmp	r3, #0
 800171c:	d027      	beq.n	800176e <System_Alarm_Setup_Mode_Handle+0x332>
        {
          // Check if the selected parameter is ON/OFF
          if (system_state.param_select == SET_ON_OFF) 
 800171e:	4b8c      	ldr	r3, [pc, #560]	@ (8001950 <System_Alarm_Setup_Mode_Handle+0x514>)
 8001720:	785b      	ldrb	r3, [r3, #1]
 8001722:	2b08      	cmp	r3, #8
 8001724:	d10f      	bne.n	8001746 <System_Alarm_Setup_Mode_Handle+0x30a>
          {
            // Toggle the on/off state of the alarm
            system_param_data.on_off = !system_param_data.on_off;
 8001726:	4b8b      	ldr	r3, [pc, #556]	@ (8001954 <System_Alarm_Setup_Mode_Handle+0x518>)
 8001728:	7a1b      	ldrb	r3, [r3, #8]
 800172a:	2b00      	cmp	r3, #0
 800172c:	bf14      	ite	ne
 800172e:	2301      	movne	r3, #1
 8001730:	2300      	moveq	r3, #0
 8001732:	b2db      	uxtb	r3, r3
 8001734:	f083 0301 	eor.w	r3, r3, #1
 8001738:	b2db      	uxtb	r3, r3
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	b2da      	uxtb	r2, r3
 8001740:	4b84      	ldr	r3, [pc, #528]	@ (8001954 <System_Alarm_Setup_Mode_Handle+0x518>)
 8001742:	721a      	strb	r2, [r3, #8]
            // Update the start tick for the next hold cycle
            startTick2 = HAL_GetTick();
          }
        } 

        break;
 8001744:	e0fa      	b.n	800193c <System_Alarm_Setup_Mode_Handle+0x500>
            if (paramPtr2) 
 8001746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001748:	2b00      	cmp	r3, #0
 800174a:	f000 80f7 	beq.w	800193c <System_Alarm_Setup_Mode_Handle+0x500>
              *paramPtr2 = (*paramPtr2 > minValue2) ? (*paramPtr2 - 1) : maxValue2;
 800174e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8001756:	429a      	cmp	r2, r3
 8001758:	d204      	bcs.n	8001764 <System_Alarm_Setup_Mode_Handle+0x328>
 800175a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	3b01      	subs	r3, #1
 8001760:	b2db      	uxtb	r3, r3
 8001762:	e001      	b.n	8001768 <System_Alarm_Setup_Mode_Handle+0x32c>
 8001764:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001768:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800176a:	7013      	strb	r3, [r2, #0]
        break;
 800176c:	e0e6      	b.n	800193c <System_Alarm_Setup_Mode_Handle+0x500>
        else if (button->hold_flag) 
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	7b9b      	ldrb	r3, [r3, #14]
 8001772:	b2db      	uxtb	r3, r3
 8001774:	2b00      	cmp	r3, #0
 8001776:	f000 80e1 	beq.w	800193c <System_Alarm_Setup_Mode_Handle+0x500>
          if (HAL_GetTick() - startTick2 >= BUTTON_HOLD_CYCLE) 
 800177a:	f000 fc6d 	bl	8002058 <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	2bf9      	cmp	r3, #249	@ 0xf9
 8001786:	f240 80d9 	bls.w	800193c <System_Alarm_Setup_Mode_Handle+0x500>
            if (system_state.param_select == SET_ON_OFF) 
 800178a:	4b71      	ldr	r3, [pc, #452]	@ (8001950 <System_Alarm_Setup_Mode_Handle+0x514>)
 800178c:	785b      	ldrb	r3, [r3, #1]
 800178e:	2b08      	cmp	r3, #8
 8001790:	d10f      	bne.n	80017b2 <System_Alarm_Setup_Mode_Handle+0x376>
              system_param_data.on_off = !system_param_data.on_off;
 8001792:	4b70      	ldr	r3, [pc, #448]	@ (8001954 <System_Alarm_Setup_Mode_Handle+0x518>)
 8001794:	7a1b      	ldrb	r3, [r3, #8]
 8001796:	2b00      	cmp	r3, #0
 8001798:	bf14      	ite	ne
 800179a:	2301      	movne	r3, #1
 800179c:	2300      	moveq	r3, #0
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	f083 0301 	eor.w	r3, r3, #1
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	b2da      	uxtb	r2, r3
 80017ac:	4b69      	ldr	r3, [pc, #420]	@ (8001954 <System_Alarm_Setup_Mode_Handle+0x518>)
 80017ae:	721a      	strb	r2, [r3, #8]
 80017b0:	e011      	b.n	80017d6 <System_Alarm_Setup_Mode_Handle+0x39a>
              if (paramPtr2) 
 80017b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d00e      	beq.n	80017d6 <System_Alarm_Setup_Mode_Handle+0x39a>
                *paramPtr2 = (*paramPtr2 > minValue2) ? (*paramPtr2 - 1) : maxValue2;
 80017b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d204      	bcs.n	80017ce <System_Alarm_Setup_Mode_Handle+0x392>
 80017c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	3b01      	subs	r3, #1
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	e001      	b.n	80017d2 <System_Alarm_Setup_Mode_Handle+0x396>
 80017ce:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80017d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017d4:	7013      	strb	r3, [r2, #0]
            startTick2 = HAL_GetTick();
 80017d6:	f000 fc3f 	bl	8002058 <HAL_GetTick>
 80017da:	61b8      	str	r0, [r7, #24]
        break;
 80017dc:	e0ae      	b.n	800193c <System_Alarm_Setup_Mode_Handle+0x500>
      }
    
    // Button 3: If pressed, move to the next field; if held, save the alarm and return to default mode
    case 3:
      // If the button is pressed, move to the next parameter field, wrapping around if necessary  
      if (button->press_flag)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	7b5b      	ldrb	r3, [r3, #13]
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d016      	beq.n	8001816 <System_Alarm_Setup_Mode_Handle+0x3da>
      {
        if      (system_state.param_select == SET_HOUR)
 80017e8:	4b59      	ldr	r3, [pc, #356]	@ (8001950 <System_Alarm_Setup_Mode_Handle+0x514>)
 80017ea:	785b      	ldrb	r3, [r3, #1]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d103      	bne.n	80017f8 <System_Alarm_Setup_Mode_Handle+0x3bc>
        {
          system_state.param_select = SET_DY_DT;
 80017f0:	4b57      	ldr	r3, [pc, #348]	@ (8001950 <System_Alarm_Setup_Mode_Handle+0x514>)
 80017f2:	2206      	movs	r2, #6
 80017f4:	705a      	strb	r2, [r3, #1]

        // Reset the button latch to avoid function replication
        button->latch = true;

      }
      break;
 80017f6:	e0a3      	b.n	8001940 <System_Alarm_Setup_Mode_Handle+0x504>
        else if (system_state.param_select == SET_ON_OFF)
 80017f8:	4b55      	ldr	r3, [pc, #340]	@ (8001950 <System_Alarm_Setup_Mode_Handle+0x514>)
 80017fa:	785b      	ldrb	r3, [r3, #1]
 80017fc:	2b08      	cmp	r3, #8
 80017fe:	d103      	bne.n	8001808 <System_Alarm_Setup_Mode_Handle+0x3cc>
          system_state.param_select = SET_MINUTE;
 8001800:	4b53      	ldr	r3, [pc, #332]	@ (8001950 <System_Alarm_Setup_Mode_Handle+0x514>)
 8001802:	2200      	movs	r2, #0
 8001804:	705a      	strb	r2, [r3, #1]
      break;
 8001806:	e09b      	b.n	8001940 <System_Alarm_Setup_Mode_Handle+0x504>
          system_state.param_select += 1;
 8001808:	4b51      	ldr	r3, [pc, #324]	@ (8001950 <System_Alarm_Setup_Mode_Handle+0x514>)
 800180a:	785b      	ldrb	r3, [r3, #1]
 800180c:	3301      	adds	r3, #1
 800180e:	b2da      	uxtb	r2, r3
 8001810:	4b4f      	ldr	r3, [pc, #316]	@ (8001950 <System_Alarm_Setup_Mode_Handle+0x514>)
 8001812:	705a      	strb	r2, [r3, #1]
      break;
 8001814:	e094      	b.n	8001940 <System_Alarm_Setup_Mode_Handle+0x504>
      else if (button->hold_flag && !button->latch) 
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	7b9b      	ldrb	r3, [r3, #14]
 800181a:	b2db      	uxtb	r3, r3
 800181c:	2b00      	cmp	r3, #0
 800181e:	f000 808f 	beq.w	8001940 <System_Alarm_Setup_Mode_Handle+0x504>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	7bdb      	ldrb	r3, [r3, #15]
 8001826:	b2db      	uxtb	r3, r3
 8001828:	f083 0301 	eor.w	r3, r3, #1
 800182c:	b2db      	uxtb	r3, r3
 800182e:	2b00      	cmp	r3, #0
 8001830:	f000 8086 	beq.w	8001940 <System_Alarm_Setup_Mode_Handle+0x504>
        Alarm_Set
 8001834:	4b47      	ldr	r3, [pc, #284]	@ (8001954 <System_Alarm_Setup_Mode_Handle+0x518>)
 8001836:	7818      	ldrb	r0, [r3, #0]
 8001838:	4b46      	ldr	r3, [pc, #280]	@ (8001954 <System_Alarm_Setup_Mode_Handle+0x518>)
 800183a:	785c      	ldrb	r4, [r3, #1]
 800183c:	4b45      	ldr	r3, [pc, #276]	@ (8001954 <System_Alarm_Setup_Mode_Handle+0x518>)
 800183e:	79dd      	ldrb	r5, [r3, #7]
 8001840:	4b44      	ldr	r3, [pc, #272]	@ (8001954 <System_Alarm_Setup_Mode_Handle+0x518>)
 8001842:	799b      	ldrb	r3, [r3, #6]
 8001844:	4a43      	ldr	r2, [pc, #268]	@ (8001954 <System_Alarm_Setup_Mode_Handle+0x518>)
 8001846:	7a12      	ldrb	r2, [r2, #8]
 8001848:	4943      	ldr	r1, [pc, #268]	@ (8001958 <System_Alarm_Setup_Mode_Handle+0x51c>)
 800184a:	7809      	ldrb	r1, [r1, #0]
 800184c:	9102      	str	r1, [sp, #8]
 800184e:	9201      	str	r2, [sp, #4]
 8001850:	9300      	str	r3, [sp, #0]
 8001852:	462b      	mov	r3, r5
 8001854:	4622      	mov	r2, r4
 8001856:	4601      	mov	r1, r0
 8001858:	2000      	movs	r0, #0
 800185a:	f7ff f8c9 	bl	80009f0 <Alarm_Set>
        Alarm_Get(alarm_slot_ptr, &alarm_get_data[alarm_slot_ptr]);
 800185e:	4b3e      	ldr	r3, [pc, #248]	@ (8001958 <System_Alarm_Setup_Mode_Handle+0x51c>)
 8001860:	781a      	ldrb	r2, [r3, #0]
 8001862:	4b3d      	ldr	r3, [pc, #244]	@ (8001958 <System_Alarm_Setup_Mode_Handle+0x51c>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	4619      	mov	r1, r3
 8001868:	460b      	mov	r3, r1
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	440b      	add	r3, r1
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	493a      	ldr	r1, [pc, #232]	@ (800195c <System_Alarm_Setup_Mode_Handle+0x520>)
 8001872:	440b      	add	r3, r1
 8001874:	4619      	mov	r1, r3
 8001876:	4610      	mov	r0, r2
 8001878:	f7ff f90a 	bl	8000a90 <Alarm_Get>
        alarm_slot_ptr = (alarm_slot_ptr < ALARM_SLOT_NUM) ? (alarm_slot_ptr + 1) : 0;
 800187c:	4b36      	ldr	r3, [pc, #216]	@ (8001958 <System_Alarm_Setup_Mode_Handle+0x51c>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	2b09      	cmp	r3, #9
 8001882:	d804      	bhi.n	800188e <System_Alarm_Setup_Mode_Handle+0x452>
 8001884:	4b34      	ldr	r3, [pc, #208]	@ (8001958 <System_Alarm_Setup_Mode_Handle+0x51c>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	3301      	adds	r3, #1
 800188a:	b2db      	uxtb	r3, r3
 800188c:	e000      	b.n	8001890 <System_Alarm_Setup_Mode_Handle+0x454>
 800188e:	2300      	movs	r3, #0
 8001890:	4a31      	ldr	r2, [pc, #196]	@ (8001958 <System_Alarm_Setup_Mode_Handle+0x51c>)
 8001892:	7013      	strb	r3, [r2, #0]
        Alarm_Slot_Pointer_Set();
 8001894:	f7ff f974 	bl	8000b80 <Alarm_Slot_Pointer_Set>
        button->latch = true;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2201      	movs	r2, #1
 800189c:	73da      	strb	r2, [r3, #15]
      break;
 800189e:	e04f      	b.n	8001940 <System_Alarm_Setup_Mode_Handle+0x504>

    case 4: // BTN4: Go back to previous field
      if      (button->press_flag) 
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	7b5b      	ldrb	r3, [r3, #13]
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d016      	beq.n	80018d8 <System_Alarm_Setup_Mode_Handle+0x49c>
      {
        if      (system_state.param_select == SET_DY_DT)
 80018aa:	4b29      	ldr	r3, [pc, #164]	@ (8001950 <System_Alarm_Setup_Mode_Handle+0x514>)
 80018ac:	785b      	ldrb	r3, [r3, #1]
 80018ae:	2b06      	cmp	r3, #6
 80018b0:	d103      	bne.n	80018ba <System_Alarm_Setup_Mode_Handle+0x47e>
        {
          system_state.param_select = SET_HOUR;
 80018b2:	4b27      	ldr	r3, [pc, #156]	@ (8001950 <System_Alarm_Setup_Mode_Handle+0x514>)
 80018b4:	2201      	movs	r2, #1
 80018b6:	705a      	strb	r2, [r3, #1]

        // Reset the alarm slot pointer
        alarm_slot_ptr = 0;
        Alarm_Slot_Pointer_Set();
      }
      break;
 80018b8:	e044      	b.n	8001944 <System_Alarm_Setup_Mode_Handle+0x508>
        else if (system_state.param_select == SET_MINUTE)
 80018ba:	4b25      	ldr	r3, [pc, #148]	@ (8001950 <System_Alarm_Setup_Mode_Handle+0x514>)
 80018bc:	785b      	ldrb	r3, [r3, #1]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d103      	bne.n	80018ca <System_Alarm_Setup_Mode_Handle+0x48e>
          system_state.param_select = SET_ON_OFF;
 80018c2:	4b23      	ldr	r3, [pc, #140]	@ (8001950 <System_Alarm_Setup_Mode_Handle+0x514>)
 80018c4:	2208      	movs	r2, #8
 80018c6:	705a      	strb	r2, [r3, #1]
      break;
 80018c8:	e03c      	b.n	8001944 <System_Alarm_Setup_Mode_Handle+0x508>
          system_state.param_select -= 1;
 80018ca:	4b21      	ldr	r3, [pc, #132]	@ (8001950 <System_Alarm_Setup_Mode_Handle+0x514>)
 80018cc:	785b      	ldrb	r3, [r3, #1]
 80018ce:	3b01      	subs	r3, #1
 80018d0:	b2da      	uxtb	r2, r3
 80018d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001950 <System_Alarm_Setup_Mode_Handle+0x514>)
 80018d4:	705a      	strb	r2, [r3, #1]
      break;
 80018d6:	e035      	b.n	8001944 <System_Alarm_Setup_Mode_Handle+0x508>
      else if (button->hold_flag)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	7b9b      	ldrb	r3, [r3, #14]
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d030      	beq.n	8001944 <System_Alarm_Setup_Mode_Handle+0x508>
        for (int i = 0; i < alarm_slot_ptr; i++)
 80018e2:	2300      	movs	r3, #0
 80018e4:	61fb      	str	r3, [r7, #28]
 80018e6:	e013      	b.n	8001910 <System_Alarm_Setup_Mode_Handle+0x4d4>
          Alarm_Clear(i);
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff f925 	bl	8000b3c <Alarm_Clear>
          Alarm_Get(i, &alarm_get_data[i]);
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	b2d8      	uxtb	r0, r3
 80018f6:	69fa      	ldr	r2, [r7, #28]
 80018f8:	4613      	mov	r3, r2
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	4413      	add	r3, r2
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	4a16      	ldr	r2, [pc, #88]	@ (800195c <System_Alarm_Setup_Mode_Handle+0x520>)
 8001902:	4413      	add	r3, r2
 8001904:	4619      	mov	r1, r3
 8001906:	f7ff f8c3 	bl	8000a90 <Alarm_Get>
        for (int i = 0; i < alarm_slot_ptr; i++)
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	3301      	adds	r3, #1
 800190e:	61fb      	str	r3, [r7, #28]
 8001910:	4b11      	ldr	r3, [pc, #68]	@ (8001958 <System_Alarm_Setup_Mode_Handle+0x51c>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	461a      	mov	r2, r3
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	4293      	cmp	r3, r2
 800191a:	dbe5      	blt.n	80018e8 <System_Alarm_Setup_Mode_Handle+0x4ac>
        alarm_slot_ptr = 0;
 800191c:	4b0e      	ldr	r3, [pc, #56]	@ (8001958 <System_Alarm_Setup_Mode_Handle+0x51c>)
 800191e:	2200      	movs	r2, #0
 8001920:	701a      	strb	r2, [r3, #0]
        Alarm_Slot_Pointer_Set();
 8001922:	f7ff f92d 	bl	8000b80 <Alarm_Slot_Pointer_Set>
      break;
 8001926:	e00d      	b.n	8001944 <System_Alarm_Setup_Mode_Handle+0x508>

    default:
      // Reserved for future use
      break;
 8001928:	bf00      	nop
 800192a:	e00c      	b.n	8001946 <System_Alarm_Setup_Mode_Handle+0x50a>
      break;
 800192c:	bf00      	nop
 800192e:	e00a      	b.n	8001946 <System_Alarm_Setup_Mode_Handle+0x50a>
        break;
 8001930:	bf00      	nop
 8001932:	e008      	b.n	8001946 <System_Alarm_Setup_Mode_Handle+0x50a>
      break;
 8001934:	bf00      	nop
 8001936:	e006      	b.n	8001946 <System_Alarm_Setup_Mode_Handle+0x50a>
          break;
 8001938:	bf00      	nop
 800193a:	e004      	b.n	8001946 <System_Alarm_Setup_Mode_Handle+0x50a>
        break;
 800193c:	bf00      	nop
 800193e:	e002      	b.n	8001946 <System_Alarm_Setup_Mode_Handle+0x50a>
      break;
 8001940:	bf00      	nop
 8001942:	e000      	b.n	8001946 <System_Alarm_Setup_Mode_Handle+0x50a>
      break;
 8001944:	bf00      	nop
  }
}
 8001946:	bf00      	nop
 8001948:	3734      	adds	r7, #52	@ 0x34
 800194a:	46bd      	mov	sp, r7
 800194c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800194e:	bf00      	nop
 8001950:	200000fc 	.word	0x200000fc
 8001954:	20000100 	.word	0x20000100
 8001958:	20000150 	.word	0x20000150
 800195c:	20000114 	.word	0x20000114

08001960 <System_Alarm_View_Mode_Handle>:
 * @brief  Handles the alarm view mode based on button actions.
 * @param  button: Pointer to the BUTTON structure containing button state and index.
 * @retval None
 */
void System_Alarm_View_Mode_Handle (BUTTON_DATA *button)
{ 
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  // Handle button actions in alarm view mode
  switch (button->index) 
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	799b      	ldrb	r3, [r3, #6]
 800196c:	2b04      	cmp	r3, #4
 800196e:	d853      	bhi.n	8001a18 <System_Alarm_View_Mode_Handle+0xb8>
 8001970:	a201      	add	r2, pc, #4	@ (adr r2, 8001978 <System_Alarm_View_Mode_Handle+0x18>)
 8001972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001976:	bf00      	nop
 8001978:	0800198d 	.word	0x0800198d
 800197c:	080019d9 	.word	0x080019d9
 8001980:	080019e9 	.word	0x080019e9
 8001984:	080019f9 	.word	0x080019f9
 8001988:	08001a09 	.word	0x08001a09
  {
    // Button 0: If pressed, cycle through the time setup fields; if held, set the mode to default
    case 0:
      // If pressed, cycle through the time setup fields
      if (button->press_flag)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	7b5b      	ldrb	r3, [r3, #13]
 8001990:	b2db      	uxtb	r3, r3
 8001992:	2b00      	cmp	r3, #0
 8001994:	d00c      	beq.n	80019b0 <System_Alarm_View_Mode_Handle+0x50>
      {
        system_state.mode = (system_state.mode < (SYSTEM_MODE_NUM - 1)) ? (system_state.mode + 1) : 0;
 8001996:	4b28      	ldr	r3, [pc, #160]	@ (8001a38 <System_Alarm_View_Mode_Handle+0xd8>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	2b04      	cmp	r3, #4
 800199c:	d804      	bhi.n	80019a8 <System_Alarm_View_Mode_Handle+0x48>
 800199e:	4b26      	ldr	r3, [pc, #152]	@ (8001a38 <System_Alarm_View_Mode_Handle+0xd8>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	3301      	adds	r3, #1
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	e000      	b.n	80019aa <System_Alarm_View_Mode_Handle+0x4a>
 80019a8:	2300      	movs	r3, #0
 80019aa:	4a23      	ldr	r2, [pc, #140]	@ (8001a38 <System_Alarm_View_Mode_Handle+0xd8>)
 80019ac:	7013      	strb	r3, [r2, #0]
      else if (button->hold_flag && !button->latch)
      {
        system_state.mode = DEFAULT_MODE; 
        button->latch = true;
      }
      break;
 80019ae:	e035      	b.n	8001a1c <System_Alarm_View_Mode_Handle+0xbc>
      else if (button->hold_flag && !button->latch)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	7b9b      	ldrb	r3, [r3, #14]
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d030      	beq.n	8001a1c <System_Alarm_View_Mode_Handle+0xbc>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	7bdb      	ldrb	r3, [r3, #15]
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	f083 0301 	eor.w	r3, r3, #1
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d028      	beq.n	8001a1c <System_Alarm_View_Mode_Handle+0xbc>
        system_state.mode = DEFAULT_MODE; 
 80019ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001a38 <System_Alarm_View_Mode_Handle+0xd8>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	701a      	strb	r2, [r3, #0]
        button->latch = true;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2201      	movs	r2, #1
 80019d4:	73da      	strb	r2, [r3, #15]
      break;
 80019d6:	e021      	b.n	8001a1c <System_Alarm_View_Mode_Handle+0xbc>

    case 1:
      if      (button->press_flag)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	7b5b      	ldrb	r3, [r3, #13]
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d11e      	bne.n	8001a20 <System_Alarm_View_Mode_Handle+0xc0>
      {

      }
      else if (button->hold_flag)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	7b9b      	ldrb	r3, [r3, #14]
      {

      }
      break;
 80019e6:	e01b      	b.n	8001a20 <System_Alarm_View_Mode_Handle+0xc0>

    case 2:
      if      (button->press_flag)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	7b5b      	ldrb	r3, [r3, #13]
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d118      	bne.n	8001a24 <System_Alarm_View_Mode_Handle+0xc4>
      {

      }
      else if (button->hold_flag)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	7b9b      	ldrb	r3, [r3, #14]
      {

      }
      break;
 80019f6:	e015      	b.n	8001a24 <System_Alarm_View_Mode_Handle+0xc4>
    
    case 3:
      if      (button->press_flag)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	7b5b      	ldrb	r3, [r3, #13]
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d112      	bne.n	8001a28 <System_Alarm_View_Mode_Handle+0xc8>
      {

      }
      else if (button->hold_flag)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	7b9b      	ldrb	r3, [r3, #14]
      {

      }
      break;
 8001a06:	e00f      	b.n	8001a28 <System_Alarm_View_Mode_Handle+0xc8>

    case 4: 
      if      (button->press_flag)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	7b5b      	ldrb	r3, [r3, #13]
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d10c      	bne.n	8001a2c <System_Alarm_View_Mode_Handle+0xcc>
      {

      }
      else if (button->hold_flag)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	7b9b      	ldrb	r3, [r3, #14]
      {

      }
      break;
 8001a16:	e009      	b.n	8001a2c <System_Alarm_View_Mode_Handle+0xcc>

    default: 
      break;
 8001a18:	bf00      	nop
 8001a1a:	e008      	b.n	8001a2e <System_Alarm_View_Mode_Handle+0xce>
      break;
 8001a1c:	bf00      	nop
 8001a1e:	e006      	b.n	8001a2e <System_Alarm_View_Mode_Handle+0xce>
      break;
 8001a20:	bf00      	nop
 8001a22:	e004      	b.n	8001a2e <System_Alarm_View_Mode_Handle+0xce>
      break;
 8001a24:	bf00      	nop
 8001a26:	e002      	b.n	8001a2e <System_Alarm_View_Mode_Handle+0xce>
      break;
 8001a28:	bf00      	nop
 8001a2a:	e000      	b.n	8001a2e <System_Alarm_View_Mode_Handle+0xce>
      break;
 8001a2c:	bf00      	nop
  }
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr
 8001a38:	200000fc 	.word	0x200000fc

08001a3c <System_Alarm_Active_Mode_Handle>:
 * @brief  Handles the alarm active mode based on button actions.
 * @param  button: Pointer to the BUTTON structure containing button state and index.
 * @retval None
 */
void System_Alarm_Active_Mode_Handle (BUTTON_DATA *button)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  // Handle button actions in alarm active mode
  switch (button->index) 
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	799b      	ldrb	r3, [r3, #6]
 8001a48:	2b04      	cmp	r3, #4
 8001a4a:	d853      	bhi.n	8001af4 <System_Alarm_Active_Mode_Handle+0xb8>
 8001a4c:	a201      	add	r2, pc, #4	@ (adr r2, 8001a54 <System_Alarm_Active_Mode_Handle+0x18>)
 8001a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a52:	bf00      	nop
 8001a54:	08001a69 	.word	0x08001a69
 8001a58:	08001ab5 	.word	0x08001ab5
 8001a5c:	08001ac5 	.word	0x08001ac5
 8001a60:	08001ad5 	.word	0x08001ad5
 8001a64:	08001ae5 	.word	0x08001ae5
  {
    // Button 0: If pressed, cycle through the time setup fields; if held, set the mode to default
    case 0:
      // If pressed, cycle through the time setup fields
      if (button->press_flag)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	7b5b      	ldrb	r3, [r3, #13]
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d00c      	beq.n	8001a8c <System_Alarm_Active_Mode_Handle+0x50>
      {
        system_state.mode = (system_state.mode < (SYSTEM_MODE_NUM - 1)) ? (system_state.mode + 1) : 0;
 8001a72:	4b28      	ldr	r3, [pc, #160]	@ (8001b14 <System_Alarm_Active_Mode_Handle+0xd8>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	2b04      	cmp	r3, #4
 8001a78:	d804      	bhi.n	8001a84 <System_Alarm_Active_Mode_Handle+0x48>
 8001a7a:	4b26      	ldr	r3, [pc, #152]	@ (8001b14 <System_Alarm_Active_Mode_Handle+0xd8>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	e000      	b.n	8001a86 <System_Alarm_Active_Mode_Handle+0x4a>
 8001a84:	2300      	movs	r3, #0
 8001a86:	4a23      	ldr	r2, [pc, #140]	@ (8001b14 <System_Alarm_Active_Mode_Handle+0xd8>)
 8001a88:	7013      	strb	r3, [r2, #0]
      else if (button->hold_flag && !button->latch)
      {
        system_state.mode = DEFAULT_MODE; 
        button->latch = true;
      }
      break;
 8001a8a:	e035      	b.n	8001af8 <System_Alarm_Active_Mode_Handle+0xbc>
      else if (button->hold_flag && !button->latch)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	7b9b      	ldrb	r3, [r3, #14]
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d030      	beq.n	8001af8 <System_Alarm_Active_Mode_Handle+0xbc>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	7bdb      	ldrb	r3, [r3, #15]
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	f083 0301 	eor.w	r3, r3, #1
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d028      	beq.n	8001af8 <System_Alarm_Active_Mode_Handle+0xbc>
        system_state.mode = DEFAULT_MODE; 
 8001aa6:	4b1b      	ldr	r3, [pc, #108]	@ (8001b14 <System_Alarm_Active_Mode_Handle+0xd8>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	701a      	strb	r2, [r3, #0]
        button->latch = true;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	73da      	strb	r2, [r3, #15]
      break;
 8001ab2:	e021      	b.n	8001af8 <System_Alarm_Active_Mode_Handle+0xbc>

    case 1:
      if      (button->press_flag)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	7b5b      	ldrb	r3, [r3, #13]
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d11e      	bne.n	8001afc <System_Alarm_Active_Mode_Handle+0xc0>
      {

      }
      else if (button->hold_flag)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	7b9b      	ldrb	r3, [r3, #14]
      {

      }
      break;
 8001ac2:	e01b      	b.n	8001afc <System_Alarm_Active_Mode_Handle+0xc0>

    case 2:
      if      (button->press_flag)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	7b5b      	ldrb	r3, [r3, #13]
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d118      	bne.n	8001b00 <System_Alarm_Active_Mode_Handle+0xc4>
      {

      }
      else if (button->hold_flag)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	7b9b      	ldrb	r3, [r3, #14]
      {

      }
      break;
 8001ad2:	e015      	b.n	8001b00 <System_Alarm_Active_Mode_Handle+0xc4>
    
    case 3:
      if      (button->press_flag)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	7b5b      	ldrb	r3, [r3, #13]
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d112      	bne.n	8001b04 <System_Alarm_Active_Mode_Handle+0xc8>
      {

      }
      else if (button->hold_flag)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	7b9b      	ldrb	r3, [r3, #14]
      {

      }
      break;
 8001ae2:	e00f      	b.n	8001b04 <System_Alarm_Active_Mode_Handle+0xc8>

    case 4: 
      if      (button->press_flag)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	7b5b      	ldrb	r3, [r3, #13]
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d10c      	bne.n	8001b08 <System_Alarm_Active_Mode_Handle+0xcc>
      {

      }
      else if (button->hold_flag)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	7b9b      	ldrb	r3, [r3, #14]
      {

      }
      break;
 8001af2:	e009      	b.n	8001b08 <System_Alarm_Active_Mode_Handle+0xcc>

    default: 
      break;
 8001af4:	bf00      	nop
 8001af6:	e008      	b.n	8001b0a <System_Alarm_Active_Mode_Handle+0xce>
      break;
 8001af8:	bf00      	nop
 8001afa:	e006      	b.n	8001b0a <System_Alarm_Active_Mode_Handle+0xce>
      break;
 8001afc:	bf00      	nop
 8001afe:	e004      	b.n	8001b0a <System_Alarm_Active_Mode_Handle+0xce>
      break;
 8001b00:	bf00      	nop
 8001b02:	e002      	b.n	8001b0a <System_Alarm_Active_Mode_Handle+0xce>
      break;
 8001b04:	bf00      	nop
 8001b06:	e000      	b.n	8001b0a <System_Alarm_Active_Mode_Handle+0xce>
      break;
 8001b08:	bf00      	nop
  }
}
 8001b0a:	bf00      	nop
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bc80      	pop	{r7}
 8001b12:	4770      	bx	lr
 8001b14:	200000fc 	.word	0x200000fc

08001b18 <System_Options_Mode_Handle>:
 * @brief  Handles the system options mode based on button actions.
 * @param  button: Pointer to the BUTTON structure containing button state and index.
 * @retval None
 */
void System_Options_Mode_Handle (BUTTON_DATA *button)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  // Handle button actions in system options mode
  switch (button->index) 
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	799b      	ldrb	r3, [r3, #6]
 8001b24:	2b04      	cmp	r3, #4
 8001b26:	d848      	bhi.n	8001bba <System_Options_Mode_Handle+0xa2>
 8001b28:	a201      	add	r2, pc, #4	@ (adr r2, 8001b30 <System_Options_Mode_Handle+0x18>)
 8001b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b2e:	bf00      	nop
 8001b30:	08001b45 	.word	0x08001b45
 8001b34:	08001b7b 	.word	0x08001b7b
 8001b38:	08001b8b 	.word	0x08001b8b
 8001b3c:	08001b9b 	.word	0x08001b9b
 8001b40:	08001bab 	.word	0x08001bab
  {
    // Button 0: If pressed, cycle through the time setup fields; if held, set the mode to default
    case 0:
      // If pressed, cycle through the time setup fields
      if      (button->press_flag)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	7b5b      	ldrb	r3, [r3, #13]
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d00c      	beq.n	8001b68 <System_Options_Mode_Handle+0x50>
      {
        system_state.mode = (system_state.mode < (SYSTEM_MODE_NUM - 1)) ? (system_state.mode + 1) : 0;
 8001b4e:	4b23      	ldr	r3, [pc, #140]	@ (8001bdc <System_Options_Mode_Handle+0xc4>)
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	2b04      	cmp	r3, #4
 8001b54:	d804      	bhi.n	8001b60 <System_Options_Mode_Handle+0x48>
 8001b56:	4b21      	ldr	r3, [pc, #132]	@ (8001bdc <System_Options_Mode_Handle+0xc4>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	e000      	b.n	8001b62 <System_Options_Mode_Handle+0x4a>
 8001b60:	2300      	movs	r3, #0
 8001b62:	4a1e      	ldr	r2, [pc, #120]	@ (8001bdc <System_Options_Mode_Handle+0xc4>)
 8001b64:	7013      	strb	r3, [r2, #0]
      // If held, set the mode to default
      else if (button->hold_flag)
      {
        system_state.mode = DEFAULT_MODE;
      }
      break;
 8001b66:	e02a      	b.n	8001bbe <System_Options_Mode_Handle+0xa6>
      else if (button->hold_flag)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	7b9b      	ldrb	r3, [r3, #14]
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d025      	beq.n	8001bbe <System_Options_Mode_Handle+0xa6>
        system_state.mode = DEFAULT_MODE;
 8001b72:	4b1a      	ldr	r3, [pc, #104]	@ (8001bdc <System_Options_Mode_Handle+0xc4>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	701a      	strb	r2, [r3, #0]
      break;
 8001b78:	e021      	b.n	8001bbe <System_Options_Mode_Handle+0xa6>

    case 1:
      if      (button->press_flag)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	7b5b      	ldrb	r3, [r3, #13]
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d11e      	bne.n	8001bc2 <System_Options_Mode_Handle+0xaa>
      {

      }
      else if (button->hold_flag)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	7b9b      	ldrb	r3, [r3, #14]
      {

      }
      break;
 8001b88:	e01b      	b.n	8001bc2 <System_Options_Mode_Handle+0xaa>

    case 2:
      if      (button->press_flag)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	7b5b      	ldrb	r3, [r3, #13]
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d118      	bne.n	8001bc6 <System_Options_Mode_Handle+0xae>
      {

      }
      else if (button->hold_flag)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	7b9b      	ldrb	r3, [r3, #14]
      {

      }
      break;
 8001b98:	e015      	b.n	8001bc6 <System_Options_Mode_Handle+0xae>
    
    case 3:
      if      (button->press_flag)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	7b5b      	ldrb	r3, [r3, #13]
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d112      	bne.n	8001bca <System_Options_Mode_Handle+0xb2>
      {

      }
      else if (button->hold_flag)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	7b9b      	ldrb	r3, [r3, #14]
      {

      }
      break;
 8001ba8:	e00f      	b.n	8001bca <System_Options_Mode_Handle+0xb2>

    case 4: 
      if      (button->press_flag)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	7b5b      	ldrb	r3, [r3, #13]
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d10c      	bne.n	8001bce <System_Options_Mode_Handle+0xb6>
      {

      }
      else if (button->hold_flag)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	7b9b      	ldrb	r3, [r3, #14]
      {

      }
      break;
 8001bb8:	e009      	b.n	8001bce <System_Options_Mode_Handle+0xb6>

    default: 
      break;
 8001bba:	bf00      	nop
 8001bbc:	e008      	b.n	8001bd0 <System_Options_Mode_Handle+0xb8>
      break;
 8001bbe:	bf00      	nop
 8001bc0:	e006      	b.n	8001bd0 <System_Options_Mode_Handle+0xb8>
      break;
 8001bc2:	bf00      	nop
 8001bc4:	e004      	b.n	8001bd0 <System_Options_Mode_Handle+0xb8>
      break;
 8001bc6:	bf00      	nop
 8001bc8:	e002      	b.n	8001bd0 <System_Options_Mode_Handle+0xb8>
      break;
 8001bca:	bf00      	nop
 8001bcc:	e000      	b.n	8001bd0 <System_Options_Mode_Handle+0xb8>
      break;
 8001bce:	bf00      	nop
  }
}
 8001bd0:	bf00      	nop
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc80      	pop	{r7}
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	200000fc 	.word	0x200000fc

08001be0 <HAL_GPIO_EXTI_Callback>:
  * @brief  Callback function to handle GPIO interrupts.
  * @param  GPIO_Pin: The pin number of the GPIO that triggered the interrupt.
  * @retval None
*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8001bea:	88fb      	ldrh	r3, [r7, #6]
 8001bec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001bf0:	d02a      	beq.n	8001c48 <HAL_GPIO_EXTI_Callback+0x68>
 8001bf2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001bf6:	dc2f      	bgt.n	8001c58 <HAL_GPIO_EXTI_Callback+0x78>
 8001bf8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001bfc:	d020      	beq.n	8001c40 <HAL_GPIO_EXTI_Callback+0x60>
 8001bfe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001c02:	dc29      	bgt.n	8001c58 <HAL_GPIO_EXTI_Callback+0x78>
 8001c04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c08:	d016      	beq.n	8001c38 <HAL_GPIO_EXTI_Callback+0x58>
 8001c0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c0e:	dc23      	bgt.n	8001c58 <HAL_GPIO_EXTI_Callback+0x78>
 8001c10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c14:	d00c      	beq.n	8001c30 <HAL_GPIO_EXTI_Callback+0x50>
 8001c16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c1a:	dc1d      	bgt.n	8001c58 <HAL_GPIO_EXTI_Callback+0x78>
 8001c1c:	2b20      	cmp	r3, #32
 8001c1e:	d003      	beq.n	8001c28 <HAL_GPIO_EXTI_Callback+0x48>
 8001c20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c24:	d014      	beq.n	8001c50 <HAL_GPIO_EXTI_Callback+0x70>
      button4.int_flag = true;
      break;  

    default:
      // Handle other GPIO interrupts if necessary
      break;
 8001c26:	e017      	b.n	8001c58 <HAL_GPIO_EXTI_Callback+0x78>
      rtc_int_flag = true;
 8001c28:	4b0e      	ldr	r3, [pc, #56]	@ (8001c64 <HAL_GPIO_EXTI_Callback+0x84>)
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	701a      	strb	r2, [r3, #0]
      break;
 8001c2e:	e014      	b.n	8001c5a <HAL_GPIO_EXTI_Callback+0x7a>
      button0.int_flag = true;
 8001c30:	4b0d      	ldr	r3, [pc, #52]	@ (8001c68 <HAL_GPIO_EXTI_Callback+0x88>)
 8001c32:	2201      	movs	r2, #1
 8001c34:	731a      	strb	r2, [r3, #12]
      break;
 8001c36:	e010      	b.n	8001c5a <HAL_GPIO_EXTI_Callback+0x7a>
      button1.int_flag = true;
 8001c38:	4b0c      	ldr	r3, [pc, #48]	@ (8001c6c <HAL_GPIO_EXTI_Callback+0x8c>)
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	731a      	strb	r2, [r3, #12]
      break;
 8001c3e:	e00c      	b.n	8001c5a <HAL_GPIO_EXTI_Callback+0x7a>
      button2.int_flag = true;
 8001c40:	4b0b      	ldr	r3, [pc, #44]	@ (8001c70 <HAL_GPIO_EXTI_Callback+0x90>)
 8001c42:	2201      	movs	r2, #1
 8001c44:	731a      	strb	r2, [r3, #12]
      break;
 8001c46:	e008      	b.n	8001c5a <HAL_GPIO_EXTI_Callback+0x7a>
      button3.int_flag = true;
 8001c48:	4b0a      	ldr	r3, [pc, #40]	@ (8001c74 <HAL_GPIO_EXTI_Callback+0x94>)
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	731a      	strb	r2, [r3, #12]
      break;  
 8001c4e:	e004      	b.n	8001c5a <HAL_GPIO_EXTI_Callback+0x7a>
      button4.int_flag = true;
 8001c50:	4b09      	ldr	r3, [pc, #36]	@ (8001c78 <HAL_GPIO_EXTI_Callback+0x98>)
 8001c52:	2201      	movs	r2, #1
 8001c54:	731a      	strb	r2, [r3, #12]
      break;  
 8001c56:	e000      	b.n	8001c5a <HAL_GPIO_EXTI_Callback+0x7a>
      break;
 8001c58:	bf00      	nop
  }
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr
 8001c64:	20000151 	.word	0x20000151
 8001c68:	20000000 	.word	0x20000000
 8001c6c:	20000010 	.word	0x20000010
 8001c70:	20000020 	.word	0x20000020
 8001c74:	20000030 	.word	0x20000030
 8001c78:	20000040 	.word	0x20000040

08001c7c <HAL_UART_RxCpltCallback>:
  * @brief  Callback function to handle UART interrupts.
  * @param  huart: Pointer to the UART handle.
  * @retval None
*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  // Verify the UART instance to ensure the callback is for USART1
  // If the UART instance is USART1, store the received data into the uart_rx_data array
  if(huart->Instance == USART1)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a09      	ldr	r2, [pc, #36]	@ (8001cb0 <HAL_UART_RxCpltCallback+0x34>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d10a      	bne.n	8001ca4 <HAL_UART_RxCpltCallback+0x28>
  {
    // Store the received data into the uart_rx_data array
    uart_rx_hour = uart_rx_data[0];
 8001c8e:	4b09      	ldr	r3, [pc, #36]	@ (8001cb4 <HAL_UART_RxCpltCallback+0x38>)
 8001c90:	781a      	ldrb	r2, [r3, #0]
 8001c92:	4b09      	ldr	r3, [pc, #36]	@ (8001cb8 <HAL_UART_RxCpltCallback+0x3c>)
 8001c94:	701a      	strb	r2, [r3, #0]
    uart_rx_minute = uart_rx_data[1];
 8001c96:	4b07      	ldr	r3, [pc, #28]	@ (8001cb4 <HAL_UART_RxCpltCallback+0x38>)
 8001c98:	785a      	ldrb	r2, [r3, #1]
 8001c9a:	4b08      	ldr	r3, [pc, #32]	@ (8001cbc <HAL_UART_RxCpltCallback+0x40>)
 8001c9c:	701a      	strb	r2, [r3, #0]

    // Set the UART receive flag
    uart_rx_flag = 1;
 8001c9e:	4b08      	ldr	r3, [pc, #32]	@ (8001cc0 <HAL_UART_RxCpltCallback+0x44>)
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	701a      	strb	r2, [r3, #0]
  }
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bc80      	pop	{r7}
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	40013800 	.word	0x40013800
 8001cb4:	20000160 	.word	0x20000160
 8001cb8:	20000162 	.word	0x20000162
 8001cbc:	20000163 	.word	0x20000163
 8001cc0:	2000015e 	.word	0x2000015e

08001cc4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Callback function to handle ADC conversion complete interrupts.
  * @param  hadc: Pointer to the ADC handle.
  * @retval None
*/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
	// Verify the ADC instance to ensure the callback is for ADC1
  // If the ADC instance is ADC1, get the ADC value and calculate the battery percentage
  if (hadc == &hadc1)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4a10      	ldr	r2, [pc, #64]	@ (8001d10 <HAL_ADC_ConvCpltCallback+0x4c>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d119      	bne.n	8001d08 <HAL_ADC_ConvCpltCallback+0x44>
	{
    // Get the ADC value
    adc_data = HAL_ADC_GetValue(&hadc1);
 8001cd4:	480e      	ldr	r0, [pc, #56]	@ (8001d10 <HAL_ADC_ConvCpltCallback+0x4c>)
 8001cd6:	f000 fb7b 	bl	80023d0 <HAL_ADC_GetValue>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	b29a      	uxth	r2, r3
 8001cde:	4b0d      	ldr	r3, [pc, #52]	@ (8001d14 <HAL_ADC_ConvCpltCallback+0x50>)
 8001ce0:	801a      	strh	r2, [r3, #0]

    // Set the ADC valid flag
    adc_valid_flag = 1;
 8001ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8001d18 <HAL_ADC_ConvCpltCallback+0x54>)
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	701a      	strb	r2, [r3, #0]

    // Calculate the battery percentage
    battery_percentage = adc_data * 100 / 4095;
 8001ce8:	4b0a      	ldr	r3, [pc, #40]	@ (8001d14 <HAL_ADC_ConvCpltCallback+0x50>)
 8001cea:	881b      	ldrh	r3, [r3, #0]
 8001cec:	461a      	mov	r2, r3
 8001cee:	2364      	movs	r3, #100	@ 0x64
 8001cf0:	fb02 f303 	mul.w	r3, r2, r3
 8001cf4:	4a09      	ldr	r2, [pc, #36]	@ (8001d1c <HAL_ADC_ConvCpltCallback+0x58>)
 8001cf6:	fb82 1203 	smull	r1, r2, r2, r3
 8001cfa:	441a      	add	r2, r3
 8001cfc:	12d2      	asrs	r2, r2, #11
 8001cfe:	17db      	asrs	r3, r3, #31
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	4b06      	ldr	r3, [pc, #24]	@ (8001d20 <HAL_ADC_ConvCpltCallback+0x5c>)
 8001d06:	801a      	strh	r2, [r3, #0]
	}
}
 8001d08:	bf00      	nop
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	20000078 	.word	0x20000078
 8001d14:	2000015a 	.word	0x2000015a
 8001d18:	20000159 	.word	0x20000159
 8001d1c:	80080081 	.word	0x80080081
 8001d20:	2000015c 	.word	0x2000015c

08001d24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d28:	b672      	cpsid	i
}
 8001d2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d2c:	bf00      	nop
 8001d2e:	e7fd      	b.n	8001d2c <Error_Handler+0x8>

08001d30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d36:	4b15      	ldr	r3, [pc, #84]	@ (8001d8c <HAL_MspInit+0x5c>)
 8001d38:	699b      	ldr	r3, [r3, #24]
 8001d3a:	4a14      	ldr	r2, [pc, #80]	@ (8001d8c <HAL_MspInit+0x5c>)
 8001d3c:	f043 0301 	orr.w	r3, r3, #1
 8001d40:	6193      	str	r3, [r2, #24]
 8001d42:	4b12      	ldr	r3, [pc, #72]	@ (8001d8c <HAL_MspInit+0x5c>)
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	60bb      	str	r3, [r7, #8]
 8001d4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d4e:	4b0f      	ldr	r3, [pc, #60]	@ (8001d8c <HAL_MspInit+0x5c>)
 8001d50:	69db      	ldr	r3, [r3, #28]
 8001d52:	4a0e      	ldr	r2, [pc, #56]	@ (8001d8c <HAL_MspInit+0x5c>)
 8001d54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d58:	61d3      	str	r3, [r2, #28]
 8001d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d8c <HAL_MspInit+0x5c>)
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d62:	607b      	str	r3, [r7, #4]
 8001d64:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d66:	4b0a      	ldr	r3, [pc, #40]	@ (8001d90 <HAL_MspInit+0x60>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	60fb      	str	r3, [r7, #12]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	4a04      	ldr	r2, [pc, #16]	@ (8001d90 <HAL_MspInit+0x60>)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d82:	bf00      	nop
 8001d84:	3714      	adds	r7, #20
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bc80      	pop	{r7}
 8001d8a:	4770      	bx	lr
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	40010000 	.word	0x40010000

08001d94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d98:	bf00      	nop
 8001d9a:	e7fd      	b.n	8001d98 <NMI_Handler+0x4>

08001d9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001da0:	bf00      	nop
 8001da2:	e7fd      	b.n	8001da0 <HardFault_Handler+0x4>

08001da4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001da8:	bf00      	nop
 8001daa:	e7fd      	b.n	8001da8 <MemManage_Handler+0x4>

08001dac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001db0:	bf00      	nop
 8001db2:	e7fd      	b.n	8001db0 <BusFault_Handler+0x4>

08001db4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001db8:	bf00      	nop
 8001dba:	e7fd      	b.n	8001db8 <UsageFault_Handler+0x4>

08001dbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dc0:	bf00      	nop
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bc80      	pop	{r7}
 8001dc6:	4770      	bx	lr

08001dc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dcc:	bf00      	nop
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bc80      	pop	{r7}
 8001dd2:	4770      	bx	lr

08001dd4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dd8:	bf00      	nop
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bc80      	pop	{r7}
 8001dde:	4770      	bx	lr

08001de0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001de4:	f000 f926 	bl	8002034 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001de8:	bf00      	nop
 8001dea:	bd80      	pop	{r7, pc}

08001dec <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001df0:	4802      	ldr	r0, [pc, #8]	@ (8001dfc <ADC1_2_IRQHandler+0x10>)
 8001df2:	f000 faf9 	bl	80023e8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001df6:	bf00      	nop
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	20000078 	.word	0x20000078

08001e00 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RTC_IN5_Pin);
 8001e04:	2020      	movs	r0, #32
 8001e06:	f001 f8af 	bl	8002f68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON4_IN8_Pin);
 8001e0a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001e0e:	f001 f8ab 	bl	8002f68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
	...

08001e18 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e1c:	4802      	ldr	r0, [pc, #8]	@ (8001e28 <USART1_IRQHandler+0x10>)
 8001e1e:	f002 fe5d 	bl	8004adc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e22:	bf00      	nop
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	20000164 	.word	0x20000164

08001e2c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON0_IN12_Pin);
 8001e30:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001e34:	f001 f898 	bl	8002f68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON1_IN13_Pin);
 8001e38:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001e3c:	f001 f894 	bl	8002f68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON2_IN14_Pin);
 8001e40:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001e44:	f001 f890 	bl	8002f68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON3_IN15_Pin);
 8001e48:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001e4c:	f001 f88c 	bl	8002f68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e50:	bf00      	nop
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e58:	bf00      	nop
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr

08001e60 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e64:	4b11      	ldr	r3, [pc, #68]	@ (8001eac <MX_USART1_UART_Init+0x4c>)
 8001e66:	4a12      	ldr	r2, [pc, #72]	@ (8001eb0 <MX_USART1_UART_Init+0x50>)
 8001e68:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001e6a:	4b10      	ldr	r3, [pc, #64]	@ (8001eac <MX_USART1_UART_Init+0x4c>)
 8001e6c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001e70:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e72:	4b0e      	ldr	r3, [pc, #56]	@ (8001eac <MX_USART1_UART_Init+0x4c>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e78:	4b0c      	ldr	r3, [pc, #48]	@ (8001eac <MX_USART1_UART_Init+0x4c>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001eac <MX_USART1_UART_Init+0x4c>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e84:	4b09      	ldr	r3, [pc, #36]	@ (8001eac <MX_USART1_UART_Init+0x4c>)
 8001e86:	220c      	movs	r2, #12
 8001e88:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e8a:	4b08      	ldr	r3, [pc, #32]	@ (8001eac <MX_USART1_UART_Init+0x4c>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e90:	4b06      	ldr	r3, [pc, #24]	@ (8001eac <MX_USART1_UART_Init+0x4c>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e96:	4805      	ldr	r0, [pc, #20]	@ (8001eac <MX_USART1_UART_Init+0x4c>)
 8001e98:	f002 fdaa 	bl	80049f0 <HAL_UART_Init>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001ea2:	f7ff ff3f 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ea6:	bf00      	nop
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20000164 	.word	0x20000164
 8001eb0:	40013800 	.word	0x40013800

08001eb4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b088      	sub	sp, #32
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ebc:	f107 0310 	add.w	r3, r7, #16
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	605a      	str	r2, [r3, #4]
 8001ec6:	609a      	str	r2, [r3, #8]
 8001ec8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a20      	ldr	r2, [pc, #128]	@ (8001f50 <HAL_UART_MspInit+0x9c>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d139      	bne.n	8001f48 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ed4:	4b1f      	ldr	r3, [pc, #124]	@ (8001f54 <HAL_UART_MspInit+0xa0>)
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	4a1e      	ldr	r2, [pc, #120]	@ (8001f54 <HAL_UART_MspInit+0xa0>)
 8001eda:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ede:	6193      	str	r3, [r2, #24]
 8001ee0:	4b1c      	ldr	r3, [pc, #112]	@ (8001f54 <HAL_UART_MspInit+0xa0>)
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ee8:	60fb      	str	r3, [r7, #12]
 8001eea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eec:	4b19      	ldr	r3, [pc, #100]	@ (8001f54 <HAL_UART_MspInit+0xa0>)
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	4a18      	ldr	r2, [pc, #96]	@ (8001f54 <HAL_UART_MspInit+0xa0>)
 8001ef2:	f043 0304 	orr.w	r3, r3, #4
 8001ef6:	6193      	str	r3, [r2, #24]
 8001ef8:	4b16      	ldr	r3, [pc, #88]	@ (8001f54 <HAL_UART_MspInit+0xa0>)
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	f003 0304 	and.w	r3, r3, #4
 8001f00:	60bb      	str	r3, [r7, #8]
 8001f02:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f04:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f08:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f12:	f107 0310 	add.w	r3, r7, #16
 8001f16:	4619      	mov	r1, r3
 8001f18:	480f      	ldr	r0, [pc, #60]	@ (8001f58 <HAL_UART_MspInit+0xa4>)
 8001f1a:	f000 fe89 	bl	8002c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f24:	2300      	movs	r3, #0
 8001f26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f2c:	f107 0310 	add.w	r3, r7, #16
 8001f30:	4619      	mov	r1, r3
 8001f32:	4809      	ldr	r0, [pc, #36]	@ (8001f58 <HAL_UART_MspInit+0xa4>)
 8001f34:	f000 fe7c 	bl	8002c30 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001f38:	2200      	movs	r2, #0
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	2025      	movs	r0, #37	@ 0x25
 8001f3e:	f000 fd8e 	bl	8002a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001f42:	2025      	movs	r0, #37	@ 0x25
 8001f44:	f000 fda7 	bl	8002a96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001f48:	bf00      	nop
 8001f4a:	3720      	adds	r7, #32
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40013800 	.word	0x40013800
 8001f54:	40021000 	.word	0x40021000
 8001f58:	40010800 	.word	0x40010800

08001f5c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f5c:	f7ff ff7a 	bl	8001e54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f60:	480b      	ldr	r0, [pc, #44]	@ (8001f90 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001f62:	490c      	ldr	r1, [pc, #48]	@ (8001f94 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001f64:	4a0c      	ldr	r2, [pc, #48]	@ (8001f98 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001f66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f68:	e002      	b.n	8001f70 <LoopCopyDataInit>

08001f6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f6e:	3304      	adds	r3, #4

08001f70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f74:	d3f9      	bcc.n	8001f6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f76:	4a09      	ldr	r2, [pc, #36]	@ (8001f9c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001f78:	4c09      	ldr	r4, [pc, #36]	@ (8001fa0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f7c:	e001      	b.n	8001f82 <LoopFillZerobss>

08001f7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f80:	3204      	adds	r2, #4

08001f82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f84:	d3fb      	bcc.n	8001f7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f86:	f003 fac3 	bl	8005510 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f8a:	f7fe fa3f 	bl	800040c <main>
  bx lr
 8001f8e:	4770      	bx	lr
  ldr r0, =_sdata
 8001f90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f94:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001f98:	080055b4 	.word	0x080055b4
  ldr r2, =_sbss
 8001f9c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001fa0:	200001b0 	.word	0x200001b0

08001fa4 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fa4:	e7fe      	b.n	8001fa4 <CAN1_RX1_IRQHandler>
	...

08001fa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fac:	4b08      	ldr	r3, [pc, #32]	@ (8001fd0 <HAL_Init+0x28>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a07      	ldr	r2, [pc, #28]	@ (8001fd0 <HAL_Init+0x28>)
 8001fb2:	f043 0310 	orr.w	r3, r3, #16
 8001fb6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fb8:	2003      	movs	r0, #3
 8001fba:	f000 fd45 	bl	8002a48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fbe:	200f      	movs	r0, #15
 8001fc0:	f000 f808 	bl	8001fd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fc4:	f7ff feb4 	bl	8001d30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	40022000 	.word	0x40022000

08001fd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fdc:	4b12      	ldr	r3, [pc, #72]	@ (8002028 <HAL_InitTick+0x54>)
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	4b12      	ldr	r3, [pc, #72]	@ (800202c <HAL_InitTick+0x58>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fea:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f000 fd5d 	bl	8002ab2 <HAL_SYSTICK_Config>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e00e      	b.n	8002020 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2b0f      	cmp	r3, #15
 8002006:	d80a      	bhi.n	800201e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002008:	2200      	movs	r2, #0
 800200a:	6879      	ldr	r1, [r7, #4]
 800200c:	f04f 30ff 	mov.w	r0, #4294967295
 8002010:	f000 fd25 	bl	8002a5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002014:	4a06      	ldr	r2, [pc, #24]	@ (8002030 <HAL_InitTick+0x5c>)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800201a:	2300      	movs	r3, #0
 800201c:	e000      	b.n	8002020 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
}
 8002020:	4618      	mov	r0, r3
 8002022:	3708      	adds	r7, #8
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	20000050 	.word	0x20000050
 800202c:	20000058 	.word	0x20000058
 8002030:	20000054 	.word	0x20000054

08002034 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002038:	4b05      	ldr	r3, [pc, #20]	@ (8002050 <HAL_IncTick+0x1c>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	461a      	mov	r2, r3
 800203e:	4b05      	ldr	r3, [pc, #20]	@ (8002054 <HAL_IncTick+0x20>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4413      	add	r3, r2
 8002044:	4a03      	ldr	r2, [pc, #12]	@ (8002054 <HAL_IncTick+0x20>)
 8002046:	6013      	str	r3, [r2, #0]
}
 8002048:	bf00      	nop
 800204a:	46bd      	mov	sp, r7
 800204c:	bc80      	pop	{r7}
 800204e:	4770      	bx	lr
 8002050:	20000058 	.word	0x20000058
 8002054:	200001ac 	.word	0x200001ac

08002058 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  return uwTick;
 800205c:	4b02      	ldr	r3, [pc, #8]	@ (8002068 <HAL_GetTick+0x10>)
 800205e:	681b      	ldr	r3, [r3, #0]
}
 8002060:	4618      	mov	r0, r3
 8002062:	46bd      	mov	sp, r7
 8002064:	bc80      	pop	{r7}
 8002066:	4770      	bx	lr
 8002068:	200001ac 	.word	0x200001ac

0800206c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002074:	f7ff fff0 	bl	8002058 <HAL_GetTick>
 8002078:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002084:	d005      	beq.n	8002092 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002086:	4b0a      	ldr	r3, [pc, #40]	@ (80020b0 <HAL_Delay+0x44>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	461a      	mov	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	4413      	add	r3, r2
 8002090:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002092:	bf00      	nop
 8002094:	f7ff ffe0 	bl	8002058 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d8f7      	bhi.n	8002094 <HAL_Delay+0x28>
  {
  }
}
 80020a4:	bf00      	nop
 80020a6:	bf00      	nop
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	20000058 	.word	0x20000058

080020b4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020bc:	2300      	movs	r3, #0
 80020be:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80020c0:	2300      	movs	r3, #0
 80020c2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80020c4:	2300      	movs	r3, #0
 80020c6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80020c8:	2300      	movs	r3, #0
 80020ca:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e0be      	b.n	8002254 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d109      	bne.n	80020f8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f7fe f868 	bl	80001c8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f000 fb8f 	bl	800281c <ADC_ConversionStop_Disable>
 80020fe:	4603      	mov	r3, r0
 8002100:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002106:	f003 0310 	and.w	r3, r3, #16
 800210a:	2b00      	cmp	r3, #0
 800210c:	f040 8099 	bne.w	8002242 <HAL_ADC_Init+0x18e>
 8002110:	7dfb      	ldrb	r3, [r7, #23]
 8002112:	2b00      	cmp	r3, #0
 8002114:	f040 8095 	bne.w	8002242 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800211c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002120:	f023 0302 	bic.w	r3, r3, #2
 8002124:	f043 0202 	orr.w	r2, r3, #2
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002134:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	7b1b      	ldrb	r3, [r3, #12]
 800213a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800213c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800213e:	68ba      	ldr	r2, [r7, #8]
 8002140:	4313      	orrs	r3, r2
 8002142:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800214c:	d003      	beq.n	8002156 <HAL_ADC_Init+0xa2>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d102      	bne.n	800215c <HAL_ADC_Init+0xa8>
 8002156:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800215a:	e000      	b.n	800215e <HAL_ADC_Init+0xaa>
 800215c:	2300      	movs	r3, #0
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	4313      	orrs	r3, r2
 8002162:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	7d1b      	ldrb	r3, [r3, #20]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d119      	bne.n	80021a0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	7b1b      	ldrb	r3, [r3, #12]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d109      	bne.n	8002188 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	3b01      	subs	r3, #1
 800217a:	035a      	lsls	r2, r3, #13
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	4313      	orrs	r3, r2
 8002180:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002184:	613b      	str	r3, [r7, #16]
 8002186:	e00b      	b.n	80021a0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800218c:	f043 0220 	orr.w	r2, r3, #32
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002198:	f043 0201 	orr.w	r2, r3, #1
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	693a      	ldr	r2, [r7, #16]
 80021b0:	430a      	orrs	r2, r1
 80021b2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	689a      	ldr	r2, [r3, #8]
 80021ba:	4b28      	ldr	r3, [pc, #160]	@ (800225c <HAL_ADC_Init+0x1a8>)
 80021bc:	4013      	ands	r3, r2
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	6812      	ldr	r2, [r2, #0]
 80021c2:	68b9      	ldr	r1, [r7, #8]
 80021c4:	430b      	orrs	r3, r1
 80021c6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021d0:	d003      	beq.n	80021da <HAL_ADC_Init+0x126>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d104      	bne.n	80021e4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	3b01      	subs	r3, #1
 80021e0:	051b      	lsls	r3, r3, #20
 80021e2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ea:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	430a      	orrs	r2, r1
 80021f6:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	689a      	ldr	r2, [r3, #8]
 80021fe:	4b18      	ldr	r3, [pc, #96]	@ (8002260 <HAL_ADC_Init+0x1ac>)
 8002200:	4013      	ands	r3, r2
 8002202:	68ba      	ldr	r2, [r7, #8]
 8002204:	429a      	cmp	r2, r3
 8002206:	d10b      	bne.n	8002220 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002212:	f023 0303 	bic.w	r3, r3, #3
 8002216:	f043 0201 	orr.w	r2, r3, #1
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800221e:	e018      	b.n	8002252 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002224:	f023 0312 	bic.w	r3, r3, #18
 8002228:	f043 0210 	orr.w	r2, r3, #16
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002234:	f043 0201 	orr.w	r2, r3, #1
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002240:	e007      	b.n	8002252 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002246:	f043 0210 	orr.w	r2, r3, #16
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002252:	7dfb      	ldrb	r3, [r7, #23]
}
 8002254:	4618      	mov	r0, r3
 8002256:	3718      	adds	r7, #24
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	ffe1f7fd 	.word	0xffe1f7fd
 8002260:	ff1f0efe 	.word	0xff1f0efe

08002264 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800226c:	2300      	movs	r3, #0
 800226e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002276:	2b01      	cmp	r3, #1
 8002278:	d101      	bne.n	800227e <HAL_ADC_Start_IT+0x1a>
 800227a:	2302      	movs	r3, #2
 800227c:	e0a0      	b.n	80023c0 <HAL_ADC_Start_IT+0x15c>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2201      	movs	r2, #1
 8002282:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 fa6e 	bl	8002768 <ADC_Enable>
 800228c:	4603      	mov	r3, r0
 800228e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002290:	7bfb      	ldrb	r3, [r7, #15]
 8002292:	2b00      	cmp	r3, #0
 8002294:	f040 808f 	bne.w	80023b6 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800229c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80022a0:	f023 0301 	bic.w	r3, r3, #1
 80022a4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a45      	ldr	r2, [pc, #276]	@ (80023c8 <HAL_ADC_Start_IT+0x164>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d105      	bne.n	80022c2 <HAL_ADC_Start_IT+0x5e>
 80022b6:	4b45      	ldr	r3, [pc, #276]	@ (80023cc <HAL_ADC_Start_IT+0x168>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d115      	bne.n	80022ee <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022c6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d026      	beq.n	800232a <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022e0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80022e4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80022ec:	e01d      	b.n	800232a <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022f2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a33      	ldr	r2, [pc, #204]	@ (80023cc <HAL_ADC_Start_IT+0x168>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d004      	beq.n	800230e <HAL_ADC_Start_IT+0xaa>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a2f      	ldr	r2, [pc, #188]	@ (80023c8 <HAL_ADC_Start_IT+0x164>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d10d      	bne.n	800232a <HAL_ADC_Start_IT+0xc6>
 800230e:	4b2f      	ldr	r3, [pc, #188]	@ (80023cc <HAL_ADC_Start_IT+0x168>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002316:	2b00      	cmp	r3, #0
 8002318:	d007      	beq.n	800232a <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800231e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002322:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800232e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d006      	beq.n	8002344 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800233a:	f023 0206 	bic.w	r2, r3, #6
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002342:	e002      	b.n	800234a <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f06f 0202 	mvn.w	r2, #2
 800235a:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	685a      	ldr	r2, [r3, #4]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f042 0220 	orr.w	r2, r2, #32
 800236a:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002376:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800237a:	d113      	bne.n	80023a4 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002380:	4a11      	ldr	r2, [pc, #68]	@ (80023c8 <HAL_ADC_Start_IT+0x164>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d105      	bne.n	8002392 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002386:	4b11      	ldr	r3, [pc, #68]	@ (80023cc <HAL_ADC_Start_IT+0x168>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800238e:	2b00      	cmp	r3, #0
 8002390:	d108      	bne.n	80023a4 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	689a      	ldr	r2, [r3, #8]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80023a0:	609a      	str	r2, [r3, #8]
 80023a2:	e00c      	b.n	80023be <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	689a      	ldr	r2, [r3, #8]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80023b2:	609a      	str	r2, [r3, #8]
 80023b4:	e003      	b.n	80023be <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 80023be:	7bfb      	ldrb	r3, [r7, #15]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3710      	adds	r7, #16
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	40012800 	.word	0x40012800
 80023cc:	40012400 	.word	0x40012400

080023d0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80023de:	4618      	mov	r0, r3
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bc80      	pop	{r7}
 80023e6:	4770      	bx	lr

080023e8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	f003 0320 	and.w	r3, r3, #32
 8002406:	2b00      	cmp	r3, #0
 8002408:	d03e      	beq.n	8002488 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f003 0302 	and.w	r3, r3, #2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d039      	beq.n	8002488 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002418:	f003 0310 	and.w	r3, r3, #16
 800241c:	2b00      	cmp	r3, #0
 800241e:	d105      	bne.n	800242c <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002424:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002436:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800243a:	d11d      	bne.n	8002478 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002440:	2b00      	cmp	r3, #0
 8002442:	d119      	bne.n	8002478 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	685a      	ldr	r2, [r3, #4]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f022 0220 	bic.w	r2, r2, #32
 8002452:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002458:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002464:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d105      	bne.n	8002478 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002470:	f043 0201 	orr.w	r2, r3, #1
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f7ff fc23 	bl	8001cc4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f06f 0212 	mvn.w	r2, #18
 8002486:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800248e:	2b00      	cmp	r3, #0
 8002490:	d04d      	beq.n	800252e <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f003 0304 	and.w	r3, r3, #4
 8002498:	2b00      	cmp	r3, #0
 800249a:	d048      	beq.n	800252e <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024a0:	f003 0310 	and.w	r3, r3, #16
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d105      	bne.n	80024b4 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ac:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80024be:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 80024c2:	d012      	beq.n	80024ea <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d125      	bne.n	800251e <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80024dc:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80024e0:	d11d      	bne.n	800251e <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d119      	bne.n	800251e <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	685a      	ldr	r2, [r3, #4]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80024f8:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024fe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800250a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800250e:	2b00      	cmp	r3, #0
 8002510:	d105      	bne.n	800251e <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002516:	f043 0201 	orr.w	r2, r3, #1
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 f9bd 	bl	800289e <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f06f 020c 	mvn.w	r2, #12
 800252c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002534:	2b00      	cmp	r3, #0
 8002536:	d012      	beq.n	800255e <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	2b00      	cmp	r3, #0
 8002540:	d00d      	beq.n	800255e <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002546:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 f809 	bl	8002566 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f06f 0201 	mvn.w	r2, #1
 800255c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800255e:	bf00      	nop
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002566:	b480      	push	{r7}
 8002568:	b083      	sub	sp, #12
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800256e:	bf00      	nop
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	bc80      	pop	{r7}
 8002576:	4770      	bx	lr

08002578 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002582:	2300      	movs	r3, #0
 8002584:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002586:	2300      	movs	r3, #0
 8002588:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002590:	2b01      	cmp	r3, #1
 8002592:	d101      	bne.n	8002598 <HAL_ADC_ConfigChannel+0x20>
 8002594:	2302      	movs	r3, #2
 8002596:	e0dc      	b.n	8002752 <HAL_ADC_ConfigChannel+0x1da>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	2b06      	cmp	r3, #6
 80025a6:	d81c      	bhi.n	80025e2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685a      	ldr	r2, [r3, #4]
 80025b2:	4613      	mov	r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	4413      	add	r3, r2
 80025b8:	3b05      	subs	r3, #5
 80025ba:	221f      	movs	r2, #31
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	43db      	mvns	r3, r3
 80025c2:	4019      	ands	r1, r3
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	6818      	ldr	r0, [r3, #0]
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685a      	ldr	r2, [r3, #4]
 80025cc:	4613      	mov	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	4413      	add	r3, r2
 80025d2:	3b05      	subs	r3, #5
 80025d4:	fa00 f203 	lsl.w	r2, r0, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	430a      	orrs	r2, r1
 80025de:	635a      	str	r2, [r3, #52]	@ 0x34
 80025e0:	e03c      	b.n	800265c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	2b0c      	cmp	r3, #12
 80025e8:	d81c      	bhi.n	8002624 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685a      	ldr	r2, [r3, #4]
 80025f4:	4613      	mov	r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	4413      	add	r3, r2
 80025fa:	3b23      	subs	r3, #35	@ 0x23
 80025fc:	221f      	movs	r2, #31
 80025fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002602:	43db      	mvns	r3, r3
 8002604:	4019      	ands	r1, r3
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	6818      	ldr	r0, [r3, #0]
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685a      	ldr	r2, [r3, #4]
 800260e:	4613      	mov	r3, r2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	4413      	add	r3, r2
 8002614:	3b23      	subs	r3, #35	@ 0x23
 8002616:	fa00 f203 	lsl.w	r2, r0, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	430a      	orrs	r2, r1
 8002620:	631a      	str	r2, [r3, #48]	@ 0x30
 8002622:	e01b      	b.n	800265c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685a      	ldr	r2, [r3, #4]
 800262e:	4613      	mov	r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	4413      	add	r3, r2
 8002634:	3b41      	subs	r3, #65	@ 0x41
 8002636:	221f      	movs	r2, #31
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	43db      	mvns	r3, r3
 800263e:	4019      	ands	r1, r3
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	6818      	ldr	r0, [r3, #0]
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685a      	ldr	r2, [r3, #4]
 8002648:	4613      	mov	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4413      	add	r3, r2
 800264e:	3b41      	subs	r3, #65	@ 0x41
 8002650:	fa00 f203 	lsl.w	r2, r0, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	430a      	orrs	r2, r1
 800265a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2b09      	cmp	r3, #9
 8002662:	d91c      	bls.n	800269e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68d9      	ldr	r1, [r3, #12]
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	4613      	mov	r3, r2
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	4413      	add	r3, r2
 8002674:	3b1e      	subs	r3, #30
 8002676:	2207      	movs	r2, #7
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	43db      	mvns	r3, r3
 800267e:	4019      	ands	r1, r3
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	6898      	ldr	r0, [r3, #8]
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	4613      	mov	r3, r2
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	4413      	add	r3, r2
 800268e:	3b1e      	subs	r3, #30
 8002690:	fa00 f203 	lsl.w	r2, r0, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	430a      	orrs	r2, r1
 800269a:	60da      	str	r2, [r3, #12]
 800269c:	e019      	b.n	80026d2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	6919      	ldr	r1, [r3, #16]
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	4613      	mov	r3, r2
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	4413      	add	r3, r2
 80026ae:	2207      	movs	r2, #7
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	43db      	mvns	r3, r3
 80026b6:	4019      	ands	r1, r3
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	6898      	ldr	r0, [r3, #8]
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	4613      	mov	r3, r2
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	4413      	add	r3, r2
 80026c6:	fa00 f203 	lsl.w	r2, r0, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	430a      	orrs	r2, r1
 80026d0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2b10      	cmp	r3, #16
 80026d8:	d003      	beq.n	80026e2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80026de:	2b11      	cmp	r3, #17
 80026e0:	d132      	bne.n	8002748 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a1d      	ldr	r2, [pc, #116]	@ (800275c <HAL_ADC_ConfigChannel+0x1e4>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d125      	bne.n	8002738 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d126      	bne.n	8002748 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	689a      	ldr	r2, [r3, #8]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002708:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2b10      	cmp	r3, #16
 8002710:	d11a      	bne.n	8002748 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002712:	4b13      	ldr	r3, [pc, #76]	@ (8002760 <HAL_ADC_ConfigChannel+0x1e8>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a13      	ldr	r2, [pc, #76]	@ (8002764 <HAL_ADC_ConfigChannel+0x1ec>)
 8002718:	fba2 2303 	umull	r2, r3, r2, r3
 800271c:	0c9a      	lsrs	r2, r3, #18
 800271e:	4613      	mov	r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	4413      	add	r3, r2
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002728:	e002      	b.n	8002730 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	3b01      	subs	r3, #1
 800272e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1f9      	bne.n	800272a <HAL_ADC_ConfigChannel+0x1b2>
 8002736:	e007      	b.n	8002748 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800273c:	f043 0220 	orr.w	r2, r3, #32
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002750:	7bfb      	ldrb	r3, [r7, #15]
}
 8002752:	4618      	mov	r0, r3
 8002754:	3714      	adds	r7, #20
 8002756:	46bd      	mov	sp, r7
 8002758:	bc80      	pop	{r7}
 800275a:	4770      	bx	lr
 800275c:	40012400 	.word	0x40012400
 8002760:	20000050 	.word	0x20000050
 8002764:	431bde83 	.word	0x431bde83

08002768 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002770:	2300      	movs	r3, #0
 8002772:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002774:	2300      	movs	r3, #0
 8002776:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	2b01      	cmp	r3, #1
 8002784:	d040      	beq.n	8002808 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	689a      	ldr	r2, [r3, #8]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f042 0201 	orr.w	r2, r2, #1
 8002794:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002796:	4b1f      	ldr	r3, [pc, #124]	@ (8002814 <ADC_Enable+0xac>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a1f      	ldr	r2, [pc, #124]	@ (8002818 <ADC_Enable+0xb0>)
 800279c:	fba2 2303 	umull	r2, r3, r2, r3
 80027a0:	0c9b      	lsrs	r3, r3, #18
 80027a2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80027a4:	e002      	b.n	80027ac <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	3b01      	subs	r3, #1
 80027aa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d1f9      	bne.n	80027a6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80027b2:	f7ff fc51 	bl	8002058 <HAL_GetTick>
 80027b6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80027b8:	e01f      	b.n	80027fa <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80027ba:	f7ff fc4d 	bl	8002058 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d918      	bls.n	80027fa <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d011      	beq.n	80027fa <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027da:	f043 0210 	orr.w	r2, r3, #16
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027e6:	f043 0201 	orr.w	r2, r3, #1
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e007      	b.n	800280a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b01      	cmp	r3, #1
 8002806:	d1d8      	bne.n	80027ba <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3710      	adds	r7, #16
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	20000050 	.word	0x20000050
 8002818:	431bde83 	.word	0x431bde83

0800281c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002824:	2300      	movs	r3, #0
 8002826:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b01      	cmp	r3, #1
 8002834:	d12e      	bne.n	8002894 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	689a      	ldr	r2, [r3, #8]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 0201 	bic.w	r2, r2, #1
 8002844:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002846:	f7ff fc07 	bl	8002058 <HAL_GetTick>
 800284a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800284c:	e01b      	b.n	8002886 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800284e:	f7ff fc03 	bl	8002058 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d914      	bls.n	8002886 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	2b01      	cmp	r3, #1
 8002868:	d10d      	bne.n	8002886 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800286e:	f043 0210 	orr.w	r2, r3, #16
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800287a:	f043 0201 	orr.w	r2, r3, #1
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e007      	b.n	8002896 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	2b01      	cmp	r3, #1
 8002892:	d0dc      	beq.n	800284e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800289e:	b480      	push	{r7}
 80028a0:	b083      	sub	sp, #12
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80028a6:	bf00      	nop
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bc80      	pop	{r7}
 80028ae:	4770      	bx	lr

080028b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f003 0307 	and.w	r3, r3, #7
 80028be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028c0:	4b0c      	ldr	r3, [pc, #48]	@ (80028f4 <__NVIC_SetPriorityGrouping+0x44>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028c6:	68ba      	ldr	r2, [r7, #8]
 80028c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028cc:	4013      	ands	r3, r2
 80028ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80028dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028e2:	4a04      	ldr	r2, [pc, #16]	@ (80028f4 <__NVIC_SetPriorityGrouping+0x44>)
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	60d3      	str	r3, [r2, #12]
}
 80028e8:	bf00      	nop
 80028ea:	3714      	adds	r7, #20
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bc80      	pop	{r7}
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	e000ed00 	.word	0xe000ed00

080028f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028fc:	4b04      	ldr	r3, [pc, #16]	@ (8002910 <__NVIC_GetPriorityGrouping+0x18>)
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	0a1b      	lsrs	r3, r3, #8
 8002902:	f003 0307 	and.w	r3, r3, #7
}
 8002906:	4618      	mov	r0, r3
 8002908:	46bd      	mov	sp, r7
 800290a:	bc80      	pop	{r7}
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	e000ed00 	.word	0xe000ed00

08002914 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	4603      	mov	r3, r0
 800291c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800291e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002922:	2b00      	cmp	r3, #0
 8002924:	db0b      	blt.n	800293e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002926:	79fb      	ldrb	r3, [r7, #7]
 8002928:	f003 021f 	and.w	r2, r3, #31
 800292c:	4906      	ldr	r1, [pc, #24]	@ (8002948 <__NVIC_EnableIRQ+0x34>)
 800292e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002932:	095b      	lsrs	r3, r3, #5
 8002934:	2001      	movs	r0, #1
 8002936:	fa00 f202 	lsl.w	r2, r0, r2
 800293a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800293e:	bf00      	nop
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	bc80      	pop	{r7}
 8002946:	4770      	bx	lr
 8002948:	e000e100 	.word	0xe000e100

0800294c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	4603      	mov	r3, r0
 8002954:	6039      	str	r1, [r7, #0]
 8002956:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295c:	2b00      	cmp	r3, #0
 800295e:	db0a      	blt.n	8002976 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	b2da      	uxtb	r2, r3
 8002964:	490c      	ldr	r1, [pc, #48]	@ (8002998 <__NVIC_SetPriority+0x4c>)
 8002966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296a:	0112      	lsls	r2, r2, #4
 800296c:	b2d2      	uxtb	r2, r2
 800296e:	440b      	add	r3, r1
 8002970:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002974:	e00a      	b.n	800298c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	b2da      	uxtb	r2, r3
 800297a:	4908      	ldr	r1, [pc, #32]	@ (800299c <__NVIC_SetPriority+0x50>)
 800297c:	79fb      	ldrb	r3, [r7, #7]
 800297e:	f003 030f 	and.w	r3, r3, #15
 8002982:	3b04      	subs	r3, #4
 8002984:	0112      	lsls	r2, r2, #4
 8002986:	b2d2      	uxtb	r2, r2
 8002988:	440b      	add	r3, r1
 800298a:	761a      	strb	r2, [r3, #24]
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	bc80      	pop	{r7}
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	e000e100 	.word	0xe000e100
 800299c:	e000ed00 	.word	0xe000ed00

080029a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b089      	sub	sp, #36	@ 0x24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f003 0307 	and.w	r3, r3, #7
 80029b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	f1c3 0307 	rsb	r3, r3, #7
 80029ba:	2b04      	cmp	r3, #4
 80029bc:	bf28      	it	cs
 80029be:	2304      	movcs	r3, #4
 80029c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	3304      	adds	r3, #4
 80029c6:	2b06      	cmp	r3, #6
 80029c8:	d902      	bls.n	80029d0 <NVIC_EncodePriority+0x30>
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	3b03      	subs	r3, #3
 80029ce:	e000      	b.n	80029d2 <NVIC_EncodePriority+0x32>
 80029d0:	2300      	movs	r3, #0
 80029d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029d4:	f04f 32ff 	mov.w	r2, #4294967295
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	fa02 f303 	lsl.w	r3, r2, r3
 80029de:	43da      	mvns	r2, r3
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	401a      	ands	r2, r3
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029e8:	f04f 31ff 	mov.w	r1, #4294967295
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	fa01 f303 	lsl.w	r3, r1, r3
 80029f2:	43d9      	mvns	r1, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f8:	4313      	orrs	r3, r2
         );
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3724      	adds	r7, #36	@ 0x24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bc80      	pop	{r7}
 8002a02:	4770      	bx	lr

08002a04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a14:	d301      	bcc.n	8002a1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a16:	2301      	movs	r3, #1
 8002a18:	e00f      	b.n	8002a3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a1a:	4a0a      	ldr	r2, [pc, #40]	@ (8002a44 <SysTick_Config+0x40>)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a22:	210f      	movs	r1, #15
 8002a24:	f04f 30ff 	mov.w	r0, #4294967295
 8002a28:	f7ff ff90 	bl	800294c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a2c:	4b05      	ldr	r3, [pc, #20]	@ (8002a44 <SysTick_Config+0x40>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a32:	4b04      	ldr	r3, [pc, #16]	@ (8002a44 <SysTick_Config+0x40>)
 8002a34:	2207      	movs	r2, #7
 8002a36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	e000e010 	.word	0xe000e010

08002a48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f7ff ff2d 	bl	80028b0 <__NVIC_SetPriorityGrouping>
}
 8002a56:	bf00      	nop
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b086      	sub	sp, #24
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	4603      	mov	r3, r0
 8002a66:	60b9      	str	r1, [r7, #8]
 8002a68:	607a      	str	r2, [r7, #4]
 8002a6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a70:	f7ff ff42 	bl	80028f8 <__NVIC_GetPriorityGrouping>
 8002a74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	68b9      	ldr	r1, [r7, #8]
 8002a7a:	6978      	ldr	r0, [r7, #20]
 8002a7c:	f7ff ff90 	bl	80029a0 <NVIC_EncodePriority>
 8002a80:	4602      	mov	r2, r0
 8002a82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a86:	4611      	mov	r1, r2
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff ff5f 	bl	800294c <__NVIC_SetPriority>
}
 8002a8e:	bf00      	nop
 8002a90:	3718      	adds	r7, #24
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b082      	sub	sp, #8
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7ff ff35 	bl	8002914 <__NVIC_EnableIRQ>
}
 8002aaa:	bf00      	nop
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b082      	sub	sp, #8
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f7ff ffa2 	bl	8002a04 <SysTick_Config>
 8002ac0:	4603      	mov	r3, r0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002aca:	b480      	push	{r7}
 8002acc:	b085      	sub	sp, #20
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d008      	beq.n	8002af4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2204      	movs	r2, #4
 8002ae6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e020      	b.n	8002b36 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f022 020e 	bic.w	r2, r2, #14
 8002b02:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f022 0201 	bic.w	r2, r2, #1
 8002b12:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b1c:	2101      	movs	r1, #1
 8002b1e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b22:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3714      	adds	r7, #20
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bc80      	pop	{r7}
 8002b3e:	4770      	bx	lr

08002b40 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d005      	beq.n	8002b64 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2204      	movs	r2, #4
 8002b5c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	73fb      	strb	r3, [r7, #15]
 8002b62:	e051      	b.n	8002c08 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f022 020e 	bic.w	r2, r2, #14
 8002b72:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f022 0201 	bic.w	r2, r2, #1
 8002b82:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a22      	ldr	r2, [pc, #136]	@ (8002c14 <HAL_DMA_Abort_IT+0xd4>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d029      	beq.n	8002be2 <HAL_DMA_Abort_IT+0xa2>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a21      	ldr	r2, [pc, #132]	@ (8002c18 <HAL_DMA_Abort_IT+0xd8>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d022      	beq.n	8002bde <HAL_DMA_Abort_IT+0x9e>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a1f      	ldr	r2, [pc, #124]	@ (8002c1c <HAL_DMA_Abort_IT+0xdc>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d01a      	beq.n	8002bd8 <HAL_DMA_Abort_IT+0x98>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a1e      	ldr	r2, [pc, #120]	@ (8002c20 <HAL_DMA_Abort_IT+0xe0>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d012      	beq.n	8002bd2 <HAL_DMA_Abort_IT+0x92>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a1c      	ldr	r2, [pc, #112]	@ (8002c24 <HAL_DMA_Abort_IT+0xe4>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d00a      	beq.n	8002bcc <HAL_DMA_Abort_IT+0x8c>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a1b      	ldr	r2, [pc, #108]	@ (8002c28 <HAL_DMA_Abort_IT+0xe8>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d102      	bne.n	8002bc6 <HAL_DMA_Abort_IT+0x86>
 8002bc0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002bc4:	e00e      	b.n	8002be4 <HAL_DMA_Abort_IT+0xa4>
 8002bc6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002bca:	e00b      	b.n	8002be4 <HAL_DMA_Abort_IT+0xa4>
 8002bcc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002bd0:	e008      	b.n	8002be4 <HAL_DMA_Abort_IT+0xa4>
 8002bd2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002bd6:	e005      	b.n	8002be4 <HAL_DMA_Abort_IT+0xa4>
 8002bd8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002bdc:	e002      	b.n	8002be4 <HAL_DMA_Abort_IT+0xa4>
 8002bde:	2310      	movs	r3, #16
 8002be0:	e000      	b.n	8002be4 <HAL_DMA_Abort_IT+0xa4>
 8002be2:	2301      	movs	r3, #1
 8002be4:	4a11      	ldr	r2, [pc, #68]	@ (8002c2c <HAL_DMA_Abort_IT+0xec>)
 8002be6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d003      	beq.n	8002c08 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	4798      	blx	r3
    } 
  }
  return status;
 8002c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	40020008 	.word	0x40020008
 8002c18:	4002001c 	.word	0x4002001c
 8002c1c:	40020030 	.word	0x40020030
 8002c20:	40020044 	.word	0x40020044
 8002c24:	40020058 	.word	0x40020058
 8002c28:	4002006c 	.word	0x4002006c
 8002c2c:	40020000 	.word	0x40020000

08002c30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b08b      	sub	sp, #44	@ 0x2c
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c42:	e169      	b.n	8002f18 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c44:	2201      	movs	r2, #1
 8002c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	69fa      	ldr	r2, [r7, #28]
 8002c54:	4013      	ands	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	f040 8158 	bne.w	8002f12 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	4a9a      	ldr	r2, [pc, #616]	@ (8002ed0 <HAL_GPIO_Init+0x2a0>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d05e      	beq.n	8002d2a <HAL_GPIO_Init+0xfa>
 8002c6c:	4a98      	ldr	r2, [pc, #608]	@ (8002ed0 <HAL_GPIO_Init+0x2a0>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d875      	bhi.n	8002d5e <HAL_GPIO_Init+0x12e>
 8002c72:	4a98      	ldr	r2, [pc, #608]	@ (8002ed4 <HAL_GPIO_Init+0x2a4>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d058      	beq.n	8002d2a <HAL_GPIO_Init+0xfa>
 8002c78:	4a96      	ldr	r2, [pc, #600]	@ (8002ed4 <HAL_GPIO_Init+0x2a4>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d86f      	bhi.n	8002d5e <HAL_GPIO_Init+0x12e>
 8002c7e:	4a96      	ldr	r2, [pc, #600]	@ (8002ed8 <HAL_GPIO_Init+0x2a8>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d052      	beq.n	8002d2a <HAL_GPIO_Init+0xfa>
 8002c84:	4a94      	ldr	r2, [pc, #592]	@ (8002ed8 <HAL_GPIO_Init+0x2a8>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d869      	bhi.n	8002d5e <HAL_GPIO_Init+0x12e>
 8002c8a:	4a94      	ldr	r2, [pc, #592]	@ (8002edc <HAL_GPIO_Init+0x2ac>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d04c      	beq.n	8002d2a <HAL_GPIO_Init+0xfa>
 8002c90:	4a92      	ldr	r2, [pc, #584]	@ (8002edc <HAL_GPIO_Init+0x2ac>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d863      	bhi.n	8002d5e <HAL_GPIO_Init+0x12e>
 8002c96:	4a92      	ldr	r2, [pc, #584]	@ (8002ee0 <HAL_GPIO_Init+0x2b0>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d046      	beq.n	8002d2a <HAL_GPIO_Init+0xfa>
 8002c9c:	4a90      	ldr	r2, [pc, #576]	@ (8002ee0 <HAL_GPIO_Init+0x2b0>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d85d      	bhi.n	8002d5e <HAL_GPIO_Init+0x12e>
 8002ca2:	2b12      	cmp	r3, #18
 8002ca4:	d82a      	bhi.n	8002cfc <HAL_GPIO_Init+0xcc>
 8002ca6:	2b12      	cmp	r3, #18
 8002ca8:	d859      	bhi.n	8002d5e <HAL_GPIO_Init+0x12e>
 8002caa:	a201      	add	r2, pc, #4	@ (adr r2, 8002cb0 <HAL_GPIO_Init+0x80>)
 8002cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb0:	08002d2b 	.word	0x08002d2b
 8002cb4:	08002d05 	.word	0x08002d05
 8002cb8:	08002d17 	.word	0x08002d17
 8002cbc:	08002d59 	.word	0x08002d59
 8002cc0:	08002d5f 	.word	0x08002d5f
 8002cc4:	08002d5f 	.word	0x08002d5f
 8002cc8:	08002d5f 	.word	0x08002d5f
 8002ccc:	08002d5f 	.word	0x08002d5f
 8002cd0:	08002d5f 	.word	0x08002d5f
 8002cd4:	08002d5f 	.word	0x08002d5f
 8002cd8:	08002d5f 	.word	0x08002d5f
 8002cdc:	08002d5f 	.word	0x08002d5f
 8002ce0:	08002d5f 	.word	0x08002d5f
 8002ce4:	08002d5f 	.word	0x08002d5f
 8002ce8:	08002d5f 	.word	0x08002d5f
 8002cec:	08002d5f 	.word	0x08002d5f
 8002cf0:	08002d5f 	.word	0x08002d5f
 8002cf4:	08002d0d 	.word	0x08002d0d
 8002cf8:	08002d21 	.word	0x08002d21
 8002cfc:	4a79      	ldr	r2, [pc, #484]	@ (8002ee4 <HAL_GPIO_Init+0x2b4>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d013      	beq.n	8002d2a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d02:	e02c      	b.n	8002d5e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	623b      	str	r3, [r7, #32]
          break;
 8002d0a:	e029      	b.n	8002d60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	3304      	adds	r3, #4
 8002d12:	623b      	str	r3, [r7, #32]
          break;
 8002d14:	e024      	b.n	8002d60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	3308      	adds	r3, #8
 8002d1c:	623b      	str	r3, [r7, #32]
          break;
 8002d1e:	e01f      	b.n	8002d60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	330c      	adds	r3, #12
 8002d26:	623b      	str	r3, [r7, #32]
          break;
 8002d28:	e01a      	b.n	8002d60 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d102      	bne.n	8002d38 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d32:	2304      	movs	r3, #4
 8002d34:	623b      	str	r3, [r7, #32]
          break;
 8002d36:	e013      	b.n	8002d60 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d105      	bne.n	8002d4c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d40:	2308      	movs	r3, #8
 8002d42:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	69fa      	ldr	r2, [r7, #28]
 8002d48:	611a      	str	r2, [r3, #16]
          break;
 8002d4a:	e009      	b.n	8002d60 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d4c:	2308      	movs	r3, #8
 8002d4e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	69fa      	ldr	r2, [r7, #28]
 8002d54:	615a      	str	r2, [r3, #20]
          break;
 8002d56:	e003      	b.n	8002d60 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	623b      	str	r3, [r7, #32]
          break;
 8002d5c:	e000      	b.n	8002d60 <HAL_GPIO_Init+0x130>
          break;
 8002d5e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	2bff      	cmp	r3, #255	@ 0xff
 8002d64:	d801      	bhi.n	8002d6a <HAL_GPIO_Init+0x13a>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	e001      	b.n	8002d6e <HAL_GPIO_Init+0x13e>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	3304      	adds	r3, #4
 8002d6e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	2bff      	cmp	r3, #255	@ 0xff
 8002d74:	d802      	bhi.n	8002d7c <HAL_GPIO_Init+0x14c>
 8002d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	e002      	b.n	8002d82 <HAL_GPIO_Init+0x152>
 8002d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d7e:	3b08      	subs	r3, #8
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	210f      	movs	r1, #15
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d90:	43db      	mvns	r3, r3
 8002d92:	401a      	ands	r2, r3
 8002d94:	6a39      	ldr	r1, [r7, #32]
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	fa01 f303 	lsl.w	r3, r1, r3
 8002d9c:	431a      	orrs	r2, r3
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	f000 80b1 	beq.w	8002f12 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002db0:	4b4d      	ldr	r3, [pc, #308]	@ (8002ee8 <HAL_GPIO_Init+0x2b8>)
 8002db2:	699b      	ldr	r3, [r3, #24]
 8002db4:	4a4c      	ldr	r2, [pc, #304]	@ (8002ee8 <HAL_GPIO_Init+0x2b8>)
 8002db6:	f043 0301 	orr.w	r3, r3, #1
 8002dba:	6193      	str	r3, [r2, #24]
 8002dbc:	4b4a      	ldr	r3, [pc, #296]	@ (8002ee8 <HAL_GPIO_Init+0x2b8>)
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	f003 0301 	and.w	r3, r3, #1
 8002dc4:	60bb      	str	r3, [r7, #8]
 8002dc6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002dc8:	4a48      	ldr	r2, [pc, #288]	@ (8002eec <HAL_GPIO_Init+0x2bc>)
 8002dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dcc:	089b      	lsrs	r3, r3, #2
 8002dce:	3302      	adds	r3, #2
 8002dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dd4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd8:	f003 0303 	and.w	r3, r3, #3
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	220f      	movs	r2, #15
 8002de0:	fa02 f303 	lsl.w	r3, r2, r3
 8002de4:	43db      	mvns	r3, r3
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	4013      	ands	r3, r2
 8002dea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4a40      	ldr	r2, [pc, #256]	@ (8002ef0 <HAL_GPIO_Init+0x2c0>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d013      	beq.n	8002e1c <HAL_GPIO_Init+0x1ec>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a3f      	ldr	r2, [pc, #252]	@ (8002ef4 <HAL_GPIO_Init+0x2c4>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d00d      	beq.n	8002e18 <HAL_GPIO_Init+0x1e8>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a3e      	ldr	r2, [pc, #248]	@ (8002ef8 <HAL_GPIO_Init+0x2c8>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d007      	beq.n	8002e14 <HAL_GPIO_Init+0x1e4>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a3d      	ldr	r2, [pc, #244]	@ (8002efc <HAL_GPIO_Init+0x2cc>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d101      	bne.n	8002e10 <HAL_GPIO_Init+0x1e0>
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e006      	b.n	8002e1e <HAL_GPIO_Init+0x1ee>
 8002e10:	2304      	movs	r3, #4
 8002e12:	e004      	b.n	8002e1e <HAL_GPIO_Init+0x1ee>
 8002e14:	2302      	movs	r3, #2
 8002e16:	e002      	b.n	8002e1e <HAL_GPIO_Init+0x1ee>
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e000      	b.n	8002e1e <HAL_GPIO_Init+0x1ee>
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e20:	f002 0203 	and.w	r2, r2, #3
 8002e24:	0092      	lsls	r2, r2, #2
 8002e26:	4093      	lsls	r3, r2
 8002e28:	68fa      	ldr	r2, [r7, #12]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e2e:	492f      	ldr	r1, [pc, #188]	@ (8002eec <HAL_GPIO_Init+0x2bc>)
 8002e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e32:	089b      	lsrs	r3, r3, #2
 8002e34:	3302      	adds	r3, #2
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d006      	beq.n	8002e56 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e48:	4b2d      	ldr	r3, [pc, #180]	@ (8002f00 <HAL_GPIO_Init+0x2d0>)
 8002e4a:	689a      	ldr	r2, [r3, #8]
 8002e4c:	492c      	ldr	r1, [pc, #176]	@ (8002f00 <HAL_GPIO_Init+0x2d0>)
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	608b      	str	r3, [r1, #8]
 8002e54:	e006      	b.n	8002e64 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e56:	4b2a      	ldr	r3, [pc, #168]	@ (8002f00 <HAL_GPIO_Init+0x2d0>)
 8002e58:	689a      	ldr	r2, [r3, #8]
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	43db      	mvns	r3, r3
 8002e5e:	4928      	ldr	r1, [pc, #160]	@ (8002f00 <HAL_GPIO_Init+0x2d0>)
 8002e60:	4013      	ands	r3, r2
 8002e62:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d006      	beq.n	8002e7e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e70:	4b23      	ldr	r3, [pc, #140]	@ (8002f00 <HAL_GPIO_Init+0x2d0>)
 8002e72:	68da      	ldr	r2, [r3, #12]
 8002e74:	4922      	ldr	r1, [pc, #136]	@ (8002f00 <HAL_GPIO_Init+0x2d0>)
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	60cb      	str	r3, [r1, #12]
 8002e7c:	e006      	b.n	8002e8c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002e7e:	4b20      	ldr	r3, [pc, #128]	@ (8002f00 <HAL_GPIO_Init+0x2d0>)
 8002e80:	68da      	ldr	r2, [r3, #12]
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	43db      	mvns	r3, r3
 8002e86:	491e      	ldr	r1, [pc, #120]	@ (8002f00 <HAL_GPIO_Init+0x2d0>)
 8002e88:	4013      	ands	r3, r2
 8002e8a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d006      	beq.n	8002ea6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002e98:	4b19      	ldr	r3, [pc, #100]	@ (8002f00 <HAL_GPIO_Init+0x2d0>)
 8002e9a:	685a      	ldr	r2, [r3, #4]
 8002e9c:	4918      	ldr	r1, [pc, #96]	@ (8002f00 <HAL_GPIO_Init+0x2d0>)
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	604b      	str	r3, [r1, #4]
 8002ea4:	e006      	b.n	8002eb4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ea6:	4b16      	ldr	r3, [pc, #88]	@ (8002f00 <HAL_GPIO_Init+0x2d0>)
 8002ea8:	685a      	ldr	r2, [r3, #4]
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	43db      	mvns	r3, r3
 8002eae:	4914      	ldr	r1, [pc, #80]	@ (8002f00 <HAL_GPIO_Init+0x2d0>)
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d021      	beq.n	8002f04 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ec0:	4b0f      	ldr	r3, [pc, #60]	@ (8002f00 <HAL_GPIO_Init+0x2d0>)
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	490e      	ldr	r1, [pc, #56]	@ (8002f00 <HAL_GPIO_Init+0x2d0>)
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	600b      	str	r3, [r1, #0]
 8002ecc:	e021      	b.n	8002f12 <HAL_GPIO_Init+0x2e2>
 8002ece:	bf00      	nop
 8002ed0:	10320000 	.word	0x10320000
 8002ed4:	10310000 	.word	0x10310000
 8002ed8:	10220000 	.word	0x10220000
 8002edc:	10210000 	.word	0x10210000
 8002ee0:	10120000 	.word	0x10120000
 8002ee4:	10110000 	.word	0x10110000
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	40010000 	.word	0x40010000
 8002ef0:	40010800 	.word	0x40010800
 8002ef4:	40010c00 	.word	0x40010c00
 8002ef8:	40011000 	.word	0x40011000
 8002efc:	40011400 	.word	0x40011400
 8002f00:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f04:	4b0b      	ldr	r3, [pc, #44]	@ (8002f34 <HAL_GPIO_Init+0x304>)
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	43db      	mvns	r3, r3
 8002f0c:	4909      	ldr	r1, [pc, #36]	@ (8002f34 <HAL_GPIO_Init+0x304>)
 8002f0e:	4013      	ands	r3, r2
 8002f10:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f14:	3301      	adds	r3, #1
 8002f16:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f1e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f47f ae8e 	bne.w	8002c44 <HAL_GPIO_Init+0x14>
  }
}
 8002f28:	bf00      	nop
 8002f2a:	bf00      	nop
 8002f2c:	372c      	adds	r7, #44	@ 0x2c
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bc80      	pop	{r7}
 8002f32:	4770      	bx	lr
 8002f34:	40010400 	.word	0x40010400

08002f38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	460b      	mov	r3, r1
 8002f42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689a      	ldr	r2, [r3, #8]
 8002f48:	887b      	ldrh	r3, [r7, #2]
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d002      	beq.n	8002f56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f50:	2301      	movs	r3, #1
 8002f52:	73fb      	strb	r3, [r7, #15]
 8002f54:	e001      	b.n	8002f5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f56:	2300      	movs	r3, #0
 8002f58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3714      	adds	r7, #20
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bc80      	pop	{r7}
 8002f64:	4770      	bx	lr
	...

08002f68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	4603      	mov	r3, r0
 8002f70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002f72:	4b08      	ldr	r3, [pc, #32]	@ (8002f94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f74:	695a      	ldr	r2, [r3, #20]
 8002f76:	88fb      	ldrh	r3, [r7, #6]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d006      	beq.n	8002f8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f7e:	4a05      	ldr	r2, [pc, #20]	@ (8002f94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f80:	88fb      	ldrh	r3, [r7, #6]
 8002f82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f84:	88fb      	ldrh	r3, [r7, #6]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7fe fe2a 	bl	8001be0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f8c:	bf00      	nop
 8002f8e:	3708      	adds	r7, #8
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	40010400 	.word	0x40010400

08002f98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d101      	bne.n	8002faa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e12b      	b.n	8003202 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d106      	bne.n	8002fc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f7fd f9e6 	bl	8000390 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2224      	movs	r2, #36	@ 0x24
 8002fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 0201 	bic.w	r2, r2, #1
 8002fda:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002fea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ffa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ffc:	f001 fbfc 	bl	80047f8 <HAL_RCC_GetPCLK1Freq>
 8003000:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	4a81      	ldr	r2, [pc, #516]	@ (800320c <HAL_I2C_Init+0x274>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d807      	bhi.n	800301c <HAL_I2C_Init+0x84>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	4a80      	ldr	r2, [pc, #512]	@ (8003210 <HAL_I2C_Init+0x278>)
 8003010:	4293      	cmp	r3, r2
 8003012:	bf94      	ite	ls
 8003014:	2301      	movls	r3, #1
 8003016:	2300      	movhi	r3, #0
 8003018:	b2db      	uxtb	r3, r3
 800301a:	e006      	b.n	800302a <HAL_I2C_Init+0x92>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	4a7d      	ldr	r2, [pc, #500]	@ (8003214 <HAL_I2C_Init+0x27c>)
 8003020:	4293      	cmp	r3, r2
 8003022:	bf94      	ite	ls
 8003024:	2301      	movls	r3, #1
 8003026:	2300      	movhi	r3, #0
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e0e7      	b.n	8003202 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	4a78      	ldr	r2, [pc, #480]	@ (8003218 <HAL_I2C_Init+0x280>)
 8003036:	fba2 2303 	umull	r2, r3, r2, r3
 800303a:	0c9b      	lsrs	r3, r3, #18
 800303c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68ba      	ldr	r2, [r7, #8]
 800304e:	430a      	orrs	r2, r1
 8003050:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	6a1b      	ldr	r3, [r3, #32]
 8003058:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	4a6a      	ldr	r2, [pc, #424]	@ (800320c <HAL_I2C_Init+0x274>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d802      	bhi.n	800306c <HAL_I2C_Init+0xd4>
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	3301      	adds	r3, #1
 800306a:	e009      	b.n	8003080 <HAL_I2C_Init+0xe8>
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003072:	fb02 f303 	mul.w	r3, r2, r3
 8003076:	4a69      	ldr	r2, [pc, #420]	@ (800321c <HAL_I2C_Init+0x284>)
 8003078:	fba2 2303 	umull	r2, r3, r2, r3
 800307c:	099b      	lsrs	r3, r3, #6
 800307e:	3301      	adds	r3, #1
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	6812      	ldr	r2, [r2, #0]
 8003084:	430b      	orrs	r3, r1
 8003086:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	69db      	ldr	r3, [r3, #28]
 800308e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003092:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	495c      	ldr	r1, [pc, #368]	@ (800320c <HAL_I2C_Init+0x274>)
 800309c:	428b      	cmp	r3, r1
 800309e:	d819      	bhi.n	80030d4 <HAL_I2C_Init+0x13c>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	1e59      	subs	r1, r3, #1
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80030ae:	1c59      	adds	r1, r3, #1
 80030b0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80030b4:	400b      	ands	r3, r1
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00a      	beq.n	80030d0 <HAL_I2C_Init+0x138>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	1e59      	subs	r1, r3, #1
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80030c8:	3301      	adds	r3, #1
 80030ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030ce:	e051      	b.n	8003174 <HAL_I2C_Init+0x1dc>
 80030d0:	2304      	movs	r3, #4
 80030d2:	e04f      	b.n	8003174 <HAL_I2C_Init+0x1dc>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d111      	bne.n	8003100 <HAL_I2C_Init+0x168>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	1e58      	subs	r0, r3, #1
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6859      	ldr	r1, [r3, #4]
 80030e4:	460b      	mov	r3, r1
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	440b      	add	r3, r1
 80030ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80030ee:	3301      	adds	r3, #1
 80030f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	bf0c      	ite	eq
 80030f8:	2301      	moveq	r3, #1
 80030fa:	2300      	movne	r3, #0
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	e012      	b.n	8003126 <HAL_I2C_Init+0x18e>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	1e58      	subs	r0, r3, #1
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6859      	ldr	r1, [r3, #4]
 8003108:	460b      	mov	r3, r1
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	440b      	add	r3, r1
 800310e:	0099      	lsls	r1, r3, #2
 8003110:	440b      	add	r3, r1
 8003112:	fbb0 f3f3 	udiv	r3, r0, r3
 8003116:	3301      	adds	r3, #1
 8003118:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800311c:	2b00      	cmp	r3, #0
 800311e:	bf0c      	ite	eq
 8003120:	2301      	moveq	r3, #1
 8003122:	2300      	movne	r3, #0
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <HAL_I2C_Init+0x196>
 800312a:	2301      	movs	r3, #1
 800312c:	e022      	b.n	8003174 <HAL_I2C_Init+0x1dc>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d10e      	bne.n	8003154 <HAL_I2C_Init+0x1bc>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	1e58      	subs	r0, r3, #1
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6859      	ldr	r1, [r3, #4]
 800313e:	460b      	mov	r3, r1
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	440b      	add	r3, r1
 8003144:	fbb0 f3f3 	udiv	r3, r0, r3
 8003148:	3301      	adds	r3, #1
 800314a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800314e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003152:	e00f      	b.n	8003174 <HAL_I2C_Init+0x1dc>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	1e58      	subs	r0, r3, #1
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6859      	ldr	r1, [r3, #4]
 800315c:	460b      	mov	r3, r1
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	440b      	add	r3, r1
 8003162:	0099      	lsls	r1, r3, #2
 8003164:	440b      	add	r3, r1
 8003166:	fbb0 f3f3 	udiv	r3, r0, r3
 800316a:	3301      	adds	r3, #1
 800316c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003170:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003174:	6879      	ldr	r1, [r7, #4]
 8003176:	6809      	ldr	r1, [r1, #0]
 8003178:	4313      	orrs	r3, r2
 800317a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	69da      	ldr	r2, [r3, #28]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	431a      	orrs	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	430a      	orrs	r2, r1
 8003196:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80031a2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	6911      	ldr	r1, [r2, #16]
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	68d2      	ldr	r2, [r2, #12]
 80031ae:	4311      	orrs	r1, r2
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	6812      	ldr	r2, [r2, #0]
 80031b4:	430b      	orrs	r3, r1
 80031b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	695a      	ldr	r2, [r3, #20]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	431a      	orrs	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	430a      	orrs	r2, r1
 80031d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f042 0201 	orr.w	r2, r2, #1
 80031e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2220      	movs	r2, #32
 80031ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	000186a0 	.word	0x000186a0
 8003210:	001e847f 	.word	0x001e847f
 8003214:	003d08ff 	.word	0x003d08ff
 8003218:	431bde83 	.word	0x431bde83
 800321c:	10624dd3 	.word	0x10624dd3

08003220 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b088      	sub	sp, #32
 8003224:	af02      	add	r7, sp, #8
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	4608      	mov	r0, r1
 800322a:	4611      	mov	r1, r2
 800322c:	461a      	mov	r2, r3
 800322e:	4603      	mov	r3, r0
 8003230:	817b      	strh	r3, [r7, #10]
 8003232:	460b      	mov	r3, r1
 8003234:	813b      	strh	r3, [r7, #8]
 8003236:	4613      	mov	r3, r2
 8003238:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800323a:	f7fe ff0d 	bl	8002058 <HAL_GetTick>
 800323e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003246:	b2db      	uxtb	r3, r3
 8003248:	2b20      	cmp	r3, #32
 800324a:	f040 80d9 	bne.w	8003400 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	9300      	str	r3, [sp, #0]
 8003252:	2319      	movs	r3, #25
 8003254:	2201      	movs	r2, #1
 8003256:	496d      	ldr	r1, [pc, #436]	@ (800340c <HAL_I2C_Mem_Write+0x1ec>)
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	f000 fccd 	bl	8003bf8 <I2C_WaitOnFlagUntilTimeout>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d001      	beq.n	8003268 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003264:	2302      	movs	r3, #2
 8003266:	e0cc      	b.n	8003402 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800326e:	2b01      	cmp	r3, #1
 8003270:	d101      	bne.n	8003276 <HAL_I2C_Mem_Write+0x56>
 8003272:	2302      	movs	r3, #2
 8003274:	e0c5      	b.n	8003402 <HAL_I2C_Mem_Write+0x1e2>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0301 	and.w	r3, r3, #1
 8003288:	2b01      	cmp	r3, #1
 800328a:	d007      	beq.n	800329c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f042 0201 	orr.w	r2, r2, #1
 800329a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2221      	movs	r2, #33	@ 0x21
 80032b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2240      	movs	r2, #64	@ 0x40
 80032b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2200      	movs	r2, #0
 80032c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6a3a      	ldr	r2, [r7, #32]
 80032c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80032cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	4a4d      	ldr	r2, [pc, #308]	@ (8003410 <HAL_I2C_Mem_Write+0x1f0>)
 80032dc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032de:	88f8      	ldrh	r0, [r7, #6]
 80032e0:	893a      	ldrh	r2, [r7, #8]
 80032e2:	8979      	ldrh	r1, [r7, #10]
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	9301      	str	r3, [sp, #4]
 80032e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ea:	9300      	str	r3, [sp, #0]
 80032ec:	4603      	mov	r3, r0
 80032ee:	68f8      	ldr	r0, [r7, #12]
 80032f0:	f000 fb04 	bl	80038fc <I2C_RequestMemoryWrite>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d052      	beq.n	80033a0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e081      	b.n	8003402 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032fe:	697a      	ldr	r2, [r7, #20]
 8003300:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003302:	68f8      	ldr	r0, [r7, #12]
 8003304:	f000 fd92 	bl	8003e2c <I2C_WaitOnTXEFlagUntilTimeout>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00d      	beq.n	800332a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003312:	2b04      	cmp	r3, #4
 8003314:	d107      	bne.n	8003326 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003324:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e06b      	b.n	8003402 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800332e:	781a      	ldrb	r2, [r3, #0]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800333a:	1c5a      	adds	r2, r3, #1
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003344:	3b01      	subs	r3, #1
 8003346:	b29a      	uxth	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003350:	b29b      	uxth	r3, r3
 8003352:	3b01      	subs	r3, #1
 8003354:	b29a      	uxth	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	695b      	ldr	r3, [r3, #20]
 8003360:	f003 0304 	and.w	r3, r3, #4
 8003364:	2b04      	cmp	r3, #4
 8003366:	d11b      	bne.n	80033a0 <HAL_I2C_Mem_Write+0x180>
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800336c:	2b00      	cmp	r3, #0
 800336e:	d017      	beq.n	80033a0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003374:	781a      	ldrb	r2, [r3, #0]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003380:	1c5a      	adds	r2, r3, #1
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800338a:	3b01      	subs	r3, #1
 800338c:	b29a      	uxth	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003396:	b29b      	uxth	r3, r3
 8003398:	3b01      	subs	r3, #1
 800339a:	b29a      	uxth	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d1aa      	bne.n	80032fe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033a8:	697a      	ldr	r2, [r7, #20]
 80033aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	f000 fd85 	bl	8003ebc <I2C_WaitOnBTFFlagUntilTimeout>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00d      	beq.n	80033d4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033bc:	2b04      	cmp	r3, #4
 80033be:	d107      	bne.n	80033d0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033ce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e016      	b.n	8003402 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2220      	movs	r2, #32
 80033e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80033fc:	2300      	movs	r3, #0
 80033fe:	e000      	b.n	8003402 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003400:	2302      	movs	r3, #2
  }
}
 8003402:	4618      	mov	r0, r3
 8003404:	3718      	adds	r7, #24
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	00100002 	.word	0x00100002
 8003410:	ffff0000 	.word	0xffff0000

08003414 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b08c      	sub	sp, #48	@ 0x30
 8003418:	af02      	add	r7, sp, #8
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	4608      	mov	r0, r1
 800341e:	4611      	mov	r1, r2
 8003420:	461a      	mov	r2, r3
 8003422:	4603      	mov	r3, r0
 8003424:	817b      	strh	r3, [r7, #10]
 8003426:	460b      	mov	r3, r1
 8003428:	813b      	strh	r3, [r7, #8]
 800342a:	4613      	mov	r3, r2
 800342c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800342e:	2300      	movs	r3, #0
 8003430:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003432:	f7fe fe11 	bl	8002058 <HAL_GetTick>
 8003436:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800343e:	b2db      	uxtb	r3, r3
 8003440:	2b20      	cmp	r3, #32
 8003442:	f040 8250 	bne.w	80038e6 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003448:	9300      	str	r3, [sp, #0]
 800344a:	2319      	movs	r3, #25
 800344c:	2201      	movs	r2, #1
 800344e:	4982      	ldr	r1, [pc, #520]	@ (8003658 <HAL_I2C_Mem_Read+0x244>)
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f000 fbd1 	bl	8003bf8 <I2C_WaitOnFlagUntilTimeout>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d001      	beq.n	8003460 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800345c:	2302      	movs	r3, #2
 800345e:	e243      	b.n	80038e8 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003466:	2b01      	cmp	r3, #1
 8003468:	d101      	bne.n	800346e <HAL_I2C_Mem_Read+0x5a>
 800346a:	2302      	movs	r3, #2
 800346c:	e23c      	b.n	80038e8 <HAL_I2C_Mem_Read+0x4d4>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2201      	movs	r2, #1
 8003472:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	2b01      	cmp	r3, #1
 8003482:	d007      	beq.n	8003494 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f042 0201 	orr.w	r2, r2, #1
 8003492:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2222      	movs	r2, #34	@ 0x22
 80034a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2240      	movs	r2, #64	@ 0x40
 80034b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80034c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	4a62      	ldr	r2, [pc, #392]	@ (800365c <HAL_I2C_Mem_Read+0x248>)
 80034d4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80034d6:	88f8      	ldrh	r0, [r7, #6]
 80034d8:	893a      	ldrh	r2, [r7, #8]
 80034da:	8979      	ldrh	r1, [r7, #10]
 80034dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034de:	9301      	str	r3, [sp, #4]
 80034e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034e2:	9300      	str	r3, [sp, #0]
 80034e4:	4603      	mov	r3, r0
 80034e6:	68f8      	ldr	r0, [r7, #12]
 80034e8:	f000 fa9e 	bl	8003a28 <I2C_RequestMemoryRead>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e1f8      	b.n	80038e8 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d113      	bne.n	8003526 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034fe:	2300      	movs	r3, #0
 8003500:	61fb      	str	r3, [r7, #28]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	695b      	ldr	r3, [r3, #20]
 8003508:	61fb      	str	r3, [r7, #28]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	61fb      	str	r3, [r7, #28]
 8003512:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003522:	601a      	str	r2, [r3, #0]
 8003524:	e1cc      	b.n	80038c0 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800352a:	2b01      	cmp	r3, #1
 800352c:	d11e      	bne.n	800356c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800353c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800353e:	b672      	cpsid	i
}
 8003540:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003542:	2300      	movs	r3, #0
 8003544:	61bb      	str	r3, [r7, #24]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	695b      	ldr	r3, [r3, #20]
 800354c:	61bb      	str	r3, [r7, #24]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	699b      	ldr	r3, [r3, #24]
 8003554:	61bb      	str	r3, [r7, #24]
 8003556:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003566:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003568:	b662      	cpsie	i
}
 800356a:	e035      	b.n	80035d8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003570:	2b02      	cmp	r3, #2
 8003572:	d11e      	bne.n	80035b2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003582:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003584:	b672      	cpsid	i
}
 8003586:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003588:	2300      	movs	r3, #0
 800358a:	617b      	str	r3, [r7, #20]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	617b      	str	r3, [r7, #20]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	617b      	str	r3, [r7, #20]
 800359c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035ac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80035ae:	b662      	cpsie	i
}
 80035b0:	e012      	b.n	80035d8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80035c0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035c2:	2300      	movs	r3, #0
 80035c4:	613b      	str	r3, [r7, #16]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	695b      	ldr	r3, [r3, #20]
 80035cc:	613b      	str	r3, [r7, #16]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	613b      	str	r3, [r7, #16]
 80035d6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80035d8:	e172      	b.n	80038c0 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035de:	2b03      	cmp	r3, #3
 80035e0:	f200 811f 	bhi.w	8003822 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d123      	bne.n	8003634 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035ee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80035f0:	68f8      	ldr	r0, [r7, #12]
 80035f2:	f000 fcab 	bl	8003f4c <I2C_WaitOnRXNEFlagUntilTimeout>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d001      	beq.n	8003600 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e173      	b.n	80038e8 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	691a      	ldr	r2, [r3, #16]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800360a:	b2d2      	uxtb	r2, r2
 800360c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003612:	1c5a      	adds	r2, r3, #1
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800361c:	3b01      	subs	r3, #1
 800361e:	b29a      	uxth	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003628:	b29b      	uxth	r3, r3
 800362a:	3b01      	subs	r3, #1
 800362c:	b29a      	uxth	r2, r3
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003632:	e145      	b.n	80038c0 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003638:	2b02      	cmp	r3, #2
 800363a:	d152      	bne.n	80036e2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800363c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800363e:	9300      	str	r3, [sp, #0]
 8003640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003642:	2200      	movs	r2, #0
 8003644:	4906      	ldr	r1, [pc, #24]	@ (8003660 <HAL_I2C_Mem_Read+0x24c>)
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f000 fad6 	bl	8003bf8 <I2C_WaitOnFlagUntilTimeout>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d008      	beq.n	8003664 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e148      	b.n	80038e8 <HAL_I2C_Mem_Read+0x4d4>
 8003656:	bf00      	nop
 8003658:	00100002 	.word	0x00100002
 800365c:	ffff0000 	.word	0xffff0000
 8003660:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003664:	b672      	cpsid	i
}
 8003666:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003676:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	691a      	ldr	r2, [r3, #16]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003682:	b2d2      	uxtb	r2, r2
 8003684:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800368a:	1c5a      	adds	r2, r3, #1
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003694:	3b01      	subs	r3, #1
 8003696:	b29a      	uxth	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	3b01      	subs	r3, #1
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80036aa:	b662      	cpsie	i
}
 80036ac:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	691a      	ldr	r2, [r3, #16]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b8:	b2d2      	uxtb	r2, r2
 80036ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c0:	1c5a      	adds	r2, r3, #1
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036ca:	3b01      	subs	r3, #1
 80036cc:	b29a      	uxth	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	3b01      	subs	r3, #1
 80036da:	b29a      	uxth	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80036e0:	e0ee      	b.n	80038c0 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e4:	9300      	str	r3, [sp, #0]
 80036e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036e8:	2200      	movs	r2, #0
 80036ea:	4981      	ldr	r1, [pc, #516]	@ (80038f0 <HAL_I2C_Mem_Read+0x4dc>)
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f000 fa83 	bl	8003bf8 <I2C_WaitOnFlagUntilTimeout>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d001      	beq.n	80036fc <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e0f5      	b.n	80038e8 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800370a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800370c:	b672      	cpsid	i
}
 800370e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	691a      	ldr	r2, [r3, #16]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800371a:	b2d2      	uxtb	r2, r2
 800371c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003722:	1c5a      	adds	r2, r3, #1
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800372c:	3b01      	subs	r3, #1
 800372e:	b29a      	uxth	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003738:	b29b      	uxth	r3, r3
 800373a:	3b01      	subs	r3, #1
 800373c:	b29a      	uxth	r2, r3
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003742:	4b6c      	ldr	r3, [pc, #432]	@ (80038f4 <HAL_I2C_Mem_Read+0x4e0>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	08db      	lsrs	r3, r3, #3
 8003748:	4a6b      	ldr	r2, [pc, #428]	@ (80038f8 <HAL_I2C_Mem_Read+0x4e4>)
 800374a:	fba2 2303 	umull	r2, r3, r2, r3
 800374e:	0a1a      	lsrs	r2, r3, #8
 8003750:	4613      	mov	r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	4413      	add	r3, r2
 8003756:	00da      	lsls	r2, r3, #3
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800375c:	6a3b      	ldr	r3, [r7, #32]
 800375e:	3b01      	subs	r3, #1
 8003760:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003762:	6a3b      	ldr	r3, [r7, #32]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d118      	bne.n	800379a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2220      	movs	r2, #32
 8003772:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003782:	f043 0220 	orr.w	r2, r3, #32
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800378a:	b662      	cpsie	i
}
 800378c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e0a6      	b.n	80038e8 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	695b      	ldr	r3, [r3, #20]
 80037a0:	f003 0304 	and.w	r3, r3, #4
 80037a4:	2b04      	cmp	r3, #4
 80037a6:	d1d9      	bne.n	800375c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	691a      	ldr	r2, [r3, #16]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c2:	b2d2      	uxtb	r2, r2
 80037c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ca:	1c5a      	adds	r2, r3, #1
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037d4:	3b01      	subs	r3, #1
 80037d6:	b29a      	uxth	r2, r3
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	3b01      	subs	r3, #1
 80037e4:	b29a      	uxth	r2, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80037ea:	b662      	cpsie	i
}
 80037ec:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	691a      	ldr	r2, [r3, #16]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f8:	b2d2      	uxtb	r2, r2
 80037fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003800:	1c5a      	adds	r2, r3, #1
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800380a:	3b01      	subs	r3, #1
 800380c:	b29a      	uxth	r2, r3
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003816:	b29b      	uxth	r3, r3
 8003818:	3b01      	subs	r3, #1
 800381a:	b29a      	uxth	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003820:	e04e      	b.n	80038c0 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003822:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003824:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003826:	68f8      	ldr	r0, [r7, #12]
 8003828:	f000 fb90 	bl	8003f4c <I2C_WaitOnRXNEFlagUntilTimeout>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d001      	beq.n	8003836 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e058      	b.n	80038e8 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	691a      	ldr	r2, [r3, #16]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003840:	b2d2      	uxtb	r2, r2
 8003842:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003848:	1c5a      	adds	r2, r3, #1
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003852:	3b01      	subs	r3, #1
 8003854:	b29a      	uxth	r2, r3
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800385e:	b29b      	uxth	r3, r3
 8003860:	3b01      	subs	r3, #1
 8003862:	b29a      	uxth	r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	f003 0304 	and.w	r3, r3, #4
 8003872:	2b04      	cmp	r3, #4
 8003874:	d124      	bne.n	80038c0 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800387a:	2b03      	cmp	r3, #3
 800387c:	d107      	bne.n	800388e <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800388c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	691a      	ldr	r2, [r3, #16]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003898:	b2d2      	uxtb	r2, r2
 800389a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a0:	1c5a      	adds	r2, r3, #1
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038aa:	3b01      	subs	r3, #1
 80038ac:	b29a      	uxth	r2, r3
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	3b01      	subs	r3, #1
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f47f ae88 	bne.w	80035da <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2220      	movs	r2, #32
 80038ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80038e2:	2300      	movs	r3, #0
 80038e4:	e000      	b.n	80038e8 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80038e6:	2302      	movs	r3, #2
  }
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3728      	adds	r7, #40	@ 0x28
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	00010004 	.word	0x00010004
 80038f4:	20000050 	.word	0x20000050
 80038f8:	14f8b589 	.word	0x14f8b589

080038fc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b088      	sub	sp, #32
 8003900:	af02      	add	r7, sp, #8
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	4608      	mov	r0, r1
 8003906:	4611      	mov	r1, r2
 8003908:	461a      	mov	r2, r3
 800390a:	4603      	mov	r3, r0
 800390c:	817b      	strh	r3, [r7, #10]
 800390e:	460b      	mov	r3, r1
 8003910:	813b      	strh	r3, [r7, #8]
 8003912:	4613      	mov	r3, r2
 8003914:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003924:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003928:	9300      	str	r3, [sp, #0]
 800392a:	6a3b      	ldr	r3, [r7, #32]
 800392c:	2200      	movs	r2, #0
 800392e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f000 f960 	bl	8003bf8 <I2C_WaitOnFlagUntilTimeout>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00d      	beq.n	800395a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003948:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800394c:	d103      	bne.n	8003956 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003954:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e05f      	b.n	8003a1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800395a:	897b      	ldrh	r3, [r7, #10]
 800395c:	b2db      	uxtb	r3, r3
 800395e:	461a      	mov	r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003968:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800396a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800396c:	6a3a      	ldr	r2, [r7, #32]
 800396e:	492d      	ldr	r1, [pc, #180]	@ (8003a24 <I2C_RequestMemoryWrite+0x128>)
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	f000 f9bb 	bl	8003cec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d001      	beq.n	8003980 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e04c      	b.n	8003a1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003980:	2300      	movs	r3, #0
 8003982:	617b      	str	r3, [r7, #20]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	617b      	str	r3, [r7, #20]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	617b      	str	r3, [r7, #20]
 8003994:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003996:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003998:	6a39      	ldr	r1, [r7, #32]
 800399a:	68f8      	ldr	r0, [r7, #12]
 800399c:	f000 fa46 	bl	8003e2c <I2C_WaitOnTXEFlagUntilTimeout>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00d      	beq.n	80039c2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039aa:	2b04      	cmp	r3, #4
 80039ac:	d107      	bne.n	80039be <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e02b      	b.n	8003a1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80039c2:	88fb      	ldrh	r3, [r7, #6]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d105      	bne.n	80039d4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80039c8:	893b      	ldrh	r3, [r7, #8]
 80039ca:	b2da      	uxtb	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	611a      	str	r2, [r3, #16]
 80039d2:	e021      	b.n	8003a18 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80039d4:	893b      	ldrh	r3, [r7, #8]
 80039d6:	0a1b      	lsrs	r3, r3, #8
 80039d8:	b29b      	uxth	r3, r3
 80039da:	b2da      	uxtb	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039e4:	6a39      	ldr	r1, [r7, #32]
 80039e6:	68f8      	ldr	r0, [r7, #12]
 80039e8:	f000 fa20 	bl	8003e2c <I2C_WaitOnTXEFlagUntilTimeout>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00d      	beq.n	8003a0e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f6:	2b04      	cmp	r3, #4
 80039f8:	d107      	bne.n	8003a0a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a08:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e005      	b.n	8003a1a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a0e:	893b      	ldrh	r3, [r7, #8]
 8003a10:	b2da      	uxtb	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3718      	adds	r7, #24
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	00010002 	.word	0x00010002

08003a28 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b088      	sub	sp, #32
 8003a2c:	af02      	add	r7, sp, #8
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	4608      	mov	r0, r1
 8003a32:	4611      	mov	r1, r2
 8003a34:	461a      	mov	r2, r3
 8003a36:	4603      	mov	r3, r0
 8003a38:	817b      	strh	r3, [r7, #10]
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	813b      	strh	r3, [r7, #8]
 8003a3e:	4613      	mov	r3, r2
 8003a40:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003a50:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a60:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a64:	9300      	str	r3, [sp, #0]
 8003a66:	6a3b      	ldr	r3, [r7, #32]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003a6e:	68f8      	ldr	r0, [r7, #12]
 8003a70:	f000 f8c2 	bl	8003bf8 <I2C_WaitOnFlagUntilTimeout>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00d      	beq.n	8003a96 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a88:	d103      	bne.n	8003a92 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a90:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e0aa      	b.n	8003bec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a96:	897b      	ldrh	r3, [r7, #10]
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003aa4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa8:	6a3a      	ldr	r2, [r7, #32]
 8003aaa:	4952      	ldr	r1, [pc, #328]	@ (8003bf4 <I2C_RequestMemoryRead+0x1cc>)
 8003aac:	68f8      	ldr	r0, [r7, #12]
 8003aae:	f000 f91d 	bl	8003cec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d001      	beq.n	8003abc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e097      	b.n	8003bec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003abc:	2300      	movs	r3, #0
 8003abe:	617b      	str	r3, [r7, #20]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	617b      	str	r3, [r7, #20]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	617b      	str	r3, [r7, #20]
 8003ad0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ad2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ad4:	6a39      	ldr	r1, [r7, #32]
 8003ad6:	68f8      	ldr	r0, [r7, #12]
 8003ad8:	f000 f9a8 	bl	8003e2c <I2C_WaitOnTXEFlagUntilTimeout>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00d      	beq.n	8003afe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae6:	2b04      	cmp	r3, #4
 8003ae8:	d107      	bne.n	8003afa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003af8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e076      	b.n	8003bec <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003afe:	88fb      	ldrh	r3, [r7, #6]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d105      	bne.n	8003b10 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b04:	893b      	ldrh	r3, [r7, #8]
 8003b06:	b2da      	uxtb	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	611a      	str	r2, [r3, #16]
 8003b0e:	e021      	b.n	8003b54 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003b10:	893b      	ldrh	r3, [r7, #8]
 8003b12:	0a1b      	lsrs	r3, r3, #8
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	b2da      	uxtb	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b20:	6a39      	ldr	r1, [r7, #32]
 8003b22:	68f8      	ldr	r0, [r7, #12]
 8003b24:	f000 f982 	bl	8003e2c <I2C_WaitOnTXEFlagUntilTimeout>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00d      	beq.n	8003b4a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b32:	2b04      	cmp	r3, #4
 8003b34:	d107      	bne.n	8003b46 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b44:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e050      	b.n	8003bec <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b4a:	893b      	ldrh	r3, [r7, #8]
 8003b4c:	b2da      	uxtb	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b56:	6a39      	ldr	r1, [r7, #32]
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f000 f967 	bl	8003e2c <I2C_WaitOnTXEFlagUntilTimeout>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d00d      	beq.n	8003b80 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b68:	2b04      	cmp	r3, #4
 8003b6a:	d107      	bne.n	8003b7c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b7a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e035      	b.n	8003bec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b8e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b92:	9300      	str	r3, [sp, #0]
 8003b94:	6a3b      	ldr	r3, [r7, #32]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	f000 f82b 	bl	8003bf8 <I2C_WaitOnFlagUntilTimeout>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00d      	beq.n	8003bc4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bb6:	d103      	bne.n	8003bc0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bbe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e013      	b.n	8003bec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003bc4:	897b      	ldrh	r3, [r7, #10]
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	f043 0301 	orr.w	r3, r3, #1
 8003bcc:	b2da      	uxtb	r2, r3
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd6:	6a3a      	ldr	r2, [r7, #32]
 8003bd8:	4906      	ldr	r1, [pc, #24]	@ (8003bf4 <I2C_RequestMemoryRead+0x1cc>)
 8003bda:	68f8      	ldr	r0, [r7, #12]
 8003bdc:	f000 f886 	bl	8003cec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e000      	b.n	8003bec <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3718      	adds	r7, #24
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	00010002 	.word	0x00010002

08003bf8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	603b      	str	r3, [r7, #0]
 8003c04:	4613      	mov	r3, r2
 8003c06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c08:	e048      	b.n	8003c9c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c10:	d044      	beq.n	8003c9c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c12:	f7fe fa21 	bl	8002058 <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	683a      	ldr	r2, [r7, #0]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d302      	bcc.n	8003c28 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d139      	bne.n	8003c9c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	0c1b      	lsrs	r3, r3, #16
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d10d      	bne.n	8003c4e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	695b      	ldr	r3, [r3, #20]
 8003c38:	43da      	mvns	r2, r3
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	bf0c      	ite	eq
 8003c44:	2301      	moveq	r3, #1
 8003c46:	2300      	movne	r3, #0
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	e00c      	b.n	8003c68 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	43da      	mvns	r2, r3
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	4013      	ands	r3, r2
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	bf0c      	ite	eq
 8003c60:	2301      	moveq	r3, #1
 8003c62:	2300      	movne	r3, #0
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	461a      	mov	r2, r3
 8003c68:	79fb      	ldrb	r3, [r7, #7]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d116      	bne.n	8003c9c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2200      	movs	r2, #0
 8003c72:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2220      	movs	r2, #32
 8003c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c88:	f043 0220 	orr.w	r2, r3, #32
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e023      	b.n	8003ce4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	0c1b      	lsrs	r3, r3, #16
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d10d      	bne.n	8003cc2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	695b      	ldr	r3, [r3, #20]
 8003cac:	43da      	mvns	r2, r3
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	bf0c      	ite	eq
 8003cb8:	2301      	moveq	r3, #1
 8003cba:	2300      	movne	r3, #0
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	e00c      	b.n	8003cdc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	699b      	ldr	r3, [r3, #24]
 8003cc8:	43da      	mvns	r2, r3
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	4013      	ands	r3, r2
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	bf0c      	ite	eq
 8003cd4:	2301      	moveq	r3, #1
 8003cd6:	2300      	movne	r3, #0
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	461a      	mov	r2, r3
 8003cdc:	79fb      	ldrb	r3, [r7, #7]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d093      	beq.n	8003c0a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3710      	adds	r7, #16
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	607a      	str	r2, [r7, #4]
 8003cf8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003cfa:	e071      	b.n	8003de0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d0a:	d123      	bne.n	8003d54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d1a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003d24:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2220      	movs	r2, #32
 8003d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d40:	f043 0204 	orr.w	r2, r3, #4
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e067      	b.n	8003e24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d5a:	d041      	beq.n	8003de0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d5c:	f7fe f97c 	bl	8002058 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d302      	bcc.n	8003d72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d136      	bne.n	8003de0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	0c1b      	lsrs	r3, r3, #16
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d10c      	bne.n	8003d96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	43da      	mvns	r2, r3
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	4013      	ands	r3, r2
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	bf14      	ite	ne
 8003d8e:	2301      	movne	r3, #1
 8003d90:	2300      	moveq	r3, #0
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	e00b      	b.n	8003dae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	43da      	mvns	r2, r3
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	4013      	ands	r3, r2
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	bf14      	ite	ne
 8003da8:	2301      	movne	r3, #1
 8003daa:	2300      	moveq	r3, #0
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d016      	beq.n	8003de0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2200      	movs	r2, #0
 8003db6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2220      	movs	r2, #32
 8003dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dcc:	f043 0220 	orr.w	r2, r3, #32
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e021      	b.n	8003e24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	0c1b      	lsrs	r3, r3, #16
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d10c      	bne.n	8003e04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	695b      	ldr	r3, [r3, #20]
 8003df0:	43da      	mvns	r2, r3
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	4013      	ands	r3, r2
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	bf14      	ite	ne
 8003dfc:	2301      	movne	r3, #1
 8003dfe:	2300      	moveq	r3, #0
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	e00b      	b.n	8003e1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	699b      	ldr	r3, [r3, #24]
 8003e0a:	43da      	mvns	r2, r3
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	4013      	ands	r3, r2
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	bf14      	ite	ne
 8003e16:	2301      	movne	r3, #1
 8003e18:	2300      	moveq	r3, #0
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f47f af6d 	bne.w	8003cfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003e22:	2300      	movs	r3, #0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3710      	adds	r7, #16
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e38:	e034      	b.n	8003ea4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e3a:	68f8      	ldr	r0, [r7, #12]
 8003e3c:	f000 f8e3 	bl	8004006 <I2C_IsAcknowledgeFailed>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d001      	beq.n	8003e4a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e034      	b.n	8003eb4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e50:	d028      	beq.n	8003ea4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e52:	f7fe f901 	bl	8002058 <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	68ba      	ldr	r2, [r7, #8]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d302      	bcc.n	8003e68 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d11d      	bne.n	8003ea4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e72:	2b80      	cmp	r3, #128	@ 0x80
 8003e74:	d016      	beq.n	8003ea4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2220      	movs	r2, #32
 8003e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e90:	f043 0220 	orr.w	r2, r3, #32
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e007      	b.n	8003eb4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eae:	2b80      	cmp	r3, #128	@ 0x80
 8003eb0:	d1c3      	bne.n	8003e3a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3710      	adds	r7, #16
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ec8:	e034      	b.n	8003f34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003eca:	68f8      	ldr	r0, [r7, #12]
 8003ecc:	f000 f89b 	bl	8004006 <I2C_IsAcknowledgeFailed>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e034      	b.n	8003f44 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee0:	d028      	beq.n	8003f34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ee2:	f7fe f8b9 	bl	8002058 <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	68ba      	ldr	r2, [r7, #8]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d302      	bcc.n	8003ef8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d11d      	bne.n	8003f34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	f003 0304 	and.w	r3, r3, #4
 8003f02:	2b04      	cmp	r3, #4
 8003f04:	d016      	beq.n	8003f34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2220      	movs	r2, #32
 8003f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f20:	f043 0220 	orr.w	r2, r3, #32
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e007      	b.n	8003f44 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	f003 0304 	and.w	r3, r3, #4
 8003f3e:	2b04      	cmp	r3, #4
 8003f40:	d1c3      	bne.n	8003eca <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f42:	2300      	movs	r3, #0
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3710      	adds	r7, #16
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f58:	e049      	b.n	8003fee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	695b      	ldr	r3, [r3, #20]
 8003f60:	f003 0310 	and.w	r3, r3, #16
 8003f64:	2b10      	cmp	r3, #16
 8003f66:	d119      	bne.n	8003f9c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f06f 0210 	mvn.w	r2, #16
 8003f70:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2200      	movs	r2, #0
 8003f76:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e030      	b.n	8003ffe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f9c:	f7fe f85c 	bl	8002058 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	68ba      	ldr	r2, [r7, #8]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d302      	bcc.n	8003fb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d11d      	bne.n	8003fee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	695b      	ldr	r3, [r3, #20]
 8003fb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fbc:	2b40      	cmp	r3, #64	@ 0x40
 8003fbe:	d016      	beq.n	8003fee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2220      	movs	r2, #32
 8003fca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fda:	f043 0220 	orr.w	r2, r3, #32
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e007      	b.n	8003ffe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	695b      	ldr	r3, [r3, #20]
 8003ff4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ff8:	2b40      	cmp	r3, #64	@ 0x40
 8003ffa:	d1ae      	bne.n	8003f5a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3710      	adds	r7, #16
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}

08004006 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004006:	b480      	push	{r7}
 8004008:	b083      	sub	sp, #12
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	695b      	ldr	r3, [r3, #20]
 8004014:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004018:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800401c:	d11b      	bne.n	8004056 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004026:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2220      	movs	r2, #32
 8004032:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004042:	f043 0204 	orr.w	r2, r3, #4
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e000      	b.n	8004058 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	bc80      	pop	{r7}
 8004060:	4770      	bx	lr
	...

08004064 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b086      	sub	sp, #24
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d101      	bne.n	8004076 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e272      	b.n	800455c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	2b00      	cmp	r3, #0
 8004080:	f000 8087 	beq.w	8004192 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004084:	4b92      	ldr	r3, [pc, #584]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f003 030c 	and.w	r3, r3, #12
 800408c:	2b04      	cmp	r3, #4
 800408e:	d00c      	beq.n	80040aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004090:	4b8f      	ldr	r3, [pc, #572]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f003 030c 	and.w	r3, r3, #12
 8004098:	2b08      	cmp	r3, #8
 800409a:	d112      	bne.n	80040c2 <HAL_RCC_OscConfig+0x5e>
 800409c:	4b8c      	ldr	r3, [pc, #560]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040a8:	d10b      	bne.n	80040c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040aa:	4b89      	ldr	r3, [pc, #548]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d06c      	beq.n	8004190 <HAL_RCC_OscConfig+0x12c>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d168      	bne.n	8004190 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e24c      	b.n	800455c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040ca:	d106      	bne.n	80040da <HAL_RCC_OscConfig+0x76>
 80040cc:	4b80      	ldr	r3, [pc, #512]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a7f      	ldr	r2, [pc, #508]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 80040d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040d6:	6013      	str	r3, [r2, #0]
 80040d8:	e02e      	b.n	8004138 <HAL_RCC_OscConfig+0xd4>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10c      	bne.n	80040fc <HAL_RCC_OscConfig+0x98>
 80040e2:	4b7b      	ldr	r3, [pc, #492]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a7a      	ldr	r2, [pc, #488]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 80040e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040ec:	6013      	str	r3, [r2, #0]
 80040ee:	4b78      	ldr	r3, [pc, #480]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a77      	ldr	r2, [pc, #476]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 80040f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040f8:	6013      	str	r3, [r2, #0]
 80040fa:	e01d      	b.n	8004138 <HAL_RCC_OscConfig+0xd4>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004104:	d10c      	bne.n	8004120 <HAL_RCC_OscConfig+0xbc>
 8004106:	4b72      	ldr	r3, [pc, #456]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a71      	ldr	r2, [pc, #452]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 800410c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004110:	6013      	str	r3, [r2, #0]
 8004112:	4b6f      	ldr	r3, [pc, #444]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a6e      	ldr	r2, [pc, #440]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 8004118:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800411c:	6013      	str	r3, [r2, #0]
 800411e:	e00b      	b.n	8004138 <HAL_RCC_OscConfig+0xd4>
 8004120:	4b6b      	ldr	r3, [pc, #428]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a6a      	ldr	r2, [pc, #424]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 8004126:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800412a:	6013      	str	r3, [r2, #0]
 800412c:	4b68      	ldr	r3, [pc, #416]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a67      	ldr	r2, [pc, #412]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 8004132:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004136:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d013      	beq.n	8004168 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004140:	f7fd ff8a 	bl	8002058 <HAL_GetTick>
 8004144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004146:	e008      	b.n	800415a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004148:	f7fd ff86 	bl	8002058 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	2b64      	cmp	r3, #100	@ 0x64
 8004154:	d901      	bls.n	800415a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e200      	b.n	800455c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800415a:	4b5d      	ldr	r3, [pc, #372]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d0f0      	beq.n	8004148 <HAL_RCC_OscConfig+0xe4>
 8004166:	e014      	b.n	8004192 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004168:	f7fd ff76 	bl	8002058 <HAL_GetTick>
 800416c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800416e:	e008      	b.n	8004182 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004170:	f7fd ff72 	bl	8002058 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	2b64      	cmp	r3, #100	@ 0x64
 800417c:	d901      	bls.n	8004182 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e1ec      	b.n	800455c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004182:	4b53      	ldr	r3, [pc, #332]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1f0      	bne.n	8004170 <HAL_RCC_OscConfig+0x10c>
 800418e:	e000      	b.n	8004192 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004190:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b00      	cmp	r3, #0
 800419c:	d063      	beq.n	8004266 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800419e:	4b4c      	ldr	r3, [pc, #304]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f003 030c 	and.w	r3, r3, #12
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00b      	beq.n	80041c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80041aa:	4b49      	ldr	r3, [pc, #292]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f003 030c 	and.w	r3, r3, #12
 80041b2:	2b08      	cmp	r3, #8
 80041b4:	d11c      	bne.n	80041f0 <HAL_RCC_OscConfig+0x18c>
 80041b6:	4b46      	ldr	r3, [pc, #280]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d116      	bne.n	80041f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041c2:	4b43      	ldr	r3, [pc, #268]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0302 	and.w	r3, r3, #2
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d005      	beq.n	80041da <HAL_RCC_OscConfig+0x176>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d001      	beq.n	80041da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e1c0      	b.n	800455c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041da:	4b3d      	ldr	r3, [pc, #244]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	00db      	lsls	r3, r3, #3
 80041e8:	4939      	ldr	r1, [pc, #228]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041ee:	e03a      	b.n	8004266 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d020      	beq.n	800423a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041f8:	4b36      	ldr	r3, [pc, #216]	@ (80042d4 <HAL_RCC_OscConfig+0x270>)
 80041fa:	2201      	movs	r2, #1
 80041fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041fe:	f7fd ff2b 	bl	8002058 <HAL_GetTick>
 8004202:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004204:	e008      	b.n	8004218 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004206:	f7fd ff27 	bl	8002058 <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	2b02      	cmp	r3, #2
 8004212:	d901      	bls.n	8004218 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e1a1      	b.n	800455c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004218:	4b2d      	ldr	r3, [pc, #180]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0302 	and.w	r3, r3, #2
 8004220:	2b00      	cmp	r3, #0
 8004222:	d0f0      	beq.n	8004206 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004224:	4b2a      	ldr	r3, [pc, #168]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	695b      	ldr	r3, [r3, #20]
 8004230:	00db      	lsls	r3, r3, #3
 8004232:	4927      	ldr	r1, [pc, #156]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 8004234:	4313      	orrs	r3, r2
 8004236:	600b      	str	r3, [r1, #0]
 8004238:	e015      	b.n	8004266 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800423a:	4b26      	ldr	r3, [pc, #152]	@ (80042d4 <HAL_RCC_OscConfig+0x270>)
 800423c:	2200      	movs	r2, #0
 800423e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004240:	f7fd ff0a 	bl	8002058 <HAL_GetTick>
 8004244:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004246:	e008      	b.n	800425a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004248:	f7fd ff06 	bl	8002058 <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	2b02      	cmp	r3, #2
 8004254:	d901      	bls.n	800425a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e180      	b.n	800455c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800425a:	4b1d      	ldr	r3, [pc, #116]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0302 	and.w	r3, r3, #2
 8004262:	2b00      	cmp	r3, #0
 8004264:	d1f0      	bne.n	8004248 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0308 	and.w	r3, r3, #8
 800426e:	2b00      	cmp	r3, #0
 8004270:	d03a      	beq.n	80042e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d019      	beq.n	80042ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800427a:	4b17      	ldr	r3, [pc, #92]	@ (80042d8 <HAL_RCC_OscConfig+0x274>)
 800427c:	2201      	movs	r2, #1
 800427e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004280:	f7fd feea 	bl	8002058 <HAL_GetTick>
 8004284:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004286:	e008      	b.n	800429a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004288:	f7fd fee6 	bl	8002058 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b02      	cmp	r3, #2
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e160      	b.n	800455c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800429a:	4b0d      	ldr	r3, [pc, #52]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 800429c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d0f0      	beq.n	8004288 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80042a6:	2001      	movs	r0, #1
 80042a8:	f000 face 	bl	8004848 <RCC_Delay>
 80042ac:	e01c      	b.n	80042e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042ae:	4b0a      	ldr	r3, [pc, #40]	@ (80042d8 <HAL_RCC_OscConfig+0x274>)
 80042b0:	2200      	movs	r2, #0
 80042b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042b4:	f7fd fed0 	bl	8002058 <HAL_GetTick>
 80042b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042ba:	e00f      	b.n	80042dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042bc:	f7fd fecc 	bl	8002058 <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d908      	bls.n	80042dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e146      	b.n	800455c <HAL_RCC_OscConfig+0x4f8>
 80042ce:	bf00      	nop
 80042d0:	40021000 	.word	0x40021000
 80042d4:	42420000 	.word	0x42420000
 80042d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042dc:	4b92      	ldr	r3, [pc, #584]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 80042de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e0:	f003 0302 	and.w	r3, r3, #2
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1e9      	bne.n	80042bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0304 	and.w	r3, r3, #4
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	f000 80a6 	beq.w	8004442 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042f6:	2300      	movs	r3, #0
 80042f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042fa:	4b8b      	ldr	r3, [pc, #556]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 80042fc:	69db      	ldr	r3, [r3, #28]
 80042fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d10d      	bne.n	8004322 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004306:	4b88      	ldr	r3, [pc, #544]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 8004308:	69db      	ldr	r3, [r3, #28]
 800430a:	4a87      	ldr	r2, [pc, #540]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 800430c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004310:	61d3      	str	r3, [r2, #28]
 8004312:	4b85      	ldr	r3, [pc, #532]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 8004314:	69db      	ldr	r3, [r3, #28]
 8004316:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800431a:	60bb      	str	r3, [r7, #8]
 800431c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800431e:	2301      	movs	r3, #1
 8004320:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004322:	4b82      	ldr	r3, [pc, #520]	@ (800452c <HAL_RCC_OscConfig+0x4c8>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800432a:	2b00      	cmp	r3, #0
 800432c:	d118      	bne.n	8004360 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800432e:	4b7f      	ldr	r3, [pc, #508]	@ (800452c <HAL_RCC_OscConfig+0x4c8>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a7e      	ldr	r2, [pc, #504]	@ (800452c <HAL_RCC_OscConfig+0x4c8>)
 8004334:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004338:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800433a:	f7fd fe8d 	bl	8002058 <HAL_GetTick>
 800433e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004340:	e008      	b.n	8004354 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004342:	f7fd fe89 	bl	8002058 <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	2b64      	cmp	r3, #100	@ 0x64
 800434e:	d901      	bls.n	8004354 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e103      	b.n	800455c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004354:	4b75      	ldr	r3, [pc, #468]	@ (800452c <HAL_RCC_OscConfig+0x4c8>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800435c:	2b00      	cmp	r3, #0
 800435e:	d0f0      	beq.n	8004342 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d106      	bne.n	8004376 <HAL_RCC_OscConfig+0x312>
 8004368:	4b6f      	ldr	r3, [pc, #444]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 800436a:	6a1b      	ldr	r3, [r3, #32]
 800436c:	4a6e      	ldr	r2, [pc, #440]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 800436e:	f043 0301 	orr.w	r3, r3, #1
 8004372:	6213      	str	r3, [r2, #32]
 8004374:	e02d      	b.n	80043d2 <HAL_RCC_OscConfig+0x36e>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d10c      	bne.n	8004398 <HAL_RCC_OscConfig+0x334>
 800437e:	4b6a      	ldr	r3, [pc, #424]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	4a69      	ldr	r2, [pc, #420]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 8004384:	f023 0301 	bic.w	r3, r3, #1
 8004388:	6213      	str	r3, [r2, #32]
 800438a:	4b67      	ldr	r3, [pc, #412]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	4a66      	ldr	r2, [pc, #408]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 8004390:	f023 0304 	bic.w	r3, r3, #4
 8004394:	6213      	str	r3, [r2, #32]
 8004396:	e01c      	b.n	80043d2 <HAL_RCC_OscConfig+0x36e>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	2b05      	cmp	r3, #5
 800439e:	d10c      	bne.n	80043ba <HAL_RCC_OscConfig+0x356>
 80043a0:	4b61      	ldr	r3, [pc, #388]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 80043a2:	6a1b      	ldr	r3, [r3, #32]
 80043a4:	4a60      	ldr	r2, [pc, #384]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 80043a6:	f043 0304 	orr.w	r3, r3, #4
 80043aa:	6213      	str	r3, [r2, #32]
 80043ac:	4b5e      	ldr	r3, [pc, #376]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 80043ae:	6a1b      	ldr	r3, [r3, #32]
 80043b0:	4a5d      	ldr	r2, [pc, #372]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 80043b2:	f043 0301 	orr.w	r3, r3, #1
 80043b6:	6213      	str	r3, [r2, #32]
 80043b8:	e00b      	b.n	80043d2 <HAL_RCC_OscConfig+0x36e>
 80043ba:	4b5b      	ldr	r3, [pc, #364]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 80043bc:	6a1b      	ldr	r3, [r3, #32]
 80043be:	4a5a      	ldr	r2, [pc, #360]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 80043c0:	f023 0301 	bic.w	r3, r3, #1
 80043c4:	6213      	str	r3, [r2, #32]
 80043c6:	4b58      	ldr	r3, [pc, #352]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 80043c8:	6a1b      	ldr	r3, [r3, #32]
 80043ca:	4a57      	ldr	r2, [pc, #348]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 80043cc:	f023 0304 	bic.w	r3, r3, #4
 80043d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d015      	beq.n	8004406 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043da:	f7fd fe3d 	bl	8002058 <HAL_GetTick>
 80043de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043e0:	e00a      	b.n	80043f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043e2:	f7fd fe39 	bl	8002058 <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d901      	bls.n	80043f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e0b1      	b.n	800455c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043f8:	4b4b      	ldr	r3, [pc, #300]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 80043fa:	6a1b      	ldr	r3, [r3, #32]
 80043fc:	f003 0302 	and.w	r3, r3, #2
 8004400:	2b00      	cmp	r3, #0
 8004402:	d0ee      	beq.n	80043e2 <HAL_RCC_OscConfig+0x37e>
 8004404:	e014      	b.n	8004430 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004406:	f7fd fe27 	bl	8002058 <HAL_GetTick>
 800440a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800440c:	e00a      	b.n	8004424 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800440e:	f7fd fe23 	bl	8002058 <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	f241 3288 	movw	r2, #5000	@ 0x1388
 800441c:	4293      	cmp	r3, r2
 800441e:	d901      	bls.n	8004424 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e09b      	b.n	800455c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004424:	4b40      	ldr	r3, [pc, #256]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 8004426:	6a1b      	ldr	r3, [r3, #32]
 8004428:	f003 0302 	and.w	r3, r3, #2
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1ee      	bne.n	800440e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004430:	7dfb      	ldrb	r3, [r7, #23]
 8004432:	2b01      	cmp	r3, #1
 8004434:	d105      	bne.n	8004442 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004436:	4b3c      	ldr	r3, [pc, #240]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 8004438:	69db      	ldr	r3, [r3, #28]
 800443a:	4a3b      	ldr	r2, [pc, #236]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 800443c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004440:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	69db      	ldr	r3, [r3, #28]
 8004446:	2b00      	cmp	r3, #0
 8004448:	f000 8087 	beq.w	800455a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800444c:	4b36      	ldr	r3, [pc, #216]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	f003 030c 	and.w	r3, r3, #12
 8004454:	2b08      	cmp	r3, #8
 8004456:	d061      	beq.n	800451c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	69db      	ldr	r3, [r3, #28]
 800445c:	2b02      	cmp	r3, #2
 800445e:	d146      	bne.n	80044ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004460:	4b33      	ldr	r3, [pc, #204]	@ (8004530 <HAL_RCC_OscConfig+0x4cc>)
 8004462:	2200      	movs	r2, #0
 8004464:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004466:	f7fd fdf7 	bl	8002058 <HAL_GetTick>
 800446a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800446c:	e008      	b.n	8004480 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800446e:	f7fd fdf3 	bl	8002058 <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	2b02      	cmp	r3, #2
 800447a:	d901      	bls.n	8004480 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e06d      	b.n	800455c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004480:	4b29      	ldr	r3, [pc, #164]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1f0      	bne.n	800446e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a1b      	ldr	r3, [r3, #32]
 8004490:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004494:	d108      	bne.n	80044a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004496:	4b24      	ldr	r3, [pc, #144]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	4921      	ldr	r1, [pc, #132]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044a8:	4b1f      	ldr	r3, [pc, #124]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6a19      	ldr	r1, [r3, #32]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b8:	430b      	orrs	r3, r1
 80044ba:	491b      	ldr	r1, [pc, #108]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044c0:	4b1b      	ldr	r3, [pc, #108]	@ (8004530 <HAL_RCC_OscConfig+0x4cc>)
 80044c2:	2201      	movs	r2, #1
 80044c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044c6:	f7fd fdc7 	bl	8002058 <HAL_GetTick>
 80044ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044cc:	e008      	b.n	80044e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044ce:	f7fd fdc3 	bl	8002058 <HAL_GetTick>
 80044d2:	4602      	mov	r2, r0
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d901      	bls.n	80044e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e03d      	b.n	800455c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044e0:	4b11      	ldr	r3, [pc, #68]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d0f0      	beq.n	80044ce <HAL_RCC_OscConfig+0x46a>
 80044ec:	e035      	b.n	800455a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ee:	4b10      	ldr	r3, [pc, #64]	@ (8004530 <HAL_RCC_OscConfig+0x4cc>)
 80044f0:	2200      	movs	r2, #0
 80044f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044f4:	f7fd fdb0 	bl	8002058 <HAL_GetTick>
 80044f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044fa:	e008      	b.n	800450e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044fc:	f7fd fdac 	bl	8002058 <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b02      	cmp	r3, #2
 8004508:	d901      	bls.n	800450e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e026      	b.n	800455c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800450e:	4b06      	ldr	r3, [pc, #24]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1f0      	bne.n	80044fc <HAL_RCC_OscConfig+0x498>
 800451a:	e01e      	b.n	800455a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	69db      	ldr	r3, [r3, #28]
 8004520:	2b01      	cmp	r3, #1
 8004522:	d107      	bne.n	8004534 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e019      	b.n	800455c <HAL_RCC_OscConfig+0x4f8>
 8004528:	40021000 	.word	0x40021000
 800452c:	40007000 	.word	0x40007000
 8004530:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004534:	4b0b      	ldr	r3, [pc, #44]	@ (8004564 <HAL_RCC_OscConfig+0x500>)
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6a1b      	ldr	r3, [r3, #32]
 8004544:	429a      	cmp	r2, r3
 8004546:	d106      	bne.n	8004556 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004552:	429a      	cmp	r2, r3
 8004554:	d001      	beq.n	800455a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e000      	b.n	800455c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	3718      	adds	r7, #24
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	40021000 	.word	0x40021000

08004568 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d101      	bne.n	800457c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e0d0      	b.n	800471e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800457c:	4b6a      	ldr	r3, [pc, #424]	@ (8004728 <HAL_RCC_ClockConfig+0x1c0>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0307 	and.w	r3, r3, #7
 8004584:	683a      	ldr	r2, [r7, #0]
 8004586:	429a      	cmp	r2, r3
 8004588:	d910      	bls.n	80045ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800458a:	4b67      	ldr	r3, [pc, #412]	@ (8004728 <HAL_RCC_ClockConfig+0x1c0>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f023 0207 	bic.w	r2, r3, #7
 8004592:	4965      	ldr	r1, [pc, #404]	@ (8004728 <HAL_RCC_ClockConfig+0x1c0>)
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	4313      	orrs	r3, r2
 8004598:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800459a:	4b63      	ldr	r3, [pc, #396]	@ (8004728 <HAL_RCC_ClockConfig+0x1c0>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0307 	and.w	r3, r3, #7
 80045a2:	683a      	ldr	r2, [r7, #0]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d001      	beq.n	80045ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e0b8      	b.n	800471e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0302 	and.w	r3, r3, #2
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d020      	beq.n	80045fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0304 	and.w	r3, r3, #4
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d005      	beq.n	80045d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045c4:	4b59      	ldr	r3, [pc, #356]	@ (800472c <HAL_RCC_ClockConfig+0x1c4>)
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	4a58      	ldr	r2, [pc, #352]	@ (800472c <HAL_RCC_ClockConfig+0x1c4>)
 80045ca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80045ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0308 	and.w	r3, r3, #8
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d005      	beq.n	80045e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045dc:	4b53      	ldr	r3, [pc, #332]	@ (800472c <HAL_RCC_ClockConfig+0x1c4>)
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	4a52      	ldr	r2, [pc, #328]	@ (800472c <HAL_RCC_ClockConfig+0x1c4>)
 80045e2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80045e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045e8:	4b50      	ldr	r3, [pc, #320]	@ (800472c <HAL_RCC_ClockConfig+0x1c4>)
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	494d      	ldr	r1, [pc, #308]	@ (800472c <HAL_RCC_ClockConfig+0x1c4>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0301 	and.w	r3, r3, #1
 8004602:	2b00      	cmp	r3, #0
 8004604:	d040      	beq.n	8004688 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d107      	bne.n	800461e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800460e:	4b47      	ldr	r3, [pc, #284]	@ (800472c <HAL_RCC_ClockConfig+0x1c4>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d115      	bne.n	8004646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e07f      	b.n	800471e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	2b02      	cmp	r3, #2
 8004624:	d107      	bne.n	8004636 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004626:	4b41      	ldr	r3, [pc, #260]	@ (800472c <HAL_RCC_ClockConfig+0x1c4>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d109      	bne.n	8004646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e073      	b.n	800471e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004636:	4b3d      	ldr	r3, [pc, #244]	@ (800472c <HAL_RCC_ClockConfig+0x1c4>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	2b00      	cmp	r3, #0
 8004640:	d101      	bne.n	8004646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e06b      	b.n	800471e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004646:	4b39      	ldr	r3, [pc, #228]	@ (800472c <HAL_RCC_ClockConfig+0x1c4>)
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f023 0203 	bic.w	r2, r3, #3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	4936      	ldr	r1, [pc, #216]	@ (800472c <HAL_RCC_ClockConfig+0x1c4>)
 8004654:	4313      	orrs	r3, r2
 8004656:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004658:	f7fd fcfe 	bl	8002058 <HAL_GetTick>
 800465c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800465e:	e00a      	b.n	8004676 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004660:	f7fd fcfa 	bl	8002058 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800466e:	4293      	cmp	r3, r2
 8004670:	d901      	bls.n	8004676 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e053      	b.n	800471e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004676:	4b2d      	ldr	r3, [pc, #180]	@ (800472c <HAL_RCC_ClockConfig+0x1c4>)
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f003 020c 	and.w	r2, r3, #12
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	429a      	cmp	r2, r3
 8004686:	d1eb      	bne.n	8004660 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004688:	4b27      	ldr	r3, [pc, #156]	@ (8004728 <HAL_RCC_ClockConfig+0x1c0>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0307 	and.w	r3, r3, #7
 8004690:	683a      	ldr	r2, [r7, #0]
 8004692:	429a      	cmp	r2, r3
 8004694:	d210      	bcs.n	80046b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004696:	4b24      	ldr	r3, [pc, #144]	@ (8004728 <HAL_RCC_ClockConfig+0x1c0>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f023 0207 	bic.w	r2, r3, #7
 800469e:	4922      	ldr	r1, [pc, #136]	@ (8004728 <HAL_RCC_ClockConfig+0x1c0>)
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046a6:	4b20      	ldr	r3, [pc, #128]	@ (8004728 <HAL_RCC_ClockConfig+0x1c0>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0307 	and.w	r3, r3, #7
 80046ae:	683a      	ldr	r2, [r7, #0]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d001      	beq.n	80046b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e032      	b.n	800471e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0304 	and.w	r3, r3, #4
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d008      	beq.n	80046d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046c4:	4b19      	ldr	r3, [pc, #100]	@ (800472c <HAL_RCC_ClockConfig+0x1c4>)
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	4916      	ldr	r1, [pc, #88]	@ (800472c <HAL_RCC_ClockConfig+0x1c4>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0308 	and.w	r3, r3, #8
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d009      	beq.n	80046f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80046e2:	4b12      	ldr	r3, [pc, #72]	@ (800472c <HAL_RCC_ClockConfig+0x1c4>)
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	00db      	lsls	r3, r3, #3
 80046f0:	490e      	ldr	r1, [pc, #56]	@ (800472c <HAL_RCC_ClockConfig+0x1c4>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80046f6:	f000 f821 	bl	800473c <HAL_RCC_GetSysClockFreq>
 80046fa:	4602      	mov	r2, r0
 80046fc:	4b0b      	ldr	r3, [pc, #44]	@ (800472c <HAL_RCC_ClockConfig+0x1c4>)
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	091b      	lsrs	r3, r3, #4
 8004702:	f003 030f 	and.w	r3, r3, #15
 8004706:	490a      	ldr	r1, [pc, #40]	@ (8004730 <HAL_RCC_ClockConfig+0x1c8>)
 8004708:	5ccb      	ldrb	r3, [r1, r3]
 800470a:	fa22 f303 	lsr.w	r3, r2, r3
 800470e:	4a09      	ldr	r2, [pc, #36]	@ (8004734 <HAL_RCC_ClockConfig+0x1cc>)
 8004710:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004712:	4b09      	ldr	r3, [pc, #36]	@ (8004738 <HAL_RCC_ClockConfig+0x1d0>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4618      	mov	r0, r3
 8004718:	f7fd fc5c 	bl	8001fd4 <HAL_InitTick>

  return HAL_OK;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3710      	adds	r7, #16
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	40022000 	.word	0x40022000
 800472c:	40021000 	.word	0x40021000
 8004730:	08005580 	.word	0x08005580
 8004734:	20000050 	.word	0x20000050
 8004738:	20000054 	.word	0x20000054

0800473c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800473c:	b480      	push	{r7}
 800473e:	b087      	sub	sp, #28
 8004740:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004742:	2300      	movs	r3, #0
 8004744:	60fb      	str	r3, [r7, #12]
 8004746:	2300      	movs	r3, #0
 8004748:	60bb      	str	r3, [r7, #8]
 800474a:	2300      	movs	r3, #0
 800474c:	617b      	str	r3, [r7, #20]
 800474e:	2300      	movs	r3, #0
 8004750:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004752:	2300      	movs	r3, #0
 8004754:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004756:	4b1e      	ldr	r3, [pc, #120]	@ (80047d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f003 030c 	and.w	r3, r3, #12
 8004762:	2b04      	cmp	r3, #4
 8004764:	d002      	beq.n	800476c <HAL_RCC_GetSysClockFreq+0x30>
 8004766:	2b08      	cmp	r3, #8
 8004768:	d003      	beq.n	8004772 <HAL_RCC_GetSysClockFreq+0x36>
 800476a:	e027      	b.n	80047bc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800476c:	4b19      	ldr	r3, [pc, #100]	@ (80047d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800476e:	613b      	str	r3, [r7, #16]
      break;
 8004770:	e027      	b.n	80047c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	0c9b      	lsrs	r3, r3, #18
 8004776:	f003 030f 	and.w	r3, r3, #15
 800477a:	4a17      	ldr	r2, [pc, #92]	@ (80047d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800477c:	5cd3      	ldrb	r3, [r2, r3]
 800477e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d010      	beq.n	80047ac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800478a:	4b11      	ldr	r3, [pc, #68]	@ (80047d0 <HAL_RCC_GetSysClockFreq+0x94>)
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	0c5b      	lsrs	r3, r3, #17
 8004790:	f003 0301 	and.w	r3, r3, #1
 8004794:	4a11      	ldr	r2, [pc, #68]	@ (80047dc <HAL_RCC_GetSysClockFreq+0xa0>)
 8004796:	5cd3      	ldrb	r3, [r2, r3]
 8004798:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a0d      	ldr	r2, [pc, #52]	@ (80047d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800479e:	fb03 f202 	mul.w	r2, r3, r2
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a8:	617b      	str	r3, [r7, #20]
 80047aa:	e004      	b.n	80047b6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a0c      	ldr	r2, [pc, #48]	@ (80047e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80047b0:	fb02 f303 	mul.w	r3, r2, r3
 80047b4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	613b      	str	r3, [r7, #16]
      break;
 80047ba:	e002      	b.n	80047c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80047bc:	4b05      	ldr	r3, [pc, #20]	@ (80047d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80047be:	613b      	str	r3, [r7, #16]
      break;
 80047c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047c2:	693b      	ldr	r3, [r7, #16]
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	371c      	adds	r7, #28
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bc80      	pop	{r7}
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	40021000 	.word	0x40021000
 80047d4:	007a1200 	.word	0x007a1200
 80047d8:	08005598 	.word	0x08005598
 80047dc:	080055a8 	.word	0x080055a8
 80047e0:	003d0900 	.word	0x003d0900

080047e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047e4:	b480      	push	{r7}
 80047e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047e8:	4b02      	ldr	r3, [pc, #8]	@ (80047f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80047ea:	681b      	ldr	r3, [r3, #0]
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bc80      	pop	{r7}
 80047f2:	4770      	bx	lr
 80047f4:	20000050 	.word	0x20000050

080047f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80047fc:	f7ff fff2 	bl	80047e4 <HAL_RCC_GetHCLKFreq>
 8004800:	4602      	mov	r2, r0
 8004802:	4b05      	ldr	r3, [pc, #20]	@ (8004818 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	0a1b      	lsrs	r3, r3, #8
 8004808:	f003 0307 	and.w	r3, r3, #7
 800480c:	4903      	ldr	r1, [pc, #12]	@ (800481c <HAL_RCC_GetPCLK1Freq+0x24>)
 800480e:	5ccb      	ldrb	r3, [r1, r3]
 8004810:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004814:	4618      	mov	r0, r3
 8004816:	bd80      	pop	{r7, pc}
 8004818:	40021000 	.word	0x40021000
 800481c:	08005590 	.word	0x08005590

08004820 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004824:	f7ff ffde 	bl	80047e4 <HAL_RCC_GetHCLKFreq>
 8004828:	4602      	mov	r2, r0
 800482a:	4b05      	ldr	r3, [pc, #20]	@ (8004840 <HAL_RCC_GetPCLK2Freq+0x20>)
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	0adb      	lsrs	r3, r3, #11
 8004830:	f003 0307 	and.w	r3, r3, #7
 8004834:	4903      	ldr	r1, [pc, #12]	@ (8004844 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004836:	5ccb      	ldrb	r3, [r1, r3]
 8004838:	fa22 f303 	lsr.w	r3, r2, r3
}
 800483c:	4618      	mov	r0, r3
 800483e:	bd80      	pop	{r7, pc}
 8004840:	40021000 	.word	0x40021000
 8004844:	08005590 	.word	0x08005590

08004848 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004848:	b480      	push	{r7}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004850:	4b0a      	ldr	r3, [pc, #40]	@ (800487c <RCC_Delay+0x34>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a0a      	ldr	r2, [pc, #40]	@ (8004880 <RCC_Delay+0x38>)
 8004856:	fba2 2303 	umull	r2, r3, r2, r3
 800485a:	0a5b      	lsrs	r3, r3, #9
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	fb02 f303 	mul.w	r3, r2, r3
 8004862:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004864:	bf00      	nop
  }
  while (Delay --);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	1e5a      	subs	r2, r3, #1
 800486a:	60fa      	str	r2, [r7, #12]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d1f9      	bne.n	8004864 <RCC_Delay+0x1c>
}
 8004870:	bf00      	nop
 8004872:	bf00      	nop
 8004874:	3714      	adds	r7, #20
 8004876:	46bd      	mov	sp, r7
 8004878:	bc80      	pop	{r7}
 800487a:	4770      	bx	lr
 800487c:	20000050 	.word	0x20000050
 8004880:	10624dd3 	.word	0x10624dd3

08004884 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b086      	sub	sp, #24
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800488c:	2300      	movs	r3, #0
 800488e:	613b      	str	r3, [r7, #16]
 8004890:	2300      	movs	r3, #0
 8004892:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0301 	and.w	r3, r3, #1
 800489c:	2b00      	cmp	r3, #0
 800489e:	d07d      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80048a0:	2300      	movs	r3, #0
 80048a2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048a4:	4b4f      	ldr	r3, [pc, #316]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048a6:	69db      	ldr	r3, [r3, #28]
 80048a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d10d      	bne.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048b0:	4b4c      	ldr	r3, [pc, #304]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048b2:	69db      	ldr	r3, [r3, #28]
 80048b4:	4a4b      	ldr	r2, [pc, #300]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048ba:	61d3      	str	r3, [r2, #28]
 80048bc:	4b49      	ldr	r3, [pc, #292]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048be:	69db      	ldr	r3, [r3, #28]
 80048c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048c4:	60bb      	str	r3, [r7, #8]
 80048c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048c8:	2301      	movs	r3, #1
 80048ca:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048cc:	4b46      	ldr	r3, [pc, #280]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d118      	bne.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048d8:	4b43      	ldr	r3, [pc, #268]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a42      	ldr	r2, [pc, #264]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048e4:	f7fd fbb8 	bl	8002058 <HAL_GetTick>
 80048e8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ea:	e008      	b.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048ec:	f7fd fbb4 	bl	8002058 <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	2b64      	cmp	r3, #100	@ 0x64
 80048f8:	d901      	bls.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e06d      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048fe:	4b3a      	ldr	r3, [pc, #232]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004906:	2b00      	cmp	r3, #0
 8004908:	d0f0      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800490a:	4b36      	ldr	r3, [pc, #216]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800490c:	6a1b      	ldr	r3, [r3, #32]
 800490e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004912:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d02e      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004922:	68fa      	ldr	r2, [r7, #12]
 8004924:	429a      	cmp	r2, r3
 8004926:	d027      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004928:	4b2e      	ldr	r3, [pc, #184]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800492a:	6a1b      	ldr	r3, [r3, #32]
 800492c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004930:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004932:	4b2e      	ldr	r3, [pc, #184]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004934:	2201      	movs	r2, #1
 8004936:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004938:	4b2c      	ldr	r3, [pc, #176]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800493a:	2200      	movs	r2, #0
 800493c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800493e:	4a29      	ldr	r2, [pc, #164]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	2b00      	cmp	r3, #0
 800494c:	d014      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800494e:	f7fd fb83 	bl	8002058 <HAL_GetTick>
 8004952:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004954:	e00a      	b.n	800496c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004956:	f7fd fb7f 	bl	8002058 <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004964:	4293      	cmp	r3, r2
 8004966:	d901      	bls.n	800496c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e036      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800496c:	4b1d      	ldr	r3, [pc, #116]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800496e:	6a1b      	ldr	r3, [r3, #32]
 8004970:	f003 0302 	and.w	r3, r3, #2
 8004974:	2b00      	cmp	r3, #0
 8004976:	d0ee      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004978:	4b1a      	ldr	r3, [pc, #104]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800497a:	6a1b      	ldr	r3, [r3, #32]
 800497c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	4917      	ldr	r1, [pc, #92]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004986:	4313      	orrs	r3, r2
 8004988:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800498a:	7dfb      	ldrb	r3, [r7, #23]
 800498c:	2b01      	cmp	r3, #1
 800498e:	d105      	bne.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004990:	4b14      	ldr	r3, [pc, #80]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004992:	69db      	ldr	r3, [r3, #28]
 8004994:	4a13      	ldr	r2, [pc, #76]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004996:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800499a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0302 	and.w	r3, r3, #2
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d008      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80049a8:	4b0e      	ldr	r3, [pc, #56]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	490b      	ldr	r1, [pc, #44]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0310 	and.w	r3, r3, #16
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d008      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049c6:	4b07      	ldr	r3, [pc, #28]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	4904      	ldr	r1, [pc, #16]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049d4:	4313      	orrs	r3, r2
 80049d6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3718      	adds	r7, #24
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	40021000 	.word	0x40021000
 80049e8:	40007000 	.word	0x40007000
 80049ec:	42420440 	.word	0x42420440

080049f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d101      	bne.n	8004a02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e042      	b.n	8004a88 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d106      	bne.n	8004a1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f7fd fa4c 	bl	8001eb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2224      	movs	r2, #36	@ 0x24
 8004a20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68da      	ldr	r2, [r3, #12]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 fcd5 	bl	80053e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	691a      	ldr	r2, [r3, #16]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004a48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	695a      	ldr	r2, [r3, #20]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004a58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68da      	ldr	r2, [r3, #12]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004a68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2220      	movs	r2, #32
 8004a74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2220      	movs	r2, #32
 8004a7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004a86:	2300      	movs	r3, #0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3708      	adds	r7, #8
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	2b20      	cmp	r3, #32
 8004aa8:	d112      	bne.n	8004ad0 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d002      	beq.n	8004ab6 <HAL_UART_Receive_IT+0x26>
 8004ab0:	88fb      	ldrh	r3, [r7, #6]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d101      	bne.n	8004aba <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e00b      	b.n	8004ad2 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2200      	movs	r2, #0
 8004abe:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004ac0:	88fb      	ldrh	r3, [r7, #6]
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	68b9      	ldr	r1, [r7, #8]
 8004ac6:	68f8      	ldr	r0, [r7, #12]
 8004ac8:	f000 fab7 	bl	800503a <UART_Start_Receive_IT>
 8004acc:	4603      	mov	r3, r0
 8004ace:	e000      	b.n	8004ad2 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004ad0:	2302      	movs	r3, #2
  }
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3710      	adds	r7, #16
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
	...

08004adc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b0ba      	sub	sp, #232	@ 0xe8
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004b02:	2300      	movs	r3, #0
 8004b04:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b12:	f003 030f 	and.w	r3, r3, #15
 8004b16:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004b1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d10f      	bne.n	8004b42 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b26:	f003 0320 	and.w	r3, r3, #32
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d009      	beq.n	8004b42 <HAL_UART_IRQHandler+0x66>
 8004b2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b32:	f003 0320 	and.w	r3, r3, #32
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d003      	beq.n	8004b42 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 fb93 	bl	8005266 <UART_Receive_IT>
      return;
 8004b40:	e25b      	b.n	8004ffa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004b42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	f000 80de 	beq.w	8004d08 <HAL_UART_IRQHandler+0x22c>
 8004b4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b50:	f003 0301 	and.w	r3, r3, #1
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d106      	bne.n	8004b66 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b5c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	f000 80d1 	beq.w	8004d08 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004b66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00b      	beq.n	8004b8a <HAL_UART_IRQHandler+0xae>
 8004b72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d005      	beq.n	8004b8a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b82:	f043 0201 	orr.w	r2, r3, #1
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b8e:	f003 0304 	and.w	r3, r3, #4
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d00b      	beq.n	8004bae <HAL_UART_IRQHandler+0xd2>
 8004b96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b9a:	f003 0301 	and.w	r3, r3, #1
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d005      	beq.n	8004bae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ba6:	f043 0202 	orr.w	r2, r3, #2
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004bae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bb2:	f003 0302 	and.w	r3, r3, #2
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00b      	beq.n	8004bd2 <HAL_UART_IRQHandler+0xf6>
 8004bba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004bbe:	f003 0301 	and.w	r3, r3, #1
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d005      	beq.n	8004bd2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bca:	f043 0204 	orr.w	r2, r3, #4
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bd6:	f003 0308 	and.w	r3, r3, #8
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d011      	beq.n	8004c02 <HAL_UART_IRQHandler+0x126>
 8004bde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004be2:	f003 0320 	and.w	r3, r3, #32
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d105      	bne.n	8004bf6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004bea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004bee:	f003 0301 	and.w	r3, r3, #1
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d005      	beq.n	8004c02 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bfa:	f043 0208 	orr.w	r2, r3, #8
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	f000 81f2 	beq.w	8004ff0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c10:	f003 0320 	and.w	r3, r3, #32
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d008      	beq.n	8004c2a <HAL_UART_IRQHandler+0x14e>
 8004c18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c1c:	f003 0320 	and.w	r3, r3, #32
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d002      	beq.n	8004c2a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f000 fb1e 	bl	8005266 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	695b      	ldr	r3, [r3, #20]
 8004c30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	bf14      	ite	ne
 8004c38:	2301      	movne	r3, #1
 8004c3a:	2300      	moveq	r3, #0
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c46:	f003 0308 	and.w	r3, r3, #8
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d103      	bne.n	8004c56 <HAL_UART_IRQHandler+0x17a>
 8004c4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d04f      	beq.n	8004cf6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 fa28 	bl	80050ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d041      	beq.n	8004cee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	3314      	adds	r3, #20
 8004c70:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c74:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004c78:	e853 3f00 	ldrex	r3, [r3]
 8004c7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004c80:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004c84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	3314      	adds	r3, #20
 8004c92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004c96:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004c9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004ca2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004ca6:	e841 2300 	strex	r3, r2, [r1]
 8004caa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004cae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d1d9      	bne.n	8004c6a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d013      	beq.n	8004ce6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cc2:	4a7e      	ldr	r2, [pc, #504]	@ (8004ebc <HAL_UART_IRQHandler+0x3e0>)
 8004cc4:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f7fd ff38 	bl	8002b40 <HAL_DMA_Abort_IT>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d016      	beq.n	8004d04 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004ce0:	4610      	mov	r0, r2
 8004ce2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ce4:	e00e      	b.n	8004d04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 f993 	bl	8005012 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cec:	e00a      	b.n	8004d04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 f98f 	bl	8005012 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cf4:	e006      	b.n	8004d04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 f98b 	bl	8005012 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004d02:	e175      	b.n	8004ff0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d04:	bf00      	nop
    return;
 8004d06:	e173      	b.n	8004ff0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	f040 814f 	bne.w	8004fb0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d16:	f003 0310 	and.w	r3, r3, #16
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	f000 8148 	beq.w	8004fb0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004d20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d24:	f003 0310 	and.w	r3, r3, #16
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	f000 8141 	beq.w	8004fb0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d2e:	2300      	movs	r3, #0
 8004d30:	60bb      	str	r3, [r7, #8]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	60bb      	str	r3, [r7, #8]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	60bb      	str	r3, [r7, #8]
 8004d42:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	695b      	ldr	r3, [r3, #20]
 8004d4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	f000 80b6 	beq.w	8004ec0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004d60:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	f000 8145 	beq.w	8004ff4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004d6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004d72:	429a      	cmp	r2, r3
 8004d74:	f080 813e 	bcs.w	8004ff4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004d7e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d84:	699b      	ldr	r3, [r3, #24]
 8004d86:	2b20      	cmp	r3, #32
 8004d88:	f000 8088 	beq.w	8004e9c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	330c      	adds	r3, #12
 8004d92:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d96:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004d9a:	e853 3f00 	ldrex	r3, [r3]
 8004d9e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004da2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004da6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004daa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	330c      	adds	r3, #12
 8004db4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004db8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004dbc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004dc4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004dc8:	e841 2300 	strex	r3, r2, [r1]
 8004dcc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004dd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d1d9      	bne.n	8004d8c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	3314      	adds	r3, #20
 8004dde:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004de2:	e853 3f00 	ldrex	r3, [r3]
 8004de6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004de8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004dea:	f023 0301 	bic.w	r3, r3, #1
 8004dee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	3314      	adds	r3, #20
 8004df8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004dfc:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004e00:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e02:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004e04:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004e08:	e841 2300 	strex	r3, r2, [r1]
 8004e0c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004e0e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d1e1      	bne.n	8004dd8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	3314      	adds	r3, #20
 8004e1a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e1e:	e853 3f00 	ldrex	r3, [r3]
 8004e22:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004e24:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e2a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	3314      	adds	r3, #20
 8004e34:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004e38:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004e3a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e3c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004e3e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004e40:	e841 2300 	strex	r3, r2, [r1]
 8004e44:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004e46:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d1e3      	bne.n	8004e14 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2220      	movs	r2, #32
 8004e50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	330c      	adds	r3, #12
 8004e60:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e64:	e853 3f00 	ldrex	r3, [r3]
 8004e68:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004e6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e6c:	f023 0310 	bic.w	r3, r3, #16
 8004e70:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	330c      	adds	r3, #12
 8004e7a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004e7e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004e80:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e82:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004e84:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004e86:	e841 2300 	strex	r3, r2, [r1]
 8004e8a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004e8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d1e3      	bne.n	8004e5a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7fd fe17 	bl	8002aca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2202      	movs	r2, #2
 8004ea0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 f8b6 	bl	8005024 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004eb8:	e09c      	b.n	8004ff4 <HAL_UART_IRQHandler+0x518>
 8004eba:	bf00      	nop
 8004ebc:	08005171 	.word	0x08005171
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	f000 808e 	beq.w	8004ff8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004edc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	f000 8089 	beq.w	8004ff8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	330c      	adds	r3, #12
 8004eec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ef0:	e853 3f00 	ldrex	r3, [r3]
 8004ef4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004ef6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ef8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004efc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	330c      	adds	r3, #12
 8004f06:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004f0a:	647a      	str	r2, [r7, #68]	@ 0x44
 8004f0c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f0e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004f10:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f12:	e841 2300 	strex	r3, r2, [r1]
 8004f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004f18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d1e3      	bne.n	8004ee6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	3314      	adds	r3, #20
 8004f24:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f28:	e853 3f00 	ldrex	r3, [r3]
 8004f2c:	623b      	str	r3, [r7, #32]
   return(result);
 8004f2e:	6a3b      	ldr	r3, [r7, #32]
 8004f30:	f023 0301 	bic.w	r3, r3, #1
 8004f34:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	3314      	adds	r3, #20
 8004f3e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004f42:	633a      	str	r2, [r7, #48]	@ 0x30
 8004f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f4a:	e841 2300 	strex	r3, r2, [r1]
 8004f4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d1e3      	bne.n	8004f1e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2220      	movs	r2, #32
 8004f5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	330c      	adds	r3, #12
 8004f6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	e853 3f00 	ldrex	r3, [r3]
 8004f72:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f023 0310 	bic.w	r3, r3, #16
 8004f7a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	330c      	adds	r3, #12
 8004f84:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004f88:	61fa      	str	r2, [r7, #28]
 8004f8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f8c:	69b9      	ldr	r1, [r7, #24]
 8004f8e:	69fa      	ldr	r2, [r7, #28]
 8004f90:	e841 2300 	strex	r3, r2, [r1]
 8004f94:	617b      	str	r3, [r7, #20]
   return(result);
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d1e3      	bne.n	8004f64 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2202      	movs	r2, #2
 8004fa0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004fa2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f000 f83b 	bl	8005024 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004fae:	e023      	b.n	8004ff8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004fb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d009      	beq.n	8004fd0 <HAL_UART_IRQHandler+0x4f4>
 8004fbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d003      	beq.n	8004fd0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f000 f8e5 	bl	8005198 <UART_Transmit_IT>
    return;
 8004fce:	e014      	b.n	8004ffa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004fd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d00e      	beq.n	8004ffa <HAL_UART_IRQHandler+0x51e>
 8004fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fe0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d008      	beq.n	8004ffa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f000 f924 	bl	8005236 <UART_EndTransmit_IT>
    return;
 8004fee:	e004      	b.n	8004ffa <HAL_UART_IRQHandler+0x51e>
    return;
 8004ff0:	bf00      	nop
 8004ff2:	e002      	b.n	8004ffa <HAL_UART_IRQHandler+0x51e>
      return;
 8004ff4:	bf00      	nop
 8004ff6:	e000      	b.n	8004ffa <HAL_UART_IRQHandler+0x51e>
      return;
 8004ff8:	bf00      	nop
  }
}
 8004ffa:	37e8      	adds	r7, #232	@ 0xe8
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005008:	bf00      	nop
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	bc80      	pop	{r7}
 8005010:	4770      	bx	lr

08005012 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005012:	b480      	push	{r7}
 8005014:	b083      	sub	sp, #12
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800501a:	bf00      	nop
 800501c:	370c      	adds	r7, #12
 800501e:	46bd      	mov	sp, r7
 8005020:	bc80      	pop	{r7}
 8005022:	4770      	bx	lr

08005024 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	460b      	mov	r3, r1
 800502e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005030:	bf00      	nop
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	bc80      	pop	{r7}
 8005038:	4770      	bx	lr

0800503a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800503a:	b480      	push	{r7}
 800503c:	b085      	sub	sp, #20
 800503e:	af00      	add	r7, sp, #0
 8005040:	60f8      	str	r0, [r7, #12]
 8005042:	60b9      	str	r1, [r7, #8]
 8005044:	4613      	mov	r3, r2
 8005046:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	68ba      	ldr	r2, [r7, #8]
 800504c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	88fa      	ldrh	r2, [r7, #6]
 8005052:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	88fa      	ldrh	r2, [r7, #6]
 8005058:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2200      	movs	r2, #0
 800505e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2222      	movs	r2, #34	@ 0x22
 8005064:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d007      	beq.n	8005080 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68da      	ldr	r2, [r3, #12]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800507e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	695a      	ldr	r2, [r3, #20]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f042 0201 	orr.w	r2, r2, #1
 800508e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68da      	ldr	r2, [r3, #12]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f042 0220 	orr.w	r2, r2, #32
 800509e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3714      	adds	r7, #20
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bc80      	pop	{r7}
 80050aa:	4770      	bx	lr

080050ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b095      	sub	sp, #84	@ 0x54
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	330c      	adds	r3, #12
 80050ba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050be:	e853 3f00 	ldrex	r3, [r3]
 80050c2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80050c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	330c      	adds	r3, #12
 80050d2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80050d4:	643a      	str	r2, [r7, #64]	@ 0x40
 80050d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80050da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80050dc:	e841 2300 	strex	r3, r2, [r1]
 80050e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80050e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d1e5      	bne.n	80050b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	3314      	adds	r3, #20
 80050ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f0:	6a3b      	ldr	r3, [r7, #32]
 80050f2:	e853 3f00 	ldrex	r3, [r3]
 80050f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	f023 0301 	bic.w	r3, r3, #1
 80050fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	3314      	adds	r3, #20
 8005106:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005108:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800510a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800510c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800510e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005110:	e841 2300 	strex	r3, r2, [r1]
 8005114:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005118:	2b00      	cmp	r3, #0
 800511a:	d1e5      	bne.n	80050e8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005120:	2b01      	cmp	r3, #1
 8005122:	d119      	bne.n	8005158 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	330c      	adds	r3, #12
 800512a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	e853 3f00 	ldrex	r3, [r3]
 8005132:	60bb      	str	r3, [r7, #8]
   return(result);
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	f023 0310 	bic.w	r3, r3, #16
 800513a:	647b      	str	r3, [r7, #68]	@ 0x44
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	330c      	adds	r3, #12
 8005142:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005144:	61ba      	str	r2, [r7, #24]
 8005146:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005148:	6979      	ldr	r1, [r7, #20]
 800514a:	69ba      	ldr	r2, [r7, #24]
 800514c:	e841 2300 	strex	r3, r2, [r1]
 8005150:	613b      	str	r3, [r7, #16]
   return(result);
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d1e5      	bne.n	8005124 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2220      	movs	r2, #32
 800515c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005166:	bf00      	nop
 8005168:	3754      	adds	r7, #84	@ 0x54
 800516a:	46bd      	mov	sp, r7
 800516c:	bc80      	pop	{r7}
 800516e:	4770      	bx	lr

08005170 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800517c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2200      	movs	r2, #0
 8005188:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800518a:	68f8      	ldr	r0, [r7, #12]
 800518c:	f7ff ff41 	bl	8005012 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005190:	bf00      	nop
 8005192:	3710      	adds	r7, #16
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005198:	b480      	push	{r7}
 800519a:	b085      	sub	sp, #20
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	2b21      	cmp	r3, #33	@ 0x21
 80051aa:	d13e      	bne.n	800522a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051b4:	d114      	bne.n	80051e0 <UART_Transmit_IT+0x48>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d110      	bne.n	80051e0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	881b      	ldrh	r3, [r3, #0]
 80051c8:	461a      	mov	r2, r3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051d2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a1b      	ldr	r3, [r3, #32]
 80051d8:	1c9a      	adds	r2, r3, #2
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	621a      	str	r2, [r3, #32]
 80051de:	e008      	b.n	80051f2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6a1b      	ldr	r3, [r3, #32]
 80051e4:	1c59      	adds	r1, r3, #1
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	6211      	str	r1, [r2, #32]
 80051ea:	781a      	ldrb	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	3b01      	subs	r3, #1
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	4619      	mov	r1, r3
 8005200:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005202:	2b00      	cmp	r3, #0
 8005204:	d10f      	bne.n	8005226 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	68da      	ldr	r2, [r3, #12]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005214:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	68da      	ldr	r2, [r3, #12]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005224:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005226:	2300      	movs	r3, #0
 8005228:	e000      	b.n	800522c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800522a:	2302      	movs	r3, #2
  }
}
 800522c:	4618      	mov	r0, r3
 800522e:	3714      	adds	r7, #20
 8005230:	46bd      	mov	sp, r7
 8005232:	bc80      	pop	{r7}
 8005234:	4770      	bx	lr

08005236 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005236:	b580      	push	{r7, lr}
 8005238:	b082      	sub	sp, #8
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	68da      	ldr	r2, [r3, #12]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800524c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2220      	movs	r2, #32
 8005252:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f7ff fed2 	bl	8005000 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3708      	adds	r7, #8
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}

08005266 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005266:	b580      	push	{r7, lr}
 8005268:	b08c      	sub	sp, #48	@ 0x30
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005274:	b2db      	uxtb	r3, r3
 8005276:	2b22      	cmp	r3, #34	@ 0x22
 8005278:	f040 80ae 	bne.w	80053d8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005284:	d117      	bne.n	80052b6 <UART_Receive_IT+0x50>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d113      	bne.n	80052b6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800528e:	2300      	movs	r3, #0
 8005290:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005296:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	b29b      	uxth	r3, r3
 80052a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052a4:	b29a      	uxth	r2, r3
 80052a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ae:	1c9a      	adds	r2, r3, #2
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	629a      	str	r2, [r3, #40]	@ 0x28
 80052b4:	e026      	b.n	8005304 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80052bc:	2300      	movs	r3, #0
 80052be:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052c8:	d007      	beq.n	80052da <UART_Receive_IT+0x74>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d10a      	bne.n	80052e8 <UART_Receive_IT+0x82>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d106      	bne.n	80052e8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	b2da      	uxtb	r2, r3
 80052e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052e4:	701a      	strb	r2, [r3, #0]
 80052e6:	e008      	b.n	80052fa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052f4:	b2da      	uxtb	r2, r3
 80052f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052f8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052fe:	1c5a      	adds	r2, r3, #1
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005308:	b29b      	uxth	r3, r3
 800530a:	3b01      	subs	r3, #1
 800530c:	b29b      	uxth	r3, r3
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	4619      	mov	r1, r3
 8005312:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005314:	2b00      	cmp	r3, #0
 8005316:	d15d      	bne.n	80053d4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68da      	ldr	r2, [r3, #12]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f022 0220 	bic.w	r2, r2, #32
 8005326:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	68da      	ldr	r2, [r3, #12]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005336:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	695a      	ldr	r2, [r3, #20]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f022 0201 	bic.w	r2, r2, #1
 8005346:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2220      	movs	r2, #32
 800534c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800535a:	2b01      	cmp	r3, #1
 800535c:	d135      	bne.n	80053ca <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	330c      	adds	r3, #12
 800536a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	e853 3f00 	ldrex	r3, [r3]
 8005372:	613b      	str	r3, [r7, #16]
   return(result);
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	f023 0310 	bic.w	r3, r3, #16
 800537a:	627b      	str	r3, [r7, #36]	@ 0x24
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	330c      	adds	r3, #12
 8005382:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005384:	623a      	str	r2, [r7, #32]
 8005386:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005388:	69f9      	ldr	r1, [r7, #28]
 800538a:	6a3a      	ldr	r2, [r7, #32]
 800538c:	e841 2300 	strex	r3, r2, [r1]
 8005390:	61bb      	str	r3, [r7, #24]
   return(result);
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d1e5      	bne.n	8005364 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0310 	and.w	r3, r3, #16
 80053a2:	2b10      	cmp	r3, #16
 80053a4:	d10a      	bne.n	80053bc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80053a6:	2300      	movs	r3, #0
 80053a8:	60fb      	str	r3, [r7, #12]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	60fb      	str	r3, [r7, #12]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	60fb      	str	r3, [r7, #12]
 80053ba:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80053c0:	4619      	mov	r1, r3
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f7ff fe2e 	bl	8005024 <HAL_UARTEx_RxEventCallback>
 80053c8:	e002      	b.n	80053d0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f7fc fc56 	bl	8001c7c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80053d0:	2300      	movs	r3, #0
 80053d2:	e002      	b.n	80053da <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80053d4:	2300      	movs	r3, #0
 80053d6:	e000      	b.n	80053da <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80053d8:	2302      	movs	r3, #2
  }
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3730      	adds	r7, #48	@ 0x30
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
	...

080053e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	68da      	ldr	r2, [r3, #12]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	430a      	orrs	r2, r1
 8005400:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	689a      	ldr	r2, [r3, #8]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	691b      	ldr	r3, [r3, #16]
 800540a:	431a      	orrs	r2, r3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	695b      	ldr	r3, [r3, #20]
 8005410:	4313      	orrs	r3, r2
 8005412:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800541e:	f023 030c 	bic.w	r3, r3, #12
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	6812      	ldr	r2, [r2, #0]
 8005426:	68b9      	ldr	r1, [r7, #8]
 8005428:	430b      	orrs	r3, r1
 800542a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	695b      	ldr	r3, [r3, #20]
 8005432:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	699a      	ldr	r2, [r3, #24]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	430a      	orrs	r2, r1
 8005440:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a2c      	ldr	r2, [pc, #176]	@ (80054f8 <UART_SetConfig+0x114>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d103      	bne.n	8005454 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800544c:	f7ff f9e8 	bl	8004820 <HAL_RCC_GetPCLK2Freq>
 8005450:	60f8      	str	r0, [r7, #12]
 8005452:	e002      	b.n	800545a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005454:	f7ff f9d0 	bl	80047f8 <HAL_RCC_GetPCLK1Freq>
 8005458:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	4613      	mov	r3, r2
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	4413      	add	r3, r2
 8005462:	009a      	lsls	r2, r3, #2
 8005464:	441a      	add	r2, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005470:	4a22      	ldr	r2, [pc, #136]	@ (80054fc <UART_SetConfig+0x118>)
 8005472:	fba2 2303 	umull	r2, r3, r2, r3
 8005476:	095b      	lsrs	r3, r3, #5
 8005478:	0119      	lsls	r1, r3, #4
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	4613      	mov	r3, r2
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	4413      	add	r3, r2
 8005482:	009a      	lsls	r2, r3, #2
 8005484:	441a      	add	r2, r3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005490:	4b1a      	ldr	r3, [pc, #104]	@ (80054fc <UART_SetConfig+0x118>)
 8005492:	fba3 0302 	umull	r0, r3, r3, r2
 8005496:	095b      	lsrs	r3, r3, #5
 8005498:	2064      	movs	r0, #100	@ 0x64
 800549a:	fb00 f303 	mul.w	r3, r0, r3
 800549e:	1ad3      	subs	r3, r2, r3
 80054a0:	011b      	lsls	r3, r3, #4
 80054a2:	3332      	adds	r3, #50	@ 0x32
 80054a4:	4a15      	ldr	r2, [pc, #84]	@ (80054fc <UART_SetConfig+0x118>)
 80054a6:	fba2 2303 	umull	r2, r3, r2, r3
 80054aa:	095b      	lsrs	r3, r3, #5
 80054ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80054b0:	4419      	add	r1, r3
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	4613      	mov	r3, r2
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	4413      	add	r3, r2
 80054ba:	009a      	lsls	r2, r3, #2
 80054bc:	441a      	add	r2, r3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80054c8:	4b0c      	ldr	r3, [pc, #48]	@ (80054fc <UART_SetConfig+0x118>)
 80054ca:	fba3 0302 	umull	r0, r3, r3, r2
 80054ce:	095b      	lsrs	r3, r3, #5
 80054d0:	2064      	movs	r0, #100	@ 0x64
 80054d2:	fb00 f303 	mul.w	r3, r0, r3
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	011b      	lsls	r3, r3, #4
 80054da:	3332      	adds	r3, #50	@ 0x32
 80054dc:	4a07      	ldr	r2, [pc, #28]	@ (80054fc <UART_SetConfig+0x118>)
 80054de:	fba2 2303 	umull	r2, r3, r2, r3
 80054e2:	095b      	lsrs	r3, r3, #5
 80054e4:	f003 020f 	and.w	r2, r3, #15
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	440a      	add	r2, r1
 80054ee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80054f0:	bf00      	nop
 80054f2:	3710      	adds	r7, #16
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}
 80054f8:	40013800 	.word	0x40013800
 80054fc:	51eb851f 	.word	0x51eb851f

08005500 <memset>:
 8005500:	4603      	mov	r3, r0
 8005502:	4402      	add	r2, r0
 8005504:	4293      	cmp	r3, r2
 8005506:	d100      	bne.n	800550a <memset+0xa>
 8005508:	4770      	bx	lr
 800550a:	f803 1b01 	strb.w	r1, [r3], #1
 800550e:	e7f9      	b.n	8005504 <memset+0x4>

08005510 <__libc_init_array>:
 8005510:	b570      	push	{r4, r5, r6, lr}
 8005512:	2600      	movs	r6, #0
 8005514:	4d0c      	ldr	r5, [pc, #48]	@ (8005548 <__libc_init_array+0x38>)
 8005516:	4c0d      	ldr	r4, [pc, #52]	@ (800554c <__libc_init_array+0x3c>)
 8005518:	1b64      	subs	r4, r4, r5
 800551a:	10a4      	asrs	r4, r4, #2
 800551c:	42a6      	cmp	r6, r4
 800551e:	d109      	bne.n	8005534 <__libc_init_array+0x24>
 8005520:	f000 f81a 	bl	8005558 <_init>
 8005524:	2600      	movs	r6, #0
 8005526:	4d0a      	ldr	r5, [pc, #40]	@ (8005550 <__libc_init_array+0x40>)
 8005528:	4c0a      	ldr	r4, [pc, #40]	@ (8005554 <__libc_init_array+0x44>)
 800552a:	1b64      	subs	r4, r4, r5
 800552c:	10a4      	asrs	r4, r4, #2
 800552e:	42a6      	cmp	r6, r4
 8005530:	d105      	bne.n	800553e <__libc_init_array+0x2e>
 8005532:	bd70      	pop	{r4, r5, r6, pc}
 8005534:	f855 3b04 	ldr.w	r3, [r5], #4
 8005538:	4798      	blx	r3
 800553a:	3601      	adds	r6, #1
 800553c:	e7ee      	b.n	800551c <__libc_init_array+0xc>
 800553e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005542:	4798      	blx	r3
 8005544:	3601      	adds	r6, #1
 8005546:	e7f2      	b.n	800552e <__libc_init_array+0x1e>
 8005548:	080055ac 	.word	0x080055ac
 800554c:	080055ac 	.word	0x080055ac
 8005550:	080055ac 	.word	0x080055ac
 8005554:	080055b0 	.word	0x080055b0

08005558 <_init>:
 8005558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800555a:	bf00      	nop
 800555c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800555e:	bc08      	pop	{r3}
 8005560:	469e      	mov	lr, r3
 8005562:	4770      	bx	lr

08005564 <_fini>:
 8005564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005566:	bf00      	nop
 8005568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800556a:	bc08      	pop	{r3}
 800556c:	469e      	mov	lr, r3
 800556e:	4770      	bx	lr
