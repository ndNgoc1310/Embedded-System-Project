
ES_Project_Digital-Clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025e8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080026f4  080026f4  000036f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002720  08002720  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002720  08002720  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002720  08002720  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002720  08002720  00003720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002724  08002724  00003724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002728  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000000c  08002734  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  08002734  00004090  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005ca0  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001264  00000000  00000000  00009cd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006b8  00000000  00000000  0000af40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000529  00000000  00000000  0000b5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015e61  00000000  00000000  0000bb21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008869  00000000  00000000  00021982  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e6e3  00000000  00000000  0002a1eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a88ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ae0  00000000  00000000  000a8914  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  000aa3f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080026dc 	.word	0x080026dc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080026dc 	.word	0x080026dc

0800014c <decToBcd>:
/* Private user code ---------------------------------------------------------*/
#define DS3231_ADDRESS 0xD0

// Convert normal decimal numbers to binary coded decimal
uint8_t decToBcd(int val)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  return (uint8_t)( (val/10*16) + (val%10) );
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	4a0e      	ldr	r2, [pc, #56]	@ (8000190 <decToBcd+0x44>)
 8000158:	fb82 1203 	smull	r1, r2, r2, r3
 800015c:	1092      	asrs	r2, r2, #2
 800015e:	17db      	asrs	r3, r3, #31
 8000160:	1ad3      	subs	r3, r2, r3
 8000162:	b2db      	uxtb	r3, r3
 8000164:	011b      	lsls	r3, r3, #4
 8000166:	b2d8      	uxtb	r0, r3
 8000168:	687a      	ldr	r2, [r7, #4]
 800016a:	4b09      	ldr	r3, [pc, #36]	@ (8000190 <decToBcd+0x44>)
 800016c:	fb83 1302 	smull	r1, r3, r3, r2
 8000170:	1099      	asrs	r1, r3, #2
 8000172:	17d3      	asrs	r3, r2, #31
 8000174:	1ac9      	subs	r1, r1, r3
 8000176:	460b      	mov	r3, r1
 8000178:	009b      	lsls	r3, r3, #2
 800017a:	440b      	add	r3, r1
 800017c:	005b      	lsls	r3, r3, #1
 800017e:	1ad1      	subs	r1, r2, r3
 8000180:	b2cb      	uxtb	r3, r1
 8000182:	4403      	add	r3, r0
 8000184:	b2db      	uxtb	r3, r3
}
 8000186:	4618      	mov	r0, r3
 8000188:	370c      	adds	r7, #12
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	66666667 	.word	0x66666667

08000194 <bcdToDec>:

// Convert binary coded decimal to normal decimal numbers
int bcdToDec(uint8_t val)
{
 8000194:	b480      	push	{r7}
 8000196:	b083      	sub	sp, #12
 8000198:	af00      	add	r7, sp, #0
 800019a:	4603      	mov	r3, r0
 800019c:	71fb      	strb	r3, [r7, #7]
  return (int)( (val/16*10) + (val%16) );
 800019e:	79fb      	ldrb	r3, [r7, #7]
 80001a0:	091b      	lsrs	r3, r3, #4
 80001a2:	b2db      	uxtb	r3, r3
 80001a4:	461a      	mov	r2, r3
 80001a6:	4613      	mov	r3, r2
 80001a8:	009b      	lsls	r3, r3, #2
 80001aa:	4413      	add	r3, r2
 80001ac:	005b      	lsls	r3, r3, #1
 80001ae:	461a      	mov	r2, r3
 80001b0:	79fb      	ldrb	r3, [r7, #7]
 80001b2:	f003 030f 	and.w	r3, r3, #15
 80001b6:	4413      	add	r3, r2
}
 80001b8:	4618      	mov	r0, r3
 80001ba:	370c      	adds	r7, #12
 80001bc:	46bd      	mov	sp, r7
 80001be:	bc80      	pop	{r7}
 80001c0:	4770      	bx	lr
	...

080001c4 <Get_Time>:
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, 0x00, 1, set_time, 7, 1000);
}

// Function to get time
void Get_Time (void)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b086      	sub	sp, #24
 80001c8:	af04      	add	r7, sp, #16
	// A blank array (7 slots) to contain the time values received from the RTC module
  uint8_t get_time[7];

  // Receive the time values from the RTC module through I2C interface, then store them into the blank array (size of value: 7 bytes)
	  // TypeDef: HAL_I2C_Mem_Read(*hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
  HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, 1, get_time, 7, 1000);
 80001ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80001ce:	9302      	str	r3, [sp, #8]
 80001d0:	2307      	movs	r3, #7
 80001d2:	9301      	str	r3, [sp, #4]
 80001d4:	463b      	mov	r3, r7
 80001d6:	9300      	str	r3, [sp, #0]
 80001d8:	2301      	movs	r3, #1
 80001da:	2200      	movs	r2, #0
 80001dc:	21d0      	movs	r1, #208	@ 0xd0
 80001de:	481f      	ldr	r0, [pc, #124]	@ (800025c <Get_Time+0x98>)
 80001e0:	f001 f82c 	bl	800123c <HAL_I2C_Mem_Read>

  // Store the time values (converted from BCD code to decimal) into the time variable
	time.seconds 	  = bcdToDec(get_time[0]);
 80001e4:	783b      	ldrb	r3, [r7, #0]
 80001e6:	4618      	mov	r0, r3
 80001e8:	f7ff ffd4 	bl	8000194 <bcdToDec>
 80001ec:	4603      	mov	r3, r0
 80001ee:	b2da      	uxtb	r2, r3
 80001f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000260 <Get_Time+0x9c>)
 80001f2:	701a      	strb	r2, [r3, #0]
	time.minutes 	  = bcdToDec(get_time[1]);
 80001f4:	787b      	ldrb	r3, [r7, #1]
 80001f6:	4618      	mov	r0, r3
 80001f8:	f7ff ffcc 	bl	8000194 <bcdToDec>
 80001fc:	4603      	mov	r3, r0
 80001fe:	b2da      	uxtb	r2, r3
 8000200:	4b17      	ldr	r3, [pc, #92]	@ (8000260 <Get_Time+0x9c>)
 8000202:	705a      	strb	r2, [r3, #1]
	time.hour 		  = bcdToDec(get_time[2]);
 8000204:	78bb      	ldrb	r3, [r7, #2]
 8000206:	4618      	mov	r0, r3
 8000208:	f7ff ffc4 	bl	8000194 <bcdToDec>
 800020c:	4603      	mov	r3, r0
 800020e:	b2da      	uxtb	r2, r3
 8000210:	4b13      	ldr	r3, [pc, #76]	@ (8000260 <Get_Time+0x9c>)
 8000212:	709a      	strb	r2, [r3, #2]
	time.dayofweek 	= bcdToDec(get_time[3]);
 8000214:	78fb      	ldrb	r3, [r7, #3]
 8000216:	4618      	mov	r0, r3
 8000218:	f7ff ffbc 	bl	8000194 <bcdToDec>
 800021c:	4603      	mov	r3, r0
 800021e:	b2da      	uxtb	r2, r3
 8000220:	4b0f      	ldr	r3, [pc, #60]	@ (8000260 <Get_Time+0x9c>)
 8000222:	70da      	strb	r2, [r3, #3]
	time.dayofmonth = bcdToDec(get_time[4]);
 8000224:	793b      	ldrb	r3, [r7, #4]
 8000226:	4618      	mov	r0, r3
 8000228:	f7ff ffb4 	bl	8000194 <bcdToDec>
 800022c:	4603      	mov	r3, r0
 800022e:	b2da      	uxtb	r2, r3
 8000230:	4b0b      	ldr	r3, [pc, #44]	@ (8000260 <Get_Time+0x9c>)
 8000232:	711a      	strb	r2, [r3, #4]
	time.month 		  = bcdToDec(get_time[5]);
 8000234:	797b      	ldrb	r3, [r7, #5]
 8000236:	4618      	mov	r0, r3
 8000238:	f7ff ffac 	bl	8000194 <bcdToDec>
 800023c:	4603      	mov	r3, r0
 800023e:	b2da      	uxtb	r2, r3
 8000240:	4b07      	ldr	r3, [pc, #28]	@ (8000260 <Get_Time+0x9c>)
 8000242:	715a      	strb	r2, [r3, #5]
	time.year 		  = bcdToDec(get_time[6]);
 8000244:	79bb      	ldrb	r3, [r7, #6]
 8000246:	4618      	mov	r0, r3
 8000248:	f7ff ffa4 	bl	8000194 <bcdToDec>
 800024c:	4603      	mov	r3, r0
 800024e:	b2da      	uxtb	r2, r3
 8000250:	4b03      	ldr	r3, [pc, #12]	@ (8000260 <Get_Time+0x9c>)
 8000252:	719a      	strb	r2, [r3, #6]
}
 8000254:	bf00      	nop
 8000256:	3708      	adds	r7, #8
 8000258:	46bd      	mov	sp, r7
 800025a:	bd80      	pop	{r7, pc}
 800025c:	20000028 	.word	0x20000028
 8000260:	2000007c 	.word	0x2000007c

08000264 <Set_Alarm>:

// Function to set the RTC alarm settings (Alarm 1)
void Set_Alarm (uint8_t mode, uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow_dom, bool dy_dt)
{
 8000264:	b590      	push	{r4, r7, lr}
 8000266:	b08b      	sub	sp, #44	@ 0x2c
 8000268:	af04      	add	r7, sp, #16
 800026a:	4604      	mov	r4, r0
 800026c:	4608      	mov	r0, r1
 800026e:	4611      	mov	r1, r2
 8000270:	461a      	mov	r2, r3
 8000272:	4623      	mov	r3, r4
 8000274:	71fb      	strb	r3, [r7, #7]
 8000276:	4603      	mov	r3, r0
 8000278:	71bb      	strb	r3, [r7, #6]
 800027a:	460b      	mov	r3, r1
 800027c:	717b      	strb	r3, [r7, #5]
 800027e:	4613      	mov	r3, r2
 8000280:	713b      	strb	r3, [r7, #4]
  uint8_t set_alarm[4];

  // Mask bits to set the Control register in the RTC module
    // Address 0Eh: A1IE = 1, INTCN = 1
  //uint8_t ctrl_alarm = 5;
  uint8_t ctrl_alarm = 1; // Test the effect of the EOSC bit of Control register of the RTC module
 8000282:	2301      	movs	r3, #1
 8000284:	73fb      	strb	r3, [r7, #15]

  // A mask bit to set the alarm modes (Bit 7) in the RTC module
  uint8_t maskBit = 128;
 8000286:	2380      	movs	r3, #128	@ 0x80
 8000288:	75fb      	strb	r3, [r7, #23]

  // A mask bit for selection of [day of week] or [date of month] (Bit 6) in the RTC module
    // If the input [day of week]/ [date of month] selection is 1, the mask bit will be 64.
  uint8_t dyDt = (dy_dt == 1) ? 64 : 0;
 800028a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800028e:	2b00      	cmp	r3, #0
 8000290:	d001      	beq.n	8000296 <Set_Alarm+0x32>
 8000292:	2340      	movs	r3, #64	@ 0x40
 8000294:	e000      	b.n	8000298 <Set_Alarm+0x34>
 8000296:	2300      	movs	r3, #0
 8000298:	75bb      	strb	r3, [r7, #22]

  // Store the RTC alarm time settings (converted into BCD code) into the blank array
  set_alarm[0] = decToBcd(sec);
 800029a:	79bb      	ldrb	r3, [r7, #6]
 800029c:	4618      	mov	r0, r3
 800029e:	f7ff ff55 	bl	800014c <decToBcd>
 80002a2:	4603      	mov	r3, r0
 80002a4:	743b      	strb	r3, [r7, #16]
	set_alarm[1] = decToBcd(min);
 80002a6:	797b      	ldrb	r3, [r7, #5]
 80002a8:	4618      	mov	r0, r3
 80002aa:	f7ff ff4f 	bl	800014c <decToBcd>
 80002ae:	4603      	mov	r3, r0
 80002b0:	747b      	strb	r3, [r7, #17]
	set_alarm[2] = decToBcd(hour);
 80002b2:	793b      	ldrb	r3, [r7, #4]
 80002b4:	4618      	mov	r0, r3
 80002b6:	f7ff ff49 	bl	800014c <decToBcd>
 80002ba:	4603      	mov	r3, r0
 80002bc:	74bb      	strb	r3, [r7, #18]
	set_alarm[3] = decToBcd(dow_dom);
 80002be:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80002c2:	4618      	mov	r0, r3
 80002c4:	f7ff ff42 	bl	800014c <decToBcd>
 80002c8:	4603      	mov	r3, r0
 80002ca:	74fb      	strb	r3, [r7, #19]
    //  1    : Alarm when seconds match
    //  2    : Alarm when minutes and seconds match
    //  3    : Alarm when hours, minutes, and seconds match
    //  4    : Alarm when date, hours, minutes, and seconds match
    //  5    : Alarm when day, hours, minutes, and seconds match
  switch (mode)
 80002cc:	79fb      	ldrb	r3, [r7, #7]
 80002ce:	2b05      	cmp	r3, #5
 80002d0:	d865      	bhi.n	800039e <Set_Alarm+0x13a>
 80002d2:	a201      	add	r2, pc, #4	@ (adr r2, 80002d8 <Set_Alarm+0x74>)
 80002d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002d8:	080002f1 	.word	0x080002f1
 80002dc:	0800031b 	.word	0x0800031b
 80002e0:	0800033f 	.word	0x0800033f
 80002e4:	0800035d 	.word	0x0800035d
 80002e8:	08000375 	.word	0x08000375
 80002ec:	08000387 	.word	0x08000387
  {
    case 0:
      // Alarm mask bit: A1M4:A1M1 = b1111, DY/DT = X
      set_alarm[0] += maskBit;
 80002f0:	7c3a      	ldrb	r2, [r7, #16]
 80002f2:	7dfb      	ldrb	r3, [r7, #23]
 80002f4:	4413      	add	r3, r2
 80002f6:	b2db      	uxtb	r3, r3
 80002f8:	743b      	strb	r3, [r7, #16]
      set_alarm[1] += maskBit;
 80002fa:	7c7a      	ldrb	r2, [r7, #17]
 80002fc:	7dfb      	ldrb	r3, [r7, #23]
 80002fe:	4413      	add	r3, r2
 8000300:	b2db      	uxtb	r3, r3
 8000302:	747b      	strb	r3, [r7, #17]
      set_alarm[2] += maskBit;
 8000304:	7cba      	ldrb	r2, [r7, #18]
 8000306:	7dfb      	ldrb	r3, [r7, #23]
 8000308:	4413      	add	r3, r2
 800030a:	b2db      	uxtb	r3, r3
 800030c:	74bb      	strb	r3, [r7, #18]
      set_alarm[3] += maskBit;
 800030e:	7cfa      	ldrb	r2, [r7, #19]
 8000310:	7dfb      	ldrb	r3, [r7, #23]
 8000312:	4413      	add	r3, r2
 8000314:	b2db      	uxtb	r3, r3
 8000316:	74fb      	strb	r3, [r7, #19]
      break;
 8000318:	e04a      	b.n	80003b0 <Set_Alarm+0x14c>
    case 1:
      // Alarm mask bit: A1M4:A1M1 = b1110, DY/DT = X
      set_alarm[0] += 0;
 800031a:	7c3b      	ldrb	r3, [r7, #16]
 800031c:	743b      	strb	r3, [r7, #16]
      set_alarm[1] += maskBit;
 800031e:	7c7a      	ldrb	r2, [r7, #17]
 8000320:	7dfb      	ldrb	r3, [r7, #23]
 8000322:	4413      	add	r3, r2
 8000324:	b2db      	uxtb	r3, r3
 8000326:	747b      	strb	r3, [r7, #17]
      set_alarm[2] += maskBit;
 8000328:	7cba      	ldrb	r2, [r7, #18]
 800032a:	7dfb      	ldrb	r3, [r7, #23]
 800032c:	4413      	add	r3, r2
 800032e:	b2db      	uxtb	r3, r3
 8000330:	74bb      	strb	r3, [r7, #18]
      set_alarm[3] += maskBit;
 8000332:	7cfa      	ldrb	r2, [r7, #19]
 8000334:	7dfb      	ldrb	r3, [r7, #23]
 8000336:	4413      	add	r3, r2
 8000338:	b2db      	uxtb	r3, r3
 800033a:	74fb      	strb	r3, [r7, #19]
      break;
 800033c:	e038      	b.n	80003b0 <Set_Alarm+0x14c>
    case 2:
      // Alarm mask bit: A1M4:A1M1 = b1100, DY/DT = X
      set_alarm[0] += 0;
 800033e:	7c3b      	ldrb	r3, [r7, #16]
 8000340:	743b      	strb	r3, [r7, #16]
      set_alarm[1] += 0;
 8000342:	7c7b      	ldrb	r3, [r7, #17]
 8000344:	747b      	strb	r3, [r7, #17]
      set_alarm[2] += maskBit;
 8000346:	7cba      	ldrb	r2, [r7, #18]
 8000348:	7dfb      	ldrb	r3, [r7, #23]
 800034a:	4413      	add	r3, r2
 800034c:	b2db      	uxtb	r3, r3
 800034e:	74bb      	strb	r3, [r7, #18]
      set_alarm[3] += maskBit;
 8000350:	7cfa      	ldrb	r2, [r7, #19]
 8000352:	7dfb      	ldrb	r3, [r7, #23]
 8000354:	4413      	add	r3, r2
 8000356:	b2db      	uxtb	r3, r3
 8000358:	74fb      	strb	r3, [r7, #19]
      break;
 800035a:	e029      	b.n	80003b0 <Set_Alarm+0x14c>
    case 3:
      // Alarm mask bit: A1M4:A1M1 = b1000, DY/DT = X
      set_alarm[0] += 0;
 800035c:	7c3b      	ldrb	r3, [r7, #16]
 800035e:	743b      	strb	r3, [r7, #16]
      set_alarm[1] += 0;
 8000360:	7c7b      	ldrb	r3, [r7, #17]
 8000362:	747b      	strb	r3, [r7, #17]
      set_alarm[2] += 0;
 8000364:	7cbb      	ldrb	r3, [r7, #18]
 8000366:	74bb      	strb	r3, [r7, #18]
      set_alarm[3] += maskBit;
 8000368:	7cfa      	ldrb	r2, [r7, #19]
 800036a:	7dfb      	ldrb	r3, [r7, #23]
 800036c:	4413      	add	r3, r2
 800036e:	b2db      	uxtb	r3, r3
 8000370:	74fb      	strb	r3, [r7, #19]
      break;
 8000372:	e01d      	b.n	80003b0 <Set_Alarm+0x14c>
    case 4:
      // Alarm mask bit: A1M4:A1M1 = b0000, DY/DT = 0
      set_alarm[0] += 0;
 8000374:	7c3b      	ldrb	r3, [r7, #16]
 8000376:	743b      	strb	r3, [r7, #16]
      set_alarm[1] += 0;
 8000378:	7c7b      	ldrb	r3, [r7, #17]
 800037a:	747b      	strb	r3, [r7, #17]
      set_alarm[2] += 0;
 800037c:	7cbb      	ldrb	r3, [r7, #18]
 800037e:	74bb      	strb	r3, [r7, #18]
      set_alarm[3] += 0;
 8000380:	7cfb      	ldrb	r3, [r7, #19]
 8000382:	74fb      	strb	r3, [r7, #19]
      break;
 8000384:	e014      	b.n	80003b0 <Set_Alarm+0x14c>
    case 5:
      // Alarm mask bit: A1M4:A1M1 = b0000, DY/DT = 1
      set_alarm[0] += 0;
 8000386:	7c3b      	ldrb	r3, [r7, #16]
 8000388:	743b      	strb	r3, [r7, #16]
      set_alarm[1] += 0;
 800038a:	7c7b      	ldrb	r3, [r7, #17]
 800038c:	747b      	strb	r3, [r7, #17]
      set_alarm[2] += 0;
 800038e:	7cbb      	ldrb	r3, [r7, #18]
 8000390:	74bb      	strb	r3, [r7, #18]
      set_alarm[3] += dyDt;
 8000392:	7cfa      	ldrb	r2, [r7, #19]
 8000394:	7dbb      	ldrb	r3, [r7, #22]
 8000396:	4413      	add	r3, r2
 8000398:	b2db      	uxtb	r3, r3
 800039a:	74fb      	strb	r3, [r7, #19]
      break;
 800039c:	e008      	b.n	80003b0 <Set_Alarm+0x14c>
    default:
      // Alarm mask bit: A1M4:A1M1 = b0000, DY/DT = 0
      set_alarm[0] += 0;
 800039e:	7c3b      	ldrb	r3, [r7, #16]
 80003a0:	743b      	strb	r3, [r7, #16]
      set_alarm[1] += 0;
 80003a2:	7c7b      	ldrb	r3, [r7, #17]
 80003a4:	747b      	strb	r3, [r7, #17]
      set_alarm[2] += 0;
 80003a6:	7cbb      	ldrb	r3, [r7, #18]
 80003a8:	74bb      	strb	r3, [r7, #18]
      set_alarm[3] += 0;
 80003aa:	7cfb      	ldrb	r3, [r7, #19]
 80003ac:	74fb      	strb	r3, [r7, #19]
      break;
 80003ae:	bf00      	nop
  }

  // Send the array containing the RTC alarm mode setting to the RTC module through I2C interface at address 07h - 0Ah (size of value: 4 bytes)
    // TypeDef: HAL_I2C_Mem_Write(*hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
  HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, 0x07, 1, set_alarm, 4, 1000);
 80003b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80003b4:	9302      	str	r3, [sp, #8]
 80003b6:	2304      	movs	r3, #4
 80003b8:	9301      	str	r3, [sp, #4]
 80003ba:	f107 0310 	add.w	r3, r7, #16
 80003be:	9300      	str	r3, [sp, #0]
 80003c0:	2301      	movs	r3, #1
 80003c2:	2207      	movs	r2, #7
 80003c4:	21d0      	movs	r1, #208	@ 0xd0
 80003c6:	480a      	ldr	r0, [pc, #40]	@ (80003f0 <Set_Alarm+0x18c>)
 80003c8:	f000 fe3e 	bl	8001048 <HAL_I2C_Mem_Write>

  // Send the alarm control mask bits to the RTC module through I2C interface at address 0Eh (size of value: 1 byte)
      // TypeDef: HAL_I2C_Mem_Write(*hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
  HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, 0x0E, 1, &ctrl_alarm, 1, 1000);
 80003cc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80003d0:	9302      	str	r3, [sp, #8]
 80003d2:	2301      	movs	r3, #1
 80003d4:	9301      	str	r3, [sp, #4]
 80003d6:	f107 030f 	add.w	r3, r7, #15
 80003da:	9300      	str	r3, [sp, #0]
 80003dc:	2301      	movs	r3, #1
 80003de:	220e      	movs	r2, #14
 80003e0:	21d0      	movs	r1, #208	@ 0xd0
 80003e2:	4803      	ldr	r0, [pc, #12]	@ (80003f0 <Set_Alarm+0x18c>)
 80003e4:	f000 fe30 	bl	8001048 <HAL_I2C_Mem_Write>
}
 80003e8:	bf00      	nop
 80003ea:	371c      	adds	r7, #28
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd90      	pop	{r4, r7, pc}
 80003f0:	20000028 	.word	0x20000028

080003f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b084      	sub	sp, #16
 80003f8:	af04      	add	r7, sp, #16
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003fa:	f000 f9db 	bl	80007b4 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80003fe:	f000 f855 	bl	80004ac <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000402:	f000 f8c7 	bl	8000594 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000406:	f000 f897 	bl	8000538 <MX_I2C1_Init>
 
  // Run only once after reset the RTC module to initially set the time
  //Set_Time (00, 55, 12, 5, 13, 3, 25);

  // Run only to initially set the alarm  for the RTC module
  Set_Alarm (0, 0, 0, 0, 0, 0);
 800040a:	2300      	movs	r3, #0
 800040c:	9301      	str	r3, [sp, #4]
 800040e:	2300      	movs	r3, #0
 8000410:	9300      	str	r3, [sp, #0]
 8000412:	2300      	movs	r3, #0
 8000414:	2200      	movs	r2, #0
 8000416:	2100      	movs	r1, #0
 8000418:	2000      	movs	r0, #0
 800041a:	f7ff ff23 	bl	8000264 <Set_Alarm>

  /* Infinite loop */
  while (1)
  {
	  Get_Time();
 800041e:	f7ff fed1 	bl	80001c4 <Get_Time>
	  if(HAL_GPIO_ReadPin(Test_GPIO_Port, Test_Pin) == 1)
 8000422:	2110      	movs	r1, #16
 8000424:	481b      	ldr	r0, [pc, #108]	@ (8000494 <main+0xa0>)
 8000426:	f000 fcb3 	bl	8000d90 <HAL_GPIO_ReadPin>
 800042a:	4603      	mov	r3, r0
 800042c:	2b01      	cmp	r3, #1
 800042e:	d105      	bne.n	800043c <main+0x48>
    {
      PB4 += 1;
 8000430:	4b19      	ldr	r3, [pc, #100]	@ (8000498 <main+0xa4>)
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	3301      	adds	r3, #1
 8000436:	b2da      	uxtb	r2, r3
 8000438:	4b17      	ldr	r3, [pc, #92]	@ (8000498 <main+0xa4>)
 800043a:	701a      	strb	r2, [r3, #0]
    }
	  HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x07, 1, alarm_check, 4, 1000);
 800043c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000440:	9302      	str	r3, [sp, #8]
 8000442:	2304      	movs	r3, #4
 8000444:	9301      	str	r3, [sp, #4]
 8000446:	4b15      	ldr	r3, [pc, #84]	@ (800049c <main+0xa8>)
 8000448:	9300      	str	r3, [sp, #0]
 800044a:	2301      	movs	r3, #1
 800044c:	2207      	movs	r2, #7
 800044e:	21d0      	movs	r1, #208	@ 0xd0
 8000450:	4813      	ldr	r0, [pc, #76]	@ (80004a0 <main+0xac>)
 8000452:	f000 fef3 	bl	800123c <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x0E, 1, &ctrl_check, 1, 1000);
 8000456:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800045a:	9302      	str	r3, [sp, #8]
 800045c:	2301      	movs	r3, #1
 800045e:	9301      	str	r3, [sp, #4]
 8000460:	4b10      	ldr	r3, [pc, #64]	@ (80004a4 <main+0xb0>)
 8000462:	9300      	str	r3, [sp, #0]
 8000464:	2301      	movs	r3, #1
 8000466:	220e      	movs	r2, #14
 8000468:	21d0      	movs	r1, #208	@ 0xd0
 800046a:	480d      	ldr	r0, [pc, #52]	@ (80004a0 <main+0xac>)
 800046c:	f000 fee6 	bl	800123c <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x0F, 1, &status_check, 1, 1000);
 8000470:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000474:	9302      	str	r3, [sp, #8]
 8000476:	2301      	movs	r3, #1
 8000478:	9301      	str	r3, [sp, #4]
 800047a:	4b0b      	ldr	r3, [pc, #44]	@ (80004a8 <main+0xb4>)
 800047c:	9300      	str	r3, [sp, #0]
 800047e:	2301      	movs	r3, #1
 8000480:	220f      	movs	r2, #15
 8000482:	21d0      	movs	r1, #208	@ 0xd0
 8000484:	4806      	ldr	r0, [pc, #24]	@ (80004a0 <main+0xac>)
 8000486:	f000 fed9 	bl	800123c <HAL_I2C_Mem_Read>
	  HAL_Delay(500);
 800048a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800048e:	f000 f9f3 	bl	8000878 <HAL_Delay>
	  Get_Time();
 8000492:	e7c4      	b.n	800041e <main+0x2a>
 8000494:	40010c00 	.word	0x40010c00
 8000498:	20000083 	.word	0x20000083
 800049c:	20000084 	.word	0x20000084
 80004a0:	20000028 	.word	0x20000028
 80004a4:	20000088 	.word	0x20000088
 80004a8:	20000089 	.word	0x20000089

080004ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b090      	sub	sp, #64	@ 0x40
 80004b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004b2:	f107 0318 	add.w	r3, r7, #24
 80004b6:	2228      	movs	r2, #40	@ 0x28
 80004b8:	2100      	movs	r1, #0
 80004ba:	4618      	mov	r0, r3
 80004bc:	f002 f8e2 	bl	8002684 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004c0:	1d3b      	adds	r3, r7, #4
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
 80004c6:	605a      	str	r2, [r3, #4]
 80004c8:	609a      	str	r2, [r3, #8]
 80004ca:	60da      	str	r2, [r3, #12]
 80004cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004ce:	2301      	movs	r3, #1
 80004d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004d2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80004d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004d8:	2300      	movs	r3, #0
 80004da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004dc:	2301      	movs	r3, #1
 80004de:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004e0:	2302      	movs	r3, #2
 80004e2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80004e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004ea:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80004ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004f0:	f107 0318 	add.w	r3, r7, #24
 80004f4:	4618      	mov	r0, r3
 80004f6:	f001 fcc9 	bl	8001e8c <HAL_RCC_OscConfig>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d001      	beq.n	8000504 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000500:	f000 f88a 	bl	8000618 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000504:	230f      	movs	r3, #15
 8000506:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000508:	2302      	movs	r3, #2
 800050a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800050c:	2300      	movs	r3, #0
 800050e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000510:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000514:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000516:	2300      	movs	r3, #0
 8000518:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800051a:	1d3b      	adds	r3, r7, #4
 800051c:	2102      	movs	r1, #2
 800051e:	4618      	mov	r0, r3
 8000520:	f001 ff36 	bl	8002390 <HAL_RCC_ClockConfig>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800052a:	f000 f875 	bl	8000618 <Error_Handler>
  }
}
 800052e:	bf00      	nop
 8000530:	3740      	adds	r7, #64	@ 0x40
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
	...

08000538 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800053c:	4b12      	ldr	r3, [pc, #72]	@ (8000588 <MX_I2C1_Init+0x50>)
 800053e:	4a13      	ldr	r2, [pc, #76]	@ (800058c <MX_I2C1_Init+0x54>)
 8000540:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000542:	4b11      	ldr	r3, [pc, #68]	@ (8000588 <MX_I2C1_Init+0x50>)
 8000544:	4a12      	ldr	r2, [pc, #72]	@ (8000590 <MX_I2C1_Init+0x58>)
 8000546:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000548:	4b0f      	ldr	r3, [pc, #60]	@ (8000588 <MX_I2C1_Init+0x50>)
 800054a:	2200      	movs	r2, #0
 800054c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800054e:	4b0e      	ldr	r3, [pc, #56]	@ (8000588 <MX_I2C1_Init+0x50>)
 8000550:	2200      	movs	r2, #0
 8000552:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000554:	4b0c      	ldr	r3, [pc, #48]	@ (8000588 <MX_I2C1_Init+0x50>)
 8000556:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800055a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800055c:	4b0a      	ldr	r3, [pc, #40]	@ (8000588 <MX_I2C1_Init+0x50>)
 800055e:	2200      	movs	r2, #0
 8000560:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000562:	4b09      	ldr	r3, [pc, #36]	@ (8000588 <MX_I2C1_Init+0x50>)
 8000564:	2200      	movs	r2, #0
 8000566:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000568:	4b07      	ldr	r3, [pc, #28]	@ (8000588 <MX_I2C1_Init+0x50>)
 800056a:	2200      	movs	r2, #0
 800056c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800056e:	4b06      	ldr	r3, [pc, #24]	@ (8000588 <MX_I2C1_Init+0x50>)
 8000570:	2200      	movs	r2, #0
 8000572:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000574:	4804      	ldr	r0, [pc, #16]	@ (8000588 <MX_I2C1_Init+0x50>)
 8000576:	f000 fc23 	bl	8000dc0 <HAL_I2C_Init>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000580:	f000 f84a 	bl	8000618 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000584:	bf00      	nop
 8000586:	bd80      	pop	{r7, pc}
 8000588:	20000028 	.word	0x20000028
 800058c:	40005400 	.word	0x40005400
 8000590:	000186a0 	.word	0x000186a0

08000594 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b088      	sub	sp, #32
 8000598:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059a:	f107 0310 	add.w	r3, r7, #16
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
 80005a6:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005a8:	4b19      	ldr	r3, [pc, #100]	@ (8000610 <MX_GPIO_Init+0x7c>)
 80005aa:	699b      	ldr	r3, [r3, #24]
 80005ac:	4a18      	ldr	r2, [pc, #96]	@ (8000610 <MX_GPIO_Init+0x7c>)
 80005ae:	f043 0320 	orr.w	r3, r3, #32
 80005b2:	6193      	str	r3, [r2, #24]
 80005b4:	4b16      	ldr	r3, [pc, #88]	@ (8000610 <MX_GPIO_Init+0x7c>)
 80005b6:	699b      	ldr	r3, [r3, #24]
 80005b8:	f003 0320 	and.w	r3, r3, #32
 80005bc:	60fb      	str	r3, [r7, #12]
 80005be:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c0:	4b13      	ldr	r3, [pc, #76]	@ (8000610 <MX_GPIO_Init+0x7c>)
 80005c2:	699b      	ldr	r3, [r3, #24]
 80005c4:	4a12      	ldr	r2, [pc, #72]	@ (8000610 <MX_GPIO_Init+0x7c>)
 80005c6:	f043 0304 	orr.w	r3, r3, #4
 80005ca:	6193      	str	r3, [r2, #24]
 80005cc:	4b10      	ldr	r3, [pc, #64]	@ (8000610 <MX_GPIO_Init+0x7c>)
 80005ce:	699b      	ldr	r3, [r3, #24]
 80005d0:	f003 0304 	and.w	r3, r3, #4
 80005d4:	60bb      	str	r3, [r7, #8]
 80005d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d8:	4b0d      	ldr	r3, [pc, #52]	@ (8000610 <MX_GPIO_Init+0x7c>)
 80005da:	699b      	ldr	r3, [r3, #24]
 80005dc:	4a0c      	ldr	r2, [pc, #48]	@ (8000610 <MX_GPIO_Init+0x7c>)
 80005de:	f043 0308 	orr.w	r3, r3, #8
 80005e2:	6193      	str	r3, [r2, #24]
 80005e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000610 <MX_GPIO_Init+0x7c>)
 80005e6:	699b      	ldr	r3, [r3, #24]
 80005e8:	f003 0308 	and.w	r3, r3, #8
 80005ec:	607b      	str	r3, [r7, #4]
 80005ee:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : Test_Pin */
  GPIO_InitStruct.Pin = Test_Pin;
 80005f0:	2310      	movs	r3, #16
 80005f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005f4:	2300      	movs	r3, #0
 80005f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005f8:	2301      	movs	r3, #1
 80005fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Test_GPIO_Port, &GPIO_InitStruct);
 80005fc:	f107 0310 	add.w	r3, r7, #16
 8000600:	4619      	mov	r1, r3
 8000602:	4804      	ldr	r0, [pc, #16]	@ (8000614 <MX_GPIO_Init+0x80>)
 8000604:	f000 fa40 	bl	8000a88 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000608:	bf00      	nop
 800060a:	3720      	adds	r7, #32
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	40021000 	.word	0x40021000
 8000614:	40010c00 	.word	0x40010c00

08000618 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800061c:	b672      	cpsid	i
}
 800061e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000620:	bf00      	nop
 8000622:	e7fd      	b.n	8000620 <Error_Handler+0x8>

08000624 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800062a:	4b15      	ldr	r3, [pc, #84]	@ (8000680 <HAL_MspInit+0x5c>)
 800062c:	699b      	ldr	r3, [r3, #24]
 800062e:	4a14      	ldr	r2, [pc, #80]	@ (8000680 <HAL_MspInit+0x5c>)
 8000630:	f043 0301 	orr.w	r3, r3, #1
 8000634:	6193      	str	r3, [r2, #24]
 8000636:	4b12      	ldr	r3, [pc, #72]	@ (8000680 <HAL_MspInit+0x5c>)
 8000638:	699b      	ldr	r3, [r3, #24]
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000642:	4b0f      	ldr	r3, [pc, #60]	@ (8000680 <HAL_MspInit+0x5c>)
 8000644:	69db      	ldr	r3, [r3, #28]
 8000646:	4a0e      	ldr	r2, [pc, #56]	@ (8000680 <HAL_MspInit+0x5c>)
 8000648:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800064c:	61d3      	str	r3, [r2, #28]
 800064e:	4b0c      	ldr	r3, [pc, #48]	@ (8000680 <HAL_MspInit+0x5c>)
 8000650:	69db      	ldr	r3, [r3, #28]
 8000652:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800065a:	4b0a      	ldr	r3, [pc, #40]	@ (8000684 <HAL_MspInit+0x60>)
 800065c:	685b      	ldr	r3, [r3, #4]
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	4a04      	ldr	r2, [pc, #16]	@ (8000684 <HAL_MspInit+0x60>)
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000676:	bf00      	nop
 8000678:	3714      	adds	r7, #20
 800067a:	46bd      	mov	sp, r7
 800067c:	bc80      	pop	{r7}
 800067e:	4770      	bx	lr
 8000680:	40021000 	.word	0x40021000
 8000684:	40010000 	.word	0x40010000

08000688 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b088      	sub	sp, #32
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000690:	f107 0310 	add.w	r3, r7, #16
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4a15      	ldr	r2, [pc, #84]	@ (80006f8 <HAL_I2C_MspInit+0x70>)
 80006a4:	4293      	cmp	r3, r2
 80006a6:	d123      	bne.n	80006f0 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a8:	4b14      	ldr	r3, [pc, #80]	@ (80006fc <HAL_I2C_MspInit+0x74>)
 80006aa:	699b      	ldr	r3, [r3, #24]
 80006ac:	4a13      	ldr	r2, [pc, #76]	@ (80006fc <HAL_I2C_MspInit+0x74>)
 80006ae:	f043 0308 	orr.w	r3, r3, #8
 80006b2:	6193      	str	r3, [r2, #24]
 80006b4:	4b11      	ldr	r3, [pc, #68]	@ (80006fc <HAL_I2C_MspInit+0x74>)
 80006b6:	699b      	ldr	r3, [r3, #24]
 80006b8:	f003 0308 	and.w	r3, r3, #8
 80006bc:	60fb      	str	r3, [r7, #12]
 80006be:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80006c0:	23c0      	movs	r3, #192	@ 0xc0
 80006c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006c4:	2312      	movs	r3, #18
 80006c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006c8:	2303      	movs	r3, #3
 80006ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006cc:	f107 0310 	add.w	r3, r7, #16
 80006d0:	4619      	mov	r1, r3
 80006d2:	480b      	ldr	r0, [pc, #44]	@ (8000700 <HAL_I2C_MspInit+0x78>)
 80006d4:	f000 f9d8 	bl	8000a88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006d8:	4b08      	ldr	r3, [pc, #32]	@ (80006fc <HAL_I2C_MspInit+0x74>)
 80006da:	69db      	ldr	r3, [r3, #28]
 80006dc:	4a07      	ldr	r2, [pc, #28]	@ (80006fc <HAL_I2C_MspInit+0x74>)
 80006de:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80006e2:	61d3      	str	r3, [r2, #28]
 80006e4:	4b05      	ldr	r3, [pc, #20]	@ (80006fc <HAL_I2C_MspInit+0x74>)
 80006e6:	69db      	ldr	r3, [r3, #28]
 80006e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80006ec:	60bb      	str	r3, [r7, #8]
 80006ee:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80006f0:	bf00      	nop
 80006f2:	3720      	adds	r7, #32
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40005400 	.word	0x40005400
 80006fc:	40021000 	.word	0x40021000
 8000700:	40010c00 	.word	0x40010c00

08000704 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000708:	bf00      	nop
 800070a:	e7fd      	b.n	8000708 <NMI_Handler+0x4>

0800070c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000710:	bf00      	nop
 8000712:	e7fd      	b.n	8000710 <HardFault_Handler+0x4>

08000714 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000718:	bf00      	nop
 800071a:	e7fd      	b.n	8000718 <MemManage_Handler+0x4>

0800071c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000720:	bf00      	nop
 8000722:	e7fd      	b.n	8000720 <BusFault_Handler+0x4>

08000724 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000728:	bf00      	nop
 800072a:	e7fd      	b.n	8000728 <UsageFault_Handler+0x4>

0800072c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr

08000738 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800073c:	bf00      	nop
 800073e:	46bd      	mov	sp, r7
 8000740:	bc80      	pop	{r7}
 8000742:	4770      	bx	lr

08000744 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	bc80      	pop	{r7}
 800074e:	4770      	bx	lr

08000750 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000754:	f000 f874 	bl	8000840 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}

0800075c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000760:	bf00      	nop
 8000762:	46bd      	mov	sp, r7
 8000764:	bc80      	pop	{r7}
 8000766:	4770      	bx	lr

08000768 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000768:	f7ff fff8 	bl	800075c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800076c:	480b      	ldr	r0, [pc, #44]	@ (800079c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800076e:	490c      	ldr	r1, [pc, #48]	@ (80007a0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000770:	4a0c      	ldr	r2, [pc, #48]	@ (80007a4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000772:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000774:	e002      	b.n	800077c <LoopCopyDataInit>

08000776 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000776:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000778:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800077a:	3304      	adds	r3, #4

0800077c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800077c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800077e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000780:	d3f9      	bcc.n	8000776 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000782:	4a09      	ldr	r2, [pc, #36]	@ (80007a8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000784:	4c09      	ldr	r4, [pc, #36]	@ (80007ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000786:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000788:	e001      	b.n	800078e <LoopFillZerobss>

0800078a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800078a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800078c:	3204      	adds	r2, #4

0800078e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800078e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000790:	d3fb      	bcc.n	800078a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000792:	f001 ff7f 	bl	8002694 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000796:	f7ff fe2d 	bl	80003f4 <main>
  bx lr
 800079a:	4770      	bx	lr
  ldr r0, =_sdata
 800079c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007a0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007a4:	08002728 	.word	0x08002728
  ldr r2, =_sbss
 80007a8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007ac:	20000090 	.word	0x20000090

080007b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007b0:	e7fe      	b.n	80007b0 <ADC1_2_IRQHandler>
	...

080007b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007b8:	4b08      	ldr	r3, [pc, #32]	@ (80007dc <HAL_Init+0x28>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a07      	ldr	r2, [pc, #28]	@ (80007dc <HAL_Init+0x28>)
 80007be:	f043 0310 	orr.w	r3, r3, #16
 80007c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007c4:	2003      	movs	r0, #3
 80007c6:	f000 f92b 	bl	8000a20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007ca:	200f      	movs	r0, #15
 80007cc:	f000 f808 	bl	80007e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007d0:	f7ff ff28 	bl	8000624 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007d4:	2300      	movs	r3, #0
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40022000 	.word	0x40022000

080007e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007e8:	4b12      	ldr	r3, [pc, #72]	@ (8000834 <HAL_InitTick+0x54>)
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	4b12      	ldr	r3, [pc, #72]	@ (8000838 <HAL_InitTick+0x58>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	4619      	mov	r1, r3
 80007f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80007fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80007fe:	4618      	mov	r0, r3
 8000800:	f000 f935 	bl	8000a6e <HAL_SYSTICK_Config>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800080a:	2301      	movs	r3, #1
 800080c:	e00e      	b.n	800082c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	2b0f      	cmp	r3, #15
 8000812:	d80a      	bhi.n	800082a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000814:	2200      	movs	r2, #0
 8000816:	6879      	ldr	r1, [r7, #4]
 8000818:	f04f 30ff 	mov.w	r0, #4294967295
 800081c:	f000 f90b 	bl	8000a36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000820:	4a06      	ldr	r2, [pc, #24]	@ (800083c <HAL_InitTick+0x5c>)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000826:	2300      	movs	r3, #0
 8000828:	e000      	b.n	800082c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800082a:	2301      	movs	r3, #1
}
 800082c:	4618      	mov	r0, r3
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20000000 	.word	0x20000000
 8000838:	20000008 	.word	0x20000008
 800083c:	20000004 	.word	0x20000004

08000840 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000844:	4b05      	ldr	r3, [pc, #20]	@ (800085c <HAL_IncTick+0x1c>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	461a      	mov	r2, r3
 800084a:	4b05      	ldr	r3, [pc, #20]	@ (8000860 <HAL_IncTick+0x20>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4413      	add	r3, r2
 8000850:	4a03      	ldr	r2, [pc, #12]	@ (8000860 <HAL_IncTick+0x20>)
 8000852:	6013      	str	r3, [r2, #0]
}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr
 800085c:	20000008 	.word	0x20000008
 8000860:	2000008c 	.word	0x2000008c

08000864 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  return uwTick;
 8000868:	4b02      	ldr	r3, [pc, #8]	@ (8000874 <HAL_GetTick+0x10>)
 800086a:	681b      	ldr	r3, [r3, #0]
}
 800086c:	4618      	mov	r0, r3
 800086e:	46bd      	mov	sp, r7
 8000870:	bc80      	pop	{r7}
 8000872:	4770      	bx	lr
 8000874:	2000008c 	.word	0x2000008c

08000878 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000880:	f7ff fff0 	bl	8000864 <HAL_GetTick>
 8000884:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000890:	d005      	beq.n	800089e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000892:	4b0a      	ldr	r3, [pc, #40]	@ (80008bc <HAL_Delay+0x44>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	461a      	mov	r2, r3
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	4413      	add	r3, r2
 800089c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800089e:	bf00      	nop
 80008a0:	f7ff ffe0 	bl	8000864 <HAL_GetTick>
 80008a4:	4602      	mov	r2, r0
 80008a6:	68bb      	ldr	r3, [r7, #8]
 80008a8:	1ad3      	subs	r3, r2, r3
 80008aa:	68fa      	ldr	r2, [r7, #12]
 80008ac:	429a      	cmp	r2, r3
 80008ae:	d8f7      	bhi.n	80008a0 <HAL_Delay+0x28>
  {
  }
}
 80008b0:	bf00      	nop
 80008b2:	bf00      	nop
 80008b4:	3710      	adds	r7, #16
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20000008 	.word	0x20000008

080008c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b085      	sub	sp, #20
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	f003 0307 	and.w	r3, r3, #7
 80008ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000904 <__NVIC_SetPriorityGrouping+0x44>)
 80008d2:	68db      	ldr	r3, [r3, #12]
 80008d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008d6:	68ba      	ldr	r2, [r7, #8]
 80008d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80008dc:	4013      	ands	r3, r2
 80008de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80008ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008f2:	4a04      	ldr	r2, [pc, #16]	@ (8000904 <__NVIC_SetPriorityGrouping+0x44>)
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	60d3      	str	r3, [r2, #12]
}
 80008f8:	bf00      	nop
 80008fa:	3714      	adds	r7, #20
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bc80      	pop	{r7}
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	e000ed00 	.word	0xe000ed00

08000908 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800090c:	4b04      	ldr	r3, [pc, #16]	@ (8000920 <__NVIC_GetPriorityGrouping+0x18>)
 800090e:	68db      	ldr	r3, [r3, #12]
 8000910:	0a1b      	lsrs	r3, r3, #8
 8000912:	f003 0307 	and.w	r3, r3, #7
}
 8000916:	4618      	mov	r0, r3
 8000918:	46bd      	mov	sp, r7
 800091a:	bc80      	pop	{r7}
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	6039      	str	r1, [r7, #0]
 800092e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000934:	2b00      	cmp	r3, #0
 8000936:	db0a      	blt.n	800094e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	b2da      	uxtb	r2, r3
 800093c:	490c      	ldr	r1, [pc, #48]	@ (8000970 <__NVIC_SetPriority+0x4c>)
 800093e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000942:	0112      	lsls	r2, r2, #4
 8000944:	b2d2      	uxtb	r2, r2
 8000946:	440b      	add	r3, r1
 8000948:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800094c:	e00a      	b.n	8000964 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	b2da      	uxtb	r2, r3
 8000952:	4908      	ldr	r1, [pc, #32]	@ (8000974 <__NVIC_SetPriority+0x50>)
 8000954:	79fb      	ldrb	r3, [r7, #7]
 8000956:	f003 030f 	and.w	r3, r3, #15
 800095a:	3b04      	subs	r3, #4
 800095c:	0112      	lsls	r2, r2, #4
 800095e:	b2d2      	uxtb	r2, r2
 8000960:	440b      	add	r3, r1
 8000962:	761a      	strb	r2, [r3, #24]
}
 8000964:	bf00      	nop
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	bc80      	pop	{r7}
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	e000e100 	.word	0xe000e100
 8000974:	e000ed00 	.word	0xe000ed00

08000978 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000978:	b480      	push	{r7}
 800097a:	b089      	sub	sp, #36	@ 0x24
 800097c:	af00      	add	r7, sp, #0
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	60b9      	str	r1, [r7, #8]
 8000982:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	f003 0307 	and.w	r3, r3, #7
 800098a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800098c:	69fb      	ldr	r3, [r7, #28]
 800098e:	f1c3 0307 	rsb	r3, r3, #7
 8000992:	2b04      	cmp	r3, #4
 8000994:	bf28      	it	cs
 8000996:	2304      	movcs	r3, #4
 8000998:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	3304      	adds	r3, #4
 800099e:	2b06      	cmp	r3, #6
 80009a0:	d902      	bls.n	80009a8 <NVIC_EncodePriority+0x30>
 80009a2:	69fb      	ldr	r3, [r7, #28]
 80009a4:	3b03      	subs	r3, #3
 80009a6:	e000      	b.n	80009aa <NVIC_EncodePriority+0x32>
 80009a8:	2300      	movs	r3, #0
 80009aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009ac:	f04f 32ff 	mov.w	r2, #4294967295
 80009b0:	69bb      	ldr	r3, [r7, #24]
 80009b2:	fa02 f303 	lsl.w	r3, r2, r3
 80009b6:	43da      	mvns	r2, r3
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	401a      	ands	r2, r3
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009c0:	f04f 31ff 	mov.w	r1, #4294967295
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	fa01 f303 	lsl.w	r3, r1, r3
 80009ca:	43d9      	mvns	r1, r3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d0:	4313      	orrs	r3, r2
         );
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3724      	adds	r7, #36	@ 0x24
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bc80      	pop	{r7}
 80009da:	4770      	bx	lr

080009dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	3b01      	subs	r3, #1
 80009e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80009ec:	d301      	bcc.n	80009f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009ee:	2301      	movs	r3, #1
 80009f0:	e00f      	b.n	8000a12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009f2:	4a0a      	ldr	r2, [pc, #40]	@ (8000a1c <SysTick_Config+0x40>)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	3b01      	subs	r3, #1
 80009f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009fa:	210f      	movs	r1, #15
 80009fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000a00:	f7ff ff90 	bl	8000924 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a04:	4b05      	ldr	r3, [pc, #20]	@ (8000a1c <SysTick_Config+0x40>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a0a:	4b04      	ldr	r3, [pc, #16]	@ (8000a1c <SysTick_Config+0x40>)
 8000a0c:	2207      	movs	r2, #7
 8000a0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a10:	2300      	movs	r3, #0
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	e000e010 	.word	0xe000e010

08000a20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a28:	6878      	ldr	r0, [r7, #4]
 8000a2a:	f7ff ff49 	bl	80008c0 <__NVIC_SetPriorityGrouping>
}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b086      	sub	sp, #24
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	60b9      	str	r1, [r7, #8]
 8000a40:	607a      	str	r2, [r7, #4]
 8000a42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a44:	2300      	movs	r3, #0
 8000a46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a48:	f7ff ff5e 	bl	8000908 <__NVIC_GetPriorityGrouping>
 8000a4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a4e:	687a      	ldr	r2, [r7, #4]
 8000a50:	68b9      	ldr	r1, [r7, #8]
 8000a52:	6978      	ldr	r0, [r7, #20]
 8000a54:	f7ff ff90 	bl	8000978 <NVIC_EncodePriority>
 8000a58:	4602      	mov	r2, r0
 8000a5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a5e:	4611      	mov	r1, r2
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff ff5f 	bl	8000924 <__NVIC_SetPriority>
}
 8000a66:	bf00      	nop
 8000a68:	3718      	adds	r7, #24
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	b082      	sub	sp, #8
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a76:	6878      	ldr	r0, [r7, #4]
 8000a78:	f7ff ffb0 	bl	80009dc <SysTick_Config>
 8000a7c:	4603      	mov	r3, r0
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
	...

08000a88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b08b      	sub	sp, #44	@ 0x2c
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a92:	2300      	movs	r3, #0
 8000a94:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a96:	2300      	movs	r3, #0
 8000a98:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a9a:	e169      	b.n	8000d70 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	69fa      	ldr	r2, [r7, #28]
 8000aac:	4013      	ands	r3, r2
 8000aae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ab0:	69ba      	ldr	r2, [r7, #24]
 8000ab2:	69fb      	ldr	r3, [r7, #28]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	f040 8158 	bne.w	8000d6a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	4a9a      	ldr	r2, [pc, #616]	@ (8000d28 <HAL_GPIO_Init+0x2a0>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d05e      	beq.n	8000b82 <HAL_GPIO_Init+0xfa>
 8000ac4:	4a98      	ldr	r2, [pc, #608]	@ (8000d28 <HAL_GPIO_Init+0x2a0>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d875      	bhi.n	8000bb6 <HAL_GPIO_Init+0x12e>
 8000aca:	4a98      	ldr	r2, [pc, #608]	@ (8000d2c <HAL_GPIO_Init+0x2a4>)
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d058      	beq.n	8000b82 <HAL_GPIO_Init+0xfa>
 8000ad0:	4a96      	ldr	r2, [pc, #600]	@ (8000d2c <HAL_GPIO_Init+0x2a4>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d86f      	bhi.n	8000bb6 <HAL_GPIO_Init+0x12e>
 8000ad6:	4a96      	ldr	r2, [pc, #600]	@ (8000d30 <HAL_GPIO_Init+0x2a8>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d052      	beq.n	8000b82 <HAL_GPIO_Init+0xfa>
 8000adc:	4a94      	ldr	r2, [pc, #592]	@ (8000d30 <HAL_GPIO_Init+0x2a8>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d869      	bhi.n	8000bb6 <HAL_GPIO_Init+0x12e>
 8000ae2:	4a94      	ldr	r2, [pc, #592]	@ (8000d34 <HAL_GPIO_Init+0x2ac>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d04c      	beq.n	8000b82 <HAL_GPIO_Init+0xfa>
 8000ae8:	4a92      	ldr	r2, [pc, #584]	@ (8000d34 <HAL_GPIO_Init+0x2ac>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d863      	bhi.n	8000bb6 <HAL_GPIO_Init+0x12e>
 8000aee:	4a92      	ldr	r2, [pc, #584]	@ (8000d38 <HAL_GPIO_Init+0x2b0>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d046      	beq.n	8000b82 <HAL_GPIO_Init+0xfa>
 8000af4:	4a90      	ldr	r2, [pc, #576]	@ (8000d38 <HAL_GPIO_Init+0x2b0>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d85d      	bhi.n	8000bb6 <HAL_GPIO_Init+0x12e>
 8000afa:	2b12      	cmp	r3, #18
 8000afc:	d82a      	bhi.n	8000b54 <HAL_GPIO_Init+0xcc>
 8000afe:	2b12      	cmp	r3, #18
 8000b00:	d859      	bhi.n	8000bb6 <HAL_GPIO_Init+0x12e>
 8000b02:	a201      	add	r2, pc, #4	@ (adr r2, 8000b08 <HAL_GPIO_Init+0x80>)
 8000b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b08:	08000b83 	.word	0x08000b83
 8000b0c:	08000b5d 	.word	0x08000b5d
 8000b10:	08000b6f 	.word	0x08000b6f
 8000b14:	08000bb1 	.word	0x08000bb1
 8000b18:	08000bb7 	.word	0x08000bb7
 8000b1c:	08000bb7 	.word	0x08000bb7
 8000b20:	08000bb7 	.word	0x08000bb7
 8000b24:	08000bb7 	.word	0x08000bb7
 8000b28:	08000bb7 	.word	0x08000bb7
 8000b2c:	08000bb7 	.word	0x08000bb7
 8000b30:	08000bb7 	.word	0x08000bb7
 8000b34:	08000bb7 	.word	0x08000bb7
 8000b38:	08000bb7 	.word	0x08000bb7
 8000b3c:	08000bb7 	.word	0x08000bb7
 8000b40:	08000bb7 	.word	0x08000bb7
 8000b44:	08000bb7 	.word	0x08000bb7
 8000b48:	08000bb7 	.word	0x08000bb7
 8000b4c:	08000b65 	.word	0x08000b65
 8000b50:	08000b79 	.word	0x08000b79
 8000b54:	4a79      	ldr	r2, [pc, #484]	@ (8000d3c <HAL_GPIO_Init+0x2b4>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d013      	beq.n	8000b82 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b5a:	e02c      	b.n	8000bb6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	623b      	str	r3, [r7, #32]
          break;
 8000b62:	e029      	b.n	8000bb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	3304      	adds	r3, #4
 8000b6a:	623b      	str	r3, [r7, #32]
          break;
 8000b6c:	e024      	b.n	8000bb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	68db      	ldr	r3, [r3, #12]
 8000b72:	3308      	adds	r3, #8
 8000b74:	623b      	str	r3, [r7, #32]
          break;
 8000b76:	e01f      	b.n	8000bb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	330c      	adds	r3, #12
 8000b7e:	623b      	str	r3, [r7, #32]
          break;
 8000b80:	e01a      	b.n	8000bb8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	689b      	ldr	r3, [r3, #8]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d102      	bne.n	8000b90 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b8a:	2304      	movs	r3, #4
 8000b8c:	623b      	str	r3, [r7, #32]
          break;
 8000b8e:	e013      	b.n	8000bb8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	689b      	ldr	r3, [r3, #8]
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d105      	bne.n	8000ba4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b98:	2308      	movs	r3, #8
 8000b9a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	69fa      	ldr	r2, [r7, #28]
 8000ba0:	611a      	str	r2, [r3, #16]
          break;
 8000ba2:	e009      	b.n	8000bb8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ba4:	2308      	movs	r3, #8
 8000ba6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	69fa      	ldr	r2, [r7, #28]
 8000bac:	615a      	str	r2, [r3, #20]
          break;
 8000bae:	e003      	b.n	8000bb8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	623b      	str	r3, [r7, #32]
          break;
 8000bb4:	e000      	b.n	8000bb8 <HAL_GPIO_Init+0x130>
          break;
 8000bb6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000bb8:	69bb      	ldr	r3, [r7, #24]
 8000bba:	2bff      	cmp	r3, #255	@ 0xff
 8000bbc:	d801      	bhi.n	8000bc2 <HAL_GPIO_Init+0x13a>
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	e001      	b.n	8000bc6 <HAL_GPIO_Init+0x13e>
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	3304      	adds	r3, #4
 8000bc6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000bc8:	69bb      	ldr	r3, [r7, #24]
 8000bca:	2bff      	cmp	r3, #255	@ 0xff
 8000bcc:	d802      	bhi.n	8000bd4 <HAL_GPIO_Init+0x14c>
 8000bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	e002      	b.n	8000bda <HAL_GPIO_Init+0x152>
 8000bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bd6:	3b08      	subs	r3, #8
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	210f      	movs	r1, #15
 8000be2:	693b      	ldr	r3, [r7, #16]
 8000be4:	fa01 f303 	lsl.w	r3, r1, r3
 8000be8:	43db      	mvns	r3, r3
 8000bea:	401a      	ands	r2, r3
 8000bec:	6a39      	ldr	r1, [r7, #32]
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf4:	431a      	orrs	r2, r3
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	f000 80b1 	beq.w	8000d6a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c08:	4b4d      	ldr	r3, [pc, #308]	@ (8000d40 <HAL_GPIO_Init+0x2b8>)
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	4a4c      	ldr	r2, [pc, #304]	@ (8000d40 <HAL_GPIO_Init+0x2b8>)
 8000c0e:	f043 0301 	orr.w	r3, r3, #1
 8000c12:	6193      	str	r3, [r2, #24]
 8000c14:	4b4a      	ldr	r3, [pc, #296]	@ (8000d40 <HAL_GPIO_Init+0x2b8>)
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	f003 0301 	and.w	r3, r3, #1
 8000c1c:	60bb      	str	r3, [r7, #8]
 8000c1e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c20:	4a48      	ldr	r2, [pc, #288]	@ (8000d44 <HAL_GPIO_Init+0x2bc>)
 8000c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c24:	089b      	lsrs	r3, r3, #2
 8000c26:	3302      	adds	r3, #2
 8000c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c2c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c30:	f003 0303 	and.w	r3, r3, #3
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	220f      	movs	r2, #15
 8000c38:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3c:	43db      	mvns	r3, r3
 8000c3e:	68fa      	ldr	r2, [r7, #12]
 8000c40:	4013      	ands	r3, r2
 8000c42:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	4a40      	ldr	r2, [pc, #256]	@ (8000d48 <HAL_GPIO_Init+0x2c0>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d013      	beq.n	8000c74 <HAL_GPIO_Init+0x1ec>
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	4a3f      	ldr	r2, [pc, #252]	@ (8000d4c <HAL_GPIO_Init+0x2c4>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d00d      	beq.n	8000c70 <HAL_GPIO_Init+0x1e8>
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	4a3e      	ldr	r2, [pc, #248]	@ (8000d50 <HAL_GPIO_Init+0x2c8>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d007      	beq.n	8000c6c <HAL_GPIO_Init+0x1e4>
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	4a3d      	ldr	r2, [pc, #244]	@ (8000d54 <HAL_GPIO_Init+0x2cc>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d101      	bne.n	8000c68 <HAL_GPIO_Init+0x1e0>
 8000c64:	2303      	movs	r3, #3
 8000c66:	e006      	b.n	8000c76 <HAL_GPIO_Init+0x1ee>
 8000c68:	2304      	movs	r3, #4
 8000c6a:	e004      	b.n	8000c76 <HAL_GPIO_Init+0x1ee>
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	e002      	b.n	8000c76 <HAL_GPIO_Init+0x1ee>
 8000c70:	2301      	movs	r3, #1
 8000c72:	e000      	b.n	8000c76 <HAL_GPIO_Init+0x1ee>
 8000c74:	2300      	movs	r3, #0
 8000c76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c78:	f002 0203 	and.w	r2, r2, #3
 8000c7c:	0092      	lsls	r2, r2, #2
 8000c7e:	4093      	lsls	r3, r2
 8000c80:	68fa      	ldr	r2, [r7, #12]
 8000c82:	4313      	orrs	r3, r2
 8000c84:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c86:	492f      	ldr	r1, [pc, #188]	@ (8000d44 <HAL_GPIO_Init+0x2bc>)
 8000c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c8a:	089b      	lsrs	r3, r3, #2
 8000c8c:	3302      	adds	r3, #2
 8000c8e:	68fa      	ldr	r2, [r7, #12]
 8000c90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d006      	beq.n	8000cae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ca0:	4b2d      	ldr	r3, [pc, #180]	@ (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000ca2:	689a      	ldr	r2, [r3, #8]
 8000ca4:	492c      	ldr	r1, [pc, #176]	@ (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000ca6:	69bb      	ldr	r3, [r7, #24]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	608b      	str	r3, [r1, #8]
 8000cac:	e006      	b.n	8000cbc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000cae:	4b2a      	ldr	r3, [pc, #168]	@ (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000cb0:	689a      	ldr	r2, [r3, #8]
 8000cb2:	69bb      	ldr	r3, [r7, #24]
 8000cb4:	43db      	mvns	r3, r3
 8000cb6:	4928      	ldr	r1, [pc, #160]	@ (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000cb8:	4013      	ands	r3, r2
 8000cba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d006      	beq.n	8000cd6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000cc8:	4b23      	ldr	r3, [pc, #140]	@ (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000cca:	68da      	ldr	r2, [r3, #12]
 8000ccc:	4922      	ldr	r1, [pc, #136]	@ (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000cce:	69bb      	ldr	r3, [r7, #24]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	60cb      	str	r3, [r1, #12]
 8000cd4:	e006      	b.n	8000ce4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000cd6:	4b20      	ldr	r3, [pc, #128]	@ (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000cd8:	68da      	ldr	r2, [r3, #12]
 8000cda:	69bb      	ldr	r3, [r7, #24]
 8000cdc:	43db      	mvns	r3, r3
 8000cde:	491e      	ldr	r1, [pc, #120]	@ (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d006      	beq.n	8000cfe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000cf0:	4b19      	ldr	r3, [pc, #100]	@ (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000cf2:	685a      	ldr	r2, [r3, #4]
 8000cf4:	4918      	ldr	r1, [pc, #96]	@ (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000cf6:	69bb      	ldr	r3, [r7, #24]
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	604b      	str	r3, [r1, #4]
 8000cfc:	e006      	b.n	8000d0c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000cfe:	4b16      	ldr	r3, [pc, #88]	@ (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000d00:	685a      	ldr	r2, [r3, #4]
 8000d02:	69bb      	ldr	r3, [r7, #24]
 8000d04:	43db      	mvns	r3, r3
 8000d06:	4914      	ldr	r1, [pc, #80]	@ (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000d08:	4013      	ands	r3, r2
 8000d0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d021      	beq.n	8000d5c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d18:	4b0f      	ldr	r3, [pc, #60]	@ (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	490e      	ldr	r1, [pc, #56]	@ (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000d1e:	69bb      	ldr	r3, [r7, #24]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	600b      	str	r3, [r1, #0]
 8000d24:	e021      	b.n	8000d6a <HAL_GPIO_Init+0x2e2>
 8000d26:	bf00      	nop
 8000d28:	10320000 	.word	0x10320000
 8000d2c:	10310000 	.word	0x10310000
 8000d30:	10220000 	.word	0x10220000
 8000d34:	10210000 	.word	0x10210000
 8000d38:	10120000 	.word	0x10120000
 8000d3c:	10110000 	.word	0x10110000
 8000d40:	40021000 	.word	0x40021000
 8000d44:	40010000 	.word	0x40010000
 8000d48:	40010800 	.word	0x40010800
 8000d4c:	40010c00 	.word	0x40010c00
 8000d50:	40011000 	.word	0x40011000
 8000d54:	40011400 	.word	0x40011400
 8000d58:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d5c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d8c <HAL_GPIO_Init+0x304>)
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	69bb      	ldr	r3, [r7, #24]
 8000d62:	43db      	mvns	r3, r3
 8000d64:	4909      	ldr	r1, [pc, #36]	@ (8000d8c <HAL_GPIO_Init+0x304>)
 8000d66:	4013      	ands	r3, r2
 8000d68:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d76:	fa22 f303 	lsr.w	r3, r2, r3
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	f47f ae8e 	bne.w	8000a9c <HAL_GPIO_Init+0x14>
  }
}
 8000d80:	bf00      	nop
 8000d82:	bf00      	nop
 8000d84:	372c      	adds	r7, #44	@ 0x2c
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr
 8000d8c:	40010400 	.word	0x40010400

08000d90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	460b      	mov	r3, r1
 8000d9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	689a      	ldr	r2, [r3, #8]
 8000da0:	887b      	ldrh	r3, [r7, #2]
 8000da2:	4013      	ands	r3, r2
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d002      	beq.n	8000dae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000da8:	2301      	movs	r3, #1
 8000daa:	73fb      	strb	r3, [r7, #15]
 8000dac:	e001      	b.n	8000db2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000dae:	2300      	movs	r3, #0
 8000db0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3714      	adds	r7, #20
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bc80      	pop	{r7}
 8000dbc:	4770      	bx	lr
	...

08000dc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d101      	bne.n	8000dd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e12b      	b.n	800102a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d106      	bne.n	8000dec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2200      	movs	r2, #0
 8000de2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f7ff fc4e 	bl	8000688 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2224      	movs	r2, #36	@ 0x24
 8000df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f022 0201 	bic.w	r2, r2, #1
 8000e02:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000e12:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000e22:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000e24:	f001 fbfc 	bl	8002620 <HAL_RCC_GetPCLK1Freq>
 8000e28:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	4a81      	ldr	r2, [pc, #516]	@ (8001034 <HAL_I2C_Init+0x274>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d807      	bhi.n	8000e44 <HAL_I2C_Init+0x84>
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	4a80      	ldr	r2, [pc, #512]	@ (8001038 <HAL_I2C_Init+0x278>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	bf94      	ite	ls
 8000e3c:	2301      	movls	r3, #1
 8000e3e:	2300      	movhi	r3, #0
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	e006      	b.n	8000e52 <HAL_I2C_Init+0x92>
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	4a7d      	ldr	r2, [pc, #500]	@ (800103c <HAL_I2C_Init+0x27c>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	bf94      	ite	ls
 8000e4c:	2301      	movls	r3, #1
 8000e4e:	2300      	movhi	r3, #0
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e0e7      	b.n	800102a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	4a78      	ldr	r2, [pc, #480]	@ (8001040 <HAL_I2C_Init+0x280>)
 8000e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e62:	0c9b      	lsrs	r3, r3, #18
 8000e64:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	68ba      	ldr	r2, [r7, #8]
 8000e76:	430a      	orrs	r2, r1
 8000e78:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	6a1b      	ldr	r3, [r3, #32]
 8000e80:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	4a6a      	ldr	r2, [pc, #424]	@ (8001034 <HAL_I2C_Init+0x274>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d802      	bhi.n	8000e94 <HAL_I2C_Init+0xd4>
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	3301      	adds	r3, #1
 8000e92:	e009      	b.n	8000ea8 <HAL_I2C_Init+0xe8>
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000e9a:	fb02 f303 	mul.w	r3, r2, r3
 8000e9e:	4a69      	ldr	r2, [pc, #420]	@ (8001044 <HAL_I2C_Init+0x284>)
 8000ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea4:	099b      	lsrs	r3, r3, #6
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	687a      	ldr	r2, [r7, #4]
 8000eaa:	6812      	ldr	r2, [r2, #0]
 8000eac:	430b      	orrs	r3, r1
 8000eae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	69db      	ldr	r3, [r3, #28]
 8000eb6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8000eba:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	495c      	ldr	r1, [pc, #368]	@ (8001034 <HAL_I2C_Init+0x274>)
 8000ec4:	428b      	cmp	r3, r1
 8000ec6:	d819      	bhi.n	8000efc <HAL_I2C_Init+0x13c>
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	1e59      	subs	r1, r3, #1
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ed6:	1c59      	adds	r1, r3, #1
 8000ed8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8000edc:	400b      	ands	r3, r1
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d00a      	beq.n	8000ef8 <HAL_I2C_Init+0x138>
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	1e59      	subs	r1, r3, #1
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ef6:	e051      	b.n	8000f9c <HAL_I2C_Init+0x1dc>
 8000ef8:	2304      	movs	r3, #4
 8000efa:	e04f      	b.n	8000f9c <HAL_I2C_Init+0x1dc>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d111      	bne.n	8000f28 <HAL_I2C_Init+0x168>
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	1e58      	subs	r0, r3, #1
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6859      	ldr	r1, [r3, #4]
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	440b      	add	r3, r1
 8000f12:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f16:	3301      	adds	r3, #1
 8000f18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	bf0c      	ite	eq
 8000f20:	2301      	moveq	r3, #1
 8000f22:	2300      	movne	r3, #0
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	e012      	b.n	8000f4e <HAL_I2C_Init+0x18e>
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	1e58      	subs	r0, r3, #1
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6859      	ldr	r1, [r3, #4]
 8000f30:	460b      	mov	r3, r1
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	440b      	add	r3, r1
 8000f36:	0099      	lsls	r1, r3, #2
 8000f38:	440b      	add	r3, r1
 8000f3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f3e:	3301      	adds	r3, #1
 8000f40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	bf0c      	ite	eq
 8000f48:	2301      	moveq	r3, #1
 8000f4a:	2300      	movne	r3, #0
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <HAL_I2C_Init+0x196>
 8000f52:	2301      	movs	r3, #1
 8000f54:	e022      	b.n	8000f9c <HAL_I2C_Init+0x1dc>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d10e      	bne.n	8000f7c <HAL_I2C_Init+0x1bc>
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	1e58      	subs	r0, r3, #1
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6859      	ldr	r1, [r3, #4]
 8000f66:	460b      	mov	r3, r1
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	440b      	add	r3, r1
 8000f6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f70:	3301      	adds	r3, #1
 8000f72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f7a:	e00f      	b.n	8000f9c <HAL_I2C_Init+0x1dc>
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	1e58      	subs	r0, r3, #1
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6859      	ldr	r1, [r3, #4]
 8000f84:	460b      	mov	r3, r1
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	440b      	add	r3, r1
 8000f8a:	0099      	lsls	r1, r3, #2
 8000f8c:	440b      	add	r3, r1
 8000f8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f92:	3301      	adds	r3, #1
 8000f94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f98:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f9c:	6879      	ldr	r1, [r7, #4]
 8000f9e:	6809      	ldr	r1, [r1, #0]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	69da      	ldr	r2, [r3, #28]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6a1b      	ldr	r3, [r3, #32]
 8000fb6:	431a      	orrs	r2, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8000fca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	6911      	ldr	r1, [r2, #16]
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	68d2      	ldr	r2, [r2, #12]
 8000fd6:	4311      	orrs	r1, r2
 8000fd8:	687a      	ldr	r2, [r7, #4]
 8000fda:	6812      	ldr	r2, [r2, #0]
 8000fdc:	430b      	orrs	r3, r1
 8000fde:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	68db      	ldr	r3, [r3, #12]
 8000fe6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	695a      	ldr	r2, [r3, #20]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	699b      	ldr	r3, [r3, #24]
 8000ff2:	431a      	orrs	r2, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	430a      	orrs	r2, r1
 8000ffa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f042 0201 	orr.w	r2, r2, #1
 800100a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2200      	movs	r2, #0
 8001010:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2220      	movs	r2, #32
 8001016:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2200      	movs	r2, #0
 800101e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2200      	movs	r2, #0
 8001024:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001028:	2300      	movs	r3, #0
}
 800102a:	4618      	mov	r0, r3
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	000186a0 	.word	0x000186a0
 8001038:	001e847f 	.word	0x001e847f
 800103c:	003d08ff 	.word	0x003d08ff
 8001040:	431bde83 	.word	0x431bde83
 8001044:	10624dd3 	.word	0x10624dd3

08001048 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b088      	sub	sp, #32
 800104c:	af02      	add	r7, sp, #8
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	4608      	mov	r0, r1
 8001052:	4611      	mov	r1, r2
 8001054:	461a      	mov	r2, r3
 8001056:	4603      	mov	r3, r0
 8001058:	817b      	strh	r3, [r7, #10]
 800105a:	460b      	mov	r3, r1
 800105c:	813b      	strh	r3, [r7, #8]
 800105e:	4613      	mov	r3, r2
 8001060:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001062:	f7ff fbff 	bl	8000864 <HAL_GetTick>
 8001066:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800106e:	b2db      	uxtb	r3, r3
 8001070:	2b20      	cmp	r3, #32
 8001072:	f040 80d9 	bne.w	8001228 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	9300      	str	r3, [sp, #0]
 800107a:	2319      	movs	r3, #25
 800107c:	2201      	movs	r2, #1
 800107e:	496d      	ldr	r1, [pc, #436]	@ (8001234 <HAL_I2C_Mem_Write+0x1ec>)
 8001080:	68f8      	ldr	r0, [r7, #12]
 8001082:	f000 fccd 	bl	8001a20 <I2C_WaitOnFlagUntilTimeout>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800108c:	2302      	movs	r3, #2
 800108e:	e0cc      	b.n	800122a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001096:	2b01      	cmp	r3, #1
 8001098:	d101      	bne.n	800109e <HAL_I2C_Mem_Write+0x56>
 800109a:	2302      	movs	r3, #2
 800109c:	e0c5      	b.n	800122a <HAL_I2C_Mem_Write+0x1e2>
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	2201      	movs	r2, #1
 80010a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 0301 	and.w	r3, r3, #1
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d007      	beq.n	80010c4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f042 0201 	orr.w	r2, r2, #1
 80010c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80010d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	2221      	movs	r2, #33	@ 0x21
 80010d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	2240      	movs	r2, #64	@ 0x40
 80010e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	2200      	movs	r2, #0
 80010e8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	6a3a      	ldr	r2, [r7, #32]
 80010ee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80010f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80010fa:	b29a      	uxth	r2, r3
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	4a4d      	ldr	r2, [pc, #308]	@ (8001238 <HAL_I2C_Mem_Write+0x1f0>)
 8001104:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001106:	88f8      	ldrh	r0, [r7, #6]
 8001108:	893a      	ldrh	r2, [r7, #8]
 800110a:	8979      	ldrh	r1, [r7, #10]
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	9301      	str	r3, [sp, #4]
 8001110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	4603      	mov	r3, r0
 8001116:	68f8      	ldr	r0, [r7, #12]
 8001118:	f000 fb04 	bl	8001724 <I2C_RequestMemoryWrite>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d052      	beq.n	80011c8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e081      	b.n	800122a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001126:	697a      	ldr	r2, [r7, #20]
 8001128:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800112a:	68f8      	ldr	r0, [r7, #12]
 800112c:	f000 fd92 	bl	8001c54 <I2C_WaitOnTXEFlagUntilTimeout>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d00d      	beq.n	8001152 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113a:	2b04      	cmp	r3, #4
 800113c:	d107      	bne.n	800114e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800114c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e06b      	b.n	800122a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001156:	781a      	ldrb	r2, [r3, #0]
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001162:	1c5a      	adds	r2, r3, #1
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800116c:	3b01      	subs	r3, #1
 800116e:	b29a      	uxth	r2, r3
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001178:	b29b      	uxth	r3, r3
 800117a:	3b01      	subs	r3, #1
 800117c:	b29a      	uxth	r2, r3
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	695b      	ldr	r3, [r3, #20]
 8001188:	f003 0304 	and.w	r3, r3, #4
 800118c:	2b04      	cmp	r3, #4
 800118e:	d11b      	bne.n	80011c8 <HAL_I2C_Mem_Write+0x180>
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001194:	2b00      	cmp	r3, #0
 8001196:	d017      	beq.n	80011c8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800119c:	781a      	ldrb	r2, [r3, #0]
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011a8:	1c5a      	adds	r2, r3, #1
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80011b2:	3b01      	subs	r3, #1
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80011be:	b29b      	uxth	r3, r3
 80011c0:	3b01      	subs	r3, #1
 80011c2:	b29a      	uxth	r2, r3
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d1aa      	bne.n	8001126 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011d0:	697a      	ldr	r2, [r7, #20]
 80011d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80011d4:	68f8      	ldr	r0, [r7, #12]
 80011d6:	f000 fd85 	bl	8001ce4 <I2C_WaitOnBTFFlagUntilTimeout>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d00d      	beq.n	80011fc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e4:	2b04      	cmp	r3, #4
 80011e6:	d107      	bne.n	80011f8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80011f6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	e016      	b.n	800122a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800120a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	2220      	movs	r2, #32
 8001210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	2200      	movs	r2, #0
 8001218:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	2200      	movs	r2, #0
 8001220:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001224:	2300      	movs	r3, #0
 8001226:	e000      	b.n	800122a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001228:	2302      	movs	r3, #2
  }
}
 800122a:	4618      	mov	r0, r3
 800122c:	3718      	adds	r7, #24
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	00100002 	.word	0x00100002
 8001238:	ffff0000 	.word	0xffff0000

0800123c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08c      	sub	sp, #48	@ 0x30
 8001240:	af02      	add	r7, sp, #8
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	4608      	mov	r0, r1
 8001246:	4611      	mov	r1, r2
 8001248:	461a      	mov	r2, r3
 800124a:	4603      	mov	r3, r0
 800124c:	817b      	strh	r3, [r7, #10]
 800124e:	460b      	mov	r3, r1
 8001250:	813b      	strh	r3, [r7, #8]
 8001252:	4613      	mov	r3, r2
 8001254:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001256:	2300      	movs	r3, #0
 8001258:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800125a:	f7ff fb03 	bl	8000864 <HAL_GetTick>
 800125e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001266:	b2db      	uxtb	r3, r3
 8001268:	2b20      	cmp	r3, #32
 800126a:	f040 8250 	bne.w	800170e <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800126e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001270:	9300      	str	r3, [sp, #0]
 8001272:	2319      	movs	r3, #25
 8001274:	2201      	movs	r2, #1
 8001276:	4982      	ldr	r1, [pc, #520]	@ (8001480 <HAL_I2C_Mem_Read+0x244>)
 8001278:	68f8      	ldr	r0, [r7, #12]
 800127a:	f000 fbd1 	bl	8001a20 <I2C_WaitOnFlagUntilTimeout>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001284:	2302      	movs	r3, #2
 8001286:	e243      	b.n	8001710 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800128e:	2b01      	cmp	r3, #1
 8001290:	d101      	bne.n	8001296 <HAL_I2C_Mem_Read+0x5a>
 8001292:	2302      	movs	r3, #2
 8001294:	e23c      	b.n	8001710 <HAL_I2C_Mem_Read+0x4d4>
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	2201      	movs	r2, #1
 800129a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0301 	and.w	r3, r3, #1
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d007      	beq.n	80012bc <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f042 0201 	orr.w	r2, r2, #1
 80012ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80012ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	2222      	movs	r2, #34	@ 0x22
 80012d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	2240      	movs	r2, #64	@ 0x40
 80012d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	2200      	movs	r2, #0
 80012e0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80012e6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80012ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	4a62      	ldr	r2, [pc, #392]	@ (8001484 <HAL_I2C_Mem_Read+0x248>)
 80012fc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80012fe:	88f8      	ldrh	r0, [r7, #6]
 8001300:	893a      	ldrh	r2, [r7, #8]
 8001302:	8979      	ldrh	r1, [r7, #10]
 8001304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001306:	9301      	str	r3, [sp, #4]
 8001308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	4603      	mov	r3, r0
 800130e:	68f8      	ldr	r0, [r7, #12]
 8001310:	f000 fa9e 	bl	8001850 <I2C_RequestMemoryRead>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e1f8      	b.n	8001710 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001322:	2b00      	cmp	r3, #0
 8001324:	d113      	bne.n	800134e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001326:	2300      	movs	r3, #0
 8001328:	61fb      	str	r3, [r7, #28]
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	695b      	ldr	r3, [r3, #20]
 8001330:	61fb      	str	r3, [r7, #28]
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	61fb      	str	r3, [r7, #28]
 800133a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	e1cc      	b.n	80016e8 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001352:	2b01      	cmp	r3, #1
 8001354:	d11e      	bne.n	8001394 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001364:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001366:	b672      	cpsid	i
}
 8001368:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800136a:	2300      	movs	r3, #0
 800136c:	61bb      	str	r3, [r7, #24]
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	695b      	ldr	r3, [r3, #20]
 8001374:	61bb      	str	r3, [r7, #24]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	61bb      	str	r3, [r7, #24]
 800137e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800138e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001390:	b662      	cpsie	i
}
 8001392:	e035      	b.n	8001400 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001398:	2b02      	cmp	r3, #2
 800139a:	d11e      	bne.n	80013da <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80013aa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80013ac:	b672      	cpsid	i
}
 80013ae:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	695b      	ldr	r3, [r3, #20]
 80013ba:	617b      	str	r3, [r7, #20]
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	699b      	ldr	r3, [r3, #24]
 80013c2:	617b      	str	r3, [r7, #20]
 80013c4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80013d4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80013d6:	b662      	cpsie	i
}
 80013d8:	e012      	b.n	8001400 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80013e8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013ea:	2300      	movs	r3, #0
 80013ec:	613b      	str	r3, [r7, #16]
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	695b      	ldr	r3, [r3, #20]
 80013f4:	613b      	str	r3, [r7, #16]
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	613b      	str	r3, [r7, #16]
 80013fe:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001400:	e172      	b.n	80016e8 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001406:	2b03      	cmp	r3, #3
 8001408:	f200 811f 	bhi.w	800164a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001410:	2b01      	cmp	r3, #1
 8001412:	d123      	bne.n	800145c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001414:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001416:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001418:	68f8      	ldr	r0, [r7, #12]
 800141a:	f000 fcab 	bl	8001d74 <I2C_WaitOnRXNEFlagUntilTimeout>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	e173      	b.n	8001710 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	691a      	ldr	r2, [r3, #16]
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001432:	b2d2      	uxtb	r2, r2
 8001434:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800143a:	1c5a      	adds	r2, r3, #1
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001444:	3b01      	subs	r3, #1
 8001446:	b29a      	uxth	r2, r3
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001450:	b29b      	uxth	r3, r3
 8001452:	3b01      	subs	r3, #1
 8001454:	b29a      	uxth	r2, r3
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800145a:	e145      	b.n	80016e8 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001460:	2b02      	cmp	r3, #2
 8001462:	d152      	bne.n	800150a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001466:	9300      	str	r3, [sp, #0]
 8001468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800146a:	2200      	movs	r2, #0
 800146c:	4906      	ldr	r1, [pc, #24]	@ (8001488 <HAL_I2C_Mem_Read+0x24c>)
 800146e:	68f8      	ldr	r0, [r7, #12]
 8001470:	f000 fad6 	bl	8001a20 <I2C_WaitOnFlagUntilTimeout>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d008      	beq.n	800148c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e148      	b.n	8001710 <HAL_I2C_Mem_Read+0x4d4>
 800147e:	bf00      	nop
 8001480:	00100002 	.word	0x00100002
 8001484:	ffff0000 	.word	0xffff0000
 8001488:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800148c:	b672      	cpsid	i
}
 800148e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800149e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	691a      	ldr	r2, [r3, #16]
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014aa:	b2d2      	uxtb	r2, r2
 80014ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014b2:	1c5a      	adds	r2, r3, #1
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014bc:	3b01      	subs	r3, #1
 80014be:	b29a      	uxth	r2, r3
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	3b01      	subs	r3, #1
 80014cc:	b29a      	uxth	r2, r3
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80014d2:	b662      	cpsie	i
}
 80014d4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	691a      	ldr	r2, [r3, #16]
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014e0:	b2d2      	uxtb	r2, r2
 80014e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014e8:	1c5a      	adds	r2, r3, #1
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014f2:	3b01      	subs	r3, #1
 80014f4:	b29a      	uxth	r2, r3
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014fe:	b29b      	uxth	r3, r3
 8001500:	3b01      	subs	r3, #1
 8001502:	b29a      	uxth	r2, r3
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001508:	e0ee      	b.n	80016e8 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800150a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800150c:	9300      	str	r3, [sp, #0]
 800150e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001510:	2200      	movs	r2, #0
 8001512:	4981      	ldr	r1, [pc, #516]	@ (8001718 <HAL_I2C_Mem_Read+0x4dc>)
 8001514:	68f8      	ldr	r0, [r7, #12]
 8001516:	f000 fa83 	bl	8001a20 <I2C_WaitOnFlagUntilTimeout>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e0f5      	b.n	8001710 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001532:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001534:	b672      	cpsid	i
}
 8001536:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	691a      	ldr	r2, [r3, #16]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001542:	b2d2      	uxtb	r2, r2
 8001544:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800154a:	1c5a      	adds	r2, r3, #1
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001554:	3b01      	subs	r3, #1
 8001556:	b29a      	uxth	r2, r3
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001560:	b29b      	uxth	r3, r3
 8001562:	3b01      	subs	r3, #1
 8001564:	b29a      	uxth	r2, r3
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800156a:	4b6c      	ldr	r3, [pc, #432]	@ (800171c <HAL_I2C_Mem_Read+0x4e0>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	08db      	lsrs	r3, r3, #3
 8001570:	4a6b      	ldr	r2, [pc, #428]	@ (8001720 <HAL_I2C_Mem_Read+0x4e4>)
 8001572:	fba2 2303 	umull	r2, r3, r2, r3
 8001576:	0a1a      	lsrs	r2, r3, #8
 8001578:	4613      	mov	r3, r2
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	4413      	add	r3, r2
 800157e:	00da      	lsls	r2, r3, #3
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001584:	6a3b      	ldr	r3, [r7, #32]
 8001586:	3b01      	subs	r3, #1
 8001588:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800158a:	6a3b      	ldr	r3, [r7, #32]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d118      	bne.n	80015c2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2200      	movs	r2, #0
 8001594:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	2220      	movs	r2, #32
 800159a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2200      	movs	r2, #0
 80015a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015aa:	f043 0220 	orr.w	r2, r3, #32
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80015b2:	b662      	cpsie	i
}
 80015b4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e0a6      	b.n	8001710 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	695b      	ldr	r3, [r3, #20]
 80015c8:	f003 0304 	and.w	r3, r3, #4
 80015cc:	2b04      	cmp	r3, #4
 80015ce:	d1d9      	bne.n	8001584 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80015de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	691a      	ldr	r2, [r3, #16]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ea:	b2d2      	uxtb	r2, r2
 80015ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015f2:	1c5a      	adds	r2, r3, #1
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015fc:	3b01      	subs	r3, #1
 80015fe:	b29a      	uxth	r2, r3
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001608:	b29b      	uxth	r3, r3
 800160a:	3b01      	subs	r3, #1
 800160c:	b29a      	uxth	r2, r3
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001612:	b662      	cpsie	i
}
 8001614:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	691a      	ldr	r2, [r3, #16]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001620:	b2d2      	uxtb	r2, r2
 8001622:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001628:	1c5a      	adds	r2, r3, #1
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001632:	3b01      	subs	r3, #1
 8001634:	b29a      	uxth	r2, r3
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800163e:	b29b      	uxth	r3, r3
 8001640:	3b01      	subs	r3, #1
 8001642:	b29a      	uxth	r2, r3
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001648:	e04e      	b.n	80016e8 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800164a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800164c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800164e:	68f8      	ldr	r0, [r7, #12]
 8001650:	f000 fb90 	bl	8001d74 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e058      	b.n	8001710 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	691a      	ldr	r2, [r3, #16]
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001668:	b2d2      	uxtb	r2, r2
 800166a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001670:	1c5a      	adds	r2, r3, #1
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800167a:	3b01      	subs	r3, #1
 800167c:	b29a      	uxth	r2, r3
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001686:	b29b      	uxth	r3, r3
 8001688:	3b01      	subs	r3, #1
 800168a:	b29a      	uxth	r2, r3
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	695b      	ldr	r3, [r3, #20]
 8001696:	f003 0304 	and.w	r3, r3, #4
 800169a:	2b04      	cmp	r3, #4
 800169c:	d124      	bne.n	80016e8 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016a2:	2b03      	cmp	r3, #3
 80016a4:	d107      	bne.n	80016b6 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80016b4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	691a      	ldr	r2, [r3, #16]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016c0:	b2d2      	uxtb	r2, r2
 80016c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016c8:	1c5a      	adds	r2, r3, #1
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016d2:	3b01      	subs	r3, #1
 80016d4:	b29a      	uxth	r2, r3
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016de:	b29b      	uxth	r3, r3
 80016e0:	3b01      	subs	r3, #1
 80016e2:	b29a      	uxth	r2, r3
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	f47f ae88 	bne.w	8001402 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2220      	movs	r2, #32
 80016f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2200      	movs	r2, #0
 80016fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2200      	movs	r2, #0
 8001706:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800170a:	2300      	movs	r3, #0
 800170c:	e000      	b.n	8001710 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 800170e:	2302      	movs	r3, #2
  }
}
 8001710:	4618      	mov	r0, r3
 8001712:	3728      	adds	r7, #40	@ 0x28
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	00010004 	.word	0x00010004
 800171c:	20000000 	.word	0x20000000
 8001720:	14f8b589 	.word	0x14f8b589

08001724 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b088      	sub	sp, #32
 8001728:	af02      	add	r7, sp, #8
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	4608      	mov	r0, r1
 800172e:	4611      	mov	r1, r2
 8001730:	461a      	mov	r2, r3
 8001732:	4603      	mov	r3, r0
 8001734:	817b      	strh	r3, [r7, #10]
 8001736:	460b      	mov	r3, r1
 8001738:	813b      	strh	r3, [r7, #8]
 800173a:	4613      	mov	r3, r2
 800173c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800174c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800174e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001750:	9300      	str	r3, [sp, #0]
 8001752:	6a3b      	ldr	r3, [r7, #32]
 8001754:	2200      	movs	r2, #0
 8001756:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800175a:	68f8      	ldr	r0, [r7, #12]
 800175c:	f000 f960 	bl	8001a20 <I2C_WaitOnFlagUntilTimeout>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d00d      	beq.n	8001782 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001770:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001774:	d103      	bne.n	800177e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800177c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e05f      	b.n	8001842 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001782:	897b      	ldrh	r3, [r7, #10]
 8001784:	b2db      	uxtb	r3, r3
 8001786:	461a      	mov	r2, r3
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001790:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001794:	6a3a      	ldr	r2, [r7, #32]
 8001796:	492d      	ldr	r1, [pc, #180]	@ (800184c <I2C_RequestMemoryWrite+0x128>)
 8001798:	68f8      	ldr	r0, [r7, #12]
 800179a:	f000 f9bb 	bl	8001b14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e04c      	b.n	8001842 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	695b      	ldr	r3, [r3, #20]
 80017b2:	617b      	str	r3, [r7, #20]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	699b      	ldr	r3, [r3, #24]
 80017ba:	617b      	str	r3, [r7, #20]
 80017bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80017be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017c0:	6a39      	ldr	r1, [r7, #32]
 80017c2:	68f8      	ldr	r0, [r7, #12]
 80017c4:	f000 fa46 	bl	8001c54 <I2C_WaitOnTXEFlagUntilTimeout>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d00d      	beq.n	80017ea <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d2:	2b04      	cmp	r3, #4
 80017d4:	d107      	bne.n	80017e6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80017e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e02b      	b.n	8001842 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80017ea:	88fb      	ldrh	r3, [r7, #6]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d105      	bne.n	80017fc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80017f0:	893b      	ldrh	r3, [r7, #8]
 80017f2:	b2da      	uxtb	r2, r3
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	611a      	str	r2, [r3, #16]
 80017fa:	e021      	b.n	8001840 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80017fc:	893b      	ldrh	r3, [r7, #8]
 80017fe:	0a1b      	lsrs	r3, r3, #8
 8001800:	b29b      	uxth	r3, r3
 8001802:	b2da      	uxtb	r2, r3
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800180a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800180c:	6a39      	ldr	r1, [r7, #32]
 800180e:	68f8      	ldr	r0, [r7, #12]
 8001810:	f000 fa20 	bl	8001c54 <I2C_WaitOnTXEFlagUntilTimeout>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d00d      	beq.n	8001836 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181e:	2b04      	cmp	r3, #4
 8001820:	d107      	bne.n	8001832 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001830:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e005      	b.n	8001842 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001836:	893b      	ldrh	r3, [r7, #8]
 8001838:	b2da      	uxtb	r2, r3
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3718      	adds	r7, #24
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	00010002 	.word	0x00010002

08001850 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b088      	sub	sp, #32
 8001854:	af02      	add	r7, sp, #8
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	4608      	mov	r0, r1
 800185a:	4611      	mov	r1, r2
 800185c:	461a      	mov	r2, r3
 800185e:	4603      	mov	r3, r0
 8001860:	817b      	strh	r3, [r7, #10]
 8001862:	460b      	mov	r3, r1
 8001864:	813b      	strh	r3, [r7, #8]
 8001866:	4613      	mov	r3, r2
 8001868:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001878:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001888:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800188a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800188c:	9300      	str	r3, [sp, #0]
 800188e:	6a3b      	ldr	r3, [r7, #32]
 8001890:	2200      	movs	r2, #0
 8001892:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001896:	68f8      	ldr	r0, [r7, #12]
 8001898:	f000 f8c2 	bl	8001a20 <I2C_WaitOnFlagUntilTimeout>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d00d      	beq.n	80018be <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80018b0:	d103      	bne.n	80018ba <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018b8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e0aa      	b.n	8001a14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80018be:	897b      	ldrh	r3, [r7, #10]
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	461a      	mov	r2, r3
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80018cc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80018ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d0:	6a3a      	ldr	r2, [r7, #32]
 80018d2:	4952      	ldr	r1, [pc, #328]	@ (8001a1c <I2C_RequestMemoryRead+0x1cc>)
 80018d4:	68f8      	ldr	r0, [r7, #12]
 80018d6:	f000 f91d 	bl	8001b14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e097      	b.n	8001a14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018e4:	2300      	movs	r3, #0
 80018e6:	617b      	str	r3, [r7, #20]
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	695b      	ldr	r3, [r3, #20]
 80018ee:	617b      	str	r3, [r7, #20]
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	699b      	ldr	r3, [r3, #24]
 80018f6:	617b      	str	r3, [r7, #20]
 80018f8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018fc:	6a39      	ldr	r1, [r7, #32]
 80018fe:	68f8      	ldr	r0, [r7, #12]
 8001900:	f000 f9a8 	bl	8001c54 <I2C_WaitOnTXEFlagUntilTimeout>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d00d      	beq.n	8001926 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190e:	2b04      	cmp	r3, #4
 8001910:	d107      	bne.n	8001922 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001920:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e076      	b.n	8001a14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001926:	88fb      	ldrh	r3, [r7, #6]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d105      	bne.n	8001938 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800192c:	893b      	ldrh	r3, [r7, #8]
 800192e:	b2da      	uxtb	r2, r3
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	611a      	str	r2, [r3, #16]
 8001936:	e021      	b.n	800197c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001938:	893b      	ldrh	r3, [r7, #8]
 800193a:	0a1b      	lsrs	r3, r3, #8
 800193c:	b29b      	uxth	r3, r3
 800193e:	b2da      	uxtb	r2, r3
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001946:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001948:	6a39      	ldr	r1, [r7, #32]
 800194a:	68f8      	ldr	r0, [r7, #12]
 800194c:	f000 f982 	bl	8001c54 <I2C_WaitOnTXEFlagUntilTimeout>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d00d      	beq.n	8001972 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195a:	2b04      	cmp	r3, #4
 800195c:	d107      	bne.n	800196e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800196c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e050      	b.n	8001a14 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001972:	893b      	ldrh	r3, [r7, #8]
 8001974:	b2da      	uxtb	r2, r3
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800197c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800197e:	6a39      	ldr	r1, [r7, #32]
 8001980:	68f8      	ldr	r0, [r7, #12]
 8001982:	f000 f967 	bl	8001c54 <I2C_WaitOnTXEFlagUntilTimeout>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d00d      	beq.n	80019a8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001990:	2b04      	cmp	r3, #4
 8001992:	d107      	bne.n	80019a4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019a2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e035      	b.n	8001a14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80019b6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80019b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ba:	9300      	str	r3, [sp, #0]
 80019bc:	6a3b      	ldr	r3, [r7, #32]
 80019be:	2200      	movs	r2, #0
 80019c0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80019c4:	68f8      	ldr	r0, [r7, #12]
 80019c6:	f000 f82b 	bl	8001a20 <I2C_WaitOnFlagUntilTimeout>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d00d      	beq.n	80019ec <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80019de:	d103      	bne.n	80019e8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019e6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e013      	b.n	8001a14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80019ec:	897b      	ldrh	r3, [r7, #10]
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	f043 0301 	orr.w	r3, r3, #1
 80019f4:	b2da      	uxtb	r2, r3
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80019fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019fe:	6a3a      	ldr	r2, [r7, #32]
 8001a00:	4906      	ldr	r1, [pc, #24]	@ (8001a1c <I2C_RequestMemoryRead+0x1cc>)
 8001a02:	68f8      	ldr	r0, [r7, #12]
 8001a04:	f000 f886 	bl	8001b14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e000      	b.n	8001a14 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001a12:	2300      	movs	r3, #0
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3718      	adds	r7, #24
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	00010002 	.word	0x00010002

08001a20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	603b      	str	r3, [r7, #0]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a30:	e048      	b.n	8001ac4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a38:	d044      	beq.n	8001ac4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a3a:	f7fe ff13 	bl	8000864 <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	683a      	ldr	r2, [r7, #0]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d302      	bcc.n	8001a50 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d139      	bne.n	8001ac4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	0c1b      	lsrs	r3, r3, #16
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d10d      	bne.n	8001a76 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	695b      	ldr	r3, [r3, #20]
 8001a60:	43da      	mvns	r2, r3
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	4013      	ands	r3, r2
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	bf0c      	ite	eq
 8001a6c:	2301      	moveq	r3, #1
 8001a6e:	2300      	movne	r3, #0
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	461a      	mov	r2, r3
 8001a74:	e00c      	b.n	8001a90 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	43da      	mvns	r2, r3
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	4013      	ands	r3, r2
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	bf0c      	ite	eq
 8001a88:	2301      	moveq	r3, #1
 8001a8a:	2300      	movne	r3, #0
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	461a      	mov	r2, r3
 8001a90:	79fb      	ldrb	r3, [r7, #7]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d116      	bne.n	8001ac4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2220      	movs	r2, #32
 8001aa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab0:	f043 0220 	orr.w	r2, r3, #32
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e023      	b.n	8001b0c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	0c1b      	lsrs	r3, r3, #16
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d10d      	bne.n	8001aea <I2C_WaitOnFlagUntilTimeout+0xca>
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	695b      	ldr	r3, [r3, #20]
 8001ad4:	43da      	mvns	r2, r3
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	bf0c      	ite	eq
 8001ae0:	2301      	moveq	r3, #1
 8001ae2:	2300      	movne	r3, #0
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	e00c      	b.n	8001b04 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	43da      	mvns	r2, r3
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	4013      	ands	r3, r2
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	bf0c      	ite	eq
 8001afc:	2301      	moveq	r3, #1
 8001afe:	2300      	movne	r3, #0
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	461a      	mov	r2, r3
 8001b04:	79fb      	ldrb	r3, [r7, #7]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d093      	beq.n	8001a32 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001b0a:	2300      	movs	r3, #0
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3710      	adds	r7, #16
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	607a      	str	r2, [r7, #4]
 8001b20:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b22:	e071      	b.n	8001c08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b32:	d123      	bne.n	8001b7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b42:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001b4c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2200      	movs	r2, #0
 8001b52:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2220      	movs	r2, #32
 8001b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b68:	f043 0204 	orr.w	r2, r3, #4
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e067      	b.n	8001c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b82:	d041      	beq.n	8001c08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b84:	f7fe fe6e 	bl	8000864 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d302      	bcc.n	8001b9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d136      	bne.n	8001c08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	0c1b      	lsrs	r3, r3, #16
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d10c      	bne.n	8001bbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	695b      	ldr	r3, [r3, #20]
 8001baa:	43da      	mvns	r2, r3
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	bf14      	ite	ne
 8001bb6:	2301      	movne	r3, #1
 8001bb8:	2300      	moveq	r3, #0
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	e00b      	b.n	8001bd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	43da      	mvns	r2, r3
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	bf14      	ite	ne
 8001bd0:	2301      	movne	r3, #1
 8001bd2:	2300      	moveq	r3, #0
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d016      	beq.n	8001c08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2220      	movs	r2, #32
 8001be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf4:	f043 0220 	orr.w	r2, r3, #32
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e021      	b.n	8001c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	0c1b      	lsrs	r3, r3, #16
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d10c      	bne.n	8001c2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	695b      	ldr	r3, [r3, #20]
 8001c18:	43da      	mvns	r2, r3
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	bf14      	ite	ne
 8001c24:	2301      	movne	r3, #1
 8001c26:	2300      	moveq	r3, #0
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	e00b      	b.n	8001c44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	43da      	mvns	r2, r3
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	4013      	ands	r3, r2
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	bf14      	ite	ne
 8001c3e:	2301      	movne	r3, #1
 8001c40:	2300      	moveq	r3, #0
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	f47f af6d 	bne.w	8001b24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3710      	adds	r7, #16
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	60b9      	str	r1, [r7, #8]
 8001c5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c60:	e034      	b.n	8001ccc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c62:	68f8      	ldr	r0, [r7, #12]
 8001c64:	f000 f8e3 	bl	8001e2e <I2C_IsAcknowledgeFailed>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e034      	b.n	8001cdc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c78:	d028      	beq.n	8001ccc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c7a:	f7fe fdf3 	bl	8000864 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	68ba      	ldr	r2, [r7, #8]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d302      	bcc.n	8001c90 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d11d      	bne.n	8001ccc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c9a:	2b80      	cmp	r3, #128	@ 0x80
 8001c9c:	d016      	beq.n	8001ccc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2220      	movs	r2, #32
 8001ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb8:	f043 0220 	orr.w	r2, r3, #32
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e007      	b.n	8001cdc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	695b      	ldr	r3, [r3, #20]
 8001cd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cd6:	2b80      	cmp	r3, #128	@ 0x80
 8001cd8:	d1c3      	bne.n	8001c62 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3710      	adds	r7, #16
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001cf0:	e034      	b.n	8001d5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001cf2:	68f8      	ldr	r0, [r7, #12]
 8001cf4:	f000 f89b 	bl	8001e2e <I2C_IsAcknowledgeFailed>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e034      	b.n	8001d6c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d08:	d028      	beq.n	8001d5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d0a:	f7fe fdab 	bl	8000864 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	68ba      	ldr	r2, [r7, #8]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d302      	bcc.n	8001d20 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d11d      	bne.n	8001d5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	f003 0304 	and.w	r3, r3, #4
 8001d2a:	2b04      	cmp	r3, #4
 8001d2c:	d016      	beq.n	8001d5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2200      	movs	r2, #0
 8001d32:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2220      	movs	r2, #32
 8001d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d48:	f043 0220 	orr.w	r2, r3, #32
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2200      	movs	r2, #0
 8001d54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e007      	b.n	8001d6c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	695b      	ldr	r3, [r3, #20]
 8001d62:	f003 0304 	and.w	r3, r3, #4
 8001d66:	2b04      	cmp	r3, #4
 8001d68:	d1c3      	bne.n	8001cf2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001d80:	e049      	b.n	8001e16 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	695b      	ldr	r3, [r3, #20]
 8001d88:	f003 0310 	and.w	r3, r3, #16
 8001d8c:	2b10      	cmp	r3, #16
 8001d8e:	d119      	bne.n	8001dc4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f06f 0210 	mvn.w	r2, #16
 8001d98:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2220      	movs	r2, #32
 8001da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e030      	b.n	8001e26 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dc4:	f7fe fd4e 	bl	8000864 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	68ba      	ldr	r2, [r7, #8]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d302      	bcc.n	8001dda <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d11d      	bne.n	8001e16 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	695b      	ldr	r3, [r3, #20]
 8001de0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001de4:	2b40      	cmp	r3, #64	@ 0x40
 8001de6:	d016      	beq.n	8001e16 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2200      	movs	r2, #0
 8001dec:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2220      	movs	r2, #32
 8001df2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e02:	f043 0220 	orr.w	r2, r3, #32
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e007      	b.n	8001e26 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	695b      	ldr	r3, [r3, #20]
 8001e1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e20:	2b40      	cmp	r3, #64	@ 0x40
 8001e22:	d1ae      	bne.n	8001d82 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	b083      	sub	sp, #12
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	695b      	ldr	r3, [r3, #20]
 8001e3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e44:	d11b      	bne.n	8001e7e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001e4e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2220      	movs	r2, #32
 8001e5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6a:	f043 0204 	orr.w	r2, r3, #4
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e000      	b.n	8001e80 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bc80      	pop	{r7}
 8001e88:	4770      	bx	lr
	...

08001e8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e272      	b.n	8002384 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	f000 8087 	beq.w	8001fba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001eac:	4b92      	ldr	r3, [pc, #584]	@ (80020f8 <HAL_RCC_OscConfig+0x26c>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f003 030c 	and.w	r3, r3, #12
 8001eb4:	2b04      	cmp	r3, #4
 8001eb6:	d00c      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001eb8:	4b8f      	ldr	r3, [pc, #572]	@ (80020f8 <HAL_RCC_OscConfig+0x26c>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f003 030c 	and.w	r3, r3, #12
 8001ec0:	2b08      	cmp	r3, #8
 8001ec2:	d112      	bne.n	8001eea <HAL_RCC_OscConfig+0x5e>
 8001ec4:	4b8c      	ldr	r3, [pc, #560]	@ (80020f8 <HAL_RCC_OscConfig+0x26c>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ecc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ed0:	d10b      	bne.n	8001eea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ed2:	4b89      	ldr	r3, [pc, #548]	@ (80020f8 <HAL_RCC_OscConfig+0x26c>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d06c      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x12c>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d168      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e24c      	b.n	8002384 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ef2:	d106      	bne.n	8001f02 <HAL_RCC_OscConfig+0x76>
 8001ef4:	4b80      	ldr	r3, [pc, #512]	@ (80020f8 <HAL_RCC_OscConfig+0x26c>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a7f      	ldr	r2, [pc, #508]	@ (80020f8 <HAL_RCC_OscConfig+0x26c>)
 8001efa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001efe:	6013      	str	r3, [r2, #0]
 8001f00:	e02e      	b.n	8001f60 <HAL_RCC_OscConfig+0xd4>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d10c      	bne.n	8001f24 <HAL_RCC_OscConfig+0x98>
 8001f0a:	4b7b      	ldr	r3, [pc, #492]	@ (80020f8 <HAL_RCC_OscConfig+0x26c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a7a      	ldr	r2, [pc, #488]	@ (80020f8 <HAL_RCC_OscConfig+0x26c>)
 8001f10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f14:	6013      	str	r3, [r2, #0]
 8001f16:	4b78      	ldr	r3, [pc, #480]	@ (80020f8 <HAL_RCC_OscConfig+0x26c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a77      	ldr	r2, [pc, #476]	@ (80020f8 <HAL_RCC_OscConfig+0x26c>)
 8001f1c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f20:	6013      	str	r3, [r2, #0]
 8001f22:	e01d      	b.n	8001f60 <HAL_RCC_OscConfig+0xd4>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f2c:	d10c      	bne.n	8001f48 <HAL_RCC_OscConfig+0xbc>
 8001f2e:	4b72      	ldr	r3, [pc, #456]	@ (80020f8 <HAL_RCC_OscConfig+0x26c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a71      	ldr	r2, [pc, #452]	@ (80020f8 <HAL_RCC_OscConfig+0x26c>)
 8001f34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f38:	6013      	str	r3, [r2, #0]
 8001f3a:	4b6f      	ldr	r3, [pc, #444]	@ (80020f8 <HAL_RCC_OscConfig+0x26c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a6e      	ldr	r2, [pc, #440]	@ (80020f8 <HAL_RCC_OscConfig+0x26c>)
 8001f40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f44:	6013      	str	r3, [r2, #0]
 8001f46:	e00b      	b.n	8001f60 <HAL_RCC_OscConfig+0xd4>
 8001f48:	4b6b      	ldr	r3, [pc, #428]	@ (80020f8 <HAL_RCC_OscConfig+0x26c>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a6a      	ldr	r2, [pc, #424]	@ (80020f8 <HAL_RCC_OscConfig+0x26c>)
 8001f4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f52:	6013      	str	r3, [r2, #0]
 8001f54:	4b68      	ldr	r3, [pc, #416]	@ (80020f8 <HAL_RCC_OscConfig+0x26c>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a67      	ldr	r2, [pc, #412]	@ (80020f8 <HAL_RCC_OscConfig+0x26c>)
 8001f5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f5e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d013      	beq.n	8001f90 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f68:	f7fe fc7c 	bl	8000864 <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f70:	f7fe fc78 	bl	8000864 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b64      	cmp	r3, #100	@ 0x64
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e200      	b.n	8002384 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f82:	4b5d      	ldr	r3, [pc, #372]	@ (80020f8 <HAL_RCC_OscConfig+0x26c>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d0f0      	beq.n	8001f70 <HAL_RCC_OscConfig+0xe4>
 8001f8e:	e014      	b.n	8001fba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f90:	f7fe fc68 	bl	8000864 <HAL_GetTick>
 8001f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f96:	e008      	b.n	8001faa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f98:	f7fe fc64 	bl	8000864 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b64      	cmp	r3, #100	@ 0x64
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e1ec      	b.n	8002384 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001faa:	4b53      	ldr	r3, [pc, #332]	@ (80020f8 <HAL_RCC_OscConfig+0x26c>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d1f0      	bne.n	8001f98 <HAL_RCC_OscConfig+0x10c>
 8001fb6:	e000      	b.n	8001fba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d063      	beq.n	800208e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fc6:	4b4c      	ldr	r3, [pc, #304]	@ (80020f8 <HAL_RCC_OscConfig+0x26c>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f003 030c 	and.w	r3, r3, #12
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d00b      	beq.n	8001fea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001fd2:	4b49      	ldr	r3, [pc, #292]	@ (80020f8 <HAL_RCC_OscConfig+0x26c>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f003 030c 	and.w	r3, r3, #12
 8001fda:	2b08      	cmp	r3, #8
 8001fdc:	d11c      	bne.n	8002018 <HAL_RCC_OscConfig+0x18c>
 8001fde:	4b46      	ldr	r3, [pc, #280]	@ (80020f8 <HAL_RCC_OscConfig+0x26c>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d116      	bne.n	8002018 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fea:	4b43      	ldr	r3, [pc, #268]	@ (80020f8 <HAL_RCC_OscConfig+0x26c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d005      	beq.n	8002002 <HAL_RCC_OscConfig+0x176>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d001      	beq.n	8002002 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e1c0      	b.n	8002384 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002002:	4b3d      	ldr	r3, [pc, #244]	@ (80020f8 <HAL_RCC_OscConfig+0x26c>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	695b      	ldr	r3, [r3, #20]
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	4939      	ldr	r1, [pc, #228]	@ (80020f8 <HAL_RCC_OscConfig+0x26c>)
 8002012:	4313      	orrs	r3, r2
 8002014:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002016:	e03a      	b.n	800208e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d020      	beq.n	8002062 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002020:	4b36      	ldr	r3, [pc, #216]	@ (80020fc <HAL_RCC_OscConfig+0x270>)
 8002022:	2201      	movs	r2, #1
 8002024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002026:	f7fe fc1d 	bl	8000864 <HAL_GetTick>
 800202a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800202c:	e008      	b.n	8002040 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800202e:	f7fe fc19 	bl	8000864 <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	2b02      	cmp	r3, #2
 800203a:	d901      	bls.n	8002040 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e1a1      	b.n	8002384 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002040:	4b2d      	ldr	r3, [pc, #180]	@ (80020f8 <HAL_RCC_OscConfig+0x26c>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d0f0      	beq.n	800202e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800204c:	4b2a      	ldr	r3, [pc, #168]	@ (80020f8 <HAL_RCC_OscConfig+0x26c>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	695b      	ldr	r3, [r3, #20]
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	4927      	ldr	r1, [pc, #156]	@ (80020f8 <HAL_RCC_OscConfig+0x26c>)
 800205c:	4313      	orrs	r3, r2
 800205e:	600b      	str	r3, [r1, #0]
 8002060:	e015      	b.n	800208e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002062:	4b26      	ldr	r3, [pc, #152]	@ (80020fc <HAL_RCC_OscConfig+0x270>)
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002068:	f7fe fbfc 	bl	8000864 <HAL_GetTick>
 800206c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800206e:	e008      	b.n	8002082 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002070:	f7fe fbf8 	bl	8000864 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b02      	cmp	r3, #2
 800207c:	d901      	bls.n	8002082 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e180      	b.n	8002384 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002082:	4b1d      	ldr	r3, [pc, #116]	@ (80020f8 <HAL_RCC_OscConfig+0x26c>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d1f0      	bne.n	8002070 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0308 	and.w	r3, r3, #8
 8002096:	2b00      	cmp	r3, #0
 8002098:	d03a      	beq.n	8002110 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d019      	beq.n	80020d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020a2:	4b17      	ldr	r3, [pc, #92]	@ (8002100 <HAL_RCC_OscConfig+0x274>)
 80020a4:	2201      	movs	r2, #1
 80020a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a8:	f7fe fbdc 	bl	8000864 <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ae:	e008      	b.n	80020c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020b0:	f7fe fbd8 	bl	8000864 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e160      	b.n	8002384 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020c2:	4b0d      	ldr	r3, [pc, #52]	@ (80020f8 <HAL_RCC_OscConfig+0x26c>)
 80020c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d0f0      	beq.n	80020b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80020ce:	2001      	movs	r0, #1
 80020d0:	f000 faba 	bl	8002648 <RCC_Delay>
 80020d4:	e01c      	b.n	8002110 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002100 <HAL_RCC_OscConfig+0x274>)
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020dc:	f7fe fbc2 	bl	8000864 <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020e2:	e00f      	b.n	8002104 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020e4:	f7fe fbbe 	bl	8000864 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d908      	bls.n	8002104 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e146      	b.n	8002384 <HAL_RCC_OscConfig+0x4f8>
 80020f6:	bf00      	nop
 80020f8:	40021000 	.word	0x40021000
 80020fc:	42420000 	.word	0x42420000
 8002100:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002104:	4b92      	ldr	r3, [pc, #584]	@ (8002350 <HAL_RCC_OscConfig+0x4c4>)
 8002106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002108:	f003 0302 	and.w	r3, r3, #2
 800210c:	2b00      	cmp	r3, #0
 800210e:	d1e9      	bne.n	80020e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0304 	and.w	r3, r3, #4
 8002118:	2b00      	cmp	r3, #0
 800211a:	f000 80a6 	beq.w	800226a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800211e:	2300      	movs	r3, #0
 8002120:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002122:	4b8b      	ldr	r3, [pc, #556]	@ (8002350 <HAL_RCC_OscConfig+0x4c4>)
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d10d      	bne.n	800214a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800212e:	4b88      	ldr	r3, [pc, #544]	@ (8002350 <HAL_RCC_OscConfig+0x4c4>)
 8002130:	69db      	ldr	r3, [r3, #28]
 8002132:	4a87      	ldr	r2, [pc, #540]	@ (8002350 <HAL_RCC_OscConfig+0x4c4>)
 8002134:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002138:	61d3      	str	r3, [r2, #28]
 800213a:	4b85      	ldr	r3, [pc, #532]	@ (8002350 <HAL_RCC_OscConfig+0x4c4>)
 800213c:	69db      	ldr	r3, [r3, #28]
 800213e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002142:	60bb      	str	r3, [r7, #8]
 8002144:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002146:	2301      	movs	r3, #1
 8002148:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800214a:	4b82      	ldr	r3, [pc, #520]	@ (8002354 <HAL_RCC_OscConfig+0x4c8>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002152:	2b00      	cmp	r3, #0
 8002154:	d118      	bne.n	8002188 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002156:	4b7f      	ldr	r3, [pc, #508]	@ (8002354 <HAL_RCC_OscConfig+0x4c8>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a7e      	ldr	r2, [pc, #504]	@ (8002354 <HAL_RCC_OscConfig+0x4c8>)
 800215c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002160:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002162:	f7fe fb7f 	bl	8000864 <HAL_GetTick>
 8002166:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002168:	e008      	b.n	800217c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800216a:	f7fe fb7b 	bl	8000864 <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	2b64      	cmp	r3, #100	@ 0x64
 8002176:	d901      	bls.n	800217c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e103      	b.n	8002384 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800217c:	4b75      	ldr	r3, [pc, #468]	@ (8002354 <HAL_RCC_OscConfig+0x4c8>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002184:	2b00      	cmp	r3, #0
 8002186:	d0f0      	beq.n	800216a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d106      	bne.n	800219e <HAL_RCC_OscConfig+0x312>
 8002190:	4b6f      	ldr	r3, [pc, #444]	@ (8002350 <HAL_RCC_OscConfig+0x4c4>)
 8002192:	6a1b      	ldr	r3, [r3, #32]
 8002194:	4a6e      	ldr	r2, [pc, #440]	@ (8002350 <HAL_RCC_OscConfig+0x4c4>)
 8002196:	f043 0301 	orr.w	r3, r3, #1
 800219a:	6213      	str	r3, [r2, #32]
 800219c:	e02d      	b.n	80021fa <HAL_RCC_OscConfig+0x36e>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d10c      	bne.n	80021c0 <HAL_RCC_OscConfig+0x334>
 80021a6:	4b6a      	ldr	r3, [pc, #424]	@ (8002350 <HAL_RCC_OscConfig+0x4c4>)
 80021a8:	6a1b      	ldr	r3, [r3, #32]
 80021aa:	4a69      	ldr	r2, [pc, #420]	@ (8002350 <HAL_RCC_OscConfig+0x4c4>)
 80021ac:	f023 0301 	bic.w	r3, r3, #1
 80021b0:	6213      	str	r3, [r2, #32]
 80021b2:	4b67      	ldr	r3, [pc, #412]	@ (8002350 <HAL_RCC_OscConfig+0x4c4>)
 80021b4:	6a1b      	ldr	r3, [r3, #32]
 80021b6:	4a66      	ldr	r2, [pc, #408]	@ (8002350 <HAL_RCC_OscConfig+0x4c4>)
 80021b8:	f023 0304 	bic.w	r3, r3, #4
 80021bc:	6213      	str	r3, [r2, #32]
 80021be:	e01c      	b.n	80021fa <HAL_RCC_OscConfig+0x36e>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	2b05      	cmp	r3, #5
 80021c6:	d10c      	bne.n	80021e2 <HAL_RCC_OscConfig+0x356>
 80021c8:	4b61      	ldr	r3, [pc, #388]	@ (8002350 <HAL_RCC_OscConfig+0x4c4>)
 80021ca:	6a1b      	ldr	r3, [r3, #32]
 80021cc:	4a60      	ldr	r2, [pc, #384]	@ (8002350 <HAL_RCC_OscConfig+0x4c4>)
 80021ce:	f043 0304 	orr.w	r3, r3, #4
 80021d2:	6213      	str	r3, [r2, #32]
 80021d4:	4b5e      	ldr	r3, [pc, #376]	@ (8002350 <HAL_RCC_OscConfig+0x4c4>)
 80021d6:	6a1b      	ldr	r3, [r3, #32]
 80021d8:	4a5d      	ldr	r2, [pc, #372]	@ (8002350 <HAL_RCC_OscConfig+0x4c4>)
 80021da:	f043 0301 	orr.w	r3, r3, #1
 80021de:	6213      	str	r3, [r2, #32]
 80021e0:	e00b      	b.n	80021fa <HAL_RCC_OscConfig+0x36e>
 80021e2:	4b5b      	ldr	r3, [pc, #364]	@ (8002350 <HAL_RCC_OscConfig+0x4c4>)
 80021e4:	6a1b      	ldr	r3, [r3, #32]
 80021e6:	4a5a      	ldr	r2, [pc, #360]	@ (8002350 <HAL_RCC_OscConfig+0x4c4>)
 80021e8:	f023 0301 	bic.w	r3, r3, #1
 80021ec:	6213      	str	r3, [r2, #32]
 80021ee:	4b58      	ldr	r3, [pc, #352]	@ (8002350 <HAL_RCC_OscConfig+0x4c4>)
 80021f0:	6a1b      	ldr	r3, [r3, #32]
 80021f2:	4a57      	ldr	r2, [pc, #348]	@ (8002350 <HAL_RCC_OscConfig+0x4c4>)
 80021f4:	f023 0304 	bic.w	r3, r3, #4
 80021f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d015      	beq.n	800222e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002202:	f7fe fb2f 	bl	8000864 <HAL_GetTick>
 8002206:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002208:	e00a      	b.n	8002220 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800220a:	f7fe fb2b 	bl	8000864 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002218:	4293      	cmp	r3, r2
 800221a:	d901      	bls.n	8002220 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e0b1      	b.n	8002384 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002220:	4b4b      	ldr	r3, [pc, #300]	@ (8002350 <HAL_RCC_OscConfig+0x4c4>)
 8002222:	6a1b      	ldr	r3, [r3, #32]
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d0ee      	beq.n	800220a <HAL_RCC_OscConfig+0x37e>
 800222c:	e014      	b.n	8002258 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800222e:	f7fe fb19 	bl	8000864 <HAL_GetTick>
 8002232:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002234:	e00a      	b.n	800224c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002236:	f7fe fb15 	bl	8000864 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002244:	4293      	cmp	r3, r2
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e09b      	b.n	8002384 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800224c:	4b40      	ldr	r3, [pc, #256]	@ (8002350 <HAL_RCC_OscConfig+0x4c4>)
 800224e:	6a1b      	ldr	r3, [r3, #32]
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d1ee      	bne.n	8002236 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002258:	7dfb      	ldrb	r3, [r7, #23]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d105      	bne.n	800226a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800225e:	4b3c      	ldr	r3, [pc, #240]	@ (8002350 <HAL_RCC_OscConfig+0x4c4>)
 8002260:	69db      	ldr	r3, [r3, #28]
 8002262:	4a3b      	ldr	r2, [pc, #236]	@ (8002350 <HAL_RCC_OscConfig+0x4c4>)
 8002264:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002268:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	69db      	ldr	r3, [r3, #28]
 800226e:	2b00      	cmp	r3, #0
 8002270:	f000 8087 	beq.w	8002382 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002274:	4b36      	ldr	r3, [pc, #216]	@ (8002350 <HAL_RCC_OscConfig+0x4c4>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f003 030c 	and.w	r3, r3, #12
 800227c:	2b08      	cmp	r3, #8
 800227e:	d061      	beq.n	8002344 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	69db      	ldr	r3, [r3, #28]
 8002284:	2b02      	cmp	r3, #2
 8002286:	d146      	bne.n	8002316 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002288:	4b33      	ldr	r3, [pc, #204]	@ (8002358 <HAL_RCC_OscConfig+0x4cc>)
 800228a:	2200      	movs	r2, #0
 800228c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228e:	f7fe fae9 	bl	8000864 <HAL_GetTick>
 8002292:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002294:	e008      	b.n	80022a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002296:	f7fe fae5 	bl	8000864 <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e06d      	b.n	8002384 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022a8:	4b29      	ldr	r3, [pc, #164]	@ (8002350 <HAL_RCC_OscConfig+0x4c4>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d1f0      	bne.n	8002296 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a1b      	ldr	r3, [r3, #32]
 80022b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022bc:	d108      	bne.n	80022d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022be:	4b24      	ldr	r3, [pc, #144]	@ (8002350 <HAL_RCC_OscConfig+0x4c4>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	4921      	ldr	r1, [pc, #132]	@ (8002350 <HAL_RCC_OscConfig+0x4c4>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022d0:	4b1f      	ldr	r3, [pc, #124]	@ (8002350 <HAL_RCC_OscConfig+0x4c4>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a19      	ldr	r1, [r3, #32]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e0:	430b      	orrs	r3, r1
 80022e2:	491b      	ldr	r1, [pc, #108]	@ (8002350 <HAL_RCC_OscConfig+0x4c4>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002358 <HAL_RCC_OscConfig+0x4cc>)
 80022ea:	2201      	movs	r2, #1
 80022ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ee:	f7fe fab9 	bl	8000864 <HAL_GetTick>
 80022f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022f4:	e008      	b.n	8002308 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022f6:	f7fe fab5 	bl	8000864 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	2b02      	cmp	r3, #2
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e03d      	b.n	8002384 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002308:	4b11      	ldr	r3, [pc, #68]	@ (8002350 <HAL_RCC_OscConfig+0x4c4>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d0f0      	beq.n	80022f6 <HAL_RCC_OscConfig+0x46a>
 8002314:	e035      	b.n	8002382 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002316:	4b10      	ldr	r3, [pc, #64]	@ (8002358 <HAL_RCC_OscConfig+0x4cc>)
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231c:	f7fe faa2 	bl	8000864 <HAL_GetTick>
 8002320:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002322:	e008      	b.n	8002336 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002324:	f7fe fa9e 	bl	8000864 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b02      	cmp	r3, #2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e026      	b.n	8002384 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002336:	4b06      	ldr	r3, [pc, #24]	@ (8002350 <HAL_RCC_OscConfig+0x4c4>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d1f0      	bne.n	8002324 <HAL_RCC_OscConfig+0x498>
 8002342:	e01e      	b.n	8002382 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	69db      	ldr	r3, [r3, #28]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d107      	bne.n	800235c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e019      	b.n	8002384 <HAL_RCC_OscConfig+0x4f8>
 8002350:	40021000 	.word	0x40021000
 8002354:	40007000 	.word	0x40007000
 8002358:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800235c:	4b0b      	ldr	r3, [pc, #44]	@ (800238c <HAL_RCC_OscConfig+0x500>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a1b      	ldr	r3, [r3, #32]
 800236c:	429a      	cmp	r2, r3
 800236e:	d106      	bne.n	800237e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800237a:	429a      	cmp	r2, r3
 800237c:	d001      	beq.n	8002382 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e000      	b.n	8002384 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002382:	2300      	movs	r3, #0
}
 8002384:	4618      	mov	r0, r3
 8002386:	3718      	adds	r7, #24
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	40021000 	.word	0x40021000

08002390 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d101      	bne.n	80023a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e0d0      	b.n	8002546 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023a4:	4b6a      	ldr	r3, [pc, #424]	@ (8002550 <HAL_RCC_ClockConfig+0x1c0>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0307 	and.w	r3, r3, #7
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d910      	bls.n	80023d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023b2:	4b67      	ldr	r3, [pc, #412]	@ (8002550 <HAL_RCC_ClockConfig+0x1c0>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f023 0207 	bic.w	r2, r3, #7
 80023ba:	4965      	ldr	r1, [pc, #404]	@ (8002550 <HAL_RCC_ClockConfig+0x1c0>)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	4313      	orrs	r3, r2
 80023c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023c2:	4b63      	ldr	r3, [pc, #396]	@ (8002550 <HAL_RCC_ClockConfig+0x1c0>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0307 	and.w	r3, r3, #7
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d001      	beq.n	80023d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e0b8      	b.n	8002546 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d020      	beq.n	8002422 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0304 	and.w	r3, r3, #4
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d005      	beq.n	80023f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023ec:	4b59      	ldr	r3, [pc, #356]	@ (8002554 <HAL_RCC_ClockConfig+0x1c4>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	4a58      	ldr	r2, [pc, #352]	@ (8002554 <HAL_RCC_ClockConfig+0x1c4>)
 80023f2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80023f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0308 	and.w	r3, r3, #8
 8002400:	2b00      	cmp	r3, #0
 8002402:	d005      	beq.n	8002410 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002404:	4b53      	ldr	r3, [pc, #332]	@ (8002554 <HAL_RCC_ClockConfig+0x1c4>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	4a52      	ldr	r2, [pc, #328]	@ (8002554 <HAL_RCC_ClockConfig+0x1c4>)
 800240a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800240e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002410:	4b50      	ldr	r3, [pc, #320]	@ (8002554 <HAL_RCC_ClockConfig+0x1c4>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	494d      	ldr	r1, [pc, #308]	@ (8002554 <HAL_RCC_ClockConfig+0x1c4>)
 800241e:	4313      	orrs	r3, r2
 8002420:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	2b00      	cmp	r3, #0
 800242c:	d040      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d107      	bne.n	8002446 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002436:	4b47      	ldr	r3, [pc, #284]	@ (8002554 <HAL_RCC_ClockConfig+0x1c4>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d115      	bne.n	800246e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e07f      	b.n	8002546 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b02      	cmp	r3, #2
 800244c:	d107      	bne.n	800245e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800244e:	4b41      	ldr	r3, [pc, #260]	@ (8002554 <HAL_RCC_ClockConfig+0x1c4>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d109      	bne.n	800246e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e073      	b.n	8002546 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800245e:	4b3d      	ldr	r3, [pc, #244]	@ (8002554 <HAL_RCC_ClockConfig+0x1c4>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e06b      	b.n	8002546 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800246e:	4b39      	ldr	r3, [pc, #228]	@ (8002554 <HAL_RCC_ClockConfig+0x1c4>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f023 0203 	bic.w	r2, r3, #3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	4936      	ldr	r1, [pc, #216]	@ (8002554 <HAL_RCC_ClockConfig+0x1c4>)
 800247c:	4313      	orrs	r3, r2
 800247e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002480:	f7fe f9f0 	bl	8000864 <HAL_GetTick>
 8002484:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002486:	e00a      	b.n	800249e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002488:	f7fe f9ec 	bl	8000864 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002496:	4293      	cmp	r3, r2
 8002498:	d901      	bls.n	800249e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e053      	b.n	8002546 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800249e:	4b2d      	ldr	r3, [pc, #180]	@ (8002554 <HAL_RCC_ClockConfig+0x1c4>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f003 020c 	and.w	r2, r3, #12
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d1eb      	bne.n	8002488 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024b0:	4b27      	ldr	r3, [pc, #156]	@ (8002550 <HAL_RCC_ClockConfig+0x1c0>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0307 	and.w	r3, r3, #7
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d210      	bcs.n	80024e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024be:	4b24      	ldr	r3, [pc, #144]	@ (8002550 <HAL_RCC_ClockConfig+0x1c0>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f023 0207 	bic.w	r2, r3, #7
 80024c6:	4922      	ldr	r1, [pc, #136]	@ (8002550 <HAL_RCC_ClockConfig+0x1c0>)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ce:	4b20      	ldr	r3, [pc, #128]	@ (8002550 <HAL_RCC_ClockConfig+0x1c0>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0307 	and.w	r3, r3, #7
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d001      	beq.n	80024e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e032      	b.n	8002546 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0304 	and.w	r3, r3, #4
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d008      	beq.n	80024fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024ec:	4b19      	ldr	r3, [pc, #100]	@ (8002554 <HAL_RCC_ClockConfig+0x1c4>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	4916      	ldr	r1, [pc, #88]	@ (8002554 <HAL_RCC_ClockConfig+0x1c4>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0308 	and.w	r3, r3, #8
 8002506:	2b00      	cmp	r3, #0
 8002508:	d009      	beq.n	800251e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800250a:	4b12      	ldr	r3, [pc, #72]	@ (8002554 <HAL_RCC_ClockConfig+0x1c4>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	490e      	ldr	r1, [pc, #56]	@ (8002554 <HAL_RCC_ClockConfig+0x1c4>)
 800251a:	4313      	orrs	r3, r2
 800251c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800251e:	f000 f821 	bl	8002564 <HAL_RCC_GetSysClockFreq>
 8002522:	4602      	mov	r2, r0
 8002524:	4b0b      	ldr	r3, [pc, #44]	@ (8002554 <HAL_RCC_ClockConfig+0x1c4>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	091b      	lsrs	r3, r3, #4
 800252a:	f003 030f 	and.w	r3, r3, #15
 800252e:	490a      	ldr	r1, [pc, #40]	@ (8002558 <HAL_RCC_ClockConfig+0x1c8>)
 8002530:	5ccb      	ldrb	r3, [r1, r3]
 8002532:	fa22 f303 	lsr.w	r3, r2, r3
 8002536:	4a09      	ldr	r2, [pc, #36]	@ (800255c <HAL_RCC_ClockConfig+0x1cc>)
 8002538:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800253a:	4b09      	ldr	r3, [pc, #36]	@ (8002560 <HAL_RCC_ClockConfig+0x1d0>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4618      	mov	r0, r3
 8002540:	f7fe f94e 	bl	80007e0 <HAL_InitTick>

  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40022000 	.word	0x40022000
 8002554:	40021000 	.word	0x40021000
 8002558:	080026f4 	.word	0x080026f4
 800255c:	20000000 	.word	0x20000000
 8002560:	20000004 	.word	0x20000004

08002564 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002564:	b480      	push	{r7}
 8002566:	b087      	sub	sp, #28
 8002568:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800256a:	2300      	movs	r3, #0
 800256c:	60fb      	str	r3, [r7, #12]
 800256e:	2300      	movs	r3, #0
 8002570:	60bb      	str	r3, [r7, #8]
 8002572:	2300      	movs	r3, #0
 8002574:	617b      	str	r3, [r7, #20]
 8002576:	2300      	movs	r3, #0
 8002578:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800257a:	2300      	movs	r3, #0
 800257c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800257e:	4b1e      	ldr	r3, [pc, #120]	@ (80025f8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f003 030c 	and.w	r3, r3, #12
 800258a:	2b04      	cmp	r3, #4
 800258c:	d002      	beq.n	8002594 <HAL_RCC_GetSysClockFreq+0x30>
 800258e:	2b08      	cmp	r3, #8
 8002590:	d003      	beq.n	800259a <HAL_RCC_GetSysClockFreq+0x36>
 8002592:	e027      	b.n	80025e4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002594:	4b19      	ldr	r3, [pc, #100]	@ (80025fc <HAL_RCC_GetSysClockFreq+0x98>)
 8002596:	613b      	str	r3, [r7, #16]
      break;
 8002598:	e027      	b.n	80025ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	0c9b      	lsrs	r3, r3, #18
 800259e:	f003 030f 	and.w	r3, r3, #15
 80025a2:	4a17      	ldr	r2, [pc, #92]	@ (8002600 <HAL_RCC_GetSysClockFreq+0x9c>)
 80025a4:	5cd3      	ldrb	r3, [r2, r3]
 80025a6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d010      	beq.n	80025d4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025b2:	4b11      	ldr	r3, [pc, #68]	@ (80025f8 <HAL_RCC_GetSysClockFreq+0x94>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	0c5b      	lsrs	r3, r3, #17
 80025b8:	f003 0301 	and.w	r3, r3, #1
 80025bc:	4a11      	ldr	r2, [pc, #68]	@ (8002604 <HAL_RCC_GetSysClockFreq+0xa0>)
 80025be:	5cd3      	ldrb	r3, [r2, r3]
 80025c0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a0d      	ldr	r2, [pc, #52]	@ (80025fc <HAL_RCC_GetSysClockFreq+0x98>)
 80025c6:	fb03 f202 	mul.w	r2, r3, r2
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d0:	617b      	str	r3, [r7, #20]
 80025d2:	e004      	b.n	80025de <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a0c      	ldr	r2, [pc, #48]	@ (8002608 <HAL_RCC_GetSysClockFreq+0xa4>)
 80025d8:	fb02 f303 	mul.w	r3, r2, r3
 80025dc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	613b      	str	r3, [r7, #16]
      break;
 80025e2:	e002      	b.n	80025ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025e4:	4b05      	ldr	r3, [pc, #20]	@ (80025fc <HAL_RCC_GetSysClockFreq+0x98>)
 80025e6:	613b      	str	r3, [r7, #16]
      break;
 80025e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025ea:	693b      	ldr	r3, [r7, #16]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	371c      	adds	r7, #28
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bc80      	pop	{r7}
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	40021000 	.word	0x40021000
 80025fc:	007a1200 	.word	0x007a1200
 8002600:	0800270c 	.word	0x0800270c
 8002604:	0800271c 	.word	0x0800271c
 8002608:	003d0900 	.word	0x003d0900

0800260c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002610:	4b02      	ldr	r3, [pc, #8]	@ (800261c <HAL_RCC_GetHCLKFreq+0x10>)
 8002612:	681b      	ldr	r3, [r3, #0]
}
 8002614:	4618      	mov	r0, r3
 8002616:	46bd      	mov	sp, r7
 8002618:	bc80      	pop	{r7}
 800261a:	4770      	bx	lr
 800261c:	20000000 	.word	0x20000000

08002620 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002624:	f7ff fff2 	bl	800260c <HAL_RCC_GetHCLKFreq>
 8002628:	4602      	mov	r2, r0
 800262a:	4b05      	ldr	r3, [pc, #20]	@ (8002640 <HAL_RCC_GetPCLK1Freq+0x20>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	0a1b      	lsrs	r3, r3, #8
 8002630:	f003 0307 	and.w	r3, r3, #7
 8002634:	4903      	ldr	r1, [pc, #12]	@ (8002644 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002636:	5ccb      	ldrb	r3, [r1, r3]
 8002638:	fa22 f303 	lsr.w	r3, r2, r3
}
 800263c:	4618      	mov	r0, r3
 800263e:	bd80      	pop	{r7, pc}
 8002640:	40021000 	.word	0x40021000
 8002644:	08002704 	.word	0x08002704

08002648 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002648:	b480      	push	{r7}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002650:	4b0a      	ldr	r3, [pc, #40]	@ (800267c <RCC_Delay+0x34>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a0a      	ldr	r2, [pc, #40]	@ (8002680 <RCC_Delay+0x38>)
 8002656:	fba2 2303 	umull	r2, r3, r2, r3
 800265a:	0a5b      	lsrs	r3, r3, #9
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	fb02 f303 	mul.w	r3, r2, r3
 8002662:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002664:	bf00      	nop
  }
  while (Delay --);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	1e5a      	subs	r2, r3, #1
 800266a:	60fa      	str	r2, [r7, #12]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d1f9      	bne.n	8002664 <RCC_Delay+0x1c>
}
 8002670:	bf00      	nop
 8002672:	bf00      	nop
 8002674:	3714      	adds	r7, #20
 8002676:	46bd      	mov	sp, r7
 8002678:	bc80      	pop	{r7}
 800267a:	4770      	bx	lr
 800267c:	20000000 	.word	0x20000000
 8002680:	10624dd3 	.word	0x10624dd3

08002684 <memset>:
 8002684:	4603      	mov	r3, r0
 8002686:	4402      	add	r2, r0
 8002688:	4293      	cmp	r3, r2
 800268a:	d100      	bne.n	800268e <memset+0xa>
 800268c:	4770      	bx	lr
 800268e:	f803 1b01 	strb.w	r1, [r3], #1
 8002692:	e7f9      	b.n	8002688 <memset+0x4>

08002694 <__libc_init_array>:
 8002694:	b570      	push	{r4, r5, r6, lr}
 8002696:	2600      	movs	r6, #0
 8002698:	4d0c      	ldr	r5, [pc, #48]	@ (80026cc <__libc_init_array+0x38>)
 800269a:	4c0d      	ldr	r4, [pc, #52]	@ (80026d0 <__libc_init_array+0x3c>)
 800269c:	1b64      	subs	r4, r4, r5
 800269e:	10a4      	asrs	r4, r4, #2
 80026a0:	42a6      	cmp	r6, r4
 80026a2:	d109      	bne.n	80026b8 <__libc_init_array+0x24>
 80026a4:	f000 f81a 	bl	80026dc <_init>
 80026a8:	2600      	movs	r6, #0
 80026aa:	4d0a      	ldr	r5, [pc, #40]	@ (80026d4 <__libc_init_array+0x40>)
 80026ac:	4c0a      	ldr	r4, [pc, #40]	@ (80026d8 <__libc_init_array+0x44>)
 80026ae:	1b64      	subs	r4, r4, r5
 80026b0:	10a4      	asrs	r4, r4, #2
 80026b2:	42a6      	cmp	r6, r4
 80026b4:	d105      	bne.n	80026c2 <__libc_init_array+0x2e>
 80026b6:	bd70      	pop	{r4, r5, r6, pc}
 80026b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80026bc:	4798      	blx	r3
 80026be:	3601      	adds	r6, #1
 80026c0:	e7ee      	b.n	80026a0 <__libc_init_array+0xc>
 80026c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80026c6:	4798      	blx	r3
 80026c8:	3601      	adds	r6, #1
 80026ca:	e7f2      	b.n	80026b2 <__libc_init_array+0x1e>
 80026cc:	08002720 	.word	0x08002720
 80026d0:	08002720 	.word	0x08002720
 80026d4:	08002720 	.word	0x08002720
 80026d8:	08002724 	.word	0x08002724

080026dc <_init>:
 80026dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026de:	bf00      	nop
 80026e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026e2:	bc08      	pop	{r3}
 80026e4:	469e      	mov	lr, r3
 80026e6:	4770      	bx	lr

080026e8 <_fini>:
 80026e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ea:	bf00      	nop
 80026ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026ee:	bc08      	pop	{r3}
 80026f0:	469e      	mov	lr, r3
 80026f2:	4770      	bx	lr
