
ES_Project_Digital-Clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057d4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  080058e0  080058e0  000068e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800591c  0800591c  0000705c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800591c  0800591c  0000705c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800591c  0800591c  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800591c  0800591c  0000691c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005920  08005920  00006920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005924  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  2000005c  08005980  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  08005980  0000721c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f61b  00000000  00000000  00007085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000297d  00000000  00000000  000166a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e28  00000000  00000000  00019020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b18  00000000  00000000  00019e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c15  00000000  00000000  0001a960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013691  00000000  00000000  00033575  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c2c3  00000000  00000000  00046c06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d2ec9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039b0  00000000  00000000  000d2f0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  000d68bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	080058c8 	.word	0x080058c8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	080058c8 	.word	0x080058c8

0800014c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000152:	1d3b      	adds	r3, r7, #4
 8000154:	2200      	movs	r2, #0
 8000156:	601a      	str	r2, [r3, #0]
 8000158:	605a      	str	r2, [r3, #4]
 800015a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800015c:	4b18      	ldr	r3, [pc, #96]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800015e:	4a19      	ldr	r2, [pc, #100]	@ (80001c4 <MX_ADC1_Init+0x78>)
 8000160:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000162:	4b17      	ldr	r3, [pc, #92]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000164:	2200      	movs	r2, #0
 8000166:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000168:	4b15      	ldr	r3, [pc, #84]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800016a:	2200      	movs	r2, #0
 800016c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800016e:	4b14      	ldr	r3, [pc, #80]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000170:	2200      	movs	r2, #0
 8000172:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000174:	4b12      	ldr	r3, [pc, #72]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000176:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800017a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800017c:	4b10      	ldr	r3, [pc, #64]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800017e:	2200      	movs	r2, #0
 8000180:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000182:	4b0f      	ldr	r3, [pc, #60]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000184:	2201      	movs	r2, #1
 8000186:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000188:	480d      	ldr	r0, [pc, #52]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800018a:	f002 f8af 	bl	80022ec <HAL_ADC_Init>
 800018e:	4603      	mov	r3, r0
 8000190:	2b00      	cmp	r3, #0
 8000192:	d001      	beq.n	8000198 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000194:	f001 fe6e 	bl	8001e74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000198:	2304      	movs	r3, #4
 800019a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800019c:	2301      	movs	r3, #1
 800019e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001a0:	2300      	movs	r3, #0
 80001a2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	4619      	mov	r1, r3
 80001a8:	4805      	ldr	r0, [pc, #20]	@ (80001c0 <MX_ADC1_Init+0x74>)
 80001aa:	f002 fb01 	bl	80027b0 <HAL_ADC_ConfigChannel>
 80001ae:	4603      	mov	r3, r0
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d001      	beq.n	80001b8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80001b4:	f001 fe5e 	bl	8001e74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80001b8:	bf00      	nop
 80001ba:	3710      	adds	r7, #16
 80001bc:	46bd      	mov	sp, r7
 80001be:	bd80      	pop	{r7, pc}
 80001c0:	20000078 	.word	0x20000078
 80001c4:	40012400 	.word	0x40012400

080001c8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b088      	sub	sp, #32
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001d0:	f107 0310 	add.w	r3, r7, #16
 80001d4:	2200      	movs	r2, #0
 80001d6:	601a      	str	r2, [r3, #0]
 80001d8:	605a      	str	r2, [r3, #4]
 80001da:	609a      	str	r2, [r3, #8]
 80001dc:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	4a18      	ldr	r2, [pc, #96]	@ (8000244 <HAL_ADC_MspInit+0x7c>)
 80001e4:	4293      	cmp	r3, r2
 80001e6:	d129      	bne.n	800023c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80001e8:	4b17      	ldr	r3, [pc, #92]	@ (8000248 <HAL_ADC_MspInit+0x80>)
 80001ea:	699b      	ldr	r3, [r3, #24]
 80001ec:	4a16      	ldr	r2, [pc, #88]	@ (8000248 <HAL_ADC_MspInit+0x80>)
 80001ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80001f2:	6193      	str	r3, [r2, #24]
 80001f4:	4b14      	ldr	r3, [pc, #80]	@ (8000248 <HAL_ADC_MspInit+0x80>)
 80001f6:	699b      	ldr	r3, [r3, #24]
 80001f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80001fc:	60fb      	str	r3, [r7, #12]
 80001fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000200:	4b11      	ldr	r3, [pc, #68]	@ (8000248 <HAL_ADC_MspInit+0x80>)
 8000202:	699b      	ldr	r3, [r3, #24]
 8000204:	4a10      	ldr	r2, [pc, #64]	@ (8000248 <HAL_ADC_MspInit+0x80>)
 8000206:	f043 0304 	orr.w	r3, r3, #4
 800020a:	6193      	str	r3, [r2, #24]
 800020c:	4b0e      	ldr	r3, [pc, #56]	@ (8000248 <HAL_ADC_MspInit+0x80>)
 800020e:	699b      	ldr	r3, [r3, #24]
 8000210:	f003 0304 	and.w	r3, r3, #4
 8000214:	60bb      	str	r3, [r7, #8]
 8000216:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000218:	2310      	movs	r3, #16
 800021a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800021c:	2303      	movs	r3, #3
 800021e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000220:	f107 0310 	add.w	r3, r7, #16
 8000224:	4619      	mov	r1, r3
 8000226:	4809      	ldr	r0, [pc, #36]	@ (800024c <HAL_ADC_MspInit+0x84>)
 8000228:	f002 fe1e 	bl	8002e68 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800022c:	2200      	movs	r2, #0
 800022e:	2100      	movs	r1, #0
 8000230:	2012      	movs	r0, #18
 8000232:	f002 fd30 	bl	8002c96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000236:	2012      	movs	r0, #18
 8000238:	f002 fd49 	bl	8002cce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800023c:	bf00      	nop
 800023e:	3720      	adds	r7, #32
 8000240:	46bd      	mov	sp, r7
 8000242:	bd80      	pop	{r7, pc}
 8000244:	40012400 	.word	0x40012400
 8000248:	40021000 	.word	0x40021000
 800024c:	40010800 	.word	0x40010800

08000250 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b088      	sub	sp, #32
 8000254:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000256:	f107 0310 	add.w	r3, r7, #16
 800025a:	2200      	movs	r2, #0
 800025c:	601a      	str	r2, [r3, #0]
 800025e:	605a      	str	r2, [r3, #4]
 8000260:	609a      	str	r2, [r3, #8]
 8000262:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000264:	4b47      	ldr	r3, [pc, #284]	@ (8000384 <MX_GPIO_Init+0x134>)
 8000266:	699b      	ldr	r3, [r3, #24]
 8000268:	4a46      	ldr	r2, [pc, #280]	@ (8000384 <MX_GPIO_Init+0x134>)
 800026a:	f043 0320 	orr.w	r3, r3, #32
 800026e:	6193      	str	r3, [r2, #24]
 8000270:	4b44      	ldr	r3, [pc, #272]	@ (8000384 <MX_GPIO_Init+0x134>)
 8000272:	699b      	ldr	r3, [r3, #24]
 8000274:	f003 0320 	and.w	r3, r3, #32
 8000278:	60fb      	str	r3, [r7, #12]
 800027a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800027c:	4b41      	ldr	r3, [pc, #260]	@ (8000384 <MX_GPIO_Init+0x134>)
 800027e:	699b      	ldr	r3, [r3, #24]
 8000280:	4a40      	ldr	r2, [pc, #256]	@ (8000384 <MX_GPIO_Init+0x134>)
 8000282:	f043 0304 	orr.w	r3, r3, #4
 8000286:	6193      	str	r3, [r2, #24]
 8000288:	4b3e      	ldr	r3, [pc, #248]	@ (8000384 <MX_GPIO_Init+0x134>)
 800028a:	699b      	ldr	r3, [r3, #24]
 800028c:	f003 0304 	and.w	r3, r3, #4
 8000290:	60bb      	str	r3, [r7, #8]
 8000292:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000294:	4b3b      	ldr	r3, [pc, #236]	@ (8000384 <MX_GPIO_Init+0x134>)
 8000296:	699b      	ldr	r3, [r3, #24]
 8000298:	4a3a      	ldr	r2, [pc, #232]	@ (8000384 <MX_GPIO_Init+0x134>)
 800029a:	f043 0308 	orr.w	r3, r3, #8
 800029e:	6193      	str	r3, [r2, #24]
 80002a0:	4b38      	ldr	r3, [pc, #224]	@ (8000384 <MX_GPIO_Init+0x134>)
 80002a2:	699b      	ldr	r3, [r3, #24]
 80002a4:	f003 0308 	and.w	r3, r3, #8
 80002a8:	607b      	str	r3, [r7, #4]
 80002aa:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_Pin|DC_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 80002ac:	2200      	movs	r2, #0
 80002ae:	210e      	movs	r1, #14
 80002b0:	4835      	ldr	r0, [pc, #212]	@ (8000388 <MX_GPIO_Init+0x138>)
 80002b2:	f002 ff74 	bl	800319e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BUZZER_Pin|PWR_Pin, GPIO_PIN_RESET);
 80002b6:	2200      	movs	r2, #0
 80002b8:	2103      	movs	r1, #3
 80002ba:	4834      	ldr	r0, [pc, #208]	@ (800038c <MX_GPIO_Init+0x13c>)
 80002bc:	f002 ff6f 	bl	800319e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUSY_Pin PA6 */
  GPIO_InitStruct.Pin = BUSY_Pin|GPIO_PIN_6;
 80002c0:	2341      	movs	r3, #65	@ 0x41
 80002c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002c4:	2300      	movs	r3, #0
 80002c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002c8:	2300      	movs	r3, #0
 80002ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002cc:	f107 0310 	add.w	r3, r7, #16
 80002d0:	4619      	mov	r1, r3
 80002d2:	482d      	ldr	r0, [pc, #180]	@ (8000388 <MX_GPIO_Init+0x138>)
 80002d4:	f002 fdc8 	bl	8002e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : RST_Pin DC_Pin SPI_CS_Pin */
  GPIO_InitStruct.Pin = RST_Pin|DC_Pin|SPI_CS_Pin;
 80002d8:	230e      	movs	r3, #14
 80002da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002dc:	2301      	movs	r3, #1
 80002de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002e0:	2300      	movs	r3, #0
 80002e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002e4:	2302      	movs	r3, #2
 80002e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002e8:	f107 0310 	add.w	r3, r7, #16
 80002ec:	4619      	mov	r1, r3
 80002ee:	4826      	ldr	r0, [pc, #152]	@ (8000388 <MX_GPIO_Init+0x138>)
 80002f0:	f002 fdba 	bl	8002e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZER_Pin PWR_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin|PWR_Pin;
 80002f4:	2303      	movs	r3, #3
 80002f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002f8:	2301      	movs	r3, #1
 80002fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002fc:	2300      	movs	r3, #0
 80002fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000300:	2302      	movs	r3, #2
 8000302:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000304:	f107 0310 	add.w	r3, r7, #16
 8000308:	4619      	mov	r1, r3
 800030a:	4820      	ldr	r0, [pc, #128]	@ (800038c <MX_GPIO_Init+0x13c>)
 800030c:	f002 fdac 	bl	8002e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON0_IN12_Pin BUTTON1_IN13_Pin BUTTON2_IN14_Pin BUTTON3_IN15_Pin */
  GPIO_InitStruct.Pin = BUTTON0_IN12_Pin|BUTTON1_IN13_Pin|BUTTON2_IN14_Pin|BUTTON3_IN15_Pin;
 8000310:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000314:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000316:	4b1e      	ldr	r3, [pc, #120]	@ (8000390 <MX_GPIO_Init+0x140>)
 8000318:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800031a:	2302      	movs	r3, #2
 800031c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800031e:	f107 0310 	add.w	r3, r7, #16
 8000322:	4619      	mov	r1, r3
 8000324:	4819      	ldr	r0, [pc, #100]	@ (800038c <MX_GPIO_Init+0x13c>)
 8000326:	f002 fd9f 	bl	8002e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON4_IN8_Pin */
  GPIO_InitStruct.Pin = BUTTON4_IN8_Pin;
 800032a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800032e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000330:	4b17      	ldr	r3, [pc, #92]	@ (8000390 <MX_GPIO_Init+0x140>)
 8000332:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000334:	2302      	movs	r3, #2
 8000336:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON4_IN8_GPIO_Port, &GPIO_InitStruct);
 8000338:	f107 0310 	add.w	r3, r7, #16
 800033c:	4619      	mov	r1, r3
 800033e:	4812      	ldr	r0, [pc, #72]	@ (8000388 <MX_GPIO_Init+0x138>)
 8000340:	f002 fd92 	bl	8002e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : RTC_IN5_Pin */
  GPIO_InitStruct.Pin = RTC_IN5_Pin;
 8000344:	2320      	movs	r3, #32
 8000346:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000348:	4b12      	ldr	r3, [pc, #72]	@ (8000394 <MX_GPIO_Init+0x144>)
 800034a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800034c:	2301      	movs	r3, #1
 800034e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RTC_IN5_GPIO_Port, &GPIO_InitStruct);
 8000350:	f107 0310 	add.w	r3, r7, #16
 8000354:	4619      	mov	r1, r3
 8000356:	480d      	ldr	r0, [pc, #52]	@ (800038c <MX_GPIO_Init+0x13c>)
 8000358:	f002 fd86 	bl	8002e68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800035c:	2200      	movs	r2, #0
 800035e:	2100      	movs	r1, #0
 8000360:	2017      	movs	r0, #23
 8000362:	f002 fc98 	bl	8002c96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000366:	2017      	movs	r0, #23
 8000368:	f002 fcb1 	bl	8002cce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800036c:	2200      	movs	r2, #0
 800036e:	2100      	movs	r1, #0
 8000370:	2028      	movs	r0, #40	@ 0x28
 8000372:	f002 fc90 	bl	8002c96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000376:	2028      	movs	r0, #40	@ 0x28
 8000378:	f002 fca9 	bl	8002cce <HAL_NVIC_EnableIRQ>

}
 800037c:	bf00      	nop
 800037e:	3720      	adds	r7, #32
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}
 8000384:	40021000 	.word	0x40021000
 8000388:	40010800 	.word	0x40010800
 800038c:	40010c00 	.word	0x40010c00
 8000390:	10110000 	.word	0x10110000
 8000394:	10210000 	.word	0x10210000

08000398 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800039c:	4b12      	ldr	r3, [pc, #72]	@ (80003e8 <MX_I2C1_Init+0x50>)
 800039e:	4a13      	ldr	r2, [pc, #76]	@ (80003ec <MX_I2C1_Init+0x54>)
 80003a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80003a2:	4b11      	ldr	r3, [pc, #68]	@ (80003e8 <MX_I2C1_Init+0x50>)
 80003a4:	4a12      	ldr	r2, [pc, #72]	@ (80003f0 <MX_I2C1_Init+0x58>)
 80003a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003a8:	4b0f      	ldr	r3, [pc, #60]	@ (80003e8 <MX_I2C1_Init+0x50>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80003ae:	4b0e      	ldr	r3, [pc, #56]	@ (80003e8 <MX_I2C1_Init+0x50>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003b4:	4b0c      	ldr	r3, [pc, #48]	@ (80003e8 <MX_I2C1_Init+0x50>)
 80003b6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80003ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003bc:	4b0a      	ldr	r3, [pc, #40]	@ (80003e8 <MX_I2C1_Init+0x50>)
 80003be:	2200      	movs	r2, #0
 80003c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80003c2:	4b09      	ldr	r3, [pc, #36]	@ (80003e8 <MX_I2C1_Init+0x50>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003c8:	4b07      	ldr	r3, [pc, #28]	@ (80003e8 <MX_I2C1_Init+0x50>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003ce:	4b06      	ldr	r3, [pc, #24]	@ (80003e8 <MX_I2C1_Init+0x50>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003d4:	4804      	ldr	r0, [pc, #16]	@ (80003e8 <MX_I2C1_Init+0x50>)
 80003d6:	f002 ff13 	bl	8003200 <HAL_I2C_Init>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d001      	beq.n	80003e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80003e0:	f001 fd48 	bl	8001e74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003e4:	bf00      	nop
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	200000a8 	.word	0x200000a8
 80003ec:	40005400 	.word	0x40005400
 80003f0:	00061a80 	.word	0x00061a80

080003f4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b088      	sub	sp, #32
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003fc:	f107 0310 	add.w	r3, r7, #16
 8000400:	2200      	movs	r2, #0
 8000402:	601a      	str	r2, [r3, #0]
 8000404:	605a      	str	r2, [r3, #4]
 8000406:	609a      	str	r2, [r3, #8]
 8000408:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	4a15      	ldr	r2, [pc, #84]	@ (8000464 <HAL_I2C_MspInit+0x70>)
 8000410:	4293      	cmp	r3, r2
 8000412:	d123      	bne.n	800045c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000414:	4b14      	ldr	r3, [pc, #80]	@ (8000468 <HAL_I2C_MspInit+0x74>)
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	4a13      	ldr	r2, [pc, #76]	@ (8000468 <HAL_I2C_MspInit+0x74>)
 800041a:	f043 0308 	orr.w	r3, r3, #8
 800041e:	6193      	str	r3, [r2, #24]
 8000420:	4b11      	ldr	r3, [pc, #68]	@ (8000468 <HAL_I2C_MspInit+0x74>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	f003 0308 	and.w	r3, r3, #8
 8000428:	60fb      	str	r3, [r7, #12]
 800042a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800042c:	23c0      	movs	r3, #192	@ 0xc0
 800042e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000430:	2312      	movs	r3, #18
 8000432:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000434:	2303      	movs	r3, #3
 8000436:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000438:	f107 0310 	add.w	r3, r7, #16
 800043c:	4619      	mov	r1, r3
 800043e:	480b      	ldr	r0, [pc, #44]	@ (800046c <HAL_I2C_MspInit+0x78>)
 8000440:	f002 fd12 	bl	8002e68 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000444:	4b08      	ldr	r3, [pc, #32]	@ (8000468 <HAL_I2C_MspInit+0x74>)
 8000446:	69db      	ldr	r3, [r3, #28]
 8000448:	4a07      	ldr	r2, [pc, #28]	@ (8000468 <HAL_I2C_MspInit+0x74>)
 800044a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800044e:	61d3      	str	r3, [r2, #28]
 8000450:	4b05      	ldr	r3, [pc, #20]	@ (8000468 <HAL_I2C_MspInit+0x74>)
 8000452:	69db      	ldr	r3, [r3, #28]
 8000454:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000458:	60bb      	str	r3, [r7, #8]
 800045a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800045c:	bf00      	nop
 800045e:	3720      	adds	r7, #32
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	40005400 	.word	0x40005400
 8000468:	40021000 	.word	0x40021000
 800046c:	40010c00 	.word	0x40010c00

08000470 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b084      	sub	sp, #16
 8000474:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000476:	f001 feb3 	bl	80021e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800047a:	f000 f8dd 	bl	8000638 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800047e:	f7ff fee7 	bl	8000250 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000482:	f7ff ff89 	bl	8000398 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000486:	f7ff fe61 	bl	800014c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800048a:	f001 fe05 	bl	8002098 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 800048e:	f001 fcf7 	bl	8001e80 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  // Initially reset the buzzer
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, BUZZER_INACTIVE); 
 8000492:	2201      	movs	r2, #1
 8000494:	2101      	movs	r1, #1
 8000496:	4854      	ldr	r0, [pc, #336]	@ (80005e8 <main+0x178>)
 8000498:	f002 fe81 	bl	800319e <HAL_GPIO_WritePin>
  //    5, // Month: 1-12
  //   25  // Year: 0-99 (0 = 2000, 1 = 2001, ..., 99 = 2099)
  // );

  // Initialize RTC module (Run only once after reset the RTC).
  Time_Ctrl 
 800049c:	2300      	movs	r3, #0
 800049e:	9301      	str	r3, [sp, #4]
 80004a0:	2300      	movs	r3, #0
 80004a2:	9300      	str	r3, [sp, #0]
 80004a4:	2300      	movs	r3, #0
 80004a6:	2200      	movs	r2, #0
 80004a8:	2100      	movs	r1, #0
 80004aa:	2000      	movs	r0, #0
 80004ac:	f000 fa04 	bl	80008b8 <Time_Ctrl>
     0, // Day of the week: 1-7 (1 = Sunday, 2 = Monday, ..., 7 = Saturday), or Date of the month: 1-31
     0  // Select: 1 = day of week, 0 = date of month
  );   

  // Initially retrieve the time values from the RTC module
  Time_Get(&time_get_data);
 80004b0:	484e      	ldr	r0, [pc, #312]	@ (80005ec <main+0x17c>)
 80004b2:	f000 f9ad 	bl	8000810 <Time_Get>
  //   false, // true = ON, false = OFF 
  //    1     // Slot number of the alarm in the EEPROM module (0-9)
  // );  

  // Initially retrieve the alarm slot pointer data from the EEPROM module
  Alarm_Slot_Pointer_Get();
 80004b6:	f000 fbe1 	bl	8000c7c <Alarm_Slot_Pointer_Get>

  // Initially retrieve the alarm values from the EEPROM module and send to system memory
  for (int i = 0; i < alarm_slot_ptr; i++)
 80004ba:	2300      	movs	r3, #0
 80004bc:	607b      	str	r3, [r7, #4]
 80004be:	e00e      	b.n	80004de <main+0x6e>
  {
    Alarm_Get(i, &alarm_get_data[i]);
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	b2d8      	uxtb	r0, r3
 80004c4:	687a      	ldr	r2, [r7, #4]
 80004c6:	4613      	mov	r3, r2
 80004c8:	005b      	lsls	r3, r3, #1
 80004ca:	4413      	add	r3, r2
 80004cc:	005b      	lsls	r3, r3, #1
 80004ce:	4a48      	ldr	r2, [pc, #288]	@ (80005f0 <main+0x180>)
 80004d0:	4413      	add	r3, r2
 80004d2:	4619      	mov	r1, r3
 80004d4:	f000 fb3a 	bl	8000b4c <Alarm_Get>
  for (int i = 0; i < alarm_slot_ptr; i++)
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	3301      	adds	r3, #1
 80004dc:	607b      	str	r3, [r7, #4]
 80004de:	4b45      	ldr	r3, [pc, #276]	@ (80005f4 <main+0x184>)
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	461a      	mov	r2, r3
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	4293      	cmp	r3, r2
 80004e8:	dbea      	blt.n	80004c0 <main+0x50>
  }

  // Initialize the UART module to receive data
  //    HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size);
  HAL_UART_Receive_IT(&huart1, uart_rx_data, 2);
 80004ea:	2202      	movs	r2, #2
 80004ec:	4942      	ldr	r1, [pc, #264]	@ (80005f8 <main+0x188>)
 80004ee:	4843      	ldr	r0, [pc, #268]	@ (80005fc <main+0x18c>)
 80004f0:	f004 fc86 	bl	8004e00 <HAL_UART_Receive_IT>

  // Initialize the ADC module to monitor battery voltage
  //    HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc);
  HAL_ADC_Start_IT(&hadc1);
 80004f4:	4842      	ldr	r0, [pc, #264]	@ (8000600 <main+0x190>)
 80004f6:	f001 ffd1 	bl	800249c <HAL_ADC_Start_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    // Call the button debounce handler for each button
    while (button0.int_flag || button1.int_flag || button2.int_flag || button3.int_flag || button4.int_flag)
 80004fa:	e001      	b.n	8000500 <main+0x90>
    {
      Button_Handle();
 80004fc:	f000 fd88 	bl	8001010 <Button_Handle>
    while (button0.int_flag || button1.int_flag || button2.int_flag || button3.int_flag || button4.int_flag)
 8000500:	4b40      	ldr	r3, [pc, #256]	@ (8000604 <main+0x194>)
 8000502:	7b1b      	ldrb	r3, [r3, #12]
 8000504:	b2db      	uxtb	r3, r3
 8000506:	2b00      	cmp	r3, #0
 8000508:	d1f8      	bne.n	80004fc <main+0x8c>
 800050a:	4b3f      	ldr	r3, [pc, #252]	@ (8000608 <main+0x198>)
 800050c:	7b1b      	ldrb	r3, [r3, #12]
 800050e:	b2db      	uxtb	r3, r3
 8000510:	2b00      	cmp	r3, #0
 8000512:	d1f3      	bne.n	80004fc <main+0x8c>
 8000514:	4b3d      	ldr	r3, [pc, #244]	@ (800060c <main+0x19c>)
 8000516:	7b1b      	ldrb	r3, [r3, #12]
 8000518:	b2db      	uxtb	r3, r3
 800051a:	2b00      	cmp	r3, #0
 800051c:	d1ee      	bne.n	80004fc <main+0x8c>
 800051e:	4b3c      	ldr	r3, [pc, #240]	@ (8000610 <main+0x1a0>)
 8000520:	7b1b      	ldrb	r3, [r3, #12]
 8000522:	b2db      	uxtb	r3, r3
 8000524:	2b00      	cmp	r3, #0
 8000526:	d1e9      	bne.n	80004fc <main+0x8c>
 8000528:	4b3a      	ldr	r3, [pc, #232]	@ (8000614 <main+0x1a4>)
 800052a:	7b1b      	ldrb	r3, [r3, #12]
 800052c:	b2db      	uxtb	r3, r3
 800052e:	2b00      	cmp	r3, #0
 8000530:	d1e4      	bne.n	80004fc <main+0x8c>
    }
    
    // Check if the RTC Interrupt Flag is set (RTC Interrupt Flag) on PB4 (Activated every second)
    if (rtc_int_flag)
 8000532:	4b39      	ldr	r3, [pc, #228]	@ (8000618 <main+0x1a8>)
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	b2db      	uxtb	r3, r3
 8000538:	2b00      	cmp	r3, #0
 800053a:	d03a      	beq.n	80005b2 <main+0x142>
    {
      // Retrieve the time values from the RTC module
      Time_Get(&time_get_data);
 800053c:	482b      	ldr	r0, [pc, #172]	@ (80005ec <main+0x17c>)
 800053e:	f000 f967 	bl	8000810 <Time_Get>
      
      // Check the alarms
      //   void Alarm_Check (volatile TIME_DATA *time_get_data)
      Alarm_Check(&time_get_data);
 8000542:	482a      	ldr	r0, [pc, #168]	@ (80005ec <main+0x17c>)
 8000544:	f000 fbb4 	bl	8000cb0 <Alarm_Check>

      // Debugging: Toggle the debug RTC interrupt flag for debugging purposes
      debug_rtc_int = !debug_rtc_int;
 8000548:	4b34      	ldr	r3, [pc, #208]	@ (800061c <main+0x1ac>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	b2db      	uxtb	r3, r3
 800054e:	2b00      	cmp	r3, #0
 8000550:	bf14      	ite	ne
 8000552:	2301      	movne	r3, #1
 8000554:	2300      	moveq	r3, #0
 8000556:	b2db      	uxtb	r3, r3
 8000558:	f083 0301 	eor.w	r3, r3, #1
 800055c:	b2db      	uxtb	r3, r3
 800055e:	f003 0301 	and.w	r3, r3, #1
 8000562:	b2da      	uxtb	r2, r3
 8000564:	4b2d      	ldr	r3, [pc, #180]	@ (800061c <main+0x1ac>)
 8000566:	701a      	strb	r2, [r3, #0]

      // default_mode(&a, &time_get.hour, &time_get.minute, &time_get.second);

      // Check if the ADC interrupt flag is set (ADC Valid Flag)
      if (adc_valid_flag)
 8000568:	4b2d      	ldr	r3, [pc, #180]	@ (8000620 <main+0x1b0>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	b2db      	uxtb	r3, r3
 800056e:	2b00      	cmp	r3, #0
 8000570:	d01c      	beq.n	80005ac <main+0x13c>
      {
        // Re-enable the ADC interrupt to continue monitoring ADC values
        HAL_ADC_Start_IT(&hadc1);
 8000572:	4823      	ldr	r0, [pc, #140]	@ (8000600 <main+0x190>)
 8000574:	f001 ff92 	bl	800249c <HAL_ADC_Start_IT>

        // Delay for 1ms to allow the ADC to stabilize
        HAL_Delay(1);
 8000578:	2001      	movs	r0, #1
 800057a:	f001 fe93 	bl	80022a4 <HAL_Delay>

        // Track the battery percentage value at 5 different levels: 0, 25, 50, 75, 100
        if ((battery_percentage % 25) == 0)
 800057e:	4b29      	ldr	r3, [pc, #164]	@ (8000624 <main+0x1b4>)
 8000580:	881a      	ldrh	r2, [r3, #0]
 8000582:	4b29      	ldr	r3, [pc, #164]	@ (8000628 <main+0x1b8>)
 8000584:	fba3 1302 	umull	r1, r3, r3, r2
 8000588:	08d9      	lsrs	r1, r3, #3
 800058a:	460b      	mov	r3, r1
 800058c:	009b      	lsls	r3, r3, #2
 800058e:	440b      	add	r3, r1
 8000590:	0099      	lsls	r1, r3, #2
 8000592:	440b      	add	r3, r1
 8000594:	1ad3      	subs	r3, r2, r3
 8000596:	b29b      	uxth	r3, r3
 8000598:	2b00      	cmp	r3, #0
 800059a:	d104      	bne.n	80005a6 <main+0x136>
        {
          // Update the battery percentage value to be displayed
          system_state.battery_display = battery_percentage;
 800059c:	4b21      	ldr	r3, [pc, #132]	@ (8000624 <main+0x1b4>)
 800059e:	881b      	ldrh	r3, [r3, #0]
 80005a0:	b2da      	uxtb	r2, r3
 80005a2:	4b22      	ldr	r3, [pc, #136]	@ (800062c <main+0x1bc>)
 80005a4:	719a      	strb	r2, [r3, #6]
        }

        // Reset the ADC interrupt flag
        adc_valid_flag = false;
 80005a6:	4b1e      	ldr	r3, [pc, #120]	@ (8000620 <main+0x1b0>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	701a      	strb	r2, [r3, #0]
      }

      // Reset the RTC Interrupt Flag
      rtc_int_flag = false;
 80005ac:	4b1a      	ldr	r3, [pc, #104]	@ (8000618 <main+0x1a8>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	701a      	strb	r2, [r3, #0]
    }

    // Check if the alarm is active
    if (alarm_active_flag)
 80005b2:	4b1f      	ldr	r3, [pc, #124]	@ (8000630 <main+0x1c0>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d004      	beq.n	80005c4 <main+0x154>
    {
      // Call the alarm ringing function
      Alarm_Ring();
 80005ba:	f000 fc0b 	bl	8000dd4 <Alarm_Ring>

      // Call the system alarm active mode handler to track if any button is pressed
      System_Alarm_Active_Mode_Handle(&button0);
 80005be:	4811      	ldr	r0, [pc, #68]	@ (8000604 <main+0x194>)
 80005c0:	f001 fb16 	bl	8001bf0 <System_Alarm_Active_Mode_Handle>
    }

    // Check if the UART interrupt flag is set (UART Receive Flag)
    if (uart_rx_flag)
 80005c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000634 <main+0x1c4>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d098      	beq.n	8000500 <main+0x90>
	  {
      // Re-enable the UART interrupt to continue receiving data
      HAL_UART_Receive_IT(&huart1,uart_rx_data,2); 
 80005ce:	2202      	movs	r2, #2
 80005d0:	4909      	ldr	r1, [pc, #36]	@ (80005f8 <main+0x188>)
 80005d2:	480a      	ldr	r0, [pc, #40]	@ (80005fc <main+0x18c>)
 80005d4:	f004 fc14 	bl	8004e00 <HAL_UART_Receive_IT>
      
      // Delay for 1ms to allow the UART to stabilize
      HAL_Delay(1);
 80005d8:	2001      	movs	r0, #1
 80005da:	f001 fe63 	bl	80022a4 <HAL_Delay>

      // Reset the UART interrupt flag
      uart_rx_flag = false;
 80005de:	4b15      	ldr	r3, [pc, #84]	@ (8000634 <main+0x1c4>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	701a      	strb	r2, [r3, #0]
    while (button0.int_flag || button1.int_flag || button2.int_flag || button3.int_flag || button4.int_flag)
 80005e4:	e78c      	b.n	8000500 <main+0x90>
 80005e6:	bf00      	nop
 80005e8:	40010c00 	.word	0x40010c00
 80005ec:	20000114 	.word	0x20000114
 80005f0:	2000011c 	.word	0x2000011c
 80005f4:	20000158 	.word	0x20000158
 80005f8:	2000016c 	.word	0x2000016c
 80005fc:	200001d0 	.word	0x200001d0
 8000600:	20000078 	.word	0x20000078
 8000604:	20000000 	.word	0x20000000
 8000608:	20000010 	.word	0x20000010
 800060c:	20000020 	.word	0x20000020
 8000610:	20000030 	.word	0x20000030
 8000614:	20000040 	.word	0x20000040
 8000618:	20000159 	.word	0x20000159
 800061c:	2000015a 	.word	0x2000015a
 8000620:	20000165 	.word	0x20000165
 8000624:	20000168 	.word	0x20000168
 8000628:	51eb851f 	.word	0x51eb851f
 800062c:	200000fc 	.word	0x200000fc
 8000630:	2000015c 	.word	0x2000015c
 8000634:	2000016a 	.word	0x2000016a

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b094      	sub	sp, #80	@ 0x50
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000642:	2228      	movs	r2, #40	@ 0x28
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f005 f912 	bl	8005870 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	f107 0314 	add.w	r3, r7, #20
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	609a      	str	r2, [r3, #8]
 8000666:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000668:	2301      	movs	r3, #1
 800066a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800066c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000670:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000672:	2300      	movs	r3, #0
 8000674:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000676:	2301      	movs	r3, #1
 8000678:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067a:	2302      	movs	r3, #2
 800067c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800067e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000682:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000684:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000688:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800068e:	4618      	mov	r0, r3
 8000690:	f003 fe1c 	bl	80042cc <HAL_RCC_OscConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800069a:	f001 fbeb 	bl	8001e74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069e:	230f      	movs	r3, #15
 80006a0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a2:	2302      	movs	r3, #2
 80006a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006ae:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006b4:	f107 0314 	add.w	r3, r7, #20
 80006b8:	2102      	movs	r1, #2
 80006ba:	4618      	mov	r0, r3
 80006bc:	f004 f888 	bl	80047d0 <HAL_RCC_ClockConfig>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0x92>
  {
    Error_Handler();
 80006c6:	f001 fbd5 	bl	8001e74 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80006ca:	2302      	movs	r3, #2
 80006cc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80006ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80006d2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006d4:	1d3b      	adds	r3, r7, #4
 80006d6:	4618      	mov	r0, r3
 80006d8:	f004 fa08 	bl	8004aec <HAL_RCCEx_PeriphCLKConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006e2:	f001 fbc7 	bl	8001e74 <Error_Handler>
  }
}
 80006e6:	bf00      	nop
 80006e8:	3750      	adds	r7, #80	@ 0x50
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
	...

080006f0 <Dec_To_BCD>:
  * @brief  Convert a normal decimal number to Binary Coded Decimal (BCD).
  * @param  val: Decimal number to be converted.
  * @retval uint8_t: BCD representation of the input decimal number.
  */
uint8_t Dec_To_BCD(int val)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  return (uint8_t)( (val/10*16) + (val%10) );
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	4a0e      	ldr	r2, [pc, #56]	@ (8000734 <Dec_To_BCD+0x44>)
 80006fc:	fb82 1203 	smull	r1, r2, r2, r3
 8000700:	1092      	asrs	r2, r2, #2
 8000702:	17db      	asrs	r3, r3, #31
 8000704:	1ad3      	subs	r3, r2, r3
 8000706:	b2db      	uxtb	r3, r3
 8000708:	011b      	lsls	r3, r3, #4
 800070a:	b2d8      	uxtb	r0, r3
 800070c:	687a      	ldr	r2, [r7, #4]
 800070e:	4b09      	ldr	r3, [pc, #36]	@ (8000734 <Dec_To_BCD+0x44>)
 8000710:	fb83 1302 	smull	r1, r3, r3, r2
 8000714:	1099      	asrs	r1, r3, #2
 8000716:	17d3      	asrs	r3, r2, #31
 8000718:	1ac9      	subs	r1, r1, r3
 800071a:	460b      	mov	r3, r1
 800071c:	009b      	lsls	r3, r3, #2
 800071e:	440b      	add	r3, r1
 8000720:	005b      	lsls	r3, r3, #1
 8000722:	1ad1      	subs	r1, r2, r3
 8000724:	b2cb      	uxtb	r3, r1
 8000726:	4403      	add	r3, r0
 8000728:	b2db      	uxtb	r3, r3
}
 800072a:	4618      	mov	r0, r3
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr
 8000734:	66666667 	.word	0x66666667

08000738 <BCD_To_Dec>:
  * @brief  Convert a Binary Coded Decimal (BCD) value to a normal decimal number.
  * @param  val: BCD value to be converted.
  * @retval int: Decimal representation of the input BCD value.
  */
int BCD_To_Dec(uint8_t val)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	71fb      	strb	r3, [r7, #7]
  return (int)( (val/16*10) + (val%16) );
 8000742:	79fb      	ldrb	r3, [r7, #7]
 8000744:	091b      	lsrs	r3, r3, #4
 8000746:	b2db      	uxtb	r3, r3
 8000748:	461a      	mov	r2, r3
 800074a:	4613      	mov	r3, r2
 800074c:	009b      	lsls	r3, r3, #2
 800074e:	4413      	add	r3, r2
 8000750:	005b      	lsls	r3, r3, #1
 8000752:	461a      	mov	r2, r3
 8000754:	79fb      	ldrb	r3, [r7, #7]
 8000756:	f003 030f 	and.w	r3, r3, #15
 800075a:	4413      	add	r3, r2
}
 800075c:	4618      	mov	r0, r3
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	bc80      	pop	{r7}
 8000764:	4770      	bx	lr
	...

08000768 <Time_Set>:
  * @param  month: Month: 1-12
  * @param  year: Year: 0-99 (0 = 2000, 1 = 2001, ..., 99 = 2099)
  * @retval None
*/
void Time_Set (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom, uint8_t month, uint8_t year)
{
 8000768:	b590      	push	{r4, r7, lr}
 800076a:	b089      	sub	sp, #36	@ 0x24
 800076c:	af04      	add	r7, sp, #16
 800076e:	4604      	mov	r4, r0
 8000770:	4608      	mov	r0, r1
 8000772:	4611      	mov	r1, r2
 8000774:	461a      	mov	r2, r3
 8000776:	4623      	mov	r3, r4
 8000778:	71fb      	strb	r3, [r7, #7]
 800077a:	4603      	mov	r3, r0
 800077c:	71bb      	strb	r3, [r7, #6]
 800077e:	460b      	mov	r3, r1
 8000780:	717b      	strb	r3, [r7, #5]
 8000782:	4613      	mov	r3, r2
 8000784:	713b      	strb	r3, [r7, #4]
	// A blank array (7 slots) to contain the time values
  uint8_t setTime[7];

  // Store the time values (converted in to BCD code) into the blank array
	setTime[0] = Dec_To_BCD(sec);
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	4618      	mov	r0, r3
 800078a:	f7ff ffb1 	bl	80006f0 <Dec_To_BCD>
 800078e:	4603      	mov	r3, r0
 8000790:	723b      	strb	r3, [r7, #8]
	setTime[1] = Dec_To_BCD(min);
 8000792:	79bb      	ldrb	r3, [r7, #6]
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff ffab 	bl	80006f0 <Dec_To_BCD>
 800079a:	4603      	mov	r3, r0
 800079c:	727b      	strb	r3, [r7, #9]
	setTime[2] = Dec_To_BCD(hour);
 800079e:	797b      	ldrb	r3, [r7, #5]
 80007a0:	4618      	mov	r0, r3
 80007a2:	f7ff ffa5 	bl	80006f0 <Dec_To_BCD>
 80007a6:	4603      	mov	r3, r0
 80007a8:	72bb      	strb	r3, [r7, #10]
	setTime[3] = Dec_To_BCD(dow);
 80007aa:	793b      	ldrb	r3, [r7, #4]
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff ff9f 	bl	80006f0 <Dec_To_BCD>
 80007b2:	4603      	mov	r3, r0
 80007b4:	72fb      	strb	r3, [r7, #11]
	setTime[4] = Dec_To_BCD(dom);
 80007b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80007ba:	4618      	mov	r0, r3
 80007bc:	f7ff ff98 	bl	80006f0 <Dec_To_BCD>
 80007c0:	4603      	mov	r3, r0
 80007c2:	733b      	strb	r3, [r7, #12]
	setTime[5] = Dec_To_BCD(month);
 80007c4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff ff91 	bl	80006f0 <Dec_To_BCD>
 80007ce:	4603      	mov	r3, r0
 80007d0:	737b      	strb	r3, [r7, #13]
	setTime[6] = Dec_To_BCD(year);
 80007d2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80007d6:	4618      	mov	r0, r3
 80007d8:	f7ff ff8a 	bl	80006f0 <Dec_To_BCD>
 80007dc:	4603      	mov	r3, r0
 80007de:	73bb      	strb	r3, [r7, #14]

  // Send the array containing the time values to the RTC module through I2C interface at address 00h - 06h (size of value: 7 bytes)
  HAL_I2C_Mem_Write(DS3231_I2C, DS3231_ADDR, 0x00, 1, setTime, sizeof(setTime), 1000);
 80007e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007e4:	9302      	str	r3, [sp, #8]
 80007e6:	2307      	movs	r3, #7
 80007e8:	9301      	str	r3, [sp, #4]
 80007ea:	f107 0308 	add.w	r3, r7, #8
 80007ee:	9300      	str	r3, [sp, #0]
 80007f0:	2301      	movs	r3, #1
 80007f2:	2200      	movs	r2, #0
 80007f4:	21d0      	movs	r1, #208	@ 0xd0
 80007f6:	4805      	ldr	r0, [pc, #20]	@ (800080c <Time_Set+0xa4>)
 80007f8:	f002 fe46 	bl	8003488 <HAL_I2C_Mem_Write>

  // Delay for 1ms to allow the RTC module to process the data
  HAL_Delay(1);
 80007fc:	2001      	movs	r0, #1
 80007fe:	f001 fd51 	bl	80022a4 <HAL_Delay>
}
 8000802:	bf00      	nop
 8000804:	3714      	adds	r7, #20
 8000806:	46bd      	mov	sp, r7
 8000808:	bd90      	pop	{r4, r7, pc}
 800080a:	bf00      	nop
 800080c:	200000a8 	.word	0x200000a8

08000810 <Time_Get>:
  * @brief  Get time from the RTC module through I2C interface.
  * @param  time_get_data: Pointer to a TIME structure to store the retrieved time values.
  * @retval None
*/
void Time_Get (volatile TIME_DATA *time_get_data)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b088      	sub	sp, #32
 8000814:	af04      	add	r7, sp, #16
 8000816:	6078      	str	r0, [r7, #4]
	// A blank array (7 slots) to contain the time values received from the RTC module
  uint8_t getTime[7];

  // Receive the time values from the RTC module through I2C interface, then store them into the blank array (size of value: 7 bytes)
  HAL_I2C_Mem_Read(DS3231_I2C, DS3231_ADDR, 0x00, 1, getTime, sizeof(getTime), 1000);
 8000818:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800081c:	9302      	str	r3, [sp, #8]
 800081e:	2307      	movs	r3, #7
 8000820:	9301      	str	r3, [sp, #4]
 8000822:	f107 0308 	add.w	r3, r7, #8
 8000826:	9300      	str	r3, [sp, #0]
 8000828:	2301      	movs	r3, #1
 800082a:	2200      	movs	r2, #0
 800082c:	21d0      	movs	r1, #208	@ 0xd0
 800082e:	4821      	ldr	r0, [pc, #132]	@ (80008b4 <Time_Get+0xa4>)
 8000830:	f002 ff24 	bl	800367c <HAL_I2C_Mem_Read>

  // Delay for 1ms to allow the RTC module to process the data
  HAL_Delay(1);
 8000834:	2001      	movs	r0, #1
 8000836:	f001 fd35 	bl	80022a4 <HAL_Delay>

  // Store the time values (converted from BCD code to decimal) into the time variable
	time_get_data->second       = BCD_To_Dec(getTime[0]);
 800083a:	7a3b      	ldrb	r3, [r7, #8]
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff ff7b 	bl	8000738 <BCD_To_Dec>
 8000842:	4603      	mov	r3, r0
 8000844:	b2da      	uxtb	r2, r3
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	701a      	strb	r2, [r3, #0]
	time_get_data->minute       = BCD_To_Dec(getTime[1]);
 800084a:	7a7b      	ldrb	r3, [r7, #9]
 800084c:	4618      	mov	r0, r3
 800084e:	f7ff ff73 	bl	8000738 <BCD_To_Dec>
 8000852:	4603      	mov	r3, r0
 8000854:	b2da      	uxtb	r2, r3
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	705a      	strb	r2, [r3, #1]
	time_get_data->hour         = BCD_To_Dec(getTime[2]);
 800085a:	7abb      	ldrb	r3, [r7, #10]
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff ff6b 	bl	8000738 <BCD_To_Dec>
 8000862:	4603      	mov	r3, r0
 8000864:	b2da      	uxtb	r2, r3
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	709a      	strb	r2, [r3, #2]
	time_get_data->dayofweek    = BCD_To_Dec(getTime[3]);
 800086a:	7afb      	ldrb	r3, [r7, #11]
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff ff63 	bl	8000738 <BCD_To_Dec>
 8000872:	4603      	mov	r3, r0
 8000874:	b2da      	uxtb	r2, r3
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	70da      	strb	r2, [r3, #3]
	time_get_data->dateofmonth  = BCD_To_Dec(getTime[4]);
 800087a:	7b3b      	ldrb	r3, [r7, #12]
 800087c:	4618      	mov	r0, r3
 800087e:	f7ff ff5b 	bl	8000738 <BCD_To_Dec>
 8000882:	4603      	mov	r3, r0
 8000884:	b2da      	uxtb	r2, r3
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	711a      	strb	r2, [r3, #4]
	time_get_data->month        = BCD_To_Dec(getTime[5]);
 800088a:	7b7b      	ldrb	r3, [r7, #13]
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff ff53 	bl	8000738 <BCD_To_Dec>
 8000892:	4603      	mov	r3, r0
 8000894:	b2da      	uxtb	r2, r3
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	715a      	strb	r2, [r3, #5]
	time_get_data->year         = BCD_To_Dec(getTime[6]);
 800089a:	7bbb      	ldrb	r3, [r7, #14]
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff ff4b 	bl	8000738 <BCD_To_Dec>
 80008a2:	4603      	mov	r3, r0
 80008a4:	b2da      	uxtb	r2, r3
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	719a      	strb	r2, [r3, #6]
}
 80008aa:	bf00      	nop
 80008ac:	3710      	adds	r7, #16
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	200000a8 	.word	0x200000a8

080008b8 <Time_Ctrl>:
  * @param  dow_dom: Day of the week or date of the month (1-7 or 1-31).
  * @param  dy_dt: Day of week or date of month (1 = day of week, 0 = date of month, 0 = not used).
  * @retval None
*/
void Time_Ctrl (uint8_t mode, uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow_dom, bool dy_dt)
{
 80008b8:	b590      	push	{r4, r7, lr}
 80008ba:	b08b      	sub	sp, #44	@ 0x2c
 80008bc:	af04      	add	r7, sp, #16
 80008be:	4604      	mov	r4, r0
 80008c0:	4608      	mov	r0, r1
 80008c2:	4611      	mov	r1, r2
 80008c4:	461a      	mov	r2, r3
 80008c6:	4623      	mov	r3, r4
 80008c8:	71fb      	strb	r3, [r7, #7]
 80008ca:	4603      	mov	r3, r0
 80008cc:	71bb      	strb	r3, [r7, #6]
 80008ce:	460b      	mov	r3, r1
 80008d0:	717b      	strb	r3, [r7, #5]
 80008d2:	4613      	mov	r3, r2
 80008d4:	713b      	strb	r3, [r7, #4]
  // A blank array (4 slots) to contain the RTC alarm settings
  uint8_t ctrlTime[4];

  // A mask bit to set the Control register in the RTC module
  //    Address 0Eh: A1IE = 1
  uint8_t ctrlAlarm = 1; 
 80008d6:	2301      	movs	r3, #1
 80008d8:	73fb      	strb	r3, [r7, #15]

  // A mask bit to set the alarm modes (Bit 7) in the RTC module
  uint8_t maskBit = 128;
 80008da:	2380      	movs	r3, #128	@ 0x80
 80008dc:	75fb      	strb	r3, [r7, #23]

  // A mask bit for selection of [day of week] or [date of month] (Bit 6) in the RTC module
  //    If the input [day of week]/ [date of month] selection is 1, the mask bit will be 64.
  uint8_t dyDt = (dy_dt == true) ? 64 : 0;
 80008de:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <Time_Ctrl+0x32>
 80008e6:	2340      	movs	r3, #64	@ 0x40
 80008e8:	e000      	b.n	80008ec <Time_Ctrl+0x34>
 80008ea:	2300      	movs	r3, #0
 80008ec:	75bb      	strb	r3, [r7, #22]

  // Store the RTC alarm time settings (converted into BCD code) into the blank array
  ctrlTime[0] = Dec_To_BCD(sec);
 80008ee:	79bb      	ldrb	r3, [r7, #6]
 80008f0:	4618      	mov	r0, r3
 80008f2:	f7ff fefd 	bl	80006f0 <Dec_To_BCD>
 80008f6:	4603      	mov	r3, r0
 80008f8:	743b      	strb	r3, [r7, #16]
	ctrlTime[1] = Dec_To_BCD(min);
 80008fa:	797b      	ldrb	r3, [r7, #5]
 80008fc:	4618      	mov	r0, r3
 80008fe:	f7ff fef7 	bl	80006f0 <Dec_To_BCD>
 8000902:	4603      	mov	r3, r0
 8000904:	747b      	strb	r3, [r7, #17]
	ctrlTime[2] = Dec_To_BCD(hour);
 8000906:	793b      	ldrb	r3, [r7, #4]
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff fef1 	bl	80006f0 <Dec_To_BCD>
 800090e:	4603      	mov	r3, r0
 8000910:	74bb      	strb	r3, [r7, #18]
	ctrlTime[3] = Dec_To_BCD(dow_dom);
 8000912:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000916:	4618      	mov	r0, r3
 8000918:	f7ff feea 	bl	80006f0 <Dec_To_BCD>
 800091c:	4603      	mov	r3, r0
 800091e:	74fb      	strb	r3, [r7, #19]
  //      1    : Alarm when seconds match
  //      2    : Alarm when minutes and seconds match
  //      3    : Alarm when hours, minutes, and seconds match
  //      4    : Alarm when date, hours, minutes, and seconds match
  //      5    : Alarm when day, hours, minutes, and seconds match
  switch (mode)
 8000920:	79fb      	ldrb	r3, [r7, #7]
 8000922:	2b05      	cmp	r3, #5
 8000924:	d865      	bhi.n	80009f2 <Time_Ctrl+0x13a>
 8000926:	a201      	add	r2, pc, #4	@ (adr r2, 800092c <Time_Ctrl+0x74>)
 8000928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800092c:	08000945 	.word	0x08000945
 8000930:	0800096f 	.word	0x0800096f
 8000934:	08000993 	.word	0x08000993
 8000938:	080009b1 	.word	0x080009b1
 800093c:	080009c9 	.word	0x080009c9
 8000940:	080009db 	.word	0x080009db
  {
    case 0:
      // Alarm mask bit: A1M4:A1M1 = b1111, DY/DT = X
      ctrlTime[0] += maskBit;
 8000944:	7c3a      	ldrb	r2, [r7, #16]
 8000946:	7dfb      	ldrb	r3, [r7, #23]
 8000948:	4413      	add	r3, r2
 800094a:	b2db      	uxtb	r3, r3
 800094c:	743b      	strb	r3, [r7, #16]
      ctrlTime[1] += maskBit;
 800094e:	7c7a      	ldrb	r2, [r7, #17]
 8000950:	7dfb      	ldrb	r3, [r7, #23]
 8000952:	4413      	add	r3, r2
 8000954:	b2db      	uxtb	r3, r3
 8000956:	747b      	strb	r3, [r7, #17]
      ctrlTime[2] += maskBit;
 8000958:	7cba      	ldrb	r2, [r7, #18]
 800095a:	7dfb      	ldrb	r3, [r7, #23]
 800095c:	4413      	add	r3, r2
 800095e:	b2db      	uxtb	r3, r3
 8000960:	74bb      	strb	r3, [r7, #18]
      ctrlTime[3] += maskBit;
 8000962:	7cfa      	ldrb	r2, [r7, #19]
 8000964:	7dfb      	ldrb	r3, [r7, #23]
 8000966:	4413      	add	r3, r2
 8000968:	b2db      	uxtb	r3, r3
 800096a:	74fb      	strb	r3, [r7, #19]
      break;
 800096c:	e04a      	b.n	8000a04 <Time_Ctrl+0x14c>
    case 1:
      // Alarm mask bit: A1M4:A1M1 = b1110, DY/DT = X
      ctrlTime[0] += 0;
 800096e:	7c3b      	ldrb	r3, [r7, #16]
 8000970:	743b      	strb	r3, [r7, #16]
      ctrlTime[1] += maskBit;
 8000972:	7c7a      	ldrb	r2, [r7, #17]
 8000974:	7dfb      	ldrb	r3, [r7, #23]
 8000976:	4413      	add	r3, r2
 8000978:	b2db      	uxtb	r3, r3
 800097a:	747b      	strb	r3, [r7, #17]
      ctrlTime[2] += maskBit;
 800097c:	7cba      	ldrb	r2, [r7, #18]
 800097e:	7dfb      	ldrb	r3, [r7, #23]
 8000980:	4413      	add	r3, r2
 8000982:	b2db      	uxtb	r3, r3
 8000984:	74bb      	strb	r3, [r7, #18]
      ctrlTime[3] += maskBit;
 8000986:	7cfa      	ldrb	r2, [r7, #19]
 8000988:	7dfb      	ldrb	r3, [r7, #23]
 800098a:	4413      	add	r3, r2
 800098c:	b2db      	uxtb	r3, r3
 800098e:	74fb      	strb	r3, [r7, #19]
      break;
 8000990:	e038      	b.n	8000a04 <Time_Ctrl+0x14c>
    case 2:
      // Alarm mask bit: A1M4:A1M1 = b1100, DY/DT = X
      ctrlTime[0] += 0;
 8000992:	7c3b      	ldrb	r3, [r7, #16]
 8000994:	743b      	strb	r3, [r7, #16]
      ctrlTime[1] += 0;
 8000996:	7c7b      	ldrb	r3, [r7, #17]
 8000998:	747b      	strb	r3, [r7, #17]
      ctrlTime[2] += maskBit;
 800099a:	7cba      	ldrb	r2, [r7, #18]
 800099c:	7dfb      	ldrb	r3, [r7, #23]
 800099e:	4413      	add	r3, r2
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	74bb      	strb	r3, [r7, #18]
      ctrlTime[3] += maskBit;
 80009a4:	7cfa      	ldrb	r2, [r7, #19]
 80009a6:	7dfb      	ldrb	r3, [r7, #23]
 80009a8:	4413      	add	r3, r2
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	74fb      	strb	r3, [r7, #19]
      break;
 80009ae:	e029      	b.n	8000a04 <Time_Ctrl+0x14c>
    case 3:
      // Alarm mask bit: A1M4:A1M1 = b1000, DY/DT = X
      ctrlTime[0] += 0;
 80009b0:	7c3b      	ldrb	r3, [r7, #16]
 80009b2:	743b      	strb	r3, [r7, #16]
      ctrlTime[1] += 0;
 80009b4:	7c7b      	ldrb	r3, [r7, #17]
 80009b6:	747b      	strb	r3, [r7, #17]
      ctrlTime[2] += 0;
 80009b8:	7cbb      	ldrb	r3, [r7, #18]
 80009ba:	74bb      	strb	r3, [r7, #18]
      ctrlTime[3] += maskBit;
 80009bc:	7cfa      	ldrb	r2, [r7, #19]
 80009be:	7dfb      	ldrb	r3, [r7, #23]
 80009c0:	4413      	add	r3, r2
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	74fb      	strb	r3, [r7, #19]
      break;
 80009c6:	e01d      	b.n	8000a04 <Time_Ctrl+0x14c>
    case 4:
      // Alarm mask bit: A1M4:A1M1 = b0000, DY/DT = 0
      ctrlTime[0] += 0;
 80009c8:	7c3b      	ldrb	r3, [r7, #16]
 80009ca:	743b      	strb	r3, [r7, #16]
      ctrlTime[1] += 0;
 80009cc:	7c7b      	ldrb	r3, [r7, #17]
 80009ce:	747b      	strb	r3, [r7, #17]
      ctrlTime[2] += 0;
 80009d0:	7cbb      	ldrb	r3, [r7, #18]
 80009d2:	74bb      	strb	r3, [r7, #18]
      ctrlTime[3] += 0;
 80009d4:	7cfb      	ldrb	r3, [r7, #19]
 80009d6:	74fb      	strb	r3, [r7, #19]
      break;
 80009d8:	e014      	b.n	8000a04 <Time_Ctrl+0x14c>
    case 5:
      // Alarm mask bit: A1M4:A1M1 = b0000, DY/DT = 1
      ctrlTime[0] += 0;
 80009da:	7c3b      	ldrb	r3, [r7, #16]
 80009dc:	743b      	strb	r3, [r7, #16]
      ctrlTime[1] += 0;
 80009de:	7c7b      	ldrb	r3, [r7, #17]
 80009e0:	747b      	strb	r3, [r7, #17]
      ctrlTime[2] += 0;
 80009e2:	7cbb      	ldrb	r3, [r7, #18]
 80009e4:	74bb      	strb	r3, [r7, #18]
      ctrlTime[3] += dyDt;
 80009e6:	7cfa      	ldrb	r2, [r7, #19]
 80009e8:	7dbb      	ldrb	r3, [r7, #22]
 80009ea:	4413      	add	r3, r2
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	74fb      	strb	r3, [r7, #19]
      break;
 80009f0:	e008      	b.n	8000a04 <Time_Ctrl+0x14c>
    default:
      // Alarm mask bit: A1M4:A1M1 = b0000, DY/DT = 0
      ctrlTime[0] += 0;
 80009f2:	7c3b      	ldrb	r3, [r7, #16]
 80009f4:	743b      	strb	r3, [r7, #16]
      ctrlTime[1] += 0;
 80009f6:	7c7b      	ldrb	r3, [r7, #17]
 80009f8:	747b      	strb	r3, [r7, #17]
      ctrlTime[2] += 0;
 80009fa:	7cbb      	ldrb	r3, [r7, #18]
 80009fc:	74bb      	strb	r3, [r7, #18]
      ctrlTime[3] += 0;
 80009fe:	7cfb      	ldrb	r3, [r7, #19]
 8000a00:	74fb      	strb	r3, [r7, #19]
      break;
 8000a02:	bf00      	nop
  }

  // Send the array containing the RTC alarm mode setting to the RTC module through I2C interface at address 07h - 0Ah (size of value: 4 bytes)
  HAL_I2C_Mem_Write(DS3231_I2C, DS3231_ADDR, 0x07, 1, ctrlTime, sizeof(ctrlTime), 1000);
 8000a04:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a08:	9302      	str	r3, [sp, #8]
 8000a0a:	2304      	movs	r3, #4
 8000a0c:	9301      	str	r3, [sp, #4]
 8000a0e:	f107 0310 	add.w	r3, r7, #16
 8000a12:	9300      	str	r3, [sp, #0]
 8000a14:	2301      	movs	r3, #1
 8000a16:	2207      	movs	r2, #7
 8000a18:	21d0      	movs	r1, #208	@ 0xd0
 8000a1a:	480d      	ldr	r0, [pc, #52]	@ (8000a50 <Time_Ctrl+0x198>)
 8000a1c:	f002 fd34 	bl	8003488 <HAL_I2C_Mem_Write>

  // Delay for 1ms to allow the RTC module to process the data
  HAL_Delay(1);
 8000a20:	2001      	movs	r0, #1
 8000a22:	f001 fc3f 	bl	80022a4 <HAL_Delay>

  // Send the alarm control mask bits to the RTC module through I2C interface at address 0Eh (size of value: 1 byte)
  HAL_I2C_Mem_Write(DS3231_I2C, DS3231_ADDR, 0x0E, 1, &ctrlAlarm, sizeof(ctrlAlarm), 1000);
 8000a26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a2a:	9302      	str	r3, [sp, #8]
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	9301      	str	r3, [sp, #4]
 8000a30:	f107 030f 	add.w	r3, r7, #15
 8000a34:	9300      	str	r3, [sp, #0]
 8000a36:	2301      	movs	r3, #1
 8000a38:	220e      	movs	r2, #14
 8000a3a:	21d0      	movs	r1, #208	@ 0xd0
 8000a3c:	4804      	ldr	r0, [pc, #16]	@ (8000a50 <Time_Ctrl+0x198>)
 8000a3e:	f002 fd23 	bl	8003488 <HAL_I2C_Mem_Write>

  // Delay for 1ms to allow the RTC module to process the data
  HAL_Delay(1);
 8000a42:	2001      	movs	r0, #1
 8000a44:	f001 fc2e 	bl	80022a4 <HAL_Delay>
}
 8000a48:	bf00      	nop
 8000a4a:	371c      	adds	r7, #28
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd90      	pop	{r4, r7, pc}
 8000a50:	200000a8 	.word	0x200000a8

08000a54 <Time_Init>:
  * @param  month: Month: 1-12
  * @param  year: Year: 0-99 (0 = 2000, 1 = 2001, ..., 99 = 2099)
  * @retval None
*/
void Time_Init (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom, uint8_t month, uint8_t year)
{
 8000a54:	b590      	push	{r4, r7, lr}
 8000a56:	b087      	sub	sp, #28
 8000a58:	af04      	add	r7, sp, #16
 8000a5a:	4604      	mov	r4, r0
 8000a5c:	4608      	mov	r0, r1
 8000a5e:	4611      	mov	r1, r2
 8000a60:	461a      	mov	r2, r3
 8000a62:	4623      	mov	r3, r4
 8000a64:	71fb      	strb	r3, [r7, #7]
 8000a66:	4603      	mov	r3, r0
 8000a68:	71bb      	strb	r3, [r7, #6]
 8000a6a:	460b      	mov	r3, r1
 8000a6c:	717b      	strb	r3, [r7, #5]
 8000a6e:	4613      	mov	r3, r2
 8000a70:	713b      	strb	r3, [r7, #4]
  // This function is intended for initial setup of the RTC module after a reset.
  // It should not be called repeatedly unless reinitialization is required.
  //    Time_Set (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom, uint8_t month, uint8_t year)
  Time_Set (sec, min, hour, dow, dom, month, year);
 8000a72:	793c      	ldrb	r4, [r7, #4]
 8000a74:	797a      	ldrb	r2, [r7, #5]
 8000a76:	79b9      	ldrb	r1, [r7, #6]
 8000a78:	79f8      	ldrb	r0, [r7, #7]
 8000a7a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000a7e:	9302      	str	r3, [sp, #8]
 8000a80:	7f3b      	ldrb	r3, [r7, #28]
 8000a82:	9301      	str	r3, [sp, #4]
 8000a84:	7e3b      	ldrb	r3, [r7, #24]
 8000a86:	9300      	str	r3, [sp, #0]
 8000a88:	4623      	mov	r3, r4
 8000a8a:	f7ff fe6d 	bl	8000768 <Time_Set>
  //        2    : Alarm when minutes and seconds match
  //        3    : Alarm when hours, minutes, and seconds match
  //        4    : Alarm when date, hours, minutes, and seconds match
  //        5    : Alarm when day, hours, minutes, and seconds match
  //      For mode 0, the remaining input are don't-care values
  Time_Ctrl 
 8000a8e:	2300      	movs	r3, #0
 8000a90:	9301      	str	r3, [sp, #4]
 8000a92:	2300      	movs	r3, #0
 8000a94:	9300      	str	r3, [sp, #0]
 8000a96:	2300      	movs	r3, #0
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	f7ff ff0b 	bl	80008b8 <Time_Ctrl>
     0, // Minutes: 0-59
     0, // Hours: 0-23
     0, // Day of the week: 1-7 (1 = Sunday, 2 = Monday, ..., 7 = Saturday), or Date of the month: 1-31
     0  // Select: 1 = day of week, 0 = date of month
  );   
}
 8000aa2:	bf00      	nop
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd90      	pop	{r4, r7, pc}
	...

08000aac <Alarm_Set>:
  * @param  on_off: On/ Off state of the alarm (1 = ON, 0 = OFF)
  * @param  slot: Slot number of the alarm in the EEPROM module (0-9)
  * @retval None
*/
void Alarm_Set (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow_dom, ALARM_DY_DT_MODE dy_dt, bool on_off, uint8_t slot)
{
 8000aac:	b590      	push	{r4, r7, lr}
 8000aae:	b089      	sub	sp, #36	@ 0x24
 8000ab0:	af04      	add	r7, sp, #16
 8000ab2:	4604      	mov	r4, r0
 8000ab4:	4608      	mov	r0, r1
 8000ab6:	4611      	mov	r1, r2
 8000ab8:	461a      	mov	r2, r3
 8000aba:	4623      	mov	r3, r4
 8000abc:	71fb      	strb	r3, [r7, #7]
 8000abe:	4603      	mov	r3, r0
 8000ac0:	71bb      	strb	r3, [r7, #6]
 8000ac2:	460b      	mov	r3, r1
 8000ac4:	717b      	strb	r3, [r7, #5]
 8000ac6:	4613      	mov	r3, r2
 8000ac8:	713b      	strb	r3, [r7, #4]
  // Encode the ON/OFF state of the alarm into the alarm package
  // By masking the 7th bit of the second register
  if (on_off)
 8000aca:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d002      	beq.n	8000ad8 <Alarm_Set+0x2c>
  {
    sec += (1 << 7);
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	3b80      	subs	r3, #128	@ 0x80
 8000ad6:	71fb      	strb	r3, [r7, #7]
  }

  // Encode the day of week or date of month mode into the alarm package
  // By masking the 7th and 6th bits of the dow_dom variable
  switch (dy_dt)
 8000ad8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000adc:	2b02      	cmp	r3, #2
 8000ade:	d00d      	beq.n	8000afc <Alarm_Set+0x50>
 8000ae0:	2b02      	cmp	r3, #2
 8000ae2:	dc0d      	bgt.n	8000b00 <Alarm_Set+0x54>
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d005      	beq.n	8000af4 <Alarm_Set+0x48>
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d109      	bne.n	8000b00 <Alarm_Set+0x54>
  {
    // Date of the month
    case DATE_OF_MONTH_MODE:
      // Encoding: [Bit 7] = 1, [Bit 6] = 0
      dow_dom += (1 << 7);
 8000aec:	793b      	ldrb	r3, [r7, #4]
 8000aee:	3b80      	subs	r3, #128	@ 0x80
 8000af0:	713b      	strb	r3, [r7, #4]
      break;
 8000af2:	e006      	b.n	8000b02 <Alarm_Set+0x56>

    // Day of the week
    case DAY_OF_WEEK_MODE:
      // Ending: [Bit 7] = 1, [Bit 6] = 1
      dow_dom += ((1 << 7) | (1 << 6));
 8000af4:	793b      	ldrb	r3, [r7, #4]
 8000af6:	3b40      	subs	r3, #64	@ 0x40
 8000af8:	713b      	strb	r3, [r7, #4]
      break;
 8000afa:	e002      	b.n	8000b02 <Alarm_Set+0x56>

    // Not used
    case NOT_USED_MODE:
      // Encoding: [Bit 7] = 0, [Bit 6] = 0
      dow_dom += 0;
      break;
 8000afc:	bf00      	nop
 8000afe:	e000      	b.n	8000b02 <Alarm_Set+0x56>

    default:
      dow_dom += 0;
      break;
 8000b00:	bf00      	nop
  }

  // Store the encoded alarm values into the blank array
  uint8_t setAlarm[4] = {sec, min, hour, dow_dom};
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	723b      	strb	r3, [r7, #8]
 8000b06:	79bb      	ldrb	r3, [r7, #6]
 8000b08:	727b      	strb	r3, [r7, #9]
 8000b0a:	797b      	ldrb	r3, [r7, #5]
 8000b0c:	72bb      	strb	r3, [r7, #10]
 8000b0e:	793b      	ldrb	r3, [r7, #4]
 8000b10:	72fb      	strb	r3, [r7, #11]
  
  // Calculate the internal address of the alarm in the EEPROM module (0-8192, or 13 bits)
  // By multiplying the slot number by 4 (size of each alarm: 4 bytes)
  uint16_t address = slot * 4;
 8000b12:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000b16:	b29b      	uxth	r3, r3
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	81fb      	strh	r3, [r7, #14]

  // Send the array containing the alarm values to the EEPROM module through I2C interface
  HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, address, 2, setAlarm, sizeof(setAlarm), 1000);
 8000b1c:	89fa      	ldrh	r2, [r7, #14]
 8000b1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b22:	9302      	str	r3, [sp, #8]
 8000b24:	2304      	movs	r3, #4
 8000b26:	9301      	str	r3, [sp, #4]
 8000b28:	f107 0308 	add.w	r3, r7, #8
 8000b2c:	9300      	str	r3, [sp, #0]
 8000b2e:	2302      	movs	r3, #2
 8000b30:	21a0      	movs	r1, #160	@ 0xa0
 8000b32:	4805      	ldr	r0, [pc, #20]	@ (8000b48 <Alarm_Set+0x9c>)
 8000b34:	f002 fca8 	bl	8003488 <HAL_I2C_Mem_Write>

  // Delay to allow the EEPROM module to complete the Page Write operation
  HAL_Delay(5);
 8000b38:	2005      	movs	r0, #5
 8000b3a:	f001 fbb3 	bl	80022a4 <HAL_Delay>
}
 8000b3e:	bf00      	nop
 8000b40:	3714      	adds	r7, #20
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd90      	pop	{r4, r7, pc}
 8000b46:	bf00      	nop
 8000b48:	200000a8 	.word	0x200000a8

08000b4c <Alarm_Get>:
  * @param  slot: Slot number of the alarm in the EEPROM module (0-9)
  * @param  alarm_get_data: Pointer to an ALARM_DATA structure to store the retrieved alarm values
  * @retval None
*/
void Alarm_Get (uint8_t slot, volatile ALARM_DATA *alarm_get_data)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b088      	sub	sp, #32
 8000b50:	af04      	add	r7, sp, #16
 8000b52:	4603      	mov	r3, r0
 8000b54:	6039      	str	r1, [r7, #0]
 8000b56:	71fb      	strb	r3, [r7, #7]
  // Address of the alarm in the EEPROM module (0-8192, or 13 bits)
  uint16_t address = slot * 4;
 8000b58:	79fb      	ldrb	r3, [r7, #7]
 8000b5a:	b29b      	uxth	r3, r3
 8000b5c:	009b      	lsls	r3, r3, #2
 8000b5e:	81fb      	strh	r3, [r7, #14]

  // A blank array (4 slots) to contain the alarm values received from the EEPROM module
  uint8_t getAlarm[4];

  // Receive the alarm values from the EEPROM module through I2C interface, then store them into the blank array (size of value: 4 bytes)
  HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, address, 2, getAlarm, sizeof(getAlarm), 1000);
 8000b60:	89fa      	ldrh	r2, [r7, #14]
 8000b62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b66:	9302      	str	r3, [sp, #8]
 8000b68:	2304      	movs	r3, #4
 8000b6a:	9301      	str	r3, [sp, #4]
 8000b6c:	f107 0308 	add.w	r3, r7, #8
 8000b70:	9300      	str	r3, [sp, #0]
 8000b72:	2302      	movs	r3, #2
 8000b74:	21a0      	movs	r1, #160	@ 0xa0
 8000b76:	4822      	ldr	r0, [pc, #136]	@ (8000c00 <Alarm_Get+0xb4>)
 8000b78:	f002 fd80 	bl	800367c <HAL_I2C_Mem_Read>

  // Delay to allow the EEPROM module to complete the Sequential Read operation
  HAL_Delay(1);
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	f001 fb91 	bl	80022a4 <HAL_Delay>

  // Store the alarm values into the alarm variable
  alarm_get_data->second = 0;
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	2200      	movs	r2, #0
 8000b86:	701a      	strb	r2, [r3, #0]
  alarm_get_data->minute = getAlarm[1];
 8000b88:	7a7a      	ldrb	r2, [r7, #9]
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	705a      	strb	r2, [r3, #1]
  alarm_get_data->hour = getAlarm[2];
 8000b8e:	7aba      	ldrb	r2, [r7, #10]
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	709a      	strb	r2, [r3, #2]
  
  if (getAlarm[3] >= (1 << 7))
 8000b94:	7afb      	ldrb	r3, [r7, #11]
 8000b96:	b25b      	sxtb	r3, r3
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	da18      	bge.n	8000bce <Alarm_Get+0x82>
  {
    if ((getAlarm[3] & 0x7F) >= (1 << 6))
 8000b9c:	7afb      	ldrb	r3, [r7, #11]
 8000b9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d009      	beq.n	8000bba <Alarm_Get+0x6e>
    {
      alarm_get_data->dy_dt = DAY_OF_WEEK_MODE;
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	2200      	movs	r2, #0
 8000baa:	70da      	strb	r2, [r3, #3]
      alarm_get_data->dow_dom = getAlarm[3] & 0x3F;
 8000bac:	7afb      	ldrb	r3, [r7, #11]
 8000bae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000bb2:	b2da      	uxtb	r2, r3
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	711a      	strb	r2, [r3, #4]
 8000bb8:	e012      	b.n	8000be0 <Alarm_Get+0x94>
    }
    else 
    {
      alarm_get_data->dy_dt = DATE_OF_MONTH_MODE;
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	70da      	strb	r2, [r3, #3]
      alarm_get_data->dow_dom = getAlarm[3] & 0x7F;
 8000bc0:	7afb      	ldrb	r3, [r7, #11]
 8000bc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000bc6:	b2da      	uxtb	r2, r3
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	711a      	strb	r2, [r3, #4]
 8000bcc:	e008      	b.n	8000be0 <Alarm_Get+0x94>
    }
  }
  else 
  {
    alarm_get_data->dy_dt = NOT_USED_MODE;
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	2202      	movs	r2, #2
 8000bd2:	70da      	strb	r2, [r3, #3]
    alarm_get_data->dow_dom = getAlarm[3] & 0x7F;
 8000bd4:	7afb      	ldrb	r3, [r7, #11]
 8000bd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000bda:	b2da      	uxtb	r2, r3
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	711a      	strb	r2, [r3, #4]
  }

  if (getAlarm[0] >= (1 << 7)) alarm_get_data->on_off = true;
 8000be0:	7a3b      	ldrb	r3, [r7, #8]
 8000be2:	b25b      	sxtb	r3, r3
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	da03      	bge.n	8000bf0 <Alarm_Get+0xa4>
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	2201      	movs	r2, #1
 8000bec:	715a      	strb	r2, [r3, #5]
  else alarm_get_data->on_off = false;
}
 8000bee:	e002      	b.n	8000bf6 <Alarm_Get+0xaa>
  else alarm_get_data->on_off = false;
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	715a      	strb	r2, [r3, #5]
}
 8000bf6:	bf00      	nop
 8000bf8:	3710      	adds	r7, #16
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	200000a8 	.word	0x200000a8

08000c04 <Alarm_Clear>:
  * @brief  Clear a single alarm from the EEPROM module.
  * @param  slot: Slot number of the alarm in the EEPROM module (0-9)
  * @retval None
*/
void Alarm_Clear (uint8_t slot)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b088      	sub	sp, #32
 8000c08:	af04      	add	r7, sp, #16
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	71fb      	strb	r3, [r7, #7]
  // Address of the alarm in the EEPROM module (0-8192, or 13 bits)
  uint16_t address = slot * 4;
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	b29b      	uxth	r3, r3
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	81fb      	strh	r3, [r7, #14]

  // A blank array (4 slots) to contain the alarm values to be cleared
  uint8_t clearAlarm[4] = {0, 0, 0, 0};
 8000c16:	2300      	movs	r3, #0
 8000c18:	60bb      	str	r3, [r7, #8]

  // Write the blank array to the EEPROM module through I2C interface
  HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, address, 2, clearAlarm, sizeof(clearAlarm), 1000);
 8000c1a:	89fa      	ldrh	r2, [r7, #14]
 8000c1c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c20:	9302      	str	r3, [sp, #8]
 8000c22:	2304      	movs	r3, #4
 8000c24:	9301      	str	r3, [sp, #4]
 8000c26:	f107 0308 	add.w	r3, r7, #8
 8000c2a:	9300      	str	r3, [sp, #0]
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	21a0      	movs	r1, #160	@ 0xa0
 8000c30:	4804      	ldr	r0, [pc, #16]	@ (8000c44 <Alarm_Clear+0x40>)
 8000c32:	f002 fc29 	bl	8003488 <HAL_I2C_Mem_Write>

  // Delay to allow the EEPROM module to complete the Page Write operation
  HAL_Delay(5);
 8000c36:	2005      	movs	r0, #5
 8000c38:	f001 fb34 	bl	80022a4 <HAL_Delay>
}
 8000c3c:	bf00      	nop
 8000c3e:	3710      	adds	r7, #16
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	200000a8 	.word	0x200000a8

08000c48 <Alarm_Slot_Pointer_Set>:
/**
 * @brief Save the data of pointer for the alarm slot to EEPROM module.
  * @retval None
 */
void Alarm_Slot_Pointer_Set (void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af04      	add	r7, sp, #16
  // Write the alarm slot pointer value to the EEPROM module through I2C interface
  HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, ALARM_SLOT_PTR_ADDR, 2, &alarm_slot_ptr, sizeof(alarm_slot_ptr), 1000);
 8000c4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c52:	9302      	str	r3, [sp, #8]
 8000c54:	2301      	movs	r3, #1
 8000c56:	9301      	str	r3, [sp, #4]
 8000c58:	4b06      	ldr	r3, [pc, #24]	@ (8000c74 <Alarm_Slot_Pointer_Set+0x2c>)
 8000c5a:	9300      	str	r3, [sp, #0]
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	2228      	movs	r2, #40	@ 0x28
 8000c60:	21a0      	movs	r1, #160	@ 0xa0
 8000c62:	4805      	ldr	r0, [pc, #20]	@ (8000c78 <Alarm_Slot_Pointer_Set+0x30>)
 8000c64:	f002 fc10 	bl	8003488 <HAL_I2C_Mem_Write>

  // Delay to allow the EEPROM module to complete the Page Write operation
  HAL_Delay(5);
 8000c68:	2005      	movs	r0, #5
 8000c6a:	f001 fb1b 	bl	80022a4 <HAL_Delay>
}
 8000c6e:	bf00      	nop
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20000158 	.word	0x20000158
 8000c78:	200000a8 	.word	0x200000a8

08000c7c <Alarm_Slot_Pointer_Get>:
/**
 * @brief Retrieve the data of pointer for the alarm slot from EEPROM module.
  * @retval None
 */
void Alarm_Slot_Pointer_Get (void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af04      	add	r7, sp, #16
  // Read the alarm slot pointer from the EEPROM module through I2C interface
  HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, ALARM_SLOT_PTR_ADDR, 2, &alarm_slot_ptr, sizeof(alarm_slot_ptr), 1000);
 8000c82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c86:	9302      	str	r3, [sp, #8]
 8000c88:	2301      	movs	r3, #1
 8000c8a:	9301      	str	r3, [sp, #4]
 8000c8c:	4b06      	ldr	r3, [pc, #24]	@ (8000ca8 <Alarm_Slot_Pointer_Get+0x2c>)
 8000c8e:	9300      	str	r3, [sp, #0]
 8000c90:	2302      	movs	r3, #2
 8000c92:	2228      	movs	r2, #40	@ 0x28
 8000c94:	21a0      	movs	r1, #160	@ 0xa0
 8000c96:	4805      	ldr	r0, [pc, #20]	@ (8000cac <Alarm_Slot_Pointer_Get+0x30>)
 8000c98:	f002 fcf0 	bl	800367c <HAL_I2C_Mem_Read>

  // Delay to allow the EEPROM module to complete the Sequential Read operation
  HAL_Delay(1);
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	f001 fb01 	bl	80022a4 <HAL_Delay>
}
 8000ca2:	bf00      	nop
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20000158 	.word	0x20000158
 8000cac:	200000a8 	.word	0x200000a8

08000cb0 <Alarm_Check>:
  * @param  time_get_data: Pointer to a TIME structure to store the current time values
  * @retval None
  * @note   This function compares the current time with all alarms stored in the EEPROM module.
*/
void Alarm_Check (volatile TIME_DATA *time_get_data)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  // A blank array to contain the alarm values retrieved from the EEPROM module
  volatile ALARM_DATA alarmCheckData = {0};
 8000cb8:	f107 030c 	add.w	r3, r7, #12
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	809a      	strh	r2, [r3, #4]

  // Compare the current time with all available alarms in the EEPROM module
  for (int i = 0; i < alarm_slot_ptr; i++)
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	617b      	str	r3, [r7, #20]
 8000cc6:	e06a      	b.n	8000d9e <Alarm_Check+0xee>
  {
    // Retrieve the alarm values from the EEPROM module
    //    void Alarm_Get (uint8_t slot, ALARM_DATA *alarm_get_data)
    Alarm_Get(i, &alarmCheckData);
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	f107 020c 	add.w	r2, r7, #12
 8000cd0:	4611      	mov	r1, r2
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff ff3a 	bl	8000b4c <Alarm_Get>

    // Check if the alarm is at ON or OFF state by checking the MSB of the second register
    if (!alarmCheckData.on_off)
 8000cd8:	7c7b      	ldrb	r3, [r7, #17]
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	f083 0301 	eor.w	r3, r3, #1
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d14d      	bne.n	8000d82 <Alarm_Check+0xd2>
      // Skip if the alarm is OFF
      continue;
    }

    // Check if the current time matches the alarm time (day of week)
    if ((alarmCheckData.dy_dt == DAY_OF_WEEK_MODE)
 8000ce6:	7bfb      	ldrb	r3, [r7, #15]
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d106      	bne.n	8000cfc <Alarm_Check+0x4c>
    &&  (alarmCheckData.dow_dom != time_get_data->dayofweek))
 8000cee:	7c3b      	ldrb	r3, [r7, #16]
 8000cf0:	b2da      	uxtb	r2, r3
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	78db      	ldrb	r3, [r3, #3]
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d144      	bne.n	8000d86 <Alarm_Check+0xd6>
      // Skip if the current time does NOT match the alarm time (day of week)
      continue;
    }

    // Check if the current time matches the alarm time (date of month)
    if ((alarmCheckData.dy_dt == DATE_OF_MONTH_MODE)
 8000cfc:	7bfb      	ldrb	r3, [r7, #15]
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d106      	bne.n	8000d12 <Alarm_Check+0x62>
    &&  (alarmCheckData.dow_dom != time_get_data->dateofmonth))
 8000d04:	7c3b      	ldrb	r3, [r7, #16]
 8000d06:	b2da      	uxtb	r2, r3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	791b      	ldrb	r3, [r3, #4]
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	d13b      	bne.n	8000d8a <Alarm_Check+0xda>
      // Skip if the current time does NOT match the alarm time (date of month)
      continue;
    }

    // Check if the current time matches the alarm time (hour)
    if (alarmCheckData.hour != time_get_data->hour)
 8000d12:	7bbb      	ldrb	r3, [r7, #14]
 8000d14:	b2da      	uxtb	r2, r3
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	789b      	ldrb	r3, [r3, #2]
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d136      	bne.n	8000d8e <Alarm_Check+0xde>
      // Skip if the current time does NOT match the alarm time (hour)
      continue;
    }

    // Check if the current time matches the alarm time (minute)
    if (alarmCheckData.minute != time_get_data->minute)
 8000d20:	7b7b      	ldrb	r3, [r7, #13]
 8000d22:	b2da      	uxtb	r2, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	785b      	ldrb	r3, [r3, #1]
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	d131      	bne.n	8000d92 <Alarm_Check+0xe2>
      // Skip if the current time does NOT match the alarm time (minute)
      continue;
    }

    // Check if the current time matches the alarm time (second)
    if (alarmCheckData.second != time_get_data->second)
 8000d2e:	7b3b      	ldrb	r3, [r7, #12]
 8000d30:	b2da      	uxtb	r2, r3
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d12c      	bne.n	8000d96 <Alarm_Check+0xe6>
    {
      // Skip if the current time does NOT match the alarm time (second)
      continue;
    }

    if (!alarm_active_flag)
 8000d3c:	4b1e      	ldr	r3, [pc, #120]	@ (8000db8 <Alarm_Check+0x108>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	f083 0301 	eor.w	r3, r3, #1
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d030      	beq.n	8000dac <Alarm_Check+0xfc>
    {
      debug_alarm_check_ctr += 1;
 8000d4a:	4b1c      	ldr	r3, [pc, #112]	@ (8000dbc <Alarm_Check+0x10c>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	4b1a      	ldr	r3, [pc, #104]	@ (8000dbc <Alarm_Check+0x10c>)
 8000d54:	701a      	strb	r2, [r3, #0]

      // Reset the buzzer cycle number
      buzzer_cycle = 0; 
 8000d56:	4b1a      	ldr	r3, [pc, #104]	@ (8000dc0 <Alarm_Check+0x110>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	701a      	strb	r2, [r3, #0]

      // Reset the buzzer phase number
      buzzer_phase = 0; 
 8000d5c:	4b19      	ldr	r3, [pc, #100]	@ (8000dc4 <Alarm_Check+0x114>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	701a      	strb	r2, [r3, #0]

      // Set the system past mode to the current mode
      system_state.past_mode = system_state.mode;
 8000d62:	4b19      	ldr	r3, [pc, #100]	@ (8000dc8 <Alarm_Check+0x118>)
 8000d64:	781a      	ldrb	r2, [r3, #0]
 8000d66:	4b18      	ldr	r3, [pc, #96]	@ (8000dc8 <Alarm_Check+0x118>)
 8000d68:	705a      	strb	r2, [r3, #1]

      // Set the system state to alarm active mode
      system_state.mode = ALARM_ACTIVE_MODE;
 8000d6a:	4b17      	ldr	r3, [pc, #92]	@ (8000dc8 <Alarm_Check+0x118>)
 8000d6c:	2204      	movs	r2, #4
 8000d6e:	701a      	strb	r2, [r3, #0]

      // Set the buzzer tick to the current tick
      buzzer_tick = HAL_GetTick();
 8000d70:	f001 fa8e 	bl	8002290 <HAL_GetTick>
 8000d74:	4603      	mov	r3, r0
 8000d76:	4a15      	ldr	r2, [pc, #84]	@ (8000dcc <Alarm_Check+0x11c>)
 8000d78:	6013      	str	r3, [r2, #0]

      // Set the alarm active flag to true
      alarm_active_flag = true; 
 8000d7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000db8 <Alarm_Check+0x108>)
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	701a      	strb	r2, [r3, #0]
    }
    
    // Stop checking time matching
    // to make sure that only one alarm can be activated at a time
    break;
 8000d80:	e014      	b.n	8000dac <Alarm_Check+0xfc>
      continue;
 8000d82:	bf00      	nop
 8000d84:	e008      	b.n	8000d98 <Alarm_Check+0xe8>
      continue;
 8000d86:	bf00      	nop
 8000d88:	e006      	b.n	8000d98 <Alarm_Check+0xe8>
      continue;
 8000d8a:	bf00      	nop
 8000d8c:	e004      	b.n	8000d98 <Alarm_Check+0xe8>
      continue;
 8000d8e:	bf00      	nop
 8000d90:	e002      	b.n	8000d98 <Alarm_Check+0xe8>
      continue;
 8000d92:	bf00      	nop
 8000d94:	e000      	b.n	8000d98 <Alarm_Check+0xe8>
      continue;
 8000d96:	bf00      	nop
  for (int i = 0; i < alarm_slot_ptr; i++)
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	617b      	str	r3, [r7, #20]
 8000d9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd0 <Alarm_Check+0x120>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	461a      	mov	r2, r3
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	4293      	cmp	r3, r2
 8000da8:	db8e      	blt.n	8000cc8 <Alarm_Check+0x18>
  }
}
 8000daa:	e000      	b.n	8000dae <Alarm_Check+0xfe>
    break;
 8000dac:	bf00      	nop
}
 8000dae:	bf00      	nop
 8000db0:	3718      	adds	r7, #24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	2000015c 	.word	0x2000015c
 8000dbc:	2000015b 	.word	0x2000015b
 8000dc0:	20000170 	.word	0x20000170
 8000dc4:	20000171 	.word	0x20000171
 8000dc8:	200000fc 	.word	0x200000fc
 8000dcc:	20000174 	.word	0x20000174
 8000dd0:	20000158 	.word	0x20000158

08000dd4 <Alarm_Ring>:
/**
  * @brief  Handle the alarm activation by ringing the buzzer and updating the system state.
  * @retval None
*/
void Alarm_Ring (void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  // Check if the buzzer cycle number is less than or equal to the maximum cycle number
  if (buzzer_cycle <= BUZZER_CYCLE_NUM)
 8000dd8:	4b3f      	ldr	r3, [pc, #252]	@ (8000ed8 <Alarm_Ring+0x104>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	2b0a      	cmp	r3, #10
 8000dde:	d868      	bhi.n	8000eb2 <Alarm_Ring+0xde>
  {
    // Check if the buzzer phase number is less than or equal to the maximum phase number
    if (buzzer_phase <= 4)
 8000de0:	4b3e      	ldr	r3, [pc, #248]	@ (8000edc <Alarm_Ring+0x108>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2b04      	cmp	r3, #4
 8000de6:	d855      	bhi.n	8000e94 <Alarm_Ring+0xc0>
    {
      // Check if the buzzer tick is within the specified delay time
      if      ((buzzer_phase == 0) && (HAL_GetTick() - buzzer_tick <= BUZZER_SHORT_DELAY))
 8000de8:	4b3c      	ldr	r3, [pc, #240]	@ (8000edc <Alarm_Ring+0x108>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d10d      	bne.n	8000e0c <Alarm_Ring+0x38>
 8000df0:	f001 fa4e 	bl	8002290 <HAL_GetTick>
 8000df4:	4602      	mov	r2, r0
 8000df6:	4b3a      	ldr	r3, [pc, #232]	@ (8000ee0 <Alarm_Ring+0x10c>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	1ad3      	subs	r3, r2, r3
 8000dfc:	2b64      	cmp	r3, #100	@ 0x64
 8000dfe:	d805      	bhi.n	8000e0c <Alarm_Ring+0x38>
      {
        // Turn on the buzzer for a short duration
        HAL_GPIO_WritePin(GPIOB, BUZZER_Pin, BUZZER_ACTIVE);
 8000e00:	2200      	movs	r2, #0
 8000e02:	2101      	movs	r1, #1
 8000e04:	4837      	ldr	r0, [pc, #220]	@ (8000ee4 <Alarm_Ring+0x110>)
 8000e06:	f002 f9ca 	bl	800319e <HAL_GPIO_WritePin>
 8000e0a:	e062      	b.n	8000ed2 <Alarm_Ring+0xfe>
      }
      else if ((buzzer_phase == 1) && (HAL_GetTick() - buzzer_tick <= BUZZER_SHORT_DELAY))
 8000e0c:	4b33      	ldr	r3, [pc, #204]	@ (8000edc <Alarm_Ring+0x108>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d10d      	bne.n	8000e30 <Alarm_Ring+0x5c>
 8000e14:	f001 fa3c 	bl	8002290 <HAL_GetTick>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	4b31      	ldr	r3, [pc, #196]	@ (8000ee0 <Alarm_Ring+0x10c>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	1ad3      	subs	r3, r2, r3
 8000e20:	2b64      	cmp	r3, #100	@ 0x64
 8000e22:	d805      	bhi.n	8000e30 <Alarm_Ring+0x5c>
      {
        // Turn off the buzzer for a short duration
        HAL_GPIO_WritePin(GPIOB, BUZZER_Pin, BUZZER_INACTIVE);
 8000e24:	2201      	movs	r2, #1
 8000e26:	2101      	movs	r1, #1
 8000e28:	482e      	ldr	r0, [pc, #184]	@ (8000ee4 <Alarm_Ring+0x110>)
 8000e2a:	f002 f9b8 	bl	800319e <HAL_GPIO_WritePin>
 8000e2e:	e050      	b.n	8000ed2 <Alarm_Ring+0xfe>
      }
      else if ((buzzer_phase == 3) && (HAL_GetTick() - buzzer_tick <= BUZZER_MEDIUM_DELAY))
 8000e30:	4b2a      	ldr	r3, [pc, #168]	@ (8000edc <Alarm_Ring+0x108>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	2b03      	cmp	r3, #3
 8000e36:	d10e      	bne.n	8000e56 <Alarm_Ring+0x82>
 8000e38:	f001 fa2a 	bl	8002290 <HAL_GetTick>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	4b28      	ldr	r3, [pc, #160]	@ (8000ee0 <Alarm_Ring+0x10c>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	1ad3      	subs	r3, r2, r3
 8000e44:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000e48:	d805      	bhi.n	8000e56 <Alarm_Ring+0x82>
      {
        // Turn on the buzzer for a medium duration
        HAL_GPIO_WritePin(GPIOB, BUZZER_Pin, BUZZER_ACTIVE);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	4825      	ldr	r0, [pc, #148]	@ (8000ee4 <Alarm_Ring+0x110>)
 8000e50:	f002 f9a5 	bl	800319e <HAL_GPIO_WritePin>
 8000e54:	e03d      	b.n	8000ed2 <Alarm_Ring+0xfe>
      }
      else if ((buzzer_phase == 4) && (HAL_GetTick() - buzzer_tick <= BUZZER_LONG_DELAY))
 8000e56:	4b21      	ldr	r3, [pc, #132]	@ (8000edc <Alarm_Ring+0x108>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	2b04      	cmp	r3, #4
 8000e5c:	d10e      	bne.n	8000e7c <Alarm_Ring+0xa8>
 8000e5e:	f001 fa17 	bl	8002290 <HAL_GetTick>
 8000e62:	4602      	mov	r2, r0
 8000e64:	4b1e      	ldr	r3, [pc, #120]	@ (8000ee0 <Alarm_Ring+0x10c>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000e6e:	d805      	bhi.n	8000e7c <Alarm_Ring+0xa8>
      {
        // Turn off the buzzer for a long duration
        HAL_GPIO_WritePin(GPIOB, BUZZER_Pin, BUZZER_INACTIVE);
 8000e70:	2201      	movs	r2, #1
 8000e72:	2101      	movs	r1, #1
 8000e74:	481b      	ldr	r0, [pc, #108]	@ (8000ee4 <Alarm_Ring+0x110>)
 8000e76:	f002 f992 	bl	800319e <HAL_GPIO_WritePin>
 8000e7a:	e02a      	b.n	8000ed2 <Alarm_Ring+0xfe>
      }
      else
      {
        // Reset the tick for the next phase
        buzzer_tick = HAL_GetTick(); 
 8000e7c:	f001 fa08 	bl	8002290 <HAL_GetTick>
 8000e80:	4603      	mov	r3, r0
 8000e82:	4a17      	ldr	r2, [pc, #92]	@ (8000ee0 <Alarm_Ring+0x10c>)
 8000e84:	6013      	str	r3, [r2, #0]

        // Move to the next phase
        buzzer_phase++; 
 8000e86:	4b15      	ldr	r3, [pc, #84]	@ (8000edc <Alarm_Ring+0x108>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	b2da      	uxtb	r2, r3
 8000e8e:	4b13      	ldr	r3, [pc, #76]	@ (8000edc <Alarm_Ring+0x108>)
 8000e90:	701a      	strb	r2, [r3, #0]
    system_state.past_mode = ALARM_ACTIVE_MODE; 

    // Reset the buzzer
    HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, BUZZER_INACTIVE); 
  }
}
 8000e92:	e01e      	b.n	8000ed2 <Alarm_Ring+0xfe>
      buzzer_tick = HAL_GetTick(); 
 8000e94:	f001 f9fc 	bl	8002290 <HAL_GetTick>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	4a11      	ldr	r2, [pc, #68]	@ (8000ee0 <Alarm_Ring+0x10c>)
 8000e9c:	6013      	str	r3, [r2, #0]
      buzzer_phase = 0; 
 8000e9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000edc <Alarm_Ring+0x108>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	701a      	strb	r2, [r3, #0]
      buzzer_cycle++; 
 8000ea4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed8 <Alarm_Ring+0x104>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	b2da      	uxtb	r2, r3
 8000eac:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed8 <Alarm_Ring+0x104>)
 8000eae:	701a      	strb	r2, [r3, #0]
}
 8000eb0:	e00f      	b.n	8000ed2 <Alarm_Ring+0xfe>
    alarm_active_flag = false; 
 8000eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ee8 <Alarm_Ring+0x114>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	701a      	strb	r2, [r3, #0]
    system_state.mode = system_state.past_mode; 
 8000eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8000eec <Alarm_Ring+0x118>)
 8000eba:	785a      	ldrb	r2, [r3, #1]
 8000ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8000eec <Alarm_Ring+0x118>)
 8000ebe:	701a      	strb	r2, [r3, #0]
    system_state.past_mode = ALARM_ACTIVE_MODE; 
 8000ec0:	4b0a      	ldr	r3, [pc, #40]	@ (8000eec <Alarm_Ring+0x118>)
 8000ec2:	2204      	movs	r2, #4
 8000ec4:	705a      	strb	r2, [r3, #1]
    HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, BUZZER_INACTIVE); 
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	2101      	movs	r1, #1
 8000eca:	4806      	ldr	r0, [pc, #24]	@ (8000ee4 <Alarm_Ring+0x110>)
 8000ecc:	f002 f967 	bl	800319e <HAL_GPIO_WritePin>
}
 8000ed0:	e7ff      	b.n	8000ed2 <Alarm_Ring+0xfe>
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000170 	.word	0x20000170
 8000edc:	20000171 	.word	0x20000171
 8000ee0:	20000174 	.word	0x20000174
 8000ee4:	40010c00 	.word	0x40010c00
 8000ee8:	2000015c 	.word	0x2000015c
 8000eec:	200000fc 	.word	0x200000fc

08000ef0 <Button_Debounce>:
  * * @param  button->hold_latch: 
  * * @param  button->start_tick: Start time of the button press event (in milliseconds).
  * @retval None
*/
void Button_Debounce(BUTTON_DATA *button)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  // Handle button state transitions and debounce logic
  switch (button->state)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	79db      	ldrb	r3, [r3, #7]
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d03b      	beq.n	8000f78 <Button_Debounce+0x88>
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	dc6c      	bgt.n	8000fde <Button_Debounce+0xee>
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d002      	beq.n	8000f0e <Button_Debounce+0x1e>
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d017      	beq.n	8000f3c <Button_Debounce+0x4c>
 8000f0c:	e067      	b.n	8000fde <Button_Debounce+0xee>
  {
    // Initial state: Button is released (HIGH)
    case BUTTON_RELEASED:

      // Reset all flags and state variables
      button->press_flag = false;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2200      	movs	r2, #0
 8000f12:	735a      	strb	r2, [r3, #13]
      button->hold_flag = false;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2200      	movs	r2, #0
 8000f18:	739a      	strb	r2, [r3, #14]
      button->latch = false;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	73da      	strb	r2, [r3, #15]
    
      // Check if interrupt flag is set
      if (button->int_flag) 
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	7b1b      	ldrb	r3, [r3, #12]
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d069      	beq.n	8000ffe <Button_Debounce+0x10e>
      {
        // Record the start time for debounce
        button->start_tick = HAL_GetTick();
 8000f2a:	f001 f9b1 	bl	8002290 <HAL_GetTick>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	609a      	str	r2, [r3, #8]

        // Transition to waiting state
        button->state = BUTTON_WAITING;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2201      	movs	r2, #1
 8000f38:	71da      	strb	r2, [r3, #7]
      }
      break;
 8000f3a:	e060      	b.n	8000ffe <Button_Debounce+0x10e>

    // Waiting state: Button is pressed (LOW) but not yet confirmed
    case BUTTON_WAITING:
      // Check if debounce delay has passed
      if (HAL_GetTick() - button->start_tick >= (BUTTON_DEBOUNCE_DELAY)) 
 8000f3c:	f001 f9a8 	bl	8002290 <HAL_GetTick>
 8000f40:	4602      	mov	r2, r0
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	1ad3      	subs	r3, r2, r3
 8000f48:	2b1d      	cmp	r3, #29
 8000f4a:	d95a      	bls.n	8001002 <Button_Debounce+0x112>
      {
        // Check if button is still pressed (LOW state) after debounce delay
        if (HAL_GPIO_ReadPin(button->gpio_port, button->gpio_pin) == BUTTON_ACTIVE) 
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	889b      	ldrh	r3, [r3, #4]
 8000f54:	4619      	mov	r1, r3
 8000f56:	4610      	mov	r0, r2
 8000f58:	f002 f90a 	bl	8003170 <HAL_GPIO_ReadPin>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d103      	bne.n	8000f6a <Button_Debounce+0x7a>
        {
          // Transition to pressed state
          button->state = BUTTON_PRESSED;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2202      	movs	r2, #2
 8000f66:	71da      	strb	r2, [r3, #7]
          // Reset interrupt flag and return to released state
          button->int_flag = false;  
          button->state = BUTTON_RELEASED;
        }
      }
      break;
 8000f68:	e04b      	b.n	8001002 <Button_Debounce+0x112>
          button->int_flag = false;  
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	731a      	strb	r2, [r3, #12]
          button->state = BUTTON_RELEASED;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2200      	movs	r2, #0
 8000f74:	71da      	strb	r2, [r3, #7]
      break;
 8000f76:	e044      	b.n	8001002 <Button_Debounce+0x112>
    
    // Pressed state: Button is pressed (LOW)
    case BUTTON_PRESSED:
      // Check if button is released (HIGH state)
      if (HAL_GPIO_ReadPin(button->gpio_port, button->gpio_pin) != BUTTON_ACTIVE) 
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	889b      	ldrh	r3, [r3, #4]
 8000f80:	4619      	mov	r1, r3
 8000f82:	4610      	mov	r0, r2
 8000f84:	f002 f8f4 	bl	8003170 <HAL_GPIO_ReadPin>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d012      	beq.n	8000fb4 <Button_Debounce+0xc4>
      {
        // Check if press duration is less than hold threshold
        if (HAL_GetTick() - button->start_tick < (BUTTON_HOLD_TH))
 8000f8e:	f001 f97f 	bl	8002290 <HAL_GetTick>
 8000f92:	4602      	mov	r2, r0
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	689b      	ldr	r3, [r3, #8]
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8000f9e:	d202      	bcs.n	8000fa6 <Button_Debounce+0xb6>
        {
          // Set press flag for short press
          button->press_flag = true;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	735a      	strb	r2, [r3, #13]
        }
      
        // Reset interrupt flag and return to released state
        button->int_flag = false;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2200      	movs	r2, #0
 8000faa:	731a      	strb	r2, [r3, #12]

        //button->latch = false;
        button->state = BUTTON_RELEASED;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	71da      	strb	r2, [r3, #7]
      else if ((HAL_GetTick() - button->start_tick >= (BUTTON_HOLD_TH)) && !button->hold_flag)
      {
        // Set hold flag for long press
        button->hold_flag = true;
      }
      break;
 8000fb2:	e028      	b.n	8001006 <Button_Debounce+0x116>
      else if ((HAL_GetTick() - button->start_tick >= (BUTTON_HOLD_TH)) && !button->hold_flag)
 8000fb4:	f001 f96c 	bl	8002290 <HAL_GetTick>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8000fc4:	d31f      	bcc.n	8001006 <Button_Debounce+0x116>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	7b9b      	ldrb	r3, [r3, #14]
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	f083 0301 	eor.w	r3, r3, #1
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d017      	beq.n	8001006 <Button_Debounce+0x116>
        button->hold_flag = true;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2201      	movs	r2, #1
 8000fda:	739a      	strb	r2, [r3, #14]
      break;
 8000fdc:	e013      	b.n	8001006 <Button_Debounce+0x116>

    default:
      // Reset all flags and return to released state
      button->state = BUTTON_RELEASED;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	71da      	strb	r2, [r3, #7]
      button->int_flag = false;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	731a      	strb	r2, [r3, #12]
      button->press_flag = false;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2200      	movs	r2, #0
 8000fee:	735a      	strb	r2, [r3, #13]
      button->hold_flag = false;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	739a      	strb	r2, [r3, #14]
      button->latch = false;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	73da      	strb	r2, [r3, #15]
      break;
 8000ffc:	e004      	b.n	8001008 <Button_Debounce+0x118>
      break;
 8000ffe:	bf00      	nop
 8001000:	e002      	b.n	8001008 <Button_Debounce+0x118>
      break;
 8001002:	bf00      	nop
 8001004:	e000      	b.n	8001008 <Button_Debounce+0x118>
      break;
 8001006:	bf00      	nop
  }
}
 8001008:	bf00      	nop
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <Button_Handle>:
/**
 * @brief  Button interrupt handler function to be called in main loop
 * @retval None
 */
void Button_Handle (void) 
{
 8001010:	b590      	push	{r4, r7, lr}
 8001012:	b087      	sub	sp, #28
 8001014:	af00      	add	r7, sp, #0
  // An empty button variable containing reset values for button pointer initiallization
  BUTTON_DATA buttonReset = {GPIOB, BUTTON0_IN12_Pin, 0, BUTTON_RELEASED, 0, false, false, false, false};
 8001016:	4b5d      	ldr	r3, [pc, #372]	@ (800118c <Button_Handle+0x17c>)
 8001018:	463c      	mov	r4, r7
 800101a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800101c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  // Initially point to an empty button variable
  BUTTON_DATA *button = &buttonReset;
 8001020:	463b      	mov	r3, r7
 8001022:	617b      	str	r3, [r7, #20]

  // Perform button debouncing to filter out noise
  Button_Debounce(&button0);
 8001024:	485a      	ldr	r0, [pc, #360]	@ (8001190 <Button_Handle+0x180>)
 8001026:	f7ff ff63 	bl	8000ef0 <Button_Debounce>
  Button_Debounce(&button1);
 800102a:	485a      	ldr	r0, [pc, #360]	@ (8001194 <Button_Handle+0x184>)
 800102c:	f7ff ff60 	bl	8000ef0 <Button_Debounce>
  Button_Debounce(&button2);
 8001030:	4859      	ldr	r0, [pc, #356]	@ (8001198 <Button_Handle+0x188>)
 8001032:	f7ff ff5d 	bl	8000ef0 <Button_Debounce>
  Button_Debounce(&button3);
 8001036:	4859      	ldr	r0, [pc, #356]	@ (800119c <Button_Handle+0x18c>)
 8001038:	f7ff ff5a 	bl	8000ef0 <Button_Debounce>
  Button_Debounce(&button4);
 800103c:	4858      	ldr	r0, [pc, #352]	@ (80011a0 <Button_Handle+0x190>)
 800103e:	f7ff ff57 	bl	8000ef0 <Button_Debounce>

  // Check which button is pressed or held and assign it to the button pointer
  if      (button0.press_flag || button0.hold_flag) button = &button0;
 8001042:	4b53      	ldr	r3, [pc, #332]	@ (8001190 <Button_Handle+0x180>)
 8001044:	7b5b      	ldrb	r3, [r3, #13]
 8001046:	b2db      	uxtb	r3, r3
 8001048:	2b00      	cmp	r3, #0
 800104a:	d104      	bne.n	8001056 <Button_Handle+0x46>
 800104c:	4b50      	ldr	r3, [pc, #320]	@ (8001190 <Button_Handle+0x180>)
 800104e:	7b9b      	ldrb	r3, [r3, #14]
 8001050:	b2db      	uxtb	r3, r3
 8001052:	2b00      	cmp	r3, #0
 8001054:	d002      	beq.n	800105c <Button_Handle+0x4c>
 8001056:	4b4e      	ldr	r3, [pc, #312]	@ (8001190 <Button_Handle+0x180>)
 8001058:	617b      	str	r3, [r7, #20]
 800105a:	e032      	b.n	80010c2 <Button_Handle+0xb2>
  else if (button1.press_flag || button1.hold_flag) button = &button1;
 800105c:	4b4d      	ldr	r3, [pc, #308]	@ (8001194 <Button_Handle+0x184>)
 800105e:	7b5b      	ldrb	r3, [r3, #13]
 8001060:	b2db      	uxtb	r3, r3
 8001062:	2b00      	cmp	r3, #0
 8001064:	d104      	bne.n	8001070 <Button_Handle+0x60>
 8001066:	4b4b      	ldr	r3, [pc, #300]	@ (8001194 <Button_Handle+0x184>)
 8001068:	7b9b      	ldrb	r3, [r3, #14]
 800106a:	b2db      	uxtb	r3, r3
 800106c:	2b00      	cmp	r3, #0
 800106e:	d002      	beq.n	8001076 <Button_Handle+0x66>
 8001070:	4b48      	ldr	r3, [pc, #288]	@ (8001194 <Button_Handle+0x184>)
 8001072:	617b      	str	r3, [r7, #20]
 8001074:	e025      	b.n	80010c2 <Button_Handle+0xb2>
  else if (button2.press_flag || button2.hold_flag) button = &button2;
 8001076:	4b48      	ldr	r3, [pc, #288]	@ (8001198 <Button_Handle+0x188>)
 8001078:	7b5b      	ldrb	r3, [r3, #13]
 800107a:	b2db      	uxtb	r3, r3
 800107c:	2b00      	cmp	r3, #0
 800107e:	d104      	bne.n	800108a <Button_Handle+0x7a>
 8001080:	4b45      	ldr	r3, [pc, #276]	@ (8001198 <Button_Handle+0x188>)
 8001082:	7b9b      	ldrb	r3, [r3, #14]
 8001084:	b2db      	uxtb	r3, r3
 8001086:	2b00      	cmp	r3, #0
 8001088:	d002      	beq.n	8001090 <Button_Handle+0x80>
 800108a:	4b43      	ldr	r3, [pc, #268]	@ (8001198 <Button_Handle+0x188>)
 800108c:	617b      	str	r3, [r7, #20]
 800108e:	e018      	b.n	80010c2 <Button_Handle+0xb2>
  else if (button3.press_flag || button3.hold_flag) button = &button3;
 8001090:	4b42      	ldr	r3, [pc, #264]	@ (800119c <Button_Handle+0x18c>)
 8001092:	7b5b      	ldrb	r3, [r3, #13]
 8001094:	b2db      	uxtb	r3, r3
 8001096:	2b00      	cmp	r3, #0
 8001098:	d104      	bne.n	80010a4 <Button_Handle+0x94>
 800109a:	4b40      	ldr	r3, [pc, #256]	@ (800119c <Button_Handle+0x18c>)
 800109c:	7b9b      	ldrb	r3, [r3, #14]
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d002      	beq.n	80010aa <Button_Handle+0x9a>
 80010a4:	4b3d      	ldr	r3, [pc, #244]	@ (800119c <Button_Handle+0x18c>)
 80010a6:	617b      	str	r3, [r7, #20]
 80010a8:	e00b      	b.n	80010c2 <Button_Handle+0xb2>
  else if (button4.press_flag || button4.hold_flag) button = &button4;
 80010aa:	4b3d      	ldr	r3, [pc, #244]	@ (80011a0 <Button_Handle+0x190>)
 80010ac:	7b5b      	ldrb	r3, [r3, #13]
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d104      	bne.n	80010be <Button_Handle+0xae>
 80010b4:	4b3a      	ldr	r3, [pc, #232]	@ (80011a0 <Button_Handle+0x190>)
 80010b6:	7b9b      	ldrb	r3, [r3, #14]
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <Button_Handle+0xb2>
 80010be:	4b38      	ldr	r3, [pc, #224]	@ (80011a0 <Button_Handle+0x190>)
 80010c0:	617b      	str	r3, [r7, #20]
  

  // Initialize the start tick for button hold detection
  uint32_t startTick = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	613b      	str	r3, [r7, #16]
  
  // Debugging: Check if the button is pressed or held by increment its counter in activation
  if (button->press_flag)
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	7b5b      	ldrb	r3, [r3, #13]
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d009      	beq.n	80010e4 <Button_Handle+0xd4>
  {
    // Increment the debug counter for the button
    debug_button_counter[button->index]++;
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	799b      	ldrb	r3, [r3, #6]
 80010d4:	4a33      	ldr	r2, [pc, #204]	@ (80011a4 <Button_Handle+0x194>)
 80010d6:	5cd2      	ldrb	r2, [r2, r3]
 80010d8:	b2d2      	uxtb	r2, r2
 80010da:	3201      	adds	r2, #1
 80010dc:	b2d1      	uxtb	r1, r2
 80010de:	4a31      	ldr	r2, [pc, #196]	@ (80011a4 <Button_Handle+0x194>)
 80010e0:	54d1      	strb	r1, [r2, r3]
 80010e2:	e017      	b.n	8001114 <Button_Handle+0x104>
  }
  else if (button->hold_flag)
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	7b9b      	ldrb	r3, [r3, #14]
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d012      	beq.n	8001114 <Button_Handle+0x104>
  {
    // Check if the button is held down for a certain duration
    if (HAL_GetTick() - startTick >= BUTTON_HOLD_CYCLE) 
 80010ee:	f001 f8cf 	bl	8002290 <HAL_GetTick>
 80010f2:	4602      	mov	r2, r0
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	2bf9      	cmp	r3, #249	@ 0xf9
 80010fa:	d90b      	bls.n	8001114 <Button_Handle+0x104>
    {
      // Increment the debug counter for the button
      debug_button_counter[button->index]++;
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	799b      	ldrb	r3, [r3, #6]
 8001100:	4a28      	ldr	r2, [pc, #160]	@ (80011a4 <Button_Handle+0x194>)
 8001102:	5cd2      	ldrb	r2, [r2, r3]
 8001104:	b2d2      	uxtb	r2, r2
 8001106:	3201      	adds	r2, #1
 8001108:	b2d1      	uxtb	r1, r2
 800110a:	4a26      	ldr	r2, [pc, #152]	@ (80011a4 <Button_Handle+0x194>)
 800110c:	54d1      	strb	r1, [r2, r3]

      // Reset the start tick for the next hold cycle
      startTick = HAL_GetTick();
 800110e:	f001 f8bf 	bl	8002290 <HAL_GetTick>
 8001112:	6138      	str	r0, [r7, #16]
    }
  }

  // Check if the button is pressed or held
  if (button->press_flag || button->hold_flag) 
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	7b5b      	ldrb	r3, [r3, #13]
 8001118:	b2db      	uxtb	r3, r3
 800111a:	2b00      	cmp	r3, #0
 800111c:	d104      	bne.n	8001128 <Button_Handle+0x118>
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	7b9b      	ldrb	r3, [r3, #14]
 8001122:	b2db      	uxtb	r3, r3
 8001124:	2b00      	cmp	r3, #0
 8001126:	d02c      	beq.n	8001182 <Button_Handle+0x172>
  {
    // Handle button actions based on the current system mode
    switch (system_state.mode) 
 8001128:	4b1f      	ldr	r3, [pc, #124]	@ (80011a8 <Button_Handle+0x198>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b05      	cmp	r3, #5
 800112e:	d827      	bhi.n	8001180 <Button_Handle+0x170>
 8001130:	a201      	add	r2, pc, #4	@ (adr r2, 8001138 <Button_Handle+0x128>)
 8001132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001136:	bf00      	nop
 8001138:	08001151 	.word	0x08001151
 800113c:	08001159 	.word	0x08001159
 8001140:	08001161 	.word	0x08001161
 8001144:	08001169 	.word	0x08001169
 8001148:	08001171 	.word	0x08001171
 800114c:	08001179 	.word	0x08001179
    {
      case DEFAULT_MODE: 
        System_Default_Mode_Handle (button);
 8001150:	6978      	ldr	r0, [r7, #20]
 8001152:	f000 f82b 	bl	80011ac <System_Default_Mode_Handle>
        break;
 8001156:	e014      	b.n	8001182 <Button_Handle+0x172>

      case TIME_SETUP_MODE: 
        System_Time_Setup_Mode_Handle (button);
 8001158:	6978      	ldr	r0, [r7, #20]
 800115a:	f000 f8b1 	bl	80012c0 <System_Time_Setup_Mode_Handle>
        break;
 800115e:	e010      	b.n	8001182 <Button_Handle+0x172>
      
      case ALARM_SETUP_MODE: 
        System_Alarm_Setup_Mode_Handle (button);
 8001160:	6978      	ldr	r0, [r7, #20]
 8001162:	f000 f9ed 	bl	8001540 <System_Alarm_Setup_Mode_Handle>
        break;
 8001166:	e00c      	b.n	8001182 <Button_Handle+0x172>

      case ALARM_VIEW_MODE: 
        System_Alarm_View_Mode_Handle (button);
 8001168:	6978      	ldr	r0, [r7, #20]
 800116a:	f000 fb7d 	bl	8001868 <System_Alarm_View_Mode_Handle>
        break;
 800116e:	e008      	b.n	8001182 <Button_Handle+0x172>

      case ALARM_ACTIVE_MODE: 
        System_Alarm_Active_Mode_Handle (button);
 8001170:	6978      	ldr	r0, [r7, #20]
 8001172:	f000 fd3d 	bl	8001bf0 <System_Alarm_Active_Mode_Handle>
        break;
 8001176:	e004      	b.n	8001182 <Button_Handle+0x172>

      case SYSTEM_OPTIONS_MODE:
        System_Options_Mode_Handle (button);
 8001178:	6978      	ldr	r0, [r7, #20]
 800117a:	f000 fca5 	bl	8001ac8 <System_Options_Mode_Handle>
        break;
 800117e:	e000      	b.n	8001182 <Button_Handle+0x172>

      default:
        break;
 8001180:	bf00      	nop
    }
  }
}
 8001182:	bf00      	nop
 8001184:	371c      	adds	r7, #28
 8001186:	46bd      	mov	sp, r7
 8001188:	bd90      	pop	{r4, r7, pc}
 800118a:	bf00      	nop
 800118c:	080058e0 	.word	0x080058e0
 8001190:	20000000 	.word	0x20000000
 8001194:	20000010 	.word	0x20000010
 8001198:	20000020 	.word	0x20000020
 800119c:	20000030 	.word	0x20000030
 80011a0:	20000040 	.word	0x20000040
 80011a4:	20000160 	.word	0x20000160
 80011a8:	200000fc 	.word	0x200000fc

080011ac <System_Default_Mode_Handle>:
 * @brief  Handles the default system mode based on button actions.
 * @param  button: Pointer to the BUTTON_DATA structure containing button state and index.
 * @retval None
 */
void System_Default_Mode_Handle (BUTTON_DATA *button)
{
 80011ac:	b4f0      	push	{r4, r5, r6, r7}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  switch (button->index) 
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	799b      	ldrb	r3, [r3, #6]
 80011b8:	2b04      	cmp	r3, #4
 80011ba:	d86a      	bhi.n	8001292 <System_Default_Mode_Handle+0xe6>
 80011bc:	a201      	add	r2, pc, #4	@ (adr r2, 80011c4 <System_Default_Mode_Handle+0x18>)
 80011be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011c2:	bf00      	nop
 80011c4:	080011d9 	.word	0x080011d9
 80011c8:	080011e9 	.word	0x080011e9
 80011cc:	080011f9 	.word	0x080011f9
 80011d0:	08001209 	.word	0x08001209
 80011d4:	08001219 	.word	0x08001219
  {
    // Button 0: Reserved for future use
    case 0:
      if (button->press_flag)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	7b5b      	ldrb	r3, [r3, #13]
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d159      	bne.n	8001296 <System_Default_Mode_Handle+0xea>
      {
        // Reserved
      }
      else if (button->hold_flag)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	7b9b      	ldrb	r3, [r3, #14]
      {
        // Reserved
      }
      break;
 80011e6:	e056      	b.n	8001296 <System_Default_Mode_Handle+0xea>
    
    // Button 1: Reserved for future use
    case 1: 
      if (button->press_flag)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	7b5b      	ldrb	r3, [r3, #13]
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d153      	bne.n	800129a <System_Default_Mode_Handle+0xee>
      {
        // Reserved
      }
      else if (button->hold_flag)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	7b9b      	ldrb	r3, [r3, #14]
      {
        // Reserved
      }
      break;
 80011f6:	e050      	b.n	800129a <System_Default_Mode_Handle+0xee>

    // Button 2: If pressed, do nothing (reserved for future use); if held, do nothing (reserved for future use)
    case 2: 
      if (button->press_flag) 
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	7b5b      	ldrb	r3, [r3, #13]
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d14d      	bne.n	800129e <System_Default_Mode_Handle+0xf2>
      {
        // Reserved
      }
      else if (button->hold_flag)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	7b9b      	ldrb	r3, [r3, #14]
      {
        // Reserved
      }
      break;
 8001206:	e04a      	b.n	800129e <System_Default_Mode_Handle+0xf2>
    
    // Button 3: If pressed, do nothing (reserved for future use); if held, do nothing (reserved for future use)
    case 3:
      if (button->press_flag)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	7b5b      	ldrb	r3, [r3, #13]
 800120c:	b2db      	uxtb	r3, r3
 800120e:	2b00      	cmp	r3, #0
 8001210:	d147      	bne.n	80012a2 <System_Default_Mode_Handle+0xf6>
      {
        // Reserved
      }
      else if (button->hold_flag)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	7b9b      	ldrb	r3, [r3, #14]
      {
        // Reserved
      }
      break;
 8001216:	e044      	b.n	80012a2 <System_Default_Mode_Handle+0xf6>

    // Button 4: If pressed, cycle through the modes; if held, do nothing (reserved for future use)
    case 4:
      if (button->press_flag || (button->hold_flag && !button->latch))
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	7b5b      	ldrb	r3, [r3, #13]
 800121c:	b2db      	uxtb	r3, r3
 800121e:	2b00      	cmp	r3, #0
 8001220:	d10c      	bne.n	800123c <System_Default_Mode_Handle+0x90>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	7b9b      	ldrb	r3, [r3, #14]
 8001226:	b2db      	uxtb	r3, r3
 8001228:	2b00      	cmp	r3, #0
 800122a:	d03c      	beq.n	80012a6 <System_Default_Mode_Handle+0xfa>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	7bdb      	ldrb	r3, [r3, #15]
 8001230:	b2db      	uxtb	r3, r3
 8001232:	f083 0301 	eor.w	r3, r3, #1
 8001236:	b2db      	uxtb	r3, r3
 8001238:	2b00      	cmp	r3, #0
 800123a:	d034      	beq.n	80012a6 <System_Default_Mode_Handle+0xfa>
      {
        // system_state.mode = (system_state.mode < (SYSTEM_MODE_NUM - 1)) ? (system_state.mode + 1) : 0;

        // Cycle to the next mode in the system state
        system_state.mode = TIME_SETUP_MODE;
 800123c:	4b1d      	ldr	r3, [pc, #116]	@ (80012b4 <System_Default_Mode_Handle+0x108>)
 800123e:	2201      	movs	r2, #1
 8001240:	701a      	strb	r2, [r3, #0]

        // Set the system past mode to default mode
        system_state.past_mode = DEFAULT_MODE;
 8001242:	4b1c      	ldr	r3, [pc, #112]	@ (80012b4 <System_Default_Mode_Handle+0x108>)
 8001244:	2200      	movs	r2, #0
 8001246:	705a      	strb	r2, [r3, #1]

        // Set the Time Setup data to the current time values for convinience
        time_setup_data =
        (TIME_SETUP_DATA)
        {
          time_get_data.minute,       // Minutes: 0-59
 8001248:	4b1b      	ldr	r3, [pc, #108]	@ (80012b8 <System_Default_Mode_Handle+0x10c>)
 800124a:	785b      	ldrb	r3, [r3, #1]
 800124c:	b2de      	uxtb	r6, r3
          time_get_data.hour,         // Hours: 0-23
 800124e:	4b1a      	ldr	r3, [pc, #104]	@ (80012b8 <System_Default_Mode_Handle+0x10c>)
 8001250:	789b      	ldrb	r3, [r3, #2]
 8001252:	b2dd      	uxtb	r5, r3
          time_get_data.dayofweek,    // Day of the week: 1-7 (1 = Sunday, 2 = Monday, ..., 7 = Saturday)
 8001254:	4b18      	ldr	r3, [pc, #96]	@ (80012b8 <System_Default_Mode_Handle+0x10c>)
 8001256:	78db      	ldrb	r3, [r3, #3]
 8001258:	b2dc      	uxtb	r4, r3
          time_get_data.dateofmonth,  // Date of the month: 1-31
 800125a:	4b17      	ldr	r3, [pc, #92]	@ (80012b8 <System_Default_Mode_Handle+0x10c>)
 800125c:	791b      	ldrb	r3, [r3, #4]
 800125e:	b2d8      	uxtb	r0, r3
          time_get_data.month,        // Month: 1-12
 8001260:	4b15      	ldr	r3, [pc, #84]	@ (80012b8 <System_Default_Mode_Handle+0x10c>)
 8001262:	795b      	ldrb	r3, [r3, #5]
 8001264:	b2d9      	uxtb	r1, r3
          time_get_data.year          // Year: 0-99 (0 = 2000, 1 = 2001, ..., 99 = 2099)
 8001266:	4b14      	ldr	r3, [pc, #80]	@ (80012b8 <System_Default_Mode_Handle+0x10c>)
 8001268:	799b      	ldrb	r3, [r3, #6]
 800126a:	b2da      	uxtb	r2, r3
        time_setup_data =
 800126c:	4b13      	ldr	r3, [pc, #76]	@ (80012bc <System_Default_Mode_Handle+0x110>)
 800126e:	701e      	strb	r6, [r3, #0]
 8001270:	4b12      	ldr	r3, [pc, #72]	@ (80012bc <System_Default_Mode_Handle+0x110>)
 8001272:	705d      	strb	r5, [r3, #1]
 8001274:	4b11      	ldr	r3, [pc, #68]	@ (80012bc <System_Default_Mode_Handle+0x110>)
 8001276:	709c      	strb	r4, [r3, #2]
 8001278:	4b10      	ldr	r3, [pc, #64]	@ (80012bc <System_Default_Mode_Handle+0x110>)
 800127a:	70d8      	strb	r0, [r3, #3]
 800127c:	4b0f      	ldr	r3, [pc, #60]	@ (80012bc <System_Default_Mode_Handle+0x110>)
 800127e:	7119      	strb	r1, [r3, #4]
 8001280:	4b0e      	ldr	r3, [pc, #56]	@ (80012bc <System_Default_Mode_Handle+0x110>)
 8001282:	715a      	strb	r2, [r3, #5]
        };

        // Reset the cursor for the Time Setup mode to the first parameter (minute)
        system_state.time_setup_cursor = TIME_MINUTE;
 8001284:	4b0b      	ldr	r3, [pc, #44]	@ (80012b4 <System_Default_Mode_Handle+0x108>)
 8001286:	2200      	movs	r2, #0
 8001288:	709a      	strb	r2, [r3, #2]

        button->latch = true;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2201      	movs	r2, #1
 800128e:	73da      	strb	r2, [r3, #15]
      }
      // else if (button->hold_flag)
      // {
      //   // Reserved
      // }
      break;
 8001290:	e009      	b.n	80012a6 <System_Default_Mode_Handle+0xfa>

    default: 
      break;
 8001292:	bf00      	nop
 8001294:	e008      	b.n	80012a8 <System_Default_Mode_Handle+0xfc>
      break;
 8001296:	bf00      	nop
 8001298:	e006      	b.n	80012a8 <System_Default_Mode_Handle+0xfc>
      break;
 800129a:	bf00      	nop
 800129c:	e004      	b.n	80012a8 <System_Default_Mode_Handle+0xfc>
      break;
 800129e:	bf00      	nop
 80012a0:	e002      	b.n	80012a8 <System_Default_Mode_Handle+0xfc>
      break;
 80012a2:	bf00      	nop
 80012a4:	e000      	b.n	80012a8 <System_Default_Mode_Handle+0xfc>
      break;
 80012a6:	bf00      	nop
  }
}
 80012a8:	bf00      	nop
 80012aa:	3710      	adds	r7, #16
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bcf0      	pop	{r4, r5, r6, r7}
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	200000fc 	.word	0x200000fc
 80012b8:	20000114 	.word	0x20000114
 80012bc:	20000104 	.word	0x20000104

080012c0 <System_Time_Setup_Mode_Handle>:
 * @brief  Handles the time setup mode based on button actions.
 * @param  button: Pointer to the BUTTON structure containing button state and index.
 * @retval None
 */
void System_Time_Setup_Mode_Handle (BUTTON_DATA *button)
{
 80012c0:	b5b0      	push	{r4, r5, r7, lr}
 80012c2:	b08c      	sub	sp, #48	@ 0x30
 80012c4:	af04      	add	r7, sp, #16
 80012c6:	6078      	str	r0, [r7, #4]
  switch (button->index) 
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	799b      	ldrb	r3, [r3, #6]
 80012cc:	2b04      	cmp	r3, #4
 80012ce:	f200 8118 	bhi.w	8001502 <System_Time_Setup_Mode_Handle+0x242>
 80012d2:	a201      	add	r2, pc, #4	@ (adr r2, 80012d8 <System_Time_Setup_Mode_Handle+0x18>)
 80012d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012d8:	080012ed 	.word	0x080012ed
 80012dc:	080013a7 	.word	0x080013a7
 80012e0:	0800145b 	.word	0x0800145b
 80012e4:	08001497 	.word	0x08001497
 80012e8:	080014bb 	.word	0x080014bb
  {
    // Button 0: If pressed, increment the selected parameter; if held, do nothing (reserved for future use)
    case 0: 
      // Pointer to the selected parameter, its maximum value, and minimum value
      uint8_t *paramPtr1 = NULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	61fb      	str	r3, [r7, #28]
      uint8_t maxValue1 = 0;    
 80012f0:	2300      	movs	r3, #0
 80012f2:	76fb      	strb	r3, [r7, #27]
      uint8_t minValue1 = 0;  
 80012f4:	2300      	movs	r3, #0
 80012f6:	76bb      	strb	r3, [r7, #26]

      // Determine the parameter to increment based on the current selection
      switch (system_state.time_setup_cursor)
 80012f8:	4b88      	ldr	r3, [pc, #544]	@ (800151c <System_Time_Setup_Mode_Handle+0x25c>)
 80012fa:	789b      	ldrb	r3, [r3, #2]
 80012fc:	2b05      	cmp	r3, #5
 80012fe:	d839      	bhi.n	8001374 <System_Time_Setup_Mode_Handle+0xb4>
 8001300:	a201      	add	r2, pc, #4	@ (adr r2, 8001308 <System_Time_Setup_Mode_Handle+0x48>)
 8001302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001306:	bf00      	nop
 8001308:	08001321 	.word	0x08001321
 800130c:	0800132f 	.word	0x0800132f
 8001310:	0800133d 	.word	0x0800133d
 8001314:	0800134b 	.word	0x0800134b
 8001318:	08001359 	.word	0x08001359
 800131c:	08001367 	.word	0x08001367
      {
        case TIME_MINUTE:  paramPtr1 = &time_setup_data.minute;  maxValue1 = 59; minValue1 = 0; break;
 8001320:	4b7f      	ldr	r3, [pc, #508]	@ (8001520 <System_Time_Setup_Mode_Handle+0x260>)
 8001322:	61fb      	str	r3, [r7, #28]
 8001324:	233b      	movs	r3, #59	@ 0x3b
 8001326:	76fb      	strb	r3, [r7, #27]
 8001328:	2300      	movs	r3, #0
 800132a:	76bb      	strb	r3, [r7, #26]
 800132c:	e023      	b.n	8001376 <System_Time_Setup_Mode_Handle+0xb6>
        case TIME_HOUR:    paramPtr1 = &time_setup_data.hour;    maxValue1 = 23; minValue1 = 0; break;
 800132e:	4b7d      	ldr	r3, [pc, #500]	@ (8001524 <System_Time_Setup_Mode_Handle+0x264>)
 8001330:	61fb      	str	r3, [r7, #28]
 8001332:	2317      	movs	r3, #23
 8001334:	76fb      	strb	r3, [r7, #27]
 8001336:	2300      	movs	r3, #0
 8001338:	76bb      	strb	r3, [r7, #26]
 800133a:	e01c      	b.n	8001376 <System_Time_Setup_Mode_Handle+0xb6>
        case TIME_DOW:     paramPtr1 = &time_setup_data.dow;     maxValue1 = 7;  minValue1 = 1; break;
 800133c:	4b7a      	ldr	r3, [pc, #488]	@ (8001528 <System_Time_Setup_Mode_Handle+0x268>)
 800133e:	61fb      	str	r3, [r7, #28]
 8001340:	2307      	movs	r3, #7
 8001342:	76fb      	strb	r3, [r7, #27]
 8001344:	2301      	movs	r3, #1
 8001346:	76bb      	strb	r3, [r7, #26]
 8001348:	e015      	b.n	8001376 <System_Time_Setup_Mode_Handle+0xb6>
        case TIME_DOM:     paramPtr1 = &time_setup_data.dom;     maxValue1 = 31; minValue1 = 1; break;
 800134a:	4b78      	ldr	r3, [pc, #480]	@ (800152c <System_Time_Setup_Mode_Handle+0x26c>)
 800134c:	61fb      	str	r3, [r7, #28]
 800134e:	231f      	movs	r3, #31
 8001350:	76fb      	strb	r3, [r7, #27]
 8001352:	2301      	movs	r3, #1
 8001354:	76bb      	strb	r3, [r7, #26]
 8001356:	e00e      	b.n	8001376 <System_Time_Setup_Mode_Handle+0xb6>
        case TIME_MONTH:   paramPtr1 = &time_setup_data.month;   maxValue1 = 12; minValue1 = 1; break;
 8001358:	4b75      	ldr	r3, [pc, #468]	@ (8001530 <System_Time_Setup_Mode_Handle+0x270>)
 800135a:	61fb      	str	r3, [r7, #28]
 800135c:	230c      	movs	r3, #12
 800135e:	76fb      	strb	r3, [r7, #27]
 8001360:	2301      	movs	r3, #1
 8001362:	76bb      	strb	r3, [r7, #26]
 8001364:	e007      	b.n	8001376 <System_Time_Setup_Mode_Handle+0xb6>
        case TIME_YEAR:    paramPtr1 = &time_setup_data.year;    maxValue1 = 99; minValue1 = 0; break;
 8001366:	4b73      	ldr	r3, [pc, #460]	@ (8001534 <System_Time_Setup_Mode_Handle+0x274>)
 8001368:	61fb      	str	r3, [r7, #28]
 800136a:	2363      	movs	r3, #99	@ 0x63
 800136c:	76fb      	strb	r3, [r7, #27]
 800136e:	2300      	movs	r3, #0
 8001370:	76bb      	strb	r3, [r7, #26]
 8001372:	e000      	b.n	8001376 <System_Time_Setup_Mode_Handle+0xb6>
        default: break;
 8001374:	bf00      	nop
      }

      // Check if the button is pressed or held
      if (button->press_flag) 
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	7b5b      	ldrb	r3, [r3, #13]
 800137a:	b2db      	uxtb	r3, r3
 800137c:	2b00      	cmp	r3, #0
 800137e:	f000 80c2 	beq.w	8001506 <System_Time_Setup_Mode_Handle+0x246>
      {
        // Increment the selected parameter value once for a button press
        if (paramPtr1) 
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	2b00      	cmp	r3, #0
 8001386:	f000 80be 	beq.w	8001506 <System_Time_Setup_Mode_Handle+0x246>
        {
          // Increment the parameter value, wrapping around if necessary
          *paramPtr1 = (*paramPtr1 < maxValue1) ? (*paramPtr1 + 1) : minValue1;
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	7efa      	ldrb	r2, [r7, #27]
 8001390:	429a      	cmp	r2, r3
 8001392:	d904      	bls.n	800139e <System_Time_Setup_Mode_Handle+0xde>
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	3301      	adds	r3, #1
 800139a:	b2db      	uxtb	r3, r3
 800139c:	e000      	b.n	80013a0 <System_Time_Setup_Mode_Handle+0xe0>
 800139e:	7ebb      	ldrb	r3, [r7, #26]
 80013a0:	69fa      	ldr	r2, [r7, #28]
 80013a2:	7013      	strb	r3, [r2, #0]

      //     // Update the start tick for the next hold cycle
      //     startTick1 = HAL_GetTick();
      //   }
      // } 
      break;
 80013a4:	e0af      	b.n	8001506 <System_Time_Setup_Mode_Handle+0x246>
    
      // Button 1: If pressed, decrement the selected parameter; if held, do nothing (reserved for future use)
      case 1: 
        // Pointer to the selected parameter, its maximum value, and minimum value
        uint8_t *paramPtr2 = NULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	617b      	str	r3, [r7, #20]
        uint8_t maxValue2 = 0;    
 80013aa:	2300      	movs	r3, #0
 80013ac:	74fb      	strb	r3, [r7, #19]
        uint8_t minValue2 = 0;  
 80013ae:	2300      	movs	r3, #0
 80013b0:	74bb      	strb	r3, [r7, #18]

        // Determine the parameter to decrement based on the current selection
        switch (system_state.time_setup_cursor)
 80013b2:	4b5a      	ldr	r3, [pc, #360]	@ (800151c <System_Time_Setup_Mode_Handle+0x25c>)
 80013b4:	789b      	ldrb	r3, [r3, #2]
 80013b6:	2b05      	cmp	r3, #5
 80013b8:	d838      	bhi.n	800142c <System_Time_Setup_Mode_Handle+0x16c>
 80013ba:	a201      	add	r2, pc, #4	@ (adr r2, 80013c0 <System_Time_Setup_Mode_Handle+0x100>)
 80013bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013c0:	080013d9 	.word	0x080013d9
 80013c4:	080013e7 	.word	0x080013e7
 80013c8:	080013f5 	.word	0x080013f5
 80013cc:	08001403 	.word	0x08001403
 80013d0:	08001411 	.word	0x08001411
 80013d4:	0800141f 	.word	0x0800141f
        {
          case TIME_MINUTE:  paramPtr2 = &time_setup_data.minute;  maxValue2 = 59; minValue2 = 0; break;
 80013d8:	4b51      	ldr	r3, [pc, #324]	@ (8001520 <System_Time_Setup_Mode_Handle+0x260>)
 80013da:	617b      	str	r3, [r7, #20]
 80013dc:	233b      	movs	r3, #59	@ 0x3b
 80013de:	74fb      	strb	r3, [r7, #19]
 80013e0:	2300      	movs	r3, #0
 80013e2:	74bb      	strb	r3, [r7, #18]
 80013e4:	e023      	b.n	800142e <System_Time_Setup_Mode_Handle+0x16e>
          case TIME_HOUR:    paramPtr2 = &time_setup_data.hour;    maxValue2 = 23; minValue2 = 0; break;
 80013e6:	4b4f      	ldr	r3, [pc, #316]	@ (8001524 <System_Time_Setup_Mode_Handle+0x264>)
 80013e8:	617b      	str	r3, [r7, #20]
 80013ea:	2317      	movs	r3, #23
 80013ec:	74fb      	strb	r3, [r7, #19]
 80013ee:	2300      	movs	r3, #0
 80013f0:	74bb      	strb	r3, [r7, #18]
 80013f2:	e01c      	b.n	800142e <System_Time_Setup_Mode_Handle+0x16e>
          case TIME_DOW:     paramPtr2 = &time_setup_data.dow;     maxValue2 = 7;  minValue2 = 1; break;
 80013f4:	4b4c      	ldr	r3, [pc, #304]	@ (8001528 <System_Time_Setup_Mode_Handle+0x268>)
 80013f6:	617b      	str	r3, [r7, #20]
 80013f8:	2307      	movs	r3, #7
 80013fa:	74fb      	strb	r3, [r7, #19]
 80013fc:	2301      	movs	r3, #1
 80013fe:	74bb      	strb	r3, [r7, #18]
 8001400:	e015      	b.n	800142e <System_Time_Setup_Mode_Handle+0x16e>
          case TIME_DOM:     paramPtr2 = &time_setup_data.dom;     maxValue2 = 31; minValue2 = 1; break;
 8001402:	4b4a      	ldr	r3, [pc, #296]	@ (800152c <System_Time_Setup_Mode_Handle+0x26c>)
 8001404:	617b      	str	r3, [r7, #20]
 8001406:	231f      	movs	r3, #31
 8001408:	74fb      	strb	r3, [r7, #19]
 800140a:	2301      	movs	r3, #1
 800140c:	74bb      	strb	r3, [r7, #18]
 800140e:	e00e      	b.n	800142e <System_Time_Setup_Mode_Handle+0x16e>
          case TIME_MONTH:   paramPtr2 = &time_setup_data.month;   maxValue2 = 12; minValue2 = 1; break;
 8001410:	4b47      	ldr	r3, [pc, #284]	@ (8001530 <System_Time_Setup_Mode_Handle+0x270>)
 8001412:	617b      	str	r3, [r7, #20]
 8001414:	230c      	movs	r3, #12
 8001416:	74fb      	strb	r3, [r7, #19]
 8001418:	2301      	movs	r3, #1
 800141a:	74bb      	strb	r3, [r7, #18]
 800141c:	e007      	b.n	800142e <System_Time_Setup_Mode_Handle+0x16e>
          case TIME_YEAR:    paramPtr2 = &time_setup_data.year;    maxValue2 = 99; minValue2 = 0; break;
 800141e:	4b45      	ldr	r3, [pc, #276]	@ (8001534 <System_Time_Setup_Mode_Handle+0x274>)
 8001420:	617b      	str	r3, [r7, #20]
 8001422:	2363      	movs	r3, #99	@ 0x63
 8001424:	74fb      	strb	r3, [r7, #19]
 8001426:	2300      	movs	r3, #0
 8001428:	74bb      	strb	r3, [r7, #18]
 800142a:	e000      	b.n	800142e <System_Time_Setup_Mode_Handle+0x16e>
          default: break;
 800142c:	bf00      	nop
        }

        // Check if the button is pressed or held
        if (button->press_flag) 
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	7b5b      	ldrb	r3, [r3, #13]
 8001432:	b2db      	uxtb	r3, r3
 8001434:	2b00      	cmp	r3, #0
 8001436:	d068      	beq.n	800150a <System_Time_Setup_Mode_Handle+0x24a>
        {
          // Decrement the selected parameter value once for a button press
          if (paramPtr2) 
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d065      	beq.n	800150a <System_Time_Setup_Mode_Handle+0x24a>
          {
            // Decrement the parameter value, wrapping around if necessary
            *paramPtr2 = (*paramPtr2 > minValue2) ? (*paramPtr2 - 1) : maxValue2;
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	7cba      	ldrb	r2, [r7, #18]
 8001444:	429a      	cmp	r2, r3
 8001446:	d204      	bcs.n	8001452 <System_Time_Setup_Mode_Handle+0x192>
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	3b01      	subs	r3, #1
 800144e:	b2db      	uxtb	r3, r3
 8001450:	e000      	b.n	8001454 <System_Time_Setup_Mode_Handle+0x194>
 8001452:	7cfb      	ldrb	r3, [r7, #19]
 8001454:	697a      	ldr	r2, [r7, #20]
 8001456:	7013      	strb	r3, [r2, #0]

        //     // Update the start tick for the next hold cycle
        //     startTick2 = HAL_GetTick();
        //   }
        // } 
        break;
 8001458:	e057      	b.n	800150a <System_Time_Setup_Mode_Handle+0x24a>

    // Button 2: If pressed, set the time using the current parameter values; if held, do nothing (reserved for future use)
    case 2: 
      // If the button is pressed, move to the previous parameter field, wrapping around if necessary
      if (button->press_flag)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	7b5b      	ldrb	r3, [r3, #13]
 800145e:	b2db      	uxtb	r3, r3
 8001460:	2b00      	cmp	r3, #0
 8001462:	d015      	beq.n	8001490 <System_Time_Setup_Mode_Handle+0x1d0>
      {
        // Set the time using the current parameter values
        Time_Init
 8001464:	4b2e      	ldr	r3, [pc, #184]	@ (8001520 <System_Time_Setup_Mode_Handle+0x260>)
 8001466:	7818      	ldrb	r0, [r3, #0]
 8001468:	4b2d      	ldr	r3, [pc, #180]	@ (8001520 <System_Time_Setup_Mode_Handle+0x260>)
 800146a:	785c      	ldrb	r4, [r3, #1]
 800146c:	4b2c      	ldr	r3, [pc, #176]	@ (8001520 <System_Time_Setup_Mode_Handle+0x260>)
 800146e:	789d      	ldrb	r5, [r3, #2]
 8001470:	4b2b      	ldr	r3, [pc, #172]	@ (8001520 <System_Time_Setup_Mode_Handle+0x260>)
 8001472:	78db      	ldrb	r3, [r3, #3]
 8001474:	4a2a      	ldr	r2, [pc, #168]	@ (8001520 <System_Time_Setup_Mode_Handle+0x260>)
 8001476:	7912      	ldrb	r2, [r2, #4]
 8001478:	4929      	ldr	r1, [pc, #164]	@ (8001520 <System_Time_Setup_Mode_Handle+0x260>)
 800147a:	7949      	ldrb	r1, [r1, #5]
 800147c:	9102      	str	r1, [sp, #8]
 800147e:	9201      	str	r2, [sp, #4]
 8001480:	9300      	str	r3, [sp, #0]
 8001482:	462b      	mov	r3, r5
 8001484:	4622      	mov	r2, r4
 8001486:	4601      	mov	r1, r0
 8001488:	2000      	movs	r0, #0
 800148a:	f7ff fae3 	bl	8000a54 <Time_Init>
      // If the button is held down, do nothing (reserved for future use)
      else if (button->hold_flag) 
      {
        // Reserved
      }
      break;
 800148e:	e041      	b.n	8001514 <System_Time_Setup_Mode_Handle+0x254>
      else if (button->hold_flag) 
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	7b9b      	ldrb	r3, [r3, #14]
      break;
 8001494:	e03e      	b.n	8001514 <System_Time_Setup_Mode_Handle+0x254>

    // Button 3: If pressed, move to the next field; if held, do nothing (reserved for future use)
    case 3: 
      // If the button is pressed, move to the next parameter field, wrapping around if necessary
      if(button->press_flag)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	7b5b      	ldrb	r3, [r3, #13]
 800149a:	b2db      	uxtb	r3, r3
 800149c:	2b00      	cmp	r3, #0
 800149e:	d036      	beq.n	800150e <System_Time_Setup_Mode_Handle+0x24e>
      {
        system_state.time_setup_cursor = (system_state.time_setup_cursor == TIME_YEAR) ? TIME_MINUTE : (system_state.time_setup_cursor + 1);
 80014a0:	4b1e      	ldr	r3, [pc, #120]	@ (800151c <System_Time_Setup_Mode_Handle+0x25c>)
 80014a2:	789b      	ldrb	r3, [r3, #2]
 80014a4:	2b05      	cmp	r3, #5
 80014a6:	d004      	beq.n	80014b2 <System_Time_Setup_Mode_Handle+0x1f2>
 80014a8:	4b1c      	ldr	r3, [pc, #112]	@ (800151c <System_Time_Setup_Mode_Handle+0x25c>)
 80014aa:	789b      	ldrb	r3, [r3, #2]
 80014ac:	3301      	adds	r3, #1
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	e000      	b.n	80014b4 <System_Time_Setup_Mode_Handle+0x1f4>
 80014b2:	2300      	movs	r3, #0
 80014b4:	4a19      	ldr	r2, [pc, #100]	@ (800151c <System_Time_Setup_Mode_Handle+0x25c>)
 80014b6:	7093      	strb	r3, [r2, #2]
      //     system_param_data.month, 
      //     system_param_data.year
      //   );

      //   button->latch = true
      break;
 80014b8:	e029      	b.n	800150e <System_Time_Setup_Mode_Handle+0x24e>

    // Button 4: If pressed, cycle through the system modes; if held, do nothing (reserved for future use)
    case 4:
      // If pressed, cycle through the time system modes, but the temporary setting data is still retained (avoid accidental press)
      if (button->press_flag)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	7b5b      	ldrb	r3, [r3, #13]
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d026      	beq.n	8001512 <System_Time_Setup_Mode_Handle+0x252>
      {
        // system_state.mode = (system_state.mode < (SYSTEM_MODE_NUM - 1)) ? (system_state.mode + 1) : 0;

        // Cycle through the next system mode
        system_state.mode = ALARM_SETUP_MODE;
 80014c4:	4b15      	ldr	r3, [pc, #84]	@ (800151c <System_Time_Setup_Mode_Handle+0x25c>)
 80014c6:	2202      	movs	r2, #2
 80014c8:	701a      	strb	r2, [r3, #0]

        // Set the system past mode to time setup mode
        system_state.past_mode = TIME_SETUP_MODE;
 80014ca:	4b14      	ldr	r3, [pc, #80]	@ (800151c <System_Time_Setup_Mode_Handle+0x25c>)
 80014cc:	2201      	movs	r2, #1
 80014ce:	705a      	strb	r2, [r3, #1]

        // Set the Alarm Setup data to the current time values for convenience
        alarm_setup_data =
        (ALARM_SETUP_DATA)
        {
          time_get_data.minute,       // Minutes: 0-59
 80014d0:	4b19      	ldr	r3, [pc, #100]	@ (8001538 <System_Time_Setup_Mode_Handle+0x278>)
 80014d2:	785b      	ldrb	r3, [r3, #1]
 80014d4:	b2d8      	uxtb	r0, r3
          time_get_data.hour,         // Hours: 0-23
 80014d6:	4b18      	ldr	r3, [pc, #96]	@ (8001538 <System_Time_Setup_Mode_Handle+0x278>)
 80014d8:	789b      	ldrb	r3, [r3, #2]
 80014da:	b2d9      	uxtb	r1, r3
          NOT_USED_MODE,              // Select: DAY_OF_WEEK_MODE, DATE_OF_MONTH_MODE, NOT_USED_MODE         
          time_get_data.dayofweek,    // Day of the week: 1-7 (1 = Sunday, 2 = Monday, ..., 7 = Saturday)
 80014dc:	4b16      	ldr	r3, [pc, #88]	@ (8001538 <System_Time_Setup_Mode_Handle+0x278>)
 80014de:	78db      	ldrb	r3, [r3, #3]
 80014e0:	b2da      	uxtb	r2, r3
        alarm_setup_data =
 80014e2:	4b16      	ldr	r3, [pc, #88]	@ (800153c <System_Time_Setup_Mode_Handle+0x27c>)
 80014e4:	7018      	strb	r0, [r3, #0]
 80014e6:	4b15      	ldr	r3, [pc, #84]	@ (800153c <System_Time_Setup_Mode_Handle+0x27c>)
 80014e8:	7059      	strb	r1, [r3, #1]
 80014ea:	4b14      	ldr	r3, [pc, #80]	@ (800153c <System_Time_Setup_Mode_Handle+0x27c>)
 80014ec:	2102      	movs	r1, #2
 80014ee:	7099      	strb	r1, [r3, #2]
 80014f0:	4b12      	ldr	r3, [pc, #72]	@ (800153c <System_Time_Setup_Mode_Handle+0x27c>)
 80014f2:	70da      	strb	r2, [r3, #3]
 80014f4:	4b11      	ldr	r3, [pc, #68]	@ (800153c <System_Time_Setup_Mode_Handle+0x27c>)
 80014f6:	2201      	movs	r2, #1
 80014f8:	711a      	strb	r2, [r3, #4]
          true                       	// Alarm ON/OFF state: 1 = ON, 0 = OFF
        };
        
        // Reset the cursor for the Alarm Setup mode to the first parameter (minute)
        system_state.alarm_setup_cursor = ALARM_MINUTE;
 80014fa:	4b08      	ldr	r3, [pc, #32]	@ (800151c <System_Time_Setup_Mode_Handle+0x25c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	70da      	strb	r2, [r3, #3]
      //     NOT_USED_MODE,              // Select: DAY_OF_WEEK_MODE, DATE_OF_MONTH_MODE, NOT_USED_MODE
      //     time_get_data.dayofweek,    // Day of the week: 1-7 (1 = Sunday, 2 = Monday, ..., 7 = Saturday), or Date of the month: 1-31
      //     true                        // true = ON, false = OFF
      //   };
      // }
      break;
 8001500:	e007      	b.n	8001512 <System_Time_Setup_Mode_Handle+0x252>

    default: 
      break;
 8001502:	bf00      	nop
 8001504:	e006      	b.n	8001514 <System_Time_Setup_Mode_Handle+0x254>
      break;
 8001506:	bf00      	nop
 8001508:	e004      	b.n	8001514 <System_Time_Setup_Mode_Handle+0x254>
        break;
 800150a:	bf00      	nop
 800150c:	e002      	b.n	8001514 <System_Time_Setup_Mode_Handle+0x254>
      break;
 800150e:	bf00      	nop
 8001510:	e000      	b.n	8001514 <System_Time_Setup_Mode_Handle+0x254>
      break;
 8001512:	bf00      	nop
  }
}
 8001514:	bf00      	nop
 8001516:	3720      	adds	r7, #32
 8001518:	46bd      	mov	sp, r7
 800151a:	bdb0      	pop	{r4, r5, r7, pc}
 800151c:	200000fc 	.word	0x200000fc
 8001520:	20000104 	.word	0x20000104
 8001524:	20000105 	.word	0x20000105
 8001528:	20000106 	.word	0x20000106
 800152c:	20000107 	.word	0x20000107
 8001530:	20000108 	.word	0x20000108
 8001534:	20000109 	.word	0x20000109
 8001538:	20000114 	.word	0x20000114
 800153c:	2000010c 	.word	0x2000010c

08001540 <System_Alarm_Setup_Mode_Handle>:
 * @brief  Handles the alarm setup mode based on button actions.
 * @param  button: Pointer to the BUTTON structure containing button state and index.
 * @retval None
 */
void System_Alarm_Setup_Mode_Handle (BUTTON_DATA *button)
{ 
 8001540:	b5b0      	push	{r4, r5, r7, lr}
 8001542:	b08a      	sub	sp, #40	@ 0x28
 8001544:	af04      	add	r7, sp, #16
 8001546:	6078      	str	r0, [r7, #4]
  switch (button->index) 
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	799b      	ldrb	r3, [r3, #6]
 800154c:	2b04      	cmp	r3, #4
 800154e:	f200 8178 	bhi.w	8001842 <System_Alarm_Setup_Mode_Handle+0x302>
 8001552:	a201      	add	r2, pc, #4	@ (adr r2, 8001558 <System_Alarm_Setup_Mode_Handle+0x18>)
 8001554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001558:	0800156d 	.word	0x0800156d
 800155c:	08001631 	.word	0x08001631
 8001560:	0800171d 	.word	0x0800171d
 8001564:	080017e5 	.word	0x080017e5
 8001568:	08001825 	.word	0x08001825
  {
    // Button 0: If pressed, increment the selected parameter; if held, do nothing (reserved for future use)
    case 0: 
      // Pointer to the selected parameter, its maximum value, and minimum value
      uint8_t *paramPtr1 = NULL;
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]
      uint8_t maxValue1 = 0;    
 8001570:	2300      	movs	r3, #0
 8001572:	74fb      	strb	r3, [r7, #19]
      uint8_t minValue1 = 0;  
 8001574:	2300      	movs	r3, #0
 8001576:	74bb      	strb	r3, [r7, #18]

      // Determine the parameter to increment based on the current selection
      switch (system_state.alarm_setup_cursor)
 8001578:	4ba1      	ldr	r3, [pc, #644]	@ (8001800 <System_Alarm_Setup_Mode_Handle+0x2c0>)
 800157a:	78db      	ldrb	r3, [r3, #3]
 800157c:	2b04      	cmp	r3, #4
 800157e:	d839      	bhi.n	80015f4 <System_Alarm_Setup_Mode_Handle+0xb4>
 8001580:	a201      	add	r2, pc, #4	@ (adr r2, 8001588 <System_Alarm_Setup_Mode_Handle+0x48>)
 8001582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001586:	bf00      	nop
 8001588:	0800159d 	.word	0x0800159d
 800158c:	080015ab 	.word	0x080015ab
 8001590:	080015b9 	.word	0x080015b9
 8001594:	080015c7 	.word	0x080015c7
 8001598:	080015d5 	.word	0x080015d5
      {
        case ALARM_MINUTE:  paramPtr1 = &alarm_setup_data.minute;  maxValue1 = 59; minValue1 = 0; break;
 800159c:	4b99      	ldr	r3, [pc, #612]	@ (8001804 <System_Alarm_Setup_Mode_Handle+0x2c4>)
 800159e:	617b      	str	r3, [r7, #20]
 80015a0:	233b      	movs	r3, #59	@ 0x3b
 80015a2:	74fb      	strb	r3, [r7, #19]
 80015a4:	2300      	movs	r3, #0
 80015a6:	74bb      	strb	r3, [r7, #18]
 80015a8:	e025      	b.n	80015f6 <System_Alarm_Setup_Mode_Handle+0xb6>
        case ALARM_HOUR:    paramPtr1 = &alarm_setup_data.hour;    maxValue1 = 23; minValue1 = 0; break;
 80015aa:	4b97      	ldr	r3, [pc, #604]	@ (8001808 <System_Alarm_Setup_Mode_Handle+0x2c8>)
 80015ac:	617b      	str	r3, [r7, #20]
 80015ae:	2317      	movs	r3, #23
 80015b0:	74fb      	strb	r3, [r7, #19]
 80015b2:	2300      	movs	r3, #0
 80015b4:	74bb      	strb	r3, [r7, #18]
 80015b6:	e01e      	b.n	80015f6 <System_Alarm_Setup_Mode_Handle+0xb6>
        case ALARM_DY_DT:   paramPtr1 = (uint8_t *)&alarm_setup_data.dy_dt; maxValue1 = 2; minValue1 = 0; break;
 80015b8:	4b94      	ldr	r3, [pc, #592]	@ (800180c <System_Alarm_Setup_Mode_Handle+0x2cc>)
 80015ba:	617b      	str	r3, [r7, #20]
 80015bc:	2302      	movs	r3, #2
 80015be:	74fb      	strb	r3, [r7, #19]
 80015c0:	2300      	movs	r3, #0
 80015c2:	74bb      	strb	r3, [r7, #18]
 80015c4:	e017      	b.n	80015f6 <System_Alarm_Setup_Mode_Handle+0xb6>
        case ALARM_DOW_DOM: paramPtr1 = &alarm_setup_data.dow_dom; maxValue1 = 31; minValue1 = 1; break;
 80015c6:	4b92      	ldr	r3, [pc, #584]	@ (8001810 <System_Alarm_Setup_Mode_Handle+0x2d0>)
 80015c8:	617b      	str	r3, [r7, #20]
 80015ca:	231f      	movs	r3, #31
 80015cc:	74fb      	strb	r3, [r7, #19]
 80015ce:	2301      	movs	r3, #1
 80015d0:	74bb      	strb	r3, [r7, #18]
 80015d2:	e010      	b.n	80015f6 <System_Alarm_Setup_Mode_Handle+0xb6>
        case ALARM_ON_OFF:  alarm_setup_data.on_off = !alarm_setup_data.on_off;                   break;
 80015d4:	4b8b      	ldr	r3, [pc, #556]	@ (8001804 <System_Alarm_Setup_Mode_Handle+0x2c4>)
 80015d6:	791b      	ldrb	r3, [r3, #4]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	bf14      	ite	ne
 80015dc:	2301      	movne	r3, #1
 80015de:	2300      	moveq	r3, #0
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	f083 0301 	eor.w	r3, r3, #1
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	f003 0301 	and.w	r3, r3, #1
 80015ec:	b2da      	uxtb	r2, r3
 80015ee:	4b85      	ldr	r3, [pc, #532]	@ (8001804 <System_Alarm_Setup_Mode_Handle+0x2c4>)
 80015f0:	711a      	strb	r2, [r3, #4]
 80015f2:	e000      	b.n	80015f6 <System_Alarm_Setup_Mode_Handle+0xb6>
        default: break;
 80015f4:	bf00      	nop
      }

      if (system_state.alarm_setup_cursor == ALARM_ON_OFF)
 80015f6:	4b82      	ldr	r3, [pc, #520]	@ (8001800 <System_Alarm_Setup_Mode_Handle+0x2c0>)
 80015f8:	78db      	ldrb	r3, [r3, #3]
 80015fa:	2b04      	cmp	r3, #4
 80015fc:	f000 8123 	beq.w	8001846 <System_Alarm_Setup_Mode_Handle+0x306>
      {
        break;
      }

      // Check if the button is pressed or held
      if (button->press_flag) 
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	7b5b      	ldrb	r3, [r3, #13]
 8001604:	b2db      	uxtb	r3, r3
 8001606:	2b00      	cmp	r3, #0
 8001608:	f000 811f 	beq.w	800184a <System_Alarm_Setup_Mode_Handle+0x30a>
      {
        // Increment the selected parameter value once for a button press
        if (paramPtr1) 
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	2b00      	cmp	r3, #0
 8001610:	f000 811b 	beq.w	800184a <System_Alarm_Setup_Mode_Handle+0x30a>
        {
          // Increment the parameter value, wrapping around if necessary
          *paramPtr1 = (*paramPtr1 < maxValue1) ? (*paramPtr1 + 1) : minValue1;
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	7cfa      	ldrb	r2, [r7, #19]
 800161a:	429a      	cmp	r2, r3
 800161c:	d904      	bls.n	8001628 <System_Alarm_Setup_Mode_Handle+0xe8>
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	3301      	adds	r3, #1
 8001624:	b2db      	uxtb	r3, r3
 8001626:	e000      	b.n	800162a <System_Alarm_Setup_Mode_Handle+0xea>
 8001628:	7cbb      	ldrb	r3, [r7, #18]
 800162a:	697a      	ldr	r2, [r7, #20]
 800162c:	7013      	strb	r3, [r2, #0]
      //   }

      //   // Update the start tick for the next hold cycle
      //   startTick1 = HAL_GetTick();
      // } 
      break;
 800162e:	e10c      	b.n	800184a <System_Alarm_Setup_Mode_Handle+0x30a>

      // Button 1: If pressed, decrement the selected parameter; if held, do nothing (reserved for future use)
      case 1: 
        // Pointer to the selected parameter, its maximum value, and minimum value
        uint8_t *paramPtr2 = NULL;
 8001630:	2300      	movs	r3, #0
 8001632:	60fb      	str	r3, [r7, #12]
        uint8_t maxValue2 = 0;    
 8001634:	2300      	movs	r3, #0
 8001636:	72fb      	strb	r3, [r7, #11]
        uint8_t minValue2 = 0;  
 8001638:	2300      	movs	r3, #0
 800163a:	72bb      	strb	r3, [r7, #10]

        // Determine the parameter to decrement based on the current selection
        switch (system_state.alarm_setup_cursor)
 800163c:	4b70      	ldr	r3, [pc, #448]	@ (8001800 <System_Alarm_Setup_Mode_Handle+0x2c0>)
 800163e:	78db      	ldrb	r3, [r3, #3]
 8001640:	2b04      	cmp	r3, #4
 8001642:	d839      	bhi.n	80016b8 <System_Alarm_Setup_Mode_Handle+0x178>
 8001644:	a201      	add	r2, pc, #4	@ (adr r2, 800164c <System_Alarm_Setup_Mode_Handle+0x10c>)
 8001646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800164a:	bf00      	nop
 800164c:	08001661 	.word	0x08001661
 8001650:	0800166f 	.word	0x0800166f
 8001654:	0800167d 	.word	0x0800167d
 8001658:	0800168b 	.word	0x0800168b
 800165c:	08001699 	.word	0x08001699
        {
          case ALARM_MINUTE:  paramPtr2 = &alarm_setup_data.minute;  maxValue2 = 59; minValue2 = 0; break;
 8001660:	4b68      	ldr	r3, [pc, #416]	@ (8001804 <System_Alarm_Setup_Mode_Handle+0x2c4>)
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	233b      	movs	r3, #59	@ 0x3b
 8001666:	72fb      	strb	r3, [r7, #11]
 8001668:	2300      	movs	r3, #0
 800166a:	72bb      	strb	r3, [r7, #10]
 800166c:	e025      	b.n	80016ba <System_Alarm_Setup_Mode_Handle+0x17a>
          case ALARM_HOUR:    paramPtr2 = &alarm_setup_data.hour;    maxValue2 = 23; minValue2 = 0; break;
 800166e:	4b66      	ldr	r3, [pc, #408]	@ (8001808 <System_Alarm_Setup_Mode_Handle+0x2c8>)
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	2317      	movs	r3, #23
 8001674:	72fb      	strb	r3, [r7, #11]
 8001676:	2300      	movs	r3, #0
 8001678:	72bb      	strb	r3, [r7, #10]
 800167a:	e01e      	b.n	80016ba <System_Alarm_Setup_Mode_Handle+0x17a>
          case ALARM_DY_DT:   paramPtr2 = (uint8_t *)&alarm_setup_data.dy_dt; maxValue2 = 2; minValue2 = 0; break;
 800167c:	4b63      	ldr	r3, [pc, #396]	@ (800180c <System_Alarm_Setup_Mode_Handle+0x2cc>)
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	2302      	movs	r3, #2
 8001682:	72fb      	strb	r3, [r7, #11]
 8001684:	2300      	movs	r3, #0
 8001686:	72bb      	strb	r3, [r7, #10]
 8001688:	e017      	b.n	80016ba <System_Alarm_Setup_Mode_Handle+0x17a>
          case ALARM_DOW_DOM: paramPtr2 = &alarm_setup_data.dow_dom; maxValue2 = 31; minValue2 = 1; break;
 800168a:	4b61      	ldr	r3, [pc, #388]	@ (8001810 <System_Alarm_Setup_Mode_Handle+0x2d0>)
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	231f      	movs	r3, #31
 8001690:	72fb      	strb	r3, [r7, #11]
 8001692:	2301      	movs	r3, #1
 8001694:	72bb      	strb	r3, [r7, #10]
 8001696:	e010      	b.n	80016ba <System_Alarm_Setup_Mode_Handle+0x17a>
          case ALARM_ON_OFF:  alarm_setup_data.on_off = !alarm_setup_data.on_off;                  break;
 8001698:	4b5a      	ldr	r3, [pc, #360]	@ (8001804 <System_Alarm_Setup_Mode_Handle+0x2c4>)
 800169a:	791b      	ldrb	r3, [r3, #4]
 800169c:	2b00      	cmp	r3, #0
 800169e:	bf14      	ite	ne
 80016a0:	2301      	movne	r3, #1
 80016a2:	2300      	moveq	r3, #0
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	f083 0301 	eor.w	r3, r3, #1
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	f003 0301 	and.w	r3, r3, #1
 80016b0:	b2da      	uxtb	r2, r3
 80016b2:	4b54      	ldr	r3, [pc, #336]	@ (8001804 <System_Alarm_Setup_Mode_Handle+0x2c4>)
 80016b4:	711a      	strb	r2, [r3, #4]
 80016b6:	e000      	b.n	80016ba <System_Alarm_Setup_Mode_Handle+0x17a>
          default: break;
 80016b8:	bf00      	nop
        }

        // Check if the selected parameter is ON/OFF
        if (system_state.alarm_setup_cursor == ALARM_ON_OFF)
 80016ba:	4b51      	ldr	r3, [pc, #324]	@ (8001800 <System_Alarm_Setup_Mode_Handle+0x2c0>)
 80016bc:	78db      	ldrb	r3, [r3, #3]
 80016be:	2b04      	cmp	r3, #4
 80016c0:	f000 80c5 	beq.w	800184e <System_Alarm_Setup_Mode_Handle+0x30e>
        {
          break;
        }

        // Check if the button is pressed or held
        if (button->press_flag) 
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	7b5b      	ldrb	r3, [r3, #13]
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	f000 80c1 	beq.w	8001852 <System_Alarm_Setup_Mode_Handle+0x312>
        {
          // Check if the selected parameter is ON/OFF
          if (system_state.alarm_setup_cursor == ALARM_ON_OFF)
 80016d0:	4b4b      	ldr	r3, [pc, #300]	@ (8001800 <System_Alarm_Setup_Mode_Handle+0x2c0>)
 80016d2:	78db      	ldrb	r3, [r3, #3]
 80016d4:	2b04      	cmp	r3, #4
 80016d6:	d10f      	bne.n	80016f8 <System_Alarm_Setup_Mode_Handle+0x1b8>
          {
            // Toggle the on/off state of the alarm
            alarm_setup_data.on_off = !alarm_setup_data.on_off;
 80016d8:	4b4a      	ldr	r3, [pc, #296]	@ (8001804 <System_Alarm_Setup_Mode_Handle+0x2c4>)
 80016da:	791b      	ldrb	r3, [r3, #4]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	bf14      	ite	ne
 80016e0:	2301      	movne	r3, #1
 80016e2:	2300      	moveq	r3, #0
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	f083 0301 	eor.w	r3, r3, #1
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	f003 0301 	and.w	r3, r3, #1
 80016f0:	b2da      	uxtb	r2, r3
 80016f2:	4b44      	ldr	r3, [pc, #272]	@ (8001804 <System_Alarm_Setup_Mode_Handle+0x2c4>)
 80016f4:	711a      	strb	r2, [r3, #4]

        //     // Update the start tick for the next hold cycle
        //     startTick2 = HAL_GetTick();
        //   }
        // } 
        break;
 80016f6:	e0ac      	b.n	8001852 <System_Alarm_Setup_Mode_Handle+0x312>
            if (paramPtr2) 
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f000 80a9 	beq.w	8001852 <System_Alarm_Setup_Mode_Handle+0x312>
              *paramPtr2 = (*paramPtr2 > minValue2) ? (*paramPtr2 - 1) : maxValue2;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	7aba      	ldrb	r2, [r7, #10]
 8001706:	429a      	cmp	r2, r3
 8001708:	d204      	bcs.n	8001714 <System_Alarm_Setup_Mode_Handle+0x1d4>
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	3b01      	subs	r3, #1
 8001710:	b2db      	uxtb	r3, r3
 8001712:	e000      	b.n	8001716 <System_Alarm_Setup_Mode_Handle+0x1d6>
 8001714:	7afb      	ldrb	r3, [r7, #11]
 8001716:	68fa      	ldr	r2, [r7, #12]
 8001718:	7013      	strb	r3, [r2, #0]
        break;
 800171a:	e09a      	b.n	8001852 <System_Alarm_Setup_Mode_Handle+0x312>
    
    // Button 2: If pressed, save the alarm and return to default mode; if held, do nothing (reserved for future use)
    case 2:
      // If the button is pressed, save the alarm and return to default mode 
      if (button->press_flag)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	7b5b      	ldrb	r3, [r3, #13]
 8001720:	b2db      	uxtb	r3, r3
 8001722:	2b00      	cmp	r3, #0
 8001724:	d05b      	beq.n	80017de <System_Alarm_Setup_Mode_Handle+0x29e>
      {
        // If the previous mode is Alarm View Mode
        // Use the system cursor instead to keep the alarm slot pointer unchanged
        if (system_state.past_mode == ALARM_VIEW_MODE)
 8001726:	4b36      	ldr	r3, [pc, #216]	@ (8001800 <System_Alarm_Setup_Mode_Handle+0x2c0>)
 8001728:	785b      	ldrb	r3, [r3, #1]
 800172a:	2b03      	cmp	r3, #3
 800172c:	d124      	bne.n	8001778 <System_Alarm_Setup_Mode_Handle+0x238>
        {
          // Save the alarm to EEPROM and return to Default Mode
          //    void Alarm_Set (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow_dom, ALARM_DY_DT_MODE dy_dt, uint8_t on_off, uint8_t slot)
          Alarm_Set
 800172e:	4b35      	ldr	r3, [pc, #212]	@ (8001804 <System_Alarm_Setup_Mode_Handle+0x2c4>)
 8001730:	7818      	ldrb	r0, [r3, #0]
 8001732:	4b34      	ldr	r3, [pc, #208]	@ (8001804 <System_Alarm_Setup_Mode_Handle+0x2c4>)
 8001734:	785c      	ldrb	r4, [r3, #1]
 8001736:	4b33      	ldr	r3, [pc, #204]	@ (8001804 <System_Alarm_Setup_Mode_Handle+0x2c4>)
 8001738:	78dd      	ldrb	r5, [r3, #3]
 800173a:	4b32      	ldr	r3, [pc, #200]	@ (8001804 <System_Alarm_Setup_Mode_Handle+0x2c4>)
 800173c:	789b      	ldrb	r3, [r3, #2]
 800173e:	4a31      	ldr	r2, [pc, #196]	@ (8001804 <System_Alarm_Setup_Mode_Handle+0x2c4>)
 8001740:	7912      	ldrb	r2, [r2, #4]
 8001742:	492f      	ldr	r1, [pc, #188]	@ (8001800 <System_Alarm_Setup_Mode_Handle+0x2c0>)
 8001744:	7909      	ldrb	r1, [r1, #4]
 8001746:	9102      	str	r1, [sp, #8]
 8001748:	9201      	str	r2, [sp, #4]
 800174a:	9300      	str	r3, [sp, #0]
 800174c:	462b      	mov	r3, r5
 800174e:	4622      	mov	r2, r4
 8001750:	4601      	mov	r1, r0
 8001752:	2000      	movs	r0, #0
 8001754:	f7ff f9aa 	bl	8000aac <Alarm_Set>
            alarm_setup_data.on_off,
            system_state.alarm_view_cursor         // Save the alarm at the address where the cursor points at in Alarm View Mode
          );

          // Update the newly set alarm data
          Alarm_Get(system_state.alarm_view_cursor, &alarm_get_data[system_state.alarm_view_cursor]);
 8001758:	4b29      	ldr	r3, [pc, #164]	@ (8001800 <System_Alarm_Setup_Mode_Handle+0x2c0>)
 800175a:	791a      	ldrb	r2, [r3, #4]
 800175c:	4b28      	ldr	r3, [pc, #160]	@ (8001800 <System_Alarm_Setup_Mode_Handle+0x2c0>)
 800175e:	791b      	ldrb	r3, [r3, #4]
 8001760:	4619      	mov	r1, r3
 8001762:	460b      	mov	r3, r1
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	440b      	add	r3, r1
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	492a      	ldr	r1, [pc, #168]	@ (8001814 <System_Alarm_Setup_Mode_Handle+0x2d4>)
 800176c:	440b      	add	r3, r1
 800176e:	4619      	mov	r1, r3
 8001770:	4610      	mov	r0, r2
 8001772:	f7ff f9eb 	bl	8000b4c <Alarm_Get>
      // If the button is held down, do nothing (reserved for future use)
      else if (button->hold_flag) 
      {
        // Reserved
      }
      break;
 8001776:	e071      	b.n	800185c <System_Alarm_Setup_Mode_Handle+0x31c>
          Alarm_Set
 8001778:	4b22      	ldr	r3, [pc, #136]	@ (8001804 <System_Alarm_Setup_Mode_Handle+0x2c4>)
 800177a:	7818      	ldrb	r0, [r3, #0]
 800177c:	4b21      	ldr	r3, [pc, #132]	@ (8001804 <System_Alarm_Setup_Mode_Handle+0x2c4>)
 800177e:	785c      	ldrb	r4, [r3, #1]
 8001780:	4b20      	ldr	r3, [pc, #128]	@ (8001804 <System_Alarm_Setup_Mode_Handle+0x2c4>)
 8001782:	78dd      	ldrb	r5, [r3, #3]
 8001784:	4b1f      	ldr	r3, [pc, #124]	@ (8001804 <System_Alarm_Setup_Mode_Handle+0x2c4>)
 8001786:	789b      	ldrb	r3, [r3, #2]
 8001788:	4a1e      	ldr	r2, [pc, #120]	@ (8001804 <System_Alarm_Setup_Mode_Handle+0x2c4>)
 800178a:	7912      	ldrb	r2, [r2, #4]
 800178c:	4922      	ldr	r1, [pc, #136]	@ (8001818 <System_Alarm_Setup_Mode_Handle+0x2d8>)
 800178e:	7809      	ldrb	r1, [r1, #0]
 8001790:	9102      	str	r1, [sp, #8]
 8001792:	9201      	str	r2, [sp, #4]
 8001794:	9300      	str	r3, [sp, #0]
 8001796:	462b      	mov	r3, r5
 8001798:	4622      	mov	r2, r4
 800179a:	4601      	mov	r1, r0
 800179c:	2000      	movs	r0, #0
 800179e:	f7ff f985 	bl	8000aac <Alarm_Set>
          Alarm_Get(alarm_slot_ptr, &alarm_get_data[alarm_slot_ptr]);
 80017a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001818 <System_Alarm_Setup_Mode_Handle+0x2d8>)
 80017a4:	781a      	ldrb	r2, [r3, #0]
 80017a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001818 <System_Alarm_Setup_Mode_Handle+0x2d8>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	4619      	mov	r1, r3
 80017ac:	460b      	mov	r3, r1
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	440b      	add	r3, r1
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	4917      	ldr	r1, [pc, #92]	@ (8001814 <System_Alarm_Setup_Mode_Handle+0x2d4>)
 80017b6:	440b      	add	r3, r1
 80017b8:	4619      	mov	r1, r3
 80017ba:	4610      	mov	r0, r2
 80017bc:	f7ff f9c6 	bl	8000b4c <Alarm_Get>
          alarm_slot_ptr = (alarm_slot_ptr < ALARM_SLOT_NUM) ? (alarm_slot_ptr + 1) : 0;
 80017c0:	4b15      	ldr	r3, [pc, #84]	@ (8001818 <System_Alarm_Setup_Mode_Handle+0x2d8>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	2b09      	cmp	r3, #9
 80017c6:	d804      	bhi.n	80017d2 <System_Alarm_Setup_Mode_Handle+0x292>
 80017c8:	4b13      	ldr	r3, [pc, #76]	@ (8001818 <System_Alarm_Setup_Mode_Handle+0x2d8>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	3301      	adds	r3, #1
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	e000      	b.n	80017d4 <System_Alarm_Setup_Mode_Handle+0x294>
 80017d2:	2300      	movs	r3, #0
 80017d4:	4a10      	ldr	r2, [pc, #64]	@ (8001818 <System_Alarm_Setup_Mode_Handle+0x2d8>)
 80017d6:	7013      	strb	r3, [r2, #0]
          Alarm_Slot_Pointer_Set();
 80017d8:	f7ff fa36 	bl	8000c48 <Alarm_Slot_Pointer_Set>
      break;
 80017dc:	e03e      	b.n	800185c <System_Alarm_Setup_Mode_Handle+0x31c>
      else if (button->hold_flag) 
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	7b9b      	ldrb	r3, [r3, #14]
      break;
 80017e2:	e03b      	b.n	800185c <System_Alarm_Setup_Mode_Handle+0x31c>

    // Button 3: If pressed, move to the next field; if held, do nothing (reserved for future use)
    case 3:
      // If the button is pressed, move to the next parameter field, wrapping around if necessary  
      if (button->press_flag)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	7b5b      	ldrb	r3, [r3, #13]
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d033      	beq.n	8001856 <System_Alarm_Setup_Mode_Handle+0x316>
      {
        system_state.alarm_setup_cursor = (system_state.alarm_setup_cursor == ALARM_ON_OFF) ? ALARM_MINUTE : (system_state.alarm_setup_cursor + 1);
 80017ee:	4b04      	ldr	r3, [pc, #16]	@ (8001800 <System_Alarm_Setup_Mode_Handle+0x2c0>)
 80017f0:	78db      	ldrb	r3, [r3, #3]
 80017f2:	2b04      	cmp	r3, #4
 80017f4:	d012      	beq.n	800181c <System_Alarm_Setup_Mode_Handle+0x2dc>
 80017f6:	4b02      	ldr	r3, [pc, #8]	@ (8001800 <System_Alarm_Setup_Mode_Handle+0x2c0>)
 80017f8:	78db      	ldrb	r3, [r3, #3]
 80017fa:	3301      	adds	r3, #1
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	e00e      	b.n	800181e <System_Alarm_Setup_Mode_Handle+0x2de>
 8001800:	200000fc 	.word	0x200000fc
 8001804:	2000010c 	.word	0x2000010c
 8001808:	2000010d 	.word	0x2000010d
 800180c:	2000010e 	.word	0x2000010e
 8001810:	2000010f 	.word	0x2000010f
 8001814:	2000011c 	.word	0x2000011c
 8001818:	20000158 	.word	0x20000158
 800181c:	2300      	movs	r3, #0
 800181e:	4a11      	ldr	r2, [pc, #68]	@ (8001864 <System_Alarm_Setup_Mode_Handle+0x324>)
 8001820:	70d3      	strb	r3, [r2, #3]
      //   }

      //   // Reset the button latch to avoid function replication
      //   button->latch = true;
      // }
      break;
 8001822:	e018      	b.n	8001856 <System_Alarm_Setup_Mode_Handle+0x316>
    
    // Button 4: If pressed, cycle through the system modes; if held, do nothing (reserved for future use)
    case 4:
      // If pressed, cycle through the time system modes, but the temporary setting data is still retained (avoid accidental press)
      if (button->press_flag)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	7b5b      	ldrb	r3, [r3, #13]
 8001828:	b2db      	uxtb	r3, r3
 800182a:	2b00      	cmp	r3, #0
 800182c:	d015      	beq.n	800185a <System_Alarm_Setup_Mode_Handle+0x31a>
      {
        // system_state.mode = (system_state.mode < (SYSTEM_MODE_NUM - 1)) ? (system_state.mode + 1) : 0;
        
        // Cycle through the next system mode
        system_state.mode = ALARM_VIEW_MODE;
 800182e:	4b0d      	ldr	r3, [pc, #52]	@ (8001864 <System_Alarm_Setup_Mode_Handle+0x324>)
 8001830:	2203      	movs	r2, #3
 8001832:	701a      	strb	r2, [r3, #0]

        // Set the system past mode to alarm setup mode
        system_state.past_mode = ALARM_SETUP_MODE;
 8001834:	4b0b      	ldr	r3, [pc, #44]	@ (8001864 <System_Alarm_Setup_Mode_Handle+0x324>)
 8001836:	2202      	movs	r2, #2
 8001838:	705a      	strb	r2, [r3, #1]

        // Reset the cursor for the Alarm View mode
        system_state.alarm_view_cursor = 0; 
 800183a:	4b0a      	ldr	r3, [pc, #40]	@ (8001864 <System_Alarm_Setup_Mode_Handle+0x324>)
 800183c:	2200      	movs	r2, #0
 800183e:	711a      	strb	r2, [r3, #4]
      //     NOT_USED_MODE,              // Select: DAY_OF_WEEK_MODE, DATE_OF_MONTH_MODE, NOT_USED_MODE
      //     time_get_data.dayofweek,    // Day of the week: 1-7 (1 = Sunday, 2 = Monday, ..., 7 = Saturday), or Date of the month: 1-31
      //     true                        // true = ON, false = OFF
      //   };
      // }
      break;
 8001840:	e00b      	b.n	800185a <System_Alarm_Setup_Mode_Handle+0x31a>

    default:
      // Reserved for future use
      break;
 8001842:	bf00      	nop
 8001844:	e00a      	b.n	800185c <System_Alarm_Setup_Mode_Handle+0x31c>
        break;
 8001846:	bf00      	nop
 8001848:	e008      	b.n	800185c <System_Alarm_Setup_Mode_Handle+0x31c>
      break;
 800184a:	bf00      	nop
 800184c:	e006      	b.n	800185c <System_Alarm_Setup_Mode_Handle+0x31c>
          break;
 800184e:	bf00      	nop
 8001850:	e004      	b.n	800185c <System_Alarm_Setup_Mode_Handle+0x31c>
        break;
 8001852:	bf00      	nop
 8001854:	e002      	b.n	800185c <System_Alarm_Setup_Mode_Handle+0x31c>
      break;
 8001856:	bf00      	nop
 8001858:	e000      	b.n	800185c <System_Alarm_Setup_Mode_Handle+0x31c>
      break;
 800185a:	bf00      	nop
  }
}
 800185c:	bf00      	nop
 800185e:	3718      	adds	r7, #24
 8001860:	46bd      	mov	sp, r7
 8001862:	bdb0      	pop	{r4, r5, r7, pc}
 8001864:	200000fc 	.word	0x200000fc

08001868 <System_Alarm_View_Mode_Handle>:
 * @brief  Handles the alarm view mode based on button actions.
 * @param  button: Pointer to the BUTTON structure containing button state and index.
 * @retval None
 */
void System_Alarm_View_Mode_Handle (BUTTON_DATA *button)
{ 
 8001868:	b5b0      	push	{r4, r5, r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af04      	add	r7, sp, #16
 800186e:	6078      	str	r0, [r7, #4]
  // Handle button actions in alarm view mode
  switch (button->index) 
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	799b      	ldrb	r3, [r3, #6]
 8001874:	2b04      	cmp	r3, #4
 8001876:	f200 8115 	bhi.w	8001aa4 <System_Alarm_View_Mode_Handle+0x23c>
 800187a:	a201      	add	r2, pc, #4	@ (adr r2, 8001880 <System_Alarm_View_Mode_Handle+0x18>)
 800187c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001880:	08001895 	.word	0x08001895
 8001884:	080018bf 	.word	0x080018bf
 8001888:	080018e9 	.word	0x080018e9
 800188c:	080019e9 	.word	0x080019e9
 8001890:	08001a8d 	.word	0x08001a8d
  {
    // Button 0: If pressed, increment the selection cursor; if held, do nothing (reserved for future use)
    case 0:
      if      (button->press_flag)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	7b5b      	ldrb	r3, [r3, #13]
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b00      	cmp	r3, #0
 800189c:	d00c      	beq.n	80018b8 <System_Alarm_View_Mode_Handle+0x50>
      {
        system_state.alarm_view_cursor = (system_state.alarm_view_cursor == ALARM_VIEW_CURSOR_MAX) ? 0 : (system_state.alarm_view_cursor + 1);
 800189e:	4b87      	ldr	r3, [pc, #540]	@ (8001abc <System_Alarm_View_Mode_Handle+0x254>)
 80018a0:	791b      	ldrb	r3, [r3, #4]
 80018a2:	2b09      	cmp	r3, #9
 80018a4:	d004      	beq.n	80018b0 <System_Alarm_View_Mode_Handle+0x48>
 80018a6:	4b85      	ldr	r3, [pc, #532]	@ (8001abc <System_Alarm_View_Mode_Handle+0x254>)
 80018a8:	791b      	ldrb	r3, [r3, #4]
 80018aa:	3301      	adds	r3, #1
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	e000      	b.n	80018b2 <System_Alarm_View_Mode_Handle+0x4a>
 80018b0:	2300      	movs	r3, #0
 80018b2:	4a82      	ldr	r2, [pc, #520]	@ (8001abc <System_Alarm_View_Mode_Handle+0x254>)
 80018b4:	7113      	strb	r3, [r2, #4]
      }
      else if (button->hold_flag)
      {
        // Reserved
      }
      break;
 80018b6:	e0fc      	b.n	8001ab2 <System_Alarm_View_Mode_Handle+0x24a>
      else if (button->hold_flag)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	7b9b      	ldrb	r3, [r3, #14]
      break;
 80018bc:	e0f9      	b.n	8001ab2 <System_Alarm_View_Mode_Handle+0x24a>

    // Button 1: If pressed, decrement the selection cursor; if held, do nothing (reserved for future use)
    case 1:
      if      (button->press_flag)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	7b5b      	ldrb	r3, [r3, #13]
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d00c      	beq.n	80018e2 <System_Alarm_View_Mode_Handle+0x7a>
      {
        system_state.alarm_view_cursor = (system_state.alarm_view_cursor == 0) ? ALARM_VIEW_CURSOR_MAX : (system_state.alarm_view_cursor - 1);
 80018c8:	4b7c      	ldr	r3, [pc, #496]	@ (8001abc <System_Alarm_View_Mode_Handle+0x254>)
 80018ca:	791b      	ldrb	r3, [r3, #4]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d004      	beq.n	80018da <System_Alarm_View_Mode_Handle+0x72>
 80018d0:	4b7a      	ldr	r3, [pc, #488]	@ (8001abc <System_Alarm_View_Mode_Handle+0x254>)
 80018d2:	791b      	ldrb	r3, [r3, #4]
 80018d4:	3b01      	subs	r3, #1
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	e000      	b.n	80018dc <System_Alarm_View_Mode_Handle+0x74>
 80018da:	2309      	movs	r3, #9
 80018dc:	4a77      	ldr	r2, [pc, #476]	@ (8001abc <System_Alarm_View_Mode_Handle+0x254>)
 80018de:	7113      	strb	r3, [r2, #4]
      }
      else if (button->hold_flag)
      {
        // Reserved
      }
      break;
 80018e0:	e0e7      	b.n	8001ab2 <System_Alarm_View_Mode_Handle+0x24a>
      else if (button->hold_flag)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	7b9b      	ldrb	r3, [r3, #14]
      break;
 80018e6:	e0e4      	b.n	8001ab2 <System_Alarm_View_Mode_Handle+0x24a>
    
    // Button 2: If pressed, toggle ON/OFF; if held, do nothing (reserved for future use)
    case 2:
      if      (button->press_flag)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	7b5b      	ldrb	r3, [r3, #13]
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f000 80da 	beq.w	8001aa8 <System_Alarm_View_Mode_Handle+0x240>
      {
        // Retrieve the selected alarm data to system parameter data
        alarm_setup_data.minute  = alarm_get_data[system_state.alarm_view_cursor].minute;
 80018f4:	4b71      	ldr	r3, [pc, #452]	@ (8001abc <System_Alarm_View_Mode_Handle+0x254>)
 80018f6:	791b      	ldrb	r3, [r3, #4]
 80018f8:	4619      	mov	r1, r3
 80018fa:	4a71      	ldr	r2, [pc, #452]	@ (8001ac0 <System_Alarm_View_Mode_Handle+0x258>)
 80018fc:	460b      	mov	r3, r1
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	440b      	add	r3, r1
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	4413      	add	r3, r2
 8001906:	3301      	adds	r3, #1
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	b2da      	uxtb	r2, r3
 800190c:	4b6d      	ldr	r3, [pc, #436]	@ (8001ac4 <System_Alarm_View_Mode_Handle+0x25c>)
 800190e:	701a      	strb	r2, [r3, #0]
        alarm_setup_data.hour    = alarm_get_data[system_state.alarm_view_cursor].hour;
 8001910:	4b6a      	ldr	r3, [pc, #424]	@ (8001abc <System_Alarm_View_Mode_Handle+0x254>)
 8001912:	791b      	ldrb	r3, [r3, #4]
 8001914:	4619      	mov	r1, r3
 8001916:	4a6a      	ldr	r2, [pc, #424]	@ (8001ac0 <System_Alarm_View_Mode_Handle+0x258>)
 8001918:	460b      	mov	r3, r1
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	440b      	add	r3, r1
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	4413      	add	r3, r2
 8001922:	3302      	adds	r3, #2
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	b2da      	uxtb	r2, r3
 8001928:	4b66      	ldr	r3, [pc, #408]	@ (8001ac4 <System_Alarm_View_Mode_Handle+0x25c>)
 800192a:	705a      	strb	r2, [r3, #1]
        alarm_setup_data.dy_dt   = alarm_get_data[system_state.alarm_view_cursor].dy_dt;
 800192c:	4b63      	ldr	r3, [pc, #396]	@ (8001abc <System_Alarm_View_Mode_Handle+0x254>)
 800192e:	791b      	ldrb	r3, [r3, #4]
 8001930:	4619      	mov	r1, r3
 8001932:	4a63      	ldr	r2, [pc, #396]	@ (8001ac0 <System_Alarm_View_Mode_Handle+0x258>)
 8001934:	460b      	mov	r3, r1
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	440b      	add	r3, r1
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	4413      	add	r3, r2
 800193e:	3303      	adds	r3, #3
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	b2da      	uxtb	r2, r3
 8001944:	4b5f      	ldr	r3, [pc, #380]	@ (8001ac4 <System_Alarm_View_Mode_Handle+0x25c>)
 8001946:	709a      	strb	r2, [r3, #2]
        alarm_setup_data.dow_dom = alarm_get_data[system_state.alarm_view_cursor].dow_dom;
 8001948:	4b5c      	ldr	r3, [pc, #368]	@ (8001abc <System_Alarm_View_Mode_Handle+0x254>)
 800194a:	791b      	ldrb	r3, [r3, #4]
 800194c:	4619      	mov	r1, r3
 800194e:	4a5c      	ldr	r2, [pc, #368]	@ (8001ac0 <System_Alarm_View_Mode_Handle+0x258>)
 8001950:	460b      	mov	r3, r1
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	440b      	add	r3, r1
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	4413      	add	r3, r2
 800195a:	3304      	adds	r3, #4
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	b2da      	uxtb	r2, r3
 8001960:	4b58      	ldr	r3, [pc, #352]	@ (8001ac4 <System_Alarm_View_Mode_Handle+0x25c>)
 8001962:	70da      	strb	r2, [r3, #3]
        alarm_setup_data.on_off  = alarm_get_data[system_state.alarm_view_cursor].on_off;
 8001964:	4b55      	ldr	r3, [pc, #340]	@ (8001abc <System_Alarm_View_Mode_Handle+0x254>)
 8001966:	791b      	ldrb	r3, [r3, #4]
 8001968:	4619      	mov	r1, r3
 800196a:	4a55      	ldr	r2, [pc, #340]	@ (8001ac0 <System_Alarm_View_Mode_Handle+0x258>)
 800196c:	460b      	mov	r3, r1
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	440b      	add	r3, r1
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	4413      	add	r3, r2
 8001976:	3305      	adds	r3, #5
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	b2da      	uxtb	r2, r3
 800197c:	4b51      	ldr	r3, [pc, #324]	@ (8001ac4 <System_Alarm_View_Mode_Handle+0x25c>)
 800197e:	711a      	strb	r2, [r3, #4]

        // Toggle ON/OFF data
        alarm_setup_data.on_off = !alarm_setup_data.on_off;
 8001980:	4b50      	ldr	r3, [pc, #320]	@ (8001ac4 <System_Alarm_View_Mode_Handle+0x25c>)
 8001982:	791b      	ldrb	r3, [r3, #4]
 8001984:	2b00      	cmp	r3, #0
 8001986:	bf14      	ite	ne
 8001988:	2301      	movne	r3, #1
 800198a:	2300      	moveq	r3, #0
 800198c:	b2db      	uxtb	r3, r3
 800198e:	f083 0301 	eor.w	r3, r3, #1
 8001992:	b2db      	uxtb	r3, r3
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	b2da      	uxtb	r2, r3
 800199a:	4b4a      	ldr	r3, [pc, #296]	@ (8001ac4 <System_Alarm_View_Mode_Handle+0x25c>)
 800199c:	711a      	strb	r2, [r3, #4]

        // Save the modified alarm to the EEPROM module
        //    void Alarm_Set (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow_dom, ALARM_DY_DT_MODE dy_dt, uint8_t on_off, uint8_t slot)
        Alarm_Set
 800199e:	4b49      	ldr	r3, [pc, #292]	@ (8001ac4 <System_Alarm_View_Mode_Handle+0x25c>)
 80019a0:	7818      	ldrb	r0, [r3, #0]
 80019a2:	4b48      	ldr	r3, [pc, #288]	@ (8001ac4 <System_Alarm_View_Mode_Handle+0x25c>)
 80019a4:	785c      	ldrb	r4, [r3, #1]
 80019a6:	4b47      	ldr	r3, [pc, #284]	@ (8001ac4 <System_Alarm_View_Mode_Handle+0x25c>)
 80019a8:	78dd      	ldrb	r5, [r3, #3]
 80019aa:	4b46      	ldr	r3, [pc, #280]	@ (8001ac4 <System_Alarm_View_Mode_Handle+0x25c>)
 80019ac:	789b      	ldrb	r3, [r3, #2]
 80019ae:	4a45      	ldr	r2, [pc, #276]	@ (8001ac4 <System_Alarm_View_Mode_Handle+0x25c>)
 80019b0:	7912      	ldrb	r2, [r2, #4]
 80019b2:	4942      	ldr	r1, [pc, #264]	@ (8001abc <System_Alarm_View_Mode_Handle+0x254>)
 80019b4:	7909      	ldrb	r1, [r1, #4]
 80019b6:	9102      	str	r1, [sp, #8]
 80019b8:	9201      	str	r2, [sp, #4]
 80019ba:	9300      	str	r3, [sp, #0]
 80019bc:	462b      	mov	r3, r5
 80019be:	4622      	mov	r2, r4
 80019c0:	4601      	mov	r1, r0
 80019c2:	2000      	movs	r0, #0
 80019c4:	f7ff f872 	bl	8000aac <Alarm_Set>
          alarm_setup_data.on_off,
          system_state.alarm_view_cursor   
        );

        // Update the newly set alarm data
        Alarm_Get(system_state.alarm_view_cursor, &alarm_get_data[system_state.alarm_view_cursor]);
 80019c8:	4b3c      	ldr	r3, [pc, #240]	@ (8001abc <System_Alarm_View_Mode_Handle+0x254>)
 80019ca:	791a      	ldrb	r2, [r3, #4]
 80019cc:	4b3b      	ldr	r3, [pc, #236]	@ (8001abc <System_Alarm_View_Mode_Handle+0x254>)
 80019ce:	791b      	ldrb	r3, [r3, #4]
 80019d0:	4619      	mov	r1, r3
 80019d2:	460b      	mov	r3, r1
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	440b      	add	r3, r1
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	4939      	ldr	r1, [pc, #228]	@ (8001ac0 <System_Alarm_View_Mode_Handle+0x258>)
 80019dc:	440b      	add	r3, r1
 80019de:	4619      	mov	r1, r3
 80019e0:	4610      	mov	r0, r2
 80019e2:	f7ff f8b3 	bl	8000b4c <Alarm_Get>
      //   system_param_data.on_off  = alarm_get_data[system_state.cursor].on_off;

      //   // System switches to Alarm Setup Mode
      //   system_state.mode = ALARM_SETUP_MODE;
      // }
      break;
 80019e6:	e05f      	b.n	8001aa8 <System_Alarm_View_Mode_Handle+0x240>

    // Button 3: If pressed, enter Alarm Setup Mode with selected alarm data preloaded (for editing); if held, do nothing (reserved for future use)
    case 3: 
      if      (button->press_flag)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	7b5b      	ldrb	r3, [r3, #13]
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d05c      	beq.n	8001aac <System_Alarm_View_Mode_Handle+0x244>
      {
        // Retrieve the selected alarm data to system parameter data
        alarm_setup_data.minute  = alarm_get_data[system_state.alarm_view_cursor].minute;
 80019f2:	4b32      	ldr	r3, [pc, #200]	@ (8001abc <System_Alarm_View_Mode_Handle+0x254>)
 80019f4:	791b      	ldrb	r3, [r3, #4]
 80019f6:	4619      	mov	r1, r3
 80019f8:	4a31      	ldr	r2, [pc, #196]	@ (8001ac0 <System_Alarm_View_Mode_Handle+0x258>)
 80019fa:	460b      	mov	r3, r1
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	440b      	add	r3, r1
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	4413      	add	r3, r2
 8001a04:	3301      	adds	r3, #1
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	b2da      	uxtb	r2, r3
 8001a0a:	4b2e      	ldr	r3, [pc, #184]	@ (8001ac4 <System_Alarm_View_Mode_Handle+0x25c>)
 8001a0c:	701a      	strb	r2, [r3, #0]
        alarm_setup_data.hour    = alarm_get_data[system_state.alarm_view_cursor].hour;
 8001a0e:	4b2b      	ldr	r3, [pc, #172]	@ (8001abc <System_Alarm_View_Mode_Handle+0x254>)
 8001a10:	791b      	ldrb	r3, [r3, #4]
 8001a12:	4619      	mov	r1, r3
 8001a14:	4a2a      	ldr	r2, [pc, #168]	@ (8001ac0 <System_Alarm_View_Mode_Handle+0x258>)
 8001a16:	460b      	mov	r3, r1
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	440b      	add	r3, r1
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	4413      	add	r3, r2
 8001a20:	3302      	adds	r3, #2
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	b2da      	uxtb	r2, r3
 8001a26:	4b27      	ldr	r3, [pc, #156]	@ (8001ac4 <System_Alarm_View_Mode_Handle+0x25c>)
 8001a28:	705a      	strb	r2, [r3, #1]
        alarm_setup_data.dy_dt   = alarm_get_data[system_state.alarm_view_cursor].dy_dt;
 8001a2a:	4b24      	ldr	r3, [pc, #144]	@ (8001abc <System_Alarm_View_Mode_Handle+0x254>)
 8001a2c:	791b      	ldrb	r3, [r3, #4]
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4a23      	ldr	r2, [pc, #140]	@ (8001ac0 <System_Alarm_View_Mode_Handle+0x258>)
 8001a32:	460b      	mov	r3, r1
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	440b      	add	r3, r1
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	4413      	add	r3, r2
 8001a3c:	3303      	adds	r3, #3
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	b2da      	uxtb	r2, r3
 8001a42:	4b20      	ldr	r3, [pc, #128]	@ (8001ac4 <System_Alarm_View_Mode_Handle+0x25c>)
 8001a44:	709a      	strb	r2, [r3, #2]
        alarm_setup_data.dow_dom = alarm_get_data[system_state.alarm_view_cursor].dow_dom;
 8001a46:	4b1d      	ldr	r3, [pc, #116]	@ (8001abc <System_Alarm_View_Mode_Handle+0x254>)
 8001a48:	791b      	ldrb	r3, [r3, #4]
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4a1c      	ldr	r2, [pc, #112]	@ (8001ac0 <System_Alarm_View_Mode_Handle+0x258>)
 8001a4e:	460b      	mov	r3, r1
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	440b      	add	r3, r1
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	4413      	add	r3, r2
 8001a58:	3304      	adds	r3, #4
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	b2da      	uxtb	r2, r3
 8001a5e:	4b19      	ldr	r3, [pc, #100]	@ (8001ac4 <System_Alarm_View_Mode_Handle+0x25c>)
 8001a60:	70da      	strb	r2, [r3, #3]
        alarm_setup_data.on_off  = alarm_get_data[system_state.alarm_view_cursor].on_off;
 8001a62:	4b16      	ldr	r3, [pc, #88]	@ (8001abc <System_Alarm_View_Mode_Handle+0x254>)
 8001a64:	791b      	ldrb	r3, [r3, #4]
 8001a66:	4619      	mov	r1, r3
 8001a68:	4a15      	ldr	r2, [pc, #84]	@ (8001ac0 <System_Alarm_View_Mode_Handle+0x258>)
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	440b      	add	r3, r1
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	4413      	add	r3, r2
 8001a74:	3305      	adds	r3, #5
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	b2da      	uxtb	r2, r3
 8001a7a:	4b12      	ldr	r3, [pc, #72]	@ (8001ac4 <System_Alarm_View_Mode_Handle+0x25c>)
 8001a7c:	711a      	strb	r2, [r3, #4]

        // System switches to Alarm Setup Mode
        system_state.mode = ALARM_SETUP_MODE;
 8001a7e:	4b0f      	ldr	r3, [pc, #60]	@ (8001abc <System_Alarm_View_Mode_Handle+0x254>)
 8001a80:	2202      	movs	r2, #2
 8001a82:	701a      	strb	r2, [r3, #0]

        // Set the system past mode to alarm view mode
        system_state.past_mode = ALARM_VIEW_MODE;
 8001a84:	4b0d      	ldr	r3, [pc, #52]	@ (8001abc <System_Alarm_View_Mode_Handle+0x254>)
 8001a86:	2203      	movs	r2, #3
 8001a88:	705a      	strb	r2, [r3, #1]
      //   Alarm_Clear(system_state.cursor);

      //   // Update alarm data
      //   Alarm_Get(system_state.cursor, &alarm_get_data[system_state.cursor]);
      // }
      break;
 8001a8a:	e00f      	b.n	8001aac <System_Alarm_View_Mode_Handle+0x244>

    // Button 4: If pressed, cycle through the time setup fields; if held, do nothing (reserved for future use)
    case 4:
      // If pressed, cycle to the next system mode
      if (button->press_flag)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	7b5b      	ldrb	r3, [r3, #13]
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d00c      	beq.n	8001ab0 <System_Alarm_View_Mode_Handle+0x248>
      {
        // Cycle through the next system mode
        system_state.mode = SYSTEM_OPTIONS_MODE;
 8001a96:	4b09      	ldr	r3, [pc, #36]	@ (8001abc <System_Alarm_View_Mode_Handle+0x254>)
 8001a98:	2205      	movs	r2, #5
 8001a9a:	701a      	strb	r2, [r3, #0]

        // Set the system past mode to alarm view mode
        system_state.past_mode = ALARM_VIEW_MODE;
 8001a9c:	4b07      	ldr	r3, [pc, #28]	@ (8001abc <System_Alarm_View_Mode_Handle+0x254>)
 8001a9e:	2203      	movs	r2, #3
 8001aa0:	705a      	strb	r2, [r3, #1]
      // else if (button->hold_flag && !button->latch)
      // {
      //   system_state.mode = DEFAULT_MODE; 
      //   button->latch = true;
      // }
      break;
 8001aa2:	e005      	b.n	8001ab0 <System_Alarm_View_Mode_Handle+0x248>

    default: 
      break;
 8001aa4:	bf00      	nop
 8001aa6:	e004      	b.n	8001ab2 <System_Alarm_View_Mode_Handle+0x24a>
      break;
 8001aa8:	bf00      	nop
 8001aaa:	e002      	b.n	8001ab2 <System_Alarm_View_Mode_Handle+0x24a>
      break;
 8001aac:	bf00      	nop
 8001aae:	e000      	b.n	8001ab2 <System_Alarm_View_Mode_Handle+0x24a>
      break;
 8001ab0:	bf00      	nop
  }
}
 8001ab2:	bf00      	nop
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bdb0      	pop	{r4, r5, r7, pc}
 8001aba:	bf00      	nop
 8001abc:	200000fc 	.word	0x200000fc
 8001ac0:	2000011c 	.word	0x2000011c
 8001ac4:	2000010c 	.word	0x2000010c

08001ac8 <System_Options_Mode_Handle>:
 * @brief  Handles the system options mode based on button actions.
 * @param  button: Pointer to the BUTTON structure containing button state and index.
 * @retval None
 */
void System_Options_Mode_Handle (BUTTON_DATA *button)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  switch (button->index) 
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	799b      	ldrb	r3, [r3, #6]
 8001ad4:	2b04      	cmp	r3, #4
 8001ad6:	d87c      	bhi.n	8001bd2 <System_Options_Mode_Handle+0x10a>
 8001ad8:	a201      	add	r2, pc, #4	@ (adr r2, 8001ae0 <System_Options_Mode_Handle+0x18>)
 8001ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ade:	bf00      	nop
 8001ae0:	08001af5 	.word	0x08001af5
 8001ae4:	08001b1f 	.word	0x08001b1f
 8001ae8:	08001b49 	.word	0x08001b49
 8001aec:	08001bab 	.word	0x08001bab
 8001af0:	08001bbb 	.word	0x08001bbb
  {
    // Button 0: If pressed, increment the selection cursor; if held, do nothing (reserved for future use)
    case 0:
      if      (button->press_flag)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	7b5b      	ldrb	r3, [r3, #13]
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d00c      	beq.n	8001b18 <System_Options_Mode_Handle+0x50>
      {
        system_state.system_opt_cursor = (system_state.system_opt_cursor == SYSTEM_OPT_CURSOR_MAX) ? 0 : (system_state.system_opt_cursor + 1);
 8001afe:	4b39      	ldr	r3, [pc, #228]	@ (8001be4 <System_Options_Mode_Handle+0x11c>)
 8001b00:	795b      	ldrb	r3, [r3, #5]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d004      	beq.n	8001b10 <System_Options_Mode_Handle+0x48>
 8001b06:	4b37      	ldr	r3, [pc, #220]	@ (8001be4 <System_Options_Mode_Handle+0x11c>)
 8001b08:	795b      	ldrb	r3, [r3, #5]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	e000      	b.n	8001b12 <System_Options_Mode_Handle+0x4a>
 8001b10:	2300      	movs	r3, #0
 8001b12:	4a34      	ldr	r2, [pc, #208]	@ (8001be4 <System_Options_Mode_Handle+0x11c>)
 8001b14:	7153      	strb	r3, [r2, #5]
      }
      else if (button->hold_flag)
      {
        // Reserved
      }
      break;
 8001b16:	e061      	b.n	8001bdc <System_Options_Mode_Handle+0x114>
      else if (button->hold_flag)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	7b9b      	ldrb	r3, [r3, #14]
      break;
 8001b1c:	e05e      	b.n	8001bdc <System_Options_Mode_Handle+0x114>
    
    // Button 1: If pressed, decrement the selection cursor; if held, do nothing (reserved for future use)
    case 1:
      if      (button->press_flag)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	7b5b      	ldrb	r3, [r3, #13]
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d00c      	beq.n	8001b42 <System_Options_Mode_Handle+0x7a>
      {
        system_state.system_opt_cursor = (system_state.system_opt_cursor == 0) ? SYSTEM_OPT_CURSOR_MAX : (system_state.system_opt_cursor - 1);
 8001b28:	4b2e      	ldr	r3, [pc, #184]	@ (8001be4 <System_Options_Mode_Handle+0x11c>)
 8001b2a:	795b      	ldrb	r3, [r3, #5]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d004      	beq.n	8001b3a <System_Options_Mode_Handle+0x72>
 8001b30:	4b2c      	ldr	r3, [pc, #176]	@ (8001be4 <System_Options_Mode_Handle+0x11c>)
 8001b32:	795b      	ldrb	r3, [r3, #5]
 8001b34:	3b01      	subs	r3, #1
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	e000      	b.n	8001b3c <System_Options_Mode_Handle+0x74>
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	4a29      	ldr	r2, [pc, #164]	@ (8001be4 <System_Options_Mode_Handle+0x11c>)
 8001b3e:	7153      	strb	r3, [r2, #5]
      }
      else if (button->hold_flag)
      {
        // Reserved
      }
      break;
 8001b40:	e04c      	b.n	8001bdc <System_Options_Mode_Handle+0x114>
      else if (button->hold_flag)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	7b9b      	ldrb	r3, [r3, #14]
      break;
 8001b46:	e049      	b.n	8001bdc <System_Options_Mode_Handle+0x114>
    
    // Button 2: If pressed, operate the selected option; if held, do nothing (reserved for future use)
    case 2:
      if      (button->press_flag)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	7b5b      	ldrb	r3, [r3, #13]
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d026      	beq.n	8001ba0 <System_Options_Mode_Handle+0xd8>
      {
        switch (system_state.system_opt_cursor)
 8001b52:	4b24      	ldr	r3, [pc, #144]	@ (8001be4 <System_Options_Mode_Handle+0x11c>)
 8001b54:	795b      	ldrb	r3, [r3, #5]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d002      	beq.n	8001b60 <System_Options_Mode_Handle+0x98>
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d023      	beq.n	8001ba6 <System_Options_Mode_Handle+0xde>
          case CONTRIBUTOR_INFO:
            // Display contributor information
            break;

          default:
            break;
 8001b5e:	e023      	b.n	8001ba8 <System_Options_Mode_Handle+0xe0>
            for (int i = 0; i < ALARM_SLOT_NUM; i++)
 8001b60:	2300      	movs	r3, #0
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	e013      	b.n	8001b8e <System_Options_Mode_Handle+0xc6>
              Alarm_Clear(i);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff f84a 	bl	8000c04 <Alarm_Clear>
              Alarm_Get(i, &alarm_get_data[i]);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	b2d8      	uxtb	r0, r3
 8001b74:	68fa      	ldr	r2, [r7, #12]
 8001b76:	4613      	mov	r3, r2
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	4413      	add	r3, r2
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	4a1a      	ldr	r2, [pc, #104]	@ (8001be8 <System_Options_Mode_Handle+0x120>)
 8001b80:	4413      	add	r3, r2
 8001b82:	4619      	mov	r1, r3
 8001b84:	f7fe ffe2 	bl	8000b4c <Alarm_Get>
            for (int i = 0; i < ALARM_SLOT_NUM; i++)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2b09      	cmp	r3, #9
 8001b92:	dde8      	ble.n	8001b66 <System_Options_Mode_Handle+0x9e>
            alarm_slot_ptr = 0;
 8001b94:	4b15      	ldr	r3, [pc, #84]	@ (8001bec <System_Options_Mode_Handle+0x124>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	701a      	strb	r2, [r3, #0]
            Alarm_Slot_Pointer_Set();
 8001b9a:	f7ff f855 	bl	8000c48 <Alarm_Slot_Pointer_Set>
            break;
 8001b9e:	e003      	b.n	8001ba8 <System_Options_Mode_Handle+0xe0>
        }
      }
      else if (button->hold_flag)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	7b9b      	ldrb	r3, [r3, #14]
      {
        // Reserved
      }
      break;
 8001ba4:	e01a      	b.n	8001bdc <System_Options_Mode_Handle+0x114>
            break;
 8001ba6:	bf00      	nop
      break;
 8001ba8:	e018      	b.n	8001bdc <System_Options_Mode_Handle+0x114>

    case 3: 
      if      (button->press_flag)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	7b5b      	ldrb	r3, [r3, #13]
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d110      	bne.n	8001bd6 <System_Options_Mode_Handle+0x10e>
      {

      }
      else if (button->hold_flag)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	7b9b      	ldrb	r3, [r3, #14]
      {
        // Reserved
      }
      break;
 8001bb8:	e00d      	b.n	8001bd6 <System_Options_Mode_Handle+0x10e>
    
    // Button 4: If pressed, cycle through the time setup fields; if held, do nothing (reserved for future use)
    case 4:
      // If pressed, cycle through the next system mode
      if      (button->press_flag)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	7b5b      	ldrb	r3, [r3, #13]
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d00a      	beq.n	8001bda <System_Options_Mode_Handle+0x112>
      {
        // system_state.mode = (system_state.mode < (SYSTEM_MODE_NUM - 1)) ? (system_state.mode + 1) : 0;

        // Cycle through the next system mode
        system_state.mode = DEFAULT_MODE;
 8001bc4:	4b07      	ldr	r3, [pc, #28]	@ (8001be4 <System_Options_Mode_Handle+0x11c>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	701a      	strb	r2, [r3, #0]

        // Set the system past mode to system options mode
        system_state.past_mode = SYSTEM_OPTIONS_MODE;
 8001bca:	4b06      	ldr	r3, [pc, #24]	@ (8001be4 <System_Options_Mode_Handle+0x11c>)
 8001bcc:	2205      	movs	r2, #5
 8001bce:	705a      	strb	r2, [r3, #1]
      // // If held, set the mode to default
      // else if (button->hold_flag)
      // {
      //   system_state.mode = DEFAULT_MODE;
      // }
      break;
 8001bd0:	e003      	b.n	8001bda <System_Options_Mode_Handle+0x112>

    default: 
      break;
 8001bd2:	bf00      	nop
 8001bd4:	e002      	b.n	8001bdc <System_Options_Mode_Handle+0x114>
      break;
 8001bd6:	bf00      	nop
 8001bd8:	e000      	b.n	8001bdc <System_Options_Mode_Handle+0x114>
      break;
 8001bda:	bf00      	nop
  }
}
 8001bdc:	bf00      	nop
 8001bde:	3710      	adds	r7, #16
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	200000fc 	.word	0x200000fc
 8001be8:	2000011c 	.word	0x2000011c
 8001bec:	20000158 	.word	0x20000158

08001bf0 <System_Alarm_Active_Mode_Handle>:
 * @brief  Handles the alarm active mode based on button actions.
 * @param  button: Pointer to the BUTTON structure containing button state and index.
 * @retval None
 */
void System_Alarm_Active_Mode_Handle (BUTTON_DATA *button)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  // Handle button actions in alarm active mode
  switch (button->index) 
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	799b      	ldrb	r3, [r3, #6]
 8001bfc:	2b04      	cmp	r3, #4
 8001bfe:	f200 808a 	bhi.w	8001d16 <System_Alarm_Active_Mode_Handle+0x126>
 8001c02:	a201      	add	r2, pc, #4	@ (adr r2, 8001c08 <System_Alarm_Active_Mode_Handle+0x18>)
 8001c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c08:	08001c1d 	.word	0x08001c1d
 8001c0c:	08001c57 	.word	0x08001c57
 8001c10:	08001c87 	.word	0x08001c87
 8001c14:	08001cb7 	.word	0x08001cb7
 8001c18:	08001ce7 	.word	0x08001ce7
  {
    // Button 0: If pressed, stop ringing the alarm; if held, do nothing (reserved for future use)
    case 0:
      // If pressed, cycle through the time setup fields
      if (button->press_flag)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	7b5b      	ldrb	r3, [r3, #13]
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d00f      	beq.n	8001c46 <System_Alarm_Active_Mode_Handle+0x56>
      {
        // Stop ringing the alarm
        alarm_active_flag = false; 
 8001c26:	4b3f      	ldr	r3, [pc, #252]	@ (8001d24 <System_Alarm_Active_Mode_Handle+0x134>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	701a      	strb	r2, [r3, #0]

        // Return to the previous mode
        system_state.mode = system_state.past_mode; 
 8001c2c:	4b3e      	ldr	r3, [pc, #248]	@ (8001d28 <System_Alarm_Active_Mode_Handle+0x138>)
 8001c2e:	785a      	ldrb	r2, [r3, #1]
 8001c30:	4b3d      	ldr	r3, [pc, #244]	@ (8001d28 <System_Alarm_Active_Mode_Handle+0x138>)
 8001c32:	701a      	strb	r2, [r3, #0]

        // Set the system past mode to alarm active mode
        system_state.past_mode = ALARM_ACTIVE_MODE; 
 8001c34:	4b3c      	ldr	r3, [pc, #240]	@ (8001d28 <System_Alarm_Active_Mode_Handle+0x138>)
 8001c36:	2204      	movs	r2, #4
 8001c38:	705a      	strb	r2, [r3, #1]

        // Reset the buzzer
        HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, BUZZER_INACTIVE); 
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	2101      	movs	r1, #1
 8001c3e:	483b      	ldr	r0, [pc, #236]	@ (8001d2c <System_Alarm_Active_Mode_Handle+0x13c>)
 8001c40:	f001 faad 	bl	800319e <HAL_GPIO_WritePin>
      // If held, do nothing (reserved for future use)
      else if (button->hold_flag && !button->latch)
      {
        // Reserved
      }
      break;
 8001c44:	e069      	b.n	8001d1a <System_Alarm_Active_Mode_Handle+0x12a>
      else if (button->hold_flag && !button->latch)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	7b9b      	ldrb	r3, [r3, #14]
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d064      	beq.n	8001d1a <System_Alarm_Active_Mode_Handle+0x12a>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	7bdb      	ldrb	r3, [r3, #15]
      break;
 8001c54:	e061      	b.n	8001d1a <System_Alarm_Active_Mode_Handle+0x12a>

    // Button 1: If pressed, stop ringing the alarm; if held, do nothing (reserved for future use)
    case 1:
      if      (button->press_flag)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	7b5b      	ldrb	r3, [r3, #13]
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d00f      	beq.n	8001c80 <System_Alarm_Active_Mode_Handle+0x90>
      {
        // Stop ringing the alarm
        alarm_active_flag = false;  
 8001c60:	4b30      	ldr	r3, [pc, #192]	@ (8001d24 <System_Alarm_Active_Mode_Handle+0x134>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	701a      	strb	r2, [r3, #0]

        // Return to the previous mode
        system_state.mode = system_state.past_mode; 
 8001c66:	4b30      	ldr	r3, [pc, #192]	@ (8001d28 <System_Alarm_Active_Mode_Handle+0x138>)
 8001c68:	785a      	ldrb	r2, [r3, #1]
 8001c6a:	4b2f      	ldr	r3, [pc, #188]	@ (8001d28 <System_Alarm_Active_Mode_Handle+0x138>)
 8001c6c:	701a      	strb	r2, [r3, #0]

        // Set the system past mode to alarm active mode
        system_state.past_mode = ALARM_ACTIVE_MODE; 
 8001c6e:	4b2e      	ldr	r3, [pc, #184]	@ (8001d28 <System_Alarm_Active_Mode_Handle+0x138>)
 8001c70:	2204      	movs	r2, #4
 8001c72:	705a      	strb	r2, [r3, #1]

        // Reset the buzzer
        HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, BUZZER_INACTIVE); 
 8001c74:	2201      	movs	r2, #1
 8001c76:	2101      	movs	r1, #1
 8001c78:	482c      	ldr	r0, [pc, #176]	@ (8001d2c <System_Alarm_Active_Mode_Handle+0x13c>)
 8001c7a:	f001 fa90 	bl	800319e <HAL_GPIO_WritePin>
      }
      else if (button->hold_flag)
      {
        // Reserved 
      }
      break;
 8001c7e:	e04d      	b.n	8001d1c <System_Alarm_Active_Mode_Handle+0x12c>
      else if (button->hold_flag)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	7b9b      	ldrb	r3, [r3, #14]
      break;
 8001c84:	e04a      	b.n	8001d1c <System_Alarm_Active_Mode_Handle+0x12c>

    // Button 2: If pressed, stop ringing the alarm; if held, do nothing (reserved for future use)
    case 2:
      if      (button->press_flag)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	7b5b      	ldrb	r3, [r3, #13]
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d00f      	beq.n	8001cb0 <System_Alarm_Active_Mode_Handle+0xc0>
      {
        // Stop ringing the alarm
        alarm_active_flag = false;  
 8001c90:	4b24      	ldr	r3, [pc, #144]	@ (8001d24 <System_Alarm_Active_Mode_Handle+0x134>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	701a      	strb	r2, [r3, #0]

        // Return to the previous mode
        system_state.mode = system_state.past_mode; 
 8001c96:	4b24      	ldr	r3, [pc, #144]	@ (8001d28 <System_Alarm_Active_Mode_Handle+0x138>)
 8001c98:	785a      	ldrb	r2, [r3, #1]
 8001c9a:	4b23      	ldr	r3, [pc, #140]	@ (8001d28 <System_Alarm_Active_Mode_Handle+0x138>)
 8001c9c:	701a      	strb	r2, [r3, #0]

        // Set the system past mode to alarm active mode
        system_state.past_mode = ALARM_ACTIVE_MODE; 
 8001c9e:	4b22      	ldr	r3, [pc, #136]	@ (8001d28 <System_Alarm_Active_Mode_Handle+0x138>)
 8001ca0:	2204      	movs	r2, #4
 8001ca2:	705a      	strb	r2, [r3, #1]

        // Reset the buzzer
        HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, BUZZER_INACTIVE); 
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	4820      	ldr	r0, [pc, #128]	@ (8001d2c <System_Alarm_Active_Mode_Handle+0x13c>)
 8001caa:	f001 fa78 	bl	800319e <HAL_GPIO_WritePin>
      }
      else if (button->hold_flag)
      {
        // Reserved
      }
      break;
 8001cae:	e035      	b.n	8001d1c <System_Alarm_Active_Mode_Handle+0x12c>
      else if (button->hold_flag)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	7b9b      	ldrb	r3, [r3, #14]
      break;
 8001cb4:	e032      	b.n	8001d1c <System_Alarm_Active_Mode_Handle+0x12c>
    
    // Button 3: If pressed, stop ringing the alarm; if held, do nothing (reserved for future use)
    case 3:
      if      (button->press_flag)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	7b5b      	ldrb	r3, [r3, #13]
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d00f      	beq.n	8001ce0 <System_Alarm_Active_Mode_Handle+0xf0>
      {
        // Stop ringing the alarm
        alarm_active_flag = false;  
 8001cc0:	4b18      	ldr	r3, [pc, #96]	@ (8001d24 <System_Alarm_Active_Mode_Handle+0x134>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	701a      	strb	r2, [r3, #0]

        // Return to the previous mode
        system_state.mode = system_state.past_mode; 
 8001cc6:	4b18      	ldr	r3, [pc, #96]	@ (8001d28 <System_Alarm_Active_Mode_Handle+0x138>)
 8001cc8:	785a      	ldrb	r2, [r3, #1]
 8001cca:	4b17      	ldr	r3, [pc, #92]	@ (8001d28 <System_Alarm_Active_Mode_Handle+0x138>)
 8001ccc:	701a      	strb	r2, [r3, #0]

        // Set the system past mode to alarm active mode
        system_state.past_mode = ALARM_ACTIVE_MODE; 
 8001cce:	4b16      	ldr	r3, [pc, #88]	@ (8001d28 <System_Alarm_Active_Mode_Handle+0x138>)
 8001cd0:	2204      	movs	r2, #4
 8001cd2:	705a      	strb	r2, [r3, #1]

        // Reset the buzzer
        HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, BUZZER_INACTIVE); 
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	4814      	ldr	r0, [pc, #80]	@ (8001d2c <System_Alarm_Active_Mode_Handle+0x13c>)
 8001cda:	f001 fa60 	bl	800319e <HAL_GPIO_WritePin>
      }
      else if (button->hold_flag)
      {
        // Reserved
      }
      break;
 8001cde:	e01d      	b.n	8001d1c <System_Alarm_Active_Mode_Handle+0x12c>
      else if (button->hold_flag)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	7b9b      	ldrb	r3, [r3, #14]
      break;
 8001ce4:	e01a      	b.n	8001d1c <System_Alarm_Active_Mode_Handle+0x12c>

    // Button 4: If pressed, stop ringing the alarm; if held, do nothing (reserved for future use)
    case 4: 
      if      (button->press_flag)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	7b5b      	ldrb	r3, [r3, #13]
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d00f      	beq.n	8001d10 <System_Alarm_Active_Mode_Handle+0x120>
      {
        // Stop ringing the alarm
        alarm_active_flag = false;  
 8001cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8001d24 <System_Alarm_Active_Mode_Handle+0x134>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	701a      	strb	r2, [r3, #0]

        // Return to the previous mode
        system_state.mode = system_state.past_mode; 
 8001cf6:	4b0c      	ldr	r3, [pc, #48]	@ (8001d28 <System_Alarm_Active_Mode_Handle+0x138>)
 8001cf8:	785a      	ldrb	r2, [r3, #1]
 8001cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8001d28 <System_Alarm_Active_Mode_Handle+0x138>)
 8001cfc:	701a      	strb	r2, [r3, #0]

        // Set the system past mode to alarm active mode
        system_state.past_mode = ALARM_ACTIVE_MODE; 
 8001cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8001d28 <System_Alarm_Active_Mode_Handle+0x138>)
 8001d00:	2204      	movs	r2, #4
 8001d02:	705a      	strb	r2, [r3, #1]

        // Reset the buzzer
        HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, BUZZER_INACTIVE); 
 8001d04:	2201      	movs	r2, #1
 8001d06:	2101      	movs	r1, #1
 8001d08:	4808      	ldr	r0, [pc, #32]	@ (8001d2c <System_Alarm_Active_Mode_Handle+0x13c>)
 8001d0a:	f001 fa48 	bl	800319e <HAL_GPIO_WritePin>
      }
      else if (button->hold_flag)
      {
        // Reserved
      }
      break;
 8001d0e:	e005      	b.n	8001d1c <System_Alarm_Active_Mode_Handle+0x12c>
      else if (button->hold_flag)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	7b9b      	ldrb	r3, [r3, #14]
      break;
 8001d14:	e002      	b.n	8001d1c <System_Alarm_Active_Mode_Handle+0x12c>

    default: 
      break;
 8001d16:	bf00      	nop
 8001d18:	e000      	b.n	8001d1c <System_Alarm_Active_Mode_Handle+0x12c>
      break;
 8001d1a:	bf00      	nop
  }
}
 8001d1c:	bf00      	nop
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	2000015c 	.word	0x2000015c
 8001d28:	200000fc 	.word	0x200000fc
 8001d2c:	40010c00 	.word	0x40010c00

08001d30 <HAL_GPIO_EXTI_Callback>:
  * @brief  Callback function to handle GPIO interrupts.
  * @param  GPIO_Pin: The pin number of the GPIO that triggered the interrupt.
  * @retval None
*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8001d3a:	88fb      	ldrh	r3, [r7, #6]
 8001d3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001d40:	d02a      	beq.n	8001d98 <HAL_GPIO_EXTI_Callback+0x68>
 8001d42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001d46:	dc2f      	bgt.n	8001da8 <HAL_GPIO_EXTI_Callback+0x78>
 8001d48:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001d4c:	d020      	beq.n	8001d90 <HAL_GPIO_EXTI_Callback+0x60>
 8001d4e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001d52:	dc29      	bgt.n	8001da8 <HAL_GPIO_EXTI_Callback+0x78>
 8001d54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d58:	d016      	beq.n	8001d88 <HAL_GPIO_EXTI_Callback+0x58>
 8001d5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d5e:	dc23      	bgt.n	8001da8 <HAL_GPIO_EXTI_Callback+0x78>
 8001d60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d64:	d00c      	beq.n	8001d80 <HAL_GPIO_EXTI_Callback+0x50>
 8001d66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d6a:	dc1d      	bgt.n	8001da8 <HAL_GPIO_EXTI_Callback+0x78>
 8001d6c:	2b20      	cmp	r3, #32
 8001d6e:	d003      	beq.n	8001d78 <HAL_GPIO_EXTI_Callback+0x48>
 8001d70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d74:	d014      	beq.n	8001da0 <HAL_GPIO_EXTI_Callback+0x70>
      button4.int_flag = true;
      break;  

    default:
      // Handle other GPIO interrupts if necessary
      break;
 8001d76:	e017      	b.n	8001da8 <HAL_GPIO_EXTI_Callback+0x78>
      rtc_int_flag = true;
 8001d78:	4b0e      	ldr	r3, [pc, #56]	@ (8001db4 <HAL_GPIO_EXTI_Callback+0x84>)
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	701a      	strb	r2, [r3, #0]
      break;
 8001d7e:	e014      	b.n	8001daa <HAL_GPIO_EXTI_Callback+0x7a>
      button0.int_flag = true;
 8001d80:	4b0d      	ldr	r3, [pc, #52]	@ (8001db8 <HAL_GPIO_EXTI_Callback+0x88>)
 8001d82:	2201      	movs	r2, #1
 8001d84:	731a      	strb	r2, [r3, #12]
      break;
 8001d86:	e010      	b.n	8001daa <HAL_GPIO_EXTI_Callback+0x7a>
      button1.int_flag = true;
 8001d88:	4b0c      	ldr	r3, [pc, #48]	@ (8001dbc <HAL_GPIO_EXTI_Callback+0x8c>)
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	731a      	strb	r2, [r3, #12]
      break;
 8001d8e:	e00c      	b.n	8001daa <HAL_GPIO_EXTI_Callback+0x7a>
      button2.int_flag = true;
 8001d90:	4b0b      	ldr	r3, [pc, #44]	@ (8001dc0 <HAL_GPIO_EXTI_Callback+0x90>)
 8001d92:	2201      	movs	r2, #1
 8001d94:	731a      	strb	r2, [r3, #12]
      break;
 8001d96:	e008      	b.n	8001daa <HAL_GPIO_EXTI_Callback+0x7a>
      button3.int_flag = true;
 8001d98:	4b0a      	ldr	r3, [pc, #40]	@ (8001dc4 <HAL_GPIO_EXTI_Callback+0x94>)
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	731a      	strb	r2, [r3, #12]
      break;  
 8001d9e:	e004      	b.n	8001daa <HAL_GPIO_EXTI_Callback+0x7a>
      button4.int_flag = true;
 8001da0:	4b09      	ldr	r3, [pc, #36]	@ (8001dc8 <HAL_GPIO_EXTI_Callback+0x98>)
 8001da2:	2201      	movs	r2, #1
 8001da4:	731a      	strb	r2, [r3, #12]
      break;  
 8001da6:	e000      	b.n	8001daa <HAL_GPIO_EXTI_Callback+0x7a>
      break;
 8001da8:	bf00      	nop
  }
}
 8001daa:	bf00      	nop
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bc80      	pop	{r7}
 8001db2:	4770      	bx	lr
 8001db4:	20000159 	.word	0x20000159
 8001db8:	20000000 	.word	0x20000000
 8001dbc:	20000010 	.word	0x20000010
 8001dc0:	20000020 	.word	0x20000020
 8001dc4:	20000030 	.word	0x20000030
 8001dc8:	20000040 	.word	0x20000040

08001dcc <HAL_UART_RxCpltCallback>:
  * @brief  Callback function to handle UART interrupts.
  * @param  huart: Pointer to the UART handle.
  * @retval None
*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  // Verify the UART instance to ensure the callback is for USART1
  // If the UART instance is USART1, store the received data into the uart_rx_data array
  if(huart->Instance == USART1)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a09      	ldr	r2, [pc, #36]	@ (8001e00 <HAL_UART_RxCpltCallback+0x34>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d10a      	bne.n	8001df4 <HAL_UART_RxCpltCallback+0x28>
  {
    // Store the received data into the uart_rx_data array
    uart_rx_hour = uart_rx_data[0];
 8001dde:	4b09      	ldr	r3, [pc, #36]	@ (8001e04 <HAL_UART_RxCpltCallback+0x38>)
 8001de0:	781a      	ldrb	r2, [r3, #0]
 8001de2:	4b09      	ldr	r3, [pc, #36]	@ (8001e08 <HAL_UART_RxCpltCallback+0x3c>)
 8001de4:	701a      	strb	r2, [r3, #0]
    uart_rx_minute = uart_rx_data[1];
 8001de6:	4b07      	ldr	r3, [pc, #28]	@ (8001e04 <HAL_UART_RxCpltCallback+0x38>)
 8001de8:	785a      	ldrb	r2, [r3, #1]
 8001dea:	4b08      	ldr	r3, [pc, #32]	@ (8001e0c <HAL_UART_RxCpltCallback+0x40>)
 8001dec:	701a      	strb	r2, [r3, #0]

    // Set the UART receive flag
    uart_rx_flag = 1;
 8001dee:	4b08      	ldr	r3, [pc, #32]	@ (8001e10 <HAL_UART_RxCpltCallback+0x44>)
 8001df0:	2201      	movs	r2, #1
 8001df2:	701a      	strb	r2, [r3, #0]
  }
}
 8001df4:	bf00      	nop
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bc80      	pop	{r7}
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	40013800 	.word	0x40013800
 8001e04:	2000016c 	.word	0x2000016c
 8001e08:	2000016e 	.word	0x2000016e
 8001e0c:	2000016f 	.word	0x2000016f
 8001e10:	2000016a 	.word	0x2000016a

08001e14 <HAL_ADC_ConvCpltCallback>:
  * @brief  Callback function to handle ADC conversion complete interrupts.
  * @param  hadc: Pointer to the ADC handle.
  * @retval None
*/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
	// Verify the ADC instance to ensure the callback is for ADC1
  // If the ADC instance is ADC1, get the ADC value and calculate the battery percentage
  if (hadc == &hadc1)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4a10      	ldr	r2, [pc, #64]	@ (8001e60 <HAL_ADC_ConvCpltCallback+0x4c>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d119      	bne.n	8001e58 <HAL_ADC_ConvCpltCallback+0x44>
	{
    // Get the ADC value
    adc_data = HAL_ADC_GetValue(&hadc1);
 8001e24:	480e      	ldr	r0, [pc, #56]	@ (8001e60 <HAL_ADC_ConvCpltCallback+0x4c>)
 8001e26:	f000 fbef 	bl	8002608 <HAL_ADC_GetValue>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	b29a      	uxth	r2, r3
 8001e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001e64 <HAL_ADC_ConvCpltCallback+0x50>)
 8001e30:	801a      	strh	r2, [r3, #0]

    // Set the ADC valid flag
    adc_valid_flag = 1;
 8001e32:	4b0d      	ldr	r3, [pc, #52]	@ (8001e68 <HAL_ADC_ConvCpltCallback+0x54>)
 8001e34:	2201      	movs	r2, #1
 8001e36:	701a      	strb	r2, [r3, #0]

    // Calculate the battery percentage
    battery_percentage = adc_data * 100 / 4095;
 8001e38:	4b0a      	ldr	r3, [pc, #40]	@ (8001e64 <HAL_ADC_ConvCpltCallback+0x50>)
 8001e3a:	881b      	ldrh	r3, [r3, #0]
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	2364      	movs	r3, #100	@ 0x64
 8001e40:	fb02 f303 	mul.w	r3, r2, r3
 8001e44:	4a09      	ldr	r2, [pc, #36]	@ (8001e6c <HAL_ADC_ConvCpltCallback+0x58>)
 8001e46:	fb82 1203 	smull	r1, r2, r2, r3
 8001e4a:	441a      	add	r2, r3
 8001e4c:	12d2      	asrs	r2, r2, #11
 8001e4e:	17db      	asrs	r3, r3, #31
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	4b06      	ldr	r3, [pc, #24]	@ (8001e70 <HAL_ADC_ConvCpltCallback+0x5c>)
 8001e56:	801a      	strh	r2, [r3, #0]
	}
}
 8001e58:	bf00      	nop
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	20000078 	.word	0x20000078
 8001e64:	20000166 	.word	0x20000166
 8001e68:	20000165 	.word	0x20000165
 8001e6c:	80080081 	.word	0x80080081
 8001e70:	20000168 	.word	0x20000168

08001e74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e78:	b672      	cpsid	i
}
 8001e7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e7c:	bf00      	nop
 8001e7e:	e7fd      	b.n	8001e7c <Error_Handler+0x8>

08001e80 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001e84:	4b17      	ldr	r3, [pc, #92]	@ (8001ee4 <MX_SPI1_Init+0x64>)
 8001e86:	4a18      	ldr	r2, [pc, #96]	@ (8001ee8 <MX_SPI1_Init+0x68>)
 8001e88:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e8a:	4b16      	ldr	r3, [pc, #88]	@ (8001ee4 <MX_SPI1_Init+0x64>)
 8001e8c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001e90:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e92:	4b14      	ldr	r3, [pc, #80]	@ (8001ee4 <MX_SPI1_Init+0x64>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e98:	4b12      	ldr	r3, [pc, #72]	@ (8001ee4 <MX_SPI1_Init+0x64>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e9e:	4b11      	ldr	r3, [pc, #68]	@ (8001ee4 <MX_SPI1_Init+0x64>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ea4:	4b0f      	ldr	r3, [pc, #60]	@ (8001ee4 <MX_SPI1_Init+0x64>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001eaa:	4b0e      	ldr	r3, [pc, #56]	@ (8001ee4 <MX_SPI1_Init+0x64>)
 8001eac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001eb0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001eb2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ee4 <MX_SPI1_Init+0x64>)
 8001eb4:	2228      	movs	r2, #40	@ 0x28
 8001eb6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001eb8:	4b0a      	ldr	r3, [pc, #40]	@ (8001ee4 <MX_SPI1_Init+0x64>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ebe:	4b09      	ldr	r3, [pc, #36]	@ (8001ee4 <MX_SPI1_Init+0x64>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ec4:	4b07      	ldr	r3, [pc, #28]	@ (8001ee4 <MX_SPI1_Init+0x64>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001eca:	4b06      	ldr	r3, [pc, #24]	@ (8001ee4 <MX_SPI1_Init+0x64>)
 8001ecc:	220a      	movs	r2, #10
 8001ece:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ed0:	4804      	ldr	r0, [pc, #16]	@ (8001ee4 <MX_SPI1_Init+0x64>)
 8001ed2:	f002 fec1 	bl	8004c58 <HAL_SPI_Init>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001edc:	f7ff ffca 	bl	8001e74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ee0:	bf00      	nop
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	20000178 	.word	0x20000178
 8001ee8:	40013000 	.word	0x40013000

08001eec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b088      	sub	sp, #32
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef4:	f107 0310 	add.w	r3, r7, #16
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	605a      	str	r2, [r3, #4]
 8001efe:	609a      	str	r2, [r3, #8]
 8001f00:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a15      	ldr	r2, [pc, #84]	@ (8001f5c <HAL_SPI_MspInit+0x70>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d123      	bne.n	8001f54 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f0c:	4b14      	ldr	r3, [pc, #80]	@ (8001f60 <HAL_SPI_MspInit+0x74>)
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	4a13      	ldr	r2, [pc, #76]	@ (8001f60 <HAL_SPI_MspInit+0x74>)
 8001f12:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f16:	6193      	str	r3, [r2, #24]
 8001f18:	4b11      	ldr	r3, [pc, #68]	@ (8001f60 <HAL_SPI_MspInit+0x74>)
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f24:	4b0e      	ldr	r3, [pc, #56]	@ (8001f60 <HAL_SPI_MspInit+0x74>)
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	4a0d      	ldr	r2, [pc, #52]	@ (8001f60 <HAL_SPI_MspInit+0x74>)
 8001f2a:	f043 0304 	orr.w	r3, r3, #4
 8001f2e:	6193      	str	r3, [r2, #24]
 8001f30:	4b0b      	ldr	r3, [pc, #44]	@ (8001f60 <HAL_SPI_MspInit+0x74>)
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	f003 0304 	and.w	r3, r3, #4
 8001f38:	60bb      	str	r3, [r7, #8]
 8001f3a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|DIN_Pin;
 8001f3c:	23a0      	movs	r3, #160	@ 0xa0
 8001f3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f40:	2302      	movs	r3, #2
 8001f42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f44:	2303      	movs	r3, #3
 8001f46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f48:	f107 0310 	add.w	r3, r7, #16
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4805      	ldr	r0, [pc, #20]	@ (8001f64 <HAL_SPI_MspInit+0x78>)
 8001f50:	f000 ff8a 	bl	8002e68 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001f54:	bf00      	nop
 8001f56:	3720      	adds	r7, #32
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40013000 	.word	0x40013000
 8001f60:	40021000 	.word	0x40021000
 8001f64:	40010800 	.word	0x40010800

08001f68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f6e:	4b15      	ldr	r3, [pc, #84]	@ (8001fc4 <HAL_MspInit+0x5c>)
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	4a14      	ldr	r2, [pc, #80]	@ (8001fc4 <HAL_MspInit+0x5c>)
 8001f74:	f043 0301 	orr.w	r3, r3, #1
 8001f78:	6193      	str	r3, [r2, #24]
 8001f7a:	4b12      	ldr	r3, [pc, #72]	@ (8001fc4 <HAL_MspInit+0x5c>)
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	60bb      	str	r3, [r7, #8]
 8001f84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f86:	4b0f      	ldr	r3, [pc, #60]	@ (8001fc4 <HAL_MspInit+0x5c>)
 8001f88:	69db      	ldr	r3, [r3, #28]
 8001f8a:	4a0e      	ldr	r2, [pc, #56]	@ (8001fc4 <HAL_MspInit+0x5c>)
 8001f8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f90:	61d3      	str	r3, [r2, #28]
 8001f92:	4b0c      	ldr	r3, [pc, #48]	@ (8001fc4 <HAL_MspInit+0x5c>)
 8001f94:	69db      	ldr	r3, [r3, #28]
 8001f96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f9a:	607b      	str	r3, [r7, #4]
 8001f9c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f9e:	4b0a      	ldr	r3, [pc, #40]	@ (8001fc8 <HAL_MspInit+0x60>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001fb2:	60fb      	str	r3, [r7, #12]
 8001fb4:	4a04      	ldr	r2, [pc, #16]	@ (8001fc8 <HAL_MspInit+0x60>)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fba:	bf00      	nop
 8001fbc:	3714      	adds	r7, #20
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	40010000 	.word	0x40010000

08001fcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fd0:	bf00      	nop
 8001fd2:	e7fd      	b.n	8001fd0 <NMI_Handler+0x4>

08001fd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fd8:	bf00      	nop
 8001fda:	e7fd      	b.n	8001fd8 <HardFault_Handler+0x4>

08001fdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fe0:	bf00      	nop
 8001fe2:	e7fd      	b.n	8001fe0 <MemManage_Handler+0x4>

08001fe4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fe8:	bf00      	nop
 8001fea:	e7fd      	b.n	8001fe8 <BusFault_Handler+0x4>

08001fec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ff0:	bf00      	nop
 8001ff2:	e7fd      	b.n	8001ff0 <UsageFault_Handler+0x4>

08001ff4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ff8:	bf00      	nop
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bc80      	pop	{r7}
 8001ffe:	4770      	bx	lr

08002000 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002004:	bf00      	nop
 8002006:	46bd      	mov	sp, r7
 8002008:	bc80      	pop	{r7}
 800200a:	4770      	bx	lr

0800200c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002010:	bf00      	nop
 8002012:	46bd      	mov	sp, r7
 8002014:	bc80      	pop	{r7}
 8002016:	4770      	bx	lr

08002018 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800201c:	f000 f926 	bl	800226c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002020:	bf00      	nop
 8002022:	bd80      	pop	{r7, pc}

08002024 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002028:	4802      	ldr	r0, [pc, #8]	@ (8002034 <ADC1_2_IRQHandler+0x10>)
 800202a:	f000 faf9 	bl	8002620 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	20000078 	.word	0x20000078

08002038 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RTC_IN5_Pin);
 800203c:	2020      	movs	r0, #32
 800203e:	f001 f8c7 	bl	80031d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON4_IN8_Pin);
 8002042:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002046:	f001 f8c3 	bl	80031d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800204a:	bf00      	nop
 800204c:	bd80      	pop	{r7, pc}
	...

08002050 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002054:	4802      	ldr	r0, [pc, #8]	@ (8002060 <USART1_IRQHandler+0x10>)
 8002056:	f002 fef9 	bl	8004e4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800205a:	bf00      	nop
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	200001d0 	.word	0x200001d0

08002064 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON0_IN12_Pin);
 8002068:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800206c:	f001 f8b0 	bl	80031d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON1_IN13_Pin);
 8002070:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002074:	f001 f8ac 	bl	80031d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON2_IN14_Pin);
 8002078:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800207c:	f001 f8a8 	bl	80031d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON3_IN15_Pin);
 8002080:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002084:	f001 f8a4 	bl	80031d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002088:	bf00      	nop
 800208a:	bd80      	pop	{r7, pc}

0800208c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002090:	bf00      	nop
 8002092:	46bd      	mov	sp, r7
 8002094:	bc80      	pop	{r7}
 8002096:	4770      	bx	lr

08002098 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800209c:	4b11      	ldr	r3, [pc, #68]	@ (80020e4 <MX_USART1_UART_Init+0x4c>)
 800209e:	4a12      	ldr	r2, [pc, #72]	@ (80020e8 <MX_USART1_UART_Init+0x50>)
 80020a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80020a2:	4b10      	ldr	r3, [pc, #64]	@ (80020e4 <MX_USART1_UART_Init+0x4c>)
 80020a4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80020a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020aa:	4b0e      	ldr	r3, [pc, #56]	@ (80020e4 <MX_USART1_UART_Init+0x4c>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80020b0:	4b0c      	ldr	r3, [pc, #48]	@ (80020e4 <MX_USART1_UART_Init+0x4c>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80020b6:	4b0b      	ldr	r3, [pc, #44]	@ (80020e4 <MX_USART1_UART_Init+0x4c>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80020bc:	4b09      	ldr	r3, [pc, #36]	@ (80020e4 <MX_USART1_UART_Init+0x4c>)
 80020be:	220c      	movs	r2, #12
 80020c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020c2:	4b08      	ldr	r3, [pc, #32]	@ (80020e4 <MX_USART1_UART_Init+0x4c>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020c8:	4b06      	ldr	r3, [pc, #24]	@ (80020e4 <MX_USART1_UART_Init+0x4c>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80020ce:	4805      	ldr	r0, [pc, #20]	@ (80020e4 <MX_USART1_UART_Init+0x4c>)
 80020d0:	f002 fe46 	bl	8004d60 <HAL_UART_Init>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80020da:	f7ff fecb 	bl	8001e74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80020de:	bf00      	nop
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	200001d0 	.word	0x200001d0
 80020e8:	40013800 	.word	0x40013800

080020ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b088      	sub	sp, #32
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f4:	f107 0310 	add.w	r3, r7, #16
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	605a      	str	r2, [r3, #4]
 80020fe:	609a      	str	r2, [r3, #8]
 8002100:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a20      	ldr	r2, [pc, #128]	@ (8002188 <HAL_UART_MspInit+0x9c>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d139      	bne.n	8002180 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800210c:	4b1f      	ldr	r3, [pc, #124]	@ (800218c <HAL_UART_MspInit+0xa0>)
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	4a1e      	ldr	r2, [pc, #120]	@ (800218c <HAL_UART_MspInit+0xa0>)
 8002112:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002116:	6193      	str	r3, [r2, #24]
 8002118:	4b1c      	ldr	r3, [pc, #112]	@ (800218c <HAL_UART_MspInit+0xa0>)
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002124:	4b19      	ldr	r3, [pc, #100]	@ (800218c <HAL_UART_MspInit+0xa0>)
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	4a18      	ldr	r2, [pc, #96]	@ (800218c <HAL_UART_MspInit+0xa0>)
 800212a:	f043 0304 	orr.w	r3, r3, #4
 800212e:	6193      	str	r3, [r2, #24]
 8002130:	4b16      	ldr	r3, [pc, #88]	@ (800218c <HAL_UART_MspInit+0xa0>)
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	f003 0304 	and.w	r3, r3, #4
 8002138:	60bb      	str	r3, [r7, #8]
 800213a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800213c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002140:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002142:	2302      	movs	r3, #2
 8002144:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002146:	2303      	movs	r3, #3
 8002148:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800214a:	f107 0310 	add.w	r3, r7, #16
 800214e:	4619      	mov	r1, r3
 8002150:	480f      	ldr	r0, [pc, #60]	@ (8002190 <HAL_UART_MspInit+0xa4>)
 8002152:	f000 fe89 	bl	8002e68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002156:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800215a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800215c:	2300      	movs	r3, #0
 800215e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002160:	2300      	movs	r3, #0
 8002162:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002164:	f107 0310 	add.w	r3, r7, #16
 8002168:	4619      	mov	r1, r3
 800216a:	4809      	ldr	r0, [pc, #36]	@ (8002190 <HAL_UART_MspInit+0xa4>)
 800216c:	f000 fe7c 	bl	8002e68 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002170:	2200      	movs	r2, #0
 8002172:	2100      	movs	r1, #0
 8002174:	2025      	movs	r0, #37	@ 0x25
 8002176:	f000 fd8e 	bl	8002c96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800217a:	2025      	movs	r0, #37	@ 0x25
 800217c:	f000 fda7 	bl	8002cce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002180:	bf00      	nop
 8002182:	3720      	adds	r7, #32
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	40013800 	.word	0x40013800
 800218c:	40021000 	.word	0x40021000
 8002190:	40010800 	.word	0x40010800

08002194 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002194:	f7ff ff7a 	bl	800208c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002198:	480b      	ldr	r0, [pc, #44]	@ (80021c8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800219a:	490c      	ldr	r1, [pc, #48]	@ (80021cc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800219c:	4a0c      	ldr	r2, [pc, #48]	@ (80021d0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800219e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021a0:	e002      	b.n	80021a8 <LoopCopyDataInit>

080021a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021a6:	3304      	adds	r3, #4

080021a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021ac:	d3f9      	bcc.n	80021a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021ae:	4a09      	ldr	r2, [pc, #36]	@ (80021d4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80021b0:	4c09      	ldr	r4, [pc, #36]	@ (80021d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021b4:	e001      	b.n	80021ba <LoopFillZerobss>

080021b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021b8:	3204      	adds	r2, #4

080021ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021bc:	d3fb      	bcc.n	80021b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021be:	f003 fb5f 	bl	8005880 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021c2:	f7fe f955 	bl	8000470 <main>
  bx lr
 80021c6:	4770      	bx	lr
  ldr r0, =_sdata
 80021c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021cc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80021d0:	08005924 	.word	0x08005924
  ldr r2, =_sbss
 80021d4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80021d8:	2000021c 	.word	0x2000021c

080021dc <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021dc:	e7fe      	b.n	80021dc <CAN1_RX1_IRQHandler>
	...

080021e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021e4:	4b08      	ldr	r3, [pc, #32]	@ (8002208 <HAL_Init+0x28>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a07      	ldr	r2, [pc, #28]	@ (8002208 <HAL_Init+0x28>)
 80021ea:	f043 0310 	orr.w	r3, r3, #16
 80021ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021f0:	2003      	movs	r0, #3
 80021f2:	f000 fd45 	bl	8002c80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021f6:	200f      	movs	r0, #15
 80021f8:	f000 f808 	bl	800220c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021fc:	f7ff feb4 	bl	8001f68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40022000 	.word	0x40022000

0800220c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002214:	4b12      	ldr	r3, [pc, #72]	@ (8002260 <HAL_InitTick+0x54>)
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	4b12      	ldr	r3, [pc, #72]	@ (8002264 <HAL_InitTick+0x58>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	4619      	mov	r1, r3
 800221e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002222:	fbb3 f3f1 	udiv	r3, r3, r1
 8002226:	fbb2 f3f3 	udiv	r3, r2, r3
 800222a:	4618      	mov	r0, r3
 800222c:	f000 fd5d 	bl	8002cea <HAL_SYSTICK_Config>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e00e      	b.n	8002258 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2b0f      	cmp	r3, #15
 800223e:	d80a      	bhi.n	8002256 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002240:	2200      	movs	r2, #0
 8002242:	6879      	ldr	r1, [r7, #4]
 8002244:	f04f 30ff 	mov.w	r0, #4294967295
 8002248:	f000 fd25 	bl	8002c96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800224c:	4a06      	ldr	r2, [pc, #24]	@ (8002268 <HAL_InitTick+0x5c>)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002252:	2300      	movs	r3, #0
 8002254:	e000      	b.n	8002258 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
}
 8002258:	4618      	mov	r0, r3
 800225a:	3708      	adds	r7, #8
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	20000050 	.word	0x20000050
 8002264:	20000058 	.word	0x20000058
 8002268:	20000054 	.word	0x20000054

0800226c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002270:	4b05      	ldr	r3, [pc, #20]	@ (8002288 <HAL_IncTick+0x1c>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	461a      	mov	r2, r3
 8002276:	4b05      	ldr	r3, [pc, #20]	@ (800228c <HAL_IncTick+0x20>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4413      	add	r3, r2
 800227c:	4a03      	ldr	r2, [pc, #12]	@ (800228c <HAL_IncTick+0x20>)
 800227e:	6013      	str	r3, [r2, #0]
}
 8002280:	bf00      	nop
 8002282:	46bd      	mov	sp, r7
 8002284:	bc80      	pop	{r7}
 8002286:	4770      	bx	lr
 8002288:	20000058 	.word	0x20000058
 800228c:	20000218 	.word	0x20000218

08002290 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  return uwTick;
 8002294:	4b02      	ldr	r3, [pc, #8]	@ (80022a0 <HAL_GetTick+0x10>)
 8002296:	681b      	ldr	r3, [r3, #0]
}
 8002298:	4618      	mov	r0, r3
 800229a:	46bd      	mov	sp, r7
 800229c:	bc80      	pop	{r7}
 800229e:	4770      	bx	lr
 80022a0:	20000218 	.word	0x20000218

080022a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022ac:	f7ff fff0 	bl	8002290 <HAL_GetTick>
 80022b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022bc:	d005      	beq.n	80022ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022be:	4b0a      	ldr	r3, [pc, #40]	@ (80022e8 <HAL_Delay+0x44>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	461a      	mov	r2, r3
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	4413      	add	r3, r2
 80022c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022ca:	bf00      	nop
 80022cc:	f7ff ffe0 	bl	8002290 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d8f7      	bhi.n	80022cc <HAL_Delay+0x28>
  {
  }
}
 80022dc:	bf00      	nop
 80022de:	bf00      	nop
 80022e0:	3710      	adds	r7, #16
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	20000058 	.word	0x20000058

080022ec <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022f4:	2300      	movs	r3, #0
 80022f6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80022f8:	2300      	movs	r3, #0
 80022fa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80022fc:	2300      	movs	r3, #0
 80022fe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002300:	2300      	movs	r3, #0
 8002302:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e0be      	b.n	800248c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002318:	2b00      	cmp	r3, #0
 800231a:	d109      	bne.n	8002330 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f7fd ff4c 	bl	80001c8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f000 fb8f 	bl	8002a54 <ADC_ConversionStop_Disable>
 8002336:	4603      	mov	r3, r0
 8002338:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800233e:	f003 0310 	and.w	r3, r3, #16
 8002342:	2b00      	cmp	r3, #0
 8002344:	f040 8099 	bne.w	800247a <HAL_ADC_Init+0x18e>
 8002348:	7dfb      	ldrb	r3, [r7, #23]
 800234a:	2b00      	cmp	r3, #0
 800234c:	f040 8095 	bne.w	800247a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002354:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002358:	f023 0302 	bic.w	r3, r3, #2
 800235c:	f043 0202 	orr.w	r2, r3, #2
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800236c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	7b1b      	ldrb	r3, [r3, #12]
 8002372:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002374:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002376:	68ba      	ldr	r2, [r7, #8]
 8002378:	4313      	orrs	r3, r2
 800237a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002384:	d003      	beq.n	800238e <HAL_ADC_Init+0xa2>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d102      	bne.n	8002394 <HAL_ADC_Init+0xa8>
 800238e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002392:	e000      	b.n	8002396 <HAL_ADC_Init+0xaa>
 8002394:	2300      	movs	r3, #0
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	4313      	orrs	r3, r2
 800239a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	7d1b      	ldrb	r3, [r3, #20]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d119      	bne.n	80023d8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	7b1b      	ldrb	r3, [r3, #12]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d109      	bne.n	80023c0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	3b01      	subs	r3, #1
 80023b2:	035a      	lsls	r2, r3, #13
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80023bc:	613b      	str	r3, [r7, #16]
 80023be:	e00b      	b.n	80023d8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023c4:	f043 0220 	orr.w	r2, r3, #32
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023d0:	f043 0201 	orr.w	r2, r3, #1
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	430a      	orrs	r2, r1
 80023ea:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	689a      	ldr	r2, [r3, #8]
 80023f2:	4b28      	ldr	r3, [pc, #160]	@ (8002494 <HAL_ADC_Init+0x1a8>)
 80023f4:	4013      	ands	r3, r2
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	6812      	ldr	r2, [r2, #0]
 80023fa:	68b9      	ldr	r1, [r7, #8]
 80023fc:	430b      	orrs	r3, r1
 80023fe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002408:	d003      	beq.n	8002412 <HAL_ADC_Init+0x126>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d104      	bne.n	800241c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	3b01      	subs	r3, #1
 8002418:	051b      	lsls	r3, r3, #20
 800241a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002422:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	430a      	orrs	r2, r1
 800242e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	689a      	ldr	r2, [r3, #8]
 8002436:	4b18      	ldr	r3, [pc, #96]	@ (8002498 <HAL_ADC_Init+0x1ac>)
 8002438:	4013      	ands	r3, r2
 800243a:	68ba      	ldr	r2, [r7, #8]
 800243c:	429a      	cmp	r2, r3
 800243e:	d10b      	bne.n	8002458 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800244a:	f023 0303 	bic.w	r3, r3, #3
 800244e:	f043 0201 	orr.w	r2, r3, #1
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002456:	e018      	b.n	800248a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800245c:	f023 0312 	bic.w	r3, r3, #18
 8002460:	f043 0210 	orr.w	r2, r3, #16
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800246c:	f043 0201 	orr.w	r2, r3, #1
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002478:	e007      	b.n	800248a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800247e:	f043 0210 	orr.w	r2, r3, #16
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800248a:	7dfb      	ldrb	r3, [r7, #23]
}
 800248c:	4618      	mov	r0, r3
 800248e:	3718      	adds	r7, #24
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	ffe1f7fd 	.word	0xffe1f7fd
 8002498:	ff1f0efe 	.word	0xff1f0efe

0800249c <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024a4:	2300      	movs	r3, #0
 80024a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d101      	bne.n	80024b6 <HAL_ADC_Start_IT+0x1a>
 80024b2:	2302      	movs	r3, #2
 80024b4:	e0a0      	b.n	80025f8 <HAL_ADC_Start_IT+0x15c>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2201      	movs	r2, #1
 80024ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 fa6e 	bl	80029a0 <ADC_Enable>
 80024c4:	4603      	mov	r3, r0
 80024c6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80024c8:	7bfb      	ldrb	r3, [r7, #15]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	f040 808f 	bne.w	80025ee <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024d4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80024d8:	f023 0301 	bic.w	r3, r3, #1
 80024dc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a45      	ldr	r2, [pc, #276]	@ (8002600 <HAL_ADC_Start_IT+0x164>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d105      	bne.n	80024fa <HAL_ADC_Start_IT+0x5e>
 80024ee:	4b45      	ldr	r3, [pc, #276]	@ (8002604 <HAL_ADC_Start_IT+0x168>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d115      	bne.n	8002526 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024fe:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002510:	2b00      	cmp	r3, #0
 8002512:	d026      	beq.n	8002562 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002518:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800251c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002524:	e01d      	b.n	8002562 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800252a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a33      	ldr	r2, [pc, #204]	@ (8002604 <HAL_ADC_Start_IT+0x168>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d004      	beq.n	8002546 <HAL_ADC_Start_IT+0xaa>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a2f      	ldr	r2, [pc, #188]	@ (8002600 <HAL_ADC_Start_IT+0x164>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d10d      	bne.n	8002562 <HAL_ADC_Start_IT+0xc6>
 8002546:	4b2f      	ldr	r3, [pc, #188]	@ (8002604 <HAL_ADC_Start_IT+0x168>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800254e:	2b00      	cmp	r3, #0
 8002550:	d007      	beq.n	8002562 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002556:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800255a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002566:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d006      	beq.n	800257c <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002572:	f023 0206 	bic.w	r2, r3, #6
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	62da      	str	r2, [r3, #44]	@ 0x2c
 800257a:	e002      	b.n	8002582 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f06f 0202 	mvn.w	r2, #2
 8002592:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	685a      	ldr	r2, [r3, #4]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f042 0220 	orr.w	r2, r2, #32
 80025a2:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80025ae:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80025b2:	d113      	bne.n	80025dc <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80025b8:	4a11      	ldr	r2, [pc, #68]	@ (8002600 <HAL_ADC_Start_IT+0x164>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d105      	bne.n	80025ca <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80025be:	4b11      	ldr	r3, [pc, #68]	@ (8002604 <HAL_ADC_Start_IT+0x168>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d108      	bne.n	80025dc <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	689a      	ldr	r2, [r3, #8]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80025d8:	609a      	str	r2, [r3, #8]
 80025da:	e00c      	b.n	80025f6 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	689a      	ldr	r2, [r3, #8]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80025ea:	609a      	str	r2, [r3, #8]
 80025ec:	e003      	b.n	80025f6 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 80025f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3710      	adds	r7, #16
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40012800 	.word	0x40012800
 8002604:	40012400 	.word	0x40012400

08002608 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002616:	4618      	mov	r0, r3
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	bc80      	pop	{r7}
 800261e:	4770      	bx	lr

08002620 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	f003 0320 	and.w	r3, r3, #32
 800263e:	2b00      	cmp	r3, #0
 8002640:	d03e      	beq.n	80026c0 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d039      	beq.n	80026c0 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002650:	f003 0310 	and.w	r3, r3, #16
 8002654:	2b00      	cmp	r3, #0
 8002656:	d105      	bne.n	8002664 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800265c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800266e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002672:	d11d      	bne.n	80026b0 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002678:	2b00      	cmp	r3, #0
 800267a:	d119      	bne.n	80026b0 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	685a      	ldr	r2, [r3, #4]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f022 0220 	bic.w	r2, r2, #32
 800268a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002690:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800269c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d105      	bne.n	80026b0 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026a8:	f043 0201 	orr.w	r2, r3, #1
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f7ff fbaf 	bl	8001e14 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f06f 0212 	mvn.w	r2, #18
 80026be:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d04d      	beq.n	8002766 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f003 0304 	and.w	r3, r3, #4
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d048      	beq.n	8002766 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026d8:	f003 0310 	and.w	r3, r3, #16
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d105      	bne.n	80026ec <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026e4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80026f6:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 80026fa:	d012      	beq.n	8002722 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002706:	2b00      	cmp	r3, #0
 8002708:	d125      	bne.n	8002756 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002714:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002718:	d11d      	bne.n	8002756 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800271e:	2b00      	cmp	r3, #0
 8002720:	d119      	bne.n	8002756 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	685a      	ldr	r2, [r3, #4]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002730:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002736:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002742:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002746:	2b00      	cmp	r3, #0
 8002748:	d105      	bne.n	8002756 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800274e:	f043 0201 	orr.w	r2, r3, #1
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f000 f9bd 	bl	8002ad6 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f06f 020c 	mvn.w	r2, #12
 8002764:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800276c:	2b00      	cmp	r3, #0
 800276e:	d012      	beq.n	8002796 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b00      	cmp	r3, #0
 8002778:	d00d      	beq.n	8002796 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800277e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f000 f809 	bl	800279e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f06f 0201 	mvn.w	r2, #1
 8002794:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002796:	bf00      	nop
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800279e:	b480      	push	{r7}
 80027a0:	b083      	sub	sp, #12
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80027a6:	bf00      	nop
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bc80      	pop	{r7}
 80027ae:	4770      	bx	lr

080027b0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80027b0:	b480      	push	{r7}
 80027b2:	b085      	sub	sp, #20
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027ba:	2300      	movs	r3, #0
 80027bc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80027be:	2300      	movs	r3, #0
 80027c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d101      	bne.n	80027d0 <HAL_ADC_ConfigChannel+0x20>
 80027cc:	2302      	movs	r3, #2
 80027ce:	e0dc      	b.n	800298a <HAL_ADC_ConfigChannel+0x1da>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	2b06      	cmp	r3, #6
 80027de:	d81c      	bhi.n	800281a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685a      	ldr	r2, [r3, #4]
 80027ea:	4613      	mov	r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	4413      	add	r3, r2
 80027f0:	3b05      	subs	r3, #5
 80027f2:	221f      	movs	r2, #31
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	43db      	mvns	r3, r3
 80027fa:	4019      	ands	r1, r3
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	6818      	ldr	r0, [r3, #0]
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685a      	ldr	r2, [r3, #4]
 8002804:	4613      	mov	r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	4413      	add	r3, r2
 800280a:	3b05      	subs	r3, #5
 800280c:	fa00 f203 	lsl.w	r2, r0, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	430a      	orrs	r2, r1
 8002816:	635a      	str	r2, [r3, #52]	@ 0x34
 8002818:	e03c      	b.n	8002894 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	2b0c      	cmp	r3, #12
 8002820:	d81c      	bhi.n	800285c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685a      	ldr	r2, [r3, #4]
 800282c:	4613      	mov	r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	4413      	add	r3, r2
 8002832:	3b23      	subs	r3, #35	@ 0x23
 8002834:	221f      	movs	r2, #31
 8002836:	fa02 f303 	lsl.w	r3, r2, r3
 800283a:	43db      	mvns	r3, r3
 800283c:	4019      	ands	r1, r3
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	6818      	ldr	r0, [r3, #0]
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685a      	ldr	r2, [r3, #4]
 8002846:	4613      	mov	r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4413      	add	r3, r2
 800284c:	3b23      	subs	r3, #35	@ 0x23
 800284e:	fa00 f203 	lsl.w	r2, r0, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	430a      	orrs	r2, r1
 8002858:	631a      	str	r2, [r3, #48]	@ 0x30
 800285a:	e01b      	b.n	8002894 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685a      	ldr	r2, [r3, #4]
 8002866:	4613      	mov	r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	4413      	add	r3, r2
 800286c:	3b41      	subs	r3, #65	@ 0x41
 800286e:	221f      	movs	r2, #31
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	43db      	mvns	r3, r3
 8002876:	4019      	ands	r1, r3
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	6818      	ldr	r0, [r3, #0]
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685a      	ldr	r2, [r3, #4]
 8002880:	4613      	mov	r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	4413      	add	r3, r2
 8002886:	3b41      	subs	r3, #65	@ 0x41
 8002888:	fa00 f203 	lsl.w	r2, r0, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	430a      	orrs	r2, r1
 8002892:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2b09      	cmp	r3, #9
 800289a:	d91c      	bls.n	80028d6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	68d9      	ldr	r1, [r3, #12]
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	4613      	mov	r3, r2
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	4413      	add	r3, r2
 80028ac:	3b1e      	subs	r3, #30
 80028ae:	2207      	movs	r2, #7
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	43db      	mvns	r3, r3
 80028b6:	4019      	ands	r1, r3
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	6898      	ldr	r0, [r3, #8]
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	4613      	mov	r3, r2
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	4413      	add	r3, r2
 80028c6:	3b1e      	subs	r3, #30
 80028c8:	fa00 f203 	lsl.w	r2, r0, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	430a      	orrs	r2, r1
 80028d2:	60da      	str	r2, [r3, #12]
 80028d4:	e019      	b.n	800290a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	6919      	ldr	r1, [r3, #16]
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	4613      	mov	r3, r2
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	4413      	add	r3, r2
 80028e6:	2207      	movs	r2, #7
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	43db      	mvns	r3, r3
 80028ee:	4019      	ands	r1, r3
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	6898      	ldr	r0, [r3, #8]
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	4613      	mov	r3, r2
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	4413      	add	r3, r2
 80028fe:	fa00 f203 	lsl.w	r2, r0, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	430a      	orrs	r2, r1
 8002908:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2b10      	cmp	r3, #16
 8002910:	d003      	beq.n	800291a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002916:	2b11      	cmp	r3, #17
 8002918:	d132      	bne.n	8002980 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a1d      	ldr	r2, [pc, #116]	@ (8002994 <HAL_ADC_ConfigChannel+0x1e4>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d125      	bne.n	8002970 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d126      	bne.n	8002980 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	689a      	ldr	r2, [r3, #8]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002940:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2b10      	cmp	r3, #16
 8002948:	d11a      	bne.n	8002980 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800294a:	4b13      	ldr	r3, [pc, #76]	@ (8002998 <HAL_ADC_ConfigChannel+0x1e8>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a13      	ldr	r2, [pc, #76]	@ (800299c <HAL_ADC_ConfigChannel+0x1ec>)
 8002950:	fba2 2303 	umull	r2, r3, r2, r3
 8002954:	0c9a      	lsrs	r2, r3, #18
 8002956:	4613      	mov	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	4413      	add	r3, r2
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002960:	e002      	b.n	8002968 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	3b01      	subs	r3, #1
 8002966:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1f9      	bne.n	8002962 <HAL_ADC_ConfigChannel+0x1b2>
 800296e:	e007      	b.n	8002980 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002974:	f043 0220 	orr.w	r2, r3, #32
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002988:	7bfb      	ldrb	r3, [r7, #15]
}
 800298a:	4618      	mov	r0, r3
 800298c:	3714      	adds	r7, #20
 800298e:	46bd      	mov	sp, r7
 8002990:	bc80      	pop	{r7}
 8002992:	4770      	bx	lr
 8002994:	40012400 	.word	0x40012400
 8002998:	20000050 	.word	0x20000050
 800299c:	431bde83 	.word	0x431bde83

080029a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029a8:	2300      	movs	r3, #0
 80029aa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80029ac:	2300      	movs	r3, #0
 80029ae:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d040      	beq.n	8002a40 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	689a      	ldr	r2, [r3, #8]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f042 0201 	orr.w	r2, r2, #1
 80029cc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80029ce:	4b1f      	ldr	r3, [pc, #124]	@ (8002a4c <ADC_Enable+0xac>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a1f      	ldr	r2, [pc, #124]	@ (8002a50 <ADC_Enable+0xb0>)
 80029d4:	fba2 2303 	umull	r2, r3, r2, r3
 80029d8:	0c9b      	lsrs	r3, r3, #18
 80029da:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80029dc:	e002      	b.n	80029e4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	3b01      	subs	r3, #1
 80029e2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1f9      	bne.n	80029de <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80029ea:	f7ff fc51 	bl	8002290 <HAL_GetTick>
 80029ee:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80029f0:	e01f      	b.n	8002a32 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80029f2:	f7ff fc4d 	bl	8002290 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d918      	bls.n	8002a32 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d011      	beq.n	8002a32 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a12:	f043 0210 	orr.w	r2, r3, #16
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a1e:	f043 0201 	orr.w	r2, r3, #1
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e007      	b.n	8002a42 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f003 0301 	and.w	r3, r3, #1
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d1d8      	bne.n	80029f2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	20000050 	.word	0x20000050
 8002a50:	431bde83 	.word	0x431bde83

08002a54 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d12e      	bne.n	8002acc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	689a      	ldr	r2, [r3, #8]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f022 0201 	bic.w	r2, r2, #1
 8002a7c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a7e:	f7ff fc07 	bl	8002290 <HAL_GetTick>
 8002a82:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002a84:	e01b      	b.n	8002abe <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a86:	f7ff fc03 	bl	8002290 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d914      	bls.n	8002abe <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d10d      	bne.n	8002abe <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aa6:	f043 0210 	orr.w	r2, r3, #16
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab2:	f043 0201 	orr.w	r2, r3, #1
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e007      	b.n	8002ace <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d0dc      	beq.n	8002a86 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b083      	sub	sp, #12
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002ade:	bf00      	nop
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bc80      	pop	{r7}
 8002ae6:	4770      	bx	lr

08002ae8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f003 0307 	and.w	r3, r3, #7
 8002af6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002af8:	4b0c      	ldr	r3, [pc, #48]	@ (8002b2c <__NVIC_SetPriorityGrouping+0x44>)
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002afe:	68ba      	ldr	r2, [r7, #8]
 8002b00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b04:	4013      	ands	r3, r2
 8002b06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b1a:	4a04      	ldr	r2, [pc, #16]	@ (8002b2c <__NVIC_SetPriorityGrouping+0x44>)
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	60d3      	str	r3, [r2, #12]
}
 8002b20:	bf00      	nop
 8002b22:	3714      	adds	r7, #20
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bc80      	pop	{r7}
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	e000ed00 	.word	0xe000ed00

08002b30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b34:	4b04      	ldr	r3, [pc, #16]	@ (8002b48 <__NVIC_GetPriorityGrouping+0x18>)
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	0a1b      	lsrs	r3, r3, #8
 8002b3a:	f003 0307 	and.w	r3, r3, #7
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bc80      	pop	{r7}
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	e000ed00 	.word	0xe000ed00

08002b4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	4603      	mov	r3, r0
 8002b54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	db0b      	blt.n	8002b76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b5e:	79fb      	ldrb	r3, [r7, #7]
 8002b60:	f003 021f 	and.w	r2, r3, #31
 8002b64:	4906      	ldr	r1, [pc, #24]	@ (8002b80 <__NVIC_EnableIRQ+0x34>)
 8002b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6a:	095b      	lsrs	r3, r3, #5
 8002b6c:	2001      	movs	r0, #1
 8002b6e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b76:	bf00      	nop
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bc80      	pop	{r7}
 8002b7e:	4770      	bx	lr
 8002b80:	e000e100 	.word	0xe000e100

08002b84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	6039      	str	r1, [r7, #0]
 8002b8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	db0a      	blt.n	8002bae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	b2da      	uxtb	r2, r3
 8002b9c:	490c      	ldr	r1, [pc, #48]	@ (8002bd0 <__NVIC_SetPriority+0x4c>)
 8002b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba2:	0112      	lsls	r2, r2, #4
 8002ba4:	b2d2      	uxtb	r2, r2
 8002ba6:	440b      	add	r3, r1
 8002ba8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bac:	e00a      	b.n	8002bc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	b2da      	uxtb	r2, r3
 8002bb2:	4908      	ldr	r1, [pc, #32]	@ (8002bd4 <__NVIC_SetPriority+0x50>)
 8002bb4:	79fb      	ldrb	r3, [r7, #7]
 8002bb6:	f003 030f 	and.w	r3, r3, #15
 8002bba:	3b04      	subs	r3, #4
 8002bbc:	0112      	lsls	r2, r2, #4
 8002bbe:	b2d2      	uxtb	r2, r2
 8002bc0:	440b      	add	r3, r1
 8002bc2:	761a      	strb	r2, [r3, #24]
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bc80      	pop	{r7}
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	e000e100 	.word	0xe000e100
 8002bd4:	e000ed00 	.word	0xe000ed00

08002bd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b089      	sub	sp, #36	@ 0x24
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f003 0307 	and.w	r3, r3, #7
 8002bea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	f1c3 0307 	rsb	r3, r3, #7
 8002bf2:	2b04      	cmp	r3, #4
 8002bf4:	bf28      	it	cs
 8002bf6:	2304      	movcs	r3, #4
 8002bf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	3304      	adds	r3, #4
 8002bfe:	2b06      	cmp	r3, #6
 8002c00:	d902      	bls.n	8002c08 <NVIC_EncodePriority+0x30>
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	3b03      	subs	r3, #3
 8002c06:	e000      	b.n	8002c0a <NVIC_EncodePriority+0x32>
 8002c08:	2300      	movs	r3, #0
 8002c0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	fa02 f303 	lsl.w	r3, r2, r3
 8002c16:	43da      	mvns	r2, r3
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	401a      	ands	r2, r3
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c20:	f04f 31ff 	mov.w	r1, #4294967295
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	fa01 f303 	lsl.w	r3, r1, r3
 8002c2a:	43d9      	mvns	r1, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c30:	4313      	orrs	r3, r2
         );
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3724      	adds	r7, #36	@ 0x24
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bc80      	pop	{r7}
 8002c3a:	4770      	bx	lr

08002c3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	3b01      	subs	r3, #1
 8002c48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c4c:	d301      	bcc.n	8002c52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e00f      	b.n	8002c72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c52:	4a0a      	ldr	r2, [pc, #40]	@ (8002c7c <SysTick_Config+0x40>)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	3b01      	subs	r3, #1
 8002c58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c5a:	210f      	movs	r1, #15
 8002c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c60:	f7ff ff90 	bl	8002b84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c64:	4b05      	ldr	r3, [pc, #20]	@ (8002c7c <SysTick_Config+0x40>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c6a:	4b04      	ldr	r3, [pc, #16]	@ (8002c7c <SysTick_Config+0x40>)
 8002c6c:	2207      	movs	r2, #7
 8002c6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	e000e010 	.word	0xe000e010

08002c80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f7ff ff2d 	bl	8002ae8 <__NVIC_SetPriorityGrouping>
}
 8002c8e:	bf00      	nop
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b086      	sub	sp, #24
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	60b9      	str	r1, [r7, #8]
 8002ca0:	607a      	str	r2, [r7, #4]
 8002ca2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ca8:	f7ff ff42 	bl	8002b30 <__NVIC_GetPriorityGrouping>
 8002cac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	68b9      	ldr	r1, [r7, #8]
 8002cb2:	6978      	ldr	r0, [r7, #20]
 8002cb4:	f7ff ff90 	bl	8002bd8 <NVIC_EncodePriority>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cbe:	4611      	mov	r1, r2
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7ff ff5f 	bl	8002b84 <__NVIC_SetPriority>
}
 8002cc6:	bf00      	nop
 8002cc8:	3718      	adds	r7, #24
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b082      	sub	sp, #8
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7ff ff35 	bl	8002b4c <__NVIC_EnableIRQ>
}
 8002ce2:	bf00      	nop
 8002ce4:	3708      	adds	r7, #8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b082      	sub	sp, #8
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7ff ffa2 	bl	8002c3c <SysTick_Config>
 8002cf8:	4603      	mov	r3, r0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d02:	b480      	push	{r7}
 8002d04:	b085      	sub	sp, #20
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d008      	beq.n	8002d2c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2204      	movs	r2, #4
 8002d1e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e020      	b.n	8002d6e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f022 020e 	bic.w	r2, r2, #14
 8002d3a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f022 0201 	bic.w	r2, r2, #1
 8002d4a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d54:	2101      	movs	r1, #1
 8002d56:	fa01 f202 	lsl.w	r2, r1, r2
 8002d5a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3714      	adds	r7, #20
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bc80      	pop	{r7}
 8002d76:	4770      	bx	lr

08002d78 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d80:	2300      	movs	r3, #0
 8002d82:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d005      	beq.n	8002d9c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2204      	movs	r2, #4
 8002d94:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	73fb      	strb	r3, [r7, #15]
 8002d9a:	e051      	b.n	8002e40 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f022 020e 	bic.w	r2, r2, #14
 8002daa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f022 0201 	bic.w	r2, r2, #1
 8002dba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a22      	ldr	r2, [pc, #136]	@ (8002e4c <HAL_DMA_Abort_IT+0xd4>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d029      	beq.n	8002e1a <HAL_DMA_Abort_IT+0xa2>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a21      	ldr	r2, [pc, #132]	@ (8002e50 <HAL_DMA_Abort_IT+0xd8>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d022      	beq.n	8002e16 <HAL_DMA_Abort_IT+0x9e>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a1f      	ldr	r2, [pc, #124]	@ (8002e54 <HAL_DMA_Abort_IT+0xdc>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d01a      	beq.n	8002e10 <HAL_DMA_Abort_IT+0x98>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a1e      	ldr	r2, [pc, #120]	@ (8002e58 <HAL_DMA_Abort_IT+0xe0>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d012      	beq.n	8002e0a <HAL_DMA_Abort_IT+0x92>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a1c      	ldr	r2, [pc, #112]	@ (8002e5c <HAL_DMA_Abort_IT+0xe4>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d00a      	beq.n	8002e04 <HAL_DMA_Abort_IT+0x8c>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a1b      	ldr	r2, [pc, #108]	@ (8002e60 <HAL_DMA_Abort_IT+0xe8>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d102      	bne.n	8002dfe <HAL_DMA_Abort_IT+0x86>
 8002df8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002dfc:	e00e      	b.n	8002e1c <HAL_DMA_Abort_IT+0xa4>
 8002dfe:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e02:	e00b      	b.n	8002e1c <HAL_DMA_Abort_IT+0xa4>
 8002e04:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002e08:	e008      	b.n	8002e1c <HAL_DMA_Abort_IT+0xa4>
 8002e0a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e0e:	e005      	b.n	8002e1c <HAL_DMA_Abort_IT+0xa4>
 8002e10:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e14:	e002      	b.n	8002e1c <HAL_DMA_Abort_IT+0xa4>
 8002e16:	2310      	movs	r3, #16
 8002e18:	e000      	b.n	8002e1c <HAL_DMA_Abort_IT+0xa4>
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	4a11      	ldr	r2, [pc, #68]	@ (8002e64 <HAL_DMA_Abort_IT+0xec>)
 8002e1e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d003      	beq.n	8002e40 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	4798      	blx	r3
    } 
  }
  return status;
 8002e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3710      	adds	r7, #16
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	40020008 	.word	0x40020008
 8002e50:	4002001c 	.word	0x4002001c
 8002e54:	40020030 	.word	0x40020030
 8002e58:	40020044 	.word	0x40020044
 8002e5c:	40020058 	.word	0x40020058
 8002e60:	4002006c 	.word	0x4002006c
 8002e64:	40020000 	.word	0x40020000

08002e68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b08b      	sub	sp, #44	@ 0x2c
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e72:	2300      	movs	r3, #0
 8002e74:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002e76:	2300      	movs	r3, #0
 8002e78:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e7a:	e169      	b.n	8003150 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	69fa      	ldr	r2, [r7, #28]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	f040 8158 	bne.w	800314a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	4a9a      	ldr	r2, [pc, #616]	@ (8003108 <HAL_GPIO_Init+0x2a0>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d05e      	beq.n	8002f62 <HAL_GPIO_Init+0xfa>
 8002ea4:	4a98      	ldr	r2, [pc, #608]	@ (8003108 <HAL_GPIO_Init+0x2a0>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d875      	bhi.n	8002f96 <HAL_GPIO_Init+0x12e>
 8002eaa:	4a98      	ldr	r2, [pc, #608]	@ (800310c <HAL_GPIO_Init+0x2a4>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d058      	beq.n	8002f62 <HAL_GPIO_Init+0xfa>
 8002eb0:	4a96      	ldr	r2, [pc, #600]	@ (800310c <HAL_GPIO_Init+0x2a4>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d86f      	bhi.n	8002f96 <HAL_GPIO_Init+0x12e>
 8002eb6:	4a96      	ldr	r2, [pc, #600]	@ (8003110 <HAL_GPIO_Init+0x2a8>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d052      	beq.n	8002f62 <HAL_GPIO_Init+0xfa>
 8002ebc:	4a94      	ldr	r2, [pc, #592]	@ (8003110 <HAL_GPIO_Init+0x2a8>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d869      	bhi.n	8002f96 <HAL_GPIO_Init+0x12e>
 8002ec2:	4a94      	ldr	r2, [pc, #592]	@ (8003114 <HAL_GPIO_Init+0x2ac>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d04c      	beq.n	8002f62 <HAL_GPIO_Init+0xfa>
 8002ec8:	4a92      	ldr	r2, [pc, #584]	@ (8003114 <HAL_GPIO_Init+0x2ac>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d863      	bhi.n	8002f96 <HAL_GPIO_Init+0x12e>
 8002ece:	4a92      	ldr	r2, [pc, #584]	@ (8003118 <HAL_GPIO_Init+0x2b0>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d046      	beq.n	8002f62 <HAL_GPIO_Init+0xfa>
 8002ed4:	4a90      	ldr	r2, [pc, #576]	@ (8003118 <HAL_GPIO_Init+0x2b0>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d85d      	bhi.n	8002f96 <HAL_GPIO_Init+0x12e>
 8002eda:	2b12      	cmp	r3, #18
 8002edc:	d82a      	bhi.n	8002f34 <HAL_GPIO_Init+0xcc>
 8002ede:	2b12      	cmp	r3, #18
 8002ee0:	d859      	bhi.n	8002f96 <HAL_GPIO_Init+0x12e>
 8002ee2:	a201      	add	r2, pc, #4	@ (adr r2, 8002ee8 <HAL_GPIO_Init+0x80>)
 8002ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee8:	08002f63 	.word	0x08002f63
 8002eec:	08002f3d 	.word	0x08002f3d
 8002ef0:	08002f4f 	.word	0x08002f4f
 8002ef4:	08002f91 	.word	0x08002f91
 8002ef8:	08002f97 	.word	0x08002f97
 8002efc:	08002f97 	.word	0x08002f97
 8002f00:	08002f97 	.word	0x08002f97
 8002f04:	08002f97 	.word	0x08002f97
 8002f08:	08002f97 	.word	0x08002f97
 8002f0c:	08002f97 	.word	0x08002f97
 8002f10:	08002f97 	.word	0x08002f97
 8002f14:	08002f97 	.word	0x08002f97
 8002f18:	08002f97 	.word	0x08002f97
 8002f1c:	08002f97 	.word	0x08002f97
 8002f20:	08002f97 	.word	0x08002f97
 8002f24:	08002f97 	.word	0x08002f97
 8002f28:	08002f97 	.word	0x08002f97
 8002f2c:	08002f45 	.word	0x08002f45
 8002f30:	08002f59 	.word	0x08002f59
 8002f34:	4a79      	ldr	r2, [pc, #484]	@ (800311c <HAL_GPIO_Init+0x2b4>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d013      	beq.n	8002f62 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002f3a:	e02c      	b.n	8002f96 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	623b      	str	r3, [r7, #32]
          break;
 8002f42:	e029      	b.n	8002f98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	3304      	adds	r3, #4
 8002f4a:	623b      	str	r3, [r7, #32]
          break;
 8002f4c:	e024      	b.n	8002f98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	3308      	adds	r3, #8
 8002f54:	623b      	str	r3, [r7, #32]
          break;
 8002f56:	e01f      	b.n	8002f98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	330c      	adds	r3, #12
 8002f5e:	623b      	str	r3, [r7, #32]
          break;
 8002f60:	e01a      	b.n	8002f98 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d102      	bne.n	8002f70 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002f6a:	2304      	movs	r3, #4
 8002f6c:	623b      	str	r3, [r7, #32]
          break;
 8002f6e:	e013      	b.n	8002f98 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d105      	bne.n	8002f84 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f78:	2308      	movs	r3, #8
 8002f7a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	69fa      	ldr	r2, [r7, #28]
 8002f80:	611a      	str	r2, [r3, #16]
          break;
 8002f82:	e009      	b.n	8002f98 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f84:	2308      	movs	r3, #8
 8002f86:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	69fa      	ldr	r2, [r7, #28]
 8002f8c:	615a      	str	r2, [r3, #20]
          break;
 8002f8e:	e003      	b.n	8002f98 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002f90:	2300      	movs	r3, #0
 8002f92:	623b      	str	r3, [r7, #32]
          break;
 8002f94:	e000      	b.n	8002f98 <HAL_GPIO_Init+0x130>
          break;
 8002f96:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	2bff      	cmp	r3, #255	@ 0xff
 8002f9c:	d801      	bhi.n	8002fa2 <HAL_GPIO_Init+0x13a>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	e001      	b.n	8002fa6 <HAL_GPIO_Init+0x13e>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	3304      	adds	r3, #4
 8002fa6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	2bff      	cmp	r3, #255	@ 0xff
 8002fac:	d802      	bhi.n	8002fb4 <HAL_GPIO_Init+0x14c>
 8002fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	e002      	b.n	8002fba <HAL_GPIO_Init+0x152>
 8002fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb6:	3b08      	subs	r3, #8
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	210f      	movs	r1, #15
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc8:	43db      	mvns	r3, r3
 8002fca:	401a      	ands	r2, r3
 8002fcc:	6a39      	ldr	r1, [r7, #32]
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd4:	431a      	orrs	r2, r3
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f000 80b1 	beq.w	800314a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002fe8:	4b4d      	ldr	r3, [pc, #308]	@ (8003120 <HAL_GPIO_Init+0x2b8>)
 8002fea:	699b      	ldr	r3, [r3, #24]
 8002fec:	4a4c      	ldr	r2, [pc, #304]	@ (8003120 <HAL_GPIO_Init+0x2b8>)
 8002fee:	f043 0301 	orr.w	r3, r3, #1
 8002ff2:	6193      	str	r3, [r2, #24]
 8002ff4:	4b4a      	ldr	r3, [pc, #296]	@ (8003120 <HAL_GPIO_Init+0x2b8>)
 8002ff6:	699b      	ldr	r3, [r3, #24]
 8002ff8:	f003 0301 	and.w	r3, r3, #1
 8002ffc:	60bb      	str	r3, [r7, #8]
 8002ffe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003000:	4a48      	ldr	r2, [pc, #288]	@ (8003124 <HAL_GPIO_Init+0x2bc>)
 8003002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003004:	089b      	lsrs	r3, r3, #2
 8003006:	3302      	adds	r3, #2
 8003008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800300c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800300e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003010:	f003 0303 	and.w	r3, r3, #3
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	220f      	movs	r2, #15
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	43db      	mvns	r3, r3
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	4013      	ands	r3, r2
 8003022:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a40      	ldr	r2, [pc, #256]	@ (8003128 <HAL_GPIO_Init+0x2c0>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d013      	beq.n	8003054 <HAL_GPIO_Init+0x1ec>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a3f      	ldr	r2, [pc, #252]	@ (800312c <HAL_GPIO_Init+0x2c4>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d00d      	beq.n	8003050 <HAL_GPIO_Init+0x1e8>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a3e      	ldr	r2, [pc, #248]	@ (8003130 <HAL_GPIO_Init+0x2c8>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d007      	beq.n	800304c <HAL_GPIO_Init+0x1e4>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a3d      	ldr	r2, [pc, #244]	@ (8003134 <HAL_GPIO_Init+0x2cc>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d101      	bne.n	8003048 <HAL_GPIO_Init+0x1e0>
 8003044:	2303      	movs	r3, #3
 8003046:	e006      	b.n	8003056 <HAL_GPIO_Init+0x1ee>
 8003048:	2304      	movs	r3, #4
 800304a:	e004      	b.n	8003056 <HAL_GPIO_Init+0x1ee>
 800304c:	2302      	movs	r3, #2
 800304e:	e002      	b.n	8003056 <HAL_GPIO_Init+0x1ee>
 8003050:	2301      	movs	r3, #1
 8003052:	e000      	b.n	8003056 <HAL_GPIO_Init+0x1ee>
 8003054:	2300      	movs	r3, #0
 8003056:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003058:	f002 0203 	and.w	r2, r2, #3
 800305c:	0092      	lsls	r2, r2, #2
 800305e:	4093      	lsls	r3, r2
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	4313      	orrs	r3, r2
 8003064:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003066:	492f      	ldr	r1, [pc, #188]	@ (8003124 <HAL_GPIO_Init+0x2bc>)
 8003068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800306a:	089b      	lsrs	r3, r3, #2
 800306c:	3302      	adds	r3, #2
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d006      	beq.n	800308e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003080:	4b2d      	ldr	r3, [pc, #180]	@ (8003138 <HAL_GPIO_Init+0x2d0>)
 8003082:	689a      	ldr	r2, [r3, #8]
 8003084:	492c      	ldr	r1, [pc, #176]	@ (8003138 <HAL_GPIO_Init+0x2d0>)
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	4313      	orrs	r3, r2
 800308a:	608b      	str	r3, [r1, #8]
 800308c:	e006      	b.n	800309c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800308e:	4b2a      	ldr	r3, [pc, #168]	@ (8003138 <HAL_GPIO_Init+0x2d0>)
 8003090:	689a      	ldr	r2, [r3, #8]
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	43db      	mvns	r3, r3
 8003096:	4928      	ldr	r1, [pc, #160]	@ (8003138 <HAL_GPIO_Init+0x2d0>)
 8003098:	4013      	ands	r3, r2
 800309a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d006      	beq.n	80030b6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80030a8:	4b23      	ldr	r3, [pc, #140]	@ (8003138 <HAL_GPIO_Init+0x2d0>)
 80030aa:	68da      	ldr	r2, [r3, #12]
 80030ac:	4922      	ldr	r1, [pc, #136]	@ (8003138 <HAL_GPIO_Init+0x2d0>)
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	60cb      	str	r3, [r1, #12]
 80030b4:	e006      	b.n	80030c4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80030b6:	4b20      	ldr	r3, [pc, #128]	@ (8003138 <HAL_GPIO_Init+0x2d0>)
 80030b8:	68da      	ldr	r2, [r3, #12]
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	43db      	mvns	r3, r3
 80030be:	491e      	ldr	r1, [pc, #120]	@ (8003138 <HAL_GPIO_Init+0x2d0>)
 80030c0:	4013      	ands	r3, r2
 80030c2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d006      	beq.n	80030de <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80030d0:	4b19      	ldr	r3, [pc, #100]	@ (8003138 <HAL_GPIO_Init+0x2d0>)
 80030d2:	685a      	ldr	r2, [r3, #4]
 80030d4:	4918      	ldr	r1, [pc, #96]	@ (8003138 <HAL_GPIO_Init+0x2d0>)
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	4313      	orrs	r3, r2
 80030da:	604b      	str	r3, [r1, #4]
 80030dc:	e006      	b.n	80030ec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80030de:	4b16      	ldr	r3, [pc, #88]	@ (8003138 <HAL_GPIO_Init+0x2d0>)
 80030e0:	685a      	ldr	r2, [r3, #4]
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	43db      	mvns	r3, r3
 80030e6:	4914      	ldr	r1, [pc, #80]	@ (8003138 <HAL_GPIO_Init+0x2d0>)
 80030e8:	4013      	ands	r3, r2
 80030ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d021      	beq.n	800313c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80030f8:	4b0f      	ldr	r3, [pc, #60]	@ (8003138 <HAL_GPIO_Init+0x2d0>)
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	490e      	ldr	r1, [pc, #56]	@ (8003138 <HAL_GPIO_Init+0x2d0>)
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	4313      	orrs	r3, r2
 8003102:	600b      	str	r3, [r1, #0]
 8003104:	e021      	b.n	800314a <HAL_GPIO_Init+0x2e2>
 8003106:	bf00      	nop
 8003108:	10320000 	.word	0x10320000
 800310c:	10310000 	.word	0x10310000
 8003110:	10220000 	.word	0x10220000
 8003114:	10210000 	.word	0x10210000
 8003118:	10120000 	.word	0x10120000
 800311c:	10110000 	.word	0x10110000
 8003120:	40021000 	.word	0x40021000
 8003124:	40010000 	.word	0x40010000
 8003128:	40010800 	.word	0x40010800
 800312c:	40010c00 	.word	0x40010c00
 8003130:	40011000 	.word	0x40011000
 8003134:	40011400 	.word	0x40011400
 8003138:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800313c:	4b0b      	ldr	r3, [pc, #44]	@ (800316c <HAL_GPIO_Init+0x304>)
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	43db      	mvns	r3, r3
 8003144:	4909      	ldr	r1, [pc, #36]	@ (800316c <HAL_GPIO_Init+0x304>)
 8003146:	4013      	ands	r3, r2
 8003148:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800314a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800314c:	3301      	adds	r3, #1
 800314e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003156:	fa22 f303 	lsr.w	r3, r2, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	f47f ae8e 	bne.w	8002e7c <HAL_GPIO_Init+0x14>
  }
}
 8003160:	bf00      	nop
 8003162:	bf00      	nop
 8003164:	372c      	adds	r7, #44	@ 0x2c
 8003166:	46bd      	mov	sp, r7
 8003168:	bc80      	pop	{r7}
 800316a:	4770      	bx	lr
 800316c:	40010400 	.word	0x40010400

08003170 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003170:	b480      	push	{r7}
 8003172:	b085      	sub	sp, #20
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	460b      	mov	r3, r1
 800317a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689a      	ldr	r2, [r3, #8]
 8003180:	887b      	ldrh	r3, [r7, #2]
 8003182:	4013      	ands	r3, r2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d002      	beq.n	800318e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003188:	2301      	movs	r3, #1
 800318a:	73fb      	strb	r3, [r7, #15]
 800318c:	e001      	b.n	8003192 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800318e:	2300      	movs	r3, #0
 8003190:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003192:	7bfb      	ldrb	r3, [r7, #15]
}
 8003194:	4618      	mov	r0, r3
 8003196:	3714      	adds	r7, #20
 8003198:	46bd      	mov	sp, r7
 800319a:	bc80      	pop	{r7}
 800319c:	4770      	bx	lr

0800319e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800319e:	b480      	push	{r7}
 80031a0:	b083      	sub	sp, #12
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
 80031a6:	460b      	mov	r3, r1
 80031a8:	807b      	strh	r3, [r7, #2]
 80031aa:	4613      	mov	r3, r2
 80031ac:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031ae:	787b      	ldrb	r3, [r7, #1]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d003      	beq.n	80031bc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031b4:	887a      	ldrh	r2, [r7, #2]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80031ba:	e003      	b.n	80031c4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80031bc:	887b      	ldrh	r3, [r7, #2]
 80031be:	041a      	lsls	r2, r3, #16
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	611a      	str	r2, [r3, #16]
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bc80      	pop	{r7}
 80031cc:	4770      	bx	lr
	...

080031d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	4603      	mov	r3, r0
 80031d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80031da:	4b08      	ldr	r3, [pc, #32]	@ (80031fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031dc:	695a      	ldr	r2, [r3, #20]
 80031de:	88fb      	ldrh	r3, [r7, #6]
 80031e0:	4013      	ands	r3, r2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d006      	beq.n	80031f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80031e6:	4a05      	ldr	r2, [pc, #20]	@ (80031fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031e8:	88fb      	ldrh	r3, [r7, #6]
 80031ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80031ec:	88fb      	ldrh	r3, [r7, #6]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7fe fd9e 	bl	8001d30 <HAL_GPIO_EXTI_Callback>
  }
}
 80031f4:	bf00      	nop
 80031f6:	3708      	adds	r7, #8
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	40010400 	.word	0x40010400

08003200 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d101      	bne.n	8003212 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e12b      	b.n	800346a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d106      	bne.n	800322c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f7fd f8e4 	bl	80003f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2224      	movs	r2, #36	@ 0x24
 8003230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f022 0201 	bic.w	r2, r2, #1
 8003242:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003252:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003262:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003264:	f001 fbfc 	bl	8004a60 <HAL_RCC_GetPCLK1Freq>
 8003268:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	4a81      	ldr	r2, [pc, #516]	@ (8003474 <HAL_I2C_Init+0x274>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d807      	bhi.n	8003284 <HAL_I2C_Init+0x84>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	4a80      	ldr	r2, [pc, #512]	@ (8003478 <HAL_I2C_Init+0x278>)
 8003278:	4293      	cmp	r3, r2
 800327a:	bf94      	ite	ls
 800327c:	2301      	movls	r3, #1
 800327e:	2300      	movhi	r3, #0
 8003280:	b2db      	uxtb	r3, r3
 8003282:	e006      	b.n	8003292 <HAL_I2C_Init+0x92>
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	4a7d      	ldr	r2, [pc, #500]	@ (800347c <HAL_I2C_Init+0x27c>)
 8003288:	4293      	cmp	r3, r2
 800328a:	bf94      	ite	ls
 800328c:	2301      	movls	r3, #1
 800328e:	2300      	movhi	r3, #0
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e0e7      	b.n	800346a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	4a78      	ldr	r2, [pc, #480]	@ (8003480 <HAL_I2C_Init+0x280>)
 800329e:	fba2 2303 	umull	r2, r3, r2, r3
 80032a2:	0c9b      	lsrs	r3, r3, #18
 80032a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68ba      	ldr	r2, [r7, #8]
 80032b6:	430a      	orrs	r2, r1
 80032b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	6a1b      	ldr	r3, [r3, #32]
 80032c0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	4a6a      	ldr	r2, [pc, #424]	@ (8003474 <HAL_I2C_Init+0x274>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d802      	bhi.n	80032d4 <HAL_I2C_Init+0xd4>
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	3301      	adds	r3, #1
 80032d2:	e009      	b.n	80032e8 <HAL_I2C_Init+0xe8>
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80032da:	fb02 f303 	mul.w	r3, r2, r3
 80032de:	4a69      	ldr	r2, [pc, #420]	@ (8003484 <HAL_I2C_Init+0x284>)
 80032e0:	fba2 2303 	umull	r2, r3, r2, r3
 80032e4:	099b      	lsrs	r3, r3, #6
 80032e6:	3301      	adds	r3, #1
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	6812      	ldr	r2, [r2, #0]
 80032ec:	430b      	orrs	r3, r1
 80032ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	69db      	ldr	r3, [r3, #28]
 80032f6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80032fa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	495c      	ldr	r1, [pc, #368]	@ (8003474 <HAL_I2C_Init+0x274>)
 8003304:	428b      	cmp	r3, r1
 8003306:	d819      	bhi.n	800333c <HAL_I2C_Init+0x13c>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	1e59      	subs	r1, r3, #1
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	005b      	lsls	r3, r3, #1
 8003312:	fbb1 f3f3 	udiv	r3, r1, r3
 8003316:	1c59      	adds	r1, r3, #1
 8003318:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800331c:	400b      	ands	r3, r1
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00a      	beq.n	8003338 <HAL_I2C_Init+0x138>
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	1e59      	subs	r1, r3, #1
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	005b      	lsls	r3, r3, #1
 800332c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003330:	3301      	adds	r3, #1
 8003332:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003336:	e051      	b.n	80033dc <HAL_I2C_Init+0x1dc>
 8003338:	2304      	movs	r3, #4
 800333a:	e04f      	b.n	80033dc <HAL_I2C_Init+0x1dc>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d111      	bne.n	8003368 <HAL_I2C_Init+0x168>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	1e58      	subs	r0, r3, #1
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6859      	ldr	r1, [r3, #4]
 800334c:	460b      	mov	r3, r1
 800334e:	005b      	lsls	r3, r3, #1
 8003350:	440b      	add	r3, r1
 8003352:	fbb0 f3f3 	udiv	r3, r0, r3
 8003356:	3301      	adds	r3, #1
 8003358:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800335c:	2b00      	cmp	r3, #0
 800335e:	bf0c      	ite	eq
 8003360:	2301      	moveq	r3, #1
 8003362:	2300      	movne	r3, #0
 8003364:	b2db      	uxtb	r3, r3
 8003366:	e012      	b.n	800338e <HAL_I2C_Init+0x18e>
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	1e58      	subs	r0, r3, #1
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6859      	ldr	r1, [r3, #4]
 8003370:	460b      	mov	r3, r1
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	440b      	add	r3, r1
 8003376:	0099      	lsls	r1, r3, #2
 8003378:	440b      	add	r3, r1
 800337a:	fbb0 f3f3 	udiv	r3, r0, r3
 800337e:	3301      	adds	r3, #1
 8003380:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003384:	2b00      	cmp	r3, #0
 8003386:	bf0c      	ite	eq
 8003388:	2301      	moveq	r3, #1
 800338a:	2300      	movne	r3, #0
 800338c:	b2db      	uxtb	r3, r3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <HAL_I2C_Init+0x196>
 8003392:	2301      	movs	r3, #1
 8003394:	e022      	b.n	80033dc <HAL_I2C_Init+0x1dc>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10e      	bne.n	80033bc <HAL_I2C_Init+0x1bc>
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	1e58      	subs	r0, r3, #1
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6859      	ldr	r1, [r3, #4]
 80033a6:	460b      	mov	r3, r1
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	440b      	add	r3, r1
 80033ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80033b0:	3301      	adds	r3, #1
 80033b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80033ba:	e00f      	b.n	80033dc <HAL_I2C_Init+0x1dc>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	1e58      	subs	r0, r3, #1
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6859      	ldr	r1, [r3, #4]
 80033c4:	460b      	mov	r3, r1
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	440b      	add	r3, r1
 80033ca:	0099      	lsls	r1, r3, #2
 80033cc:	440b      	add	r3, r1
 80033ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80033d2:	3301      	adds	r3, #1
 80033d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033d8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80033dc:	6879      	ldr	r1, [r7, #4]
 80033de:	6809      	ldr	r1, [r1, #0]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	69da      	ldr	r2, [r3, #28]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a1b      	ldr	r3, [r3, #32]
 80033f6:	431a      	orrs	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	430a      	orrs	r2, r1
 80033fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800340a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	6911      	ldr	r1, [r2, #16]
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	68d2      	ldr	r2, [r2, #12]
 8003416:	4311      	orrs	r1, r2
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	6812      	ldr	r2, [r2, #0]
 800341c:	430b      	orrs	r3, r1
 800341e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	695a      	ldr	r2, [r3, #20]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	431a      	orrs	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	430a      	orrs	r2, r1
 800343a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f042 0201 	orr.w	r2, r2, #1
 800344a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2220      	movs	r2, #32
 8003456:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	000186a0 	.word	0x000186a0
 8003478:	001e847f 	.word	0x001e847f
 800347c:	003d08ff 	.word	0x003d08ff
 8003480:	431bde83 	.word	0x431bde83
 8003484:	10624dd3 	.word	0x10624dd3

08003488 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b088      	sub	sp, #32
 800348c:	af02      	add	r7, sp, #8
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	4608      	mov	r0, r1
 8003492:	4611      	mov	r1, r2
 8003494:	461a      	mov	r2, r3
 8003496:	4603      	mov	r3, r0
 8003498:	817b      	strh	r3, [r7, #10]
 800349a:	460b      	mov	r3, r1
 800349c:	813b      	strh	r3, [r7, #8]
 800349e:	4613      	mov	r3, r2
 80034a0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80034a2:	f7fe fef5 	bl	8002290 <HAL_GetTick>
 80034a6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b20      	cmp	r3, #32
 80034b2:	f040 80d9 	bne.w	8003668 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	9300      	str	r3, [sp, #0]
 80034ba:	2319      	movs	r3, #25
 80034bc:	2201      	movs	r2, #1
 80034be:	496d      	ldr	r1, [pc, #436]	@ (8003674 <HAL_I2C_Mem_Write+0x1ec>)
 80034c0:	68f8      	ldr	r0, [r7, #12]
 80034c2:	f000 fccd 	bl	8003e60 <I2C_WaitOnFlagUntilTimeout>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d001      	beq.n	80034d0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80034cc:	2302      	movs	r3, #2
 80034ce:	e0cc      	b.n	800366a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d101      	bne.n	80034de <HAL_I2C_Mem_Write+0x56>
 80034da:	2302      	movs	r3, #2
 80034dc:	e0c5      	b.n	800366a <HAL_I2C_Mem_Write+0x1e2>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2201      	movs	r2, #1
 80034e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0301 	and.w	r3, r3, #1
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d007      	beq.n	8003504 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f042 0201 	orr.w	r2, r2, #1
 8003502:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003512:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2221      	movs	r2, #33	@ 0x21
 8003518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2240      	movs	r2, #64	@ 0x40
 8003520:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2200      	movs	r2, #0
 8003528:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6a3a      	ldr	r2, [r7, #32]
 800352e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003534:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800353a:	b29a      	uxth	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	4a4d      	ldr	r2, [pc, #308]	@ (8003678 <HAL_I2C_Mem_Write+0x1f0>)
 8003544:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003546:	88f8      	ldrh	r0, [r7, #6]
 8003548:	893a      	ldrh	r2, [r7, #8]
 800354a:	8979      	ldrh	r1, [r7, #10]
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	9301      	str	r3, [sp, #4]
 8003550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003552:	9300      	str	r3, [sp, #0]
 8003554:	4603      	mov	r3, r0
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f000 fb04 	bl	8003b64 <I2C_RequestMemoryWrite>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d052      	beq.n	8003608 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e081      	b.n	800366a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	f000 fd92 	bl	8004094 <I2C_WaitOnTXEFlagUntilTimeout>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00d      	beq.n	8003592 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800357a:	2b04      	cmp	r3, #4
 800357c:	d107      	bne.n	800358e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800358c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e06b      	b.n	800366a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003596:	781a      	ldrb	r2, [r3, #0]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a2:	1c5a      	adds	r2, r3, #1
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035ac:	3b01      	subs	r3, #1
 80035ae:	b29a      	uxth	r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	3b01      	subs	r3, #1
 80035bc:	b29a      	uxth	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	695b      	ldr	r3, [r3, #20]
 80035c8:	f003 0304 	and.w	r3, r3, #4
 80035cc:	2b04      	cmp	r3, #4
 80035ce:	d11b      	bne.n	8003608 <HAL_I2C_Mem_Write+0x180>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d017      	beq.n	8003608 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035dc:	781a      	ldrb	r2, [r3, #0]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e8:	1c5a      	adds	r2, r3, #1
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035f2:	3b01      	subs	r3, #1
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035fe:	b29b      	uxth	r3, r3
 8003600:	3b01      	subs	r3, #1
 8003602:	b29a      	uxth	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1aa      	bne.n	8003566 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003614:	68f8      	ldr	r0, [r7, #12]
 8003616:	f000 fd85 	bl	8004124 <I2C_WaitOnBTFFlagUntilTimeout>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00d      	beq.n	800363c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003624:	2b04      	cmp	r3, #4
 8003626:	d107      	bne.n	8003638 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003636:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e016      	b.n	800366a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800364a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2220      	movs	r2, #32
 8003650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003664:	2300      	movs	r3, #0
 8003666:	e000      	b.n	800366a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003668:	2302      	movs	r3, #2
  }
}
 800366a:	4618      	mov	r0, r3
 800366c:	3718      	adds	r7, #24
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	00100002 	.word	0x00100002
 8003678:	ffff0000 	.word	0xffff0000

0800367c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b08c      	sub	sp, #48	@ 0x30
 8003680:	af02      	add	r7, sp, #8
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	4608      	mov	r0, r1
 8003686:	4611      	mov	r1, r2
 8003688:	461a      	mov	r2, r3
 800368a:	4603      	mov	r3, r0
 800368c:	817b      	strh	r3, [r7, #10]
 800368e:	460b      	mov	r3, r1
 8003690:	813b      	strh	r3, [r7, #8]
 8003692:	4613      	mov	r3, r2
 8003694:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003696:	2300      	movs	r3, #0
 8003698:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800369a:	f7fe fdf9 	bl	8002290 <HAL_GetTick>
 800369e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	2b20      	cmp	r3, #32
 80036aa:	f040 8250 	bne.w	8003b4e <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b0:	9300      	str	r3, [sp, #0]
 80036b2:	2319      	movs	r3, #25
 80036b4:	2201      	movs	r2, #1
 80036b6:	4982      	ldr	r1, [pc, #520]	@ (80038c0 <HAL_I2C_Mem_Read+0x244>)
 80036b8:	68f8      	ldr	r0, [r7, #12]
 80036ba:	f000 fbd1 	bl	8003e60 <I2C_WaitOnFlagUntilTimeout>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d001      	beq.n	80036c8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80036c4:	2302      	movs	r3, #2
 80036c6:	e243      	b.n	8003b50 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d101      	bne.n	80036d6 <HAL_I2C_Mem_Read+0x5a>
 80036d2:	2302      	movs	r3, #2
 80036d4:	e23c      	b.n	8003b50 <HAL_I2C_Mem_Read+0x4d4>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0301 	and.w	r3, r3, #1
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d007      	beq.n	80036fc <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f042 0201 	orr.w	r2, r2, #1
 80036fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800370a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2222      	movs	r2, #34	@ 0x22
 8003710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2240      	movs	r2, #64	@ 0x40
 8003718:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003726:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800372c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003732:	b29a      	uxth	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	4a62      	ldr	r2, [pc, #392]	@ (80038c4 <HAL_I2C_Mem_Read+0x248>)
 800373c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800373e:	88f8      	ldrh	r0, [r7, #6]
 8003740:	893a      	ldrh	r2, [r7, #8]
 8003742:	8979      	ldrh	r1, [r7, #10]
 8003744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003746:	9301      	str	r3, [sp, #4]
 8003748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800374a:	9300      	str	r3, [sp, #0]
 800374c:	4603      	mov	r3, r0
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f000 fa9e 	bl	8003c90 <I2C_RequestMemoryRead>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d001      	beq.n	800375e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e1f8      	b.n	8003b50 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003762:	2b00      	cmp	r3, #0
 8003764:	d113      	bne.n	800378e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003766:	2300      	movs	r3, #0
 8003768:	61fb      	str	r3, [r7, #28]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	695b      	ldr	r3, [r3, #20]
 8003770:	61fb      	str	r3, [r7, #28]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	61fb      	str	r3, [r7, #28]
 800377a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800378a:	601a      	str	r2, [r3, #0]
 800378c:	e1cc      	b.n	8003b28 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003792:	2b01      	cmp	r3, #1
 8003794:	d11e      	bne.n	80037d4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037a4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80037a6:	b672      	cpsid	i
}
 80037a8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037aa:	2300      	movs	r3, #0
 80037ac:	61bb      	str	r3, [r7, #24]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	695b      	ldr	r3, [r3, #20]
 80037b4:	61bb      	str	r3, [r7, #24]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	61bb      	str	r3, [r7, #24]
 80037be:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037ce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80037d0:	b662      	cpsie	i
}
 80037d2:	e035      	b.n	8003840 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d11e      	bne.n	800381a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80037ea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80037ec:	b672      	cpsid	i
}
 80037ee:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037f0:	2300      	movs	r3, #0
 80037f2:	617b      	str	r3, [r7, #20]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	617b      	str	r3, [r7, #20]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	617b      	str	r3, [r7, #20]
 8003804:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003814:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003816:	b662      	cpsie	i
}
 8003818:	e012      	b.n	8003840 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003828:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800382a:	2300      	movs	r3, #0
 800382c:	613b      	str	r3, [r7, #16]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	695b      	ldr	r3, [r3, #20]
 8003834:	613b      	str	r3, [r7, #16]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	613b      	str	r3, [r7, #16]
 800383e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003840:	e172      	b.n	8003b28 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003846:	2b03      	cmp	r3, #3
 8003848:	f200 811f 	bhi.w	8003a8a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003850:	2b01      	cmp	r3, #1
 8003852:	d123      	bne.n	800389c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003854:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003856:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003858:	68f8      	ldr	r0, [r7, #12]
 800385a:	f000 fcab 	bl	80041b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d001      	beq.n	8003868 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e173      	b.n	8003b50 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	691a      	ldr	r2, [r3, #16]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003872:	b2d2      	uxtb	r2, r2
 8003874:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800387a:	1c5a      	adds	r2, r3, #1
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003884:	3b01      	subs	r3, #1
 8003886:	b29a      	uxth	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003890:	b29b      	uxth	r3, r3
 8003892:	3b01      	subs	r3, #1
 8003894:	b29a      	uxth	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800389a:	e145      	b.n	8003b28 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d152      	bne.n	800394a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a6:	9300      	str	r3, [sp, #0]
 80038a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038aa:	2200      	movs	r2, #0
 80038ac:	4906      	ldr	r1, [pc, #24]	@ (80038c8 <HAL_I2C_Mem_Read+0x24c>)
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	f000 fad6 	bl	8003e60 <I2C_WaitOnFlagUntilTimeout>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d008      	beq.n	80038cc <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e148      	b.n	8003b50 <HAL_I2C_Mem_Read+0x4d4>
 80038be:	bf00      	nop
 80038c0:	00100002 	.word	0x00100002
 80038c4:	ffff0000 	.word	0xffff0000
 80038c8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80038cc:	b672      	cpsid	i
}
 80038ce:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	691a      	ldr	r2, [r3, #16]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ea:	b2d2      	uxtb	r2, r2
 80038ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f2:	1c5a      	adds	r2, r3, #1
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038fc:	3b01      	subs	r3, #1
 80038fe:	b29a      	uxth	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003908:	b29b      	uxth	r3, r3
 800390a:	3b01      	subs	r3, #1
 800390c:	b29a      	uxth	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003912:	b662      	cpsie	i
}
 8003914:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	691a      	ldr	r2, [r3, #16]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003920:	b2d2      	uxtb	r2, r2
 8003922:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003928:	1c5a      	adds	r2, r3, #1
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003932:	3b01      	subs	r3, #1
 8003934:	b29a      	uxth	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800393e:	b29b      	uxth	r3, r3
 8003940:	3b01      	subs	r3, #1
 8003942:	b29a      	uxth	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003948:	e0ee      	b.n	8003b28 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800394a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800394c:	9300      	str	r3, [sp, #0]
 800394e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003950:	2200      	movs	r2, #0
 8003952:	4981      	ldr	r1, [pc, #516]	@ (8003b58 <HAL_I2C_Mem_Read+0x4dc>)
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	f000 fa83 	bl	8003e60 <I2C_WaitOnFlagUntilTimeout>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d001      	beq.n	8003964 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e0f5      	b.n	8003b50 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003972:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003974:	b672      	cpsid	i
}
 8003976:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	691a      	ldr	r2, [r3, #16]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003982:	b2d2      	uxtb	r2, r2
 8003984:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800398a:	1c5a      	adds	r2, r3, #1
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003994:	3b01      	subs	r3, #1
 8003996:	b29a      	uxth	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	3b01      	subs	r3, #1
 80039a4:	b29a      	uxth	r2, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80039aa:	4b6c      	ldr	r3, [pc, #432]	@ (8003b5c <HAL_I2C_Mem_Read+0x4e0>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	08db      	lsrs	r3, r3, #3
 80039b0:	4a6b      	ldr	r2, [pc, #428]	@ (8003b60 <HAL_I2C_Mem_Read+0x4e4>)
 80039b2:	fba2 2303 	umull	r2, r3, r2, r3
 80039b6:	0a1a      	lsrs	r2, r3, #8
 80039b8:	4613      	mov	r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	4413      	add	r3, r2
 80039be:	00da      	lsls	r2, r3, #3
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80039c4:	6a3b      	ldr	r3, [r7, #32]
 80039c6:	3b01      	subs	r3, #1
 80039c8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80039ca:	6a3b      	ldr	r3, [r7, #32]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d118      	bne.n	8003a02 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2220      	movs	r2, #32
 80039da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ea:	f043 0220 	orr.w	r2, r3, #32
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80039f2:	b662      	cpsie	i
}
 80039f4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e0a6      	b.n	8003b50 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	695b      	ldr	r3, [r3, #20]
 8003a08:	f003 0304 	and.w	r3, r3, #4
 8003a0c:	2b04      	cmp	r3, #4
 8003a0e:	d1d9      	bne.n	80039c4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	691a      	ldr	r2, [r3, #16]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a2a:	b2d2      	uxtb	r2, r2
 8003a2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a32:	1c5a      	adds	r2, r3, #1
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	b29a      	uxth	r2, r3
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003a52:	b662      	cpsie	i
}
 8003a54:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	691a      	ldr	r2, [r3, #16]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a60:	b2d2      	uxtb	r2, r2
 8003a62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a68:	1c5a      	adds	r2, r3, #1
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a72:	3b01      	subs	r3, #1
 8003a74:	b29a      	uxth	r2, r3
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	3b01      	subs	r3, #1
 8003a82:	b29a      	uxth	r2, r3
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003a88:	e04e      	b.n	8003b28 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a8c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003a8e:	68f8      	ldr	r0, [r7, #12]
 8003a90:	f000 fb90 	bl	80041b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d001      	beq.n	8003a9e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e058      	b.n	8003b50 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	691a      	ldr	r2, [r3, #16]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa8:	b2d2      	uxtb	r2, r2
 8003aaa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab0:	1c5a      	adds	r2, r3, #1
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aba:	3b01      	subs	r3, #1
 8003abc:	b29a      	uxth	r2, r3
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	b29a      	uxth	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	f003 0304 	and.w	r3, r3, #4
 8003ada:	2b04      	cmp	r3, #4
 8003adc:	d124      	bne.n	8003b28 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ae2:	2b03      	cmp	r3, #3
 8003ae4:	d107      	bne.n	8003af6 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003af4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	691a      	ldr	r2, [r3, #16]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b00:	b2d2      	uxtb	r2, r2
 8003b02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b08:	1c5a      	adds	r2, r3, #1
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b12:	3b01      	subs	r3, #1
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	3b01      	subs	r3, #1
 8003b22:	b29a      	uxth	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f47f ae88 	bne.w	8003842 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2220      	movs	r2, #32
 8003b36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	e000      	b.n	8003b50 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8003b4e:	2302      	movs	r3, #2
  }
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3728      	adds	r7, #40	@ 0x28
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	00010004 	.word	0x00010004
 8003b5c:	20000050 	.word	0x20000050
 8003b60:	14f8b589 	.word	0x14f8b589

08003b64 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b088      	sub	sp, #32
 8003b68:	af02      	add	r7, sp, #8
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	4608      	mov	r0, r1
 8003b6e:	4611      	mov	r1, r2
 8003b70:	461a      	mov	r2, r3
 8003b72:	4603      	mov	r3, r0
 8003b74:	817b      	strh	r3, [r7, #10]
 8003b76:	460b      	mov	r3, r1
 8003b78:	813b      	strh	r3, [r7, #8]
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b8c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b90:	9300      	str	r3, [sp, #0]
 8003b92:	6a3b      	ldr	r3, [r7, #32]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003b9a:	68f8      	ldr	r0, [r7, #12]
 8003b9c:	f000 f960 	bl	8003e60 <I2C_WaitOnFlagUntilTimeout>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00d      	beq.n	8003bc2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bb4:	d103      	bne.n	8003bbe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bbc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e05f      	b.n	8003c82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003bc2:	897b      	ldrh	r3, [r7, #10]
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003bd0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd4:	6a3a      	ldr	r2, [r7, #32]
 8003bd6:	492d      	ldr	r1, [pc, #180]	@ (8003c8c <I2C_RequestMemoryWrite+0x128>)
 8003bd8:	68f8      	ldr	r0, [r7, #12]
 8003bda:	f000 f9bb 	bl	8003f54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d001      	beq.n	8003be8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e04c      	b.n	8003c82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003be8:	2300      	movs	r3, #0
 8003bea:	617b      	str	r3, [r7, #20]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	695b      	ldr	r3, [r3, #20]
 8003bf2:	617b      	str	r3, [r7, #20]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	617b      	str	r3, [r7, #20]
 8003bfc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c00:	6a39      	ldr	r1, [r7, #32]
 8003c02:	68f8      	ldr	r0, [r7, #12]
 8003c04:	f000 fa46 	bl	8004094 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00d      	beq.n	8003c2a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c12:	2b04      	cmp	r3, #4
 8003c14:	d107      	bne.n	8003c26 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c24:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e02b      	b.n	8003c82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c2a:	88fb      	ldrh	r3, [r7, #6]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d105      	bne.n	8003c3c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c30:	893b      	ldrh	r3, [r7, #8]
 8003c32:	b2da      	uxtb	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	611a      	str	r2, [r3, #16]
 8003c3a:	e021      	b.n	8003c80 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003c3c:	893b      	ldrh	r3, [r7, #8]
 8003c3e:	0a1b      	lsrs	r3, r3, #8
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	b2da      	uxtb	r2, r3
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c4c:	6a39      	ldr	r1, [r7, #32]
 8003c4e:	68f8      	ldr	r0, [r7, #12]
 8003c50:	f000 fa20 	bl	8004094 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00d      	beq.n	8003c76 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c5e:	2b04      	cmp	r3, #4
 8003c60:	d107      	bne.n	8003c72 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c70:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e005      	b.n	8003c82 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c76:	893b      	ldrh	r3, [r7, #8]
 8003c78:	b2da      	uxtb	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3718      	adds	r7, #24
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	00010002 	.word	0x00010002

08003c90 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b088      	sub	sp, #32
 8003c94:	af02      	add	r7, sp, #8
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	4608      	mov	r0, r1
 8003c9a:	4611      	mov	r1, r2
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	817b      	strh	r3, [r7, #10]
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	813b      	strh	r3, [r7, #8]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003cb8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003cc8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ccc:	9300      	str	r3, [sp, #0]
 8003cce:	6a3b      	ldr	r3, [r7, #32]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003cd6:	68f8      	ldr	r0, [r7, #12]
 8003cd8:	f000 f8c2 	bl	8003e60 <I2C_WaitOnFlagUntilTimeout>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00d      	beq.n	8003cfe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cf0:	d103      	bne.n	8003cfa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003cf8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e0aa      	b.n	8003e54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003cfe:	897b      	ldrh	r3, [r7, #10]
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	461a      	mov	r2, r3
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003d0c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d10:	6a3a      	ldr	r2, [r7, #32]
 8003d12:	4952      	ldr	r1, [pc, #328]	@ (8003e5c <I2C_RequestMemoryRead+0x1cc>)
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	f000 f91d 	bl	8003f54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d001      	beq.n	8003d24 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e097      	b.n	8003e54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d24:	2300      	movs	r3, #0
 8003d26:	617b      	str	r3, [r7, #20]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	617b      	str	r3, [r7, #20]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	617b      	str	r3, [r7, #20]
 8003d38:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d3c:	6a39      	ldr	r1, [r7, #32]
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	f000 f9a8 	bl	8004094 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00d      	beq.n	8003d66 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d4e:	2b04      	cmp	r3, #4
 8003d50:	d107      	bne.n	8003d62 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d60:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e076      	b.n	8003e54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d66:	88fb      	ldrh	r3, [r7, #6]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d105      	bne.n	8003d78 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d6c:	893b      	ldrh	r3, [r7, #8]
 8003d6e:	b2da      	uxtb	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	611a      	str	r2, [r3, #16]
 8003d76:	e021      	b.n	8003dbc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d78:	893b      	ldrh	r3, [r7, #8]
 8003d7a:	0a1b      	lsrs	r3, r3, #8
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	b2da      	uxtb	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d88:	6a39      	ldr	r1, [r7, #32]
 8003d8a:	68f8      	ldr	r0, [r7, #12]
 8003d8c:	f000 f982 	bl	8004094 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00d      	beq.n	8003db2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d9a:	2b04      	cmp	r3, #4
 8003d9c:	d107      	bne.n	8003dae <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e050      	b.n	8003e54 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003db2:	893b      	ldrh	r3, [r7, #8]
 8003db4:	b2da      	uxtb	r2, r3
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dbe:	6a39      	ldr	r1, [r7, #32]
 8003dc0:	68f8      	ldr	r0, [r7, #12]
 8003dc2:	f000 f967 	bl	8004094 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00d      	beq.n	8003de8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd0:	2b04      	cmp	r3, #4
 8003dd2:	d107      	bne.n	8003de4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003de2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e035      	b.n	8003e54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003df6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dfa:	9300      	str	r3, [sp, #0]
 8003dfc:	6a3b      	ldr	r3, [r7, #32]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e04:	68f8      	ldr	r0, [r7, #12]
 8003e06:	f000 f82b 	bl	8003e60 <I2C_WaitOnFlagUntilTimeout>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00d      	beq.n	8003e2c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e1e:	d103      	bne.n	8003e28 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e26:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e013      	b.n	8003e54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003e2c:	897b      	ldrh	r3, [r7, #10]
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	f043 0301 	orr.w	r3, r3, #1
 8003e34:	b2da      	uxtb	r2, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e3e:	6a3a      	ldr	r2, [r7, #32]
 8003e40:	4906      	ldr	r1, [pc, #24]	@ (8003e5c <I2C_RequestMemoryRead+0x1cc>)
 8003e42:	68f8      	ldr	r0, [r7, #12]
 8003e44:	f000 f886 	bl	8003f54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d001      	beq.n	8003e52 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e000      	b.n	8003e54 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3718      	adds	r7, #24
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	00010002 	.word	0x00010002

08003e60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	603b      	str	r3, [r7, #0]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e70:	e048      	b.n	8003f04 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e78:	d044      	beq.n	8003f04 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e7a:	f7fe fa09 	bl	8002290 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	683a      	ldr	r2, [r7, #0]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d302      	bcc.n	8003e90 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d139      	bne.n	8003f04 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	0c1b      	lsrs	r3, r3, #16
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d10d      	bne.n	8003eb6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	695b      	ldr	r3, [r3, #20]
 8003ea0:	43da      	mvns	r2, r3
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	bf0c      	ite	eq
 8003eac:	2301      	moveq	r3, #1
 8003eae:	2300      	movne	r3, #0
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	e00c      	b.n	8003ed0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	43da      	mvns	r2, r3
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	bf0c      	ite	eq
 8003ec8:	2301      	moveq	r3, #1
 8003eca:	2300      	movne	r3, #0
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	461a      	mov	r2, r3
 8003ed0:	79fb      	ldrb	r3, [r7, #7]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d116      	bne.n	8003f04 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2220      	movs	r2, #32
 8003ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef0:	f043 0220 	orr.w	r2, r3, #32
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e023      	b.n	8003f4c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	0c1b      	lsrs	r3, r3, #16
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d10d      	bne.n	8003f2a <I2C_WaitOnFlagUntilTimeout+0xca>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	695b      	ldr	r3, [r3, #20]
 8003f14:	43da      	mvns	r2, r3
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	4013      	ands	r3, r2
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	bf0c      	ite	eq
 8003f20:	2301      	moveq	r3, #1
 8003f22:	2300      	movne	r3, #0
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	461a      	mov	r2, r3
 8003f28:	e00c      	b.n	8003f44 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	699b      	ldr	r3, [r3, #24]
 8003f30:	43da      	mvns	r2, r3
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	4013      	ands	r3, r2
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	bf0c      	ite	eq
 8003f3c:	2301      	moveq	r3, #1
 8003f3e:	2300      	movne	r3, #0
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	461a      	mov	r2, r3
 8003f44:	79fb      	ldrb	r3, [r7, #7]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d093      	beq.n	8003e72 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3710      	adds	r7, #16
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
 8003f60:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f62:	e071      	b.n	8004048 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f72:	d123      	bne.n	8003fbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f82:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f8c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2200      	movs	r2, #0
 8003f92:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2220      	movs	r2, #32
 8003f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa8:	f043 0204 	orr.w	r2, r3, #4
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e067      	b.n	800408c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc2:	d041      	beq.n	8004048 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fc4:	f7fe f964 	bl	8002290 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d302      	bcc.n	8003fda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d136      	bne.n	8004048 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	0c1b      	lsrs	r3, r3, #16
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d10c      	bne.n	8003ffe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	695b      	ldr	r3, [r3, #20]
 8003fea:	43da      	mvns	r2, r3
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	4013      	ands	r3, r2
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	bf14      	ite	ne
 8003ff6:	2301      	movne	r3, #1
 8003ff8:	2300      	moveq	r3, #0
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	e00b      	b.n	8004016 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	43da      	mvns	r2, r3
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	4013      	ands	r3, r2
 800400a:	b29b      	uxth	r3, r3
 800400c:	2b00      	cmp	r3, #0
 800400e:	bf14      	ite	ne
 8004010:	2301      	movne	r3, #1
 8004012:	2300      	moveq	r3, #0
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2b00      	cmp	r3, #0
 8004018:	d016      	beq.n	8004048 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2220      	movs	r2, #32
 8004024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004034:	f043 0220 	orr.w	r2, r3, #32
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e021      	b.n	800408c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	0c1b      	lsrs	r3, r3, #16
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b01      	cmp	r3, #1
 8004050:	d10c      	bne.n	800406c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	695b      	ldr	r3, [r3, #20]
 8004058:	43da      	mvns	r2, r3
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	4013      	ands	r3, r2
 800405e:	b29b      	uxth	r3, r3
 8004060:	2b00      	cmp	r3, #0
 8004062:	bf14      	ite	ne
 8004064:	2301      	movne	r3, #1
 8004066:	2300      	moveq	r3, #0
 8004068:	b2db      	uxtb	r3, r3
 800406a:	e00b      	b.n	8004084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	43da      	mvns	r2, r3
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	4013      	ands	r3, r2
 8004078:	b29b      	uxth	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	bf14      	ite	ne
 800407e:	2301      	movne	r3, #1
 8004080:	2300      	moveq	r3, #0
 8004082:	b2db      	uxtb	r3, r3
 8004084:	2b00      	cmp	r3, #0
 8004086:	f47f af6d 	bne.w	8003f64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	3710      	adds	r7, #16
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040a0:	e034      	b.n	800410c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040a2:	68f8      	ldr	r0, [r7, #12]
 80040a4:	f000 f8e3 	bl	800426e <I2C_IsAcknowledgeFailed>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d001      	beq.n	80040b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e034      	b.n	800411c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b8:	d028      	beq.n	800410c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ba:	f7fe f8e9 	bl	8002290 <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	68ba      	ldr	r2, [r7, #8]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d302      	bcc.n	80040d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d11d      	bne.n	800410c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040da:	2b80      	cmp	r3, #128	@ 0x80
 80040dc:	d016      	beq.n	800410c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2220      	movs	r2, #32
 80040e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f8:	f043 0220 	orr.w	r2, r3, #32
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e007      	b.n	800411c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	695b      	ldr	r3, [r3, #20]
 8004112:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004116:	2b80      	cmp	r3, #128	@ 0x80
 8004118:	d1c3      	bne.n	80040a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800411a:	2300      	movs	r3, #0
}
 800411c:	4618      	mov	r0, r3
 800411e:	3710      	adds	r7, #16
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004130:	e034      	b.n	800419c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004132:	68f8      	ldr	r0, [r7, #12]
 8004134:	f000 f89b 	bl	800426e <I2C_IsAcknowledgeFailed>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d001      	beq.n	8004142 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e034      	b.n	80041ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004148:	d028      	beq.n	800419c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800414a:	f7fe f8a1 	bl	8002290 <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	68ba      	ldr	r2, [r7, #8]
 8004156:	429a      	cmp	r2, r3
 8004158:	d302      	bcc.n	8004160 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d11d      	bne.n	800419c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	f003 0304 	and.w	r3, r3, #4
 800416a:	2b04      	cmp	r3, #4
 800416c:	d016      	beq.n	800419c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2200      	movs	r2, #0
 8004172:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2220      	movs	r2, #32
 8004178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004188:	f043 0220 	orr.w	r2, r3, #32
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e007      	b.n	80041ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	f003 0304 	and.w	r3, r3, #4
 80041a6:	2b04      	cmp	r3, #4
 80041a8:	d1c3      	bne.n	8004132 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80041aa:	2300      	movs	r3, #0
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3710      	adds	r7, #16
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80041c0:	e049      	b.n	8004256 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	695b      	ldr	r3, [r3, #20]
 80041c8:	f003 0310 	and.w	r3, r3, #16
 80041cc:	2b10      	cmp	r3, #16
 80041ce:	d119      	bne.n	8004204 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f06f 0210 	mvn.w	r2, #16
 80041d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2220      	movs	r2, #32
 80041e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e030      	b.n	8004266 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004204:	f7fe f844 	bl	8002290 <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	68ba      	ldr	r2, [r7, #8]
 8004210:	429a      	cmp	r2, r3
 8004212:	d302      	bcc.n	800421a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d11d      	bne.n	8004256 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	695b      	ldr	r3, [r3, #20]
 8004220:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004224:	2b40      	cmp	r3, #64	@ 0x40
 8004226:	d016      	beq.n	8004256 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2200      	movs	r2, #0
 800422c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2220      	movs	r2, #32
 8004232:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004242:	f043 0220 	orr.w	r2, r3, #32
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e007      	b.n	8004266 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	695b      	ldr	r3, [r3, #20]
 800425c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004260:	2b40      	cmp	r3, #64	@ 0x40
 8004262:	d1ae      	bne.n	80041c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3710      	adds	r7, #16
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}

0800426e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800426e:	b480      	push	{r7}
 8004270:	b083      	sub	sp, #12
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	695b      	ldr	r3, [r3, #20]
 800427c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004280:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004284:	d11b      	bne.n	80042be <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800428e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2220      	movs	r2, #32
 800429a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042aa:	f043 0204 	orr.w	r2, r3, #4
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e000      	b.n	80042c0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80042be:	2300      	movs	r3, #0
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bc80      	pop	{r7}
 80042c8:	4770      	bx	lr
	...

080042cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b086      	sub	sp, #24
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d101      	bne.n	80042de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e272      	b.n	80047c4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0301 	and.w	r3, r3, #1
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	f000 8087 	beq.w	80043fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80042ec:	4b92      	ldr	r3, [pc, #584]	@ (8004538 <HAL_RCC_OscConfig+0x26c>)
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f003 030c 	and.w	r3, r3, #12
 80042f4:	2b04      	cmp	r3, #4
 80042f6:	d00c      	beq.n	8004312 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80042f8:	4b8f      	ldr	r3, [pc, #572]	@ (8004538 <HAL_RCC_OscConfig+0x26c>)
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f003 030c 	and.w	r3, r3, #12
 8004300:	2b08      	cmp	r3, #8
 8004302:	d112      	bne.n	800432a <HAL_RCC_OscConfig+0x5e>
 8004304:	4b8c      	ldr	r3, [pc, #560]	@ (8004538 <HAL_RCC_OscConfig+0x26c>)
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800430c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004310:	d10b      	bne.n	800432a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004312:	4b89      	ldr	r3, [pc, #548]	@ (8004538 <HAL_RCC_OscConfig+0x26c>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d06c      	beq.n	80043f8 <HAL_RCC_OscConfig+0x12c>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d168      	bne.n	80043f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e24c      	b.n	80047c4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004332:	d106      	bne.n	8004342 <HAL_RCC_OscConfig+0x76>
 8004334:	4b80      	ldr	r3, [pc, #512]	@ (8004538 <HAL_RCC_OscConfig+0x26c>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a7f      	ldr	r2, [pc, #508]	@ (8004538 <HAL_RCC_OscConfig+0x26c>)
 800433a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800433e:	6013      	str	r3, [r2, #0]
 8004340:	e02e      	b.n	80043a0 <HAL_RCC_OscConfig+0xd4>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d10c      	bne.n	8004364 <HAL_RCC_OscConfig+0x98>
 800434a:	4b7b      	ldr	r3, [pc, #492]	@ (8004538 <HAL_RCC_OscConfig+0x26c>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a7a      	ldr	r2, [pc, #488]	@ (8004538 <HAL_RCC_OscConfig+0x26c>)
 8004350:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004354:	6013      	str	r3, [r2, #0]
 8004356:	4b78      	ldr	r3, [pc, #480]	@ (8004538 <HAL_RCC_OscConfig+0x26c>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a77      	ldr	r2, [pc, #476]	@ (8004538 <HAL_RCC_OscConfig+0x26c>)
 800435c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004360:	6013      	str	r3, [r2, #0]
 8004362:	e01d      	b.n	80043a0 <HAL_RCC_OscConfig+0xd4>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800436c:	d10c      	bne.n	8004388 <HAL_RCC_OscConfig+0xbc>
 800436e:	4b72      	ldr	r3, [pc, #456]	@ (8004538 <HAL_RCC_OscConfig+0x26c>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a71      	ldr	r2, [pc, #452]	@ (8004538 <HAL_RCC_OscConfig+0x26c>)
 8004374:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004378:	6013      	str	r3, [r2, #0]
 800437a:	4b6f      	ldr	r3, [pc, #444]	@ (8004538 <HAL_RCC_OscConfig+0x26c>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a6e      	ldr	r2, [pc, #440]	@ (8004538 <HAL_RCC_OscConfig+0x26c>)
 8004380:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004384:	6013      	str	r3, [r2, #0]
 8004386:	e00b      	b.n	80043a0 <HAL_RCC_OscConfig+0xd4>
 8004388:	4b6b      	ldr	r3, [pc, #428]	@ (8004538 <HAL_RCC_OscConfig+0x26c>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a6a      	ldr	r2, [pc, #424]	@ (8004538 <HAL_RCC_OscConfig+0x26c>)
 800438e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004392:	6013      	str	r3, [r2, #0]
 8004394:	4b68      	ldr	r3, [pc, #416]	@ (8004538 <HAL_RCC_OscConfig+0x26c>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a67      	ldr	r2, [pc, #412]	@ (8004538 <HAL_RCC_OscConfig+0x26c>)
 800439a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800439e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d013      	beq.n	80043d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a8:	f7fd ff72 	bl	8002290 <HAL_GetTick>
 80043ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043ae:	e008      	b.n	80043c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043b0:	f7fd ff6e 	bl	8002290 <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	2b64      	cmp	r3, #100	@ 0x64
 80043bc:	d901      	bls.n	80043c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e200      	b.n	80047c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043c2:	4b5d      	ldr	r3, [pc, #372]	@ (8004538 <HAL_RCC_OscConfig+0x26c>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d0f0      	beq.n	80043b0 <HAL_RCC_OscConfig+0xe4>
 80043ce:	e014      	b.n	80043fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043d0:	f7fd ff5e 	bl	8002290 <HAL_GetTick>
 80043d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043d6:	e008      	b.n	80043ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043d8:	f7fd ff5a 	bl	8002290 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	2b64      	cmp	r3, #100	@ 0x64
 80043e4:	d901      	bls.n	80043ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e1ec      	b.n	80047c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043ea:	4b53      	ldr	r3, [pc, #332]	@ (8004538 <HAL_RCC_OscConfig+0x26c>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1f0      	bne.n	80043d8 <HAL_RCC_OscConfig+0x10c>
 80043f6:	e000      	b.n	80043fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0302 	and.w	r3, r3, #2
 8004402:	2b00      	cmp	r3, #0
 8004404:	d063      	beq.n	80044ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004406:	4b4c      	ldr	r3, [pc, #304]	@ (8004538 <HAL_RCC_OscConfig+0x26c>)
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	f003 030c 	and.w	r3, r3, #12
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00b      	beq.n	800442a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004412:	4b49      	ldr	r3, [pc, #292]	@ (8004538 <HAL_RCC_OscConfig+0x26c>)
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	f003 030c 	and.w	r3, r3, #12
 800441a:	2b08      	cmp	r3, #8
 800441c:	d11c      	bne.n	8004458 <HAL_RCC_OscConfig+0x18c>
 800441e:	4b46      	ldr	r3, [pc, #280]	@ (8004538 <HAL_RCC_OscConfig+0x26c>)
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d116      	bne.n	8004458 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800442a:	4b43      	ldr	r3, [pc, #268]	@ (8004538 <HAL_RCC_OscConfig+0x26c>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0302 	and.w	r3, r3, #2
 8004432:	2b00      	cmp	r3, #0
 8004434:	d005      	beq.n	8004442 <HAL_RCC_OscConfig+0x176>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	2b01      	cmp	r3, #1
 800443c:	d001      	beq.n	8004442 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e1c0      	b.n	80047c4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004442:	4b3d      	ldr	r3, [pc, #244]	@ (8004538 <HAL_RCC_OscConfig+0x26c>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	00db      	lsls	r3, r3, #3
 8004450:	4939      	ldr	r1, [pc, #228]	@ (8004538 <HAL_RCC_OscConfig+0x26c>)
 8004452:	4313      	orrs	r3, r2
 8004454:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004456:	e03a      	b.n	80044ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d020      	beq.n	80044a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004460:	4b36      	ldr	r3, [pc, #216]	@ (800453c <HAL_RCC_OscConfig+0x270>)
 8004462:	2201      	movs	r2, #1
 8004464:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004466:	f7fd ff13 	bl	8002290 <HAL_GetTick>
 800446a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800446c:	e008      	b.n	8004480 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800446e:	f7fd ff0f 	bl	8002290 <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	2b02      	cmp	r3, #2
 800447a:	d901      	bls.n	8004480 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e1a1      	b.n	80047c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004480:	4b2d      	ldr	r3, [pc, #180]	@ (8004538 <HAL_RCC_OscConfig+0x26c>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0302 	and.w	r3, r3, #2
 8004488:	2b00      	cmp	r3, #0
 800448a:	d0f0      	beq.n	800446e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800448c:	4b2a      	ldr	r3, [pc, #168]	@ (8004538 <HAL_RCC_OscConfig+0x26c>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	695b      	ldr	r3, [r3, #20]
 8004498:	00db      	lsls	r3, r3, #3
 800449a:	4927      	ldr	r1, [pc, #156]	@ (8004538 <HAL_RCC_OscConfig+0x26c>)
 800449c:	4313      	orrs	r3, r2
 800449e:	600b      	str	r3, [r1, #0]
 80044a0:	e015      	b.n	80044ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044a2:	4b26      	ldr	r3, [pc, #152]	@ (800453c <HAL_RCC_OscConfig+0x270>)
 80044a4:	2200      	movs	r2, #0
 80044a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a8:	f7fd fef2 	bl	8002290 <HAL_GetTick>
 80044ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044ae:	e008      	b.n	80044c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044b0:	f7fd feee 	bl	8002290 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d901      	bls.n	80044c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e180      	b.n	80047c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044c2:	4b1d      	ldr	r3, [pc, #116]	@ (8004538 <HAL_RCC_OscConfig+0x26c>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1f0      	bne.n	80044b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0308 	and.w	r3, r3, #8
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d03a      	beq.n	8004550 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	699b      	ldr	r3, [r3, #24]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d019      	beq.n	8004516 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044e2:	4b17      	ldr	r3, [pc, #92]	@ (8004540 <HAL_RCC_OscConfig+0x274>)
 80044e4:	2201      	movs	r2, #1
 80044e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044e8:	f7fd fed2 	bl	8002290 <HAL_GetTick>
 80044ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044ee:	e008      	b.n	8004502 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044f0:	f7fd fece 	bl	8002290 <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d901      	bls.n	8004502 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e160      	b.n	80047c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004502:	4b0d      	ldr	r3, [pc, #52]	@ (8004538 <HAL_RCC_OscConfig+0x26c>)
 8004504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d0f0      	beq.n	80044f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800450e:	2001      	movs	r0, #1
 8004510:	f000 face 	bl	8004ab0 <RCC_Delay>
 8004514:	e01c      	b.n	8004550 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004516:	4b0a      	ldr	r3, [pc, #40]	@ (8004540 <HAL_RCC_OscConfig+0x274>)
 8004518:	2200      	movs	r2, #0
 800451a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800451c:	f7fd feb8 	bl	8002290 <HAL_GetTick>
 8004520:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004522:	e00f      	b.n	8004544 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004524:	f7fd feb4 	bl	8002290 <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	2b02      	cmp	r3, #2
 8004530:	d908      	bls.n	8004544 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e146      	b.n	80047c4 <HAL_RCC_OscConfig+0x4f8>
 8004536:	bf00      	nop
 8004538:	40021000 	.word	0x40021000
 800453c:	42420000 	.word	0x42420000
 8004540:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004544:	4b92      	ldr	r3, [pc, #584]	@ (8004790 <HAL_RCC_OscConfig+0x4c4>)
 8004546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004548:	f003 0302 	and.w	r3, r3, #2
 800454c:	2b00      	cmp	r3, #0
 800454e:	d1e9      	bne.n	8004524 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0304 	and.w	r3, r3, #4
 8004558:	2b00      	cmp	r3, #0
 800455a:	f000 80a6 	beq.w	80046aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800455e:	2300      	movs	r3, #0
 8004560:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004562:	4b8b      	ldr	r3, [pc, #556]	@ (8004790 <HAL_RCC_OscConfig+0x4c4>)
 8004564:	69db      	ldr	r3, [r3, #28]
 8004566:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10d      	bne.n	800458a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800456e:	4b88      	ldr	r3, [pc, #544]	@ (8004790 <HAL_RCC_OscConfig+0x4c4>)
 8004570:	69db      	ldr	r3, [r3, #28]
 8004572:	4a87      	ldr	r2, [pc, #540]	@ (8004790 <HAL_RCC_OscConfig+0x4c4>)
 8004574:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004578:	61d3      	str	r3, [r2, #28]
 800457a:	4b85      	ldr	r3, [pc, #532]	@ (8004790 <HAL_RCC_OscConfig+0x4c4>)
 800457c:	69db      	ldr	r3, [r3, #28]
 800457e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004582:	60bb      	str	r3, [r7, #8]
 8004584:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004586:	2301      	movs	r3, #1
 8004588:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800458a:	4b82      	ldr	r3, [pc, #520]	@ (8004794 <HAL_RCC_OscConfig+0x4c8>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004592:	2b00      	cmp	r3, #0
 8004594:	d118      	bne.n	80045c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004596:	4b7f      	ldr	r3, [pc, #508]	@ (8004794 <HAL_RCC_OscConfig+0x4c8>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a7e      	ldr	r2, [pc, #504]	@ (8004794 <HAL_RCC_OscConfig+0x4c8>)
 800459c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045a2:	f7fd fe75 	bl	8002290 <HAL_GetTick>
 80045a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045a8:	e008      	b.n	80045bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045aa:	f7fd fe71 	bl	8002290 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	2b64      	cmp	r3, #100	@ 0x64
 80045b6:	d901      	bls.n	80045bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e103      	b.n	80047c4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045bc:	4b75      	ldr	r3, [pc, #468]	@ (8004794 <HAL_RCC_OscConfig+0x4c8>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d0f0      	beq.n	80045aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d106      	bne.n	80045de <HAL_RCC_OscConfig+0x312>
 80045d0:	4b6f      	ldr	r3, [pc, #444]	@ (8004790 <HAL_RCC_OscConfig+0x4c4>)
 80045d2:	6a1b      	ldr	r3, [r3, #32]
 80045d4:	4a6e      	ldr	r2, [pc, #440]	@ (8004790 <HAL_RCC_OscConfig+0x4c4>)
 80045d6:	f043 0301 	orr.w	r3, r3, #1
 80045da:	6213      	str	r3, [r2, #32]
 80045dc:	e02d      	b.n	800463a <HAL_RCC_OscConfig+0x36e>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d10c      	bne.n	8004600 <HAL_RCC_OscConfig+0x334>
 80045e6:	4b6a      	ldr	r3, [pc, #424]	@ (8004790 <HAL_RCC_OscConfig+0x4c4>)
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	4a69      	ldr	r2, [pc, #420]	@ (8004790 <HAL_RCC_OscConfig+0x4c4>)
 80045ec:	f023 0301 	bic.w	r3, r3, #1
 80045f0:	6213      	str	r3, [r2, #32]
 80045f2:	4b67      	ldr	r3, [pc, #412]	@ (8004790 <HAL_RCC_OscConfig+0x4c4>)
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	4a66      	ldr	r2, [pc, #408]	@ (8004790 <HAL_RCC_OscConfig+0x4c4>)
 80045f8:	f023 0304 	bic.w	r3, r3, #4
 80045fc:	6213      	str	r3, [r2, #32]
 80045fe:	e01c      	b.n	800463a <HAL_RCC_OscConfig+0x36e>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	2b05      	cmp	r3, #5
 8004606:	d10c      	bne.n	8004622 <HAL_RCC_OscConfig+0x356>
 8004608:	4b61      	ldr	r3, [pc, #388]	@ (8004790 <HAL_RCC_OscConfig+0x4c4>)
 800460a:	6a1b      	ldr	r3, [r3, #32]
 800460c:	4a60      	ldr	r2, [pc, #384]	@ (8004790 <HAL_RCC_OscConfig+0x4c4>)
 800460e:	f043 0304 	orr.w	r3, r3, #4
 8004612:	6213      	str	r3, [r2, #32]
 8004614:	4b5e      	ldr	r3, [pc, #376]	@ (8004790 <HAL_RCC_OscConfig+0x4c4>)
 8004616:	6a1b      	ldr	r3, [r3, #32]
 8004618:	4a5d      	ldr	r2, [pc, #372]	@ (8004790 <HAL_RCC_OscConfig+0x4c4>)
 800461a:	f043 0301 	orr.w	r3, r3, #1
 800461e:	6213      	str	r3, [r2, #32]
 8004620:	e00b      	b.n	800463a <HAL_RCC_OscConfig+0x36e>
 8004622:	4b5b      	ldr	r3, [pc, #364]	@ (8004790 <HAL_RCC_OscConfig+0x4c4>)
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	4a5a      	ldr	r2, [pc, #360]	@ (8004790 <HAL_RCC_OscConfig+0x4c4>)
 8004628:	f023 0301 	bic.w	r3, r3, #1
 800462c:	6213      	str	r3, [r2, #32]
 800462e:	4b58      	ldr	r3, [pc, #352]	@ (8004790 <HAL_RCC_OscConfig+0x4c4>)
 8004630:	6a1b      	ldr	r3, [r3, #32]
 8004632:	4a57      	ldr	r2, [pc, #348]	@ (8004790 <HAL_RCC_OscConfig+0x4c4>)
 8004634:	f023 0304 	bic.w	r3, r3, #4
 8004638:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d015      	beq.n	800466e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004642:	f7fd fe25 	bl	8002290 <HAL_GetTick>
 8004646:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004648:	e00a      	b.n	8004660 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800464a:	f7fd fe21 	bl	8002290 <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004658:	4293      	cmp	r3, r2
 800465a:	d901      	bls.n	8004660 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e0b1      	b.n	80047c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004660:	4b4b      	ldr	r3, [pc, #300]	@ (8004790 <HAL_RCC_OscConfig+0x4c4>)
 8004662:	6a1b      	ldr	r3, [r3, #32]
 8004664:	f003 0302 	and.w	r3, r3, #2
 8004668:	2b00      	cmp	r3, #0
 800466a:	d0ee      	beq.n	800464a <HAL_RCC_OscConfig+0x37e>
 800466c:	e014      	b.n	8004698 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800466e:	f7fd fe0f 	bl	8002290 <HAL_GetTick>
 8004672:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004674:	e00a      	b.n	800468c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004676:	f7fd fe0b 	bl	8002290 <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004684:	4293      	cmp	r3, r2
 8004686:	d901      	bls.n	800468c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	e09b      	b.n	80047c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800468c:	4b40      	ldr	r3, [pc, #256]	@ (8004790 <HAL_RCC_OscConfig+0x4c4>)
 800468e:	6a1b      	ldr	r3, [r3, #32]
 8004690:	f003 0302 	and.w	r3, r3, #2
 8004694:	2b00      	cmp	r3, #0
 8004696:	d1ee      	bne.n	8004676 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004698:	7dfb      	ldrb	r3, [r7, #23]
 800469a:	2b01      	cmp	r3, #1
 800469c:	d105      	bne.n	80046aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800469e:	4b3c      	ldr	r3, [pc, #240]	@ (8004790 <HAL_RCC_OscConfig+0x4c4>)
 80046a0:	69db      	ldr	r3, [r3, #28]
 80046a2:	4a3b      	ldr	r2, [pc, #236]	@ (8004790 <HAL_RCC_OscConfig+0x4c4>)
 80046a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	69db      	ldr	r3, [r3, #28]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	f000 8087 	beq.w	80047c2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046b4:	4b36      	ldr	r3, [pc, #216]	@ (8004790 <HAL_RCC_OscConfig+0x4c4>)
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f003 030c 	and.w	r3, r3, #12
 80046bc:	2b08      	cmp	r3, #8
 80046be:	d061      	beq.n	8004784 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	69db      	ldr	r3, [r3, #28]
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d146      	bne.n	8004756 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046c8:	4b33      	ldr	r3, [pc, #204]	@ (8004798 <HAL_RCC_OscConfig+0x4cc>)
 80046ca:	2200      	movs	r2, #0
 80046cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ce:	f7fd fddf 	bl	8002290 <HAL_GetTick>
 80046d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046d4:	e008      	b.n	80046e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046d6:	f7fd fddb 	bl	8002290 <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d901      	bls.n	80046e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e06d      	b.n	80047c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046e8:	4b29      	ldr	r3, [pc, #164]	@ (8004790 <HAL_RCC_OscConfig+0x4c4>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d1f0      	bne.n	80046d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a1b      	ldr	r3, [r3, #32]
 80046f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046fc:	d108      	bne.n	8004710 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80046fe:	4b24      	ldr	r3, [pc, #144]	@ (8004790 <HAL_RCC_OscConfig+0x4c4>)
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	4921      	ldr	r1, [pc, #132]	@ (8004790 <HAL_RCC_OscConfig+0x4c4>)
 800470c:	4313      	orrs	r3, r2
 800470e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004710:	4b1f      	ldr	r3, [pc, #124]	@ (8004790 <HAL_RCC_OscConfig+0x4c4>)
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a19      	ldr	r1, [r3, #32]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004720:	430b      	orrs	r3, r1
 8004722:	491b      	ldr	r1, [pc, #108]	@ (8004790 <HAL_RCC_OscConfig+0x4c4>)
 8004724:	4313      	orrs	r3, r2
 8004726:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004728:	4b1b      	ldr	r3, [pc, #108]	@ (8004798 <HAL_RCC_OscConfig+0x4cc>)
 800472a:	2201      	movs	r2, #1
 800472c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800472e:	f7fd fdaf 	bl	8002290 <HAL_GetTick>
 8004732:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004734:	e008      	b.n	8004748 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004736:	f7fd fdab 	bl	8002290 <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	2b02      	cmp	r3, #2
 8004742:	d901      	bls.n	8004748 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	e03d      	b.n	80047c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004748:	4b11      	ldr	r3, [pc, #68]	@ (8004790 <HAL_RCC_OscConfig+0x4c4>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d0f0      	beq.n	8004736 <HAL_RCC_OscConfig+0x46a>
 8004754:	e035      	b.n	80047c2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004756:	4b10      	ldr	r3, [pc, #64]	@ (8004798 <HAL_RCC_OscConfig+0x4cc>)
 8004758:	2200      	movs	r2, #0
 800475a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800475c:	f7fd fd98 	bl	8002290 <HAL_GetTick>
 8004760:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004762:	e008      	b.n	8004776 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004764:	f7fd fd94 	bl	8002290 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	2b02      	cmp	r3, #2
 8004770:	d901      	bls.n	8004776 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e026      	b.n	80047c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004776:	4b06      	ldr	r3, [pc, #24]	@ (8004790 <HAL_RCC_OscConfig+0x4c4>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d1f0      	bne.n	8004764 <HAL_RCC_OscConfig+0x498>
 8004782:	e01e      	b.n	80047c2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	69db      	ldr	r3, [r3, #28]
 8004788:	2b01      	cmp	r3, #1
 800478a:	d107      	bne.n	800479c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e019      	b.n	80047c4 <HAL_RCC_OscConfig+0x4f8>
 8004790:	40021000 	.word	0x40021000
 8004794:	40007000 	.word	0x40007000
 8004798:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800479c:	4b0b      	ldr	r3, [pc, #44]	@ (80047cc <HAL_RCC_OscConfig+0x500>)
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a1b      	ldr	r3, [r3, #32]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d106      	bne.n	80047be <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d001      	beq.n	80047c2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e000      	b.n	80047c4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3718      	adds	r7, #24
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	40021000 	.word	0x40021000

080047d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d101      	bne.n	80047e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e0d0      	b.n	8004986 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047e4:	4b6a      	ldr	r3, [pc, #424]	@ (8004990 <HAL_RCC_ClockConfig+0x1c0>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0307 	and.w	r3, r3, #7
 80047ec:	683a      	ldr	r2, [r7, #0]
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d910      	bls.n	8004814 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047f2:	4b67      	ldr	r3, [pc, #412]	@ (8004990 <HAL_RCC_ClockConfig+0x1c0>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f023 0207 	bic.w	r2, r3, #7
 80047fa:	4965      	ldr	r1, [pc, #404]	@ (8004990 <HAL_RCC_ClockConfig+0x1c0>)
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	4313      	orrs	r3, r2
 8004800:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004802:	4b63      	ldr	r3, [pc, #396]	@ (8004990 <HAL_RCC_ClockConfig+0x1c0>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0307 	and.w	r3, r3, #7
 800480a:	683a      	ldr	r2, [r7, #0]
 800480c:	429a      	cmp	r2, r3
 800480e:	d001      	beq.n	8004814 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e0b8      	b.n	8004986 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0302 	and.w	r3, r3, #2
 800481c:	2b00      	cmp	r3, #0
 800481e:	d020      	beq.n	8004862 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0304 	and.w	r3, r3, #4
 8004828:	2b00      	cmp	r3, #0
 800482a:	d005      	beq.n	8004838 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800482c:	4b59      	ldr	r3, [pc, #356]	@ (8004994 <HAL_RCC_ClockConfig+0x1c4>)
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	4a58      	ldr	r2, [pc, #352]	@ (8004994 <HAL_RCC_ClockConfig+0x1c4>)
 8004832:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004836:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0308 	and.w	r3, r3, #8
 8004840:	2b00      	cmp	r3, #0
 8004842:	d005      	beq.n	8004850 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004844:	4b53      	ldr	r3, [pc, #332]	@ (8004994 <HAL_RCC_ClockConfig+0x1c4>)
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	4a52      	ldr	r2, [pc, #328]	@ (8004994 <HAL_RCC_ClockConfig+0x1c4>)
 800484a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800484e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004850:	4b50      	ldr	r3, [pc, #320]	@ (8004994 <HAL_RCC_ClockConfig+0x1c4>)
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	494d      	ldr	r1, [pc, #308]	@ (8004994 <HAL_RCC_ClockConfig+0x1c4>)
 800485e:	4313      	orrs	r3, r2
 8004860:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0301 	and.w	r3, r3, #1
 800486a:	2b00      	cmp	r3, #0
 800486c:	d040      	beq.n	80048f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d107      	bne.n	8004886 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004876:	4b47      	ldr	r3, [pc, #284]	@ (8004994 <HAL_RCC_ClockConfig+0x1c4>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d115      	bne.n	80048ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e07f      	b.n	8004986 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	2b02      	cmp	r3, #2
 800488c:	d107      	bne.n	800489e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800488e:	4b41      	ldr	r3, [pc, #260]	@ (8004994 <HAL_RCC_ClockConfig+0x1c4>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d109      	bne.n	80048ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e073      	b.n	8004986 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800489e:	4b3d      	ldr	r3, [pc, #244]	@ (8004994 <HAL_RCC_ClockConfig+0x1c4>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0302 	and.w	r3, r3, #2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d101      	bne.n	80048ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e06b      	b.n	8004986 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048ae:	4b39      	ldr	r3, [pc, #228]	@ (8004994 <HAL_RCC_ClockConfig+0x1c4>)
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f023 0203 	bic.w	r2, r3, #3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	4936      	ldr	r1, [pc, #216]	@ (8004994 <HAL_RCC_ClockConfig+0x1c4>)
 80048bc:	4313      	orrs	r3, r2
 80048be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048c0:	f7fd fce6 	bl	8002290 <HAL_GetTick>
 80048c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048c6:	e00a      	b.n	80048de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048c8:	f7fd fce2 	bl	8002290 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d901      	bls.n	80048de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e053      	b.n	8004986 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048de:	4b2d      	ldr	r3, [pc, #180]	@ (8004994 <HAL_RCC_ClockConfig+0x1c4>)
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f003 020c 	and.w	r2, r3, #12
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d1eb      	bne.n	80048c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048f0:	4b27      	ldr	r3, [pc, #156]	@ (8004990 <HAL_RCC_ClockConfig+0x1c0>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0307 	and.w	r3, r3, #7
 80048f8:	683a      	ldr	r2, [r7, #0]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d210      	bcs.n	8004920 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048fe:	4b24      	ldr	r3, [pc, #144]	@ (8004990 <HAL_RCC_ClockConfig+0x1c0>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f023 0207 	bic.w	r2, r3, #7
 8004906:	4922      	ldr	r1, [pc, #136]	@ (8004990 <HAL_RCC_ClockConfig+0x1c0>)
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	4313      	orrs	r3, r2
 800490c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800490e:	4b20      	ldr	r3, [pc, #128]	@ (8004990 <HAL_RCC_ClockConfig+0x1c0>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0307 	and.w	r3, r3, #7
 8004916:	683a      	ldr	r2, [r7, #0]
 8004918:	429a      	cmp	r2, r3
 800491a:	d001      	beq.n	8004920 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e032      	b.n	8004986 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0304 	and.w	r3, r3, #4
 8004928:	2b00      	cmp	r3, #0
 800492a:	d008      	beq.n	800493e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800492c:	4b19      	ldr	r3, [pc, #100]	@ (8004994 <HAL_RCC_ClockConfig+0x1c4>)
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	4916      	ldr	r1, [pc, #88]	@ (8004994 <HAL_RCC_ClockConfig+0x1c4>)
 800493a:	4313      	orrs	r3, r2
 800493c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0308 	and.w	r3, r3, #8
 8004946:	2b00      	cmp	r3, #0
 8004948:	d009      	beq.n	800495e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800494a:	4b12      	ldr	r3, [pc, #72]	@ (8004994 <HAL_RCC_ClockConfig+0x1c4>)
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	00db      	lsls	r3, r3, #3
 8004958:	490e      	ldr	r1, [pc, #56]	@ (8004994 <HAL_RCC_ClockConfig+0x1c4>)
 800495a:	4313      	orrs	r3, r2
 800495c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800495e:	f000 f821 	bl	80049a4 <HAL_RCC_GetSysClockFreq>
 8004962:	4602      	mov	r2, r0
 8004964:	4b0b      	ldr	r3, [pc, #44]	@ (8004994 <HAL_RCC_ClockConfig+0x1c4>)
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	091b      	lsrs	r3, r3, #4
 800496a:	f003 030f 	and.w	r3, r3, #15
 800496e:	490a      	ldr	r1, [pc, #40]	@ (8004998 <HAL_RCC_ClockConfig+0x1c8>)
 8004970:	5ccb      	ldrb	r3, [r1, r3]
 8004972:	fa22 f303 	lsr.w	r3, r2, r3
 8004976:	4a09      	ldr	r2, [pc, #36]	@ (800499c <HAL_RCC_ClockConfig+0x1cc>)
 8004978:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800497a:	4b09      	ldr	r3, [pc, #36]	@ (80049a0 <HAL_RCC_ClockConfig+0x1d0>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4618      	mov	r0, r3
 8004980:	f7fd fc44 	bl	800220c <HAL_InitTick>

  return HAL_OK;
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	3710      	adds	r7, #16
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	40022000 	.word	0x40022000
 8004994:	40021000 	.word	0x40021000
 8004998:	080058f0 	.word	0x080058f0
 800499c:	20000050 	.word	0x20000050
 80049a0:	20000054 	.word	0x20000054

080049a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b087      	sub	sp, #28
 80049a8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80049aa:	2300      	movs	r3, #0
 80049ac:	60fb      	str	r3, [r7, #12]
 80049ae:	2300      	movs	r3, #0
 80049b0:	60bb      	str	r3, [r7, #8]
 80049b2:	2300      	movs	r3, #0
 80049b4:	617b      	str	r3, [r7, #20]
 80049b6:	2300      	movs	r3, #0
 80049b8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80049ba:	2300      	movs	r3, #0
 80049bc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80049be:	4b1e      	ldr	r3, [pc, #120]	@ (8004a38 <HAL_RCC_GetSysClockFreq+0x94>)
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f003 030c 	and.w	r3, r3, #12
 80049ca:	2b04      	cmp	r3, #4
 80049cc:	d002      	beq.n	80049d4 <HAL_RCC_GetSysClockFreq+0x30>
 80049ce:	2b08      	cmp	r3, #8
 80049d0:	d003      	beq.n	80049da <HAL_RCC_GetSysClockFreq+0x36>
 80049d2:	e027      	b.n	8004a24 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80049d4:	4b19      	ldr	r3, [pc, #100]	@ (8004a3c <HAL_RCC_GetSysClockFreq+0x98>)
 80049d6:	613b      	str	r3, [r7, #16]
      break;
 80049d8:	e027      	b.n	8004a2a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	0c9b      	lsrs	r3, r3, #18
 80049de:	f003 030f 	and.w	r3, r3, #15
 80049e2:	4a17      	ldr	r2, [pc, #92]	@ (8004a40 <HAL_RCC_GetSysClockFreq+0x9c>)
 80049e4:	5cd3      	ldrb	r3, [r2, r3]
 80049e6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d010      	beq.n	8004a14 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80049f2:	4b11      	ldr	r3, [pc, #68]	@ (8004a38 <HAL_RCC_GetSysClockFreq+0x94>)
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	0c5b      	lsrs	r3, r3, #17
 80049f8:	f003 0301 	and.w	r3, r3, #1
 80049fc:	4a11      	ldr	r2, [pc, #68]	@ (8004a44 <HAL_RCC_GetSysClockFreq+0xa0>)
 80049fe:	5cd3      	ldrb	r3, [r2, r3]
 8004a00:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a0d      	ldr	r2, [pc, #52]	@ (8004a3c <HAL_RCC_GetSysClockFreq+0x98>)
 8004a06:	fb03 f202 	mul.w	r2, r3, r2
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a10:	617b      	str	r3, [r7, #20]
 8004a12:	e004      	b.n	8004a1e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4a0c      	ldr	r2, [pc, #48]	@ (8004a48 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004a18:	fb02 f303 	mul.w	r3, r2, r3
 8004a1c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	613b      	str	r3, [r7, #16]
      break;
 8004a22:	e002      	b.n	8004a2a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004a24:	4b05      	ldr	r3, [pc, #20]	@ (8004a3c <HAL_RCC_GetSysClockFreq+0x98>)
 8004a26:	613b      	str	r3, [r7, #16]
      break;
 8004a28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a2a:	693b      	ldr	r3, [r7, #16]
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	371c      	adds	r7, #28
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bc80      	pop	{r7}
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	40021000 	.word	0x40021000
 8004a3c:	007a1200 	.word	0x007a1200
 8004a40:	08005908 	.word	0x08005908
 8004a44:	08005918 	.word	0x08005918
 8004a48:	003d0900 	.word	0x003d0900

08004a4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a50:	4b02      	ldr	r3, [pc, #8]	@ (8004a5c <HAL_RCC_GetHCLKFreq+0x10>)
 8004a52:	681b      	ldr	r3, [r3, #0]
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bc80      	pop	{r7}
 8004a5a:	4770      	bx	lr
 8004a5c:	20000050 	.word	0x20000050

08004a60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a64:	f7ff fff2 	bl	8004a4c <HAL_RCC_GetHCLKFreq>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	4b05      	ldr	r3, [pc, #20]	@ (8004a80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	0a1b      	lsrs	r3, r3, #8
 8004a70:	f003 0307 	and.w	r3, r3, #7
 8004a74:	4903      	ldr	r1, [pc, #12]	@ (8004a84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a76:	5ccb      	ldrb	r3, [r1, r3]
 8004a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	40021000 	.word	0x40021000
 8004a84:	08005900 	.word	0x08005900

08004a88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a8c:	f7ff ffde 	bl	8004a4c <HAL_RCC_GetHCLKFreq>
 8004a90:	4602      	mov	r2, r0
 8004a92:	4b05      	ldr	r3, [pc, #20]	@ (8004aa8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	0adb      	lsrs	r3, r3, #11
 8004a98:	f003 0307 	and.w	r3, r3, #7
 8004a9c:	4903      	ldr	r1, [pc, #12]	@ (8004aac <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a9e:	5ccb      	ldrb	r3, [r1, r3]
 8004aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	40021000 	.word	0x40021000
 8004aac:	08005900 	.word	0x08005900

08004ab0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b085      	sub	sp, #20
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004ab8:	4b0a      	ldr	r3, [pc, #40]	@ (8004ae4 <RCC_Delay+0x34>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a0a      	ldr	r2, [pc, #40]	@ (8004ae8 <RCC_Delay+0x38>)
 8004abe:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac2:	0a5b      	lsrs	r3, r3, #9
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	fb02 f303 	mul.w	r3, r2, r3
 8004aca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004acc:	bf00      	nop
  }
  while (Delay --);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	1e5a      	subs	r2, r3, #1
 8004ad2:	60fa      	str	r2, [r7, #12]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1f9      	bne.n	8004acc <RCC_Delay+0x1c>
}
 8004ad8:	bf00      	nop
 8004ada:	bf00      	nop
 8004adc:	3714      	adds	r7, #20
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bc80      	pop	{r7}
 8004ae2:	4770      	bx	lr
 8004ae4:	20000050 	.word	0x20000050
 8004ae8:	10624dd3 	.word	0x10624dd3

08004aec <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b086      	sub	sp, #24
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004af4:	2300      	movs	r3, #0
 8004af6:	613b      	str	r3, [r7, #16]
 8004af8:	2300      	movs	r3, #0
 8004afa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0301 	and.w	r3, r3, #1
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d07d      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b0c:	4b4f      	ldr	r3, [pc, #316]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b0e:	69db      	ldr	r3, [r3, #28]
 8004b10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d10d      	bne.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b18:	4b4c      	ldr	r3, [pc, #304]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b1a:	69db      	ldr	r3, [r3, #28]
 8004b1c:	4a4b      	ldr	r2, [pc, #300]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b22:	61d3      	str	r3, [r2, #28]
 8004b24:	4b49      	ldr	r3, [pc, #292]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b26:	69db      	ldr	r3, [r3, #28]
 8004b28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b2c:	60bb      	str	r3, [r7, #8]
 8004b2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b30:	2301      	movs	r3, #1
 8004b32:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b34:	4b46      	ldr	r3, [pc, #280]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d118      	bne.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b40:	4b43      	ldr	r3, [pc, #268]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a42      	ldr	r2, [pc, #264]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b4a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b4c:	f7fd fba0 	bl	8002290 <HAL_GetTick>
 8004b50:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b52:	e008      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b54:	f7fd fb9c 	bl	8002290 <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	2b64      	cmp	r3, #100	@ 0x64
 8004b60:	d901      	bls.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e06d      	b.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b66:	4b3a      	ldr	r3, [pc, #232]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d0f0      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b72:	4b36      	ldr	r3, [pc, #216]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b74:	6a1b      	ldr	r3, [r3, #32]
 8004b76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b7a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d02e      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d027      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b90:	4b2e      	ldr	r3, [pc, #184]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b92:	6a1b      	ldr	r3, [r3, #32]
 8004b94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b98:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b9a:	4b2e      	ldr	r3, [pc, #184]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ba0:	4b2c      	ldr	r3, [pc, #176]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004ba6:	4a29      	ldr	r2, [pc, #164]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f003 0301 	and.w	r3, r3, #1
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d014      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bb6:	f7fd fb6b 	bl	8002290 <HAL_GetTick>
 8004bba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bbc:	e00a      	b.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bbe:	f7fd fb67 	bl	8002290 <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d901      	bls.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e036      	b.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bd4:	4b1d      	ldr	r3, [pc, #116]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bd6:	6a1b      	ldr	r3, [r3, #32]
 8004bd8:	f003 0302 	and.w	r3, r3, #2
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d0ee      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004be0:	4b1a      	ldr	r3, [pc, #104]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004be2:	6a1b      	ldr	r3, [r3, #32]
 8004be4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	4917      	ldr	r1, [pc, #92]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004bf2:	7dfb      	ldrb	r3, [r7, #23]
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d105      	bne.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bf8:	4b14      	ldr	r3, [pc, #80]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bfa:	69db      	ldr	r3, [r3, #28]
 8004bfc:	4a13      	ldr	r2, [pc, #76]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bfe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c02:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0302 	and.w	r3, r3, #2
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d008      	beq.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c10:	4b0e      	ldr	r3, [pc, #56]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	490b      	ldr	r1, [pc, #44]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0310 	and.w	r3, r3, #16
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d008      	beq.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c2e:	4b07      	ldr	r3, [pc, #28]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	4904      	ldr	r1, [pc, #16]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3718      	adds	r7, #24
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	40021000 	.word	0x40021000
 8004c50:	40007000 	.word	0x40007000
 8004c54:	42420440 	.word	0x42420440

08004c58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d101      	bne.n	8004c6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e076      	b.n	8004d58 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d108      	bne.n	8004c84 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c7a:	d009      	beq.n	8004c90 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	61da      	str	r2, [r3, #28]
 8004c82:	e005      	b.n	8004c90 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d106      	bne.n	8004cb0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f7fd f91e 	bl	8001eec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2202      	movs	r2, #2
 8004cb4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004cc6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004cd8:	431a      	orrs	r2, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ce2:	431a      	orrs	r2, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	f003 0302 	and.w	r3, r3, #2
 8004cec:	431a      	orrs	r2, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	695b      	ldr	r3, [r3, #20]
 8004cf2:	f003 0301 	and.w	r3, r3, #1
 8004cf6:	431a      	orrs	r2, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	699b      	ldr	r3, [r3, #24]
 8004cfc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d00:	431a      	orrs	r2, r3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	69db      	ldr	r3, [r3, #28]
 8004d06:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d0a:	431a      	orrs	r2, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a1b      	ldr	r3, [r3, #32]
 8004d10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d14:	ea42 0103 	orr.w	r1, r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d1c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	430a      	orrs	r2, r1
 8004d26:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	699b      	ldr	r3, [r3, #24]
 8004d2c:	0c1a      	lsrs	r2, r3, #16
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f002 0204 	and.w	r2, r2, #4
 8004d36:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	69da      	ldr	r2, [r3, #28]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d46:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2201      	movs	r2, #1
 8004d52:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004d56:	2300      	movs	r3, #0
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3708      	adds	r7, #8
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d101      	bne.n	8004d72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e042      	b.n	8004df8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d106      	bne.n	8004d8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f7fd f9b0 	bl	80020ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2224      	movs	r2, #36	@ 0x24
 8004d90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68da      	ldr	r2, [r3, #12]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004da2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f000 fcd5 	bl	8005754 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	691a      	ldr	r2, [r3, #16]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004db8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	695a      	ldr	r2, [r3, #20]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004dc8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	68da      	ldr	r2, [r3, #12]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004dd8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2220      	movs	r2, #32
 8004de4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2220      	movs	r2, #32
 8004dec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004df6:	2300      	movs	r3, #0
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3708      	adds	r7, #8
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	2b20      	cmp	r3, #32
 8004e18:	d112      	bne.n	8004e40 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d002      	beq.n	8004e26 <HAL_UART_Receive_IT+0x26>
 8004e20:	88fb      	ldrh	r3, [r7, #6]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d101      	bne.n	8004e2a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e00b      	b.n	8004e42 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004e30:	88fb      	ldrh	r3, [r7, #6]
 8004e32:	461a      	mov	r2, r3
 8004e34:	68b9      	ldr	r1, [r7, #8]
 8004e36:	68f8      	ldr	r0, [r7, #12]
 8004e38:	f000 fab7 	bl	80053aa <UART_Start_Receive_IT>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	e000      	b.n	8004e42 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004e40:	2302      	movs	r3, #2
  }
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3710      	adds	r7, #16
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
	...

08004e4c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b0ba      	sub	sp, #232	@ 0xe8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004e72:	2300      	movs	r3, #0
 8004e74:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004e7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e82:	f003 030f 	and.w	r3, r3, #15
 8004e86:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004e8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d10f      	bne.n	8004eb2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e96:	f003 0320 	and.w	r3, r3, #32
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d009      	beq.n	8004eb2 <HAL_UART_IRQHandler+0x66>
 8004e9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ea2:	f003 0320 	and.w	r3, r3, #32
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d003      	beq.n	8004eb2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 fb93 	bl	80055d6 <UART_Receive_IT>
      return;
 8004eb0:	e25b      	b.n	800536a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004eb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	f000 80de 	beq.w	8005078 <HAL_UART_IRQHandler+0x22c>
 8004ebc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ec0:	f003 0301 	and.w	r3, r3, #1
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d106      	bne.n	8004ed6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004ec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ecc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	f000 80d1 	beq.w	8005078 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004ed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004eda:	f003 0301 	and.w	r3, r3, #1
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d00b      	beq.n	8004efa <HAL_UART_IRQHandler+0xae>
 8004ee2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ee6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d005      	beq.n	8004efa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ef2:	f043 0201 	orr.w	r2, r3, #1
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004efe:	f003 0304 	and.w	r3, r3, #4
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00b      	beq.n	8004f1e <HAL_UART_IRQHandler+0xd2>
 8004f06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f0a:	f003 0301 	and.w	r3, r3, #1
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d005      	beq.n	8004f1e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f16:	f043 0202 	orr.w	r2, r3, #2
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f22:	f003 0302 	and.w	r3, r3, #2
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00b      	beq.n	8004f42 <HAL_UART_IRQHandler+0xf6>
 8004f2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f2e:	f003 0301 	and.w	r3, r3, #1
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d005      	beq.n	8004f42 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f3a:	f043 0204 	orr.w	r2, r3, #4
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004f42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f46:	f003 0308 	and.w	r3, r3, #8
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d011      	beq.n	8004f72 <HAL_UART_IRQHandler+0x126>
 8004f4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f52:	f003 0320 	and.w	r3, r3, #32
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d105      	bne.n	8004f66 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004f5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f5e:	f003 0301 	and.w	r3, r3, #1
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d005      	beq.n	8004f72 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f6a:	f043 0208 	orr.w	r2, r3, #8
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	f000 81f2 	beq.w	8005360 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f80:	f003 0320 	and.w	r3, r3, #32
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d008      	beq.n	8004f9a <HAL_UART_IRQHandler+0x14e>
 8004f88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f8c:	f003 0320 	and.w	r3, r3, #32
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d002      	beq.n	8004f9a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f000 fb1e 	bl	80055d6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	695b      	ldr	r3, [r3, #20]
 8004fa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	bf14      	ite	ne
 8004fa8:	2301      	movne	r3, #1
 8004faa:	2300      	moveq	r3, #0
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fb6:	f003 0308 	and.w	r3, r3, #8
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d103      	bne.n	8004fc6 <HAL_UART_IRQHandler+0x17a>
 8004fbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d04f      	beq.n	8005066 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 fa28 	bl	800541c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	695b      	ldr	r3, [r3, #20]
 8004fd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d041      	beq.n	800505e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	3314      	adds	r3, #20
 8004fe0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004fe8:	e853 3f00 	ldrex	r3, [r3]
 8004fec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004ff0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004ff4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ff8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	3314      	adds	r3, #20
 8005002:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005006:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800500a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800500e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005012:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005016:	e841 2300 	strex	r3, r2, [r1]
 800501a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800501e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1d9      	bne.n	8004fda <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800502a:	2b00      	cmp	r3, #0
 800502c:	d013      	beq.n	8005056 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005032:	4a7e      	ldr	r2, [pc, #504]	@ (800522c <HAL_UART_IRQHandler+0x3e0>)
 8005034:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800503a:	4618      	mov	r0, r3
 800503c:	f7fd fe9c 	bl	8002d78 <HAL_DMA_Abort_IT>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d016      	beq.n	8005074 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800504a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005050:	4610      	mov	r0, r2
 8005052:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005054:	e00e      	b.n	8005074 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 f993 	bl	8005382 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800505c:	e00a      	b.n	8005074 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 f98f 	bl	8005382 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005064:	e006      	b.n	8005074 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 f98b 	bl	8005382 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005072:	e175      	b.n	8005360 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005074:	bf00      	nop
    return;
 8005076:	e173      	b.n	8005360 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800507c:	2b01      	cmp	r3, #1
 800507e:	f040 814f 	bne.w	8005320 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005086:	f003 0310 	and.w	r3, r3, #16
 800508a:	2b00      	cmp	r3, #0
 800508c:	f000 8148 	beq.w	8005320 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005090:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005094:	f003 0310 	and.w	r3, r3, #16
 8005098:	2b00      	cmp	r3, #0
 800509a:	f000 8141 	beq.w	8005320 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800509e:	2300      	movs	r3, #0
 80050a0:	60bb      	str	r3, [r7, #8]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	60bb      	str	r3, [r7, #8]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	60bb      	str	r3, [r7, #8]
 80050b2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	695b      	ldr	r3, [r3, #20]
 80050ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050be:	2b00      	cmp	r3, #0
 80050c0:	f000 80b6 	beq.w	8005230 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80050d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	f000 8145 	beq.w	8005364 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80050de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80050e2:	429a      	cmp	r2, r3
 80050e4:	f080 813e 	bcs.w	8005364 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80050ee:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050f4:	699b      	ldr	r3, [r3, #24]
 80050f6:	2b20      	cmp	r3, #32
 80050f8:	f000 8088 	beq.w	800520c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	330c      	adds	r3, #12
 8005102:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005106:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800510a:	e853 3f00 	ldrex	r3, [r3]
 800510e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005112:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005116:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800511a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	330c      	adds	r3, #12
 8005124:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005128:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800512c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005130:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005134:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005138:	e841 2300 	strex	r3, r2, [r1]
 800513c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005140:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005144:	2b00      	cmp	r3, #0
 8005146:	d1d9      	bne.n	80050fc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	3314      	adds	r3, #20
 800514e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005150:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005152:	e853 3f00 	ldrex	r3, [r3]
 8005156:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005158:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800515a:	f023 0301 	bic.w	r3, r3, #1
 800515e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	3314      	adds	r3, #20
 8005168:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800516c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005170:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005172:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005174:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005178:	e841 2300 	strex	r3, r2, [r1]
 800517c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800517e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005180:	2b00      	cmp	r3, #0
 8005182:	d1e1      	bne.n	8005148 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	3314      	adds	r3, #20
 800518a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800518e:	e853 3f00 	ldrex	r3, [r3]
 8005192:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005194:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005196:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800519a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	3314      	adds	r3, #20
 80051a4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80051a8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80051aa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ac:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80051ae:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80051b0:	e841 2300 	strex	r3, r2, [r1]
 80051b4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80051b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d1e3      	bne.n	8005184 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2220      	movs	r2, #32
 80051c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	330c      	adds	r3, #12
 80051d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051d4:	e853 3f00 	ldrex	r3, [r3]
 80051d8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80051da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80051dc:	f023 0310 	bic.w	r3, r3, #16
 80051e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	330c      	adds	r3, #12
 80051ea:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80051ee:	65ba      	str	r2, [r7, #88]	@ 0x58
 80051f0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80051f4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80051f6:	e841 2300 	strex	r3, r2, [r1]
 80051fa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80051fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d1e3      	bne.n	80051ca <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005206:	4618      	mov	r0, r3
 8005208:	f7fd fd7b 	bl	8002d02 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2202      	movs	r2, #2
 8005210:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800521a:	b29b      	uxth	r3, r3
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	b29b      	uxth	r3, r3
 8005220:	4619      	mov	r1, r3
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 f8b6 	bl	8005394 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005228:	e09c      	b.n	8005364 <HAL_UART_IRQHandler+0x518>
 800522a:	bf00      	nop
 800522c:	080054e1 	.word	0x080054e1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005238:	b29b      	uxth	r3, r3
 800523a:	1ad3      	subs	r3, r2, r3
 800523c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005244:	b29b      	uxth	r3, r3
 8005246:	2b00      	cmp	r3, #0
 8005248:	f000 808e 	beq.w	8005368 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800524c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005250:	2b00      	cmp	r3, #0
 8005252:	f000 8089 	beq.w	8005368 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	330c      	adds	r3, #12
 800525c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800525e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005260:	e853 3f00 	ldrex	r3, [r3]
 8005264:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005266:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005268:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800526c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	330c      	adds	r3, #12
 8005276:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800527a:	647a      	str	r2, [r7, #68]	@ 0x44
 800527c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800527e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005280:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005282:	e841 2300 	strex	r3, r2, [r1]
 8005286:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005288:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800528a:	2b00      	cmp	r3, #0
 800528c:	d1e3      	bne.n	8005256 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	3314      	adds	r3, #20
 8005294:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005298:	e853 3f00 	ldrex	r3, [r3]
 800529c:	623b      	str	r3, [r7, #32]
   return(result);
 800529e:	6a3b      	ldr	r3, [r7, #32]
 80052a0:	f023 0301 	bic.w	r3, r3, #1
 80052a4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	3314      	adds	r3, #20
 80052ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80052b2:	633a      	str	r2, [r7, #48]	@ 0x30
 80052b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80052b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052ba:	e841 2300 	strex	r3, r2, [r1]
 80052be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80052c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d1e3      	bne.n	800528e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2220      	movs	r2, #32
 80052ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	330c      	adds	r3, #12
 80052da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	e853 3f00 	ldrex	r3, [r3]
 80052e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f023 0310 	bic.w	r3, r3, #16
 80052ea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	330c      	adds	r3, #12
 80052f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80052f8:	61fa      	str	r2, [r7, #28]
 80052fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052fc:	69b9      	ldr	r1, [r7, #24]
 80052fe:	69fa      	ldr	r2, [r7, #28]
 8005300:	e841 2300 	strex	r3, r2, [r1]
 8005304:	617b      	str	r3, [r7, #20]
   return(result);
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d1e3      	bne.n	80052d4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2202      	movs	r2, #2
 8005310:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005312:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005316:	4619      	mov	r1, r3
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 f83b 	bl	8005394 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800531e:	e023      	b.n	8005368 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005320:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005324:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005328:	2b00      	cmp	r3, #0
 800532a:	d009      	beq.n	8005340 <HAL_UART_IRQHandler+0x4f4>
 800532c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005330:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005334:	2b00      	cmp	r3, #0
 8005336:	d003      	beq.n	8005340 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 f8e5 	bl	8005508 <UART_Transmit_IT>
    return;
 800533e:	e014      	b.n	800536a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005340:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005344:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005348:	2b00      	cmp	r3, #0
 800534a:	d00e      	beq.n	800536a <HAL_UART_IRQHandler+0x51e>
 800534c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005350:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005354:	2b00      	cmp	r3, #0
 8005356:	d008      	beq.n	800536a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f000 f924 	bl	80055a6 <UART_EndTransmit_IT>
    return;
 800535e:	e004      	b.n	800536a <HAL_UART_IRQHandler+0x51e>
    return;
 8005360:	bf00      	nop
 8005362:	e002      	b.n	800536a <HAL_UART_IRQHandler+0x51e>
      return;
 8005364:	bf00      	nop
 8005366:	e000      	b.n	800536a <HAL_UART_IRQHandler+0x51e>
      return;
 8005368:	bf00      	nop
  }
}
 800536a:	37e8      	adds	r7, #232	@ 0xe8
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005378:	bf00      	nop
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	bc80      	pop	{r7}
 8005380:	4770      	bx	lr

08005382 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005382:	b480      	push	{r7}
 8005384:	b083      	sub	sp, #12
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800538a:	bf00      	nop
 800538c:	370c      	adds	r7, #12
 800538e:	46bd      	mov	sp, r7
 8005390:	bc80      	pop	{r7}
 8005392:	4770      	bx	lr

08005394 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	460b      	mov	r3, r1
 800539e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80053a0:	bf00      	nop
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bc80      	pop	{r7}
 80053a8:	4770      	bx	lr

080053aa <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053aa:	b480      	push	{r7}
 80053ac:	b085      	sub	sp, #20
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	60f8      	str	r0, [r7, #12]
 80053b2:	60b9      	str	r1, [r7, #8]
 80053b4:	4613      	mov	r3, r2
 80053b6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	68ba      	ldr	r2, [r7, #8]
 80053bc:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	88fa      	ldrh	r2, [r7, #6]
 80053c2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	88fa      	ldrh	r2, [r7, #6]
 80053c8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2200      	movs	r2, #0
 80053ce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2222      	movs	r2, #34	@ 0x22
 80053d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d007      	beq.n	80053f0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68da      	ldr	r2, [r3, #12]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80053ee:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	695a      	ldr	r2, [r3, #20]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f042 0201 	orr.w	r2, r2, #1
 80053fe:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68da      	ldr	r2, [r3, #12]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f042 0220 	orr.w	r2, r2, #32
 800540e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	3714      	adds	r7, #20
 8005416:	46bd      	mov	sp, r7
 8005418:	bc80      	pop	{r7}
 800541a:	4770      	bx	lr

0800541c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800541c:	b480      	push	{r7}
 800541e:	b095      	sub	sp, #84	@ 0x54
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	330c      	adds	r3, #12
 800542a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800542c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800542e:	e853 3f00 	ldrex	r3, [r3]
 8005432:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005436:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800543a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	330c      	adds	r3, #12
 8005442:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005444:	643a      	str	r2, [r7, #64]	@ 0x40
 8005446:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005448:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800544a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800544c:	e841 2300 	strex	r3, r2, [r1]
 8005450:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005454:	2b00      	cmp	r3, #0
 8005456:	d1e5      	bne.n	8005424 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	3314      	adds	r3, #20
 800545e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005460:	6a3b      	ldr	r3, [r7, #32]
 8005462:	e853 3f00 	ldrex	r3, [r3]
 8005466:	61fb      	str	r3, [r7, #28]
   return(result);
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	f023 0301 	bic.w	r3, r3, #1
 800546e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	3314      	adds	r3, #20
 8005476:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005478:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800547a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800547e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005480:	e841 2300 	strex	r3, r2, [r1]
 8005484:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005488:	2b00      	cmp	r3, #0
 800548a:	d1e5      	bne.n	8005458 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005490:	2b01      	cmp	r3, #1
 8005492:	d119      	bne.n	80054c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	330c      	adds	r3, #12
 800549a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	e853 3f00 	ldrex	r3, [r3]
 80054a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	f023 0310 	bic.w	r3, r3, #16
 80054aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	330c      	adds	r3, #12
 80054b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054b4:	61ba      	str	r2, [r7, #24]
 80054b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b8:	6979      	ldr	r1, [r7, #20]
 80054ba:	69ba      	ldr	r2, [r7, #24]
 80054bc:	e841 2300 	strex	r3, r2, [r1]
 80054c0:	613b      	str	r3, [r7, #16]
   return(result);
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1e5      	bne.n	8005494 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2220      	movs	r2, #32
 80054cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80054d6:	bf00      	nop
 80054d8:	3754      	adds	r7, #84	@ 0x54
 80054da:	46bd      	mov	sp, r7
 80054dc:	bc80      	pop	{r7}
 80054de:	4770      	bx	lr

080054e0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2200      	movs	r2, #0
 80054f2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2200      	movs	r2, #0
 80054f8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054fa:	68f8      	ldr	r0, [r7, #12]
 80054fc:	f7ff ff41 	bl	8005382 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005500:	bf00      	nop
 8005502:	3710      	adds	r7, #16
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005508:	b480      	push	{r7}
 800550a:	b085      	sub	sp, #20
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005516:	b2db      	uxtb	r3, r3
 8005518:	2b21      	cmp	r3, #33	@ 0x21
 800551a:	d13e      	bne.n	800559a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005524:	d114      	bne.n	8005550 <UART_Transmit_IT+0x48>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d110      	bne.n	8005550 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a1b      	ldr	r3, [r3, #32]
 8005532:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	881b      	ldrh	r3, [r3, #0]
 8005538:	461a      	mov	r2, r3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005542:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a1b      	ldr	r3, [r3, #32]
 8005548:	1c9a      	adds	r2, r3, #2
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	621a      	str	r2, [r3, #32]
 800554e:	e008      	b.n	8005562 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6a1b      	ldr	r3, [r3, #32]
 8005554:	1c59      	adds	r1, r3, #1
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	6211      	str	r1, [r2, #32]
 800555a:	781a      	ldrb	r2, [r3, #0]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005566:	b29b      	uxth	r3, r3
 8005568:	3b01      	subs	r3, #1
 800556a:	b29b      	uxth	r3, r3
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	4619      	mov	r1, r3
 8005570:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005572:	2b00      	cmp	r3, #0
 8005574:	d10f      	bne.n	8005596 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	68da      	ldr	r2, [r3, #12]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005584:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	68da      	ldr	r2, [r3, #12]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005594:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005596:	2300      	movs	r3, #0
 8005598:	e000      	b.n	800559c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800559a:	2302      	movs	r3, #2
  }
}
 800559c:	4618      	mov	r0, r3
 800559e:	3714      	adds	r7, #20
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bc80      	pop	{r7}
 80055a4:	4770      	bx	lr

080055a6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80055a6:	b580      	push	{r7, lr}
 80055a8:	b082      	sub	sp, #8
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68da      	ldr	r2, [r3, #12]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055bc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2220      	movs	r2, #32
 80055c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f7ff fed2 	bl	8005370 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3708      	adds	r7, #8
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}

080055d6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80055d6:	b580      	push	{r7, lr}
 80055d8:	b08c      	sub	sp, #48	@ 0x30
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	2b22      	cmp	r3, #34	@ 0x22
 80055e8:	f040 80ae 	bne.w	8005748 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055f4:	d117      	bne.n	8005626 <UART_Receive_IT+0x50>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d113      	bne.n	8005626 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80055fe:	2300      	movs	r3, #0
 8005600:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005606:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	b29b      	uxth	r3, r3
 8005610:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005614:	b29a      	uxth	r2, r3
 8005616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005618:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800561e:	1c9a      	adds	r2, r3, #2
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	629a      	str	r2, [r3, #40]	@ 0x28
 8005624:	e026      	b.n	8005674 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800562a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800562c:	2300      	movs	r3, #0
 800562e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005638:	d007      	beq.n	800564a <UART_Receive_IT+0x74>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d10a      	bne.n	8005658 <UART_Receive_IT+0x82>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d106      	bne.n	8005658 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	b2da      	uxtb	r2, r3
 8005652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005654:	701a      	strb	r2, [r3, #0]
 8005656:	e008      	b.n	800566a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	b2db      	uxtb	r3, r3
 8005660:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005664:	b2da      	uxtb	r2, r3
 8005666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005668:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800566e:	1c5a      	adds	r2, r3, #1
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005678:	b29b      	uxth	r3, r3
 800567a:	3b01      	subs	r3, #1
 800567c:	b29b      	uxth	r3, r3
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	4619      	mov	r1, r3
 8005682:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005684:	2b00      	cmp	r3, #0
 8005686:	d15d      	bne.n	8005744 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68da      	ldr	r2, [r3, #12]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f022 0220 	bic.w	r2, r2, #32
 8005696:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68da      	ldr	r2, [r3, #12]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80056a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	695a      	ldr	r2, [r3, #20]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f022 0201 	bic.w	r2, r2, #1
 80056b6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2220      	movs	r2, #32
 80056bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d135      	bne.n	800573a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	330c      	adds	r3, #12
 80056da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	e853 3f00 	ldrex	r3, [r3]
 80056e2:	613b      	str	r3, [r7, #16]
   return(result);
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	f023 0310 	bic.w	r3, r3, #16
 80056ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	330c      	adds	r3, #12
 80056f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056f4:	623a      	str	r2, [r7, #32]
 80056f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f8:	69f9      	ldr	r1, [r7, #28]
 80056fa:	6a3a      	ldr	r2, [r7, #32]
 80056fc:	e841 2300 	strex	r3, r2, [r1]
 8005700:	61bb      	str	r3, [r7, #24]
   return(result);
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d1e5      	bne.n	80056d4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 0310 	and.w	r3, r3, #16
 8005712:	2b10      	cmp	r3, #16
 8005714:	d10a      	bne.n	800572c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005716:	2300      	movs	r3, #0
 8005718:	60fb      	str	r3, [r7, #12]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	60fb      	str	r3, [r7, #12]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	60fb      	str	r3, [r7, #12]
 800572a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005730:	4619      	mov	r1, r3
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f7ff fe2e 	bl	8005394 <HAL_UARTEx_RxEventCallback>
 8005738:	e002      	b.n	8005740 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f7fc fb46 	bl	8001dcc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005740:	2300      	movs	r3, #0
 8005742:	e002      	b.n	800574a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005744:	2300      	movs	r3, #0
 8005746:	e000      	b.n	800574a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005748:	2302      	movs	r3, #2
  }
}
 800574a:	4618      	mov	r0, r3
 800574c:	3730      	adds	r7, #48	@ 0x30
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
	...

08005754 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	68da      	ldr	r2, [r3, #12]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	430a      	orrs	r2, r1
 8005770:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	689a      	ldr	r2, [r3, #8]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	431a      	orrs	r2, r3
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	695b      	ldr	r3, [r3, #20]
 8005780:	4313      	orrs	r3, r2
 8005782:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800578e:	f023 030c 	bic.w	r3, r3, #12
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	6812      	ldr	r2, [r2, #0]
 8005796:	68b9      	ldr	r1, [r7, #8]
 8005798:	430b      	orrs	r3, r1
 800579a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	695b      	ldr	r3, [r3, #20]
 80057a2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	699a      	ldr	r2, [r3, #24]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	430a      	orrs	r2, r1
 80057b0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a2c      	ldr	r2, [pc, #176]	@ (8005868 <UART_SetConfig+0x114>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d103      	bne.n	80057c4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80057bc:	f7ff f964 	bl	8004a88 <HAL_RCC_GetPCLK2Freq>
 80057c0:	60f8      	str	r0, [r7, #12]
 80057c2:	e002      	b.n	80057ca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80057c4:	f7ff f94c 	bl	8004a60 <HAL_RCC_GetPCLK1Freq>
 80057c8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	4613      	mov	r3, r2
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	4413      	add	r3, r2
 80057d2:	009a      	lsls	r2, r3, #2
 80057d4:	441a      	add	r2, r3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80057e0:	4a22      	ldr	r2, [pc, #136]	@ (800586c <UART_SetConfig+0x118>)
 80057e2:	fba2 2303 	umull	r2, r3, r2, r3
 80057e6:	095b      	lsrs	r3, r3, #5
 80057e8:	0119      	lsls	r1, r3, #4
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	4613      	mov	r3, r2
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	4413      	add	r3, r2
 80057f2:	009a      	lsls	r2, r3, #2
 80057f4:	441a      	add	r2, r3
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8005800:	4b1a      	ldr	r3, [pc, #104]	@ (800586c <UART_SetConfig+0x118>)
 8005802:	fba3 0302 	umull	r0, r3, r3, r2
 8005806:	095b      	lsrs	r3, r3, #5
 8005808:	2064      	movs	r0, #100	@ 0x64
 800580a:	fb00 f303 	mul.w	r3, r0, r3
 800580e:	1ad3      	subs	r3, r2, r3
 8005810:	011b      	lsls	r3, r3, #4
 8005812:	3332      	adds	r3, #50	@ 0x32
 8005814:	4a15      	ldr	r2, [pc, #84]	@ (800586c <UART_SetConfig+0x118>)
 8005816:	fba2 2303 	umull	r2, r3, r2, r3
 800581a:	095b      	lsrs	r3, r3, #5
 800581c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005820:	4419      	add	r1, r3
 8005822:	68fa      	ldr	r2, [r7, #12]
 8005824:	4613      	mov	r3, r2
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	4413      	add	r3, r2
 800582a:	009a      	lsls	r2, r3, #2
 800582c:	441a      	add	r2, r3
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	fbb2 f2f3 	udiv	r2, r2, r3
 8005838:	4b0c      	ldr	r3, [pc, #48]	@ (800586c <UART_SetConfig+0x118>)
 800583a:	fba3 0302 	umull	r0, r3, r3, r2
 800583e:	095b      	lsrs	r3, r3, #5
 8005840:	2064      	movs	r0, #100	@ 0x64
 8005842:	fb00 f303 	mul.w	r3, r0, r3
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	011b      	lsls	r3, r3, #4
 800584a:	3332      	adds	r3, #50	@ 0x32
 800584c:	4a07      	ldr	r2, [pc, #28]	@ (800586c <UART_SetConfig+0x118>)
 800584e:	fba2 2303 	umull	r2, r3, r2, r3
 8005852:	095b      	lsrs	r3, r3, #5
 8005854:	f003 020f 	and.w	r2, r3, #15
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	440a      	add	r2, r1
 800585e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005860:	bf00      	nop
 8005862:	3710      	adds	r7, #16
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	40013800 	.word	0x40013800
 800586c:	51eb851f 	.word	0x51eb851f

08005870 <memset>:
 8005870:	4603      	mov	r3, r0
 8005872:	4402      	add	r2, r0
 8005874:	4293      	cmp	r3, r2
 8005876:	d100      	bne.n	800587a <memset+0xa>
 8005878:	4770      	bx	lr
 800587a:	f803 1b01 	strb.w	r1, [r3], #1
 800587e:	e7f9      	b.n	8005874 <memset+0x4>

08005880 <__libc_init_array>:
 8005880:	b570      	push	{r4, r5, r6, lr}
 8005882:	2600      	movs	r6, #0
 8005884:	4d0c      	ldr	r5, [pc, #48]	@ (80058b8 <__libc_init_array+0x38>)
 8005886:	4c0d      	ldr	r4, [pc, #52]	@ (80058bc <__libc_init_array+0x3c>)
 8005888:	1b64      	subs	r4, r4, r5
 800588a:	10a4      	asrs	r4, r4, #2
 800588c:	42a6      	cmp	r6, r4
 800588e:	d109      	bne.n	80058a4 <__libc_init_array+0x24>
 8005890:	f000 f81a 	bl	80058c8 <_init>
 8005894:	2600      	movs	r6, #0
 8005896:	4d0a      	ldr	r5, [pc, #40]	@ (80058c0 <__libc_init_array+0x40>)
 8005898:	4c0a      	ldr	r4, [pc, #40]	@ (80058c4 <__libc_init_array+0x44>)
 800589a:	1b64      	subs	r4, r4, r5
 800589c:	10a4      	asrs	r4, r4, #2
 800589e:	42a6      	cmp	r6, r4
 80058a0:	d105      	bne.n	80058ae <__libc_init_array+0x2e>
 80058a2:	bd70      	pop	{r4, r5, r6, pc}
 80058a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80058a8:	4798      	blx	r3
 80058aa:	3601      	adds	r6, #1
 80058ac:	e7ee      	b.n	800588c <__libc_init_array+0xc>
 80058ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80058b2:	4798      	blx	r3
 80058b4:	3601      	adds	r6, #1
 80058b6:	e7f2      	b.n	800589e <__libc_init_array+0x1e>
 80058b8:	0800591c 	.word	0x0800591c
 80058bc:	0800591c 	.word	0x0800591c
 80058c0:	0800591c 	.word	0x0800591c
 80058c4:	08005920 	.word	0x08005920

080058c8 <_init>:
 80058c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ca:	bf00      	nop
 80058cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058ce:	bc08      	pop	{r3}
 80058d0:	469e      	mov	lr, r3
 80058d2:	4770      	bx	lr

080058d4 <_fini>:
 80058d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058d6:	bf00      	nop
 80058d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058da:	bc08      	pop	{r3}
 80058dc:	469e      	mov	lr, r3
 80058de:	4770      	bx	lr
