
3. Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b560  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003f04  0800b66c  0800b66c  0000c66c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f570  0800f570  000112e8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800f570  0800f570  000112e8  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800f570  0800f570  000112e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f570  0800f570  00010570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f574  0800f574  00010574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002e8  20000000  0800f578  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d4  200002e8  0800f860  000112e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006bc  0800f860  000116bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000112e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013234  00000000  00000000  00011311  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037fd  00000000  00000000  00024545  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a0  00000000  00000000  00027d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d5e  00000000  00000000  00028ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ab7c  00000000  00000000  00029c46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a1f3  00000000  00000000  000447c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fafd  00000000  00000000  0005e9b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ee4b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dd4  00000000  00000000  000ee4f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000093  00000000  00000000  000f32cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200002e8 	.word	0x200002e8
 8000128:	00000000 	.word	0x00000000
 800012c:	0800b654 	.word	0x0800b654

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200002ec 	.word	0x200002ec
 8000148:	0800b654 	.word	0x0800b654

0800014c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000152:	1d3b      	adds	r3, r7, #4
 8000154:	2200      	movs	r2, #0
 8000156:	601a      	str	r2, [r3, #0]
 8000158:	605a      	str	r2, [r3, #4]
 800015a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800015c:	4b18      	ldr	r3, [pc, #96]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800015e:	4a19      	ldr	r2, [pc, #100]	@ (80001c4 <MX_ADC1_Init+0x78>)
 8000160:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000162:	4b17      	ldr	r3, [pc, #92]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000164:	2200      	movs	r2, #0
 8000166:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000168:	4b15      	ldr	r3, [pc, #84]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800016a:	2200      	movs	r2, #0
 800016c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800016e:	4b14      	ldr	r3, [pc, #80]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000170:	2200      	movs	r2, #0
 8000172:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000174:	4b12      	ldr	r3, [pc, #72]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000176:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800017a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800017c:	4b10      	ldr	r3, [pc, #64]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800017e:	2200      	movs	r2, #0
 8000180:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000182:	4b0f      	ldr	r3, [pc, #60]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000184:	2201      	movs	r2, #1
 8000186:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000188:	480d      	ldr	r0, [pc, #52]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800018a:	f002 fd71 	bl	8002c70 <HAL_ADC_Init>
 800018e:	4603      	mov	r3, r0
 8000190:	2b00      	cmp	r3, #0
 8000192:	d001      	beq.n	8000198 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000194:	f002 fa90 	bl	80026b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000198:	2304      	movs	r3, #4
 800019a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800019c:	2301      	movs	r3, #1
 800019e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001a0:	2300      	movs	r3, #0
 80001a2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	4619      	mov	r1, r3
 80001a8:	4805      	ldr	r0, [pc, #20]	@ (80001c0 <MX_ADC1_Init+0x74>)
 80001aa:	f002 ffc3 	bl	8003134 <HAL_ADC_ConfigChannel>
 80001ae:	4603      	mov	r3, r0
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d001      	beq.n	80001b8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80001b4:	f002 fa80 	bl	80026b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80001b8:	bf00      	nop
 80001ba:	3710      	adds	r7, #16
 80001bc:	46bd      	mov	sp, r7
 80001be:	bd80      	pop	{r7, pc}
 80001c0:	20000304 	.word	0x20000304
 80001c4:	40012400 	.word	0x40012400

080001c8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b088      	sub	sp, #32
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001d0:	f107 0310 	add.w	r3, r7, #16
 80001d4:	2200      	movs	r2, #0
 80001d6:	601a      	str	r2, [r3, #0]
 80001d8:	605a      	str	r2, [r3, #4]
 80001da:	609a      	str	r2, [r3, #8]
 80001dc:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	4a18      	ldr	r2, [pc, #96]	@ (8000244 <HAL_ADC_MspInit+0x7c>)
 80001e4:	4293      	cmp	r3, r2
 80001e6:	d129      	bne.n	800023c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80001e8:	4b17      	ldr	r3, [pc, #92]	@ (8000248 <HAL_ADC_MspInit+0x80>)
 80001ea:	699b      	ldr	r3, [r3, #24]
 80001ec:	4a16      	ldr	r2, [pc, #88]	@ (8000248 <HAL_ADC_MspInit+0x80>)
 80001ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80001f2:	6193      	str	r3, [r2, #24]
 80001f4:	4b14      	ldr	r3, [pc, #80]	@ (8000248 <HAL_ADC_MspInit+0x80>)
 80001f6:	699b      	ldr	r3, [r3, #24]
 80001f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80001fc:	60fb      	str	r3, [r7, #12]
 80001fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000200:	4b11      	ldr	r3, [pc, #68]	@ (8000248 <HAL_ADC_MspInit+0x80>)
 8000202:	699b      	ldr	r3, [r3, #24]
 8000204:	4a10      	ldr	r2, [pc, #64]	@ (8000248 <HAL_ADC_MspInit+0x80>)
 8000206:	f043 0304 	orr.w	r3, r3, #4
 800020a:	6193      	str	r3, [r2, #24]
 800020c:	4b0e      	ldr	r3, [pc, #56]	@ (8000248 <HAL_ADC_MspInit+0x80>)
 800020e:	699b      	ldr	r3, [r3, #24]
 8000210:	f003 0304 	and.w	r3, r3, #4
 8000214:	60bb      	str	r3, [r7, #8]
 8000216:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000218:	2310      	movs	r3, #16
 800021a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800021c:	2303      	movs	r3, #3
 800021e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000220:	f107 0310 	add.w	r3, r7, #16
 8000224:	4619      	mov	r1, r3
 8000226:	4809      	ldr	r0, [pc, #36]	@ (800024c <HAL_ADC_MspInit+0x84>)
 8000228:	f003 fae0 	bl	80037ec <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800022c:	2200      	movs	r2, #0
 800022e:	2100      	movs	r1, #0
 8000230:	2012      	movs	r0, #18
 8000232:	f003 f9f2 	bl	800361a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000236:	2012      	movs	r0, #18
 8000238:	f003 fa0b 	bl	8003652 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800023c:	bf00      	nop
 800023e:	3720      	adds	r7, #32
 8000240:	46bd      	mov	sp, r7
 8000242:	bd80      	pop	{r7, pc}
 8000244:	40012400 	.word	0x40012400
 8000248:	40021000 	.word	0x40021000
 800024c:	40010800 	.word	0x40010800

08000250 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b088      	sub	sp, #32
 8000254:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000256:	f107 0310 	add.w	r3, r7, #16
 800025a:	2200      	movs	r2, #0
 800025c:	601a      	str	r2, [r3, #0]
 800025e:	605a      	str	r2, [r3, #4]
 8000260:	609a      	str	r2, [r3, #8]
 8000262:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000264:	4b58      	ldr	r3, [pc, #352]	@ (80003c8 <MX_GPIO_Init+0x178>)
 8000266:	699b      	ldr	r3, [r3, #24]
 8000268:	4a57      	ldr	r2, [pc, #348]	@ (80003c8 <MX_GPIO_Init+0x178>)
 800026a:	f043 0310 	orr.w	r3, r3, #16
 800026e:	6193      	str	r3, [r2, #24]
 8000270:	4b55      	ldr	r3, [pc, #340]	@ (80003c8 <MX_GPIO_Init+0x178>)
 8000272:	699b      	ldr	r3, [r3, #24]
 8000274:	f003 0310 	and.w	r3, r3, #16
 8000278:	60fb      	str	r3, [r7, #12]
 800027a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800027c:	4b52      	ldr	r3, [pc, #328]	@ (80003c8 <MX_GPIO_Init+0x178>)
 800027e:	699b      	ldr	r3, [r3, #24]
 8000280:	4a51      	ldr	r2, [pc, #324]	@ (80003c8 <MX_GPIO_Init+0x178>)
 8000282:	f043 0320 	orr.w	r3, r3, #32
 8000286:	6193      	str	r3, [r2, #24]
 8000288:	4b4f      	ldr	r3, [pc, #316]	@ (80003c8 <MX_GPIO_Init+0x178>)
 800028a:	699b      	ldr	r3, [r3, #24]
 800028c:	f003 0320 	and.w	r3, r3, #32
 8000290:	60bb      	str	r3, [r7, #8]
 8000292:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000294:	4b4c      	ldr	r3, [pc, #304]	@ (80003c8 <MX_GPIO_Init+0x178>)
 8000296:	699b      	ldr	r3, [r3, #24]
 8000298:	4a4b      	ldr	r2, [pc, #300]	@ (80003c8 <MX_GPIO_Init+0x178>)
 800029a:	f043 0304 	orr.w	r3, r3, #4
 800029e:	6193      	str	r3, [r2, #24]
 80002a0:	4b49      	ldr	r3, [pc, #292]	@ (80003c8 <MX_GPIO_Init+0x178>)
 80002a2:	699b      	ldr	r3, [r3, #24]
 80002a4:	f003 0304 	and.w	r3, r3, #4
 80002a8:	607b      	str	r3, [r7, #4]
 80002aa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002ac:	4b46      	ldr	r3, [pc, #280]	@ (80003c8 <MX_GPIO_Init+0x178>)
 80002ae:	699b      	ldr	r3, [r3, #24]
 80002b0:	4a45      	ldr	r2, [pc, #276]	@ (80003c8 <MX_GPIO_Init+0x178>)
 80002b2:	f043 0308 	orr.w	r3, r3, #8
 80002b6:	6193      	str	r3, [r2, #24]
 80002b8:	4b43      	ldr	r3, [pc, #268]	@ (80003c8 <MX_GPIO_Init+0x178>)
 80002ba:	699b      	ldr	r3, [r3, #24]
 80002bc:	f003 0308 	and.w	r3, r3, #8
 80002c0:	603b      	str	r3, [r7, #0]
 80002c2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80002c4:	2200      	movs	r2, #0
 80002c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80002ca:	4840      	ldr	r0, [pc, #256]	@ (80003cc <MX_GPIO_Init+0x17c>)
 80002cc:	f003 fc29 	bl	8003b22 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_Pin|DC_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 80002d0:	2200      	movs	r2, #0
 80002d2:	210e      	movs	r1, #14
 80002d4:	483e      	ldr	r0, [pc, #248]	@ (80003d0 <MX_GPIO_Init+0x180>)
 80002d6:	f003 fc24 	bl	8003b22 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BUZZER_Pin|PWR_Pin, GPIO_PIN_RESET);
 80002da:	2200      	movs	r2, #0
 80002dc:	2103      	movs	r1, #3
 80002de:	483d      	ldr	r0, [pc, #244]	@ (80003d4 <MX_GPIO_Init+0x184>)
 80002e0:	f003 fc1f 	bl	8003b22 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80002e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80002e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002ea:	2301      	movs	r3, #1
 80002ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ee:	2300      	movs	r3, #0
 80002f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002f2:	2302      	movs	r3, #2
 80002f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002f6:	f107 0310 	add.w	r3, r7, #16
 80002fa:	4619      	mov	r1, r3
 80002fc:	4833      	ldr	r0, [pc, #204]	@ (80003cc <MX_GPIO_Init+0x17c>)
 80002fe:	f003 fa75 	bl	80037ec <HAL_GPIO_Init>

  /*Configure GPIO pins : BUSY_Pin PA6 */
  GPIO_InitStruct.Pin = BUSY_Pin|GPIO_PIN_6;
 8000302:	2341      	movs	r3, #65	@ 0x41
 8000304:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000306:	2300      	movs	r3, #0
 8000308:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800030a:	2300      	movs	r3, #0
 800030c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800030e:	f107 0310 	add.w	r3, r7, #16
 8000312:	4619      	mov	r1, r3
 8000314:	482e      	ldr	r0, [pc, #184]	@ (80003d0 <MX_GPIO_Init+0x180>)
 8000316:	f003 fa69 	bl	80037ec <HAL_GPIO_Init>

  /*Configure GPIO pins : RST_Pin DC_Pin SPI_CS_Pin */
  GPIO_InitStruct.Pin = RST_Pin|DC_Pin|SPI_CS_Pin;
 800031a:	230e      	movs	r3, #14
 800031c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800031e:	2301      	movs	r3, #1
 8000320:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000322:	2300      	movs	r3, #0
 8000324:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000326:	2302      	movs	r3, #2
 8000328:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800032a:	f107 0310 	add.w	r3, r7, #16
 800032e:	4619      	mov	r1, r3
 8000330:	4827      	ldr	r0, [pc, #156]	@ (80003d0 <MX_GPIO_Init+0x180>)
 8000332:	f003 fa5b 	bl	80037ec <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZER_Pin PWR_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin|PWR_Pin;
 8000336:	2303      	movs	r3, #3
 8000338:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800033a:	2301      	movs	r3, #1
 800033c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800033e:	2300      	movs	r3, #0
 8000340:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000342:	2302      	movs	r3, #2
 8000344:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000346:	f107 0310 	add.w	r3, r7, #16
 800034a:	4619      	mov	r1, r3
 800034c:	4821      	ldr	r0, [pc, #132]	@ (80003d4 <MX_GPIO_Init+0x184>)
 800034e:	f003 fa4d 	bl	80037ec <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON0_IN12_Pin BUTTON1_IN13_Pin BUTTON2_IN14_Pin BUTTON3_IN15_Pin */
  GPIO_InitStruct.Pin = BUTTON0_IN12_Pin|BUTTON1_IN13_Pin|BUTTON2_IN14_Pin|BUTTON3_IN15_Pin;
 8000352:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000356:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000358:	4b1f      	ldr	r3, [pc, #124]	@ (80003d8 <MX_GPIO_Init+0x188>)
 800035a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800035c:	2302      	movs	r3, #2
 800035e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000360:	f107 0310 	add.w	r3, r7, #16
 8000364:	4619      	mov	r1, r3
 8000366:	481b      	ldr	r0, [pc, #108]	@ (80003d4 <MX_GPIO_Init+0x184>)
 8000368:	f003 fa40 	bl	80037ec <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON4_IN8_Pin */
  GPIO_InitStruct.Pin = BUTTON4_IN8_Pin;
 800036c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000370:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000372:	4b19      	ldr	r3, [pc, #100]	@ (80003d8 <MX_GPIO_Init+0x188>)
 8000374:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000376:	2302      	movs	r3, #2
 8000378:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON4_IN8_GPIO_Port, &GPIO_InitStruct);
 800037a:	f107 0310 	add.w	r3, r7, #16
 800037e:	4619      	mov	r1, r3
 8000380:	4813      	ldr	r0, [pc, #76]	@ (80003d0 <MX_GPIO_Init+0x180>)
 8000382:	f003 fa33 	bl	80037ec <HAL_GPIO_Init>

  /*Configure GPIO pin : RTC_IN5_Pin */
  GPIO_InitStruct.Pin = RTC_IN5_Pin;
 8000386:	2320      	movs	r3, #32
 8000388:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800038a:	4b13      	ldr	r3, [pc, #76]	@ (80003d8 <MX_GPIO_Init+0x188>)
 800038c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800038e:	2300      	movs	r3, #0
 8000390:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RTC_IN5_GPIO_Port, &GPIO_InitStruct);
 8000392:	f107 0310 	add.w	r3, r7, #16
 8000396:	4619      	mov	r1, r3
 8000398:	480e      	ldr	r0, [pc, #56]	@ (80003d4 <MX_GPIO_Init+0x184>)
 800039a:	f003 fa27 	bl	80037ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800039e:	2200      	movs	r2, #0
 80003a0:	2100      	movs	r1, #0
 80003a2:	2017      	movs	r0, #23
 80003a4:	f003 f939 	bl	800361a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80003a8:	2017      	movs	r0, #23
 80003aa:	f003 f952 	bl	8003652 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80003ae:	2200      	movs	r2, #0
 80003b0:	2100      	movs	r1, #0
 80003b2:	2028      	movs	r0, #40	@ 0x28
 80003b4:	f003 f931 	bl	800361a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003b8:	2028      	movs	r0, #40	@ 0x28
 80003ba:	f003 f94a 	bl	8003652 <HAL_NVIC_EnableIRQ>

}
 80003be:	bf00      	nop
 80003c0:	3720      	adds	r7, #32
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	40021000 	.word	0x40021000
 80003cc:	40011000 	.word	0x40011000
 80003d0:	40010800 	.word	0x40010800
 80003d4:	40010c00 	.word	0x40010c00
 80003d8:	10210000 	.word	0x10210000

080003dc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003e0:	4b12      	ldr	r3, [pc, #72]	@ (800042c <MX_I2C1_Init+0x50>)
 80003e2:	4a13      	ldr	r2, [pc, #76]	@ (8000430 <MX_I2C1_Init+0x54>)
 80003e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80003e6:	4b11      	ldr	r3, [pc, #68]	@ (800042c <MX_I2C1_Init+0x50>)
 80003e8:	4a12      	ldr	r2, [pc, #72]	@ (8000434 <MX_I2C1_Init+0x58>)
 80003ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003ec:	4b0f      	ldr	r3, [pc, #60]	@ (800042c <MX_I2C1_Init+0x50>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80003f2:	4b0e      	ldr	r3, [pc, #56]	@ (800042c <MX_I2C1_Init+0x50>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003f8:	4b0c      	ldr	r3, [pc, #48]	@ (800042c <MX_I2C1_Init+0x50>)
 80003fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80003fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000400:	4b0a      	ldr	r3, [pc, #40]	@ (800042c <MX_I2C1_Init+0x50>)
 8000402:	2200      	movs	r2, #0
 8000404:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000406:	4b09      	ldr	r3, [pc, #36]	@ (800042c <MX_I2C1_Init+0x50>)
 8000408:	2200      	movs	r2, #0
 800040a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800040c:	4b07      	ldr	r3, [pc, #28]	@ (800042c <MX_I2C1_Init+0x50>)
 800040e:	2200      	movs	r2, #0
 8000410:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000412:	4b06      	ldr	r3, [pc, #24]	@ (800042c <MX_I2C1_Init+0x50>)
 8000414:	2200      	movs	r2, #0
 8000416:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000418:	4804      	ldr	r0, [pc, #16]	@ (800042c <MX_I2C1_Init+0x50>)
 800041a:	f003 fbcb 	bl	8003bb4 <HAL_I2C_Init>
 800041e:	4603      	mov	r3, r0
 8000420:	2b00      	cmp	r3, #0
 8000422:	d001      	beq.n	8000428 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000424:	f002 f948 	bl	80026b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000428:	bf00      	nop
 800042a:	bd80      	pop	{r7, pc}
 800042c:	20000334 	.word	0x20000334
 8000430:	40005400 	.word	0x40005400
 8000434:	000186a0 	.word	0x000186a0

08000438 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b088      	sub	sp, #32
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000440:	f107 0310 	add.w	r3, r7, #16
 8000444:	2200      	movs	r2, #0
 8000446:	601a      	str	r2, [r3, #0]
 8000448:	605a      	str	r2, [r3, #4]
 800044a:	609a      	str	r2, [r3, #8]
 800044c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	4a15      	ldr	r2, [pc, #84]	@ (80004a8 <HAL_I2C_MspInit+0x70>)
 8000454:	4293      	cmp	r3, r2
 8000456:	d123      	bne.n	80004a0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000458:	4b14      	ldr	r3, [pc, #80]	@ (80004ac <HAL_I2C_MspInit+0x74>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	4a13      	ldr	r2, [pc, #76]	@ (80004ac <HAL_I2C_MspInit+0x74>)
 800045e:	f043 0308 	orr.w	r3, r3, #8
 8000462:	6193      	str	r3, [r2, #24]
 8000464:	4b11      	ldr	r3, [pc, #68]	@ (80004ac <HAL_I2C_MspInit+0x74>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	f003 0308 	and.w	r3, r3, #8
 800046c:	60fb      	str	r3, [r7, #12]
 800046e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000470:	23c0      	movs	r3, #192	@ 0xc0
 8000472:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000474:	2312      	movs	r3, #18
 8000476:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000478:	2303      	movs	r3, #3
 800047a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800047c:	f107 0310 	add.w	r3, r7, #16
 8000480:	4619      	mov	r1, r3
 8000482:	480b      	ldr	r0, [pc, #44]	@ (80004b0 <HAL_I2C_MspInit+0x78>)
 8000484:	f003 f9b2 	bl	80037ec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000488:	4b08      	ldr	r3, [pc, #32]	@ (80004ac <HAL_I2C_MspInit+0x74>)
 800048a:	69db      	ldr	r3, [r3, #28]
 800048c:	4a07      	ldr	r2, [pc, #28]	@ (80004ac <HAL_I2C_MspInit+0x74>)
 800048e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000492:	61d3      	str	r3, [r2, #28]
 8000494:	4b05      	ldr	r3, [pc, #20]	@ (80004ac <HAL_I2C_MspInit+0x74>)
 8000496:	69db      	ldr	r3, [r3, #28]
 8000498:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800049c:	60bb      	str	r3, [r7, #8]
 800049e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80004a0:	bf00      	nop
 80004a2:	3720      	adds	r7, #32
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	40005400 	.word	0x40005400
 80004ac:	40021000 	.word	0x40021000
 80004b0:	40010c00 	.word	0x40010c00

080004b4 <toggle_alarm_buzzer.0>:

  // Initialize the ADC module to monitor battery voltage
  //    HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc);
  HAL_ADC_Start_IT(&hadc1);
  void toggle_alarm_buzzer()
  {
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	f8c7 c004 	str.w	ip, [r7, #4]
	  HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 80004be:	2101      	movs	r1, #1
 80004c0:	4803      	ldr	r0, [pc, #12]	@ (80004d0 <toggle_alarm_buzzer.0+0x1c>)
 80004c2:	f003 fb46 	bl	8003b52 <HAL_GPIO_TogglePin>
  }
 80004c6:	bf00      	nop
 80004c8:	3708      	adds	r7, #8
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	40010c00 	.word	0x40010c00

080004d4 <main>:
{
 80004d4:	b5b0      	push	{r4, r5, r7, lr}
 80004d6:	b08a      	sub	sp, #40	@ 0x28
 80004d8:	af04      	add	r7, sp, #16
int main(void)
 80004da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80004de:	603b      	str	r3, [r7, #0]
  HAL_Init();
 80004e0:	f002 fb40 	bl	8002b64 <HAL_Init>
  SystemClock_Config();
 80004e4:	f000 fb36 	bl	8000b54 <SystemClock_Config>
  MX_GPIO_Init();
 80004e8:	f7ff feb2 	bl	8000250 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004ec:	f7ff ff76 	bl	80003dc <MX_I2C1_Init>
  MX_ADC1_Init();
 80004f0:	f7ff fe2c 	bl	800014c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80004f4:	f002 fa92 	bl	8002a1c <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80004f8:	f002 f8e4 	bl	80026c4 <MX_SPI1_Init>
  bool uartDoneFlag = false;
 80004fc:	2300      	movs	r3, #0
 80004fe:	75fb      	strb	r3, [r7, #23]
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, BUZZER_INACTIVE); 
 8000500:	2200      	movs	r2, #0
 8000502:	2101      	movs	r1, #1
 8000504:	4880      	ldr	r0, [pc, #512]	@ (8000708 <main+0x234>)
 8000506:	f003 fb0c 	bl	8003b22 <HAL_GPIO_WritePin>
  Time_Ctrl 
 800050a:	2300      	movs	r3, #0
 800050c:	9301      	str	r3, [sp, #4]
 800050e:	2300      	movs	r3, #0
 8000510:	9300      	str	r3, [sp, #0]
 8000512:	2300      	movs	r3, #0
 8000514:	2200      	movs	r2, #0
 8000516:	2100      	movs	r1, #0
 8000518:	2000      	movs	r0, #0
 800051a:	f000 fc5b 	bl	8000dd4 <Time_Ctrl>
  Time_Get(&time_get_data);
 800051e:	487b      	ldr	r0, [pc, #492]	@ (800070c <main+0x238>)
 8000520:	f000 fc04 	bl	8000d2c <Time_Get>
  Alarm_Slot_Pointer_Get();
 8000524:	f000 fe32 	bl	800118c <Alarm_Slot_Pointer_Get>
  for (int i = 0; i < alarm_slot_ptr; i++)
 8000528:	2300      	movs	r3, #0
 800052a:	613b      	str	r3, [r7, #16]
 800052c:	e00e      	b.n	800054c <main+0x78>
    Alarm_Get(i, &alarm_get_data[i]);
 800052e:	693b      	ldr	r3, [r7, #16]
 8000530:	b2d8      	uxtb	r0, r3
 8000532:	693a      	ldr	r2, [r7, #16]
 8000534:	4613      	mov	r3, r2
 8000536:	005b      	lsls	r3, r3, #1
 8000538:	4413      	add	r3, r2
 800053a:	005b      	lsls	r3, r3, #1
 800053c:	4a74      	ldr	r2, [pc, #464]	@ (8000710 <main+0x23c>)
 800053e:	4413      	add	r3, r2
 8000540:	4619      	mov	r1, r3
 8000542:	f000 fd91 	bl	8001068 <Alarm_Get>
  for (int i = 0; i < alarm_slot_ptr; i++)
 8000546:	693b      	ldr	r3, [r7, #16]
 8000548:	3301      	adds	r3, #1
 800054a:	613b      	str	r3, [r7, #16]
 800054c:	4b71      	ldr	r3, [pc, #452]	@ (8000714 <main+0x240>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	461a      	mov	r2, r3
 8000552:	693b      	ldr	r3, [r7, #16]
 8000554:	4293      	cmp	r3, r2
 8000556:	dbea      	blt.n	800052e <main+0x5a>
  HAL_UART_Receive_IT(&huart1, uart_rx_data, 7);
 8000558:	2207      	movs	r2, #7
 800055a:	496f      	ldr	r1, [pc, #444]	@ (8000718 <main+0x244>)
 800055c:	486f      	ldr	r0, [pc, #444]	@ (800071c <main+0x248>)
 800055e:	f005 fb5b 	bl	8005c18 <HAL_UART_Receive_IT>
  HAL_ADC_Start_IT(&hadc1);
 8000562:	486f      	ldr	r0, [pc, #444]	@ (8000720 <main+0x24c>)
 8000564:	f002 fc5c 	bl	8002e20 <HAL_ADC_Start_IT>
    // while ((button0.int_flag || button1.int_flag || button2.int_flag || button3.int_flag || button4.int_flag)
    // ||     (button0.state == BUTTON_PRESSED || button1.state == BUTTON_PRESSED || button2.state == BUTTON_PRESSED || button3.state == BUTTON_PRESSED || button4.state == BUTTON_PRESSED)
    // ||     (button0.state == BUTTON_WAITING || button1.state == BUTTON_WAITING || button2.state == BUTTON_WAITING || button3.state == BUTTON_WAITING || button4.state == BUTTON_WAITING)
    // ||     ((button0.state == BUTTON_RELEASED || button1.state == BUTTON_RELEASED || button2.state == BUTTON_RELEASED || button3.state == BUTTON_RELEASED || button4.state == BUTTON_RELEASED)
    // &&     (button0.int_flag || button1.int_flag || button2.int_flag || button3.int_flag || button4.int_flag)))
    while ((button0.int_flag || button1.int_flag || button2.int_flag || button3.int_flag || button4.int_flag))
 8000568:	e001      	b.n	800056e <main+0x9a>
    {
      Button_Handle();
 800056a:	f000 ff23 	bl	80013b4 <Button_Handle>
    while ((button0.int_flag || button1.int_flag || button2.int_flag || button3.int_flag || button4.int_flag))
 800056e:	4b6d      	ldr	r3, [pc, #436]	@ (8000724 <main+0x250>)
 8000570:	7b1b      	ldrb	r3, [r3, #12]
 8000572:	b2db      	uxtb	r3, r3
 8000574:	2b00      	cmp	r3, #0
 8000576:	d1f8      	bne.n	800056a <main+0x96>
 8000578:	4b6b      	ldr	r3, [pc, #428]	@ (8000728 <main+0x254>)
 800057a:	7b1b      	ldrb	r3, [r3, #12]
 800057c:	b2db      	uxtb	r3, r3
 800057e:	2b00      	cmp	r3, #0
 8000580:	d1f3      	bne.n	800056a <main+0x96>
 8000582:	4b6a      	ldr	r3, [pc, #424]	@ (800072c <main+0x258>)
 8000584:	7b1b      	ldrb	r3, [r3, #12]
 8000586:	b2db      	uxtb	r3, r3
 8000588:	2b00      	cmp	r3, #0
 800058a:	d1ee      	bne.n	800056a <main+0x96>
 800058c:	4b68      	ldr	r3, [pc, #416]	@ (8000730 <main+0x25c>)
 800058e:	7b1b      	ldrb	r3, [r3, #12]
 8000590:	b2db      	uxtb	r3, r3
 8000592:	2b00      	cmp	r3, #0
 8000594:	d1e9      	bne.n	800056a <main+0x96>
 8000596:	4b67      	ldr	r3, [pc, #412]	@ (8000734 <main+0x260>)
 8000598:	7b1b      	ldrb	r3, [r3, #12]
 800059a:	b2db      	uxtb	r3, r3
 800059c:	2b00      	cmp	r3, #0
 800059e:	d1e4      	bne.n	800056a <main+0x96>
    }
    // TIME_DATA time_get;
    

    // Check if the RTC Interrupt Flag is set (RTC Interrupt Flag) on PB4 (Activated every second)
    if (rtc_int_flag)
 80005a0:	4b65      	ldr	r3, [pc, #404]	@ (8000738 <main+0x264>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	f000 80fb 	beq.w	80007a2 <main+0x2ce>
    {

      // Retrieve the time values from the RTC module
      Time_Get(&time_get_data);
 80005ac:	4857      	ldr	r0, [pc, #348]	@ (800070c <main+0x238>)
 80005ae:	f000 fbbd 	bl	8000d2c <Time_Get>
      Update_alarm_data();
 80005b2:	f001 fe9d 	bl	80022f0 <Update_alarm_data>

      // Check the alarms
      //   void Alarm_Check (volatile TIME_DATA *time_get_data)
      Alarm_Check(&time_get_data);
 80005b6:	4855      	ldr	r0, [pc, #340]	@ (800070c <main+0x238>)
 80005b8:	f000 fe02 	bl	80011c0 <Alarm_Check>

      // Reset the RTC Interrupt Flag
      rtc_int_flag = false;
 80005bc:	4b5e      	ldr	r3, [pc, #376]	@ (8000738 <main+0x264>)
 80005be:	2200      	movs	r2, #0
 80005c0:	701a      	strb	r2, [r3, #0]

      // Toggle the debug RTC interrupt flag for debugging purposes
      debug_rtc_int = !debug_rtc_int;
 80005c2:	4b5e      	ldr	r3, [pc, #376]	@ (800073c <main+0x268>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	bf14      	ite	ne
 80005cc:	2301      	movne	r3, #1
 80005ce:	2300      	moveq	r3, #0
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	f083 0301 	eor.w	r3, r3, #1
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	f003 0301 	and.w	r3, r3, #1
 80005dc:	b2da      	uxtb	r2, r3
 80005de:	4b57      	ldr	r3, [pc, #348]	@ (800073c <main+0x268>)
 80005e0:	701a      	strb	r2, [r3, #0]

      if(system_state.mode == DEFAULT_MODE)
 80005e2:	4b57      	ldr	r3, [pc, #348]	@ (8000740 <main+0x26c>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d106      	bne.n	80005f8 <main+0x124>
      {   
        default_mode(&flag_sSystem_mode, &time_get_data, battery_percentage);
 80005ea:	4b56      	ldr	r3, [pc, #344]	@ (8000744 <main+0x270>)
 80005ec:	881b      	ldrh	r3, [r3, #0]
 80005ee:	461a      	mov	r2, r3
 80005f0:	4946      	ldr	r1, [pc, #280]	@ (800070c <main+0x238>)
 80005f2:	4855      	ldr	r0, [pc, #340]	@ (8000748 <main+0x274>)
 80005f4:	f006 fb1e 	bl	8006c34 <default_mode>
      }

      if ((button0.press_flag || button1.press_flag|| button2.press_flag || button3.press_flag || button4.press_flag))
 80005f8:	4b4a      	ldr	r3, [pc, #296]	@ (8000724 <main+0x250>)
 80005fa:	7b5b      	ldrb	r3, [r3, #13]
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d114      	bne.n	800062c <main+0x158>
 8000602:	4b49      	ldr	r3, [pc, #292]	@ (8000728 <main+0x254>)
 8000604:	7b5b      	ldrb	r3, [r3, #13]
 8000606:	b2db      	uxtb	r3, r3
 8000608:	2b00      	cmp	r3, #0
 800060a:	d10f      	bne.n	800062c <main+0x158>
 800060c:	4b47      	ldr	r3, [pc, #284]	@ (800072c <main+0x258>)
 800060e:	7b5b      	ldrb	r3, [r3, #13]
 8000610:	b2db      	uxtb	r3, r3
 8000612:	2b00      	cmp	r3, #0
 8000614:	d10a      	bne.n	800062c <main+0x158>
 8000616:	4b46      	ldr	r3, [pc, #280]	@ (8000730 <main+0x25c>)
 8000618:	7b5b      	ldrb	r3, [r3, #13]
 800061a:	b2db      	uxtb	r3, r3
 800061c:	2b00      	cmp	r3, #0
 800061e:	d105      	bne.n	800062c <main+0x158>
 8000620:	4b44      	ldr	r3, [pc, #272]	@ (8000734 <main+0x260>)
 8000622:	7b5b      	ldrb	r3, [r3, #13]
 8000624:	b2db      	uxtb	r3, r3
 8000626:	2b00      	cmp	r3, #0
 8000628:	f000 80ae 	beq.w	8000788 <main+0x2b4>
      {
        // time_get = (TIME_DATA) time_get_data;
        // Default mode
        if(system_state.mode == DEFAULT_MODE)
 800062c:	4b44      	ldr	r3, [pc, #272]	@ (8000740 <main+0x26c>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d116      	bne.n	8000662 <main+0x18e>
        {   
          default_mode(&flag_sSystem_mode, &time_get_data, battery_percentage);
 8000634:	4b43      	ldr	r3, [pc, #268]	@ (8000744 <main+0x270>)
 8000636:	881b      	ldrh	r3, [r3, #0]
 8000638:	461a      	mov	r2, r3
 800063a:	4934      	ldr	r1, [pc, #208]	@ (800070c <main+0x238>)
 800063c:	4842      	ldr	r0, [pc, #264]	@ (8000748 <main+0x274>)
 800063e:	f006 faf9 	bl	8006c34 <default_mode>
          button0.press_flag = 0;
 8000642:	4b38      	ldr	r3, [pc, #224]	@ (8000724 <main+0x250>)
 8000644:	2200      	movs	r2, #0
 8000646:	735a      	strb	r2, [r3, #13]
          button1.press_flag = 0;
 8000648:	4b37      	ldr	r3, [pc, #220]	@ (8000728 <main+0x254>)
 800064a:	2200      	movs	r2, #0
 800064c:	735a      	strb	r2, [r3, #13]
          button2.press_flag = 0;
 800064e:	4b37      	ldr	r3, [pc, #220]	@ (800072c <main+0x258>)
 8000650:	2200      	movs	r2, #0
 8000652:	735a      	strb	r2, [r3, #13]
          button3.press_flag = 0;
 8000654:	4b36      	ldr	r3, [pc, #216]	@ (8000730 <main+0x25c>)
 8000656:	2200      	movs	r2, #0
 8000658:	735a      	strb	r2, [r3, #13]
          button4.press_flag = 0;
 800065a:	4b36      	ldr	r3, [pc, #216]	@ (8000734 <main+0x260>)
 800065c:	2200      	movs	r2, #0
 800065e:	735a      	strb	r2, [r3, #13]
 8000660:	e092      	b.n	8000788 <main+0x2b4>
        }
        // System setup mode
        else if(system_state.mode == SYSTEM_OPTIONS_MODE)
 8000662:	4b37      	ldr	r3, [pc, #220]	@ (8000740 <main+0x26c>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	2b05      	cmp	r3, #5
 8000668:	d117      	bne.n	800069a <main+0x1c6>
        {   
          // system_setup_mode (FLAG_SYSTEM *flag_set_up,  CONTROL_SCREEN *Control_screen);
          system_setup_mode (&flag_sSystem_mode,  &system_state, battery_percentage);
 800066a:	4b36      	ldr	r3, [pc, #216]	@ (8000744 <main+0x270>)
 800066c:	881b      	ldrh	r3, [r3, #0]
 800066e:	b2db      	uxtb	r3, r3
 8000670:	461a      	mov	r2, r3
 8000672:	4933      	ldr	r1, [pc, #204]	@ (8000740 <main+0x26c>)
 8000674:	4834      	ldr	r0, [pc, #208]	@ (8000748 <main+0x274>)
 8000676:	f006 fbbb 	bl	8006df0 <system_setup_mode>
          button0.press_flag = 0;
 800067a:	4b2a      	ldr	r3, [pc, #168]	@ (8000724 <main+0x250>)
 800067c:	2200      	movs	r2, #0
 800067e:	735a      	strb	r2, [r3, #13]
          button1.press_flag = 0;
 8000680:	4b29      	ldr	r3, [pc, #164]	@ (8000728 <main+0x254>)
 8000682:	2200      	movs	r2, #0
 8000684:	735a      	strb	r2, [r3, #13]
          button2.press_flag = 0;
 8000686:	4b29      	ldr	r3, [pc, #164]	@ (800072c <main+0x258>)
 8000688:	2200      	movs	r2, #0
 800068a:	735a      	strb	r2, [r3, #13]
          button3.press_flag = 0;
 800068c:	4b28      	ldr	r3, [pc, #160]	@ (8000730 <main+0x25c>)
 800068e:	2200      	movs	r2, #0
 8000690:	735a      	strb	r2, [r3, #13]
          button4.press_flag = 0;
 8000692:	4b28      	ldr	r3, [pc, #160]	@ (8000734 <main+0x260>)
 8000694:	2200      	movs	r2, #0
 8000696:	735a      	strb	r2, [r3, #13]
 8000698:	e076      	b.n	8000788 <main+0x2b4>
        }
        // Alarm_set_up mode
        else if(system_state.mode == ALARM_SETUP_MODE)
 800069a:	4b29      	ldr	r3, [pc, #164]	@ (8000740 <main+0x26c>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	2b02      	cmp	r3, #2
 80006a0:	d116      	bne.n	80006d0 <main+0x1fc>
        {   
          //alarm_setup_mode(FLAG_SYSTEM *flag_alarm_set_up_mode, CONTROL_SCREEN *Control_screen, SYSTEM_PARAM_DATA_ALARM_VIEW_MODE *alarm_view_mode);
          alarm_setup_mode(&flag_sSystem_mode, &system_state, &alarm_setup_data, battery_percentage);
 80006a2:	4b28      	ldr	r3, [pc, #160]	@ (8000744 <main+0x270>)
 80006a4:	881b      	ldrh	r3, [r3, #0]
 80006a6:	4a29      	ldr	r2, [pc, #164]	@ (800074c <main+0x278>)
 80006a8:	4925      	ldr	r1, [pc, #148]	@ (8000740 <main+0x26c>)
 80006aa:	4827      	ldr	r0, [pc, #156]	@ (8000748 <main+0x274>)
 80006ac:	f007 fee0 	bl	8008470 <alarm_setup_mode>
          button0.press_flag = 0;
 80006b0:	4b1c      	ldr	r3, [pc, #112]	@ (8000724 <main+0x250>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	735a      	strb	r2, [r3, #13]
          button1.press_flag = 0;
 80006b6:	4b1c      	ldr	r3, [pc, #112]	@ (8000728 <main+0x254>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	735a      	strb	r2, [r3, #13]
          button2.press_flag = 0;
 80006bc:	4b1b      	ldr	r3, [pc, #108]	@ (800072c <main+0x258>)
 80006be:	2200      	movs	r2, #0
 80006c0:	735a      	strb	r2, [r3, #13]
          button3.press_flag = 0;
 80006c2:	4b1b      	ldr	r3, [pc, #108]	@ (8000730 <main+0x25c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	735a      	strb	r2, [r3, #13]
          button4.press_flag = 0;
 80006c8:	4b1a      	ldr	r3, [pc, #104]	@ (8000734 <main+0x260>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	735a      	strb	r2, [r3, #13]
 80006ce:	e05b      	b.n	8000788 <main+0x2b4>
        }
        // alarm view mode
        else if(system_state.mode == ALARM_VIEW_MODE)
 80006d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000740 <main+0x26c>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	2b03      	cmp	r3, #3
 80006d6:	d13d      	bne.n	8000754 <main+0x280>
        {   
          //alarm_view_mode (FLAG_SYSTEM *flag_alarm_view_mode, CONTROL_SCREEN *Control_screen, uint8_t *count_view, uint8_t *count_select, SYSTEM_PARAM_DATA_ALARM_VIEW_MODE *alarm_view_mode);
          alarm_view_mode (&flag_sSystem_mode, &system_state, &sParam_data_alarm_view_mode, battery_percentage);
 80006d8:	4b1a      	ldr	r3, [pc, #104]	@ (8000744 <main+0x270>)
 80006da:	881b      	ldrh	r3, [r3, #0]
 80006dc:	4a1c      	ldr	r2, [pc, #112]	@ (8000750 <main+0x27c>)
 80006de:	4918      	ldr	r1, [pc, #96]	@ (8000740 <main+0x26c>)
 80006e0:	4819      	ldr	r0, [pc, #100]	@ (8000748 <main+0x274>)
 80006e2:	f006 fc7f 	bl	8006fe4 <alarm_view_mode>
          button0.press_flag = 0;
 80006e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000724 <main+0x250>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	735a      	strb	r2, [r3, #13]
          button1.press_flag = 0;
 80006ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000728 <main+0x254>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	735a      	strb	r2, [r3, #13]
          button2.press_flag = 0;
 80006f2:	4b0e      	ldr	r3, [pc, #56]	@ (800072c <main+0x258>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	735a      	strb	r2, [r3, #13]
          button3.press_flag = 0;
 80006f8:	4b0d      	ldr	r3, [pc, #52]	@ (8000730 <main+0x25c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	735a      	strb	r2, [r3, #13]
          button4.press_flag = 0;
 80006fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000734 <main+0x260>)
 8000700:	2200      	movs	r2, #0
 8000702:	735a      	strb	r2, [r3, #13]
 8000704:	e040      	b.n	8000788 <main+0x2b4>
 8000706:	bf00      	nop
 8000708:	40010c00 	.word	0x40010c00
 800070c:	200003a0 	.word	0x200003a0
 8000710:	200003a8 	.word	0x200003a8
 8000714:	200003e4 	.word	0x200003e4
 8000718:	200003f8 	.word	0x200003f8
 800071c:	2000050c 	.word	0x2000050c
 8000720:	20000304 	.word	0x20000304
 8000724:	20000008 	.word	0x20000008
 8000728:	20000018 	.word	0x20000018
 800072c:	20000028 	.word	0x20000028
 8000730:	20000038 	.word	0x20000038
 8000734:	20000048 	.word	0x20000048
 8000738:	200003e5 	.word	0x200003e5
 800073c:	200003e8 	.word	0x200003e8
 8000740:	20000388 	.word	0x20000388
 8000744:	200003f4 	.word	0x200003f4
 8000748:	20000000 	.word	0x20000000
 800074c:	20000398 	.word	0x20000398
 8000750:	20000058 	.word	0x20000058
        }
        //alarm time set up mode
        else if(system_state.mode == TIME_SETUP_MODE)
 8000754:	4b98      	ldr	r3, [pc, #608]	@ (80009b8 <main+0x4e4>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	2b01      	cmp	r3, #1
 800075a:	d115      	bne.n	8000788 <main+0x2b4>
        {   
          time_setup_mode(&flag_sSystem_mode, &system_state, &time_setup_data, battery_percentage);
 800075c:	4b97      	ldr	r3, [pc, #604]	@ (80009bc <main+0x4e8>)
 800075e:	881b      	ldrh	r3, [r3, #0]
 8000760:	4a97      	ldr	r2, [pc, #604]	@ (80009c0 <main+0x4ec>)
 8000762:	4995      	ldr	r1, [pc, #596]	@ (80009b8 <main+0x4e4>)
 8000764:	4897      	ldr	r0, [pc, #604]	@ (80009c4 <main+0x4f0>)
 8000766:	f008 f8e7 	bl	8008938 <time_setup_mode>
          button0.press_flag = 0;
 800076a:	4b97      	ldr	r3, [pc, #604]	@ (80009c8 <main+0x4f4>)
 800076c:	2200      	movs	r2, #0
 800076e:	735a      	strb	r2, [r3, #13]
          button1.press_flag = 0;
 8000770:	4b96      	ldr	r3, [pc, #600]	@ (80009cc <main+0x4f8>)
 8000772:	2200      	movs	r2, #0
 8000774:	735a      	strb	r2, [r3, #13]
          button2.press_flag = 0;
 8000776:	4b96      	ldr	r3, [pc, #600]	@ (80009d0 <main+0x4fc>)
 8000778:	2200      	movs	r2, #0
 800077a:	735a      	strb	r2, [r3, #13]
          button3.press_flag = 0;
 800077c:	4b95      	ldr	r3, [pc, #596]	@ (80009d4 <main+0x500>)
 800077e:	2200      	movs	r2, #0
 8000780:	735a      	strb	r2, [r3, #13]
          button4.press_flag = 0;
 8000782:	4b95      	ldr	r3, [pc, #596]	@ (80009d8 <main+0x504>)
 8000784:	2200      	movs	r2, #0
 8000786:	735a      	strb	r2, [r3, #13]
        }
      }
      toggle_alarm_buzzer();
 8000788:	463b      	mov	r3, r7
 800078a:	469c      	mov	ip, r3
 800078c:	f7ff fe92 	bl	80004b4 <toggle_alarm_buzzer.0>

       // Check if the alarm is active
      if (alarm_active_flag)
 8000790:	4b92      	ldr	r3, [pc, #584]	@ (80009dc <main+0x508>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d004      	beq.n	80007a2 <main+0x2ce>
      {
      // Call the alarm ringing function
        Alarm_Ring();
 8000798:	f001 ff00 	bl	800259c <Alarm_Ring>

      // Call the system alarm active mode handler to track if any button is pressed
        System_Alarm_Active_Mode_Handle(&button0);
 800079c:	488a      	ldr	r0, [pc, #552]	@ (80009c8 <main+0x4f4>)
 800079e:	f001 fbf3 	bl	8001f88 <System_Alarm_Active_Mode_Handle>
      }
    }

    // Check if the ADC interrupt flag is set (ADC Valid Flag)
      if (adc_valid_flag)
 80007a2:	4b8f      	ldr	r3, [pc, #572]	@ (80009e0 <main+0x50c>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d01c      	beq.n	80007e6 <main+0x312>
	  {
      // Re-enable the ADC interrupt to continue monitoring ADC values
      HAL_ADC_Start_IT(&hadc1);
 80007ac:	488d      	ldr	r0, [pc, #564]	@ (80009e4 <main+0x510>)
 80007ae:	f002 fb37 	bl	8002e20 <HAL_ADC_Start_IT>

      // Delay for 100ms to allow the ADC to stabilize
      HAL_Delay(100);
 80007b2:	2064      	movs	r0, #100	@ 0x64
 80007b4:	f002 fa38 	bl	8002c28 <HAL_Delay>
      if ((battery_percentage % 25) == 0)
 80007b8:	4b80      	ldr	r3, [pc, #512]	@ (80009bc <main+0x4e8>)
 80007ba:	881a      	ldrh	r2, [r3, #0]
 80007bc:	4b8a      	ldr	r3, [pc, #552]	@ (80009e8 <main+0x514>)
 80007be:	fba3 1302 	umull	r1, r3, r3, r2
 80007c2:	08d9      	lsrs	r1, r3, #3
 80007c4:	460b      	mov	r3, r1
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	440b      	add	r3, r1
 80007ca:	0099      	lsls	r1, r3, #2
 80007cc:	440b      	add	r3, r1
 80007ce:	1ad3      	subs	r3, r2, r3
 80007d0:	b29b      	uxth	r3, r3
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d104      	bne.n	80007e0 <main+0x30c>
      {
        // Update the battery percentage value to be displayed
        system_state.battery_display = battery_percentage;
 80007d6:	4b79      	ldr	r3, [pc, #484]	@ (80009bc <main+0x4e8>)
 80007d8:	881b      	ldrh	r3, [r3, #0]
 80007da:	b2da      	uxtb	r2, r3
 80007dc:	4b76      	ldr	r3, [pc, #472]	@ (80009b8 <main+0x4e4>)
 80007de:	719a      	strb	r2, [r3, #6]
      }

      // Reset the ADC interrupt flag
      adc_valid_flag = false;
 80007e0:	4b7f      	ldr	r3, [pc, #508]	@ (80009e0 <main+0x50c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	701a      	strb	r2, [r3, #0]
// Check for UART mode change
    //    0. Quit Mode:     0b11000000
    //    1. Time Setup:    0b11110000 (ON)/ 0b11000000 (OFF)
    //    2. Alarm Setup:   0b01110000 (ON)/ 0b11000000 (OFF)
    //    3. Update Alarms: 0b11111111
    if      (uart_mode == 0b11110000 || uart_rx_data[1] == 0b11110000)    
 80007e6:	4b81      	ldr	r3, [pc, #516]	@ (80009ec <main+0x518>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	2bf0      	cmp	r3, #240	@ 0xf0
 80007ec:	d003      	beq.n	80007f6 <main+0x322>
 80007ee:	4b80      	ldr	r3, [pc, #512]	@ (80009f0 <main+0x51c>)
 80007f0:	785b      	ldrb	r3, [r3, #1]
 80007f2:	2bf0      	cmp	r3, #240	@ 0xf0
 80007f4:	d105      	bne.n	8000802 <main+0x32e>
    {
      // Set the UART mode to 1 (Time Setup Mode)
      uart_appMode = 1;
 80007f6:	4b7f      	ldr	r3, [pc, #508]	@ (80009f4 <main+0x520>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	701a      	strb	r2, [r3, #0]
      uartDoneFlag = false;
 80007fc:	2300      	movs	r3, #0
 80007fe:	75fb      	strb	r3, [r7, #23]
 8000800:	e028      	b.n	8000854 <main+0x380>
    }
    else if (uart_mode == 0b01110000 || uart_rx_data[1] == 0b01110000)     
 8000802:	4b7a      	ldr	r3, [pc, #488]	@ (80009ec <main+0x518>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	2b70      	cmp	r3, #112	@ 0x70
 8000808:	d003      	beq.n	8000812 <main+0x33e>
 800080a:	4b79      	ldr	r3, [pc, #484]	@ (80009f0 <main+0x51c>)
 800080c:	785b      	ldrb	r3, [r3, #1]
 800080e:	2b70      	cmp	r3, #112	@ 0x70
 8000810:	d105      	bne.n	800081e <main+0x34a>
    {
      // Set the UART mode to 2 (Alarm Setup Mode)
      uart_appMode = 2;
 8000812:	4b78      	ldr	r3, [pc, #480]	@ (80009f4 <main+0x520>)
 8000814:	2202      	movs	r2, #2
 8000816:	701a      	strb	r2, [r3, #0]
      uartDoneFlag = false;
 8000818:	2300      	movs	r3, #0
 800081a:	75fb      	strb	r3, [r7, #23]
 800081c:	e01a      	b.n	8000854 <main+0x380>
    }
    else if (uart_mode == 0b11111111 || uart_rx_data[1] == 0b11111111)      
 800081e:	4b73      	ldr	r3, [pc, #460]	@ (80009ec <main+0x518>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	2bff      	cmp	r3, #255	@ 0xff
 8000824:	d003      	beq.n	800082e <main+0x35a>
 8000826:	4b72      	ldr	r3, [pc, #456]	@ (80009f0 <main+0x51c>)
 8000828:	785b      	ldrb	r3, [r3, #1]
 800082a:	2bff      	cmp	r3, #255	@ 0xff
 800082c:	d105      	bne.n	800083a <main+0x366>
    {
      // Set the UART mode to 3 (Update Alarms Mode)
      uart_appMode = 3;
 800082e:	4b71      	ldr	r3, [pc, #452]	@ (80009f4 <main+0x520>)
 8000830:	2203      	movs	r2, #3
 8000832:	701a      	strb	r2, [r3, #0]
      uartDoneFlag = false;
 8000834:	2300      	movs	r3, #0
 8000836:	75fb      	strb	r3, [r7, #23]
 8000838:	e00c      	b.n	8000854 <main+0x380>
    }
    else if (uart_mode == 0b11000000 || uart_rx_data[1] == 0b11000000)      
 800083a:	4b6c      	ldr	r3, [pc, #432]	@ (80009ec <main+0x518>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	2bc0      	cmp	r3, #192	@ 0xc0
 8000840:	d003      	beq.n	800084a <main+0x376>
 8000842:	4b6b      	ldr	r3, [pc, #428]	@ (80009f0 <main+0x51c>)
 8000844:	785b      	ldrb	r3, [r3, #1]
 8000846:	2bc0      	cmp	r3, #192	@ 0xc0
 8000848:	d104      	bne.n	8000854 <main+0x380>
    {
      // Set the UART mode to 0 (Quit Mode)
      uart_appMode = 0;
 800084a:	4b6a      	ldr	r3, [pc, #424]	@ (80009f4 <main+0x520>)
 800084c:	2200      	movs	r2, #0
 800084e:	701a      	strb	r2, [r3, #0]
      uartDoneFlag = false;
 8000850:	2300      	movs	r3, #0
 8000852:	75fb      	strb	r3, [r7, #23]
    }    

    // Check if the UART interrupt flag is set (UART Receive Flag)
    if (uart_rx_flag)
 8000854:	4b68      	ldr	r3, [pc, #416]	@ (80009f8 <main+0x524>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	b2db      	uxtb	r3, r3
 800085a:	2b00      	cmp	r3, #0
 800085c:	f000 809d 	beq.w	800099a <main+0x4c6>
	  { 
      uart_mode = uart_rx_data[0];
 8000860:	4b63      	ldr	r3, [pc, #396]	@ (80009f0 <main+0x51c>)
 8000862:	781a      	ldrb	r2, [r3, #0]
 8000864:	4b61      	ldr	r3, [pc, #388]	@ (80009ec <main+0x518>)
 8000866:	701a      	strb	r2, [r3, #0]
      // Re-enable the UART interrupt to continue receiving data
      HAL_Delay(100);
 8000868:	2064      	movs	r0, #100	@ 0x64
 800086a:	f002 f9dd 	bl	8002c28 <HAL_Delay>

      if (!uartDoneFlag)
 800086e:	7dfb      	ldrb	r3, [r7, #23]
 8000870:	f083 0301 	eor.w	r3, r3, #1
 8000874:	b2db      	uxtb	r3, r3
 8000876:	2b00      	cmp	r3, #0
 8000878:	f000 8087 	beq.w	800098a <main+0x4b6>
      {
        switch (uart_appMode)
 800087c:	4b5d      	ldr	r3, [pc, #372]	@ (80009f4 <main+0x520>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	2b03      	cmp	r3, #3
 8000882:	d07a      	beq.n	800097a <main+0x4a6>
 8000884:	2b03      	cmp	r3, #3
 8000886:	dc7f      	bgt.n	8000988 <main+0x4b4>
 8000888:	2b01      	cmp	r3, #1
 800088a:	d002      	beq.n	8000892 <main+0x3be>
 800088c:	2b02      	cmp	r3, #2
 800088e:	d032      	beq.n	80008f6 <main+0x422>
            
            break;

          default:
            // Do nothing if the UART mode is not recognized
            break;
 8000890:	e07a      	b.n	8000988 <main+0x4b4>
            uart_hour   = uart_rx_data[0]; //uart_rx_data[0] = hour
 8000892:	4b57      	ldr	r3, [pc, #348]	@ (80009f0 <main+0x51c>)
 8000894:	781a      	ldrb	r2, [r3, #0]
 8000896:	4b59      	ldr	r3, [pc, #356]	@ (80009fc <main+0x528>)
 8000898:	701a      	strb	r2, [r3, #0]
            uart_minute = uart_rx_data[1]; //uart_rx_data[1] = minute
 800089a:	4b55      	ldr	r3, [pc, #340]	@ (80009f0 <main+0x51c>)
 800089c:	785a      	ldrb	r2, [r3, #1]
 800089e:	4b58      	ldr	r3, [pc, #352]	@ (8000a00 <main+0x52c>)
 80008a0:	701a      	strb	r2, [r3, #0]
            uart_dow    = uart_rx_data[5] + 1; //uart_rx_data[5] = day of the week (1-7)
 80008a2:	4b53      	ldr	r3, [pc, #332]	@ (80009f0 <main+0x51c>)
 80008a4:	795b      	ldrb	r3, [r3, #5]
 80008a6:	3301      	adds	r3, #1
 80008a8:	b2da      	uxtb	r2, r3
 80008aa:	4b56      	ldr	r3, [pc, #344]	@ (8000a04 <main+0x530>)
 80008ac:	701a      	strb	r2, [r3, #0]
            uart_day    = uart_rx_data[2]; //uart_rx_data[2] = date of the month (1-31)
 80008ae:	4b50      	ldr	r3, [pc, #320]	@ (80009f0 <main+0x51c>)
 80008b0:	789a      	ldrb	r2, [r3, #2]
 80008b2:	4b55      	ldr	r3, [pc, #340]	@ (8000a08 <main+0x534>)
 80008b4:	701a      	strb	r2, [r3, #0]
            uart_month  = uart_rx_data[3]; //uart_rx_data[3] = month (1-12)
 80008b6:	4b4e      	ldr	r3, [pc, #312]	@ (80009f0 <main+0x51c>)
 80008b8:	78da      	ldrb	r2, [r3, #3]
 80008ba:	4b54      	ldr	r3, [pc, #336]	@ (8000a0c <main+0x538>)
 80008bc:	701a      	strb	r2, [r3, #0]
            uart_year   = uart_rx_data[4]; //uart_rx_data[4] = year (0-99)
 80008be:	4b4c      	ldr	r3, [pc, #304]	@ (80009f0 <main+0x51c>)
 80008c0:	791a      	ldrb	r2, [r3, #4]
 80008c2:	4b53      	ldr	r3, [pc, #332]	@ (8000a10 <main+0x53c>)
 80008c4:	701a      	strb	r2, [r3, #0]
            Time_Init
 80008c6:	4b4e      	ldr	r3, [pc, #312]	@ (8000a00 <main+0x52c>)
 80008c8:	7818      	ldrb	r0, [r3, #0]
 80008ca:	4b4c      	ldr	r3, [pc, #304]	@ (80009fc <main+0x528>)
 80008cc:	781c      	ldrb	r4, [r3, #0]
 80008ce:	4b4d      	ldr	r3, [pc, #308]	@ (8000a04 <main+0x530>)
 80008d0:	781d      	ldrb	r5, [r3, #0]
 80008d2:	4b4d      	ldr	r3, [pc, #308]	@ (8000a08 <main+0x534>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	4a4d      	ldr	r2, [pc, #308]	@ (8000a0c <main+0x538>)
 80008d8:	7812      	ldrb	r2, [r2, #0]
 80008da:	494d      	ldr	r1, [pc, #308]	@ (8000a10 <main+0x53c>)
 80008dc:	7809      	ldrb	r1, [r1, #0]
 80008de:	9102      	str	r1, [sp, #8]
 80008e0:	9201      	str	r2, [sp, #4]
 80008e2:	9300      	str	r3, [sp, #0]
 80008e4:	462b      	mov	r3, r5
 80008e6:	4622      	mov	r2, r4
 80008e8:	4601      	mov	r1, r0
 80008ea:	2000      	movs	r0, #0
 80008ec:	f000 fb40 	bl	8000f70 <Time_Init>
            uartDoneFlag = true;
 80008f0:	2301      	movs	r3, #1
 80008f2:	75fb      	strb	r3, [r7, #23]
            break;
 80008f4:	e049      	b.n	800098a <main+0x4b6>
            uart_hour     = uart_rx_data[0]; //uart_rx_data[0] = hour
 80008f6:	4b3e      	ldr	r3, [pc, #248]	@ (80009f0 <main+0x51c>)
 80008f8:	781a      	ldrb	r2, [r3, #0]
 80008fa:	4b40      	ldr	r3, [pc, #256]	@ (80009fc <main+0x528>)
 80008fc:	701a      	strb	r2, [r3, #0]
            uart_minute   = uart_rx_data[1]; //uart_rx_data[1] = minute
 80008fe:	4b3c      	ldr	r3, [pc, #240]	@ (80009f0 <main+0x51c>)
 8000900:	785a      	ldrb	r2, [r3, #1]
 8000902:	4b3f      	ldr	r3, [pc, #252]	@ (8000a00 <main+0x52c>)
 8000904:	701a      	strb	r2, [r3, #0]
            uart_alarmSta = uart_rx_data[6]; //uart_rx_data[6] status of the alarm (on/off)
 8000906:	4b3a      	ldr	r3, [pc, #232]	@ (80009f0 <main+0x51c>)
 8000908:	799a      	ldrb	r2, [r3, #6]
 800090a:	4b42      	ldr	r3, [pc, #264]	@ (8000a14 <main+0x540>)
 800090c:	701a      	strb	r2, [r3, #0]
            Alarm_Set
 800090e:	4b3c      	ldr	r3, [pc, #240]	@ (8000a00 <main+0x52c>)
 8000910:	7819      	ldrb	r1, [r3, #0]
 8000912:	4b3a      	ldr	r3, [pc, #232]	@ (80009fc <main+0x528>)
 8000914:	7818      	ldrb	r0, [r3, #0]
 8000916:	4b3f      	ldr	r3, [pc, #252]	@ (8000a14 <main+0x540>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2b00      	cmp	r3, #0
 800091c:	bf14      	ite	ne
 800091e:	2301      	movne	r3, #1
 8000920:	2300      	moveq	r3, #0
 8000922:	b2db      	uxtb	r3, r3
 8000924:	4a3c      	ldr	r2, [pc, #240]	@ (8000a18 <main+0x544>)
 8000926:	7812      	ldrb	r2, [r2, #0]
 8000928:	9202      	str	r2, [sp, #8]
 800092a:	9301      	str	r3, [sp, #4]
 800092c:	2302      	movs	r3, #2
 800092e:	9300      	str	r3, [sp, #0]
 8000930:	2300      	movs	r3, #0
 8000932:	4602      	mov	r2, r0
 8000934:	2000      	movs	r0, #0
 8000936:	f000 fb47 	bl	8000fc8 <Alarm_Set>
            Alarm_Get(alarm_slot_ptr, &alarm_get_data[alarm_slot_ptr]);
 800093a:	4b37      	ldr	r3, [pc, #220]	@ (8000a18 <main+0x544>)
 800093c:	781a      	ldrb	r2, [r3, #0]
 800093e:	4b36      	ldr	r3, [pc, #216]	@ (8000a18 <main+0x544>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	4619      	mov	r1, r3
 8000944:	460b      	mov	r3, r1
 8000946:	005b      	lsls	r3, r3, #1
 8000948:	440b      	add	r3, r1
 800094a:	005b      	lsls	r3, r3, #1
 800094c:	4933      	ldr	r1, [pc, #204]	@ (8000a1c <main+0x548>)
 800094e:	440b      	add	r3, r1
 8000950:	4619      	mov	r1, r3
 8000952:	4610      	mov	r0, r2
 8000954:	f000 fb88 	bl	8001068 <Alarm_Get>
            alarm_slot_ptr = (alarm_slot_ptr < ALARM_SLOT_NUM) ? (alarm_slot_ptr + 1) : 0;
 8000958:	4b2f      	ldr	r3, [pc, #188]	@ (8000a18 <main+0x544>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	2b09      	cmp	r3, #9
 800095e:	d804      	bhi.n	800096a <main+0x496>
 8000960:	4b2d      	ldr	r3, [pc, #180]	@ (8000a18 <main+0x544>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	3301      	adds	r3, #1
 8000966:	b2db      	uxtb	r3, r3
 8000968:	e000      	b.n	800096c <main+0x498>
 800096a:	2300      	movs	r3, #0
 800096c:	4a2a      	ldr	r2, [pc, #168]	@ (8000a18 <main+0x544>)
 800096e:	7013      	strb	r3, [r2, #0]
            Alarm_Slot_Pointer_Set();
 8000970:	f000 fbf2 	bl	8001158 <Alarm_Slot_Pointer_Set>
            uartDoneFlag = true;
 8000974:	2301      	movs	r3, #1
 8000976:	75fb      	strb	r3, [r7, #23]
            break;
 8000978:	e007      	b.n	800098a <main+0x4b6>
            uart_tx_flag = 1; //Set the flag to transmit data to App
 800097a:	4b29      	ldr	r3, [pc, #164]	@ (8000a20 <main+0x54c>)
 800097c:	2201      	movs	r2, #1
 800097e:	701a      	strb	r2, [r3, #0]
            HAL_Delay(50);                     // Delay for 50ms to allow the UART to stabilize
 8000980:	2032      	movs	r0, #50	@ 0x32
 8000982:	f002 f951 	bl	8002c28 <HAL_Delay>
            break;
 8000986:	e000      	b.n	800098a <main+0x4b6>
            break;
 8000988:	bf00      	nop
      //   // uart_tx_flag  = 1;
      //   //uart_rx_data[0] = 0b00000000; // Reset the uart_rx_data array to avoid sending the same data again
      // }

      // Re-enable the UART interrupt to continue receiving data
      HAL_UART_Receive_IT(&huart1, uart_rx_data, 7);
 800098a:	2207      	movs	r2, #7
 800098c:	4918      	ldr	r1, [pc, #96]	@ (80009f0 <main+0x51c>)
 800098e:	4825      	ldr	r0, [pc, #148]	@ (8000a24 <main+0x550>)
 8000990:	f005 f942 	bl	8005c18 <HAL_UART_Receive_IT>

      // Delay for 100ms to allow the UART to stabilize
      HAL_Delay(100);
 8000994:	2064      	movs	r0, #100	@ 0x64
 8000996:	f002 f947 	bl	8002c28 <HAL_Delay>
	  }

    // Check if the UART transmit flag is set (Transmit Flag)
    if (uart_tx_flag)
 800099a:	4b21      	ldr	r3, [pc, #132]	@ (8000a20 <main+0x54c>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	f43f ade4 	beq.w	800056e <main+0x9a>
    {
      // Update Alarms Mode
      if (uart_appMode == 3)
 80009a6:	4b13      	ldr	r3, [pc, #76]	@ (80009f4 <main+0x520>)
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	2b03      	cmp	r3, #3
 80009ac:	f47f addf 	bne.w	800056e <main+0x9a>
      {
        // Encode alarm data into packages to be sent to the App
        for (int i = 0; i < alarm_slot_ptr; i++)
 80009b0:	2300      	movs	r3, #0
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	e092      	b.n	8000adc <main+0x608>
 80009b6:	bf00      	nop
 80009b8:	20000388 	.word	0x20000388
 80009bc:	200003f4 	.word	0x200003f4
 80009c0:	20000390 	.word	0x20000390
 80009c4:	20000000 	.word	0x20000000
 80009c8:	20000008 	.word	0x20000008
 80009cc:	20000018 	.word	0x20000018
 80009d0:	20000028 	.word	0x20000028
 80009d4:	20000038 	.word	0x20000038
 80009d8:	20000048 	.word	0x20000048
 80009dc:	200003e7 	.word	0x200003e7
 80009e0:	200003f1 	.word	0x200003f1
 80009e4:	20000304 	.word	0x20000304
 80009e8:	51eb851f 	.word	0x51eb851f
 80009ec:	2000040f 	.word	0x2000040f
 80009f0:	200003f8 	.word	0x200003f8
 80009f4:	20000410 	.word	0x20000410
 80009f8:	200003f6 	.word	0x200003f6
 80009fc:	20000407 	.word	0x20000407
 8000a00:	20000408 	.word	0x20000408
 8000a04:	20000409 	.word	0x20000409
 8000a08:	2000040a 	.word	0x2000040a
 8000a0c:	2000040b 	.word	0x2000040b
 8000a10:	2000040c 	.word	0x2000040c
 8000a14:	2000040e 	.word	0x2000040e
 8000a18:	200003e4 	.word	0x200003e4
 8000a1c:	200003a8 	.word	0x200003a8
 8000a20:	200003f7 	.word	0x200003f7
 8000a24:	2000050c 	.word	0x2000050c
        {
          alarm_Info[i][0] = alarm_get_data[i].hour;   // Store the hour value of the alarm
 8000a28:	4945      	ldr	r1, [pc, #276]	@ (8000b40 <main+0x66c>)
 8000a2a:	68fa      	ldr	r2, [r7, #12]
 8000a2c:	4613      	mov	r3, r2
 8000a2e:	005b      	lsls	r3, r3, #1
 8000a30:	4413      	add	r3, r2
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	440b      	add	r3, r1
 8000a36:	3302      	adds	r3, #2
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	b2d8      	uxtb	r0, r3
 8000a3c:	4941      	ldr	r1, [pc, #260]	@ (8000b44 <main+0x670>)
 8000a3e:	68fa      	ldr	r2, [r7, #12]
 8000a40:	4613      	mov	r3, r2
 8000a42:	00db      	lsls	r3, r3, #3
 8000a44:	1a9b      	subs	r3, r3, r2
 8000a46:	440b      	add	r3, r1
 8000a48:	4602      	mov	r2, r0
 8000a4a:	701a      	strb	r2, [r3, #0]
          alarm_Info[i][1] = alarm_get_data[i].minute; // Store the minute value of the alarm
 8000a4c:	493c      	ldr	r1, [pc, #240]	@ (8000b40 <main+0x66c>)
 8000a4e:	68fa      	ldr	r2, [r7, #12]
 8000a50:	4613      	mov	r3, r2
 8000a52:	005b      	lsls	r3, r3, #1
 8000a54:	4413      	add	r3, r2
 8000a56:	005b      	lsls	r3, r3, #1
 8000a58:	440b      	add	r3, r1
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	b2d8      	uxtb	r0, r3
 8000a60:	4938      	ldr	r1, [pc, #224]	@ (8000b44 <main+0x670>)
 8000a62:	68fa      	ldr	r2, [r7, #12]
 8000a64:	4613      	mov	r3, r2
 8000a66:	00db      	lsls	r3, r3, #3
 8000a68:	1a9b      	subs	r3, r3, r2
 8000a6a:	440b      	add	r3, r1
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	4602      	mov	r2, r0
 8000a70:	701a      	strb	r2, [r3, #0]
          alarm_Info[i][2] = alarm_get_data[i].dow_dom;    // Store the day value of the alarm
 8000a72:	4933      	ldr	r1, [pc, #204]	@ (8000b40 <main+0x66c>)
 8000a74:	68fa      	ldr	r2, [r7, #12]
 8000a76:	4613      	mov	r3, r2
 8000a78:	005b      	lsls	r3, r3, #1
 8000a7a:	4413      	add	r3, r2
 8000a7c:	005b      	lsls	r3, r3, #1
 8000a7e:	440b      	add	r3, r1
 8000a80:	3304      	adds	r3, #4
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	b2d8      	uxtb	r0, r3
 8000a86:	492f      	ldr	r1, [pc, #188]	@ (8000b44 <main+0x670>)
 8000a88:	68fa      	ldr	r2, [r7, #12]
 8000a8a:	4613      	mov	r3, r2
 8000a8c:	00db      	lsls	r3, r3, #3
 8000a8e:	1a9b      	subs	r3, r3, r2
 8000a90:	440b      	add	r3, r1
 8000a92:	3302      	adds	r3, #2
 8000a94:	4602      	mov	r2, r0
 8000a96:	701a      	strb	r2, [r3, #0]
          alarm_Info[i][5] = i;                        // Store the alarm number (slot number)
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	b2d8      	uxtb	r0, r3
 8000a9c:	4929      	ldr	r1, [pc, #164]	@ (8000b44 <main+0x670>)
 8000a9e:	68fa      	ldr	r2, [r7, #12]
 8000aa0:	4613      	mov	r3, r2
 8000aa2:	00db      	lsls	r3, r3, #3
 8000aa4:	1a9b      	subs	r3, r3, r2
 8000aa6:	440b      	add	r3, r1
 8000aa8:	3305      	adds	r3, #5
 8000aaa:	4602      	mov	r2, r0
 8000aac:	701a      	strb	r2, [r3, #0]
          alarm_Info[i][6] = alarm_get_data[i].on_off; // Store the status of the alarm (on/off)
 8000aae:	4924      	ldr	r1, [pc, #144]	@ (8000b40 <main+0x66c>)
 8000ab0:	68fa      	ldr	r2, [r7, #12]
 8000ab2:	4613      	mov	r3, r2
 8000ab4:	005b      	lsls	r3, r3, #1
 8000ab6:	4413      	add	r3, r2
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	440b      	add	r3, r1
 8000abc:	3305      	adds	r3, #5
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	491f      	ldr	r1, [pc, #124]	@ (8000b44 <main+0x670>)
 8000ac6:	68fa      	ldr	r2, [r7, #12]
 8000ac8:	4613      	mov	r3, r2
 8000aca:	00db      	lsls	r3, r3, #3
 8000acc:	1a9b      	subs	r3, r3, r2
 8000ace:	440b      	add	r3, r1
 8000ad0:	3306      	adds	r3, #6
 8000ad2:	4602      	mov	r2, r0
 8000ad4:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < alarm_slot_ptr; i++)
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	4b1a      	ldr	r3, [pc, #104]	@ (8000b48 <main+0x674>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	db9f      	blt.n	8000a28 <main+0x554>
        }
        
        // Transmit the alarm information packages to the App through UART
        for (int i = 0; i < 10; i++)            // Alarm 0 - 9
 8000ae8:	2300      	movs	r3, #0
 8000aea:	60bb      	str	r3, [r7, #8]
 8000aec:	e024      	b.n	8000b38 <main+0x664>
        {
          for (int j = 0; j < 7; j++)           // Alarm details 0 - 6 (hour, minute, day, month, year, number, status)
 8000aee:	2300      	movs	r3, #0
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	e010      	b.n	8000b16 <main+0x642>
          {
            uart_tx_data[j] = alarm_Info[i][j]; // Store the alarm information into the uart_tx_data array
 8000af4:	4913      	ldr	r1, [pc, #76]	@ (8000b44 <main+0x670>)
 8000af6:	68ba      	ldr	r2, [r7, #8]
 8000af8:	4613      	mov	r3, r2
 8000afa:	00db      	lsls	r3, r3, #3
 8000afc:	1a9b      	subs	r3, r3, r2
 8000afe:	18ca      	adds	r2, r1, r3
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4413      	add	r3, r2
 8000b04:	7819      	ldrb	r1, [r3, #0]
 8000b06:	4a11      	ldr	r2, [pc, #68]	@ (8000b4c <main+0x678>)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	460a      	mov	r2, r1
 8000b0e:	701a      	strb	r2, [r3, #0]
          for (int j = 0; j < 7; j++)           // Alarm details 0 - 6 (hour, minute, day, month, year, number, status)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	3301      	adds	r3, #1
 8000b14:	607b      	str	r3, [r7, #4]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2b06      	cmp	r3, #6
 8000b1a:	ddeb      	ble.n	8000af4 <main+0x620>
          }
          
          // Delay for 50ms to allow the UART to stabilize
          HAL_Delay(50);      
 8000b1c:	2032      	movs	r0, #50	@ 0x32
 8000b1e:	f002 f883 	bl	8002c28 <HAL_Delay>
          
          // Transmit the alarm information to the App through UART
          HAL_UART_Transmit_IT(&huart1, uart_tx_data, 7);
 8000b22:	2207      	movs	r2, #7
 8000b24:	4909      	ldr	r1, [pc, #36]	@ (8000b4c <main+0x678>)
 8000b26:	480a      	ldr	r0, [pc, #40]	@ (8000b50 <main+0x67c>)
 8000b28:	f005 f841 	bl	8005bae <HAL_UART_Transmit_IT>

          // Delay for 50ms to allow the UART to stabilize
          HAL_Delay(50);                        
 8000b2c:	2032      	movs	r0, #50	@ 0x32
 8000b2e:	f002 f87b 	bl	8002c28 <HAL_Delay>
        for (int i = 0; i < 10; i++)            // Alarm 0 - 9
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	3301      	adds	r3, #1
 8000b36:	60bb      	str	r3, [r7, #8]
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	2b09      	cmp	r3, #9
 8000b3c:	ddd7      	ble.n	8000aee <main+0x61a>
    while ((button0.int_flag || button1.int_flag || button2.int_flag || button3.int_flag || button4.int_flag))
 8000b3e:	e516      	b.n	800056e <main+0x9a>
 8000b40:	200003a8 	.word	0x200003a8
 8000b44:	20000414 	.word	0x20000414
 8000b48:	200003e4 	.word	0x200003e4
 8000b4c:	20000400 	.word	0x20000400
 8000b50:	2000050c 	.word	0x2000050c

08000b54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b094      	sub	sp, #80	@ 0x50
 8000b58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b5a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b5e:	2228      	movs	r2, #40	@ 0x28
 8000b60:	2100      	movs	r1, #0
 8000b62:	4618      	mov	r0, r3
 8000b64:	f00a f898 	bl	800ac98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b78:	1d3b      	adds	r3, r7, #4
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	605a      	str	r2, [r3, #4]
 8000b80:	609a      	str	r2, [r3, #8]
 8000b82:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b84:	2301      	movs	r3, #1
 8000b86:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b88:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b92:	2301      	movs	r3, #1
 8000b94:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b96:	2302      	movs	r3, #2
 8000b98:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b9a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b9e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ba0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000ba4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000baa:	4618      	mov	r0, r3
 8000bac:	f004 f868 	bl	8004c80 <HAL_RCC_OscConfig>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000bb6:	f001 fd7f 	bl	80026b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bba:	230f      	movs	r3, #15
 8000bbc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bc6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bca:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	2102      	movs	r1, #2
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f004 fad4 	bl	8005184 <HAL_RCC_ClockConfig>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000be2:	f001 fd69 	bl	80026b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000be6:	2302      	movs	r3, #2
 8000be8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000bea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000bee:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f004 fc54 	bl	80054a0 <HAL_RCCEx_PeriphCLKConfig>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000bfe:	f001 fd5b 	bl	80026b8 <Error_Handler>
  }
}
 8000c02:	bf00      	nop
 8000c04:	3750      	adds	r7, #80	@ 0x50
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
	...

08000c0c <Dec_To_BCD>:
  * @brief  Convert a normal decimal number to Binary Coded Decimal (BCD).
  * @param  val: Decimal number to be converted.
  * @retval uint8_t: BCD representation of the input decimal number.
  */
uint8_t Dec_To_BCD(int val)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  return (uint8_t)( (val/10*16) + (val%10) );
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	4a0e      	ldr	r2, [pc, #56]	@ (8000c50 <Dec_To_BCD+0x44>)
 8000c18:	fb82 1203 	smull	r1, r2, r2, r3
 8000c1c:	1092      	asrs	r2, r2, #2
 8000c1e:	17db      	asrs	r3, r3, #31
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	011b      	lsls	r3, r3, #4
 8000c26:	b2d8      	uxtb	r0, r3
 8000c28:	687a      	ldr	r2, [r7, #4]
 8000c2a:	4b09      	ldr	r3, [pc, #36]	@ (8000c50 <Dec_To_BCD+0x44>)
 8000c2c:	fb83 1302 	smull	r1, r3, r3, r2
 8000c30:	1099      	asrs	r1, r3, #2
 8000c32:	17d3      	asrs	r3, r2, #31
 8000c34:	1ac9      	subs	r1, r1, r3
 8000c36:	460b      	mov	r3, r1
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	440b      	add	r3, r1
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	1ad1      	subs	r1, r2, r3
 8000c40:	b2cb      	uxtb	r3, r1
 8000c42:	4403      	add	r3, r0
 8000c44:	b2db      	uxtb	r3, r3
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr
 8000c50:	66666667 	.word	0x66666667

08000c54 <BCD_To_Dec>:
  * @brief  Convert a Binary Coded Decimal (BCD) value to a normal decimal number.
  * @param  val: BCD value to be converted.
  * @retval int: Decimal representation of the input BCD value.
  */
int BCD_To_Dec(uint8_t val)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	71fb      	strb	r3, [r7, #7]
  return (int)( (val/16*10) + (val%16) );
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	091b      	lsrs	r3, r3, #4
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	461a      	mov	r2, r3
 8000c66:	4613      	mov	r3, r2
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	4413      	add	r3, r2
 8000c6c:	005b      	lsls	r3, r3, #1
 8000c6e:	461a      	mov	r2, r3
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	f003 030f 	and.w	r3, r3, #15
 8000c76:	4413      	add	r3, r2
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bc80      	pop	{r7}
 8000c80:	4770      	bx	lr
	...

08000c84 <Time_Set>:
  * @param  month: Month: 1-12
  * @param  year: Year: 0-99 (0 = 2000, 1 = 2001, ..., 99 = 2099)
  * @retval None
*/
void Time_Set (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom, uint8_t month, uint8_t year)
{
 8000c84:	b590      	push	{r4, r7, lr}
 8000c86:	b089      	sub	sp, #36	@ 0x24
 8000c88:	af04      	add	r7, sp, #16
 8000c8a:	4604      	mov	r4, r0
 8000c8c:	4608      	mov	r0, r1
 8000c8e:	4611      	mov	r1, r2
 8000c90:	461a      	mov	r2, r3
 8000c92:	4623      	mov	r3, r4
 8000c94:	71fb      	strb	r3, [r7, #7]
 8000c96:	4603      	mov	r3, r0
 8000c98:	71bb      	strb	r3, [r7, #6]
 8000c9a:	460b      	mov	r3, r1
 8000c9c:	717b      	strb	r3, [r7, #5]
 8000c9e:	4613      	mov	r3, r2
 8000ca0:	713b      	strb	r3, [r7, #4]
	// A blank array (7 slots) to contain the time values
  uint8_t setTime[7];

  // Store the time values (converted in to BCD code) into the blank array
	setTime[0] = Dec_To_BCD(sec);
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff ffb1 	bl	8000c0c <Dec_To_BCD>
 8000caa:	4603      	mov	r3, r0
 8000cac:	723b      	strb	r3, [r7, #8]
	setTime[1] = Dec_To_BCD(min);
 8000cae:	79bb      	ldrb	r3, [r7, #6]
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff ffab 	bl	8000c0c <Dec_To_BCD>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	727b      	strb	r3, [r7, #9]
	setTime[2] = Dec_To_BCD(hour);
 8000cba:	797b      	ldrb	r3, [r7, #5]
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff ffa5 	bl	8000c0c <Dec_To_BCD>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	72bb      	strb	r3, [r7, #10]
	setTime[3] = Dec_To_BCD(dow);
 8000cc6:	793b      	ldrb	r3, [r7, #4]
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff ff9f 	bl	8000c0c <Dec_To_BCD>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	72fb      	strb	r3, [r7, #11]
	setTime[4] = Dec_To_BCD(dom);
 8000cd2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff ff98 	bl	8000c0c <Dec_To_BCD>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	733b      	strb	r3, [r7, #12]
	setTime[5] = Dec_To_BCD(month);
 8000ce0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff ff91 	bl	8000c0c <Dec_To_BCD>
 8000cea:	4603      	mov	r3, r0
 8000cec:	737b      	strb	r3, [r7, #13]
	setTime[6] = Dec_To_BCD(year);
 8000cee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff ff8a 	bl	8000c0c <Dec_To_BCD>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	73bb      	strb	r3, [r7, #14]

  // Send the array containing the time values to the RTC module through I2C interface at address 00h - 06h (size of value: 7 bytes)
  // HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
  //    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);	
  HAL_I2C_Mem_Write(DS3231_I2C, DS3231_ADDR, 0x00, 1, setTime, sizeof(setTime), 1000);
 8000cfc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d00:	9302      	str	r3, [sp, #8]
 8000d02:	2307      	movs	r3, #7
 8000d04:	9301      	str	r3, [sp, #4]
 8000d06:	f107 0308 	add.w	r3, r7, #8
 8000d0a:	9300      	str	r3, [sp, #0]
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	2200      	movs	r2, #0
 8000d10:	21d0      	movs	r1, #208	@ 0xd0
 8000d12:	4805      	ldr	r0, [pc, #20]	@ (8000d28 <Time_Set+0xa4>)
 8000d14:	f003 f892 	bl	8003e3c <HAL_I2C_Mem_Write>

  // Delay for 1ms to allow the RTC module to process the data
  HAL_Delay(1);
 8000d18:	2001      	movs	r0, #1
 8000d1a:	f001 ff85 	bl	8002c28 <HAL_Delay>
}
 8000d1e:	bf00      	nop
 8000d20:	3714      	adds	r7, #20
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd90      	pop	{r4, r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000334 	.word	0x20000334

08000d2c <Time_Get>:
  * @brief  Get time from the RTC module through I2C interface.
  * @param  time_get_data: Pointer to a TIME structure to store the retrieved time values.
  * @retval None
*/
void Time_Get (volatile TIME_DATA *time_get_data)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b088      	sub	sp, #32
 8000d30:	af04      	add	r7, sp, #16
 8000d32:	6078      	str	r0, [r7, #4]
  uint8_t getTime[7];

  // Receive the time values from the RTC module through I2C interface, then store them into the blank array (size of value: 7 bytes)
  // HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
  //    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);  
  HAL_I2C_Mem_Read(DS3231_I2C, DS3231_ADDR, 0x00, 1, getTime, sizeof(getTime), 1000);
 8000d34:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d38:	9302      	str	r3, [sp, #8]
 8000d3a:	2307      	movs	r3, #7
 8000d3c:	9301      	str	r3, [sp, #4]
 8000d3e:	f107 0308 	add.w	r3, r7, #8
 8000d42:	9300      	str	r3, [sp, #0]
 8000d44:	2301      	movs	r3, #1
 8000d46:	2200      	movs	r2, #0
 8000d48:	21d0      	movs	r1, #208	@ 0xd0
 8000d4a:	4821      	ldr	r0, [pc, #132]	@ (8000dd0 <Time_Get+0xa4>)
 8000d4c:	f003 f970 	bl	8004030 <HAL_I2C_Mem_Read>

  // Delay for 1ms to allow the RTC module to process the data
  HAL_Delay(1);
 8000d50:	2001      	movs	r0, #1
 8000d52:	f001 ff69 	bl	8002c28 <HAL_Delay>

  // Store the time values (converted from BCD code to decimal) into the time variable
	time_get_data->second       = BCD_To_Dec(getTime[0]);
 8000d56:	7a3b      	ldrb	r3, [r7, #8]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff ff7b 	bl	8000c54 <BCD_To_Dec>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	b2da      	uxtb	r2, r3
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	701a      	strb	r2, [r3, #0]
	time_get_data->minute       = BCD_To_Dec(getTime[1]);
 8000d66:	7a7b      	ldrb	r3, [r7, #9]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff ff73 	bl	8000c54 <BCD_To_Dec>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	b2da      	uxtb	r2, r3
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	705a      	strb	r2, [r3, #1]
	time_get_data->hour         = BCD_To_Dec(getTime[2]);
 8000d76:	7abb      	ldrb	r3, [r7, #10]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff ff6b 	bl	8000c54 <BCD_To_Dec>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	b2da      	uxtb	r2, r3
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	709a      	strb	r2, [r3, #2]
	time_get_data->dayofweek    = BCD_To_Dec(getTime[3]);
 8000d86:	7afb      	ldrb	r3, [r7, #11]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff ff63 	bl	8000c54 <BCD_To_Dec>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	b2da      	uxtb	r2, r3
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	70da      	strb	r2, [r3, #3]
	time_get_data->dateofmonth  = BCD_To_Dec(getTime[4]);
 8000d96:	7b3b      	ldrb	r3, [r7, #12]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff ff5b 	bl	8000c54 <BCD_To_Dec>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	711a      	strb	r2, [r3, #4]
	time_get_data->month        = BCD_To_Dec(getTime[5]);
 8000da6:	7b7b      	ldrb	r3, [r7, #13]
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff ff53 	bl	8000c54 <BCD_To_Dec>
 8000dae:	4603      	mov	r3, r0
 8000db0:	b2da      	uxtb	r2, r3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	715a      	strb	r2, [r3, #5]
	time_get_data->year         = BCD_To_Dec(getTime[6]);
 8000db6:	7bbb      	ldrb	r3, [r7, #14]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff ff4b 	bl	8000c54 <BCD_To_Dec>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	b2da      	uxtb	r2, r3
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	719a      	strb	r2, [r3, #6]
}
 8000dc6:	bf00      	nop
 8000dc8:	3710      	adds	r7, #16
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	20000334 	.word	0x20000334

08000dd4 <Time_Ctrl>:
  * @param  dow_dom: Day of the week or date of the month (1-7 or 1-31).
  * @param  dy_dt: Day of week or date of month (1 = day of week, 0 = date of month, 0 = not used).
  * @retval None
*/
void Time_Ctrl (uint8_t mode, uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow_dom, bool dy_dt)
{
 8000dd4:	b590      	push	{r4, r7, lr}
 8000dd6:	b08b      	sub	sp, #44	@ 0x2c
 8000dd8:	af04      	add	r7, sp, #16
 8000dda:	4604      	mov	r4, r0
 8000ddc:	4608      	mov	r0, r1
 8000dde:	4611      	mov	r1, r2
 8000de0:	461a      	mov	r2, r3
 8000de2:	4623      	mov	r3, r4
 8000de4:	71fb      	strb	r3, [r7, #7]
 8000de6:	4603      	mov	r3, r0
 8000de8:	71bb      	strb	r3, [r7, #6]
 8000dea:	460b      	mov	r3, r1
 8000dec:	717b      	strb	r3, [r7, #5]
 8000dee:	4613      	mov	r3, r2
 8000df0:	713b      	strb	r3, [r7, #4]
  // A blank array (4 slots) to contain the RTC alarm settings
  uint8_t ctrlTime[4];

  // A mask bit to set the Control register in the RTC module
  //    Address 0Eh: A1IE = 1
  uint8_t ctrlAlarm = 1; 
 8000df2:	2301      	movs	r3, #1
 8000df4:	73fb      	strb	r3, [r7, #15]

  // A mask bit to set the alarm modes (Bit 7) in the RTC module
  uint8_t maskBit = 128;
 8000df6:	2380      	movs	r3, #128	@ 0x80
 8000df8:	75fb      	strb	r3, [r7, #23]

  // A mask bit for selection of [day of week] or [date of month] (Bit 6) in the RTC module
  //    If the input [day of week]/ [date of month] selection is 1, the mask bit will be 64.
  uint8_t dyDt = (dy_dt == true) ? 64 : 0;
 8000dfa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <Time_Ctrl+0x32>
 8000e02:	2340      	movs	r3, #64	@ 0x40
 8000e04:	e000      	b.n	8000e08 <Time_Ctrl+0x34>
 8000e06:	2300      	movs	r3, #0
 8000e08:	75bb      	strb	r3, [r7, #22]

  // Store the RTC alarm time settings (converted into BCD code) into the blank array
  ctrlTime[0] = Dec_To_BCD(sec);
 8000e0a:	79bb      	ldrb	r3, [r7, #6]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff fefd 	bl	8000c0c <Dec_To_BCD>
 8000e12:	4603      	mov	r3, r0
 8000e14:	743b      	strb	r3, [r7, #16]
	ctrlTime[1] = Dec_To_BCD(min);
 8000e16:	797b      	ldrb	r3, [r7, #5]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff fef7 	bl	8000c0c <Dec_To_BCD>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	747b      	strb	r3, [r7, #17]
	ctrlTime[2] = Dec_To_BCD(hour);
 8000e22:	793b      	ldrb	r3, [r7, #4]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff fef1 	bl	8000c0c <Dec_To_BCD>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	74bb      	strb	r3, [r7, #18]
	ctrlTime[3] = Dec_To_BCD(dow_dom);
 8000e2e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff feea 	bl	8000c0c <Dec_To_BCD>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	74fb      	strb	r3, [r7, #19]
  //      1    : Alarm when seconds match
  //      2    : Alarm when minutes and seconds match
  //      3    : Alarm when hours, minutes, and seconds match
  //      4    : Alarm when date, hours, minutes, and seconds match
  //      5    : Alarm when day, hours, minutes, and seconds match
  switch (mode)
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	2b05      	cmp	r3, #5
 8000e40:	d865      	bhi.n	8000f0e <Time_Ctrl+0x13a>
 8000e42:	a201      	add	r2, pc, #4	@ (adr r2, 8000e48 <Time_Ctrl+0x74>)
 8000e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e48:	08000e61 	.word	0x08000e61
 8000e4c:	08000e8b 	.word	0x08000e8b
 8000e50:	08000eaf 	.word	0x08000eaf
 8000e54:	08000ecd 	.word	0x08000ecd
 8000e58:	08000ee5 	.word	0x08000ee5
 8000e5c:	08000ef7 	.word	0x08000ef7
  {
    case 0:
      // Alarm mask bit: A1M4:A1M1 = b1111, DY/DT = X
      ctrlTime[0] += maskBit;
 8000e60:	7c3a      	ldrb	r2, [r7, #16]
 8000e62:	7dfb      	ldrb	r3, [r7, #23]
 8000e64:	4413      	add	r3, r2
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	743b      	strb	r3, [r7, #16]
      ctrlTime[1] += maskBit;
 8000e6a:	7c7a      	ldrb	r2, [r7, #17]
 8000e6c:	7dfb      	ldrb	r3, [r7, #23]
 8000e6e:	4413      	add	r3, r2
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	747b      	strb	r3, [r7, #17]
      ctrlTime[2] += maskBit;
 8000e74:	7cba      	ldrb	r2, [r7, #18]
 8000e76:	7dfb      	ldrb	r3, [r7, #23]
 8000e78:	4413      	add	r3, r2
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	74bb      	strb	r3, [r7, #18]
      ctrlTime[3] += maskBit;
 8000e7e:	7cfa      	ldrb	r2, [r7, #19]
 8000e80:	7dfb      	ldrb	r3, [r7, #23]
 8000e82:	4413      	add	r3, r2
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	74fb      	strb	r3, [r7, #19]
      break;
 8000e88:	e04a      	b.n	8000f20 <Time_Ctrl+0x14c>
    case 1:
      // Alarm mask bit: A1M4:A1M1 = b1110, DY/DT = X
      ctrlTime[0] += 0;
 8000e8a:	7c3b      	ldrb	r3, [r7, #16]
 8000e8c:	743b      	strb	r3, [r7, #16]
      ctrlTime[1] += maskBit;
 8000e8e:	7c7a      	ldrb	r2, [r7, #17]
 8000e90:	7dfb      	ldrb	r3, [r7, #23]
 8000e92:	4413      	add	r3, r2
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	747b      	strb	r3, [r7, #17]
      ctrlTime[2] += maskBit;
 8000e98:	7cba      	ldrb	r2, [r7, #18]
 8000e9a:	7dfb      	ldrb	r3, [r7, #23]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	74bb      	strb	r3, [r7, #18]
      ctrlTime[3] += maskBit;
 8000ea2:	7cfa      	ldrb	r2, [r7, #19]
 8000ea4:	7dfb      	ldrb	r3, [r7, #23]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	74fb      	strb	r3, [r7, #19]
      break;
 8000eac:	e038      	b.n	8000f20 <Time_Ctrl+0x14c>
    case 2:
      // Alarm mask bit: A1M4:A1M1 = b1100, DY/DT = X
      ctrlTime[0] += 0;
 8000eae:	7c3b      	ldrb	r3, [r7, #16]
 8000eb0:	743b      	strb	r3, [r7, #16]
      ctrlTime[1] += 0;
 8000eb2:	7c7b      	ldrb	r3, [r7, #17]
 8000eb4:	747b      	strb	r3, [r7, #17]
      ctrlTime[2] += maskBit;
 8000eb6:	7cba      	ldrb	r2, [r7, #18]
 8000eb8:	7dfb      	ldrb	r3, [r7, #23]
 8000eba:	4413      	add	r3, r2
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	74bb      	strb	r3, [r7, #18]
      ctrlTime[3] += maskBit;
 8000ec0:	7cfa      	ldrb	r2, [r7, #19]
 8000ec2:	7dfb      	ldrb	r3, [r7, #23]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	74fb      	strb	r3, [r7, #19]
      break;
 8000eca:	e029      	b.n	8000f20 <Time_Ctrl+0x14c>
    case 3:
      // Alarm mask bit: A1M4:A1M1 = b1000, DY/DT = X
      ctrlTime[0] += 0;
 8000ecc:	7c3b      	ldrb	r3, [r7, #16]
 8000ece:	743b      	strb	r3, [r7, #16]
      ctrlTime[1] += 0;
 8000ed0:	7c7b      	ldrb	r3, [r7, #17]
 8000ed2:	747b      	strb	r3, [r7, #17]
      ctrlTime[2] += 0;
 8000ed4:	7cbb      	ldrb	r3, [r7, #18]
 8000ed6:	74bb      	strb	r3, [r7, #18]
      ctrlTime[3] += maskBit;
 8000ed8:	7cfa      	ldrb	r2, [r7, #19]
 8000eda:	7dfb      	ldrb	r3, [r7, #23]
 8000edc:	4413      	add	r3, r2
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	74fb      	strb	r3, [r7, #19]
      break;
 8000ee2:	e01d      	b.n	8000f20 <Time_Ctrl+0x14c>
    case 4:
      // Alarm mask bit: A1M4:A1M1 = b0000, DY/DT = 0
      ctrlTime[0] += 0;
 8000ee4:	7c3b      	ldrb	r3, [r7, #16]
 8000ee6:	743b      	strb	r3, [r7, #16]
      ctrlTime[1] += 0;
 8000ee8:	7c7b      	ldrb	r3, [r7, #17]
 8000eea:	747b      	strb	r3, [r7, #17]
      ctrlTime[2] += 0;
 8000eec:	7cbb      	ldrb	r3, [r7, #18]
 8000eee:	74bb      	strb	r3, [r7, #18]
      ctrlTime[3] += 0;
 8000ef0:	7cfb      	ldrb	r3, [r7, #19]
 8000ef2:	74fb      	strb	r3, [r7, #19]
      break;
 8000ef4:	e014      	b.n	8000f20 <Time_Ctrl+0x14c>
    case 5:
      // Alarm mask bit: A1M4:A1M1 = b0000, DY/DT = 1
      ctrlTime[0] += 0;
 8000ef6:	7c3b      	ldrb	r3, [r7, #16]
 8000ef8:	743b      	strb	r3, [r7, #16]
      ctrlTime[1] += 0;
 8000efa:	7c7b      	ldrb	r3, [r7, #17]
 8000efc:	747b      	strb	r3, [r7, #17]
      ctrlTime[2] += 0;
 8000efe:	7cbb      	ldrb	r3, [r7, #18]
 8000f00:	74bb      	strb	r3, [r7, #18]
      ctrlTime[3] += dyDt;
 8000f02:	7cfa      	ldrb	r2, [r7, #19]
 8000f04:	7dbb      	ldrb	r3, [r7, #22]
 8000f06:	4413      	add	r3, r2
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	74fb      	strb	r3, [r7, #19]
      break;
 8000f0c:	e008      	b.n	8000f20 <Time_Ctrl+0x14c>
    default:
      // Alarm mask bit: A1M4:A1M1 = b0000, DY/DT = 0
      ctrlTime[0] += 0;
 8000f0e:	7c3b      	ldrb	r3, [r7, #16]
 8000f10:	743b      	strb	r3, [r7, #16]
      ctrlTime[1] += 0;
 8000f12:	7c7b      	ldrb	r3, [r7, #17]
 8000f14:	747b      	strb	r3, [r7, #17]
      ctrlTime[2] += 0;
 8000f16:	7cbb      	ldrb	r3, [r7, #18]
 8000f18:	74bb      	strb	r3, [r7, #18]
      ctrlTime[3] += 0;
 8000f1a:	7cfb      	ldrb	r3, [r7, #19]
 8000f1c:	74fb      	strb	r3, [r7, #19]
      break;
 8000f1e:	bf00      	nop
  }

  // Send the array containing the RTC alarm mode setting to the RTC module through I2C interface at address 07h - 0Ah (size of value: 4 bytes)
  // HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
  //    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);	  
  HAL_I2C_Mem_Write(DS3231_I2C, DS3231_ADDR, 0x07, 1, ctrlTime, sizeof(ctrlTime), 1000);
 8000f20:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f24:	9302      	str	r3, [sp, #8]
 8000f26:	2304      	movs	r3, #4
 8000f28:	9301      	str	r3, [sp, #4]
 8000f2a:	f107 0310 	add.w	r3, r7, #16
 8000f2e:	9300      	str	r3, [sp, #0]
 8000f30:	2301      	movs	r3, #1
 8000f32:	2207      	movs	r2, #7
 8000f34:	21d0      	movs	r1, #208	@ 0xd0
 8000f36:	480d      	ldr	r0, [pc, #52]	@ (8000f6c <Time_Ctrl+0x198>)
 8000f38:	f002 ff80 	bl	8003e3c <HAL_I2C_Mem_Write>

  // Delay for 1ms to allow the RTC module to process the data
  HAL_Delay(1);
 8000f3c:	2001      	movs	r0, #1
 8000f3e:	f001 fe73 	bl	8002c28 <HAL_Delay>

  // Send the alarm control mask bits to the RTC module through I2C interface at address 0Eh (size of value: 1 byte)
  // HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
  //    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);	  
  HAL_I2C_Mem_Write(DS3231_I2C, DS3231_ADDR, 0x0E, 1, &ctrlAlarm, sizeof(ctrlAlarm), 1000);
 8000f42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f46:	9302      	str	r3, [sp, #8]
 8000f48:	2301      	movs	r3, #1
 8000f4a:	9301      	str	r3, [sp, #4]
 8000f4c:	f107 030f 	add.w	r3, r7, #15
 8000f50:	9300      	str	r3, [sp, #0]
 8000f52:	2301      	movs	r3, #1
 8000f54:	220e      	movs	r2, #14
 8000f56:	21d0      	movs	r1, #208	@ 0xd0
 8000f58:	4804      	ldr	r0, [pc, #16]	@ (8000f6c <Time_Ctrl+0x198>)
 8000f5a:	f002 ff6f 	bl	8003e3c <HAL_I2C_Mem_Write>

  // Delay for 1ms to allow the RTC module to process the data
  HAL_Delay(1);
 8000f5e:	2001      	movs	r0, #1
 8000f60:	f001 fe62 	bl	8002c28 <HAL_Delay>
}
 8000f64:	bf00      	nop
 8000f66:	371c      	adds	r7, #28
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd90      	pop	{r4, r7, pc}
 8000f6c:	20000334 	.word	0x20000334

08000f70 <Time_Init>:
  * @param  month: Month: 1-12
  * @param  year: Year: 0-99 (0 = 2000, 1 = 2001, ..., 99 = 2099)
  * @retval None
*/
void Time_Init (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom, uint8_t month, uint8_t year)
{
 8000f70:	b590      	push	{r4, r7, lr}
 8000f72:	b087      	sub	sp, #28
 8000f74:	af04      	add	r7, sp, #16
 8000f76:	4604      	mov	r4, r0
 8000f78:	4608      	mov	r0, r1
 8000f7a:	4611      	mov	r1, r2
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	4623      	mov	r3, r4
 8000f80:	71fb      	strb	r3, [r7, #7]
 8000f82:	4603      	mov	r3, r0
 8000f84:	71bb      	strb	r3, [r7, #6]
 8000f86:	460b      	mov	r3, r1
 8000f88:	717b      	strb	r3, [r7, #5]
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	713b      	strb	r3, [r7, #4]
  // This function is intended for initial setup of the RTC module after a reset.
  // It should not be called repeatedly unless reinitialization is required.
  //    Time_Set (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom, uint8_t month, uint8_t year)
  Time_Set (sec, min, hour, dow, dom, month, year);
 8000f8e:	793c      	ldrb	r4, [r7, #4]
 8000f90:	797a      	ldrb	r2, [r7, #5]
 8000f92:	79b9      	ldrb	r1, [r7, #6]
 8000f94:	79f8      	ldrb	r0, [r7, #7]
 8000f96:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f9a:	9302      	str	r3, [sp, #8]
 8000f9c:	7f3b      	ldrb	r3, [r7, #28]
 8000f9e:	9301      	str	r3, [sp, #4]
 8000fa0:	7e3b      	ldrb	r3, [r7, #24]
 8000fa2:	9300      	str	r3, [sp, #0]
 8000fa4:	4623      	mov	r3, r4
 8000fa6:	f7ff fe6d 	bl	8000c84 <Time_Set>
  //        2    : Alarm when minutes and seconds match
  //        3    : Alarm when hours, minutes, and seconds match
  //        4    : Alarm when date, hours, minutes, and seconds match
  //        5    : Alarm when day, hours, minutes, and seconds match
  //      For mode 0, the remaining input are don't-care values
  Time_Ctrl 
 8000faa:	2300      	movs	r3, #0
 8000fac:	9301      	str	r3, [sp, #4]
 8000fae:	2300      	movs	r3, #0
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	2000      	movs	r0, #0
 8000fba:	f7ff ff0b 	bl	8000dd4 <Time_Ctrl>
     0, // Minutes: 0-59
     0, // Hours: 0-23
     0, // Day of the week: 1-7 (1 = Sunday, 2 = Monday, ..., 7 = Saturday), or Date of the month: 1-31
     0  // Select: 1 = day of week, 0 = date of month
  );   
}
 8000fbe:	bf00      	nop
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd90      	pop	{r4, r7, pc}
	...

08000fc8 <Alarm_Set>:
  * @param  on_off: On/ Off state of the alarm (1 = ON, 0 = OFF)
  * @param  slot: Slot number of the alarm in the EEPROM module (0-9)
  * @retval None
*/
void Alarm_Set (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow_dom, ALARM_DY_DT_MODE dy_dt, bool on_off, uint8_t slot)
{
 8000fc8:	b590      	push	{r4, r7, lr}
 8000fca:	b089      	sub	sp, #36	@ 0x24
 8000fcc:	af04      	add	r7, sp, #16
 8000fce:	4604      	mov	r4, r0
 8000fd0:	4608      	mov	r0, r1
 8000fd2:	4611      	mov	r1, r2
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4623      	mov	r3, r4
 8000fd8:	71fb      	strb	r3, [r7, #7]
 8000fda:	4603      	mov	r3, r0
 8000fdc:	71bb      	strb	r3, [r7, #6]
 8000fde:	460b      	mov	r3, r1
 8000fe0:	717b      	strb	r3, [r7, #5]
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	713b      	strb	r3, [r7, #4]
 
  // Add an ON/OFF (1 bit) signal into the alarm package by using the MSB of the second register
  if (on_off)
 8000fe6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d002      	beq.n	8000ff4 <Alarm_Set+0x2c>
  {
    sec += (1 << 7);
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	3b80      	subs	r3, #128	@ 0x80
 8000ff2:	71fb      	strb	r3, [r7, #7]
  }

  // Add a [day of week] or [date of month] (1 bit) signal into the alarm package by using bit 6 of the dow_dom register
  switch (dy_dt)
 8000ff4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ff8:	2b02      	cmp	r3, #2
 8000ffa:	d00d      	beq.n	8001018 <Alarm_Set+0x50>
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	dc0d      	bgt.n	800101c <Alarm_Set+0x54>
 8001000:	2b00      	cmp	r3, #0
 8001002:	d005      	beq.n	8001010 <Alarm_Set+0x48>
 8001004:	2b01      	cmp	r3, #1
 8001006:	d109      	bne.n	800101c <Alarm_Set+0x54>
  {
    // Date of the month
    case DATE_OF_MONTH_MODE:
      // Decoding: [Bit 7] = 1, [Bit 6] = 0
      dow_dom += (1 << 7);
 8001008:	793b      	ldrb	r3, [r7, #4]
 800100a:	3b80      	subs	r3, #128	@ 0x80
 800100c:	713b      	strb	r3, [r7, #4]
      break;
 800100e:	e006      	b.n	800101e <Alarm_Set+0x56>

    // Day of the week
    case DAY_OF_WEEK_MODE:
      // Decoding: [Bit 7] = 1, [Bit 6] = 1
      dow_dom += ((1 << 7) | (1 << 6));
 8001010:	793b      	ldrb	r3, [r7, #4]
 8001012:	3b40      	subs	r3, #64	@ 0x40
 8001014:	713b      	strb	r3, [r7, #4]
      break;
 8001016:	e002      	b.n	800101e <Alarm_Set+0x56>

    // Not used
    case NOT_USED_MODE:
      // Decoding: [Bit 7] = 0, [Bit 6] = 0
      dow_dom += 0;
      break;
 8001018:	bf00      	nop
 800101a:	e000      	b.n	800101e <Alarm_Set+0x56>

    default:
      dow_dom += 0;
      break;
 800101c:	bf00      	nop
  }


  // Store the alarm values into the blank array
  uint8_t setAlarm[4] = {sec, min, hour, dow_dom};
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	723b      	strb	r3, [r7, #8]
 8001022:	79bb      	ldrb	r3, [r7, #6]
 8001024:	727b      	strb	r3, [r7, #9]
 8001026:	797b      	ldrb	r3, [r7, #5]
 8001028:	72bb      	strb	r3, [r7, #10]
 800102a:	793b      	ldrb	r3, [r7, #4]
 800102c:	72fb      	strb	r3, [r7, #11]

  // HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
  //    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);
  uint16_t address = slot * 4;
 800102e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001032:	b29b      	uxth	r3, r3
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	81fb      	strh	r3, [r7, #14]

  HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, address, 2, setAlarm, sizeof(setAlarm), 1000);
 8001038:	89fa      	ldrh	r2, [r7, #14]
 800103a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800103e:	9302      	str	r3, [sp, #8]
 8001040:	2304      	movs	r3, #4
 8001042:	9301      	str	r3, [sp, #4]
 8001044:	f107 0308 	add.w	r3, r7, #8
 8001048:	9300      	str	r3, [sp, #0]
 800104a:	2302      	movs	r3, #2
 800104c:	21a0      	movs	r1, #160	@ 0xa0
 800104e:	4805      	ldr	r0, [pc, #20]	@ (8001064 <Alarm_Set+0x9c>)
 8001050:	f002 fef4 	bl	8003e3c <HAL_I2C_Mem_Write>

  // Delay to allow the EEPROM module to complete the Page Write operation
  HAL_Delay(5);
 8001054:	2005      	movs	r0, #5
 8001056:	f001 fde7 	bl	8002c28 <HAL_Delay>
}
 800105a:	bf00      	nop
 800105c:	3714      	adds	r7, #20
 800105e:	46bd      	mov	sp, r7
 8001060:	bd90      	pop	{r4, r7, pc}
 8001062:	bf00      	nop
 8001064:	20000334 	.word	0x20000334

08001068 <Alarm_Get>:
  * @param  slot: Slot number of the alarm in the EEPROM module (0-9)
  * @param  alarm_get_data: Pointer to an ALARM_DATA structure to store the retrieved alarm values
  * @retval None
*/
void Alarm_Get (uint8_t slot, volatile ALARM_DATA *alarm_get_data)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b088      	sub	sp, #32
 800106c:	af04      	add	r7, sp, #16
 800106e:	4603      	mov	r3, r0
 8001070:	6039      	str	r1, [r7, #0]
 8001072:	71fb      	strb	r3, [r7, #7]
  // Address of the alarm in the EEPROM module (0-8192, or 13 bits)
  uint16_t address = slot * 4;
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	b29b      	uxth	r3, r3
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	81fb      	strh	r3, [r7, #14]
  // A blank array (4 slots) to contain the alarm values received from the EEPROM module
  uint8_t getAlarm[4];

  // HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
  //    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);
  HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, address, 2, getAlarm, sizeof(getAlarm), 1000);
 800107c:	89fa      	ldrh	r2, [r7, #14]
 800107e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001082:	9302      	str	r3, [sp, #8]
 8001084:	2304      	movs	r3, #4
 8001086:	9301      	str	r3, [sp, #4]
 8001088:	f107 0308 	add.w	r3, r7, #8
 800108c:	9300      	str	r3, [sp, #0]
 800108e:	2302      	movs	r3, #2
 8001090:	21a0      	movs	r1, #160	@ 0xa0
 8001092:	481f      	ldr	r0, [pc, #124]	@ (8001110 <Alarm_Get+0xa8>)
 8001094:	f002 ffcc 	bl	8004030 <HAL_I2C_Mem_Read>
  //     +  8 [Device Address Byte]     + 1 [ACK from Client]      +
  //     + {8 [1st Data Word]           + 1 [ACK from Client]} * 4 + 
  //     +  1 [Stop Condition by Host] 
  //     =  75 cycles
  //    Neccesary delay time = 75 cycles / 400 kHz = 187.5 us = ~ 0.19 ms
  HAL_Delay(1);
 8001098:	2001      	movs	r0, #1
 800109a:	f001 fdc5 	bl	8002c28 <HAL_Delay>

  // Store the alarm values into the alarm variable
  alarm_get_data->second = 0;
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	2200      	movs	r2, #0
 80010a2:	701a      	strb	r2, [r3, #0]
  alarm_get_data->minute = getAlarm[1];
 80010a4:	7a7a      	ldrb	r2, [r7, #9]
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	705a      	strb	r2, [r3, #1]
  alarm_get_data->hour = getAlarm[2];
 80010aa:	7aba      	ldrb	r2, [r7, #10]
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	709a      	strb	r2, [r3, #2]
  
  if (getAlarm[3] >= (1 << 7))
 80010b0:	7afb      	ldrb	r3, [r7, #11]
 80010b2:	b25b      	sxtb	r3, r3
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	da18      	bge.n	80010ea <Alarm_Get+0x82>
  {
    if ((getAlarm[3] & 0x7F) >= (1 << 6))
 80010b8:	7afb      	ldrb	r3, [r7, #11]
 80010ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d009      	beq.n	80010d6 <Alarm_Get+0x6e>
    {
      alarm_get_data->dy_dt = DAY_OF_WEEK_MODE;
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	2200      	movs	r2, #0
 80010c6:	70da      	strb	r2, [r3, #3]
      alarm_get_data->dow_dom = getAlarm[3] & 0x3F;
 80010c8:	7afb      	ldrb	r3, [r7, #11]
 80010ca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80010ce:	b2da      	uxtb	r2, r3
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	711a      	strb	r2, [r3, #4]
 80010d4:	e00c      	b.n	80010f0 <Alarm_Get+0x88>
    }
    else 
    {
      alarm_get_data->dy_dt = DATE_OF_MONTH_MODE;
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	2201      	movs	r2, #1
 80010da:	70da      	strb	r2, [r3, #3]
      alarm_get_data->dow_dom = getAlarm[3] & 0x7F;
 80010dc:	7afb      	ldrb	r3, [r7, #11]
 80010de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	711a      	strb	r2, [r3, #4]
 80010e8:	e002      	b.n	80010f0 <Alarm_Get+0x88>
    }
  }
  else alarm_get_data->dy_dt = NOT_USED_MODE;
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	2202      	movs	r2, #2
 80010ee:	70da      	strb	r2, [r3, #3]

  if (getAlarm[0] >= (1 << 7)) alarm_get_data->on_off = true;
 80010f0:	7a3b      	ldrb	r3, [r7, #8]
 80010f2:	b25b      	sxtb	r3, r3
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	da03      	bge.n	8001100 <Alarm_Get+0x98>
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	2201      	movs	r2, #1
 80010fc:	715a      	strb	r2, [r3, #5]
  else alarm_get_data->on_off = false;
}
 80010fe:	e002      	b.n	8001106 <Alarm_Get+0x9e>
  else alarm_get_data->on_off = false;
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	2200      	movs	r2, #0
 8001104:	715a      	strb	r2, [r3, #5]
}
 8001106:	bf00      	nop
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000334 	.word	0x20000334

08001114 <Alarm_Clear>:
  * @brief  Clear a single alarm from the EEPROM module.
  * @param  slot: Slot number of the alarm in the EEPROM module (0-9)
  * @retval None
*/
void Alarm_Clear (uint8_t slot)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b088      	sub	sp, #32
 8001118:	af04      	add	r7, sp, #16
 800111a:	4603      	mov	r3, r0
 800111c:	71fb      	strb	r3, [r7, #7]
  // Address of the alarm in the EEPROM module (0-8192, or 13 bits)
  uint16_t address = slot * 4;
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	b29b      	uxth	r3, r3
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	81fb      	strh	r3, [r7, #14]

  // A blank array (4 slots) to contain the alarm values to be cleared
  uint8_t clearAlarm[4] = {0, 0, 0, 0};
 8001126:	2300      	movs	r3, #0
 8001128:	60bb      	str	r3, [r7, #8]

  // HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
  //    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);
  HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, address, 2, clearAlarm, sizeof(clearAlarm), 1000);
 800112a:	89fa      	ldrh	r2, [r7, #14]
 800112c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001130:	9302      	str	r3, [sp, #8]
 8001132:	2304      	movs	r3, #4
 8001134:	9301      	str	r3, [sp, #4]
 8001136:	f107 0308 	add.w	r3, r7, #8
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	2302      	movs	r3, #2
 800113e:	21a0      	movs	r1, #160	@ 0xa0
 8001140:	4804      	ldr	r0, [pc, #16]	@ (8001154 <Alarm_Clear+0x40>)
 8001142:	f002 fe7b 	bl	8003e3c <HAL_I2C_Mem_Write>
  //     +  8 [2nd Word Address Byte]   + 1 [ACK from Client]      +
  //     + {8 [1st Data Word]           + 1 [ACK from Client]} * 4 + 
  //     +  1 [Stop Condition by Host] 
  //     =  65 cycles  
  //    Neccesary delay time = 65 cycles / 400 kHz = 162.5 us = ~ 0.17 ms
  HAL_Delay(5);
 8001146:	2005      	movs	r0, #5
 8001148:	f001 fd6e 	bl	8002c28 <HAL_Delay>
}
 800114c:	bf00      	nop
 800114e:	3710      	adds	r7, #16
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000334 	.word	0x20000334

08001158 <Alarm_Slot_Pointer_Set>:
/**
 * @brief Save the data of pointer for the alarm slot to EEPROM module.
  * @retval None
 */
void Alarm_Slot_Pointer_Set (void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af04      	add	r7, sp, #16
  // HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
  //    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);
  HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, ALARM_SLOT_PTR_ADDR, 2, &alarm_slot_ptr, sizeof(alarm_slot_ptr), 1000);
 800115e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001162:	9302      	str	r3, [sp, #8]
 8001164:	2301      	movs	r3, #1
 8001166:	9301      	str	r3, [sp, #4]
 8001168:	4b06      	ldr	r3, [pc, #24]	@ (8001184 <Alarm_Slot_Pointer_Set+0x2c>)
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	2302      	movs	r3, #2
 800116e:	2228      	movs	r2, #40	@ 0x28
 8001170:	21a0      	movs	r1, #160	@ 0xa0
 8001172:	4805      	ldr	r0, [pc, #20]	@ (8001188 <Alarm_Slot_Pointer_Set+0x30>)
 8001174:	f002 fe62 	bl	8003e3c <HAL_I2C_Mem_Write>
  //     +  8 [2nd Word Address Byte]   + 1 [ACK from Client]  +
  //     +  8 [1st Data Word]           + 1 [ACK from Client]} + 
  //     +  1 [Stop Condition by Host] 
  //     =  38 cycles  
  //    Neccesary delay time = 65 cycles / 400 kHz = 95 us = ~ 0.01 ms
  HAL_Delay(5);
 8001178:	2005      	movs	r0, #5
 800117a:	f001 fd55 	bl	8002c28 <HAL_Delay>
}
 800117e:	bf00      	nop
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	200003e4 	.word	0x200003e4
 8001188:	20000334 	.word	0x20000334

0800118c <Alarm_Slot_Pointer_Get>:
/**
 * @brief Retrieve the data of pointer for the alarm slot from EEPROM module.
  * @retval None
 */
void Alarm_Slot_Pointer_Get (void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af04      	add	r7, sp, #16
  // HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
  //    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);
  HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, ALARM_SLOT_PTR_ADDR, 2, &alarm_slot_ptr, sizeof(alarm_slot_ptr), 1000);
 8001192:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001196:	9302      	str	r3, [sp, #8]
 8001198:	2301      	movs	r3, #1
 800119a:	9301      	str	r3, [sp, #4]
 800119c:	4b06      	ldr	r3, [pc, #24]	@ (80011b8 <Alarm_Slot_Pointer_Get+0x2c>)
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	2302      	movs	r3, #2
 80011a2:	2228      	movs	r2, #40	@ 0x28
 80011a4:	21a0      	movs	r1, #160	@ 0xa0
 80011a6:	4805      	ldr	r0, [pc, #20]	@ (80011bc <Alarm_Slot_Pointer_Get+0x30>)
 80011a8:	f002 ff42 	bl	8004030 <HAL_I2C_Mem_Read>
  //     +  8 [Device Address Byte]     + 1 [ACK from Client]  +
  //     +  8 [1st Data Word]           + 1 [ACK from Client]} + 
  //     +  1 [Stop Condition by Host] 
  //     =  48 cycles
  //    Neccesary delay time = 75 cycles / 400 kHz = 0.12 ms
  HAL_Delay(5);
 80011ac:	2005      	movs	r0, #5
 80011ae:	f001 fd3b 	bl	8002c28 <HAL_Delay>
}
 80011b2:	bf00      	nop
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	200003e4 	.word	0x200003e4
 80011bc:	20000334 	.word	0x20000334

080011c0 <Alarm_Check>:
  * @param  time_get_data: Pointer to a TIME structure to store the current time values
  * @retval None
  * @note   This function compares the current time with all alarms stored in the EEPROM module.
*/
void Alarm_Check (volatile TIME_DATA *time_get_data)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  volatile ALARM_DATA alarmCheckData = {0};
 80011c8:	f107 030c 	add.w	r3, r7, #12
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	809a      	strh	r2, [r3, #4]

  // Compare the current time with all available alarms in the EEPROM module
  for (int i = 0; i < alarm_slot_ptr; i++)
 80011d2:	2300      	movs	r3, #0
 80011d4:	617b      	str	r3, [r7, #20]
 80011d6:	e04e      	b.n	8001276 <Alarm_Check+0xb6>
  {
    // Retrieve the alarm values from the EEPROM module
    //    void Alarm_Get (uint8_t slot, ALARM_DATA *alarm_get_data)
    Alarm_Get(i, &alarmCheckData);
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	f107 020c 	add.w	r2, r7, #12
 80011e0:	4611      	mov	r1, r2
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff ff40 	bl	8001068 <Alarm_Get>

    // Check if the alarm is at ON or OFF state by checking the MSB of the second register
    if (!alarmCheckData.on_off)
 80011e8:	7c7b      	ldrb	r3, [r7, #17]
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	f083 0301 	eor.w	r3, r3, #1
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d131      	bne.n	800125a <Alarm_Check+0x9a>
      // Skip if the alarm is OFF
      continue;
    }

    // Check if the current time matches the alarm time (day of week)
    if ((alarmCheckData.dy_dt == DAY_OF_WEEK_MODE)
 80011f6:	7bfb      	ldrb	r3, [r7, #15]
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d106      	bne.n	800120c <Alarm_Check+0x4c>
    &&  (alarmCheckData.dow_dom != time_get_data->dayofweek))
 80011fe:	7c3b      	ldrb	r3, [r7, #16]
 8001200:	b2da      	uxtb	r2, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	78db      	ldrb	r3, [r3, #3]
 8001206:	b2db      	uxtb	r3, r3
 8001208:	429a      	cmp	r2, r3
 800120a:	d128      	bne.n	800125e <Alarm_Check+0x9e>
      // Skip if the current time does NOT match the alarm time (day of week)
      continue;
    }

    // Check if the current time matches the alarm time (date of month)
    if ((alarmCheckData.dy_dt == DATE_OF_MONTH_MODE)
 800120c:	7bfb      	ldrb	r3, [r7, #15]
 800120e:	b2db      	uxtb	r3, r3
 8001210:	2b01      	cmp	r3, #1
 8001212:	d106      	bne.n	8001222 <Alarm_Check+0x62>
    &&  (alarmCheckData.dow_dom != time_get_data->dateofmonth))
 8001214:	7c3b      	ldrb	r3, [r7, #16]
 8001216:	b2da      	uxtb	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	791b      	ldrb	r3, [r3, #4]
 800121c:	b2db      	uxtb	r3, r3
 800121e:	429a      	cmp	r2, r3
 8001220:	d11f      	bne.n	8001262 <Alarm_Check+0xa2>
      // Skip if the current time does NOT match the alarm time (date of month)
      continue;
    }

    // Check if the current time matches the alarm time (hour)
    if (alarmCheckData.hour != time_get_data->hour)
 8001222:	7bbb      	ldrb	r3, [r7, #14]
 8001224:	b2da      	uxtb	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	789b      	ldrb	r3, [r3, #2]
 800122a:	b2db      	uxtb	r3, r3
 800122c:	429a      	cmp	r2, r3
 800122e:	d11a      	bne.n	8001266 <Alarm_Check+0xa6>
      // Skip if the current time does NOT match the alarm time (hour)
      continue;
    }

    // Check if the current time matches the alarm time (minute)
    if (alarmCheckData.minute != time_get_data->minute)
 8001230:	7b7b      	ldrb	r3, [r7, #13]
 8001232:	b2da      	uxtb	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	785b      	ldrb	r3, [r3, #1]
 8001238:	b2db      	uxtb	r3, r3
 800123a:	429a      	cmp	r2, r3
 800123c:	d115      	bne.n	800126a <Alarm_Check+0xaa>
      // Skip if the current time does NOT match the alarm time (minute)
      continue;
    }

    // Check if the current time matches the alarm time (second)
    if (alarmCheckData.second != time_get_data->second)
 800123e:	7b3b      	ldrb	r3, [r7, #12]
 8001240:	b2da      	uxtb	r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	b2db      	uxtb	r3, r3
 8001248:	429a      	cmp	r2, r3
 800124a:	d110      	bne.n	800126e <Alarm_Check+0xae>
      // Skip if the current time does NOT match the alarm time (second)
      continue;
    }

    // If all the above checks pass, the alarm is activated
    debug_alarm_activate_ctr++;
 800124c:	4b0f      	ldr	r3, [pc, #60]	@ (800128c <Alarm_Check+0xcc>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	3301      	adds	r3, #1
 8001252:	b2da      	uxtb	r2, r3
 8001254:	4b0d      	ldr	r3, [pc, #52]	@ (800128c <Alarm_Check+0xcc>)
 8001256:	701a      	strb	r2, [r3, #0]

    // Stop checking time matching
    // to make sure that only one alarm can be activated at a time
    break;
 8001258:	e014      	b.n	8001284 <Alarm_Check+0xc4>
      continue;
 800125a:	bf00      	nop
 800125c:	e008      	b.n	8001270 <Alarm_Check+0xb0>
      continue;
 800125e:	bf00      	nop
 8001260:	e006      	b.n	8001270 <Alarm_Check+0xb0>
      continue;
 8001262:	bf00      	nop
 8001264:	e004      	b.n	8001270 <Alarm_Check+0xb0>
      continue;
 8001266:	bf00      	nop
 8001268:	e002      	b.n	8001270 <Alarm_Check+0xb0>
      continue;
 800126a:	bf00      	nop
 800126c:	e000      	b.n	8001270 <Alarm_Check+0xb0>
      continue;
 800126e:	bf00      	nop
  for (int i = 0; i < alarm_slot_ptr; i++)
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	3301      	adds	r3, #1
 8001274:	617b      	str	r3, [r7, #20]
 8001276:	4b06      	ldr	r3, [pc, #24]	@ (8001290 <Alarm_Check+0xd0>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	461a      	mov	r2, r3
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	4293      	cmp	r3, r2
 8001280:	dbaa      	blt.n	80011d8 <Alarm_Check+0x18>
  }
}
 8001282:	bf00      	nop
 8001284:	bf00      	nop
 8001286:	3718      	adds	r7, #24
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	200003e6 	.word	0x200003e6
 8001290:	200003e4 	.word	0x200003e4

08001294 <Button_Debounce>:
//       break;
//   }
// }
// Button debounce using delay
void Button_Debounce(BUTTON_DATA *button)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  // Handle button state transitions and debounce logic
  switch (button->state)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	79db      	ldrb	r3, [r3, #7]
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d03b      	beq.n	800131c <Button_Debounce+0x88>
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	dc6c      	bgt.n	8001382 <Button_Debounce+0xee>
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d002      	beq.n	80012b2 <Button_Debounce+0x1e>
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d017      	beq.n	80012e0 <Button_Debounce+0x4c>
 80012b0:	e067      	b.n	8001382 <Button_Debounce+0xee>
  {
    // Initial state: Button is released (HIGH)
    case BUTTON_RELEASED:

      button->press_flag = false;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2200      	movs	r2, #0
 80012b6:	735a      	strb	r2, [r3, #13]
      button->hold_flag = false;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2200      	movs	r2, #0
 80012bc:	739a      	strb	r2, [r3, #14]
      button->latch = false;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2200      	movs	r2, #0
 80012c2:	73da      	strb	r2, [r3, #15]
    
      // Check if interrupt flag is set
      if (button->int_flag) 
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	7b1b      	ldrb	r3, [r3, #12]
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d069      	beq.n	80013a2 <Button_Debounce+0x10e>
      {
        // Record the start time for debounce
        button->start_tick = HAL_GetTick();
 80012ce:	f001 fca1 	bl	8002c14 <HAL_GetTick>
 80012d2:	4602      	mov	r2, r0
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	609a      	str	r2, [r3, #8]

        // Transition to waiting state
        button->state = BUTTON_WAITING;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2201      	movs	r2, #1
 80012dc:	71da      	strb	r2, [r3, #7]
      }
      break;
 80012de:	e060      	b.n	80013a2 <Button_Debounce+0x10e>

    // Waiting state: Button is pressed (LOW) but not yet confirmed
    case BUTTON_WAITING:
      // Check if debounce delay has passed
      if (HAL_GetTick() - button->start_tick >= (BUTTON_DEBOUNCE_DELAY + DISPLAY_DELAY)) 
 80012e0:	f001 fc98 	bl	8002c14 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	2b1e      	cmp	r3, #30
 80012ee:	d95a      	bls.n	80013a6 <Button_Debounce+0x112>
      {
        // Check if button is still pressed (LOW state) after debounce delay
        if (HAL_GPIO_ReadPin(button->gpio_port, button->gpio_pin) == BUTTON_ACTIVE) 
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	889b      	ldrh	r3, [r3, #4]
 80012f8:	4619      	mov	r1, r3
 80012fa:	4610      	mov	r0, r2
 80012fc:	f002 fbfa 	bl	8003af4 <HAL_GPIO_ReadPin>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d103      	bne.n	800130e <Button_Debounce+0x7a>
        {
          // Transition to pressed state
          button->state = BUTTON_PRESSED;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2202      	movs	r2, #2
 800130a:	71da      	strb	r2, [r3, #7]
          // Reset interrupt flag and return to released state
          button->int_flag = false;  
          button->state = BUTTON_RELEASED;
        }
      }
      break;
 800130c:	e04b      	b.n	80013a6 <Button_Debounce+0x112>
          button->int_flag = false;  
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2200      	movs	r2, #0
 8001312:	731a      	strb	r2, [r3, #12]
          button->state = BUTTON_RELEASED;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2200      	movs	r2, #0
 8001318:	71da      	strb	r2, [r3, #7]
      break;
 800131a:	e044      	b.n	80013a6 <Button_Debounce+0x112>
    
    // Pressed state: Button is pressed (LOW)
    case BUTTON_PRESSED:
      // Check if button is released (HIGH state)
      if (HAL_GPIO_ReadPin(button->gpio_port, button->gpio_pin) != BUTTON_ACTIVE) 
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	889b      	ldrh	r3, [r3, #4]
 8001324:	4619      	mov	r1, r3
 8001326:	4610      	mov	r0, r2
 8001328:	f002 fbe4 	bl	8003af4 <HAL_GPIO_ReadPin>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d012      	beq.n	8001358 <Button_Debounce+0xc4>
      {
        // Check if press duration is less than hold threshold
        if (HAL_GetTick() - button->start_tick < (BUTTON_HOLD_TH + DISPLAY_DELAY))
 8001332:	f001 fc6f 	bl	8002c14 <HAL_GetTick>
 8001336:	4602      	mov	r2, r0
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8001342:	d802      	bhi.n	800134a <Button_Debounce+0xb6>
        {
          // Set press flag for short press
          button->press_flag = true;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2201      	movs	r2, #1
 8001348:	735a      	strb	r2, [r3, #13]
        }
      
        // Reset interrupt flag and return to released state
        button->int_flag = false;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2200      	movs	r2, #0
 800134e:	731a      	strb	r2, [r3, #12]

        //button->latch = false;
        button->state = BUTTON_RELEASED;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2200      	movs	r2, #0
 8001354:	71da      	strb	r2, [r3, #7]
      else if ((HAL_GetTick() - button->start_tick >= (BUTTON_HOLD_TH + DISPLAY_DELAY)) && !button->hold_flag)
      {
        // Set hold flag for long press
        button->hold_flag = true;
      }
      break;
 8001356:	e028      	b.n	80013aa <Button_Debounce+0x116>
      else if ((HAL_GetTick() - button->start_tick >= (BUTTON_HOLD_TH + DISPLAY_DELAY)) && !button->hold_flag)
 8001358:	f001 fc5c 	bl	8002c14 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8001368:	d91f      	bls.n	80013aa <Button_Debounce+0x116>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	7b9b      	ldrb	r3, [r3, #14]
 800136e:	b2db      	uxtb	r3, r3
 8001370:	f083 0301 	eor.w	r3, r3, #1
 8001374:	b2db      	uxtb	r3, r3
 8001376:	2b00      	cmp	r3, #0
 8001378:	d017      	beq.n	80013aa <Button_Debounce+0x116>
        button->hold_flag = true;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2201      	movs	r2, #1
 800137e:	739a      	strb	r2, [r3, #14]
      break;
 8001380:	e013      	b.n	80013aa <Button_Debounce+0x116>

    default:
      // Reset all flags and return to released state
      button->state = BUTTON_RELEASED;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2200      	movs	r2, #0
 8001386:	71da      	strb	r2, [r3, #7]
      button->int_flag = false;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2200      	movs	r2, #0
 800138c:	731a      	strb	r2, [r3, #12]
      button->press_flag = false;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2200      	movs	r2, #0
 8001392:	735a      	strb	r2, [r3, #13]
      button->hold_flag = false;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	739a      	strb	r2, [r3, #14]
      button->latch = false;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2200      	movs	r2, #0
 800139e:	73da      	strb	r2, [r3, #15]
      break;
 80013a0:	e004      	b.n	80013ac <Button_Debounce+0x118>
      break;
 80013a2:	bf00      	nop
 80013a4:	e002      	b.n	80013ac <Button_Debounce+0x118>
      break;
 80013a6:	bf00      	nop
 80013a8:	e000      	b.n	80013ac <Button_Debounce+0x118>
      break;
 80013aa:	bf00      	nop
  }
}
 80013ac:	bf00      	nop
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <Button_Handle>:
/**
 * @brief  Button interrupt handler function to be called in main loop
 * @retval None
 */
void Button_Handle (void) 
{
 80013b4:	b590      	push	{r4, r7, lr}
 80013b6:	b087      	sub	sp, #28
 80013b8:	af00      	add	r7, sp, #0
  // An empty button variable containing reset values for button pointer initiallization
  BUTTON_DATA buttonReset = {GPIOB, BUTTON0_IN12_Pin, 0, BUTTON_RELEASED, 0, false, false, false, false};
 80013ba:	4b5d      	ldr	r3, [pc, #372]	@ (8001530 <Button_Handle+0x17c>)
 80013bc:	463c      	mov	r4, r7
 80013be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  // Initially point to an empty button variable
  BUTTON_DATA *button = &buttonReset;
 80013c4:	463b      	mov	r3, r7
 80013c6:	617b      	str	r3, [r7, #20]

  // Perform button debouncing to filter out noise
  Button_Debounce(&button0);
 80013c8:	485a      	ldr	r0, [pc, #360]	@ (8001534 <Button_Handle+0x180>)
 80013ca:	f7ff ff63 	bl	8001294 <Button_Debounce>
  Button_Debounce(&button1);
 80013ce:	485a      	ldr	r0, [pc, #360]	@ (8001538 <Button_Handle+0x184>)
 80013d0:	f7ff ff60 	bl	8001294 <Button_Debounce>
  Button_Debounce(&button2);
 80013d4:	4859      	ldr	r0, [pc, #356]	@ (800153c <Button_Handle+0x188>)
 80013d6:	f7ff ff5d 	bl	8001294 <Button_Debounce>
  Button_Debounce(&button3);
 80013da:	4859      	ldr	r0, [pc, #356]	@ (8001540 <Button_Handle+0x18c>)
 80013dc:	f7ff ff5a 	bl	8001294 <Button_Debounce>
  Button_Debounce(&button4);
 80013e0:	4858      	ldr	r0, [pc, #352]	@ (8001544 <Button_Handle+0x190>)
 80013e2:	f7ff ff57 	bl	8001294 <Button_Debounce>

  
  if      (button0.press_flag || button0.hold_flag) button = &button0;
 80013e6:	4b53      	ldr	r3, [pc, #332]	@ (8001534 <Button_Handle+0x180>)
 80013e8:	7b5b      	ldrb	r3, [r3, #13]
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d104      	bne.n	80013fa <Button_Handle+0x46>
 80013f0:	4b50      	ldr	r3, [pc, #320]	@ (8001534 <Button_Handle+0x180>)
 80013f2:	7b9b      	ldrb	r3, [r3, #14]
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d002      	beq.n	8001400 <Button_Handle+0x4c>
 80013fa:	4b4e      	ldr	r3, [pc, #312]	@ (8001534 <Button_Handle+0x180>)
 80013fc:	617b      	str	r3, [r7, #20]
 80013fe:	e032      	b.n	8001466 <Button_Handle+0xb2>
  else if (button1.press_flag || button1.hold_flag) button = &button1;
 8001400:	4b4d      	ldr	r3, [pc, #308]	@ (8001538 <Button_Handle+0x184>)
 8001402:	7b5b      	ldrb	r3, [r3, #13]
 8001404:	b2db      	uxtb	r3, r3
 8001406:	2b00      	cmp	r3, #0
 8001408:	d104      	bne.n	8001414 <Button_Handle+0x60>
 800140a:	4b4b      	ldr	r3, [pc, #300]	@ (8001538 <Button_Handle+0x184>)
 800140c:	7b9b      	ldrb	r3, [r3, #14]
 800140e:	b2db      	uxtb	r3, r3
 8001410:	2b00      	cmp	r3, #0
 8001412:	d002      	beq.n	800141a <Button_Handle+0x66>
 8001414:	4b48      	ldr	r3, [pc, #288]	@ (8001538 <Button_Handle+0x184>)
 8001416:	617b      	str	r3, [r7, #20]
 8001418:	e025      	b.n	8001466 <Button_Handle+0xb2>
  else if (button2.press_flag || button2.hold_flag) button = &button2;
 800141a:	4b48      	ldr	r3, [pc, #288]	@ (800153c <Button_Handle+0x188>)
 800141c:	7b5b      	ldrb	r3, [r3, #13]
 800141e:	b2db      	uxtb	r3, r3
 8001420:	2b00      	cmp	r3, #0
 8001422:	d104      	bne.n	800142e <Button_Handle+0x7a>
 8001424:	4b45      	ldr	r3, [pc, #276]	@ (800153c <Button_Handle+0x188>)
 8001426:	7b9b      	ldrb	r3, [r3, #14]
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b00      	cmp	r3, #0
 800142c:	d002      	beq.n	8001434 <Button_Handle+0x80>
 800142e:	4b43      	ldr	r3, [pc, #268]	@ (800153c <Button_Handle+0x188>)
 8001430:	617b      	str	r3, [r7, #20]
 8001432:	e018      	b.n	8001466 <Button_Handle+0xb2>
  else if (button3.press_flag || button3.hold_flag) button = &button3;
 8001434:	4b42      	ldr	r3, [pc, #264]	@ (8001540 <Button_Handle+0x18c>)
 8001436:	7b5b      	ldrb	r3, [r3, #13]
 8001438:	b2db      	uxtb	r3, r3
 800143a:	2b00      	cmp	r3, #0
 800143c:	d104      	bne.n	8001448 <Button_Handle+0x94>
 800143e:	4b40      	ldr	r3, [pc, #256]	@ (8001540 <Button_Handle+0x18c>)
 8001440:	7b9b      	ldrb	r3, [r3, #14]
 8001442:	b2db      	uxtb	r3, r3
 8001444:	2b00      	cmp	r3, #0
 8001446:	d002      	beq.n	800144e <Button_Handle+0x9a>
 8001448:	4b3d      	ldr	r3, [pc, #244]	@ (8001540 <Button_Handle+0x18c>)
 800144a:	617b      	str	r3, [r7, #20]
 800144c:	e00b      	b.n	8001466 <Button_Handle+0xb2>
  else if (button4.press_flag || button4.hold_flag) button = &button4;
 800144e:	4b3d      	ldr	r3, [pc, #244]	@ (8001544 <Button_Handle+0x190>)
 8001450:	7b5b      	ldrb	r3, [r3, #13]
 8001452:	b2db      	uxtb	r3, r3
 8001454:	2b00      	cmp	r3, #0
 8001456:	d104      	bne.n	8001462 <Button_Handle+0xae>
 8001458:	4b3a      	ldr	r3, [pc, #232]	@ (8001544 <Button_Handle+0x190>)
 800145a:	7b9b      	ldrb	r3, [r3, #14]
 800145c:	b2db      	uxtb	r3, r3
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <Button_Handle+0xb2>
 8001462:	4b38      	ldr	r3, [pc, #224]	@ (8001544 <Button_Handle+0x190>)
 8001464:	617b      	str	r3, [r7, #20]
  

  // Debugging: Initialize the start tick for button hold detection
  uint32_t startTick = 0;
 8001466:	2300      	movs	r3, #0
 8001468:	613b      	str	r3, [r7, #16]
  
  // Debugging: Check if the button is pressed or held by increment its counter in activation
  if (button->press_flag)
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	7b5b      	ldrb	r3, [r3, #13]
 800146e:	b2db      	uxtb	r3, r3
 8001470:	2b00      	cmp	r3, #0
 8001472:	d009      	beq.n	8001488 <Button_Handle+0xd4>
  {
    // Increment the debug counter for the button
    debug_button_counter[button->index]++;
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	799b      	ldrb	r3, [r3, #6]
 8001478:	4a33      	ldr	r2, [pc, #204]	@ (8001548 <Button_Handle+0x194>)
 800147a:	5cd2      	ldrb	r2, [r2, r3]
 800147c:	b2d2      	uxtb	r2, r2
 800147e:	3201      	adds	r2, #1
 8001480:	b2d1      	uxtb	r1, r2
 8001482:	4a31      	ldr	r2, [pc, #196]	@ (8001548 <Button_Handle+0x194>)
 8001484:	54d1      	strb	r1, [r2, r3]
 8001486:	e017      	b.n	80014b8 <Button_Handle+0x104>
  }
  else if (button->hold_flag)
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	7b9b      	ldrb	r3, [r3, #14]
 800148c:	b2db      	uxtb	r3, r3
 800148e:	2b00      	cmp	r3, #0
 8001490:	d012      	beq.n	80014b8 <Button_Handle+0x104>
  {
    // Check if the button is held down for a certain duration
    if (HAL_GetTick() - startTick >= BUTTON_HOLD_CYCLE) 
 8001492:	f001 fbbf 	bl	8002c14 <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	2bf9      	cmp	r3, #249	@ 0xf9
 800149e:	d90b      	bls.n	80014b8 <Button_Handle+0x104>
    {
      // Increment the debug counter for the button
      debug_button_counter[button->index]++;
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	799b      	ldrb	r3, [r3, #6]
 80014a4:	4a28      	ldr	r2, [pc, #160]	@ (8001548 <Button_Handle+0x194>)
 80014a6:	5cd2      	ldrb	r2, [r2, r3]
 80014a8:	b2d2      	uxtb	r2, r2
 80014aa:	3201      	adds	r2, #1
 80014ac:	b2d1      	uxtb	r1, r2
 80014ae:	4a26      	ldr	r2, [pc, #152]	@ (8001548 <Button_Handle+0x194>)
 80014b0:	54d1      	strb	r1, [r2, r3]

      // Reset the start tick for the next hold cycle
      startTick = HAL_GetTick();
 80014b2:	f001 fbaf 	bl	8002c14 <HAL_GetTick>
 80014b6:	6138      	str	r0, [r7, #16]
    }
  }

  // Check if the button is pressed or held
  if (button->press_flag || button->hold_flag) 
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	7b5b      	ldrb	r3, [r3, #13]
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d104      	bne.n	80014cc <Button_Handle+0x118>
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	7b9b      	ldrb	r3, [r3, #14]
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d02c      	beq.n	8001526 <Button_Handle+0x172>
  {
    // Handle button actions based on the current system mode
    switch (system_state.mode) 
 80014cc:	4b1f      	ldr	r3, [pc, #124]	@ (800154c <Button_Handle+0x198>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b05      	cmp	r3, #5
 80014d2:	d827      	bhi.n	8001524 <Button_Handle+0x170>
 80014d4:	a201      	add	r2, pc, #4	@ (adr r2, 80014dc <Button_Handle+0x128>)
 80014d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014da:	bf00      	nop
 80014dc:	080014f5 	.word	0x080014f5
 80014e0:	080014fd 	.word	0x080014fd
 80014e4:	08001505 	.word	0x08001505
 80014e8:	0800150d 	.word	0x0800150d
 80014ec:	08001515 	.word	0x08001515
 80014f0:	0800151d 	.word	0x0800151d
    {
      case DEFAULT_MODE: 
        System_Default_Mode_Handle (button);
 80014f4:	6978      	ldr	r0, [r7, #20]
 80014f6:	f000 f82b 	bl	8001550 <System_Default_Mode_Handle>
        break;
 80014fa:	e014      	b.n	8001526 <Button_Handle+0x172>

      case TIME_SETUP_MODE: 
        System_Time_Setup_Mode_Handle (button);
 80014fc:	6978      	ldr	r0, [r7, #20]
 80014fe:	f000 f8ab 	bl	8001658 <System_Time_Setup_Mode_Handle>
        break;
 8001502:	e010      	b.n	8001526 <Button_Handle+0x172>
      
      case ALARM_SETUP_MODE: 
        System_Alarm_Setup_Mode_Handle (button);
 8001504:	6978      	ldr	r0, [r7, #20]
 8001506:	f000 f9e5 	bl	80018d4 <System_Alarm_Setup_Mode_Handle>
        break;
 800150a:	e00c      	b.n	8001526 <Button_Handle+0x172>

      case ALARM_VIEW_MODE: 
        System_Alarm_View_Mode_Handle (button);
 800150c:	6978      	ldr	r0, [r7, #20]
 800150e:	f000 fb75 	bl	8001bfc <System_Alarm_View_Mode_Handle>
        break;
 8001512:	e008      	b.n	8001526 <Button_Handle+0x172>

      case ALARM_ACTIVE_MODE: 
        System_Alarm_Active_Mode_Handle (button);
 8001514:	6978      	ldr	r0, [r7, #20]
 8001516:	f000 fd37 	bl	8001f88 <System_Alarm_Active_Mode_Handle>
        break;
 800151a:	e004      	b.n	8001526 <Button_Handle+0x172>

      case SYSTEM_OPTIONS_MODE:
        System_Options_Mode_Handle (button);
 800151c:	6978      	ldr	r0, [r7, #20]
 800151e:	f000 fc9d 	bl	8001e5c <System_Options_Mode_Handle>
        break;
 8001522:	e000      	b.n	8001526 <Button_Handle+0x172>

      default:
        break;
 8001524:	bf00      	nop
    }
  }
}
 8001526:	bf00      	nop
 8001528:	371c      	adds	r7, #28
 800152a:	46bd      	mov	sp, r7
 800152c:	bd90      	pop	{r4, r7, pc}
 800152e:	bf00      	nop
 8001530:	0800b66c 	.word	0x0800b66c
 8001534:	20000008 	.word	0x20000008
 8001538:	20000018 	.word	0x20000018
 800153c:	20000028 	.word	0x20000028
 8001540:	20000038 	.word	0x20000038
 8001544:	20000048 	.word	0x20000048
 8001548:	200003ec 	.word	0x200003ec
 800154c:	20000388 	.word	0x20000388

08001550 <System_Default_Mode_Handle>:
 * @brief  Handles the default system mode based on button actions.
 * @param  button: Pointer to the BUTTON_DATA structure containing button state and index.
 * @retval None
 */
void System_Default_Mode_Handle (BUTTON_DATA *button)
{
 8001550:	b4f0      	push	{r4, r5, r6, r7}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  switch (button->index) 
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	799b      	ldrb	r3, [r3, #6]
 800155c:	2b04      	cmp	r3, #4
 800155e:	d864      	bhi.n	800162a <System_Default_Mode_Handle+0xda>
 8001560:	a201      	add	r2, pc, #4	@ (adr r2, 8001568 <System_Default_Mode_Handle+0x18>)
 8001562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001566:	bf00      	nop
 8001568:	0800157d 	.word	0x0800157d
 800156c:	0800158d 	.word	0x0800158d
 8001570:	0800159d 	.word	0x0800159d
 8001574:	080015ad 	.word	0x080015ad
 8001578:	080015bd 	.word	0x080015bd
  {
    // Button 0: Reserved for future use
    case 0:
      if (button->press_flag)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	7b5b      	ldrb	r3, [r3, #13]
 8001580:	b2db      	uxtb	r3, r3
 8001582:	2b00      	cmp	r3, #0
 8001584:	d153      	bne.n	800162e <System_Default_Mode_Handle+0xde>
      {
        // Reserved
      }
      else if (button->hold_flag)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	7b9b      	ldrb	r3, [r3, #14]
      {
        // Reserved
      }
      break;
 800158a:	e050      	b.n	800162e <System_Default_Mode_Handle+0xde>
    
    // Button 1: Reserved for future use
    case 1: 
      if (button->press_flag)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	7b5b      	ldrb	r3, [r3, #13]
 8001590:	b2db      	uxtb	r3, r3
 8001592:	2b00      	cmp	r3, #0
 8001594:	d14d      	bne.n	8001632 <System_Default_Mode_Handle+0xe2>
      {
        // Reserved
      }
      else if (button->hold_flag)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	7b9b      	ldrb	r3, [r3, #14]
      {
        // Reserved
      }
      break;
 800159a:	e04a      	b.n	8001632 <System_Default_Mode_Handle+0xe2>

    // Button 2: If pressed, do nothing (reserved for future use); if held, do nothing (reserved for future use)
    case 2: 
      if (button->press_flag) 
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	7b5b      	ldrb	r3, [r3, #13]
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d147      	bne.n	8001636 <System_Default_Mode_Handle+0xe6>
      {
        // Reserved
      }
      else if (button->hold_flag)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	7b9b      	ldrb	r3, [r3, #14]
      {
        // Reserved
      }
      break;
 80015aa:	e044      	b.n	8001636 <System_Default_Mode_Handle+0xe6>
    
    // Button 3: If pressed, do nothing (reserved for future use); if held, do nothing (reserved for future use)
    case 3:
      if (button->press_flag)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	7b5b      	ldrb	r3, [r3, #13]
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d141      	bne.n	800163a <System_Default_Mode_Handle+0xea>
      {
        // Reserved
      }
      else if (button->hold_flag)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	7b9b      	ldrb	r3, [r3, #14]
      {
        // Reserved
      }
      break;
 80015ba:	e03e      	b.n	800163a <System_Default_Mode_Handle+0xea>

    // Button 4: If pressed, cycle through the modes; if held, do nothing (reserved for future use)
    case 4:
      if (button->press_flag || (button->hold_flag && !button->latch))
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	7b5b      	ldrb	r3, [r3, #13]
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d10c      	bne.n	80015e0 <System_Default_Mode_Handle+0x90>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	7b9b      	ldrb	r3, [r3, #14]
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d036      	beq.n	800163e <System_Default_Mode_Handle+0xee>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	7bdb      	ldrb	r3, [r3, #15]
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	f083 0301 	eor.w	r3, r3, #1
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d02e      	beq.n	800163e <System_Default_Mode_Handle+0xee>
      {
        // system_state.mode = (system_state.mode < (SYSTEM_MODE_NUM - 1)) ? (system_state.mode + 1) : 0;

        // Cycle to the next mode in the system state
        system_state.mode = TIME_SETUP_MODE;
 80015e0:	4b1a      	ldr	r3, [pc, #104]	@ (800164c <System_Default_Mode_Handle+0xfc>)
 80015e2:	2201      	movs	r2, #1
 80015e4:	701a      	strb	r2, [r3, #0]

        // Set the system past mode to default mode
        system_state.past_mode = DEFAULT_MODE;
 80015e6:	4b19      	ldr	r3, [pc, #100]	@ (800164c <System_Default_Mode_Handle+0xfc>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	705a      	strb	r2, [r3, #1]

        // Set the Time Setup data to the current time values for convinience
        time_setup_data =
        (TIME_SETUP_DATA)
        {
          time_get_data.minute,       // Minutes: 0-59
 80015ec:	4b18      	ldr	r3, [pc, #96]	@ (8001650 <System_Default_Mode_Handle+0x100>)
 80015ee:	785e      	ldrb	r6, [r3, #1]
          time_get_data.hour,         // Hours: 0-23
 80015f0:	4b17      	ldr	r3, [pc, #92]	@ (8001650 <System_Default_Mode_Handle+0x100>)
 80015f2:	789d      	ldrb	r5, [r3, #2]
          time_get_data.dayofweek,    // Day of the week: 1-7 (1 = Sunday, 2 = Monday, ..., 7 = Saturday)
 80015f4:	4b16      	ldr	r3, [pc, #88]	@ (8001650 <System_Default_Mode_Handle+0x100>)
 80015f6:	78dc      	ldrb	r4, [r3, #3]
          time_get_data.dateofmonth,  // Date of the month: 1-31
 80015f8:	4b15      	ldr	r3, [pc, #84]	@ (8001650 <System_Default_Mode_Handle+0x100>)
 80015fa:	7918      	ldrb	r0, [r3, #4]
          time_get_data.month,        // Month: 1-12
 80015fc:	4b14      	ldr	r3, [pc, #80]	@ (8001650 <System_Default_Mode_Handle+0x100>)
 80015fe:	7959      	ldrb	r1, [r3, #5]
          time_get_data.year          // Year: 0-99 (0 = 2000, 1 = 2001, ..., 99 = 2099)
 8001600:	4b13      	ldr	r3, [pc, #76]	@ (8001650 <System_Default_Mode_Handle+0x100>)
 8001602:	799a      	ldrb	r2, [r3, #6]
        time_setup_data =
 8001604:	4b13      	ldr	r3, [pc, #76]	@ (8001654 <System_Default_Mode_Handle+0x104>)
 8001606:	701e      	strb	r6, [r3, #0]
 8001608:	4b12      	ldr	r3, [pc, #72]	@ (8001654 <System_Default_Mode_Handle+0x104>)
 800160a:	705d      	strb	r5, [r3, #1]
 800160c:	4b11      	ldr	r3, [pc, #68]	@ (8001654 <System_Default_Mode_Handle+0x104>)
 800160e:	709c      	strb	r4, [r3, #2]
 8001610:	4b10      	ldr	r3, [pc, #64]	@ (8001654 <System_Default_Mode_Handle+0x104>)
 8001612:	70d8      	strb	r0, [r3, #3]
 8001614:	4b0f      	ldr	r3, [pc, #60]	@ (8001654 <System_Default_Mode_Handle+0x104>)
 8001616:	7119      	strb	r1, [r3, #4]
 8001618:	4b0e      	ldr	r3, [pc, #56]	@ (8001654 <System_Default_Mode_Handle+0x104>)
 800161a:	715a      	strb	r2, [r3, #5]
        };

        // Reset the cursor for the Time Setup mode to the first parameter (minute)
        system_state.time_setup_cursor = TIME_MINUTE;
 800161c:	4b0b      	ldr	r3, [pc, #44]	@ (800164c <System_Default_Mode_Handle+0xfc>)
 800161e:	2200      	movs	r2, #0
 8001620:	709a      	strb	r2, [r3, #2]

        button->latch = true;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2201      	movs	r2, #1
 8001626:	73da      	strb	r2, [r3, #15]
      }
      // else if (button->hold_flag)
      // {
      //   // Reserved
      // }
      break;
 8001628:	e009      	b.n	800163e <System_Default_Mode_Handle+0xee>

    default: 
      break;
 800162a:	bf00      	nop
 800162c:	e008      	b.n	8001640 <System_Default_Mode_Handle+0xf0>
      break;
 800162e:	bf00      	nop
 8001630:	e006      	b.n	8001640 <System_Default_Mode_Handle+0xf0>
      break;
 8001632:	bf00      	nop
 8001634:	e004      	b.n	8001640 <System_Default_Mode_Handle+0xf0>
      break;
 8001636:	bf00      	nop
 8001638:	e002      	b.n	8001640 <System_Default_Mode_Handle+0xf0>
      break;
 800163a:	bf00      	nop
 800163c:	e000      	b.n	8001640 <System_Default_Mode_Handle+0xf0>
      break;
 800163e:	bf00      	nop
  }
}
 8001640:	bf00      	nop
 8001642:	3710      	adds	r7, #16
 8001644:	46bd      	mov	sp, r7
 8001646:	bcf0      	pop	{r4, r5, r6, r7}
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	20000388 	.word	0x20000388
 8001650:	200003a0 	.word	0x200003a0
 8001654:	20000390 	.word	0x20000390

08001658 <System_Time_Setup_Mode_Handle>:
 * @brief  Handles the time setup mode based on button actions.
 * @param  button: Pointer to the BUTTON structure containing button state and index.
 * @retval None
 */
void System_Time_Setup_Mode_Handle (BUTTON_DATA *button)
{
 8001658:	b5b0      	push	{r4, r5, r7, lr}
 800165a:	b08c      	sub	sp, #48	@ 0x30
 800165c:	af04      	add	r7, sp, #16
 800165e:	6078      	str	r0, [r7, #4]
  switch (button->index) 
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	799b      	ldrb	r3, [r3, #6]
 8001664:	2b04      	cmp	r3, #4
 8001666:	f200 8115 	bhi.w	8001894 <System_Time_Setup_Mode_Handle+0x23c>
 800166a:	a201      	add	r2, pc, #4	@ (adr r2, 8001670 <System_Time_Setup_Mode_Handle+0x18>)
 800166c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001670:	08001685 	.word	0x08001685
 8001674:	0800173f 	.word	0x0800173f
 8001678:	080017f3 	.word	0x080017f3
 800167c:	0800182f 	.word	0x0800182f
 8001680:	08001853 	.word	0x08001853
  {
    // Button 0: If pressed, increment the selected parameter; if held, do nothing (reserved for future use)
    case 0: 
      // Pointer to the selected parameter, its maximum value, and minimum value
      uint8_t *paramPtr1 = NULL;
 8001684:	2300      	movs	r3, #0
 8001686:	61fb      	str	r3, [r7, #28]
      uint8_t maxValue1 = 0;    
 8001688:	2300      	movs	r3, #0
 800168a:	76fb      	strb	r3, [r7, #27]
      uint8_t minValue1 = 0;  
 800168c:	2300      	movs	r3, #0
 800168e:	76bb      	strb	r3, [r7, #26]

      // Determine the parameter to increment based on the current selection
      switch (system_state.time_setup_cursor)
 8001690:	4b87      	ldr	r3, [pc, #540]	@ (80018b0 <System_Time_Setup_Mode_Handle+0x258>)
 8001692:	789b      	ldrb	r3, [r3, #2]
 8001694:	2b05      	cmp	r3, #5
 8001696:	d839      	bhi.n	800170c <System_Time_Setup_Mode_Handle+0xb4>
 8001698:	a201      	add	r2, pc, #4	@ (adr r2, 80016a0 <System_Time_Setup_Mode_Handle+0x48>)
 800169a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800169e:	bf00      	nop
 80016a0:	080016b9 	.word	0x080016b9
 80016a4:	080016c7 	.word	0x080016c7
 80016a8:	080016d5 	.word	0x080016d5
 80016ac:	080016e3 	.word	0x080016e3
 80016b0:	080016f1 	.word	0x080016f1
 80016b4:	080016ff 	.word	0x080016ff
      {
        case TIME_MINUTE:  paramPtr1 = &time_setup_data.minute;  maxValue1 = 59; minValue1 = 0; break;
 80016b8:	4b7e      	ldr	r3, [pc, #504]	@ (80018b4 <System_Time_Setup_Mode_Handle+0x25c>)
 80016ba:	61fb      	str	r3, [r7, #28]
 80016bc:	233b      	movs	r3, #59	@ 0x3b
 80016be:	76fb      	strb	r3, [r7, #27]
 80016c0:	2300      	movs	r3, #0
 80016c2:	76bb      	strb	r3, [r7, #26]
 80016c4:	e023      	b.n	800170e <System_Time_Setup_Mode_Handle+0xb6>
        case TIME_HOUR:    paramPtr1 = &time_setup_data.hour;    maxValue1 = 23; minValue1 = 0; break;
 80016c6:	4b7c      	ldr	r3, [pc, #496]	@ (80018b8 <System_Time_Setup_Mode_Handle+0x260>)
 80016c8:	61fb      	str	r3, [r7, #28]
 80016ca:	2317      	movs	r3, #23
 80016cc:	76fb      	strb	r3, [r7, #27]
 80016ce:	2300      	movs	r3, #0
 80016d0:	76bb      	strb	r3, [r7, #26]
 80016d2:	e01c      	b.n	800170e <System_Time_Setup_Mode_Handle+0xb6>
        case TIME_DOW:     paramPtr1 = &time_setup_data.dow;     maxValue1 = 7;  minValue1 = 1; break;
 80016d4:	4b79      	ldr	r3, [pc, #484]	@ (80018bc <System_Time_Setup_Mode_Handle+0x264>)
 80016d6:	61fb      	str	r3, [r7, #28]
 80016d8:	2307      	movs	r3, #7
 80016da:	76fb      	strb	r3, [r7, #27]
 80016dc:	2301      	movs	r3, #1
 80016de:	76bb      	strb	r3, [r7, #26]
 80016e0:	e015      	b.n	800170e <System_Time_Setup_Mode_Handle+0xb6>
        case TIME_DOM:     paramPtr1 = &time_setup_data.dom;     maxValue1 = 31; minValue1 = 1; break;
 80016e2:	4b77      	ldr	r3, [pc, #476]	@ (80018c0 <System_Time_Setup_Mode_Handle+0x268>)
 80016e4:	61fb      	str	r3, [r7, #28]
 80016e6:	231f      	movs	r3, #31
 80016e8:	76fb      	strb	r3, [r7, #27]
 80016ea:	2301      	movs	r3, #1
 80016ec:	76bb      	strb	r3, [r7, #26]
 80016ee:	e00e      	b.n	800170e <System_Time_Setup_Mode_Handle+0xb6>
        case TIME_MONTH:   paramPtr1 = &time_setup_data.month;   maxValue1 = 12; minValue1 = 1; break;
 80016f0:	4b74      	ldr	r3, [pc, #464]	@ (80018c4 <System_Time_Setup_Mode_Handle+0x26c>)
 80016f2:	61fb      	str	r3, [r7, #28]
 80016f4:	230c      	movs	r3, #12
 80016f6:	76fb      	strb	r3, [r7, #27]
 80016f8:	2301      	movs	r3, #1
 80016fa:	76bb      	strb	r3, [r7, #26]
 80016fc:	e007      	b.n	800170e <System_Time_Setup_Mode_Handle+0xb6>
        case TIME_YEAR:    paramPtr1 = &time_setup_data.year;    maxValue1 = 99; minValue1 = 0; break;
 80016fe:	4b72      	ldr	r3, [pc, #456]	@ (80018c8 <System_Time_Setup_Mode_Handle+0x270>)
 8001700:	61fb      	str	r3, [r7, #28]
 8001702:	2363      	movs	r3, #99	@ 0x63
 8001704:	76fb      	strb	r3, [r7, #27]
 8001706:	2300      	movs	r3, #0
 8001708:	76bb      	strb	r3, [r7, #26]
 800170a:	e000      	b.n	800170e <System_Time_Setup_Mode_Handle+0xb6>
        default: break;
 800170c:	bf00      	nop
      }

      // Check if the button is pressed or held
      if (button->press_flag) 
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	7b5b      	ldrb	r3, [r3, #13]
 8001712:	b2db      	uxtb	r3, r3
 8001714:	2b00      	cmp	r3, #0
 8001716:	f000 80bf 	beq.w	8001898 <System_Time_Setup_Mode_Handle+0x240>
      {
        // Increment the selected parameter value once for a button press
        if (paramPtr1) 
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	2b00      	cmp	r3, #0
 800171e:	f000 80bb 	beq.w	8001898 <System_Time_Setup_Mode_Handle+0x240>
        {
          // Increment the parameter value, wrapping around if necessary
          *paramPtr1 = (*paramPtr1 < maxValue1) ? (*paramPtr1 + 1) : minValue1;
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	7efa      	ldrb	r2, [r7, #27]
 8001728:	429a      	cmp	r2, r3
 800172a:	d904      	bls.n	8001736 <System_Time_Setup_Mode_Handle+0xde>
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	3301      	adds	r3, #1
 8001732:	b2db      	uxtb	r3, r3
 8001734:	e000      	b.n	8001738 <System_Time_Setup_Mode_Handle+0xe0>
 8001736:	7ebb      	ldrb	r3, [r7, #26]
 8001738:	69fa      	ldr	r2, [r7, #28]
 800173a:	7013      	strb	r3, [r2, #0]

      //     // Update the start tick for the next hold cycle
      //     startTick1 = HAL_GetTick();
      //   }
      // } 
      break;
 800173c:	e0ac      	b.n	8001898 <System_Time_Setup_Mode_Handle+0x240>
    
      // Button 1: If pressed, decrement the selected parameter; if held, do nothing (reserved for future use)
      case 1: 
        // Pointer to the selected parameter, its maximum value, and minimum value
        uint8_t *paramPtr2 = NULL;
 800173e:	2300      	movs	r3, #0
 8001740:	617b      	str	r3, [r7, #20]
        uint8_t maxValue2 = 0;    
 8001742:	2300      	movs	r3, #0
 8001744:	74fb      	strb	r3, [r7, #19]
        uint8_t minValue2 = 0;  
 8001746:	2300      	movs	r3, #0
 8001748:	74bb      	strb	r3, [r7, #18]

        // Determine the parameter to decrement based on the current selection
        switch (system_state.time_setup_cursor)
 800174a:	4b59      	ldr	r3, [pc, #356]	@ (80018b0 <System_Time_Setup_Mode_Handle+0x258>)
 800174c:	789b      	ldrb	r3, [r3, #2]
 800174e:	2b05      	cmp	r3, #5
 8001750:	d838      	bhi.n	80017c4 <System_Time_Setup_Mode_Handle+0x16c>
 8001752:	a201      	add	r2, pc, #4	@ (adr r2, 8001758 <System_Time_Setup_Mode_Handle+0x100>)
 8001754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001758:	08001771 	.word	0x08001771
 800175c:	0800177f 	.word	0x0800177f
 8001760:	0800178d 	.word	0x0800178d
 8001764:	0800179b 	.word	0x0800179b
 8001768:	080017a9 	.word	0x080017a9
 800176c:	080017b7 	.word	0x080017b7
        {
          case TIME_MINUTE:  paramPtr2 = &time_setup_data.minute;  maxValue2 = 59; minValue2 = 0; break;
 8001770:	4b50      	ldr	r3, [pc, #320]	@ (80018b4 <System_Time_Setup_Mode_Handle+0x25c>)
 8001772:	617b      	str	r3, [r7, #20]
 8001774:	233b      	movs	r3, #59	@ 0x3b
 8001776:	74fb      	strb	r3, [r7, #19]
 8001778:	2300      	movs	r3, #0
 800177a:	74bb      	strb	r3, [r7, #18]
 800177c:	e023      	b.n	80017c6 <System_Time_Setup_Mode_Handle+0x16e>
          case TIME_HOUR:    paramPtr2 = &time_setup_data.hour;    maxValue2 = 23; minValue2 = 0; break;
 800177e:	4b4e      	ldr	r3, [pc, #312]	@ (80018b8 <System_Time_Setup_Mode_Handle+0x260>)
 8001780:	617b      	str	r3, [r7, #20]
 8001782:	2317      	movs	r3, #23
 8001784:	74fb      	strb	r3, [r7, #19]
 8001786:	2300      	movs	r3, #0
 8001788:	74bb      	strb	r3, [r7, #18]
 800178a:	e01c      	b.n	80017c6 <System_Time_Setup_Mode_Handle+0x16e>
          case TIME_DOW:     paramPtr2 = &time_setup_data.dow;     maxValue2 = 7;  minValue2 = 1; break;
 800178c:	4b4b      	ldr	r3, [pc, #300]	@ (80018bc <System_Time_Setup_Mode_Handle+0x264>)
 800178e:	617b      	str	r3, [r7, #20]
 8001790:	2307      	movs	r3, #7
 8001792:	74fb      	strb	r3, [r7, #19]
 8001794:	2301      	movs	r3, #1
 8001796:	74bb      	strb	r3, [r7, #18]
 8001798:	e015      	b.n	80017c6 <System_Time_Setup_Mode_Handle+0x16e>
          case TIME_DOM:     paramPtr2 = &time_setup_data.dom;     maxValue2 = 31; minValue2 = 1; break;
 800179a:	4b49      	ldr	r3, [pc, #292]	@ (80018c0 <System_Time_Setup_Mode_Handle+0x268>)
 800179c:	617b      	str	r3, [r7, #20]
 800179e:	231f      	movs	r3, #31
 80017a0:	74fb      	strb	r3, [r7, #19]
 80017a2:	2301      	movs	r3, #1
 80017a4:	74bb      	strb	r3, [r7, #18]
 80017a6:	e00e      	b.n	80017c6 <System_Time_Setup_Mode_Handle+0x16e>
          case TIME_MONTH:   paramPtr2 = &time_setup_data.month;   maxValue2 = 12; minValue2 = 1; break;
 80017a8:	4b46      	ldr	r3, [pc, #280]	@ (80018c4 <System_Time_Setup_Mode_Handle+0x26c>)
 80017aa:	617b      	str	r3, [r7, #20]
 80017ac:	230c      	movs	r3, #12
 80017ae:	74fb      	strb	r3, [r7, #19]
 80017b0:	2301      	movs	r3, #1
 80017b2:	74bb      	strb	r3, [r7, #18]
 80017b4:	e007      	b.n	80017c6 <System_Time_Setup_Mode_Handle+0x16e>
          case TIME_YEAR:    paramPtr2 = &time_setup_data.year;    maxValue2 = 99; minValue2 = 0; break;
 80017b6:	4b44      	ldr	r3, [pc, #272]	@ (80018c8 <System_Time_Setup_Mode_Handle+0x270>)
 80017b8:	617b      	str	r3, [r7, #20]
 80017ba:	2363      	movs	r3, #99	@ 0x63
 80017bc:	74fb      	strb	r3, [r7, #19]
 80017be:	2300      	movs	r3, #0
 80017c0:	74bb      	strb	r3, [r7, #18]
 80017c2:	e000      	b.n	80017c6 <System_Time_Setup_Mode_Handle+0x16e>
          default: break;
 80017c4:	bf00      	nop
        }

        // Check if the button is pressed or held
        if (button->press_flag) 
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	7b5b      	ldrb	r3, [r3, #13]
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d065      	beq.n	800189c <System_Time_Setup_Mode_Handle+0x244>
        {
          // Decrement the selected parameter value once for a button press
          if (paramPtr2) 
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d062      	beq.n	800189c <System_Time_Setup_Mode_Handle+0x244>
          {
            // Decrement the parameter value, wrapping around if necessary
            *paramPtr2 = (*paramPtr2 > minValue2) ? (*paramPtr2 - 1) : maxValue2;
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	7cba      	ldrb	r2, [r7, #18]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d204      	bcs.n	80017ea <System_Time_Setup_Mode_Handle+0x192>
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	3b01      	subs	r3, #1
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	e000      	b.n	80017ec <System_Time_Setup_Mode_Handle+0x194>
 80017ea:	7cfb      	ldrb	r3, [r7, #19]
 80017ec:	697a      	ldr	r2, [r7, #20]
 80017ee:	7013      	strb	r3, [r2, #0]

        //     // Update the start tick for the next hold cycle
        //     startTick2 = HAL_GetTick();
        //   }
        // } 
        break;
 80017f0:	e054      	b.n	800189c <System_Time_Setup_Mode_Handle+0x244>

    // Button 2: If pressed, set the time using the current parameter values; if held, do nothing (reserved for future use)
    case 2: 
      // If the button is pressed, move to the previous parameter field, wrapping around if necessary
      if (button->press_flag)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	7b5b      	ldrb	r3, [r3, #13]
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d015      	beq.n	8001828 <System_Time_Setup_Mode_Handle+0x1d0>
      {
        // Set the time using the current parameter values
        Time_Init
 80017fc:	4b2d      	ldr	r3, [pc, #180]	@ (80018b4 <System_Time_Setup_Mode_Handle+0x25c>)
 80017fe:	7818      	ldrb	r0, [r3, #0]
 8001800:	4b2c      	ldr	r3, [pc, #176]	@ (80018b4 <System_Time_Setup_Mode_Handle+0x25c>)
 8001802:	785c      	ldrb	r4, [r3, #1]
 8001804:	4b2b      	ldr	r3, [pc, #172]	@ (80018b4 <System_Time_Setup_Mode_Handle+0x25c>)
 8001806:	789d      	ldrb	r5, [r3, #2]
 8001808:	4b2a      	ldr	r3, [pc, #168]	@ (80018b4 <System_Time_Setup_Mode_Handle+0x25c>)
 800180a:	78db      	ldrb	r3, [r3, #3]
 800180c:	4a29      	ldr	r2, [pc, #164]	@ (80018b4 <System_Time_Setup_Mode_Handle+0x25c>)
 800180e:	7912      	ldrb	r2, [r2, #4]
 8001810:	4928      	ldr	r1, [pc, #160]	@ (80018b4 <System_Time_Setup_Mode_Handle+0x25c>)
 8001812:	7949      	ldrb	r1, [r1, #5]
 8001814:	9102      	str	r1, [sp, #8]
 8001816:	9201      	str	r2, [sp, #4]
 8001818:	9300      	str	r3, [sp, #0]
 800181a:	462b      	mov	r3, r5
 800181c:	4622      	mov	r2, r4
 800181e:	4601      	mov	r1, r0
 8001820:	2000      	movs	r0, #0
 8001822:	f7ff fba5 	bl	8000f70 <Time_Init>
      // If the button is held down, do nothing (reserved for future use)
      else if (button->hold_flag) 
      {
        // Reserved
      }
      break;
 8001826:	e03e      	b.n	80018a6 <System_Time_Setup_Mode_Handle+0x24e>
      else if (button->hold_flag) 
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	7b9b      	ldrb	r3, [r3, #14]
      break;
 800182c:	e03b      	b.n	80018a6 <System_Time_Setup_Mode_Handle+0x24e>

    // Button 3: If pressed, move to the next field; if held, do nothing (reserved for future use)
    case 3: 
      // If the button is pressed, move to the next parameter field, wrapping around if necessary
      if(button->press_flag)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	7b5b      	ldrb	r3, [r3, #13]
 8001832:	b2db      	uxtb	r3, r3
 8001834:	2b00      	cmp	r3, #0
 8001836:	d033      	beq.n	80018a0 <System_Time_Setup_Mode_Handle+0x248>
      {
        system_state.time_setup_cursor = (system_state.time_setup_cursor == TIME_YEAR) ? TIME_MINUTE : (system_state.time_setup_cursor + 1);
 8001838:	4b1d      	ldr	r3, [pc, #116]	@ (80018b0 <System_Time_Setup_Mode_Handle+0x258>)
 800183a:	789b      	ldrb	r3, [r3, #2]
 800183c:	2b05      	cmp	r3, #5
 800183e:	d004      	beq.n	800184a <System_Time_Setup_Mode_Handle+0x1f2>
 8001840:	4b1b      	ldr	r3, [pc, #108]	@ (80018b0 <System_Time_Setup_Mode_Handle+0x258>)
 8001842:	789b      	ldrb	r3, [r3, #2]
 8001844:	3301      	adds	r3, #1
 8001846:	b2db      	uxtb	r3, r3
 8001848:	e000      	b.n	800184c <System_Time_Setup_Mode_Handle+0x1f4>
 800184a:	2300      	movs	r3, #0
 800184c:	4a18      	ldr	r2, [pc, #96]	@ (80018b0 <System_Time_Setup_Mode_Handle+0x258>)
 800184e:	7093      	strb	r3, [r2, #2]
      //     system_param_data.month, 
      //     system_param_data.year
      //   );

      //   button->latch = true
      break;
 8001850:	e026      	b.n	80018a0 <System_Time_Setup_Mode_Handle+0x248>

    // Button 4: If pressed, cycle through the system modes; if held, do nothing (reserved for future use)
    case 4:
      // If pressed, cycle through the time system modes, but the temporary setting data is still retained (avoid accidental press)
      if (button->press_flag)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	7b5b      	ldrb	r3, [r3, #13]
 8001856:	b2db      	uxtb	r3, r3
 8001858:	2b00      	cmp	r3, #0
 800185a:	d023      	beq.n	80018a4 <System_Time_Setup_Mode_Handle+0x24c>
      {
        // system_state.mode = (system_state.mode < (SYSTEM_MODE_NUM - 1)) ? (system_state.mode + 1) : 0;

        // Cycle through the next system mode
        system_state.mode = ALARM_SETUP_MODE;
 800185c:	4b14      	ldr	r3, [pc, #80]	@ (80018b0 <System_Time_Setup_Mode_Handle+0x258>)
 800185e:	2202      	movs	r2, #2
 8001860:	701a      	strb	r2, [r3, #0]

        // Set the system past mode to time setup mode
        system_state.past_mode = TIME_SETUP_MODE;
 8001862:	4b13      	ldr	r3, [pc, #76]	@ (80018b0 <System_Time_Setup_Mode_Handle+0x258>)
 8001864:	2201      	movs	r2, #1
 8001866:	705a      	strb	r2, [r3, #1]

        // Set the Alarm Setup data to the current time values for convenience
        alarm_setup_data =
        (ALARM_SETUP_DATA)
        {
          time_get_data.minute,       // Minutes: 0-59
 8001868:	4b18      	ldr	r3, [pc, #96]	@ (80018cc <System_Time_Setup_Mode_Handle+0x274>)
 800186a:	7858      	ldrb	r0, [r3, #1]
          time_get_data.hour,         // Hours: 0-23
 800186c:	4b17      	ldr	r3, [pc, #92]	@ (80018cc <System_Time_Setup_Mode_Handle+0x274>)
 800186e:	7899      	ldrb	r1, [r3, #2]
          NOT_USED_MODE,              // Select: DAY_OF_WEEK_MODE, DATE_OF_MONTH_MODE, NOT_USED_MODE         
          time_get_data.dayofweek,    // Day of the week: 1-7 (1 = Sunday, 2 = Monday, ..., 7 = Saturday)
 8001870:	4b16      	ldr	r3, [pc, #88]	@ (80018cc <System_Time_Setup_Mode_Handle+0x274>)
 8001872:	78da      	ldrb	r2, [r3, #3]
        alarm_setup_data =
 8001874:	4b16      	ldr	r3, [pc, #88]	@ (80018d0 <System_Time_Setup_Mode_Handle+0x278>)
 8001876:	7018      	strb	r0, [r3, #0]
 8001878:	4b15      	ldr	r3, [pc, #84]	@ (80018d0 <System_Time_Setup_Mode_Handle+0x278>)
 800187a:	7059      	strb	r1, [r3, #1]
 800187c:	4b14      	ldr	r3, [pc, #80]	@ (80018d0 <System_Time_Setup_Mode_Handle+0x278>)
 800187e:	2102      	movs	r1, #2
 8001880:	7099      	strb	r1, [r3, #2]
 8001882:	4b13      	ldr	r3, [pc, #76]	@ (80018d0 <System_Time_Setup_Mode_Handle+0x278>)
 8001884:	70da      	strb	r2, [r3, #3]
 8001886:	4b12      	ldr	r3, [pc, #72]	@ (80018d0 <System_Time_Setup_Mode_Handle+0x278>)
 8001888:	2201      	movs	r2, #1
 800188a:	711a      	strb	r2, [r3, #4]
          true                       	// Alarm ON/OFF state: 1 = ON, 0 = OFF
        };
        
        // Reset the cursor for the Alarm Setup mode to the first parameter (minute)
        system_state.alarm_setup_cursor = ALARM_MINUTE;
 800188c:	4b08      	ldr	r3, [pc, #32]	@ (80018b0 <System_Time_Setup_Mode_Handle+0x258>)
 800188e:	2200      	movs	r2, #0
 8001890:	70da      	strb	r2, [r3, #3]
      //     NOT_USED_MODE,              // Select: DAY_OF_WEEK_MODE, DATE_OF_MONTH_MODE, NOT_USED_MODE
      //     time_get_data.dayofweek,    // Day of the week: 1-7 (1 = Sunday, 2 = Monday, ..., 7 = Saturday), or Date of the month: 1-31
      //     true                        // true = ON, false = OFF
      //   };
      // }
      break;
 8001892:	e007      	b.n	80018a4 <System_Time_Setup_Mode_Handle+0x24c>

    default: 
      break;
 8001894:	bf00      	nop
 8001896:	e006      	b.n	80018a6 <System_Time_Setup_Mode_Handle+0x24e>
      break;
 8001898:	bf00      	nop
 800189a:	e004      	b.n	80018a6 <System_Time_Setup_Mode_Handle+0x24e>
        break;
 800189c:	bf00      	nop
 800189e:	e002      	b.n	80018a6 <System_Time_Setup_Mode_Handle+0x24e>
      break;
 80018a0:	bf00      	nop
 80018a2:	e000      	b.n	80018a6 <System_Time_Setup_Mode_Handle+0x24e>
      break;
 80018a4:	bf00      	nop
  }
}
 80018a6:	bf00      	nop
 80018a8:	3720      	adds	r7, #32
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bdb0      	pop	{r4, r5, r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20000388 	.word	0x20000388
 80018b4:	20000390 	.word	0x20000390
 80018b8:	20000391 	.word	0x20000391
 80018bc:	20000392 	.word	0x20000392
 80018c0:	20000393 	.word	0x20000393
 80018c4:	20000394 	.word	0x20000394
 80018c8:	20000395 	.word	0x20000395
 80018cc:	200003a0 	.word	0x200003a0
 80018d0:	20000398 	.word	0x20000398

080018d4 <System_Alarm_Setup_Mode_Handle>:
 * @brief  Handles the alarm setup mode based on button actions.
 * @param  button: Pointer to the BUTTON structure containing button state and index.
 * @retval None
 */
void System_Alarm_Setup_Mode_Handle (BUTTON_DATA *button)
{ 
 80018d4:	b5b0      	push	{r4, r5, r7, lr}
 80018d6:	b08a      	sub	sp, #40	@ 0x28
 80018d8:	af04      	add	r7, sp, #16
 80018da:	6078      	str	r0, [r7, #4]
  switch (button->index) 
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	799b      	ldrb	r3, [r3, #6]
 80018e0:	2b04      	cmp	r3, #4
 80018e2:	f200 8178 	bhi.w	8001bd6 <System_Alarm_Setup_Mode_Handle+0x302>
 80018e6:	a201      	add	r2, pc, #4	@ (adr r2, 80018ec <System_Alarm_Setup_Mode_Handle+0x18>)
 80018e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ec:	08001901 	.word	0x08001901
 80018f0:	080019c5 	.word	0x080019c5
 80018f4:	08001ab1 	.word	0x08001ab1
 80018f8:	08001b79 	.word	0x08001b79
 80018fc:	08001bb9 	.word	0x08001bb9
  {
    // Button 0: If pressed, increment the selected parameter; if held, do nothing (reserved for future use)
    case 0: 
      // Pointer to the selected parameter, its maximum value, and minimum value
      uint8_t *paramPtr1 = NULL;
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]
      uint8_t maxValue1 = 0;    
 8001904:	2300      	movs	r3, #0
 8001906:	74fb      	strb	r3, [r7, #19]
      uint8_t minValue1 = 0;  
 8001908:	2300      	movs	r3, #0
 800190a:	74bb      	strb	r3, [r7, #18]

      // Determine the parameter to increment based on the current selection
      switch (system_state.alarm_setup_cursor)
 800190c:	4ba1      	ldr	r3, [pc, #644]	@ (8001b94 <System_Alarm_Setup_Mode_Handle+0x2c0>)
 800190e:	78db      	ldrb	r3, [r3, #3]
 8001910:	2b04      	cmp	r3, #4
 8001912:	d839      	bhi.n	8001988 <System_Alarm_Setup_Mode_Handle+0xb4>
 8001914:	a201      	add	r2, pc, #4	@ (adr r2, 800191c <System_Alarm_Setup_Mode_Handle+0x48>)
 8001916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800191a:	bf00      	nop
 800191c:	08001931 	.word	0x08001931
 8001920:	0800193f 	.word	0x0800193f
 8001924:	0800194d 	.word	0x0800194d
 8001928:	0800195b 	.word	0x0800195b
 800192c:	08001969 	.word	0x08001969
      {
        case ALARM_MINUTE:  paramPtr1 = &alarm_setup_data.minute;  maxValue1 = 59; minValue1 = 0; break;
 8001930:	4b99      	ldr	r3, [pc, #612]	@ (8001b98 <System_Alarm_Setup_Mode_Handle+0x2c4>)
 8001932:	617b      	str	r3, [r7, #20]
 8001934:	233b      	movs	r3, #59	@ 0x3b
 8001936:	74fb      	strb	r3, [r7, #19]
 8001938:	2300      	movs	r3, #0
 800193a:	74bb      	strb	r3, [r7, #18]
 800193c:	e025      	b.n	800198a <System_Alarm_Setup_Mode_Handle+0xb6>
        case ALARM_HOUR:    paramPtr1 = &alarm_setup_data.hour;    maxValue1 = 23; minValue1 = 0; break;
 800193e:	4b97      	ldr	r3, [pc, #604]	@ (8001b9c <System_Alarm_Setup_Mode_Handle+0x2c8>)
 8001940:	617b      	str	r3, [r7, #20]
 8001942:	2317      	movs	r3, #23
 8001944:	74fb      	strb	r3, [r7, #19]
 8001946:	2300      	movs	r3, #0
 8001948:	74bb      	strb	r3, [r7, #18]
 800194a:	e01e      	b.n	800198a <System_Alarm_Setup_Mode_Handle+0xb6>
        case ALARM_DY_DT:   paramPtr1 = (uint8_t *)&alarm_setup_data.dy_dt; maxValue1 = 2; minValue1 = 0; break;
 800194c:	4b94      	ldr	r3, [pc, #592]	@ (8001ba0 <System_Alarm_Setup_Mode_Handle+0x2cc>)
 800194e:	617b      	str	r3, [r7, #20]
 8001950:	2302      	movs	r3, #2
 8001952:	74fb      	strb	r3, [r7, #19]
 8001954:	2300      	movs	r3, #0
 8001956:	74bb      	strb	r3, [r7, #18]
 8001958:	e017      	b.n	800198a <System_Alarm_Setup_Mode_Handle+0xb6>
        case ALARM_DOW_DOM: paramPtr1 = &alarm_setup_data.dow_dom; maxValue1 = 31; minValue1 = 1; break;
 800195a:	4b92      	ldr	r3, [pc, #584]	@ (8001ba4 <System_Alarm_Setup_Mode_Handle+0x2d0>)
 800195c:	617b      	str	r3, [r7, #20]
 800195e:	231f      	movs	r3, #31
 8001960:	74fb      	strb	r3, [r7, #19]
 8001962:	2301      	movs	r3, #1
 8001964:	74bb      	strb	r3, [r7, #18]
 8001966:	e010      	b.n	800198a <System_Alarm_Setup_Mode_Handle+0xb6>
        case ALARM_ON_OFF:  alarm_setup_data.on_off = !alarm_setup_data.on_off;                   break;
 8001968:	4b8b      	ldr	r3, [pc, #556]	@ (8001b98 <System_Alarm_Setup_Mode_Handle+0x2c4>)
 800196a:	791b      	ldrb	r3, [r3, #4]
 800196c:	2b00      	cmp	r3, #0
 800196e:	bf14      	ite	ne
 8001970:	2301      	movne	r3, #1
 8001972:	2300      	moveq	r3, #0
 8001974:	b2db      	uxtb	r3, r3
 8001976:	f083 0301 	eor.w	r3, r3, #1
 800197a:	b2db      	uxtb	r3, r3
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	b2da      	uxtb	r2, r3
 8001982:	4b85      	ldr	r3, [pc, #532]	@ (8001b98 <System_Alarm_Setup_Mode_Handle+0x2c4>)
 8001984:	711a      	strb	r2, [r3, #4]
 8001986:	e000      	b.n	800198a <System_Alarm_Setup_Mode_Handle+0xb6>
        default: break;
 8001988:	bf00      	nop
      }

      if (system_state.alarm_setup_cursor == ALARM_ON_OFF)
 800198a:	4b82      	ldr	r3, [pc, #520]	@ (8001b94 <System_Alarm_Setup_Mode_Handle+0x2c0>)
 800198c:	78db      	ldrb	r3, [r3, #3]
 800198e:	2b04      	cmp	r3, #4
 8001990:	f000 8123 	beq.w	8001bda <System_Alarm_Setup_Mode_Handle+0x306>
      {
        break;
      }

      // Check if the button is pressed or held
      if (button->press_flag) 
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	7b5b      	ldrb	r3, [r3, #13]
 8001998:	b2db      	uxtb	r3, r3
 800199a:	2b00      	cmp	r3, #0
 800199c:	f000 811f 	beq.w	8001bde <System_Alarm_Setup_Mode_Handle+0x30a>
      {
        // Increment the selected parameter value once for a button press
        if (paramPtr1) 
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f000 811b 	beq.w	8001bde <System_Alarm_Setup_Mode_Handle+0x30a>
        {
          // Increment the parameter value, wrapping around if necessary
          *paramPtr1 = (*paramPtr1 < maxValue1) ? (*paramPtr1 + 1) : minValue1;
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	7cfa      	ldrb	r2, [r7, #19]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d904      	bls.n	80019bc <System_Alarm_Setup_Mode_Handle+0xe8>
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	3301      	adds	r3, #1
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	e000      	b.n	80019be <System_Alarm_Setup_Mode_Handle+0xea>
 80019bc:	7cbb      	ldrb	r3, [r7, #18]
 80019be:	697a      	ldr	r2, [r7, #20]
 80019c0:	7013      	strb	r3, [r2, #0]
      //   }

      //   // Update the start tick for the next hold cycle
      //   startTick1 = HAL_GetTick();
      // } 
      break;
 80019c2:	e10c      	b.n	8001bde <System_Alarm_Setup_Mode_Handle+0x30a>

      // Button 1: If pressed, decrement the selected parameter; if held, do nothing (reserved for future use)
      case 1: 
        // Pointer to the selected parameter, its maximum value, and minimum value
        uint8_t *paramPtr2 = NULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	60fb      	str	r3, [r7, #12]
        uint8_t maxValue2 = 0;    
 80019c8:	2300      	movs	r3, #0
 80019ca:	72fb      	strb	r3, [r7, #11]
        uint8_t minValue2 = 0;  
 80019cc:	2300      	movs	r3, #0
 80019ce:	72bb      	strb	r3, [r7, #10]

        // Determine the parameter to decrement based on the current selection
        switch (system_state.alarm_setup_cursor)
 80019d0:	4b70      	ldr	r3, [pc, #448]	@ (8001b94 <System_Alarm_Setup_Mode_Handle+0x2c0>)
 80019d2:	78db      	ldrb	r3, [r3, #3]
 80019d4:	2b04      	cmp	r3, #4
 80019d6:	d839      	bhi.n	8001a4c <System_Alarm_Setup_Mode_Handle+0x178>
 80019d8:	a201      	add	r2, pc, #4	@ (adr r2, 80019e0 <System_Alarm_Setup_Mode_Handle+0x10c>)
 80019da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019de:	bf00      	nop
 80019e0:	080019f5 	.word	0x080019f5
 80019e4:	08001a03 	.word	0x08001a03
 80019e8:	08001a11 	.word	0x08001a11
 80019ec:	08001a1f 	.word	0x08001a1f
 80019f0:	08001a2d 	.word	0x08001a2d
        {
          case ALARM_MINUTE:  paramPtr2 = &alarm_setup_data.minute;  maxValue2 = 59; minValue2 = 0; break;
 80019f4:	4b68      	ldr	r3, [pc, #416]	@ (8001b98 <System_Alarm_Setup_Mode_Handle+0x2c4>)
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	233b      	movs	r3, #59	@ 0x3b
 80019fa:	72fb      	strb	r3, [r7, #11]
 80019fc:	2300      	movs	r3, #0
 80019fe:	72bb      	strb	r3, [r7, #10]
 8001a00:	e025      	b.n	8001a4e <System_Alarm_Setup_Mode_Handle+0x17a>
          case ALARM_HOUR:    paramPtr2 = &alarm_setup_data.hour;    maxValue2 = 23; minValue2 = 0; break;
 8001a02:	4b66      	ldr	r3, [pc, #408]	@ (8001b9c <System_Alarm_Setup_Mode_Handle+0x2c8>)
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	2317      	movs	r3, #23
 8001a08:	72fb      	strb	r3, [r7, #11]
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	72bb      	strb	r3, [r7, #10]
 8001a0e:	e01e      	b.n	8001a4e <System_Alarm_Setup_Mode_Handle+0x17a>
          case ALARM_DY_DT:   paramPtr2 = (uint8_t *)&alarm_setup_data.dy_dt; maxValue2 = 2; minValue2 = 0; break;
 8001a10:	4b63      	ldr	r3, [pc, #396]	@ (8001ba0 <System_Alarm_Setup_Mode_Handle+0x2cc>)
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	2302      	movs	r3, #2
 8001a16:	72fb      	strb	r3, [r7, #11]
 8001a18:	2300      	movs	r3, #0
 8001a1a:	72bb      	strb	r3, [r7, #10]
 8001a1c:	e017      	b.n	8001a4e <System_Alarm_Setup_Mode_Handle+0x17a>
          case ALARM_DOW_DOM: paramPtr2 = &alarm_setup_data.dow_dom; maxValue2 = 31; minValue2 = 1; break;
 8001a1e:	4b61      	ldr	r3, [pc, #388]	@ (8001ba4 <System_Alarm_Setup_Mode_Handle+0x2d0>)
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	231f      	movs	r3, #31
 8001a24:	72fb      	strb	r3, [r7, #11]
 8001a26:	2301      	movs	r3, #1
 8001a28:	72bb      	strb	r3, [r7, #10]
 8001a2a:	e010      	b.n	8001a4e <System_Alarm_Setup_Mode_Handle+0x17a>
          case ALARM_ON_OFF:  alarm_setup_data.on_off = !alarm_setup_data.on_off;                  break;
 8001a2c:	4b5a      	ldr	r3, [pc, #360]	@ (8001b98 <System_Alarm_Setup_Mode_Handle+0x2c4>)
 8001a2e:	791b      	ldrb	r3, [r3, #4]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	bf14      	ite	ne
 8001a34:	2301      	movne	r3, #1
 8001a36:	2300      	moveq	r3, #0
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	f083 0301 	eor.w	r3, r3, #1
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	f003 0301 	and.w	r3, r3, #1
 8001a44:	b2da      	uxtb	r2, r3
 8001a46:	4b54      	ldr	r3, [pc, #336]	@ (8001b98 <System_Alarm_Setup_Mode_Handle+0x2c4>)
 8001a48:	711a      	strb	r2, [r3, #4]
 8001a4a:	e000      	b.n	8001a4e <System_Alarm_Setup_Mode_Handle+0x17a>
          default: break;
 8001a4c:	bf00      	nop
        }

        // Check if the selected parameter is ON/OFF
        if (system_state.alarm_setup_cursor == ALARM_ON_OFF)
 8001a4e:	4b51      	ldr	r3, [pc, #324]	@ (8001b94 <System_Alarm_Setup_Mode_Handle+0x2c0>)
 8001a50:	78db      	ldrb	r3, [r3, #3]
 8001a52:	2b04      	cmp	r3, #4
 8001a54:	f000 80c5 	beq.w	8001be2 <System_Alarm_Setup_Mode_Handle+0x30e>
        {
          break;
        }

        // Check if the button is pressed or held
        if (button->press_flag) 
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	7b5b      	ldrb	r3, [r3, #13]
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f000 80c1 	beq.w	8001be6 <System_Alarm_Setup_Mode_Handle+0x312>
        {
          // Check if the selected parameter is ON/OFF
          if (system_state.alarm_setup_cursor == ALARM_ON_OFF)
 8001a64:	4b4b      	ldr	r3, [pc, #300]	@ (8001b94 <System_Alarm_Setup_Mode_Handle+0x2c0>)
 8001a66:	78db      	ldrb	r3, [r3, #3]
 8001a68:	2b04      	cmp	r3, #4
 8001a6a:	d10f      	bne.n	8001a8c <System_Alarm_Setup_Mode_Handle+0x1b8>
          {
            // Toggle the on/off state of the alarm
            alarm_setup_data.on_off = !alarm_setup_data.on_off;
 8001a6c:	4b4a      	ldr	r3, [pc, #296]	@ (8001b98 <System_Alarm_Setup_Mode_Handle+0x2c4>)
 8001a6e:	791b      	ldrb	r3, [r3, #4]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	bf14      	ite	ne
 8001a74:	2301      	movne	r3, #1
 8001a76:	2300      	moveq	r3, #0
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	f083 0301 	eor.w	r3, r3, #1
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	f003 0301 	and.w	r3, r3, #1
 8001a84:	b2da      	uxtb	r2, r3
 8001a86:	4b44      	ldr	r3, [pc, #272]	@ (8001b98 <System_Alarm_Setup_Mode_Handle+0x2c4>)
 8001a88:	711a      	strb	r2, [r3, #4]

        //     // Update the start tick for the next hold cycle
        //     startTick2 = HAL_GetTick();
        //   }
        // } 
        break;
 8001a8a:	e0ac      	b.n	8001be6 <System_Alarm_Setup_Mode_Handle+0x312>
            if (paramPtr2) 
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	f000 80a9 	beq.w	8001be6 <System_Alarm_Setup_Mode_Handle+0x312>
              *paramPtr2 = (*paramPtr2 > minValue2) ? (*paramPtr2 - 1) : maxValue2;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	7aba      	ldrb	r2, [r7, #10]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d204      	bcs.n	8001aa8 <System_Alarm_Setup_Mode_Handle+0x1d4>
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	e000      	b.n	8001aaa <System_Alarm_Setup_Mode_Handle+0x1d6>
 8001aa8:	7afb      	ldrb	r3, [r7, #11]
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	7013      	strb	r3, [r2, #0]
        break;
 8001aae:	e09a      	b.n	8001be6 <System_Alarm_Setup_Mode_Handle+0x312>
    
    // Button 2: If pressed, save the alarm and return to default mode; if held, do nothing (reserved for future use)
    case 2:
      // If the button is pressed, save the alarm and return to default mode 
      if (button->press_flag)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	7b5b      	ldrb	r3, [r3, #13]
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d05b      	beq.n	8001b72 <System_Alarm_Setup_Mode_Handle+0x29e>
      {
        // If the previous mode is Alarm View Mode
        // Use the system cursor instead to keep the alarm slot pointer unchanged
        if (system_state.past_mode == ALARM_VIEW_MODE)
 8001aba:	4b36      	ldr	r3, [pc, #216]	@ (8001b94 <System_Alarm_Setup_Mode_Handle+0x2c0>)
 8001abc:	785b      	ldrb	r3, [r3, #1]
 8001abe:	2b03      	cmp	r3, #3
 8001ac0:	d124      	bne.n	8001b0c <System_Alarm_Setup_Mode_Handle+0x238>
        {
          // Save the alarm to EEPROM and return to Default Mode
          //    void Alarm_Set (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow_dom, ALARM_DY_DT_MODE dy_dt, uint8_t on_off, uint8_t slot)
          Alarm_Set
 8001ac2:	4b35      	ldr	r3, [pc, #212]	@ (8001b98 <System_Alarm_Setup_Mode_Handle+0x2c4>)
 8001ac4:	7818      	ldrb	r0, [r3, #0]
 8001ac6:	4b34      	ldr	r3, [pc, #208]	@ (8001b98 <System_Alarm_Setup_Mode_Handle+0x2c4>)
 8001ac8:	785c      	ldrb	r4, [r3, #1]
 8001aca:	4b33      	ldr	r3, [pc, #204]	@ (8001b98 <System_Alarm_Setup_Mode_Handle+0x2c4>)
 8001acc:	78dd      	ldrb	r5, [r3, #3]
 8001ace:	4b32      	ldr	r3, [pc, #200]	@ (8001b98 <System_Alarm_Setup_Mode_Handle+0x2c4>)
 8001ad0:	789b      	ldrb	r3, [r3, #2]
 8001ad2:	4a31      	ldr	r2, [pc, #196]	@ (8001b98 <System_Alarm_Setup_Mode_Handle+0x2c4>)
 8001ad4:	7912      	ldrb	r2, [r2, #4]
 8001ad6:	492f      	ldr	r1, [pc, #188]	@ (8001b94 <System_Alarm_Setup_Mode_Handle+0x2c0>)
 8001ad8:	7909      	ldrb	r1, [r1, #4]
 8001ada:	9102      	str	r1, [sp, #8]
 8001adc:	9201      	str	r2, [sp, #4]
 8001ade:	9300      	str	r3, [sp, #0]
 8001ae0:	462b      	mov	r3, r5
 8001ae2:	4622      	mov	r2, r4
 8001ae4:	4601      	mov	r1, r0
 8001ae6:	2000      	movs	r0, #0
 8001ae8:	f7ff fa6e 	bl	8000fc8 <Alarm_Set>
            alarm_setup_data.on_off,
            system_state.alarm_view_cursor         // Save the alarm at the address where the cursor points at in Alarm View Mode
          );

          // Update the newly set alarm data
          Alarm_Get(system_state.alarm_view_cursor, &alarm_get_data[system_state.alarm_view_cursor]);
 8001aec:	4b29      	ldr	r3, [pc, #164]	@ (8001b94 <System_Alarm_Setup_Mode_Handle+0x2c0>)
 8001aee:	791a      	ldrb	r2, [r3, #4]
 8001af0:	4b28      	ldr	r3, [pc, #160]	@ (8001b94 <System_Alarm_Setup_Mode_Handle+0x2c0>)
 8001af2:	791b      	ldrb	r3, [r3, #4]
 8001af4:	4619      	mov	r1, r3
 8001af6:	460b      	mov	r3, r1
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	440b      	add	r3, r1
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	492a      	ldr	r1, [pc, #168]	@ (8001ba8 <System_Alarm_Setup_Mode_Handle+0x2d4>)
 8001b00:	440b      	add	r3, r1
 8001b02:	4619      	mov	r1, r3
 8001b04:	4610      	mov	r0, r2
 8001b06:	f7ff faaf 	bl	8001068 <Alarm_Get>
      // If the button is held down, do nothing (reserved for future use)
      else if (button->hold_flag) 
      {
        // Reserved
      }
      break;
 8001b0a:	e071      	b.n	8001bf0 <System_Alarm_Setup_Mode_Handle+0x31c>
          Alarm_Set
 8001b0c:	4b22      	ldr	r3, [pc, #136]	@ (8001b98 <System_Alarm_Setup_Mode_Handle+0x2c4>)
 8001b0e:	7818      	ldrb	r0, [r3, #0]
 8001b10:	4b21      	ldr	r3, [pc, #132]	@ (8001b98 <System_Alarm_Setup_Mode_Handle+0x2c4>)
 8001b12:	785c      	ldrb	r4, [r3, #1]
 8001b14:	4b20      	ldr	r3, [pc, #128]	@ (8001b98 <System_Alarm_Setup_Mode_Handle+0x2c4>)
 8001b16:	78dd      	ldrb	r5, [r3, #3]
 8001b18:	4b1f      	ldr	r3, [pc, #124]	@ (8001b98 <System_Alarm_Setup_Mode_Handle+0x2c4>)
 8001b1a:	789b      	ldrb	r3, [r3, #2]
 8001b1c:	4a1e      	ldr	r2, [pc, #120]	@ (8001b98 <System_Alarm_Setup_Mode_Handle+0x2c4>)
 8001b1e:	7912      	ldrb	r2, [r2, #4]
 8001b20:	4922      	ldr	r1, [pc, #136]	@ (8001bac <System_Alarm_Setup_Mode_Handle+0x2d8>)
 8001b22:	7809      	ldrb	r1, [r1, #0]
 8001b24:	9102      	str	r1, [sp, #8]
 8001b26:	9201      	str	r2, [sp, #4]
 8001b28:	9300      	str	r3, [sp, #0]
 8001b2a:	462b      	mov	r3, r5
 8001b2c:	4622      	mov	r2, r4
 8001b2e:	4601      	mov	r1, r0
 8001b30:	2000      	movs	r0, #0
 8001b32:	f7ff fa49 	bl	8000fc8 <Alarm_Set>
          Alarm_Get(alarm_slot_ptr, &alarm_get_data[alarm_slot_ptr]);
 8001b36:	4b1d      	ldr	r3, [pc, #116]	@ (8001bac <System_Alarm_Setup_Mode_Handle+0x2d8>)
 8001b38:	781a      	ldrb	r2, [r3, #0]
 8001b3a:	4b1c      	ldr	r3, [pc, #112]	@ (8001bac <System_Alarm_Setup_Mode_Handle+0x2d8>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	4619      	mov	r1, r3
 8001b40:	460b      	mov	r3, r1
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	440b      	add	r3, r1
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	4917      	ldr	r1, [pc, #92]	@ (8001ba8 <System_Alarm_Setup_Mode_Handle+0x2d4>)
 8001b4a:	440b      	add	r3, r1
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4610      	mov	r0, r2
 8001b50:	f7ff fa8a 	bl	8001068 <Alarm_Get>
          alarm_slot_ptr = (alarm_slot_ptr < ALARM_SLOT_NUM) ? (alarm_slot_ptr + 1) : 0;
 8001b54:	4b15      	ldr	r3, [pc, #84]	@ (8001bac <System_Alarm_Setup_Mode_Handle+0x2d8>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b09      	cmp	r3, #9
 8001b5a:	d804      	bhi.n	8001b66 <System_Alarm_Setup_Mode_Handle+0x292>
 8001b5c:	4b13      	ldr	r3, [pc, #76]	@ (8001bac <System_Alarm_Setup_Mode_Handle+0x2d8>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	3301      	adds	r3, #1
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	e000      	b.n	8001b68 <System_Alarm_Setup_Mode_Handle+0x294>
 8001b66:	2300      	movs	r3, #0
 8001b68:	4a10      	ldr	r2, [pc, #64]	@ (8001bac <System_Alarm_Setup_Mode_Handle+0x2d8>)
 8001b6a:	7013      	strb	r3, [r2, #0]
          Alarm_Slot_Pointer_Set();
 8001b6c:	f7ff faf4 	bl	8001158 <Alarm_Slot_Pointer_Set>
      break;
 8001b70:	e03e      	b.n	8001bf0 <System_Alarm_Setup_Mode_Handle+0x31c>
      else if (button->hold_flag) 
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	7b9b      	ldrb	r3, [r3, #14]
      break;
 8001b76:	e03b      	b.n	8001bf0 <System_Alarm_Setup_Mode_Handle+0x31c>

    // Button 3: If pressed, move to the next field; if held, do nothing (reserved for future use)
    case 3:
      // If the button is pressed, move to the next parameter field, wrapping around if necessary  
      if (button->press_flag)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	7b5b      	ldrb	r3, [r3, #13]
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d033      	beq.n	8001bea <System_Alarm_Setup_Mode_Handle+0x316>
      {
        system_state.alarm_setup_cursor = (system_state.alarm_setup_cursor == ALARM_ON_OFF) ? ALARM_MINUTE : (system_state.alarm_setup_cursor + 1);
 8001b82:	4b04      	ldr	r3, [pc, #16]	@ (8001b94 <System_Alarm_Setup_Mode_Handle+0x2c0>)
 8001b84:	78db      	ldrb	r3, [r3, #3]
 8001b86:	2b04      	cmp	r3, #4
 8001b88:	d012      	beq.n	8001bb0 <System_Alarm_Setup_Mode_Handle+0x2dc>
 8001b8a:	4b02      	ldr	r3, [pc, #8]	@ (8001b94 <System_Alarm_Setup_Mode_Handle+0x2c0>)
 8001b8c:	78db      	ldrb	r3, [r3, #3]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	e00e      	b.n	8001bb2 <System_Alarm_Setup_Mode_Handle+0x2de>
 8001b94:	20000388 	.word	0x20000388
 8001b98:	20000398 	.word	0x20000398
 8001b9c:	20000399 	.word	0x20000399
 8001ba0:	2000039a 	.word	0x2000039a
 8001ba4:	2000039b 	.word	0x2000039b
 8001ba8:	200003a8 	.word	0x200003a8
 8001bac:	200003e4 	.word	0x200003e4
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	4a11      	ldr	r2, [pc, #68]	@ (8001bf8 <System_Alarm_Setup_Mode_Handle+0x324>)
 8001bb4:	70d3      	strb	r3, [r2, #3]
      //   }

      //   // Reset the button latch to avoid function replication
      //   button->latch = true;
      // }
      break;
 8001bb6:	e018      	b.n	8001bea <System_Alarm_Setup_Mode_Handle+0x316>
    
    // Button 4: If pressed, cycle through the system modes; if held, do nothing (reserved for future use)
    case 4:
      // If pressed, cycle through the time system modes, but the temporary setting data is still retained (avoid accidental press)
      if (button->press_flag)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	7b5b      	ldrb	r3, [r3, #13]
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d015      	beq.n	8001bee <System_Alarm_Setup_Mode_Handle+0x31a>
      {
        // system_state.mode = (system_state.mode < (SYSTEM_MODE_NUM - 1)) ? (system_state.mode + 1) : 0;
        
        // Cycle through the next system mode
        system_state.mode = ALARM_VIEW_MODE;
 8001bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8001bf8 <System_Alarm_Setup_Mode_Handle+0x324>)
 8001bc4:	2203      	movs	r2, #3
 8001bc6:	701a      	strb	r2, [r3, #0]

        // Set the system past mode to alarm setup mode
        system_state.past_mode = ALARM_SETUP_MODE;
 8001bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf8 <System_Alarm_Setup_Mode_Handle+0x324>)
 8001bca:	2202      	movs	r2, #2
 8001bcc:	705a      	strb	r2, [r3, #1]

        // Reset the cursor for the Alarm View mode
        system_state.alarm_view_cursor = 0; 
 8001bce:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf8 <System_Alarm_Setup_Mode_Handle+0x324>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	711a      	strb	r2, [r3, #4]
      //     NOT_USED_MODE,              // Select: DAY_OF_WEEK_MODE, DATE_OF_MONTH_MODE, NOT_USED_MODE
      //     time_get_data.dayofweek,    // Day of the week: 1-7 (1 = Sunday, 2 = Monday, ..., 7 = Saturday), or Date of the month: 1-31
      //     true                        // true = ON, false = OFF
      //   };
      // }
      break;
 8001bd4:	e00b      	b.n	8001bee <System_Alarm_Setup_Mode_Handle+0x31a>

    default:
      // Reserved for future use
      break;
 8001bd6:	bf00      	nop
 8001bd8:	e00a      	b.n	8001bf0 <System_Alarm_Setup_Mode_Handle+0x31c>
        break;
 8001bda:	bf00      	nop
 8001bdc:	e008      	b.n	8001bf0 <System_Alarm_Setup_Mode_Handle+0x31c>
      break;
 8001bde:	bf00      	nop
 8001be0:	e006      	b.n	8001bf0 <System_Alarm_Setup_Mode_Handle+0x31c>
          break;
 8001be2:	bf00      	nop
 8001be4:	e004      	b.n	8001bf0 <System_Alarm_Setup_Mode_Handle+0x31c>
        break;
 8001be6:	bf00      	nop
 8001be8:	e002      	b.n	8001bf0 <System_Alarm_Setup_Mode_Handle+0x31c>
      break;
 8001bea:	bf00      	nop
 8001bec:	e000      	b.n	8001bf0 <System_Alarm_Setup_Mode_Handle+0x31c>
      break;
 8001bee:	bf00      	nop
  }
}
 8001bf0:	bf00      	nop
 8001bf2:	3718      	adds	r7, #24
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bdb0      	pop	{r4, r5, r7, pc}
 8001bf8:	20000388 	.word	0x20000388

08001bfc <System_Alarm_View_Mode_Handle>:
 * @brief  Handles the alarm view mode based on button actions.
 * @param  button: Pointer to the BUTTON structure containing button state and index.
 * @retval None
 */
void System_Alarm_View_Mode_Handle (BUTTON_DATA *button)
{ 
 8001bfc:	b5b0      	push	{r4, r5, r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af04      	add	r7, sp, #16
 8001c02:	6078      	str	r0, [r7, #4]
  // Handle button actions in alarm view mode
  switch (button->index) 
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	799b      	ldrb	r3, [r3, #6]
 8001c08:	2b04      	cmp	r3, #4
 8001c0a:	f200 8115 	bhi.w	8001e38 <System_Alarm_View_Mode_Handle+0x23c>
 8001c0e:	a201      	add	r2, pc, #4	@ (adr r2, 8001c14 <System_Alarm_View_Mode_Handle+0x18>)
 8001c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c14:	08001c29 	.word	0x08001c29
 8001c18:	08001c53 	.word	0x08001c53
 8001c1c:	08001c7d 	.word	0x08001c7d
 8001c20:	08001d7d 	.word	0x08001d7d
 8001c24:	08001e21 	.word	0x08001e21
  {
    // Button 0: If pressed, increment the selection cursor; if held, do nothing (reserved for future use)
    case 0:
      if      (button->press_flag)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	7b5b      	ldrb	r3, [r3, #13]
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d00c      	beq.n	8001c4c <System_Alarm_View_Mode_Handle+0x50>
      {
        system_state.alarm_view_cursor = (system_state.alarm_view_cursor == ALARM_VIEW_CURSOR_MAX) ? 0 : (system_state.alarm_view_cursor + 1);
 8001c32:	4b87      	ldr	r3, [pc, #540]	@ (8001e50 <System_Alarm_View_Mode_Handle+0x254>)
 8001c34:	791b      	ldrb	r3, [r3, #4]
 8001c36:	2b09      	cmp	r3, #9
 8001c38:	d004      	beq.n	8001c44 <System_Alarm_View_Mode_Handle+0x48>
 8001c3a:	4b85      	ldr	r3, [pc, #532]	@ (8001e50 <System_Alarm_View_Mode_Handle+0x254>)
 8001c3c:	791b      	ldrb	r3, [r3, #4]
 8001c3e:	3301      	adds	r3, #1
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	e000      	b.n	8001c46 <System_Alarm_View_Mode_Handle+0x4a>
 8001c44:	2300      	movs	r3, #0
 8001c46:	4a82      	ldr	r2, [pc, #520]	@ (8001e50 <System_Alarm_View_Mode_Handle+0x254>)
 8001c48:	7113      	strb	r3, [r2, #4]
      }
      else if (button->hold_flag)
      {
        // Reserved
      }
      break;
 8001c4a:	e0fc      	b.n	8001e46 <System_Alarm_View_Mode_Handle+0x24a>
      else if (button->hold_flag)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	7b9b      	ldrb	r3, [r3, #14]
      break;
 8001c50:	e0f9      	b.n	8001e46 <System_Alarm_View_Mode_Handle+0x24a>

    // Button 1: If pressed, decrement the selection cursor; if held, do nothing (reserved for future use)
    case 1:
      if      (button->press_flag)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	7b5b      	ldrb	r3, [r3, #13]
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d00c      	beq.n	8001c76 <System_Alarm_View_Mode_Handle+0x7a>
      {
        system_state.alarm_view_cursor = (system_state.alarm_view_cursor == 0) ? ALARM_VIEW_CURSOR_MAX : (system_state.alarm_view_cursor - 1);
 8001c5c:	4b7c      	ldr	r3, [pc, #496]	@ (8001e50 <System_Alarm_View_Mode_Handle+0x254>)
 8001c5e:	791b      	ldrb	r3, [r3, #4]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d004      	beq.n	8001c6e <System_Alarm_View_Mode_Handle+0x72>
 8001c64:	4b7a      	ldr	r3, [pc, #488]	@ (8001e50 <System_Alarm_View_Mode_Handle+0x254>)
 8001c66:	791b      	ldrb	r3, [r3, #4]
 8001c68:	3b01      	subs	r3, #1
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	e000      	b.n	8001c70 <System_Alarm_View_Mode_Handle+0x74>
 8001c6e:	2309      	movs	r3, #9
 8001c70:	4a77      	ldr	r2, [pc, #476]	@ (8001e50 <System_Alarm_View_Mode_Handle+0x254>)
 8001c72:	7113      	strb	r3, [r2, #4]
      }
      else if (button->hold_flag)
      {
        // Reserved
      }
      break;
 8001c74:	e0e7      	b.n	8001e46 <System_Alarm_View_Mode_Handle+0x24a>
      else if (button->hold_flag)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	7b9b      	ldrb	r3, [r3, #14]
      break;
 8001c7a:	e0e4      	b.n	8001e46 <System_Alarm_View_Mode_Handle+0x24a>
    
    // Button 2: If pressed, toggle ON/OFF; if held, do nothing (reserved for future use)
    case 2:
      if      (button->press_flag)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	7b5b      	ldrb	r3, [r3, #13]
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f000 80da 	beq.w	8001e3c <System_Alarm_View_Mode_Handle+0x240>
      {
        // Retrieve the selected alarm data to system parameter data
        alarm_setup_data.minute  = alarm_get_data[system_state.alarm_view_cursor].minute;
 8001c88:	4b71      	ldr	r3, [pc, #452]	@ (8001e50 <System_Alarm_View_Mode_Handle+0x254>)
 8001c8a:	791b      	ldrb	r3, [r3, #4]
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4a71      	ldr	r2, [pc, #452]	@ (8001e54 <System_Alarm_View_Mode_Handle+0x258>)
 8001c90:	460b      	mov	r3, r1
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	440b      	add	r3, r1
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	4413      	add	r3, r2
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	4b6d      	ldr	r3, [pc, #436]	@ (8001e58 <System_Alarm_View_Mode_Handle+0x25c>)
 8001ca2:	701a      	strb	r2, [r3, #0]
        alarm_setup_data.hour    = alarm_get_data[system_state.alarm_view_cursor].hour;
 8001ca4:	4b6a      	ldr	r3, [pc, #424]	@ (8001e50 <System_Alarm_View_Mode_Handle+0x254>)
 8001ca6:	791b      	ldrb	r3, [r3, #4]
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4a6a      	ldr	r2, [pc, #424]	@ (8001e54 <System_Alarm_View_Mode_Handle+0x258>)
 8001cac:	460b      	mov	r3, r1
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	440b      	add	r3, r1
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	4413      	add	r3, r2
 8001cb6:	3302      	adds	r3, #2
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	b2da      	uxtb	r2, r3
 8001cbc:	4b66      	ldr	r3, [pc, #408]	@ (8001e58 <System_Alarm_View_Mode_Handle+0x25c>)
 8001cbe:	705a      	strb	r2, [r3, #1]
        alarm_setup_data.dy_dt   = alarm_get_data[system_state.alarm_view_cursor].dy_dt;
 8001cc0:	4b63      	ldr	r3, [pc, #396]	@ (8001e50 <System_Alarm_View_Mode_Handle+0x254>)
 8001cc2:	791b      	ldrb	r3, [r3, #4]
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4a63      	ldr	r2, [pc, #396]	@ (8001e54 <System_Alarm_View_Mode_Handle+0x258>)
 8001cc8:	460b      	mov	r3, r1
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	440b      	add	r3, r1
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	4413      	add	r3, r2
 8001cd2:	3303      	adds	r3, #3
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	b2da      	uxtb	r2, r3
 8001cd8:	4b5f      	ldr	r3, [pc, #380]	@ (8001e58 <System_Alarm_View_Mode_Handle+0x25c>)
 8001cda:	709a      	strb	r2, [r3, #2]
        alarm_setup_data.dow_dom = alarm_get_data[system_state.alarm_view_cursor].dow_dom;
 8001cdc:	4b5c      	ldr	r3, [pc, #368]	@ (8001e50 <System_Alarm_View_Mode_Handle+0x254>)
 8001cde:	791b      	ldrb	r3, [r3, #4]
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4a5c      	ldr	r2, [pc, #368]	@ (8001e54 <System_Alarm_View_Mode_Handle+0x258>)
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	440b      	add	r3, r1
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	4413      	add	r3, r2
 8001cee:	3304      	adds	r3, #4
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	b2da      	uxtb	r2, r3
 8001cf4:	4b58      	ldr	r3, [pc, #352]	@ (8001e58 <System_Alarm_View_Mode_Handle+0x25c>)
 8001cf6:	70da      	strb	r2, [r3, #3]
        alarm_setup_data.on_off  = alarm_get_data[system_state.alarm_view_cursor].on_off;
 8001cf8:	4b55      	ldr	r3, [pc, #340]	@ (8001e50 <System_Alarm_View_Mode_Handle+0x254>)
 8001cfa:	791b      	ldrb	r3, [r3, #4]
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4a55      	ldr	r2, [pc, #340]	@ (8001e54 <System_Alarm_View_Mode_Handle+0x258>)
 8001d00:	460b      	mov	r3, r1
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	440b      	add	r3, r1
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	4413      	add	r3, r2
 8001d0a:	3305      	adds	r3, #5
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	b2da      	uxtb	r2, r3
 8001d10:	4b51      	ldr	r3, [pc, #324]	@ (8001e58 <System_Alarm_View_Mode_Handle+0x25c>)
 8001d12:	711a      	strb	r2, [r3, #4]

        // Toggle ON/OFF data
        alarm_setup_data.on_off = !alarm_setup_data.on_off;
 8001d14:	4b50      	ldr	r3, [pc, #320]	@ (8001e58 <System_Alarm_View_Mode_Handle+0x25c>)
 8001d16:	791b      	ldrb	r3, [r3, #4]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	bf14      	ite	ne
 8001d1c:	2301      	movne	r3, #1
 8001d1e:	2300      	moveq	r3, #0
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	f083 0301 	eor.w	r3, r3, #1
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	f003 0301 	and.w	r3, r3, #1
 8001d2c:	b2da      	uxtb	r2, r3
 8001d2e:	4b4a      	ldr	r3, [pc, #296]	@ (8001e58 <System_Alarm_View_Mode_Handle+0x25c>)
 8001d30:	711a      	strb	r2, [r3, #4]

        // Save the modified alarm to the EEPROM module
        //    void Alarm_Set (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow_dom, ALARM_DY_DT_MODE dy_dt, uint8_t on_off, uint8_t slot)
        Alarm_Set
 8001d32:	4b49      	ldr	r3, [pc, #292]	@ (8001e58 <System_Alarm_View_Mode_Handle+0x25c>)
 8001d34:	7818      	ldrb	r0, [r3, #0]
 8001d36:	4b48      	ldr	r3, [pc, #288]	@ (8001e58 <System_Alarm_View_Mode_Handle+0x25c>)
 8001d38:	785c      	ldrb	r4, [r3, #1]
 8001d3a:	4b47      	ldr	r3, [pc, #284]	@ (8001e58 <System_Alarm_View_Mode_Handle+0x25c>)
 8001d3c:	78dd      	ldrb	r5, [r3, #3]
 8001d3e:	4b46      	ldr	r3, [pc, #280]	@ (8001e58 <System_Alarm_View_Mode_Handle+0x25c>)
 8001d40:	789b      	ldrb	r3, [r3, #2]
 8001d42:	4a45      	ldr	r2, [pc, #276]	@ (8001e58 <System_Alarm_View_Mode_Handle+0x25c>)
 8001d44:	7912      	ldrb	r2, [r2, #4]
 8001d46:	4942      	ldr	r1, [pc, #264]	@ (8001e50 <System_Alarm_View_Mode_Handle+0x254>)
 8001d48:	7909      	ldrb	r1, [r1, #4]
 8001d4a:	9102      	str	r1, [sp, #8]
 8001d4c:	9201      	str	r2, [sp, #4]
 8001d4e:	9300      	str	r3, [sp, #0]
 8001d50:	462b      	mov	r3, r5
 8001d52:	4622      	mov	r2, r4
 8001d54:	4601      	mov	r1, r0
 8001d56:	2000      	movs	r0, #0
 8001d58:	f7ff f936 	bl	8000fc8 <Alarm_Set>
          alarm_setup_data.on_off,
          system_state.alarm_view_cursor   
        );

        // Update the newly set alarm data
        Alarm_Get(system_state.alarm_view_cursor, &alarm_get_data[system_state.alarm_view_cursor]);
 8001d5c:	4b3c      	ldr	r3, [pc, #240]	@ (8001e50 <System_Alarm_View_Mode_Handle+0x254>)
 8001d5e:	791a      	ldrb	r2, [r3, #4]
 8001d60:	4b3b      	ldr	r3, [pc, #236]	@ (8001e50 <System_Alarm_View_Mode_Handle+0x254>)
 8001d62:	791b      	ldrb	r3, [r3, #4]
 8001d64:	4619      	mov	r1, r3
 8001d66:	460b      	mov	r3, r1
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	440b      	add	r3, r1
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	4939      	ldr	r1, [pc, #228]	@ (8001e54 <System_Alarm_View_Mode_Handle+0x258>)
 8001d70:	440b      	add	r3, r1
 8001d72:	4619      	mov	r1, r3
 8001d74:	4610      	mov	r0, r2
 8001d76:	f7ff f977 	bl	8001068 <Alarm_Get>
      //   system_param_data.on_off  = alarm_get_data[system_state.cursor].on_off;

      //   // System switches to Alarm Setup Mode
      //   system_state.mode = ALARM_SETUP_MODE;
      // }
      break;
 8001d7a:	e05f      	b.n	8001e3c <System_Alarm_View_Mode_Handle+0x240>

    // Button 3: If pressed, enter Alarm Setup Mode with selected alarm data preloaded (for editing); if held, do nothing (reserved for future use)
    case 3: 
      if      (button->press_flag)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	7b5b      	ldrb	r3, [r3, #13]
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d05c      	beq.n	8001e40 <System_Alarm_View_Mode_Handle+0x244>
      {
        // Retrieve the selected alarm data to system parameter data
        alarm_setup_data.minute  = alarm_get_data[system_state.alarm_view_cursor].minute;
 8001d86:	4b32      	ldr	r3, [pc, #200]	@ (8001e50 <System_Alarm_View_Mode_Handle+0x254>)
 8001d88:	791b      	ldrb	r3, [r3, #4]
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4a31      	ldr	r2, [pc, #196]	@ (8001e54 <System_Alarm_View_Mode_Handle+0x258>)
 8001d8e:	460b      	mov	r3, r1
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	440b      	add	r3, r1
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	4413      	add	r3, r2
 8001d98:	3301      	adds	r3, #1
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	b2da      	uxtb	r2, r3
 8001d9e:	4b2e      	ldr	r3, [pc, #184]	@ (8001e58 <System_Alarm_View_Mode_Handle+0x25c>)
 8001da0:	701a      	strb	r2, [r3, #0]
        alarm_setup_data.hour    = alarm_get_data[system_state.alarm_view_cursor].hour;
 8001da2:	4b2b      	ldr	r3, [pc, #172]	@ (8001e50 <System_Alarm_View_Mode_Handle+0x254>)
 8001da4:	791b      	ldrb	r3, [r3, #4]
 8001da6:	4619      	mov	r1, r3
 8001da8:	4a2a      	ldr	r2, [pc, #168]	@ (8001e54 <System_Alarm_View_Mode_Handle+0x258>)
 8001daa:	460b      	mov	r3, r1
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	440b      	add	r3, r1
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	4413      	add	r3, r2
 8001db4:	3302      	adds	r3, #2
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	b2da      	uxtb	r2, r3
 8001dba:	4b27      	ldr	r3, [pc, #156]	@ (8001e58 <System_Alarm_View_Mode_Handle+0x25c>)
 8001dbc:	705a      	strb	r2, [r3, #1]
        alarm_setup_data.dy_dt   = alarm_get_data[system_state.alarm_view_cursor].dy_dt;
 8001dbe:	4b24      	ldr	r3, [pc, #144]	@ (8001e50 <System_Alarm_View_Mode_Handle+0x254>)
 8001dc0:	791b      	ldrb	r3, [r3, #4]
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4a23      	ldr	r2, [pc, #140]	@ (8001e54 <System_Alarm_View_Mode_Handle+0x258>)
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	440b      	add	r3, r1
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	4413      	add	r3, r2
 8001dd0:	3303      	adds	r3, #3
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	b2da      	uxtb	r2, r3
 8001dd6:	4b20      	ldr	r3, [pc, #128]	@ (8001e58 <System_Alarm_View_Mode_Handle+0x25c>)
 8001dd8:	709a      	strb	r2, [r3, #2]
        alarm_setup_data.dow_dom = alarm_get_data[system_state.alarm_view_cursor].dow_dom;
 8001dda:	4b1d      	ldr	r3, [pc, #116]	@ (8001e50 <System_Alarm_View_Mode_Handle+0x254>)
 8001ddc:	791b      	ldrb	r3, [r3, #4]
 8001dde:	4619      	mov	r1, r3
 8001de0:	4a1c      	ldr	r2, [pc, #112]	@ (8001e54 <System_Alarm_View_Mode_Handle+0x258>)
 8001de2:	460b      	mov	r3, r1
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	440b      	add	r3, r1
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	4413      	add	r3, r2
 8001dec:	3304      	adds	r3, #4
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	4b19      	ldr	r3, [pc, #100]	@ (8001e58 <System_Alarm_View_Mode_Handle+0x25c>)
 8001df4:	70da      	strb	r2, [r3, #3]
        alarm_setup_data.on_off  = alarm_get_data[system_state.alarm_view_cursor].on_off;
 8001df6:	4b16      	ldr	r3, [pc, #88]	@ (8001e50 <System_Alarm_View_Mode_Handle+0x254>)
 8001df8:	791b      	ldrb	r3, [r3, #4]
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4a15      	ldr	r2, [pc, #84]	@ (8001e54 <System_Alarm_View_Mode_Handle+0x258>)
 8001dfe:	460b      	mov	r3, r1
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	440b      	add	r3, r1
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	4413      	add	r3, r2
 8001e08:	3305      	adds	r3, #5
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	b2da      	uxtb	r2, r3
 8001e0e:	4b12      	ldr	r3, [pc, #72]	@ (8001e58 <System_Alarm_View_Mode_Handle+0x25c>)
 8001e10:	711a      	strb	r2, [r3, #4]

        // System switches to Alarm Setup Mode
        system_state.mode = ALARM_SETUP_MODE;
 8001e12:	4b0f      	ldr	r3, [pc, #60]	@ (8001e50 <System_Alarm_View_Mode_Handle+0x254>)
 8001e14:	2202      	movs	r2, #2
 8001e16:	701a      	strb	r2, [r3, #0]

        // Set the system past mode to alarm view mode
        system_state.past_mode = ALARM_VIEW_MODE;
 8001e18:	4b0d      	ldr	r3, [pc, #52]	@ (8001e50 <System_Alarm_View_Mode_Handle+0x254>)
 8001e1a:	2203      	movs	r2, #3
 8001e1c:	705a      	strb	r2, [r3, #1]
      //   Alarm_Clear(system_state.cursor);

      //   // Update alarm data
      //   Alarm_Get(system_state.cursor, &alarm_get_data[system_state.cursor]);
      // }
      break;
 8001e1e:	e00f      	b.n	8001e40 <System_Alarm_View_Mode_Handle+0x244>

    // Button 4: If pressed, cycle through the time setup fields; if held, do nothing (reserved for future use)
    case 4:
      // If pressed, cycle to the next system mode
      if (button->press_flag)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	7b5b      	ldrb	r3, [r3, #13]
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d00c      	beq.n	8001e44 <System_Alarm_View_Mode_Handle+0x248>
      {
        // Cycle through the next system mode
        system_state.mode = SYSTEM_OPTIONS_MODE;
 8001e2a:	4b09      	ldr	r3, [pc, #36]	@ (8001e50 <System_Alarm_View_Mode_Handle+0x254>)
 8001e2c:	2205      	movs	r2, #5
 8001e2e:	701a      	strb	r2, [r3, #0]

        // Set the system past mode to alarm view mode
        system_state.past_mode = ALARM_VIEW_MODE;
 8001e30:	4b07      	ldr	r3, [pc, #28]	@ (8001e50 <System_Alarm_View_Mode_Handle+0x254>)
 8001e32:	2203      	movs	r2, #3
 8001e34:	705a      	strb	r2, [r3, #1]
      // else if (button->hold_flag && !button->latch)
      // {
      //   system_state.mode = DEFAULT_MODE; 
      //   button->latch = true;
      // }
      break;
 8001e36:	e005      	b.n	8001e44 <System_Alarm_View_Mode_Handle+0x248>

    default: 
      break;
 8001e38:	bf00      	nop
 8001e3a:	e004      	b.n	8001e46 <System_Alarm_View_Mode_Handle+0x24a>
      break;
 8001e3c:	bf00      	nop
 8001e3e:	e002      	b.n	8001e46 <System_Alarm_View_Mode_Handle+0x24a>
      break;
 8001e40:	bf00      	nop
 8001e42:	e000      	b.n	8001e46 <System_Alarm_View_Mode_Handle+0x24a>
      break;
 8001e44:	bf00      	nop
  }
}
 8001e46:	bf00      	nop
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bdb0      	pop	{r4, r5, r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	20000388 	.word	0x20000388
 8001e54:	200003a8 	.word	0x200003a8
 8001e58:	20000398 	.word	0x20000398

08001e5c <System_Options_Mode_Handle>:
 * @brief  Handles the system options mode based on button actions.
 * @param  button: Pointer to the BUTTON structure containing button state and index.
 * @retval None
 */
void System_Options_Mode_Handle (BUTTON_DATA *button)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  switch (button->index) 
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	799b      	ldrb	r3, [r3, #6]
 8001e68:	2b04      	cmp	r3, #4
 8001e6a:	d87e      	bhi.n	8001f6a <System_Options_Mode_Handle+0x10e>
 8001e6c:	a201      	add	r2, pc, #4	@ (adr r2, 8001e74 <System_Options_Mode_Handle+0x18>)
 8001e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e72:	bf00      	nop
 8001e74:	08001e89 	.word	0x08001e89
 8001e78:	08001eb3 	.word	0x08001eb3
 8001e7c:	08001edd 	.word	0x08001edd
 8001e80:	08001f43 	.word	0x08001f43
 8001e84:	08001f53 	.word	0x08001f53
  {
    // Button 0: If pressed, increment the selection cursor; if held, do nothing (reserved for future use)
    case 0:
      if      (button->press_flag)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	7b5b      	ldrb	r3, [r3, #13]
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d00c      	beq.n	8001eac <System_Options_Mode_Handle+0x50>
      {
        system_state.system_opt_cursor = (system_state.system_opt_cursor == SYSTEM_OPT_CURSOR_MAX) ? 0 : (system_state.system_opt_cursor + 1);
 8001e92:	4b3a      	ldr	r3, [pc, #232]	@ (8001f7c <System_Options_Mode_Handle+0x120>)
 8001e94:	795b      	ldrb	r3, [r3, #5]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d004      	beq.n	8001ea4 <System_Options_Mode_Handle+0x48>
 8001e9a:	4b38      	ldr	r3, [pc, #224]	@ (8001f7c <System_Options_Mode_Handle+0x120>)
 8001e9c:	795b      	ldrb	r3, [r3, #5]
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	e000      	b.n	8001ea6 <System_Options_Mode_Handle+0x4a>
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	4a35      	ldr	r2, [pc, #212]	@ (8001f7c <System_Options_Mode_Handle+0x120>)
 8001ea8:	7153      	strb	r3, [r2, #5]
      }
      else if (button->hold_flag)
      {
        // Reserved
      }
      break;
 8001eaa:	e063      	b.n	8001f74 <System_Options_Mode_Handle+0x118>
      else if (button->hold_flag)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	7b9b      	ldrb	r3, [r3, #14]
      break;
 8001eb0:	e060      	b.n	8001f74 <System_Options_Mode_Handle+0x118>
    
    // Button 1: If pressed, decrement the selection cursor; if held, do nothing (reserved for future use)
    case 1:
      if      (button->press_flag)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	7b5b      	ldrb	r3, [r3, #13]
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d00c      	beq.n	8001ed6 <System_Options_Mode_Handle+0x7a>
      {
        system_state.system_opt_cursor = (system_state.system_opt_cursor == 0) ? SYSTEM_OPT_CURSOR_MAX : (system_state.system_opt_cursor - 1);
 8001ebc:	4b2f      	ldr	r3, [pc, #188]	@ (8001f7c <System_Options_Mode_Handle+0x120>)
 8001ebe:	795b      	ldrb	r3, [r3, #5]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d004      	beq.n	8001ece <System_Options_Mode_Handle+0x72>
 8001ec4:	4b2d      	ldr	r3, [pc, #180]	@ (8001f7c <System_Options_Mode_Handle+0x120>)
 8001ec6:	795b      	ldrb	r3, [r3, #5]
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	e000      	b.n	8001ed0 <System_Options_Mode_Handle+0x74>
 8001ece:	2301      	movs	r3, #1
 8001ed0:	4a2a      	ldr	r2, [pc, #168]	@ (8001f7c <System_Options_Mode_Handle+0x120>)
 8001ed2:	7153      	strb	r3, [r2, #5]
      }
      else if (button->hold_flag)
      {
        // Reserved
      }
      break;
 8001ed4:	e04e      	b.n	8001f74 <System_Options_Mode_Handle+0x118>
      else if (button->hold_flag)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	7b9b      	ldrb	r3, [r3, #14]
      break;
 8001eda:	e04b      	b.n	8001f74 <System_Options_Mode_Handle+0x118>
    
    // Button 2: If pressed, operate the selected option; if held, do nothing (reserved for future use)
    case 2:
      if      (button->press_flag)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	7b5b      	ldrb	r3, [r3, #13]
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d029      	beq.n	8001f3a <System_Options_Mode_Handle+0xde>
      {
        switch (system_state.system_opt_cursor)
 8001ee6:	4b25      	ldr	r3, [pc, #148]	@ (8001f7c <System_Options_Mode_Handle+0x120>)
 8001ee8:	795b      	ldrb	r3, [r3, #5]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d002      	beq.n	8001ef4 <System_Options_Mode_Handle+0x98>
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d020      	beq.n	8001f34 <System_Options_Mode_Handle+0xd8>
            E_ink_display_name();
            
            break;

          default:
            break;
 8001ef2:	e025      	b.n	8001f40 <System_Options_Mode_Handle+0xe4>
            for (int i = 0; i < ALARM_SLOT_NUM; i++)
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	60fb      	str	r3, [r7, #12]
 8001ef8:	e013      	b.n	8001f22 <System_Options_Mode_Handle+0xc6>
              Alarm_Clear(i);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7ff f908 	bl	8001114 <Alarm_Clear>
              Alarm_Get(i, &alarm_get_data[i]);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	b2d8      	uxtb	r0, r3
 8001f08:	68fa      	ldr	r2, [r7, #12]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	4413      	add	r3, r2
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	4a1b      	ldr	r2, [pc, #108]	@ (8001f80 <System_Options_Mode_Handle+0x124>)
 8001f14:	4413      	add	r3, r2
 8001f16:	4619      	mov	r1, r3
 8001f18:	f7ff f8a6 	bl	8001068 <Alarm_Get>
            for (int i = 0; i < ALARM_SLOT_NUM; i++)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2b09      	cmp	r3, #9
 8001f26:	dde8      	ble.n	8001efa <System_Options_Mode_Handle+0x9e>
            alarm_slot_ptr = 0;
 8001f28:	4b16      	ldr	r3, [pc, #88]	@ (8001f84 <System_Options_Mode_Handle+0x128>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	701a      	strb	r2, [r3, #0]
            Alarm_Slot_Pointer_Set();
 8001f2e:	f7ff f913 	bl	8001158 <Alarm_Slot_Pointer_Set>
            break;
 8001f32:	e005      	b.n	8001f40 <System_Options_Mode_Handle+0xe4>
            E_ink_display_name();
 8001f34:	f007 fc62 	bl	80097fc <E_ink_display_name>
            break;
 8001f38:	e002      	b.n	8001f40 <System_Options_Mode_Handle+0xe4>
        }
      }
      else if (button->hold_flag)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	7b9b      	ldrb	r3, [r3, #14]
      {
        // Reserved
      }
      break;
 8001f3e:	e019      	b.n	8001f74 <System_Options_Mode_Handle+0x118>
 8001f40:	e018      	b.n	8001f74 <System_Options_Mode_Handle+0x118>

    case 3: 
      if      (button->press_flag)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	7b5b      	ldrb	r3, [r3, #13]
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d110      	bne.n	8001f6e <System_Options_Mode_Handle+0x112>
      {

      }
      else if (button->hold_flag)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	7b9b      	ldrb	r3, [r3, #14]
      {
        // Reserved
      }
      break;
 8001f50:	e00d      	b.n	8001f6e <System_Options_Mode_Handle+0x112>
    
    // Button 4: If pressed, cycle through the time setup fields; if held, do nothing (reserved for future use)
    case 4:
      // If pressed, cycle through the next system mode
      if      (button->press_flag)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	7b5b      	ldrb	r3, [r3, #13]
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d00a      	beq.n	8001f72 <System_Options_Mode_Handle+0x116>
      {
        // system_state.mode = (system_state.mode < (SYSTEM_MODE_NUM - 1)) ? (system_state.mode + 1) : 0;

        // Cycle through the next system mode
        system_state.mode = DEFAULT_MODE;
 8001f5c:	4b07      	ldr	r3, [pc, #28]	@ (8001f7c <System_Options_Mode_Handle+0x120>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	701a      	strb	r2, [r3, #0]

        // Set the system past mode to system options mode
        system_state.past_mode = SYSTEM_OPTIONS_MODE;
 8001f62:	4b06      	ldr	r3, [pc, #24]	@ (8001f7c <System_Options_Mode_Handle+0x120>)
 8001f64:	2205      	movs	r2, #5
 8001f66:	705a      	strb	r2, [r3, #1]
      // // If held, set the mode to default
      // else if (button->hold_flag)
      // {
      //   system_state.mode = DEFAULT_MODE;
      // }
      break;
 8001f68:	e003      	b.n	8001f72 <System_Options_Mode_Handle+0x116>

    default: 
      break;
 8001f6a:	bf00      	nop
 8001f6c:	e002      	b.n	8001f74 <System_Options_Mode_Handle+0x118>
      break;
 8001f6e:	bf00      	nop
 8001f70:	e000      	b.n	8001f74 <System_Options_Mode_Handle+0x118>
      break;
 8001f72:	bf00      	nop
  }
}
 8001f74:	bf00      	nop
 8001f76:	3710      	adds	r7, #16
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	20000388 	.word	0x20000388
 8001f80:	200003a8 	.word	0x200003a8
 8001f84:	200003e4 	.word	0x200003e4

08001f88 <System_Alarm_Active_Mode_Handle>:
 * @brief  Handles the alarm active mode based on button actions.
 * @param  button: Pointer to the BUTTON structure containing button state and index.
 * @retval None
 */
void System_Alarm_Active_Mode_Handle (BUTTON_DATA *button)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  // Handle button actions in alarm active mode
  switch (button->index) 
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	799b      	ldrb	r3, [r3, #6]
 8001f94:	2b04      	cmp	r3, #4
 8001f96:	f200 808a 	bhi.w	80020ae <System_Alarm_Active_Mode_Handle+0x126>
 8001f9a:	a201      	add	r2, pc, #4	@ (adr r2, 8001fa0 <System_Alarm_Active_Mode_Handle+0x18>)
 8001f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fa0:	08001fb5 	.word	0x08001fb5
 8001fa4:	08001fef 	.word	0x08001fef
 8001fa8:	0800201f 	.word	0x0800201f
 8001fac:	0800204f 	.word	0x0800204f
 8001fb0:	0800207f 	.word	0x0800207f
  {
    // Button 0: If pressed, stop ringing the alarm; if held, do nothing (reserved for future use)
    case 0:
      // If pressed, cycle through the time setup fields
      if (button->press_flag)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	7b5b      	ldrb	r3, [r3, #13]
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00f      	beq.n	8001fde <System_Alarm_Active_Mode_Handle+0x56>
      {
        // Stop ringing the alarm
        alarm_active_flag = false; 
 8001fbe:	4b3f      	ldr	r3, [pc, #252]	@ (80020bc <System_Alarm_Active_Mode_Handle+0x134>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	701a      	strb	r2, [r3, #0]

        // Return to the previous mode
        system_state.mode = system_state.past_mode; 
 8001fc4:	4b3e      	ldr	r3, [pc, #248]	@ (80020c0 <System_Alarm_Active_Mode_Handle+0x138>)
 8001fc6:	785a      	ldrb	r2, [r3, #1]
 8001fc8:	4b3d      	ldr	r3, [pc, #244]	@ (80020c0 <System_Alarm_Active_Mode_Handle+0x138>)
 8001fca:	701a      	strb	r2, [r3, #0]

        // Set the system past mode to alarm active mode
        system_state.past_mode = ALARM_ACTIVE_MODE; 
 8001fcc:	4b3c      	ldr	r3, [pc, #240]	@ (80020c0 <System_Alarm_Active_Mode_Handle+0x138>)
 8001fce:	2204      	movs	r2, #4
 8001fd0:	705a      	strb	r2, [r3, #1]

        // Reset the buzzer
        HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, BUZZER_INACTIVE); 
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	483b      	ldr	r0, [pc, #236]	@ (80020c4 <System_Alarm_Active_Mode_Handle+0x13c>)
 8001fd8:	f001 fda3 	bl	8003b22 <HAL_GPIO_WritePin>
      // If held, do nothing (reserved for future use)
      else if (button->hold_flag && !button->latch)
      {
        // Reserved
      }
      break;
 8001fdc:	e069      	b.n	80020b2 <System_Alarm_Active_Mode_Handle+0x12a>
      else if (button->hold_flag && !button->latch)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	7b9b      	ldrb	r3, [r3, #14]
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d064      	beq.n	80020b2 <System_Alarm_Active_Mode_Handle+0x12a>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	7bdb      	ldrb	r3, [r3, #15]
      break;
 8001fec:	e061      	b.n	80020b2 <System_Alarm_Active_Mode_Handle+0x12a>

    // Button 1: If pressed, stop ringing the alarm; if held, do nothing (reserved for future use)
    case 1:
      if      (button->press_flag)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	7b5b      	ldrb	r3, [r3, #13]
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d00f      	beq.n	8002018 <System_Alarm_Active_Mode_Handle+0x90>
      {
        // Stop ringing the alarm
        alarm_active_flag = false;  
 8001ff8:	4b30      	ldr	r3, [pc, #192]	@ (80020bc <System_Alarm_Active_Mode_Handle+0x134>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	701a      	strb	r2, [r3, #0]

        // Return to the previous mode
        system_state.mode = system_state.past_mode; 
 8001ffe:	4b30      	ldr	r3, [pc, #192]	@ (80020c0 <System_Alarm_Active_Mode_Handle+0x138>)
 8002000:	785a      	ldrb	r2, [r3, #1]
 8002002:	4b2f      	ldr	r3, [pc, #188]	@ (80020c0 <System_Alarm_Active_Mode_Handle+0x138>)
 8002004:	701a      	strb	r2, [r3, #0]

        // Set the system past mode to alarm active mode
        system_state.past_mode = ALARM_ACTIVE_MODE; 
 8002006:	4b2e      	ldr	r3, [pc, #184]	@ (80020c0 <System_Alarm_Active_Mode_Handle+0x138>)
 8002008:	2204      	movs	r2, #4
 800200a:	705a      	strb	r2, [r3, #1]

        // Reset the buzzer
        HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, BUZZER_INACTIVE); 
 800200c:	2200      	movs	r2, #0
 800200e:	2101      	movs	r1, #1
 8002010:	482c      	ldr	r0, [pc, #176]	@ (80020c4 <System_Alarm_Active_Mode_Handle+0x13c>)
 8002012:	f001 fd86 	bl	8003b22 <HAL_GPIO_WritePin>
      }
      else if (button->hold_flag)
      {
        // Reserved 
      }
      break;
 8002016:	e04d      	b.n	80020b4 <System_Alarm_Active_Mode_Handle+0x12c>
      else if (button->hold_flag)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	7b9b      	ldrb	r3, [r3, #14]
      break;
 800201c:	e04a      	b.n	80020b4 <System_Alarm_Active_Mode_Handle+0x12c>

    // Button 2: If pressed, stop ringing the alarm; if held, do nothing (reserved for future use)
    case 2:
      if      (button->press_flag)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	7b5b      	ldrb	r3, [r3, #13]
 8002022:	b2db      	uxtb	r3, r3
 8002024:	2b00      	cmp	r3, #0
 8002026:	d00f      	beq.n	8002048 <System_Alarm_Active_Mode_Handle+0xc0>
      {
        // Stop ringing the alarm
        alarm_active_flag = false;  
 8002028:	4b24      	ldr	r3, [pc, #144]	@ (80020bc <System_Alarm_Active_Mode_Handle+0x134>)
 800202a:	2200      	movs	r2, #0
 800202c:	701a      	strb	r2, [r3, #0]

        // Return to the previous mode
        system_state.mode = system_state.past_mode; 
 800202e:	4b24      	ldr	r3, [pc, #144]	@ (80020c0 <System_Alarm_Active_Mode_Handle+0x138>)
 8002030:	785a      	ldrb	r2, [r3, #1]
 8002032:	4b23      	ldr	r3, [pc, #140]	@ (80020c0 <System_Alarm_Active_Mode_Handle+0x138>)
 8002034:	701a      	strb	r2, [r3, #0]

        // Set the system past mode to alarm active mode
        system_state.past_mode = ALARM_ACTIVE_MODE; 
 8002036:	4b22      	ldr	r3, [pc, #136]	@ (80020c0 <System_Alarm_Active_Mode_Handle+0x138>)
 8002038:	2204      	movs	r2, #4
 800203a:	705a      	strb	r2, [r3, #1]

        // Reset the buzzer
        HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, BUZZER_INACTIVE); 
 800203c:	2200      	movs	r2, #0
 800203e:	2101      	movs	r1, #1
 8002040:	4820      	ldr	r0, [pc, #128]	@ (80020c4 <System_Alarm_Active_Mode_Handle+0x13c>)
 8002042:	f001 fd6e 	bl	8003b22 <HAL_GPIO_WritePin>
      }
      else if (button->hold_flag)
      {
        // Reserved
      }
      break;
 8002046:	e035      	b.n	80020b4 <System_Alarm_Active_Mode_Handle+0x12c>
      else if (button->hold_flag)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	7b9b      	ldrb	r3, [r3, #14]
      break;
 800204c:	e032      	b.n	80020b4 <System_Alarm_Active_Mode_Handle+0x12c>
    
    // Button 3: If pressed, stop ringing the alarm; if held, do nothing (reserved for future use)
    case 3:
      if      (button->press_flag)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	7b5b      	ldrb	r3, [r3, #13]
 8002052:	b2db      	uxtb	r3, r3
 8002054:	2b00      	cmp	r3, #0
 8002056:	d00f      	beq.n	8002078 <System_Alarm_Active_Mode_Handle+0xf0>
      {
        // Stop ringing the alarm
        alarm_active_flag = false;  
 8002058:	4b18      	ldr	r3, [pc, #96]	@ (80020bc <System_Alarm_Active_Mode_Handle+0x134>)
 800205a:	2200      	movs	r2, #0
 800205c:	701a      	strb	r2, [r3, #0]

        // Return to the previous mode
        system_state.mode = system_state.past_mode; 
 800205e:	4b18      	ldr	r3, [pc, #96]	@ (80020c0 <System_Alarm_Active_Mode_Handle+0x138>)
 8002060:	785a      	ldrb	r2, [r3, #1]
 8002062:	4b17      	ldr	r3, [pc, #92]	@ (80020c0 <System_Alarm_Active_Mode_Handle+0x138>)
 8002064:	701a      	strb	r2, [r3, #0]

        // Set the system past mode to alarm active mode
        system_state.past_mode = ALARM_ACTIVE_MODE; 
 8002066:	4b16      	ldr	r3, [pc, #88]	@ (80020c0 <System_Alarm_Active_Mode_Handle+0x138>)
 8002068:	2204      	movs	r2, #4
 800206a:	705a      	strb	r2, [r3, #1]

        // Reset the buzzer
        HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, BUZZER_INACTIVE); 
 800206c:	2200      	movs	r2, #0
 800206e:	2101      	movs	r1, #1
 8002070:	4814      	ldr	r0, [pc, #80]	@ (80020c4 <System_Alarm_Active_Mode_Handle+0x13c>)
 8002072:	f001 fd56 	bl	8003b22 <HAL_GPIO_WritePin>
      }
      else if (button->hold_flag)
      {
        // Reserved
      }
      break;
 8002076:	e01d      	b.n	80020b4 <System_Alarm_Active_Mode_Handle+0x12c>
      else if (button->hold_flag)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	7b9b      	ldrb	r3, [r3, #14]
      break;
 800207c:	e01a      	b.n	80020b4 <System_Alarm_Active_Mode_Handle+0x12c>

    // Button 4: If pressed, stop ringing the alarm; if held, do nothing (reserved for future use)
    case 4: 
      if      (button->press_flag)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	7b5b      	ldrb	r3, [r3, #13]
 8002082:	b2db      	uxtb	r3, r3
 8002084:	2b00      	cmp	r3, #0
 8002086:	d00f      	beq.n	80020a8 <System_Alarm_Active_Mode_Handle+0x120>
      {
        // Stop ringing the alarm
        alarm_active_flag = false;  
 8002088:	4b0c      	ldr	r3, [pc, #48]	@ (80020bc <System_Alarm_Active_Mode_Handle+0x134>)
 800208a:	2200      	movs	r2, #0
 800208c:	701a      	strb	r2, [r3, #0]

        // Return to the previous mode
        system_state.mode = system_state.past_mode; 
 800208e:	4b0c      	ldr	r3, [pc, #48]	@ (80020c0 <System_Alarm_Active_Mode_Handle+0x138>)
 8002090:	785a      	ldrb	r2, [r3, #1]
 8002092:	4b0b      	ldr	r3, [pc, #44]	@ (80020c0 <System_Alarm_Active_Mode_Handle+0x138>)
 8002094:	701a      	strb	r2, [r3, #0]

        // Set the system past mode to alarm active mode
        system_state.past_mode = ALARM_ACTIVE_MODE; 
 8002096:	4b0a      	ldr	r3, [pc, #40]	@ (80020c0 <System_Alarm_Active_Mode_Handle+0x138>)
 8002098:	2204      	movs	r2, #4
 800209a:	705a      	strb	r2, [r3, #1]

        // Reset the buzzer
        HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, BUZZER_INACTIVE); 
 800209c:	2200      	movs	r2, #0
 800209e:	2101      	movs	r1, #1
 80020a0:	4808      	ldr	r0, [pc, #32]	@ (80020c4 <System_Alarm_Active_Mode_Handle+0x13c>)
 80020a2:	f001 fd3e 	bl	8003b22 <HAL_GPIO_WritePin>
      }
      else if (button->hold_flag)
      {
        // Reserved
      }
      break;
 80020a6:	e005      	b.n	80020b4 <System_Alarm_Active_Mode_Handle+0x12c>
      else if (button->hold_flag)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	7b9b      	ldrb	r3, [r3, #14]
      break;
 80020ac:	e002      	b.n	80020b4 <System_Alarm_Active_Mode_Handle+0x12c>

    default: 
      break;
 80020ae:	bf00      	nop
 80020b0:	e000      	b.n	80020b4 <System_Alarm_Active_Mode_Handle+0x12c>
      break;
 80020b2:	bf00      	nop
  }
}
 80020b4:	bf00      	nop
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	200003e7 	.word	0x200003e7
 80020c0:	20000388 	.word	0x20000388
 80020c4:	40010c00 	.word	0x40010c00

080020c8 <HAL_GPIO_EXTI_Callback>:
  * @brief  Callback function to handle GPIO interrupts.
  * @param  GPIO_Pin: The pin number of the GPIO that triggered the interrupt.
  * @retval None
*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 80020d2:	88fb      	ldrh	r3, [r7, #6]
 80020d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80020d8:	d02a      	beq.n	8002130 <HAL_GPIO_EXTI_Callback+0x68>
 80020da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80020de:	dc2f      	bgt.n	8002140 <HAL_GPIO_EXTI_Callback+0x78>
 80020e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80020e4:	d020      	beq.n	8002128 <HAL_GPIO_EXTI_Callback+0x60>
 80020e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80020ea:	dc29      	bgt.n	8002140 <HAL_GPIO_EXTI_Callback+0x78>
 80020ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80020f0:	d016      	beq.n	8002120 <HAL_GPIO_EXTI_Callback+0x58>
 80020f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80020f6:	dc23      	bgt.n	8002140 <HAL_GPIO_EXTI_Callback+0x78>
 80020f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020fc:	d00c      	beq.n	8002118 <HAL_GPIO_EXTI_Callback+0x50>
 80020fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002102:	dc1d      	bgt.n	8002140 <HAL_GPIO_EXTI_Callback+0x78>
 8002104:	2b20      	cmp	r3, #32
 8002106:	d003      	beq.n	8002110 <HAL_GPIO_EXTI_Callback+0x48>
 8002108:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800210c:	d014      	beq.n	8002138 <HAL_GPIO_EXTI_Callback+0x70>
      button4.int_flag = true;
      break;  

    default:
      // Handle other GPIO interrupts if necessary
      break;
 800210e:	e017      	b.n	8002140 <HAL_GPIO_EXTI_Callback+0x78>
      rtc_int_flag = true;
 8002110:	4b0e      	ldr	r3, [pc, #56]	@ (800214c <HAL_GPIO_EXTI_Callback+0x84>)
 8002112:	2201      	movs	r2, #1
 8002114:	701a      	strb	r2, [r3, #0]
      break;
 8002116:	e014      	b.n	8002142 <HAL_GPIO_EXTI_Callback+0x7a>
      button0.int_flag = true;
 8002118:	4b0d      	ldr	r3, [pc, #52]	@ (8002150 <HAL_GPIO_EXTI_Callback+0x88>)
 800211a:	2201      	movs	r2, #1
 800211c:	731a      	strb	r2, [r3, #12]
      break;
 800211e:	e010      	b.n	8002142 <HAL_GPIO_EXTI_Callback+0x7a>
      button1.int_flag = true;
 8002120:	4b0c      	ldr	r3, [pc, #48]	@ (8002154 <HAL_GPIO_EXTI_Callback+0x8c>)
 8002122:	2201      	movs	r2, #1
 8002124:	731a      	strb	r2, [r3, #12]
      break;
 8002126:	e00c      	b.n	8002142 <HAL_GPIO_EXTI_Callback+0x7a>
      button2.int_flag = true;
 8002128:	4b0b      	ldr	r3, [pc, #44]	@ (8002158 <HAL_GPIO_EXTI_Callback+0x90>)
 800212a:	2201      	movs	r2, #1
 800212c:	731a      	strb	r2, [r3, #12]
      break;
 800212e:	e008      	b.n	8002142 <HAL_GPIO_EXTI_Callback+0x7a>
      button3.int_flag = true;
 8002130:	4b0a      	ldr	r3, [pc, #40]	@ (800215c <HAL_GPIO_EXTI_Callback+0x94>)
 8002132:	2201      	movs	r2, #1
 8002134:	731a      	strb	r2, [r3, #12]
      break;  
 8002136:	e004      	b.n	8002142 <HAL_GPIO_EXTI_Callback+0x7a>
      button4.int_flag = true;
 8002138:	4b09      	ldr	r3, [pc, #36]	@ (8002160 <HAL_GPIO_EXTI_Callback+0x98>)
 800213a:	2201      	movs	r2, #1
 800213c:	731a      	strb	r2, [r3, #12]
      break;  
 800213e:	e000      	b.n	8002142 <HAL_GPIO_EXTI_Callback+0x7a>
      break;
 8002140:	bf00      	nop
  }
}
 8002142:	bf00      	nop
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	bc80      	pop	{r7}
 800214a:	4770      	bx	lr
 800214c:	200003e5 	.word	0x200003e5
 8002150:	20000008 	.word	0x20000008
 8002154:	20000018 	.word	0x20000018
 8002158:	20000028 	.word	0x20000028
 800215c:	20000038 	.word	0x20000038
 8002160:	20000048 	.word	0x20000048

08002164 <HAL_UART_RxCpltCallback>:
  * @brief  Callback function to handle UART interrupts.
  * @param  huart: Pointer to the UART handle.
  * @retval None
*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  // Verify the UART instance to ensure the callback is for USART1
  // If the UART instance is USART1, store the received data into the uart_rx_data array
  if(huart->Instance == USART1)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a23      	ldr	r2, [pc, #140]	@ (8002200 <HAL_UART_RxCpltCallback+0x9c>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d13f      	bne.n	80021f6 <HAL_UART_RxCpltCallback+0x92>
  {
    // Store the received data into the uart_rx_data array
    uart_hour 	  = uart_rx_data[0];
 8002176:	4b23      	ldr	r3, [pc, #140]	@ (8002204 <HAL_UART_RxCpltCallback+0xa0>)
 8002178:	781a      	ldrb	r2, [r3, #0]
 800217a:	4b23      	ldr	r3, [pc, #140]	@ (8002208 <HAL_UART_RxCpltCallback+0xa4>)
 800217c:	701a      	strb	r2, [r3, #0]
    uart_minute   = uart_rx_data[1];
 800217e:	4b21      	ldr	r3, [pc, #132]	@ (8002204 <HAL_UART_RxCpltCallback+0xa0>)
 8002180:	785a      	ldrb	r2, [r3, #1]
 8002182:	4b22      	ldr	r3, [pc, #136]	@ (800220c <HAL_UART_RxCpltCallback+0xa8>)
 8002184:	701a      	strb	r2, [r3, #0]
    uart_dow      = uart_rx_data[5];
 8002186:	4b1f      	ldr	r3, [pc, #124]	@ (8002204 <HAL_UART_RxCpltCallback+0xa0>)
 8002188:	795a      	ldrb	r2, [r3, #5]
 800218a:	4b21      	ldr	r3, [pc, #132]	@ (8002210 <HAL_UART_RxCpltCallback+0xac>)
 800218c:	701a      	strb	r2, [r3, #0]
    uart_day 	    = uart_rx_data[2];
 800218e:	4b1d      	ldr	r3, [pc, #116]	@ (8002204 <HAL_UART_RxCpltCallback+0xa0>)
 8002190:	789a      	ldrb	r2, [r3, #2]
 8002192:	4b20      	ldr	r3, [pc, #128]	@ (8002214 <HAL_UART_RxCpltCallback+0xb0>)
 8002194:	701a      	strb	r2, [r3, #0]
    uart_month	  = uart_rx_data[3];
 8002196:	4b1b      	ldr	r3, [pc, #108]	@ (8002204 <HAL_UART_RxCpltCallback+0xa0>)
 8002198:	78da      	ldrb	r2, [r3, #3]
 800219a:	4b1f      	ldr	r3, [pc, #124]	@ (8002218 <HAL_UART_RxCpltCallback+0xb4>)
 800219c:	701a      	strb	r2, [r3, #0]
    uart_year 	  = uart_rx_data[4];
 800219e:	4b19      	ldr	r3, [pc, #100]	@ (8002204 <HAL_UART_RxCpltCallback+0xa0>)
 80021a0:	791a      	ldrb	r2, [r3, #4]
 80021a2:	4b1e      	ldr	r3, [pc, #120]	@ (800221c <HAL_UART_RxCpltCallback+0xb8>)
 80021a4:	701a      	strb	r2, [r3, #0]
    uart_alarmNum = uart_rx_data[5];
 80021a6:	4b17      	ldr	r3, [pc, #92]	@ (8002204 <HAL_UART_RxCpltCallback+0xa0>)
 80021a8:	795a      	ldrb	r2, [r3, #5]
 80021aa:	4b1d      	ldr	r3, [pc, #116]	@ (8002220 <HAL_UART_RxCpltCallback+0xbc>)
 80021ac:	701a      	strb	r2, [r3, #0]
    uart_alarmSta = uart_rx_data[6];
 80021ae:	4b15      	ldr	r3, [pc, #84]	@ (8002204 <HAL_UART_RxCpltCallback+0xa0>)
 80021b0:	799a      	ldrb	r2, [r3, #6]
 80021b2:	4b1c      	ldr	r3, [pc, #112]	@ (8002224 <HAL_UART_RxCpltCallback+0xc0>)
 80021b4:	701a      	strb	r2, [r3, #0]

    // For mode 2:
    if (uart_appMode == 2)
 80021b6:	4b1c      	ldr	r3, [pc, #112]	@ (8002228 <HAL_UART_RxCpltCallback+0xc4>)
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d118      	bne.n	80021f0 <HAL_UART_RxCpltCallback+0x8c>
    {
      for (int i = 0; i < 7; i++)
 80021be:	2300      	movs	r3, #0
 80021c0:	60fb      	str	r3, [r7, #12]
 80021c2:	e012      	b.n	80021ea <HAL_UART_RxCpltCallback+0x86>
      {
        alarm_Info[uart_alarmNum-1][i] = uart_rx_data[i]; // Store the alarm information in the array. Alarm number is uart_alarmNum, information is uart_rx_data[i]
 80021c4:	4b16      	ldr	r3, [pc, #88]	@ (8002220 <HAL_UART_RxCpltCallback+0xbc>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	1e5a      	subs	r2, r3, #1
 80021ca:	490e      	ldr	r1, [pc, #56]	@ (8002204 <HAL_UART_RxCpltCallback+0xa0>)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	440b      	add	r3, r1
 80021d0:	7818      	ldrb	r0, [r3, #0]
 80021d2:	4916      	ldr	r1, [pc, #88]	@ (800222c <HAL_UART_RxCpltCallback+0xc8>)
 80021d4:	4613      	mov	r3, r2
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	1a9b      	subs	r3, r3, r2
 80021da:	18ca      	adds	r2, r1, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	4413      	add	r3, r2
 80021e0:	4602      	mov	r2, r0
 80021e2:	701a      	strb	r2, [r3, #0]
      for (int i = 0; i < 7; i++)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	3301      	adds	r3, #1
 80021e8:	60fb      	str	r3, [r7, #12]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2b06      	cmp	r3, #6
 80021ee:	dde9      	ble.n	80021c4 <HAL_UART_RxCpltCallback+0x60>
      }
    }

    // Set the UART receive flag
    uart_rx_flag = 1;
 80021f0:	4b0f      	ldr	r3, [pc, #60]	@ (8002230 <HAL_UART_RxCpltCallback+0xcc>)
 80021f2:	2201      	movs	r2, #1
 80021f4:	701a      	strb	r2, [r3, #0]
  }
}
 80021f6:	bf00      	nop
 80021f8:	3714      	adds	r7, #20
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bc80      	pop	{r7}
 80021fe:	4770      	bx	lr
 8002200:	40013800 	.word	0x40013800
 8002204:	200003f8 	.word	0x200003f8
 8002208:	20000407 	.word	0x20000407
 800220c:	20000408 	.word	0x20000408
 8002210:	20000409 	.word	0x20000409
 8002214:	2000040a 	.word	0x2000040a
 8002218:	2000040b 	.word	0x2000040b
 800221c:	2000040c 	.word	0x2000040c
 8002220:	2000040d 	.word	0x2000040d
 8002224:	2000040e 	.word	0x2000040e
 8002228:	20000410 	.word	0x20000410
 800222c:	20000414 	.word	0x20000414
 8002230:	200003f6 	.word	0x200003f6

08002234 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  // Verify the UART instance to ensure the callback is for USART1
  // If the UART instance is USART1, set the UART transmit flag
  if(huart->Instance == USART1)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a0f      	ldr	r2, [pc, #60]	@ (8002280 <HAL_UART_TxCpltCallback+0x4c>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d116      	bne.n	8002274 <HAL_UART_TxCpltCallback+0x40>
  {
    // Set the UART transmit flag to indicate that the data has been sent
    sentCount += 1;
 8002246:	4b0f      	ldr	r3, [pc, #60]	@ (8002284 <HAL_UART_TxCpltCallback+0x50>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	3301      	adds	r3, #1
 800224c:	b2da      	uxtb	r2, r3
 800224e:	4b0d      	ldr	r3, [pc, #52]	@ (8002284 <HAL_UART_TxCpltCallback+0x50>)
 8002250:	701a      	strb	r2, [r3, #0]

    if (sentCount == 10) // If 10 alarms are sent, reset the sentCount variable
 8002252:	4b0c      	ldr	r3, [pc, #48]	@ (8002284 <HAL_UART_TxCpltCallback+0x50>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	2b0a      	cmp	r3, #10
 8002258:	d109      	bne.n	800226e <HAL_UART_TxCpltCallback+0x3a>
    {
      sentCount = 0;
 800225a:	4b0a      	ldr	r3, [pc, #40]	@ (8002284 <HAL_UART_TxCpltCallback+0x50>)
 800225c:	2200      	movs	r2, #0
 800225e:	701a      	strb	r2, [r3, #0]
      uart_tx_flag = 0; // Reset the UART transmit flag
 8002260:	4b09      	ldr	r3, [pc, #36]	@ (8002288 <HAL_UART_TxCpltCallback+0x54>)
 8002262:	2200      	movs	r2, #0
 8002264:	701a      	strb	r2, [r3, #0]
      uart_rx_data[0] = 0b01110000;
 8002266:	4b09      	ldr	r3, [pc, #36]	@ (800228c <HAL_UART_TxCpltCallback+0x58>)
 8002268:	2270      	movs	r2, #112	@ 0x70
 800226a:	701a      	strb	r2, [r3, #0]
    else
    {
      uart_tx_flag = 1;
    }
  }
}
 800226c:	e002      	b.n	8002274 <HAL_UART_TxCpltCallback+0x40>
      uart_tx_flag = 1;
 800226e:	4b06      	ldr	r3, [pc, #24]	@ (8002288 <HAL_UART_TxCpltCallback+0x54>)
 8002270:	2201      	movs	r2, #1
 8002272:	701a      	strb	r2, [r3, #0]
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	bc80      	pop	{r7}
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	40013800 	.word	0x40013800
 8002284:	20000411 	.word	0x20000411
 8002288:	200003f7 	.word	0x200003f7
 800228c:	200003f8 	.word	0x200003f8

08002290 <HAL_ADC_ConvCpltCallback>:
  * @brief  Callback function to handle ADC conversion complete interrupts.
  * @param  hadc: Pointer to the ADC handle.
  * @retval None
*/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
	// Verify the ADC instance to ensure the callback is for ADC1
  // If the ADC instance is ADC1, get the ADC value and calculate the battery percentage
  if (hadc == &hadc1)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	4a10      	ldr	r2, [pc, #64]	@ (80022dc <HAL_ADC_ConvCpltCallback+0x4c>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d119      	bne.n	80022d4 <HAL_ADC_ConvCpltCallback+0x44>
	{
    // Get the ADC value
    adc_data = HAL_ADC_GetValue(&hadc1);
 80022a0:	480e      	ldr	r0, [pc, #56]	@ (80022dc <HAL_ADC_ConvCpltCallback+0x4c>)
 80022a2:	f000 fe73 	bl	8002f8c <HAL_ADC_GetValue>
 80022a6:	4603      	mov	r3, r0
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	4b0d      	ldr	r3, [pc, #52]	@ (80022e0 <HAL_ADC_ConvCpltCallback+0x50>)
 80022ac:	801a      	strh	r2, [r3, #0]

    // Set the ADC valid flag
    adc_valid_flag = 1;
 80022ae:	4b0d      	ldr	r3, [pc, #52]	@ (80022e4 <HAL_ADC_ConvCpltCallback+0x54>)
 80022b0:	2201      	movs	r2, #1
 80022b2:	701a      	strb	r2, [r3, #0]

    // Calculate the battery percentage
    battery_percentage = adc_data * 100 / 4095;
 80022b4:	4b0a      	ldr	r3, [pc, #40]	@ (80022e0 <HAL_ADC_ConvCpltCallback+0x50>)
 80022b6:	881b      	ldrh	r3, [r3, #0]
 80022b8:	461a      	mov	r2, r3
 80022ba:	2364      	movs	r3, #100	@ 0x64
 80022bc:	fb02 f303 	mul.w	r3, r2, r3
 80022c0:	4a09      	ldr	r2, [pc, #36]	@ (80022e8 <HAL_ADC_ConvCpltCallback+0x58>)
 80022c2:	fb82 1203 	smull	r1, r2, r2, r3
 80022c6:	441a      	add	r2, r3
 80022c8:	12d2      	asrs	r2, r2, #11
 80022ca:	17db      	asrs	r3, r3, #31
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	b29a      	uxth	r2, r3
 80022d0:	4b06      	ldr	r3, [pc, #24]	@ (80022ec <HAL_ADC_ConvCpltCallback+0x5c>)
 80022d2:	801a      	strh	r2, [r3, #0]
	}
}
 80022d4:	bf00      	nop
 80022d6:	3708      	adds	r7, #8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	20000304 	.word	0x20000304
 80022e0:	200003f2 	.word	0x200003f2
 80022e4:	200003f1 	.word	0x200003f1
 80022e8:	80080081 	.word	0x80080081
 80022ec:	200003f4 	.word	0x200003f4

080022f0 <Update_alarm_data>:

void Update_alarm_data(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  sParam_data_alarm_setup_mode_1.hour     = alarm_get_data[0].hour;
 80022f4:	4b9e      	ldr	r3, [pc, #632]	@ (8002570 <Update_alarm_data+0x280>)
 80022f6:	789b      	ldrb	r3, [r3, #2]
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	4b9e      	ldr	r3, [pc, #632]	@ (8002574 <Update_alarm_data+0x284>)
 80022fc:	709a      	strb	r2, [r3, #2]
  sParam_data_alarm_setup_mode_1.minute   = alarm_get_data[0].minute;
 80022fe:	4b9c      	ldr	r3, [pc, #624]	@ (8002570 <Update_alarm_data+0x280>)
 8002300:	785b      	ldrb	r3, [r3, #1]
 8002302:	b2da      	uxtb	r2, r3
 8002304:	4b9b      	ldr	r3, [pc, #620]	@ (8002574 <Update_alarm_data+0x284>)
 8002306:	705a      	strb	r2, [r3, #1]
  sParam_data_alarm_setup_mode_1.dy_dt    = alarm_get_data[0].dy_dt;
 8002308:	4b99      	ldr	r3, [pc, #612]	@ (8002570 <Update_alarm_data+0x280>)
 800230a:	78db      	ldrb	r3, [r3, #3]
 800230c:	b2da      	uxtb	r2, r3
 800230e:	4b99      	ldr	r3, [pc, #612]	@ (8002574 <Update_alarm_data+0x284>)
 8002310:	70da      	strb	r2, [r3, #3]
  sParam_data_alarm_setup_mode_1.dow_dom  = alarm_get_data[0].on_off;
 8002312:	4b97      	ldr	r3, [pc, #604]	@ (8002570 <Update_alarm_data+0x280>)
 8002314:	795b      	ldrb	r3, [r3, #5]
 8002316:	b2db      	uxtb	r3, r3
 8002318:	461a      	mov	r2, r3
 800231a:	4b96      	ldr	r3, [pc, #600]	@ (8002574 <Update_alarm_data+0x284>)
 800231c:	711a      	strb	r2, [r3, #4]
  sParam_data_alarm_setup_mode_1.on_off   = alarm_get_data[0].on_off;
 800231e:	4b94      	ldr	r3, [pc, #592]	@ (8002570 <Update_alarm_data+0x280>)
 8002320:	795b      	ldrb	r3, [r3, #5]
 8002322:	b2da      	uxtb	r2, r3
 8002324:	4b93      	ldr	r3, [pc, #588]	@ (8002574 <Update_alarm_data+0x284>)
 8002326:	715a      	strb	r2, [r3, #5]
  sParam_data_alarm_setup_mode_1.second   = 0;
 8002328:	4b92      	ldr	r3, [pc, #584]	@ (8002574 <Update_alarm_data+0x284>)
 800232a:	2200      	movs	r2, #0
 800232c:	701a      	strb	r2, [r3, #0]

  sParam_data_alarm_setup_mode_2.hour     = alarm_get_data[1].hour;
 800232e:	4b90      	ldr	r3, [pc, #576]	@ (8002570 <Update_alarm_data+0x280>)
 8002330:	7a1b      	ldrb	r3, [r3, #8]
 8002332:	b2da      	uxtb	r2, r3
 8002334:	4b90      	ldr	r3, [pc, #576]	@ (8002578 <Update_alarm_data+0x288>)
 8002336:	709a      	strb	r2, [r3, #2]
  sParam_data_alarm_setup_mode_2.minute   = alarm_get_data[1].minute;
 8002338:	4b8d      	ldr	r3, [pc, #564]	@ (8002570 <Update_alarm_data+0x280>)
 800233a:	79db      	ldrb	r3, [r3, #7]
 800233c:	b2da      	uxtb	r2, r3
 800233e:	4b8e      	ldr	r3, [pc, #568]	@ (8002578 <Update_alarm_data+0x288>)
 8002340:	705a      	strb	r2, [r3, #1]
  sParam_data_alarm_setup_mode_2.dy_dt    = alarm_get_data[1].dy_dt;
 8002342:	4b8b      	ldr	r3, [pc, #556]	@ (8002570 <Update_alarm_data+0x280>)
 8002344:	7a5b      	ldrb	r3, [r3, #9]
 8002346:	b2da      	uxtb	r2, r3
 8002348:	4b8b      	ldr	r3, [pc, #556]	@ (8002578 <Update_alarm_data+0x288>)
 800234a:	70da      	strb	r2, [r3, #3]
  sParam_data_alarm_setup_mode_2.dow_dom  = alarm_get_data[1].on_off;
 800234c:	4b88      	ldr	r3, [pc, #544]	@ (8002570 <Update_alarm_data+0x280>)
 800234e:	7adb      	ldrb	r3, [r3, #11]
 8002350:	b2db      	uxtb	r3, r3
 8002352:	461a      	mov	r2, r3
 8002354:	4b88      	ldr	r3, [pc, #544]	@ (8002578 <Update_alarm_data+0x288>)
 8002356:	711a      	strb	r2, [r3, #4]
  sParam_data_alarm_setup_mode_2.on_off   = alarm_get_data[1].on_off;
 8002358:	4b85      	ldr	r3, [pc, #532]	@ (8002570 <Update_alarm_data+0x280>)
 800235a:	7adb      	ldrb	r3, [r3, #11]
 800235c:	b2da      	uxtb	r2, r3
 800235e:	4b86      	ldr	r3, [pc, #536]	@ (8002578 <Update_alarm_data+0x288>)
 8002360:	715a      	strb	r2, [r3, #5]
  sParam_data_alarm_setup_mode_2.second   = 0;
 8002362:	4b85      	ldr	r3, [pc, #532]	@ (8002578 <Update_alarm_data+0x288>)
 8002364:	2200      	movs	r2, #0
 8002366:	701a      	strb	r2, [r3, #0]

  sParam_data_alarm_setup_mode_3.hour     = alarm_get_data[2].hour;
 8002368:	4b81      	ldr	r3, [pc, #516]	@ (8002570 <Update_alarm_data+0x280>)
 800236a:	7b9b      	ldrb	r3, [r3, #14]
 800236c:	b2da      	uxtb	r2, r3
 800236e:	4b83      	ldr	r3, [pc, #524]	@ (800257c <Update_alarm_data+0x28c>)
 8002370:	709a      	strb	r2, [r3, #2]
  sParam_data_alarm_setup_mode_3.minute   = alarm_get_data[2].minute;
 8002372:	4b7f      	ldr	r3, [pc, #508]	@ (8002570 <Update_alarm_data+0x280>)
 8002374:	7b5b      	ldrb	r3, [r3, #13]
 8002376:	b2da      	uxtb	r2, r3
 8002378:	4b80      	ldr	r3, [pc, #512]	@ (800257c <Update_alarm_data+0x28c>)
 800237a:	705a      	strb	r2, [r3, #1]
  sParam_data_alarm_setup_mode_3.dy_dt    = alarm_get_data[2].dy_dt;
 800237c:	4b7c      	ldr	r3, [pc, #496]	@ (8002570 <Update_alarm_data+0x280>)
 800237e:	7bdb      	ldrb	r3, [r3, #15]
 8002380:	b2da      	uxtb	r2, r3
 8002382:	4b7e      	ldr	r3, [pc, #504]	@ (800257c <Update_alarm_data+0x28c>)
 8002384:	70da      	strb	r2, [r3, #3]
  sParam_data_alarm_setup_mode_3.dow_dom  = alarm_get_data[2].on_off;
 8002386:	4b7a      	ldr	r3, [pc, #488]	@ (8002570 <Update_alarm_data+0x280>)
 8002388:	7c5b      	ldrb	r3, [r3, #17]
 800238a:	b2db      	uxtb	r3, r3
 800238c:	461a      	mov	r2, r3
 800238e:	4b7b      	ldr	r3, [pc, #492]	@ (800257c <Update_alarm_data+0x28c>)
 8002390:	711a      	strb	r2, [r3, #4]
  sParam_data_alarm_setup_mode_3.on_off   = alarm_get_data[2].on_off;
 8002392:	4b77      	ldr	r3, [pc, #476]	@ (8002570 <Update_alarm_data+0x280>)
 8002394:	7c5b      	ldrb	r3, [r3, #17]
 8002396:	b2da      	uxtb	r2, r3
 8002398:	4b78      	ldr	r3, [pc, #480]	@ (800257c <Update_alarm_data+0x28c>)
 800239a:	715a      	strb	r2, [r3, #5]
  sParam_data_alarm_setup_mode_3.second   = 0;
 800239c:	4b77      	ldr	r3, [pc, #476]	@ (800257c <Update_alarm_data+0x28c>)
 800239e:	2200      	movs	r2, #0
 80023a0:	701a      	strb	r2, [r3, #0]

  sParam_data_alarm_setup_mode_4.hour     = alarm_get_data[3].hour;
 80023a2:	4b73      	ldr	r3, [pc, #460]	@ (8002570 <Update_alarm_data+0x280>)
 80023a4:	7d1b      	ldrb	r3, [r3, #20]
 80023a6:	b2da      	uxtb	r2, r3
 80023a8:	4b75      	ldr	r3, [pc, #468]	@ (8002580 <Update_alarm_data+0x290>)
 80023aa:	709a      	strb	r2, [r3, #2]
  sParam_data_alarm_setup_mode_4.minute   = alarm_get_data[3].minute;
 80023ac:	4b70      	ldr	r3, [pc, #448]	@ (8002570 <Update_alarm_data+0x280>)
 80023ae:	7cdb      	ldrb	r3, [r3, #19]
 80023b0:	b2da      	uxtb	r2, r3
 80023b2:	4b73      	ldr	r3, [pc, #460]	@ (8002580 <Update_alarm_data+0x290>)
 80023b4:	705a      	strb	r2, [r3, #1]
  sParam_data_alarm_setup_mode_4.dy_dt    = alarm_get_data[3].dy_dt;
 80023b6:	4b6e      	ldr	r3, [pc, #440]	@ (8002570 <Update_alarm_data+0x280>)
 80023b8:	7d5b      	ldrb	r3, [r3, #21]
 80023ba:	b2da      	uxtb	r2, r3
 80023bc:	4b70      	ldr	r3, [pc, #448]	@ (8002580 <Update_alarm_data+0x290>)
 80023be:	70da      	strb	r2, [r3, #3]
  sParam_data_alarm_setup_mode_4.dow_dom  = alarm_get_data[3].on_off;
 80023c0:	4b6b      	ldr	r3, [pc, #428]	@ (8002570 <Update_alarm_data+0x280>)
 80023c2:	7ddb      	ldrb	r3, [r3, #23]
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	461a      	mov	r2, r3
 80023c8:	4b6d      	ldr	r3, [pc, #436]	@ (8002580 <Update_alarm_data+0x290>)
 80023ca:	711a      	strb	r2, [r3, #4]
  sParam_data_alarm_setup_mode_4.on_off   = alarm_get_data[3].on_off;
 80023cc:	4b68      	ldr	r3, [pc, #416]	@ (8002570 <Update_alarm_data+0x280>)
 80023ce:	7ddb      	ldrb	r3, [r3, #23]
 80023d0:	b2da      	uxtb	r2, r3
 80023d2:	4b6b      	ldr	r3, [pc, #428]	@ (8002580 <Update_alarm_data+0x290>)
 80023d4:	715a      	strb	r2, [r3, #5]
  sParam_data_alarm_setup_mode_4.second   = 0;
 80023d6:	4b6a      	ldr	r3, [pc, #424]	@ (8002580 <Update_alarm_data+0x290>)
 80023d8:	2200      	movs	r2, #0
 80023da:	701a      	strb	r2, [r3, #0]

  sParam_data_alarm_setup_mode_5.hour     = alarm_get_data[4].hour;
 80023dc:	4b64      	ldr	r3, [pc, #400]	@ (8002570 <Update_alarm_data+0x280>)
 80023de:	7e9b      	ldrb	r3, [r3, #26]
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	4b68      	ldr	r3, [pc, #416]	@ (8002584 <Update_alarm_data+0x294>)
 80023e4:	709a      	strb	r2, [r3, #2]
  sParam_data_alarm_setup_mode_5.minute   = alarm_get_data[4].minute;
 80023e6:	4b62      	ldr	r3, [pc, #392]	@ (8002570 <Update_alarm_data+0x280>)
 80023e8:	7e5b      	ldrb	r3, [r3, #25]
 80023ea:	b2da      	uxtb	r2, r3
 80023ec:	4b65      	ldr	r3, [pc, #404]	@ (8002584 <Update_alarm_data+0x294>)
 80023ee:	705a      	strb	r2, [r3, #1]
  sParam_data_alarm_setup_mode_5.dy_dt    = alarm_get_data[4].dy_dt;
 80023f0:	4b5f      	ldr	r3, [pc, #380]	@ (8002570 <Update_alarm_data+0x280>)
 80023f2:	7edb      	ldrb	r3, [r3, #27]
 80023f4:	b2da      	uxtb	r2, r3
 80023f6:	4b63      	ldr	r3, [pc, #396]	@ (8002584 <Update_alarm_data+0x294>)
 80023f8:	70da      	strb	r2, [r3, #3]
  sParam_data_alarm_setup_mode_5.dow_dom  = alarm_get_data[4].on_off;
 80023fa:	4b5d      	ldr	r3, [pc, #372]	@ (8002570 <Update_alarm_data+0x280>)
 80023fc:	7f5b      	ldrb	r3, [r3, #29]
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	461a      	mov	r2, r3
 8002402:	4b60      	ldr	r3, [pc, #384]	@ (8002584 <Update_alarm_data+0x294>)
 8002404:	711a      	strb	r2, [r3, #4]
  sParam_data_alarm_setup_mode_5.on_off   = alarm_get_data[4].on_off;
 8002406:	4b5a      	ldr	r3, [pc, #360]	@ (8002570 <Update_alarm_data+0x280>)
 8002408:	7f5b      	ldrb	r3, [r3, #29]
 800240a:	b2da      	uxtb	r2, r3
 800240c:	4b5d      	ldr	r3, [pc, #372]	@ (8002584 <Update_alarm_data+0x294>)
 800240e:	715a      	strb	r2, [r3, #5]
  sParam_data_alarm_setup_mode_5.second   = 0;
 8002410:	4b5c      	ldr	r3, [pc, #368]	@ (8002584 <Update_alarm_data+0x294>)
 8002412:	2200      	movs	r2, #0
 8002414:	701a      	strb	r2, [r3, #0]

  sParam_data_alarm_setup_mode_6.hour     = alarm_get_data[5].hour;
 8002416:	4b56      	ldr	r3, [pc, #344]	@ (8002570 <Update_alarm_data+0x280>)
 8002418:	f893 3020 	ldrb.w	r3, [r3, #32]
 800241c:	b2da      	uxtb	r2, r3
 800241e:	4b5a      	ldr	r3, [pc, #360]	@ (8002588 <Update_alarm_data+0x298>)
 8002420:	709a      	strb	r2, [r3, #2]
  sParam_data_alarm_setup_mode_6.minute   = alarm_get_data[5].minute;
 8002422:	4b53      	ldr	r3, [pc, #332]	@ (8002570 <Update_alarm_data+0x280>)
 8002424:	7fdb      	ldrb	r3, [r3, #31]
 8002426:	b2da      	uxtb	r2, r3
 8002428:	4b57      	ldr	r3, [pc, #348]	@ (8002588 <Update_alarm_data+0x298>)
 800242a:	705a      	strb	r2, [r3, #1]
  sParam_data_alarm_setup_mode_6.dy_dt    = alarm_get_data[6].dy_dt;
 800242c:	4b50      	ldr	r3, [pc, #320]	@ (8002570 <Update_alarm_data+0x280>)
 800242e:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8002432:	b2da      	uxtb	r2, r3
 8002434:	4b54      	ldr	r3, [pc, #336]	@ (8002588 <Update_alarm_data+0x298>)
 8002436:	70da      	strb	r2, [r3, #3]
  sParam_data_alarm_setup_mode_6.dow_dom  = alarm_get_data[5].on_off;
 8002438:	4b4d      	ldr	r3, [pc, #308]	@ (8002570 <Update_alarm_data+0x280>)
 800243a:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800243e:	b2db      	uxtb	r3, r3
 8002440:	461a      	mov	r2, r3
 8002442:	4b51      	ldr	r3, [pc, #324]	@ (8002588 <Update_alarm_data+0x298>)
 8002444:	711a      	strb	r2, [r3, #4]
  sParam_data_alarm_setup_mode_6.on_off   = alarm_get_data[5].on_off;
 8002446:	4b4a      	ldr	r3, [pc, #296]	@ (8002570 <Update_alarm_data+0x280>)
 8002448:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800244c:	b2da      	uxtb	r2, r3
 800244e:	4b4e      	ldr	r3, [pc, #312]	@ (8002588 <Update_alarm_data+0x298>)
 8002450:	715a      	strb	r2, [r3, #5]
  sParam_data_alarm_setup_mode_6.second   = 0;
 8002452:	4b4d      	ldr	r3, [pc, #308]	@ (8002588 <Update_alarm_data+0x298>)
 8002454:	2200      	movs	r2, #0
 8002456:	701a      	strb	r2, [r3, #0]

  sParam_data_alarm_setup_mode_7.hour     = alarm_get_data[6].hour;
 8002458:	4b45      	ldr	r3, [pc, #276]	@ (8002570 <Update_alarm_data+0x280>)
 800245a:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800245e:	b2da      	uxtb	r2, r3
 8002460:	4b4a      	ldr	r3, [pc, #296]	@ (800258c <Update_alarm_data+0x29c>)
 8002462:	709a      	strb	r2, [r3, #2]
  sParam_data_alarm_setup_mode_7.minute   = alarm_get_data[6].minute;
 8002464:	4b42      	ldr	r3, [pc, #264]	@ (8002570 <Update_alarm_data+0x280>)
 8002466:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800246a:	b2da      	uxtb	r2, r3
 800246c:	4b47      	ldr	r3, [pc, #284]	@ (800258c <Update_alarm_data+0x29c>)
 800246e:	705a      	strb	r2, [r3, #1]
  sParam_data_alarm_setup_mode_7.dy_dt    = alarm_get_data[6].dy_dt; 
 8002470:	4b3f      	ldr	r3, [pc, #252]	@ (8002570 <Update_alarm_data+0x280>)
 8002472:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8002476:	b2da      	uxtb	r2, r3
 8002478:	4b44      	ldr	r3, [pc, #272]	@ (800258c <Update_alarm_data+0x29c>)
 800247a:	70da      	strb	r2, [r3, #3]
  sParam_data_alarm_setup_mode_7.dow_dom  = alarm_get_data[6].on_off;
 800247c:	4b3c      	ldr	r3, [pc, #240]	@ (8002570 <Update_alarm_data+0x280>)
 800247e:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002482:	b2db      	uxtb	r3, r3
 8002484:	461a      	mov	r2, r3
 8002486:	4b41      	ldr	r3, [pc, #260]	@ (800258c <Update_alarm_data+0x29c>)
 8002488:	711a      	strb	r2, [r3, #4]
  sParam_data_alarm_setup_mode_7.on_off   = alarm_get_data[6].on_off;
 800248a:	4b39      	ldr	r3, [pc, #228]	@ (8002570 <Update_alarm_data+0x280>)
 800248c:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002490:	b2da      	uxtb	r2, r3
 8002492:	4b3e      	ldr	r3, [pc, #248]	@ (800258c <Update_alarm_data+0x29c>)
 8002494:	715a      	strb	r2, [r3, #5]
  sParam_data_alarm_setup_mode_7.second   = 0;
 8002496:	4b3d      	ldr	r3, [pc, #244]	@ (800258c <Update_alarm_data+0x29c>)
 8002498:	2200      	movs	r2, #0
 800249a:	701a      	strb	r2, [r3, #0]

  sParam_data_alarm_setup_mode_8.hour     = alarm_get_data[7].hour;
 800249c:	4b34      	ldr	r3, [pc, #208]	@ (8002570 <Update_alarm_data+0x280>)
 800249e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80024a2:	b2da      	uxtb	r2, r3
 80024a4:	4b3a      	ldr	r3, [pc, #232]	@ (8002590 <Update_alarm_data+0x2a0>)
 80024a6:	709a      	strb	r2, [r3, #2]
  sParam_data_alarm_setup_mode_8.minute   = alarm_get_data[7].minute;
 80024a8:	4b31      	ldr	r3, [pc, #196]	@ (8002570 <Update_alarm_data+0x280>)
 80024aa:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80024ae:	b2da      	uxtb	r2, r3
 80024b0:	4b37      	ldr	r3, [pc, #220]	@ (8002590 <Update_alarm_data+0x2a0>)
 80024b2:	705a      	strb	r2, [r3, #1]
  sParam_data_alarm_setup_mode_8.dy_dt    = alarm_get_data[7].dy_dt;
 80024b4:	4b2e      	ldr	r3, [pc, #184]	@ (8002570 <Update_alarm_data+0x280>)
 80024b6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80024ba:	b2da      	uxtb	r2, r3
 80024bc:	4b34      	ldr	r3, [pc, #208]	@ (8002590 <Update_alarm_data+0x2a0>)
 80024be:	70da      	strb	r2, [r3, #3]
  sParam_data_alarm_setup_mode_8.dow_dom  = alarm_get_data[7].on_off;
 80024c0:	4b2b      	ldr	r3, [pc, #172]	@ (8002570 <Update_alarm_data+0x280>)
 80024c2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	461a      	mov	r2, r3
 80024ca:	4b31      	ldr	r3, [pc, #196]	@ (8002590 <Update_alarm_data+0x2a0>)
 80024cc:	711a      	strb	r2, [r3, #4]
  sParam_data_alarm_setup_mode_8.on_off   = alarm_get_data[7].on_off;
 80024ce:	4b28      	ldr	r3, [pc, #160]	@ (8002570 <Update_alarm_data+0x280>)
 80024d0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80024d4:	b2da      	uxtb	r2, r3
 80024d6:	4b2e      	ldr	r3, [pc, #184]	@ (8002590 <Update_alarm_data+0x2a0>)
 80024d8:	715a      	strb	r2, [r3, #5]
  sParam_data_alarm_setup_mode_8.second   = 0;
 80024da:	4b2d      	ldr	r3, [pc, #180]	@ (8002590 <Update_alarm_data+0x2a0>)
 80024dc:	2200      	movs	r2, #0
 80024de:	701a      	strb	r2, [r3, #0]

  sParam_data_alarm_setup_mode_9.hour     = alarm_get_data[8].hour;
 80024e0:	4b23      	ldr	r3, [pc, #140]	@ (8002570 <Update_alarm_data+0x280>)
 80024e2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80024e6:	b2da      	uxtb	r2, r3
 80024e8:	4b2a      	ldr	r3, [pc, #168]	@ (8002594 <Update_alarm_data+0x2a4>)
 80024ea:	709a      	strb	r2, [r3, #2]
  sParam_data_alarm_setup_mode_9.minute   = alarm_get_data[8].minute;
 80024ec:	4b20      	ldr	r3, [pc, #128]	@ (8002570 <Update_alarm_data+0x280>)
 80024ee:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80024f2:	b2da      	uxtb	r2, r3
 80024f4:	4b27      	ldr	r3, [pc, #156]	@ (8002594 <Update_alarm_data+0x2a4>)
 80024f6:	705a      	strb	r2, [r3, #1]
  sParam_data_alarm_setup_mode_9.dy_dt    = alarm_get_data[8].dy_dt;
 80024f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002570 <Update_alarm_data+0x280>)
 80024fa:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80024fe:	b2da      	uxtb	r2, r3
 8002500:	4b24      	ldr	r3, [pc, #144]	@ (8002594 <Update_alarm_data+0x2a4>)
 8002502:	70da      	strb	r2, [r3, #3]
  sParam_data_alarm_setup_mode_9.dow_dom  = alarm_get_data[8].on_off;
 8002504:	4b1a      	ldr	r3, [pc, #104]	@ (8002570 <Update_alarm_data+0x280>)
 8002506:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800250a:	b2db      	uxtb	r3, r3
 800250c:	461a      	mov	r2, r3
 800250e:	4b21      	ldr	r3, [pc, #132]	@ (8002594 <Update_alarm_data+0x2a4>)
 8002510:	711a      	strb	r2, [r3, #4]
  sParam_data_alarm_setup_mode_9.on_off   = alarm_get_data[8].on_off;
 8002512:	4b17      	ldr	r3, [pc, #92]	@ (8002570 <Update_alarm_data+0x280>)
 8002514:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002518:	b2da      	uxtb	r2, r3
 800251a:	4b1e      	ldr	r3, [pc, #120]	@ (8002594 <Update_alarm_data+0x2a4>)
 800251c:	715a      	strb	r2, [r3, #5]
  sParam_data_alarm_setup_mode_9.second   = 0;
 800251e:	4b1d      	ldr	r3, [pc, #116]	@ (8002594 <Update_alarm_data+0x2a4>)
 8002520:	2200      	movs	r2, #0
 8002522:	701a      	strb	r2, [r3, #0]

  sParam_data_alarm_setup_mode_10.hour     = alarm_get_data[9].hour;
 8002524:	4b12      	ldr	r3, [pc, #72]	@ (8002570 <Update_alarm_data+0x280>)
 8002526:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800252a:	b2da      	uxtb	r2, r3
 800252c:	4b1a      	ldr	r3, [pc, #104]	@ (8002598 <Update_alarm_data+0x2a8>)
 800252e:	709a      	strb	r2, [r3, #2]
  sParam_data_alarm_setup_mode_10.minute   = alarm_get_data[9].minute;
 8002530:	4b0f      	ldr	r3, [pc, #60]	@ (8002570 <Update_alarm_data+0x280>)
 8002532:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 8002536:	b2da      	uxtb	r2, r3
 8002538:	4b17      	ldr	r3, [pc, #92]	@ (8002598 <Update_alarm_data+0x2a8>)
 800253a:	705a      	strb	r2, [r3, #1]
  sParam_data_alarm_setup_mode_10.dy_dt    = alarm_get_data[9].dy_dt;
 800253c:	4b0c      	ldr	r3, [pc, #48]	@ (8002570 <Update_alarm_data+0x280>)
 800253e:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002542:	b2da      	uxtb	r2, r3
 8002544:	4b14      	ldr	r3, [pc, #80]	@ (8002598 <Update_alarm_data+0x2a8>)
 8002546:	70da      	strb	r2, [r3, #3]
  sParam_data_alarm_setup_mode_10.dow_dom  = alarm_get_data[9].on_off;
 8002548:	4b09      	ldr	r3, [pc, #36]	@ (8002570 <Update_alarm_data+0x280>)
 800254a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800254e:	b2db      	uxtb	r3, r3
 8002550:	461a      	mov	r2, r3
 8002552:	4b11      	ldr	r3, [pc, #68]	@ (8002598 <Update_alarm_data+0x2a8>)
 8002554:	711a      	strb	r2, [r3, #4]
  sParam_data_alarm_setup_mode_10.on_off   = alarm_get_data[9].on_off;
 8002556:	4b06      	ldr	r3, [pc, #24]	@ (8002570 <Update_alarm_data+0x280>)
 8002558:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800255c:	b2da      	uxtb	r2, r3
 800255e:	4b0e      	ldr	r3, [pc, #56]	@ (8002598 <Update_alarm_data+0x2a8>)
 8002560:	715a      	strb	r2, [r3, #5]
  sParam_data_alarm_setup_mode_10.second   = 0;
 8002562:	4b0d      	ldr	r3, [pc, #52]	@ (8002598 <Update_alarm_data+0x2a8>)
 8002564:	2200      	movs	r2, #0
 8002566:	701a      	strb	r2, [r3, #0]

}
 8002568:	bf00      	nop
 800256a:	46bd      	mov	sp, r7
 800256c:	bc80      	pop	{r7}
 800256e:	4770      	bx	lr
 8002570:	200003a8 	.word	0x200003a8
 8002574:	20000460 	.word	0x20000460
 8002578:	20000468 	.word	0x20000468
 800257c:	20000470 	.word	0x20000470
 8002580:	20000478 	.word	0x20000478
 8002584:	20000480 	.word	0x20000480
 8002588:	20000488 	.word	0x20000488
 800258c:	20000490 	.word	0x20000490
 8002590:	20000498 	.word	0x20000498
 8002594:	200004a0 	.word	0x200004a0
 8002598:	200004a8 	.word	0x200004a8

0800259c <Alarm_Ring>:

void Alarm_Ring (void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  // Check if the buzzer cycle number is less than or equal to the maximum cycle number
  if (buzzer_cycle <= BUZZER_CYCLE_NUM)
 80025a0:	4b3f      	ldr	r3, [pc, #252]	@ (80026a0 <Alarm_Ring+0x104>)
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	2b0a      	cmp	r3, #10
 80025a6:	d868      	bhi.n	800267a <Alarm_Ring+0xde>
  {
    // Check if the buzzer phase number is less than or equal to the maximum phase number
    if (buzzer_phase <= 4)
 80025a8:	4b3e      	ldr	r3, [pc, #248]	@ (80026a4 <Alarm_Ring+0x108>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	2b04      	cmp	r3, #4
 80025ae:	d855      	bhi.n	800265c <Alarm_Ring+0xc0>
    {
      // Check if the buzzer tick is within the specified delay time
      if      ((buzzer_phase == 0) && (HAL_GetTick() - buzzer_tick <= BUZZER_SHORT_DELAY))
 80025b0:	4b3c      	ldr	r3, [pc, #240]	@ (80026a4 <Alarm_Ring+0x108>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d10d      	bne.n	80025d4 <Alarm_Ring+0x38>
 80025b8:	f000 fb2c 	bl	8002c14 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	4b3a      	ldr	r3, [pc, #232]	@ (80026a8 <Alarm_Ring+0x10c>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	2b64      	cmp	r3, #100	@ 0x64
 80025c6:	d805      	bhi.n	80025d4 <Alarm_Ring+0x38>
      {
        // Turn on the buzzer for a short duration
        HAL_GPIO_WritePin(GPIOB, BUZZER_Pin, BUZZER_ACTIVE);
 80025c8:	2201      	movs	r2, #1
 80025ca:	2101      	movs	r1, #1
 80025cc:	4837      	ldr	r0, [pc, #220]	@ (80026ac <Alarm_Ring+0x110>)
 80025ce:	f001 faa8 	bl	8003b22 <HAL_GPIO_WritePin>
 80025d2:	e062      	b.n	800269a <Alarm_Ring+0xfe>
      }
      else if ((buzzer_phase == 1) && (HAL_GetTick() - buzzer_tick <= BUZZER_SHORT_DELAY))
 80025d4:	4b33      	ldr	r3, [pc, #204]	@ (80026a4 <Alarm_Ring+0x108>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d10d      	bne.n	80025f8 <Alarm_Ring+0x5c>
 80025dc:	f000 fb1a 	bl	8002c14 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	4b31      	ldr	r3, [pc, #196]	@ (80026a8 <Alarm_Ring+0x10c>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	2b64      	cmp	r3, #100	@ 0x64
 80025ea:	d805      	bhi.n	80025f8 <Alarm_Ring+0x5c>
      {
        // Turn off the buzzer for a short duration
        HAL_GPIO_WritePin(GPIOB, BUZZER_Pin, BUZZER_INACTIVE);
 80025ec:	2200      	movs	r2, #0
 80025ee:	2101      	movs	r1, #1
 80025f0:	482e      	ldr	r0, [pc, #184]	@ (80026ac <Alarm_Ring+0x110>)
 80025f2:	f001 fa96 	bl	8003b22 <HAL_GPIO_WritePin>
 80025f6:	e050      	b.n	800269a <Alarm_Ring+0xfe>
      }
      else if ((buzzer_phase == 3) && (HAL_GetTick() - buzzer_tick <= BUZZER_MEDIUM_DELAY))
 80025f8:	4b2a      	ldr	r3, [pc, #168]	@ (80026a4 <Alarm_Ring+0x108>)
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	2b03      	cmp	r3, #3
 80025fe:	d10e      	bne.n	800261e <Alarm_Ring+0x82>
 8002600:	f000 fb08 	bl	8002c14 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	4b28      	ldr	r3, [pc, #160]	@ (80026a8 <Alarm_Ring+0x10c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8002610:	d805      	bhi.n	800261e <Alarm_Ring+0x82>
      {
        // Turn on the buzzer for a medium duration
        HAL_GPIO_WritePin(GPIOB, BUZZER_Pin, BUZZER_ACTIVE);
 8002612:	2201      	movs	r2, #1
 8002614:	2101      	movs	r1, #1
 8002616:	4825      	ldr	r0, [pc, #148]	@ (80026ac <Alarm_Ring+0x110>)
 8002618:	f001 fa83 	bl	8003b22 <HAL_GPIO_WritePin>
 800261c:	e03d      	b.n	800269a <Alarm_Ring+0xfe>
      }
      else if ((buzzer_phase == 4) && (HAL_GetTick() - buzzer_tick <= BUZZER_LONG_DELAY))
 800261e:	4b21      	ldr	r3, [pc, #132]	@ (80026a4 <Alarm_Ring+0x108>)
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	2b04      	cmp	r3, #4
 8002624:	d10e      	bne.n	8002644 <Alarm_Ring+0xa8>
 8002626:	f000 faf5 	bl	8002c14 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	4b1e      	ldr	r3, [pc, #120]	@ (80026a8 <Alarm_Ring+0x10c>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002636:	d805      	bhi.n	8002644 <Alarm_Ring+0xa8>
      {
        // Turn off the buzzer for a long duration
        HAL_GPIO_WritePin(GPIOB, BUZZER_Pin, BUZZER_INACTIVE);
 8002638:	2200      	movs	r2, #0
 800263a:	2101      	movs	r1, #1
 800263c:	481b      	ldr	r0, [pc, #108]	@ (80026ac <Alarm_Ring+0x110>)
 800263e:	f001 fa70 	bl	8003b22 <HAL_GPIO_WritePin>
 8002642:	e02a      	b.n	800269a <Alarm_Ring+0xfe>
      }
      else
      {
        // Reset the tick for the next phase
        buzzer_tick = HAL_GetTick(); 
 8002644:	f000 fae6 	bl	8002c14 <HAL_GetTick>
 8002648:	4603      	mov	r3, r0
 800264a:	4a17      	ldr	r2, [pc, #92]	@ (80026a8 <Alarm_Ring+0x10c>)
 800264c:	6013      	str	r3, [r2, #0]

        // Move to the next phase
        buzzer_phase++; 
 800264e:	4b15      	ldr	r3, [pc, #84]	@ (80026a4 <Alarm_Ring+0x108>)
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	3301      	adds	r3, #1
 8002654:	b2da      	uxtb	r2, r3
 8002656:	4b13      	ldr	r3, [pc, #76]	@ (80026a4 <Alarm_Ring+0x108>)
 8002658:	701a      	strb	r2, [r3, #0]
    system_state.past_mode = ALARM_ACTIVE_MODE; 

    // Reset the buzzer
    HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, BUZZER_INACTIVE); 
  }
}
 800265a:	e01e      	b.n	800269a <Alarm_Ring+0xfe>
      buzzer_tick = HAL_GetTick(); 
 800265c:	f000 fada 	bl	8002c14 <HAL_GetTick>
 8002660:	4603      	mov	r3, r0
 8002662:	4a11      	ldr	r2, [pc, #68]	@ (80026a8 <Alarm_Ring+0x10c>)
 8002664:	6013      	str	r3, [r2, #0]
      buzzer_phase = 0; 
 8002666:	4b0f      	ldr	r3, [pc, #60]	@ (80026a4 <Alarm_Ring+0x108>)
 8002668:	2200      	movs	r2, #0
 800266a:	701a      	strb	r2, [r3, #0]
      buzzer_cycle++; 
 800266c:	4b0c      	ldr	r3, [pc, #48]	@ (80026a0 <Alarm_Ring+0x104>)
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	3301      	adds	r3, #1
 8002672:	b2da      	uxtb	r2, r3
 8002674:	4b0a      	ldr	r3, [pc, #40]	@ (80026a0 <Alarm_Ring+0x104>)
 8002676:	701a      	strb	r2, [r3, #0]
}
 8002678:	e00f      	b.n	800269a <Alarm_Ring+0xfe>
    alarm_active_flag = false; 
 800267a:	4b0d      	ldr	r3, [pc, #52]	@ (80026b0 <Alarm_Ring+0x114>)
 800267c:	2200      	movs	r2, #0
 800267e:	701a      	strb	r2, [r3, #0]
    system_state.mode = system_state.past_mode; 
 8002680:	4b0c      	ldr	r3, [pc, #48]	@ (80026b4 <Alarm_Ring+0x118>)
 8002682:	785a      	ldrb	r2, [r3, #1]
 8002684:	4b0b      	ldr	r3, [pc, #44]	@ (80026b4 <Alarm_Ring+0x118>)
 8002686:	701a      	strb	r2, [r3, #0]
    system_state.past_mode = ALARM_ACTIVE_MODE; 
 8002688:	4b0a      	ldr	r3, [pc, #40]	@ (80026b4 <Alarm_Ring+0x118>)
 800268a:	2204      	movs	r2, #4
 800268c:	705a      	strb	r2, [r3, #1]
    HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, BUZZER_INACTIVE); 
 800268e:	2200      	movs	r2, #0
 8002690:	2101      	movs	r1, #1
 8002692:	4806      	ldr	r0, [pc, #24]	@ (80026ac <Alarm_Ring+0x110>)
 8002694:	f001 fa45 	bl	8003b22 <HAL_GPIO_WritePin>
}
 8002698:	e7ff      	b.n	800269a <Alarm_Ring+0xfe>
 800269a:	bf00      	nop
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	2000045a 	.word	0x2000045a
 80026a4:	2000045b 	.word	0x2000045b
 80026a8:	2000045c 	.word	0x2000045c
 80026ac:	40010c00 	.word	0x40010c00
 80026b0:	200003e7 	.word	0x200003e7
 80026b4:	20000388 	.word	0x20000388

080026b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026bc:	b672      	cpsid	i
}
 80026be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026c0:	bf00      	nop
 80026c2:	e7fd      	b.n	80026c0 <Error_Handler+0x8>

080026c4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80026c8:	4b17      	ldr	r3, [pc, #92]	@ (8002728 <MX_SPI1_Init+0x64>)
 80026ca:	4a18      	ldr	r2, [pc, #96]	@ (800272c <MX_SPI1_Init+0x68>)
 80026cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80026ce:	4b16      	ldr	r3, [pc, #88]	@ (8002728 <MX_SPI1_Init+0x64>)
 80026d0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80026d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80026d6:	4b14      	ldr	r3, [pc, #80]	@ (8002728 <MX_SPI1_Init+0x64>)
 80026d8:	2200      	movs	r2, #0
 80026da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80026dc:	4b12      	ldr	r3, [pc, #72]	@ (8002728 <MX_SPI1_Init+0x64>)
 80026de:	2200      	movs	r2, #0
 80026e0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80026e2:	4b11      	ldr	r3, [pc, #68]	@ (8002728 <MX_SPI1_Init+0x64>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80026e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002728 <MX_SPI1_Init+0x64>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80026ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002728 <MX_SPI1_Init+0x64>)
 80026f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026f4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80026f6:	4b0c      	ldr	r3, [pc, #48]	@ (8002728 <MX_SPI1_Init+0x64>)
 80026f8:	2228      	movs	r2, #40	@ 0x28
 80026fa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80026fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002728 <MX_SPI1_Init+0x64>)
 80026fe:	2200      	movs	r2, #0
 8002700:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002702:	4b09      	ldr	r3, [pc, #36]	@ (8002728 <MX_SPI1_Init+0x64>)
 8002704:	2200      	movs	r2, #0
 8002706:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002708:	4b07      	ldr	r3, [pc, #28]	@ (8002728 <MX_SPI1_Init+0x64>)
 800270a:	2200      	movs	r2, #0
 800270c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800270e:	4b06      	ldr	r3, [pc, #24]	@ (8002728 <MX_SPI1_Init+0x64>)
 8002710:	220a      	movs	r2, #10
 8002712:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002714:	4804      	ldr	r0, [pc, #16]	@ (8002728 <MX_SPI1_Init+0x64>)
 8002716:	f002 ff79 	bl	800560c <HAL_SPI_Init>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002720:	f7ff ffca 	bl	80026b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002724:	bf00      	nop
 8002726:	bd80      	pop	{r7, pc}
 8002728:	200004b0 	.word	0x200004b0
 800272c:	40013000 	.word	0x40013000

08002730 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b088      	sub	sp, #32
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002738:	f107 0310 	add.w	r3, r7, #16
 800273c:	2200      	movs	r2, #0
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	605a      	str	r2, [r3, #4]
 8002742:	609a      	str	r2, [r3, #8]
 8002744:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a15      	ldr	r2, [pc, #84]	@ (80027a0 <HAL_SPI_MspInit+0x70>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d123      	bne.n	8002798 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002750:	4b14      	ldr	r3, [pc, #80]	@ (80027a4 <HAL_SPI_MspInit+0x74>)
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	4a13      	ldr	r2, [pc, #76]	@ (80027a4 <HAL_SPI_MspInit+0x74>)
 8002756:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800275a:	6193      	str	r3, [r2, #24]
 800275c:	4b11      	ldr	r3, [pc, #68]	@ (80027a4 <HAL_SPI_MspInit+0x74>)
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002764:	60fb      	str	r3, [r7, #12]
 8002766:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002768:	4b0e      	ldr	r3, [pc, #56]	@ (80027a4 <HAL_SPI_MspInit+0x74>)
 800276a:	699b      	ldr	r3, [r3, #24]
 800276c:	4a0d      	ldr	r2, [pc, #52]	@ (80027a4 <HAL_SPI_MspInit+0x74>)
 800276e:	f043 0304 	orr.w	r3, r3, #4
 8002772:	6193      	str	r3, [r2, #24]
 8002774:	4b0b      	ldr	r3, [pc, #44]	@ (80027a4 <HAL_SPI_MspInit+0x74>)
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	f003 0304 	and.w	r3, r3, #4
 800277c:	60bb      	str	r3, [r7, #8]
 800277e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|DIN_Pin;
 8002780:	23a0      	movs	r3, #160	@ 0xa0
 8002782:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002784:	2302      	movs	r3, #2
 8002786:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002788:	2303      	movs	r3, #3
 800278a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800278c:	f107 0310 	add.w	r3, r7, #16
 8002790:	4619      	mov	r1, r3
 8002792:	4805      	ldr	r0, [pc, #20]	@ (80027a8 <HAL_SPI_MspInit+0x78>)
 8002794:	f001 f82a 	bl	80037ec <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002798:	bf00      	nop
 800279a:	3720      	adds	r7, #32
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40013000 	.word	0x40013000
 80027a4:	40021000 	.word	0x40021000
 80027a8:	40010800 	.word	0x40010800

080027ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80027b2:	4b15      	ldr	r3, [pc, #84]	@ (8002808 <HAL_MspInit+0x5c>)
 80027b4:	699b      	ldr	r3, [r3, #24]
 80027b6:	4a14      	ldr	r2, [pc, #80]	@ (8002808 <HAL_MspInit+0x5c>)
 80027b8:	f043 0301 	orr.w	r3, r3, #1
 80027bc:	6193      	str	r3, [r2, #24]
 80027be:	4b12      	ldr	r3, [pc, #72]	@ (8002808 <HAL_MspInit+0x5c>)
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	60bb      	str	r3, [r7, #8]
 80027c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027ca:	4b0f      	ldr	r3, [pc, #60]	@ (8002808 <HAL_MspInit+0x5c>)
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	4a0e      	ldr	r2, [pc, #56]	@ (8002808 <HAL_MspInit+0x5c>)
 80027d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027d4:	61d3      	str	r3, [r2, #28]
 80027d6:	4b0c      	ldr	r3, [pc, #48]	@ (8002808 <HAL_MspInit+0x5c>)
 80027d8:	69db      	ldr	r3, [r3, #28]
 80027da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027de:	607b      	str	r3, [r7, #4]
 80027e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80027e2:	4b0a      	ldr	r3, [pc, #40]	@ (800280c <HAL_MspInit+0x60>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	60fb      	str	r3, [r7, #12]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80027ee:	60fb      	str	r3, [r7, #12]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80027f6:	60fb      	str	r3, [r7, #12]
 80027f8:	4a04      	ldr	r2, [pc, #16]	@ (800280c <HAL_MspInit+0x60>)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027fe:	bf00      	nop
 8002800:	3714      	adds	r7, #20
 8002802:	46bd      	mov	sp, r7
 8002804:	bc80      	pop	{r7}
 8002806:	4770      	bx	lr
 8002808:	40021000 	.word	0x40021000
 800280c:	40010000 	.word	0x40010000

08002810 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002814:	bf00      	nop
 8002816:	e7fd      	b.n	8002814 <NMI_Handler+0x4>

08002818 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800281c:	bf00      	nop
 800281e:	e7fd      	b.n	800281c <HardFault_Handler+0x4>

08002820 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002824:	bf00      	nop
 8002826:	e7fd      	b.n	8002824 <MemManage_Handler+0x4>

08002828 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800282c:	bf00      	nop
 800282e:	e7fd      	b.n	800282c <BusFault_Handler+0x4>

08002830 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002834:	bf00      	nop
 8002836:	e7fd      	b.n	8002834 <UsageFault_Handler+0x4>

08002838 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800283c:	bf00      	nop
 800283e:	46bd      	mov	sp, r7
 8002840:	bc80      	pop	{r7}
 8002842:	4770      	bx	lr

08002844 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002848:	bf00      	nop
 800284a:	46bd      	mov	sp, r7
 800284c:	bc80      	pop	{r7}
 800284e:	4770      	bx	lr

08002850 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002854:	bf00      	nop
 8002856:	46bd      	mov	sp, r7
 8002858:	bc80      	pop	{r7}
 800285a:	4770      	bx	lr

0800285c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002860:	f000 f9c6 	bl	8002bf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002864:	bf00      	nop
 8002866:	bd80      	pop	{r7, pc}

08002868 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800286c:	4802      	ldr	r0, [pc, #8]	@ (8002878 <ADC1_2_IRQHandler+0x10>)
 800286e:	f000 fb99 	bl	8002fa4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002872:	bf00      	nop
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	20000304 	.word	0x20000304

0800287c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RTC_IN5_Pin);
 8002880:	2020      	movs	r0, #32
 8002882:	f001 f97f 	bl	8003b84 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON4_IN8_Pin);
 8002886:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800288a:	f001 f97b 	bl	8003b84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800288e:	bf00      	nop
 8002890:	bd80      	pop	{r7, pc}
	...

08002894 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002898:	4802      	ldr	r0, [pc, #8]	@ (80028a4 <USART1_IRQHandler+0x10>)
 800289a:	f003 f9e3 	bl	8005c64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800289e:	bf00      	nop
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	2000050c 	.word	0x2000050c

080028a8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON0_IN12_Pin);
 80028ac:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80028b0:	f001 f968 	bl	8003b84 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON1_IN13_Pin);
 80028b4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80028b8:	f001 f964 	bl	8003b84 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON2_IN14_Pin);
 80028bc:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80028c0:	f001 f960 	bl	8003b84 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON3_IN15_Pin);
 80028c4:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80028c8:	f001 f95c 	bl	8003b84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80028cc:	bf00      	nop
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028dc:	2300      	movs	r3, #0
 80028de:	617b      	str	r3, [r7, #20]
 80028e0:	e00a      	b.n	80028f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80028e2:	f3af 8000 	nop.w
 80028e6:	4601      	mov	r1, r0
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	1c5a      	adds	r2, r3, #1
 80028ec:	60ba      	str	r2, [r7, #8]
 80028ee:	b2ca      	uxtb	r2, r1
 80028f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	3301      	adds	r3, #1
 80028f6:	617b      	str	r3, [r7, #20]
 80028f8:	697a      	ldr	r2, [r7, #20]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	dbf0      	blt.n	80028e2 <_read+0x12>
  }

  return len;
 8002900:	687b      	ldr	r3, [r7, #4]
}
 8002902:	4618      	mov	r0, r3
 8002904:	3718      	adds	r7, #24
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800290a:	b580      	push	{r7, lr}
 800290c:	b086      	sub	sp, #24
 800290e:	af00      	add	r7, sp, #0
 8002910:	60f8      	str	r0, [r7, #12]
 8002912:	60b9      	str	r1, [r7, #8]
 8002914:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002916:	2300      	movs	r3, #0
 8002918:	617b      	str	r3, [r7, #20]
 800291a:	e009      	b.n	8002930 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	1c5a      	adds	r2, r3, #1
 8002920:	60ba      	str	r2, [r7, #8]
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	4618      	mov	r0, r3
 8002926:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	3301      	adds	r3, #1
 800292e:	617b      	str	r3, [r7, #20]
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	429a      	cmp	r2, r3
 8002936:	dbf1      	blt.n	800291c <_write+0x12>
  }
  return len;
 8002938:	687b      	ldr	r3, [r7, #4]
}
 800293a:	4618      	mov	r0, r3
 800293c:	3718      	adds	r7, #24
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <_close>:

int _close(int file)
{
 8002942:	b480      	push	{r7}
 8002944:	b083      	sub	sp, #12
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800294a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800294e:	4618      	mov	r0, r3
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	bc80      	pop	{r7}
 8002956:	4770      	bx	lr

08002958 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002968:	605a      	str	r2, [r3, #4]
  return 0;
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	bc80      	pop	{r7}
 8002974:	4770      	bx	lr

08002976 <_isatty>:

int _isatty(int file)
{
 8002976:	b480      	push	{r7}
 8002978:	b083      	sub	sp, #12
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800297e:	2301      	movs	r3, #1
}
 8002980:	4618      	mov	r0, r3
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	bc80      	pop	{r7}
 8002988:	4770      	bx	lr

0800298a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800298a:	b480      	push	{r7}
 800298c:	b085      	sub	sp, #20
 800298e:	af00      	add	r7, sp, #0
 8002990:	60f8      	str	r0, [r7, #12]
 8002992:	60b9      	str	r1, [r7, #8]
 8002994:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	3714      	adds	r7, #20
 800299c:	46bd      	mov	sp, r7
 800299e:	bc80      	pop	{r7}
 80029a0:	4770      	bx	lr
	...

080029a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029ac:	4a14      	ldr	r2, [pc, #80]	@ (8002a00 <_sbrk+0x5c>)
 80029ae:	4b15      	ldr	r3, [pc, #84]	@ (8002a04 <_sbrk+0x60>)
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029b8:	4b13      	ldr	r3, [pc, #76]	@ (8002a08 <_sbrk+0x64>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d102      	bne.n	80029c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029c0:	4b11      	ldr	r3, [pc, #68]	@ (8002a08 <_sbrk+0x64>)
 80029c2:	4a12      	ldr	r2, [pc, #72]	@ (8002a0c <_sbrk+0x68>)
 80029c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029c6:	4b10      	ldr	r3, [pc, #64]	@ (8002a08 <_sbrk+0x64>)
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4413      	add	r3, r2
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d207      	bcs.n	80029e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029d4:	f008 f9be 	bl	800ad54 <__errno>
 80029d8:	4603      	mov	r3, r0
 80029da:	220c      	movs	r2, #12
 80029dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029de:	f04f 33ff 	mov.w	r3, #4294967295
 80029e2:	e009      	b.n	80029f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029e4:	4b08      	ldr	r3, [pc, #32]	@ (8002a08 <_sbrk+0x64>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029ea:	4b07      	ldr	r3, [pc, #28]	@ (8002a08 <_sbrk+0x64>)
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4413      	add	r3, r2
 80029f2:	4a05      	ldr	r2, [pc, #20]	@ (8002a08 <_sbrk+0x64>)
 80029f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029f6:	68fb      	ldr	r3, [r7, #12]
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3718      	adds	r7, #24
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	20005000 	.word	0x20005000
 8002a04:	00000400 	.word	0x00000400
 8002a08:	20000508 	.word	0x20000508
 8002a0c:	200006c0 	.word	0x200006c0

08002a10 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a14:	bf00      	nop
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bc80      	pop	{r7}
 8002a1a:	4770      	bx	lr

08002a1c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a20:	4b11      	ldr	r3, [pc, #68]	@ (8002a68 <MX_USART1_UART_Init+0x4c>)
 8002a22:	4a12      	ldr	r2, [pc, #72]	@ (8002a6c <MX_USART1_UART_Init+0x50>)
 8002a24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002a26:	4b10      	ldr	r3, [pc, #64]	@ (8002a68 <MX_USART1_UART_Init+0x4c>)
 8002a28:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002a2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a2e:	4b0e      	ldr	r3, [pc, #56]	@ (8002a68 <MX_USART1_UART_Init+0x4c>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a34:	4b0c      	ldr	r3, [pc, #48]	@ (8002a68 <MX_USART1_UART_Init+0x4c>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8002a68 <MX_USART1_UART_Init+0x4c>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a40:	4b09      	ldr	r3, [pc, #36]	@ (8002a68 <MX_USART1_UART_Init+0x4c>)
 8002a42:	220c      	movs	r2, #12
 8002a44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a46:	4b08      	ldr	r3, [pc, #32]	@ (8002a68 <MX_USART1_UART_Init+0x4c>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a4c:	4b06      	ldr	r3, [pc, #24]	@ (8002a68 <MX_USART1_UART_Init+0x4c>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a52:	4805      	ldr	r0, [pc, #20]	@ (8002a68 <MX_USART1_UART_Init+0x4c>)
 8002a54:	f003 f85b 	bl	8005b0e <HAL_UART_Init>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002a5e:	f7ff fe2b 	bl	80026b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a62:	bf00      	nop
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	2000050c 	.word	0x2000050c
 8002a6c:	40013800 	.word	0x40013800

08002a70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b088      	sub	sp, #32
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a78:	f107 0310 	add.w	r3, r7, #16
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	605a      	str	r2, [r3, #4]
 8002a82:	609a      	str	r2, [r3, #8]
 8002a84:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a20      	ldr	r2, [pc, #128]	@ (8002b0c <HAL_UART_MspInit+0x9c>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d139      	bne.n	8002b04 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a90:	4b1f      	ldr	r3, [pc, #124]	@ (8002b10 <HAL_UART_MspInit+0xa0>)
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	4a1e      	ldr	r2, [pc, #120]	@ (8002b10 <HAL_UART_MspInit+0xa0>)
 8002a96:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a9a:	6193      	str	r3, [r2, #24]
 8002a9c:	4b1c      	ldr	r3, [pc, #112]	@ (8002b10 <HAL_UART_MspInit+0xa0>)
 8002a9e:	699b      	ldr	r3, [r3, #24]
 8002aa0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002aa4:	60fb      	str	r3, [r7, #12]
 8002aa6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aa8:	4b19      	ldr	r3, [pc, #100]	@ (8002b10 <HAL_UART_MspInit+0xa0>)
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	4a18      	ldr	r2, [pc, #96]	@ (8002b10 <HAL_UART_MspInit+0xa0>)
 8002aae:	f043 0304 	orr.w	r3, r3, #4
 8002ab2:	6193      	str	r3, [r2, #24]
 8002ab4:	4b16      	ldr	r3, [pc, #88]	@ (8002b10 <HAL_UART_MspInit+0xa0>)
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	f003 0304 	and.w	r3, r3, #4
 8002abc:	60bb      	str	r3, [r7, #8]
 8002abe:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002ac0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ac4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002aca:	2303      	movs	r3, #3
 8002acc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ace:	f107 0310 	add.w	r3, r7, #16
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	480f      	ldr	r0, [pc, #60]	@ (8002b14 <HAL_UART_MspInit+0xa4>)
 8002ad6:	f000 fe89 	bl	80037ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002ada:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ade:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ae8:	f107 0310 	add.w	r3, r7, #16
 8002aec:	4619      	mov	r1, r3
 8002aee:	4809      	ldr	r0, [pc, #36]	@ (8002b14 <HAL_UART_MspInit+0xa4>)
 8002af0:	f000 fe7c 	bl	80037ec <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002af4:	2200      	movs	r2, #0
 8002af6:	2100      	movs	r1, #0
 8002af8:	2025      	movs	r0, #37	@ 0x25
 8002afa:	f000 fd8e 	bl	800361a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002afe:	2025      	movs	r0, #37	@ 0x25
 8002b00:	f000 fda7 	bl	8003652 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002b04:	bf00      	nop
 8002b06:	3720      	adds	r7, #32
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	40013800 	.word	0x40013800
 8002b10:	40021000 	.word	0x40021000
 8002b14:	40010800 	.word	0x40010800

08002b18 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002b18:	f7ff ff7a 	bl	8002a10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b1c:	480b      	ldr	r0, [pc, #44]	@ (8002b4c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002b1e:	490c      	ldr	r1, [pc, #48]	@ (8002b50 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002b20:	4a0c      	ldr	r2, [pc, #48]	@ (8002b54 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002b22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b24:	e002      	b.n	8002b2c <LoopCopyDataInit>

08002b26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b2a:	3304      	adds	r3, #4

08002b2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b30:	d3f9      	bcc.n	8002b26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b32:	4a09      	ldr	r2, [pc, #36]	@ (8002b58 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002b34:	4c09      	ldr	r4, [pc, #36]	@ (8002b5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b38:	e001      	b.n	8002b3e <LoopFillZerobss>

08002b3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b3c:	3204      	adds	r2, #4

08002b3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b40:	d3fb      	bcc.n	8002b3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b42:	f008 f90d 	bl	800ad60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b46:	f7fd fcc5 	bl	80004d4 <main>
  bx lr
 8002b4a:	4770      	bx	lr
  ldr r0, =_sdata
 8002b4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b50:	200002e8 	.word	0x200002e8
  ldr r2, =_sidata
 8002b54:	0800f578 	.word	0x0800f578
  ldr r2, =_sbss
 8002b58:	200002e8 	.word	0x200002e8
  ldr r4, =_ebss
 8002b5c:	200006bc 	.word	0x200006bc

08002b60 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b60:	e7fe      	b.n	8002b60 <CAN1_RX1_IRQHandler>
	...

08002b64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b68:	4b08      	ldr	r3, [pc, #32]	@ (8002b8c <HAL_Init+0x28>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a07      	ldr	r2, [pc, #28]	@ (8002b8c <HAL_Init+0x28>)
 8002b6e:	f043 0310 	orr.w	r3, r3, #16
 8002b72:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b74:	2003      	movs	r0, #3
 8002b76:	f000 fd45 	bl	8003604 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b7a:	200f      	movs	r0, #15
 8002b7c:	f000 f808 	bl	8002b90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b80:	f7ff fe14 	bl	80027ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	40022000 	.word	0x40022000

08002b90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b98:	4b12      	ldr	r3, [pc, #72]	@ (8002be4 <HAL_InitTick+0x54>)
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	4b12      	ldr	r3, [pc, #72]	@ (8002be8 <HAL_InitTick+0x58>)
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ba6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f000 fd5d 	bl	800366e <HAL_SYSTICK_Config>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e00e      	b.n	8002bdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2b0f      	cmp	r3, #15
 8002bc2:	d80a      	bhi.n	8002bda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	6879      	ldr	r1, [r7, #4]
 8002bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bcc:	f000 fd25 	bl	800361a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bd0:	4a06      	ldr	r2, [pc, #24]	@ (8002bec <HAL_InitTick+0x5c>)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	e000      	b.n	8002bdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3708      	adds	r7, #8
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	20000080 	.word	0x20000080
 8002be8:	20000088 	.word	0x20000088
 8002bec:	20000084 	.word	0x20000084

08002bf0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bf4:	4b05      	ldr	r3, [pc, #20]	@ (8002c0c <HAL_IncTick+0x1c>)
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	4b05      	ldr	r3, [pc, #20]	@ (8002c10 <HAL_IncTick+0x20>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4413      	add	r3, r2
 8002c00:	4a03      	ldr	r2, [pc, #12]	@ (8002c10 <HAL_IncTick+0x20>)
 8002c02:	6013      	str	r3, [r2, #0]
}
 8002c04:	bf00      	nop
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bc80      	pop	{r7}
 8002c0a:	4770      	bx	lr
 8002c0c:	20000088 	.word	0x20000088
 8002c10:	20000554 	.word	0x20000554

08002c14 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  return uwTick;
 8002c18:	4b02      	ldr	r3, [pc, #8]	@ (8002c24 <HAL_GetTick+0x10>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bc80      	pop	{r7}
 8002c22:	4770      	bx	lr
 8002c24:	20000554 	.word	0x20000554

08002c28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c30:	f7ff fff0 	bl	8002c14 <HAL_GetTick>
 8002c34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c40:	d005      	beq.n	8002c4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c42:	4b0a      	ldr	r3, [pc, #40]	@ (8002c6c <HAL_Delay+0x44>)
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	461a      	mov	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c4e:	bf00      	nop
 8002c50:	f7ff ffe0 	bl	8002c14 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d8f7      	bhi.n	8002c50 <HAL_Delay+0x28>
  {
  }
}
 8002c60:	bf00      	nop
 8002c62:	bf00      	nop
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	20000088 	.word	0x20000088

08002c70 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002c80:	2300      	movs	r3, #0
 8002c82:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002c84:	2300      	movs	r3, #0
 8002c86:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e0be      	b.n	8002e10 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d109      	bne.n	8002cb4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f7fd fa8a 	bl	80001c8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f000 fb8f 	bl	80033d8 <ADC_ConversionStop_Disable>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cc2:	f003 0310 	and.w	r3, r3, #16
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f040 8099 	bne.w	8002dfe <HAL_ADC_Init+0x18e>
 8002ccc:	7dfb      	ldrb	r3, [r7, #23]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f040 8095 	bne.w	8002dfe <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cd8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002cdc:	f023 0302 	bic.w	r3, r3, #2
 8002ce0:	f043 0202 	orr.w	r2, r3, #2
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002cf0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	7b1b      	ldrb	r3, [r3, #12]
 8002cf6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002cf8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002cfa:	68ba      	ldr	r2, [r7, #8]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d08:	d003      	beq.n	8002d12 <HAL_ADC_Init+0xa2>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d102      	bne.n	8002d18 <HAL_ADC_Init+0xa8>
 8002d12:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d16:	e000      	b.n	8002d1a <HAL_ADC_Init+0xaa>
 8002d18:	2300      	movs	r3, #0
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	7d1b      	ldrb	r3, [r3, #20]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d119      	bne.n	8002d5c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	7b1b      	ldrb	r3, [r3, #12]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d109      	bne.n	8002d44 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	3b01      	subs	r3, #1
 8002d36:	035a      	lsls	r2, r3, #13
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002d40:	613b      	str	r3, [r7, #16]
 8002d42:	e00b      	b.n	8002d5c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d48:	f043 0220 	orr.w	r2, r3, #32
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d54:	f043 0201 	orr.w	r2, r3, #1
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	689a      	ldr	r2, [r3, #8]
 8002d76:	4b28      	ldr	r3, [pc, #160]	@ (8002e18 <HAL_ADC_Init+0x1a8>)
 8002d78:	4013      	ands	r3, r2
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	6812      	ldr	r2, [r2, #0]
 8002d7e:	68b9      	ldr	r1, [r7, #8]
 8002d80:	430b      	orrs	r3, r1
 8002d82:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d8c:	d003      	beq.n	8002d96 <HAL_ADC_Init+0x126>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d104      	bne.n	8002da0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	051b      	lsls	r3, r3, #20
 8002d9e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002da6:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	430a      	orrs	r2, r1
 8002db2:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	689a      	ldr	r2, [r3, #8]
 8002dba:	4b18      	ldr	r3, [pc, #96]	@ (8002e1c <HAL_ADC_Init+0x1ac>)
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	68ba      	ldr	r2, [r7, #8]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d10b      	bne.n	8002ddc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dce:	f023 0303 	bic.w	r3, r3, #3
 8002dd2:	f043 0201 	orr.w	r2, r3, #1
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002dda:	e018      	b.n	8002e0e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002de0:	f023 0312 	bic.w	r3, r3, #18
 8002de4:	f043 0210 	orr.w	r2, r3, #16
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002df0:	f043 0201 	orr.w	r2, r3, #1
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002dfc:	e007      	b.n	8002e0e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e02:	f043 0210 	orr.w	r2, r3, #16
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002e0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3718      	adds	r7, #24
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	ffe1f7fd 	.word	0xffe1f7fd
 8002e1c:	ff1f0efe 	.word	0xff1f0efe

08002e20 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d101      	bne.n	8002e3a <HAL_ADC_Start_IT+0x1a>
 8002e36:	2302      	movs	r3, #2
 8002e38:	e0a0      	b.n	8002f7c <HAL_ADC_Start_IT+0x15c>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 fa6e 	bl	8003324 <ADC_Enable>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002e4c:	7bfb      	ldrb	r3, [r7, #15]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f040 808f 	bne.w	8002f72 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e58:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002e5c:	f023 0301 	bic.w	r3, r3, #1
 8002e60:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a45      	ldr	r2, [pc, #276]	@ (8002f84 <HAL_ADC_Start_IT+0x164>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d105      	bne.n	8002e7e <HAL_ADC_Start_IT+0x5e>
 8002e72:	4b45      	ldr	r3, [pc, #276]	@ (8002f88 <HAL_ADC_Start_IT+0x168>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d115      	bne.n	8002eaa <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e82:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d026      	beq.n	8002ee6 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e9c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002ea0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002ea8:	e01d      	b.n	8002ee6 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eae:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a33      	ldr	r2, [pc, #204]	@ (8002f88 <HAL_ADC_Start_IT+0x168>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d004      	beq.n	8002eca <HAL_ADC_Start_IT+0xaa>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a2f      	ldr	r2, [pc, #188]	@ (8002f84 <HAL_ADC_Start_IT+0x164>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d10d      	bne.n	8002ee6 <HAL_ADC_Start_IT+0xc6>
 8002eca:	4b2f      	ldr	r3, [pc, #188]	@ (8002f88 <HAL_ADC_Start_IT+0x168>)
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d007      	beq.n	8002ee6 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eda:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002ede:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d006      	beq.n	8002f00 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ef6:	f023 0206 	bic.w	r2, r3, #6
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002efe:	e002      	b.n	8002f06 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f06f 0202 	mvn.w	r2, #2
 8002f16:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	685a      	ldr	r2, [r3, #4]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f042 0220 	orr.w	r2, r2, #32
 8002f26:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002f32:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002f36:	d113      	bne.n	8002f60 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002f3c:	4a11      	ldr	r2, [pc, #68]	@ (8002f84 <HAL_ADC_Start_IT+0x164>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d105      	bne.n	8002f4e <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002f42:	4b11      	ldr	r3, [pc, #68]	@ (8002f88 <HAL_ADC_Start_IT+0x168>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d108      	bne.n	8002f60 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	689a      	ldr	r2, [r3, #8]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002f5c:	609a      	str	r2, [r3, #8]
 8002f5e:	e00c      	b.n	8002f7a <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689a      	ldr	r2, [r3, #8]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002f6e:	609a      	str	r2, [r3, #8]
 8002f70:	e003      	b.n	8002f7a <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3710      	adds	r7, #16
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	40012800 	.word	0x40012800
 8002f88:	40012400 	.word	0x40012400

08002f8c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bc80      	pop	{r7}
 8002fa2:	4770      	bx	lr

08002fa4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	f003 0320 	and.w	r3, r3, #32
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d03e      	beq.n	8003044 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f003 0302 	and.w	r3, r3, #2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d039      	beq.n	8003044 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fd4:	f003 0310 	and.w	r3, r3, #16
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d105      	bne.n	8002fe8 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fe0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002ff2:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002ff6:	d11d      	bne.n	8003034 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d119      	bne.n	8003034 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	685a      	ldr	r2, [r3, #4]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f022 0220 	bic.w	r2, r2, #32
 800300e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003014:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003020:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d105      	bne.n	8003034 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800302c:	f043 0201 	orr.w	r2, r3, #1
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f7ff f92b 	bl	8002290 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f06f 0212 	mvn.w	r2, #18
 8003042:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800304a:	2b00      	cmp	r3, #0
 800304c:	d04d      	beq.n	80030ea <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f003 0304 	and.w	r3, r3, #4
 8003054:	2b00      	cmp	r3, #0
 8003056:	d048      	beq.n	80030ea <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800305c:	f003 0310 	and.w	r3, r3, #16
 8003060:	2b00      	cmp	r3, #0
 8003062:	d105      	bne.n	8003070 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003068:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800307a:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 800307e:	d012      	beq.n	80030a6 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800308a:	2b00      	cmp	r3, #0
 800308c:	d125      	bne.n	80030da <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003098:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800309c:	d11d      	bne.n	80030da <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d119      	bne.n	80030da <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	685a      	ldr	r2, [r3, #4]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80030b4:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d105      	bne.n	80030da <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030d2:	f043 0201 	orr.w	r2, r3, #1
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 f9bd 	bl	800345a <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f06f 020c 	mvn.w	r2, #12
 80030e8:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d012      	beq.n	800311a <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00d      	beq.n	800311a <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003102:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 f809 	bl	8003122 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f06f 0201 	mvn.w	r2, #1
 8003118:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800311a:	bf00      	nop
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003122:	b480      	push	{r7}
 8003124:	b083      	sub	sp, #12
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800312a:	bf00      	nop
 800312c:	370c      	adds	r7, #12
 800312e:	46bd      	mov	sp, r7
 8003130:	bc80      	pop	{r7}
 8003132:	4770      	bx	lr

08003134 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003134:	b480      	push	{r7}
 8003136:	b085      	sub	sp, #20
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800313e:	2300      	movs	r3, #0
 8003140:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003142:	2300      	movs	r3, #0
 8003144:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800314c:	2b01      	cmp	r3, #1
 800314e:	d101      	bne.n	8003154 <HAL_ADC_ConfigChannel+0x20>
 8003150:	2302      	movs	r3, #2
 8003152:	e0dc      	b.n	800330e <HAL_ADC_ConfigChannel+0x1da>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	2b06      	cmp	r3, #6
 8003162:	d81c      	bhi.n	800319e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685a      	ldr	r2, [r3, #4]
 800316e:	4613      	mov	r3, r2
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	4413      	add	r3, r2
 8003174:	3b05      	subs	r3, #5
 8003176:	221f      	movs	r2, #31
 8003178:	fa02 f303 	lsl.w	r3, r2, r3
 800317c:	43db      	mvns	r3, r3
 800317e:	4019      	ands	r1, r3
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	6818      	ldr	r0, [r3, #0]
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685a      	ldr	r2, [r3, #4]
 8003188:	4613      	mov	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	4413      	add	r3, r2
 800318e:	3b05      	subs	r3, #5
 8003190:	fa00 f203 	lsl.w	r2, r0, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	430a      	orrs	r2, r1
 800319a:	635a      	str	r2, [r3, #52]	@ 0x34
 800319c:	e03c      	b.n	8003218 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	2b0c      	cmp	r3, #12
 80031a4:	d81c      	bhi.n	80031e0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685a      	ldr	r2, [r3, #4]
 80031b0:	4613      	mov	r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	4413      	add	r3, r2
 80031b6:	3b23      	subs	r3, #35	@ 0x23
 80031b8:	221f      	movs	r2, #31
 80031ba:	fa02 f303 	lsl.w	r3, r2, r3
 80031be:	43db      	mvns	r3, r3
 80031c0:	4019      	ands	r1, r3
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	6818      	ldr	r0, [r3, #0]
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	4613      	mov	r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	4413      	add	r3, r2
 80031d0:	3b23      	subs	r3, #35	@ 0x23
 80031d2:	fa00 f203 	lsl.w	r2, r0, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	430a      	orrs	r2, r1
 80031dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80031de:	e01b      	b.n	8003218 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	685a      	ldr	r2, [r3, #4]
 80031ea:	4613      	mov	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	4413      	add	r3, r2
 80031f0:	3b41      	subs	r3, #65	@ 0x41
 80031f2:	221f      	movs	r2, #31
 80031f4:	fa02 f303 	lsl.w	r3, r2, r3
 80031f8:	43db      	mvns	r3, r3
 80031fa:	4019      	ands	r1, r3
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	6818      	ldr	r0, [r3, #0]
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685a      	ldr	r2, [r3, #4]
 8003204:	4613      	mov	r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	4413      	add	r3, r2
 800320a:	3b41      	subs	r3, #65	@ 0x41
 800320c:	fa00 f203 	lsl.w	r2, r0, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	430a      	orrs	r2, r1
 8003216:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2b09      	cmp	r3, #9
 800321e:	d91c      	bls.n	800325a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68d9      	ldr	r1, [r3, #12]
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	4613      	mov	r3, r2
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	4413      	add	r3, r2
 8003230:	3b1e      	subs	r3, #30
 8003232:	2207      	movs	r2, #7
 8003234:	fa02 f303 	lsl.w	r3, r2, r3
 8003238:	43db      	mvns	r3, r3
 800323a:	4019      	ands	r1, r3
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	6898      	ldr	r0, [r3, #8]
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	4613      	mov	r3, r2
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	4413      	add	r3, r2
 800324a:	3b1e      	subs	r3, #30
 800324c:	fa00 f203 	lsl.w	r2, r0, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	430a      	orrs	r2, r1
 8003256:	60da      	str	r2, [r3, #12]
 8003258:	e019      	b.n	800328e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	6919      	ldr	r1, [r3, #16]
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	4613      	mov	r3, r2
 8003266:	005b      	lsls	r3, r3, #1
 8003268:	4413      	add	r3, r2
 800326a:	2207      	movs	r2, #7
 800326c:	fa02 f303 	lsl.w	r3, r2, r3
 8003270:	43db      	mvns	r3, r3
 8003272:	4019      	ands	r1, r3
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	6898      	ldr	r0, [r3, #8]
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	4613      	mov	r3, r2
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	4413      	add	r3, r2
 8003282:	fa00 f203 	lsl.w	r2, r0, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	430a      	orrs	r2, r1
 800328c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2b10      	cmp	r3, #16
 8003294:	d003      	beq.n	800329e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800329a:	2b11      	cmp	r3, #17
 800329c:	d132      	bne.n	8003304 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a1d      	ldr	r2, [pc, #116]	@ (8003318 <HAL_ADC_ConfigChannel+0x1e4>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d125      	bne.n	80032f4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d126      	bne.n	8003304 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	689a      	ldr	r2, [r3, #8]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80032c4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2b10      	cmp	r3, #16
 80032cc:	d11a      	bne.n	8003304 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80032ce:	4b13      	ldr	r3, [pc, #76]	@ (800331c <HAL_ADC_ConfigChannel+0x1e8>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a13      	ldr	r2, [pc, #76]	@ (8003320 <HAL_ADC_ConfigChannel+0x1ec>)
 80032d4:	fba2 2303 	umull	r2, r3, r2, r3
 80032d8:	0c9a      	lsrs	r2, r3, #18
 80032da:	4613      	mov	r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	4413      	add	r3, r2
 80032e0:	005b      	lsls	r3, r3, #1
 80032e2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80032e4:	e002      	b.n	80032ec <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	3b01      	subs	r3, #1
 80032ea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1f9      	bne.n	80032e6 <HAL_ADC_ConfigChannel+0x1b2>
 80032f2:	e007      	b.n	8003304 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032f8:	f043 0220 	orr.w	r2, r3, #32
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800330c:	7bfb      	ldrb	r3, [r7, #15]
}
 800330e:	4618      	mov	r0, r3
 8003310:	3714      	adds	r7, #20
 8003312:	46bd      	mov	sp, r7
 8003314:	bc80      	pop	{r7}
 8003316:	4770      	bx	lr
 8003318:	40012400 	.word	0x40012400
 800331c:	20000080 	.word	0x20000080
 8003320:	431bde83 	.word	0x431bde83

08003324 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800332c:	2300      	movs	r3, #0
 800332e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003330:	2300      	movs	r3, #0
 8003332:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	2b01      	cmp	r3, #1
 8003340:	d040      	beq.n	80033c4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	689a      	ldr	r2, [r3, #8]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f042 0201 	orr.w	r2, r2, #1
 8003350:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003352:	4b1f      	ldr	r3, [pc, #124]	@ (80033d0 <ADC_Enable+0xac>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a1f      	ldr	r2, [pc, #124]	@ (80033d4 <ADC_Enable+0xb0>)
 8003358:	fba2 2303 	umull	r2, r3, r2, r3
 800335c:	0c9b      	lsrs	r3, r3, #18
 800335e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003360:	e002      	b.n	8003368 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	3b01      	subs	r3, #1
 8003366:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1f9      	bne.n	8003362 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800336e:	f7ff fc51 	bl	8002c14 <HAL_GetTick>
 8003372:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003374:	e01f      	b.n	80033b6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003376:	f7ff fc4d 	bl	8002c14 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	2b02      	cmp	r3, #2
 8003382:	d918      	bls.n	80033b6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b01      	cmp	r3, #1
 8003390:	d011      	beq.n	80033b6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003396:	f043 0210 	orr.w	r2, r3, #16
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033a2:	f043 0201 	orr.w	r2, r3, #1
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e007      	b.n	80033c6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d1d8      	bne.n	8003376 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	20000080 	.word	0x20000080
 80033d4:	431bde83 	.word	0x431bde83

080033d8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033e0:	2300      	movs	r3, #0
 80033e2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d12e      	bne.n	8003450 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	689a      	ldr	r2, [r3, #8]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f022 0201 	bic.w	r2, r2, #1
 8003400:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003402:	f7ff fc07 	bl	8002c14 <HAL_GetTick>
 8003406:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003408:	e01b      	b.n	8003442 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800340a:	f7ff fc03 	bl	8002c14 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d914      	bls.n	8003442 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	2b01      	cmp	r3, #1
 8003424:	d10d      	bne.n	8003442 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800342a:	f043 0210 	orr.w	r2, r3, #16
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003436:	f043 0201 	orr.w	r2, r3, #1
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e007      	b.n	8003452 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f003 0301 	and.w	r3, r3, #1
 800344c:	2b01      	cmp	r3, #1
 800344e:	d0dc      	beq.n	800340a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3710      	adds	r7, #16
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800345a:	b480      	push	{r7}
 800345c:	b083      	sub	sp, #12
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8003462:	bf00      	nop
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	bc80      	pop	{r7}
 800346a:	4770      	bx	lr

0800346c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800346c:	b480      	push	{r7}
 800346e:	b085      	sub	sp, #20
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f003 0307 	and.w	r3, r3, #7
 800347a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800347c:	4b0c      	ldr	r3, [pc, #48]	@ (80034b0 <__NVIC_SetPriorityGrouping+0x44>)
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003482:	68ba      	ldr	r2, [r7, #8]
 8003484:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003488:	4013      	ands	r3, r2
 800348a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003494:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003498:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800349c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800349e:	4a04      	ldr	r2, [pc, #16]	@ (80034b0 <__NVIC_SetPriorityGrouping+0x44>)
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	60d3      	str	r3, [r2, #12]
}
 80034a4:	bf00      	nop
 80034a6:	3714      	adds	r7, #20
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bc80      	pop	{r7}
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	e000ed00 	.word	0xe000ed00

080034b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034b4:	b480      	push	{r7}
 80034b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034b8:	4b04      	ldr	r3, [pc, #16]	@ (80034cc <__NVIC_GetPriorityGrouping+0x18>)
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	0a1b      	lsrs	r3, r3, #8
 80034be:	f003 0307 	and.w	r3, r3, #7
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bc80      	pop	{r7}
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	e000ed00 	.word	0xe000ed00

080034d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	4603      	mov	r3, r0
 80034d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	db0b      	blt.n	80034fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034e2:	79fb      	ldrb	r3, [r7, #7]
 80034e4:	f003 021f 	and.w	r2, r3, #31
 80034e8:	4906      	ldr	r1, [pc, #24]	@ (8003504 <__NVIC_EnableIRQ+0x34>)
 80034ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ee:	095b      	lsrs	r3, r3, #5
 80034f0:	2001      	movs	r0, #1
 80034f2:	fa00 f202 	lsl.w	r2, r0, r2
 80034f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80034fa:	bf00      	nop
 80034fc:	370c      	adds	r7, #12
 80034fe:	46bd      	mov	sp, r7
 8003500:	bc80      	pop	{r7}
 8003502:	4770      	bx	lr
 8003504:	e000e100 	.word	0xe000e100

08003508 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	4603      	mov	r3, r0
 8003510:	6039      	str	r1, [r7, #0]
 8003512:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003518:	2b00      	cmp	r3, #0
 800351a:	db0a      	blt.n	8003532 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	b2da      	uxtb	r2, r3
 8003520:	490c      	ldr	r1, [pc, #48]	@ (8003554 <__NVIC_SetPriority+0x4c>)
 8003522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003526:	0112      	lsls	r2, r2, #4
 8003528:	b2d2      	uxtb	r2, r2
 800352a:	440b      	add	r3, r1
 800352c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003530:	e00a      	b.n	8003548 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	b2da      	uxtb	r2, r3
 8003536:	4908      	ldr	r1, [pc, #32]	@ (8003558 <__NVIC_SetPriority+0x50>)
 8003538:	79fb      	ldrb	r3, [r7, #7]
 800353a:	f003 030f 	and.w	r3, r3, #15
 800353e:	3b04      	subs	r3, #4
 8003540:	0112      	lsls	r2, r2, #4
 8003542:	b2d2      	uxtb	r2, r2
 8003544:	440b      	add	r3, r1
 8003546:	761a      	strb	r2, [r3, #24]
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	bc80      	pop	{r7}
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	e000e100 	.word	0xe000e100
 8003558:	e000ed00 	.word	0xe000ed00

0800355c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800355c:	b480      	push	{r7}
 800355e:	b089      	sub	sp, #36	@ 0x24
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f003 0307 	and.w	r3, r3, #7
 800356e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	f1c3 0307 	rsb	r3, r3, #7
 8003576:	2b04      	cmp	r3, #4
 8003578:	bf28      	it	cs
 800357a:	2304      	movcs	r3, #4
 800357c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	3304      	adds	r3, #4
 8003582:	2b06      	cmp	r3, #6
 8003584:	d902      	bls.n	800358c <NVIC_EncodePriority+0x30>
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	3b03      	subs	r3, #3
 800358a:	e000      	b.n	800358e <NVIC_EncodePriority+0x32>
 800358c:	2300      	movs	r3, #0
 800358e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003590:	f04f 32ff 	mov.w	r2, #4294967295
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	fa02 f303 	lsl.w	r3, r2, r3
 800359a:	43da      	mvns	r2, r3
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	401a      	ands	r2, r3
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035a4:	f04f 31ff 	mov.w	r1, #4294967295
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	fa01 f303 	lsl.w	r3, r1, r3
 80035ae:	43d9      	mvns	r1, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035b4:	4313      	orrs	r3, r2
         );
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3724      	adds	r7, #36	@ 0x24
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bc80      	pop	{r7}
 80035be:	4770      	bx	lr

080035c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	3b01      	subs	r3, #1
 80035cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80035d0:	d301      	bcc.n	80035d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035d2:	2301      	movs	r3, #1
 80035d4:	e00f      	b.n	80035f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035d6:	4a0a      	ldr	r2, [pc, #40]	@ (8003600 <SysTick_Config+0x40>)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	3b01      	subs	r3, #1
 80035dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035de:	210f      	movs	r1, #15
 80035e0:	f04f 30ff 	mov.w	r0, #4294967295
 80035e4:	f7ff ff90 	bl	8003508 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035e8:	4b05      	ldr	r3, [pc, #20]	@ (8003600 <SysTick_Config+0x40>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035ee:	4b04      	ldr	r3, [pc, #16]	@ (8003600 <SysTick_Config+0x40>)
 80035f0:	2207      	movs	r2, #7
 80035f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	e000e010 	.word	0xe000e010

08003604 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f7ff ff2d 	bl	800346c <__NVIC_SetPriorityGrouping>
}
 8003612:	bf00      	nop
 8003614:	3708      	adds	r7, #8
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800361a:	b580      	push	{r7, lr}
 800361c:	b086      	sub	sp, #24
 800361e:	af00      	add	r7, sp, #0
 8003620:	4603      	mov	r3, r0
 8003622:	60b9      	str	r1, [r7, #8]
 8003624:	607a      	str	r2, [r7, #4]
 8003626:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003628:	2300      	movs	r3, #0
 800362a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800362c:	f7ff ff42 	bl	80034b4 <__NVIC_GetPriorityGrouping>
 8003630:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	68b9      	ldr	r1, [r7, #8]
 8003636:	6978      	ldr	r0, [r7, #20]
 8003638:	f7ff ff90 	bl	800355c <NVIC_EncodePriority>
 800363c:	4602      	mov	r2, r0
 800363e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003642:	4611      	mov	r1, r2
 8003644:	4618      	mov	r0, r3
 8003646:	f7ff ff5f 	bl	8003508 <__NVIC_SetPriority>
}
 800364a:	bf00      	nop
 800364c:	3718      	adds	r7, #24
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003652:	b580      	push	{r7, lr}
 8003654:	b082      	sub	sp, #8
 8003656:	af00      	add	r7, sp, #0
 8003658:	4603      	mov	r3, r0
 800365a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800365c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003660:	4618      	mov	r0, r3
 8003662:	f7ff ff35 	bl	80034d0 <__NVIC_EnableIRQ>
}
 8003666:	bf00      	nop
 8003668:	3708      	adds	r7, #8
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800366e:	b580      	push	{r7, lr}
 8003670:	b082      	sub	sp, #8
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f7ff ffa2 	bl	80035c0 <SysTick_Config>
 800367c:	4603      	mov	r3, r0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3708      	adds	r7, #8
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003686:	b480      	push	{r7}
 8003688:	b085      	sub	sp, #20
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800368e:	2300      	movs	r3, #0
 8003690:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b02      	cmp	r3, #2
 800369c:	d008      	beq.n	80036b0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2204      	movs	r2, #4
 80036a2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e020      	b.n	80036f2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f022 020e 	bic.w	r2, r2, #14
 80036be:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f022 0201 	bic.w	r2, r2, #1
 80036ce:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036d8:	2101      	movs	r1, #1
 80036da:	fa01 f202 	lsl.w	r2, r1, r2
 80036de:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80036f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3714      	adds	r7, #20
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bc80      	pop	{r7}
 80036fa:	4770      	bx	lr

080036fc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003704:	2300      	movs	r3, #0
 8003706:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800370e:	b2db      	uxtb	r3, r3
 8003710:	2b02      	cmp	r3, #2
 8003712:	d005      	beq.n	8003720 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2204      	movs	r2, #4
 8003718:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	73fb      	strb	r3, [r7, #15]
 800371e:	e051      	b.n	80037c4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f022 020e 	bic.w	r2, r2, #14
 800372e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0201 	bic.w	r2, r2, #1
 800373e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a22      	ldr	r2, [pc, #136]	@ (80037d0 <HAL_DMA_Abort_IT+0xd4>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d029      	beq.n	800379e <HAL_DMA_Abort_IT+0xa2>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a21      	ldr	r2, [pc, #132]	@ (80037d4 <HAL_DMA_Abort_IT+0xd8>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d022      	beq.n	800379a <HAL_DMA_Abort_IT+0x9e>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a1f      	ldr	r2, [pc, #124]	@ (80037d8 <HAL_DMA_Abort_IT+0xdc>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d01a      	beq.n	8003794 <HAL_DMA_Abort_IT+0x98>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a1e      	ldr	r2, [pc, #120]	@ (80037dc <HAL_DMA_Abort_IT+0xe0>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d012      	beq.n	800378e <HAL_DMA_Abort_IT+0x92>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a1c      	ldr	r2, [pc, #112]	@ (80037e0 <HAL_DMA_Abort_IT+0xe4>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d00a      	beq.n	8003788 <HAL_DMA_Abort_IT+0x8c>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a1b      	ldr	r2, [pc, #108]	@ (80037e4 <HAL_DMA_Abort_IT+0xe8>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d102      	bne.n	8003782 <HAL_DMA_Abort_IT+0x86>
 800377c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003780:	e00e      	b.n	80037a0 <HAL_DMA_Abort_IT+0xa4>
 8003782:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003786:	e00b      	b.n	80037a0 <HAL_DMA_Abort_IT+0xa4>
 8003788:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800378c:	e008      	b.n	80037a0 <HAL_DMA_Abort_IT+0xa4>
 800378e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003792:	e005      	b.n	80037a0 <HAL_DMA_Abort_IT+0xa4>
 8003794:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003798:	e002      	b.n	80037a0 <HAL_DMA_Abort_IT+0xa4>
 800379a:	2310      	movs	r3, #16
 800379c:	e000      	b.n	80037a0 <HAL_DMA_Abort_IT+0xa4>
 800379e:	2301      	movs	r3, #1
 80037a0:	4a11      	ldr	r2, [pc, #68]	@ (80037e8 <HAL_DMA_Abort_IT+0xec>)
 80037a2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d003      	beq.n	80037c4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	4798      	blx	r3
    } 
  }
  return status;
 80037c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	40020008 	.word	0x40020008
 80037d4:	4002001c 	.word	0x4002001c
 80037d8:	40020030 	.word	0x40020030
 80037dc:	40020044 	.word	0x40020044
 80037e0:	40020058 	.word	0x40020058
 80037e4:	4002006c 	.word	0x4002006c
 80037e8:	40020000 	.word	0x40020000

080037ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b08b      	sub	sp, #44	@ 0x2c
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80037f6:	2300      	movs	r3, #0
 80037f8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80037fa:	2300      	movs	r3, #0
 80037fc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037fe:	e169      	b.n	8003ad4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003800:	2201      	movs	r2, #1
 8003802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003804:	fa02 f303 	lsl.w	r3, r2, r3
 8003808:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	69fa      	ldr	r2, [r7, #28]
 8003810:	4013      	ands	r3, r2
 8003812:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	429a      	cmp	r2, r3
 800381a:	f040 8158 	bne.w	8003ace <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	4a9a      	ldr	r2, [pc, #616]	@ (8003a8c <HAL_GPIO_Init+0x2a0>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d05e      	beq.n	80038e6 <HAL_GPIO_Init+0xfa>
 8003828:	4a98      	ldr	r2, [pc, #608]	@ (8003a8c <HAL_GPIO_Init+0x2a0>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d875      	bhi.n	800391a <HAL_GPIO_Init+0x12e>
 800382e:	4a98      	ldr	r2, [pc, #608]	@ (8003a90 <HAL_GPIO_Init+0x2a4>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d058      	beq.n	80038e6 <HAL_GPIO_Init+0xfa>
 8003834:	4a96      	ldr	r2, [pc, #600]	@ (8003a90 <HAL_GPIO_Init+0x2a4>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d86f      	bhi.n	800391a <HAL_GPIO_Init+0x12e>
 800383a:	4a96      	ldr	r2, [pc, #600]	@ (8003a94 <HAL_GPIO_Init+0x2a8>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d052      	beq.n	80038e6 <HAL_GPIO_Init+0xfa>
 8003840:	4a94      	ldr	r2, [pc, #592]	@ (8003a94 <HAL_GPIO_Init+0x2a8>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d869      	bhi.n	800391a <HAL_GPIO_Init+0x12e>
 8003846:	4a94      	ldr	r2, [pc, #592]	@ (8003a98 <HAL_GPIO_Init+0x2ac>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d04c      	beq.n	80038e6 <HAL_GPIO_Init+0xfa>
 800384c:	4a92      	ldr	r2, [pc, #584]	@ (8003a98 <HAL_GPIO_Init+0x2ac>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d863      	bhi.n	800391a <HAL_GPIO_Init+0x12e>
 8003852:	4a92      	ldr	r2, [pc, #584]	@ (8003a9c <HAL_GPIO_Init+0x2b0>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d046      	beq.n	80038e6 <HAL_GPIO_Init+0xfa>
 8003858:	4a90      	ldr	r2, [pc, #576]	@ (8003a9c <HAL_GPIO_Init+0x2b0>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d85d      	bhi.n	800391a <HAL_GPIO_Init+0x12e>
 800385e:	2b12      	cmp	r3, #18
 8003860:	d82a      	bhi.n	80038b8 <HAL_GPIO_Init+0xcc>
 8003862:	2b12      	cmp	r3, #18
 8003864:	d859      	bhi.n	800391a <HAL_GPIO_Init+0x12e>
 8003866:	a201      	add	r2, pc, #4	@ (adr r2, 800386c <HAL_GPIO_Init+0x80>)
 8003868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800386c:	080038e7 	.word	0x080038e7
 8003870:	080038c1 	.word	0x080038c1
 8003874:	080038d3 	.word	0x080038d3
 8003878:	08003915 	.word	0x08003915
 800387c:	0800391b 	.word	0x0800391b
 8003880:	0800391b 	.word	0x0800391b
 8003884:	0800391b 	.word	0x0800391b
 8003888:	0800391b 	.word	0x0800391b
 800388c:	0800391b 	.word	0x0800391b
 8003890:	0800391b 	.word	0x0800391b
 8003894:	0800391b 	.word	0x0800391b
 8003898:	0800391b 	.word	0x0800391b
 800389c:	0800391b 	.word	0x0800391b
 80038a0:	0800391b 	.word	0x0800391b
 80038a4:	0800391b 	.word	0x0800391b
 80038a8:	0800391b 	.word	0x0800391b
 80038ac:	0800391b 	.word	0x0800391b
 80038b0:	080038c9 	.word	0x080038c9
 80038b4:	080038dd 	.word	0x080038dd
 80038b8:	4a79      	ldr	r2, [pc, #484]	@ (8003aa0 <HAL_GPIO_Init+0x2b4>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d013      	beq.n	80038e6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80038be:	e02c      	b.n	800391a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	623b      	str	r3, [r7, #32]
          break;
 80038c6:	e029      	b.n	800391c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	3304      	adds	r3, #4
 80038ce:	623b      	str	r3, [r7, #32]
          break;
 80038d0:	e024      	b.n	800391c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	3308      	adds	r3, #8
 80038d8:	623b      	str	r3, [r7, #32]
          break;
 80038da:	e01f      	b.n	800391c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	330c      	adds	r3, #12
 80038e2:	623b      	str	r3, [r7, #32]
          break;
 80038e4:	e01a      	b.n	800391c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d102      	bne.n	80038f4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80038ee:	2304      	movs	r3, #4
 80038f0:	623b      	str	r3, [r7, #32]
          break;
 80038f2:	e013      	b.n	800391c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d105      	bne.n	8003908 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80038fc:	2308      	movs	r3, #8
 80038fe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	69fa      	ldr	r2, [r7, #28]
 8003904:	611a      	str	r2, [r3, #16]
          break;
 8003906:	e009      	b.n	800391c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003908:	2308      	movs	r3, #8
 800390a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	69fa      	ldr	r2, [r7, #28]
 8003910:	615a      	str	r2, [r3, #20]
          break;
 8003912:	e003      	b.n	800391c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003914:	2300      	movs	r3, #0
 8003916:	623b      	str	r3, [r7, #32]
          break;
 8003918:	e000      	b.n	800391c <HAL_GPIO_Init+0x130>
          break;
 800391a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	2bff      	cmp	r3, #255	@ 0xff
 8003920:	d801      	bhi.n	8003926 <HAL_GPIO_Init+0x13a>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	e001      	b.n	800392a <HAL_GPIO_Init+0x13e>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	3304      	adds	r3, #4
 800392a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	2bff      	cmp	r3, #255	@ 0xff
 8003930:	d802      	bhi.n	8003938 <HAL_GPIO_Init+0x14c>
 8003932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	e002      	b.n	800393e <HAL_GPIO_Init+0x152>
 8003938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800393a:	3b08      	subs	r3, #8
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	210f      	movs	r1, #15
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	fa01 f303 	lsl.w	r3, r1, r3
 800394c:	43db      	mvns	r3, r3
 800394e:	401a      	ands	r2, r3
 8003950:	6a39      	ldr	r1, [r7, #32]
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	fa01 f303 	lsl.w	r3, r1, r3
 8003958:	431a      	orrs	r2, r3
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003966:	2b00      	cmp	r3, #0
 8003968:	f000 80b1 	beq.w	8003ace <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800396c:	4b4d      	ldr	r3, [pc, #308]	@ (8003aa4 <HAL_GPIO_Init+0x2b8>)
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	4a4c      	ldr	r2, [pc, #304]	@ (8003aa4 <HAL_GPIO_Init+0x2b8>)
 8003972:	f043 0301 	orr.w	r3, r3, #1
 8003976:	6193      	str	r3, [r2, #24]
 8003978:	4b4a      	ldr	r3, [pc, #296]	@ (8003aa4 <HAL_GPIO_Init+0x2b8>)
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	f003 0301 	and.w	r3, r3, #1
 8003980:	60bb      	str	r3, [r7, #8]
 8003982:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003984:	4a48      	ldr	r2, [pc, #288]	@ (8003aa8 <HAL_GPIO_Init+0x2bc>)
 8003986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003988:	089b      	lsrs	r3, r3, #2
 800398a:	3302      	adds	r3, #2
 800398c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003990:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003994:	f003 0303 	and.w	r3, r3, #3
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	220f      	movs	r2, #15
 800399c:	fa02 f303 	lsl.w	r3, r2, r3
 80039a0:	43db      	mvns	r3, r3
 80039a2:	68fa      	ldr	r2, [r7, #12]
 80039a4:	4013      	ands	r3, r2
 80039a6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a40      	ldr	r2, [pc, #256]	@ (8003aac <HAL_GPIO_Init+0x2c0>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d013      	beq.n	80039d8 <HAL_GPIO_Init+0x1ec>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a3f      	ldr	r2, [pc, #252]	@ (8003ab0 <HAL_GPIO_Init+0x2c4>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d00d      	beq.n	80039d4 <HAL_GPIO_Init+0x1e8>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a3e      	ldr	r2, [pc, #248]	@ (8003ab4 <HAL_GPIO_Init+0x2c8>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d007      	beq.n	80039d0 <HAL_GPIO_Init+0x1e4>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4a3d      	ldr	r2, [pc, #244]	@ (8003ab8 <HAL_GPIO_Init+0x2cc>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d101      	bne.n	80039cc <HAL_GPIO_Init+0x1e0>
 80039c8:	2303      	movs	r3, #3
 80039ca:	e006      	b.n	80039da <HAL_GPIO_Init+0x1ee>
 80039cc:	2304      	movs	r3, #4
 80039ce:	e004      	b.n	80039da <HAL_GPIO_Init+0x1ee>
 80039d0:	2302      	movs	r3, #2
 80039d2:	e002      	b.n	80039da <HAL_GPIO_Init+0x1ee>
 80039d4:	2301      	movs	r3, #1
 80039d6:	e000      	b.n	80039da <HAL_GPIO_Init+0x1ee>
 80039d8:	2300      	movs	r3, #0
 80039da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039dc:	f002 0203 	and.w	r2, r2, #3
 80039e0:	0092      	lsls	r2, r2, #2
 80039e2:	4093      	lsls	r3, r2
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80039ea:	492f      	ldr	r1, [pc, #188]	@ (8003aa8 <HAL_GPIO_Init+0x2bc>)
 80039ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ee:	089b      	lsrs	r3, r3, #2
 80039f0:	3302      	adds	r3, #2
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d006      	beq.n	8003a12 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003a04:	4b2d      	ldr	r3, [pc, #180]	@ (8003abc <HAL_GPIO_Init+0x2d0>)
 8003a06:	689a      	ldr	r2, [r3, #8]
 8003a08:	492c      	ldr	r1, [pc, #176]	@ (8003abc <HAL_GPIO_Init+0x2d0>)
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	608b      	str	r3, [r1, #8]
 8003a10:	e006      	b.n	8003a20 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003a12:	4b2a      	ldr	r3, [pc, #168]	@ (8003abc <HAL_GPIO_Init+0x2d0>)
 8003a14:	689a      	ldr	r2, [r3, #8]
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	43db      	mvns	r3, r3
 8003a1a:	4928      	ldr	r1, [pc, #160]	@ (8003abc <HAL_GPIO_Init+0x2d0>)
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d006      	beq.n	8003a3a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003a2c:	4b23      	ldr	r3, [pc, #140]	@ (8003abc <HAL_GPIO_Init+0x2d0>)
 8003a2e:	68da      	ldr	r2, [r3, #12]
 8003a30:	4922      	ldr	r1, [pc, #136]	@ (8003abc <HAL_GPIO_Init+0x2d0>)
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	60cb      	str	r3, [r1, #12]
 8003a38:	e006      	b.n	8003a48 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003a3a:	4b20      	ldr	r3, [pc, #128]	@ (8003abc <HAL_GPIO_Init+0x2d0>)
 8003a3c:	68da      	ldr	r2, [r3, #12]
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	43db      	mvns	r3, r3
 8003a42:	491e      	ldr	r1, [pc, #120]	@ (8003abc <HAL_GPIO_Init+0x2d0>)
 8003a44:	4013      	ands	r3, r2
 8003a46:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d006      	beq.n	8003a62 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003a54:	4b19      	ldr	r3, [pc, #100]	@ (8003abc <HAL_GPIO_Init+0x2d0>)
 8003a56:	685a      	ldr	r2, [r3, #4]
 8003a58:	4918      	ldr	r1, [pc, #96]	@ (8003abc <HAL_GPIO_Init+0x2d0>)
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	604b      	str	r3, [r1, #4]
 8003a60:	e006      	b.n	8003a70 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003a62:	4b16      	ldr	r3, [pc, #88]	@ (8003abc <HAL_GPIO_Init+0x2d0>)
 8003a64:	685a      	ldr	r2, [r3, #4]
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	43db      	mvns	r3, r3
 8003a6a:	4914      	ldr	r1, [pc, #80]	@ (8003abc <HAL_GPIO_Init+0x2d0>)
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d021      	beq.n	8003ac0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003a7c:	4b0f      	ldr	r3, [pc, #60]	@ (8003abc <HAL_GPIO_Init+0x2d0>)
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	490e      	ldr	r1, [pc, #56]	@ (8003abc <HAL_GPIO_Init+0x2d0>)
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	600b      	str	r3, [r1, #0]
 8003a88:	e021      	b.n	8003ace <HAL_GPIO_Init+0x2e2>
 8003a8a:	bf00      	nop
 8003a8c:	10320000 	.word	0x10320000
 8003a90:	10310000 	.word	0x10310000
 8003a94:	10220000 	.word	0x10220000
 8003a98:	10210000 	.word	0x10210000
 8003a9c:	10120000 	.word	0x10120000
 8003aa0:	10110000 	.word	0x10110000
 8003aa4:	40021000 	.word	0x40021000
 8003aa8:	40010000 	.word	0x40010000
 8003aac:	40010800 	.word	0x40010800
 8003ab0:	40010c00 	.word	0x40010c00
 8003ab4:	40011000 	.word	0x40011000
 8003ab8:	40011400 	.word	0x40011400
 8003abc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8003af0 <HAL_GPIO_Init+0x304>)
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	43db      	mvns	r3, r3
 8003ac8:	4909      	ldr	r1, [pc, #36]	@ (8003af0 <HAL_GPIO_Init+0x304>)
 8003aca:	4013      	ands	r3, r2
 8003acc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ada:	fa22 f303 	lsr.w	r3, r2, r3
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	f47f ae8e 	bne.w	8003800 <HAL_GPIO_Init+0x14>
  }
}
 8003ae4:	bf00      	nop
 8003ae6:	bf00      	nop
 8003ae8:	372c      	adds	r7, #44	@ 0x2c
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bc80      	pop	{r7}
 8003aee:	4770      	bx	lr
 8003af0:	40010400 	.word	0x40010400

08003af4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b085      	sub	sp, #20
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	460b      	mov	r3, r1
 8003afe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689a      	ldr	r2, [r3, #8]
 8003b04:	887b      	ldrh	r3, [r7, #2]
 8003b06:	4013      	ands	r3, r2
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d002      	beq.n	8003b12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	73fb      	strb	r3, [r7, #15]
 8003b10:	e001      	b.n	8003b16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b12:	2300      	movs	r3, #0
 8003b14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3714      	adds	r7, #20
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bc80      	pop	{r7}
 8003b20:	4770      	bx	lr

08003b22 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b22:	b480      	push	{r7}
 8003b24:	b083      	sub	sp, #12
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	807b      	strh	r3, [r7, #2]
 8003b2e:	4613      	mov	r3, r2
 8003b30:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b32:	787b      	ldrb	r3, [r7, #1]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d003      	beq.n	8003b40 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b38:	887a      	ldrh	r2, [r7, #2]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003b3e:	e003      	b.n	8003b48 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003b40:	887b      	ldrh	r3, [r7, #2]
 8003b42:	041a      	lsls	r2, r3, #16
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	611a      	str	r2, [r3, #16]
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bc80      	pop	{r7}
 8003b50:	4770      	bx	lr

08003b52 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003b52:	b480      	push	{r7}
 8003b54:	b085      	sub	sp, #20
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003b64:	887a      	ldrh	r2, [r7, #2]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	4013      	ands	r3, r2
 8003b6a:	041a      	lsls	r2, r3, #16
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	43d9      	mvns	r1, r3
 8003b70:	887b      	ldrh	r3, [r7, #2]
 8003b72:	400b      	ands	r3, r1
 8003b74:	431a      	orrs	r2, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	611a      	str	r2, [r3, #16]
}
 8003b7a:	bf00      	nop
 8003b7c:	3714      	adds	r7, #20
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bc80      	pop	{r7}
 8003b82:	4770      	bx	lr

08003b84 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003b8e:	4b08      	ldr	r3, [pc, #32]	@ (8003bb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b90:	695a      	ldr	r2, [r3, #20]
 8003b92:	88fb      	ldrh	r3, [r7, #6]
 8003b94:	4013      	ands	r3, r2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d006      	beq.n	8003ba8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b9a:	4a05      	ldr	r2, [pc, #20]	@ (8003bb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b9c:	88fb      	ldrh	r3, [r7, #6]
 8003b9e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ba0:	88fb      	ldrh	r3, [r7, #6]
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7fe fa90 	bl	80020c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003ba8:	bf00      	nop
 8003baa:	3708      	adds	r7, #8
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	40010400 	.word	0x40010400

08003bb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d101      	bne.n	8003bc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e12b      	b.n	8003e1e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d106      	bne.n	8003be0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f7fc fc2c 	bl	8000438 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2224      	movs	r2, #36	@ 0x24
 8003be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f022 0201 	bic.w	r2, r2, #1
 8003bf6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c16:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c18:	f001 fbfc 	bl	8005414 <HAL_RCC_GetPCLK1Freq>
 8003c1c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	4a81      	ldr	r2, [pc, #516]	@ (8003e28 <HAL_I2C_Init+0x274>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d807      	bhi.n	8003c38 <HAL_I2C_Init+0x84>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	4a80      	ldr	r2, [pc, #512]	@ (8003e2c <HAL_I2C_Init+0x278>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	bf94      	ite	ls
 8003c30:	2301      	movls	r3, #1
 8003c32:	2300      	movhi	r3, #0
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	e006      	b.n	8003c46 <HAL_I2C_Init+0x92>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	4a7d      	ldr	r2, [pc, #500]	@ (8003e30 <HAL_I2C_Init+0x27c>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	bf94      	ite	ls
 8003c40:	2301      	movls	r3, #1
 8003c42:	2300      	movhi	r3, #0
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d001      	beq.n	8003c4e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e0e7      	b.n	8003e1e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	4a78      	ldr	r2, [pc, #480]	@ (8003e34 <HAL_I2C_Init+0x280>)
 8003c52:	fba2 2303 	umull	r2, r3, r2, r3
 8003c56:	0c9b      	lsrs	r3, r3, #18
 8003c58:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68ba      	ldr	r2, [r7, #8]
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	6a1b      	ldr	r3, [r3, #32]
 8003c74:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	4a6a      	ldr	r2, [pc, #424]	@ (8003e28 <HAL_I2C_Init+0x274>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d802      	bhi.n	8003c88 <HAL_I2C_Init+0xd4>
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	3301      	adds	r3, #1
 8003c86:	e009      	b.n	8003c9c <HAL_I2C_Init+0xe8>
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003c8e:	fb02 f303 	mul.w	r3, r2, r3
 8003c92:	4a69      	ldr	r2, [pc, #420]	@ (8003e38 <HAL_I2C_Init+0x284>)
 8003c94:	fba2 2303 	umull	r2, r3, r2, r3
 8003c98:	099b      	lsrs	r3, r3, #6
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	6812      	ldr	r2, [r2, #0]
 8003ca0:	430b      	orrs	r3, r1
 8003ca2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	69db      	ldr	r3, [r3, #28]
 8003caa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003cae:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	495c      	ldr	r1, [pc, #368]	@ (8003e28 <HAL_I2C_Init+0x274>)
 8003cb8:	428b      	cmp	r3, r1
 8003cba:	d819      	bhi.n	8003cf0 <HAL_I2C_Init+0x13c>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	1e59      	subs	r1, r3, #1
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	005b      	lsls	r3, r3, #1
 8003cc6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cca:	1c59      	adds	r1, r3, #1
 8003ccc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003cd0:	400b      	ands	r3, r1
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00a      	beq.n	8003cec <HAL_I2C_Init+0x138>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	1e59      	subs	r1, r3, #1
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	005b      	lsls	r3, r3, #1
 8003ce0:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cea:	e051      	b.n	8003d90 <HAL_I2C_Init+0x1dc>
 8003cec:	2304      	movs	r3, #4
 8003cee:	e04f      	b.n	8003d90 <HAL_I2C_Init+0x1dc>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d111      	bne.n	8003d1c <HAL_I2C_Init+0x168>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	1e58      	subs	r0, r3, #1
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6859      	ldr	r1, [r3, #4]
 8003d00:	460b      	mov	r3, r1
 8003d02:	005b      	lsls	r3, r3, #1
 8003d04:	440b      	add	r3, r1
 8003d06:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	bf0c      	ite	eq
 8003d14:	2301      	moveq	r3, #1
 8003d16:	2300      	movne	r3, #0
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	e012      	b.n	8003d42 <HAL_I2C_Init+0x18e>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	1e58      	subs	r0, r3, #1
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6859      	ldr	r1, [r3, #4]
 8003d24:	460b      	mov	r3, r1
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	440b      	add	r3, r1
 8003d2a:	0099      	lsls	r1, r3, #2
 8003d2c:	440b      	add	r3, r1
 8003d2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d32:	3301      	adds	r3, #1
 8003d34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	bf0c      	ite	eq
 8003d3c:	2301      	moveq	r3, #1
 8003d3e:	2300      	movne	r3, #0
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d001      	beq.n	8003d4a <HAL_I2C_Init+0x196>
 8003d46:	2301      	movs	r3, #1
 8003d48:	e022      	b.n	8003d90 <HAL_I2C_Init+0x1dc>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d10e      	bne.n	8003d70 <HAL_I2C_Init+0x1bc>
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	1e58      	subs	r0, r3, #1
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6859      	ldr	r1, [r3, #4]
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	005b      	lsls	r3, r3, #1
 8003d5e:	440b      	add	r3, r1
 8003d60:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d64:	3301      	adds	r3, #1
 8003d66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d6e:	e00f      	b.n	8003d90 <HAL_I2C_Init+0x1dc>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	1e58      	subs	r0, r3, #1
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6859      	ldr	r1, [r3, #4]
 8003d78:	460b      	mov	r3, r1
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	440b      	add	r3, r1
 8003d7e:	0099      	lsls	r1, r3, #2
 8003d80:	440b      	add	r3, r1
 8003d82:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d86:	3301      	adds	r3, #1
 8003d88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d8c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003d90:	6879      	ldr	r1, [r7, #4]
 8003d92:	6809      	ldr	r1, [r1, #0]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	69da      	ldr	r2, [r3, #28]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	431a      	orrs	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	430a      	orrs	r2, r1
 8003db2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003dbe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	6911      	ldr	r1, [r2, #16]
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	68d2      	ldr	r2, [r2, #12]
 8003dca:	4311      	orrs	r1, r2
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	6812      	ldr	r2, [r2, #0]
 8003dd0:	430b      	orrs	r3, r1
 8003dd2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	695a      	ldr	r2, [r3, #20]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	699b      	ldr	r3, [r3, #24]
 8003de6:	431a      	orrs	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	430a      	orrs	r2, r1
 8003dee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f042 0201 	orr.w	r2, r2, #1
 8003dfe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2220      	movs	r2, #32
 8003e0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3710      	adds	r7, #16
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	000186a0 	.word	0x000186a0
 8003e2c:	001e847f 	.word	0x001e847f
 8003e30:	003d08ff 	.word	0x003d08ff
 8003e34:	431bde83 	.word	0x431bde83
 8003e38:	10624dd3 	.word	0x10624dd3

08003e3c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b088      	sub	sp, #32
 8003e40:	af02      	add	r7, sp, #8
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	4608      	mov	r0, r1
 8003e46:	4611      	mov	r1, r2
 8003e48:	461a      	mov	r2, r3
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	817b      	strh	r3, [r7, #10]
 8003e4e:	460b      	mov	r3, r1
 8003e50:	813b      	strh	r3, [r7, #8]
 8003e52:	4613      	mov	r3, r2
 8003e54:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e56:	f7fe fedd 	bl	8002c14 <HAL_GetTick>
 8003e5a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	2b20      	cmp	r3, #32
 8003e66:	f040 80d9 	bne.w	800401c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	9300      	str	r3, [sp, #0]
 8003e6e:	2319      	movs	r3, #25
 8003e70:	2201      	movs	r2, #1
 8003e72:	496d      	ldr	r1, [pc, #436]	@ (8004028 <HAL_I2C_Mem_Write+0x1ec>)
 8003e74:	68f8      	ldr	r0, [r7, #12]
 8003e76:	f000 fccd 	bl	8004814 <I2C_WaitOnFlagUntilTimeout>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d001      	beq.n	8003e84 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003e80:	2302      	movs	r3, #2
 8003e82:	e0cc      	b.n	800401e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d101      	bne.n	8003e92 <HAL_I2C_Mem_Write+0x56>
 8003e8e:	2302      	movs	r3, #2
 8003e90:	e0c5      	b.n	800401e <HAL_I2C_Mem_Write+0x1e2>
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2201      	movs	r2, #1
 8003e96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0301 	and.w	r3, r3, #1
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d007      	beq.n	8003eb8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f042 0201 	orr.w	r2, r2, #1
 8003eb6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ec6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2221      	movs	r2, #33	@ 0x21
 8003ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2240      	movs	r2, #64	@ 0x40
 8003ed4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6a3a      	ldr	r2, [r7, #32]
 8003ee2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003ee8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eee:	b29a      	uxth	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	4a4d      	ldr	r2, [pc, #308]	@ (800402c <HAL_I2C_Mem_Write+0x1f0>)
 8003ef8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003efa:	88f8      	ldrh	r0, [r7, #6]
 8003efc:	893a      	ldrh	r2, [r7, #8]
 8003efe:	8979      	ldrh	r1, [r7, #10]
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	9301      	str	r3, [sp, #4]
 8003f04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f06:	9300      	str	r3, [sp, #0]
 8003f08:	4603      	mov	r3, r0
 8003f0a:	68f8      	ldr	r0, [r7, #12]
 8003f0c:	f000 fb04 	bl	8004518 <I2C_RequestMemoryWrite>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d052      	beq.n	8003fbc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e081      	b.n	800401e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f1a:	697a      	ldr	r2, [r7, #20]
 8003f1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f1e:	68f8      	ldr	r0, [r7, #12]
 8003f20:	f000 fd92 	bl	8004a48 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00d      	beq.n	8003f46 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f2e:	2b04      	cmp	r3, #4
 8003f30:	d107      	bne.n	8003f42 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f40:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e06b      	b.n	800401e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f4a:	781a      	ldrb	r2, [r3, #0]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f56:	1c5a      	adds	r2, r3, #1
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f60:	3b01      	subs	r3, #1
 8003f62:	b29a      	uxth	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	695b      	ldr	r3, [r3, #20]
 8003f7c:	f003 0304 	and.w	r3, r3, #4
 8003f80:	2b04      	cmp	r3, #4
 8003f82:	d11b      	bne.n	8003fbc <HAL_I2C_Mem_Write+0x180>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d017      	beq.n	8003fbc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f90:	781a      	ldrb	r2, [r3, #0]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9c:	1c5a      	adds	r2, r3, #1
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fa6:	3b01      	subs	r3, #1
 8003fa8:	b29a      	uxth	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d1aa      	bne.n	8003f1a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fc4:	697a      	ldr	r2, [r7, #20]
 8003fc6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003fc8:	68f8      	ldr	r0, [r7, #12]
 8003fca:	f000 fd85 	bl	8004ad8 <I2C_WaitOnBTFFlagUntilTimeout>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d00d      	beq.n	8003ff0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd8:	2b04      	cmp	r3, #4
 8003fda:	d107      	bne.n	8003fec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e016      	b.n	800401e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ffe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2220      	movs	r2, #32
 8004004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004018:	2300      	movs	r3, #0
 800401a:	e000      	b.n	800401e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800401c:	2302      	movs	r3, #2
  }
}
 800401e:	4618      	mov	r0, r3
 8004020:	3718      	adds	r7, #24
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	00100002 	.word	0x00100002
 800402c:	ffff0000 	.word	0xffff0000

08004030 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b08c      	sub	sp, #48	@ 0x30
 8004034:	af02      	add	r7, sp, #8
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	4608      	mov	r0, r1
 800403a:	4611      	mov	r1, r2
 800403c:	461a      	mov	r2, r3
 800403e:	4603      	mov	r3, r0
 8004040:	817b      	strh	r3, [r7, #10]
 8004042:	460b      	mov	r3, r1
 8004044:	813b      	strh	r3, [r7, #8]
 8004046:	4613      	mov	r3, r2
 8004048:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800404a:	2300      	movs	r3, #0
 800404c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800404e:	f7fe fde1 	bl	8002c14 <HAL_GetTick>
 8004052:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800405a:	b2db      	uxtb	r3, r3
 800405c:	2b20      	cmp	r3, #32
 800405e:	f040 8250 	bne.w	8004502 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004064:	9300      	str	r3, [sp, #0]
 8004066:	2319      	movs	r3, #25
 8004068:	2201      	movs	r2, #1
 800406a:	4982      	ldr	r1, [pc, #520]	@ (8004274 <HAL_I2C_Mem_Read+0x244>)
 800406c:	68f8      	ldr	r0, [r7, #12]
 800406e:	f000 fbd1 	bl	8004814 <I2C_WaitOnFlagUntilTimeout>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d001      	beq.n	800407c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004078:	2302      	movs	r3, #2
 800407a:	e243      	b.n	8004504 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004082:	2b01      	cmp	r3, #1
 8004084:	d101      	bne.n	800408a <HAL_I2C_Mem_Read+0x5a>
 8004086:	2302      	movs	r3, #2
 8004088:	e23c      	b.n	8004504 <HAL_I2C_Mem_Read+0x4d4>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2201      	movs	r2, #1
 800408e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0301 	and.w	r3, r3, #1
 800409c:	2b01      	cmp	r3, #1
 800409e:	d007      	beq.n	80040b0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f042 0201 	orr.w	r2, r2, #1
 80040ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2222      	movs	r2, #34	@ 0x22
 80040c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2240      	movs	r2, #64	@ 0x40
 80040cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80040e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	4a62      	ldr	r2, [pc, #392]	@ (8004278 <HAL_I2C_Mem_Read+0x248>)
 80040f0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040f2:	88f8      	ldrh	r0, [r7, #6]
 80040f4:	893a      	ldrh	r2, [r7, #8]
 80040f6:	8979      	ldrh	r1, [r7, #10]
 80040f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040fa:	9301      	str	r3, [sp, #4]
 80040fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040fe:	9300      	str	r3, [sp, #0]
 8004100:	4603      	mov	r3, r0
 8004102:	68f8      	ldr	r0, [r7, #12]
 8004104:	f000 fa9e 	bl	8004644 <I2C_RequestMemoryRead>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d001      	beq.n	8004112 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e1f8      	b.n	8004504 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004116:	2b00      	cmp	r3, #0
 8004118:	d113      	bne.n	8004142 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800411a:	2300      	movs	r3, #0
 800411c:	61fb      	str	r3, [r7, #28]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	695b      	ldr	r3, [r3, #20]
 8004124:	61fb      	str	r3, [r7, #28]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	61fb      	str	r3, [r7, #28]
 800412e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800413e:	601a      	str	r2, [r3, #0]
 8004140:	e1cc      	b.n	80044dc <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004146:	2b01      	cmp	r3, #1
 8004148:	d11e      	bne.n	8004188 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004158:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800415a:	b672      	cpsid	i
}
 800415c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800415e:	2300      	movs	r3, #0
 8004160:	61bb      	str	r3, [r7, #24]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	695b      	ldr	r3, [r3, #20]
 8004168:	61bb      	str	r3, [r7, #24]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	61bb      	str	r3, [r7, #24]
 8004172:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004182:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004184:	b662      	cpsie	i
}
 8004186:	e035      	b.n	80041f4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800418c:	2b02      	cmp	r3, #2
 800418e:	d11e      	bne.n	80041ce <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800419e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80041a0:	b672      	cpsid	i
}
 80041a2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041a4:	2300      	movs	r3, #0
 80041a6:	617b      	str	r3, [r7, #20]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	617b      	str	r3, [r7, #20]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	617b      	str	r3, [r7, #20]
 80041b8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041c8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80041ca:	b662      	cpsie	i
}
 80041cc:	e012      	b.n	80041f4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80041dc:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041de:	2300      	movs	r3, #0
 80041e0:	613b      	str	r3, [r7, #16]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	695b      	ldr	r3, [r3, #20]
 80041e8:	613b      	str	r3, [r7, #16]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	613b      	str	r3, [r7, #16]
 80041f2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80041f4:	e172      	b.n	80044dc <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041fa:	2b03      	cmp	r3, #3
 80041fc:	f200 811f 	bhi.w	800443e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004204:	2b01      	cmp	r3, #1
 8004206:	d123      	bne.n	8004250 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004208:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800420a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800420c:	68f8      	ldr	r0, [r7, #12]
 800420e:	f000 fcab 	bl	8004b68 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d001      	beq.n	800421c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e173      	b.n	8004504 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	691a      	ldr	r2, [r3, #16]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004226:	b2d2      	uxtb	r2, r2
 8004228:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800422e:	1c5a      	adds	r2, r3, #1
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004238:	3b01      	subs	r3, #1
 800423a:	b29a      	uxth	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004244:	b29b      	uxth	r3, r3
 8004246:	3b01      	subs	r3, #1
 8004248:	b29a      	uxth	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800424e:	e145      	b.n	80044dc <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004254:	2b02      	cmp	r3, #2
 8004256:	d152      	bne.n	80042fe <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800425a:	9300      	str	r3, [sp, #0]
 800425c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800425e:	2200      	movs	r2, #0
 8004260:	4906      	ldr	r1, [pc, #24]	@ (800427c <HAL_I2C_Mem_Read+0x24c>)
 8004262:	68f8      	ldr	r0, [r7, #12]
 8004264:	f000 fad6 	bl	8004814 <I2C_WaitOnFlagUntilTimeout>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d008      	beq.n	8004280 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e148      	b.n	8004504 <HAL_I2C_Mem_Read+0x4d4>
 8004272:	bf00      	nop
 8004274:	00100002 	.word	0x00100002
 8004278:	ffff0000 	.word	0xffff0000
 800427c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004280:	b672      	cpsid	i
}
 8004282:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004292:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	691a      	ldr	r2, [r3, #16]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800429e:	b2d2      	uxtb	r2, r2
 80042a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a6:	1c5a      	adds	r2, r3, #1
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042b0:	3b01      	subs	r3, #1
 80042b2:	b29a      	uxth	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042bc:	b29b      	uxth	r3, r3
 80042be:	3b01      	subs	r3, #1
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80042c6:	b662      	cpsie	i
}
 80042c8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	691a      	ldr	r2, [r3, #16]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d4:	b2d2      	uxtb	r2, r2
 80042d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042dc:	1c5a      	adds	r2, r3, #1
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042e6:	3b01      	subs	r3, #1
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	3b01      	subs	r3, #1
 80042f6:	b29a      	uxth	r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80042fc:	e0ee      	b.n	80044dc <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004300:	9300      	str	r3, [sp, #0]
 8004302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004304:	2200      	movs	r2, #0
 8004306:	4981      	ldr	r1, [pc, #516]	@ (800450c <HAL_I2C_Mem_Read+0x4dc>)
 8004308:	68f8      	ldr	r0, [r7, #12]
 800430a:	f000 fa83 	bl	8004814 <I2C_WaitOnFlagUntilTimeout>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d001      	beq.n	8004318 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e0f5      	b.n	8004504 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004326:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004328:	b672      	cpsid	i
}
 800432a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	691a      	ldr	r2, [r3, #16]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004336:	b2d2      	uxtb	r2, r2
 8004338:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800433e:	1c5a      	adds	r2, r3, #1
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004348:	3b01      	subs	r3, #1
 800434a:	b29a      	uxth	r2, r3
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004354:	b29b      	uxth	r3, r3
 8004356:	3b01      	subs	r3, #1
 8004358:	b29a      	uxth	r2, r3
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800435e:	4b6c      	ldr	r3, [pc, #432]	@ (8004510 <HAL_I2C_Mem_Read+0x4e0>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	08db      	lsrs	r3, r3, #3
 8004364:	4a6b      	ldr	r2, [pc, #428]	@ (8004514 <HAL_I2C_Mem_Read+0x4e4>)
 8004366:	fba2 2303 	umull	r2, r3, r2, r3
 800436a:	0a1a      	lsrs	r2, r3, #8
 800436c:	4613      	mov	r3, r2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	4413      	add	r3, r2
 8004372:	00da      	lsls	r2, r3, #3
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004378:	6a3b      	ldr	r3, [r7, #32]
 800437a:	3b01      	subs	r3, #1
 800437c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800437e:	6a3b      	ldr	r3, [r7, #32]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d118      	bne.n	80043b6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2200      	movs	r2, #0
 8004388:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2220      	movs	r2, #32
 800438e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800439e:	f043 0220 	orr.w	r2, r3, #32
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80043a6:	b662      	cpsie	i
}
 80043a8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e0a6      	b.n	8004504 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	695b      	ldr	r3, [r3, #20]
 80043bc:	f003 0304 	and.w	r3, r3, #4
 80043c0:	2b04      	cmp	r3, #4
 80043c2:	d1d9      	bne.n	8004378 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	691a      	ldr	r2, [r3, #16]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043de:	b2d2      	uxtb	r2, r2
 80043e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e6:	1c5a      	adds	r2, r3, #1
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043f0:	3b01      	subs	r3, #1
 80043f2:	b29a      	uxth	r2, r3
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	3b01      	subs	r3, #1
 8004400:	b29a      	uxth	r2, r3
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004406:	b662      	cpsie	i
}
 8004408:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	691a      	ldr	r2, [r3, #16]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004414:	b2d2      	uxtb	r2, r2
 8004416:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800441c:	1c5a      	adds	r2, r3, #1
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004426:	3b01      	subs	r3, #1
 8004428:	b29a      	uxth	r2, r3
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004432:	b29b      	uxth	r3, r3
 8004434:	3b01      	subs	r3, #1
 8004436:	b29a      	uxth	r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800443c:	e04e      	b.n	80044dc <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800443e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004440:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004442:	68f8      	ldr	r0, [r7, #12]
 8004444:	f000 fb90 	bl	8004b68 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d001      	beq.n	8004452 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e058      	b.n	8004504 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	691a      	ldr	r2, [r3, #16]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800445c:	b2d2      	uxtb	r2, r2
 800445e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004464:	1c5a      	adds	r2, r3, #1
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800446e:	3b01      	subs	r3, #1
 8004470:	b29a      	uxth	r2, r3
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800447a:	b29b      	uxth	r3, r3
 800447c:	3b01      	subs	r3, #1
 800447e:	b29a      	uxth	r2, r3
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	f003 0304 	and.w	r3, r3, #4
 800448e:	2b04      	cmp	r3, #4
 8004490:	d124      	bne.n	80044dc <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004496:	2b03      	cmp	r3, #3
 8004498:	d107      	bne.n	80044aa <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044a8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	691a      	ldr	r2, [r3, #16]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b4:	b2d2      	uxtb	r2, r2
 80044b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044bc:	1c5a      	adds	r2, r3, #1
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044c6:	3b01      	subs	r3, #1
 80044c8:	b29a      	uxth	r2, r3
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	3b01      	subs	r3, #1
 80044d6:	b29a      	uxth	r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	f47f ae88 	bne.w	80041f6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2220      	movs	r2, #32
 80044ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80044fe:	2300      	movs	r3, #0
 8004500:	e000      	b.n	8004504 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8004502:	2302      	movs	r3, #2
  }
}
 8004504:	4618      	mov	r0, r3
 8004506:	3728      	adds	r7, #40	@ 0x28
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}
 800450c:	00010004 	.word	0x00010004
 8004510:	20000080 	.word	0x20000080
 8004514:	14f8b589 	.word	0x14f8b589

08004518 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b088      	sub	sp, #32
 800451c:	af02      	add	r7, sp, #8
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	4608      	mov	r0, r1
 8004522:	4611      	mov	r1, r2
 8004524:	461a      	mov	r2, r3
 8004526:	4603      	mov	r3, r0
 8004528:	817b      	strh	r3, [r7, #10]
 800452a:	460b      	mov	r3, r1
 800452c:	813b      	strh	r3, [r7, #8]
 800452e:	4613      	mov	r3, r2
 8004530:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004540:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004544:	9300      	str	r3, [sp, #0]
 8004546:	6a3b      	ldr	r3, [r7, #32]
 8004548:	2200      	movs	r2, #0
 800454a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	f000 f960 	bl	8004814 <I2C_WaitOnFlagUntilTimeout>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00d      	beq.n	8004576 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004564:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004568:	d103      	bne.n	8004572 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004570:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e05f      	b.n	8004636 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004576:	897b      	ldrh	r3, [r7, #10]
 8004578:	b2db      	uxtb	r3, r3
 800457a:	461a      	mov	r2, r3
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004584:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004588:	6a3a      	ldr	r2, [r7, #32]
 800458a:	492d      	ldr	r1, [pc, #180]	@ (8004640 <I2C_RequestMemoryWrite+0x128>)
 800458c:	68f8      	ldr	r0, [r7, #12]
 800458e:	f000 f9bb 	bl	8004908 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d001      	beq.n	800459c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e04c      	b.n	8004636 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800459c:	2300      	movs	r3, #0
 800459e:	617b      	str	r3, [r7, #20]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	617b      	str	r3, [r7, #20]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	699b      	ldr	r3, [r3, #24]
 80045ae:	617b      	str	r3, [r7, #20]
 80045b0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045b4:	6a39      	ldr	r1, [r7, #32]
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	f000 fa46 	bl	8004a48 <I2C_WaitOnTXEFlagUntilTimeout>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00d      	beq.n	80045de <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c6:	2b04      	cmp	r3, #4
 80045c8:	d107      	bne.n	80045da <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045d8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e02b      	b.n	8004636 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80045de:	88fb      	ldrh	r3, [r7, #6]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d105      	bne.n	80045f0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045e4:	893b      	ldrh	r3, [r7, #8]
 80045e6:	b2da      	uxtb	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	611a      	str	r2, [r3, #16]
 80045ee:	e021      	b.n	8004634 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80045f0:	893b      	ldrh	r3, [r7, #8]
 80045f2:	0a1b      	lsrs	r3, r3, #8
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	b2da      	uxtb	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004600:	6a39      	ldr	r1, [r7, #32]
 8004602:	68f8      	ldr	r0, [r7, #12]
 8004604:	f000 fa20 	bl	8004a48 <I2C_WaitOnTXEFlagUntilTimeout>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00d      	beq.n	800462a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004612:	2b04      	cmp	r3, #4
 8004614:	d107      	bne.n	8004626 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004624:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e005      	b.n	8004636 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800462a:	893b      	ldrh	r3, [r7, #8]
 800462c:	b2da      	uxtb	r2, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3718      	adds	r7, #24
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	00010002 	.word	0x00010002

08004644 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b088      	sub	sp, #32
 8004648:	af02      	add	r7, sp, #8
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	4608      	mov	r0, r1
 800464e:	4611      	mov	r1, r2
 8004650:	461a      	mov	r2, r3
 8004652:	4603      	mov	r3, r0
 8004654:	817b      	strh	r3, [r7, #10]
 8004656:	460b      	mov	r3, r1
 8004658:	813b      	strh	r3, [r7, #8]
 800465a:	4613      	mov	r3, r2
 800465c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800466c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800467c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800467e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004680:	9300      	str	r3, [sp, #0]
 8004682:	6a3b      	ldr	r3, [r7, #32]
 8004684:	2200      	movs	r2, #0
 8004686:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800468a:	68f8      	ldr	r0, [r7, #12]
 800468c:	f000 f8c2 	bl	8004814 <I2C_WaitOnFlagUntilTimeout>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00d      	beq.n	80046b2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046a4:	d103      	bne.n	80046ae <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80046ac:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e0aa      	b.n	8004808 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80046b2:	897b      	ldrh	r3, [r7, #10]
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	461a      	mov	r2, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80046c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c4:	6a3a      	ldr	r2, [r7, #32]
 80046c6:	4952      	ldr	r1, [pc, #328]	@ (8004810 <I2C_RequestMemoryRead+0x1cc>)
 80046c8:	68f8      	ldr	r0, [r7, #12]
 80046ca:	f000 f91d 	bl	8004908 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d001      	beq.n	80046d8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e097      	b.n	8004808 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046d8:	2300      	movs	r3, #0
 80046da:	617b      	str	r3, [r7, #20]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	617b      	str	r3, [r7, #20]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	699b      	ldr	r3, [r3, #24]
 80046ea:	617b      	str	r3, [r7, #20]
 80046ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046f0:	6a39      	ldr	r1, [r7, #32]
 80046f2:	68f8      	ldr	r0, [r7, #12]
 80046f4:	f000 f9a8 	bl	8004a48 <I2C_WaitOnTXEFlagUntilTimeout>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00d      	beq.n	800471a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004702:	2b04      	cmp	r3, #4
 8004704:	d107      	bne.n	8004716 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004714:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e076      	b.n	8004808 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800471a:	88fb      	ldrh	r3, [r7, #6]
 800471c:	2b01      	cmp	r3, #1
 800471e:	d105      	bne.n	800472c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004720:	893b      	ldrh	r3, [r7, #8]
 8004722:	b2da      	uxtb	r2, r3
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	611a      	str	r2, [r3, #16]
 800472a:	e021      	b.n	8004770 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800472c:	893b      	ldrh	r3, [r7, #8]
 800472e:	0a1b      	lsrs	r3, r3, #8
 8004730:	b29b      	uxth	r3, r3
 8004732:	b2da      	uxtb	r2, r3
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800473a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800473c:	6a39      	ldr	r1, [r7, #32]
 800473e:	68f8      	ldr	r0, [r7, #12]
 8004740:	f000 f982 	bl	8004a48 <I2C_WaitOnTXEFlagUntilTimeout>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00d      	beq.n	8004766 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800474e:	2b04      	cmp	r3, #4
 8004750:	d107      	bne.n	8004762 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004760:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e050      	b.n	8004808 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004766:	893b      	ldrh	r3, [r7, #8]
 8004768:	b2da      	uxtb	r2, r3
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004770:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004772:	6a39      	ldr	r1, [r7, #32]
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	f000 f967 	bl	8004a48 <I2C_WaitOnTXEFlagUntilTimeout>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00d      	beq.n	800479c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004784:	2b04      	cmp	r3, #4
 8004786:	d107      	bne.n	8004798 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004796:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e035      	b.n	8004808 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047aa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ae:	9300      	str	r3, [sp, #0]
 80047b0:	6a3b      	ldr	r3, [r7, #32]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80047b8:	68f8      	ldr	r0, [r7, #12]
 80047ba:	f000 f82b 	bl	8004814 <I2C_WaitOnFlagUntilTimeout>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00d      	beq.n	80047e0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047d2:	d103      	bne.n	80047dc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047da:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e013      	b.n	8004808 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80047e0:	897b      	ldrh	r3, [r7, #10]
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	f043 0301 	orr.w	r3, r3, #1
 80047e8:	b2da      	uxtb	r2, r3
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f2:	6a3a      	ldr	r2, [r7, #32]
 80047f4:	4906      	ldr	r1, [pc, #24]	@ (8004810 <I2C_RequestMemoryRead+0x1cc>)
 80047f6:	68f8      	ldr	r0, [r7, #12]
 80047f8:	f000 f886 	bl	8004908 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d001      	beq.n	8004806 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e000      	b.n	8004808 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004806:	2300      	movs	r3, #0
}
 8004808:	4618      	mov	r0, r3
 800480a:	3718      	adds	r7, #24
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}
 8004810:	00010002 	.word	0x00010002

08004814 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	60b9      	str	r1, [r7, #8]
 800481e:	603b      	str	r3, [r7, #0]
 8004820:	4613      	mov	r3, r2
 8004822:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004824:	e048      	b.n	80048b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800482c:	d044      	beq.n	80048b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800482e:	f7fe f9f1 	bl	8002c14 <HAL_GetTick>
 8004832:	4602      	mov	r2, r0
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	683a      	ldr	r2, [r7, #0]
 800483a:	429a      	cmp	r2, r3
 800483c:	d302      	bcc.n	8004844 <I2C_WaitOnFlagUntilTimeout+0x30>
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d139      	bne.n	80048b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	0c1b      	lsrs	r3, r3, #16
 8004848:	b2db      	uxtb	r3, r3
 800484a:	2b01      	cmp	r3, #1
 800484c:	d10d      	bne.n	800486a <I2C_WaitOnFlagUntilTimeout+0x56>
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	695b      	ldr	r3, [r3, #20]
 8004854:	43da      	mvns	r2, r3
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	4013      	ands	r3, r2
 800485a:	b29b      	uxth	r3, r3
 800485c:	2b00      	cmp	r3, #0
 800485e:	bf0c      	ite	eq
 8004860:	2301      	moveq	r3, #1
 8004862:	2300      	movne	r3, #0
 8004864:	b2db      	uxtb	r3, r3
 8004866:	461a      	mov	r2, r3
 8004868:	e00c      	b.n	8004884 <I2C_WaitOnFlagUntilTimeout+0x70>
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	43da      	mvns	r2, r3
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	4013      	ands	r3, r2
 8004876:	b29b      	uxth	r3, r3
 8004878:	2b00      	cmp	r3, #0
 800487a:	bf0c      	ite	eq
 800487c:	2301      	moveq	r3, #1
 800487e:	2300      	movne	r3, #0
 8004880:	b2db      	uxtb	r3, r3
 8004882:	461a      	mov	r2, r3
 8004884:	79fb      	ldrb	r3, [r7, #7]
 8004886:	429a      	cmp	r2, r3
 8004888:	d116      	bne.n	80048b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2200      	movs	r2, #0
 800488e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2220      	movs	r2, #32
 8004894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2200      	movs	r2, #0
 800489c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a4:	f043 0220 	orr.w	r2, r3, #32
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e023      	b.n	8004900 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	0c1b      	lsrs	r3, r3, #16
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d10d      	bne.n	80048de <I2C_WaitOnFlagUntilTimeout+0xca>
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	695b      	ldr	r3, [r3, #20]
 80048c8:	43da      	mvns	r2, r3
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	4013      	ands	r3, r2
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	bf0c      	ite	eq
 80048d4:	2301      	moveq	r3, #1
 80048d6:	2300      	movne	r3, #0
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	461a      	mov	r2, r3
 80048dc:	e00c      	b.n	80048f8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	699b      	ldr	r3, [r3, #24]
 80048e4:	43da      	mvns	r2, r3
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	4013      	ands	r3, r2
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	bf0c      	ite	eq
 80048f0:	2301      	moveq	r3, #1
 80048f2:	2300      	movne	r3, #0
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	461a      	mov	r2, r3
 80048f8:	79fb      	ldrb	r3, [r7, #7]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d093      	beq.n	8004826 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3710      	adds	r7, #16
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	607a      	str	r2, [r7, #4]
 8004914:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004916:	e071      	b.n	80049fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	695b      	ldr	r3, [r3, #20]
 800491e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004922:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004926:	d123      	bne.n	8004970 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004936:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004940:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2200      	movs	r2, #0
 8004946:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2220      	movs	r2, #32
 800494c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800495c:	f043 0204 	orr.w	r2, r3, #4
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e067      	b.n	8004a40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004976:	d041      	beq.n	80049fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004978:	f7fe f94c 	bl	8002c14 <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	429a      	cmp	r2, r3
 8004986:	d302      	bcc.n	800498e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d136      	bne.n	80049fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	0c1b      	lsrs	r3, r3, #16
 8004992:	b2db      	uxtb	r3, r3
 8004994:	2b01      	cmp	r3, #1
 8004996:	d10c      	bne.n	80049b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	43da      	mvns	r2, r3
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	4013      	ands	r3, r2
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	bf14      	ite	ne
 80049aa:	2301      	movne	r3, #1
 80049ac:	2300      	moveq	r3, #0
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	e00b      	b.n	80049ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	43da      	mvns	r2, r3
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	4013      	ands	r3, r2
 80049be:	b29b      	uxth	r3, r3
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	bf14      	ite	ne
 80049c4:	2301      	movne	r3, #1
 80049c6:	2300      	moveq	r3, #0
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d016      	beq.n	80049fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2220      	movs	r2, #32
 80049d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049e8:	f043 0220 	orr.w	r2, r3, #32
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e021      	b.n	8004a40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	0c1b      	lsrs	r3, r3, #16
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d10c      	bne.n	8004a20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	695b      	ldr	r3, [r3, #20]
 8004a0c:	43da      	mvns	r2, r3
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	4013      	ands	r3, r2
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	bf14      	ite	ne
 8004a18:	2301      	movne	r3, #1
 8004a1a:	2300      	moveq	r3, #0
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	e00b      	b.n	8004a38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	699b      	ldr	r3, [r3, #24]
 8004a26:	43da      	mvns	r2, r3
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	bf14      	ite	ne
 8004a32:	2301      	movne	r3, #1
 8004a34:	2300      	moveq	r3, #0
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	f47f af6d 	bne.w	8004918 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3710      	adds	r7, #16
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a54:	e034      	b.n	8004ac0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a56:	68f8      	ldr	r0, [r7, #12]
 8004a58:	f000 f8e3 	bl	8004c22 <I2C_IsAcknowledgeFailed>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d001      	beq.n	8004a66 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e034      	b.n	8004ad0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a6c:	d028      	beq.n	8004ac0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a6e:	f7fe f8d1 	bl	8002c14 <HAL_GetTick>
 8004a72:	4602      	mov	r2, r0
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	68ba      	ldr	r2, [r7, #8]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d302      	bcc.n	8004a84 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d11d      	bne.n	8004ac0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a8e:	2b80      	cmp	r3, #128	@ 0x80
 8004a90:	d016      	beq.n	8004ac0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2200      	movs	r2, #0
 8004a96:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2220      	movs	r2, #32
 8004a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aac:	f043 0220 	orr.w	r2, r3, #32
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e007      	b.n	8004ad0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aca:	2b80      	cmp	r3, #128	@ 0x80
 8004acc:	d1c3      	bne.n	8004a56 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004ace:	2300      	movs	r3, #0
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3710      	adds	r7, #16
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ae4:	e034      	b.n	8004b50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ae6:	68f8      	ldr	r0, [r7, #12]
 8004ae8:	f000 f89b 	bl	8004c22 <I2C_IsAcknowledgeFailed>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d001      	beq.n	8004af6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e034      	b.n	8004b60 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004afc:	d028      	beq.n	8004b50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004afe:	f7fe f889 	bl	8002c14 <HAL_GetTick>
 8004b02:	4602      	mov	r2, r0
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	68ba      	ldr	r2, [r7, #8]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d302      	bcc.n	8004b14 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d11d      	bne.n	8004b50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	f003 0304 	and.w	r3, r3, #4
 8004b1e:	2b04      	cmp	r3, #4
 8004b20:	d016      	beq.n	8004b50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2200      	movs	r2, #0
 8004b26:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2220      	movs	r2, #32
 8004b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b3c:	f043 0220 	orr.w	r2, r3, #32
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e007      	b.n	8004b60 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	f003 0304 	and.w	r3, r3, #4
 8004b5a:	2b04      	cmp	r3, #4
 8004b5c:	d1c3      	bne.n	8004ae6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004b5e:	2300      	movs	r3, #0
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3710      	adds	r7, #16
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b74:	e049      	b.n	8004c0a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	695b      	ldr	r3, [r3, #20]
 8004b7c:	f003 0310 	and.w	r3, r3, #16
 8004b80:	2b10      	cmp	r3, #16
 8004b82:	d119      	bne.n	8004bb8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f06f 0210 	mvn.w	r2, #16
 8004b8c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2220      	movs	r2, #32
 8004b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e030      	b.n	8004c1a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bb8:	f7fe f82c 	bl	8002c14 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	68ba      	ldr	r2, [r7, #8]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d302      	bcc.n	8004bce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d11d      	bne.n	8004c0a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	695b      	ldr	r3, [r3, #20]
 8004bd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bd8:	2b40      	cmp	r3, #64	@ 0x40
 8004bda:	d016      	beq.n	8004c0a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2200      	movs	r2, #0
 8004be0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2220      	movs	r2, #32
 8004be6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bf6:	f043 0220 	orr.w	r2, r3, #32
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e007      	b.n	8004c1a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	695b      	ldr	r3, [r3, #20]
 8004c10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c14:	2b40      	cmp	r3, #64	@ 0x40
 8004c16:	d1ae      	bne.n	8004b76 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3710      	adds	r7, #16
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}

08004c22 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004c22:	b480      	push	{r7}
 8004c24:	b083      	sub	sp, #12
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	695b      	ldr	r3, [r3, #20]
 8004c30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c38:	d11b      	bne.n	8004c72 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004c42:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2220      	movs	r2, #32
 8004c4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c5e:	f043 0204 	orr.w	r2, r3, #4
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e000      	b.n	8004c74 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004c72:	2300      	movs	r3, #0
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	370c      	adds	r7, #12
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bc80      	pop	{r7}
 8004c7c:	4770      	bx	lr
	...

08004c80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b086      	sub	sp, #24
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d101      	bne.n	8004c92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e272      	b.n	8005178 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0301 	and.w	r3, r3, #1
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	f000 8087 	beq.w	8004dae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ca0:	4b92      	ldr	r3, [pc, #584]	@ (8004eec <HAL_RCC_OscConfig+0x26c>)
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	f003 030c 	and.w	r3, r3, #12
 8004ca8:	2b04      	cmp	r3, #4
 8004caa:	d00c      	beq.n	8004cc6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004cac:	4b8f      	ldr	r3, [pc, #572]	@ (8004eec <HAL_RCC_OscConfig+0x26c>)
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	f003 030c 	and.w	r3, r3, #12
 8004cb4:	2b08      	cmp	r3, #8
 8004cb6:	d112      	bne.n	8004cde <HAL_RCC_OscConfig+0x5e>
 8004cb8:	4b8c      	ldr	r3, [pc, #560]	@ (8004eec <HAL_RCC_OscConfig+0x26c>)
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cc4:	d10b      	bne.n	8004cde <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cc6:	4b89      	ldr	r3, [pc, #548]	@ (8004eec <HAL_RCC_OscConfig+0x26c>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d06c      	beq.n	8004dac <HAL_RCC_OscConfig+0x12c>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d168      	bne.n	8004dac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e24c      	b.n	8005178 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ce6:	d106      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x76>
 8004ce8:	4b80      	ldr	r3, [pc, #512]	@ (8004eec <HAL_RCC_OscConfig+0x26c>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a7f      	ldr	r2, [pc, #508]	@ (8004eec <HAL_RCC_OscConfig+0x26c>)
 8004cee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cf2:	6013      	str	r3, [r2, #0]
 8004cf4:	e02e      	b.n	8004d54 <HAL_RCC_OscConfig+0xd4>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d10c      	bne.n	8004d18 <HAL_RCC_OscConfig+0x98>
 8004cfe:	4b7b      	ldr	r3, [pc, #492]	@ (8004eec <HAL_RCC_OscConfig+0x26c>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a7a      	ldr	r2, [pc, #488]	@ (8004eec <HAL_RCC_OscConfig+0x26c>)
 8004d04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d08:	6013      	str	r3, [r2, #0]
 8004d0a:	4b78      	ldr	r3, [pc, #480]	@ (8004eec <HAL_RCC_OscConfig+0x26c>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a77      	ldr	r2, [pc, #476]	@ (8004eec <HAL_RCC_OscConfig+0x26c>)
 8004d10:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d14:	6013      	str	r3, [r2, #0]
 8004d16:	e01d      	b.n	8004d54 <HAL_RCC_OscConfig+0xd4>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d20:	d10c      	bne.n	8004d3c <HAL_RCC_OscConfig+0xbc>
 8004d22:	4b72      	ldr	r3, [pc, #456]	@ (8004eec <HAL_RCC_OscConfig+0x26c>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a71      	ldr	r2, [pc, #452]	@ (8004eec <HAL_RCC_OscConfig+0x26c>)
 8004d28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d2c:	6013      	str	r3, [r2, #0]
 8004d2e:	4b6f      	ldr	r3, [pc, #444]	@ (8004eec <HAL_RCC_OscConfig+0x26c>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a6e      	ldr	r2, [pc, #440]	@ (8004eec <HAL_RCC_OscConfig+0x26c>)
 8004d34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d38:	6013      	str	r3, [r2, #0]
 8004d3a:	e00b      	b.n	8004d54 <HAL_RCC_OscConfig+0xd4>
 8004d3c:	4b6b      	ldr	r3, [pc, #428]	@ (8004eec <HAL_RCC_OscConfig+0x26c>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a6a      	ldr	r2, [pc, #424]	@ (8004eec <HAL_RCC_OscConfig+0x26c>)
 8004d42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d46:	6013      	str	r3, [r2, #0]
 8004d48:	4b68      	ldr	r3, [pc, #416]	@ (8004eec <HAL_RCC_OscConfig+0x26c>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a67      	ldr	r2, [pc, #412]	@ (8004eec <HAL_RCC_OscConfig+0x26c>)
 8004d4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d52:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d013      	beq.n	8004d84 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d5c:	f7fd ff5a 	bl	8002c14 <HAL_GetTick>
 8004d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d62:	e008      	b.n	8004d76 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d64:	f7fd ff56 	bl	8002c14 <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	2b64      	cmp	r3, #100	@ 0x64
 8004d70:	d901      	bls.n	8004d76 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e200      	b.n	8005178 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d76:	4b5d      	ldr	r3, [pc, #372]	@ (8004eec <HAL_RCC_OscConfig+0x26c>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d0f0      	beq.n	8004d64 <HAL_RCC_OscConfig+0xe4>
 8004d82:	e014      	b.n	8004dae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d84:	f7fd ff46 	bl	8002c14 <HAL_GetTick>
 8004d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d8a:	e008      	b.n	8004d9e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d8c:	f7fd ff42 	bl	8002c14 <HAL_GetTick>
 8004d90:	4602      	mov	r2, r0
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	2b64      	cmp	r3, #100	@ 0x64
 8004d98:	d901      	bls.n	8004d9e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e1ec      	b.n	8005178 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d9e:	4b53      	ldr	r3, [pc, #332]	@ (8004eec <HAL_RCC_OscConfig+0x26c>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d1f0      	bne.n	8004d8c <HAL_RCC_OscConfig+0x10c>
 8004daa:	e000      	b.n	8004dae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 0302 	and.w	r3, r3, #2
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d063      	beq.n	8004e82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004dba:	4b4c      	ldr	r3, [pc, #304]	@ (8004eec <HAL_RCC_OscConfig+0x26c>)
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f003 030c 	and.w	r3, r3, #12
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d00b      	beq.n	8004dde <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004dc6:	4b49      	ldr	r3, [pc, #292]	@ (8004eec <HAL_RCC_OscConfig+0x26c>)
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	f003 030c 	and.w	r3, r3, #12
 8004dce:	2b08      	cmp	r3, #8
 8004dd0:	d11c      	bne.n	8004e0c <HAL_RCC_OscConfig+0x18c>
 8004dd2:	4b46      	ldr	r3, [pc, #280]	@ (8004eec <HAL_RCC_OscConfig+0x26c>)
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d116      	bne.n	8004e0c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dde:	4b43      	ldr	r3, [pc, #268]	@ (8004eec <HAL_RCC_OscConfig+0x26c>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0302 	and.w	r3, r3, #2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d005      	beq.n	8004df6 <HAL_RCC_OscConfig+0x176>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d001      	beq.n	8004df6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e1c0      	b.n	8005178 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004df6:	4b3d      	ldr	r3, [pc, #244]	@ (8004eec <HAL_RCC_OscConfig+0x26c>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	00db      	lsls	r3, r3, #3
 8004e04:	4939      	ldr	r1, [pc, #228]	@ (8004eec <HAL_RCC_OscConfig+0x26c>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e0a:	e03a      	b.n	8004e82 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d020      	beq.n	8004e56 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e14:	4b36      	ldr	r3, [pc, #216]	@ (8004ef0 <HAL_RCC_OscConfig+0x270>)
 8004e16:	2201      	movs	r2, #1
 8004e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e1a:	f7fd fefb 	bl	8002c14 <HAL_GetTick>
 8004e1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e20:	e008      	b.n	8004e34 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e22:	f7fd fef7 	bl	8002c14 <HAL_GetTick>
 8004e26:	4602      	mov	r2, r0
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d901      	bls.n	8004e34 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e1a1      	b.n	8005178 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e34:	4b2d      	ldr	r3, [pc, #180]	@ (8004eec <HAL_RCC_OscConfig+0x26c>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0302 	and.w	r3, r3, #2
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d0f0      	beq.n	8004e22 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e40:	4b2a      	ldr	r3, [pc, #168]	@ (8004eec <HAL_RCC_OscConfig+0x26c>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	695b      	ldr	r3, [r3, #20]
 8004e4c:	00db      	lsls	r3, r3, #3
 8004e4e:	4927      	ldr	r1, [pc, #156]	@ (8004eec <HAL_RCC_OscConfig+0x26c>)
 8004e50:	4313      	orrs	r3, r2
 8004e52:	600b      	str	r3, [r1, #0]
 8004e54:	e015      	b.n	8004e82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e56:	4b26      	ldr	r3, [pc, #152]	@ (8004ef0 <HAL_RCC_OscConfig+0x270>)
 8004e58:	2200      	movs	r2, #0
 8004e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e5c:	f7fd feda 	bl	8002c14 <HAL_GetTick>
 8004e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e62:	e008      	b.n	8004e76 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e64:	f7fd fed6 	bl	8002c14 <HAL_GetTick>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d901      	bls.n	8004e76 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	e180      	b.n	8005178 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e76:	4b1d      	ldr	r3, [pc, #116]	@ (8004eec <HAL_RCC_OscConfig+0x26c>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0302 	and.w	r3, r3, #2
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1f0      	bne.n	8004e64 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0308 	and.w	r3, r3, #8
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d03a      	beq.n	8004f04 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d019      	beq.n	8004eca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e96:	4b17      	ldr	r3, [pc, #92]	@ (8004ef4 <HAL_RCC_OscConfig+0x274>)
 8004e98:	2201      	movs	r2, #1
 8004e9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e9c:	f7fd feba 	bl	8002c14 <HAL_GetTick>
 8004ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ea2:	e008      	b.n	8004eb6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ea4:	f7fd feb6 	bl	8002c14 <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d901      	bls.n	8004eb6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e160      	b.n	8005178 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8004eec <HAL_RCC_OscConfig+0x26c>)
 8004eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eba:	f003 0302 	and.w	r3, r3, #2
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d0f0      	beq.n	8004ea4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004ec2:	2001      	movs	r0, #1
 8004ec4:	f000 face 	bl	8005464 <RCC_Delay>
 8004ec8:	e01c      	b.n	8004f04 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004eca:	4b0a      	ldr	r3, [pc, #40]	@ (8004ef4 <HAL_RCC_OscConfig+0x274>)
 8004ecc:	2200      	movs	r2, #0
 8004ece:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ed0:	f7fd fea0 	bl	8002c14 <HAL_GetTick>
 8004ed4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ed6:	e00f      	b.n	8004ef8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ed8:	f7fd fe9c 	bl	8002c14 <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d908      	bls.n	8004ef8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e146      	b.n	8005178 <HAL_RCC_OscConfig+0x4f8>
 8004eea:	bf00      	nop
 8004eec:	40021000 	.word	0x40021000
 8004ef0:	42420000 	.word	0x42420000
 8004ef4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ef8:	4b92      	ldr	r3, [pc, #584]	@ (8005144 <HAL_RCC_OscConfig+0x4c4>)
 8004efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004efc:	f003 0302 	and.w	r3, r3, #2
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d1e9      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0304 	and.w	r3, r3, #4
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	f000 80a6 	beq.w	800505e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f12:	2300      	movs	r3, #0
 8004f14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f16:	4b8b      	ldr	r3, [pc, #556]	@ (8005144 <HAL_RCC_OscConfig+0x4c4>)
 8004f18:	69db      	ldr	r3, [r3, #28]
 8004f1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d10d      	bne.n	8004f3e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f22:	4b88      	ldr	r3, [pc, #544]	@ (8005144 <HAL_RCC_OscConfig+0x4c4>)
 8004f24:	69db      	ldr	r3, [r3, #28]
 8004f26:	4a87      	ldr	r2, [pc, #540]	@ (8005144 <HAL_RCC_OscConfig+0x4c4>)
 8004f28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f2c:	61d3      	str	r3, [r2, #28]
 8004f2e:	4b85      	ldr	r3, [pc, #532]	@ (8005144 <HAL_RCC_OscConfig+0x4c4>)
 8004f30:	69db      	ldr	r3, [r3, #28]
 8004f32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f36:	60bb      	str	r3, [r7, #8]
 8004f38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f3e:	4b82      	ldr	r3, [pc, #520]	@ (8005148 <HAL_RCC_OscConfig+0x4c8>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d118      	bne.n	8004f7c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f4a:	4b7f      	ldr	r3, [pc, #508]	@ (8005148 <HAL_RCC_OscConfig+0x4c8>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a7e      	ldr	r2, [pc, #504]	@ (8005148 <HAL_RCC_OscConfig+0x4c8>)
 8004f50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f56:	f7fd fe5d 	bl	8002c14 <HAL_GetTick>
 8004f5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f5c:	e008      	b.n	8004f70 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f5e:	f7fd fe59 	bl	8002c14 <HAL_GetTick>
 8004f62:	4602      	mov	r2, r0
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	2b64      	cmp	r3, #100	@ 0x64
 8004f6a:	d901      	bls.n	8004f70 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	e103      	b.n	8005178 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f70:	4b75      	ldr	r3, [pc, #468]	@ (8005148 <HAL_RCC_OscConfig+0x4c8>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d0f0      	beq.n	8004f5e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d106      	bne.n	8004f92 <HAL_RCC_OscConfig+0x312>
 8004f84:	4b6f      	ldr	r3, [pc, #444]	@ (8005144 <HAL_RCC_OscConfig+0x4c4>)
 8004f86:	6a1b      	ldr	r3, [r3, #32]
 8004f88:	4a6e      	ldr	r2, [pc, #440]	@ (8005144 <HAL_RCC_OscConfig+0x4c4>)
 8004f8a:	f043 0301 	orr.w	r3, r3, #1
 8004f8e:	6213      	str	r3, [r2, #32]
 8004f90:	e02d      	b.n	8004fee <HAL_RCC_OscConfig+0x36e>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d10c      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x334>
 8004f9a:	4b6a      	ldr	r3, [pc, #424]	@ (8005144 <HAL_RCC_OscConfig+0x4c4>)
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	4a69      	ldr	r2, [pc, #420]	@ (8005144 <HAL_RCC_OscConfig+0x4c4>)
 8004fa0:	f023 0301 	bic.w	r3, r3, #1
 8004fa4:	6213      	str	r3, [r2, #32]
 8004fa6:	4b67      	ldr	r3, [pc, #412]	@ (8005144 <HAL_RCC_OscConfig+0x4c4>)
 8004fa8:	6a1b      	ldr	r3, [r3, #32]
 8004faa:	4a66      	ldr	r2, [pc, #408]	@ (8005144 <HAL_RCC_OscConfig+0x4c4>)
 8004fac:	f023 0304 	bic.w	r3, r3, #4
 8004fb0:	6213      	str	r3, [r2, #32]
 8004fb2:	e01c      	b.n	8004fee <HAL_RCC_OscConfig+0x36e>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	2b05      	cmp	r3, #5
 8004fba:	d10c      	bne.n	8004fd6 <HAL_RCC_OscConfig+0x356>
 8004fbc:	4b61      	ldr	r3, [pc, #388]	@ (8005144 <HAL_RCC_OscConfig+0x4c4>)
 8004fbe:	6a1b      	ldr	r3, [r3, #32]
 8004fc0:	4a60      	ldr	r2, [pc, #384]	@ (8005144 <HAL_RCC_OscConfig+0x4c4>)
 8004fc2:	f043 0304 	orr.w	r3, r3, #4
 8004fc6:	6213      	str	r3, [r2, #32]
 8004fc8:	4b5e      	ldr	r3, [pc, #376]	@ (8005144 <HAL_RCC_OscConfig+0x4c4>)
 8004fca:	6a1b      	ldr	r3, [r3, #32]
 8004fcc:	4a5d      	ldr	r2, [pc, #372]	@ (8005144 <HAL_RCC_OscConfig+0x4c4>)
 8004fce:	f043 0301 	orr.w	r3, r3, #1
 8004fd2:	6213      	str	r3, [r2, #32]
 8004fd4:	e00b      	b.n	8004fee <HAL_RCC_OscConfig+0x36e>
 8004fd6:	4b5b      	ldr	r3, [pc, #364]	@ (8005144 <HAL_RCC_OscConfig+0x4c4>)
 8004fd8:	6a1b      	ldr	r3, [r3, #32]
 8004fda:	4a5a      	ldr	r2, [pc, #360]	@ (8005144 <HAL_RCC_OscConfig+0x4c4>)
 8004fdc:	f023 0301 	bic.w	r3, r3, #1
 8004fe0:	6213      	str	r3, [r2, #32]
 8004fe2:	4b58      	ldr	r3, [pc, #352]	@ (8005144 <HAL_RCC_OscConfig+0x4c4>)
 8004fe4:	6a1b      	ldr	r3, [r3, #32]
 8004fe6:	4a57      	ldr	r2, [pc, #348]	@ (8005144 <HAL_RCC_OscConfig+0x4c4>)
 8004fe8:	f023 0304 	bic.w	r3, r3, #4
 8004fec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d015      	beq.n	8005022 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ff6:	f7fd fe0d 	bl	8002c14 <HAL_GetTick>
 8004ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ffc:	e00a      	b.n	8005014 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ffe:	f7fd fe09 	bl	8002c14 <HAL_GetTick>
 8005002:	4602      	mov	r2, r0
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	f241 3288 	movw	r2, #5000	@ 0x1388
 800500c:	4293      	cmp	r3, r2
 800500e:	d901      	bls.n	8005014 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	e0b1      	b.n	8005178 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005014:	4b4b      	ldr	r3, [pc, #300]	@ (8005144 <HAL_RCC_OscConfig+0x4c4>)
 8005016:	6a1b      	ldr	r3, [r3, #32]
 8005018:	f003 0302 	and.w	r3, r3, #2
 800501c:	2b00      	cmp	r3, #0
 800501e:	d0ee      	beq.n	8004ffe <HAL_RCC_OscConfig+0x37e>
 8005020:	e014      	b.n	800504c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005022:	f7fd fdf7 	bl	8002c14 <HAL_GetTick>
 8005026:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005028:	e00a      	b.n	8005040 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800502a:	f7fd fdf3 	bl	8002c14 <HAL_GetTick>
 800502e:	4602      	mov	r2, r0
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005038:	4293      	cmp	r3, r2
 800503a:	d901      	bls.n	8005040 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e09b      	b.n	8005178 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005040:	4b40      	ldr	r3, [pc, #256]	@ (8005144 <HAL_RCC_OscConfig+0x4c4>)
 8005042:	6a1b      	ldr	r3, [r3, #32]
 8005044:	f003 0302 	and.w	r3, r3, #2
 8005048:	2b00      	cmp	r3, #0
 800504a:	d1ee      	bne.n	800502a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800504c:	7dfb      	ldrb	r3, [r7, #23]
 800504e:	2b01      	cmp	r3, #1
 8005050:	d105      	bne.n	800505e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005052:	4b3c      	ldr	r3, [pc, #240]	@ (8005144 <HAL_RCC_OscConfig+0x4c4>)
 8005054:	69db      	ldr	r3, [r3, #28]
 8005056:	4a3b      	ldr	r2, [pc, #236]	@ (8005144 <HAL_RCC_OscConfig+0x4c4>)
 8005058:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800505c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	69db      	ldr	r3, [r3, #28]
 8005062:	2b00      	cmp	r3, #0
 8005064:	f000 8087 	beq.w	8005176 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005068:	4b36      	ldr	r3, [pc, #216]	@ (8005144 <HAL_RCC_OscConfig+0x4c4>)
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	f003 030c 	and.w	r3, r3, #12
 8005070:	2b08      	cmp	r3, #8
 8005072:	d061      	beq.n	8005138 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	69db      	ldr	r3, [r3, #28]
 8005078:	2b02      	cmp	r3, #2
 800507a:	d146      	bne.n	800510a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800507c:	4b33      	ldr	r3, [pc, #204]	@ (800514c <HAL_RCC_OscConfig+0x4cc>)
 800507e:	2200      	movs	r2, #0
 8005080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005082:	f7fd fdc7 	bl	8002c14 <HAL_GetTick>
 8005086:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005088:	e008      	b.n	800509c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800508a:	f7fd fdc3 	bl	8002c14 <HAL_GetTick>
 800508e:	4602      	mov	r2, r0
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	2b02      	cmp	r3, #2
 8005096:	d901      	bls.n	800509c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e06d      	b.n	8005178 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800509c:	4b29      	ldr	r3, [pc, #164]	@ (8005144 <HAL_RCC_OscConfig+0x4c4>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d1f0      	bne.n	800508a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a1b      	ldr	r3, [r3, #32]
 80050ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050b0:	d108      	bne.n	80050c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80050b2:	4b24      	ldr	r3, [pc, #144]	@ (8005144 <HAL_RCC_OscConfig+0x4c4>)
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	4921      	ldr	r1, [pc, #132]	@ (8005144 <HAL_RCC_OscConfig+0x4c4>)
 80050c0:	4313      	orrs	r3, r2
 80050c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050c4:	4b1f      	ldr	r3, [pc, #124]	@ (8005144 <HAL_RCC_OscConfig+0x4c4>)
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a19      	ldr	r1, [r3, #32]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d4:	430b      	orrs	r3, r1
 80050d6:	491b      	ldr	r1, [pc, #108]	@ (8005144 <HAL_RCC_OscConfig+0x4c4>)
 80050d8:	4313      	orrs	r3, r2
 80050da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050dc:	4b1b      	ldr	r3, [pc, #108]	@ (800514c <HAL_RCC_OscConfig+0x4cc>)
 80050de:	2201      	movs	r2, #1
 80050e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050e2:	f7fd fd97 	bl	8002c14 <HAL_GetTick>
 80050e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80050e8:	e008      	b.n	80050fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050ea:	f7fd fd93 	bl	8002c14 <HAL_GetTick>
 80050ee:	4602      	mov	r2, r0
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	1ad3      	subs	r3, r2, r3
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d901      	bls.n	80050fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80050f8:	2303      	movs	r3, #3
 80050fa:	e03d      	b.n	8005178 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80050fc:	4b11      	ldr	r3, [pc, #68]	@ (8005144 <HAL_RCC_OscConfig+0x4c4>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005104:	2b00      	cmp	r3, #0
 8005106:	d0f0      	beq.n	80050ea <HAL_RCC_OscConfig+0x46a>
 8005108:	e035      	b.n	8005176 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800510a:	4b10      	ldr	r3, [pc, #64]	@ (800514c <HAL_RCC_OscConfig+0x4cc>)
 800510c:	2200      	movs	r2, #0
 800510e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005110:	f7fd fd80 	bl	8002c14 <HAL_GetTick>
 8005114:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005116:	e008      	b.n	800512a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005118:	f7fd fd7c 	bl	8002c14 <HAL_GetTick>
 800511c:	4602      	mov	r2, r0
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	2b02      	cmp	r3, #2
 8005124:	d901      	bls.n	800512a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	e026      	b.n	8005178 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800512a:	4b06      	ldr	r3, [pc, #24]	@ (8005144 <HAL_RCC_OscConfig+0x4c4>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005132:	2b00      	cmp	r3, #0
 8005134:	d1f0      	bne.n	8005118 <HAL_RCC_OscConfig+0x498>
 8005136:	e01e      	b.n	8005176 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	69db      	ldr	r3, [r3, #28]
 800513c:	2b01      	cmp	r3, #1
 800513e:	d107      	bne.n	8005150 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e019      	b.n	8005178 <HAL_RCC_OscConfig+0x4f8>
 8005144:	40021000 	.word	0x40021000
 8005148:	40007000 	.word	0x40007000
 800514c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005150:	4b0b      	ldr	r3, [pc, #44]	@ (8005180 <HAL_RCC_OscConfig+0x500>)
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a1b      	ldr	r3, [r3, #32]
 8005160:	429a      	cmp	r2, r3
 8005162:	d106      	bne.n	8005172 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800516e:	429a      	cmp	r2, r3
 8005170:	d001      	beq.n	8005176 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e000      	b.n	8005178 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005176:	2300      	movs	r3, #0
}
 8005178:	4618      	mov	r0, r3
 800517a:	3718      	adds	r7, #24
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}
 8005180:	40021000 	.word	0x40021000

08005184 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d101      	bne.n	8005198 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e0d0      	b.n	800533a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005198:	4b6a      	ldr	r3, [pc, #424]	@ (8005344 <HAL_RCC_ClockConfig+0x1c0>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0307 	and.w	r3, r3, #7
 80051a0:	683a      	ldr	r2, [r7, #0]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d910      	bls.n	80051c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051a6:	4b67      	ldr	r3, [pc, #412]	@ (8005344 <HAL_RCC_ClockConfig+0x1c0>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f023 0207 	bic.w	r2, r3, #7
 80051ae:	4965      	ldr	r1, [pc, #404]	@ (8005344 <HAL_RCC_ClockConfig+0x1c0>)
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051b6:	4b63      	ldr	r3, [pc, #396]	@ (8005344 <HAL_RCC_ClockConfig+0x1c0>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0307 	and.w	r3, r3, #7
 80051be:	683a      	ldr	r2, [r7, #0]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d001      	beq.n	80051c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	e0b8      	b.n	800533a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0302 	and.w	r3, r3, #2
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d020      	beq.n	8005216 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0304 	and.w	r3, r3, #4
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d005      	beq.n	80051ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051e0:	4b59      	ldr	r3, [pc, #356]	@ (8005348 <HAL_RCC_ClockConfig+0x1c4>)
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	4a58      	ldr	r2, [pc, #352]	@ (8005348 <HAL_RCC_ClockConfig+0x1c4>)
 80051e6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80051ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0308 	and.w	r3, r3, #8
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d005      	beq.n	8005204 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051f8:	4b53      	ldr	r3, [pc, #332]	@ (8005348 <HAL_RCC_ClockConfig+0x1c4>)
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	4a52      	ldr	r2, [pc, #328]	@ (8005348 <HAL_RCC_ClockConfig+0x1c4>)
 80051fe:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005202:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005204:	4b50      	ldr	r3, [pc, #320]	@ (8005348 <HAL_RCC_ClockConfig+0x1c4>)
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	494d      	ldr	r1, [pc, #308]	@ (8005348 <HAL_RCC_ClockConfig+0x1c4>)
 8005212:	4313      	orrs	r3, r2
 8005214:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	2b00      	cmp	r3, #0
 8005220:	d040      	beq.n	80052a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	2b01      	cmp	r3, #1
 8005228:	d107      	bne.n	800523a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800522a:	4b47      	ldr	r3, [pc, #284]	@ (8005348 <HAL_RCC_ClockConfig+0x1c4>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005232:	2b00      	cmp	r3, #0
 8005234:	d115      	bne.n	8005262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e07f      	b.n	800533a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	2b02      	cmp	r3, #2
 8005240:	d107      	bne.n	8005252 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005242:	4b41      	ldr	r3, [pc, #260]	@ (8005348 <HAL_RCC_ClockConfig+0x1c4>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d109      	bne.n	8005262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e073      	b.n	800533a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005252:	4b3d      	ldr	r3, [pc, #244]	@ (8005348 <HAL_RCC_ClockConfig+0x1c4>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0302 	and.w	r3, r3, #2
 800525a:	2b00      	cmp	r3, #0
 800525c:	d101      	bne.n	8005262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e06b      	b.n	800533a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005262:	4b39      	ldr	r3, [pc, #228]	@ (8005348 <HAL_RCC_ClockConfig+0x1c4>)
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	f023 0203 	bic.w	r2, r3, #3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	4936      	ldr	r1, [pc, #216]	@ (8005348 <HAL_RCC_ClockConfig+0x1c4>)
 8005270:	4313      	orrs	r3, r2
 8005272:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005274:	f7fd fcce 	bl	8002c14 <HAL_GetTick>
 8005278:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800527a:	e00a      	b.n	8005292 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800527c:	f7fd fcca 	bl	8002c14 <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	f241 3288 	movw	r2, #5000	@ 0x1388
 800528a:	4293      	cmp	r3, r2
 800528c:	d901      	bls.n	8005292 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e053      	b.n	800533a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005292:	4b2d      	ldr	r3, [pc, #180]	@ (8005348 <HAL_RCC_ClockConfig+0x1c4>)
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	f003 020c 	and.w	r2, r3, #12
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d1eb      	bne.n	800527c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052a4:	4b27      	ldr	r3, [pc, #156]	@ (8005344 <HAL_RCC_ClockConfig+0x1c0>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 0307 	and.w	r3, r3, #7
 80052ac:	683a      	ldr	r2, [r7, #0]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d210      	bcs.n	80052d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052b2:	4b24      	ldr	r3, [pc, #144]	@ (8005344 <HAL_RCC_ClockConfig+0x1c0>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f023 0207 	bic.w	r2, r3, #7
 80052ba:	4922      	ldr	r1, [pc, #136]	@ (8005344 <HAL_RCC_ClockConfig+0x1c0>)
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	4313      	orrs	r3, r2
 80052c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052c2:	4b20      	ldr	r3, [pc, #128]	@ (8005344 <HAL_RCC_ClockConfig+0x1c0>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 0307 	and.w	r3, r3, #7
 80052ca:	683a      	ldr	r2, [r7, #0]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d001      	beq.n	80052d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	e032      	b.n	800533a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 0304 	and.w	r3, r3, #4
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d008      	beq.n	80052f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052e0:	4b19      	ldr	r3, [pc, #100]	@ (8005348 <HAL_RCC_ClockConfig+0x1c4>)
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	4916      	ldr	r1, [pc, #88]	@ (8005348 <HAL_RCC_ClockConfig+0x1c4>)
 80052ee:	4313      	orrs	r3, r2
 80052f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 0308 	and.w	r3, r3, #8
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d009      	beq.n	8005312 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80052fe:	4b12      	ldr	r3, [pc, #72]	@ (8005348 <HAL_RCC_ClockConfig+0x1c4>)
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	00db      	lsls	r3, r3, #3
 800530c:	490e      	ldr	r1, [pc, #56]	@ (8005348 <HAL_RCC_ClockConfig+0x1c4>)
 800530e:	4313      	orrs	r3, r2
 8005310:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005312:	f000 f821 	bl	8005358 <HAL_RCC_GetSysClockFreq>
 8005316:	4602      	mov	r2, r0
 8005318:	4b0b      	ldr	r3, [pc, #44]	@ (8005348 <HAL_RCC_ClockConfig+0x1c4>)
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	091b      	lsrs	r3, r3, #4
 800531e:	f003 030f 	and.w	r3, r3, #15
 8005322:	490a      	ldr	r1, [pc, #40]	@ (800534c <HAL_RCC_ClockConfig+0x1c8>)
 8005324:	5ccb      	ldrb	r3, [r1, r3]
 8005326:	fa22 f303 	lsr.w	r3, r2, r3
 800532a:	4a09      	ldr	r2, [pc, #36]	@ (8005350 <HAL_RCC_ClockConfig+0x1cc>)
 800532c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800532e:	4b09      	ldr	r3, [pc, #36]	@ (8005354 <HAL_RCC_ClockConfig+0x1d0>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4618      	mov	r0, r3
 8005334:	f7fd fc2c 	bl	8002b90 <HAL_InitTick>

  return HAL_OK;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	3710      	adds	r7, #16
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	40022000 	.word	0x40022000
 8005348:	40021000 	.word	0x40021000
 800534c:	0800bb2c 	.word	0x0800bb2c
 8005350:	20000080 	.word	0x20000080
 8005354:	20000084 	.word	0x20000084

08005358 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005358:	b480      	push	{r7}
 800535a:	b087      	sub	sp, #28
 800535c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800535e:	2300      	movs	r3, #0
 8005360:	60fb      	str	r3, [r7, #12]
 8005362:	2300      	movs	r3, #0
 8005364:	60bb      	str	r3, [r7, #8]
 8005366:	2300      	movs	r3, #0
 8005368:	617b      	str	r3, [r7, #20]
 800536a:	2300      	movs	r3, #0
 800536c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800536e:	2300      	movs	r3, #0
 8005370:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005372:	4b1e      	ldr	r3, [pc, #120]	@ (80053ec <HAL_RCC_GetSysClockFreq+0x94>)
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f003 030c 	and.w	r3, r3, #12
 800537e:	2b04      	cmp	r3, #4
 8005380:	d002      	beq.n	8005388 <HAL_RCC_GetSysClockFreq+0x30>
 8005382:	2b08      	cmp	r3, #8
 8005384:	d003      	beq.n	800538e <HAL_RCC_GetSysClockFreq+0x36>
 8005386:	e027      	b.n	80053d8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005388:	4b19      	ldr	r3, [pc, #100]	@ (80053f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800538a:	613b      	str	r3, [r7, #16]
      break;
 800538c:	e027      	b.n	80053de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	0c9b      	lsrs	r3, r3, #18
 8005392:	f003 030f 	and.w	r3, r3, #15
 8005396:	4a17      	ldr	r2, [pc, #92]	@ (80053f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005398:	5cd3      	ldrb	r3, [r2, r3]
 800539a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d010      	beq.n	80053c8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80053a6:	4b11      	ldr	r3, [pc, #68]	@ (80053ec <HAL_RCC_GetSysClockFreq+0x94>)
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	0c5b      	lsrs	r3, r3, #17
 80053ac:	f003 0301 	and.w	r3, r3, #1
 80053b0:	4a11      	ldr	r2, [pc, #68]	@ (80053f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80053b2:	5cd3      	ldrb	r3, [r2, r3]
 80053b4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a0d      	ldr	r2, [pc, #52]	@ (80053f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80053ba:	fb03 f202 	mul.w	r2, r3, r2
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053c4:	617b      	str	r3, [r7, #20]
 80053c6:	e004      	b.n	80053d2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a0c      	ldr	r2, [pc, #48]	@ (80053fc <HAL_RCC_GetSysClockFreq+0xa4>)
 80053cc:	fb02 f303 	mul.w	r3, r2, r3
 80053d0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	613b      	str	r3, [r7, #16]
      break;
 80053d6:	e002      	b.n	80053de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80053d8:	4b05      	ldr	r3, [pc, #20]	@ (80053f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80053da:	613b      	str	r3, [r7, #16]
      break;
 80053dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053de:	693b      	ldr	r3, [r7, #16]
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	371c      	adds	r7, #28
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bc80      	pop	{r7}
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	40021000 	.word	0x40021000
 80053f0:	007a1200 	.word	0x007a1200
 80053f4:	0800bb44 	.word	0x0800bb44
 80053f8:	0800bb54 	.word	0x0800bb54
 80053fc:	003d0900 	.word	0x003d0900

08005400 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005400:	b480      	push	{r7}
 8005402:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005404:	4b02      	ldr	r3, [pc, #8]	@ (8005410 <HAL_RCC_GetHCLKFreq+0x10>)
 8005406:	681b      	ldr	r3, [r3, #0]
}
 8005408:	4618      	mov	r0, r3
 800540a:	46bd      	mov	sp, r7
 800540c:	bc80      	pop	{r7}
 800540e:	4770      	bx	lr
 8005410:	20000080 	.word	0x20000080

08005414 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005418:	f7ff fff2 	bl	8005400 <HAL_RCC_GetHCLKFreq>
 800541c:	4602      	mov	r2, r0
 800541e:	4b05      	ldr	r3, [pc, #20]	@ (8005434 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	0a1b      	lsrs	r3, r3, #8
 8005424:	f003 0307 	and.w	r3, r3, #7
 8005428:	4903      	ldr	r1, [pc, #12]	@ (8005438 <HAL_RCC_GetPCLK1Freq+0x24>)
 800542a:	5ccb      	ldrb	r3, [r1, r3]
 800542c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005430:	4618      	mov	r0, r3
 8005432:	bd80      	pop	{r7, pc}
 8005434:	40021000 	.word	0x40021000
 8005438:	0800bb3c 	.word	0x0800bb3c

0800543c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005440:	f7ff ffde 	bl	8005400 <HAL_RCC_GetHCLKFreq>
 8005444:	4602      	mov	r2, r0
 8005446:	4b05      	ldr	r3, [pc, #20]	@ (800545c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	0adb      	lsrs	r3, r3, #11
 800544c:	f003 0307 	and.w	r3, r3, #7
 8005450:	4903      	ldr	r1, [pc, #12]	@ (8005460 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005452:	5ccb      	ldrb	r3, [r1, r3]
 8005454:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005458:	4618      	mov	r0, r3
 800545a:	bd80      	pop	{r7, pc}
 800545c:	40021000 	.word	0x40021000
 8005460:	0800bb3c 	.word	0x0800bb3c

08005464 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005464:	b480      	push	{r7}
 8005466:	b085      	sub	sp, #20
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800546c:	4b0a      	ldr	r3, [pc, #40]	@ (8005498 <RCC_Delay+0x34>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a0a      	ldr	r2, [pc, #40]	@ (800549c <RCC_Delay+0x38>)
 8005472:	fba2 2303 	umull	r2, r3, r2, r3
 8005476:	0a5b      	lsrs	r3, r3, #9
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	fb02 f303 	mul.w	r3, r2, r3
 800547e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005480:	bf00      	nop
  }
  while (Delay --);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	1e5a      	subs	r2, r3, #1
 8005486:	60fa      	str	r2, [r7, #12]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d1f9      	bne.n	8005480 <RCC_Delay+0x1c>
}
 800548c:	bf00      	nop
 800548e:	bf00      	nop
 8005490:	3714      	adds	r7, #20
 8005492:	46bd      	mov	sp, r7
 8005494:	bc80      	pop	{r7}
 8005496:	4770      	bx	lr
 8005498:	20000080 	.word	0x20000080
 800549c:	10624dd3 	.word	0x10624dd3

080054a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b086      	sub	sp, #24
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80054a8:	2300      	movs	r3, #0
 80054aa:	613b      	str	r3, [r7, #16]
 80054ac:	2300      	movs	r3, #0
 80054ae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0301 	and.w	r3, r3, #1
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d07d      	beq.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80054bc:	2300      	movs	r3, #0
 80054be:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054c0:	4b4f      	ldr	r3, [pc, #316]	@ (8005600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054c2:	69db      	ldr	r3, [r3, #28]
 80054c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d10d      	bne.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054cc:	4b4c      	ldr	r3, [pc, #304]	@ (8005600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054ce:	69db      	ldr	r3, [r3, #28]
 80054d0:	4a4b      	ldr	r2, [pc, #300]	@ (8005600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054d6:	61d3      	str	r3, [r2, #28]
 80054d8:	4b49      	ldr	r3, [pc, #292]	@ (8005600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054da:	69db      	ldr	r3, [r3, #28]
 80054dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054e0:	60bb      	str	r3, [r7, #8]
 80054e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054e4:	2301      	movs	r3, #1
 80054e6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054e8:	4b46      	ldr	r3, [pc, #280]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d118      	bne.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054f4:	4b43      	ldr	r3, [pc, #268]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a42      	ldr	r2, [pc, #264]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80054fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005500:	f7fd fb88 	bl	8002c14 <HAL_GetTick>
 8005504:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005506:	e008      	b.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005508:	f7fd fb84 	bl	8002c14 <HAL_GetTick>
 800550c:	4602      	mov	r2, r0
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	2b64      	cmp	r3, #100	@ 0x64
 8005514:	d901      	bls.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	e06d      	b.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800551a:	4b3a      	ldr	r3, [pc, #232]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005522:	2b00      	cmp	r3, #0
 8005524:	d0f0      	beq.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005526:	4b36      	ldr	r3, [pc, #216]	@ (8005600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005528:	6a1b      	ldr	r3, [r3, #32]
 800552a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800552e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d02e      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800553e:	68fa      	ldr	r2, [r7, #12]
 8005540:	429a      	cmp	r2, r3
 8005542:	d027      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005544:	4b2e      	ldr	r3, [pc, #184]	@ (8005600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005546:	6a1b      	ldr	r3, [r3, #32]
 8005548:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800554c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800554e:	4b2e      	ldr	r3, [pc, #184]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005550:	2201      	movs	r2, #1
 8005552:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005554:	4b2c      	ldr	r3, [pc, #176]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005556:	2200      	movs	r2, #0
 8005558:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800555a:	4a29      	ldr	r2, [pc, #164]	@ (8005600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f003 0301 	and.w	r3, r3, #1
 8005566:	2b00      	cmp	r3, #0
 8005568:	d014      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800556a:	f7fd fb53 	bl	8002c14 <HAL_GetTick>
 800556e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005570:	e00a      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005572:	f7fd fb4f 	bl	8002c14 <HAL_GetTick>
 8005576:	4602      	mov	r2, r0
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	1ad3      	subs	r3, r2, r3
 800557c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005580:	4293      	cmp	r3, r2
 8005582:	d901      	bls.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005584:	2303      	movs	r3, #3
 8005586:	e036      	b.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005588:	4b1d      	ldr	r3, [pc, #116]	@ (8005600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800558a:	6a1b      	ldr	r3, [r3, #32]
 800558c:	f003 0302 	and.w	r3, r3, #2
 8005590:	2b00      	cmp	r3, #0
 8005592:	d0ee      	beq.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005594:	4b1a      	ldr	r3, [pc, #104]	@ (8005600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005596:	6a1b      	ldr	r3, [r3, #32]
 8005598:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	4917      	ldr	r1, [pc, #92]	@ (8005600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055a2:	4313      	orrs	r3, r2
 80055a4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80055a6:	7dfb      	ldrb	r3, [r7, #23]
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d105      	bne.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055ac:	4b14      	ldr	r3, [pc, #80]	@ (8005600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055ae:	69db      	ldr	r3, [r3, #28]
 80055b0:	4a13      	ldr	r2, [pc, #76]	@ (8005600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055b6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0302 	and.w	r3, r3, #2
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d008      	beq.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80055c4:	4b0e      	ldr	r3, [pc, #56]	@ (8005600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	490b      	ldr	r1, [pc, #44]	@ (8005600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055d2:	4313      	orrs	r3, r2
 80055d4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 0310 	and.w	r3, r3, #16
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d008      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80055e2:	4b07      	ldr	r3, [pc, #28]	@ (8005600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	4904      	ldr	r1, [pc, #16]	@ (8005600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055f0:	4313      	orrs	r3, r2
 80055f2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3718      	adds	r7, #24
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
 80055fe:	bf00      	nop
 8005600:	40021000 	.word	0x40021000
 8005604:	40007000 	.word	0x40007000
 8005608:	42420440 	.word	0x42420440

0800560c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d101      	bne.n	800561e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e076      	b.n	800570c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005622:	2b00      	cmp	r3, #0
 8005624:	d108      	bne.n	8005638 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800562e:	d009      	beq.n	8005644 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	61da      	str	r2, [r3, #28]
 8005636:	e005      	b.n	8005644 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005650:	b2db      	uxtb	r3, r3
 8005652:	2b00      	cmp	r3, #0
 8005654:	d106      	bne.n	8005664 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f7fd f866 	bl	8002730 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2202      	movs	r2, #2
 8005668:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800567a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800568c:	431a      	orrs	r2, r3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005696:	431a      	orrs	r2, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	f003 0302 	and.w	r3, r3, #2
 80056a0:	431a      	orrs	r2, r3
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	695b      	ldr	r3, [r3, #20]
 80056a6:	f003 0301 	and.w	r3, r3, #1
 80056aa:	431a      	orrs	r2, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80056b4:	431a      	orrs	r2, r3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	69db      	ldr	r3, [r3, #28]
 80056ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80056be:	431a      	orrs	r2, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a1b      	ldr	r3, [r3, #32]
 80056c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056c8:	ea42 0103 	orr.w	r1, r2, r3
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056d0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	430a      	orrs	r2, r1
 80056da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	699b      	ldr	r3, [r3, #24]
 80056e0:	0c1a      	lsrs	r2, r3, #16
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f002 0204 	and.w	r2, r2, #4
 80056ea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	69da      	ldr	r2, [r3, #28]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80056fa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2201      	movs	r2, #1
 8005706:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800570a:	2300      	movs	r3, #0
}
 800570c:	4618      	mov	r0, r3
 800570e:	3708      	adds	r7, #8
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b088      	sub	sp, #32
 8005718:	af00      	add	r7, sp, #0
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	603b      	str	r3, [r7, #0]
 8005720:	4613      	mov	r3, r2
 8005722:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005724:	f7fd fa76 	bl	8002c14 <HAL_GetTick>
 8005728:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800572a:	88fb      	ldrh	r3, [r7, #6]
 800572c:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005734:	b2db      	uxtb	r3, r3
 8005736:	2b01      	cmp	r3, #1
 8005738:	d001      	beq.n	800573e <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800573a:	2302      	movs	r3, #2
 800573c:	e12a      	b.n	8005994 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d002      	beq.n	800574a <HAL_SPI_Transmit+0x36>
 8005744:	88fb      	ldrh	r3, [r7, #6]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d101      	bne.n	800574e <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e122      	b.n	8005994 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005754:	2b01      	cmp	r3, #1
 8005756:	d101      	bne.n	800575c <HAL_SPI_Transmit+0x48>
 8005758:	2302      	movs	r3, #2
 800575a:	e11b      	b.n	8005994 <HAL_SPI_Transmit+0x280>
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2203      	movs	r2, #3
 8005768:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2200      	movs	r2, #0
 8005770:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	68ba      	ldr	r2, [r7, #8]
 8005776:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	88fa      	ldrh	r2, [r7, #6]
 800577c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	88fa      	ldrh	r2, [r7, #6]
 8005782:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2200      	movs	r2, #0
 8005788:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2200      	movs	r2, #0
 800579a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2200      	movs	r2, #0
 80057a0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057aa:	d10f      	bne.n	80057cc <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057ba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80057ca:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057d6:	2b40      	cmp	r3, #64	@ 0x40
 80057d8:	d007      	beq.n	80057ea <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80057e8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80057f2:	d152      	bne.n	800589a <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d002      	beq.n	8005802 <HAL_SPI_Transmit+0xee>
 80057fc:	8b7b      	ldrh	r3, [r7, #26]
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d145      	bne.n	800588e <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005806:	881a      	ldrh	r2, [r3, #0]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005812:	1c9a      	adds	r2, r3, #2
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800581c:	b29b      	uxth	r3, r3
 800581e:	3b01      	subs	r3, #1
 8005820:	b29a      	uxth	r2, r3
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005826:	e032      	b.n	800588e <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	f003 0302 	and.w	r3, r3, #2
 8005832:	2b02      	cmp	r3, #2
 8005834:	d112      	bne.n	800585c <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800583a:	881a      	ldrh	r2, [r3, #0]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005846:	1c9a      	adds	r2, r3, #2
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005850:	b29b      	uxth	r3, r3
 8005852:	3b01      	subs	r3, #1
 8005854:	b29a      	uxth	r2, r3
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	86da      	strh	r2, [r3, #54]	@ 0x36
 800585a:	e018      	b.n	800588e <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800585c:	f7fd f9da 	bl	8002c14 <HAL_GetTick>
 8005860:	4602      	mov	r2, r0
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	683a      	ldr	r2, [r7, #0]
 8005868:	429a      	cmp	r2, r3
 800586a:	d803      	bhi.n	8005874 <HAL_SPI_Transmit+0x160>
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005872:	d102      	bne.n	800587a <HAL_SPI_Transmit+0x166>
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d109      	bne.n	800588e <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2201      	movs	r2, #1
 800587e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800588a:	2303      	movs	r3, #3
 800588c:	e082      	b.n	8005994 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005892:	b29b      	uxth	r3, r3
 8005894:	2b00      	cmp	r3, #0
 8005896:	d1c7      	bne.n	8005828 <HAL_SPI_Transmit+0x114>
 8005898:	e053      	b.n	8005942 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d002      	beq.n	80058a8 <HAL_SPI_Transmit+0x194>
 80058a2:	8b7b      	ldrh	r3, [r7, #26]
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d147      	bne.n	8005938 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	330c      	adds	r3, #12
 80058b2:	7812      	ldrb	r2, [r2, #0]
 80058b4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ba:	1c5a      	adds	r2, r3, #1
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	3b01      	subs	r3, #1
 80058c8:	b29a      	uxth	r2, r3
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80058ce:	e033      	b.n	8005938 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	f003 0302 	and.w	r3, r3, #2
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d113      	bne.n	8005906 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	330c      	adds	r3, #12
 80058e8:	7812      	ldrb	r2, [r2, #0]
 80058ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058f0:	1c5a      	adds	r2, r3, #1
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	3b01      	subs	r3, #1
 80058fe:	b29a      	uxth	r2, r3
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005904:	e018      	b.n	8005938 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005906:	f7fd f985 	bl	8002c14 <HAL_GetTick>
 800590a:	4602      	mov	r2, r0
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	1ad3      	subs	r3, r2, r3
 8005910:	683a      	ldr	r2, [r7, #0]
 8005912:	429a      	cmp	r2, r3
 8005914:	d803      	bhi.n	800591e <HAL_SPI_Transmit+0x20a>
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800591c:	d102      	bne.n	8005924 <HAL_SPI_Transmit+0x210>
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d109      	bne.n	8005938 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005934:	2303      	movs	r3, #3
 8005936:	e02d      	b.n	8005994 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800593c:	b29b      	uxth	r3, r3
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1c6      	bne.n	80058d0 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005942:	69fa      	ldr	r2, [r7, #28]
 8005944:	6839      	ldr	r1, [r7, #0]
 8005946:	68f8      	ldr	r0, [r7, #12]
 8005948:	f000 f8b0 	bl	8005aac <SPI_EndRxTxTransaction>
 800594c:	4603      	mov	r3, r0
 800594e:	2b00      	cmp	r3, #0
 8005950:	d002      	beq.n	8005958 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2220      	movs	r2, #32
 8005956:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d10a      	bne.n	8005976 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005960:	2300      	movs	r3, #0
 8005962:	617b      	str	r3, [r7, #20]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	617b      	str	r3, [r7, #20]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	617b      	str	r3, [r7, #20]
 8005974:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2201      	movs	r2, #1
 800597a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2200      	movs	r2, #0
 8005982:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800598a:	2b00      	cmp	r3, #0
 800598c:	d001      	beq.n	8005992 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	e000      	b.n	8005994 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005992:	2300      	movs	r3, #0
  }
}
 8005994:	4618      	mov	r0, r3
 8005996:	3720      	adds	r7, #32
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b088      	sub	sp, #32
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	603b      	str	r3, [r7, #0]
 80059a8:	4613      	mov	r3, r2
 80059aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80059ac:	f7fd f932 	bl	8002c14 <HAL_GetTick>
 80059b0:	4602      	mov	r2, r0
 80059b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059b4:	1a9b      	subs	r3, r3, r2
 80059b6:	683a      	ldr	r2, [r7, #0]
 80059b8:	4413      	add	r3, r2
 80059ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80059bc:	f7fd f92a 	bl	8002c14 <HAL_GetTick>
 80059c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80059c2:	4b39      	ldr	r3, [pc, #228]	@ (8005aa8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	015b      	lsls	r3, r3, #5
 80059c8:	0d1b      	lsrs	r3, r3, #20
 80059ca:	69fa      	ldr	r2, [r7, #28]
 80059cc:	fb02 f303 	mul.w	r3, r2, r3
 80059d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059d2:	e054      	b.n	8005a7e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059da:	d050      	beq.n	8005a7e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80059dc:	f7fd f91a 	bl	8002c14 <HAL_GetTick>
 80059e0:	4602      	mov	r2, r0
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	69fa      	ldr	r2, [r7, #28]
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d902      	bls.n	80059f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d13d      	bne.n	8005a6e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	685a      	ldr	r2, [r3, #4]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005a00:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a0a:	d111      	bne.n	8005a30 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a14:	d004      	beq.n	8005a20 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a1e:	d107      	bne.n	8005a30 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a2e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a38:	d10f      	bne.n	8005a5a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005a48:	601a      	str	r2, [r3, #0]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005a58:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2200      	movs	r2, #0
 8005a66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	e017      	b.n	8005a9e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d101      	bne.n	8005a78 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005a74:	2300      	movs	r3, #0
 8005a76:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	689a      	ldr	r2, [r3, #8]
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	4013      	ands	r3, r2
 8005a88:	68ba      	ldr	r2, [r7, #8]
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	bf0c      	ite	eq
 8005a8e:	2301      	moveq	r3, #1
 8005a90:	2300      	movne	r3, #0
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	461a      	mov	r2, r3
 8005a96:	79fb      	ldrb	r3, [r7, #7]
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d19b      	bne.n	80059d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3720      	adds	r7, #32
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	20000080 	.word	0x20000080

08005aac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b086      	sub	sp, #24
 8005ab0:	af02      	add	r7, sp, #8
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	9300      	str	r3, [sp, #0]
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	2102      	movs	r1, #2
 8005ac2:	68f8      	ldr	r0, [r7, #12]
 8005ac4:	f7ff ff6a 	bl	800599c <SPI_WaitFlagStateUntilTimeout>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d007      	beq.n	8005ade <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ad2:	f043 0220 	orr.w	r2, r3, #32
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005ada:	2303      	movs	r3, #3
 8005adc:	e013      	b.n	8005b06 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	9300      	str	r3, [sp, #0]
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	2180      	movs	r1, #128	@ 0x80
 8005ae8:	68f8      	ldr	r0, [r7, #12]
 8005aea:	f7ff ff57 	bl	800599c <SPI_WaitFlagStateUntilTimeout>
 8005aee:	4603      	mov	r3, r0
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d007      	beq.n	8005b04 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005af8:	f043 0220 	orr.w	r2, r3, #32
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005b00:	2303      	movs	r3, #3
 8005b02:	e000      	b.n	8005b06 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3710      	adds	r7, #16
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}

08005b0e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b0e:	b580      	push	{r7, lr}
 8005b10:	b082      	sub	sp, #8
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d101      	bne.n	8005b20 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e042      	b.n	8005ba6 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d106      	bne.n	8005b3a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f7fc ff9b 	bl	8002a70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2224      	movs	r2, #36	@ 0x24
 8005b3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68da      	ldr	r2, [r3, #12]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005b50:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 fd00 	bl	8006558 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	691a      	ldr	r2, [r3, #16]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005b66:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	695a      	ldr	r2, [r3, #20]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005b76:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	68da      	ldr	r2, [r3, #12]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005b86:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2220      	movs	r2, #32
 8005b92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2220      	movs	r2, #32
 8005b9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3708      	adds	r7, #8
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}

08005bae <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005bae:	b480      	push	{r7}
 8005bb0:	b085      	sub	sp, #20
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	60f8      	str	r0, [r7, #12]
 8005bb6:	60b9      	str	r1, [r7, #8]
 8005bb8:	4613      	mov	r3, r2
 8005bba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	2b20      	cmp	r3, #32
 8005bc6:	d121      	bne.n	8005c0c <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d002      	beq.n	8005bd4 <HAL_UART_Transmit_IT+0x26>
 8005bce:	88fb      	ldrh	r3, [r7, #6]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d101      	bne.n	8005bd8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e01a      	b.n	8005c0e <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	68ba      	ldr	r2, [r7, #8]
 8005bdc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	88fa      	ldrh	r2, [r7, #6]
 8005be2:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	88fa      	ldrh	r2, [r7, #6]
 8005be8:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2200      	movs	r2, #0
 8005bee:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2221      	movs	r2, #33	@ 0x21
 8005bf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	68da      	ldr	r2, [r3, #12]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005c06:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	e000      	b.n	8005c0e <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8005c0c:	2302      	movs	r3, #2
  }
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3714      	adds	r7, #20
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bc80      	pop	{r7}
 8005c16:	4770      	bx	lr

08005c18 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	4613      	mov	r3, r2
 8005c24:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	2b20      	cmp	r3, #32
 8005c30:	d112      	bne.n	8005c58 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d002      	beq.n	8005c3e <HAL_UART_Receive_IT+0x26>
 8005c38:	88fb      	ldrh	r3, [r7, #6]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d101      	bne.n	8005c42 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e00b      	b.n	8005c5a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2200      	movs	r2, #0
 8005c46:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005c48:	88fb      	ldrh	r3, [r7, #6]
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	68b9      	ldr	r1, [r7, #8]
 8005c4e:	68f8      	ldr	r0, [r7, #12]
 8005c50:	f000 faae 	bl	80061b0 <UART_Start_Receive_IT>
 8005c54:	4603      	mov	r3, r0
 8005c56:	e000      	b.n	8005c5a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005c58:	2302      	movs	r3, #2
  }
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3710      	adds	r7, #16
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
	...

08005c64 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b0ba      	sub	sp, #232	@ 0xe8
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	695b      	ldr	r3, [r3, #20]
 8005c86:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005c90:	2300      	movs	r3, #0
 8005c92:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005c96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c9a:	f003 030f 	and.w	r3, r3, #15
 8005c9e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005ca2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d10f      	bne.n	8005cca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005caa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cae:	f003 0320 	and.w	r3, r3, #32
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d009      	beq.n	8005cca <HAL_UART_IRQHandler+0x66>
 8005cb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cba:	f003 0320 	and.w	r3, r3, #32
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d003      	beq.n	8005cca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 fb8a 	bl	80063dc <UART_Receive_IT>
      return;
 8005cc8:	e25b      	b.n	8006182 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005cca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	f000 80de 	beq.w	8005e90 <HAL_UART_IRQHandler+0x22c>
 8005cd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005cd8:	f003 0301 	and.w	r3, r3, #1
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d106      	bne.n	8005cee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005ce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ce4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	f000 80d1 	beq.w	8005e90 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cf2:	f003 0301 	and.w	r3, r3, #1
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d00b      	beq.n	8005d12 <HAL_UART_IRQHandler+0xae>
 8005cfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d005      	beq.n	8005d12 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d0a:	f043 0201 	orr.w	r2, r3, #1
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d16:	f003 0304 	and.w	r3, r3, #4
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00b      	beq.n	8005d36 <HAL_UART_IRQHandler+0xd2>
 8005d1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d22:	f003 0301 	and.w	r3, r3, #1
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d005      	beq.n	8005d36 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d2e:	f043 0202 	orr.w	r2, r3, #2
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d3a:	f003 0302 	and.w	r3, r3, #2
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d00b      	beq.n	8005d5a <HAL_UART_IRQHandler+0xf6>
 8005d42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d46:	f003 0301 	and.w	r3, r3, #1
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d005      	beq.n	8005d5a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d52:	f043 0204 	orr.w	r2, r3, #4
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d5e:	f003 0308 	and.w	r3, r3, #8
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d011      	beq.n	8005d8a <HAL_UART_IRQHandler+0x126>
 8005d66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d6a:	f003 0320 	and.w	r3, r3, #32
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d105      	bne.n	8005d7e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005d72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d76:	f003 0301 	and.w	r3, r3, #1
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d005      	beq.n	8005d8a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d82:	f043 0208 	orr.w	r2, r3, #8
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	f000 81f2 	beq.w	8006178 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d98:	f003 0320 	and.w	r3, r3, #32
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d008      	beq.n	8005db2 <HAL_UART_IRQHandler+0x14e>
 8005da0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005da4:	f003 0320 	and.w	r3, r3, #32
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d002      	beq.n	8005db2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f000 fb15 	bl	80063dc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	695b      	ldr	r3, [r3, #20]
 8005db8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	bf14      	ite	ne
 8005dc0:	2301      	movne	r3, #1
 8005dc2:	2300      	moveq	r3, #0
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dce:	f003 0308 	and.w	r3, r3, #8
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d103      	bne.n	8005dde <HAL_UART_IRQHandler+0x17a>
 8005dd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d04f      	beq.n	8005e7e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 fa1f 	bl	8006222 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	695b      	ldr	r3, [r3, #20]
 8005dea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d041      	beq.n	8005e76 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	3314      	adds	r3, #20
 8005df8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005e00:	e853 3f00 	ldrex	r3, [r3]
 8005e04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005e08:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005e0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	3314      	adds	r3, #20
 8005e1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005e1e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005e22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005e2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005e2e:	e841 2300 	strex	r3, r2, [r1]
 8005e32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005e36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d1d9      	bne.n	8005df2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d013      	beq.n	8005e6e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e4a:	4a7e      	ldr	r2, [pc, #504]	@ (8006044 <HAL_UART_IRQHandler+0x3e0>)
 8005e4c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e52:	4618      	mov	r0, r3
 8005e54:	f7fd fc52 	bl	80036fc <HAL_DMA_Abort_IT>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d016      	beq.n	8005e8c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005e68:	4610      	mov	r0, r2
 8005e6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e6c:	e00e      	b.n	8005e8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 f98a 	bl	8006188 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e74:	e00a      	b.n	8005e8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 f986 	bl	8006188 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e7c:	e006      	b.n	8005e8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 f982 	bl	8006188 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005e8a:	e175      	b.n	8006178 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e8c:	bf00      	nop
    return;
 8005e8e:	e173      	b.n	8006178 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	f040 814f 	bne.w	8006138 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e9e:	f003 0310 	and.w	r3, r3, #16
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	f000 8148 	beq.w	8006138 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005ea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005eac:	f003 0310 	and.w	r3, r3, #16
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	f000 8141 	beq.w	8006138 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	60bb      	str	r3, [r7, #8]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	60bb      	str	r3, [r7, #8]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	60bb      	str	r3, [r7, #8]
 8005eca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	695b      	ldr	r3, [r3, #20]
 8005ed2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	f000 80b6 	beq.w	8006048 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005ee8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f000 8145 	beq.w	800617c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005ef6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005efa:	429a      	cmp	r2, r3
 8005efc:	f080 813e 	bcs.w	800617c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005f06:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f0c:	699b      	ldr	r3, [r3, #24]
 8005f0e:	2b20      	cmp	r3, #32
 8005f10:	f000 8088 	beq.w	8006024 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	330c      	adds	r3, #12
 8005f1a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005f22:	e853 3f00 	ldrex	r3, [r3]
 8005f26:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005f2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005f2e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f32:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	330c      	adds	r3, #12
 8005f3c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005f40:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005f44:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f48:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005f4c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005f50:	e841 2300 	strex	r3, r2, [r1]
 8005f54:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005f58:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d1d9      	bne.n	8005f14 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	3314      	adds	r3, #20
 8005f66:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f68:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005f6a:	e853 3f00 	ldrex	r3, [r3]
 8005f6e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005f70:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005f72:	f023 0301 	bic.w	r3, r3, #1
 8005f76:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	3314      	adds	r3, #20
 8005f80:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005f84:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005f88:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f8a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005f8c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005f90:	e841 2300 	strex	r3, r2, [r1]
 8005f94:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005f96:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d1e1      	bne.n	8005f60 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	3314      	adds	r3, #20
 8005fa2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005fa6:	e853 3f00 	ldrex	r3, [r3]
 8005faa:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005fac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005fae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fb2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	3314      	adds	r3, #20
 8005fbc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005fc0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005fc2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005fc6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005fc8:	e841 2300 	strex	r3, r2, [r1]
 8005fcc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005fce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d1e3      	bne.n	8005f9c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2220      	movs	r2, #32
 8005fd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	330c      	adds	r3, #12
 8005fe8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005fec:	e853 3f00 	ldrex	r3, [r3]
 8005ff0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005ff2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ff4:	f023 0310 	bic.w	r3, r3, #16
 8005ff8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	330c      	adds	r3, #12
 8006002:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006006:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006008:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800600c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800600e:	e841 2300 	strex	r3, r2, [r1]
 8006012:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006014:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006016:	2b00      	cmp	r3, #0
 8006018:	d1e3      	bne.n	8005fe2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800601e:	4618      	mov	r0, r3
 8006020:	f7fd fb31 	bl	8003686 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2202      	movs	r2, #2
 8006028:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006032:	b29b      	uxth	r3, r3
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	b29b      	uxth	r3, r3
 8006038:	4619      	mov	r1, r3
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 f8ad 	bl	800619a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006040:	e09c      	b.n	800617c <HAL_UART_IRQHandler+0x518>
 8006042:	bf00      	nop
 8006044:	080062e7 	.word	0x080062e7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006050:	b29b      	uxth	r3, r3
 8006052:	1ad3      	subs	r3, r2, r3
 8006054:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800605c:	b29b      	uxth	r3, r3
 800605e:	2b00      	cmp	r3, #0
 8006060:	f000 808e 	beq.w	8006180 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006064:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006068:	2b00      	cmp	r3, #0
 800606a:	f000 8089 	beq.w	8006180 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	330c      	adds	r3, #12
 8006074:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006078:	e853 3f00 	ldrex	r3, [r3]
 800607c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800607e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006080:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006084:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	330c      	adds	r3, #12
 800608e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006092:	647a      	str	r2, [r7, #68]	@ 0x44
 8006094:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006096:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006098:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800609a:	e841 2300 	strex	r3, r2, [r1]
 800609e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80060a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d1e3      	bne.n	800606e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	3314      	adds	r3, #20
 80060ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b0:	e853 3f00 	ldrex	r3, [r3]
 80060b4:	623b      	str	r3, [r7, #32]
   return(result);
 80060b6:	6a3b      	ldr	r3, [r7, #32]
 80060b8:	f023 0301 	bic.w	r3, r3, #1
 80060bc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	3314      	adds	r3, #20
 80060c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80060ca:	633a      	str	r2, [r7, #48]	@ 0x30
 80060cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80060d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060d2:	e841 2300 	strex	r3, r2, [r1]
 80060d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80060d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d1e3      	bne.n	80060a6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2220      	movs	r2, #32
 80060e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	330c      	adds	r3, #12
 80060f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	e853 3f00 	ldrex	r3, [r3]
 80060fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f023 0310 	bic.w	r3, r3, #16
 8006102:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	330c      	adds	r3, #12
 800610c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006110:	61fa      	str	r2, [r7, #28]
 8006112:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006114:	69b9      	ldr	r1, [r7, #24]
 8006116:	69fa      	ldr	r2, [r7, #28]
 8006118:	e841 2300 	strex	r3, r2, [r1]
 800611c:	617b      	str	r3, [r7, #20]
   return(result);
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d1e3      	bne.n	80060ec <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2202      	movs	r2, #2
 8006128:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800612a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800612e:	4619      	mov	r1, r3
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 f832 	bl	800619a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006136:	e023      	b.n	8006180 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800613c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006140:	2b00      	cmp	r3, #0
 8006142:	d009      	beq.n	8006158 <HAL_UART_IRQHandler+0x4f4>
 8006144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006148:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800614c:	2b00      	cmp	r3, #0
 800614e:	d003      	beq.n	8006158 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f000 f8dc 	bl	800630e <UART_Transmit_IT>
    return;
 8006156:	e014      	b.n	8006182 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800615c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006160:	2b00      	cmp	r3, #0
 8006162:	d00e      	beq.n	8006182 <HAL_UART_IRQHandler+0x51e>
 8006164:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006168:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800616c:	2b00      	cmp	r3, #0
 800616e:	d008      	beq.n	8006182 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f000 f91b 	bl	80063ac <UART_EndTransmit_IT>
    return;
 8006176:	e004      	b.n	8006182 <HAL_UART_IRQHandler+0x51e>
    return;
 8006178:	bf00      	nop
 800617a:	e002      	b.n	8006182 <HAL_UART_IRQHandler+0x51e>
      return;
 800617c:	bf00      	nop
 800617e:	e000      	b.n	8006182 <HAL_UART_IRQHandler+0x51e>
      return;
 8006180:	bf00      	nop
  }
}
 8006182:	37e8      	adds	r7, #232	@ 0xe8
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006188:	b480      	push	{r7}
 800618a:	b083      	sub	sp, #12
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006190:	bf00      	nop
 8006192:	370c      	adds	r7, #12
 8006194:	46bd      	mov	sp, r7
 8006196:	bc80      	pop	{r7}
 8006198:	4770      	bx	lr

0800619a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800619a:	b480      	push	{r7}
 800619c:	b083      	sub	sp, #12
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
 80061a2:	460b      	mov	r3, r1
 80061a4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80061a6:	bf00      	nop
 80061a8:	370c      	adds	r7, #12
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bc80      	pop	{r7}
 80061ae:	4770      	bx	lr

080061b0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b085      	sub	sp, #20
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	60b9      	str	r1, [r7, #8]
 80061ba:	4613      	mov	r3, r2
 80061bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	68ba      	ldr	r2, [r7, #8]
 80061c2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	88fa      	ldrh	r2, [r7, #6]
 80061c8:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	88fa      	ldrh	r2, [r7, #6]
 80061ce:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2200      	movs	r2, #0
 80061d4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2222      	movs	r2, #34	@ 0x22
 80061da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d007      	beq.n	80061f6 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	68da      	ldr	r2, [r3, #12]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80061f4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	695a      	ldr	r2, [r3, #20]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f042 0201 	orr.w	r2, r2, #1
 8006204:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	68da      	ldr	r2, [r3, #12]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f042 0220 	orr.w	r2, r2, #32
 8006214:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006216:	2300      	movs	r3, #0
}
 8006218:	4618      	mov	r0, r3
 800621a:	3714      	adds	r7, #20
 800621c:	46bd      	mov	sp, r7
 800621e:	bc80      	pop	{r7}
 8006220:	4770      	bx	lr

08006222 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006222:	b480      	push	{r7}
 8006224:	b095      	sub	sp, #84	@ 0x54
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	330c      	adds	r3, #12
 8006230:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006232:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006234:	e853 3f00 	ldrex	r3, [r3]
 8006238:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800623a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800623c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006240:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	330c      	adds	r3, #12
 8006248:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800624a:	643a      	str	r2, [r7, #64]	@ 0x40
 800624c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800624e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006250:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006252:	e841 2300 	strex	r3, r2, [r1]
 8006256:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800625a:	2b00      	cmp	r3, #0
 800625c:	d1e5      	bne.n	800622a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	3314      	adds	r3, #20
 8006264:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006266:	6a3b      	ldr	r3, [r7, #32]
 8006268:	e853 3f00 	ldrex	r3, [r3]
 800626c:	61fb      	str	r3, [r7, #28]
   return(result);
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	f023 0301 	bic.w	r3, r3, #1
 8006274:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	3314      	adds	r3, #20
 800627c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800627e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006280:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006282:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006284:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006286:	e841 2300 	strex	r3, r2, [r1]
 800628a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800628c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800628e:	2b00      	cmp	r3, #0
 8006290:	d1e5      	bne.n	800625e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006296:	2b01      	cmp	r3, #1
 8006298:	d119      	bne.n	80062ce <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	330c      	adds	r3, #12
 80062a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	e853 3f00 	ldrex	r3, [r3]
 80062a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	f023 0310 	bic.w	r3, r3, #16
 80062b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	330c      	adds	r3, #12
 80062b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80062ba:	61ba      	str	r2, [r7, #24]
 80062bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062be:	6979      	ldr	r1, [r7, #20]
 80062c0:	69ba      	ldr	r2, [r7, #24]
 80062c2:	e841 2300 	strex	r3, r2, [r1]
 80062c6:	613b      	str	r3, [r7, #16]
   return(result);
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d1e5      	bne.n	800629a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2220      	movs	r2, #32
 80062d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80062dc:	bf00      	nop
 80062de:	3754      	adds	r7, #84	@ 0x54
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bc80      	pop	{r7}
 80062e4:	4770      	bx	lr

080062e6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80062e6:	b580      	push	{r7, lr}
 80062e8:	b084      	sub	sp, #16
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2200      	movs	r2, #0
 80062f8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2200      	movs	r2, #0
 80062fe:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006300:	68f8      	ldr	r0, [r7, #12]
 8006302:	f7ff ff41 	bl	8006188 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006306:	bf00      	nop
 8006308:	3710      	adds	r7, #16
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}

0800630e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800630e:	b480      	push	{r7}
 8006310:	b085      	sub	sp, #20
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800631c:	b2db      	uxtb	r3, r3
 800631e:	2b21      	cmp	r3, #33	@ 0x21
 8006320:	d13e      	bne.n	80063a0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800632a:	d114      	bne.n	8006356 <UART_Transmit_IT+0x48>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	691b      	ldr	r3, [r3, #16]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d110      	bne.n	8006356 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6a1b      	ldr	r3, [r3, #32]
 8006338:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	881b      	ldrh	r3, [r3, #0]
 800633e:	461a      	mov	r2, r3
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006348:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6a1b      	ldr	r3, [r3, #32]
 800634e:	1c9a      	adds	r2, r3, #2
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	621a      	str	r2, [r3, #32]
 8006354:	e008      	b.n	8006368 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a1b      	ldr	r3, [r3, #32]
 800635a:	1c59      	adds	r1, r3, #1
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	6211      	str	r1, [r2, #32]
 8006360:	781a      	ldrb	r2, [r3, #0]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800636c:	b29b      	uxth	r3, r3
 800636e:	3b01      	subs	r3, #1
 8006370:	b29b      	uxth	r3, r3
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	4619      	mov	r1, r3
 8006376:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006378:	2b00      	cmp	r3, #0
 800637a:	d10f      	bne.n	800639c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	68da      	ldr	r2, [r3, #12]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800638a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68da      	ldr	r2, [r3, #12]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800639a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800639c:	2300      	movs	r3, #0
 800639e:	e000      	b.n	80063a2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80063a0:	2302      	movs	r3, #2
  }
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3714      	adds	r7, #20
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bc80      	pop	{r7}
 80063aa:	4770      	bx	lr

080063ac <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b082      	sub	sp, #8
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	68da      	ldr	r2, [r3, #12]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80063c2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2220      	movs	r2, #32
 80063c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f7fb ff31 	bl	8002234 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3708      	adds	r7, #8
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b08c      	sub	sp, #48	@ 0x30
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	2b22      	cmp	r3, #34	@ 0x22
 80063ee:	f040 80ae 	bne.w	800654e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063fa:	d117      	bne.n	800642c <UART_Receive_IT+0x50>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	691b      	ldr	r3, [r3, #16]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d113      	bne.n	800642c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006404:	2300      	movs	r3, #0
 8006406:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800640c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	b29b      	uxth	r3, r3
 8006416:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800641a:	b29a      	uxth	r2, r3
 800641c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800641e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006424:	1c9a      	adds	r2, r3, #2
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	629a      	str	r2, [r3, #40]	@ 0x28
 800642a:	e026      	b.n	800647a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006430:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006432:	2300      	movs	r3, #0
 8006434:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800643e:	d007      	beq.n	8006450 <UART_Receive_IT+0x74>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d10a      	bne.n	800645e <UART_Receive_IT+0x82>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	691b      	ldr	r3, [r3, #16]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d106      	bne.n	800645e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	b2da      	uxtb	r2, r3
 8006458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800645a:	701a      	strb	r2, [r3, #0]
 800645c:	e008      	b.n	8006470 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	b2db      	uxtb	r3, r3
 8006466:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800646a:	b2da      	uxtb	r2, r3
 800646c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800646e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006474:	1c5a      	adds	r2, r3, #1
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800647e:	b29b      	uxth	r3, r3
 8006480:	3b01      	subs	r3, #1
 8006482:	b29b      	uxth	r3, r3
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	4619      	mov	r1, r3
 8006488:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800648a:	2b00      	cmp	r3, #0
 800648c:	d15d      	bne.n	800654a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	68da      	ldr	r2, [r3, #12]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f022 0220 	bic.w	r2, r2, #32
 800649c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	68da      	ldr	r2, [r3, #12]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80064ac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	695a      	ldr	r2, [r3, #20]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f022 0201 	bic.w	r2, r2, #1
 80064bc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2220      	movs	r2, #32
 80064c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d135      	bne.n	8006540 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	330c      	adds	r3, #12
 80064e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	e853 3f00 	ldrex	r3, [r3]
 80064e8:	613b      	str	r3, [r7, #16]
   return(result);
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	f023 0310 	bic.w	r3, r3, #16
 80064f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	330c      	adds	r3, #12
 80064f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064fa:	623a      	str	r2, [r7, #32]
 80064fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064fe:	69f9      	ldr	r1, [r7, #28]
 8006500:	6a3a      	ldr	r2, [r7, #32]
 8006502:	e841 2300 	strex	r3, r2, [r1]
 8006506:	61bb      	str	r3, [r7, #24]
   return(result);
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d1e5      	bne.n	80064da <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f003 0310 	and.w	r3, r3, #16
 8006518:	2b10      	cmp	r3, #16
 800651a:	d10a      	bne.n	8006532 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800651c:	2300      	movs	r3, #0
 800651e:	60fb      	str	r3, [r7, #12]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	60fb      	str	r3, [r7, #12]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	60fb      	str	r3, [r7, #12]
 8006530:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006536:	4619      	mov	r1, r3
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f7ff fe2e 	bl	800619a <HAL_UARTEx_RxEventCallback>
 800653e:	e002      	b.n	8006546 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f7fb fe0f 	bl	8002164 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006546:	2300      	movs	r3, #0
 8006548:	e002      	b.n	8006550 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800654a:	2300      	movs	r3, #0
 800654c:	e000      	b.n	8006550 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800654e:	2302      	movs	r3, #2
  }
}
 8006550:	4618      	mov	r0, r3
 8006552:	3730      	adds	r7, #48	@ 0x30
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}

08006558 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	68da      	ldr	r2, [r3, #12]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	430a      	orrs	r2, r1
 8006574:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	689a      	ldr	r2, [r3, #8]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	431a      	orrs	r2, r3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	695b      	ldr	r3, [r3, #20]
 8006584:	4313      	orrs	r3, r2
 8006586:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8006592:	f023 030c 	bic.w	r3, r3, #12
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	6812      	ldr	r2, [r2, #0]
 800659a:	68b9      	ldr	r1, [r7, #8]
 800659c:	430b      	orrs	r3, r1
 800659e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	695b      	ldr	r3, [r3, #20]
 80065a6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	699a      	ldr	r2, [r3, #24]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	430a      	orrs	r2, r1
 80065b4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a2c      	ldr	r2, [pc, #176]	@ (800666c <UART_SetConfig+0x114>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d103      	bne.n	80065c8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80065c0:	f7fe ff3c 	bl	800543c <HAL_RCC_GetPCLK2Freq>
 80065c4:	60f8      	str	r0, [r7, #12]
 80065c6:	e002      	b.n	80065ce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80065c8:	f7fe ff24 	bl	8005414 <HAL_RCC_GetPCLK1Freq>
 80065cc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80065ce:	68fa      	ldr	r2, [r7, #12]
 80065d0:	4613      	mov	r3, r2
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	4413      	add	r3, r2
 80065d6:	009a      	lsls	r2, r3, #2
 80065d8:	441a      	add	r2, r3
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80065e4:	4a22      	ldr	r2, [pc, #136]	@ (8006670 <UART_SetConfig+0x118>)
 80065e6:	fba2 2303 	umull	r2, r3, r2, r3
 80065ea:	095b      	lsrs	r3, r3, #5
 80065ec:	0119      	lsls	r1, r3, #4
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	4613      	mov	r3, r2
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	4413      	add	r3, r2
 80065f6:	009a      	lsls	r2, r3, #2
 80065f8:	441a      	add	r2, r3
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	009b      	lsls	r3, r3, #2
 8006600:	fbb2 f2f3 	udiv	r2, r2, r3
 8006604:	4b1a      	ldr	r3, [pc, #104]	@ (8006670 <UART_SetConfig+0x118>)
 8006606:	fba3 0302 	umull	r0, r3, r3, r2
 800660a:	095b      	lsrs	r3, r3, #5
 800660c:	2064      	movs	r0, #100	@ 0x64
 800660e:	fb00 f303 	mul.w	r3, r0, r3
 8006612:	1ad3      	subs	r3, r2, r3
 8006614:	011b      	lsls	r3, r3, #4
 8006616:	3332      	adds	r3, #50	@ 0x32
 8006618:	4a15      	ldr	r2, [pc, #84]	@ (8006670 <UART_SetConfig+0x118>)
 800661a:	fba2 2303 	umull	r2, r3, r2, r3
 800661e:	095b      	lsrs	r3, r3, #5
 8006620:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006624:	4419      	add	r1, r3
 8006626:	68fa      	ldr	r2, [r7, #12]
 8006628:	4613      	mov	r3, r2
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	4413      	add	r3, r2
 800662e:	009a      	lsls	r2, r3, #2
 8006630:	441a      	add	r2, r3
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	fbb2 f2f3 	udiv	r2, r2, r3
 800663c:	4b0c      	ldr	r3, [pc, #48]	@ (8006670 <UART_SetConfig+0x118>)
 800663e:	fba3 0302 	umull	r0, r3, r3, r2
 8006642:	095b      	lsrs	r3, r3, #5
 8006644:	2064      	movs	r0, #100	@ 0x64
 8006646:	fb00 f303 	mul.w	r3, r0, r3
 800664a:	1ad3      	subs	r3, r2, r3
 800664c:	011b      	lsls	r3, r3, #4
 800664e:	3332      	adds	r3, #50	@ 0x32
 8006650:	4a07      	ldr	r2, [pc, #28]	@ (8006670 <UART_SetConfig+0x118>)
 8006652:	fba2 2303 	umull	r2, r3, r2, r3
 8006656:	095b      	lsrs	r3, r3, #5
 8006658:	f003 020f 	and.w	r2, r3, #15
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	440a      	add	r2, r1
 8006662:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006664:	bf00      	nop
 8006666:	3710      	adds	r7, #16
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}
 800666c:	40013800 	.word	0x40013800
 8006670:	51eb851f 	.word	0x51eb851f

08006674 <DEV_SPI_WriteByte>:
#include "DEV_Config.h"
#include "stm32f1xx_hal_spi.h"

extern SPI_HandleTypeDef hspi1;
void DEV_SPI_WriteByte(UBYTE value)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b082      	sub	sp, #8
 8006678:	af00      	add	r7, sp, #0
 800667a:	4603      	mov	r3, r0
 800667c:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&hspi1, &value, 1, 1000);
 800667e:	1df9      	adds	r1, r7, #7
 8006680:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006684:	2201      	movs	r2, #1
 8006686:	4803      	ldr	r0, [pc, #12]	@ (8006694 <DEV_SPI_WriteByte+0x20>)
 8006688:	f7ff f844 	bl	8005714 <HAL_SPI_Transmit>
}
 800668c:	bf00      	nop
 800668e:	3708      	adds	r7, #8
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}
 8006694:	200004b0 	.word	0x200004b0

08006698 <EPD_2IN9_V2_Reset>:
/******************************************************************************
function :	Software reset
parameter:
******************************************************************************/
static void EPD_2IN9_V2_Reset(void)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_RST_PIN, 1);
 800669c:	2201      	movs	r2, #1
 800669e:	2102      	movs	r1, #2
 80066a0:	480b      	ldr	r0, [pc, #44]	@ (80066d0 <EPD_2IN9_V2_Reset+0x38>)
 80066a2:	f7fd fa3e 	bl	8003b22 <HAL_GPIO_WritePin>
    DEV_Delay_ms(10);
 80066a6:	200a      	movs	r0, #10
 80066a8:	f7fc fabe 	bl	8002c28 <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 0);
 80066ac:	2200      	movs	r2, #0
 80066ae:	2102      	movs	r1, #2
 80066b0:	4807      	ldr	r0, [pc, #28]	@ (80066d0 <EPD_2IN9_V2_Reset+0x38>)
 80066b2:	f7fd fa36 	bl	8003b22 <HAL_GPIO_WritePin>
    DEV_Delay_ms(2);
 80066b6:	2002      	movs	r0, #2
 80066b8:	f7fc fab6 	bl	8002c28 <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 80066bc:	2201      	movs	r2, #1
 80066be:	2102      	movs	r1, #2
 80066c0:	4803      	ldr	r0, [pc, #12]	@ (80066d0 <EPD_2IN9_V2_Reset+0x38>)
 80066c2:	f7fd fa2e 	bl	8003b22 <HAL_GPIO_WritePin>
    DEV_Delay_ms(10);
 80066c6:	200a      	movs	r0, #10
 80066c8:	f7fc faae 	bl	8002c28 <HAL_Delay>
}
 80066cc:	bf00      	nop
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	40010800 	.word	0x40010800

080066d4 <EPD_2IN9_V2_SendCommand>:
function :	send command
parameter:
     Reg : Command register
******************************************************************************/
static void EPD_2IN9_V2_SendCommand(UBYTE Reg)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b082      	sub	sp, #8
 80066d8:	af00      	add	r7, sp, #0
 80066da:	4603      	mov	r3, r0
 80066dc:	71fb      	strb	r3, [r7, #7]
    DEV_Digital_Write(EPD_DC_PIN, 0);
 80066de:	2200      	movs	r2, #0
 80066e0:	2104      	movs	r1, #4
 80066e2:	480a      	ldr	r0, [pc, #40]	@ (800670c <EPD_2IN9_V2_SendCommand+0x38>)
 80066e4:	f7fd fa1d 	bl	8003b22 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 80066e8:	2200      	movs	r2, #0
 80066ea:	2108      	movs	r1, #8
 80066ec:	4807      	ldr	r0, [pc, #28]	@ (800670c <EPD_2IN9_V2_SendCommand+0x38>)
 80066ee:	f7fd fa18 	bl	8003b22 <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Reg);
 80066f2:	79fb      	ldrb	r3, [r7, #7]
 80066f4:	4618      	mov	r0, r3
 80066f6:	f7ff ffbd 	bl	8006674 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 80066fa:	2201      	movs	r2, #1
 80066fc:	2108      	movs	r1, #8
 80066fe:	4803      	ldr	r0, [pc, #12]	@ (800670c <EPD_2IN9_V2_SendCommand+0x38>)
 8006700:	f7fd fa0f 	bl	8003b22 <HAL_GPIO_WritePin>
}
 8006704:	bf00      	nop
 8006706:	3708      	adds	r7, #8
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}
 800670c:	40010800 	.word	0x40010800

08006710 <EPD_2IN9_V2_SendData>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void EPD_2IN9_V2_SendData(UBYTE Data)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b082      	sub	sp, #8
 8006714:	af00      	add	r7, sp, #0
 8006716:	4603      	mov	r3, r0
 8006718:	71fb      	strb	r3, [r7, #7]
    DEV_Digital_Write(EPD_DC_PIN, 1);
 800671a:	2201      	movs	r2, #1
 800671c:	2104      	movs	r1, #4
 800671e:	480a      	ldr	r0, [pc, #40]	@ (8006748 <EPD_2IN9_V2_SendData+0x38>)
 8006720:	f7fd f9ff 	bl	8003b22 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8006724:	2200      	movs	r2, #0
 8006726:	2108      	movs	r1, #8
 8006728:	4807      	ldr	r0, [pc, #28]	@ (8006748 <EPD_2IN9_V2_SendData+0x38>)
 800672a:	f7fd f9fa 	bl	8003b22 <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Data);
 800672e:	79fb      	ldrb	r3, [r7, #7]
 8006730:	4618      	mov	r0, r3
 8006732:	f7ff ff9f 	bl	8006674 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8006736:	2201      	movs	r2, #1
 8006738:	2108      	movs	r1, #8
 800673a:	4803      	ldr	r0, [pc, #12]	@ (8006748 <EPD_2IN9_V2_SendData+0x38>)
 800673c:	f7fd f9f1 	bl	8003b22 <HAL_GPIO_WritePin>
}
 8006740:	bf00      	nop
 8006742:	3708      	adds	r7, #8
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}
 8006748:	40010800 	.word	0x40010800

0800674c <EPD_2IN9_V2_ReadBusy>:
/******************************************************************************
function :	Wait until the busy_pin goes LOW
parameter:
******************************************************************************/
void EPD_2IN9_V2_ReadBusy(void)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	af00      	add	r7, sp, #0
    Debug("e-Paper busy\r\n");
 8006750:	480b      	ldr	r0, [pc, #44]	@ (8006780 <EPD_2IN9_V2_ReadBusy+0x34>)
 8006752:	f004 f9c1 	bl	800aad8 <puts>
	while(1)
	{	 //=1 BUSY
		if(DEV_Digital_Read(EPD_BUSY_PIN)==0) 
 8006756:	2101      	movs	r1, #1
 8006758:	480a      	ldr	r0, [pc, #40]	@ (8006784 <EPD_2IN9_V2_ReadBusy+0x38>)
 800675a:	f7fd f9cb 	bl	8003af4 <HAL_GPIO_ReadPin>
 800675e:	4603      	mov	r3, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d003      	beq.n	800676c <EPD_2IN9_V2_ReadBusy+0x20>
			break;
		DEV_Delay_ms(50);
 8006764:	2032      	movs	r0, #50	@ 0x32
 8006766:	f7fc fa5f 	bl	8002c28 <HAL_Delay>
		if(DEV_Digital_Read(EPD_BUSY_PIN)==0) 
 800676a:	e7f4      	b.n	8006756 <EPD_2IN9_V2_ReadBusy+0xa>
			break;
 800676c:	bf00      	nop
	}
	DEV_Delay_ms(50);
 800676e:	2032      	movs	r0, #50	@ 0x32
 8006770:	f7fc fa5a 	bl	8002c28 <HAL_Delay>
    Debug("e-Paper busy release\r\n");
 8006774:	4804      	ldr	r0, [pc, #16]	@ (8006788 <EPD_2IN9_V2_ReadBusy+0x3c>)
 8006776:	f004 f9af 	bl	800aad8 <puts>
}
 800677a:	bf00      	nop
 800677c:	bd80      	pop	{r7, pc}
 800677e:	bf00      	nop
 8006780:	0800b67c 	.word	0x0800b67c
 8006784:	40010800 	.word	0x40010800
 8006788:	0800b694 	.word	0x0800b694

0800678c <EPD_2IN9_V2_LUT>:

static void EPD_2IN9_V2_LUT(UBYTE *lut)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b084      	sub	sp, #16
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
	UBYTE count;
	EPD_2IN9_V2_SendCommand(0x32);
 8006794:	2032      	movs	r0, #50	@ 0x32
 8006796:	f7ff ff9d 	bl	80066d4 <EPD_2IN9_V2_SendCommand>
	for(count=0; count<153; count++) 
 800679a:	2300      	movs	r3, #0
 800679c:	73fb      	strb	r3, [r7, #15]
 800679e:	e009      	b.n	80067b4 <EPD_2IN9_V2_LUT+0x28>
		EPD_2IN9_V2_SendData(lut[count]); 
 80067a0:	7bfb      	ldrb	r3, [r7, #15]
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	4413      	add	r3, r2
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	4618      	mov	r0, r3
 80067aa:	f7ff ffb1 	bl	8006710 <EPD_2IN9_V2_SendData>
	for(count=0; count<153; count++) 
 80067ae:	7bfb      	ldrb	r3, [r7, #15]
 80067b0:	3301      	adds	r3, #1
 80067b2:	73fb      	strb	r3, [r7, #15]
 80067b4:	7bfb      	ldrb	r3, [r7, #15]
 80067b6:	2b98      	cmp	r3, #152	@ 0x98
 80067b8:	d9f2      	bls.n	80067a0 <EPD_2IN9_V2_LUT+0x14>
	EPD_2IN9_V2_ReadBusy();
 80067ba:	f7ff ffc7 	bl	800674c <EPD_2IN9_V2_ReadBusy>
}
 80067be:	bf00      	nop
 80067c0:	3710      	adds	r7, #16
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}

080067c6 <EPD_2IN9_V2_LUT_by_host>:

static void EPD_2IN9_V2_LUT_by_host(UBYTE *lut)
{
 80067c6:	b580      	push	{r7, lr}
 80067c8:	b082      	sub	sp, #8
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
	EPD_2IN9_V2_LUT((UBYTE *)lut);			//lut
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f7ff ffdc 	bl	800678c <EPD_2IN9_V2_LUT>
	EPD_2IN9_V2_SendCommand(0x3f);
 80067d4:	203f      	movs	r0, #63	@ 0x3f
 80067d6:	f7ff ff7d 	bl	80066d4 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(*(lut+153));
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	3399      	adds	r3, #153	@ 0x99
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	4618      	mov	r0, r3
 80067e2:	f7ff ff95 	bl	8006710 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendCommand(0x03);	// gate voltage
 80067e6:	2003      	movs	r0, #3
 80067e8:	f7ff ff74 	bl	80066d4 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(*(lut+154));
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	339a      	adds	r3, #154	@ 0x9a
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	4618      	mov	r0, r3
 80067f4:	f7ff ff8c 	bl	8006710 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendCommand(0x04);	// source voltage
 80067f8:	2004      	movs	r0, #4
 80067fa:	f7ff ff6b 	bl	80066d4 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(*(lut+155));	// VSH
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	339b      	adds	r3, #155	@ 0x9b
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	4618      	mov	r0, r3
 8006806:	f7ff ff83 	bl	8006710 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(*(lut+156));	// VSH2
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	339c      	adds	r3, #156	@ 0x9c
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	4618      	mov	r0, r3
 8006812:	f7ff ff7d 	bl	8006710 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(*(lut+157));	// VSL
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	339d      	adds	r3, #157	@ 0x9d
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	4618      	mov	r0, r3
 800681e:	f7ff ff77 	bl	8006710 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendCommand(0x2c);		// VCOM
 8006822:	202c      	movs	r0, #44	@ 0x2c
 8006824:	f7ff ff56 	bl	80066d4 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(*(lut+158));
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	339e      	adds	r3, #158	@ 0x9e
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	4618      	mov	r0, r3
 8006830:	f7ff ff6e 	bl	8006710 <EPD_2IN9_V2_SendData>
	
}
 8006834:	bf00      	nop
 8006836:	3708      	adds	r7, #8
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <EPD_2IN9_V2_TurnOnDisplay>:
/******************************************************************************
function :	Turn On Display
parameter:
******************************************************************************/
static void EPD_2IN9_V2_TurnOnDisplay(void)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	af00      	add	r7, sp, #0
	EPD_2IN9_V2_SendCommand(0x22); //Display Update Control
 8006840:	2022      	movs	r0, #34	@ 0x22
 8006842:	f7ff ff47 	bl	80066d4 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(0xc7);
 8006846:	20c7      	movs	r0, #199	@ 0xc7
 8006848:	f7ff ff62 	bl	8006710 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendCommand(0x20); //Activate Display Update Sequence
 800684c:	2020      	movs	r0, #32
 800684e:	f7ff ff41 	bl	80066d4 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_ReadBusy();
 8006852:	f7ff ff7b 	bl	800674c <EPD_2IN9_V2_ReadBusy>
}
 8006856:	bf00      	nop
 8006858:	bd80      	pop	{r7, pc}

0800685a <EPD_2IN9_V2_TurnOnDisplay_Partial>:

static void EPD_2IN9_V2_TurnOnDisplay_Partial(void)
{
 800685a:	b580      	push	{r7, lr}
 800685c:	af00      	add	r7, sp, #0
	EPD_2IN9_V2_SendCommand(0x22); //Display Update Control
 800685e:	2022      	movs	r0, #34	@ 0x22
 8006860:	f7ff ff38 	bl	80066d4 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(0x0F);   
 8006864:	200f      	movs	r0, #15
 8006866:	f7ff ff53 	bl	8006710 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendCommand(0x20); //Activate Display Update Sequence
 800686a:	2020      	movs	r0, #32
 800686c:	f7ff ff32 	bl	80066d4 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_ReadBusy();
 8006870:	f7ff ff6c 	bl	800674c <EPD_2IN9_V2_ReadBusy>
}
 8006874:	bf00      	nop
 8006876:	bd80      	pop	{r7, pc}

08006878 <EPD_2IN9_V2_SetWindows>:
/******************************************************************************
function :	Setting the display window
parameter:
******************************************************************************/
static void EPD_2IN9_V2_SetWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend)
{
 8006878:	b590      	push	{r4, r7, lr}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	4604      	mov	r4, r0
 8006880:	4608      	mov	r0, r1
 8006882:	4611      	mov	r1, r2
 8006884:	461a      	mov	r2, r3
 8006886:	4623      	mov	r3, r4
 8006888:	80fb      	strh	r3, [r7, #6]
 800688a:	4603      	mov	r3, r0
 800688c:	80bb      	strh	r3, [r7, #4]
 800688e:	460b      	mov	r3, r1
 8006890:	807b      	strh	r3, [r7, #2]
 8006892:	4613      	mov	r3, r2
 8006894:	803b      	strh	r3, [r7, #0]
    EPD_2IN9_V2_SendCommand(0x44); // SET_RAM_X_ADDRESS_START_END_POSITION
 8006896:	2044      	movs	r0, #68	@ 0x44
 8006898:	f7ff ff1c 	bl	80066d4 <EPD_2IN9_V2_SendCommand>
    EPD_2IN9_V2_SendData((Xstart>>3) & 0xFF);
 800689c:	88fb      	ldrh	r3, [r7, #6]
 800689e:	08db      	lsrs	r3, r3, #3
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	4618      	mov	r0, r3
 80068a6:	f7ff ff33 	bl	8006710 <EPD_2IN9_V2_SendData>
    EPD_2IN9_V2_SendData((Xend>>3) & 0xFF);
 80068aa:	887b      	ldrh	r3, [r7, #2]
 80068ac:	08db      	lsrs	r3, r3, #3
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	4618      	mov	r0, r3
 80068b4:	f7ff ff2c 	bl	8006710 <EPD_2IN9_V2_SendData>
	
    EPD_2IN9_V2_SendCommand(0x45); // SET_RAM_Y_ADDRESS_START_END_POSITION
 80068b8:	2045      	movs	r0, #69	@ 0x45
 80068ba:	f7ff ff0b 	bl	80066d4 <EPD_2IN9_V2_SendCommand>
    EPD_2IN9_V2_SendData(Ystart & 0xFF);
 80068be:	88bb      	ldrh	r3, [r7, #4]
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	4618      	mov	r0, r3
 80068c4:	f7ff ff24 	bl	8006710 <EPD_2IN9_V2_SendData>
    EPD_2IN9_V2_SendData((Ystart >> 8) & 0xFF);
 80068c8:	88bb      	ldrh	r3, [r7, #4]
 80068ca:	0a1b      	lsrs	r3, r3, #8
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	4618      	mov	r0, r3
 80068d2:	f7ff ff1d 	bl	8006710 <EPD_2IN9_V2_SendData>
    EPD_2IN9_V2_SendData(Yend & 0xFF);
 80068d6:	883b      	ldrh	r3, [r7, #0]
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	4618      	mov	r0, r3
 80068dc:	f7ff ff18 	bl	8006710 <EPD_2IN9_V2_SendData>
    EPD_2IN9_V2_SendData((Yend >> 8) & 0xFF);
 80068e0:	883b      	ldrh	r3, [r7, #0]
 80068e2:	0a1b      	lsrs	r3, r3, #8
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	4618      	mov	r0, r3
 80068ea:	f7ff ff11 	bl	8006710 <EPD_2IN9_V2_SendData>
}
 80068ee:	bf00      	nop
 80068f0:	370c      	adds	r7, #12
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd90      	pop	{r4, r7, pc}

080068f6 <EPD_2IN9_V2_SetCursor>:
/******************************************************************************
function :	Set Cursor
parameter:
******************************************************************************/
static void EPD_2IN9_V2_SetCursor(UWORD Xstart, UWORD Ystart)
{
 80068f6:	b580      	push	{r7, lr}
 80068f8:	b082      	sub	sp, #8
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	4603      	mov	r3, r0
 80068fe:	460a      	mov	r2, r1
 8006900:	80fb      	strh	r3, [r7, #6]
 8006902:	4613      	mov	r3, r2
 8006904:	80bb      	strh	r3, [r7, #4]
    EPD_2IN9_V2_SendCommand(0x4E); // SET_RAM_X_ADDRESS_COUNTER
 8006906:	204e      	movs	r0, #78	@ 0x4e
 8006908:	f7ff fee4 	bl	80066d4 <EPD_2IN9_V2_SendCommand>
    EPD_2IN9_V2_SendData(Xstart & 0xFF);
 800690c:	88fb      	ldrh	r3, [r7, #6]
 800690e:	b2db      	uxtb	r3, r3
 8006910:	4618      	mov	r0, r3
 8006912:	f7ff fefd 	bl	8006710 <EPD_2IN9_V2_SendData>

    EPD_2IN9_V2_SendCommand(0x4F); // SET_RAM_Y_ADDRESS_COUNTER
 8006916:	204f      	movs	r0, #79	@ 0x4f
 8006918:	f7ff fedc 	bl	80066d4 <EPD_2IN9_V2_SendCommand>
    EPD_2IN9_V2_SendData(Ystart & 0xFF);
 800691c:	88bb      	ldrh	r3, [r7, #4]
 800691e:	b2db      	uxtb	r3, r3
 8006920:	4618      	mov	r0, r3
 8006922:	f7ff fef5 	bl	8006710 <EPD_2IN9_V2_SendData>
    EPD_2IN9_V2_SendData((Ystart >> 8) & 0xFF);
 8006926:	88bb      	ldrh	r3, [r7, #4]
 8006928:	0a1b      	lsrs	r3, r3, #8
 800692a:	b29b      	uxth	r3, r3
 800692c:	b2db      	uxtb	r3, r3
 800692e:	4618      	mov	r0, r3
 8006930:	f7ff feee 	bl	8006710 <EPD_2IN9_V2_SendData>
}
 8006934:	bf00      	nop
 8006936:	3708      	adds	r7, #8
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <EPD_2IN9_V2_Init>:
/******************************************************************************
function :	Initialize the e-Paper register
parameter:
******************************************************************************/
void EPD_2IN9_V2_Init(void)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	af00      	add	r7, sp, #0
	EPD_2IN9_V2_Reset();
 8006940:	f7ff feaa 	bl	8006698 <EPD_2IN9_V2_Reset>
	DEV_Delay_ms(100);
 8006944:	2064      	movs	r0, #100	@ 0x64
 8006946:	f7fc f96f 	bl	8002c28 <HAL_Delay>

	EPD_2IN9_V2_ReadBusy();   
 800694a:	f7ff feff 	bl	800674c <EPD_2IN9_V2_ReadBusy>
	EPD_2IN9_V2_SendCommand(0x12); // soft reset
 800694e:	2012      	movs	r0, #18
 8006950:	f7ff fec0 	bl	80066d4 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_ReadBusy();
 8006954:	f7ff fefa 	bl	800674c <EPD_2IN9_V2_ReadBusy>
	
	EPD_2IN9_V2_SendCommand(0x01); //Driver output control      
 8006958:	2001      	movs	r0, #1
 800695a:	f7ff febb 	bl	80066d4 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(0x27);
 800695e:	2027      	movs	r0, #39	@ 0x27
 8006960:	f7ff fed6 	bl	8006710 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x01);
 8006964:	2001      	movs	r0, #1
 8006966:	f7ff fed3 	bl	8006710 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x00);
 800696a:	2000      	movs	r0, #0
 800696c:	f7ff fed0 	bl	8006710 <EPD_2IN9_V2_SendData>
	
	EPD_2IN9_V2_SendCommand(0x11); //data entry mode       
 8006970:	2011      	movs	r0, #17
 8006972:	f7ff feaf 	bl	80066d4 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(0x03);
 8006976:	2003      	movs	r0, #3
 8006978:	f7ff feca 	bl	8006710 <EPD_2IN9_V2_SendData>
	
	EPD_2IN9_V2_SetWindows(0, 0, EPD_2IN9_V2_WIDTH-1, EPD_2IN9_V2_HEIGHT-1);
 800697c:	f240 1327 	movw	r3, #295	@ 0x127
 8006980:	227f      	movs	r2, #127	@ 0x7f
 8006982:	2100      	movs	r1, #0
 8006984:	2000      	movs	r0, #0
 8006986:	f7ff ff77 	bl	8006878 <EPD_2IN9_V2_SetWindows>
	
	EPD_2IN9_V2_SendCommand(0x21); //  Display update control
 800698a:	2021      	movs	r0, #33	@ 0x21
 800698c:	f7ff fea2 	bl	80066d4 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(0x00);
 8006990:	2000      	movs	r0, #0
 8006992:	f7ff febd 	bl	8006710 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x80);	
 8006996:	2080      	movs	r0, #128	@ 0x80
 8006998:	f7ff feba 	bl	8006710 <EPD_2IN9_V2_SendData>
	
	EPD_2IN9_V2_SetCursor(0, 0);
 800699c:	2100      	movs	r1, #0
 800699e:	2000      	movs	r0, #0
 80069a0:	f7ff ffa9 	bl	80068f6 <EPD_2IN9_V2_SetCursor>
	EPD_2IN9_V2_ReadBusy();	
 80069a4:	f7ff fed2 	bl	800674c <EPD_2IN9_V2_ReadBusy>
	
	EPD_2IN9_V2_LUT_by_host(WS_20_30);
 80069a8:	4802      	ldr	r0, [pc, #8]	@ (80069b4 <EPD_2IN9_V2_Init+0x78>)
 80069aa:	f7ff ff0c 	bl	80067c6 <EPD_2IN9_V2_LUT_by_host>
}
 80069ae:	bf00      	nop
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	2000012c 	.word	0x2000012c

080069b8 <EPD_2IN9_V2_Init_Fast>:

void EPD_2IN9_V2_Init_Fast(void)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	af00      	add	r7, sp, #0
	EPD_2IN9_V2_Reset();
 80069bc:	f7ff fe6c 	bl	8006698 <EPD_2IN9_V2_Reset>
	DEV_Delay_ms(100);
 80069c0:	2064      	movs	r0, #100	@ 0x64
 80069c2:	f7fc f931 	bl	8002c28 <HAL_Delay>

	EPD_2IN9_V2_ReadBusy();   
 80069c6:	f7ff fec1 	bl	800674c <EPD_2IN9_V2_ReadBusy>
	EPD_2IN9_V2_SendCommand(0x12); // soft reset
 80069ca:	2012      	movs	r0, #18
 80069cc:	f7ff fe82 	bl	80066d4 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_ReadBusy();
 80069d0:	f7ff febc 	bl	800674c <EPD_2IN9_V2_ReadBusy>
	
	EPD_2IN9_V2_SendCommand(0x01); //Driver output control      
 80069d4:	2001      	movs	r0, #1
 80069d6:	f7ff fe7d 	bl	80066d4 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(0x27);
 80069da:	2027      	movs	r0, #39	@ 0x27
 80069dc:	f7ff fe98 	bl	8006710 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x01);
 80069e0:	2001      	movs	r0, #1
 80069e2:	f7ff fe95 	bl	8006710 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x00);
 80069e6:	2000      	movs	r0, #0
 80069e8:	f7ff fe92 	bl	8006710 <EPD_2IN9_V2_SendData>
	
	EPD_2IN9_V2_SendCommand(0x11); //data entry mode       
 80069ec:	2011      	movs	r0, #17
 80069ee:	f7ff fe71 	bl	80066d4 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(0x03);
 80069f2:	2003      	movs	r0, #3
 80069f4:	f7ff fe8c 	bl	8006710 <EPD_2IN9_V2_SendData>
	
	EPD_2IN9_V2_SetWindows(0, 0, EPD_2IN9_V2_WIDTH-1, EPD_2IN9_V2_HEIGHT-1);
 80069f8:	f240 1327 	movw	r3, #295	@ 0x127
 80069fc:	227f      	movs	r2, #127	@ 0x7f
 80069fe:	2100      	movs	r1, #0
 8006a00:	2000      	movs	r0, #0
 8006a02:	f7ff ff39 	bl	8006878 <EPD_2IN9_V2_SetWindows>
	
    EPD_2IN9_V2_SendCommand(0x3C);       
 8006a06:	203c      	movs	r0, #60	@ 0x3c
 8006a08:	f7ff fe64 	bl	80066d4 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(0x05);
 8006a0c:	2005      	movs	r0, #5
 8006a0e:	f7ff fe7f 	bl	8006710 <EPD_2IN9_V2_SendData>

	EPD_2IN9_V2_SendCommand(0x21); //  Display update control
 8006a12:	2021      	movs	r0, #33	@ 0x21
 8006a14:	f7ff fe5e 	bl	80066d4 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(0x00);
 8006a18:	2000      	movs	r0, #0
 8006a1a:	f7ff fe79 	bl	8006710 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x80);	
 8006a1e:	2080      	movs	r0, #128	@ 0x80
 8006a20:	f7ff fe76 	bl	8006710 <EPD_2IN9_V2_SendData>
	
	EPD_2IN9_V2_SetCursor(0, 0);
 8006a24:	2100      	movs	r1, #0
 8006a26:	2000      	movs	r0, #0
 8006a28:	f7ff ff65 	bl	80068f6 <EPD_2IN9_V2_SetCursor>
	EPD_2IN9_V2_ReadBusy();	
 8006a2c:	f7ff fe8e 	bl	800674c <EPD_2IN9_V2_ReadBusy>
	
	EPD_2IN9_V2_LUT_by_host(WF_FULL);
 8006a30:	4802      	ldr	r0, [pc, #8]	@ (8006a3c <EPD_2IN9_V2_Init_Fast+0x84>)
 8006a32:	f7ff fec8 	bl	80067c6 <EPD_2IN9_V2_LUT_by_host>
}
 8006a36:	bf00      	nop
 8006a38:	bd80      	pop	{r7, pc}
 8006a3a:	bf00      	nop
 8006a3c:	200001cc 	.word	0x200001cc

08006a40 <EPD_2IN9_V2_Clear>:
/******************************************************************************
function :	Clear screen
parameter:
******************************************************************************/
void EPD_2IN9_V2_Clear(void)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b082      	sub	sp, #8
 8006a44:	af00      	add	r7, sp, #0
	UWORD i;
	
	EPD_2IN9_V2_SendCommand(0x24);   //write RAM for black(0)/white (1)
 8006a46:	2024      	movs	r0, #36	@ 0x24
 8006a48:	f7ff fe44 	bl	80066d4 <EPD_2IN9_V2_SendCommand>
	for(i=0;i<4736;i++)
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	80fb      	strh	r3, [r7, #6]
 8006a50:	e005      	b.n	8006a5e <EPD_2IN9_V2_Clear+0x1e>
	{
		EPD_2IN9_V2_SendData(0xff);
 8006a52:	20ff      	movs	r0, #255	@ 0xff
 8006a54:	f7ff fe5c 	bl	8006710 <EPD_2IN9_V2_SendData>
	for(i=0;i<4736;i++)
 8006a58:	88fb      	ldrh	r3, [r7, #6]
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	80fb      	strh	r3, [r7, #6]
 8006a5e:	88fb      	ldrh	r3, [r7, #6]
 8006a60:	f5b3 5f94 	cmp.w	r3, #4736	@ 0x1280
 8006a64:	d3f5      	bcc.n	8006a52 <EPD_2IN9_V2_Clear+0x12>
	}

	EPD_2IN9_V2_SendCommand(0x26);   //write RAM for black(0)/white (1)
 8006a66:	2026      	movs	r0, #38	@ 0x26
 8006a68:	f7ff fe34 	bl	80066d4 <EPD_2IN9_V2_SendCommand>
	for(i=0;i<4736;i++)
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	80fb      	strh	r3, [r7, #6]
 8006a70:	e005      	b.n	8006a7e <EPD_2IN9_V2_Clear+0x3e>
	{
		EPD_2IN9_V2_SendData(0xff);
 8006a72:	20ff      	movs	r0, #255	@ 0xff
 8006a74:	f7ff fe4c 	bl	8006710 <EPD_2IN9_V2_SendData>
	for(i=0;i<4736;i++)
 8006a78:	88fb      	ldrh	r3, [r7, #6]
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	80fb      	strh	r3, [r7, #6]
 8006a7e:	88fb      	ldrh	r3, [r7, #6]
 8006a80:	f5b3 5f94 	cmp.w	r3, #4736	@ 0x1280
 8006a84:	d3f5      	bcc.n	8006a72 <EPD_2IN9_V2_Clear+0x32>
	}
	EPD_2IN9_V2_TurnOnDisplay();
 8006a86:	f7ff fed9 	bl	800683c <EPD_2IN9_V2_TurnOnDisplay>
}
 8006a8a:	bf00      	nop
 8006a8c:	3708      	adds	r7, #8
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}

08006a92 <EPD_2IN9_V2_Display>:
/******************************************************************************
function :	Sends the image buffer in RAM to e-Paper and displays
parameter:
******************************************************************************/
void EPD_2IN9_V2_Display(UBYTE *Image)
{
 8006a92:	b580      	push	{r7, lr}
 8006a94:	b084      	sub	sp, #16
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]
	UWORD i;	
	EPD_2IN9_V2_SendCommand(0x24);   //write RAM for black(0)/white (1)
 8006a9a:	2024      	movs	r0, #36	@ 0x24
 8006a9c:	f7ff fe1a 	bl	80066d4 <EPD_2IN9_V2_SendCommand>
	for(i=0;i<4736;i++)
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	81fb      	strh	r3, [r7, #14]
 8006aa4:	e009      	b.n	8006aba <EPD_2IN9_V2_Display+0x28>
	{
		EPD_2IN9_V2_SendData(Image[i]);
 8006aa6:	89fb      	ldrh	r3, [r7, #14]
 8006aa8:	687a      	ldr	r2, [r7, #4]
 8006aaa:	4413      	add	r3, r2
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f7ff fe2e 	bl	8006710 <EPD_2IN9_V2_SendData>
	for(i=0;i<4736;i++)
 8006ab4:	89fb      	ldrh	r3, [r7, #14]
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	81fb      	strh	r3, [r7, #14]
 8006aba:	89fb      	ldrh	r3, [r7, #14]
 8006abc:	f5b3 5f94 	cmp.w	r3, #4736	@ 0x1280
 8006ac0:	d3f1      	bcc.n	8006aa6 <EPD_2IN9_V2_Display+0x14>
	}
	EPD_2IN9_V2_TurnOnDisplay();	
 8006ac2:	f7ff febb 	bl	800683c <EPD_2IN9_V2_TurnOnDisplay>
}
 8006ac6:	bf00      	nop
 8006ac8:	3710      	adds	r7, #16
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}

08006ace <EPD_2IN9_V2_Display_Base>:

void EPD_2IN9_V2_Display_Base(UBYTE *Image)
{
 8006ace:	b580      	push	{r7, lr}
 8006ad0:	b084      	sub	sp, #16
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	6078      	str	r0, [r7, #4]
	UWORD i;   

	EPD_2IN9_V2_SendCommand(0x24);   //Write Black and White image to RAM
 8006ad6:	2024      	movs	r0, #36	@ 0x24
 8006ad8:	f7ff fdfc 	bl	80066d4 <EPD_2IN9_V2_SendCommand>
	for(i=0;i<4736;i++)
 8006adc:	2300      	movs	r3, #0
 8006ade:	81fb      	strh	r3, [r7, #14]
 8006ae0:	e009      	b.n	8006af6 <EPD_2IN9_V2_Display_Base+0x28>
	{               
		EPD_2IN9_V2_SendData(Image[i]);
 8006ae2:	89fb      	ldrh	r3, [r7, #14]
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	4413      	add	r3, r2
 8006ae8:	781b      	ldrb	r3, [r3, #0]
 8006aea:	4618      	mov	r0, r3
 8006aec:	f7ff fe10 	bl	8006710 <EPD_2IN9_V2_SendData>
	for(i=0;i<4736;i++)
 8006af0:	89fb      	ldrh	r3, [r7, #14]
 8006af2:	3301      	adds	r3, #1
 8006af4:	81fb      	strh	r3, [r7, #14]
 8006af6:	89fb      	ldrh	r3, [r7, #14]
 8006af8:	f5b3 5f94 	cmp.w	r3, #4736	@ 0x1280
 8006afc:	d3f1      	bcc.n	8006ae2 <EPD_2IN9_V2_Display_Base+0x14>
	}
	EPD_2IN9_V2_SendCommand(0x26);   //Write Black and White image to RAM
 8006afe:	2026      	movs	r0, #38	@ 0x26
 8006b00:	f7ff fde8 	bl	80066d4 <EPD_2IN9_V2_SendCommand>
	for(i=0;i<4736;i++)
 8006b04:	2300      	movs	r3, #0
 8006b06:	81fb      	strh	r3, [r7, #14]
 8006b08:	e009      	b.n	8006b1e <EPD_2IN9_V2_Display_Base+0x50>
	{               
		EPD_2IN9_V2_SendData(Image[i]);
 8006b0a:	89fb      	ldrh	r3, [r7, #14]
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	4413      	add	r3, r2
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	4618      	mov	r0, r3
 8006b14:	f7ff fdfc 	bl	8006710 <EPD_2IN9_V2_SendData>
	for(i=0;i<4736;i++)
 8006b18:	89fb      	ldrh	r3, [r7, #14]
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	81fb      	strh	r3, [r7, #14]
 8006b1e:	89fb      	ldrh	r3, [r7, #14]
 8006b20:	f5b3 5f94 	cmp.w	r3, #4736	@ 0x1280
 8006b24:	d3f1      	bcc.n	8006b0a <EPD_2IN9_V2_Display_Base+0x3c>
	}
	EPD_2IN9_V2_TurnOnDisplay();	
 8006b26:	f7ff fe89 	bl	800683c <EPD_2IN9_V2_TurnOnDisplay>
}
 8006b2a:	bf00      	nop
 8006b2c:	3710      	adds	r7, #16
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}
	...

08006b34 <EPD_2IN9_V2_Display_Partial>:

    EPD_2IN9_V2_TurnOnDisplay();
}

void EPD_2IN9_V2_Display_Partial(UBYTE *Image)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
	UWORD i;

//Reset
    DEV_Digital_Write(EPD_RST_PIN, 0);
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	2102      	movs	r1, #2
 8006b40:	4833      	ldr	r0, [pc, #204]	@ (8006c10 <EPD_2IN9_V2_Display_Partial+0xdc>)
 8006b42:	f7fc ffee 	bl	8003b22 <HAL_GPIO_WritePin>
    DEV_Delay_ms(1);
 8006b46:	2001      	movs	r0, #1
 8006b48:	f7fc f86e 	bl	8002c28 <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	2102      	movs	r1, #2
 8006b50:	482f      	ldr	r0, [pc, #188]	@ (8006c10 <EPD_2IN9_V2_Display_Partial+0xdc>)
 8006b52:	f7fc ffe6 	bl	8003b22 <HAL_GPIO_WritePin>
    DEV_Delay_ms(2);
 8006b56:	2002      	movs	r0, #2
 8006b58:	f7fc f866 	bl	8002c28 <HAL_Delay>

	EPD_2IN9_V2_LUT(_WF_PARTIAL_2IN9);
 8006b5c:	482d      	ldr	r0, [pc, #180]	@ (8006c14 <EPD_2IN9_V2_Display_Partial+0xe0>)
 8006b5e:	f7ff fe15 	bl	800678c <EPD_2IN9_V2_LUT>
	EPD_2IN9_V2_SendCommand(0x37); 
 8006b62:	2037      	movs	r0, #55	@ 0x37
 8006b64:	f7ff fdb6 	bl	80066d4 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(0x00);  
 8006b68:	2000      	movs	r0, #0
 8006b6a:	f7ff fdd1 	bl	8006710 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x00);  
 8006b6e:	2000      	movs	r0, #0
 8006b70:	f7ff fdce 	bl	8006710 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x00);  
 8006b74:	2000      	movs	r0, #0
 8006b76:	f7ff fdcb 	bl	8006710 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x00); 
 8006b7a:	2000      	movs	r0, #0
 8006b7c:	f7ff fdc8 	bl	8006710 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x00);  
 8006b80:	2000      	movs	r0, #0
 8006b82:	f7ff fdc5 	bl	8006710 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x40);  
 8006b86:	2040      	movs	r0, #64	@ 0x40
 8006b88:	f7ff fdc2 	bl	8006710 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x00);  
 8006b8c:	2000      	movs	r0, #0
 8006b8e:	f7ff fdbf 	bl	8006710 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x00);   
 8006b92:	2000      	movs	r0, #0
 8006b94:	f7ff fdbc 	bl	8006710 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x00);  
 8006b98:	2000      	movs	r0, #0
 8006b9a:	f7ff fdb9 	bl	8006710 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x00);
 8006b9e:	2000      	movs	r0, #0
 8006ba0:	f7ff fdb6 	bl	8006710 <EPD_2IN9_V2_SendData>

	EPD_2IN9_V2_SendCommand(0x3C); //BorderWavefrom
 8006ba4:	203c      	movs	r0, #60	@ 0x3c
 8006ba6:	f7ff fd95 	bl	80066d4 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(0x80);	
 8006baa:	2080      	movs	r0, #128	@ 0x80
 8006bac:	f7ff fdb0 	bl	8006710 <EPD_2IN9_V2_SendData>

	EPD_2IN9_V2_SendCommand(0x22); 
 8006bb0:	2022      	movs	r0, #34	@ 0x22
 8006bb2:	f7ff fd8f 	bl	80066d4 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(0xC0);   
 8006bb6:	20c0      	movs	r0, #192	@ 0xc0
 8006bb8:	f7ff fdaa 	bl	8006710 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendCommand(0x20); 
 8006bbc:	2020      	movs	r0, #32
 8006bbe:	f7ff fd89 	bl	80066d4 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_ReadBusy();  
 8006bc2:	f7ff fdc3 	bl	800674c <EPD_2IN9_V2_ReadBusy>
	
	EPD_2IN9_V2_SetWindows(0, 0, EPD_2IN9_V2_WIDTH-1, EPD_2IN9_V2_HEIGHT-1);
 8006bc6:	f240 1327 	movw	r3, #295	@ 0x127
 8006bca:	227f      	movs	r2, #127	@ 0x7f
 8006bcc:	2100      	movs	r1, #0
 8006bce:	2000      	movs	r0, #0
 8006bd0:	f7ff fe52 	bl	8006878 <EPD_2IN9_V2_SetWindows>
	EPD_2IN9_V2_SetCursor(0, 0);
 8006bd4:	2100      	movs	r1, #0
 8006bd6:	2000      	movs	r0, #0
 8006bd8:	f7ff fe8d 	bl	80068f6 <EPD_2IN9_V2_SetCursor>

	EPD_2IN9_V2_SendCommand(0x24);   //Write Black and White image to RAM
 8006bdc:	2024      	movs	r0, #36	@ 0x24
 8006bde:	f7ff fd79 	bl	80066d4 <EPD_2IN9_V2_SendCommand>
	for(i=0;i<4736;i++)
 8006be2:	2300      	movs	r3, #0
 8006be4:	81fb      	strh	r3, [r7, #14]
 8006be6:	e009      	b.n	8006bfc <EPD_2IN9_V2_Display_Partial+0xc8>
	{
		EPD_2IN9_V2_SendData(Image[i]);
 8006be8:	89fb      	ldrh	r3, [r7, #14]
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	4413      	add	r3, r2
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f7ff fd8d 	bl	8006710 <EPD_2IN9_V2_SendData>
	for(i=0;i<4736;i++)
 8006bf6:	89fb      	ldrh	r3, [r7, #14]
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	81fb      	strh	r3, [r7, #14]
 8006bfc:	89fb      	ldrh	r3, [r7, #14]
 8006bfe:	f5b3 5f94 	cmp.w	r3, #4736	@ 0x1280
 8006c02:	d3f1      	bcc.n	8006be8 <EPD_2IN9_V2_Display_Partial+0xb4>
	} 
	EPD_2IN9_V2_TurnOnDisplay_Partial();
 8006c04:	f7ff fe29 	bl	800685a <EPD_2IN9_V2_TurnOnDisplay_Partial>
}
 8006c08:	bf00      	nop
 8006c0a:	3710      	adds	r7, #16
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	40010800 	.word	0x40010800
 8006c14:	2000008c 	.word	0x2000008c

08006c18 <EPD_2IN9_V2_Sleep>:
/******************************************************************************
function :	Enter sleep mode
parameter:
******************************************************************************/
void EPD_2IN9_V2_Sleep(void)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	af00      	add	r7, sp, #0
	EPD_2IN9_V2_SendCommand(0x10); //enter deep sleep
 8006c1c:	2010      	movs	r0, #16
 8006c1e:	f7ff fd59 	bl	80066d4 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(0x01); 
 8006c22:	2001      	movs	r0, #1
 8006c24:	f7ff fd74 	bl	8006710 <EPD_2IN9_V2_SendData>
	DEV_Delay_ms(100);
 8006c28:	2064      	movs	r0, #100	@ 0x64
 8006c2a:	f7fb fffd 	bl	8002c28 <HAL_Delay>
}
 8006c2e:	bf00      	nop
 8006c30:	bd80      	pop	{r7, pc}
	...

08006c34 <default_mode>:
void drawn_alarm_setup_mode(uint16_t Xstart, uint16_t Ystart, ALARM_DATA_SETUP_MODE *sParam_data_alarm_setup_mode, sFONT Font);
void draw_battery(uint16_t battery_percentage);
void draw_day(uint16_t day, uint16_t date, uint16_t month, uint16_t year);

void default_mode(FLAG_SYSTEM *flag_default_mode, TIME_DATA *time_get_data, uint16_t battery_percentage)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b08a      	sub	sp, #40	@ 0x28
 8006c38:	af02      	add	r7, sp, #8
 8006c3a:	60f8      	str	r0, [r7, #12]
 8006c3c:	60b9      	str	r1, [r7, #8]
 8006c3e:	4613      	mov	r3, r2
 8006c40:	80fb      	strh	r3, [r7, #6]
	UBYTE *BlackImage;

	UWORD Imagesize = ((EPD_2IN9_V2_WIDTH % 8 == 0)? (EPD_2IN9_V2_WIDTH / 8 ): (EPD_2IN9_V2_WIDTH / 8 + 1)) * EPD_2IN9_V2_HEIGHT;
 8006c42:	f44f 5394 	mov.w	r3, #4736	@ 0x1280
 8006c46:	83bb      	strh	r3, [r7, #28]
    if((BlackImage = (UBYTE *)malloc(Imagesize)) == NULL) {
 8006c48:	8bbb      	ldrh	r3, [r7, #28]
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f003 fd5c 	bl	800a708 <malloc>
 8006c50:	4603      	mov	r3, r0
 8006c52:	61bb      	str	r3, [r7, #24]
 8006c54:	69bb      	ldr	r3, [r7, #24]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d102      	bne.n	8006c60 <default_mode+0x2c>
        printf("Failed to apply for black memory...\r\n");
 8006c5a:	485e      	ldr	r0, [pc, #376]	@ (8006dd4 <default_mode+0x1a0>)
 8006c5c:	f003 ff3c 	bl	800aad8 <puts>
    }

    EPD_2IN9_V2_Init_Fast();
 8006c60:	f7ff feaa 	bl	80069b8 <EPD_2IN9_V2_Init_Fast>
    if(flag_default_mode ->flag_DEFAULT_MODE == 1)
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d145      	bne.n	8006cf8 <default_mode+0xc4>
    {
		EPD_2IN9_V2_Init();
 8006c6c:	f7ff fe66 	bl	800693c <EPD_2IN9_V2_Init>
    	EPD_2IN9_V2_Clear();
 8006c70:	f7ff fee6 	bl	8006a40 <EPD_2IN9_V2_Clear>
    	EPD_2IN9_V2_Init_Fast();
 8006c74:	f7ff fea0 	bl	80069b8 <EPD_2IN9_V2_Init_Fast>
        Paint_ClearWindows(0, 0, EPD_2IN9_V2_HEIGHT, EPD_2IN9_V2_WIDTH, WHITE);
 8006c78:	23ff      	movs	r3, #255	@ 0xff
 8006c7a:	9300      	str	r3, [sp, #0]
 8006c7c:	2380      	movs	r3, #128	@ 0x80
 8006c7e:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8006c82:	2100      	movs	r1, #0
 8006c84:	2000      	movs	r0, #0
 8006c86:	f003 f871 	bl	8009d6c <Paint_ClearWindows>

    	Paint_NewImage(BlackImage, EPD_2IN9_V2_WIDTH, EPD_2IN9_V2_HEIGHT, 90, WHITE);
 8006c8a:	23ff      	movs	r3, #255	@ 0xff
 8006c8c:	9300      	str	r3, [sp, #0]
 8006c8e:	235a      	movs	r3, #90	@ 0x5a
 8006c90:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8006c94:	2180      	movs	r1, #128	@ 0x80
 8006c96:	69b8      	ldr	r0, [r7, #24]
 8006c98:	f002 fe10 	bl	80098bc <Paint_NewImage>
    	printf("Drawing\r\n");
 8006c9c:	484e      	ldr	r0, [pc, #312]	@ (8006dd8 <default_mode+0x1a4>)
 8006c9e:	f003 ff1b 	bl	800aad8 <puts>
    	//1.Select Image
    	Paint_SelectImage(BlackImage);
 8006ca2:	69b8      	ldr	r0, [r7, #24]
 8006ca4:	f002 fe5e 	bl	8009964 <Paint_SelectImage>
    	Paint_Clear(WHITE);
 8006ca8:	20ff      	movs	r0, #255	@ 0xff
 8006caa:	f002 ffb7 	bl	8009c1c <Paint_Clear>

    	// 2.Drawing on the image
    	printf("Drawing:BlackImage\r\n");
 8006cae:	484b      	ldr	r0, [pc, #300]	@ (8006ddc <default_mode+0x1a8>)
 8006cb0:	f003 ff12 	bl	800aad8 <puts>

    	// Paint_DrawString_EN(10, 0, "Duy Ngoc - 2251036", &Font16, BLACK, WHITE);
    	// Paint_DrawString_EN(10, 30, "Trung Nam - 2251032", &Font16, BLACK, WHITE);
    	// Paint_DrawString_EN(10, 60, "Hung Minh - 2251030", &Font16, BLACK, WHITE);

    	Paint_DrawString_EN(35, 40, "ChronoSync: Embedded Digital CLOCK ", &Font12, BLACK, WHITE);
 8006cb4:	23ff      	movs	r3, #255	@ 0xff
 8006cb6:	9301      	str	r3, [sp, #4]
 8006cb8:	2300      	movs	r3, #0
 8006cba:	9300      	str	r3, [sp, #0]
 8006cbc:	4b48      	ldr	r3, [pc, #288]	@ (8006de0 <default_mode+0x1ac>)
 8006cbe:	4a49      	ldr	r2, [pc, #292]	@ (8006de4 <default_mode+0x1b0>)
 8006cc0:	2128      	movs	r1, #40	@ 0x28
 8006cc2:	2023      	movs	r0, #35	@ 0x23
 8006cc4:	f003 fb04 	bl	800a2d0 <Paint_DrawString_EN>


	    Paint_NewImage(BlackImage, EPD_2IN9_V2_WIDTH, EPD_2IN9_V2_HEIGHT, 90, WHITE);
 8006cc8:	23ff      	movs	r3, #255	@ 0xff
 8006cca:	9300      	str	r3, [sp, #0]
 8006ccc:	235a      	movs	r3, #90	@ 0x5a
 8006cce:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8006cd2:	2180      	movs	r1, #128	@ 0x80
 8006cd4:	69b8      	ldr	r0, [r7, #24]
 8006cd6:	f002 fdf1 	bl	80098bc <Paint_NewImage>
        EPD_2IN9_V2_Display(BlackImage);
 8006cda:	69b8      	ldr	r0, [r7, #24]
 8006cdc:	f7ff fed9 	bl	8006a92 <EPD_2IN9_V2_Display>
        flag_default_mode->flag_ALARM_SETUP_MODE = 1;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	70da      	strb	r2, [r3, #3]
        flag_default_mode->flag_ALARM_VIEW_MODE = 1;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2201      	movs	r2, #1
 8006cea:	709a      	strb	r2, [r3, #2]
        flag_default_mode->flag_SYSTEM_SETUP_MODE = 1;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	711a      	strb	r2, [r3, #4]
        flag_default_mode->flag_TIME_SETUP_MODE = 1;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	705a      	strb	r2, [r3, #1]
    }
        Paint_NewImage(BlackImage, EPD_2IN9_V2_WIDTH, EPD_2IN9_V2_HEIGHT, 90, WHITE);
 8006cf8:	23ff      	movs	r3, #255	@ 0xff
 8006cfa:	9300      	str	r3, [sp, #0]
 8006cfc:	235a      	movs	r3, #90	@ 0x5a
 8006cfe:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8006d02:	2180      	movs	r1, #128	@ 0x80
 8006d04:	69b8      	ldr	r0, [r7, #24]
 8006d06:	f002 fdd9 	bl	80098bc <Paint_NewImage>
        EPD_2IN9_V2_Display_Partial(BlackImage);
 8006d0a:	69b8      	ldr	r0, [r7, #24]
 8006d0c:	f7ff ff12 	bl	8006b34 <EPD_2IN9_V2_Display_Partial>
    printf("Partial refresh\r\n");
 8006d10:	4835      	ldr	r0, [pc, #212]	@ (8006de8 <default_mode+0x1b4>)
 8006d12:	f003 fee1 	bl	800aad8 <puts>
    Paint_SelectImage(BlackImage);
 8006d16:	69b8      	ldr	r0, [r7, #24]
 8006d18:	f002 fe24 	bl	8009964 <Paint_SelectImage>

    PAINT_TIME sPaint_time;
    sPaint_time.Hour = time_get_data->hour;
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	789b      	ldrb	r3, [r3, #2]
 8006d20:	753b      	strb	r3, [r7, #20]
    sPaint_time.Min = time_get_data->minute;
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	785b      	ldrb	r3, [r3, #1]
 8006d26:	757b      	strb	r3, [r7, #21]
    sPaint_time.Sec = 0;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	75bb      	strb	r3, [r7, #22]
    UBYTE num = 3;
 8006d2c:	2303      	movs	r3, #3
 8006d2e:	77fb      	strb	r3, [r7, #31]
    for (;;) {
        Paint_ClearWindows(100, 60, 100 + Font20.Width * 7, 60 + Font20.Height, WHITE);
 8006d30:	4b2e      	ldr	r3, [pc, #184]	@ (8006dec <default_mode+0x1b8>)
 8006d32:	889b      	ldrh	r3, [r3, #4]
 8006d34:	461a      	mov	r2, r3
 8006d36:	00d2      	lsls	r2, r2, #3
 8006d38:	1ad3      	subs	r3, r2, r3
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	3364      	adds	r3, #100	@ 0x64
 8006d3e:	b29a      	uxth	r2, r3
 8006d40:	4b2a      	ldr	r3, [pc, #168]	@ (8006dec <default_mode+0x1b8>)
 8006d42:	88db      	ldrh	r3, [r3, #6]
 8006d44:	333c      	adds	r3, #60	@ 0x3c
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	21ff      	movs	r1, #255	@ 0xff
 8006d4a:	9100      	str	r1, [sp, #0]
 8006d4c:	213c      	movs	r1, #60	@ 0x3c
 8006d4e:	2064      	movs	r0, #100	@ 0x64
 8006d50:	f003 f80c 	bl	8009d6c <Paint_ClearWindows>
        Paint_ClearWindows(70, 100, 296, 100 + Font20.Height, WHITE);
 8006d54:	4b25      	ldr	r3, [pc, #148]	@ (8006dec <default_mode+0x1b8>)
 8006d56:	88db      	ldrh	r3, [r3, #6]
 8006d58:	3364      	adds	r3, #100	@ 0x64
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	22ff      	movs	r2, #255	@ 0xff
 8006d5e:	9200      	str	r2, [sp, #0]
 8006d60:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8006d64:	2164      	movs	r1, #100	@ 0x64
 8006d66:	2046      	movs	r0, #70	@ 0x46
 8006d68:	f003 f800 	bl	8009d6c <Paint_ClearWindows>
        Paint_DrawTime(100, 60, &sPaint_time, &Font20, WHITE, BLACK);
 8006d6c:	f107 0210 	add.w	r2, r7, #16
 8006d70:	2300      	movs	r3, #0
 8006d72:	9301      	str	r3, [sp, #4]
 8006d74:	23ff      	movs	r3, #255	@ 0xff
 8006d76:	9300      	str	r3, [sp, #0]
 8006d78:	4b1c      	ldr	r3, [pc, #112]	@ (8006dec <default_mode+0x1b8>)
 8006d7a:	213c      	movs	r1, #60	@ 0x3c
 8006d7c:	2064      	movs	r0, #100	@ 0x64
 8006d7e:	f003 fbc9 	bl	800a514 <Paint_DrawTime>
        draw_day(time_get_data->dayofweek, time_get_data->dateofmonth, time_get_data->month, time_get_data->year);
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	78db      	ldrb	r3, [r3, #3]
 8006d86:	4618      	mov	r0, r3
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	791b      	ldrb	r3, [r3, #4]
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	795b      	ldrb	r3, [r3, #5]
 8006d92:	461a      	mov	r2, r3
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	799b      	ldrb	r3, [r3, #6]
 8006d98:	f002 fa64 	bl	8009264 <draw_day>
        draw_battery(battery_percentage);
 8006d9c:	88fb      	ldrh	r3, [r7, #6]
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f002 fbde 	bl	8009560 <draw_battery>
        num = num - 1;
 8006da4:	7ffb      	ldrb	r3, [r7, #31]
 8006da6:	3b01      	subs	r3, #1
 8006da8:	77fb      	strb	r3, [r7, #31]
        if(num == 0) {
 8006daa:	7ffb      	ldrb	r3, [r7, #31]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d003      	beq.n	8006db8 <default_mode+0x184>
            break;
        }
		EPD_2IN9_V2_Display_Partial(BlackImage);
 8006db0:	69b8      	ldr	r0, [r7, #24]
 8006db2:	f7ff febf 	bl	8006b34 <EPD_2IN9_V2_Display_Partial>
        Paint_ClearWindows(100, 60, 100 + Font20.Width * 7, 60 + Font20.Height, WHITE);
 8006db6:	e7bb      	b.n	8006d30 <default_mode+0xfc>
            break;
 8006db8:	bf00      	nop
    }
      EPD_2IN9_V2_Sleep();
 8006dba:	f7ff ff2d 	bl	8006c18 <EPD_2IN9_V2_Sleep>
      flag_default_mode->flag_DEFAULT_MODE = 0;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	701a      	strb	r2, [r3, #0]
      free(BlackImage);
 8006dc4:	69b8      	ldr	r0, [r7, #24]
 8006dc6:	f003 fca7 	bl	800a718 <free>
}
 8006dca:	bf00      	nop
 8006dcc:	3720      	adds	r7, #32
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	0800b6b4 	.word	0x0800b6b4
 8006dd8:	0800b6dc 	.word	0x0800b6dc
 8006ddc:	0800b6e8 	.word	0x0800b6e8
 8006de0:	2000026c 	.word	0x2000026c
 8006de4:	0800b6fc 	.word	0x0800b6fc
 8006de8:	0800b720 	.word	0x0800b720
 8006dec:	2000027c 	.word	0x2000027c

08006df0 <system_setup_mode>:

// mode menu
void system_setup_mode (FLAG_SYSTEM *flag_set_up,  SYSTEM_STATE *system_state, uint8_t battery_percentage)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b088      	sub	sp, #32
 8006df4:	af02      	add	r7, sp, #8
 8006df6:	60f8      	str	r0, [r7, #12]
 8006df8:	60b9      	str	r1, [r7, #8]
 8006dfa:	4613      	mov	r3, r2
 8006dfc:	71fb      	strb	r3, [r7, #7]
	UBYTE *BlackImage;

	UWORD Imagesize = ((EPD_2IN9_V2_WIDTH % 8 == 0)? (EPD_2IN9_V2_WIDTH / 8 ): (EPD_2IN9_V2_WIDTH / 8 + 1)) * EPD_2IN9_V2_HEIGHT;
 8006dfe:	f44f 5394 	mov.w	r3, #4736	@ 0x1280
 8006e02:	82bb      	strh	r3, [r7, #20]
    if((BlackImage = (UBYTE *)malloc(Imagesize)) == NULL) {
 8006e04:	8abb      	ldrh	r3, [r7, #20]
 8006e06:	4618      	mov	r0, r3
 8006e08:	f003 fc7e 	bl	800a708 <malloc>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	613b      	str	r3, [r7, #16]
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d102      	bne.n	8006e1c <system_setup_mode+0x2c>
        printf("Failed to apply for black memory...\r\n");
 8006e16:	486c      	ldr	r0, [pc, #432]	@ (8006fc8 <system_setup_mode+0x1d8>)
 8006e18:	f003 fe5e 	bl	800aad8 <puts>
    }

	EPD_2IN9_V2_Init();
 8006e1c:	f7ff fd8e 	bl	800693c <EPD_2IN9_V2_Init>
	if(flag_set_up->flag_SYSTEM_SETUP_MODE == 1)
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	791b      	ldrb	r3, [r3, #4]
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d129      	bne.n	8006e7c <system_setup_mode+0x8c>
	{
		EPD_2IN9_V2_Init();
 8006e28:	f7ff fd88 	bl	800693c <EPD_2IN9_V2_Init>
    	EPD_2IN9_V2_Clear();
 8006e2c:	f7ff fe08 	bl	8006a40 <EPD_2IN9_V2_Clear>
    	//DEV_Delay_ms(1000);
    	EPD_2IN9_V2_Init_Fast();
 8006e30:	f7ff fdc2 	bl	80069b8 <EPD_2IN9_V2_Init_Fast>
    	Paint_NewImage(BlackImage, EPD_2IN9_V2_WIDTH, EPD_2IN9_V2_HEIGHT, 90, WHITE);
 8006e34:	23ff      	movs	r3, #255	@ 0xff
 8006e36:	9300      	str	r3, [sp, #0]
 8006e38:	235a      	movs	r3, #90	@ 0x5a
 8006e3a:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8006e3e:	2180      	movs	r1, #128	@ 0x80
 8006e40:	6938      	ldr	r0, [r7, #16]
 8006e42:	f002 fd3b 	bl	80098bc <Paint_NewImage>
    	printf("Drawing\r\n");
 8006e46:	4861      	ldr	r0, [pc, #388]	@ (8006fcc <system_setup_mode+0x1dc>)
 8006e48:	f003 fe46 	bl	800aad8 <puts>
    	//1.Select Image
    	Paint_SelectImage(BlackImage);
 8006e4c:	6938      	ldr	r0, [r7, #16]
 8006e4e:	f002 fd89 	bl	8009964 <Paint_SelectImage>
    	Paint_Clear(WHITE);
 8006e52:	20ff      	movs	r0, #255	@ 0xff
 8006e54:	f002 fee2 	bl	8009c1c <Paint_Clear>

    	// 2.Drawing on the image
    	printf("Drawing:BlackImage\r\n");
 8006e58:	485d      	ldr	r0, [pc, #372]	@ (8006fd0 <system_setup_mode+0x1e0>)
 8006e5a:	f003 fe3d 	bl	800aad8 <puts>

 
    
    	EPD_2IN9_V2_Display_Base(BlackImage);
 8006e5e:	6938      	ldr	r0, [r7, #16]
 8006e60:	f7ff fe35 	bl	8006ace <EPD_2IN9_V2_Display_Base>
        flag_set_up->flag_ALARM_SETUP_MODE  = 1;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2201      	movs	r2, #1
 8006e68:	70da      	strb	r2, [r3, #3]
        flag_set_up->flag_ALARM_VIEW_MODE   = 1;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	709a      	strb	r2, [r3, #2]
        flag_set_up->flag_DEFAULT_MODE      = 1;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2201      	movs	r2, #1
 8006e74:	701a      	strb	r2, [r3, #0]
        flag_set_up->flag_TIME_SETUP_MODE   = 1;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2201      	movs	r2, #1
 8006e7a:	705a      	strb	r2, [r3, #1]
	}

Paint_NewImage(BlackImage, EPD_2IN9_V2_WIDTH, EPD_2IN9_V2_HEIGHT, 90, WHITE);
 8006e7c:	23ff      	movs	r3, #255	@ 0xff
 8006e7e:	9300      	str	r3, [sp, #0]
 8006e80:	235a      	movs	r3, #90	@ 0x5a
 8006e82:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8006e86:	2180      	movs	r1, #128	@ 0x80
 8006e88:	6938      	ldr	r0, [r7, #16]
 8006e8a:	f002 fd17 	bl	80098bc <Paint_NewImage>
printf("Partial refresh\r\n");
 8006e8e:	4851      	ldr	r0, [pc, #324]	@ (8006fd4 <system_setup_mode+0x1e4>)
 8006e90:	f003 fe22 	bl	800aad8 <puts>
Paint_SelectImage(BlackImage);
 8006e94:	6938      	ldr	r0, [r7, #16]
 8006e96:	f002 fd65 	bl	8009964 <Paint_SelectImage>
UBYTE num = 3;
 8006e9a:	2303      	movs	r3, #3
 8006e9c:	75fb      	strb	r3, [r7, #23]

    /*
    Paint_ClearWindows(150, 80, 150 + Font20.Width * 7, 80 + Font20.Height, WHITE);
    Paint_DrawTime(150, 80, &sPaint_time, &Font20, WHITE, BLACK);
*/
    draw_battery(battery_percentage);
 8006e9e:	79fb      	ldrb	r3, [r7, #7]
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f002 fb5c 	bl	8009560 <draw_battery>
	switch (system_state->system_opt_cursor){
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	795b      	ldrb	r3, [r3, #5]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d002      	beq.n	8006eb6 <system_setup_mode+0xc6>
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d039      	beq.n	8006f28 <system_setup_mode+0x138>
        Paint_DrawString_EN(10, 0, "0. CLEAR ALL ALARM", &Font16, BLACK, WHITE);
        //mode_1
        Paint_ClearWindows(10, 40, 10 + Font16.Width * 20, 40 + Font16.Height, WHITE);
        Paint_DrawString_EN(10, 40, "1. CONTRIBUTOR INFO", &Font16, WHITE, BLACK);
        break;
       default: break;
 8006eb4:	e071      	b.n	8006f9a <system_setup_mode+0x1aa>
        Paint_ClearWindows(10, 0, 10 + Font16.Width * 20, 0 + Font16.Height, WHITE);
 8006eb6:	4b48      	ldr	r3, [pc, #288]	@ (8006fd8 <system_setup_mode+0x1e8>)
 8006eb8:	889b      	ldrh	r3, [r3, #4]
 8006eba:	461a      	mov	r2, r3
 8006ebc:	0092      	lsls	r2, r2, #2
 8006ebe:	4413      	add	r3, r2
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	330a      	adds	r3, #10
 8006ec6:	b29a      	uxth	r2, r3
 8006ec8:	4b43      	ldr	r3, [pc, #268]	@ (8006fd8 <system_setup_mode+0x1e8>)
 8006eca:	88db      	ldrh	r3, [r3, #6]
 8006ecc:	21ff      	movs	r1, #255	@ 0xff
 8006ece:	9100      	str	r1, [sp, #0]
 8006ed0:	2100      	movs	r1, #0
 8006ed2:	200a      	movs	r0, #10
 8006ed4:	f002 ff4a 	bl	8009d6c <Paint_ClearWindows>
        Paint_DrawString_EN(10, 0, "0. CLEAR ALL ALARM", &Font16, WHITE, BLACK);
 8006ed8:	2300      	movs	r3, #0
 8006eda:	9301      	str	r3, [sp, #4]
 8006edc:	23ff      	movs	r3, #255	@ 0xff
 8006ede:	9300      	str	r3, [sp, #0]
 8006ee0:	4b3d      	ldr	r3, [pc, #244]	@ (8006fd8 <system_setup_mode+0x1e8>)
 8006ee2:	4a3e      	ldr	r2, [pc, #248]	@ (8006fdc <system_setup_mode+0x1ec>)
 8006ee4:	2100      	movs	r1, #0
 8006ee6:	200a      	movs	r0, #10
 8006ee8:	f003 f9f2 	bl	800a2d0 <Paint_DrawString_EN>
        Paint_ClearWindows(10, 40, 10 + Font16.Width * 20, 40 + Font16.Height, WHITE);
 8006eec:	4b3a      	ldr	r3, [pc, #232]	@ (8006fd8 <system_setup_mode+0x1e8>)
 8006eee:	889b      	ldrh	r3, [r3, #4]
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	0092      	lsls	r2, r2, #2
 8006ef4:	4413      	add	r3, r2
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	330a      	adds	r3, #10
 8006efc:	b29a      	uxth	r2, r3
 8006efe:	4b36      	ldr	r3, [pc, #216]	@ (8006fd8 <system_setup_mode+0x1e8>)
 8006f00:	88db      	ldrh	r3, [r3, #6]
 8006f02:	3328      	adds	r3, #40	@ 0x28
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	21ff      	movs	r1, #255	@ 0xff
 8006f08:	9100      	str	r1, [sp, #0]
 8006f0a:	2128      	movs	r1, #40	@ 0x28
 8006f0c:	200a      	movs	r0, #10
 8006f0e:	f002 ff2d 	bl	8009d6c <Paint_ClearWindows>
        Paint_DrawString_EN(10, 40, "1. CONTRIBUTOR INFO", &Font16, BLACK, WHITE);
 8006f12:	23ff      	movs	r3, #255	@ 0xff
 8006f14:	9301      	str	r3, [sp, #4]
 8006f16:	2300      	movs	r3, #0
 8006f18:	9300      	str	r3, [sp, #0]
 8006f1a:	4b2f      	ldr	r3, [pc, #188]	@ (8006fd8 <system_setup_mode+0x1e8>)
 8006f1c:	4a30      	ldr	r2, [pc, #192]	@ (8006fe0 <system_setup_mode+0x1f0>)
 8006f1e:	2128      	movs	r1, #40	@ 0x28
 8006f20:	200a      	movs	r0, #10
 8006f22:	f003 f9d5 	bl	800a2d0 <Paint_DrawString_EN>
        break;
 8006f26:	e038      	b.n	8006f9a <system_setup_mode+0x1aa>
        Paint_ClearWindows(10, 0, 10 + Font16.Width * 20, 0 + Font16.Height, WHITE);
 8006f28:	4b2b      	ldr	r3, [pc, #172]	@ (8006fd8 <system_setup_mode+0x1e8>)
 8006f2a:	889b      	ldrh	r3, [r3, #4]
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	0092      	lsls	r2, r2, #2
 8006f30:	4413      	add	r3, r2
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	330a      	adds	r3, #10
 8006f38:	b29a      	uxth	r2, r3
 8006f3a:	4b27      	ldr	r3, [pc, #156]	@ (8006fd8 <system_setup_mode+0x1e8>)
 8006f3c:	88db      	ldrh	r3, [r3, #6]
 8006f3e:	21ff      	movs	r1, #255	@ 0xff
 8006f40:	9100      	str	r1, [sp, #0]
 8006f42:	2100      	movs	r1, #0
 8006f44:	200a      	movs	r0, #10
 8006f46:	f002 ff11 	bl	8009d6c <Paint_ClearWindows>
        Paint_DrawString_EN(10, 0, "0. CLEAR ALL ALARM", &Font16, BLACK, WHITE);
 8006f4a:	23ff      	movs	r3, #255	@ 0xff
 8006f4c:	9301      	str	r3, [sp, #4]
 8006f4e:	2300      	movs	r3, #0
 8006f50:	9300      	str	r3, [sp, #0]
 8006f52:	4b21      	ldr	r3, [pc, #132]	@ (8006fd8 <system_setup_mode+0x1e8>)
 8006f54:	4a21      	ldr	r2, [pc, #132]	@ (8006fdc <system_setup_mode+0x1ec>)
 8006f56:	2100      	movs	r1, #0
 8006f58:	200a      	movs	r0, #10
 8006f5a:	f003 f9b9 	bl	800a2d0 <Paint_DrawString_EN>
        Paint_ClearWindows(10, 40, 10 + Font16.Width * 20, 40 + Font16.Height, WHITE);
 8006f5e:	4b1e      	ldr	r3, [pc, #120]	@ (8006fd8 <system_setup_mode+0x1e8>)
 8006f60:	889b      	ldrh	r3, [r3, #4]
 8006f62:	461a      	mov	r2, r3
 8006f64:	0092      	lsls	r2, r2, #2
 8006f66:	4413      	add	r3, r2
 8006f68:	009b      	lsls	r3, r3, #2
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	330a      	adds	r3, #10
 8006f6e:	b29a      	uxth	r2, r3
 8006f70:	4b19      	ldr	r3, [pc, #100]	@ (8006fd8 <system_setup_mode+0x1e8>)
 8006f72:	88db      	ldrh	r3, [r3, #6]
 8006f74:	3328      	adds	r3, #40	@ 0x28
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	21ff      	movs	r1, #255	@ 0xff
 8006f7a:	9100      	str	r1, [sp, #0]
 8006f7c:	2128      	movs	r1, #40	@ 0x28
 8006f7e:	200a      	movs	r0, #10
 8006f80:	f002 fef4 	bl	8009d6c <Paint_ClearWindows>
        Paint_DrawString_EN(10, 40, "1. CONTRIBUTOR INFO", &Font16, WHITE, BLACK);
 8006f84:	2300      	movs	r3, #0
 8006f86:	9301      	str	r3, [sp, #4]
 8006f88:	23ff      	movs	r3, #255	@ 0xff
 8006f8a:	9300      	str	r3, [sp, #0]
 8006f8c:	4b12      	ldr	r3, [pc, #72]	@ (8006fd8 <system_setup_mode+0x1e8>)
 8006f8e:	4a14      	ldr	r2, [pc, #80]	@ (8006fe0 <system_setup_mode+0x1f0>)
 8006f90:	2128      	movs	r1, #40	@ 0x28
 8006f92:	200a      	movs	r0, #10
 8006f94:	f003 f99c 	bl	800a2d0 <Paint_DrawString_EN>
        break;
 8006f98:	bf00      	nop
    }

    num = num - 1;
 8006f9a:	7dfb      	ldrb	r3, [r7, #23]
 8006f9c:	3b01      	subs	r3, #1
 8006f9e:	75fb      	strb	r3, [r7, #23]
    if(num == 0) {
 8006fa0:	7dfb      	ldrb	r3, [r7, #23]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d003      	beq.n	8006fae <system_setup_mode+0x1be>
        break;
    }
	EPD_2IN9_V2_Display_Partial(BlackImage);
 8006fa6:	6938      	ldr	r0, [r7, #16]
 8006fa8:	f7ff fdc4 	bl	8006b34 <EPD_2IN9_V2_Display_Partial>
    draw_battery(battery_percentage);
 8006fac:	e777      	b.n	8006e9e <system_setup_mode+0xae>
        break;
 8006fae:	bf00      	nop
}
  flag_set_up->flag_SYSTEM_SETUP_MODE = 0;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	711a      	strb	r2, [r3, #4]
  EPD_2IN9_V2_Sleep();
 8006fb6:	f7ff fe2f 	bl	8006c18 <EPD_2IN9_V2_Sleep>
  free(BlackImage);
 8006fba:	6938      	ldr	r0, [r7, #16]
 8006fbc:	f003 fbac 	bl	800a718 <free>
}
 8006fc0:	bf00      	nop
 8006fc2:	3718      	adds	r7, #24
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	0800b6b4 	.word	0x0800b6b4
 8006fcc:	0800b6dc 	.word	0x0800b6dc
 8006fd0:	0800b6e8 	.word	0x0800b6e8
 8006fd4:	0800b720 	.word	0x0800b720
 8006fd8:	20000274 	.word	0x20000274
 8006fdc:	0800b734 	.word	0x0800b734
 8006fe0:	0800b748 	.word	0x0800b748

08006fe4 <alarm_view_mode>:

// alarm view mode
void alarm_view_mode (FLAG_SYSTEM *flag_alarm_view_mode, SYSTEM_STATE *system_state, SYSTEM_PARAM_DATA_ALARM_VIEW_MODE *alarm_view_mode, uint16_t battery_percentage)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b08a      	sub	sp, #40	@ 0x28
 8006fe8:	af02      	add	r7, sp, #8
 8006fea:	60f8      	str	r0, [r7, #12]
 8006fec:	60b9      	str	r1, [r7, #8]
 8006fee:	607a      	str	r2, [r7, #4]
 8006ff0:	807b      	strh	r3, [r7, #2]
	UBYTE *BlackImage;

	UWORD Imagesize = ((EPD_2IN9_V2_WIDTH % 8 == 0)? (EPD_2IN9_V2_WIDTH / 8 ): (EPD_2IN9_V2_WIDTH / 8 + 1)) * EPD_2IN9_V2_HEIGHT;
 8006ff2:	f44f 5394 	mov.w	r3, #4736	@ 0x1280
 8006ff6:	82fb      	strh	r3, [r7, #22]
    if((BlackImage = (UBYTE *)malloc(Imagesize)) == NULL) {
 8006ff8:	8afb      	ldrh	r3, [r7, #22]
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f003 fb84 	bl	800a708 <malloc>
 8007000:	4603      	mov	r3, r0
 8007002:	613b      	str	r3, [r7, #16]
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d102      	bne.n	8007010 <alarm_view_mode+0x2c>
        printf("Failed to apply for black memory...\r\n");
 800700a:	4890      	ldr	r0, [pc, #576]	@ (800724c <alarm_view_mode+0x268>)
 800700c:	f003 fd64 	bl	800aad8 <puts>
    }

	EPD_2IN9_V2_Init();
 8007010:	f7ff fc94 	bl	800693c <EPD_2IN9_V2_Init>
	if(flag_alarm_view_mode->flag_ALARM_VIEW_MODE == 1)
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	789b      	ldrb	r3, [r3, #2]
 8007018:	2b01      	cmp	r3, #1
 800701a:	f040 8093 	bne.w	8007144 <alarm_view_mode+0x160>
	{
		EPD_2IN9_V2_Init();
 800701e:	f7ff fc8d 	bl	800693c <EPD_2IN9_V2_Init>
    	EPD_2IN9_V2_Clear();
 8007022:	f7ff fd0d 	bl	8006a40 <EPD_2IN9_V2_Clear>
    	//DEV_Delay_ms(1000);
    	EPD_2IN9_V2_Init_Fast();
 8007026:	f7ff fcc7 	bl	80069b8 <EPD_2IN9_V2_Init_Fast>
    	Paint_NewImage(BlackImage, EPD_2IN9_V2_WIDTH, EPD_2IN9_V2_HEIGHT, 90, WHITE);
 800702a:	23ff      	movs	r3, #255	@ 0xff
 800702c:	9300      	str	r3, [sp, #0]
 800702e:	235a      	movs	r3, #90	@ 0x5a
 8007030:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8007034:	2180      	movs	r1, #128	@ 0x80
 8007036:	6938      	ldr	r0, [r7, #16]
 8007038:	f002 fc40 	bl	80098bc <Paint_NewImage>
    	printf("Drawing\r\n");
 800703c:	4884      	ldr	r0, [pc, #528]	@ (8007250 <alarm_view_mode+0x26c>)
 800703e:	f003 fd4b 	bl	800aad8 <puts>
    	//1.Select Image
    	Paint_SelectImage(BlackImage);
 8007042:	6938      	ldr	r0, [r7, #16]
 8007044:	f002 fc8e 	bl	8009964 <Paint_SelectImage>
    	Paint_Clear(WHITE);
 8007048:	20ff      	movs	r0, #255	@ 0xff
 800704a:	f002 fde7 	bl	8009c1c <Paint_Clear>

    	// 2.Drawing view mode
    	printf("Drawing:BlackImage\r\n");
 800704e:	4881      	ldr	r0, [pc, #516]	@ (8007254 <alarm_view_mode+0x270>)
 8007050:	f003 fd42 	bl	800aad8 <puts>
        //parameter 1
    	Paint_DrawString_EN(10, 0, "1.", &Font16, BLACK, WHITE);
 8007054:	23ff      	movs	r3, #255	@ 0xff
 8007056:	9301      	str	r3, [sp, #4]
 8007058:	2300      	movs	r3, #0
 800705a:	9300      	str	r3, [sp, #0]
 800705c:	4b7e      	ldr	r3, [pc, #504]	@ (8007258 <alarm_view_mode+0x274>)
 800705e:	4a7f      	ldr	r2, [pc, #508]	@ (800725c <alarm_view_mode+0x278>)
 8007060:	2100      	movs	r1, #0
 8007062:	200a      	movs	r0, #10
 8007064:	f003 f934 	bl	800a2d0 <Paint_DrawString_EN>
        drawn_alarm_view_mode(140, 0, alarm_view_mode->sParam_data_alarm_setup_mode_1, Font16);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6819      	ldr	r1, [r3, #0]
 800706c:	4b7a      	ldr	r3, [pc, #488]	@ (8007258 <alarm_view_mode+0x274>)
 800706e:	685a      	ldr	r2, [r3, #4]
 8007070:	9200      	str	r2, [sp, #0]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	460a      	mov	r2, r1
 8007076:	2100      	movs	r1, #0
 8007078:	208c      	movs	r0, #140	@ 0x8c
 800707a:	f001 f985 	bl	8008388 <drawn_alarm_view_mode>
        //     break;
        // default:
        //     break;
        // }
        //parameter 2
    	Paint_DrawString_EN(10, 20, "2.", &Font16, BLACK, WHITE);
 800707e:	23ff      	movs	r3, #255	@ 0xff
 8007080:	9301      	str	r3, [sp, #4]
 8007082:	2300      	movs	r3, #0
 8007084:	9300      	str	r3, [sp, #0]
 8007086:	4b74      	ldr	r3, [pc, #464]	@ (8007258 <alarm_view_mode+0x274>)
 8007088:	4a75      	ldr	r2, [pc, #468]	@ (8007260 <alarm_view_mode+0x27c>)
 800708a:	2114      	movs	r1, #20
 800708c:	200a      	movs	r0, #10
 800708e:	f003 f91f 	bl	800a2d0 <Paint_DrawString_EN>
        drawn_alarm_view_mode(140, 20, alarm_view_mode->sParam_data_alarm_setup_mode_2, Font16);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6859      	ldr	r1, [r3, #4]
 8007096:	4b70      	ldr	r3, [pc, #448]	@ (8007258 <alarm_view_mode+0x274>)
 8007098:	685a      	ldr	r2, [r3, #4]
 800709a:	9200      	str	r2, [sp, #0]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	460a      	mov	r2, r1
 80070a0:	2114      	movs	r1, #20
 80070a2:	208c      	movs	r0, #140	@ 0x8c
 80070a4:	f001 f970 	bl	8008388 <drawn_alarm_view_mode>
        //     break;
        // default:
        //     break;
        // }
        //parameter 3
    	Paint_DrawString_EN(10, 40, "3.", &Font16, BLACK, WHITE);
 80070a8:	23ff      	movs	r3, #255	@ 0xff
 80070aa:	9301      	str	r3, [sp, #4]
 80070ac:	2300      	movs	r3, #0
 80070ae:	9300      	str	r3, [sp, #0]
 80070b0:	4b69      	ldr	r3, [pc, #420]	@ (8007258 <alarm_view_mode+0x274>)
 80070b2:	4a6c      	ldr	r2, [pc, #432]	@ (8007264 <alarm_view_mode+0x280>)
 80070b4:	2128      	movs	r1, #40	@ 0x28
 80070b6:	200a      	movs	r0, #10
 80070b8:	f003 f90a 	bl	800a2d0 <Paint_DrawString_EN>
        drawn_alarm_view_mode(140, 40, alarm_view_mode->sParam_data_alarm_setup_mode_3, Font16);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6899      	ldr	r1, [r3, #8]
 80070c0:	4b65      	ldr	r3, [pc, #404]	@ (8007258 <alarm_view_mode+0x274>)
 80070c2:	685a      	ldr	r2, [r3, #4]
 80070c4:	9200      	str	r2, [sp, #0]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	460a      	mov	r2, r1
 80070ca:	2128      	movs	r1, #40	@ 0x28
 80070cc:	208c      	movs	r0, #140	@ 0x8c
 80070ce:	f001 f95b 	bl	8008388 <drawn_alarm_view_mode>
        //     break;
        // default:
        //     break;
        // }
        //parameter 4
    	Paint_DrawString_EN(10, 60, "4.", &Font16, BLACK, WHITE);
 80070d2:	23ff      	movs	r3, #255	@ 0xff
 80070d4:	9301      	str	r3, [sp, #4]
 80070d6:	2300      	movs	r3, #0
 80070d8:	9300      	str	r3, [sp, #0]
 80070da:	4b5f      	ldr	r3, [pc, #380]	@ (8007258 <alarm_view_mode+0x274>)
 80070dc:	4a62      	ldr	r2, [pc, #392]	@ (8007268 <alarm_view_mode+0x284>)
 80070de:	213c      	movs	r1, #60	@ 0x3c
 80070e0:	200a      	movs	r0, #10
 80070e2:	f003 f8f5 	bl	800a2d0 <Paint_DrawString_EN>
        drawn_alarm_view_mode(140, 60, alarm_view_mode->sParam_data_alarm_setup_mode_4, Font16);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	68d9      	ldr	r1, [r3, #12]
 80070ea:	4b5b      	ldr	r3, [pc, #364]	@ (8007258 <alarm_view_mode+0x274>)
 80070ec:	685a      	ldr	r2, [r3, #4]
 80070ee:	9200      	str	r2, [sp, #0]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	460a      	mov	r2, r1
 80070f4:	213c      	movs	r1, #60	@ 0x3c
 80070f6:	208c      	movs	r0, #140	@ 0x8c
 80070f8:	f001 f946 	bl	8008388 <drawn_alarm_view_mode>
        //     break;
        // default:
        //     break;
        // }
        //parameter 5
    	Paint_DrawString_EN(10, 80, "5.", &Font16, BLACK, WHITE);
 80070fc:	23ff      	movs	r3, #255	@ 0xff
 80070fe:	9301      	str	r3, [sp, #4]
 8007100:	2300      	movs	r3, #0
 8007102:	9300      	str	r3, [sp, #0]
 8007104:	4b54      	ldr	r3, [pc, #336]	@ (8007258 <alarm_view_mode+0x274>)
 8007106:	4a59      	ldr	r2, [pc, #356]	@ (800726c <alarm_view_mode+0x288>)
 8007108:	2150      	movs	r1, #80	@ 0x50
 800710a:	200a      	movs	r0, #10
 800710c:	f003 f8e0 	bl	800a2d0 <Paint_DrawString_EN>
        drawn_alarm_view_mode(140, 80, alarm_view_mode->sParam_data_alarm_setup_mode_5, Font16);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6919      	ldr	r1, [r3, #16]
 8007114:	4b50      	ldr	r3, [pc, #320]	@ (8007258 <alarm_view_mode+0x274>)
 8007116:	685a      	ldr	r2, [r3, #4]
 8007118:	9200      	str	r2, [sp, #0]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	460a      	mov	r2, r1
 800711e:	2150      	movs	r1, #80	@ 0x50
 8007120:	208c      	movs	r0, #140	@ 0x8c
 8007122:	f001 f931 	bl	8008388 <drawn_alarm_view_mode>
        //     break;
        // case NOT_USED_MODE:
        //     break;
        // default:
        
    	EPD_2IN9_V2_Display_Base(BlackImage);
 8007126:	6938      	ldr	r0, [r7, #16]
 8007128:	f7ff fcd1 	bl	8006ace <EPD_2IN9_V2_Display_Base>
        flag_alarm_view_mode->flag_ALARM_SETUP_MODE  = 1;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2201      	movs	r2, #1
 8007130:	70da      	strb	r2, [r3, #3]
        flag_alarm_view_mode->flag_SYSTEM_SETUP_MODE = 1;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2201      	movs	r2, #1
 8007136:	711a      	strb	r2, [r3, #4]
        flag_alarm_view_mode->flag_DEFAULT_MODE      = 1;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2201      	movs	r2, #1
 800713c:	701a      	strb	r2, [r3, #0]
        flag_alarm_view_mode->flag_TIME_SETUP_MODE   = 1;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2201      	movs	r2, #1
 8007142:	705a      	strb	r2, [r3, #1]
	}
    UBYTE num = 3;
 8007144:	2303      	movs	r3, #3
 8007146:	77fb      	strb	r3, [r7, #31]
    uint32_t count_change_screen;
    if(system_state->alarm_view_cursor < 5)
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	791b      	ldrb	r3, [r3, #4]
 800714c:	2b04      	cmp	r3, #4
 800714e:	d802      	bhi.n	8007156 <alarm_view_mode+0x172>
    {
        count_change_screen = 0;
 8007150:	2300      	movs	r3, #0
 8007152:	61bb      	str	r3, [r7, #24]
 8007154:	e001      	b.n	800715a <alarm_view_mode+0x176>
    }

    else
    {
        count_change_screen = 1;
 8007156:	2301      	movs	r3, #1
 8007158:	61bb      	str	r3, [r7, #24]
    }

    if(count_change_screen  == 0)
 800715a:	69bb      	ldr	r3, [r7, #24]
 800715c:	2b00      	cmp	r3, #0
 800715e:	f040 831d 	bne.w	800779c <alarm_view_mode+0x7b8>
    {
        for (;;) {
            draw_battery(battery_percentage);
 8007162:	887b      	ldrh	r3, [r7, #2]
 8007164:	4618      	mov	r0, r3
 8007166:	f002 f9fb 	bl	8009560 <draw_battery>
            /*
            Paint_ClearWindows(150, 80, 150 + Font20.Width * 7, 80 + Font20.Height, WHITE);
            Paint_DrawTime(150, 80, &sPaint_time, &Font20, WHITE, BLACK);
        */
            switch (system_state->alarm_view_cursor)
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	791b      	ldrb	r3, [r3, #4]
 800716e:	2b04      	cmp	r3, #4
 8007170:	f200 8305 	bhi.w	800777e <alarm_view_mode+0x79a>
 8007174:	a201      	add	r2, pc, #4	@ (adr r2, 800717c <alarm_view_mode+0x198>)
 8007176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800717a:	bf00      	nop
 800717c:	08007191 	.word	0x08007191
 8007180:	08007271 	.word	0x08007271
 8007184:	080073af 	.word	0x080073af
 8007188:	08007505 	.word	0x08007505
 800718c:	08007643 	.word	0x08007643
            {
                case 0:
                //parameter 1
                Paint_ClearWindows(10, 0, 255, Font16.Height, WHITE);
 8007190:	4b31      	ldr	r3, [pc, #196]	@ (8007258 <alarm_view_mode+0x274>)
 8007192:	88db      	ldrh	r3, [r3, #6]
 8007194:	22ff      	movs	r2, #255	@ 0xff
 8007196:	9200      	str	r2, [sp, #0]
 8007198:	22ff      	movs	r2, #255	@ 0xff
 800719a:	2100      	movs	r1, #0
 800719c:	200a      	movs	r0, #10
 800719e:	f002 fde5 	bl	8009d6c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 0, "1.", &Font16, WHITE, BLACK);
 80071a2:	2300      	movs	r3, #0
 80071a4:	9301      	str	r3, [sp, #4]
 80071a6:	23ff      	movs	r3, #255	@ 0xff
 80071a8:	9300      	str	r3, [sp, #0]
 80071aa:	4b2b      	ldr	r3, [pc, #172]	@ (8007258 <alarm_view_mode+0x274>)
 80071ac:	4a2b      	ldr	r2, [pc, #172]	@ (800725c <alarm_view_mode+0x278>)
 80071ae:	2100      	movs	r1, #0
 80071b0:	200a      	movs	r0, #10
 80071b2:	f003 f88d 	bl	800a2d0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 0, alarm_view_mode->sParam_data_alarm_setup_mode_1, Font16);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6819      	ldr	r1, [r3, #0]
 80071ba:	4b27      	ldr	r3, [pc, #156]	@ (8007258 <alarm_view_mode+0x274>)
 80071bc:	685a      	ldr	r2, [r3, #4]
 80071be:	9200      	str	r2, [sp, #0]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	460a      	mov	r2, r1
 80071c4:	2100      	movs	r1, #0
 80071c6:	208c      	movs	r0, #140	@ 0x8c
 80071c8:	f001 f8de 	bl	8008388 <drawn_alarm_view_mode>
                //         break;
                //     default:
                //         break;
                //     }
       //parameter 2
       Paint_DrawString_EN(10, 20, "2.", &Font16, BLACK, WHITE);
 80071cc:	23ff      	movs	r3, #255	@ 0xff
 80071ce:	9301      	str	r3, [sp, #4]
 80071d0:	2300      	movs	r3, #0
 80071d2:	9300      	str	r3, [sp, #0]
 80071d4:	4b20      	ldr	r3, [pc, #128]	@ (8007258 <alarm_view_mode+0x274>)
 80071d6:	4a22      	ldr	r2, [pc, #136]	@ (8007260 <alarm_view_mode+0x27c>)
 80071d8:	2114      	movs	r1, #20
 80071da:	200a      	movs	r0, #10
 80071dc:	f003 f878 	bl	800a2d0 <Paint_DrawString_EN>
       drawn_alarm_view_mode(140, 20, alarm_view_mode->sParam_data_alarm_setup_mode_2, Font16);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6859      	ldr	r1, [r3, #4]
 80071e4:	4b1c      	ldr	r3, [pc, #112]	@ (8007258 <alarm_view_mode+0x274>)
 80071e6:	685a      	ldr	r2, [r3, #4]
 80071e8:	9200      	str	r2, [sp, #0]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	460a      	mov	r2, r1
 80071ee:	2114      	movs	r1, #20
 80071f0:	208c      	movs	r0, #140	@ 0x8c
 80071f2:	f001 f8c9 	bl	8008388 <drawn_alarm_view_mode>
    //        break;
    //    default:
    //        break;
    //    }
       //parameter 3
       Paint_DrawString_EN(10, 40, "3.", &Font16, BLACK, WHITE);
 80071f6:	23ff      	movs	r3, #255	@ 0xff
 80071f8:	9301      	str	r3, [sp, #4]
 80071fa:	2300      	movs	r3, #0
 80071fc:	9300      	str	r3, [sp, #0]
 80071fe:	4b16      	ldr	r3, [pc, #88]	@ (8007258 <alarm_view_mode+0x274>)
 8007200:	4a18      	ldr	r2, [pc, #96]	@ (8007264 <alarm_view_mode+0x280>)
 8007202:	2128      	movs	r1, #40	@ 0x28
 8007204:	200a      	movs	r0, #10
 8007206:	f003 f863 	bl	800a2d0 <Paint_DrawString_EN>
       drawn_alarm_view_mode(140, 40, alarm_view_mode->sParam_data_alarm_setup_mode_3, Font16);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6899      	ldr	r1, [r3, #8]
 800720e:	4b12      	ldr	r3, [pc, #72]	@ (8007258 <alarm_view_mode+0x274>)
 8007210:	685a      	ldr	r2, [r3, #4]
 8007212:	9200      	str	r2, [sp, #0]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	460a      	mov	r2, r1
 8007218:	2128      	movs	r1, #40	@ 0x28
 800721a:	208c      	movs	r0, #140	@ 0x8c
 800721c:	f001 f8b4 	bl	8008388 <drawn_alarm_view_mode>
    //        break;
    //    default:
    //        break;
    //    }
       //parameter 5
       Paint_DrawString_EN(10, 80, "5.", &Font16, BLACK, WHITE);
 8007220:	23ff      	movs	r3, #255	@ 0xff
 8007222:	9301      	str	r3, [sp, #4]
 8007224:	2300      	movs	r3, #0
 8007226:	9300      	str	r3, [sp, #0]
 8007228:	4b0b      	ldr	r3, [pc, #44]	@ (8007258 <alarm_view_mode+0x274>)
 800722a:	4a10      	ldr	r2, [pc, #64]	@ (800726c <alarm_view_mode+0x288>)
 800722c:	2150      	movs	r1, #80	@ 0x50
 800722e:	200a      	movs	r0, #10
 8007230:	f003 f84e 	bl	800a2d0 <Paint_DrawString_EN>
       drawn_alarm_view_mode(140, 80, alarm_view_mode->sParam_data_alarm_setup_mode_5, Font16);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6919      	ldr	r1, [r3, #16]
 8007238:	4b07      	ldr	r3, [pc, #28]	@ (8007258 <alarm_view_mode+0x274>)
 800723a:	685a      	ldr	r2, [r3, #4]
 800723c:	9200      	str	r2, [sp, #0]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	460a      	mov	r2, r1
 8007242:	2150      	movs	r1, #80	@ 0x50
 8007244:	208c      	movs	r0, #140	@ 0x8c
 8007246:	f001 f89f 	bl	8008388 <drawn_alarm_view_mode>
    //        break;
    //    default:
    //        break;
    //    }

                break;
 800724a:	e299      	b.n	8007780 <alarm_view_mode+0x79c>
 800724c:	0800b6b4 	.word	0x0800b6b4
 8007250:	0800b6dc 	.word	0x0800b6dc
 8007254:	0800b6e8 	.word	0x0800b6e8
 8007258:	20000274 	.word	0x20000274
 800725c:	0800b75c 	.word	0x0800b75c
 8007260:	0800b760 	.word	0x0800b760
 8007264:	0800b764 	.word	0x0800b764
 8007268:	0800b768 	.word	0x0800b768
 800726c:	0800b76c 	.word	0x0800b76c
        
                case 1:
                //parameter 1
                Paint_ClearWindows(10, 0, 200, Font16.Height, WHITE);
 8007270:	4b9e      	ldr	r3, [pc, #632]	@ (80074ec <alarm_view_mode+0x508>)
 8007272:	88db      	ldrh	r3, [r3, #6]
 8007274:	22ff      	movs	r2, #255	@ 0xff
 8007276:	9200      	str	r2, [sp, #0]
 8007278:	22c8      	movs	r2, #200	@ 0xc8
 800727a:	2100      	movs	r1, #0
 800727c:	200a      	movs	r0, #10
 800727e:	f002 fd75 	bl	8009d6c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 0, "1.", &Font16, BLACK, WHITE);
 8007282:	23ff      	movs	r3, #255	@ 0xff
 8007284:	9301      	str	r3, [sp, #4]
 8007286:	2300      	movs	r3, #0
 8007288:	9300      	str	r3, [sp, #0]
 800728a:	4b98      	ldr	r3, [pc, #608]	@ (80074ec <alarm_view_mode+0x508>)
 800728c:	4a98      	ldr	r2, [pc, #608]	@ (80074f0 <alarm_view_mode+0x50c>)
 800728e:	2100      	movs	r1, #0
 8007290:	200a      	movs	r0, #10
 8007292:	f003 f81d 	bl	800a2d0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 0, alarm_view_mode->sParam_data_alarm_setup_mode_1, Font16);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6819      	ldr	r1, [r3, #0]
 800729a:	4b94      	ldr	r3, [pc, #592]	@ (80074ec <alarm_view_mode+0x508>)
 800729c:	685a      	ldr	r2, [r3, #4]
 800729e:	9200      	str	r2, [sp, #0]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	460a      	mov	r2, r1
 80072a4:	2100      	movs	r1, #0
 80072a6:	208c      	movs	r0, #140	@ 0x8c
 80072a8:	f001 f86e 	bl	8008388 <drawn_alarm_view_mode>
               
                //parameter 2
                Paint_ClearWindows(10, 20, 200, 20 + Font16.Height, WHITE);
 80072ac:	4b8f      	ldr	r3, [pc, #572]	@ (80074ec <alarm_view_mode+0x508>)
 80072ae:	88db      	ldrh	r3, [r3, #6]
 80072b0:	3314      	adds	r3, #20
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	22ff      	movs	r2, #255	@ 0xff
 80072b6:	9200      	str	r2, [sp, #0]
 80072b8:	22c8      	movs	r2, #200	@ 0xc8
 80072ba:	2114      	movs	r1, #20
 80072bc:	200a      	movs	r0, #10
 80072be:	f002 fd55 	bl	8009d6c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 20, "2.", &Font16, WHITE, BLACK);
 80072c2:	2300      	movs	r3, #0
 80072c4:	9301      	str	r3, [sp, #4]
 80072c6:	23ff      	movs	r3, #255	@ 0xff
 80072c8:	9300      	str	r3, [sp, #0]
 80072ca:	4b88      	ldr	r3, [pc, #544]	@ (80074ec <alarm_view_mode+0x508>)
 80072cc:	4a89      	ldr	r2, [pc, #548]	@ (80074f4 <alarm_view_mode+0x510>)
 80072ce:	2114      	movs	r1, #20
 80072d0:	200a      	movs	r0, #10
 80072d2:	f002 fffd 	bl	800a2d0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 20, alarm_view_mode->sParam_data_alarm_setup_mode_2, Font16);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6859      	ldr	r1, [r3, #4]
 80072da:	4b84      	ldr	r3, [pc, #528]	@ (80074ec <alarm_view_mode+0x508>)
 80072dc:	685a      	ldr	r2, [r3, #4]
 80072de:	9200      	str	r2, [sp, #0]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	460a      	mov	r2, r1
 80072e4:	2114      	movs	r1, #20
 80072e6:	208c      	movs	r0, #140	@ 0x8c
 80072e8:	f001 f84e 	bl	8008388 <drawn_alarm_view_mode>
                //parameter 3
                Paint_ClearWindows(10, 40, 200, 40 + Font16.Height, WHITE);
 80072ec:	4b7f      	ldr	r3, [pc, #508]	@ (80074ec <alarm_view_mode+0x508>)
 80072ee:	88db      	ldrh	r3, [r3, #6]
 80072f0:	3328      	adds	r3, #40	@ 0x28
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	22ff      	movs	r2, #255	@ 0xff
 80072f6:	9200      	str	r2, [sp, #0]
 80072f8:	22c8      	movs	r2, #200	@ 0xc8
 80072fa:	2128      	movs	r1, #40	@ 0x28
 80072fc:	200a      	movs	r0, #10
 80072fe:	f002 fd35 	bl	8009d6c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 40, "3.", &Font16, BLACK, WHITE);
 8007302:	23ff      	movs	r3, #255	@ 0xff
 8007304:	9301      	str	r3, [sp, #4]
 8007306:	2300      	movs	r3, #0
 8007308:	9300      	str	r3, [sp, #0]
 800730a:	4b78      	ldr	r3, [pc, #480]	@ (80074ec <alarm_view_mode+0x508>)
 800730c:	4a7a      	ldr	r2, [pc, #488]	@ (80074f8 <alarm_view_mode+0x514>)
 800730e:	2128      	movs	r1, #40	@ 0x28
 8007310:	200a      	movs	r0, #10
 8007312:	f002 ffdd 	bl	800a2d0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 40, alarm_view_mode->sParam_data_alarm_setup_mode_3, Font16);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6899      	ldr	r1, [r3, #8]
 800731a:	4b74      	ldr	r3, [pc, #464]	@ (80074ec <alarm_view_mode+0x508>)
 800731c:	685a      	ldr	r2, [r3, #4]
 800731e:	9200      	str	r2, [sp, #0]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	460a      	mov	r2, r1
 8007324:	2128      	movs	r1, #40	@ 0x28
 8007326:	208c      	movs	r0, #140	@ 0x8c
 8007328:	f001 f82e 	bl	8008388 <drawn_alarm_view_mode>
                //parameter 4
                Paint_ClearWindows(10, 60, 200, 60 + Font16.Height, WHITE);
 800732c:	4b6f      	ldr	r3, [pc, #444]	@ (80074ec <alarm_view_mode+0x508>)
 800732e:	88db      	ldrh	r3, [r3, #6]
 8007330:	333c      	adds	r3, #60	@ 0x3c
 8007332:	b29b      	uxth	r3, r3
 8007334:	22ff      	movs	r2, #255	@ 0xff
 8007336:	9200      	str	r2, [sp, #0]
 8007338:	22c8      	movs	r2, #200	@ 0xc8
 800733a:	213c      	movs	r1, #60	@ 0x3c
 800733c:	200a      	movs	r0, #10
 800733e:	f002 fd15 	bl	8009d6c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 60, "4.", &Font16, BLACK, WHITE);
 8007342:	23ff      	movs	r3, #255	@ 0xff
 8007344:	9301      	str	r3, [sp, #4]
 8007346:	2300      	movs	r3, #0
 8007348:	9300      	str	r3, [sp, #0]
 800734a:	4b68      	ldr	r3, [pc, #416]	@ (80074ec <alarm_view_mode+0x508>)
 800734c:	4a6b      	ldr	r2, [pc, #428]	@ (80074fc <alarm_view_mode+0x518>)
 800734e:	213c      	movs	r1, #60	@ 0x3c
 8007350:	200a      	movs	r0, #10
 8007352:	f002 ffbd 	bl	800a2d0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 60, alarm_view_mode->sParam_data_alarm_setup_mode_4, Font16);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	68d9      	ldr	r1, [r3, #12]
 800735a:	4b64      	ldr	r3, [pc, #400]	@ (80074ec <alarm_view_mode+0x508>)
 800735c:	685a      	ldr	r2, [r3, #4]
 800735e:	9200      	str	r2, [sp, #0]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	460a      	mov	r2, r1
 8007364:	213c      	movs	r1, #60	@ 0x3c
 8007366:	208c      	movs	r0, #140	@ 0x8c
 8007368:	f001 f80e 	bl	8008388 <drawn_alarm_view_mode>
                //parameter 5
                Paint_ClearWindows(10, 80, 200, 80 + Font16.Height, WHITE);
 800736c:	4b5f      	ldr	r3, [pc, #380]	@ (80074ec <alarm_view_mode+0x508>)
 800736e:	88db      	ldrh	r3, [r3, #6]
 8007370:	3350      	adds	r3, #80	@ 0x50
 8007372:	b29b      	uxth	r3, r3
 8007374:	22ff      	movs	r2, #255	@ 0xff
 8007376:	9200      	str	r2, [sp, #0]
 8007378:	22c8      	movs	r2, #200	@ 0xc8
 800737a:	2150      	movs	r1, #80	@ 0x50
 800737c:	200a      	movs	r0, #10
 800737e:	f002 fcf5 	bl	8009d6c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 80, "5.", &Font16, BLACK, WHITE);
 8007382:	23ff      	movs	r3, #255	@ 0xff
 8007384:	9301      	str	r3, [sp, #4]
 8007386:	2300      	movs	r3, #0
 8007388:	9300      	str	r3, [sp, #0]
 800738a:	4b58      	ldr	r3, [pc, #352]	@ (80074ec <alarm_view_mode+0x508>)
 800738c:	4a5c      	ldr	r2, [pc, #368]	@ (8007500 <alarm_view_mode+0x51c>)
 800738e:	2150      	movs	r1, #80	@ 0x50
 8007390:	200a      	movs	r0, #10
 8007392:	f002 ff9d 	bl	800a2d0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 80, alarm_view_mode->sParam_data_alarm_setup_mode_5, Font16);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6919      	ldr	r1, [r3, #16]
 800739a:	4b54      	ldr	r3, [pc, #336]	@ (80074ec <alarm_view_mode+0x508>)
 800739c:	685a      	ldr	r2, [r3, #4]
 800739e:	9200      	str	r2, [sp, #0]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	460a      	mov	r2, r1
 80073a4:	2150      	movs	r1, #80	@ 0x50
 80073a6:	208c      	movs	r0, #140	@ 0x8c
 80073a8:	f000 ffee 	bl	8008388 <drawn_alarm_view_mode>
                break;
 80073ac:	e1e8      	b.n	8007780 <alarm_view_mode+0x79c>
        
                case 2:
                //parameter 1
                Paint_ClearWindows(10, 0, 200, Font16.Height, WHITE);
 80073ae:	4b4f      	ldr	r3, [pc, #316]	@ (80074ec <alarm_view_mode+0x508>)
 80073b0:	88db      	ldrh	r3, [r3, #6]
 80073b2:	22ff      	movs	r2, #255	@ 0xff
 80073b4:	9200      	str	r2, [sp, #0]
 80073b6:	22c8      	movs	r2, #200	@ 0xc8
 80073b8:	2100      	movs	r1, #0
 80073ba:	200a      	movs	r0, #10
 80073bc:	f002 fcd6 	bl	8009d6c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 0, "1.", &Font16, BLACK, WHITE);
 80073c0:	23ff      	movs	r3, #255	@ 0xff
 80073c2:	9301      	str	r3, [sp, #4]
 80073c4:	2300      	movs	r3, #0
 80073c6:	9300      	str	r3, [sp, #0]
 80073c8:	4b48      	ldr	r3, [pc, #288]	@ (80074ec <alarm_view_mode+0x508>)
 80073ca:	4a49      	ldr	r2, [pc, #292]	@ (80074f0 <alarm_view_mode+0x50c>)
 80073cc:	2100      	movs	r1, #0
 80073ce:	200a      	movs	r0, #10
 80073d0:	f002 ff7e 	bl	800a2d0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 0, alarm_view_mode->sParam_data_alarm_setup_mode_1, Font16);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6819      	ldr	r1, [r3, #0]
 80073d8:	4b44      	ldr	r3, [pc, #272]	@ (80074ec <alarm_view_mode+0x508>)
 80073da:	685a      	ldr	r2, [r3, #4]
 80073dc:	9200      	str	r2, [sp, #0]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	460a      	mov	r2, r1
 80073e2:	2100      	movs	r1, #0
 80073e4:	208c      	movs	r0, #140	@ 0x8c
 80073e6:	f000 ffcf 	bl	8008388 <drawn_alarm_view_mode>
                
                //parameter 2
                Paint_ClearWindows(10, 20, 200, 20 + Font16.Height, WHITE);
 80073ea:	4b40      	ldr	r3, [pc, #256]	@ (80074ec <alarm_view_mode+0x508>)
 80073ec:	88db      	ldrh	r3, [r3, #6]
 80073ee:	3314      	adds	r3, #20
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	22ff      	movs	r2, #255	@ 0xff
 80073f4:	9200      	str	r2, [sp, #0]
 80073f6:	22c8      	movs	r2, #200	@ 0xc8
 80073f8:	2114      	movs	r1, #20
 80073fa:	200a      	movs	r0, #10
 80073fc:	f002 fcb6 	bl	8009d6c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 20, "2.", &Font16, BLACK, WHITE);
 8007400:	23ff      	movs	r3, #255	@ 0xff
 8007402:	9301      	str	r3, [sp, #4]
 8007404:	2300      	movs	r3, #0
 8007406:	9300      	str	r3, [sp, #0]
 8007408:	4b38      	ldr	r3, [pc, #224]	@ (80074ec <alarm_view_mode+0x508>)
 800740a:	4a3a      	ldr	r2, [pc, #232]	@ (80074f4 <alarm_view_mode+0x510>)
 800740c:	2114      	movs	r1, #20
 800740e:	200a      	movs	r0, #10
 8007410:	f002 ff5e 	bl	800a2d0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 20, alarm_view_mode->sParam_data_alarm_setup_mode_2, Font16);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6859      	ldr	r1, [r3, #4]
 8007418:	4b34      	ldr	r3, [pc, #208]	@ (80074ec <alarm_view_mode+0x508>)
 800741a:	685a      	ldr	r2, [r3, #4]
 800741c:	9200      	str	r2, [sp, #0]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	460a      	mov	r2, r1
 8007422:	2114      	movs	r1, #20
 8007424:	208c      	movs	r0, #140	@ 0x8c
 8007426:	f000 ffaf 	bl	8008388 <drawn_alarm_view_mode>

                //parameter 3
                Paint_ClearWindows(10, 40, 200, 40 + Font16.Height, WHITE);
 800742a:	4b30      	ldr	r3, [pc, #192]	@ (80074ec <alarm_view_mode+0x508>)
 800742c:	88db      	ldrh	r3, [r3, #6]
 800742e:	3328      	adds	r3, #40	@ 0x28
 8007430:	b29b      	uxth	r3, r3
 8007432:	22ff      	movs	r2, #255	@ 0xff
 8007434:	9200      	str	r2, [sp, #0]
 8007436:	22c8      	movs	r2, #200	@ 0xc8
 8007438:	2128      	movs	r1, #40	@ 0x28
 800743a:	200a      	movs	r0, #10
 800743c:	f002 fc96 	bl	8009d6c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 40, "3.", &Font16, WHITE, BLACK);
 8007440:	2300      	movs	r3, #0
 8007442:	9301      	str	r3, [sp, #4]
 8007444:	23ff      	movs	r3, #255	@ 0xff
 8007446:	9300      	str	r3, [sp, #0]
 8007448:	4b28      	ldr	r3, [pc, #160]	@ (80074ec <alarm_view_mode+0x508>)
 800744a:	4a2b      	ldr	r2, [pc, #172]	@ (80074f8 <alarm_view_mode+0x514>)
 800744c:	2128      	movs	r1, #40	@ 0x28
 800744e:	200a      	movs	r0, #10
 8007450:	f002 ff3e 	bl	800a2d0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 40, alarm_view_mode->sParam_data_alarm_setup_mode_3, Font16);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6899      	ldr	r1, [r3, #8]
 8007458:	4b24      	ldr	r3, [pc, #144]	@ (80074ec <alarm_view_mode+0x508>)
 800745a:	685a      	ldr	r2, [r3, #4]
 800745c:	9200      	str	r2, [sp, #0]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	460a      	mov	r2, r1
 8007462:	2128      	movs	r1, #40	@ 0x28
 8007464:	208c      	movs	r0, #140	@ 0x8c
 8007466:	f000 ff8f 	bl	8008388 <drawn_alarm_view_mode>

                //parameter 4
                Paint_ClearWindows(10, 60, 200, 60 + Font16.Height, WHITE);
 800746a:	4b20      	ldr	r3, [pc, #128]	@ (80074ec <alarm_view_mode+0x508>)
 800746c:	88db      	ldrh	r3, [r3, #6]
 800746e:	333c      	adds	r3, #60	@ 0x3c
 8007470:	b29b      	uxth	r3, r3
 8007472:	22ff      	movs	r2, #255	@ 0xff
 8007474:	9200      	str	r2, [sp, #0]
 8007476:	22c8      	movs	r2, #200	@ 0xc8
 8007478:	213c      	movs	r1, #60	@ 0x3c
 800747a:	200a      	movs	r0, #10
 800747c:	f002 fc76 	bl	8009d6c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 60, "4.", &Font16, BLACK, WHITE);
 8007480:	23ff      	movs	r3, #255	@ 0xff
 8007482:	9301      	str	r3, [sp, #4]
 8007484:	2300      	movs	r3, #0
 8007486:	9300      	str	r3, [sp, #0]
 8007488:	4b18      	ldr	r3, [pc, #96]	@ (80074ec <alarm_view_mode+0x508>)
 800748a:	4a1c      	ldr	r2, [pc, #112]	@ (80074fc <alarm_view_mode+0x518>)
 800748c:	213c      	movs	r1, #60	@ 0x3c
 800748e:	200a      	movs	r0, #10
 8007490:	f002 ff1e 	bl	800a2d0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 60, alarm_view_mode->sParam_data_alarm_setup_mode_4, Font16);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	68d9      	ldr	r1, [r3, #12]
 8007498:	4b14      	ldr	r3, [pc, #80]	@ (80074ec <alarm_view_mode+0x508>)
 800749a:	685a      	ldr	r2, [r3, #4]
 800749c:	9200      	str	r2, [sp, #0]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	460a      	mov	r2, r1
 80074a2:	213c      	movs	r1, #60	@ 0x3c
 80074a4:	208c      	movs	r0, #140	@ 0x8c
 80074a6:	f000 ff6f 	bl	8008388 <drawn_alarm_view_mode>

                //parameter 5
                Paint_ClearWindows(10, 80, 200, 80 + Font16.Height, WHITE);
 80074aa:	4b10      	ldr	r3, [pc, #64]	@ (80074ec <alarm_view_mode+0x508>)
 80074ac:	88db      	ldrh	r3, [r3, #6]
 80074ae:	3350      	adds	r3, #80	@ 0x50
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	22ff      	movs	r2, #255	@ 0xff
 80074b4:	9200      	str	r2, [sp, #0]
 80074b6:	22c8      	movs	r2, #200	@ 0xc8
 80074b8:	2150      	movs	r1, #80	@ 0x50
 80074ba:	200a      	movs	r0, #10
 80074bc:	f002 fc56 	bl	8009d6c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 80, "5.", &Font16, BLACK, WHITE);
 80074c0:	23ff      	movs	r3, #255	@ 0xff
 80074c2:	9301      	str	r3, [sp, #4]
 80074c4:	2300      	movs	r3, #0
 80074c6:	9300      	str	r3, [sp, #0]
 80074c8:	4b08      	ldr	r3, [pc, #32]	@ (80074ec <alarm_view_mode+0x508>)
 80074ca:	4a0d      	ldr	r2, [pc, #52]	@ (8007500 <alarm_view_mode+0x51c>)
 80074cc:	2150      	movs	r1, #80	@ 0x50
 80074ce:	200a      	movs	r0, #10
 80074d0:	f002 fefe 	bl	800a2d0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 80, alarm_view_mode->sParam_data_alarm_setup_mode_5, Font16);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6919      	ldr	r1, [r3, #16]
 80074d8:	4b04      	ldr	r3, [pc, #16]	@ (80074ec <alarm_view_mode+0x508>)
 80074da:	685a      	ldr	r2, [r3, #4]
 80074dc:	9200      	str	r2, [sp, #0]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	460a      	mov	r2, r1
 80074e2:	2150      	movs	r1, #80	@ 0x50
 80074e4:	208c      	movs	r0, #140	@ 0x8c
 80074e6:	f000 ff4f 	bl	8008388 <drawn_alarm_view_mode>

                break;
 80074ea:	e149      	b.n	8007780 <alarm_view_mode+0x79c>
 80074ec:	20000274 	.word	0x20000274
 80074f0:	0800b75c 	.word	0x0800b75c
 80074f4:	0800b760 	.word	0x0800b760
 80074f8:	0800b764 	.word	0x0800b764
 80074fc:	0800b768 	.word	0x0800b768
 8007500:	0800b76c 	.word	0x0800b76c
                case 3:
                //parameter 1
                Paint_ClearWindows(10, 0, 200, Font16.Height, WHITE);
 8007504:	4bb1      	ldr	r3, [pc, #708]	@ (80077cc <alarm_view_mode+0x7e8>)
 8007506:	88db      	ldrh	r3, [r3, #6]
 8007508:	22ff      	movs	r2, #255	@ 0xff
 800750a:	9200      	str	r2, [sp, #0]
 800750c:	22c8      	movs	r2, #200	@ 0xc8
 800750e:	2100      	movs	r1, #0
 8007510:	200a      	movs	r0, #10
 8007512:	f002 fc2b 	bl	8009d6c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 0, "1.", &Font16, BLACK, WHITE);
 8007516:	23ff      	movs	r3, #255	@ 0xff
 8007518:	9301      	str	r3, [sp, #4]
 800751a:	2300      	movs	r3, #0
 800751c:	9300      	str	r3, [sp, #0]
 800751e:	4bab      	ldr	r3, [pc, #684]	@ (80077cc <alarm_view_mode+0x7e8>)
 8007520:	4aab      	ldr	r2, [pc, #684]	@ (80077d0 <alarm_view_mode+0x7ec>)
 8007522:	2100      	movs	r1, #0
 8007524:	200a      	movs	r0, #10
 8007526:	f002 fed3 	bl	800a2d0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 0, alarm_view_mode->sParam_data_alarm_setup_mode_1, Font16);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6819      	ldr	r1, [r3, #0]
 800752e:	4ba7      	ldr	r3, [pc, #668]	@ (80077cc <alarm_view_mode+0x7e8>)
 8007530:	685a      	ldr	r2, [r3, #4]
 8007532:	9200      	str	r2, [sp, #0]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	460a      	mov	r2, r1
 8007538:	2100      	movs	r1, #0
 800753a:	208c      	movs	r0, #140	@ 0x8c
 800753c:	f000 ff24 	bl	8008388 <drawn_alarm_view_mode>

                //parameter 2
                Paint_ClearWindows(10, 20, 200, 20 + Font16.Height, WHITE);
 8007540:	4ba2      	ldr	r3, [pc, #648]	@ (80077cc <alarm_view_mode+0x7e8>)
 8007542:	88db      	ldrh	r3, [r3, #6]
 8007544:	3314      	adds	r3, #20
 8007546:	b29b      	uxth	r3, r3
 8007548:	22ff      	movs	r2, #255	@ 0xff
 800754a:	9200      	str	r2, [sp, #0]
 800754c:	22c8      	movs	r2, #200	@ 0xc8
 800754e:	2114      	movs	r1, #20
 8007550:	200a      	movs	r0, #10
 8007552:	f002 fc0b 	bl	8009d6c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 20, "2.", &Font16, BLACK, WHITE);
 8007556:	23ff      	movs	r3, #255	@ 0xff
 8007558:	9301      	str	r3, [sp, #4]
 800755a:	2300      	movs	r3, #0
 800755c:	9300      	str	r3, [sp, #0]
 800755e:	4b9b      	ldr	r3, [pc, #620]	@ (80077cc <alarm_view_mode+0x7e8>)
 8007560:	4a9c      	ldr	r2, [pc, #624]	@ (80077d4 <alarm_view_mode+0x7f0>)
 8007562:	2114      	movs	r1, #20
 8007564:	200a      	movs	r0, #10
 8007566:	f002 feb3 	bl	800a2d0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 20, alarm_view_mode->sParam_data_alarm_setup_mode_2, Font16);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6859      	ldr	r1, [r3, #4]
 800756e:	4b97      	ldr	r3, [pc, #604]	@ (80077cc <alarm_view_mode+0x7e8>)
 8007570:	685a      	ldr	r2, [r3, #4]
 8007572:	9200      	str	r2, [sp, #0]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	460a      	mov	r2, r1
 8007578:	2114      	movs	r1, #20
 800757a:	208c      	movs	r0, #140	@ 0x8c
 800757c:	f000 ff04 	bl	8008388 <drawn_alarm_view_mode>
                //parameter 3

                Paint_ClearWindows(10, 40, 200, 40 + Font16.Height, WHITE);
 8007580:	4b92      	ldr	r3, [pc, #584]	@ (80077cc <alarm_view_mode+0x7e8>)
 8007582:	88db      	ldrh	r3, [r3, #6]
 8007584:	3328      	adds	r3, #40	@ 0x28
 8007586:	b29b      	uxth	r3, r3
 8007588:	22ff      	movs	r2, #255	@ 0xff
 800758a:	9200      	str	r2, [sp, #0]
 800758c:	22c8      	movs	r2, #200	@ 0xc8
 800758e:	2128      	movs	r1, #40	@ 0x28
 8007590:	200a      	movs	r0, #10
 8007592:	f002 fbeb 	bl	8009d6c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 40, "3.", &Font16, BLACK, WHITE);
 8007596:	23ff      	movs	r3, #255	@ 0xff
 8007598:	9301      	str	r3, [sp, #4]
 800759a:	2300      	movs	r3, #0
 800759c:	9300      	str	r3, [sp, #0]
 800759e:	4b8b      	ldr	r3, [pc, #556]	@ (80077cc <alarm_view_mode+0x7e8>)
 80075a0:	4a8d      	ldr	r2, [pc, #564]	@ (80077d8 <alarm_view_mode+0x7f4>)
 80075a2:	2128      	movs	r1, #40	@ 0x28
 80075a4:	200a      	movs	r0, #10
 80075a6:	f002 fe93 	bl	800a2d0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 40, alarm_view_mode->sParam_data_alarm_setup_mode_3, Font16);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6899      	ldr	r1, [r3, #8]
 80075ae:	4b87      	ldr	r3, [pc, #540]	@ (80077cc <alarm_view_mode+0x7e8>)
 80075b0:	685a      	ldr	r2, [r3, #4]
 80075b2:	9200      	str	r2, [sp, #0]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	460a      	mov	r2, r1
 80075b8:	2128      	movs	r1, #40	@ 0x28
 80075ba:	208c      	movs	r0, #140	@ 0x8c
 80075bc:	f000 fee4 	bl	8008388 <drawn_alarm_view_mode>

                //parameter 4

                Paint_ClearWindows(10, 60, 200, 60 + Font16.Height, WHITE);
 80075c0:	4b82      	ldr	r3, [pc, #520]	@ (80077cc <alarm_view_mode+0x7e8>)
 80075c2:	88db      	ldrh	r3, [r3, #6]
 80075c4:	333c      	adds	r3, #60	@ 0x3c
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	22ff      	movs	r2, #255	@ 0xff
 80075ca:	9200      	str	r2, [sp, #0]
 80075cc:	22c8      	movs	r2, #200	@ 0xc8
 80075ce:	213c      	movs	r1, #60	@ 0x3c
 80075d0:	200a      	movs	r0, #10
 80075d2:	f002 fbcb 	bl	8009d6c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 60, "4.", &Font16, WHITE, BLACK);
 80075d6:	2300      	movs	r3, #0
 80075d8:	9301      	str	r3, [sp, #4]
 80075da:	23ff      	movs	r3, #255	@ 0xff
 80075dc:	9300      	str	r3, [sp, #0]
 80075de:	4b7b      	ldr	r3, [pc, #492]	@ (80077cc <alarm_view_mode+0x7e8>)
 80075e0:	4a7e      	ldr	r2, [pc, #504]	@ (80077dc <alarm_view_mode+0x7f8>)
 80075e2:	213c      	movs	r1, #60	@ 0x3c
 80075e4:	200a      	movs	r0, #10
 80075e6:	f002 fe73 	bl	800a2d0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 60, alarm_view_mode->sParam_data_alarm_setup_mode_4, Font16);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	68d9      	ldr	r1, [r3, #12]
 80075ee:	4b77      	ldr	r3, [pc, #476]	@ (80077cc <alarm_view_mode+0x7e8>)
 80075f0:	685a      	ldr	r2, [r3, #4]
 80075f2:	9200      	str	r2, [sp, #0]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	460a      	mov	r2, r1
 80075f8:	213c      	movs	r1, #60	@ 0x3c
 80075fa:	208c      	movs	r0, #140	@ 0x8c
 80075fc:	f000 fec4 	bl	8008388 <drawn_alarm_view_mode>

                //parameter 5
                Paint_ClearWindows(10, 80, 200, 80 + Font16.Height, WHITE);
 8007600:	4b72      	ldr	r3, [pc, #456]	@ (80077cc <alarm_view_mode+0x7e8>)
 8007602:	88db      	ldrh	r3, [r3, #6]
 8007604:	3350      	adds	r3, #80	@ 0x50
 8007606:	b29b      	uxth	r3, r3
 8007608:	22ff      	movs	r2, #255	@ 0xff
 800760a:	9200      	str	r2, [sp, #0]
 800760c:	22c8      	movs	r2, #200	@ 0xc8
 800760e:	2150      	movs	r1, #80	@ 0x50
 8007610:	200a      	movs	r0, #10
 8007612:	f002 fbab 	bl	8009d6c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 80, "5.", &Font16, BLACK, WHITE);
 8007616:	23ff      	movs	r3, #255	@ 0xff
 8007618:	9301      	str	r3, [sp, #4]
 800761a:	2300      	movs	r3, #0
 800761c:	9300      	str	r3, [sp, #0]
 800761e:	4b6b      	ldr	r3, [pc, #428]	@ (80077cc <alarm_view_mode+0x7e8>)
 8007620:	4a6f      	ldr	r2, [pc, #444]	@ (80077e0 <alarm_view_mode+0x7fc>)
 8007622:	2150      	movs	r1, #80	@ 0x50
 8007624:	200a      	movs	r0, #10
 8007626:	f002 fe53 	bl	800a2d0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 80, alarm_view_mode->sParam_data_alarm_setup_mode_5, Font16);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6919      	ldr	r1, [r3, #16]
 800762e:	4b67      	ldr	r3, [pc, #412]	@ (80077cc <alarm_view_mode+0x7e8>)
 8007630:	685a      	ldr	r2, [r3, #4]
 8007632:	9200      	str	r2, [sp, #0]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	460a      	mov	r2, r1
 8007638:	2150      	movs	r1, #80	@ 0x50
 800763a:	208c      	movs	r0, #140	@ 0x8c
 800763c:	f000 fea4 	bl	8008388 <drawn_alarm_view_mode>

                break;
 8007640:	e09e      	b.n	8007780 <alarm_view_mode+0x79c>
        
                case 4:
                //parameter 1
                Paint_ClearWindows(10, 0, 200, Font16.Height, WHITE);
 8007642:	4b62      	ldr	r3, [pc, #392]	@ (80077cc <alarm_view_mode+0x7e8>)
 8007644:	88db      	ldrh	r3, [r3, #6]
 8007646:	22ff      	movs	r2, #255	@ 0xff
 8007648:	9200      	str	r2, [sp, #0]
 800764a:	22c8      	movs	r2, #200	@ 0xc8
 800764c:	2100      	movs	r1, #0
 800764e:	200a      	movs	r0, #10
 8007650:	f002 fb8c 	bl	8009d6c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 0, "1.", &Font16, BLACK, WHITE);
 8007654:	23ff      	movs	r3, #255	@ 0xff
 8007656:	9301      	str	r3, [sp, #4]
 8007658:	2300      	movs	r3, #0
 800765a:	9300      	str	r3, [sp, #0]
 800765c:	4b5b      	ldr	r3, [pc, #364]	@ (80077cc <alarm_view_mode+0x7e8>)
 800765e:	4a5c      	ldr	r2, [pc, #368]	@ (80077d0 <alarm_view_mode+0x7ec>)
 8007660:	2100      	movs	r1, #0
 8007662:	200a      	movs	r0, #10
 8007664:	f002 fe34 	bl	800a2d0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 0, alarm_view_mode->sParam_data_alarm_setup_mode_1, Font16);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6819      	ldr	r1, [r3, #0]
 800766c:	4b57      	ldr	r3, [pc, #348]	@ (80077cc <alarm_view_mode+0x7e8>)
 800766e:	685a      	ldr	r2, [r3, #4]
 8007670:	9200      	str	r2, [sp, #0]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	460a      	mov	r2, r1
 8007676:	2100      	movs	r1, #0
 8007678:	208c      	movs	r0, #140	@ 0x8c
 800767a:	f000 fe85 	bl	8008388 <drawn_alarm_view_mode>

                //parameter 2
                Paint_ClearWindows(10, 20, 200, 20 + Font16.Height, WHITE);
 800767e:	4b53      	ldr	r3, [pc, #332]	@ (80077cc <alarm_view_mode+0x7e8>)
 8007680:	88db      	ldrh	r3, [r3, #6]
 8007682:	3314      	adds	r3, #20
 8007684:	b29b      	uxth	r3, r3
 8007686:	22ff      	movs	r2, #255	@ 0xff
 8007688:	9200      	str	r2, [sp, #0]
 800768a:	22c8      	movs	r2, #200	@ 0xc8
 800768c:	2114      	movs	r1, #20
 800768e:	200a      	movs	r0, #10
 8007690:	f002 fb6c 	bl	8009d6c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 20, "2.", &Font16, BLACK, WHITE);
 8007694:	23ff      	movs	r3, #255	@ 0xff
 8007696:	9301      	str	r3, [sp, #4]
 8007698:	2300      	movs	r3, #0
 800769a:	9300      	str	r3, [sp, #0]
 800769c:	4b4b      	ldr	r3, [pc, #300]	@ (80077cc <alarm_view_mode+0x7e8>)
 800769e:	4a4d      	ldr	r2, [pc, #308]	@ (80077d4 <alarm_view_mode+0x7f0>)
 80076a0:	2114      	movs	r1, #20
 80076a2:	200a      	movs	r0, #10
 80076a4:	f002 fe14 	bl	800a2d0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 20, alarm_view_mode->sParam_data_alarm_setup_mode_2, Font16);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6859      	ldr	r1, [r3, #4]
 80076ac:	4b47      	ldr	r3, [pc, #284]	@ (80077cc <alarm_view_mode+0x7e8>)
 80076ae:	685a      	ldr	r2, [r3, #4]
 80076b0:	9200      	str	r2, [sp, #0]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	460a      	mov	r2, r1
 80076b6:	2114      	movs	r1, #20
 80076b8:	208c      	movs	r0, #140	@ 0x8c
 80076ba:	f000 fe65 	bl	8008388 <drawn_alarm_view_mode>

                //parameter 3
                Paint_ClearWindows(10, 40, 200, 40 + Font16.Height, WHITE);
 80076be:	4b43      	ldr	r3, [pc, #268]	@ (80077cc <alarm_view_mode+0x7e8>)
 80076c0:	88db      	ldrh	r3, [r3, #6]
 80076c2:	3328      	adds	r3, #40	@ 0x28
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	22ff      	movs	r2, #255	@ 0xff
 80076c8:	9200      	str	r2, [sp, #0]
 80076ca:	22c8      	movs	r2, #200	@ 0xc8
 80076cc:	2128      	movs	r1, #40	@ 0x28
 80076ce:	200a      	movs	r0, #10
 80076d0:	f002 fb4c 	bl	8009d6c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 40, "3.", &Font16, BLACK, WHITE);
 80076d4:	23ff      	movs	r3, #255	@ 0xff
 80076d6:	9301      	str	r3, [sp, #4]
 80076d8:	2300      	movs	r3, #0
 80076da:	9300      	str	r3, [sp, #0]
 80076dc:	4b3b      	ldr	r3, [pc, #236]	@ (80077cc <alarm_view_mode+0x7e8>)
 80076de:	4a3e      	ldr	r2, [pc, #248]	@ (80077d8 <alarm_view_mode+0x7f4>)
 80076e0:	2128      	movs	r1, #40	@ 0x28
 80076e2:	200a      	movs	r0, #10
 80076e4:	f002 fdf4 	bl	800a2d0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 40, alarm_view_mode->sParam_data_alarm_setup_mode_3, Font16);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6899      	ldr	r1, [r3, #8]
 80076ec:	4b37      	ldr	r3, [pc, #220]	@ (80077cc <alarm_view_mode+0x7e8>)
 80076ee:	685a      	ldr	r2, [r3, #4]
 80076f0:	9200      	str	r2, [sp, #0]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	460a      	mov	r2, r1
 80076f6:	2128      	movs	r1, #40	@ 0x28
 80076f8:	208c      	movs	r0, #140	@ 0x8c
 80076fa:	f000 fe45 	bl	8008388 <drawn_alarm_view_mode>

                //parameter 4
                Paint_ClearWindows(10, 60, 200, 60 + Font16.Height, WHITE);
 80076fe:	4b33      	ldr	r3, [pc, #204]	@ (80077cc <alarm_view_mode+0x7e8>)
 8007700:	88db      	ldrh	r3, [r3, #6]
 8007702:	333c      	adds	r3, #60	@ 0x3c
 8007704:	b29b      	uxth	r3, r3
 8007706:	22ff      	movs	r2, #255	@ 0xff
 8007708:	9200      	str	r2, [sp, #0]
 800770a:	22c8      	movs	r2, #200	@ 0xc8
 800770c:	213c      	movs	r1, #60	@ 0x3c
 800770e:	200a      	movs	r0, #10
 8007710:	f002 fb2c 	bl	8009d6c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 60, "4.", &Font16, BLACK, WHITE);
 8007714:	23ff      	movs	r3, #255	@ 0xff
 8007716:	9301      	str	r3, [sp, #4]
 8007718:	2300      	movs	r3, #0
 800771a:	9300      	str	r3, [sp, #0]
 800771c:	4b2b      	ldr	r3, [pc, #172]	@ (80077cc <alarm_view_mode+0x7e8>)
 800771e:	4a2f      	ldr	r2, [pc, #188]	@ (80077dc <alarm_view_mode+0x7f8>)
 8007720:	213c      	movs	r1, #60	@ 0x3c
 8007722:	200a      	movs	r0, #10
 8007724:	f002 fdd4 	bl	800a2d0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 60, alarm_view_mode->sParam_data_alarm_setup_mode_4, Font16);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	68d9      	ldr	r1, [r3, #12]
 800772c:	4b27      	ldr	r3, [pc, #156]	@ (80077cc <alarm_view_mode+0x7e8>)
 800772e:	685a      	ldr	r2, [r3, #4]
 8007730:	9200      	str	r2, [sp, #0]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	460a      	mov	r2, r1
 8007736:	213c      	movs	r1, #60	@ 0x3c
 8007738:	208c      	movs	r0, #140	@ 0x8c
 800773a:	f000 fe25 	bl	8008388 <drawn_alarm_view_mode>

                //parameter 5
                Paint_ClearWindows(10, 80, 200, 80 + Font16.Height, WHITE);
 800773e:	4b23      	ldr	r3, [pc, #140]	@ (80077cc <alarm_view_mode+0x7e8>)
 8007740:	88db      	ldrh	r3, [r3, #6]
 8007742:	3350      	adds	r3, #80	@ 0x50
 8007744:	b29b      	uxth	r3, r3
 8007746:	22ff      	movs	r2, #255	@ 0xff
 8007748:	9200      	str	r2, [sp, #0]
 800774a:	22c8      	movs	r2, #200	@ 0xc8
 800774c:	2150      	movs	r1, #80	@ 0x50
 800774e:	200a      	movs	r0, #10
 8007750:	f002 fb0c 	bl	8009d6c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 80, "5.", &Font16, WHITE, BLACK);
 8007754:	2300      	movs	r3, #0
 8007756:	9301      	str	r3, [sp, #4]
 8007758:	23ff      	movs	r3, #255	@ 0xff
 800775a:	9300      	str	r3, [sp, #0]
 800775c:	4b1b      	ldr	r3, [pc, #108]	@ (80077cc <alarm_view_mode+0x7e8>)
 800775e:	4a20      	ldr	r2, [pc, #128]	@ (80077e0 <alarm_view_mode+0x7fc>)
 8007760:	2150      	movs	r1, #80	@ 0x50
 8007762:	200a      	movs	r0, #10
 8007764:	f002 fdb4 	bl	800a2d0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 80, alarm_view_mode->sParam_data_alarm_setup_mode_5, Font16);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6919      	ldr	r1, [r3, #16]
 800776c:	4b17      	ldr	r3, [pc, #92]	@ (80077cc <alarm_view_mode+0x7e8>)
 800776e:	685a      	ldr	r2, [r3, #4]
 8007770:	9200      	str	r2, [sp, #0]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	460a      	mov	r2, r1
 8007776:	2150      	movs	r1, #80	@ 0x50
 8007778:	208c      	movs	r0, #140	@ 0x8c
 800777a:	f000 fe05 	bl	8008388 <drawn_alarm_view_mode>
                default: break;
 800777e:	bf00      	nop
            }

    num = num - 1;
 8007780:	7ffb      	ldrb	r3, [r7, #31]
 8007782:	3b01      	subs	r3, #1
 8007784:	77fb      	strb	r3, [r7, #31]
    if(num == 0) {
 8007786:	7ffb      	ldrb	r3, [r7, #31]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d103      	bne.n	8007794 <alarm_view_mode+0x7b0>
        num = 3;
 800778c:	2303      	movs	r3, #3
 800778e:	77fb      	strb	r3, [r7, #31]
        break;
 8007790:	f000 bde2 	b.w	8008358 <alarm_view_mode+0x1374>
    }
	EPD_2IN9_V2_Display_Partial(BlackImage);
 8007794:	6938      	ldr	r0, [r7, #16]
 8007796:	f7ff f9cd 	bl	8006b34 <EPD_2IN9_V2_Display_Partial>
            draw_battery(battery_percentage);
 800779a:	e4e2      	b.n	8007162 <alarm_view_mode+0x17e>

    else
    {
        for (;;) 
        {
            draw_battery(battery_percentage);
 800779c:	887b      	ldrh	r3, [r7, #2]
 800779e:	4618      	mov	r0, r3
 80077a0:	f001 fede 	bl	8009560 <draw_battery>
            /*
            Paint_ClearWindows(150, 80, 150 + Font20.Width * 7, 80 + Font20.Height, WHITE);
            Paint_DrawTime(150, 80, &sPaint_time, &Font20, WHITE, BLACK);
        */
            switch (system_state->alarm_view_cursor)
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	791b      	ldrb	r3, [r3, #4]
 80077a8:	3b05      	subs	r3, #5
 80077aa:	2b04      	cmp	r3, #4
 80077ac:	f200 85c5 	bhi.w	800833a <alarm_view_mode+0x1356>
 80077b0:	a201      	add	r2, pc, #4	@ (adr r2, 80077b8 <alarm_view_mode+0x7d4>)
 80077b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077b6:	bf00      	nop
 80077b8:	080077e5 	.word	0x080077e5
 80077bc:	08007e05 	.word	0x08007e05
 80077c0:	08007f69 	.word	0x08007f69
 80077c4:	080080a7 	.word	0x080080a7
 80077c8:	080081fd 	.word	0x080081fd
 80077cc:	20000274 	.word	0x20000274
 80077d0:	0800b75c 	.word	0x0800b75c
 80077d4:	0800b760 	.word	0x0800b760
 80077d8:	0800b764 	.word	0x0800b764
 80077dc:	0800b768 	.word	0x0800b768
 80077e0:	0800b76c 	.word	0x0800b76c
            {
                case 5:
                //parameter 1
                Paint_ClearWindows(10, 0, 255, Font16.Height, WHITE);
 80077e4:	4bab      	ldr	r3, [pc, #684]	@ (8007a94 <alarm_view_mode+0xab0>)
 80077e6:	88db      	ldrh	r3, [r3, #6]
 80077e8:	22ff      	movs	r2, #255	@ 0xff
 80077ea:	9200      	str	r2, [sp, #0]
 80077ec:	22ff      	movs	r2, #255	@ 0xff
 80077ee:	2100      	movs	r1, #0
 80077f0:	200a      	movs	r0, #10
 80077f2:	f002 fabb 	bl	8009d6c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 0, "6.", &Font16, WHITE, BLACK);
 80077f6:	2300      	movs	r3, #0
 80077f8:	9301      	str	r3, [sp, #4]
 80077fa:	23ff      	movs	r3, #255	@ 0xff
 80077fc:	9300      	str	r3, [sp, #0]
 80077fe:	4ba5      	ldr	r3, [pc, #660]	@ (8007a94 <alarm_view_mode+0xab0>)
 8007800:	4aa5      	ldr	r2, [pc, #660]	@ (8007a98 <alarm_view_mode+0xab4>)
 8007802:	2100      	movs	r1, #0
 8007804:	200a      	movs	r0, #10
 8007806:	f002 fd63 	bl	800a2d0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 0, alarm_view_mode->sParam_data_alarm_setup_mode_6, Font16);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6959      	ldr	r1, [r3, #20]
 800780e:	4ba1      	ldr	r3, [pc, #644]	@ (8007a94 <alarm_view_mode+0xab0>)
 8007810:	685a      	ldr	r2, [r3, #4]
 8007812:	9200      	str	r2, [sp, #0]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	460a      	mov	r2, r1
 8007818:	2100      	movs	r1, #0
 800781a:	208c      	movs	r0, #140	@ 0x8c
 800781c:	f000 fdb4 	bl	8008388 <drawn_alarm_view_mode>

                //parameter 2
                Paint_ClearWindows(10, 20, 255, 20 + Font16.Height, WHITE);
 8007820:	4b9c      	ldr	r3, [pc, #624]	@ (8007a94 <alarm_view_mode+0xab0>)
 8007822:	88db      	ldrh	r3, [r3, #6]
 8007824:	3314      	adds	r3, #20
 8007826:	b29b      	uxth	r3, r3
 8007828:	22ff      	movs	r2, #255	@ 0xff
 800782a:	9200      	str	r2, [sp, #0]
 800782c:	22ff      	movs	r2, #255	@ 0xff
 800782e:	2114      	movs	r1, #20
 8007830:	200a      	movs	r0, #10
 8007832:	f002 fa9b 	bl	8009d6c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 20, "7.", &Font16, BLACK, WHITE);
 8007836:	23ff      	movs	r3, #255	@ 0xff
 8007838:	9301      	str	r3, [sp, #4]
 800783a:	2300      	movs	r3, #0
 800783c:	9300      	str	r3, [sp, #0]
 800783e:	4b95      	ldr	r3, [pc, #596]	@ (8007a94 <alarm_view_mode+0xab0>)
 8007840:	4a96      	ldr	r2, [pc, #600]	@ (8007a9c <alarm_view_mode+0xab8>)
 8007842:	2114      	movs	r1, #20
 8007844:	200a      	movs	r0, #10
 8007846:	f002 fd43 	bl	800a2d0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 20, alarm_view_mode->sParam_data_alarm_setup_mode_7, Font16);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6999      	ldr	r1, [r3, #24]
 800784e:	4b91      	ldr	r3, [pc, #580]	@ (8007a94 <alarm_view_mode+0xab0>)
 8007850:	685a      	ldr	r2, [r3, #4]
 8007852:	9200      	str	r2, [sp, #0]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	460a      	mov	r2, r1
 8007858:	2114      	movs	r1, #20
 800785a:	208c      	movs	r0, #140	@ 0x8c
 800785c:	f000 fd94 	bl	8008388 <drawn_alarm_view_mode>

                //parameter 3
                Paint_ClearWindows(10, 40, 255, 40 + Font16.Height, WHITE);
 8007860:	4b8c      	ldr	r3, [pc, #560]	@ (8007a94 <alarm_view_mode+0xab0>)
 8007862:	88db      	ldrh	r3, [r3, #6]
 8007864:	3328      	adds	r3, #40	@ 0x28
 8007866:	b29b      	uxth	r3, r3
 8007868:	22ff      	movs	r2, #255	@ 0xff
 800786a:	9200      	str	r2, [sp, #0]
 800786c:	22ff      	movs	r2, #255	@ 0xff
 800786e:	2128      	movs	r1, #40	@ 0x28
 8007870:	200a      	movs	r0, #10
 8007872:	f002 fa7b 	bl	8009d6c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 40, "8.", &Font16, BLACK, WHITE);
 8007876:	23ff      	movs	r3, #255	@ 0xff
 8007878:	9301      	str	r3, [sp, #4]
 800787a:	2300      	movs	r3, #0
 800787c:	9300      	str	r3, [sp, #0]
 800787e:	4b85      	ldr	r3, [pc, #532]	@ (8007a94 <alarm_view_mode+0xab0>)
 8007880:	4a87      	ldr	r2, [pc, #540]	@ (8007aa0 <alarm_view_mode+0xabc>)
 8007882:	2128      	movs	r1, #40	@ 0x28
 8007884:	200a      	movs	r0, #10
 8007886:	f002 fd23 	bl	800a2d0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 40, alarm_view_mode->sParam_data_alarm_setup_mode_8, Font16);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	69d9      	ldr	r1, [r3, #28]
 800788e:	4b81      	ldr	r3, [pc, #516]	@ (8007a94 <alarm_view_mode+0xab0>)
 8007890:	685a      	ldr	r2, [r3, #4]
 8007892:	9200      	str	r2, [sp, #0]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	460a      	mov	r2, r1
 8007898:	2128      	movs	r1, #40	@ 0x28
 800789a:	208c      	movs	r0, #140	@ 0x8c
 800789c:	f000 fd74 	bl	8008388 <drawn_alarm_view_mode>

                //parameter 4
                Paint_ClearWindows(10, 60, 255, 60 + Font16.Height, WHITE);
 80078a0:	4b7c      	ldr	r3, [pc, #496]	@ (8007a94 <alarm_view_mode+0xab0>)
 80078a2:	88db      	ldrh	r3, [r3, #6]
 80078a4:	333c      	adds	r3, #60	@ 0x3c
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	22ff      	movs	r2, #255	@ 0xff
 80078aa:	9200      	str	r2, [sp, #0]
 80078ac:	22ff      	movs	r2, #255	@ 0xff
 80078ae:	213c      	movs	r1, #60	@ 0x3c
 80078b0:	200a      	movs	r0, #10
 80078b2:	f002 fa5b 	bl	8009d6c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 60, "9.", &Font16, BLACK, WHITE);
 80078b6:	23ff      	movs	r3, #255	@ 0xff
 80078b8:	9301      	str	r3, [sp, #4]
 80078ba:	2300      	movs	r3, #0
 80078bc:	9300      	str	r3, [sp, #0]
 80078be:	4b75      	ldr	r3, [pc, #468]	@ (8007a94 <alarm_view_mode+0xab0>)
 80078c0:	4a78      	ldr	r2, [pc, #480]	@ (8007aa4 <alarm_view_mode+0xac0>)
 80078c2:	213c      	movs	r1, #60	@ 0x3c
 80078c4:	200a      	movs	r0, #10
 80078c6:	f002 fd03 	bl	800a2d0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 60, alarm_view_mode->sParam_data_alarm_setup_mode_9, Font16);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6a19      	ldr	r1, [r3, #32]
 80078ce:	4b71      	ldr	r3, [pc, #452]	@ (8007a94 <alarm_view_mode+0xab0>)
 80078d0:	685a      	ldr	r2, [r3, #4]
 80078d2:	9200      	str	r2, [sp, #0]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	460a      	mov	r2, r1
 80078d8:	213c      	movs	r1, #60	@ 0x3c
 80078da:	208c      	movs	r0, #140	@ 0x8c
 80078dc:	f000 fd54 	bl	8008388 <drawn_alarm_view_mode>

                //parameter 5
                Paint_ClearWindows(10, 80, 255, 80 + Font16.Height, WHITE);
 80078e0:	4b6c      	ldr	r3, [pc, #432]	@ (8007a94 <alarm_view_mode+0xab0>)
 80078e2:	88db      	ldrh	r3, [r3, #6]
 80078e4:	3350      	adds	r3, #80	@ 0x50
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	22ff      	movs	r2, #255	@ 0xff
 80078ea:	9200      	str	r2, [sp, #0]
 80078ec:	22ff      	movs	r2, #255	@ 0xff
 80078ee:	2150      	movs	r1, #80	@ 0x50
 80078f0:	200a      	movs	r0, #10
 80078f2:	f002 fa3b 	bl	8009d6c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 80, "10.", &Font16, BLACK, WHITE);
 80078f6:	23ff      	movs	r3, #255	@ 0xff
 80078f8:	9301      	str	r3, [sp, #4]
 80078fa:	2300      	movs	r3, #0
 80078fc:	9300      	str	r3, [sp, #0]
 80078fe:	4b65      	ldr	r3, [pc, #404]	@ (8007a94 <alarm_view_mode+0xab0>)
 8007900:	4a69      	ldr	r2, [pc, #420]	@ (8007aa8 <alarm_view_mode+0xac4>)
 8007902:	2150      	movs	r1, #80	@ 0x50
 8007904:	200a      	movs	r0, #10
 8007906:	f002 fce3 	bl	800a2d0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 80, alarm_view_mode->sParam_data_alarm_setup_mode_10, Font16);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800790e:	4b61      	ldr	r3, [pc, #388]	@ (8007a94 <alarm_view_mode+0xab0>)
 8007910:	685a      	ldr	r2, [r3, #4]
 8007912:	9200      	str	r2, [sp, #0]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	460a      	mov	r2, r1
 8007918:	2150      	movs	r1, #80	@ 0x50
 800791a:	208c      	movs	r0, #140	@ 0x8c
 800791c:	f000 fd34 	bl	8008388 <drawn_alarm_view_mode>
                
                switch (alarm_view_mode->sParam_data_alarm_setup_mode_6->dy_dt)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	695b      	ldr	r3, [r3, #20]
 8007924:	78db      	ldrb	r3, [r3, #3]
 8007926:	2b02      	cmp	r3, #2
 8007928:	d06e      	beq.n	8007a08 <alarm_view_mode+0xa24>
 800792a:	2b02      	cmp	r3, #2
 800792c:	dc6e      	bgt.n	8007a0c <alarm_view_mode+0xa28>
 800792e:	2b00      	cmp	r3, #0
 8007930:	d002      	beq.n	8007938 <alarm_view_mode+0x954>
 8007932:	2b01      	cmp	r3, #1
 8007934:	d034      	beq.n	80079a0 <alarm_view_mode+0x9bc>
                        Paint_DrawString_EN(230, 0, "DT", &Font16, BLACK, WHITE);
                        break;
                    case NOT_USED_MODE:
                        break;
                    default:
                        break;
 8007936:	e069      	b.n	8007a0c <alarm_view_mode+0xa28>
                        Paint_DrawNum(200, 0, alarm_view_mode->sParam_data_alarm_setup_mode_6->dow_dom/10, &Font16, BLACK, WHITE);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	695b      	ldr	r3, [r3, #20]
 800793c:	791b      	ldrb	r3, [r3, #4]
 800793e:	4a5b      	ldr	r2, [pc, #364]	@ (8007aac <alarm_view_mode+0xac8>)
 8007940:	fba2 2303 	umull	r2, r3, r2, r3
 8007944:	08db      	lsrs	r3, r3, #3
 8007946:	b2db      	uxtb	r3, r3
 8007948:	461a      	mov	r2, r3
 800794a:	23ff      	movs	r3, #255	@ 0xff
 800794c:	9301      	str	r3, [sp, #4]
 800794e:	2300      	movs	r3, #0
 8007950:	9300      	str	r3, [sp, #0]
 8007952:	4b50      	ldr	r3, [pc, #320]	@ (8007a94 <alarm_view_mode+0xab0>)
 8007954:	2100      	movs	r1, #0
 8007956:	20c8      	movs	r0, #200	@ 0xc8
 8007958:	f002 fd0e 	bl	800a378 <Paint_DrawNum>
                        Paint_DrawNum(210, 0, alarm_view_mode->sParam_data_alarm_setup_mode_6->dow_dom%10, &Font16, BLACK, WHITE);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	695b      	ldr	r3, [r3, #20]
 8007960:	791a      	ldrb	r2, [r3, #4]
 8007962:	4b52      	ldr	r3, [pc, #328]	@ (8007aac <alarm_view_mode+0xac8>)
 8007964:	fba3 1302 	umull	r1, r3, r3, r2
 8007968:	08d9      	lsrs	r1, r3, #3
 800796a:	460b      	mov	r3, r1
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	440b      	add	r3, r1
 8007970:	005b      	lsls	r3, r3, #1
 8007972:	1ad3      	subs	r3, r2, r3
 8007974:	b2db      	uxtb	r3, r3
 8007976:	461a      	mov	r2, r3
 8007978:	23ff      	movs	r3, #255	@ 0xff
 800797a:	9301      	str	r3, [sp, #4]
 800797c:	2300      	movs	r3, #0
 800797e:	9300      	str	r3, [sp, #0]
 8007980:	4b44      	ldr	r3, [pc, #272]	@ (8007a94 <alarm_view_mode+0xab0>)
 8007982:	2100      	movs	r1, #0
 8007984:	20d2      	movs	r0, #210	@ 0xd2
 8007986:	f002 fcf7 	bl	800a378 <Paint_DrawNum>
                        Paint_DrawString_EN(230, 0, "DY", &Font16, BLACK, WHITE);
 800798a:	23ff      	movs	r3, #255	@ 0xff
 800798c:	9301      	str	r3, [sp, #4]
 800798e:	2300      	movs	r3, #0
 8007990:	9300      	str	r3, [sp, #0]
 8007992:	4b40      	ldr	r3, [pc, #256]	@ (8007a94 <alarm_view_mode+0xab0>)
 8007994:	4a46      	ldr	r2, [pc, #280]	@ (8007ab0 <alarm_view_mode+0xacc>)
 8007996:	2100      	movs	r1, #0
 8007998:	20e6      	movs	r0, #230	@ 0xe6
 800799a:	f002 fc99 	bl	800a2d0 <Paint_DrawString_EN>
                        break;
 800799e:	e036      	b.n	8007a0e <alarm_view_mode+0xa2a>
                        Paint_DrawNum(200, 0, alarm_view_mode->sParam_data_alarm_setup_mode_6->dow_dom/10, &Font16, BLACK, WHITE);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	695b      	ldr	r3, [r3, #20]
 80079a4:	791b      	ldrb	r3, [r3, #4]
 80079a6:	4a41      	ldr	r2, [pc, #260]	@ (8007aac <alarm_view_mode+0xac8>)
 80079a8:	fba2 2303 	umull	r2, r3, r2, r3
 80079ac:	08db      	lsrs	r3, r3, #3
 80079ae:	b2db      	uxtb	r3, r3
 80079b0:	461a      	mov	r2, r3
 80079b2:	23ff      	movs	r3, #255	@ 0xff
 80079b4:	9301      	str	r3, [sp, #4]
 80079b6:	2300      	movs	r3, #0
 80079b8:	9300      	str	r3, [sp, #0]
 80079ba:	4b36      	ldr	r3, [pc, #216]	@ (8007a94 <alarm_view_mode+0xab0>)
 80079bc:	2100      	movs	r1, #0
 80079be:	20c8      	movs	r0, #200	@ 0xc8
 80079c0:	f002 fcda 	bl	800a378 <Paint_DrawNum>
                        Paint_DrawNum(210, 0, alarm_view_mode->sParam_data_alarm_setup_mode_6->dow_dom%10, &Font16, BLACK, WHITE);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	695b      	ldr	r3, [r3, #20]
 80079c8:	791a      	ldrb	r2, [r3, #4]
 80079ca:	4b38      	ldr	r3, [pc, #224]	@ (8007aac <alarm_view_mode+0xac8>)
 80079cc:	fba3 1302 	umull	r1, r3, r3, r2
 80079d0:	08d9      	lsrs	r1, r3, #3
 80079d2:	460b      	mov	r3, r1
 80079d4:	009b      	lsls	r3, r3, #2
 80079d6:	440b      	add	r3, r1
 80079d8:	005b      	lsls	r3, r3, #1
 80079da:	1ad3      	subs	r3, r2, r3
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	461a      	mov	r2, r3
 80079e0:	23ff      	movs	r3, #255	@ 0xff
 80079e2:	9301      	str	r3, [sp, #4]
 80079e4:	2300      	movs	r3, #0
 80079e6:	9300      	str	r3, [sp, #0]
 80079e8:	4b2a      	ldr	r3, [pc, #168]	@ (8007a94 <alarm_view_mode+0xab0>)
 80079ea:	2100      	movs	r1, #0
 80079ec:	20d2      	movs	r0, #210	@ 0xd2
 80079ee:	f002 fcc3 	bl	800a378 <Paint_DrawNum>
                        Paint_DrawString_EN(230, 0, "DT", &Font16, BLACK, WHITE);
 80079f2:	23ff      	movs	r3, #255	@ 0xff
 80079f4:	9301      	str	r3, [sp, #4]
 80079f6:	2300      	movs	r3, #0
 80079f8:	9300      	str	r3, [sp, #0]
 80079fa:	4b26      	ldr	r3, [pc, #152]	@ (8007a94 <alarm_view_mode+0xab0>)
 80079fc:	4a2d      	ldr	r2, [pc, #180]	@ (8007ab4 <alarm_view_mode+0xad0>)
 80079fe:	2100      	movs	r1, #0
 8007a00:	20e6      	movs	r0, #230	@ 0xe6
 8007a02:	f002 fc65 	bl	800a2d0 <Paint_DrawString_EN>
                        break;
 8007a06:	e002      	b.n	8007a0e <alarm_view_mode+0xa2a>
                        break;
 8007a08:	bf00      	nop
 8007a0a:	e000      	b.n	8007a0e <alarm_view_mode+0xa2a>
                        break;
 8007a0c:	bf00      	nop
                    }

                switch (alarm_view_mode->sParam_data_alarm_setup_mode_7->dy_dt)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	699b      	ldr	r3, [r3, #24]
 8007a12:	78db      	ldrb	r3, [r3, #3]
 8007a14:	2b02      	cmp	r3, #2
 8007a16:	f000 8083 	beq.w	8007b20 <alarm_view_mode+0xb3c>
 8007a1a:	2b02      	cmp	r3, #2
 8007a1c:	f300 8082 	bgt.w	8007b24 <alarm_view_mode+0xb40>
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d002      	beq.n	8007a2a <alarm_view_mode+0xa46>
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d047      	beq.n	8007ab8 <alarm_view_mode+0xad4>
                        Paint_DrawString_EN(230, 20, "DT", &Font16, BLACK, WHITE);
                        break;
                    case NOT_USED_MODE:
                        break;
                    default:
                        break;
 8007a28:	e07c      	b.n	8007b24 <alarm_view_mode+0xb40>
                        Paint_DrawNum(200, 20, alarm_view_mode->sParam_data_alarm_setup_mode_7->dow_dom/10, &Font16, BLACK, WHITE);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	699b      	ldr	r3, [r3, #24]
 8007a2e:	791b      	ldrb	r3, [r3, #4]
 8007a30:	4a1e      	ldr	r2, [pc, #120]	@ (8007aac <alarm_view_mode+0xac8>)
 8007a32:	fba2 2303 	umull	r2, r3, r2, r3
 8007a36:	08db      	lsrs	r3, r3, #3
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	23ff      	movs	r3, #255	@ 0xff
 8007a3e:	9301      	str	r3, [sp, #4]
 8007a40:	2300      	movs	r3, #0
 8007a42:	9300      	str	r3, [sp, #0]
 8007a44:	4b13      	ldr	r3, [pc, #76]	@ (8007a94 <alarm_view_mode+0xab0>)
 8007a46:	2114      	movs	r1, #20
 8007a48:	20c8      	movs	r0, #200	@ 0xc8
 8007a4a:	f002 fc95 	bl	800a378 <Paint_DrawNum>
                        Paint_DrawNum(210, 20, alarm_view_mode->sParam_data_alarm_setup_mode_7->dow_dom%10, &Font16, BLACK, WHITE);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	699b      	ldr	r3, [r3, #24]
 8007a52:	791a      	ldrb	r2, [r3, #4]
 8007a54:	4b15      	ldr	r3, [pc, #84]	@ (8007aac <alarm_view_mode+0xac8>)
 8007a56:	fba3 1302 	umull	r1, r3, r3, r2
 8007a5a:	08d9      	lsrs	r1, r3, #3
 8007a5c:	460b      	mov	r3, r1
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	440b      	add	r3, r1
 8007a62:	005b      	lsls	r3, r3, #1
 8007a64:	1ad3      	subs	r3, r2, r3
 8007a66:	b2db      	uxtb	r3, r3
 8007a68:	461a      	mov	r2, r3
 8007a6a:	23ff      	movs	r3, #255	@ 0xff
 8007a6c:	9301      	str	r3, [sp, #4]
 8007a6e:	2300      	movs	r3, #0
 8007a70:	9300      	str	r3, [sp, #0]
 8007a72:	4b08      	ldr	r3, [pc, #32]	@ (8007a94 <alarm_view_mode+0xab0>)
 8007a74:	2114      	movs	r1, #20
 8007a76:	20d2      	movs	r0, #210	@ 0xd2
 8007a78:	f002 fc7e 	bl	800a378 <Paint_DrawNum>
                        Paint_DrawString_EN(230, 20, "DY", &Font16, BLACK, WHITE);
 8007a7c:	23ff      	movs	r3, #255	@ 0xff
 8007a7e:	9301      	str	r3, [sp, #4]
 8007a80:	2300      	movs	r3, #0
 8007a82:	9300      	str	r3, [sp, #0]
 8007a84:	4b03      	ldr	r3, [pc, #12]	@ (8007a94 <alarm_view_mode+0xab0>)
 8007a86:	4a0a      	ldr	r2, [pc, #40]	@ (8007ab0 <alarm_view_mode+0xacc>)
 8007a88:	2114      	movs	r1, #20
 8007a8a:	20e6      	movs	r0, #230	@ 0xe6
 8007a8c:	f002 fc20 	bl	800a2d0 <Paint_DrawString_EN>
                        break;
 8007a90:	e049      	b.n	8007b26 <alarm_view_mode+0xb42>
 8007a92:	bf00      	nop
 8007a94:	20000274 	.word	0x20000274
 8007a98:	0800b770 	.word	0x0800b770
 8007a9c:	0800b774 	.word	0x0800b774
 8007aa0:	0800b778 	.word	0x0800b778
 8007aa4:	0800b77c 	.word	0x0800b77c
 8007aa8:	0800b780 	.word	0x0800b780
 8007aac:	cccccccd 	.word	0xcccccccd
 8007ab0:	0800b784 	.word	0x0800b784
 8007ab4:	0800b788 	.word	0x0800b788
                        Paint_DrawNum(200, 20, alarm_view_mode->sParam_data_alarm_setup_mode_7->dow_dom/10, &Font16, BLACK, WHITE);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	699b      	ldr	r3, [r3, #24]
 8007abc:	791b      	ldrb	r3, [r3, #4]
 8007abe:	4a97      	ldr	r2, [pc, #604]	@ (8007d1c <alarm_view_mode+0xd38>)
 8007ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8007ac4:	08db      	lsrs	r3, r3, #3
 8007ac6:	b2db      	uxtb	r3, r3
 8007ac8:	461a      	mov	r2, r3
 8007aca:	23ff      	movs	r3, #255	@ 0xff
 8007acc:	9301      	str	r3, [sp, #4]
 8007ace:	2300      	movs	r3, #0
 8007ad0:	9300      	str	r3, [sp, #0]
 8007ad2:	4b93      	ldr	r3, [pc, #588]	@ (8007d20 <alarm_view_mode+0xd3c>)
 8007ad4:	2114      	movs	r1, #20
 8007ad6:	20c8      	movs	r0, #200	@ 0xc8
 8007ad8:	f002 fc4e 	bl	800a378 <Paint_DrawNum>
                        Paint_DrawNum(210, 20, alarm_view_mode->sParam_data_alarm_setup_mode_7->dow_dom%10, &Font16, BLACK, WHITE);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	699b      	ldr	r3, [r3, #24]
 8007ae0:	791a      	ldrb	r2, [r3, #4]
 8007ae2:	4b8e      	ldr	r3, [pc, #568]	@ (8007d1c <alarm_view_mode+0xd38>)
 8007ae4:	fba3 1302 	umull	r1, r3, r3, r2
 8007ae8:	08d9      	lsrs	r1, r3, #3
 8007aea:	460b      	mov	r3, r1
 8007aec:	009b      	lsls	r3, r3, #2
 8007aee:	440b      	add	r3, r1
 8007af0:	005b      	lsls	r3, r3, #1
 8007af2:	1ad3      	subs	r3, r2, r3
 8007af4:	b2db      	uxtb	r3, r3
 8007af6:	461a      	mov	r2, r3
 8007af8:	23ff      	movs	r3, #255	@ 0xff
 8007afa:	9301      	str	r3, [sp, #4]
 8007afc:	2300      	movs	r3, #0
 8007afe:	9300      	str	r3, [sp, #0]
 8007b00:	4b87      	ldr	r3, [pc, #540]	@ (8007d20 <alarm_view_mode+0xd3c>)
 8007b02:	2114      	movs	r1, #20
 8007b04:	20d2      	movs	r0, #210	@ 0xd2
 8007b06:	f002 fc37 	bl	800a378 <Paint_DrawNum>
                        Paint_DrawString_EN(230, 20, "DT", &Font16, BLACK, WHITE);
 8007b0a:	23ff      	movs	r3, #255	@ 0xff
 8007b0c:	9301      	str	r3, [sp, #4]
 8007b0e:	2300      	movs	r3, #0
 8007b10:	9300      	str	r3, [sp, #0]
 8007b12:	4b83      	ldr	r3, [pc, #524]	@ (8007d20 <alarm_view_mode+0xd3c>)
 8007b14:	4a83      	ldr	r2, [pc, #524]	@ (8007d24 <alarm_view_mode+0xd40>)
 8007b16:	2114      	movs	r1, #20
 8007b18:	20e6      	movs	r0, #230	@ 0xe6
 8007b1a:	f002 fbd9 	bl	800a2d0 <Paint_DrawString_EN>
                        break;
 8007b1e:	e002      	b.n	8007b26 <alarm_view_mode+0xb42>
                        break;
 8007b20:	bf00      	nop
 8007b22:	e000      	b.n	8007b26 <alarm_view_mode+0xb42>
                        break;
 8007b24:	bf00      	nop
                    }

        switch (alarm_view_mode->sParam_data_alarm_setup_mode_8->dy_dt)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	69db      	ldr	r3, [r3, #28]
 8007b2a:	78db      	ldrb	r3, [r3, #3]
 8007b2c:	2b02      	cmp	r3, #2
 8007b2e:	d06e      	beq.n	8007c0e <alarm_view_mode+0xc2a>
 8007b30:	2b02      	cmp	r3, #2
 8007b32:	dc6e      	bgt.n	8007c12 <alarm_view_mode+0xc2e>
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d002      	beq.n	8007b3e <alarm_view_mode+0xb5a>
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d034      	beq.n	8007ba6 <alarm_view_mode+0xbc2>
           Paint_DrawString_EN(230, 40, "DT", &Font16, BLACK, WHITE);
           break;
        case NOT_USED_MODE:
           break;
        default:
           break;
 8007b3c:	e069      	b.n	8007c12 <alarm_view_mode+0xc2e>
           Paint_DrawNum(200, 40, alarm_view_mode->sParam_data_alarm_setup_mode_8->dow_dom/10, &Font16, BLACK, WHITE);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	69db      	ldr	r3, [r3, #28]
 8007b42:	791b      	ldrb	r3, [r3, #4]
 8007b44:	4a75      	ldr	r2, [pc, #468]	@ (8007d1c <alarm_view_mode+0xd38>)
 8007b46:	fba2 2303 	umull	r2, r3, r2, r3
 8007b4a:	08db      	lsrs	r3, r3, #3
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	461a      	mov	r2, r3
 8007b50:	23ff      	movs	r3, #255	@ 0xff
 8007b52:	9301      	str	r3, [sp, #4]
 8007b54:	2300      	movs	r3, #0
 8007b56:	9300      	str	r3, [sp, #0]
 8007b58:	4b71      	ldr	r3, [pc, #452]	@ (8007d20 <alarm_view_mode+0xd3c>)
 8007b5a:	2128      	movs	r1, #40	@ 0x28
 8007b5c:	20c8      	movs	r0, #200	@ 0xc8
 8007b5e:	f002 fc0b 	bl	800a378 <Paint_DrawNum>
           Paint_DrawNum(210, 40, alarm_view_mode->sParam_data_alarm_setup_mode_8->dow_dom%10, &Font16, BLACK, WHITE);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	69db      	ldr	r3, [r3, #28]
 8007b66:	791a      	ldrb	r2, [r3, #4]
 8007b68:	4b6c      	ldr	r3, [pc, #432]	@ (8007d1c <alarm_view_mode+0xd38>)
 8007b6a:	fba3 1302 	umull	r1, r3, r3, r2
 8007b6e:	08d9      	lsrs	r1, r3, #3
 8007b70:	460b      	mov	r3, r1
 8007b72:	009b      	lsls	r3, r3, #2
 8007b74:	440b      	add	r3, r1
 8007b76:	005b      	lsls	r3, r3, #1
 8007b78:	1ad3      	subs	r3, r2, r3
 8007b7a:	b2db      	uxtb	r3, r3
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	23ff      	movs	r3, #255	@ 0xff
 8007b80:	9301      	str	r3, [sp, #4]
 8007b82:	2300      	movs	r3, #0
 8007b84:	9300      	str	r3, [sp, #0]
 8007b86:	4b66      	ldr	r3, [pc, #408]	@ (8007d20 <alarm_view_mode+0xd3c>)
 8007b88:	2128      	movs	r1, #40	@ 0x28
 8007b8a:	20d2      	movs	r0, #210	@ 0xd2
 8007b8c:	f002 fbf4 	bl	800a378 <Paint_DrawNum>
           Paint_DrawString_EN(230, 40, "DY", &Font16, BLACK, WHITE);
 8007b90:	23ff      	movs	r3, #255	@ 0xff
 8007b92:	9301      	str	r3, [sp, #4]
 8007b94:	2300      	movs	r3, #0
 8007b96:	9300      	str	r3, [sp, #0]
 8007b98:	4b61      	ldr	r3, [pc, #388]	@ (8007d20 <alarm_view_mode+0xd3c>)
 8007b9a:	4a63      	ldr	r2, [pc, #396]	@ (8007d28 <alarm_view_mode+0xd44>)
 8007b9c:	2128      	movs	r1, #40	@ 0x28
 8007b9e:	20e6      	movs	r0, #230	@ 0xe6
 8007ba0:	f002 fb96 	bl	800a2d0 <Paint_DrawString_EN>
           break;
 8007ba4:	e036      	b.n	8007c14 <alarm_view_mode+0xc30>
           Paint_DrawNum(200, 40, alarm_view_mode->sParam_data_alarm_setup_mode_8->dow_dom/10, &Font16, BLACK, WHITE);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	69db      	ldr	r3, [r3, #28]
 8007baa:	791b      	ldrb	r3, [r3, #4]
 8007bac:	4a5b      	ldr	r2, [pc, #364]	@ (8007d1c <alarm_view_mode+0xd38>)
 8007bae:	fba2 2303 	umull	r2, r3, r2, r3
 8007bb2:	08db      	lsrs	r3, r3, #3
 8007bb4:	b2db      	uxtb	r3, r3
 8007bb6:	461a      	mov	r2, r3
 8007bb8:	23ff      	movs	r3, #255	@ 0xff
 8007bba:	9301      	str	r3, [sp, #4]
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	9300      	str	r3, [sp, #0]
 8007bc0:	4b57      	ldr	r3, [pc, #348]	@ (8007d20 <alarm_view_mode+0xd3c>)
 8007bc2:	2128      	movs	r1, #40	@ 0x28
 8007bc4:	20c8      	movs	r0, #200	@ 0xc8
 8007bc6:	f002 fbd7 	bl	800a378 <Paint_DrawNum>
           Paint_DrawNum(210, 40, alarm_view_mode->sParam_data_alarm_setup_mode_8->dow_dom%10, &Font16, BLACK, WHITE);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	69db      	ldr	r3, [r3, #28]
 8007bce:	791a      	ldrb	r2, [r3, #4]
 8007bd0:	4b52      	ldr	r3, [pc, #328]	@ (8007d1c <alarm_view_mode+0xd38>)
 8007bd2:	fba3 1302 	umull	r1, r3, r3, r2
 8007bd6:	08d9      	lsrs	r1, r3, #3
 8007bd8:	460b      	mov	r3, r1
 8007bda:	009b      	lsls	r3, r3, #2
 8007bdc:	440b      	add	r3, r1
 8007bde:	005b      	lsls	r3, r3, #1
 8007be0:	1ad3      	subs	r3, r2, r3
 8007be2:	b2db      	uxtb	r3, r3
 8007be4:	461a      	mov	r2, r3
 8007be6:	23ff      	movs	r3, #255	@ 0xff
 8007be8:	9301      	str	r3, [sp, #4]
 8007bea:	2300      	movs	r3, #0
 8007bec:	9300      	str	r3, [sp, #0]
 8007bee:	4b4c      	ldr	r3, [pc, #304]	@ (8007d20 <alarm_view_mode+0xd3c>)
 8007bf0:	2128      	movs	r1, #40	@ 0x28
 8007bf2:	20d2      	movs	r0, #210	@ 0xd2
 8007bf4:	f002 fbc0 	bl	800a378 <Paint_DrawNum>
           Paint_DrawString_EN(230, 40, "DT", &Font16, BLACK, WHITE);
 8007bf8:	23ff      	movs	r3, #255	@ 0xff
 8007bfa:	9301      	str	r3, [sp, #4]
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	9300      	str	r3, [sp, #0]
 8007c00:	4b47      	ldr	r3, [pc, #284]	@ (8007d20 <alarm_view_mode+0xd3c>)
 8007c02:	4a48      	ldr	r2, [pc, #288]	@ (8007d24 <alarm_view_mode+0xd40>)
 8007c04:	2128      	movs	r1, #40	@ 0x28
 8007c06:	20e6      	movs	r0, #230	@ 0xe6
 8007c08:	f002 fb62 	bl	800a2d0 <Paint_DrawString_EN>
           break;
 8007c0c:	e002      	b.n	8007c14 <alarm_view_mode+0xc30>
           break;
 8007c0e:	bf00      	nop
 8007c10:	e000      	b.n	8007c14 <alarm_view_mode+0xc30>
           break;
 8007c12:	bf00      	nop
        }
    switch (alarm_view_mode->sParam_data_alarm_setup_mode_9->dy_dt)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6a1b      	ldr	r3, [r3, #32]
 8007c18:	78db      	ldrb	r3, [r3, #3]
 8007c1a:	2b02      	cmp	r3, #2
 8007c1c:	d06e      	beq.n	8007cfc <alarm_view_mode+0xd18>
 8007c1e:	2b02      	cmp	r3, #2
 8007c20:	dc6e      	bgt.n	8007d00 <alarm_view_mode+0xd1c>
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d002      	beq.n	8007c2c <alarm_view_mode+0xc48>
 8007c26:	2b01      	cmp	r3, #1
 8007c28:	d034      	beq.n	8007c94 <alarm_view_mode+0xcb0>
           Paint_DrawString_EN(230, 60, "DT", &Font16, BLACK, WHITE);
           break;
       case NOT_USED_MODE:
           break;
       default:
           break;
 8007c2a:	e069      	b.n	8007d00 <alarm_view_mode+0xd1c>
           Paint_DrawNum(200, 60, alarm_view_mode->sParam_data_alarm_setup_mode_9->dow_dom/10, &Font16, BLACK, WHITE);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6a1b      	ldr	r3, [r3, #32]
 8007c30:	791b      	ldrb	r3, [r3, #4]
 8007c32:	4a3a      	ldr	r2, [pc, #232]	@ (8007d1c <alarm_view_mode+0xd38>)
 8007c34:	fba2 2303 	umull	r2, r3, r2, r3
 8007c38:	08db      	lsrs	r3, r3, #3
 8007c3a:	b2db      	uxtb	r3, r3
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	23ff      	movs	r3, #255	@ 0xff
 8007c40:	9301      	str	r3, [sp, #4]
 8007c42:	2300      	movs	r3, #0
 8007c44:	9300      	str	r3, [sp, #0]
 8007c46:	4b36      	ldr	r3, [pc, #216]	@ (8007d20 <alarm_view_mode+0xd3c>)
 8007c48:	213c      	movs	r1, #60	@ 0x3c
 8007c4a:	20c8      	movs	r0, #200	@ 0xc8
 8007c4c:	f002 fb94 	bl	800a378 <Paint_DrawNum>
           Paint_DrawNum(210, 60, alarm_view_mode->sParam_data_alarm_setup_mode_9->dow_dom%10, &Font16, BLACK, WHITE);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6a1b      	ldr	r3, [r3, #32]
 8007c54:	791a      	ldrb	r2, [r3, #4]
 8007c56:	4b31      	ldr	r3, [pc, #196]	@ (8007d1c <alarm_view_mode+0xd38>)
 8007c58:	fba3 1302 	umull	r1, r3, r3, r2
 8007c5c:	08d9      	lsrs	r1, r3, #3
 8007c5e:	460b      	mov	r3, r1
 8007c60:	009b      	lsls	r3, r3, #2
 8007c62:	440b      	add	r3, r1
 8007c64:	005b      	lsls	r3, r3, #1
 8007c66:	1ad3      	subs	r3, r2, r3
 8007c68:	b2db      	uxtb	r3, r3
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	23ff      	movs	r3, #255	@ 0xff
 8007c6e:	9301      	str	r3, [sp, #4]
 8007c70:	2300      	movs	r3, #0
 8007c72:	9300      	str	r3, [sp, #0]
 8007c74:	4b2a      	ldr	r3, [pc, #168]	@ (8007d20 <alarm_view_mode+0xd3c>)
 8007c76:	213c      	movs	r1, #60	@ 0x3c
 8007c78:	20d2      	movs	r0, #210	@ 0xd2
 8007c7a:	f002 fb7d 	bl	800a378 <Paint_DrawNum>
           Paint_DrawString_EN(230, 60, "DY", &Font16, BLACK, WHITE);
 8007c7e:	23ff      	movs	r3, #255	@ 0xff
 8007c80:	9301      	str	r3, [sp, #4]
 8007c82:	2300      	movs	r3, #0
 8007c84:	9300      	str	r3, [sp, #0]
 8007c86:	4b26      	ldr	r3, [pc, #152]	@ (8007d20 <alarm_view_mode+0xd3c>)
 8007c88:	4a27      	ldr	r2, [pc, #156]	@ (8007d28 <alarm_view_mode+0xd44>)
 8007c8a:	213c      	movs	r1, #60	@ 0x3c
 8007c8c:	20e6      	movs	r0, #230	@ 0xe6
 8007c8e:	f002 fb1f 	bl	800a2d0 <Paint_DrawString_EN>
           break;
 8007c92:	e036      	b.n	8007d02 <alarm_view_mode+0xd1e>
           Paint_DrawNum(200, 60, alarm_view_mode->sParam_data_alarm_setup_mode_9->dow_dom/10, &Font16, BLACK, WHITE);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6a1b      	ldr	r3, [r3, #32]
 8007c98:	791b      	ldrb	r3, [r3, #4]
 8007c9a:	4a20      	ldr	r2, [pc, #128]	@ (8007d1c <alarm_view_mode+0xd38>)
 8007c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8007ca0:	08db      	lsrs	r3, r3, #3
 8007ca2:	b2db      	uxtb	r3, r3
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	23ff      	movs	r3, #255	@ 0xff
 8007ca8:	9301      	str	r3, [sp, #4]
 8007caa:	2300      	movs	r3, #0
 8007cac:	9300      	str	r3, [sp, #0]
 8007cae:	4b1c      	ldr	r3, [pc, #112]	@ (8007d20 <alarm_view_mode+0xd3c>)
 8007cb0:	213c      	movs	r1, #60	@ 0x3c
 8007cb2:	20c8      	movs	r0, #200	@ 0xc8
 8007cb4:	f002 fb60 	bl	800a378 <Paint_DrawNum>
           Paint_DrawNum(210, 60, alarm_view_mode->sParam_data_alarm_setup_mode_9->dow_dom%10, &Font16, BLACK, WHITE);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6a1b      	ldr	r3, [r3, #32]
 8007cbc:	791a      	ldrb	r2, [r3, #4]
 8007cbe:	4b17      	ldr	r3, [pc, #92]	@ (8007d1c <alarm_view_mode+0xd38>)
 8007cc0:	fba3 1302 	umull	r1, r3, r3, r2
 8007cc4:	08d9      	lsrs	r1, r3, #3
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	009b      	lsls	r3, r3, #2
 8007cca:	440b      	add	r3, r1
 8007ccc:	005b      	lsls	r3, r3, #1
 8007cce:	1ad3      	subs	r3, r2, r3
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	23ff      	movs	r3, #255	@ 0xff
 8007cd6:	9301      	str	r3, [sp, #4]
 8007cd8:	2300      	movs	r3, #0
 8007cda:	9300      	str	r3, [sp, #0]
 8007cdc:	4b10      	ldr	r3, [pc, #64]	@ (8007d20 <alarm_view_mode+0xd3c>)
 8007cde:	213c      	movs	r1, #60	@ 0x3c
 8007ce0:	20d2      	movs	r0, #210	@ 0xd2
 8007ce2:	f002 fb49 	bl	800a378 <Paint_DrawNum>
           Paint_DrawString_EN(230, 60, "DT", &Font16, BLACK, WHITE);
 8007ce6:	23ff      	movs	r3, #255	@ 0xff
 8007ce8:	9301      	str	r3, [sp, #4]
 8007cea:	2300      	movs	r3, #0
 8007cec:	9300      	str	r3, [sp, #0]
 8007cee:	4b0c      	ldr	r3, [pc, #48]	@ (8007d20 <alarm_view_mode+0xd3c>)
 8007cf0:	4a0c      	ldr	r2, [pc, #48]	@ (8007d24 <alarm_view_mode+0xd40>)
 8007cf2:	213c      	movs	r1, #60	@ 0x3c
 8007cf4:	20e6      	movs	r0, #230	@ 0xe6
 8007cf6:	f002 faeb 	bl	800a2d0 <Paint_DrawString_EN>
           break;
 8007cfa:	e002      	b.n	8007d02 <alarm_view_mode+0xd1e>
           break;
 8007cfc:	bf00      	nop
 8007cfe:	e000      	b.n	8007d02 <alarm_view_mode+0xd1e>
           break;
 8007d00:	bf00      	nop
       }
    switch (alarm_view_mode->sParam_data_alarm_setup_mode_10->dy_dt)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d06:	78db      	ldrb	r3, [r3, #3]
 8007d08:	2b02      	cmp	r3, #2
 8007d0a:	d077      	beq.n	8007dfc <alarm_view_mode+0xe18>
 8007d0c:	2b02      	cmp	r3, #2
 8007d0e:	dc77      	bgt.n	8007e00 <alarm_view_mode+0xe1c>
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d00b      	beq.n	8007d2c <alarm_view_mode+0xd48>
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d03d      	beq.n	8007d94 <alarm_view_mode+0xdb0>
           Paint_DrawString_EN(230, 80, "DT", &Font16, BLACK, WHITE);
           break;
       case NOT_USED_MODE:
           break;
       default:
           break;
 8007d18:	e072      	b.n	8007e00 <alarm_view_mode+0xe1c>
 8007d1a:	bf00      	nop
 8007d1c:	cccccccd 	.word	0xcccccccd
 8007d20:	20000274 	.word	0x20000274
 8007d24:	0800b788 	.word	0x0800b788
 8007d28:	0800b784 	.word	0x0800b784
           Paint_DrawNum(200, 80, alarm_view_mode->sParam_data_alarm_setup_mode_10->dow_dom/10, &Font16, BLACK, WHITE);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d30:	791b      	ldrb	r3, [r3, #4]
 8007d32:	4a84      	ldr	r2, [pc, #528]	@ (8007f44 <alarm_view_mode+0xf60>)
 8007d34:	fba2 2303 	umull	r2, r3, r2, r3
 8007d38:	08db      	lsrs	r3, r3, #3
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	23ff      	movs	r3, #255	@ 0xff
 8007d40:	9301      	str	r3, [sp, #4]
 8007d42:	2300      	movs	r3, #0
 8007d44:	9300      	str	r3, [sp, #0]
 8007d46:	4b80      	ldr	r3, [pc, #512]	@ (8007f48 <alarm_view_mode+0xf64>)
 8007d48:	2150      	movs	r1, #80	@ 0x50
 8007d4a:	20c8      	movs	r0, #200	@ 0xc8
 8007d4c:	f002 fb14 	bl	800a378 <Paint_DrawNum>
           Paint_DrawNum(210, 80, alarm_view_mode->sParam_data_alarm_setup_mode_10->dow_dom%10, &Font16, BLACK, WHITE);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d54:	791a      	ldrb	r2, [r3, #4]
 8007d56:	4b7b      	ldr	r3, [pc, #492]	@ (8007f44 <alarm_view_mode+0xf60>)
 8007d58:	fba3 1302 	umull	r1, r3, r3, r2
 8007d5c:	08d9      	lsrs	r1, r3, #3
 8007d5e:	460b      	mov	r3, r1
 8007d60:	009b      	lsls	r3, r3, #2
 8007d62:	440b      	add	r3, r1
 8007d64:	005b      	lsls	r3, r3, #1
 8007d66:	1ad3      	subs	r3, r2, r3
 8007d68:	b2db      	uxtb	r3, r3
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	23ff      	movs	r3, #255	@ 0xff
 8007d6e:	9301      	str	r3, [sp, #4]
 8007d70:	2300      	movs	r3, #0
 8007d72:	9300      	str	r3, [sp, #0]
 8007d74:	4b74      	ldr	r3, [pc, #464]	@ (8007f48 <alarm_view_mode+0xf64>)
 8007d76:	2150      	movs	r1, #80	@ 0x50
 8007d78:	20d2      	movs	r0, #210	@ 0xd2
 8007d7a:	f002 fafd 	bl	800a378 <Paint_DrawNum>
           Paint_DrawString_EN(230, 80, "DY", &Font16, BLACK, WHITE);
 8007d7e:	23ff      	movs	r3, #255	@ 0xff
 8007d80:	9301      	str	r3, [sp, #4]
 8007d82:	2300      	movs	r3, #0
 8007d84:	9300      	str	r3, [sp, #0]
 8007d86:	4b70      	ldr	r3, [pc, #448]	@ (8007f48 <alarm_view_mode+0xf64>)
 8007d88:	4a70      	ldr	r2, [pc, #448]	@ (8007f4c <alarm_view_mode+0xf68>)
 8007d8a:	2150      	movs	r1, #80	@ 0x50
 8007d8c:	20e6      	movs	r0, #230	@ 0xe6
 8007d8e:	f002 fa9f 	bl	800a2d0 <Paint_DrawString_EN>
           break;
 8007d92:	e036      	b.n	8007e02 <alarm_view_mode+0xe1e>
           Paint_DrawNum(200, 80, alarm_view_mode->sParam_data_alarm_setup_mode_10->dow_dom/10, &Font16, BLACK, WHITE);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d98:	791b      	ldrb	r3, [r3, #4]
 8007d9a:	4a6a      	ldr	r2, [pc, #424]	@ (8007f44 <alarm_view_mode+0xf60>)
 8007d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8007da0:	08db      	lsrs	r3, r3, #3
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	461a      	mov	r2, r3
 8007da6:	23ff      	movs	r3, #255	@ 0xff
 8007da8:	9301      	str	r3, [sp, #4]
 8007daa:	2300      	movs	r3, #0
 8007dac:	9300      	str	r3, [sp, #0]
 8007dae:	4b66      	ldr	r3, [pc, #408]	@ (8007f48 <alarm_view_mode+0xf64>)
 8007db0:	2150      	movs	r1, #80	@ 0x50
 8007db2:	20c8      	movs	r0, #200	@ 0xc8
 8007db4:	f002 fae0 	bl	800a378 <Paint_DrawNum>
           Paint_DrawNum(210, 80, alarm_view_mode->sParam_data_alarm_setup_mode_10->dow_dom%10, &Font16, BLACK, WHITE);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dbc:	791a      	ldrb	r2, [r3, #4]
 8007dbe:	4b61      	ldr	r3, [pc, #388]	@ (8007f44 <alarm_view_mode+0xf60>)
 8007dc0:	fba3 1302 	umull	r1, r3, r3, r2
 8007dc4:	08d9      	lsrs	r1, r3, #3
 8007dc6:	460b      	mov	r3, r1
 8007dc8:	009b      	lsls	r3, r3, #2
 8007dca:	440b      	add	r3, r1
 8007dcc:	005b      	lsls	r3, r3, #1
 8007dce:	1ad3      	subs	r3, r2, r3
 8007dd0:	b2db      	uxtb	r3, r3
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	23ff      	movs	r3, #255	@ 0xff
 8007dd6:	9301      	str	r3, [sp, #4]
 8007dd8:	2300      	movs	r3, #0
 8007dda:	9300      	str	r3, [sp, #0]
 8007ddc:	4b5a      	ldr	r3, [pc, #360]	@ (8007f48 <alarm_view_mode+0xf64>)
 8007dde:	2150      	movs	r1, #80	@ 0x50
 8007de0:	20d2      	movs	r0, #210	@ 0xd2
 8007de2:	f002 fac9 	bl	800a378 <Paint_DrawNum>
           Paint_DrawString_EN(230, 80, "DT", &Font16, BLACK, WHITE);
 8007de6:	23ff      	movs	r3, #255	@ 0xff
 8007de8:	9301      	str	r3, [sp, #4]
 8007dea:	2300      	movs	r3, #0
 8007dec:	9300      	str	r3, [sp, #0]
 8007dee:	4b56      	ldr	r3, [pc, #344]	@ (8007f48 <alarm_view_mode+0xf64>)
 8007df0:	4a57      	ldr	r2, [pc, #348]	@ (8007f50 <alarm_view_mode+0xf6c>)
 8007df2:	2150      	movs	r1, #80	@ 0x50
 8007df4:	20e6      	movs	r0, #230	@ 0xe6
 8007df6:	f002 fa6b 	bl	800a2d0 <Paint_DrawString_EN>
           break;
 8007dfa:	e002      	b.n	8007e02 <alarm_view_mode+0xe1e>
           break;
 8007dfc:	bf00      	nop
 8007dfe:	e29d      	b.n	800833c <alarm_view_mode+0x1358>
           break;
 8007e00:	bf00      	nop
       }
                // change to another
                break;
 8007e02:	e29b      	b.n	800833c <alarm_view_mode+0x1358>
        
                case 6:
                //parameter 1
                Paint_ClearWindows(10, 0, 200, Font16.Height, WHITE);
 8007e04:	4b50      	ldr	r3, [pc, #320]	@ (8007f48 <alarm_view_mode+0xf64>)
 8007e06:	88db      	ldrh	r3, [r3, #6]
 8007e08:	22ff      	movs	r2, #255	@ 0xff
 8007e0a:	9200      	str	r2, [sp, #0]
 8007e0c:	22c8      	movs	r2, #200	@ 0xc8
 8007e0e:	2100      	movs	r1, #0
 8007e10:	200a      	movs	r0, #10
 8007e12:	f001 ffab 	bl	8009d6c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 0, "6.", &Font16, BLACK, WHITE);
 8007e16:	23ff      	movs	r3, #255	@ 0xff
 8007e18:	9301      	str	r3, [sp, #4]
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	9300      	str	r3, [sp, #0]
 8007e1e:	4b4a      	ldr	r3, [pc, #296]	@ (8007f48 <alarm_view_mode+0xf64>)
 8007e20:	4a4c      	ldr	r2, [pc, #304]	@ (8007f54 <alarm_view_mode+0xf70>)
 8007e22:	2100      	movs	r1, #0
 8007e24:	200a      	movs	r0, #10
 8007e26:	f002 fa53 	bl	800a2d0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 0, alarm_view_mode->sParam_data_alarm_setup_mode_6, Font16);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6959      	ldr	r1, [r3, #20]
 8007e2e:	4b46      	ldr	r3, [pc, #280]	@ (8007f48 <alarm_view_mode+0xf64>)
 8007e30:	685a      	ldr	r2, [r3, #4]
 8007e32:	9200      	str	r2, [sp, #0]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	460a      	mov	r2, r1
 8007e38:	2100      	movs	r1, #0
 8007e3a:	208c      	movs	r0, #140	@ 0x8c
 8007e3c:	f000 faa4 	bl	8008388 <drawn_alarm_view_mode>

                //parameter 2
                Paint_ClearWindows(10, 20, 200, 20 + Font16.Height, WHITE);
 8007e40:	4b41      	ldr	r3, [pc, #260]	@ (8007f48 <alarm_view_mode+0xf64>)
 8007e42:	88db      	ldrh	r3, [r3, #6]
 8007e44:	3314      	adds	r3, #20
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	22ff      	movs	r2, #255	@ 0xff
 8007e4a:	9200      	str	r2, [sp, #0]
 8007e4c:	22c8      	movs	r2, #200	@ 0xc8
 8007e4e:	2114      	movs	r1, #20
 8007e50:	200a      	movs	r0, #10
 8007e52:	f001 ff8b 	bl	8009d6c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 20, "7.", &Font16, WHITE, BLACK);
 8007e56:	2300      	movs	r3, #0
 8007e58:	9301      	str	r3, [sp, #4]
 8007e5a:	23ff      	movs	r3, #255	@ 0xff
 8007e5c:	9300      	str	r3, [sp, #0]
 8007e5e:	4b3a      	ldr	r3, [pc, #232]	@ (8007f48 <alarm_view_mode+0xf64>)
 8007e60:	4a3d      	ldr	r2, [pc, #244]	@ (8007f58 <alarm_view_mode+0xf74>)
 8007e62:	2114      	movs	r1, #20
 8007e64:	200a      	movs	r0, #10
 8007e66:	f002 fa33 	bl	800a2d0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 20, alarm_view_mode->sParam_data_alarm_setup_mode_7, Font16);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6999      	ldr	r1, [r3, #24]
 8007e6e:	4b36      	ldr	r3, [pc, #216]	@ (8007f48 <alarm_view_mode+0xf64>)
 8007e70:	685a      	ldr	r2, [r3, #4]
 8007e72:	9200      	str	r2, [sp, #0]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	460a      	mov	r2, r1
 8007e78:	2114      	movs	r1, #20
 8007e7a:	208c      	movs	r0, #140	@ 0x8c
 8007e7c:	f000 fa84 	bl	8008388 <drawn_alarm_view_mode>

                //parameter 3
                Paint_ClearWindows(10, 40, 200, 40 + Font16.Height, WHITE);
 8007e80:	4b31      	ldr	r3, [pc, #196]	@ (8007f48 <alarm_view_mode+0xf64>)
 8007e82:	88db      	ldrh	r3, [r3, #6]
 8007e84:	3328      	adds	r3, #40	@ 0x28
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	22ff      	movs	r2, #255	@ 0xff
 8007e8a:	9200      	str	r2, [sp, #0]
 8007e8c:	22c8      	movs	r2, #200	@ 0xc8
 8007e8e:	2128      	movs	r1, #40	@ 0x28
 8007e90:	200a      	movs	r0, #10
 8007e92:	f001 ff6b 	bl	8009d6c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 40, "8.", &Font16, BLACK, WHITE);
 8007e96:	23ff      	movs	r3, #255	@ 0xff
 8007e98:	9301      	str	r3, [sp, #4]
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	9300      	str	r3, [sp, #0]
 8007e9e:	4b2a      	ldr	r3, [pc, #168]	@ (8007f48 <alarm_view_mode+0xf64>)
 8007ea0:	4a2e      	ldr	r2, [pc, #184]	@ (8007f5c <alarm_view_mode+0xf78>)
 8007ea2:	2128      	movs	r1, #40	@ 0x28
 8007ea4:	200a      	movs	r0, #10
 8007ea6:	f002 fa13 	bl	800a2d0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 40, alarm_view_mode->sParam_data_alarm_setup_mode_8, Font16);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	69d9      	ldr	r1, [r3, #28]
 8007eae:	4b26      	ldr	r3, [pc, #152]	@ (8007f48 <alarm_view_mode+0xf64>)
 8007eb0:	685a      	ldr	r2, [r3, #4]
 8007eb2:	9200      	str	r2, [sp, #0]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	460a      	mov	r2, r1
 8007eb8:	2128      	movs	r1, #40	@ 0x28
 8007eba:	208c      	movs	r0, #140	@ 0x8c
 8007ebc:	f000 fa64 	bl	8008388 <drawn_alarm_view_mode>

                //parameter 4
                Paint_ClearWindows(10, 60, 200, 60 + Font16.Height, WHITE);
 8007ec0:	4b21      	ldr	r3, [pc, #132]	@ (8007f48 <alarm_view_mode+0xf64>)
 8007ec2:	88db      	ldrh	r3, [r3, #6]
 8007ec4:	333c      	adds	r3, #60	@ 0x3c
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	22ff      	movs	r2, #255	@ 0xff
 8007eca:	9200      	str	r2, [sp, #0]
 8007ecc:	22c8      	movs	r2, #200	@ 0xc8
 8007ece:	213c      	movs	r1, #60	@ 0x3c
 8007ed0:	200a      	movs	r0, #10
 8007ed2:	f001 ff4b 	bl	8009d6c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 60, "9.", &Font16, BLACK, WHITE);
 8007ed6:	23ff      	movs	r3, #255	@ 0xff
 8007ed8:	9301      	str	r3, [sp, #4]
 8007eda:	2300      	movs	r3, #0
 8007edc:	9300      	str	r3, [sp, #0]
 8007ede:	4b1a      	ldr	r3, [pc, #104]	@ (8007f48 <alarm_view_mode+0xf64>)
 8007ee0:	4a1f      	ldr	r2, [pc, #124]	@ (8007f60 <alarm_view_mode+0xf7c>)
 8007ee2:	213c      	movs	r1, #60	@ 0x3c
 8007ee4:	200a      	movs	r0, #10
 8007ee6:	f002 f9f3 	bl	800a2d0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 60, alarm_view_mode->sParam_data_alarm_setup_mode_9, Font16);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6a19      	ldr	r1, [r3, #32]
 8007eee:	4b16      	ldr	r3, [pc, #88]	@ (8007f48 <alarm_view_mode+0xf64>)
 8007ef0:	685a      	ldr	r2, [r3, #4]
 8007ef2:	9200      	str	r2, [sp, #0]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	460a      	mov	r2, r1
 8007ef8:	213c      	movs	r1, #60	@ 0x3c
 8007efa:	208c      	movs	r0, #140	@ 0x8c
 8007efc:	f000 fa44 	bl	8008388 <drawn_alarm_view_mode>

                //parameter 5
                Paint_ClearWindows(10, 80, 200, 80 + Font16.Height, WHITE);
 8007f00:	4b11      	ldr	r3, [pc, #68]	@ (8007f48 <alarm_view_mode+0xf64>)
 8007f02:	88db      	ldrh	r3, [r3, #6]
 8007f04:	3350      	adds	r3, #80	@ 0x50
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	22ff      	movs	r2, #255	@ 0xff
 8007f0a:	9200      	str	r2, [sp, #0]
 8007f0c:	22c8      	movs	r2, #200	@ 0xc8
 8007f0e:	2150      	movs	r1, #80	@ 0x50
 8007f10:	200a      	movs	r0, #10
 8007f12:	f001 ff2b 	bl	8009d6c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 80, "10.", &Font16, BLACK, WHITE);
 8007f16:	23ff      	movs	r3, #255	@ 0xff
 8007f18:	9301      	str	r3, [sp, #4]
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	9300      	str	r3, [sp, #0]
 8007f1e:	4b0a      	ldr	r3, [pc, #40]	@ (8007f48 <alarm_view_mode+0xf64>)
 8007f20:	4a10      	ldr	r2, [pc, #64]	@ (8007f64 <alarm_view_mode+0xf80>)
 8007f22:	2150      	movs	r1, #80	@ 0x50
 8007f24:	200a      	movs	r0, #10
 8007f26:	f002 f9d3 	bl	800a2d0 <Paint_DrawString_EN>
                 drawn_alarm_view_mode(140, 80, alarm_view_mode->sParam_data_alarm_setup_mode_10, Font16);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8007f2e:	4b06      	ldr	r3, [pc, #24]	@ (8007f48 <alarm_view_mode+0xf64>)
 8007f30:	685a      	ldr	r2, [r3, #4]
 8007f32:	9200      	str	r2, [sp, #0]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	460a      	mov	r2, r1
 8007f38:	2150      	movs	r1, #80	@ 0x50
 8007f3a:	208c      	movs	r0, #140	@ 0x8c
 8007f3c:	f000 fa24 	bl	8008388 <drawn_alarm_view_mode>
               
                break;
 8007f40:	e1fc      	b.n	800833c <alarm_view_mode+0x1358>
 8007f42:	bf00      	nop
 8007f44:	cccccccd 	.word	0xcccccccd
 8007f48:	20000274 	.word	0x20000274
 8007f4c:	0800b784 	.word	0x0800b784
 8007f50:	0800b788 	.word	0x0800b788
 8007f54:	0800b770 	.word	0x0800b770
 8007f58:	0800b774 	.word	0x0800b774
 8007f5c:	0800b778 	.word	0x0800b778
 8007f60:	0800b77c 	.word	0x0800b77c
 8007f64:	0800b780 	.word	0x0800b780
        
                case 7:
                //parameter 1
                Paint_ClearWindows(10, 0, 200, Font16.Height, WHITE);
 8007f68:	4b9e      	ldr	r3, [pc, #632]	@ (80081e4 <alarm_view_mode+0x1200>)
 8007f6a:	88db      	ldrh	r3, [r3, #6]
 8007f6c:	22ff      	movs	r2, #255	@ 0xff
 8007f6e:	9200      	str	r2, [sp, #0]
 8007f70:	22c8      	movs	r2, #200	@ 0xc8
 8007f72:	2100      	movs	r1, #0
 8007f74:	200a      	movs	r0, #10
 8007f76:	f001 fef9 	bl	8009d6c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 0, "6.", &Font16, BLACK, WHITE);
 8007f7a:	23ff      	movs	r3, #255	@ 0xff
 8007f7c:	9301      	str	r3, [sp, #4]
 8007f7e:	2300      	movs	r3, #0
 8007f80:	9300      	str	r3, [sp, #0]
 8007f82:	4b98      	ldr	r3, [pc, #608]	@ (80081e4 <alarm_view_mode+0x1200>)
 8007f84:	4a98      	ldr	r2, [pc, #608]	@ (80081e8 <alarm_view_mode+0x1204>)
 8007f86:	2100      	movs	r1, #0
 8007f88:	200a      	movs	r0, #10
 8007f8a:	f002 f9a1 	bl	800a2d0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 0, alarm_view_mode->sParam_data_alarm_setup_mode_6, Font16);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6959      	ldr	r1, [r3, #20]
 8007f92:	4b94      	ldr	r3, [pc, #592]	@ (80081e4 <alarm_view_mode+0x1200>)
 8007f94:	685a      	ldr	r2, [r3, #4]
 8007f96:	9200      	str	r2, [sp, #0]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	460a      	mov	r2, r1
 8007f9c:	2100      	movs	r1, #0
 8007f9e:	208c      	movs	r0, #140	@ 0x8c
 8007fa0:	f000 f9f2 	bl	8008388 <drawn_alarm_view_mode>

                //parameter 2
                Paint_ClearWindows(10, 20, 200, 20 + Font16.Height, WHITE);
 8007fa4:	4b8f      	ldr	r3, [pc, #572]	@ (80081e4 <alarm_view_mode+0x1200>)
 8007fa6:	88db      	ldrh	r3, [r3, #6]
 8007fa8:	3314      	adds	r3, #20
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	22ff      	movs	r2, #255	@ 0xff
 8007fae:	9200      	str	r2, [sp, #0]
 8007fb0:	22c8      	movs	r2, #200	@ 0xc8
 8007fb2:	2114      	movs	r1, #20
 8007fb4:	200a      	movs	r0, #10
 8007fb6:	f001 fed9 	bl	8009d6c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 20, "7.", &Font16, BLACK, WHITE);
 8007fba:	23ff      	movs	r3, #255	@ 0xff
 8007fbc:	9301      	str	r3, [sp, #4]
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	9300      	str	r3, [sp, #0]
 8007fc2:	4b88      	ldr	r3, [pc, #544]	@ (80081e4 <alarm_view_mode+0x1200>)
 8007fc4:	4a89      	ldr	r2, [pc, #548]	@ (80081ec <alarm_view_mode+0x1208>)
 8007fc6:	2114      	movs	r1, #20
 8007fc8:	200a      	movs	r0, #10
 8007fca:	f002 f981 	bl	800a2d0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 20, alarm_view_mode->sParam_data_alarm_setup_mode_7, Font16);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6999      	ldr	r1, [r3, #24]
 8007fd2:	4b84      	ldr	r3, [pc, #528]	@ (80081e4 <alarm_view_mode+0x1200>)
 8007fd4:	685a      	ldr	r2, [r3, #4]
 8007fd6:	9200      	str	r2, [sp, #0]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	460a      	mov	r2, r1
 8007fdc:	2114      	movs	r1, #20
 8007fde:	208c      	movs	r0, #140	@ 0x8c
 8007fe0:	f000 f9d2 	bl	8008388 <drawn_alarm_view_mode>

                //parameter 3
                Paint_ClearWindows(10, 40, 200, 40 + Font16.Height, WHITE);
 8007fe4:	4b7f      	ldr	r3, [pc, #508]	@ (80081e4 <alarm_view_mode+0x1200>)
 8007fe6:	88db      	ldrh	r3, [r3, #6]
 8007fe8:	3328      	adds	r3, #40	@ 0x28
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	22ff      	movs	r2, #255	@ 0xff
 8007fee:	9200      	str	r2, [sp, #0]
 8007ff0:	22c8      	movs	r2, #200	@ 0xc8
 8007ff2:	2128      	movs	r1, #40	@ 0x28
 8007ff4:	200a      	movs	r0, #10
 8007ff6:	f001 feb9 	bl	8009d6c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 40, "8.", &Font16, WHITE, BLACK);
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	9301      	str	r3, [sp, #4]
 8007ffe:	23ff      	movs	r3, #255	@ 0xff
 8008000:	9300      	str	r3, [sp, #0]
 8008002:	4b78      	ldr	r3, [pc, #480]	@ (80081e4 <alarm_view_mode+0x1200>)
 8008004:	4a7a      	ldr	r2, [pc, #488]	@ (80081f0 <alarm_view_mode+0x120c>)
 8008006:	2128      	movs	r1, #40	@ 0x28
 8008008:	200a      	movs	r0, #10
 800800a:	f002 f961 	bl	800a2d0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 40, alarm_view_mode->sParam_data_alarm_setup_mode_8, Font16);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	69d9      	ldr	r1, [r3, #28]
 8008012:	4b74      	ldr	r3, [pc, #464]	@ (80081e4 <alarm_view_mode+0x1200>)
 8008014:	685a      	ldr	r2, [r3, #4]
 8008016:	9200      	str	r2, [sp, #0]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	460a      	mov	r2, r1
 800801c:	2128      	movs	r1, #40	@ 0x28
 800801e:	208c      	movs	r0, #140	@ 0x8c
 8008020:	f000 f9b2 	bl	8008388 <drawn_alarm_view_mode>

                //parameter 4
                Paint_ClearWindows(10, 60, 200, 60 + Font16.Height, WHITE);
 8008024:	4b6f      	ldr	r3, [pc, #444]	@ (80081e4 <alarm_view_mode+0x1200>)
 8008026:	88db      	ldrh	r3, [r3, #6]
 8008028:	333c      	adds	r3, #60	@ 0x3c
 800802a:	b29b      	uxth	r3, r3
 800802c:	22ff      	movs	r2, #255	@ 0xff
 800802e:	9200      	str	r2, [sp, #0]
 8008030:	22c8      	movs	r2, #200	@ 0xc8
 8008032:	213c      	movs	r1, #60	@ 0x3c
 8008034:	200a      	movs	r0, #10
 8008036:	f001 fe99 	bl	8009d6c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 60, "9.", &Font16, BLACK, WHITE);
 800803a:	23ff      	movs	r3, #255	@ 0xff
 800803c:	9301      	str	r3, [sp, #4]
 800803e:	2300      	movs	r3, #0
 8008040:	9300      	str	r3, [sp, #0]
 8008042:	4b68      	ldr	r3, [pc, #416]	@ (80081e4 <alarm_view_mode+0x1200>)
 8008044:	4a6b      	ldr	r2, [pc, #428]	@ (80081f4 <alarm_view_mode+0x1210>)
 8008046:	213c      	movs	r1, #60	@ 0x3c
 8008048:	200a      	movs	r0, #10
 800804a:	f002 f941 	bl	800a2d0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 60, alarm_view_mode->sParam_data_alarm_setup_mode_9, Font16);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6a19      	ldr	r1, [r3, #32]
 8008052:	4b64      	ldr	r3, [pc, #400]	@ (80081e4 <alarm_view_mode+0x1200>)
 8008054:	685a      	ldr	r2, [r3, #4]
 8008056:	9200      	str	r2, [sp, #0]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	460a      	mov	r2, r1
 800805c:	213c      	movs	r1, #60	@ 0x3c
 800805e:	208c      	movs	r0, #140	@ 0x8c
 8008060:	f000 f992 	bl	8008388 <drawn_alarm_view_mode>

                //parameter 5
                Paint_ClearWindows(10, 80, 200, 80 + Font16.Height, WHITE);
 8008064:	4b5f      	ldr	r3, [pc, #380]	@ (80081e4 <alarm_view_mode+0x1200>)
 8008066:	88db      	ldrh	r3, [r3, #6]
 8008068:	3350      	adds	r3, #80	@ 0x50
 800806a:	b29b      	uxth	r3, r3
 800806c:	22ff      	movs	r2, #255	@ 0xff
 800806e:	9200      	str	r2, [sp, #0]
 8008070:	22c8      	movs	r2, #200	@ 0xc8
 8008072:	2150      	movs	r1, #80	@ 0x50
 8008074:	200a      	movs	r0, #10
 8008076:	f001 fe79 	bl	8009d6c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 80, "10.", &Font16, BLACK, WHITE);
 800807a:	23ff      	movs	r3, #255	@ 0xff
 800807c:	9301      	str	r3, [sp, #4]
 800807e:	2300      	movs	r3, #0
 8008080:	9300      	str	r3, [sp, #0]
 8008082:	4b58      	ldr	r3, [pc, #352]	@ (80081e4 <alarm_view_mode+0x1200>)
 8008084:	4a5c      	ldr	r2, [pc, #368]	@ (80081f8 <alarm_view_mode+0x1214>)
 8008086:	2150      	movs	r1, #80	@ 0x50
 8008088:	200a      	movs	r0, #10
 800808a:	f002 f921 	bl	800a2d0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 80, alarm_view_mode->sParam_data_alarm_setup_mode_10, Font16);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8008092:	4b54      	ldr	r3, [pc, #336]	@ (80081e4 <alarm_view_mode+0x1200>)
 8008094:	685a      	ldr	r2, [r3, #4]
 8008096:	9200      	str	r2, [sp, #0]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	460a      	mov	r2, r1
 800809c:	2150      	movs	r1, #80	@ 0x50
 800809e:	208c      	movs	r0, #140	@ 0x8c
 80080a0:	f000 f972 	bl	8008388 <drawn_alarm_view_mode>

                break;
 80080a4:	e14a      	b.n	800833c <alarm_view_mode+0x1358>
        
                case 8:
                //parameter 1
                Paint_ClearWindows(10, 0, 200, Font16.Height, WHITE);
 80080a6:	4b4f      	ldr	r3, [pc, #316]	@ (80081e4 <alarm_view_mode+0x1200>)
 80080a8:	88db      	ldrh	r3, [r3, #6]
 80080aa:	22ff      	movs	r2, #255	@ 0xff
 80080ac:	9200      	str	r2, [sp, #0]
 80080ae:	22c8      	movs	r2, #200	@ 0xc8
 80080b0:	2100      	movs	r1, #0
 80080b2:	200a      	movs	r0, #10
 80080b4:	f001 fe5a 	bl	8009d6c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 0, "6.", &Font16, BLACK, WHITE);
 80080b8:	23ff      	movs	r3, #255	@ 0xff
 80080ba:	9301      	str	r3, [sp, #4]
 80080bc:	2300      	movs	r3, #0
 80080be:	9300      	str	r3, [sp, #0]
 80080c0:	4b48      	ldr	r3, [pc, #288]	@ (80081e4 <alarm_view_mode+0x1200>)
 80080c2:	4a49      	ldr	r2, [pc, #292]	@ (80081e8 <alarm_view_mode+0x1204>)
 80080c4:	2100      	movs	r1, #0
 80080c6:	200a      	movs	r0, #10
 80080c8:	f002 f902 	bl	800a2d0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 0, alarm_view_mode->sParam_data_alarm_setup_mode_6, Font16);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6959      	ldr	r1, [r3, #20]
 80080d0:	4b44      	ldr	r3, [pc, #272]	@ (80081e4 <alarm_view_mode+0x1200>)
 80080d2:	685a      	ldr	r2, [r3, #4]
 80080d4:	9200      	str	r2, [sp, #0]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	460a      	mov	r2, r1
 80080da:	2100      	movs	r1, #0
 80080dc:	208c      	movs	r0, #140	@ 0x8c
 80080de:	f000 f953 	bl	8008388 <drawn_alarm_view_mode>

                //parameter 2
                Paint_ClearWindows(10, 20, 200, 20 + Font16.Height, WHITE);
 80080e2:	4b40      	ldr	r3, [pc, #256]	@ (80081e4 <alarm_view_mode+0x1200>)
 80080e4:	88db      	ldrh	r3, [r3, #6]
 80080e6:	3314      	adds	r3, #20
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	22ff      	movs	r2, #255	@ 0xff
 80080ec:	9200      	str	r2, [sp, #0]
 80080ee:	22c8      	movs	r2, #200	@ 0xc8
 80080f0:	2114      	movs	r1, #20
 80080f2:	200a      	movs	r0, #10
 80080f4:	f001 fe3a 	bl	8009d6c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 20, "7.", &Font16, BLACK, WHITE);
 80080f8:	23ff      	movs	r3, #255	@ 0xff
 80080fa:	9301      	str	r3, [sp, #4]
 80080fc:	2300      	movs	r3, #0
 80080fe:	9300      	str	r3, [sp, #0]
 8008100:	4b38      	ldr	r3, [pc, #224]	@ (80081e4 <alarm_view_mode+0x1200>)
 8008102:	4a3a      	ldr	r2, [pc, #232]	@ (80081ec <alarm_view_mode+0x1208>)
 8008104:	2114      	movs	r1, #20
 8008106:	200a      	movs	r0, #10
 8008108:	f002 f8e2 	bl	800a2d0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 20, alarm_view_mode->sParam_data_alarm_setup_mode_7, Font16);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6999      	ldr	r1, [r3, #24]
 8008110:	4b34      	ldr	r3, [pc, #208]	@ (80081e4 <alarm_view_mode+0x1200>)
 8008112:	685a      	ldr	r2, [r3, #4]
 8008114:	9200      	str	r2, [sp, #0]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	460a      	mov	r2, r1
 800811a:	2114      	movs	r1, #20
 800811c:	208c      	movs	r0, #140	@ 0x8c
 800811e:	f000 f933 	bl	8008388 <drawn_alarm_view_mode>

                //parameter 3
                Paint_ClearWindows(10, 40, 200, 40 + Font16.Height, WHITE);
 8008122:	4b30      	ldr	r3, [pc, #192]	@ (80081e4 <alarm_view_mode+0x1200>)
 8008124:	88db      	ldrh	r3, [r3, #6]
 8008126:	3328      	adds	r3, #40	@ 0x28
 8008128:	b29b      	uxth	r3, r3
 800812a:	22ff      	movs	r2, #255	@ 0xff
 800812c:	9200      	str	r2, [sp, #0]
 800812e:	22c8      	movs	r2, #200	@ 0xc8
 8008130:	2128      	movs	r1, #40	@ 0x28
 8008132:	200a      	movs	r0, #10
 8008134:	f001 fe1a 	bl	8009d6c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 40, "8.", &Font16, BLACK, WHITE);
 8008138:	23ff      	movs	r3, #255	@ 0xff
 800813a:	9301      	str	r3, [sp, #4]
 800813c:	2300      	movs	r3, #0
 800813e:	9300      	str	r3, [sp, #0]
 8008140:	4b28      	ldr	r3, [pc, #160]	@ (80081e4 <alarm_view_mode+0x1200>)
 8008142:	4a2b      	ldr	r2, [pc, #172]	@ (80081f0 <alarm_view_mode+0x120c>)
 8008144:	2128      	movs	r1, #40	@ 0x28
 8008146:	200a      	movs	r0, #10
 8008148:	f002 f8c2 	bl	800a2d0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 40, alarm_view_mode->sParam_data_alarm_setup_mode_8, Font16);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	69d9      	ldr	r1, [r3, #28]
 8008150:	4b24      	ldr	r3, [pc, #144]	@ (80081e4 <alarm_view_mode+0x1200>)
 8008152:	685a      	ldr	r2, [r3, #4]
 8008154:	9200      	str	r2, [sp, #0]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	460a      	mov	r2, r1
 800815a:	2128      	movs	r1, #40	@ 0x28
 800815c:	208c      	movs	r0, #140	@ 0x8c
 800815e:	f000 f913 	bl	8008388 <drawn_alarm_view_mode>

                //parameter 4
                Paint_ClearWindows(10, 60, 200, 60 + Font16.Height, WHITE);
 8008162:	4b20      	ldr	r3, [pc, #128]	@ (80081e4 <alarm_view_mode+0x1200>)
 8008164:	88db      	ldrh	r3, [r3, #6]
 8008166:	333c      	adds	r3, #60	@ 0x3c
 8008168:	b29b      	uxth	r3, r3
 800816a:	22ff      	movs	r2, #255	@ 0xff
 800816c:	9200      	str	r2, [sp, #0]
 800816e:	22c8      	movs	r2, #200	@ 0xc8
 8008170:	213c      	movs	r1, #60	@ 0x3c
 8008172:	200a      	movs	r0, #10
 8008174:	f001 fdfa 	bl	8009d6c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 60, "9.", &Font16, WHITE, BLACK);
 8008178:	2300      	movs	r3, #0
 800817a:	9301      	str	r3, [sp, #4]
 800817c:	23ff      	movs	r3, #255	@ 0xff
 800817e:	9300      	str	r3, [sp, #0]
 8008180:	4b18      	ldr	r3, [pc, #96]	@ (80081e4 <alarm_view_mode+0x1200>)
 8008182:	4a1c      	ldr	r2, [pc, #112]	@ (80081f4 <alarm_view_mode+0x1210>)
 8008184:	213c      	movs	r1, #60	@ 0x3c
 8008186:	200a      	movs	r0, #10
 8008188:	f002 f8a2 	bl	800a2d0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 60, alarm_view_mode->sParam_data_alarm_setup_mode_9, Font16);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6a19      	ldr	r1, [r3, #32]
 8008190:	4b14      	ldr	r3, [pc, #80]	@ (80081e4 <alarm_view_mode+0x1200>)
 8008192:	685a      	ldr	r2, [r3, #4]
 8008194:	9200      	str	r2, [sp, #0]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	460a      	mov	r2, r1
 800819a:	213c      	movs	r1, #60	@ 0x3c
 800819c:	208c      	movs	r0, #140	@ 0x8c
 800819e:	f000 f8f3 	bl	8008388 <drawn_alarm_view_mode>

                //parameter 5
                Paint_ClearWindows(10, 80, 200, 80 + Font16.Height, WHITE);
 80081a2:	4b10      	ldr	r3, [pc, #64]	@ (80081e4 <alarm_view_mode+0x1200>)
 80081a4:	88db      	ldrh	r3, [r3, #6]
 80081a6:	3350      	adds	r3, #80	@ 0x50
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	22ff      	movs	r2, #255	@ 0xff
 80081ac:	9200      	str	r2, [sp, #0]
 80081ae:	22c8      	movs	r2, #200	@ 0xc8
 80081b0:	2150      	movs	r1, #80	@ 0x50
 80081b2:	200a      	movs	r0, #10
 80081b4:	f001 fdda 	bl	8009d6c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 80, "10.", &Font16, BLACK, WHITE);
 80081b8:	23ff      	movs	r3, #255	@ 0xff
 80081ba:	9301      	str	r3, [sp, #4]
 80081bc:	2300      	movs	r3, #0
 80081be:	9300      	str	r3, [sp, #0]
 80081c0:	4b08      	ldr	r3, [pc, #32]	@ (80081e4 <alarm_view_mode+0x1200>)
 80081c2:	4a0d      	ldr	r2, [pc, #52]	@ (80081f8 <alarm_view_mode+0x1214>)
 80081c4:	2150      	movs	r1, #80	@ 0x50
 80081c6:	200a      	movs	r0, #10
 80081c8:	f002 f882 	bl	800a2d0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 80, alarm_view_mode->sParam_data_alarm_setup_mode_10, Font16);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80081d0:	4b04      	ldr	r3, [pc, #16]	@ (80081e4 <alarm_view_mode+0x1200>)
 80081d2:	685a      	ldr	r2, [r3, #4]
 80081d4:	9200      	str	r2, [sp, #0]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	460a      	mov	r2, r1
 80081da:	2150      	movs	r1, #80	@ 0x50
 80081dc:	208c      	movs	r0, #140	@ 0x8c
 80081de:	f000 f8d3 	bl	8008388 <drawn_alarm_view_mode>

                break;
 80081e2:	e0ab      	b.n	800833c <alarm_view_mode+0x1358>
 80081e4:	20000274 	.word	0x20000274
 80081e8:	0800b770 	.word	0x0800b770
 80081ec:	0800b774 	.word	0x0800b774
 80081f0:	0800b778 	.word	0x0800b778
 80081f4:	0800b77c 	.word	0x0800b77c
 80081f8:	0800b780 	.word	0x0800b780
        
                case 9:
                //parameter 1

                Paint_ClearWindows(10, 0, 200, Font16.Height, WHITE);
 80081fc:	4b5c      	ldr	r3, [pc, #368]	@ (8008370 <alarm_view_mode+0x138c>)
 80081fe:	88db      	ldrh	r3, [r3, #6]
 8008200:	22ff      	movs	r2, #255	@ 0xff
 8008202:	9200      	str	r2, [sp, #0]
 8008204:	22c8      	movs	r2, #200	@ 0xc8
 8008206:	2100      	movs	r1, #0
 8008208:	200a      	movs	r0, #10
 800820a:	f001 fdaf 	bl	8009d6c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 0, "6.", &Font16, BLACK, WHITE);
 800820e:	23ff      	movs	r3, #255	@ 0xff
 8008210:	9301      	str	r3, [sp, #4]
 8008212:	2300      	movs	r3, #0
 8008214:	9300      	str	r3, [sp, #0]
 8008216:	4b56      	ldr	r3, [pc, #344]	@ (8008370 <alarm_view_mode+0x138c>)
 8008218:	4a56      	ldr	r2, [pc, #344]	@ (8008374 <alarm_view_mode+0x1390>)
 800821a:	2100      	movs	r1, #0
 800821c:	200a      	movs	r0, #10
 800821e:	f002 f857 	bl	800a2d0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 0, alarm_view_mode->sParam_data_alarm_setup_mode_6, Font16);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6959      	ldr	r1, [r3, #20]
 8008226:	4b52      	ldr	r3, [pc, #328]	@ (8008370 <alarm_view_mode+0x138c>)
 8008228:	685a      	ldr	r2, [r3, #4]
 800822a:	9200      	str	r2, [sp, #0]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	460a      	mov	r2, r1
 8008230:	2100      	movs	r1, #0
 8008232:	208c      	movs	r0, #140	@ 0x8c
 8008234:	f000 f8a8 	bl	8008388 <drawn_alarm_view_mode>

                //parameter 2

                Paint_ClearWindows(10, 20, 200, 20 + Font16.Height, WHITE);
 8008238:	4b4d      	ldr	r3, [pc, #308]	@ (8008370 <alarm_view_mode+0x138c>)
 800823a:	88db      	ldrh	r3, [r3, #6]
 800823c:	3314      	adds	r3, #20
 800823e:	b29b      	uxth	r3, r3
 8008240:	22ff      	movs	r2, #255	@ 0xff
 8008242:	9200      	str	r2, [sp, #0]
 8008244:	22c8      	movs	r2, #200	@ 0xc8
 8008246:	2114      	movs	r1, #20
 8008248:	200a      	movs	r0, #10
 800824a:	f001 fd8f 	bl	8009d6c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 20, "7.", &Font16, BLACK, WHITE);
 800824e:	23ff      	movs	r3, #255	@ 0xff
 8008250:	9301      	str	r3, [sp, #4]
 8008252:	2300      	movs	r3, #0
 8008254:	9300      	str	r3, [sp, #0]
 8008256:	4b46      	ldr	r3, [pc, #280]	@ (8008370 <alarm_view_mode+0x138c>)
 8008258:	4a47      	ldr	r2, [pc, #284]	@ (8008378 <alarm_view_mode+0x1394>)
 800825a:	2114      	movs	r1, #20
 800825c:	200a      	movs	r0, #10
 800825e:	f002 f837 	bl	800a2d0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 20, alarm_view_mode->sParam_data_alarm_setup_mode_7, Font16);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6999      	ldr	r1, [r3, #24]
 8008266:	4b42      	ldr	r3, [pc, #264]	@ (8008370 <alarm_view_mode+0x138c>)
 8008268:	685a      	ldr	r2, [r3, #4]
 800826a:	9200      	str	r2, [sp, #0]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	460a      	mov	r2, r1
 8008270:	2114      	movs	r1, #20
 8008272:	208c      	movs	r0, #140	@ 0x8c
 8008274:	f000 f888 	bl	8008388 <drawn_alarm_view_mode>

                //parameter 3

                Paint_ClearWindows(10, 40, 200, 40 + Font16.Height, WHITE);
 8008278:	4b3d      	ldr	r3, [pc, #244]	@ (8008370 <alarm_view_mode+0x138c>)
 800827a:	88db      	ldrh	r3, [r3, #6]
 800827c:	3328      	adds	r3, #40	@ 0x28
 800827e:	b29b      	uxth	r3, r3
 8008280:	22ff      	movs	r2, #255	@ 0xff
 8008282:	9200      	str	r2, [sp, #0]
 8008284:	22c8      	movs	r2, #200	@ 0xc8
 8008286:	2128      	movs	r1, #40	@ 0x28
 8008288:	200a      	movs	r0, #10
 800828a:	f001 fd6f 	bl	8009d6c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 40, "8.", &Font16, BLACK, WHITE);
 800828e:	23ff      	movs	r3, #255	@ 0xff
 8008290:	9301      	str	r3, [sp, #4]
 8008292:	2300      	movs	r3, #0
 8008294:	9300      	str	r3, [sp, #0]
 8008296:	4b36      	ldr	r3, [pc, #216]	@ (8008370 <alarm_view_mode+0x138c>)
 8008298:	4a38      	ldr	r2, [pc, #224]	@ (800837c <alarm_view_mode+0x1398>)
 800829a:	2128      	movs	r1, #40	@ 0x28
 800829c:	200a      	movs	r0, #10
 800829e:	f002 f817 	bl	800a2d0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 40, alarm_view_mode->sParam_data_alarm_setup_mode_8, Font16);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	69d9      	ldr	r1, [r3, #28]
 80082a6:	4b32      	ldr	r3, [pc, #200]	@ (8008370 <alarm_view_mode+0x138c>)
 80082a8:	685a      	ldr	r2, [r3, #4]
 80082aa:	9200      	str	r2, [sp, #0]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	460a      	mov	r2, r1
 80082b0:	2128      	movs	r1, #40	@ 0x28
 80082b2:	208c      	movs	r0, #140	@ 0x8c
 80082b4:	f000 f868 	bl	8008388 <drawn_alarm_view_mode>

                //parameter 4

                Paint_ClearWindows(10, 60, 200, 60 + Font16.Height, WHITE);
 80082b8:	4b2d      	ldr	r3, [pc, #180]	@ (8008370 <alarm_view_mode+0x138c>)
 80082ba:	88db      	ldrh	r3, [r3, #6]
 80082bc:	333c      	adds	r3, #60	@ 0x3c
 80082be:	b29b      	uxth	r3, r3
 80082c0:	22ff      	movs	r2, #255	@ 0xff
 80082c2:	9200      	str	r2, [sp, #0]
 80082c4:	22c8      	movs	r2, #200	@ 0xc8
 80082c6:	213c      	movs	r1, #60	@ 0x3c
 80082c8:	200a      	movs	r0, #10
 80082ca:	f001 fd4f 	bl	8009d6c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 60, "9.", &Font16, BLACK, WHITE);
 80082ce:	23ff      	movs	r3, #255	@ 0xff
 80082d0:	9301      	str	r3, [sp, #4]
 80082d2:	2300      	movs	r3, #0
 80082d4:	9300      	str	r3, [sp, #0]
 80082d6:	4b26      	ldr	r3, [pc, #152]	@ (8008370 <alarm_view_mode+0x138c>)
 80082d8:	4a29      	ldr	r2, [pc, #164]	@ (8008380 <alarm_view_mode+0x139c>)
 80082da:	213c      	movs	r1, #60	@ 0x3c
 80082dc:	200a      	movs	r0, #10
 80082de:	f001 fff7 	bl	800a2d0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 60, alarm_view_mode->sParam_data_alarm_setup_mode_9, Font16);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6a19      	ldr	r1, [r3, #32]
 80082e6:	4b22      	ldr	r3, [pc, #136]	@ (8008370 <alarm_view_mode+0x138c>)
 80082e8:	685a      	ldr	r2, [r3, #4]
 80082ea:	9200      	str	r2, [sp, #0]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	460a      	mov	r2, r1
 80082f0:	213c      	movs	r1, #60	@ 0x3c
 80082f2:	208c      	movs	r0, #140	@ 0x8c
 80082f4:	f000 f848 	bl	8008388 <drawn_alarm_view_mode>

                //parameter 5

                Paint_ClearWindows(10, 80, 200, 80 + Font16.Height, WHITE);
 80082f8:	4b1d      	ldr	r3, [pc, #116]	@ (8008370 <alarm_view_mode+0x138c>)
 80082fa:	88db      	ldrh	r3, [r3, #6]
 80082fc:	3350      	adds	r3, #80	@ 0x50
 80082fe:	b29b      	uxth	r3, r3
 8008300:	22ff      	movs	r2, #255	@ 0xff
 8008302:	9200      	str	r2, [sp, #0]
 8008304:	22c8      	movs	r2, #200	@ 0xc8
 8008306:	2150      	movs	r1, #80	@ 0x50
 8008308:	200a      	movs	r0, #10
 800830a:	f001 fd2f 	bl	8009d6c <Paint_ClearWindows>
                Paint_DrawString_EN(10, 80, "10.", &Font16, WHITE, BLACK);
 800830e:	2300      	movs	r3, #0
 8008310:	9301      	str	r3, [sp, #4]
 8008312:	23ff      	movs	r3, #255	@ 0xff
 8008314:	9300      	str	r3, [sp, #0]
 8008316:	4b16      	ldr	r3, [pc, #88]	@ (8008370 <alarm_view_mode+0x138c>)
 8008318:	4a1a      	ldr	r2, [pc, #104]	@ (8008384 <alarm_view_mode+0x13a0>)
 800831a:	2150      	movs	r1, #80	@ 0x50
 800831c:	200a      	movs	r0, #10
 800831e:	f001 ffd7 	bl	800a2d0 <Paint_DrawString_EN>
                drawn_alarm_view_mode(140, 80, alarm_view_mode->sParam_data_alarm_setup_mode_10, Font16);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8008326:	4b12      	ldr	r3, [pc, #72]	@ (8008370 <alarm_view_mode+0x138c>)
 8008328:	685a      	ldr	r2, [r3, #4]
 800832a:	9200      	str	r2, [sp, #0]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	460a      	mov	r2, r1
 8008330:	2150      	movs	r1, #80	@ 0x50
 8008332:	208c      	movs	r0, #140	@ 0x8c
 8008334:	f000 f828 	bl	8008388 <drawn_alarm_view_mode>

                break;
 8008338:	e000      	b.n	800833c <alarm_view_mode+0x1358>
        
                default: break;
 800833a:	bf00      	nop
            }

            num = num - 1;
 800833c:	7ffb      	ldrb	r3, [r7, #31]
 800833e:	3b01      	subs	r3, #1
 8008340:	77fb      	strb	r3, [r7, #31]
            if(num == 0) {
 8008342:	7ffb      	ldrb	r3, [r7, #31]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d102      	bne.n	800834e <alarm_view_mode+0x136a>
                num = 3;
 8008348:	2303      	movs	r3, #3
 800834a:	77fb      	strb	r3, [r7, #31]
                break;
 800834c:	e004      	b.n	8008358 <alarm_view_mode+0x1374>
            }
	        EPD_2IN9_V2_Display_Partial(BlackImage);
 800834e:	6938      	ldr	r0, [r7, #16]
 8008350:	f7fe fbf0 	bl	8006b34 <EPD_2IN9_V2_Display_Partial>
            draw_battery(battery_percentage);
 8008354:	f7ff ba22 	b.w	800779c <alarm_view_mode+0x7b8>
    }
}

  flag_alarm_view_mode->flag_ALARM_VIEW_MODE = 0;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2200      	movs	r2, #0
 800835c:	709a      	strb	r2, [r3, #2]
  EPD_2IN9_V2_Sleep();
 800835e:	f7fe fc5b 	bl	8006c18 <EPD_2IN9_V2_Sleep>
  free(BlackImage);
 8008362:	6938      	ldr	r0, [r7, #16]
 8008364:	f002 f9d8 	bl	800a718 <free>
}
 8008368:	bf00      	nop
 800836a:	3720      	adds	r7, #32
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}
 8008370:	20000274 	.word	0x20000274
 8008374:	0800b770 	.word	0x0800b770
 8008378:	0800b774 	.word	0x0800b774
 800837c:	0800b778 	.word	0x0800b778
 8008380:	0800b77c 	.word	0x0800b77c
 8008384:	0800b780 	.word	0x0800b780

08008388 <drawn_alarm_view_mode>:

void drawn_alarm_view_mode(uint16_t Xstart, uint16_t Ystart, ALARM_DATA_SETUP_MODE *sParam_data_alarm_setup_mode, sFONT Font)
{
 8008388:	b082      	sub	sp, #8
 800838a:	b590      	push	{r4, r7, lr}
 800838c:	b089      	sub	sp, #36	@ 0x24
 800838e:	af04      	add	r7, sp, #16
 8008390:	603a      	str	r2, [r7, #0]
 8008392:	627b      	str	r3, [r7, #36]	@ 0x24
 8008394:	4603      	mov	r3, r0
 8008396:	80fb      	strh	r3, [r7, #6]
 8008398:	460b      	mov	r3, r1
 800839a:	80bb      	strh	r3, [r7, #4]
    PAINT_TIME sPaint_time;
    sPaint_time.Hour = sParam_data_alarm_setup_mode->hour;
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	789b      	ldrb	r3, [r3, #2]
 80083a0:	733b      	strb	r3, [r7, #12]
    sPaint_time.Min = sParam_data_alarm_setup_mode->minute;
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	785b      	ldrb	r3, [r3, #1]
 80083a6:	737b      	strb	r3, [r7, #13]
    sPaint_time.Sec = sParam_data_alarm_setup_mode->second;
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	781b      	ldrb	r3, [r3, #0]
 80083ac:	73bb      	strb	r3, [r7, #14]
    Paint_DrawTime(50, Ystart, &sPaint_time, &Font, WHITE, BLACK);
 80083ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80083b2:	f107 0208 	add.w	r2, r7, #8
 80083b6:	88b9      	ldrh	r1, [r7, #4]
 80083b8:	2000      	movs	r0, #0
 80083ba:	9001      	str	r0, [sp, #4]
 80083bc:	20ff      	movs	r0, #255	@ 0xff
 80083be:	9000      	str	r0, [sp, #0]
 80083c0:	2032      	movs	r0, #50	@ 0x32
 80083c2:	f002 f8a7 	bl	800a514 <Paint_DrawTime>
    if(sParam_data_alarm_setup_mode->on_off == TRUE)
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	795b      	ldrb	r3, [r3, #5]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d01d      	beq.n	800840a <drawn_alarm_view_mode+0x82>
    {
    Paint_DrawRectangle(Xstart, Ystart + 2, Xstart + 10, Ystart + 12, BLACK, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 80083ce:	88bb      	ldrh	r3, [r7, #4]
 80083d0:	3302      	adds	r3, #2
 80083d2:	b299      	uxth	r1, r3
 80083d4:	88fb      	ldrh	r3, [r7, #6]
 80083d6:	330a      	adds	r3, #10
 80083d8:	b29a      	uxth	r2, r3
 80083da:	88bb      	ldrh	r3, [r7, #4]
 80083dc:	330c      	adds	r3, #12
 80083de:	b29b      	uxth	r3, r3
 80083e0:	88f8      	ldrh	r0, [r7, #6]
 80083e2:	2401      	movs	r4, #1
 80083e4:	9402      	str	r4, [sp, #8]
 80083e6:	2401      	movs	r4, #1
 80083e8:	9401      	str	r4, [sp, #4]
 80083ea:	2400      	movs	r4, #0
 80083ec:	9400      	str	r4, [sp, #0]
 80083ee:	f001 fe43 	bl	800a078 <Paint_DrawRectangle>
    Paint_DrawString_EN(Xstart + 20, Ystart, "ON", &Font16, BLACK, WHITE);
 80083f2:	88fb      	ldrh	r3, [r7, #6]
 80083f4:	3314      	adds	r3, #20
 80083f6:	b298      	uxth	r0, r3
 80083f8:	88b9      	ldrh	r1, [r7, #4]
 80083fa:	23ff      	movs	r3, #255	@ 0xff
 80083fc:	9301      	str	r3, [sp, #4]
 80083fe:	2300      	movs	r3, #0
 8008400:	9300      	str	r3, [sp, #0]
 8008402:	4b18      	ldr	r3, [pc, #96]	@ (8008464 <drawn_alarm_view_mode+0xdc>)
 8008404:	4a18      	ldr	r2, [pc, #96]	@ (8008468 <drawn_alarm_view_mode+0xe0>)
 8008406:	f001 ff63 	bl	800a2d0 <Paint_DrawString_EN>
    }

    if(sParam_data_alarm_setup_mode->on_off == FALSE)
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	795b      	ldrb	r3, [r3, #5]
 800840e:	f083 0301 	eor.w	r3, r3, #1
 8008412:	b2db      	uxtb	r3, r3
 8008414:	2b00      	cmp	r3, #0
 8008416:	d01d      	beq.n	8008454 <drawn_alarm_view_mode+0xcc>
    {
    Paint_DrawRectangle(Xstart, Ystart + 2, Xstart + 10, Ystart + 12, BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 8008418:	88bb      	ldrh	r3, [r7, #4]
 800841a:	3302      	adds	r3, #2
 800841c:	b299      	uxth	r1, r3
 800841e:	88fb      	ldrh	r3, [r7, #6]
 8008420:	330a      	adds	r3, #10
 8008422:	b29a      	uxth	r2, r3
 8008424:	88bb      	ldrh	r3, [r7, #4]
 8008426:	330c      	adds	r3, #12
 8008428:	b29b      	uxth	r3, r3
 800842a:	88f8      	ldrh	r0, [r7, #6]
 800842c:	2400      	movs	r4, #0
 800842e:	9402      	str	r4, [sp, #8]
 8008430:	2401      	movs	r4, #1
 8008432:	9401      	str	r4, [sp, #4]
 8008434:	2400      	movs	r4, #0
 8008436:	9400      	str	r4, [sp, #0]
 8008438:	f001 fe1e 	bl	800a078 <Paint_DrawRectangle>
    Paint_DrawString_EN(Xstart + 20, Ystart, "OFF", &Font16, BLACK, WHITE);
 800843c:	88fb      	ldrh	r3, [r7, #6]
 800843e:	3314      	adds	r3, #20
 8008440:	b298      	uxth	r0, r3
 8008442:	88b9      	ldrh	r1, [r7, #4]
 8008444:	23ff      	movs	r3, #255	@ 0xff
 8008446:	9301      	str	r3, [sp, #4]
 8008448:	2300      	movs	r3, #0
 800844a:	9300      	str	r3, [sp, #0]
 800844c:	4b05      	ldr	r3, [pc, #20]	@ (8008464 <drawn_alarm_view_mode+0xdc>)
 800844e:	4a07      	ldr	r2, [pc, #28]	@ (800846c <drawn_alarm_view_mode+0xe4>)
 8008450:	f001 ff3e 	bl	800a2d0 <Paint_DrawString_EN>
    }
}
 8008454:	bf00      	nop
 8008456:	3714      	adds	r7, #20
 8008458:	46bd      	mov	sp, r7
 800845a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800845e:	b002      	add	sp, #8
 8008460:	4770      	bx	lr
 8008462:	bf00      	nop
 8008464:	20000274 	.word	0x20000274
 8008468:	0800b78c 	.word	0x0800b78c
 800846c:	0800b790 	.word	0x0800b790

08008470 <alarm_setup_mode>:

//alarm setup mode
void alarm_setup_mode(FLAG_SYSTEM *flag_alarm_set_up_mode, SYSTEM_STATE *system_state, ALARM_SETUP_DATA *alarm_setup_data, uint16_t battery_percentage)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b08a      	sub	sp, #40	@ 0x28
 8008474:	af02      	add	r7, sp, #8
 8008476:	60f8      	str	r0, [r7, #12]
 8008478:	60b9      	str	r1, [r7, #8]
 800847a:	607a      	str	r2, [r7, #4]
 800847c:	807b      	strh	r3, [r7, #2]
	UBYTE *BlackImage;
    UBYTE num = 3;
 800847e:	2303      	movs	r3, #3
 8008480:	77fb      	strb	r3, [r7, #31]
	UWORD Imagesize = ((EPD_2IN9_V2_WIDTH % 8 == 0)? (EPD_2IN9_V2_WIDTH / 8 ): (EPD_2IN9_V2_WIDTH / 8 + 1)) * EPD_2IN9_V2_HEIGHT;
 8008482:	f44f 5394 	mov.w	r3, #4736	@ 0x1280
 8008486:	83bb      	strh	r3, [r7, #28]
    if((BlackImage = (UBYTE *)malloc(Imagesize)) == NULL) {
 8008488:	8bbb      	ldrh	r3, [r7, #28]
 800848a:	4618      	mov	r0, r3
 800848c:	f002 f93c 	bl	800a708 <malloc>
 8008490:	4603      	mov	r3, r0
 8008492:	61bb      	str	r3, [r7, #24]
 8008494:	69bb      	ldr	r3, [r7, #24]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d102      	bne.n	80084a0 <alarm_setup_mode+0x30>
        printf("Failed to apply for black memory...\r\n");
 800849a:	48a8      	ldr	r0, [pc, #672]	@ (800873c <alarm_setup_mode+0x2cc>)
 800849c:	f002 fb1c 	bl	800aad8 <puts>
    }
    ALARM_DATA_SETUP_MODE *alarm_setup_data_store = malloc(sizeof(ALARM_DATA_SETUP_MODE));
 80084a0:	2006      	movs	r0, #6
 80084a2:	f002 f931 	bl	800a708 <malloc>
 80084a6:	4603      	mov	r3, r0
 80084a8:	617b      	str	r3, [r7, #20]
    alarm_setup_data_store->hour    = alarm_setup_data->hour;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	785a      	ldrb	r2, [r3, #1]
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	709a      	strb	r2, [r3, #2]
    alarm_setup_data_store->minute  = alarm_setup_data->minute;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	781a      	ldrb	r2, [r3, #0]
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	705a      	strb	r2, [r3, #1]
    alarm_setup_data_store->on_off  = alarm_setup_data->on_off;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	791a      	ldrb	r2, [r3, #4]
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	715a      	strb	r2, [r3, #5]

    
	EPD_2IN9_V2_Init();
 80084c2:	f7fe fa3b 	bl	800693c <EPD_2IN9_V2_Init>
	if(flag_alarm_set_up_mode->flag_ALARM_SETUP_MODE == 1)
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	78db      	ldrb	r3, [r3, #3]
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d133      	bne.n	8008536 <alarm_setup_mode+0xc6>
	{
        flag_alarm_set_up_mode->flag_ALARM_VIEW_MODE    = 1;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	2201      	movs	r2, #1
 80084d2:	709a      	strb	r2, [r3, #2]
        flag_alarm_set_up_mode->flag_DEFAULT_MODE       = 1;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2201      	movs	r2, #1
 80084d8:	701a      	strb	r2, [r3, #0]
        flag_alarm_set_up_mode->flag_SYSTEM_SETUP_MODE  = 1;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2201      	movs	r2, #1
 80084de:	711a      	strb	r2, [r3, #4]
        flag_alarm_set_up_mode->flag_TIME_SETUP_MODE    = 1;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	2201      	movs	r2, #1
 80084e4:	705a      	strb	r2, [r3, #1]

		EPD_2IN9_V2_Init();
 80084e6:	f7fe fa29 	bl	800693c <EPD_2IN9_V2_Init>
    	EPD_2IN9_V2_Clear();
 80084ea:	f7fe faa9 	bl	8006a40 <EPD_2IN9_V2_Clear>
    	DEV_Delay_ms(1000);
 80084ee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80084f2:	f7fa fb99 	bl	8002c28 <HAL_Delay>
    	EPD_2IN9_V2_Init_Fast();
 80084f6:	f7fe fa5f 	bl	80069b8 <EPD_2IN9_V2_Init_Fast>
    	Paint_NewImage(BlackImage, EPD_2IN9_V2_WIDTH, EPD_2IN9_V2_HEIGHT, 90, WHITE);
 80084fa:	23ff      	movs	r3, #255	@ 0xff
 80084fc:	9300      	str	r3, [sp, #0]
 80084fe:	235a      	movs	r3, #90	@ 0x5a
 8008500:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8008504:	2180      	movs	r1, #128	@ 0x80
 8008506:	69b8      	ldr	r0, [r7, #24]
 8008508:	f001 f9d8 	bl	80098bc <Paint_NewImage>
    	printf("Drawing\r\n");
 800850c:	488c      	ldr	r0, [pc, #560]	@ (8008740 <alarm_setup_mode+0x2d0>)
 800850e:	f002 fae3 	bl	800aad8 <puts>
    	//1.Select Image
    	Paint_SelectImage(BlackImage);
 8008512:	69b8      	ldr	r0, [r7, #24]
 8008514:	f001 fa26 	bl	8009964 <Paint_SelectImage>
    	Paint_Clear(WHITE);
 8008518:	20ff      	movs	r0, #255	@ 0xff
 800851a:	f001 fb7f 	bl	8009c1c <Paint_Clear>

    	// 2.Drawing on the image
           
            drawn_alarm_setup_mode(90, 100, alarm_setup_data_store, Font24);
 800851e:	4b89      	ldr	r3, [pc, #548]	@ (8008744 <alarm_setup_mode+0x2d4>)
 8008520:	685a      	ldr	r2, [r3, #4]
 8008522:	9200      	str	r2, [sp, #0]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	697a      	ldr	r2, [r7, #20]
 8008528:	2164      	movs	r1, #100	@ 0x64
 800852a:	205a      	movs	r0, #90	@ 0x5a
 800852c:	f000 f95a 	bl	80087e4 <drawn_alarm_setup_mode>
    //     case NOT_USED_MODE:
    //         break;
    //     default:
    //         break;
    // }
            EPD_2IN9_V2_Display_Base(BlackImage);
 8008530:	69b8      	ldr	r0, [r7, #24]
 8008532:	f7fe facc 	bl	8006ace <EPD_2IN9_V2_Display_Base>

        // num = num - 1;
        // if(num == 0) {
        // }
		// EPD_2IN9_V2_Display_Partial(BlackImage);
        switch (system_state->alarm_setup_cursor)
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	78db      	ldrb	r3, [r3, #3]
 800853a:	2b04      	cmp	r3, #4
 800853c:	f000 8106 	beq.w	800874c <alarm_setup_mode+0x2dc>
 8008540:	2b04      	cmp	r3, #4
 8008542:	f300 813b 	bgt.w	80087bc <alarm_setup_mode+0x34c>
 8008546:	2b00      	cmp	r3, #0
 8008548:	d003      	beq.n	8008552 <alarm_setup_mode+0xe2>
 800854a:	2b01      	cmp	r3, #1
 800854c:	f000 808e 	beq.w	800866c <alarm_setup_mode+0x1fc>
            //     }
            //     EPD_2IN9_V2_Display_Partial(BlackImage);
            // }
            // break;
        default:
            break;
 8008550:	e134      	b.n	80087bc <alarm_setup_mode+0x34c>
                Paint_ClearWindows(100, 50, 100 + Font24.Width * 7, 50 + Font24.Height, WHITE);
 8008552:	4b7c      	ldr	r3, [pc, #496]	@ (8008744 <alarm_setup_mode+0x2d4>)
 8008554:	889b      	ldrh	r3, [r3, #4]
 8008556:	461a      	mov	r2, r3
 8008558:	00d2      	lsls	r2, r2, #3
 800855a:	1ad3      	subs	r3, r2, r3
 800855c:	b29b      	uxth	r3, r3
 800855e:	3364      	adds	r3, #100	@ 0x64
 8008560:	b29a      	uxth	r2, r3
 8008562:	4b78      	ldr	r3, [pc, #480]	@ (8008744 <alarm_setup_mode+0x2d4>)
 8008564:	88db      	ldrh	r3, [r3, #6]
 8008566:	3332      	adds	r3, #50	@ 0x32
 8008568:	b29b      	uxth	r3, r3
 800856a:	21ff      	movs	r1, #255	@ 0xff
 800856c:	9100      	str	r1, [sp, #0]
 800856e:	2132      	movs	r1, #50	@ 0x32
 8008570:	2064      	movs	r0, #100	@ 0x64
 8008572:	f001 fbfb 	bl	8009d6c <Paint_ClearWindows>
                drawn_alarm_setup_mode(90, 100, alarm_setup_data_store, Font24);
 8008576:	4b73      	ldr	r3, [pc, #460]	@ (8008744 <alarm_setup_mode+0x2d4>)
 8008578:	685a      	ldr	r2, [r3, #4]
 800857a:	9200      	str	r2, [sp, #0]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	697a      	ldr	r2, [r7, #20]
 8008580:	2164      	movs	r1, #100	@ 0x64
 8008582:	205a      	movs	r0, #90	@ 0x5a
 8008584:	f000 f92e 	bl	80087e4 <drawn_alarm_setup_mode>
                    draw_battery(battery_percentage);
 8008588:	887b      	ldrh	r3, [r7, #2]
 800858a:	4618      	mov	r0, r3
 800858c:	f000 ffe8 	bl	8009560 <draw_battery>
                    Paint_ClearWindows(100 + Font24.Width * 2 + Font24.Width / 2, 50, 100 + Font24.Width * 4 +  Font24.Width / 4, 50 + Font24.Height, WHITE);
 8008590:	4b6c      	ldr	r3, [pc, #432]	@ (8008744 <alarm_setup_mode+0x2d4>)
 8008592:	889b      	ldrh	r3, [r3, #4]
 8008594:	3332      	adds	r3, #50	@ 0x32
 8008596:	b29b      	uxth	r3, r3
 8008598:	005b      	lsls	r3, r3, #1
 800859a:	b29a      	uxth	r2, r3
 800859c:	4b69      	ldr	r3, [pc, #420]	@ (8008744 <alarm_setup_mode+0x2d4>)
 800859e:	889b      	ldrh	r3, [r3, #4]
 80085a0:	085b      	lsrs	r3, r3, #1
 80085a2:	b29b      	uxth	r3, r3
 80085a4:	4413      	add	r3, r2
 80085a6:	b298      	uxth	r0, r3
 80085a8:	4b66      	ldr	r3, [pc, #408]	@ (8008744 <alarm_setup_mode+0x2d4>)
 80085aa:	889b      	ldrh	r3, [r3, #4]
 80085ac:	3319      	adds	r3, #25
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	b29a      	uxth	r2, r3
 80085b4:	4b63      	ldr	r3, [pc, #396]	@ (8008744 <alarm_setup_mode+0x2d4>)
 80085b6:	889b      	ldrh	r3, [r3, #4]
 80085b8:	089b      	lsrs	r3, r3, #2
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	4413      	add	r3, r2
 80085be:	b29a      	uxth	r2, r3
 80085c0:	4b60      	ldr	r3, [pc, #384]	@ (8008744 <alarm_setup_mode+0x2d4>)
 80085c2:	88db      	ldrh	r3, [r3, #6]
 80085c4:	3332      	adds	r3, #50	@ 0x32
 80085c6:	b29b      	uxth	r3, r3
 80085c8:	21ff      	movs	r1, #255	@ 0xff
 80085ca:	9100      	str	r1, [sp, #0]
 80085cc:	2132      	movs	r1, #50	@ 0x32
 80085ce:	f001 fbcd 	bl	8009d6c <Paint_ClearWindows>
                    Paint_DrawNum(100 + Font24.Width * 2 + Font24.Width / 2, 50, alarm_setup_data->minute / 10, &Font24, WHITE, BLACK);
 80085d2:	4b5c      	ldr	r3, [pc, #368]	@ (8008744 <alarm_setup_mode+0x2d4>)
 80085d4:	889b      	ldrh	r3, [r3, #4]
 80085d6:	3332      	adds	r3, #50	@ 0x32
 80085d8:	b29b      	uxth	r3, r3
 80085da:	005b      	lsls	r3, r3, #1
 80085dc:	b29a      	uxth	r2, r3
 80085de:	4b59      	ldr	r3, [pc, #356]	@ (8008744 <alarm_setup_mode+0x2d4>)
 80085e0:	889b      	ldrh	r3, [r3, #4]
 80085e2:	085b      	lsrs	r3, r3, #1
 80085e4:	b29b      	uxth	r3, r3
 80085e6:	4413      	add	r3, r2
 80085e8:	b298      	uxth	r0, r3
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	4a56      	ldr	r2, [pc, #344]	@ (8008748 <alarm_setup_mode+0x2d8>)
 80085f0:	fba2 2303 	umull	r2, r3, r2, r3
 80085f4:	08db      	lsrs	r3, r3, #3
 80085f6:	b2db      	uxtb	r3, r3
 80085f8:	461a      	mov	r2, r3
 80085fa:	2300      	movs	r3, #0
 80085fc:	9301      	str	r3, [sp, #4]
 80085fe:	23ff      	movs	r3, #255	@ 0xff
 8008600:	9300      	str	r3, [sp, #0]
 8008602:	4b50      	ldr	r3, [pc, #320]	@ (8008744 <alarm_setup_mode+0x2d4>)
 8008604:	2132      	movs	r1, #50	@ 0x32
 8008606:	f001 feb7 	bl	800a378 <Paint_DrawNum>
                    Paint_DrawNum(100 + Font24.Width * 3 + Font24.Width / 2, 50, alarm_setup_data->minute % 10, &Font24, WHITE, BLACK);
 800860a:	4b4e      	ldr	r3, [pc, #312]	@ (8008744 <alarm_setup_mode+0x2d4>)
 800860c:	889b      	ldrh	r3, [r3, #4]
 800860e:	461a      	mov	r2, r3
 8008610:	0052      	lsls	r2, r2, #1
 8008612:	4413      	add	r3, r2
 8008614:	b29a      	uxth	r2, r3
 8008616:	4b4b      	ldr	r3, [pc, #300]	@ (8008744 <alarm_setup_mode+0x2d4>)
 8008618:	889b      	ldrh	r3, [r3, #4]
 800861a:	085b      	lsrs	r3, r3, #1
 800861c:	b29b      	uxth	r3, r3
 800861e:	4413      	add	r3, r2
 8008620:	b29b      	uxth	r3, r3
 8008622:	3364      	adds	r3, #100	@ 0x64
 8008624:	b298      	uxth	r0, r3
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	781a      	ldrb	r2, [r3, #0]
 800862a:	4b47      	ldr	r3, [pc, #284]	@ (8008748 <alarm_setup_mode+0x2d8>)
 800862c:	fba3 1302 	umull	r1, r3, r3, r2
 8008630:	08d9      	lsrs	r1, r3, #3
 8008632:	460b      	mov	r3, r1
 8008634:	009b      	lsls	r3, r3, #2
 8008636:	440b      	add	r3, r1
 8008638:	005b      	lsls	r3, r3, #1
 800863a:	1ad3      	subs	r3, r2, r3
 800863c:	b2db      	uxtb	r3, r3
 800863e:	461a      	mov	r2, r3
 8008640:	2300      	movs	r3, #0
 8008642:	9301      	str	r3, [sp, #4]
 8008644:	23ff      	movs	r3, #255	@ 0xff
 8008646:	9300      	str	r3, [sp, #0]
 8008648:	4b3e      	ldr	r3, [pc, #248]	@ (8008744 <alarm_setup_mode+0x2d4>)
 800864a:	2132      	movs	r1, #50	@ 0x32
 800864c:	f001 fe94 	bl	800a378 <Paint_DrawNum>
                    num = num - 1;
 8008650:	7ffb      	ldrb	r3, [r7, #31]
 8008652:	3b01      	subs	r3, #1
 8008654:	77fb      	strb	r3, [r7, #31]
                    if(num == 0) {
 8008656:	7ffb      	ldrb	r3, [r7, #31]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d103      	bne.n	8008664 <alarm_setup_mode+0x1f4>
                        num = 3;
 800865c:	2303      	movs	r3, #3
 800865e:	77fb      	strb	r3, [r7, #31]
                        break;
 8008660:	bf00      	nop
            break;
 8008662:	e0ac      	b.n	80087be <alarm_setup_mode+0x34e>
                    EPD_2IN9_V2_Display_Partial(BlackImage);
 8008664:	69b8      	ldr	r0, [r7, #24]
 8008666:	f7fe fa65 	bl	8006b34 <EPD_2IN9_V2_Display_Partial>
                    draw_battery(battery_percentage);
 800866a:	e78d      	b.n	8008588 <alarm_setup_mode+0x118>
                Paint_ClearWindows(100, 50, 100 + Font24.Width * 7, 50 + Font24.Height, WHITE);
 800866c:	4b35      	ldr	r3, [pc, #212]	@ (8008744 <alarm_setup_mode+0x2d4>)
 800866e:	889b      	ldrh	r3, [r3, #4]
 8008670:	461a      	mov	r2, r3
 8008672:	00d2      	lsls	r2, r2, #3
 8008674:	1ad3      	subs	r3, r2, r3
 8008676:	b29b      	uxth	r3, r3
 8008678:	3364      	adds	r3, #100	@ 0x64
 800867a:	b29a      	uxth	r2, r3
 800867c:	4b31      	ldr	r3, [pc, #196]	@ (8008744 <alarm_setup_mode+0x2d4>)
 800867e:	88db      	ldrh	r3, [r3, #6]
 8008680:	3332      	adds	r3, #50	@ 0x32
 8008682:	b29b      	uxth	r3, r3
 8008684:	21ff      	movs	r1, #255	@ 0xff
 8008686:	9100      	str	r1, [sp, #0]
 8008688:	2132      	movs	r1, #50	@ 0x32
 800868a:	2064      	movs	r0, #100	@ 0x64
 800868c:	f001 fb6e 	bl	8009d6c <Paint_ClearWindows>
                drawn_alarm_setup_mode(90, 100, alarm_setup_data_store, Font24);
 8008690:	4b2c      	ldr	r3, [pc, #176]	@ (8008744 <alarm_setup_mode+0x2d4>)
 8008692:	685a      	ldr	r2, [r3, #4]
 8008694:	9200      	str	r2, [sp, #0]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	697a      	ldr	r2, [r7, #20]
 800869a:	2164      	movs	r1, #100	@ 0x64
 800869c:	205a      	movs	r0, #90	@ 0x5a
 800869e:	f000 f8a1 	bl	80087e4 <drawn_alarm_setup_mode>
                    draw_battery(battery_percentage);
 80086a2:	887b      	ldrh	r3, [r7, #2]
 80086a4:	4618      	mov	r0, r3
 80086a6:	f000 ff5b 	bl	8009560 <draw_battery>
                    Paint_ClearWindows(100, 50, 100 + Font24.Width * 2, 50 + Font24.Height, WHITE);
 80086aa:	4b26      	ldr	r3, [pc, #152]	@ (8008744 <alarm_setup_mode+0x2d4>)
 80086ac:	889b      	ldrh	r3, [r3, #4]
 80086ae:	3332      	adds	r3, #50	@ 0x32
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	005b      	lsls	r3, r3, #1
 80086b4:	b29a      	uxth	r2, r3
 80086b6:	4b23      	ldr	r3, [pc, #140]	@ (8008744 <alarm_setup_mode+0x2d4>)
 80086b8:	88db      	ldrh	r3, [r3, #6]
 80086ba:	3332      	adds	r3, #50	@ 0x32
 80086bc:	b29b      	uxth	r3, r3
 80086be:	21ff      	movs	r1, #255	@ 0xff
 80086c0:	9100      	str	r1, [sp, #0]
 80086c2:	2132      	movs	r1, #50	@ 0x32
 80086c4:	2064      	movs	r0, #100	@ 0x64
 80086c6:	f001 fb51 	bl	8009d6c <Paint_ClearWindows>
                    Paint_DrawNum(100, 50, alarm_setup_data->hour / 10, &Font24, WHITE, BLACK);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	785b      	ldrb	r3, [r3, #1]
 80086ce:	4a1e      	ldr	r2, [pc, #120]	@ (8008748 <alarm_setup_mode+0x2d8>)
 80086d0:	fba2 2303 	umull	r2, r3, r2, r3
 80086d4:	08db      	lsrs	r3, r3, #3
 80086d6:	b2db      	uxtb	r3, r3
 80086d8:	461a      	mov	r2, r3
 80086da:	2300      	movs	r3, #0
 80086dc:	9301      	str	r3, [sp, #4]
 80086de:	23ff      	movs	r3, #255	@ 0xff
 80086e0:	9300      	str	r3, [sp, #0]
 80086e2:	4b18      	ldr	r3, [pc, #96]	@ (8008744 <alarm_setup_mode+0x2d4>)
 80086e4:	2132      	movs	r1, #50	@ 0x32
 80086e6:	2064      	movs	r0, #100	@ 0x64
 80086e8:	f001 fe46 	bl	800a378 <Paint_DrawNum>
                    Paint_DrawNum(100 + Font24.Width * 1, 50, alarm_setup_data->hour % 10, &Font24, WHITE, BLACK);
 80086ec:	4b15      	ldr	r3, [pc, #84]	@ (8008744 <alarm_setup_mode+0x2d4>)
 80086ee:	889b      	ldrh	r3, [r3, #4]
 80086f0:	3364      	adds	r3, #100	@ 0x64
 80086f2:	b298      	uxth	r0, r3
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	785a      	ldrb	r2, [r3, #1]
 80086f8:	4b13      	ldr	r3, [pc, #76]	@ (8008748 <alarm_setup_mode+0x2d8>)
 80086fa:	fba3 1302 	umull	r1, r3, r3, r2
 80086fe:	08d9      	lsrs	r1, r3, #3
 8008700:	460b      	mov	r3, r1
 8008702:	009b      	lsls	r3, r3, #2
 8008704:	440b      	add	r3, r1
 8008706:	005b      	lsls	r3, r3, #1
 8008708:	1ad3      	subs	r3, r2, r3
 800870a:	b2db      	uxtb	r3, r3
 800870c:	461a      	mov	r2, r3
 800870e:	2300      	movs	r3, #0
 8008710:	9301      	str	r3, [sp, #4]
 8008712:	23ff      	movs	r3, #255	@ 0xff
 8008714:	9300      	str	r3, [sp, #0]
 8008716:	4b0b      	ldr	r3, [pc, #44]	@ (8008744 <alarm_setup_mode+0x2d4>)
 8008718:	2132      	movs	r1, #50	@ 0x32
 800871a:	f001 fe2d 	bl	800a378 <Paint_DrawNum>
                    num = num - 1;
 800871e:	7ffb      	ldrb	r3, [r7, #31]
 8008720:	3b01      	subs	r3, #1
 8008722:	77fb      	strb	r3, [r7, #31]
                    if(num == 0) {
 8008724:	7ffb      	ldrb	r3, [r7, #31]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d103      	bne.n	8008732 <alarm_setup_mode+0x2c2>
                        num = 3;
 800872a:	2303      	movs	r3, #3
 800872c:	77fb      	strb	r3, [r7, #31]
                        break;
 800872e:	bf00      	nop
            break;
 8008730:	e045      	b.n	80087be <alarm_setup_mode+0x34e>
		            EPD_2IN9_V2_Display_Partial(BlackImage);
 8008732:	69b8      	ldr	r0, [r7, #24]
 8008734:	f7fe f9fe 	bl	8006b34 <EPD_2IN9_V2_Display_Partial>
                    draw_battery(battery_percentage);
 8008738:	e7b3      	b.n	80086a2 <alarm_setup_mode+0x232>
 800873a:	bf00      	nop
 800873c:	0800b6b4 	.word	0x0800b6b4
 8008740:	0800b6dc 	.word	0x0800b6dc
 8008744:	20000284 	.word	0x20000284
 8008748:	cccccccd 	.word	0xcccccccd
                Paint_ClearWindows(100, 50, 100 + Font24.Width * 7, 50 + Font24.Height, WHITE);
 800874c:	4b23      	ldr	r3, [pc, #140]	@ (80087dc <alarm_setup_mode+0x36c>)
 800874e:	889b      	ldrh	r3, [r3, #4]
 8008750:	461a      	mov	r2, r3
 8008752:	00d2      	lsls	r2, r2, #3
 8008754:	1ad3      	subs	r3, r2, r3
 8008756:	b29b      	uxth	r3, r3
 8008758:	3364      	adds	r3, #100	@ 0x64
 800875a:	b29a      	uxth	r2, r3
 800875c:	4b1f      	ldr	r3, [pc, #124]	@ (80087dc <alarm_setup_mode+0x36c>)
 800875e:	88db      	ldrh	r3, [r3, #6]
 8008760:	3332      	adds	r3, #50	@ 0x32
 8008762:	b29b      	uxth	r3, r3
 8008764:	21ff      	movs	r1, #255	@ 0xff
 8008766:	9100      	str	r1, [sp, #0]
 8008768:	2132      	movs	r1, #50	@ 0x32
 800876a:	2064      	movs	r0, #100	@ 0x64
 800876c:	f001 fafe 	bl	8009d6c <Paint_ClearWindows>
                    draw_battery(battery_percentage);
 8008770:	887b      	ldrh	r3, [r7, #2]
 8008772:	4618      	mov	r0, r3
 8008774:	f000 fef4 	bl	8009560 <draw_battery>
                    Paint_ClearWindows(90, 100, 90 + 100, 100 + Font16.Height, WHITE);
 8008778:	4b19      	ldr	r3, [pc, #100]	@ (80087e0 <alarm_setup_mode+0x370>)
 800877a:	88db      	ldrh	r3, [r3, #6]
 800877c:	3364      	adds	r3, #100	@ 0x64
 800877e:	b29b      	uxth	r3, r3
 8008780:	22ff      	movs	r2, #255	@ 0xff
 8008782:	9200      	str	r2, [sp, #0]
 8008784:	22be      	movs	r2, #190	@ 0xbe
 8008786:	2164      	movs	r1, #100	@ 0x64
 8008788:	205a      	movs	r0, #90	@ 0x5a
 800878a:	f001 faef 	bl	8009d6c <Paint_ClearWindows>
                    drawn_alarm_setup_mode(90, 100, alarm_setup_data_store, Font24);
 800878e:	4b13      	ldr	r3, [pc, #76]	@ (80087dc <alarm_setup_mode+0x36c>)
 8008790:	685a      	ldr	r2, [r3, #4]
 8008792:	9200      	str	r2, [sp, #0]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	697a      	ldr	r2, [r7, #20]
 8008798:	2164      	movs	r1, #100	@ 0x64
 800879a:	205a      	movs	r0, #90	@ 0x5a
 800879c:	f000 f822 	bl	80087e4 <drawn_alarm_setup_mode>
                    num = num - 1;
 80087a0:	7ffb      	ldrb	r3, [r7, #31]
 80087a2:	3b01      	subs	r3, #1
 80087a4:	77fb      	strb	r3, [r7, #31]
                    if(num == 0) {
 80087a6:	7ffb      	ldrb	r3, [r7, #31]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d103      	bne.n	80087b4 <alarm_setup_mode+0x344>
                        num = 3;
 80087ac:	2303      	movs	r3, #3
 80087ae:	77fb      	strb	r3, [r7, #31]
                        break;
 80087b0:	bf00      	nop
            break;
 80087b2:	e004      	b.n	80087be <alarm_setup_mode+0x34e>
                    EPD_2IN9_V2_Display_Partial(BlackImage);
 80087b4:	69b8      	ldr	r0, [r7, #24]
 80087b6:	f7fe f9bd 	bl	8006b34 <EPD_2IN9_V2_Display_Partial>
                    draw_battery(battery_percentage);
 80087ba:	e7d9      	b.n	8008770 <alarm_setup_mode+0x300>
            break;
 80087bc:	bf00      	nop
        }
      EPD_2IN9_V2_Sleep();
 80087be:	f7fe fa2b 	bl	8006c18 <EPD_2IN9_V2_Sleep>
      flag_alarm_set_up_mode->flag_ALARM_SETUP_MODE = 0;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2200      	movs	r2, #0
 80087c6:	70da      	strb	r2, [r3, #3]
      free(BlackImage);
 80087c8:	69b8      	ldr	r0, [r7, #24]
 80087ca:	f001 ffa5 	bl	800a718 <free>
      free(alarm_setup_data_store);
 80087ce:	6978      	ldr	r0, [r7, #20]
 80087d0:	f001 ffa2 	bl	800a718 <free>
    //   free(sParam_data_alarm_setup_mode);
}
 80087d4:	bf00      	nop
 80087d6:	3720      	adds	r7, #32
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}
 80087dc:	20000284 	.word	0x20000284
 80087e0:	20000274 	.word	0x20000274

080087e4 <drawn_alarm_setup_mode>:

void drawn_alarm_setup_mode(uint16_t Xstart, uint16_t Ystart, ALARM_DATA_SETUP_MODE *sParam_data_alarm_setup_mode, sFONT Font)
{
 80087e4:	b082      	sub	sp, #8
 80087e6:	b590      	push	{r4, r7, lr}
 80087e8:	b089      	sub	sp, #36	@ 0x24
 80087ea:	af04      	add	r7, sp, #16
 80087ec:	603a      	str	r2, [r7, #0]
 80087ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80087f0:	4603      	mov	r3, r0
 80087f2:	80fb      	strh	r3, [r7, #6]
 80087f4:	460b      	mov	r3, r1
 80087f6:	80bb      	strh	r3, [r7, #4]
    PAINT_TIME sPaint_time;
    sPaint_time.Hour = sParam_data_alarm_setup_mode->hour;
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	789b      	ldrb	r3, [r3, #2]
 80087fc:	733b      	strb	r3, [r7, #12]
    sPaint_time.Min = sParam_data_alarm_setup_mode->minute;
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	785b      	ldrb	r3, [r3, #1]
 8008802:	737b      	strb	r3, [r7, #13]
    sPaint_time.Sec = sParam_data_alarm_setup_mode->second;
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	781b      	ldrb	r3, [r3, #0]
 8008808:	73bb      	strb	r3, [r7, #14]
    Paint_DrawTime(100, 50, &sPaint_time, &Font, WHITE, BLACK);
 800880a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800880e:	f107 0208 	add.w	r2, r7, #8
 8008812:	2100      	movs	r1, #0
 8008814:	9101      	str	r1, [sp, #4]
 8008816:	21ff      	movs	r1, #255	@ 0xff
 8008818:	9100      	str	r1, [sp, #0]
 800881a:	2132      	movs	r1, #50	@ 0x32
 800881c:	2064      	movs	r0, #100	@ 0x64
 800881e:	f001 fe79 	bl	800a514 <Paint_DrawTime>
    Paint_DrawString_EN(Xstart + 20, Ystart, "ON", &Font16, BLACK, WHITE);
 8008822:	88fb      	ldrh	r3, [r7, #6]
 8008824:	3314      	adds	r3, #20
 8008826:	b298      	uxth	r0, r3
 8008828:	88b9      	ldrh	r1, [r7, #4]
 800882a:	23ff      	movs	r3, #255	@ 0xff
 800882c:	9301      	str	r3, [sp, #4]
 800882e:	2300      	movs	r3, #0
 8008830:	9300      	str	r3, [sp, #0]
 8008832:	4b3d      	ldr	r3, [pc, #244]	@ (8008928 <drawn_alarm_setup_mode+0x144>)
 8008834:	4a3d      	ldr	r2, [pc, #244]	@ (800892c <drawn_alarm_setup_mode+0x148>)
 8008836:	f001 fd4b 	bl	800a2d0 <Paint_DrawString_EN>
    Paint_DrawString_EN(Xstart + 50, Ystart, "/", &Font16, WHITE, BLACK);
 800883a:	88fb      	ldrh	r3, [r7, #6]
 800883c:	3332      	adds	r3, #50	@ 0x32
 800883e:	b298      	uxth	r0, r3
 8008840:	88b9      	ldrh	r1, [r7, #4]
 8008842:	2300      	movs	r3, #0
 8008844:	9301      	str	r3, [sp, #4]
 8008846:	23ff      	movs	r3, #255	@ 0xff
 8008848:	9300      	str	r3, [sp, #0]
 800884a:	4b37      	ldr	r3, [pc, #220]	@ (8008928 <drawn_alarm_setup_mode+0x144>)
 800884c:	4a38      	ldr	r2, [pc, #224]	@ (8008930 <drawn_alarm_setup_mode+0x14c>)
 800884e:	f001 fd3f 	bl	800a2d0 <Paint_DrawString_EN>
    Paint_DrawString_EN(Xstart + 90, Ystart, "OFF", &Font16, BLACK, WHITE);
 8008852:	88fb      	ldrh	r3, [r7, #6]
 8008854:	335a      	adds	r3, #90	@ 0x5a
 8008856:	b298      	uxth	r0, r3
 8008858:	88b9      	ldrh	r1, [r7, #4]
 800885a:	23ff      	movs	r3, #255	@ 0xff
 800885c:	9301      	str	r3, [sp, #4]
 800885e:	2300      	movs	r3, #0
 8008860:	9300      	str	r3, [sp, #0]
 8008862:	4b31      	ldr	r3, [pc, #196]	@ (8008928 <drawn_alarm_setup_mode+0x144>)
 8008864:	4a33      	ldr	r2, [pc, #204]	@ (8008934 <drawn_alarm_setup_mode+0x150>)
 8008866:	f001 fd33 	bl	800a2d0 <Paint_DrawString_EN>

    if(sParam_data_alarm_setup_mode->on_off == TRUE)
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	795b      	ldrb	r3, [r3, #5]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d025      	beq.n	80088be <drawn_alarm_setup_mode+0xda>
    {
        Paint_DrawRectangle(Xstart, Ystart + 2, Xstart + 10, Ystart + 12, BLACK, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 8008872:	88bb      	ldrh	r3, [r7, #4]
 8008874:	3302      	adds	r3, #2
 8008876:	b299      	uxth	r1, r3
 8008878:	88fb      	ldrh	r3, [r7, #6]
 800887a:	330a      	adds	r3, #10
 800887c:	b29a      	uxth	r2, r3
 800887e:	88bb      	ldrh	r3, [r7, #4]
 8008880:	330c      	adds	r3, #12
 8008882:	b29b      	uxth	r3, r3
 8008884:	88f8      	ldrh	r0, [r7, #6]
 8008886:	2401      	movs	r4, #1
 8008888:	9402      	str	r4, [sp, #8]
 800888a:	2401      	movs	r4, #1
 800888c:	9401      	str	r4, [sp, #4]
 800888e:	2400      	movs	r4, #0
 8008890:	9400      	str	r4, [sp, #0]
 8008892:	f001 fbf1 	bl	800a078 <Paint_DrawRectangle>
        Paint_DrawRectangle(Xstart + 70, Ystart + 2, Xstart + 80, Ystart + 12, BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 8008896:	88fb      	ldrh	r3, [r7, #6]
 8008898:	3346      	adds	r3, #70	@ 0x46
 800889a:	b298      	uxth	r0, r3
 800889c:	88bb      	ldrh	r3, [r7, #4]
 800889e:	3302      	adds	r3, #2
 80088a0:	b299      	uxth	r1, r3
 80088a2:	88fb      	ldrh	r3, [r7, #6]
 80088a4:	3350      	adds	r3, #80	@ 0x50
 80088a6:	b29a      	uxth	r2, r3
 80088a8:	88bb      	ldrh	r3, [r7, #4]
 80088aa:	330c      	adds	r3, #12
 80088ac:	b29b      	uxth	r3, r3
 80088ae:	2400      	movs	r4, #0
 80088b0:	9402      	str	r4, [sp, #8]
 80088b2:	2401      	movs	r4, #1
 80088b4:	9401      	str	r4, [sp, #4]
 80088b6:	2400      	movs	r4, #0
 80088b8:	9400      	str	r4, [sp, #0]
 80088ba:	f001 fbdd 	bl	800a078 <Paint_DrawRectangle>

    }

    if(sParam_data_alarm_setup_mode->on_off == FALSE)
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	795b      	ldrb	r3, [r3, #5]
 80088c2:	f083 0301 	eor.w	r3, r3, #1
 80088c6:	b2db      	uxtb	r3, r3
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d025      	beq.n	8008918 <drawn_alarm_setup_mode+0x134>
    {
        Paint_DrawRectangle(Xstart, Ystart + 2, Xstart + 10, Ystart + 12, BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 80088cc:	88bb      	ldrh	r3, [r7, #4]
 80088ce:	3302      	adds	r3, #2
 80088d0:	b299      	uxth	r1, r3
 80088d2:	88fb      	ldrh	r3, [r7, #6]
 80088d4:	330a      	adds	r3, #10
 80088d6:	b29a      	uxth	r2, r3
 80088d8:	88bb      	ldrh	r3, [r7, #4]
 80088da:	330c      	adds	r3, #12
 80088dc:	b29b      	uxth	r3, r3
 80088de:	88f8      	ldrh	r0, [r7, #6]
 80088e0:	2400      	movs	r4, #0
 80088e2:	9402      	str	r4, [sp, #8]
 80088e4:	2401      	movs	r4, #1
 80088e6:	9401      	str	r4, [sp, #4]
 80088e8:	2400      	movs	r4, #0
 80088ea:	9400      	str	r4, [sp, #0]
 80088ec:	f001 fbc4 	bl	800a078 <Paint_DrawRectangle>
        Paint_DrawRectangle(Xstart + 70, Ystart + 2, Xstart + 80, Ystart + 12, BLACK, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 80088f0:	88fb      	ldrh	r3, [r7, #6]
 80088f2:	3346      	adds	r3, #70	@ 0x46
 80088f4:	b298      	uxth	r0, r3
 80088f6:	88bb      	ldrh	r3, [r7, #4]
 80088f8:	3302      	adds	r3, #2
 80088fa:	b299      	uxth	r1, r3
 80088fc:	88fb      	ldrh	r3, [r7, #6]
 80088fe:	3350      	adds	r3, #80	@ 0x50
 8008900:	b29a      	uxth	r2, r3
 8008902:	88bb      	ldrh	r3, [r7, #4]
 8008904:	330c      	adds	r3, #12
 8008906:	b29b      	uxth	r3, r3
 8008908:	2401      	movs	r4, #1
 800890a:	9402      	str	r4, [sp, #8]
 800890c:	2401      	movs	r4, #1
 800890e:	9401      	str	r4, [sp, #4]
 8008910:	2400      	movs	r4, #0
 8008912:	9400      	str	r4, [sp, #0]
 8008914:	f001 fbb0 	bl	800a078 <Paint_DrawRectangle>
    }
}
 8008918:	bf00      	nop
 800891a:	3714      	adds	r7, #20
 800891c:	46bd      	mov	sp, r7
 800891e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8008922:	b002      	add	sp, #8
 8008924:	4770      	bx	lr
 8008926:	bf00      	nop
 8008928:	20000274 	.word	0x20000274
 800892c:	0800b78c 	.word	0x0800b78c
 8008930:	0800b794 	.word	0x0800b794
 8008934:	0800b790 	.word	0x0800b790

08008938 <time_setup_mode>:

//Time setup mode
void time_setup_mode(FLAG_SYSTEM *flag_time_set_up_mode, SYSTEM_STATE *system_param, TIME_SETUP_DATA *time_setup_param, uint16_t battery_percentage)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b08e      	sub	sp, #56	@ 0x38
 800893c:	af02      	add	r7, sp, #8
 800893e:	60f8      	str	r0, [r7, #12]
 8008940:	60b9      	str	r1, [r7, #8]
 8008942:	607a      	str	r2, [r7, #4]
 8008944:	807b      	strh	r3, [r7, #2]
    UBYTE *BlackImage;
    UBYTE num = 3;
 8008946:	2303      	movs	r3, #3
 8008948:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	UWORD Imagesize = ((EPD_2IN9_V2_WIDTH % 8 == 0)? (EPD_2IN9_V2_WIDTH / 8 ): (EPD_2IN9_V2_WIDTH / 8 + 1)) * EPD_2IN9_V2_HEIGHT;
 800894c:	f44f 5394 	mov.w	r3, #4736	@ 0x1280
 8008950:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    if((BlackImage = (UBYTE *)malloc(Imagesize)) == NULL) {
 8008952:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8008954:	4618      	mov	r0, r3
 8008956:	f001 fed7 	bl	800a708 <malloc>
 800895a:	4603      	mov	r3, r0
 800895c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800895e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008960:	2b00      	cmp	r3, #0
 8008962:	d102      	bne.n	800896a <time_setup_mode+0x32>
        printf("Failed to apply for black memory...\r\n");
 8008964:	48c1      	ldr	r0, [pc, #772]	@ (8008c6c <time_setup_mode+0x334>)
 8008966:	f002 f8b7 	bl	800aad8 <puts>
    }


    
	EPD_2IN9_V2_Init();
 800896a:	f7fd ffe7 	bl	800693c <EPD_2IN9_V2_Init>
    PAINT_TIME sPaint_time;
    sPaint_time.Hour = time_setup_param->hour;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	785b      	ldrb	r3, [r3, #1]
 8008972:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    sPaint_time.Min = time_setup_param->minute;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	781b      	ldrb	r3, [r3, #0]
 800897a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    sPaint_time.Sec = 0;
 800897e:	2300      	movs	r3, #0
 8008980:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if(flag_time_set_up_mode->flag_TIME_SETUP_MODE == 1)
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	785b      	ldrb	r3, [r3, #1]
 8008988:	2b01      	cmp	r3, #1
 800898a:	d151      	bne.n	8008a30 <time_setup_mode+0xf8>
	{
        flag_time_set_up_mode->flag_ALARM_SETUP_MODE    = 1;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2201      	movs	r2, #1
 8008990:	70da      	strb	r2, [r3, #3]
        flag_time_set_up_mode->flag_ALARM_VIEW_MODE     = 1;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	2201      	movs	r2, #1
 8008996:	709a      	strb	r2, [r3, #2]
        flag_time_set_up_mode->flag_SYSTEM_SETUP_MODE   = 1;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2201      	movs	r2, #1
 800899c:	711a      	strb	r2, [r3, #4]
        flag_time_set_up_mode->flag_DEFAULT_MODE        = 1;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	2201      	movs	r2, #1
 80089a2:	701a      	strb	r2, [r3, #0]

		EPD_2IN9_V2_Init();
 80089a4:	f7fd ffca 	bl	800693c <EPD_2IN9_V2_Init>
    	EPD_2IN9_V2_Clear();
 80089a8:	f7fe f84a 	bl	8006a40 <EPD_2IN9_V2_Clear>
    	DEV_Delay_ms(1000);
 80089ac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80089b0:	f7fa f93a 	bl	8002c28 <HAL_Delay>
    	EPD_2IN9_V2_Init_Fast();
 80089b4:	f7fe f800 	bl	80069b8 <EPD_2IN9_V2_Init_Fast>
    	Paint_NewImage(BlackImage, EPD_2IN9_V2_WIDTH, EPD_2IN9_V2_HEIGHT, 90, WHITE);
 80089b8:	23ff      	movs	r3, #255	@ 0xff
 80089ba:	9300      	str	r3, [sp, #0]
 80089bc:	235a      	movs	r3, #90	@ 0x5a
 80089be:	f44f 7294 	mov.w	r2, #296	@ 0x128
 80089c2:	2180      	movs	r1, #128	@ 0x80
 80089c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80089c6:	f000 ff79 	bl	80098bc <Paint_NewImage>
    	printf("Drawing\r\n");
 80089ca:	48a9      	ldr	r0, [pc, #676]	@ (8008c70 <time_setup_mode+0x338>)
 80089cc:	f002 f884 	bl	800aad8 <puts>
    	//1.Select Image
    	Paint_SelectImage(BlackImage);
 80089d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80089d2:	f000 ffc7 	bl	8009964 <Paint_SelectImage>
    	Paint_Clear(WHITE);
 80089d6:	20ff      	movs	r0, #255	@ 0xff
 80089d8:	f001 f920 	bl	8009c1c <Paint_Clear>

    	// 2.Drawing on the image       
        Paint_ClearWindows(80, 100, 220, 100 + Font16.Height, WHITE);
 80089dc:	4ba5      	ldr	r3, [pc, #660]	@ (8008c74 <time_setup_mode+0x33c>)
 80089de:	88db      	ldrh	r3, [r3, #6]
 80089e0:	3364      	adds	r3, #100	@ 0x64
 80089e2:	b29b      	uxth	r3, r3
 80089e4:	22ff      	movs	r2, #255	@ 0xff
 80089e6:	9200      	str	r2, [sp, #0]
 80089e8:	22dc      	movs	r2, #220	@ 0xdc
 80089ea:	2164      	movs	r1, #100	@ 0x64
 80089ec:	2050      	movs	r0, #80	@ 0x50
 80089ee:	f001 f9bd 	bl	8009d6c <Paint_ClearWindows>
        Paint_DrawTime(100, 50, &sPaint_time, &Font24, WHITE, BLACK);
 80089f2:	f107 0220 	add.w	r2, r7, #32
 80089f6:	2300      	movs	r3, #0
 80089f8:	9301      	str	r3, [sp, #4]
 80089fa:	23ff      	movs	r3, #255	@ 0xff
 80089fc:	9300      	str	r3, [sp, #0]
 80089fe:	4b9e      	ldr	r3, [pc, #632]	@ (8008c78 <time_setup_mode+0x340>)
 8008a00:	2132      	movs	r1, #50	@ 0x32
 8008a02:	2064      	movs	r0, #100	@ 0x64
 8008a04:	f001 fd86 	bl	800a514 <Paint_DrawTime>
        draw_day(time_setup_param->dow, time_setup_param->dom, time_setup_param->month, time_setup_param->year);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	789b      	ldrb	r3, [r3, #2]
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	78db      	ldrb	r3, [r3, #3]
 8008a12:	4619      	mov	r1, r3
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	791b      	ldrb	r3, [r3, #4]
 8008a18:	461a      	mov	r2, r3
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	795b      	ldrb	r3, [r3, #5]
 8008a1e:	f000 fc21 	bl	8009264 <draw_day>
        draw_battery(battery_percentage);
 8008a22:	887b      	ldrh	r3, [r7, #2]
 8008a24:	4618      	mov	r0, r3
 8008a26:	f000 fd9b 	bl	8009560 <draw_battery>
        // drawn_alarm_setup_mode(90, 100, time_setup_param, Font24);
    	EPD_2IN9_V2_Display_Base(BlackImage);
 8008a2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a2c:	f7fe f84f 	bl	8006ace <EPD_2IN9_V2_Display_Base>
        // }
		// EPD_2IN9_V2_Display_Partial(BlackImage);
        char day_string[5];
    char month_string[5];

    switch (time_setup_param->dow)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	789b      	ldrb	r3, [r3, #2]
 8008a34:	3b01      	subs	r3, #1
 8008a36:	2b06      	cmp	r3, #6
 8008a38:	d85b      	bhi.n	8008af2 <time_setup_mode+0x1ba>
 8008a3a:	a201      	add	r2, pc, #4	@ (adr r2, 8008a40 <time_setup_mode+0x108>)
 8008a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a40:	08008a5d 	.word	0x08008a5d
 8008a44:	08008a73 	.word	0x08008a73
 8008a48:	08008a89 	.word	0x08008a89
 8008a4c:	08008a9f 	.word	0x08008a9f
 8008a50:	08008ab5 	.word	0x08008ab5
 8008a54:	08008ac7 	.word	0x08008ac7
 8008a58:	08008add 	.word	0x08008add
    {
    case 1:
        day_string[0] = 'S';
 8008a5c:	2353      	movs	r3, #83	@ 0x53
 8008a5e:	763b      	strb	r3, [r7, #24]
        day_string[1] = 'U';
 8008a60:	2355      	movs	r3, #85	@ 0x55
 8008a62:	767b      	strb	r3, [r7, #25]
        day_string[2] = 'N';
 8008a64:	234e      	movs	r3, #78	@ 0x4e
 8008a66:	76bb      	strb	r3, [r7, #26]
        day_string[3] = NULL;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	76fb      	strb	r3, [r7, #27]
        day_string[4] = NULL;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	773b      	strb	r3, [r7, #28]
        break;
 8008a70:	e040      	b.n	8008af4 <time_setup_mode+0x1bc>
    case 2:
        day_string[0] = 'M';
 8008a72:	234d      	movs	r3, #77	@ 0x4d
 8008a74:	763b      	strb	r3, [r7, #24]
        day_string[1] = 'O';
 8008a76:	234f      	movs	r3, #79	@ 0x4f
 8008a78:	767b      	strb	r3, [r7, #25]
        day_string[2] = 'N';
 8008a7a:	234e      	movs	r3, #78	@ 0x4e
 8008a7c:	76bb      	strb	r3, [r7, #26]
        day_string[3] = NULL;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	76fb      	strb	r3, [r7, #27]
        day_string[4] = NULL;
 8008a82:	2300      	movs	r3, #0
 8008a84:	773b      	strb	r3, [r7, #28]
        break;
 8008a86:	e035      	b.n	8008af4 <time_setup_mode+0x1bc>

    case 3:
        day_string[0] = 'T';
 8008a88:	2354      	movs	r3, #84	@ 0x54
 8008a8a:	763b      	strb	r3, [r7, #24]
        day_string[1] = 'U';
 8008a8c:	2355      	movs	r3, #85	@ 0x55
 8008a8e:	767b      	strb	r3, [r7, #25]
        day_string[2] = 'E';
 8008a90:	2345      	movs	r3, #69	@ 0x45
 8008a92:	76bb      	strb	r3, [r7, #26]
        day_string[3] = 'S';
 8008a94:	2353      	movs	r3, #83	@ 0x53
 8008a96:	76fb      	strb	r3, [r7, #27]
        day_string[4] = NULL;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	773b      	strb	r3, [r7, #28]
        break;
 8008a9c:	e02a      	b.n	8008af4 <time_setup_mode+0x1bc>

    case 4:
        day_string[0] = 'W';
 8008a9e:	2357      	movs	r3, #87	@ 0x57
 8008aa0:	763b      	strb	r3, [r7, #24]
        day_string[1] = 'E';
 8008aa2:	2345      	movs	r3, #69	@ 0x45
 8008aa4:	767b      	strb	r3, [r7, #25]
        day_string[2] = 'D';
 8008aa6:	2344      	movs	r3, #68	@ 0x44
 8008aa8:	76bb      	strb	r3, [r7, #26]
        day_string[3] = 'N';
 8008aaa:	234e      	movs	r3, #78	@ 0x4e
 8008aac:	76fb      	strb	r3, [r7, #27]
        day_string[4] = NULL;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	773b      	strb	r3, [r7, #28]
        break;
 8008ab2:	e01f      	b.n	8008af4 <time_setup_mode+0x1bc>

    case 5:
        day_string[0] = 'T';
 8008ab4:	2354      	movs	r3, #84	@ 0x54
 8008ab6:	763b      	strb	r3, [r7, #24]
        day_string[1] = 'H';
 8008ab8:	2348      	movs	r3, #72	@ 0x48
 8008aba:	767b      	strb	r3, [r7, #25]
        day_string[2] = 'U';
 8008abc:	2355      	movs	r3, #85	@ 0x55
 8008abe:	76bb      	strb	r3, [r7, #26]
        day_string[3] = 'R';
 8008ac0:	2352      	movs	r3, #82	@ 0x52
 8008ac2:	76fb      	strb	r3, [r7, #27]
        break;
 8008ac4:	e016      	b.n	8008af4 <time_setup_mode+0x1bc>

    case 6:
        day_string[0] = 'F';
 8008ac6:	2346      	movs	r3, #70	@ 0x46
 8008ac8:	763b      	strb	r3, [r7, #24]
        day_string[1] = 'R';
 8008aca:	2352      	movs	r3, #82	@ 0x52
 8008acc:	767b      	strb	r3, [r7, #25]
        day_string[2] = 'I';
 8008ace:	2349      	movs	r3, #73	@ 0x49
 8008ad0:	76bb      	strb	r3, [r7, #26]
        day_string[3] = NULL;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	76fb      	strb	r3, [r7, #27]
        day_string[4] = NULL;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	773b      	strb	r3, [r7, #28]
        break;
 8008ada:	e00b      	b.n	8008af4 <time_setup_mode+0x1bc>

    case 7:
        day_string[0] = 'S';
 8008adc:	2353      	movs	r3, #83	@ 0x53
 8008ade:	763b      	strb	r3, [r7, #24]
        day_string[1] = 'A';
 8008ae0:	2341      	movs	r3, #65	@ 0x41
 8008ae2:	767b      	strb	r3, [r7, #25]
        day_string[2] = 'T';
 8008ae4:	2354      	movs	r3, #84	@ 0x54
 8008ae6:	76bb      	strb	r3, [r7, #26]
        day_string[3] = NULL;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	76fb      	strb	r3, [r7, #27]
        day_string[4] = NULL;
 8008aec:	2300      	movs	r3, #0
 8008aee:	773b      	strb	r3, [r7, #28]
        break;
 8008af0:	e000      	b.n	8008af4 <time_setup_mode+0x1bc>

    default:
        break;
 8008af2:	bf00      	nop
    }

switch (time_setup_param->month)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	791b      	ldrb	r3, [r3, #4]
 8008af8:	3b01      	subs	r3, #1
 8008afa:	2b0b      	cmp	r3, #11
 8008afc:	f200 80a0 	bhi.w	8008c40 <time_setup_mode+0x308>
 8008b00:	a201      	add	r2, pc, #4	@ (adr r2, 8008b08 <time_setup_mode+0x1d0>)
 8008b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b06:	bf00      	nop
 8008b08:	08008b39 	.word	0x08008b39
 8008b0c:	08008b4f 	.word	0x08008b4f
 8008b10:	08008b65 	.word	0x08008b65
 8008b14:	08008b7b 	.word	0x08008b7b
 8008b18:	08008b91 	.word	0x08008b91
 8008b1c:	08008ba7 	.word	0x08008ba7
 8008b20:	08008bbd 	.word	0x08008bbd
 8008b24:	08008bd3 	.word	0x08008bd3
 8008b28:	08008be9 	.word	0x08008be9
 8008b2c:	08008bff 	.word	0x08008bff
 8008b30:	08008c15 	.word	0x08008c15
 8008b34:	08008c2b 	.word	0x08008c2b
    {
    case 1:
        month_string[0] = 'J';
 8008b38:	234a      	movs	r3, #74	@ 0x4a
 8008b3a:	743b      	strb	r3, [r7, #16]
        month_string[1] = 'A';
 8008b3c:	2341      	movs	r3, #65	@ 0x41
 8008b3e:	747b      	strb	r3, [r7, #17]
        month_string[2] = 'N';
 8008b40:	234e      	movs	r3, #78	@ 0x4e
 8008b42:	74bb      	strb	r3, [r7, #18]
        month_string[3] = NULL;
 8008b44:	2300      	movs	r3, #0
 8008b46:	74fb      	strb	r3, [r7, #19]
        month_string[4] = NULL;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	753b      	strb	r3, [r7, #20]
        break;
 8008b4c:	e079      	b.n	8008c42 <time_setup_mode+0x30a>
    case 2:
        month_string[0] = 'F';
 8008b4e:	2346      	movs	r3, #70	@ 0x46
 8008b50:	743b      	strb	r3, [r7, #16]
        month_string[1] = 'E';
 8008b52:	2345      	movs	r3, #69	@ 0x45
 8008b54:	747b      	strb	r3, [r7, #17]
        month_string[2] = 'B';
 8008b56:	2342      	movs	r3, #66	@ 0x42
 8008b58:	74bb      	strb	r3, [r7, #18]
        month_string[3] = NULL;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	74fb      	strb	r3, [r7, #19]
        month_string[4] = NULL;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	753b      	strb	r3, [r7, #20]
        break;
 8008b62:	e06e      	b.n	8008c42 <time_setup_mode+0x30a>

    case 3:
        month_string[0] = 'M';
 8008b64:	234d      	movs	r3, #77	@ 0x4d
 8008b66:	743b      	strb	r3, [r7, #16]
        month_string[1] = 'A';
 8008b68:	2341      	movs	r3, #65	@ 0x41
 8008b6a:	747b      	strb	r3, [r7, #17]
        month_string[2] = 'R';
 8008b6c:	2352      	movs	r3, #82	@ 0x52
 8008b6e:	74bb      	strb	r3, [r7, #18]
        month_string[3] = NULL;
 8008b70:	2300      	movs	r3, #0
 8008b72:	74fb      	strb	r3, [r7, #19]
        month_string[4] = NULL;
 8008b74:	2300      	movs	r3, #0
 8008b76:	753b      	strb	r3, [r7, #20]
        break;
 8008b78:	e063      	b.n	8008c42 <time_setup_mode+0x30a>

    case 4:
        month_string[0] = 'A';
 8008b7a:	2341      	movs	r3, #65	@ 0x41
 8008b7c:	743b      	strb	r3, [r7, #16]
        month_string[1] = 'P';
 8008b7e:	2350      	movs	r3, #80	@ 0x50
 8008b80:	747b      	strb	r3, [r7, #17]
        month_string[2] = 'I';
 8008b82:	2349      	movs	r3, #73	@ 0x49
 8008b84:	74bb      	strb	r3, [r7, #18]
        month_string[3] = 'R';
 8008b86:	2352      	movs	r3, #82	@ 0x52
 8008b88:	74fb      	strb	r3, [r7, #19]
        month_string[4] = NULL;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	753b      	strb	r3, [r7, #20]
        break;
 8008b8e:	e058      	b.n	8008c42 <time_setup_mode+0x30a>

    case 5:
        month_string[0] = 'M';
 8008b90:	234d      	movs	r3, #77	@ 0x4d
 8008b92:	743b      	strb	r3, [r7, #16]
        month_string[1] = 'A';
 8008b94:	2341      	movs	r3, #65	@ 0x41
 8008b96:	747b      	strb	r3, [r7, #17]
        month_string[2] = 'Y';
 8008b98:	2359      	movs	r3, #89	@ 0x59
 8008b9a:	74bb      	strb	r3, [r7, #18]
        month_string[3] = NULL;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	74fb      	strb	r3, [r7, #19]
        month_string[4] = NULL;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	753b      	strb	r3, [r7, #20]
        break;
 8008ba4:	e04d      	b.n	8008c42 <time_setup_mode+0x30a>

    case 6:
        month_string[0] = 'J';
 8008ba6:	234a      	movs	r3, #74	@ 0x4a
 8008ba8:	743b      	strb	r3, [r7, #16]
        month_string[1] = 'U';
 8008baa:	2355      	movs	r3, #85	@ 0x55
 8008bac:	747b      	strb	r3, [r7, #17]
        month_string[2] = 'N';
 8008bae:	234e      	movs	r3, #78	@ 0x4e
 8008bb0:	74bb      	strb	r3, [r7, #18]
        month_string[3] = 'E';
 8008bb2:	2345      	movs	r3, #69	@ 0x45
 8008bb4:	74fb      	strb	r3, [r7, #19]
        month_string[4] = NULL;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	753b      	strb	r3, [r7, #20]
        break;
 8008bba:	e042      	b.n	8008c42 <time_setup_mode+0x30a>

    case 7:
        month_string[0] = 'J';
 8008bbc:	234a      	movs	r3, #74	@ 0x4a
 8008bbe:	743b      	strb	r3, [r7, #16]
        month_string[1] = 'U';
 8008bc0:	2355      	movs	r3, #85	@ 0x55
 8008bc2:	747b      	strb	r3, [r7, #17]
        month_string[2] = 'L';
 8008bc4:	234c      	movs	r3, #76	@ 0x4c
 8008bc6:	74bb      	strb	r3, [r7, #18]
        month_string[3] = 'Y';
 8008bc8:	2359      	movs	r3, #89	@ 0x59
 8008bca:	74fb      	strb	r3, [r7, #19]
        month_string[4] = NULL;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	753b      	strb	r3, [r7, #20]
        break;
 8008bd0:	e037      	b.n	8008c42 <time_setup_mode+0x30a>

    case 8:
        month_string[0] = 'A';
 8008bd2:	2341      	movs	r3, #65	@ 0x41
 8008bd4:	743b      	strb	r3, [r7, #16]
        month_string[1] = 'U';
 8008bd6:	2355      	movs	r3, #85	@ 0x55
 8008bd8:	747b      	strb	r3, [r7, #17]
        month_string[2] = 'G';
 8008bda:	2347      	movs	r3, #71	@ 0x47
 8008bdc:	74bb      	strb	r3, [r7, #18]
        month_string[3] = NULL;
 8008bde:	2300      	movs	r3, #0
 8008be0:	74fb      	strb	r3, [r7, #19]
        month_string[4] = NULL;
 8008be2:	2300      	movs	r3, #0
 8008be4:	753b      	strb	r3, [r7, #20]
        break;
 8008be6:	e02c      	b.n	8008c42 <time_setup_mode+0x30a>

    case 9:
        month_string[0] = 'S';
 8008be8:	2353      	movs	r3, #83	@ 0x53
 8008bea:	743b      	strb	r3, [r7, #16]
        month_string[1] = 'E';
 8008bec:	2345      	movs	r3, #69	@ 0x45
 8008bee:	747b      	strb	r3, [r7, #17]
        month_string[2] = 'P';
 8008bf0:	2350      	movs	r3, #80	@ 0x50
 8008bf2:	74bb      	strb	r3, [r7, #18]
        month_string[3] = 'T';
 8008bf4:	2354      	movs	r3, #84	@ 0x54
 8008bf6:	74fb      	strb	r3, [r7, #19]
        month_string[4] = NULL;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	753b      	strb	r3, [r7, #20]
        break;
 8008bfc:	e021      	b.n	8008c42 <time_setup_mode+0x30a>
    case 10:
        month_string[0] = 'O';
 8008bfe:	234f      	movs	r3, #79	@ 0x4f
 8008c00:	743b      	strb	r3, [r7, #16]
        month_string[1] = 'C';
 8008c02:	2343      	movs	r3, #67	@ 0x43
 8008c04:	747b      	strb	r3, [r7, #17]
        month_string[2] = 'T';
 8008c06:	2354      	movs	r3, #84	@ 0x54
 8008c08:	74bb      	strb	r3, [r7, #18]
        month_string[3] = NULL;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	74fb      	strb	r3, [r7, #19]
        month_string[4] = NULL;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	753b      	strb	r3, [r7, #20]
        break;
 8008c12:	e016      	b.n	8008c42 <time_setup_mode+0x30a>

    case 11:
        month_string[0] = 'N';
 8008c14:	234e      	movs	r3, #78	@ 0x4e
 8008c16:	743b      	strb	r3, [r7, #16]
        month_string[1] = 'O';
 8008c18:	234f      	movs	r3, #79	@ 0x4f
 8008c1a:	747b      	strb	r3, [r7, #17]
        month_string[2] = 'V';
 8008c1c:	2356      	movs	r3, #86	@ 0x56
 8008c1e:	74bb      	strb	r3, [r7, #18]
        month_string[3] = NULL;
 8008c20:	2300      	movs	r3, #0
 8008c22:	74fb      	strb	r3, [r7, #19]
        month_string[4] = NULL;
 8008c24:	2300      	movs	r3, #0
 8008c26:	753b      	strb	r3, [r7, #20]
        break;
 8008c28:	e00b      	b.n	8008c42 <time_setup_mode+0x30a>

    case 12:
        month_string[0] = 'D';
 8008c2a:	2344      	movs	r3, #68	@ 0x44
 8008c2c:	743b      	strb	r3, [r7, #16]
        month_string[1] = 'E';
 8008c2e:	2345      	movs	r3, #69	@ 0x45
 8008c30:	747b      	strb	r3, [r7, #17]
        month_string[2] = 'C';
 8008c32:	2343      	movs	r3, #67	@ 0x43
 8008c34:	74bb      	strb	r3, [r7, #18]
        month_string[3] = NULL;
 8008c36:	2300      	movs	r3, #0
 8008c38:	74fb      	strb	r3, [r7, #19]
        month_string[4] = NULL;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	753b      	strb	r3, [r7, #20]
        break;
 8008c3e:	e000      	b.n	8008c42 <time_setup_mode+0x30a>
    default:
        break;
 8008c40:	bf00      	nop
    }
    
        //translate day month
        switch (system_param->time_setup_cursor)
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	789b      	ldrb	r3, [r3, #2]
 8008c46:	2b05      	cmp	r3, #5
 8008c48:	f200 82f9 	bhi.w	800923e <time_setup_mode+0x906>
 8008c4c:	a201      	add	r2, pc, #4	@ (adr r2, 8008c54 <time_setup_mode+0x31c>)
 8008c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c52:	bf00      	nop
 8008c54:	08008c7d 	.word	0x08008c7d
 8008c58:	08008dcb 	.word	0x08008dcb
 8008c5c:	08008ed9 	.word	0x08008ed9
 8008c60:	0800904d 	.word	0x0800904d
 8008c64:	08008f93 	.word	0x08008f93
 8008c68:	0800914d 	.word	0x0800914d
 8008c6c:	0800b6b4 	.word	0x0800b6b4
 8008c70:	0800b6dc 	.word	0x0800b6dc
 8008c74:	20000274 	.word	0x20000274
 8008c78:	20000284 	.word	0x20000284
        {
            case TIME_MINUTE:
                /* code */
                Paint_ClearWindows(100, 50, 100 + Font24.Width * 7, 50 + Font24.Height, WHITE);
 8008c7c:	4b93      	ldr	r3, [pc, #588]	@ (8008ecc <time_setup_mode+0x594>)
 8008c7e:	889b      	ldrh	r3, [r3, #4]
 8008c80:	461a      	mov	r2, r3
 8008c82:	00d2      	lsls	r2, r2, #3
 8008c84:	1ad3      	subs	r3, r2, r3
 8008c86:	b29b      	uxth	r3, r3
 8008c88:	3364      	adds	r3, #100	@ 0x64
 8008c8a:	b29a      	uxth	r2, r3
 8008c8c:	4b8f      	ldr	r3, [pc, #572]	@ (8008ecc <time_setup_mode+0x594>)
 8008c8e:	88db      	ldrh	r3, [r3, #6]
 8008c90:	3332      	adds	r3, #50	@ 0x32
 8008c92:	b29b      	uxth	r3, r3
 8008c94:	21ff      	movs	r1, #255	@ 0xff
 8008c96:	9100      	str	r1, [sp, #0]
 8008c98:	2132      	movs	r1, #50	@ 0x32
 8008c9a:	2064      	movs	r0, #100	@ 0x64
 8008c9c:	f001 f866 	bl	8009d6c <Paint_ClearWindows>
                Paint_DrawTime(100, 50, &sPaint_time,  &Font24, WHITE, BLACK);
 8008ca0:	f107 0220 	add.w	r2, r7, #32
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	9301      	str	r3, [sp, #4]
 8008ca8:	23ff      	movs	r3, #255	@ 0xff
 8008caa:	9300      	str	r3, [sp, #0]
 8008cac:	4b87      	ldr	r3, [pc, #540]	@ (8008ecc <time_setup_mode+0x594>)
 8008cae:	2132      	movs	r1, #50	@ 0x32
 8008cb0:	2064      	movs	r0, #100	@ 0x64
 8008cb2:	f001 fc2f 	bl	800a514 <Paint_DrawTime>
                Paint_ClearWindows(80, 100, 220, 100 + Font16.Height, WHITE);
 8008cb6:	4b86      	ldr	r3, [pc, #536]	@ (8008ed0 <time_setup_mode+0x598>)
 8008cb8:	88db      	ldrh	r3, [r3, #6]
 8008cba:	3364      	adds	r3, #100	@ 0x64
 8008cbc:	b29b      	uxth	r3, r3
 8008cbe:	22ff      	movs	r2, #255	@ 0xff
 8008cc0:	9200      	str	r2, [sp, #0]
 8008cc2:	22dc      	movs	r2, #220	@ 0xdc
 8008cc4:	2164      	movs	r1, #100	@ 0x64
 8008cc6:	2050      	movs	r0, #80	@ 0x50
 8008cc8:	f001 f850 	bl	8009d6c <Paint_ClearWindows>
                draw_day(time_setup_param->dow, time_setup_param->dom, time_setup_param->month, time_setup_param->year);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	789b      	ldrb	r3, [r3, #2]
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	78db      	ldrb	r3, [r3, #3]
 8008cd6:	4619      	mov	r1, r3
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	791b      	ldrb	r3, [r3, #4]
 8008cdc:	461a      	mov	r2, r3
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	795b      	ldrb	r3, [r3, #5]
 8008ce2:	f000 fabf 	bl	8009264 <draw_day>
                for(;;)
                {
                    Paint_ClearWindows(100 + Font24.Width * 2 + Font24.Width / 2, 50, 100 + Font24.Width * 4 +  Font24.Width / 4, 50 + Font24.Height, WHITE);
 8008ce6:	4b79      	ldr	r3, [pc, #484]	@ (8008ecc <time_setup_mode+0x594>)
 8008ce8:	889b      	ldrh	r3, [r3, #4]
 8008cea:	3332      	adds	r3, #50	@ 0x32
 8008cec:	b29b      	uxth	r3, r3
 8008cee:	005b      	lsls	r3, r3, #1
 8008cf0:	b29a      	uxth	r2, r3
 8008cf2:	4b76      	ldr	r3, [pc, #472]	@ (8008ecc <time_setup_mode+0x594>)
 8008cf4:	889b      	ldrh	r3, [r3, #4]
 8008cf6:	085b      	lsrs	r3, r3, #1
 8008cf8:	b29b      	uxth	r3, r3
 8008cfa:	4413      	add	r3, r2
 8008cfc:	b298      	uxth	r0, r3
 8008cfe:	4b73      	ldr	r3, [pc, #460]	@ (8008ecc <time_setup_mode+0x594>)
 8008d00:	889b      	ldrh	r3, [r3, #4]
 8008d02:	3319      	adds	r3, #25
 8008d04:	b29b      	uxth	r3, r3
 8008d06:	009b      	lsls	r3, r3, #2
 8008d08:	b29a      	uxth	r2, r3
 8008d0a:	4b70      	ldr	r3, [pc, #448]	@ (8008ecc <time_setup_mode+0x594>)
 8008d0c:	889b      	ldrh	r3, [r3, #4]
 8008d0e:	089b      	lsrs	r3, r3, #2
 8008d10:	b29b      	uxth	r3, r3
 8008d12:	4413      	add	r3, r2
 8008d14:	b29a      	uxth	r2, r3
 8008d16:	4b6d      	ldr	r3, [pc, #436]	@ (8008ecc <time_setup_mode+0x594>)
 8008d18:	88db      	ldrh	r3, [r3, #6]
 8008d1a:	3332      	adds	r3, #50	@ 0x32
 8008d1c:	b29b      	uxth	r3, r3
 8008d1e:	21ff      	movs	r1, #255	@ 0xff
 8008d20:	9100      	str	r1, [sp, #0]
 8008d22:	2132      	movs	r1, #50	@ 0x32
 8008d24:	f001 f822 	bl	8009d6c <Paint_ClearWindows>
                    Paint_DrawNum(100 + Font24.Width * 2 + Font24.Width / 2, 50, time_setup_param->minute / 10, &Font24, WHITE, BLACK);
 8008d28:	4b68      	ldr	r3, [pc, #416]	@ (8008ecc <time_setup_mode+0x594>)
 8008d2a:	889b      	ldrh	r3, [r3, #4]
 8008d2c:	3332      	adds	r3, #50	@ 0x32
 8008d2e:	b29b      	uxth	r3, r3
 8008d30:	005b      	lsls	r3, r3, #1
 8008d32:	b29a      	uxth	r2, r3
 8008d34:	4b65      	ldr	r3, [pc, #404]	@ (8008ecc <time_setup_mode+0x594>)
 8008d36:	889b      	ldrh	r3, [r3, #4]
 8008d38:	085b      	lsrs	r3, r3, #1
 8008d3a:	b29b      	uxth	r3, r3
 8008d3c:	4413      	add	r3, r2
 8008d3e:	b298      	uxth	r0, r3
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	781b      	ldrb	r3, [r3, #0]
 8008d44:	4a63      	ldr	r2, [pc, #396]	@ (8008ed4 <time_setup_mode+0x59c>)
 8008d46:	fba2 2303 	umull	r2, r3, r2, r3
 8008d4a:	08db      	lsrs	r3, r3, #3
 8008d4c:	b2db      	uxtb	r3, r3
 8008d4e:	461a      	mov	r2, r3
 8008d50:	2300      	movs	r3, #0
 8008d52:	9301      	str	r3, [sp, #4]
 8008d54:	23ff      	movs	r3, #255	@ 0xff
 8008d56:	9300      	str	r3, [sp, #0]
 8008d58:	4b5c      	ldr	r3, [pc, #368]	@ (8008ecc <time_setup_mode+0x594>)
 8008d5a:	2132      	movs	r1, #50	@ 0x32
 8008d5c:	f001 fb0c 	bl	800a378 <Paint_DrawNum>
                    Paint_DrawNum(100 + Font24.Width * 3 + Font24.Width / 2, 50, time_setup_param->minute % 10, &Font24, WHITE, BLACK);
 8008d60:	4b5a      	ldr	r3, [pc, #360]	@ (8008ecc <time_setup_mode+0x594>)
 8008d62:	889b      	ldrh	r3, [r3, #4]
 8008d64:	461a      	mov	r2, r3
 8008d66:	0052      	lsls	r2, r2, #1
 8008d68:	4413      	add	r3, r2
 8008d6a:	b29a      	uxth	r2, r3
 8008d6c:	4b57      	ldr	r3, [pc, #348]	@ (8008ecc <time_setup_mode+0x594>)
 8008d6e:	889b      	ldrh	r3, [r3, #4]
 8008d70:	085b      	lsrs	r3, r3, #1
 8008d72:	b29b      	uxth	r3, r3
 8008d74:	4413      	add	r3, r2
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	3364      	adds	r3, #100	@ 0x64
 8008d7a:	b298      	uxth	r0, r3
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	781a      	ldrb	r2, [r3, #0]
 8008d80:	4b54      	ldr	r3, [pc, #336]	@ (8008ed4 <time_setup_mode+0x59c>)
 8008d82:	fba3 1302 	umull	r1, r3, r3, r2
 8008d86:	08d9      	lsrs	r1, r3, #3
 8008d88:	460b      	mov	r3, r1
 8008d8a:	009b      	lsls	r3, r3, #2
 8008d8c:	440b      	add	r3, r1
 8008d8e:	005b      	lsls	r3, r3, #1
 8008d90:	1ad3      	subs	r3, r2, r3
 8008d92:	b2db      	uxtb	r3, r3
 8008d94:	461a      	mov	r2, r3
 8008d96:	2300      	movs	r3, #0
 8008d98:	9301      	str	r3, [sp, #4]
 8008d9a:	23ff      	movs	r3, #255	@ 0xff
 8008d9c:	9300      	str	r3, [sp, #0]
 8008d9e:	4b4b      	ldr	r3, [pc, #300]	@ (8008ecc <time_setup_mode+0x594>)
 8008da0:	2132      	movs	r1, #50	@ 0x32
 8008da2:	f001 fae9 	bl	800a378 <Paint_DrawNum>
                    num = num - 1;
 8008da6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008daa:	3b01      	subs	r3, #1
 8008dac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                    if(num == 0) {
 8008db0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d104      	bne.n	8008dc2 <time_setup_mode+0x48a>
                        num = 3;
 8008db8:	2303      	movs	r3, #3
 8008dba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                        break;
 8008dbe:	bf00      	nop
                    }
                    EPD_2IN9_V2_Display_Partial(BlackImage);
                }
                break;
 8008dc0:	e23e      	b.n	8009240 <time_setup_mode+0x908>
                    EPD_2IN9_V2_Display_Partial(BlackImage);
 8008dc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008dc4:	f7fd feb6 	bl	8006b34 <EPD_2IN9_V2_Display_Partial>
                    Paint_ClearWindows(100 + Font24.Width * 2 + Font24.Width / 2, 50, 100 + Font24.Width * 4 +  Font24.Width / 4, 50 + Font24.Height, WHITE);
 8008dc8:	e78d      	b.n	8008ce6 <time_setup_mode+0x3ae>
            //set hour
            case TIME_HOUR:
                /* code */
                Paint_ClearWindows(100, 50, 100 + Font24.Width * 7, 50 + Font24.Height, WHITE);
 8008dca:	4b40      	ldr	r3, [pc, #256]	@ (8008ecc <time_setup_mode+0x594>)
 8008dcc:	889b      	ldrh	r3, [r3, #4]
 8008dce:	461a      	mov	r2, r3
 8008dd0:	00d2      	lsls	r2, r2, #3
 8008dd2:	1ad3      	subs	r3, r2, r3
 8008dd4:	b29b      	uxth	r3, r3
 8008dd6:	3364      	adds	r3, #100	@ 0x64
 8008dd8:	b29a      	uxth	r2, r3
 8008dda:	4b3c      	ldr	r3, [pc, #240]	@ (8008ecc <time_setup_mode+0x594>)
 8008ddc:	88db      	ldrh	r3, [r3, #6]
 8008dde:	3332      	adds	r3, #50	@ 0x32
 8008de0:	b29b      	uxth	r3, r3
 8008de2:	21ff      	movs	r1, #255	@ 0xff
 8008de4:	9100      	str	r1, [sp, #0]
 8008de6:	2132      	movs	r1, #50	@ 0x32
 8008de8:	2064      	movs	r0, #100	@ 0x64
 8008dea:	f000 ffbf 	bl	8009d6c <Paint_ClearWindows>
                Paint_DrawTime(100, 50, &sPaint_time,  &Font24, WHITE, BLACK);
 8008dee:	f107 0220 	add.w	r2, r7, #32
 8008df2:	2300      	movs	r3, #0
 8008df4:	9301      	str	r3, [sp, #4]
 8008df6:	23ff      	movs	r3, #255	@ 0xff
 8008df8:	9300      	str	r3, [sp, #0]
 8008dfa:	4b34      	ldr	r3, [pc, #208]	@ (8008ecc <time_setup_mode+0x594>)
 8008dfc:	2132      	movs	r1, #50	@ 0x32
 8008dfe:	2064      	movs	r0, #100	@ 0x64
 8008e00:	f001 fb88 	bl	800a514 <Paint_DrawTime>
                Paint_ClearWindows(80, 100, 220, 100 + Font16.Height, WHITE);
 8008e04:	4b32      	ldr	r3, [pc, #200]	@ (8008ed0 <time_setup_mode+0x598>)
 8008e06:	88db      	ldrh	r3, [r3, #6]
 8008e08:	3364      	adds	r3, #100	@ 0x64
 8008e0a:	b29b      	uxth	r3, r3
 8008e0c:	22ff      	movs	r2, #255	@ 0xff
 8008e0e:	9200      	str	r2, [sp, #0]
 8008e10:	22dc      	movs	r2, #220	@ 0xdc
 8008e12:	2164      	movs	r1, #100	@ 0x64
 8008e14:	2050      	movs	r0, #80	@ 0x50
 8008e16:	f000 ffa9 	bl	8009d6c <Paint_ClearWindows>
                draw_day(time_setup_param->dow, time_setup_param->dom, time_setup_param->month, time_setup_param->year);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	789b      	ldrb	r3, [r3, #2]
 8008e1e:	4618      	mov	r0, r3
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	78db      	ldrb	r3, [r3, #3]
 8008e24:	4619      	mov	r1, r3
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	791b      	ldrb	r3, [r3, #4]
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	795b      	ldrb	r3, [r3, #5]
 8008e30:	f000 fa18 	bl	8009264 <draw_day>
                for(;;)
                {
                    Paint_ClearWindows(100, 50, 100 + Font24.Width * 2, 50 + Font24.Height, WHITE);
 8008e34:	4b25      	ldr	r3, [pc, #148]	@ (8008ecc <time_setup_mode+0x594>)
 8008e36:	889b      	ldrh	r3, [r3, #4]
 8008e38:	3332      	adds	r3, #50	@ 0x32
 8008e3a:	b29b      	uxth	r3, r3
 8008e3c:	005b      	lsls	r3, r3, #1
 8008e3e:	b29a      	uxth	r2, r3
 8008e40:	4b22      	ldr	r3, [pc, #136]	@ (8008ecc <time_setup_mode+0x594>)
 8008e42:	88db      	ldrh	r3, [r3, #6]
 8008e44:	3332      	adds	r3, #50	@ 0x32
 8008e46:	b29b      	uxth	r3, r3
 8008e48:	21ff      	movs	r1, #255	@ 0xff
 8008e4a:	9100      	str	r1, [sp, #0]
 8008e4c:	2132      	movs	r1, #50	@ 0x32
 8008e4e:	2064      	movs	r0, #100	@ 0x64
 8008e50:	f000 ff8c 	bl	8009d6c <Paint_ClearWindows>
                    Paint_DrawNum(100, 50, time_setup_param->hour / 10, &Font24, WHITE, BLACK);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	785b      	ldrb	r3, [r3, #1]
 8008e58:	4a1e      	ldr	r2, [pc, #120]	@ (8008ed4 <time_setup_mode+0x59c>)
 8008e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8008e5e:	08db      	lsrs	r3, r3, #3
 8008e60:	b2db      	uxtb	r3, r3
 8008e62:	461a      	mov	r2, r3
 8008e64:	2300      	movs	r3, #0
 8008e66:	9301      	str	r3, [sp, #4]
 8008e68:	23ff      	movs	r3, #255	@ 0xff
 8008e6a:	9300      	str	r3, [sp, #0]
 8008e6c:	4b17      	ldr	r3, [pc, #92]	@ (8008ecc <time_setup_mode+0x594>)
 8008e6e:	2132      	movs	r1, #50	@ 0x32
 8008e70:	2064      	movs	r0, #100	@ 0x64
 8008e72:	f001 fa81 	bl	800a378 <Paint_DrawNum>
                    Paint_DrawNum(100 + Font24.Width * 1, 50, time_setup_param->hour % 10, &Font24, WHITE, BLACK);
 8008e76:	4b15      	ldr	r3, [pc, #84]	@ (8008ecc <time_setup_mode+0x594>)
 8008e78:	889b      	ldrh	r3, [r3, #4]
 8008e7a:	3364      	adds	r3, #100	@ 0x64
 8008e7c:	b298      	uxth	r0, r3
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	785a      	ldrb	r2, [r3, #1]
 8008e82:	4b14      	ldr	r3, [pc, #80]	@ (8008ed4 <time_setup_mode+0x59c>)
 8008e84:	fba3 1302 	umull	r1, r3, r3, r2
 8008e88:	08d9      	lsrs	r1, r3, #3
 8008e8a:	460b      	mov	r3, r1
 8008e8c:	009b      	lsls	r3, r3, #2
 8008e8e:	440b      	add	r3, r1
 8008e90:	005b      	lsls	r3, r3, #1
 8008e92:	1ad3      	subs	r3, r2, r3
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	461a      	mov	r2, r3
 8008e98:	2300      	movs	r3, #0
 8008e9a:	9301      	str	r3, [sp, #4]
 8008e9c:	23ff      	movs	r3, #255	@ 0xff
 8008e9e:	9300      	str	r3, [sp, #0]
 8008ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8008ecc <time_setup_mode+0x594>)
 8008ea2:	2132      	movs	r1, #50	@ 0x32
 8008ea4:	f001 fa68 	bl	800a378 <Paint_DrawNum>
                    num = num - 1;
 8008ea8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008eac:	3b01      	subs	r3, #1
 8008eae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                    if(num == 0) {
 8008eb2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d104      	bne.n	8008ec4 <time_setup_mode+0x58c>
                        num = 3;
 8008eba:	2303      	movs	r3, #3
 8008ebc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                        break;
 8008ec0:	bf00      	nop
                    }
		            EPD_2IN9_V2_Display_Partial(BlackImage);
                }
            break;
 8008ec2:	e1bd      	b.n	8009240 <time_setup_mode+0x908>
		            EPD_2IN9_V2_Display_Partial(BlackImage);
 8008ec4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ec6:	f7fd fe35 	bl	8006b34 <EPD_2IN9_V2_Display_Partial>
                    Paint_ClearWindows(100, 50, 100 + Font24.Width * 2, 50 + Font24.Height, WHITE);
 8008eca:	e7b3      	b.n	8008e34 <time_setup_mode+0x4fc>
 8008ecc:	20000284 	.word	0x20000284
 8008ed0:	20000274 	.word	0x20000274
 8008ed4:	cccccccd 	.word	0xcccccccd
            case TIME_DOW:
            /* code */
            Paint_ClearWindows(100, 50, 100 + Font24.Width * 7, 50 + Font24.Height, WHITE);
 8008ed8:	4b99      	ldr	r3, [pc, #612]	@ (8009140 <time_setup_mode+0x808>)
 8008eda:	889b      	ldrh	r3, [r3, #4]
 8008edc:	461a      	mov	r2, r3
 8008ede:	00d2      	lsls	r2, r2, #3
 8008ee0:	1ad3      	subs	r3, r2, r3
 8008ee2:	b29b      	uxth	r3, r3
 8008ee4:	3364      	adds	r3, #100	@ 0x64
 8008ee6:	b29a      	uxth	r2, r3
 8008ee8:	4b95      	ldr	r3, [pc, #596]	@ (8009140 <time_setup_mode+0x808>)
 8008eea:	88db      	ldrh	r3, [r3, #6]
 8008eec:	3332      	adds	r3, #50	@ 0x32
 8008eee:	b29b      	uxth	r3, r3
 8008ef0:	21ff      	movs	r1, #255	@ 0xff
 8008ef2:	9100      	str	r1, [sp, #0]
 8008ef4:	2132      	movs	r1, #50	@ 0x32
 8008ef6:	2064      	movs	r0, #100	@ 0x64
 8008ef8:	f000 ff38 	bl	8009d6c <Paint_ClearWindows>
            Paint_DrawTime(100, 50, &sPaint_time,  &Font24, WHITE, BLACK);
 8008efc:	f107 0220 	add.w	r2, r7, #32
 8008f00:	2300      	movs	r3, #0
 8008f02:	9301      	str	r3, [sp, #4]
 8008f04:	23ff      	movs	r3, #255	@ 0xff
 8008f06:	9300      	str	r3, [sp, #0]
 8008f08:	4b8d      	ldr	r3, [pc, #564]	@ (8009140 <time_setup_mode+0x808>)
 8008f0a:	2132      	movs	r1, #50	@ 0x32
 8008f0c:	2064      	movs	r0, #100	@ 0x64
 8008f0e:	f001 fb01 	bl	800a514 <Paint_DrawTime>
            Paint_ClearWindows(80, 100, 220, 100 + Font16.Height, WHITE);
 8008f12:	4b8c      	ldr	r3, [pc, #560]	@ (8009144 <time_setup_mode+0x80c>)
 8008f14:	88db      	ldrh	r3, [r3, #6]
 8008f16:	3364      	adds	r3, #100	@ 0x64
 8008f18:	b29b      	uxth	r3, r3
 8008f1a:	22ff      	movs	r2, #255	@ 0xff
 8008f1c:	9200      	str	r2, [sp, #0]
 8008f1e:	22dc      	movs	r2, #220	@ 0xdc
 8008f20:	2164      	movs	r1, #100	@ 0x64
 8008f22:	2050      	movs	r0, #80	@ 0x50
 8008f24:	f000 ff22 	bl	8009d6c <Paint_ClearWindows>
            draw_day(time_setup_param->dow, time_setup_param->dom, time_setup_param->month, time_setup_param->year);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	789b      	ldrb	r3, [r3, #2]
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	78db      	ldrb	r3, [r3, #3]
 8008f32:	4619      	mov	r1, r3
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	791b      	ldrb	r3, [r3, #4]
 8008f38:	461a      	mov	r2, r3
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	795b      	ldrb	r3, [r3, #5]
 8008f3e:	f000 f991 	bl	8009264 <draw_day>
            for(;;)
            {
                Paint_ClearWindows(85, 100, 120, 100 + Font16.Height, WHITE);
 8008f42:	4b80      	ldr	r3, [pc, #512]	@ (8009144 <time_setup_mode+0x80c>)
 8008f44:	88db      	ldrh	r3, [r3, #6]
 8008f46:	3364      	adds	r3, #100	@ 0x64
 8008f48:	b29b      	uxth	r3, r3
 8008f4a:	22ff      	movs	r2, #255	@ 0xff
 8008f4c:	9200      	str	r2, [sp, #0]
 8008f4e:	2278      	movs	r2, #120	@ 0x78
 8008f50:	2164      	movs	r1, #100	@ 0x64
 8008f52:	2055      	movs	r0, #85	@ 0x55
 8008f54:	f000 ff0a 	bl	8009d6c <Paint_ClearWindows>
                Paint_DrawString_EN(80, 100, &day_string[0], &Font16, WHITE, BLACK);
 8008f58:	f107 0218 	add.w	r2, r7, #24
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	9301      	str	r3, [sp, #4]
 8008f60:	23ff      	movs	r3, #255	@ 0xff
 8008f62:	9300      	str	r3, [sp, #0]
 8008f64:	4b77      	ldr	r3, [pc, #476]	@ (8009144 <time_setup_mode+0x80c>)
 8008f66:	2164      	movs	r1, #100	@ 0x64
 8008f68:	2050      	movs	r0, #80	@ 0x50
 8008f6a:	f001 f9b1 	bl	800a2d0 <Paint_DrawString_EN>
                num = num - 1;
 8008f6e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008f72:	3b01      	subs	r3, #1
 8008f74:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                if(num == 0) {
 8008f78:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d104      	bne.n	8008f8a <time_setup_mode+0x652>
                    num = 3;
 8008f80:	2303      	movs	r3, #3
 8008f82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                    break;
 8008f86:	bf00      	nop
                }
                EPD_2IN9_V2_Display_Partial(BlackImage);
            }
            break;
 8008f88:	e15a      	b.n	8009240 <time_setup_mode+0x908>
                EPD_2IN9_V2_Display_Partial(BlackImage);
 8008f8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f8c:	f7fd fdd2 	bl	8006b34 <EPD_2IN9_V2_Display_Partial>
                Paint_ClearWindows(85, 100, 120, 100 + Font16.Height, WHITE);
 8008f90:	e7d7      	b.n	8008f42 <time_setup_mode+0x60a>
            //set second
            case TIME_MONTH:
            /* code */
                Paint_ClearWindows(100, 50, 100 + Font24.Width * 7, 50 + Font24.Height, WHITE);
 8008f92:	4b6b      	ldr	r3, [pc, #428]	@ (8009140 <time_setup_mode+0x808>)
 8008f94:	889b      	ldrh	r3, [r3, #4]
 8008f96:	461a      	mov	r2, r3
 8008f98:	00d2      	lsls	r2, r2, #3
 8008f9a:	1ad3      	subs	r3, r2, r3
 8008f9c:	b29b      	uxth	r3, r3
 8008f9e:	3364      	adds	r3, #100	@ 0x64
 8008fa0:	b29a      	uxth	r2, r3
 8008fa2:	4b67      	ldr	r3, [pc, #412]	@ (8009140 <time_setup_mode+0x808>)
 8008fa4:	88db      	ldrh	r3, [r3, #6]
 8008fa6:	3332      	adds	r3, #50	@ 0x32
 8008fa8:	b29b      	uxth	r3, r3
 8008faa:	21ff      	movs	r1, #255	@ 0xff
 8008fac:	9100      	str	r1, [sp, #0]
 8008fae:	2132      	movs	r1, #50	@ 0x32
 8008fb0:	2064      	movs	r0, #100	@ 0x64
 8008fb2:	f000 fedb 	bl	8009d6c <Paint_ClearWindows>
                Paint_DrawTime(100, 50, &sPaint_time,  &Font24, WHITE, BLACK);
 8008fb6:	f107 0220 	add.w	r2, r7, #32
 8008fba:	2300      	movs	r3, #0
 8008fbc:	9301      	str	r3, [sp, #4]
 8008fbe:	23ff      	movs	r3, #255	@ 0xff
 8008fc0:	9300      	str	r3, [sp, #0]
 8008fc2:	4b5f      	ldr	r3, [pc, #380]	@ (8009140 <time_setup_mode+0x808>)
 8008fc4:	2132      	movs	r1, #50	@ 0x32
 8008fc6:	2064      	movs	r0, #100	@ 0x64
 8008fc8:	f001 faa4 	bl	800a514 <Paint_DrawTime>
                Paint_ClearWindows(80, 100, 220, 100 + Font16.Height, WHITE);
 8008fcc:	4b5d      	ldr	r3, [pc, #372]	@ (8009144 <time_setup_mode+0x80c>)
 8008fce:	88db      	ldrh	r3, [r3, #6]
 8008fd0:	3364      	adds	r3, #100	@ 0x64
 8008fd2:	b29b      	uxth	r3, r3
 8008fd4:	22ff      	movs	r2, #255	@ 0xff
 8008fd6:	9200      	str	r2, [sp, #0]
 8008fd8:	22dc      	movs	r2, #220	@ 0xdc
 8008fda:	2164      	movs	r1, #100	@ 0x64
 8008fdc:	2050      	movs	r0, #80	@ 0x50
 8008fde:	f000 fec5 	bl	8009d6c <Paint_ClearWindows>
                draw_day(time_setup_param->dow, time_setup_param->dom, time_setup_param->month, time_setup_param->year);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	789b      	ldrb	r3, [r3, #2]
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	78db      	ldrb	r3, [r3, #3]
 8008fec:	4619      	mov	r1, r3
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	791b      	ldrb	r3, [r3, #4]
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	795b      	ldrb	r3, [r3, #5]
 8008ff8:	f000 f934 	bl	8009264 <draw_day>
                for(;;)
                {
                    Paint_ClearWindows(135, 100, 170, 100 + Font16.Height, WHITE);
 8008ffc:	4b51      	ldr	r3, [pc, #324]	@ (8009144 <time_setup_mode+0x80c>)
 8008ffe:	88db      	ldrh	r3, [r3, #6]
 8009000:	3364      	adds	r3, #100	@ 0x64
 8009002:	b29b      	uxth	r3, r3
 8009004:	22ff      	movs	r2, #255	@ 0xff
 8009006:	9200      	str	r2, [sp, #0]
 8009008:	22aa      	movs	r2, #170	@ 0xaa
 800900a:	2164      	movs	r1, #100	@ 0x64
 800900c:	2087      	movs	r0, #135	@ 0x87
 800900e:	f000 fead 	bl	8009d6c <Paint_ClearWindows>
                    Paint_DrawString_EN(130, 100, &month_string[0], &Font16, WHITE, BLACK);
 8009012:	f107 0210 	add.w	r2, r7, #16
 8009016:	2300      	movs	r3, #0
 8009018:	9301      	str	r3, [sp, #4]
 800901a:	23ff      	movs	r3, #255	@ 0xff
 800901c:	9300      	str	r3, [sp, #0]
 800901e:	4b49      	ldr	r3, [pc, #292]	@ (8009144 <time_setup_mode+0x80c>)
 8009020:	2164      	movs	r1, #100	@ 0x64
 8009022:	2082      	movs	r0, #130	@ 0x82
 8009024:	f001 f954 	bl	800a2d0 <Paint_DrawString_EN>
                    num = num - 1;
 8009028:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800902c:	3b01      	subs	r3, #1
 800902e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                    if(num == 0) {
 8009032:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009036:	2b00      	cmp	r3, #0
 8009038:	d104      	bne.n	8009044 <time_setup_mode+0x70c>
                        num = 3;
 800903a:	2303      	movs	r3, #3
 800903c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                        break;
 8009040:	bf00      	nop
                    }
                    EPD_2IN9_V2_Display_Partial(BlackImage);
                }
            break;
 8009042:	e0fd      	b.n	8009240 <time_setup_mode+0x908>
                    EPD_2IN9_V2_Display_Partial(BlackImage);
 8009044:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009046:	f7fd fd75 	bl	8006b34 <EPD_2IN9_V2_Display_Partial>
                    Paint_ClearWindows(135, 100, 170, 100 + Font16.Height, WHITE);
 800904a:	e7d7      	b.n	8008ffc <time_setup_mode+0x6c4>

            case TIME_DOM:
            /* code */
                Paint_ClearWindows(100, 50, 100 + Font24.Width * 7, 50 + Font24.Height, WHITE);
 800904c:	4b3c      	ldr	r3, [pc, #240]	@ (8009140 <time_setup_mode+0x808>)
 800904e:	889b      	ldrh	r3, [r3, #4]
 8009050:	461a      	mov	r2, r3
 8009052:	00d2      	lsls	r2, r2, #3
 8009054:	1ad3      	subs	r3, r2, r3
 8009056:	b29b      	uxth	r3, r3
 8009058:	3364      	adds	r3, #100	@ 0x64
 800905a:	b29a      	uxth	r2, r3
 800905c:	4b38      	ldr	r3, [pc, #224]	@ (8009140 <time_setup_mode+0x808>)
 800905e:	88db      	ldrh	r3, [r3, #6]
 8009060:	3332      	adds	r3, #50	@ 0x32
 8009062:	b29b      	uxth	r3, r3
 8009064:	21ff      	movs	r1, #255	@ 0xff
 8009066:	9100      	str	r1, [sp, #0]
 8009068:	2132      	movs	r1, #50	@ 0x32
 800906a:	2064      	movs	r0, #100	@ 0x64
 800906c:	f000 fe7e 	bl	8009d6c <Paint_ClearWindows>
                Paint_DrawTime(100, 50, &sPaint_time,  &Font24, WHITE, BLACK);
 8009070:	f107 0220 	add.w	r2, r7, #32
 8009074:	2300      	movs	r3, #0
 8009076:	9301      	str	r3, [sp, #4]
 8009078:	23ff      	movs	r3, #255	@ 0xff
 800907a:	9300      	str	r3, [sp, #0]
 800907c:	4b30      	ldr	r3, [pc, #192]	@ (8009140 <time_setup_mode+0x808>)
 800907e:	2132      	movs	r1, #50	@ 0x32
 8009080:	2064      	movs	r0, #100	@ 0x64
 8009082:	f001 fa47 	bl	800a514 <Paint_DrawTime>
                Paint_ClearWindows(80, 100, 220, 100 + Font16.Height, WHITE);
 8009086:	4b2f      	ldr	r3, [pc, #188]	@ (8009144 <time_setup_mode+0x80c>)
 8009088:	88db      	ldrh	r3, [r3, #6]
 800908a:	3364      	adds	r3, #100	@ 0x64
 800908c:	b29b      	uxth	r3, r3
 800908e:	22ff      	movs	r2, #255	@ 0xff
 8009090:	9200      	str	r2, [sp, #0]
 8009092:	22dc      	movs	r2, #220	@ 0xdc
 8009094:	2164      	movs	r1, #100	@ 0x64
 8009096:	2050      	movs	r0, #80	@ 0x50
 8009098:	f000 fe68 	bl	8009d6c <Paint_ClearWindows>
                draw_day(time_setup_param->dow, time_setup_param->dom, time_setup_param->month, time_setup_param->year);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	789b      	ldrb	r3, [r3, #2]
 80090a0:	4618      	mov	r0, r3
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	78db      	ldrb	r3, [r3, #3]
 80090a6:	4619      	mov	r1, r3
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	791b      	ldrb	r3, [r3, #4]
 80090ac:	461a      	mov	r2, r3
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	795b      	ldrb	r3, [r3, #5]
 80090b2:	f000 f8d7 	bl	8009264 <draw_day>
                for(;;)
                {
                    Paint_ClearWindows(180, 100, 200, 100 + Font16.Height, WHITE);
 80090b6:	4b23      	ldr	r3, [pc, #140]	@ (8009144 <time_setup_mode+0x80c>)
 80090b8:	88db      	ldrh	r3, [r3, #6]
 80090ba:	3364      	adds	r3, #100	@ 0x64
 80090bc:	b29b      	uxth	r3, r3
 80090be:	22ff      	movs	r2, #255	@ 0xff
 80090c0:	9200      	str	r2, [sp, #0]
 80090c2:	22c8      	movs	r2, #200	@ 0xc8
 80090c4:	2164      	movs	r1, #100	@ 0x64
 80090c6:	20b4      	movs	r0, #180	@ 0xb4
 80090c8:	f000 fe50 	bl	8009d6c <Paint_ClearWindows>
                    Paint_DrawNum(180, 100, time_setup_param->dom / 10, &Font16, BLACK, WHITE);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	78db      	ldrb	r3, [r3, #3]
 80090d0:	4a1d      	ldr	r2, [pc, #116]	@ (8009148 <time_setup_mode+0x810>)
 80090d2:	fba2 2303 	umull	r2, r3, r2, r3
 80090d6:	08db      	lsrs	r3, r3, #3
 80090d8:	b2db      	uxtb	r3, r3
 80090da:	461a      	mov	r2, r3
 80090dc:	23ff      	movs	r3, #255	@ 0xff
 80090de:	9301      	str	r3, [sp, #4]
 80090e0:	2300      	movs	r3, #0
 80090e2:	9300      	str	r3, [sp, #0]
 80090e4:	4b17      	ldr	r3, [pc, #92]	@ (8009144 <time_setup_mode+0x80c>)
 80090e6:	2164      	movs	r1, #100	@ 0x64
 80090e8:	20b4      	movs	r0, #180	@ 0xb4
 80090ea:	f001 f945 	bl	800a378 <Paint_DrawNum>
                    Paint_DrawNum(190, 100, time_setup_param->dom % 10, &Font16, BLACK, WHITE);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	78da      	ldrb	r2, [r3, #3]
 80090f2:	4b15      	ldr	r3, [pc, #84]	@ (8009148 <time_setup_mode+0x810>)
 80090f4:	fba3 1302 	umull	r1, r3, r3, r2
 80090f8:	08d9      	lsrs	r1, r3, #3
 80090fa:	460b      	mov	r3, r1
 80090fc:	009b      	lsls	r3, r3, #2
 80090fe:	440b      	add	r3, r1
 8009100:	005b      	lsls	r3, r3, #1
 8009102:	1ad3      	subs	r3, r2, r3
 8009104:	b2db      	uxtb	r3, r3
 8009106:	461a      	mov	r2, r3
 8009108:	23ff      	movs	r3, #255	@ 0xff
 800910a:	9301      	str	r3, [sp, #4]
 800910c:	2300      	movs	r3, #0
 800910e:	9300      	str	r3, [sp, #0]
 8009110:	4b0c      	ldr	r3, [pc, #48]	@ (8009144 <time_setup_mode+0x80c>)
 8009112:	2164      	movs	r1, #100	@ 0x64
 8009114:	20be      	movs	r0, #190	@ 0xbe
 8009116:	f001 f92f 	bl	800a378 <Paint_DrawNum>
                    num = num - 1;
 800911a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800911e:	3b01      	subs	r3, #1
 8009120:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                    if(num == 0) {
 8009124:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009128:	2b00      	cmp	r3, #0
 800912a:	d104      	bne.n	8009136 <time_setup_mode+0x7fe>
                        num = 3;
 800912c:	2303      	movs	r3, #3
 800912e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                        break;
 8009132:	bf00      	nop
                    }
                    EPD_2IN9_V2_Display_Partial(BlackImage);
                }
            break;
 8009134:	e084      	b.n	8009240 <time_setup_mode+0x908>
                    EPD_2IN9_V2_Display_Partial(BlackImage);
 8009136:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009138:	f7fd fcfc 	bl	8006b34 <EPD_2IN9_V2_Display_Partial>
                    Paint_ClearWindows(180, 100, 200, 100 + Font16.Height, WHITE);
 800913c:	e7bb      	b.n	80090b6 <time_setup_mode+0x77e>
 800913e:	bf00      	nop
 8009140:	20000284 	.word	0x20000284
 8009144:	20000274 	.word	0x20000274
 8009148:	cccccccd 	.word	0xcccccccd

            case TIME_YEAR:
            /* code */
                Paint_ClearWindows(100, 50, 100 + Font24.Width * 7, 50 + Font24.Height, WHITE);
 800914c:	4b42      	ldr	r3, [pc, #264]	@ (8009258 <time_setup_mode+0x920>)
 800914e:	889b      	ldrh	r3, [r3, #4]
 8009150:	461a      	mov	r2, r3
 8009152:	00d2      	lsls	r2, r2, #3
 8009154:	1ad3      	subs	r3, r2, r3
 8009156:	b29b      	uxth	r3, r3
 8009158:	3364      	adds	r3, #100	@ 0x64
 800915a:	b29a      	uxth	r2, r3
 800915c:	4b3e      	ldr	r3, [pc, #248]	@ (8009258 <time_setup_mode+0x920>)
 800915e:	88db      	ldrh	r3, [r3, #6]
 8009160:	3332      	adds	r3, #50	@ 0x32
 8009162:	b29b      	uxth	r3, r3
 8009164:	21ff      	movs	r1, #255	@ 0xff
 8009166:	9100      	str	r1, [sp, #0]
 8009168:	2132      	movs	r1, #50	@ 0x32
 800916a:	2064      	movs	r0, #100	@ 0x64
 800916c:	f000 fdfe 	bl	8009d6c <Paint_ClearWindows>
                Paint_DrawTime(100, 50, &sPaint_time,  &Font24, WHITE, BLACK);
 8009170:	f107 0220 	add.w	r2, r7, #32
 8009174:	2300      	movs	r3, #0
 8009176:	9301      	str	r3, [sp, #4]
 8009178:	23ff      	movs	r3, #255	@ 0xff
 800917a:	9300      	str	r3, [sp, #0]
 800917c:	4b36      	ldr	r3, [pc, #216]	@ (8009258 <time_setup_mode+0x920>)
 800917e:	2132      	movs	r1, #50	@ 0x32
 8009180:	2064      	movs	r0, #100	@ 0x64
 8009182:	f001 f9c7 	bl	800a514 <Paint_DrawTime>
                Paint_ClearWindows(80, 100, 220, 100 + Font16.Height, WHITE);
 8009186:	4b35      	ldr	r3, [pc, #212]	@ (800925c <time_setup_mode+0x924>)
 8009188:	88db      	ldrh	r3, [r3, #6]
 800918a:	3364      	adds	r3, #100	@ 0x64
 800918c:	b29b      	uxth	r3, r3
 800918e:	22ff      	movs	r2, #255	@ 0xff
 8009190:	9200      	str	r2, [sp, #0]
 8009192:	22dc      	movs	r2, #220	@ 0xdc
 8009194:	2164      	movs	r1, #100	@ 0x64
 8009196:	2050      	movs	r0, #80	@ 0x50
 8009198:	f000 fde8 	bl	8009d6c <Paint_ClearWindows>
                draw_day(time_setup_param->dow, time_setup_param->dom, time_setup_param->month, time_setup_param->year);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	789b      	ldrb	r3, [r3, #2]
 80091a0:	4618      	mov	r0, r3
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	78db      	ldrb	r3, [r3, #3]
 80091a6:	4619      	mov	r1, r3
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	791b      	ldrb	r3, [r3, #4]
 80091ac:	461a      	mov	r2, r3
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	795b      	ldrb	r3, [r3, #5]
 80091b2:	f000 f857 	bl	8009264 <draw_day>
                for(;;)
                {
                    Paint_ClearWindows(210, 100, 230, 100 + Font16.Height, WHITE);
 80091b6:	4b29      	ldr	r3, [pc, #164]	@ (800925c <time_setup_mode+0x924>)
 80091b8:	88db      	ldrh	r3, [r3, #6]
 80091ba:	3364      	adds	r3, #100	@ 0x64
 80091bc:	b29b      	uxth	r3, r3
 80091be:	22ff      	movs	r2, #255	@ 0xff
 80091c0:	9200      	str	r2, [sp, #0]
 80091c2:	22e6      	movs	r2, #230	@ 0xe6
 80091c4:	2164      	movs	r1, #100	@ 0x64
 80091c6:	20d2      	movs	r0, #210	@ 0xd2
 80091c8:	f000 fdd0 	bl	8009d6c <Paint_ClearWindows>
                    Paint_DrawNum(210, 100, time_setup_param->year / 10, &Font16, BLACK, WHITE);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	795b      	ldrb	r3, [r3, #5]
 80091d0:	4a23      	ldr	r2, [pc, #140]	@ (8009260 <time_setup_mode+0x928>)
 80091d2:	fba2 2303 	umull	r2, r3, r2, r3
 80091d6:	08db      	lsrs	r3, r3, #3
 80091d8:	b2db      	uxtb	r3, r3
 80091da:	461a      	mov	r2, r3
 80091dc:	23ff      	movs	r3, #255	@ 0xff
 80091de:	9301      	str	r3, [sp, #4]
 80091e0:	2300      	movs	r3, #0
 80091e2:	9300      	str	r3, [sp, #0]
 80091e4:	4b1d      	ldr	r3, [pc, #116]	@ (800925c <time_setup_mode+0x924>)
 80091e6:	2164      	movs	r1, #100	@ 0x64
 80091e8:	20d2      	movs	r0, #210	@ 0xd2
 80091ea:	f001 f8c5 	bl	800a378 <Paint_DrawNum>
                    Paint_DrawNum(220, 100, time_setup_param->year % 10, &Font16, BLACK, WHITE);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	795a      	ldrb	r2, [r3, #5]
 80091f2:	4b1b      	ldr	r3, [pc, #108]	@ (8009260 <time_setup_mode+0x928>)
 80091f4:	fba3 1302 	umull	r1, r3, r3, r2
 80091f8:	08d9      	lsrs	r1, r3, #3
 80091fa:	460b      	mov	r3, r1
 80091fc:	009b      	lsls	r3, r3, #2
 80091fe:	440b      	add	r3, r1
 8009200:	005b      	lsls	r3, r3, #1
 8009202:	1ad3      	subs	r3, r2, r3
 8009204:	b2db      	uxtb	r3, r3
 8009206:	461a      	mov	r2, r3
 8009208:	23ff      	movs	r3, #255	@ 0xff
 800920a:	9301      	str	r3, [sp, #4]
 800920c:	2300      	movs	r3, #0
 800920e:	9300      	str	r3, [sp, #0]
 8009210:	4b12      	ldr	r3, [pc, #72]	@ (800925c <time_setup_mode+0x924>)
 8009212:	2164      	movs	r1, #100	@ 0x64
 8009214:	20dc      	movs	r0, #220	@ 0xdc
 8009216:	f001 f8af 	bl	800a378 <Paint_DrawNum>
                    num = num - 1;
 800921a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800921e:	3b01      	subs	r3, #1
 8009220:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                    if(num == 0) {
 8009224:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009228:	2b00      	cmp	r3, #0
 800922a:	d104      	bne.n	8009236 <time_setup_mode+0x8fe>
                        num = 3;
 800922c:	2303      	movs	r3, #3
 800922e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                        break;
 8009232:	bf00      	nop
                    }
                    EPD_2IN9_V2_Display_Partial(BlackImage);
                }
            break;
 8009234:	e004      	b.n	8009240 <time_setup_mode+0x908>
                    EPD_2IN9_V2_Display_Partial(BlackImage);
 8009236:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009238:	f7fd fc7c 	bl	8006b34 <EPD_2IN9_V2_Display_Partial>
                    Paint_ClearWindows(210, 100, 230, 100 + Font16.Height, WHITE);
 800923c:	e7bb      	b.n	80091b6 <time_setup_mode+0x87e>
        default:
            break;
 800923e:	bf00      	nop
        }
      EPD_2IN9_V2_Sleep();
 8009240:	f7fd fcea 	bl	8006c18 <EPD_2IN9_V2_Sleep>
      flag_time_set_up_mode->flag_TIME_SETUP_MODE  = 0;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	2200      	movs	r2, #0
 8009248:	705a      	strb	r2, [r3, #1]
      free(BlackImage);
 800924a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800924c:	f001 fa64 	bl	800a718 <free>
}
 8009250:	bf00      	nop
 8009252:	3730      	adds	r7, #48	@ 0x30
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}
 8009258:	20000284 	.word	0x20000284
 800925c:	20000274 	.word	0x20000274
 8009260:	cccccccd 	.word	0xcccccccd

08009264 <draw_day>:

void draw_day(uint16_t day, uint16_t date, uint16_t month, uint16_t year)
{
 8009264:	b590      	push	{r4, r7, lr}
 8009266:	b089      	sub	sp, #36	@ 0x24
 8009268:	af02      	add	r7, sp, #8
 800926a:	4604      	mov	r4, r0
 800926c:	4608      	mov	r0, r1
 800926e:	4611      	mov	r1, r2
 8009270:	461a      	mov	r2, r3
 8009272:	4623      	mov	r3, r4
 8009274:	80fb      	strh	r3, [r7, #6]
 8009276:	4603      	mov	r3, r0
 8009278:	80bb      	strh	r3, [r7, #4]
 800927a:	460b      	mov	r3, r1
 800927c:	807b      	strh	r3, [r7, #2]
 800927e:	4613      	mov	r3, r2
 8009280:	803b      	strh	r3, [r7, #0]
    char day_string[5];
    char month_string[5];

    switch (day)
 8009282:	88fb      	ldrh	r3, [r7, #6]
 8009284:	3b01      	subs	r3, #1
 8009286:	2b06      	cmp	r3, #6
 8009288:	d85b      	bhi.n	8009342 <draw_day+0xde>
 800928a:	a201      	add	r2, pc, #4	@ (adr r2, 8009290 <draw_day+0x2c>)
 800928c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009290:	080092ad 	.word	0x080092ad
 8009294:	080092c3 	.word	0x080092c3
 8009298:	080092d9 	.word	0x080092d9
 800929c:	080092ef 	.word	0x080092ef
 80092a0:	08009305 	.word	0x08009305
 80092a4:	08009317 	.word	0x08009317
 80092a8:	0800932d 	.word	0x0800932d
    {
    case 1:
        day_string[0] = 'S';
 80092ac:	2353      	movs	r3, #83	@ 0x53
 80092ae:	743b      	strb	r3, [r7, #16]
        day_string[1] = 'U';
 80092b0:	2355      	movs	r3, #85	@ 0x55
 80092b2:	747b      	strb	r3, [r7, #17]
        day_string[2] = 'N';
 80092b4:	234e      	movs	r3, #78	@ 0x4e
 80092b6:	74bb      	strb	r3, [r7, #18]
        day_string[3] = NULL;
 80092b8:	2300      	movs	r3, #0
 80092ba:	74fb      	strb	r3, [r7, #19]
        day_string[4] = NULL;
 80092bc:	2300      	movs	r3, #0
 80092be:	753b      	strb	r3, [r7, #20]
        break;
 80092c0:	e040      	b.n	8009344 <draw_day+0xe0>
    case 2:
        day_string[0] = 'M';
 80092c2:	234d      	movs	r3, #77	@ 0x4d
 80092c4:	743b      	strb	r3, [r7, #16]
        day_string[1] = 'O';
 80092c6:	234f      	movs	r3, #79	@ 0x4f
 80092c8:	747b      	strb	r3, [r7, #17]
        day_string[2] = 'N';
 80092ca:	234e      	movs	r3, #78	@ 0x4e
 80092cc:	74bb      	strb	r3, [r7, #18]
        day_string[3] = NULL;
 80092ce:	2300      	movs	r3, #0
 80092d0:	74fb      	strb	r3, [r7, #19]
        day_string[4] = NULL;
 80092d2:	2300      	movs	r3, #0
 80092d4:	753b      	strb	r3, [r7, #20]
        break;
 80092d6:	e035      	b.n	8009344 <draw_day+0xe0>

    case 3:
        day_string[0] = 'T';
 80092d8:	2354      	movs	r3, #84	@ 0x54
 80092da:	743b      	strb	r3, [r7, #16]
        day_string[1] = 'U';
 80092dc:	2355      	movs	r3, #85	@ 0x55
 80092de:	747b      	strb	r3, [r7, #17]
        day_string[2] = 'E';
 80092e0:	2345      	movs	r3, #69	@ 0x45
 80092e2:	74bb      	strb	r3, [r7, #18]
        day_string[3] = 'S';
 80092e4:	2353      	movs	r3, #83	@ 0x53
 80092e6:	74fb      	strb	r3, [r7, #19]
        day_string[4] = NULL;
 80092e8:	2300      	movs	r3, #0
 80092ea:	753b      	strb	r3, [r7, #20]
        break;
 80092ec:	e02a      	b.n	8009344 <draw_day+0xe0>

    case 4:
        day_string[0] = 'W';
 80092ee:	2357      	movs	r3, #87	@ 0x57
 80092f0:	743b      	strb	r3, [r7, #16]
        day_string[1] = 'E';
 80092f2:	2345      	movs	r3, #69	@ 0x45
 80092f4:	747b      	strb	r3, [r7, #17]
        day_string[2] = 'D';
 80092f6:	2344      	movs	r3, #68	@ 0x44
 80092f8:	74bb      	strb	r3, [r7, #18]
        day_string[3] = 'N';
 80092fa:	234e      	movs	r3, #78	@ 0x4e
 80092fc:	74fb      	strb	r3, [r7, #19]
        day_string[4] = NULL;
 80092fe:	2300      	movs	r3, #0
 8009300:	753b      	strb	r3, [r7, #20]
        break;
 8009302:	e01f      	b.n	8009344 <draw_day+0xe0>

    case 5:
        day_string[0] = 'T';
 8009304:	2354      	movs	r3, #84	@ 0x54
 8009306:	743b      	strb	r3, [r7, #16]
        day_string[1] = 'H';
 8009308:	2348      	movs	r3, #72	@ 0x48
 800930a:	747b      	strb	r3, [r7, #17]
        day_string[2] = 'U';
 800930c:	2355      	movs	r3, #85	@ 0x55
 800930e:	74bb      	strb	r3, [r7, #18]
        day_string[3] = 'R';
 8009310:	2352      	movs	r3, #82	@ 0x52
 8009312:	74fb      	strb	r3, [r7, #19]
        break;
 8009314:	e016      	b.n	8009344 <draw_day+0xe0>

    case 6:
        day_string[0] = 'F';
 8009316:	2346      	movs	r3, #70	@ 0x46
 8009318:	743b      	strb	r3, [r7, #16]
        day_string[1] = 'R';
 800931a:	2352      	movs	r3, #82	@ 0x52
 800931c:	747b      	strb	r3, [r7, #17]
        day_string[2] = 'I';
 800931e:	2349      	movs	r3, #73	@ 0x49
 8009320:	74bb      	strb	r3, [r7, #18]
        day_string[3] = NULL;
 8009322:	2300      	movs	r3, #0
 8009324:	74fb      	strb	r3, [r7, #19]
        day_string[4] = NULL;
 8009326:	2300      	movs	r3, #0
 8009328:	753b      	strb	r3, [r7, #20]
        break;
 800932a:	e00b      	b.n	8009344 <draw_day+0xe0>

    case 7:
        day_string[0] = 'S';
 800932c:	2353      	movs	r3, #83	@ 0x53
 800932e:	743b      	strb	r3, [r7, #16]
        day_string[1] = 'A';
 8009330:	2341      	movs	r3, #65	@ 0x41
 8009332:	747b      	strb	r3, [r7, #17]
        day_string[2] = 'T';
 8009334:	2354      	movs	r3, #84	@ 0x54
 8009336:	74bb      	strb	r3, [r7, #18]
        day_string[3] = NULL;
 8009338:	2300      	movs	r3, #0
 800933a:	74fb      	strb	r3, [r7, #19]
        day_string[4] = NULL;
 800933c:	2300      	movs	r3, #0
 800933e:	753b      	strb	r3, [r7, #20]
        break;
 8009340:	e000      	b.n	8009344 <draw_day+0xe0>

    default:
        break;
 8009342:	bf00      	nop
    }

switch (month)
 8009344:	887b      	ldrh	r3, [r7, #2]
 8009346:	3b01      	subs	r3, #1
 8009348:	2b0b      	cmp	r3, #11
 800934a:	f200 809f 	bhi.w	800948c <draw_day+0x228>
 800934e:	a201      	add	r2, pc, #4	@ (adr r2, 8009354 <draw_day+0xf0>)
 8009350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009354:	08009385 	.word	0x08009385
 8009358:	0800939b 	.word	0x0800939b
 800935c:	080093b1 	.word	0x080093b1
 8009360:	080093c7 	.word	0x080093c7
 8009364:	080093dd 	.word	0x080093dd
 8009368:	080093f3 	.word	0x080093f3
 800936c:	08009409 	.word	0x08009409
 8009370:	0800941f 	.word	0x0800941f
 8009374:	08009435 	.word	0x08009435
 8009378:	0800944b 	.word	0x0800944b
 800937c:	08009461 	.word	0x08009461
 8009380:	08009477 	.word	0x08009477
    {
    case 1:
        month_string[0] = 'J';
 8009384:	234a      	movs	r3, #74	@ 0x4a
 8009386:	723b      	strb	r3, [r7, #8]
        month_string[1] = 'A';
 8009388:	2341      	movs	r3, #65	@ 0x41
 800938a:	727b      	strb	r3, [r7, #9]
        month_string[2] = 'N';
 800938c:	234e      	movs	r3, #78	@ 0x4e
 800938e:	72bb      	strb	r3, [r7, #10]
        month_string[3] = NULL;
 8009390:	2300      	movs	r3, #0
 8009392:	72fb      	strb	r3, [r7, #11]
        month_string[4] = NULL;
 8009394:	2300      	movs	r3, #0
 8009396:	733b      	strb	r3, [r7, #12]
        break;
 8009398:	e079      	b.n	800948e <draw_day+0x22a>
    case 2:
        month_string[0] = 'F';
 800939a:	2346      	movs	r3, #70	@ 0x46
 800939c:	723b      	strb	r3, [r7, #8]
        month_string[1] = 'E';
 800939e:	2345      	movs	r3, #69	@ 0x45
 80093a0:	727b      	strb	r3, [r7, #9]
        month_string[2] = 'B';
 80093a2:	2342      	movs	r3, #66	@ 0x42
 80093a4:	72bb      	strb	r3, [r7, #10]
        month_string[3] = NULL;
 80093a6:	2300      	movs	r3, #0
 80093a8:	72fb      	strb	r3, [r7, #11]
        month_string[4] = NULL;
 80093aa:	2300      	movs	r3, #0
 80093ac:	733b      	strb	r3, [r7, #12]
        break;
 80093ae:	e06e      	b.n	800948e <draw_day+0x22a>

    case 3:
        month_string[0] = 'M';
 80093b0:	234d      	movs	r3, #77	@ 0x4d
 80093b2:	723b      	strb	r3, [r7, #8]
        month_string[1] = 'A';
 80093b4:	2341      	movs	r3, #65	@ 0x41
 80093b6:	727b      	strb	r3, [r7, #9]
        month_string[2] = 'R';
 80093b8:	2352      	movs	r3, #82	@ 0x52
 80093ba:	72bb      	strb	r3, [r7, #10]
        month_string[3] = NULL;
 80093bc:	2300      	movs	r3, #0
 80093be:	72fb      	strb	r3, [r7, #11]
        month_string[4] = NULL;
 80093c0:	2300      	movs	r3, #0
 80093c2:	733b      	strb	r3, [r7, #12]
        break;
 80093c4:	e063      	b.n	800948e <draw_day+0x22a>

    case 4:
        month_string[0] = 'A';
 80093c6:	2341      	movs	r3, #65	@ 0x41
 80093c8:	723b      	strb	r3, [r7, #8]
        month_string[1] = 'P';
 80093ca:	2350      	movs	r3, #80	@ 0x50
 80093cc:	727b      	strb	r3, [r7, #9]
        month_string[2] = 'I';
 80093ce:	2349      	movs	r3, #73	@ 0x49
 80093d0:	72bb      	strb	r3, [r7, #10]
        month_string[3] = 'R';
 80093d2:	2352      	movs	r3, #82	@ 0x52
 80093d4:	72fb      	strb	r3, [r7, #11]
        month_string[4] = NULL;
 80093d6:	2300      	movs	r3, #0
 80093d8:	733b      	strb	r3, [r7, #12]
        break;
 80093da:	e058      	b.n	800948e <draw_day+0x22a>

    case 5:
        month_string[0] = 'M';
 80093dc:	234d      	movs	r3, #77	@ 0x4d
 80093de:	723b      	strb	r3, [r7, #8]
        month_string[1] = 'A';
 80093e0:	2341      	movs	r3, #65	@ 0x41
 80093e2:	727b      	strb	r3, [r7, #9]
        month_string[2] = 'Y';
 80093e4:	2359      	movs	r3, #89	@ 0x59
 80093e6:	72bb      	strb	r3, [r7, #10]
        month_string[3] = NULL;
 80093e8:	2300      	movs	r3, #0
 80093ea:	72fb      	strb	r3, [r7, #11]
        month_string[4] = NULL;
 80093ec:	2300      	movs	r3, #0
 80093ee:	733b      	strb	r3, [r7, #12]
        break;
 80093f0:	e04d      	b.n	800948e <draw_day+0x22a>

    case 6:
        month_string[0] = 'J';
 80093f2:	234a      	movs	r3, #74	@ 0x4a
 80093f4:	723b      	strb	r3, [r7, #8]
        month_string[1] = 'U';
 80093f6:	2355      	movs	r3, #85	@ 0x55
 80093f8:	727b      	strb	r3, [r7, #9]
        month_string[2] = 'N';
 80093fa:	234e      	movs	r3, #78	@ 0x4e
 80093fc:	72bb      	strb	r3, [r7, #10]
        month_string[3] = 'E';
 80093fe:	2345      	movs	r3, #69	@ 0x45
 8009400:	72fb      	strb	r3, [r7, #11]
        month_string[4] = NULL;
 8009402:	2300      	movs	r3, #0
 8009404:	733b      	strb	r3, [r7, #12]
        break;
 8009406:	e042      	b.n	800948e <draw_day+0x22a>

    case 7:
        month_string[0] = 'J';
 8009408:	234a      	movs	r3, #74	@ 0x4a
 800940a:	723b      	strb	r3, [r7, #8]
        month_string[1] = 'U';
 800940c:	2355      	movs	r3, #85	@ 0x55
 800940e:	727b      	strb	r3, [r7, #9]
        month_string[2] = 'L';
 8009410:	234c      	movs	r3, #76	@ 0x4c
 8009412:	72bb      	strb	r3, [r7, #10]
        month_string[3] = 'Y';
 8009414:	2359      	movs	r3, #89	@ 0x59
 8009416:	72fb      	strb	r3, [r7, #11]
        month_string[4] = NULL;
 8009418:	2300      	movs	r3, #0
 800941a:	733b      	strb	r3, [r7, #12]
        break;
 800941c:	e037      	b.n	800948e <draw_day+0x22a>

    case 8:
        month_string[0] = 'A';
 800941e:	2341      	movs	r3, #65	@ 0x41
 8009420:	723b      	strb	r3, [r7, #8]
        month_string[1] = 'U';
 8009422:	2355      	movs	r3, #85	@ 0x55
 8009424:	727b      	strb	r3, [r7, #9]
        month_string[2] = 'G';
 8009426:	2347      	movs	r3, #71	@ 0x47
 8009428:	72bb      	strb	r3, [r7, #10]
        month_string[3] = NULL;
 800942a:	2300      	movs	r3, #0
 800942c:	72fb      	strb	r3, [r7, #11]
        month_string[4] = NULL;
 800942e:	2300      	movs	r3, #0
 8009430:	733b      	strb	r3, [r7, #12]
        break;
 8009432:	e02c      	b.n	800948e <draw_day+0x22a>

    case 9:
        month_string[0] = 'S';
 8009434:	2353      	movs	r3, #83	@ 0x53
 8009436:	723b      	strb	r3, [r7, #8]
        month_string[1] = 'E';
 8009438:	2345      	movs	r3, #69	@ 0x45
 800943a:	727b      	strb	r3, [r7, #9]
        month_string[2] = 'P';
 800943c:	2350      	movs	r3, #80	@ 0x50
 800943e:	72bb      	strb	r3, [r7, #10]
        month_string[3] = 'T';
 8009440:	2354      	movs	r3, #84	@ 0x54
 8009442:	72fb      	strb	r3, [r7, #11]
        month_string[4] = NULL;
 8009444:	2300      	movs	r3, #0
 8009446:	733b      	strb	r3, [r7, #12]
        break;
 8009448:	e021      	b.n	800948e <draw_day+0x22a>
    case 10:
        month_string[0] = 'O';
 800944a:	234f      	movs	r3, #79	@ 0x4f
 800944c:	723b      	strb	r3, [r7, #8]
        month_string[1] = 'C';
 800944e:	2343      	movs	r3, #67	@ 0x43
 8009450:	727b      	strb	r3, [r7, #9]
        month_string[2] = 'T';
 8009452:	2354      	movs	r3, #84	@ 0x54
 8009454:	72bb      	strb	r3, [r7, #10]
        month_string[3] = NULL;
 8009456:	2300      	movs	r3, #0
 8009458:	72fb      	strb	r3, [r7, #11]
        month_string[4] = NULL;
 800945a:	2300      	movs	r3, #0
 800945c:	733b      	strb	r3, [r7, #12]
        break;
 800945e:	e016      	b.n	800948e <draw_day+0x22a>

    case 11:
        month_string[0] = 'N';
 8009460:	234e      	movs	r3, #78	@ 0x4e
 8009462:	723b      	strb	r3, [r7, #8]
        month_string[1] = 'O';
 8009464:	234f      	movs	r3, #79	@ 0x4f
 8009466:	727b      	strb	r3, [r7, #9]
        month_string[2] = 'V';
 8009468:	2356      	movs	r3, #86	@ 0x56
 800946a:	72bb      	strb	r3, [r7, #10]
        month_string[3] = NULL;
 800946c:	2300      	movs	r3, #0
 800946e:	72fb      	strb	r3, [r7, #11]
        month_string[4] = NULL;
 8009470:	2300      	movs	r3, #0
 8009472:	733b      	strb	r3, [r7, #12]
        break;
 8009474:	e00b      	b.n	800948e <draw_day+0x22a>

    case 12:
        month_string[0] = 'D';
 8009476:	2344      	movs	r3, #68	@ 0x44
 8009478:	723b      	strb	r3, [r7, #8]
        month_string[1] = 'E';
 800947a:	2345      	movs	r3, #69	@ 0x45
 800947c:	727b      	strb	r3, [r7, #9]
        month_string[2] = 'C';
 800947e:	2343      	movs	r3, #67	@ 0x43
 8009480:	72bb      	strb	r3, [r7, #10]
        month_string[3] = NULL;
 8009482:	2300      	movs	r3, #0
 8009484:	72fb      	strb	r3, [r7, #11]
        month_string[4] = NULL;
 8009486:	2300      	movs	r3, #0
 8009488:	733b      	strb	r3, [r7, #12]
        break;
 800948a:	e000      	b.n	800948e <draw_day+0x22a>
    default:
        break;
 800948c:	bf00      	nop
    }




    Paint_DrawString_EN(80, 100, &day_string[0], &Font16, BLACK, WHITE);
 800948e:	f107 0210 	add.w	r2, r7, #16
 8009492:	23ff      	movs	r3, #255	@ 0xff
 8009494:	9301      	str	r3, [sp, #4]
 8009496:	2300      	movs	r3, #0
 8009498:	9300      	str	r3, [sp, #0]
 800949a:	4b2f      	ldr	r3, [pc, #188]	@ (8009558 <draw_day+0x2f4>)
 800949c:	2164      	movs	r1, #100	@ 0x64
 800949e:	2050      	movs	r0, #80	@ 0x50
 80094a0:	f000 ff16 	bl	800a2d0 <Paint_DrawString_EN>
    Paint_DrawString_EN(130, 100, &month_string[0], &Font16, BLACK, WHITE);
 80094a4:	f107 0208 	add.w	r2, r7, #8
 80094a8:	23ff      	movs	r3, #255	@ 0xff
 80094aa:	9301      	str	r3, [sp, #4]
 80094ac:	2300      	movs	r3, #0
 80094ae:	9300      	str	r3, [sp, #0]
 80094b0:	4b29      	ldr	r3, [pc, #164]	@ (8009558 <draw_day+0x2f4>)
 80094b2:	2164      	movs	r1, #100	@ 0x64
 80094b4:	2082      	movs	r0, #130	@ 0x82
 80094b6:	f000 ff0b 	bl	800a2d0 <Paint_DrawString_EN>
    Paint_DrawNum(180, 100, date / 10, &Font16, WHITE, BLACK);
 80094ba:	88bb      	ldrh	r3, [r7, #4]
 80094bc:	4a27      	ldr	r2, [pc, #156]	@ (800955c <draw_day+0x2f8>)
 80094be:	fba2 2303 	umull	r2, r3, r2, r3
 80094c2:	08db      	lsrs	r3, r3, #3
 80094c4:	b29b      	uxth	r3, r3
 80094c6:	461a      	mov	r2, r3
 80094c8:	2300      	movs	r3, #0
 80094ca:	9301      	str	r3, [sp, #4]
 80094cc:	23ff      	movs	r3, #255	@ 0xff
 80094ce:	9300      	str	r3, [sp, #0]
 80094d0:	4b21      	ldr	r3, [pc, #132]	@ (8009558 <draw_day+0x2f4>)
 80094d2:	2164      	movs	r1, #100	@ 0x64
 80094d4:	20b4      	movs	r0, #180	@ 0xb4
 80094d6:	f000 ff4f 	bl	800a378 <Paint_DrawNum>
    Paint_DrawNum(190, 100, date % 10, &Font16, WHITE, BLACK);
 80094da:	88ba      	ldrh	r2, [r7, #4]
 80094dc:	4b1f      	ldr	r3, [pc, #124]	@ (800955c <draw_day+0x2f8>)
 80094de:	fba3 1302 	umull	r1, r3, r3, r2
 80094e2:	08d9      	lsrs	r1, r3, #3
 80094e4:	460b      	mov	r3, r1
 80094e6:	009b      	lsls	r3, r3, #2
 80094e8:	440b      	add	r3, r1
 80094ea:	005b      	lsls	r3, r3, #1
 80094ec:	1ad3      	subs	r3, r2, r3
 80094ee:	b29b      	uxth	r3, r3
 80094f0:	461a      	mov	r2, r3
 80094f2:	2300      	movs	r3, #0
 80094f4:	9301      	str	r3, [sp, #4]
 80094f6:	23ff      	movs	r3, #255	@ 0xff
 80094f8:	9300      	str	r3, [sp, #0]
 80094fa:	4b17      	ldr	r3, [pc, #92]	@ (8009558 <draw_day+0x2f4>)
 80094fc:	2164      	movs	r1, #100	@ 0x64
 80094fe:	20be      	movs	r0, #190	@ 0xbe
 8009500:	f000 ff3a 	bl	800a378 <Paint_DrawNum>
    Paint_DrawNum(210, 100, year / 10, &Font16, WHITE, BLACK);
 8009504:	883b      	ldrh	r3, [r7, #0]
 8009506:	4a15      	ldr	r2, [pc, #84]	@ (800955c <draw_day+0x2f8>)
 8009508:	fba2 2303 	umull	r2, r3, r2, r3
 800950c:	08db      	lsrs	r3, r3, #3
 800950e:	b29b      	uxth	r3, r3
 8009510:	461a      	mov	r2, r3
 8009512:	2300      	movs	r3, #0
 8009514:	9301      	str	r3, [sp, #4]
 8009516:	23ff      	movs	r3, #255	@ 0xff
 8009518:	9300      	str	r3, [sp, #0]
 800951a:	4b0f      	ldr	r3, [pc, #60]	@ (8009558 <draw_day+0x2f4>)
 800951c:	2164      	movs	r1, #100	@ 0x64
 800951e:	20d2      	movs	r0, #210	@ 0xd2
 8009520:	f000 ff2a 	bl	800a378 <Paint_DrawNum>
    Paint_DrawNum(220, 100, year % 10, &Font16, WHITE, BLACK);
 8009524:	883a      	ldrh	r2, [r7, #0]
 8009526:	4b0d      	ldr	r3, [pc, #52]	@ (800955c <draw_day+0x2f8>)
 8009528:	fba3 1302 	umull	r1, r3, r3, r2
 800952c:	08d9      	lsrs	r1, r3, #3
 800952e:	460b      	mov	r3, r1
 8009530:	009b      	lsls	r3, r3, #2
 8009532:	440b      	add	r3, r1
 8009534:	005b      	lsls	r3, r3, #1
 8009536:	1ad3      	subs	r3, r2, r3
 8009538:	b29b      	uxth	r3, r3
 800953a:	461a      	mov	r2, r3
 800953c:	2300      	movs	r3, #0
 800953e:	9301      	str	r3, [sp, #4]
 8009540:	23ff      	movs	r3, #255	@ 0xff
 8009542:	9300      	str	r3, [sp, #0]
 8009544:	4b04      	ldr	r3, [pc, #16]	@ (8009558 <draw_day+0x2f4>)
 8009546:	2164      	movs	r1, #100	@ 0x64
 8009548:	20dc      	movs	r0, #220	@ 0xdc
 800954a:	f000 ff15 	bl	800a378 <Paint_DrawNum>

}
 800954e:	bf00      	nop
 8009550:	371c      	adds	r7, #28
 8009552:	46bd      	mov	sp, r7
 8009554:	bd90      	pop	{r4, r7, pc}
 8009556:	bf00      	nop
 8009558:	20000274 	.word	0x20000274
 800955c:	cccccccd 	.word	0xcccccccd

08009560 <draw_battery>:

void draw_battery(uint16_t battery_percentage)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b086      	sub	sp, #24
 8009564:	af04      	add	r7, sp, #16
 8009566:	4603      	mov	r3, r0
 8009568:	80fb      	strh	r3, [r7, #6]
    Paint_ClearWindows(260, 0, 296, 15 + Font16.Height, WHITE);
 800956a:	4ba3      	ldr	r3, [pc, #652]	@ (80097f8 <draw_battery+0x298>)
 800956c:	88db      	ldrh	r3, [r3, #6]
 800956e:	330f      	adds	r3, #15
 8009570:	b29b      	uxth	r3, r3
 8009572:	22ff      	movs	r2, #255	@ 0xff
 8009574:	9200      	str	r2, [sp, #0]
 8009576:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800957a:	2100      	movs	r1, #0
 800957c:	f44f 7082 	mov.w	r0, #260	@ 0x104
 8009580:	f000 fbf4 	bl	8009d6c <Paint_ClearWindows>
    if((battery_percentage < 100) && (battery_percentage > 75))
 8009584:	88fb      	ldrh	r3, [r7, #6]
 8009586:	2b63      	cmp	r3, #99	@ 0x63
 8009588:	d83b      	bhi.n	8009602 <draw_battery+0xa2>
 800958a:	88fb      	ldrh	r3, [r7, #6]
 800958c:	2b4b      	cmp	r3, #75	@ 0x4b
 800958e:	d938      	bls.n	8009602 <draw_battery+0xa2>
    {
        Paint_DrawRectangle(260, 2, 265, 10, BLACK, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 8009590:	2301      	movs	r3, #1
 8009592:	9302      	str	r3, [sp, #8]
 8009594:	2301      	movs	r3, #1
 8009596:	9301      	str	r3, [sp, #4]
 8009598:	2300      	movs	r3, #0
 800959a:	9300      	str	r3, [sp, #0]
 800959c:	230a      	movs	r3, #10
 800959e:	f240 1209 	movw	r2, #265	@ 0x109
 80095a2:	2102      	movs	r1, #2
 80095a4:	f44f 7082 	mov.w	r0, #260	@ 0x104
 80095a8:	f000 fd66 	bl	800a078 <Paint_DrawRectangle>
        Paint_DrawRectangle(265, 2, 270, 10, BLACK, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 80095ac:	2301      	movs	r3, #1
 80095ae:	9302      	str	r3, [sp, #8]
 80095b0:	2301      	movs	r3, #1
 80095b2:	9301      	str	r3, [sp, #4]
 80095b4:	2300      	movs	r3, #0
 80095b6:	9300      	str	r3, [sp, #0]
 80095b8:	230a      	movs	r3, #10
 80095ba:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 80095be:	2102      	movs	r1, #2
 80095c0:	f240 1009 	movw	r0, #265	@ 0x109
 80095c4:	f000 fd58 	bl	800a078 <Paint_DrawRectangle>
        Paint_DrawRectangle(270, 2, 275, 10, BLACK, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 80095c8:	2301      	movs	r3, #1
 80095ca:	9302      	str	r3, [sp, #8]
 80095cc:	2301      	movs	r3, #1
 80095ce:	9301      	str	r3, [sp, #4]
 80095d0:	2300      	movs	r3, #0
 80095d2:	9300      	str	r3, [sp, #0]
 80095d4:	230a      	movs	r3, #10
 80095d6:	f240 1213 	movw	r2, #275	@ 0x113
 80095da:	2102      	movs	r1, #2
 80095dc:	f44f 7087 	mov.w	r0, #270	@ 0x10e
 80095e0:	f000 fd4a 	bl	800a078 <Paint_DrawRectangle>
        Paint_DrawRectangle(275, 2, 280, 10, BLACK, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 80095e4:	2301      	movs	r3, #1
 80095e6:	9302      	str	r3, [sp, #8]
 80095e8:	2301      	movs	r3, #1
 80095ea:	9301      	str	r3, [sp, #4]
 80095ec:	2300      	movs	r3, #0
 80095ee:	9300      	str	r3, [sp, #0]
 80095f0:	230a      	movs	r3, #10
 80095f2:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80095f6:	2102      	movs	r1, #2
 80095f8:	f240 1013 	movw	r0, #275	@ 0x113
 80095fc:	f000 fd3c 	bl	800a078 <Paint_DrawRectangle>
 8009600:	e0f5      	b.n	80097ee <draw_battery+0x28e>
    }
    else if ((battery_percentage < 75) && (battery_percentage > 50)){
 8009602:	88fb      	ldrh	r3, [r7, #6]
 8009604:	2b4a      	cmp	r3, #74	@ 0x4a
 8009606:	d83b      	bhi.n	8009680 <draw_battery+0x120>
 8009608:	88fb      	ldrh	r3, [r7, #6]
 800960a:	2b32      	cmp	r3, #50	@ 0x32
 800960c:	d938      	bls.n	8009680 <draw_battery+0x120>
        Paint_DrawRectangle(260, 2, 265, 10, BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 800960e:	2300      	movs	r3, #0
 8009610:	9302      	str	r3, [sp, #8]
 8009612:	2301      	movs	r3, #1
 8009614:	9301      	str	r3, [sp, #4]
 8009616:	2300      	movs	r3, #0
 8009618:	9300      	str	r3, [sp, #0]
 800961a:	230a      	movs	r3, #10
 800961c:	f240 1209 	movw	r2, #265	@ 0x109
 8009620:	2102      	movs	r1, #2
 8009622:	f44f 7082 	mov.w	r0, #260	@ 0x104
 8009626:	f000 fd27 	bl	800a078 <Paint_DrawRectangle>
        Paint_DrawRectangle(265, 2, 270, 10, BLACK, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 800962a:	2301      	movs	r3, #1
 800962c:	9302      	str	r3, [sp, #8]
 800962e:	2301      	movs	r3, #1
 8009630:	9301      	str	r3, [sp, #4]
 8009632:	2300      	movs	r3, #0
 8009634:	9300      	str	r3, [sp, #0]
 8009636:	230a      	movs	r3, #10
 8009638:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 800963c:	2102      	movs	r1, #2
 800963e:	f240 1009 	movw	r0, #265	@ 0x109
 8009642:	f000 fd19 	bl	800a078 <Paint_DrawRectangle>
        Paint_DrawRectangle(270, 2, 275, 10, BLACK, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 8009646:	2301      	movs	r3, #1
 8009648:	9302      	str	r3, [sp, #8]
 800964a:	2301      	movs	r3, #1
 800964c:	9301      	str	r3, [sp, #4]
 800964e:	2300      	movs	r3, #0
 8009650:	9300      	str	r3, [sp, #0]
 8009652:	230a      	movs	r3, #10
 8009654:	f240 1213 	movw	r2, #275	@ 0x113
 8009658:	2102      	movs	r1, #2
 800965a:	f44f 7087 	mov.w	r0, #270	@ 0x10e
 800965e:	f000 fd0b 	bl	800a078 <Paint_DrawRectangle>
        Paint_DrawRectangle(275, 2, 280, 10, BLACK, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 8009662:	2301      	movs	r3, #1
 8009664:	9302      	str	r3, [sp, #8]
 8009666:	2301      	movs	r3, #1
 8009668:	9301      	str	r3, [sp, #4]
 800966a:	2300      	movs	r3, #0
 800966c:	9300      	str	r3, [sp, #0]
 800966e:	230a      	movs	r3, #10
 8009670:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8009674:	2102      	movs	r1, #2
 8009676:	f240 1013 	movw	r0, #275	@ 0x113
 800967a:	f000 fcfd 	bl	800a078 <Paint_DrawRectangle>
 800967e:	e0b6      	b.n	80097ee <draw_battery+0x28e>
    }

    else if ((battery_percentage < 50) && (battery_percentage > 25)){
 8009680:	88fb      	ldrh	r3, [r7, #6]
 8009682:	2b31      	cmp	r3, #49	@ 0x31
 8009684:	d83b      	bhi.n	80096fe <draw_battery+0x19e>
 8009686:	88fb      	ldrh	r3, [r7, #6]
 8009688:	2b19      	cmp	r3, #25
 800968a:	d938      	bls.n	80096fe <draw_battery+0x19e>
        Paint_DrawRectangle(260, 2, 265, 10, BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 800968c:	2300      	movs	r3, #0
 800968e:	9302      	str	r3, [sp, #8]
 8009690:	2301      	movs	r3, #1
 8009692:	9301      	str	r3, [sp, #4]
 8009694:	2300      	movs	r3, #0
 8009696:	9300      	str	r3, [sp, #0]
 8009698:	230a      	movs	r3, #10
 800969a:	f240 1209 	movw	r2, #265	@ 0x109
 800969e:	2102      	movs	r1, #2
 80096a0:	f44f 7082 	mov.w	r0, #260	@ 0x104
 80096a4:	f000 fce8 	bl	800a078 <Paint_DrawRectangle>
        Paint_DrawRectangle(265, 2, 270, 10, BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 80096a8:	2300      	movs	r3, #0
 80096aa:	9302      	str	r3, [sp, #8]
 80096ac:	2301      	movs	r3, #1
 80096ae:	9301      	str	r3, [sp, #4]
 80096b0:	2300      	movs	r3, #0
 80096b2:	9300      	str	r3, [sp, #0]
 80096b4:	230a      	movs	r3, #10
 80096b6:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 80096ba:	2102      	movs	r1, #2
 80096bc:	f240 1009 	movw	r0, #265	@ 0x109
 80096c0:	f000 fcda 	bl	800a078 <Paint_DrawRectangle>
        Paint_DrawRectangle(270, 2, 275, 10, BLACK, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 80096c4:	2301      	movs	r3, #1
 80096c6:	9302      	str	r3, [sp, #8]
 80096c8:	2301      	movs	r3, #1
 80096ca:	9301      	str	r3, [sp, #4]
 80096cc:	2300      	movs	r3, #0
 80096ce:	9300      	str	r3, [sp, #0]
 80096d0:	230a      	movs	r3, #10
 80096d2:	f240 1213 	movw	r2, #275	@ 0x113
 80096d6:	2102      	movs	r1, #2
 80096d8:	f44f 7087 	mov.w	r0, #270	@ 0x10e
 80096dc:	f000 fccc 	bl	800a078 <Paint_DrawRectangle>
        Paint_DrawRectangle(275, 2, 280, 10, BLACK, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 80096e0:	2301      	movs	r3, #1
 80096e2:	9302      	str	r3, [sp, #8]
 80096e4:	2301      	movs	r3, #1
 80096e6:	9301      	str	r3, [sp, #4]
 80096e8:	2300      	movs	r3, #0
 80096ea:	9300      	str	r3, [sp, #0]
 80096ec:	230a      	movs	r3, #10
 80096ee:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80096f2:	2102      	movs	r1, #2
 80096f4:	f240 1013 	movw	r0, #275	@ 0x113
 80096f8:	f000 fcbe 	bl	800a078 <Paint_DrawRectangle>
 80096fc:	e077      	b.n	80097ee <draw_battery+0x28e>
    }

    else if ((battery_percentage < 25) && (battery_percentage > 5)){
 80096fe:	88fb      	ldrh	r3, [r7, #6]
 8009700:	2b18      	cmp	r3, #24
 8009702:	d83b      	bhi.n	800977c <draw_battery+0x21c>
 8009704:	88fb      	ldrh	r3, [r7, #6]
 8009706:	2b05      	cmp	r3, #5
 8009708:	d938      	bls.n	800977c <draw_battery+0x21c>
        Paint_DrawRectangle(260, 2, 265, 10, BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 800970a:	2300      	movs	r3, #0
 800970c:	9302      	str	r3, [sp, #8]
 800970e:	2301      	movs	r3, #1
 8009710:	9301      	str	r3, [sp, #4]
 8009712:	2300      	movs	r3, #0
 8009714:	9300      	str	r3, [sp, #0]
 8009716:	230a      	movs	r3, #10
 8009718:	f240 1209 	movw	r2, #265	@ 0x109
 800971c:	2102      	movs	r1, #2
 800971e:	f44f 7082 	mov.w	r0, #260	@ 0x104
 8009722:	f000 fca9 	bl	800a078 <Paint_DrawRectangle>
        Paint_DrawRectangle(265, 2, 270, 10, BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 8009726:	2300      	movs	r3, #0
 8009728:	9302      	str	r3, [sp, #8]
 800972a:	2301      	movs	r3, #1
 800972c:	9301      	str	r3, [sp, #4]
 800972e:	2300      	movs	r3, #0
 8009730:	9300      	str	r3, [sp, #0]
 8009732:	230a      	movs	r3, #10
 8009734:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 8009738:	2102      	movs	r1, #2
 800973a:	f240 1009 	movw	r0, #265	@ 0x109
 800973e:	f000 fc9b 	bl	800a078 <Paint_DrawRectangle>
        Paint_DrawRectangle(270, 2, 275, 10, BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 8009742:	2300      	movs	r3, #0
 8009744:	9302      	str	r3, [sp, #8]
 8009746:	2301      	movs	r3, #1
 8009748:	9301      	str	r3, [sp, #4]
 800974a:	2300      	movs	r3, #0
 800974c:	9300      	str	r3, [sp, #0]
 800974e:	230a      	movs	r3, #10
 8009750:	f240 1213 	movw	r2, #275	@ 0x113
 8009754:	2102      	movs	r1, #2
 8009756:	f44f 7087 	mov.w	r0, #270	@ 0x10e
 800975a:	f000 fc8d 	bl	800a078 <Paint_DrawRectangle>
        Paint_DrawRectangle(275, 2, 280, 10, BLACK, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 800975e:	2301      	movs	r3, #1
 8009760:	9302      	str	r3, [sp, #8]
 8009762:	2301      	movs	r3, #1
 8009764:	9301      	str	r3, [sp, #4]
 8009766:	2300      	movs	r3, #0
 8009768:	9300      	str	r3, [sp, #0]
 800976a:	230a      	movs	r3, #10
 800976c:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8009770:	2102      	movs	r1, #2
 8009772:	f240 1013 	movw	r0, #275	@ 0x113
 8009776:	f000 fc7f 	bl	800a078 <Paint_DrawRectangle>
 800977a:	e038      	b.n	80097ee <draw_battery+0x28e>
    }

    else
    {
        Paint_DrawRectangle(260, 2, 265, 10, BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 800977c:	2300      	movs	r3, #0
 800977e:	9302      	str	r3, [sp, #8]
 8009780:	2301      	movs	r3, #1
 8009782:	9301      	str	r3, [sp, #4]
 8009784:	2300      	movs	r3, #0
 8009786:	9300      	str	r3, [sp, #0]
 8009788:	230a      	movs	r3, #10
 800978a:	f240 1209 	movw	r2, #265	@ 0x109
 800978e:	2102      	movs	r1, #2
 8009790:	f44f 7082 	mov.w	r0, #260	@ 0x104
 8009794:	f000 fc70 	bl	800a078 <Paint_DrawRectangle>
        Paint_DrawRectangle(265, 2, 270, 10, BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 8009798:	2300      	movs	r3, #0
 800979a:	9302      	str	r3, [sp, #8]
 800979c:	2301      	movs	r3, #1
 800979e:	9301      	str	r3, [sp, #4]
 80097a0:	2300      	movs	r3, #0
 80097a2:	9300      	str	r3, [sp, #0]
 80097a4:	230a      	movs	r3, #10
 80097a6:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 80097aa:	2102      	movs	r1, #2
 80097ac:	f240 1009 	movw	r0, #265	@ 0x109
 80097b0:	f000 fc62 	bl	800a078 <Paint_DrawRectangle>
        Paint_DrawRectangle(270, 2, 275, 10, BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 80097b4:	2300      	movs	r3, #0
 80097b6:	9302      	str	r3, [sp, #8]
 80097b8:	2301      	movs	r3, #1
 80097ba:	9301      	str	r3, [sp, #4]
 80097bc:	2300      	movs	r3, #0
 80097be:	9300      	str	r3, [sp, #0]
 80097c0:	230a      	movs	r3, #10
 80097c2:	f240 1213 	movw	r2, #275	@ 0x113
 80097c6:	2102      	movs	r1, #2
 80097c8:	f44f 7087 	mov.w	r0, #270	@ 0x10e
 80097cc:	f000 fc54 	bl	800a078 <Paint_DrawRectangle>
        Paint_DrawRectangle(275, 2, 280, 10, BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 80097d0:	2300      	movs	r3, #0
 80097d2:	9302      	str	r3, [sp, #8]
 80097d4:	2301      	movs	r3, #1
 80097d6:	9301      	str	r3, [sp, #4]
 80097d8:	2300      	movs	r3, #0
 80097da:	9300      	str	r3, [sp, #0]
 80097dc:	230a      	movs	r3, #10
 80097de:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80097e2:	2102      	movs	r1, #2
 80097e4:	f240 1013 	movw	r0, #275	@ 0x113
 80097e8:	f000 fc46 	bl	800a078 <Paint_DrawRectangle>
    }
}
 80097ec:	bf00      	nop
 80097ee:	bf00      	nop
 80097f0:	3708      	adds	r7, #8
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}
 80097f6:	bf00      	nop
 80097f8:	20000274 	.word	0x20000274

080097fc <E_ink_display_name>:
void E_ink_display_name(void)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b084      	sub	sp, #16
 8009800:	af02      	add	r7, sp, #8
    UBYTE *BlackImage;
    UBYTE num = 3;
 8009802:	2303      	movs	r3, #3
 8009804:	71fb      	strb	r3, [r7, #7]
	UWORD Imagesize = ((EPD_2IN9_V2_WIDTH % 8 == 0)? (EPD_2IN9_V2_WIDTH / 8 ): (EPD_2IN9_V2_WIDTH / 8 + 1)) * EPD_2IN9_V2_HEIGHT;
 8009806:	f44f 5394 	mov.w	r3, #4736	@ 0x1280
 800980a:	80bb      	strh	r3, [r7, #4]
    if((BlackImage = (UBYTE *)malloc(Imagesize)) == NULL) {
 800980c:	88bb      	ldrh	r3, [r7, #4]
 800980e:	4618      	mov	r0, r3
 8009810:	f000 ff7a 	bl	800a708 <malloc>
 8009814:	4603      	mov	r3, r0
 8009816:	603b      	str	r3, [r7, #0]
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d102      	bne.n	8009824 <E_ink_display_name+0x28>
        printf("Failed to apply for black memory...\r\n");
 800981e:	4821      	ldr	r0, [pc, #132]	@ (80098a4 <E_ink_display_name+0xa8>)
 8009820:	f001 f95a 	bl	800aad8 <puts>
    }


    
	EPD_2IN9_V2_Init();
 8009824:	f7fd f88a 	bl	800693c <EPD_2IN9_V2_Init>


    	EPD_2IN9_V2_Clear();
 8009828:	f7fd f90a 	bl	8006a40 <EPD_2IN9_V2_Clear>
    	EPD_2IN9_V2_Init_Fast();
 800982c:	f7fd f8c4 	bl	80069b8 <EPD_2IN9_V2_Init_Fast>
    	Paint_NewImage(BlackImage, EPD_2IN9_V2_WIDTH, EPD_2IN9_V2_HEIGHT, 90, WHITE);
 8009830:	23ff      	movs	r3, #255	@ 0xff
 8009832:	9300      	str	r3, [sp, #0]
 8009834:	235a      	movs	r3, #90	@ 0x5a
 8009836:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800983a:	2180      	movs	r1, #128	@ 0x80
 800983c:	6838      	ldr	r0, [r7, #0]
 800983e:	f000 f83d 	bl	80098bc <Paint_NewImage>
    	printf("Drawing\r\n");
 8009842:	4819      	ldr	r0, [pc, #100]	@ (80098a8 <E_ink_display_name+0xac>)
 8009844:	f001 f948 	bl	800aad8 <puts>
    	//1.Select Image
    	Paint_SelectImage(BlackImage);
 8009848:	6838      	ldr	r0, [r7, #0]
 800984a:	f000 f88b 	bl	8009964 <Paint_SelectImage>
    	Paint_Clear(WHITE);
 800984e:	20ff      	movs	r0, #255	@ 0xff
 8009850:	f000 f9e4 	bl	8009c1c <Paint_Clear>

    	Paint_DrawString_EN(10, 0, "Duy Ngoc - 2251036", &Font16, BLACK, WHITE);
 8009854:	23ff      	movs	r3, #255	@ 0xff
 8009856:	9301      	str	r3, [sp, #4]
 8009858:	2300      	movs	r3, #0
 800985a:	9300      	str	r3, [sp, #0]
 800985c:	4b13      	ldr	r3, [pc, #76]	@ (80098ac <E_ink_display_name+0xb0>)
 800985e:	4a14      	ldr	r2, [pc, #80]	@ (80098b0 <E_ink_display_name+0xb4>)
 8009860:	2100      	movs	r1, #0
 8009862:	200a      	movs	r0, #10
 8009864:	f000 fd34 	bl	800a2d0 <Paint_DrawString_EN>
    	Paint_DrawString_EN(10, 30, "Trung Nam - 2251032", &Font16, BLACK, WHITE);
 8009868:	23ff      	movs	r3, #255	@ 0xff
 800986a:	9301      	str	r3, [sp, #4]
 800986c:	2300      	movs	r3, #0
 800986e:	9300      	str	r3, [sp, #0]
 8009870:	4b0e      	ldr	r3, [pc, #56]	@ (80098ac <E_ink_display_name+0xb0>)
 8009872:	4a10      	ldr	r2, [pc, #64]	@ (80098b4 <E_ink_display_name+0xb8>)
 8009874:	211e      	movs	r1, #30
 8009876:	200a      	movs	r0, #10
 8009878:	f000 fd2a 	bl	800a2d0 <Paint_DrawString_EN>
    	Paint_DrawString_EN(10, 60, "Hung Minh - 2251030", &Font16, BLACK, WHITE);
 800987c:	23ff      	movs	r3, #255	@ 0xff
 800987e:	9301      	str	r3, [sp, #4]
 8009880:	2300      	movs	r3, #0
 8009882:	9300      	str	r3, [sp, #0]
 8009884:	4b09      	ldr	r3, [pc, #36]	@ (80098ac <E_ink_display_name+0xb0>)
 8009886:	4a0c      	ldr	r2, [pc, #48]	@ (80098b8 <E_ink_display_name+0xbc>)
 8009888:	213c      	movs	r1, #60	@ 0x3c
 800988a:	200a      	movs	r0, #10
 800988c:	f000 fd20 	bl	800a2d0 <Paint_DrawString_EN>
    	EPD_2IN9_V2_Display_Base(BlackImage);
 8009890:	6838      	ldr	r0, [r7, #0]
 8009892:	f7fd f91c 	bl	8006ace <EPD_2IN9_V2_Display_Base>
        free(BlackImage);
 8009896:	6838      	ldr	r0, [r7, #0]
 8009898:	f000 ff3e 	bl	800a718 <free>
	}    
 800989c:	bf00      	nop
 800989e:	3708      	adds	r7, #8
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}
 80098a4:	0800b6b4 	.word	0x0800b6b4
 80098a8:	0800b6dc 	.word	0x0800b6dc
 80098ac:	20000274 	.word	0x20000274
 80098b0:	0800b798 	.word	0x0800b798
 80098b4:	0800b7ac 	.word	0x0800b7ac
 80098b8:	0800b7c0 	.word	0x0800b7c0

080098bc <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UBYTE *image, UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 80098bc:	b480      	push	{r7}
 80098be:	b085      	sub	sp, #20
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	60f8      	str	r0, [r7, #12]
 80098c4:	4608      	mov	r0, r1
 80098c6:	4611      	mov	r1, r2
 80098c8:	461a      	mov	r2, r3
 80098ca:	4603      	mov	r3, r0
 80098cc:	817b      	strh	r3, [r7, #10]
 80098ce:	460b      	mov	r3, r1
 80098d0:	813b      	strh	r3, [r7, #8]
 80098d2:	4613      	mov	r3, r2
 80098d4:	80fb      	strh	r3, [r7, #6]
    Paint.Image = NULL;
 80098d6:	4b22      	ldr	r3, [pc, #136]	@ (8009960 <Paint_NewImage+0xa4>)
 80098d8:	2200      	movs	r2, #0
 80098da:	601a      	str	r2, [r3, #0]
    Paint.Image = image;
 80098dc:	4a20      	ldr	r2, [pc, #128]	@ (8009960 <Paint_NewImage+0xa4>)
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	6013      	str	r3, [r2, #0]

    Paint.WidthMemory = Width;
 80098e2:	4a1f      	ldr	r2, [pc, #124]	@ (8009960 <Paint_NewImage+0xa4>)
 80098e4:	897b      	ldrh	r3, [r7, #10]
 80098e6:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 80098e8:	4a1d      	ldr	r2, [pc, #116]	@ (8009960 <Paint_NewImage+0xa4>)
 80098ea:	893b      	ldrh	r3, [r7, #8]
 80098ec:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 80098ee:	4a1c      	ldr	r2, [pc, #112]	@ (8009960 <Paint_NewImage+0xa4>)
 80098f0:	8b3b      	ldrh	r3, [r7, #24]
 80098f2:	8193      	strh	r3, [r2, #12]
	Paint.Scale = 2;
 80098f4:	4b1a      	ldr	r3, [pc, #104]	@ (8009960 <Paint_NewImage+0xa4>)
 80098f6:	2202      	movs	r2, #2
 80098f8:	82da      	strh	r2, [r3, #22]
		
    Paint.WidthByte = (Width % 8 == 0)? (Width / 8 ): (Width / 8 + 1);
 80098fa:	897b      	ldrh	r3, [r7, #10]
 80098fc:	f003 0307 	and.w	r3, r3, #7
 8009900:	b29b      	uxth	r3, r3
 8009902:	2b00      	cmp	r3, #0
 8009904:	d103      	bne.n	800990e <Paint_NewImage+0x52>
 8009906:	897b      	ldrh	r3, [r7, #10]
 8009908:	08db      	lsrs	r3, r3, #3
 800990a:	b29b      	uxth	r3, r3
 800990c:	e004      	b.n	8009918 <Paint_NewImage+0x5c>
 800990e:	897b      	ldrh	r3, [r7, #10]
 8009910:	08db      	lsrs	r3, r3, #3
 8009912:	b29b      	uxth	r3, r3
 8009914:	3301      	adds	r3, #1
 8009916:	b29b      	uxth	r3, r3
 8009918:	4a11      	ldr	r2, [pc, #68]	@ (8009960 <Paint_NewImage+0xa4>)
 800991a:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 800991c:	4a10      	ldr	r2, [pc, #64]	@ (8009960 <Paint_NewImage+0xa4>)
 800991e:	893b      	ldrh	r3, [r7, #8]
 8009920:	8293      	strh	r3, [r2, #20]
//    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
//    printf(" EPD_WIDTH / 8 = %d\r\n",  122 / 8);
   
    Paint.Rotate = Rotate;
 8009922:	4a0f      	ldr	r2, [pc, #60]	@ (8009960 <Paint_NewImage+0xa4>)
 8009924:	88fb      	ldrh	r3, [r7, #6]
 8009926:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 8009928:	4b0d      	ldr	r3, [pc, #52]	@ (8009960 <Paint_NewImage+0xa4>)
 800992a:	2200      	movs	r2, #0
 800992c:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 800992e:	88fb      	ldrh	r3, [r7, #6]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d002      	beq.n	800993a <Paint_NewImage+0x7e>
 8009934:	88fb      	ldrh	r3, [r7, #6]
 8009936:	2bb4      	cmp	r3, #180	@ 0xb4
 8009938:	d106      	bne.n	8009948 <Paint_NewImage+0x8c>
        Paint.Width = Width;
 800993a:	4a09      	ldr	r2, [pc, #36]	@ (8009960 <Paint_NewImage+0xa4>)
 800993c:	897b      	ldrh	r3, [r7, #10]
 800993e:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 8009940:	4a07      	ldr	r2, [pc, #28]	@ (8009960 <Paint_NewImage+0xa4>)
 8009942:	893b      	ldrh	r3, [r7, #8]
 8009944:	80d3      	strh	r3, [r2, #6]
 8009946:	e006      	b.n	8009956 <Paint_NewImage+0x9a>
    } else {
        Paint.Width = Height;
 8009948:	4a05      	ldr	r2, [pc, #20]	@ (8009960 <Paint_NewImage+0xa4>)
 800994a:	893b      	ldrh	r3, [r7, #8]
 800994c:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 800994e:	4a04      	ldr	r2, [pc, #16]	@ (8009960 <Paint_NewImage+0xa4>)
 8009950:	897b      	ldrh	r3, [r7, #10]
 8009952:	80d3      	strh	r3, [r2, #6]
    }
}
 8009954:	bf00      	nop
 8009956:	bf00      	nop
 8009958:	3714      	adds	r7, #20
 800995a:	46bd      	mov	sp, r7
 800995c:	bc80      	pop	{r7}
 800995e:	4770      	bx	lr
 8009960:	20000558 	.word	0x20000558

08009964 <Paint_SelectImage>:
function: Select Image
parameter:
    image : Pointer to the image cache
******************************************************************************/
void Paint_SelectImage(UBYTE *image)
{
 8009964:	b480      	push	{r7}
 8009966:	b083      	sub	sp, #12
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
    Paint.Image = image;
 800996c:	4a03      	ldr	r2, [pc, #12]	@ (800997c <Paint_SelectImage+0x18>)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6013      	str	r3, [r2, #0]
}
 8009972:	bf00      	nop
 8009974:	370c      	adds	r7, #12
 8009976:	46bd      	mov	sp, r7
 8009978:	bc80      	pop	{r7}
 800997a:	4770      	bx	lr
 800997c:	20000558 	.word	0x20000558

08009980 <Paint_SetPixel>:
    Xpoint : At point X
    Ypoint : At point Y
    Color  : Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b08a      	sub	sp, #40	@ 0x28
 8009984:	af00      	add	r7, sp, #0
 8009986:	4603      	mov	r3, r0
 8009988:	80fb      	strh	r3, [r7, #6]
 800998a:	460b      	mov	r3, r1
 800998c:	80bb      	strh	r3, [r7, #4]
 800998e:	4613      	mov	r3, r2
 8009990:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 8009992:	4ba0      	ldr	r3, [pc, #640]	@ (8009c14 <Paint_SetPixel+0x294>)
 8009994:	889b      	ldrh	r3, [r3, #4]
 8009996:	88fa      	ldrh	r2, [r7, #6]
 8009998:	429a      	cmp	r2, r3
 800999a:	d804      	bhi.n	80099a6 <Paint_SetPixel+0x26>
 800999c:	4b9d      	ldr	r3, [pc, #628]	@ (8009c14 <Paint_SetPixel+0x294>)
 800999e:	88db      	ldrh	r3, [r3, #6]
 80099a0:	88ba      	ldrh	r2, [r7, #4]
 80099a2:	429a      	cmp	r2, r3
 80099a4:	d903      	bls.n	80099ae <Paint_SetPixel+0x2e>
        Debug("Exceeding display boundaries\r\n");
 80099a6:	489c      	ldr	r0, [pc, #624]	@ (8009c18 <Paint_SetPixel+0x298>)
 80099a8:	f001 f896 	bl	800aad8 <puts>
        return;
 80099ac:	e12e      	b.n	8009c0c <Paint_SetPixel+0x28c>
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 80099ae:	4b99      	ldr	r3, [pc, #612]	@ (8009c14 <Paint_SetPixel+0x294>)
 80099b0:	89db      	ldrh	r3, [r3, #14]
 80099b2:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 80099b6:	d02b      	beq.n	8009a10 <Paint_SetPixel+0x90>
 80099b8:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 80099bc:	f300 8123 	bgt.w	8009c06 <Paint_SetPixel+0x286>
 80099c0:	2bb4      	cmp	r3, #180	@ 0xb4
 80099c2:	d016      	beq.n	80099f2 <Paint_SetPixel+0x72>
 80099c4:	2bb4      	cmp	r3, #180	@ 0xb4
 80099c6:	f300 811e 	bgt.w	8009c06 <Paint_SetPixel+0x286>
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d002      	beq.n	80099d4 <Paint_SetPixel+0x54>
 80099ce:	2b5a      	cmp	r3, #90	@ 0x5a
 80099d0:	d005      	beq.n	80099de <Paint_SetPixel+0x5e>
    case 270:
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;
    default:
        return;
 80099d2:	e118      	b.n	8009c06 <Paint_SetPixel+0x286>
        X = Xpoint;
 80099d4:	88fb      	ldrh	r3, [r7, #6]
 80099d6:	84fb      	strh	r3, [r7, #38]	@ 0x26
        Y = Ypoint;  
 80099d8:	88bb      	ldrh	r3, [r7, #4]
 80099da:	84bb      	strh	r3, [r7, #36]	@ 0x24
        break;
 80099dc:	e022      	b.n	8009a24 <Paint_SetPixel+0xa4>
        X = Paint.WidthMemory - Ypoint - 1;
 80099de:	4b8d      	ldr	r3, [pc, #564]	@ (8009c14 <Paint_SetPixel+0x294>)
 80099e0:	891a      	ldrh	r2, [r3, #8]
 80099e2:	88bb      	ldrh	r3, [r7, #4]
 80099e4:	1ad3      	subs	r3, r2, r3
 80099e6:	b29b      	uxth	r3, r3
 80099e8:	3b01      	subs	r3, #1
 80099ea:	84fb      	strh	r3, [r7, #38]	@ 0x26
        Y = Xpoint;
 80099ec:	88fb      	ldrh	r3, [r7, #6]
 80099ee:	84bb      	strh	r3, [r7, #36]	@ 0x24
        break;
 80099f0:	e018      	b.n	8009a24 <Paint_SetPixel+0xa4>
        X = Paint.WidthMemory - Xpoint - 1;
 80099f2:	4b88      	ldr	r3, [pc, #544]	@ (8009c14 <Paint_SetPixel+0x294>)
 80099f4:	891a      	ldrh	r2, [r3, #8]
 80099f6:	88fb      	ldrh	r3, [r7, #6]
 80099f8:	1ad3      	subs	r3, r2, r3
 80099fa:	b29b      	uxth	r3, r3
 80099fc:	3b01      	subs	r3, #1
 80099fe:	84fb      	strh	r3, [r7, #38]	@ 0x26
        Y = Paint.HeightMemory - Ypoint - 1;
 8009a00:	4b84      	ldr	r3, [pc, #528]	@ (8009c14 <Paint_SetPixel+0x294>)
 8009a02:	895a      	ldrh	r2, [r3, #10]
 8009a04:	88bb      	ldrh	r3, [r7, #4]
 8009a06:	1ad3      	subs	r3, r2, r3
 8009a08:	b29b      	uxth	r3, r3
 8009a0a:	3b01      	subs	r3, #1
 8009a0c:	84bb      	strh	r3, [r7, #36]	@ 0x24
        break;
 8009a0e:	e009      	b.n	8009a24 <Paint_SetPixel+0xa4>
        X = Ypoint;
 8009a10:	88bb      	ldrh	r3, [r7, #4]
 8009a12:	84fb      	strh	r3, [r7, #38]	@ 0x26
        Y = Paint.HeightMemory - Xpoint - 1;
 8009a14:	4b7f      	ldr	r3, [pc, #508]	@ (8009c14 <Paint_SetPixel+0x294>)
 8009a16:	895a      	ldrh	r2, [r3, #10]
 8009a18:	88fb      	ldrh	r3, [r7, #6]
 8009a1a:	1ad3      	subs	r3, r2, r3
 8009a1c:	b29b      	uxth	r3, r3
 8009a1e:	3b01      	subs	r3, #1
 8009a20:	84bb      	strh	r3, [r7, #36]	@ 0x24
        break;
 8009a22:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 8009a24:	4b7b      	ldr	r3, [pc, #492]	@ (8009c14 <Paint_SetPixel+0x294>)
 8009a26:	8a1b      	ldrh	r3, [r3, #16]
 8009a28:	2b03      	cmp	r3, #3
 8009a2a:	f200 80ee 	bhi.w	8009c0a <Paint_SetPixel+0x28a>
 8009a2e:	a201      	add	r2, pc, #4	@ (adr r2, 8009a34 <Paint_SetPixel+0xb4>)
 8009a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a34:	08009a83 	.word	0x08009a83
 8009a38:	08009a45 	.word	0x08009a45
 8009a3c:	08009a55 	.word	0x08009a55
 8009a40:	08009a65 	.word	0x08009a65
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 8009a44:	4b73      	ldr	r3, [pc, #460]	@ (8009c14 <Paint_SetPixel+0x294>)
 8009a46:	891a      	ldrh	r2, [r3, #8]
 8009a48:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009a4a:	1ad3      	subs	r3, r2, r3
 8009a4c:	b29b      	uxth	r3, r3
 8009a4e:	3b01      	subs	r3, #1
 8009a50:	84fb      	strh	r3, [r7, #38]	@ 0x26
        break;
 8009a52:	e017      	b.n	8009a84 <Paint_SetPixel+0x104>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 8009a54:	4b6f      	ldr	r3, [pc, #444]	@ (8009c14 <Paint_SetPixel+0x294>)
 8009a56:	895a      	ldrh	r2, [r3, #10]
 8009a58:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009a5a:	1ad3      	subs	r3, r2, r3
 8009a5c:	b29b      	uxth	r3, r3
 8009a5e:	3b01      	subs	r3, #1
 8009a60:	84bb      	strh	r3, [r7, #36]	@ 0x24
        break;
 8009a62:	e00f      	b.n	8009a84 <Paint_SetPixel+0x104>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 8009a64:	4b6b      	ldr	r3, [pc, #428]	@ (8009c14 <Paint_SetPixel+0x294>)
 8009a66:	891a      	ldrh	r2, [r3, #8]
 8009a68:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009a6a:	1ad3      	subs	r3, r2, r3
 8009a6c:	b29b      	uxth	r3, r3
 8009a6e:	3b01      	subs	r3, #1
 8009a70:	84fb      	strh	r3, [r7, #38]	@ 0x26
        Y = Paint.HeightMemory - Y - 1;
 8009a72:	4b68      	ldr	r3, [pc, #416]	@ (8009c14 <Paint_SetPixel+0x294>)
 8009a74:	895a      	ldrh	r2, [r3, #10]
 8009a76:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009a78:	1ad3      	subs	r3, r2, r3
 8009a7a:	b29b      	uxth	r3, r3
 8009a7c:	3b01      	subs	r3, #1
 8009a7e:	84bb      	strh	r3, [r7, #36]	@ 0x24
        break;
 8009a80:	e000      	b.n	8009a84 <Paint_SetPixel+0x104>
        break;
 8009a82:	bf00      	nop
    default:
        return;
    }

    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 8009a84:	4b63      	ldr	r3, [pc, #396]	@ (8009c14 <Paint_SetPixel+0x294>)
 8009a86:	891b      	ldrh	r3, [r3, #8]
 8009a88:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8009a8a:	429a      	cmp	r2, r3
 8009a8c:	d804      	bhi.n	8009a98 <Paint_SetPixel+0x118>
 8009a8e:	4b61      	ldr	r3, [pc, #388]	@ (8009c14 <Paint_SetPixel+0x294>)
 8009a90:	895b      	ldrh	r3, [r3, #10]
 8009a92:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009a94:	429a      	cmp	r2, r3
 8009a96:	d903      	bls.n	8009aa0 <Paint_SetPixel+0x120>
        Debug("Exceeding display boundaries\r\n");
 8009a98:	485f      	ldr	r0, [pc, #380]	@ (8009c18 <Paint_SetPixel+0x298>)
 8009a9a:	f001 f81d 	bl	800aad8 <puts>
        return;
 8009a9e:	e0b5      	b.n	8009c0c <Paint_SetPixel+0x28c>
    }
    
    if(Paint.Scale == 2){
 8009aa0:	4b5c      	ldr	r3, [pc, #368]	@ (8009c14 <Paint_SetPixel+0x294>)
 8009aa2:	8adb      	ldrh	r3, [r3, #22]
 8009aa4:	2b02      	cmp	r3, #2
 8009aa6:	d138      	bne.n	8009b1a <Paint_SetPixel+0x19a>
        UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
 8009aa8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009aaa:	08db      	lsrs	r3, r3, #3
 8009aac:	b29b      	uxth	r3, r3
 8009aae:	4619      	mov	r1, r3
 8009ab0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009ab2:	4a58      	ldr	r2, [pc, #352]	@ (8009c14 <Paint_SetPixel+0x294>)
 8009ab4:	8a52      	ldrh	r2, [r2, #18]
 8009ab6:	fb02 f303 	mul.w	r3, r2, r3
 8009aba:	440b      	add	r3, r1
 8009abc:	613b      	str	r3, [r7, #16]
        UBYTE Rdata = Paint.Image[Addr];
 8009abe:	4b55      	ldr	r3, [pc, #340]	@ (8009c14 <Paint_SetPixel+0x294>)
 8009ac0:	681a      	ldr	r2, [r3, #0]
 8009ac2:	693b      	ldr	r3, [r7, #16]
 8009ac4:	4413      	add	r3, r2
 8009ac6:	781b      	ldrb	r3, [r3, #0]
 8009ac8:	73fb      	strb	r3, [r7, #15]
        if(Color == BLACK)
 8009aca:	887b      	ldrh	r3, [r7, #2]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d112      	bne.n	8009af6 <Paint_SetPixel+0x176>
            Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 8009ad0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009ad2:	f003 0307 	and.w	r3, r3, #7
 8009ad6:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009ada:	fa42 f303 	asr.w	r3, r2, r3
 8009ade:	b25a      	sxtb	r2, r3
 8009ae0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ae4:	4013      	ands	r3, r2
 8009ae6:	b259      	sxtb	r1, r3
 8009ae8:	4b4a      	ldr	r3, [pc, #296]	@ (8009c14 <Paint_SetPixel+0x294>)
 8009aea:	681a      	ldr	r2, [r3, #0]
 8009aec:	693b      	ldr	r3, [r7, #16]
 8009aee:	4413      	add	r3, r2
 8009af0:	b2ca      	uxtb	r2, r1
 8009af2:	701a      	strb	r2, [r3, #0]
 8009af4:	e08a      	b.n	8009c0c <Paint_SetPixel+0x28c>
        else
            Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
 8009af6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009af8:	f003 0307 	and.w	r3, r3, #7
 8009afc:	2280      	movs	r2, #128	@ 0x80
 8009afe:	fa42 f303 	asr.w	r3, r2, r3
 8009b02:	b25a      	sxtb	r2, r3
 8009b04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b08:	4313      	orrs	r3, r2
 8009b0a:	b259      	sxtb	r1, r3
 8009b0c:	4b41      	ldr	r3, [pc, #260]	@ (8009c14 <Paint_SetPixel+0x294>)
 8009b0e:	681a      	ldr	r2, [r3, #0]
 8009b10:	693b      	ldr	r3, [r7, #16]
 8009b12:	4413      	add	r3, r2
 8009b14:	b2ca      	uxtb	r2, r1
 8009b16:	701a      	strb	r2, [r3, #0]
 8009b18:	e078      	b.n	8009c0c <Paint_SetPixel+0x28c>
    }else if(Paint.Scale == 4){
 8009b1a:	4b3e      	ldr	r3, [pc, #248]	@ (8009c14 <Paint_SetPixel+0x294>)
 8009b1c:	8adb      	ldrh	r3, [r3, #22]
 8009b1e:	2b04      	cmp	r3, #4
 8009b20:	d136      	bne.n	8009b90 <Paint_SetPixel+0x210>
        UDOUBLE Addr = X / 4 + Y * Paint.WidthByte;
 8009b22:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009b24:	089b      	lsrs	r3, r3, #2
 8009b26:	b29b      	uxth	r3, r3
 8009b28:	4619      	mov	r1, r3
 8009b2a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009b2c:	4a39      	ldr	r2, [pc, #228]	@ (8009c14 <Paint_SetPixel+0x294>)
 8009b2e:	8a52      	ldrh	r2, [r2, #18]
 8009b30:	fb02 f303 	mul.w	r3, r2, r3
 8009b34:	440b      	add	r3, r1
 8009b36:	61bb      	str	r3, [r7, #24]
        Color = Color % 4;//Guaranteed color scale is 4  --- 0~3
 8009b38:	887b      	ldrh	r3, [r7, #2]
 8009b3a:	f003 0303 	and.w	r3, r3, #3
 8009b3e:	807b      	strh	r3, [r7, #2]
        UBYTE Rdata = Paint.Image[Addr];
 8009b40:	4b34      	ldr	r3, [pc, #208]	@ (8009c14 <Paint_SetPixel+0x294>)
 8009b42:	681a      	ldr	r2, [r3, #0]
 8009b44:	69bb      	ldr	r3, [r7, #24]
 8009b46:	4413      	add	r3, r2
 8009b48:	781b      	ldrb	r3, [r3, #0]
 8009b4a:	75fb      	strb	r3, [r7, #23]
        
        Rdata = Rdata & (~(0xC0 >> ((X % 4)*2)));
 8009b4c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009b4e:	f003 0303 	and.w	r3, r3, #3
 8009b52:	005b      	lsls	r3, r3, #1
 8009b54:	f06f 02c0 	mvn.w	r2, #192	@ 0xc0
 8009b58:	fa42 f303 	asr.w	r3, r2, r3
 8009b5c:	b25a      	sxtb	r2, r3
 8009b5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009b62:	4013      	ands	r3, r2
 8009b64:	b25b      	sxtb	r3, r3
 8009b66:	75fb      	strb	r3, [r7, #23]
        Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4)*2));
 8009b68:	887b      	ldrh	r3, [r7, #2]
 8009b6a:	019a      	lsls	r2, r3, #6
 8009b6c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009b6e:	f003 0303 	and.w	r3, r3, #3
 8009b72:	005b      	lsls	r3, r3, #1
 8009b74:	fa42 f303 	asr.w	r3, r2, r3
 8009b78:	b25a      	sxtb	r2, r3
 8009b7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	b259      	sxtb	r1, r3
 8009b82:	4b24      	ldr	r3, [pc, #144]	@ (8009c14 <Paint_SetPixel+0x294>)
 8009b84:	681a      	ldr	r2, [r3, #0]
 8009b86:	69bb      	ldr	r3, [r7, #24]
 8009b88:	4413      	add	r3, r2
 8009b8a:	b2ca      	uxtb	r2, r1
 8009b8c:	701a      	strb	r2, [r3, #0]
 8009b8e:	e03d      	b.n	8009c0c <Paint_SetPixel+0x28c>
    }else if(Paint.Scale == 6 || Paint.Scale == 7){
 8009b90:	4b20      	ldr	r3, [pc, #128]	@ (8009c14 <Paint_SetPixel+0x294>)
 8009b92:	8adb      	ldrh	r3, [r3, #22]
 8009b94:	2b06      	cmp	r3, #6
 8009b96:	d003      	beq.n	8009ba0 <Paint_SetPixel+0x220>
 8009b98:	4b1e      	ldr	r3, [pc, #120]	@ (8009c14 <Paint_SetPixel+0x294>)
 8009b9a:	8adb      	ldrh	r3, [r3, #22]
 8009b9c:	2b07      	cmp	r3, #7
 8009b9e:	d135      	bne.n	8009c0c <Paint_SetPixel+0x28c>
		UDOUBLE Addr = X / 2  + Y * Paint.WidthByte;
 8009ba0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009ba2:	085b      	lsrs	r3, r3, #1
 8009ba4:	b29b      	uxth	r3, r3
 8009ba6:	4619      	mov	r1, r3
 8009ba8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009baa:	4a1a      	ldr	r2, [pc, #104]	@ (8009c14 <Paint_SetPixel+0x294>)
 8009bac:	8a52      	ldrh	r2, [r2, #18]
 8009bae:	fb02 f303 	mul.w	r3, r2, r3
 8009bb2:	440b      	add	r3, r1
 8009bb4:	623b      	str	r3, [r7, #32]
		UBYTE Rdata = Paint.Image[Addr];
 8009bb6:	4b17      	ldr	r3, [pc, #92]	@ (8009c14 <Paint_SetPixel+0x294>)
 8009bb8:	681a      	ldr	r2, [r3, #0]
 8009bba:	6a3b      	ldr	r3, [r7, #32]
 8009bbc:	4413      	add	r3, r2
 8009bbe:	781b      	ldrb	r3, [r3, #0]
 8009bc0:	77fb      	strb	r3, [r7, #31]
		Rdata = Rdata & (~(0xF0 >> ((X % 2)*4)));//Clear first, then set value
 8009bc2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009bc4:	f003 0301 	and.w	r3, r3, #1
 8009bc8:	009b      	lsls	r3, r3, #2
 8009bca:	f06f 02f0 	mvn.w	r2, #240	@ 0xf0
 8009bce:	fa42 f303 	asr.w	r3, r2, r3
 8009bd2:	b25a      	sxtb	r2, r3
 8009bd4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009bd8:	4013      	ands	r3, r2
 8009bda:	b25b      	sxtb	r3, r3
 8009bdc:	77fb      	strb	r3, [r7, #31]
		Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2)*4));
 8009bde:	887b      	ldrh	r3, [r7, #2]
 8009be0:	011a      	lsls	r2, r3, #4
 8009be2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009be4:	f003 0301 	and.w	r3, r3, #1
 8009be8:	009b      	lsls	r3, r3, #2
 8009bea:	fa42 f303 	asr.w	r3, r2, r3
 8009bee:	b25a      	sxtb	r2, r3
 8009bf0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009bf4:	4313      	orrs	r3, r2
 8009bf6:	b259      	sxtb	r1, r3
 8009bf8:	4b06      	ldr	r3, [pc, #24]	@ (8009c14 <Paint_SetPixel+0x294>)
 8009bfa:	681a      	ldr	r2, [r3, #0]
 8009bfc:	6a3b      	ldr	r3, [r7, #32]
 8009bfe:	4413      	add	r3, r2
 8009c00:	b2ca      	uxtb	r2, r1
 8009c02:	701a      	strb	r2, [r3, #0]
 8009c04:	e002      	b.n	8009c0c <Paint_SetPixel+0x28c>
        return;
 8009c06:	bf00      	nop
 8009c08:	e000      	b.n	8009c0c <Paint_SetPixel+0x28c>
        return;
 8009c0a:	bf00      	nop
		//printf("Add =  %d ,data = %d\r\n",Addr,Rdata);
		}
}
 8009c0c:	3728      	adds	r7, #40	@ 0x28
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}
 8009c12:	bf00      	nop
 8009c14:	20000558 	.word	0x20000558
 8009c18:	0800b8fc 	.word	0x0800b8fc

08009c1c <Paint_Clear>:
function: Clear the color of the picture
parameter:
    Color : Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b089      	sub	sp, #36	@ 0x24
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	4603      	mov	r3, r0
 8009c24:	80fb      	strh	r3, [r7, #6]
	if(Paint.Scale == 2) {
 8009c26:	4b50      	ldr	r3, [pc, #320]	@ (8009d68 <Paint_Clear+0x14c>)
 8009c28:	8adb      	ldrh	r3, [r3, #22]
 8009c2a:	2b02      	cmp	r3, #2
 8009c2c:	d125      	bne.n	8009c7a <Paint_Clear+0x5e>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8009c2e:	2300      	movs	r3, #0
 8009c30:	83fb      	strh	r3, [r7, #30]
 8009c32:	e01c      	b.n	8009c6e <Paint_Clear+0x52>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8009c34:	2300      	movs	r3, #0
 8009c36:	83bb      	strh	r3, [r7, #28]
 8009c38:	e011      	b.n	8009c5e <Paint_Clear+0x42>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 8009c3a:	8bba      	ldrh	r2, [r7, #28]
 8009c3c:	8bfb      	ldrh	r3, [r7, #30]
 8009c3e:	494a      	ldr	r1, [pc, #296]	@ (8009d68 <Paint_Clear+0x14c>)
 8009c40:	8a49      	ldrh	r1, [r1, #18]
 8009c42:	fb01 f303 	mul.w	r3, r1, r3
 8009c46:	4413      	add	r3, r2
 8009c48:	60bb      	str	r3, [r7, #8]
				Paint.Image[Addr] = Color;
 8009c4a:	4b47      	ldr	r3, [pc, #284]	@ (8009d68 <Paint_Clear+0x14c>)
 8009c4c:	681a      	ldr	r2, [r3, #0]
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	4413      	add	r3, r2
 8009c52:	88fa      	ldrh	r2, [r7, #6]
 8009c54:	b2d2      	uxtb	r2, r2
 8009c56:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8009c58:	8bbb      	ldrh	r3, [r7, #28]
 8009c5a:	3301      	adds	r3, #1
 8009c5c:	83bb      	strh	r3, [r7, #28]
 8009c5e:	4b42      	ldr	r3, [pc, #264]	@ (8009d68 <Paint_Clear+0x14c>)
 8009c60:	8a5b      	ldrh	r3, [r3, #18]
 8009c62:	8bba      	ldrh	r2, [r7, #28]
 8009c64:	429a      	cmp	r2, r3
 8009c66:	d3e8      	bcc.n	8009c3a <Paint_Clear+0x1e>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8009c68:	8bfb      	ldrh	r3, [r7, #30]
 8009c6a:	3301      	adds	r3, #1
 8009c6c:	83fb      	strh	r3, [r7, #30]
 8009c6e:	4b3e      	ldr	r3, [pc, #248]	@ (8009d68 <Paint_Clear+0x14c>)
 8009c70:	8a9b      	ldrh	r3, [r3, #20]
 8009c72:	8bfa      	ldrh	r2, [r7, #30]
 8009c74:	429a      	cmp	r2, r3
 8009c76:	d3dd      	bcc.n	8009c34 <Paint_Clear+0x18>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
				Paint.Image[Addr] = (Color<<4)|Color;
			}
		}		
	}
}
 8009c78:	e070      	b.n	8009d5c <Paint_Clear+0x140>
    }else if(Paint.Scale == 4) {
 8009c7a:	4b3b      	ldr	r3, [pc, #236]	@ (8009d68 <Paint_Clear+0x14c>)
 8009c7c:	8adb      	ldrh	r3, [r3, #22]
 8009c7e:	2b04      	cmp	r3, #4
 8009c80:	d138      	bne.n	8009cf4 <Paint_Clear+0xd8>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8009c82:	2300      	movs	r3, #0
 8009c84:	837b      	strh	r3, [r7, #26]
 8009c86:	e02f      	b.n	8009ce8 <Paint_Clear+0xcc>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 8009c88:	2300      	movs	r3, #0
 8009c8a:	833b      	strh	r3, [r7, #24]
 8009c8c:	e024      	b.n	8009cd8 <Paint_Clear+0xbc>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 8009c8e:	8b3a      	ldrh	r2, [r7, #24]
 8009c90:	8b7b      	ldrh	r3, [r7, #26]
 8009c92:	4935      	ldr	r1, [pc, #212]	@ (8009d68 <Paint_Clear+0x14c>)
 8009c94:	8a49      	ldrh	r1, [r1, #18]
 8009c96:	fb01 f303 	mul.w	r3, r1, r3
 8009c9a:	4413      	add	r3, r2
 8009c9c:	60fb      	str	r3, [r7, #12]
				Paint.Image[Addr] = (Color<<6)|(Color<<4)|(Color<<2)|Color;
 8009c9e:	88fb      	ldrh	r3, [r7, #6]
 8009ca0:	b25b      	sxtb	r3, r3
 8009ca2:	019b      	lsls	r3, r3, #6
 8009ca4:	b25a      	sxtb	r2, r3
 8009ca6:	88fb      	ldrh	r3, [r7, #6]
 8009ca8:	b25b      	sxtb	r3, r3
 8009caa:	011b      	lsls	r3, r3, #4
 8009cac:	b25b      	sxtb	r3, r3
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	b25a      	sxtb	r2, r3
 8009cb2:	88fb      	ldrh	r3, [r7, #6]
 8009cb4:	b25b      	sxtb	r3, r3
 8009cb6:	009b      	lsls	r3, r3, #2
 8009cb8:	b25b      	sxtb	r3, r3
 8009cba:	4313      	orrs	r3, r2
 8009cbc:	b25a      	sxtb	r2, r3
 8009cbe:	88fb      	ldrh	r3, [r7, #6]
 8009cc0:	b25b      	sxtb	r3, r3
 8009cc2:	4313      	orrs	r3, r2
 8009cc4:	b259      	sxtb	r1, r3
 8009cc6:	4b28      	ldr	r3, [pc, #160]	@ (8009d68 <Paint_Clear+0x14c>)
 8009cc8:	681a      	ldr	r2, [r3, #0]
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	4413      	add	r3, r2
 8009cce:	b2ca      	uxtb	r2, r1
 8009cd0:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 8009cd2:	8b3b      	ldrh	r3, [r7, #24]
 8009cd4:	3301      	adds	r3, #1
 8009cd6:	833b      	strh	r3, [r7, #24]
 8009cd8:	4b23      	ldr	r3, [pc, #140]	@ (8009d68 <Paint_Clear+0x14c>)
 8009cda:	8a5b      	ldrh	r3, [r3, #18]
 8009cdc:	8b3a      	ldrh	r2, [r7, #24]
 8009cde:	429a      	cmp	r2, r3
 8009ce0:	d3d5      	bcc.n	8009c8e <Paint_Clear+0x72>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8009ce2:	8b7b      	ldrh	r3, [r7, #26]
 8009ce4:	3301      	adds	r3, #1
 8009ce6:	837b      	strh	r3, [r7, #26]
 8009ce8:	4b1f      	ldr	r3, [pc, #124]	@ (8009d68 <Paint_Clear+0x14c>)
 8009cea:	8a9b      	ldrh	r3, [r3, #20]
 8009cec:	8b7a      	ldrh	r2, [r7, #26]
 8009cee:	429a      	cmp	r2, r3
 8009cf0:	d3ca      	bcc.n	8009c88 <Paint_Clear+0x6c>
}
 8009cf2:	e033      	b.n	8009d5c <Paint_Clear+0x140>
	}else if(Paint.Scale == 6 || Paint.Scale == 7) {
 8009cf4:	4b1c      	ldr	r3, [pc, #112]	@ (8009d68 <Paint_Clear+0x14c>)
 8009cf6:	8adb      	ldrh	r3, [r3, #22]
 8009cf8:	2b06      	cmp	r3, #6
 8009cfa:	d003      	beq.n	8009d04 <Paint_Clear+0xe8>
 8009cfc:	4b1a      	ldr	r3, [pc, #104]	@ (8009d68 <Paint_Clear+0x14c>)
 8009cfe:	8adb      	ldrh	r3, [r3, #22]
 8009d00:	2b07      	cmp	r3, #7
 8009d02:	d12b      	bne.n	8009d5c <Paint_Clear+0x140>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8009d04:	2300      	movs	r3, #0
 8009d06:	82fb      	strh	r3, [r7, #22]
 8009d08:	e023      	b.n	8009d52 <Paint_Clear+0x136>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	82bb      	strh	r3, [r7, #20]
 8009d0e:	e018      	b.n	8009d42 <Paint_Clear+0x126>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 8009d10:	8aba      	ldrh	r2, [r7, #20]
 8009d12:	8afb      	ldrh	r3, [r7, #22]
 8009d14:	4914      	ldr	r1, [pc, #80]	@ (8009d68 <Paint_Clear+0x14c>)
 8009d16:	8a49      	ldrh	r1, [r1, #18]
 8009d18:	fb01 f303 	mul.w	r3, r1, r3
 8009d1c:	4413      	add	r3, r2
 8009d1e:	613b      	str	r3, [r7, #16]
				Paint.Image[Addr] = (Color<<4)|Color;
 8009d20:	88fb      	ldrh	r3, [r7, #6]
 8009d22:	b25b      	sxtb	r3, r3
 8009d24:	011b      	lsls	r3, r3, #4
 8009d26:	b25a      	sxtb	r2, r3
 8009d28:	88fb      	ldrh	r3, [r7, #6]
 8009d2a:	b25b      	sxtb	r3, r3
 8009d2c:	4313      	orrs	r3, r2
 8009d2e:	b259      	sxtb	r1, r3
 8009d30:	4b0d      	ldr	r3, [pc, #52]	@ (8009d68 <Paint_Clear+0x14c>)
 8009d32:	681a      	ldr	r2, [r3, #0]
 8009d34:	693b      	ldr	r3, [r7, #16]
 8009d36:	4413      	add	r3, r2
 8009d38:	b2ca      	uxtb	r2, r1
 8009d3a:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 8009d3c:	8abb      	ldrh	r3, [r7, #20]
 8009d3e:	3301      	adds	r3, #1
 8009d40:	82bb      	strh	r3, [r7, #20]
 8009d42:	4b09      	ldr	r3, [pc, #36]	@ (8009d68 <Paint_Clear+0x14c>)
 8009d44:	8a5b      	ldrh	r3, [r3, #18]
 8009d46:	8aba      	ldrh	r2, [r7, #20]
 8009d48:	429a      	cmp	r2, r3
 8009d4a:	d3e1      	bcc.n	8009d10 <Paint_Clear+0xf4>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8009d4c:	8afb      	ldrh	r3, [r7, #22]
 8009d4e:	3301      	adds	r3, #1
 8009d50:	82fb      	strh	r3, [r7, #22]
 8009d52:	4b05      	ldr	r3, [pc, #20]	@ (8009d68 <Paint_Clear+0x14c>)
 8009d54:	8a9b      	ldrh	r3, [r3, #20]
 8009d56:	8afa      	ldrh	r2, [r7, #22]
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	d3d6      	bcc.n	8009d0a <Paint_Clear+0xee>
}
 8009d5c:	bf00      	nop
 8009d5e:	3724      	adds	r7, #36	@ 0x24
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bc80      	pop	{r7}
 8009d64:	4770      	bx	lr
 8009d66:	bf00      	nop
 8009d68:	20000558 	.word	0x20000558

08009d6c <Paint_ClearWindows>:
    Xend   : x end point
    Yend   : y end point
    Color  : Painted colors
******************************************************************************/
void Paint_ClearWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, UWORD Color)
{
 8009d6c:	b590      	push	{r4, r7, lr}
 8009d6e:	b085      	sub	sp, #20
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	4604      	mov	r4, r0
 8009d74:	4608      	mov	r0, r1
 8009d76:	4611      	mov	r1, r2
 8009d78:	461a      	mov	r2, r3
 8009d7a:	4623      	mov	r3, r4
 8009d7c:	80fb      	strh	r3, [r7, #6]
 8009d7e:	4603      	mov	r3, r0
 8009d80:	80bb      	strh	r3, [r7, #4]
 8009d82:	460b      	mov	r3, r1
 8009d84:	807b      	strh	r3, [r7, #2]
 8009d86:	4613      	mov	r3, r2
 8009d88:	803b      	strh	r3, [r7, #0]
    UWORD X, Y;
    for (Y = Ystart; Y < Yend; Y++) {
 8009d8a:	88bb      	ldrh	r3, [r7, #4]
 8009d8c:	81bb      	strh	r3, [r7, #12]
 8009d8e:	e012      	b.n	8009db6 <Paint_ClearWindows+0x4a>
        for (X = Xstart; X < Xend; X++) {//8 pixel =  1 byte
 8009d90:	88fb      	ldrh	r3, [r7, #6]
 8009d92:	81fb      	strh	r3, [r7, #14]
 8009d94:	e008      	b.n	8009da8 <Paint_ClearWindows+0x3c>
            Paint_SetPixel(X, Y, Color);
 8009d96:	8c3a      	ldrh	r2, [r7, #32]
 8009d98:	89b9      	ldrh	r1, [r7, #12]
 8009d9a:	89fb      	ldrh	r3, [r7, #14]
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	f7ff fdef 	bl	8009980 <Paint_SetPixel>
        for (X = Xstart; X < Xend; X++) {//8 pixel =  1 byte
 8009da2:	89fb      	ldrh	r3, [r7, #14]
 8009da4:	3301      	adds	r3, #1
 8009da6:	81fb      	strh	r3, [r7, #14]
 8009da8:	89fa      	ldrh	r2, [r7, #14]
 8009daa:	887b      	ldrh	r3, [r7, #2]
 8009dac:	429a      	cmp	r2, r3
 8009dae:	d3f2      	bcc.n	8009d96 <Paint_ClearWindows+0x2a>
    for (Y = Ystart; Y < Yend; Y++) {
 8009db0:	89bb      	ldrh	r3, [r7, #12]
 8009db2:	3301      	adds	r3, #1
 8009db4:	81bb      	strh	r3, [r7, #12]
 8009db6:	89ba      	ldrh	r2, [r7, #12]
 8009db8:	883b      	ldrh	r3, [r7, #0]
 8009dba:	429a      	cmp	r2, r3
 8009dbc:	d3e8      	bcc.n	8009d90 <Paint_ClearWindows+0x24>
        }
    }
}
 8009dbe:	bf00      	nop
 8009dc0:	bf00      	nop
 8009dc2:	3714      	adds	r7, #20
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd90      	pop	{r4, r7, pc}

08009dc8 <Paint_DrawPoint>:
    Dot_Pixel	: point size
    Dot_Style	: point Style
******************************************************************************/
void Paint_DrawPoint(UWORD Xpoint, UWORD Ypoint, UWORD Color,
                     DOT_PIXEL Dot_Pixel, DOT_STYLE Dot_Style)
{
 8009dc8:	b590      	push	{r4, r7, lr}
 8009dca:	b085      	sub	sp, #20
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	4604      	mov	r4, r0
 8009dd0:	4608      	mov	r0, r1
 8009dd2:	4611      	mov	r1, r2
 8009dd4:	461a      	mov	r2, r3
 8009dd6:	4623      	mov	r3, r4
 8009dd8:	80fb      	strh	r3, [r7, #6]
 8009dda:	4603      	mov	r3, r0
 8009ddc:	80bb      	strh	r3, [r7, #4]
 8009dde:	460b      	mov	r3, r1
 8009de0:	807b      	strh	r3, [r7, #2]
 8009de2:	4613      	mov	r3, r2
 8009de4:	707b      	strb	r3, [r7, #1]
    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8009de6:	4b4a      	ldr	r3, [pc, #296]	@ (8009f10 <Paint_DrawPoint+0x148>)
 8009de8:	889b      	ldrh	r3, [r3, #4]
 8009dea:	88fa      	ldrh	r2, [r7, #6]
 8009dec:	429a      	cmp	r2, r3
 8009dee:	d804      	bhi.n	8009dfa <Paint_DrawPoint+0x32>
 8009df0:	4b47      	ldr	r3, [pc, #284]	@ (8009f10 <Paint_DrawPoint+0x148>)
 8009df2:	88db      	ldrh	r3, [r3, #6]
 8009df4:	88ba      	ldrh	r2, [r7, #4]
 8009df6:	429a      	cmp	r2, r3
 8009df8:	d911      	bls.n	8009e1e <Paint_DrawPoint+0x56>
        Debug("Paint_DrawPoint Input exceeds the normal display range\r\n");
 8009dfa:	4846      	ldr	r0, [pc, #280]	@ (8009f14 <Paint_DrawPoint+0x14c>)
 8009dfc:	f000 fe6c 	bl	800aad8 <puts>
				printf("Xpoint = %d , Paint.Width = %d  \r\n ",Xpoint,Paint.Width);
 8009e00:	88fb      	ldrh	r3, [r7, #6]
 8009e02:	4a43      	ldr	r2, [pc, #268]	@ (8009f10 <Paint_DrawPoint+0x148>)
 8009e04:	8892      	ldrh	r2, [r2, #4]
 8009e06:	4619      	mov	r1, r3
 8009e08:	4843      	ldr	r0, [pc, #268]	@ (8009f18 <Paint_DrawPoint+0x150>)
 8009e0a:	f000 fdfd 	bl	800aa08 <iprintf>
				printf("Ypoint = %d , Paint.Height = %d  \r\n ",Ypoint,Paint.Height);
 8009e0e:	88bb      	ldrh	r3, [r7, #4]
 8009e10:	4a3f      	ldr	r2, [pc, #252]	@ (8009f10 <Paint_DrawPoint+0x148>)
 8009e12:	88d2      	ldrh	r2, [r2, #6]
 8009e14:	4619      	mov	r1, r3
 8009e16:	4841      	ldr	r0, [pc, #260]	@ (8009f1c <Paint_DrawPoint+0x154>)
 8009e18:	f000 fdf6 	bl	800aa08 <iprintf>
        return;
 8009e1c:	e074      	b.n	8009f08 <Paint_DrawPoint+0x140>
    }

    int16_t XDir_Num , YDir_Num;
    if (Dot_Style == DOT_FILL_AROUND) {
 8009e1e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009e22:	2b01      	cmp	r3, #1
 8009e24:	d144      	bne.n	8009eb0 <Paint_DrawPoint+0xe8>
        for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 8009e26:	2300      	movs	r3, #0
 8009e28:	81fb      	strh	r3, [r7, #14]
 8009e2a:	e039      	b.n	8009ea0 <Paint_DrawPoint+0xd8>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	81bb      	strh	r3, [r7, #12]
 8009e30:	e029      	b.n	8009e86 <Paint_DrawPoint+0xbe>
                if(Xpoint + XDir_Num - Dot_Pixel < 0 || Ypoint + YDir_Num - Dot_Pixel < 0)
 8009e32:	88fa      	ldrh	r2, [r7, #6]
 8009e34:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009e38:	441a      	add	r2, r3
 8009e3a:	787b      	ldrb	r3, [r7, #1]
 8009e3c:	1ad3      	subs	r3, r2, r3
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	db28      	blt.n	8009e94 <Paint_DrawPoint+0xcc>
 8009e42:	88ba      	ldrh	r2, [r7, #4]
 8009e44:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009e48:	441a      	add	r2, r3
 8009e4a:	787b      	ldrb	r3, [r7, #1]
 8009e4c:	1ad3      	subs	r3, r2, r3
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	db20      	blt.n	8009e94 <Paint_DrawPoint+0xcc>
                    break;
                // printf("x = %d, y = %d\r\n", Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel);
                Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 8009e52:	89fa      	ldrh	r2, [r7, #14]
 8009e54:	88fb      	ldrh	r3, [r7, #6]
 8009e56:	4413      	add	r3, r2
 8009e58:	b29a      	uxth	r2, r3
 8009e5a:	787b      	ldrb	r3, [r7, #1]
 8009e5c:	b29b      	uxth	r3, r3
 8009e5e:	1ad3      	subs	r3, r2, r3
 8009e60:	b298      	uxth	r0, r3
 8009e62:	89ba      	ldrh	r2, [r7, #12]
 8009e64:	88bb      	ldrh	r3, [r7, #4]
 8009e66:	4413      	add	r3, r2
 8009e68:	b29a      	uxth	r2, r3
 8009e6a:	787b      	ldrb	r3, [r7, #1]
 8009e6c:	b29b      	uxth	r3, r3
 8009e6e:	1ad3      	subs	r3, r2, r3
 8009e70:	b29b      	uxth	r3, r3
 8009e72:	887a      	ldrh	r2, [r7, #2]
 8009e74:	4619      	mov	r1, r3
 8009e76:	f7ff fd83 	bl	8009980 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 8009e7a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009e7e:	b29b      	uxth	r3, r3
 8009e80:	3301      	adds	r3, #1
 8009e82:	b29b      	uxth	r3, r3
 8009e84:	81bb      	strh	r3, [r7, #12]
 8009e86:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8009e8a:	787b      	ldrb	r3, [r7, #1]
 8009e8c:	005b      	lsls	r3, r3, #1
 8009e8e:	3b01      	subs	r3, #1
 8009e90:	429a      	cmp	r2, r3
 8009e92:	dbce      	blt.n	8009e32 <Paint_DrawPoint+0x6a>
        for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 8009e94:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009e98:	b29b      	uxth	r3, r3
 8009e9a:	3301      	adds	r3, #1
 8009e9c:	b29b      	uxth	r3, r3
 8009e9e:	81fb      	strh	r3, [r7, #14]
 8009ea0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8009ea4:	787b      	ldrb	r3, [r7, #1]
 8009ea6:	005b      	lsls	r3, r3, #1
 8009ea8:	3b01      	subs	r3, #1
 8009eaa:	429a      	cmp	r2, r3
 8009eac:	dbbe      	blt.n	8009e2c <Paint_DrawPoint+0x64>
 8009eae:	e02b      	b.n	8009f08 <Paint_DrawPoint+0x140>
            }
        }
    } else {
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	81fb      	strh	r3, [r7, #14]
 8009eb4:	e023      	b.n	8009efe <Paint_DrawPoint+0x136>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	81bb      	strh	r3, [r7, #12]
 8009eba:	e015      	b.n	8009ee8 <Paint_DrawPoint+0x120>
                Paint_SetPixel(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color);
 8009ebc:	89fa      	ldrh	r2, [r7, #14]
 8009ebe:	88fb      	ldrh	r3, [r7, #6]
 8009ec0:	4413      	add	r3, r2
 8009ec2:	b29b      	uxth	r3, r3
 8009ec4:	3b01      	subs	r3, #1
 8009ec6:	b298      	uxth	r0, r3
 8009ec8:	89ba      	ldrh	r2, [r7, #12]
 8009eca:	88bb      	ldrh	r3, [r7, #4]
 8009ecc:	4413      	add	r3, r2
 8009ece:	b29b      	uxth	r3, r3
 8009ed0:	3b01      	subs	r3, #1
 8009ed2:	b29b      	uxth	r3, r3
 8009ed4:	887a      	ldrh	r2, [r7, #2]
 8009ed6:	4619      	mov	r1, r3
 8009ed8:	f7ff fd52 	bl	8009980 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 8009edc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009ee0:	b29b      	uxth	r3, r3
 8009ee2:	3301      	adds	r3, #1
 8009ee4:	b29b      	uxth	r3, r3
 8009ee6:	81bb      	strh	r3, [r7, #12]
 8009ee8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8009eec:	787b      	ldrb	r3, [r7, #1]
 8009eee:	429a      	cmp	r2, r3
 8009ef0:	dbe4      	blt.n	8009ebc <Paint_DrawPoint+0xf4>
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 8009ef2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009ef6:	b29b      	uxth	r3, r3
 8009ef8:	3301      	adds	r3, #1
 8009efa:	b29b      	uxth	r3, r3
 8009efc:	81fb      	strh	r3, [r7, #14]
 8009efe:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8009f02:	787b      	ldrb	r3, [r7, #1]
 8009f04:	429a      	cmp	r2, r3
 8009f06:	dbd6      	blt.n	8009eb6 <Paint_DrawPoint+0xee>
            }
        }
    }
}
 8009f08:	3714      	adds	r7, #20
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd90      	pop	{r4, r7, pc}
 8009f0e:	bf00      	nop
 8009f10:	20000558 	.word	0x20000558
 8009f14:	0800b924 	.word	0x0800b924
 8009f18:	0800b964 	.word	0x0800b964
 8009f1c:	0800b988 	.word	0x0800b988

08009f20 <Paint_DrawLine>:
    Line_width : Line width
    Line_Style: Solid and dotted lines
******************************************************************************/
void Paint_DrawLine(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend,
                    UWORD Color, DOT_PIXEL Line_width, LINE_STYLE Line_Style)
{
 8009f20:	b590      	push	{r4, r7, lr}
 8009f22:	b08d      	sub	sp, #52	@ 0x34
 8009f24:	af02      	add	r7, sp, #8
 8009f26:	4604      	mov	r4, r0
 8009f28:	4608      	mov	r0, r1
 8009f2a:	4611      	mov	r1, r2
 8009f2c:	461a      	mov	r2, r3
 8009f2e:	4623      	mov	r3, r4
 8009f30:	80fb      	strh	r3, [r7, #6]
 8009f32:	4603      	mov	r3, r0
 8009f34:	80bb      	strh	r3, [r7, #4]
 8009f36:	460b      	mov	r3, r1
 8009f38:	807b      	strh	r3, [r7, #2]
 8009f3a:	4613      	mov	r3, r2
 8009f3c:	803b      	strh	r3, [r7, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 8009f3e:	4b4b      	ldr	r3, [pc, #300]	@ (800a06c <Paint_DrawLine+0x14c>)
 8009f40:	889b      	ldrh	r3, [r3, #4]
 8009f42:	88fa      	ldrh	r2, [r7, #6]
 8009f44:	429a      	cmp	r2, r3
 8009f46:	d80e      	bhi.n	8009f66 <Paint_DrawLine+0x46>
 8009f48:	4b48      	ldr	r3, [pc, #288]	@ (800a06c <Paint_DrawLine+0x14c>)
 8009f4a:	88db      	ldrh	r3, [r3, #6]
 8009f4c:	88ba      	ldrh	r2, [r7, #4]
 8009f4e:	429a      	cmp	r2, r3
 8009f50:	d809      	bhi.n	8009f66 <Paint_DrawLine+0x46>
        Xend > Paint.Width || Yend > Paint.Height) {
 8009f52:	4b46      	ldr	r3, [pc, #280]	@ (800a06c <Paint_DrawLine+0x14c>)
 8009f54:	889b      	ldrh	r3, [r3, #4]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 8009f56:	887a      	ldrh	r2, [r7, #2]
 8009f58:	429a      	cmp	r2, r3
 8009f5a:	d804      	bhi.n	8009f66 <Paint_DrawLine+0x46>
        Xend > Paint.Width || Yend > Paint.Height) {
 8009f5c:	4b43      	ldr	r3, [pc, #268]	@ (800a06c <Paint_DrawLine+0x14c>)
 8009f5e:	88db      	ldrh	r3, [r3, #6]
 8009f60:	883a      	ldrh	r2, [r7, #0]
 8009f62:	429a      	cmp	r2, r3
 8009f64:	d903      	bls.n	8009f6e <Paint_DrawLine+0x4e>
        Debug("Paint_DrawLine Input exceeds the normal display range\r\n");
 8009f66:	4842      	ldr	r0, [pc, #264]	@ (800a070 <Paint_DrawLine+0x150>)
 8009f68:	f000 fdb6 	bl	800aad8 <puts>
        return;
 8009f6c:	e07a      	b.n	800a064 <Paint_DrawLine+0x144>
    }

    UWORD Xpoint = Xstart;
 8009f6e:	88fb      	ldrh	r3, [r7, #6]
 8009f70:	84fb      	strh	r3, [r7, #38]	@ 0x26
    UWORD Ypoint = Ystart;
 8009f72:	88bb      	ldrh	r3, [r7, #4]
 8009f74:	84bb      	strh	r3, [r7, #36]	@ 0x24
    int dx = (int)Xend - (int)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 8009f76:	887a      	ldrh	r2, [r7, #2]
 8009f78:	88fb      	ldrh	r3, [r7, #6]
 8009f7a:	1ad3      	subs	r3, r2, r3
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	bfb8      	it	lt
 8009f80:	425b      	neglt	r3, r3
 8009f82:	61bb      	str	r3, [r7, #24]
    int dy = (int)Yend - (int)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 8009f84:	883a      	ldrh	r2, [r7, #0]
 8009f86:	88bb      	ldrh	r3, [r7, #4]
 8009f88:	1ad3      	subs	r3, r2, r3
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	bfb8      	it	lt
 8009f8e:	425b      	neglt	r3, r3
 8009f90:	425b      	negs	r3, r3
 8009f92:	617b      	str	r3, [r7, #20]

    // Increment direction, 1 is positive, -1 is counter;
    int XAddway = Xstart < Xend ? 1 : -1;
 8009f94:	88fa      	ldrh	r2, [r7, #6]
 8009f96:	887b      	ldrh	r3, [r7, #2]
 8009f98:	429a      	cmp	r2, r3
 8009f9a:	d201      	bcs.n	8009fa0 <Paint_DrawLine+0x80>
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	e001      	b.n	8009fa4 <Paint_DrawLine+0x84>
 8009fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8009fa4:	613b      	str	r3, [r7, #16]
    int YAddway = Ystart < Yend ? 1 : -1;
 8009fa6:	88ba      	ldrh	r2, [r7, #4]
 8009fa8:	883b      	ldrh	r3, [r7, #0]
 8009faa:	429a      	cmp	r2, r3
 8009fac:	d201      	bcs.n	8009fb2 <Paint_DrawLine+0x92>
 8009fae:	2301      	movs	r3, #1
 8009fb0:	e001      	b.n	8009fb6 <Paint_DrawLine+0x96>
 8009fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8009fb6:	60fb      	str	r3, [r7, #12]

    //Cumulative error
    int Esp = dx + dy;
 8009fb8:	69ba      	ldr	r2, [r7, #24]
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	4413      	add	r3, r2
 8009fbe:	623b      	str	r3, [r7, #32]
    char Dotted_Len = 0;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	77fb      	strb	r3, [r7, #31]

    for (;;) {
        Dotted_Len++;
 8009fc4:	7ffb      	ldrb	r3, [r7, #31]
 8009fc6:	3301      	adds	r3, #1
 8009fc8:	77fb      	strb	r3, [r7, #31]
        //Painted dotted line, 2 point is really virtual
        if (Line_Style == LINE_STYLE_DOTTED && Dotted_Len % 3 == 0) {
 8009fca:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8009fce:	2b01      	cmp	r3, #1
 8009fd0:	d117      	bne.n	800a002 <Paint_DrawLine+0xe2>
 8009fd2:	7ffa      	ldrb	r2, [r7, #31]
 8009fd4:	4b27      	ldr	r3, [pc, #156]	@ (800a074 <Paint_DrawLine+0x154>)
 8009fd6:	fba3 1302 	umull	r1, r3, r3, r2
 8009fda:	0859      	lsrs	r1, r3, #1
 8009fdc:	460b      	mov	r3, r1
 8009fde:	005b      	lsls	r3, r3, #1
 8009fe0:	440b      	add	r3, r1
 8009fe2:	1ad3      	subs	r3, r2, r3
 8009fe4:	b2db      	uxtb	r3, r3
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d10b      	bne.n	800a002 <Paint_DrawLine+0xe2>
            //Debug("LINE_DOTTED\r\n");
            Paint_DrawPoint(Xpoint, Ypoint, IMAGE_BACKGROUND, Line_width, DOT_STYLE_DFT);
 8009fea:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8009fee:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8009ff0:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 8009ff2:	2201      	movs	r2, #1
 8009ff4:	9200      	str	r2, [sp, #0]
 8009ff6:	22ff      	movs	r2, #255	@ 0xff
 8009ff8:	f7ff fee6 	bl	8009dc8 <Paint_DrawPoint>
            Dotted_Len = 0;
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	77fb      	strb	r3, [r7, #31]
 800a000:	e008      	b.n	800a014 <Paint_DrawLine+0xf4>
        } else {
            Paint_DrawPoint(Xpoint, Ypoint, Color, Line_width, DOT_STYLE_DFT);
 800a002:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800a006:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 800a008:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 800a00a:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 800a00c:	2401      	movs	r4, #1
 800a00e:	9400      	str	r4, [sp, #0]
 800a010:	f7ff feda 	bl	8009dc8 <Paint_DrawPoint>
        }
        if (2 * Esp >= dy) {
 800a014:	6a3b      	ldr	r3, [r7, #32]
 800a016:	005b      	lsls	r3, r3, #1
 800a018:	697a      	ldr	r2, [r7, #20]
 800a01a:	429a      	cmp	r2, r3
 800a01c:	dc0c      	bgt.n	800a038 <Paint_DrawLine+0x118>
            if (Xpoint == Xend)
 800a01e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800a020:	887b      	ldrh	r3, [r7, #2]
 800a022:	429a      	cmp	r2, r3
 800a024:	d01b      	beq.n	800a05e <Paint_DrawLine+0x13e>
                break;
            Esp += dy;
 800a026:	6a3a      	ldr	r2, [r7, #32]
 800a028:	697b      	ldr	r3, [r7, #20]
 800a02a:	4413      	add	r3, r2
 800a02c:	623b      	str	r3, [r7, #32]
            Xpoint += XAddway;
 800a02e:	693b      	ldr	r3, [r7, #16]
 800a030:	b29a      	uxth	r2, r3
 800a032:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a034:	4413      	add	r3, r2
 800a036:	84fb      	strh	r3, [r7, #38]	@ 0x26
        }
        if (2 * Esp <= dx) {
 800a038:	6a3b      	ldr	r3, [r7, #32]
 800a03a:	005b      	lsls	r3, r3, #1
 800a03c:	69ba      	ldr	r2, [r7, #24]
 800a03e:	429a      	cmp	r2, r3
 800a040:	dbc0      	blt.n	8009fc4 <Paint_DrawLine+0xa4>
            if (Ypoint == Yend)
 800a042:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a044:	883b      	ldrh	r3, [r7, #0]
 800a046:	429a      	cmp	r2, r3
 800a048:	d00b      	beq.n	800a062 <Paint_DrawLine+0x142>
                break;
            Esp += dx;
 800a04a:	6a3a      	ldr	r2, [r7, #32]
 800a04c:	69bb      	ldr	r3, [r7, #24]
 800a04e:	4413      	add	r3, r2
 800a050:	623b      	str	r3, [r7, #32]
            Ypoint += YAddway;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	b29a      	uxth	r2, r3
 800a056:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a058:	4413      	add	r3, r2
 800a05a:	84bb      	strh	r3, [r7, #36]	@ 0x24
        Dotted_Len++;
 800a05c:	e7b2      	b.n	8009fc4 <Paint_DrawLine+0xa4>
                break;
 800a05e:	bf00      	nop
 800a060:	e000      	b.n	800a064 <Paint_DrawLine+0x144>
                break;
 800a062:	bf00      	nop
        }
    }
}
 800a064:	372c      	adds	r7, #44	@ 0x2c
 800a066:	46bd      	mov	sp, r7
 800a068:	bd90      	pop	{r4, r7, pc}
 800a06a:	bf00      	nop
 800a06c:	20000558 	.word	0x20000558
 800a070:	0800b9b0 	.word	0x0800b9b0
 800a074:	aaaaaaab 	.word	0xaaaaaaab

0800a078 <Paint_DrawRectangle>:
    Line_width: Line width
    Draw_Fill : Whether to fill the inside of the rectangle
******************************************************************************/
void Paint_DrawRectangle(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend,
                         UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Draw_Fill)
{
 800a078:	b590      	push	{r4, r7, lr}
 800a07a:	b089      	sub	sp, #36	@ 0x24
 800a07c:	af04      	add	r7, sp, #16
 800a07e:	4604      	mov	r4, r0
 800a080:	4608      	mov	r0, r1
 800a082:	4611      	mov	r1, r2
 800a084:	461a      	mov	r2, r3
 800a086:	4623      	mov	r3, r4
 800a088:	80fb      	strh	r3, [r7, #6]
 800a08a:	4603      	mov	r3, r0
 800a08c:	80bb      	strh	r3, [r7, #4]
 800a08e:	460b      	mov	r3, r1
 800a090:	807b      	strh	r3, [r7, #2]
 800a092:	4613      	mov	r3, r2
 800a094:	803b      	strh	r3, [r7, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800a096:	4b38      	ldr	r3, [pc, #224]	@ (800a178 <Paint_DrawRectangle+0x100>)
 800a098:	889b      	ldrh	r3, [r3, #4]
 800a09a:	88fa      	ldrh	r2, [r7, #6]
 800a09c:	429a      	cmp	r2, r3
 800a09e:	d80e      	bhi.n	800a0be <Paint_DrawRectangle+0x46>
 800a0a0:	4b35      	ldr	r3, [pc, #212]	@ (800a178 <Paint_DrawRectangle+0x100>)
 800a0a2:	88db      	ldrh	r3, [r3, #6]
 800a0a4:	88ba      	ldrh	r2, [r7, #4]
 800a0a6:	429a      	cmp	r2, r3
 800a0a8:	d809      	bhi.n	800a0be <Paint_DrawRectangle+0x46>
        Xend > Paint.Width || Yend > Paint.Height) {
 800a0aa:	4b33      	ldr	r3, [pc, #204]	@ (800a178 <Paint_DrawRectangle+0x100>)
 800a0ac:	889b      	ldrh	r3, [r3, #4]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800a0ae:	887a      	ldrh	r2, [r7, #2]
 800a0b0:	429a      	cmp	r2, r3
 800a0b2:	d804      	bhi.n	800a0be <Paint_DrawRectangle+0x46>
        Xend > Paint.Width || Yend > Paint.Height) {
 800a0b4:	4b30      	ldr	r3, [pc, #192]	@ (800a178 <Paint_DrawRectangle+0x100>)
 800a0b6:	88db      	ldrh	r3, [r3, #6]
 800a0b8:	883a      	ldrh	r2, [r7, #0]
 800a0ba:	429a      	cmp	r2, r3
 800a0bc:	d903      	bls.n	800a0c6 <Paint_DrawRectangle+0x4e>
        Debug("Input exceeds the normal display range\r\n");
 800a0be:	482f      	ldr	r0, [pc, #188]	@ (800a17c <Paint_DrawRectangle+0x104>)
 800a0c0:	f000 fd0a 	bl	800aad8 <puts>
        return;
 800a0c4:	e054      	b.n	800a170 <Paint_DrawRectangle+0xf8>
    }

    if (Draw_Fill) {
 800a0c6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d018      	beq.n	800a100 <Paint_DrawRectangle+0x88>
        UWORD Ypoint;
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
 800a0ce:	88bb      	ldrh	r3, [r7, #4]
 800a0d0:	81fb      	strh	r3, [r7, #14]
 800a0d2:	e010      	b.n	800a0f6 <Paint_DrawRectangle+0x7e>
            Paint_DrawLine(Xstart, Ypoint, Xend, Ypoint, Color , Line_width, LINE_STYLE_SOLID);
 800a0d4:	89fc      	ldrh	r4, [r7, #14]
 800a0d6:	887a      	ldrh	r2, [r7, #2]
 800a0d8:	89f9      	ldrh	r1, [r7, #14]
 800a0da:	88f8      	ldrh	r0, [r7, #6]
 800a0dc:	2300      	movs	r3, #0
 800a0de:	9302      	str	r3, [sp, #8]
 800a0e0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a0e4:	9301      	str	r3, [sp, #4]
 800a0e6:	8c3b      	ldrh	r3, [r7, #32]
 800a0e8:	9300      	str	r3, [sp, #0]
 800a0ea:	4623      	mov	r3, r4
 800a0ec:	f7ff ff18 	bl	8009f20 <Paint_DrawLine>
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
 800a0f0:	89fb      	ldrh	r3, [r7, #14]
 800a0f2:	3301      	adds	r3, #1
 800a0f4:	81fb      	strh	r3, [r7, #14]
 800a0f6:	89fa      	ldrh	r2, [r7, #14]
 800a0f8:	883b      	ldrh	r3, [r7, #0]
 800a0fa:	429a      	cmp	r2, r3
 800a0fc:	d3ea      	bcc.n	800a0d4 <Paint_DrawRectangle+0x5c>
 800a0fe:	e037      	b.n	800a170 <Paint_DrawRectangle+0xf8>
        }
    } else {
        Paint_DrawLine(Xstart, Ystart, Xend, Ystart, Color, Line_width, LINE_STYLE_SOLID);
 800a100:	88bc      	ldrh	r4, [r7, #4]
 800a102:	887a      	ldrh	r2, [r7, #2]
 800a104:	88b9      	ldrh	r1, [r7, #4]
 800a106:	88f8      	ldrh	r0, [r7, #6]
 800a108:	2300      	movs	r3, #0
 800a10a:	9302      	str	r3, [sp, #8]
 800a10c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a110:	9301      	str	r3, [sp, #4]
 800a112:	8c3b      	ldrh	r3, [r7, #32]
 800a114:	9300      	str	r3, [sp, #0]
 800a116:	4623      	mov	r3, r4
 800a118:	f7ff ff02 	bl	8009f20 <Paint_DrawLine>
        Paint_DrawLine(Xstart, Ystart, Xstart, Yend, Color, Line_width, LINE_STYLE_SOLID);
 800a11c:	883c      	ldrh	r4, [r7, #0]
 800a11e:	88fa      	ldrh	r2, [r7, #6]
 800a120:	88b9      	ldrh	r1, [r7, #4]
 800a122:	88f8      	ldrh	r0, [r7, #6]
 800a124:	2300      	movs	r3, #0
 800a126:	9302      	str	r3, [sp, #8]
 800a128:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a12c:	9301      	str	r3, [sp, #4]
 800a12e:	8c3b      	ldrh	r3, [r7, #32]
 800a130:	9300      	str	r3, [sp, #0]
 800a132:	4623      	mov	r3, r4
 800a134:	f7ff fef4 	bl	8009f20 <Paint_DrawLine>
        Paint_DrawLine(Xend, Yend, Xend, Ystart, Color, Line_width, LINE_STYLE_SOLID);
 800a138:	88bc      	ldrh	r4, [r7, #4]
 800a13a:	887a      	ldrh	r2, [r7, #2]
 800a13c:	8839      	ldrh	r1, [r7, #0]
 800a13e:	8878      	ldrh	r0, [r7, #2]
 800a140:	2300      	movs	r3, #0
 800a142:	9302      	str	r3, [sp, #8]
 800a144:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a148:	9301      	str	r3, [sp, #4]
 800a14a:	8c3b      	ldrh	r3, [r7, #32]
 800a14c:	9300      	str	r3, [sp, #0]
 800a14e:	4623      	mov	r3, r4
 800a150:	f7ff fee6 	bl	8009f20 <Paint_DrawLine>
        Paint_DrawLine(Xend, Yend, Xstart, Yend, Color, Line_width, LINE_STYLE_SOLID);
 800a154:	883c      	ldrh	r4, [r7, #0]
 800a156:	88fa      	ldrh	r2, [r7, #6]
 800a158:	8839      	ldrh	r1, [r7, #0]
 800a15a:	8878      	ldrh	r0, [r7, #2]
 800a15c:	2300      	movs	r3, #0
 800a15e:	9302      	str	r3, [sp, #8]
 800a160:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a164:	9301      	str	r3, [sp, #4]
 800a166:	8c3b      	ldrh	r3, [r7, #32]
 800a168:	9300      	str	r3, [sp, #0]
 800a16a:	4623      	mov	r3, r4
 800a16c:	f7ff fed8 	bl	8009f20 <Paint_DrawLine>
    }
}
 800a170:	3714      	adds	r7, #20
 800a172:	46bd      	mov	sp, r7
 800a174:	bd90      	pop	{r4, r7, pc}
 800a176:	bf00      	nop
 800a178:	20000558 	.word	0x20000558
 800a17c:	0800b9f0 	.word	0x0800b9f0

0800a180 <Paint_DrawChar>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b088      	sub	sp, #32
 800a184:	af00      	add	r7, sp, #0
 800a186:	607b      	str	r3, [r7, #4]
 800a188:	4603      	mov	r3, r0
 800a18a:	81fb      	strh	r3, [r7, #14]
 800a18c:	460b      	mov	r3, r1
 800a18e:	81bb      	strh	r3, [r7, #12]
 800a190:	4613      	mov	r3, r2
 800a192:	72fb      	strb	r3, [r7, #11]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 800a194:	4b4c      	ldr	r3, [pc, #304]	@ (800a2c8 <Paint_DrawChar+0x148>)
 800a196:	889b      	ldrh	r3, [r3, #4]
 800a198:	89fa      	ldrh	r2, [r7, #14]
 800a19a:	429a      	cmp	r2, r3
 800a19c:	d804      	bhi.n	800a1a8 <Paint_DrawChar+0x28>
 800a19e:	4b4a      	ldr	r3, [pc, #296]	@ (800a2c8 <Paint_DrawChar+0x148>)
 800a1a0:	88db      	ldrh	r3, [r3, #6]
 800a1a2:	89ba      	ldrh	r2, [r7, #12]
 800a1a4:	429a      	cmp	r2, r3
 800a1a6:	d903      	bls.n	800a1b0 <Paint_DrawChar+0x30>
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 800a1a8:	4848      	ldr	r0, [pc, #288]	@ (800a2cc <Paint_DrawChar+0x14c>)
 800a1aa:	f000 fc95 	bl	800aad8 <puts>
        return;
 800a1ae:	e087      	b.n	800a2c0 <Paint_DrawChar+0x140>
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 800a1b0:	7afb      	ldrb	r3, [r7, #11]
 800a1b2:	3b20      	subs	r3, #32
 800a1b4:	687a      	ldr	r2, [r7, #4]
 800a1b6:	88d2      	ldrh	r2, [r2, #6]
 800a1b8:	fb02 f303 	mul.w	r3, r2, r3
 800a1bc:	687a      	ldr	r2, [r7, #4]
 800a1be:	8892      	ldrh	r2, [r2, #4]
 800a1c0:	08d2      	lsrs	r2, r2, #3
 800a1c2:	b292      	uxth	r2, r2
 800a1c4:	4611      	mov	r1, r2
 800a1c6:	687a      	ldr	r2, [r7, #4]
 800a1c8:	8892      	ldrh	r2, [r2, #4]
 800a1ca:	f002 0207 	and.w	r2, r2, #7
 800a1ce:	b292      	uxth	r2, r2
 800a1d0:	2a00      	cmp	r2, #0
 800a1d2:	bf14      	ite	ne
 800a1d4:	2201      	movne	r2, #1
 800a1d6:	2200      	moveq	r2, #0
 800a1d8:	b2d2      	uxtb	r2, r2
 800a1da:	440a      	add	r2, r1
 800a1dc:	fb02 f303 	mul.w	r3, r2, r3
 800a1e0:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681a      	ldr	r2, [r3, #0]
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	4413      	add	r3, r2
 800a1ea:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	83fb      	strh	r3, [r7, #30]
 800a1f0:	e061      	b.n	800a2b6 <Paint_DrawChar+0x136>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	83bb      	strh	r3, [r7, #28]
 800a1f6:	e04c      	b.n	800a292 <Paint_DrawChar+0x112>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 800a1f8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800a1fa:	2bff      	cmp	r3, #255	@ 0xff
 800a1fc:	d118      	bne.n	800a230 <Paint_DrawChar+0xb0>
                if (*ptr & (0x80 >> (Column % 8)))
 800a1fe:	69bb      	ldr	r3, [r7, #24]
 800a200:	781b      	ldrb	r3, [r3, #0]
 800a202:	4619      	mov	r1, r3
 800a204:	8bbb      	ldrh	r3, [r7, #28]
 800a206:	f003 0307 	and.w	r3, r3, #7
 800a20a:	2280      	movs	r2, #128	@ 0x80
 800a20c:	fa42 f303 	asr.w	r3, r2, r3
 800a210:	400b      	ands	r3, r1
 800a212:	2b00      	cmp	r3, #0
 800a214:	d031      	beq.n	800a27a <Paint_DrawChar+0xfa>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 800a216:	89fa      	ldrh	r2, [r7, #14]
 800a218:	8bbb      	ldrh	r3, [r7, #28]
 800a21a:	4413      	add	r3, r2
 800a21c:	b298      	uxth	r0, r3
 800a21e:	89ba      	ldrh	r2, [r7, #12]
 800a220:	8bfb      	ldrh	r3, [r7, #30]
 800a222:	4413      	add	r3, r2
 800a224:	b29b      	uxth	r3, r3
 800a226:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800a228:	4619      	mov	r1, r3
 800a22a:	f7ff fba9 	bl	8009980 <Paint_SetPixel>
 800a22e:	e024      	b.n	800a27a <Paint_DrawChar+0xfa>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 800a230:	69bb      	ldr	r3, [r7, #24]
 800a232:	781b      	ldrb	r3, [r3, #0]
 800a234:	4619      	mov	r1, r3
 800a236:	8bbb      	ldrh	r3, [r7, #28]
 800a238:	f003 0307 	and.w	r3, r3, #7
 800a23c:	2280      	movs	r2, #128	@ 0x80
 800a23e:	fa42 f303 	asr.w	r3, r2, r3
 800a242:	400b      	ands	r3, r1
 800a244:	2b00      	cmp	r3, #0
 800a246:	d00c      	beq.n	800a262 <Paint_DrawChar+0xe2>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 800a248:	89fa      	ldrh	r2, [r7, #14]
 800a24a:	8bbb      	ldrh	r3, [r7, #28]
 800a24c:	4413      	add	r3, r2
 800a24e:	b298      	uxth	r0, r3
 800a250:	89ba      	ldrh	r2, [r7, #12]
 800a252:	8bfb      	ldrh	r3, [r7, #30]
 800a254:	4413      	add	r3, r2
 800a256:	b29b      	uxth	r3, r3
 800a258:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800a25a:	4619      	mov	r1, r3
 800a25c:	f7ff fb90 	bl	8009980 <Paint_SetPixel>
 800a260:	e00b      	b.n	800a27a <Paint_DrawChar+0xfa>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 800a262:	89fa      	ldrh	r2, [r7, #14]
 800a264:	8bbb      	ldrh	r3, [r7, #28]
 800a266:	4413      	add	r3, r2
 800a268:	b298      	uxth	r0, r3
 800a26a:	89ba      	ldrh	r2, [r7, #12]
 800a26c:	8bfb      	ldrh	r3, [r7, #30]
 800a26e:	4413      	add	r3, r2
 800a270:	b29b      	uxth	r3, r3
 800a272:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800a274:	4619      	mov	r1, r3
 800a276:	f7ff fb83 	bl	8009980 <Paint_SetPixel>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 800a27a:	8bbb      	ldrh	r3, [r7, #28]
 800a27c:	f003 0307 	and.w	r3, r3, #7
 800a280:	b29b      	uxth	r3, r3
 800a282:	2b07      	cmp	r3, #7
 800a284:	d102      	bne.n	800a28c <Paint_DrawChar+0x10c>
                ptr++;
 800a286:	69bb      	ldr	r3, [r7, #24]
 800a288:	3301      	adds	r3, #1
 800a28a:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 800a28c:	8bbb      	ldrh	r3, [r7, #28]
 800a28e:	3301      	adds	r3, #1
 800a290:	83bb      	strh	r3, [r7, #28]
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	889b      	ldrh	r3, [r3, #4]
 800a296:	8bba      	ldrh	r2, [r7, #28]
 800a298:	429a      	cmp	r2, r3
 800a29a:	d3ad      	bcc.n	800a1f8 <Paint_DrawChar+0x78>
        }// Write a line
        if (Font->Width % 8 != 0)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	889b      	ldrh	r3, [r3, #4]
 800a2a0:	f003 0307 	and.w	r3, r3, #7
 800a2a4:	b29b      	uxth	r3, r3
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d002      	beq.n	800a2b0 <Paint_DrawChar+0x130>
            ptr++;
 800a2aa:	69bb      	ldr	r3, [r7, #24]
 800a2ac:	3301      	adds	r3, #1
 800a2ae:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 800a2b0:	8bfb      	ldrh	r3, [r7, #30]
 800a2b2:	3301      	adds	r3, #1
 800a2b4:	83fb      	strh	r3, [r7, #30]
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	88db      	ldrh	r3, [r3, #6]
 800a2ba:	8bfa      	ldrh	r2, [r7, #30]
 800a2bc:	429a      	cmp	r2, r3
 800a2be:	d398      	bcc.n	800a1f2 <Paint_DrawChar+0x72>
    }// Write all
}
 800a2c0:	3720      	adds	r7, #32
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}
 800a2c6:	bf00      	nop
 800a2c8:	20000558 	.word	0x20000558
 800a2cc:	0800ba60 	.word	0x0800ba60

0800a2d0 <Paint_DrawString_EN>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b088      	sub	sp, #32
 800a2d4:	af02      	add	r7, sp, #8
 800a2d6:	60ba      	str	r2, [r7, #8]
 800a2d8:	607b      	str	r3, [r7, #4]
 800a2da:	4603      	mov	r3, r0
 800a2dc:	81fb      	strh	r3, [r7, #14]
 800a2de:	460b      	mov	r3, r1
 800a2e0:	81bb      	strh	r3, [r7, #12]
    UWORD Xpoint = Xstart;
 800a2e2:	89fb      	ldrh	r3, [r7, #14]
 800a2e4:	82fb      	strh	r3, [r7, #22]
    UWORD Ypoint = Ystart;
 800a2e6:	89bb      	ldrh	r3, [r7, #12]
 800a2e8:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 800a2ea:	4b21      	ldr	r3, [pc, #132]	@ (800a370 <Paint_DrawString_EN+0xa0>)
 800a2ec:	889b      	ldrh	r3, [r3, #4]
 800a2ee:	89fa      	ldrh	r2, [r7, #14]
 800a2f0:	429a      	cmp	r2, r3
 800a2f2:	d804      	bhi.n	800a2fe <Paint_DrawString_EN+0x2e>
 800a2f4:	4b1e      	ldr	r3, [pc, #120]	@ (800a370 <Paint_DrawString_EN+0xa0>)
 800a2f6:	88db      	ldrh	r3, [r3, #6]
 800a2f8:	89ba      	ldrh	r2, [r7, #12]
 800a2fa:	429a      	cmp	r2, r3
 800a2fc:	d931      	bls.n	800a362 <Paint_DrawString_EN+0x92>
        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 800a2fe:	481d      	ldr	r0, [pc, #116]	@ (800a374 <Paint_DrawString_EN+0xa4>)
 800a300:	f000 fbea 	bl	800aad8 <puts>
        return;
 800a304:	e031      	b.n	800a36a <Paint_DrawString_EN+0x9a>
    }

    while (* pString != '\0') {
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 800a306:	8afb      	ldrh	r3, [r7, #22]
 800a308:	687a      	ldr	r2, [r7, #4]
 800a30a:	8892      	ldrh	r2, [r2, #4]
 800a30c:	4413      	add	r3, r2
 800a30e:	4a18      	ldr	r2, [pc, #96]	@ (800a370 <Paint_DrawString_EN+0xa0>)
 800a310:	8892      	ldrh	r2, [r2, #4]
 800a312:	4293      	cmp	r3, r2
 800a314:	dd06      	ble.n	800a324 <Paint_DrawString_EN+0x54>
            Xpoint = Xstart;
 800a316:	89fb      	ldrh	r3, [r7, #14]
 800a318:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	88da      	ldrh	r2, [r3, #6]
 800a31e:	8abb      	ldrh	r3, [r7, #20]
 800a320:	4413      	add	r3, r2
 800a322:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 800a324:	8abb      	ldrh	r3, [r7, #20]
 800a326:	687a      	ldr	r2, [r7, #4]
 800a328:	88d2      	ldrh	r2, [r2, #6]
 800a32a:	4413      	add	r3, r2
 800a32c:	4a10      	ldr	r2, [pc, #64]	@ (800a370 <Paint_DrawString_EN+0xa0>)
 800a32e:	88d2      	ldrh	r2, [r2, #6]
 800a330:	4293      	cmp	r3, r2
 800a332:	dd03      	ble.n	800a33c <Paint_DrawString_EN+0x6c>
            Xpoint = Xstart;
 800a334:	89fb      	ldrh	r3, [r7, #14]
 800a336:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 800a338:	89bb      	ldrh	r3, [r7, #12]
 800a33a:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	781a      	ldrb	r2, [r3, #0]
 800a340:	8ab9      	ldrh	r1, [r7, #20]
 800a342:	8af8      	ldrh	r0, [r7, #22]
 800a344:	8c3b      	ldrh	r3, [r7, #32]
 800a346:	9301      	str	r3, [sp, #4]
 800a348:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a34a:	9300      	str	r3, [sp, #0]
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f7ff ff17 	bl	800a180 <Paint_DrawChar>

        //The next character of the address
        pString ++;
 800a352:	68bb      	ldr	r3, [r7, #8]
 800a354:	3301      	adds	r3, #1
 800a356:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	889a      	ldrh	r2, [r3, #4]
 800a35c:	8afb      	ldrh	r3, [r7, #22]
 800a35e:	4413      	add	r3, r2
 800a360:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0') {
 800a362:	68bb      	ldr	r3, [r7, #8]
 800a364:	781b      	ldrb	r3, [r3, #0]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d1cd      	bne.n	800a306 <Paint_DrawString_EN+0x36>
    }
}
 800a36a:	3718      	adds	r7, #24
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}
 800a370:	20000558 	.word	0x20000558
 800a374:	0800baa0 	.word	0x0800baa0

0800a378 <Paint_DrawNum>:
    Color_Background : Select the background color
******************************************************************************/
#define  ARRAY_LEN 255
void Paint_DrawNum(UWORD Xpoint, UWORD Ypoint, int32_t Nummber,
                   sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 800a378:	b590      	push	{r4, r7, lr}
 800a37a:	f5ad 7d09 	sub.w	sp, sp, #548	@ 0x224
 800a37e:	af02      	add	r7, sp, #8
 800a380:	4604      	mov	r4, r0
 800a382:	4608      	mov	r0, r1
 800a384:	f507 7106 	add.w	r1, r7, #536	@ 0x218
 800a388:	f5a1 7104 	sub.w	r1, r1, #528	@ 0x210
 800a38c:	600a      	str	r2, [r1, #0]
 800a38e:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 800a392:	f5a2 7205 	sub.w	r2, r2, #532	@ 0x214
 800a396:	6013      	str	r3, [r2, #0]
 800a398:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800a39c:	f2a3 230a 	subw	r3, r3, #522	@ 0x20a
 800a3a0:	4622      	mov	r2, r4
 800a3a2:	801a      	strh	r2, [r3, #0]
 800a3a4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800a3a8:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800a3ac:	4602      	mov	r2, r0
 800a3ae:	801a      	strh	r2, [r3, #0]

    int16_t Num_Bit = 0, Str_Bit = 0;
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	f8a7 3214 	strh.w	r3, [r7, #532]	@ 0x214
    uint8_t Str_Array[ARRAY_LEN] = {0}, Num_Array[ARRAY_LEN] = {0};
 800a3bc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800a3c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	23ff      	movs	r3, #255	@ 0xff
 800a3c8:	461a      	mov	r2, r3
 800a3ca:	2100      	movs	r1, #0
 800a3cc:	f000 fc64 	bl	800ac98 <memset>
 800a3d0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800a3d4:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800a3d8:	4618      	mov	r0, r3
 800a3da:	23ff      	movs	r3, #255	@ 0xff
 800a3dc:	461a      	mov	r2, r3
 800a3de:	2100      	movs	r1, #0
 800a3e0:	f000 fc5a 	bl	800ac98 <memset>
    uint8_t *pStr = Str_Array;
 800a3e4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a3e8:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 800a3ec:	4b46      	ldr	r3, [pc, #280]	@ (800a508 <Paint_DrawNum+0x190>)
 800a3ee:	889b      	ldrh	r3, [r3, #4]
 800a3f0:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 800a3f4:	f2a2 220a 	subw	r2, r2, #522	@ 0x20a
 800a3f8:	8812      	ldrh	r2, [r2, #0]
 800a3fa:	429a      	cmp	r2, r3
 800a3fc:	d808      	bhi.n	800a410 <Paint_DrawNum+0x98>
 800a3fe:	4b42      	ldr	r3, [pc, #264]	@ (800a508 <Paint_DrawNum+0x190>)
 800a400:	88db      	ldrh	r3, [r3, #6]
 800a402:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 800a406:	f5a2 7203 	sub.w	r2, r2, #524	@ 0x20c
 800a40a:	8812      	ldrh	r2, [r2, #0]
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d903      	bls.n	800a418 <Paint_DrawNum+0xa0>
        Debug("Paint_DisNum Input exceeds the normal display range\r\n");
 800a410:	483e      	ldr	r0, [pc, #248]	@ (800a50c <Paint_DrawNum+0x194>)
 800a412:	f000 fb61 	bl	800aad8 <puts>
 800a416:	e072      	b.n	800a4fe <Paint_DrawNum+0x186>
        return;
    }

    //Converts a number to a string
    do {
        Num_Array[Num_Bit] = Nummber % 10 + '0';
 800a418:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800a41c:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800a420:	681a      	ldr	r2, [r3, #0]
 800a422:	4b3b      	ldr	r3, [pc, #236]	@ (800a510 <Paint_DrawNum+0x198>)
 800a424:	fb83 1302 	smull	r1, r3, r3, r2
 800a428:	1099      	asrs	r1, r3, #2
 800a42a:	17d3      	asrs	r3, r2, #31
 800a42c:	1ac9      	subs	r1, r1, r3
 800a42e:	460b      	mov	r3, r1
 800a430:	009b      	lsls	r3, r3, #2
 800a432:	440b      	add	r3, r1
 800a434:	005b      	lsls	r3, r3, #1
 800a436:	1ad1      	subs	r1, r2, r3
 800a438:	b2ca      	uxtb	r2, r1
 800a43a:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	@ 0x216
 800a43e:	3230      	adds	r2, #48	@ 0x30
 800a440:	b2d1      	uxtb	r1, r2
 800a442:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 800a446:	f5a2 7202 	sub.w	r2, r2, #520	@ 0x208
 800a44a:	54d1      	strb	r1, [r2, r3]
        Num_Bit++;
 800a44c:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	@ 0x216
 800a450:	b29b      	uxth	r3, r3
 800a452:	3301      	adds	r3, #1
 800a454:	b29b      	uxth	r3, r3
 800a456:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
        Nummber /= 10;
 800a45a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800a45e:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 800a462:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800a466:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	4928      	ldr	r1, [pc, #160]	@ (800a510 <Paint_DrawNum+0x198>)
 800a46e:	fb81 0103 	smull	r0, r1, r1, r3
 800a472:	1089      	asrs	r1, r1, #2
 800a474:	17db      	asrs	r3, r3, #31
 800a476:	1acb      	subs	r3, r1, r3
 800a478:	6013      	str	r3, [r2, #0]
    } while(Nummber);
 800a47a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800a47e:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d1c7      	bne.n	800a418 <Paint_DrawNum+0xa0>
    

    //The string is inverted
    while (Num_Bit > 0) {
 800a488:	e01c      	b.n	800a4c4 <Paint_DrawNum+0x14c>
        Str_Array[Str_Bit] = Num_Array[Num_Bit - 1];
 800a48a:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	@ 0x216
 800a48e:	1e5a      	subs	r2, r3, #1
 800a490:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	@ 0x214
 800a494:	f507 7106 	add.w	r1, r7, #536	@ 0x218
 800a498:	f5a1 7102 	sub.w	r1, r1, #520	@ 0x208
 800a49c:	5c89      	ldrb	r1, [r1, r2]
 800a49e:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 800a4a2:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800a4a6:	54d1      	strb	r1, [r2, r3]
        Str_Bit ++;
 800a4a8:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	@ 0x214
 800a4ac:	b29b      	uxth	r3, r3
 800a4ae:	3301      	adds	r3, #1
 800a4b0:	b29b      	uxth	r3, r3
 800a4b2:	f8a7 3214 	strh.w	r3, [r7, #532]	@ 0x214
        Num_Bit --;
 800a4b6:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	@ 0x216
 800a4ba:	b29b      	uxth	r3, r3
 800a4bc:	3b01      	subs	r3, #1
 800a4be:	b29b      	uxth	r3, r3
 800a4c0:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
    while (Num_Bit > 0) {
 800a4c4:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	@ 0x216
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	dcde      	bgt.n	800a48a <Paint_DrawNum+0x112>
    }

    //show
    Paint_DrawString_EN(Xpoint, Ypoint, (const char*)pStr, Font, Color_Background, Color_Foreground);
 800a4cc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800a4d0:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800a4d4:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 800a4d8:	f5a2 7203 	sub.w	r2, r2, #524	@ 0x20c
 800a4dc:	8811      	ldrh	r1, [r2, #0]
 800a4de:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 800a4e2:	f2a2 220a 	subw	r2, r2, #522	@ 0x20a
 800a4e6:	8810      	ldrh	r0, [r2, #0]
 800a4e8:	f8b7 2228 	ldrh.w	r2, [r7, #552]	@ 0x228
 800a4ec:	9201      	str	r2, [sp, #4]
 800a4ee:	f8b7 222c 	ldrh.w	r2, [r7, #556]	@ 0x22c
 800a4f2:	9200      	str	r2, [sp, #0]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 800a4fa:	f7ff fee9 	bl	800a2d0 <Paint_DrawString_EN>
}
 800a4fe:	f507 7707 	add.w	r7, r7, #540	@ 0x21c
 800a502:	46bd      	mov	sp, r7
 800a504:	bd90      	pop	{r4, r7, pc}
 800a506:	bf00      	nop
 800a508:	20000558 	.word	0x20000558
 800a50c:	0800bae4 	.word	0x0800bae4
 800a510:	66666667 	.word	0x66666667

0800a514 <Paint_DrawTime>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawTime(UWORD Xstart, UWORD Ystart, PAINT_TIME *pTime, sFONT* Font,
                    UWORD Color_Foreground, UWORD Color_Background)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b08a      	sub	sp, #40	@ 0x28
 800a518:	af02      	add	r7, sp, #8
 800a51a:	60ba      	str	r2, [r7, #8]
 800a51c:	607b      	str	r3, [r7, #4]
 800a51e:	4603      	mov	r3, r0
 800a520:	81fb      	strh	r3, [r7, #14]
 800a522:	460b      	mov	r3, r1
 800a524:	81bb      	strh	r3, [r7, #12]
    uint8_t value[10] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};
 800a526:	4a76      	ldr	r2, [pc, #472]	@ (800a700 <Paint_DrawTime+0x1ec>)
 800a528:	f107 0314 	add.w	r3, r7, #20
 800a52c:	ca07      	ldmia	r2, {r0, r1, r2}
 800a52e:	c303      	stmia	r3!, {r0, r1}
 800a530:	801a      	strh	r2, [r3, #0]

    UWORD Dx = Font->Width;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	889b      	ldrh	r3, [r3, #4]
 800a536:	83fb      	strh	r3, [r7, #30]

    //Write data into the cache
    Paint_DrawChar(Xstart                           , Ystart, value[pTime->Hour / 10], Font, Color_Background, Color_Foreground);
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	791b      	ldrb	r3, [r3, #4]
 800a53c:	4a71      	ldr	r2, [pc, #452]	@ (800a704 <Paint_DrawTime+0x1f0>)
 800a53e:	fba2 2303 	umull	r2, r3, r2, r3
 800a542:	08db      	lsrs	r3, r3, #3
 800a544:	b2db      	uxtb	r3, r3
 800a546:	3320      	adds	r3, #32
 800a548:	443b      	add	r3, r7
 800a54a:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800a54e:	89b9      	ldrh	r1, [r7, #12]
 800a550:	89f8      	ldrh	r0, [r7, #14]
 800a552:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a554:	9301      	str	r3, [sp, #4]
 800a556:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800a558:	9300      	str	r3, [sp, #0]
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f7ff fe10 	bl	800a180 <Paint_DrawChar>
    Paint_DrawChar(Xstart + Dx                      , Ystart, value[pTime->Hour % 10], Font, Color_Background, Color_Foreground);
 800a560:	89fa      	ldrh	r2, [r7, #14]
 800a562:	8bfb      	ldrh	r3, [r7, #30]
 800a564:	4413      	add	r3, r2
 800a566:	b298      	uxth	r0, r3
 800a568:	68bb      	ldr	r3, [r7, #8]
 800a56a:	791a      	ldrb	r2, [r3, #4]
 800a56c:	4b65      	ldr	r3, [pc, #404]	@ (800a704 <Paint_DrawTime+0x1f0>)
 800a56e:	fba3 1302 	umull	r1, r3, r3, r2
 800a572:	08d9      	lsrs	r1, r3, #3
 800a574:	460b      	mov	r3, r1
 800a576:	009b      	lsls	r3, r3, #2
 800a578:	440b      	add	r3, r1
 800a57a:	005b      	lsls	r3, r3, #1
 800a57c:	1ad3      	subs	r3, r2, r3
 800a57e:	b2db      	uxtb	r3, r3
 800a580:	3320      	adds	r3, #32
 800a582:	443b      	add	r3, r7
 800a584:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800a588:	89b9      	ldrh	r1, [r7, #12]
 800a58a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a58c:	9301      	str	r3, [sp, #4]
 800a58e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800a590:	9300      	str	r3, [sp, #0]
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f7ff fdf4 	bl	800a180 <Paint_DrawChar>
    Paint_DrawChar(Xstart + Dx  + Dx / 4 + Dx / 2   , Ystart, ':'                    , Font, Color_Background, Color_Foreground);
 800a598:	89fa      	ldrh	r2, [r7, #14]
 800a59a:	8bfb      	ldrh	r3, [r7, #30]
 800a59c:	4413      	add	r3, r2
 800a59e:	b29a      	uxth	r2, r3
 800a5a0:	8bfb      	ldrh	r3, [r7, #30]
 800a5a2:	089b      	lsrs	r3, r3, #2
 800a5a4:	b29b      	uxth	r3, r3
 800a5a6:	4413      	add	r3, r2
 800a5a8:	b29a      	uxth	r2, r3
 800a5aa:	8bfb      	ldrh	r3, [r7, #30]
 800a5ac:	085b      	lsrs	r3, r3, #1
 800a5ae:	b29b      	uxth	r3, r3
 800a5b0:	4413      	add	r3, r2
 800a5b2:	b298      	uxth	r0, r3
 800a5b4:	89b9      	ldrh	r1, [r7, #12]
 800a5b6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a5b8:	9301      	str	r3, [sp, #4]
 800a5ba:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800a5bc:	9300      	str	r3, [sp, #0]
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	223a      	movs	r2, #58	@ 0x3a
 800a5c2:	f7ff fddd 	bl	800a180 <Paint_DrawChar>
    Paint_DrawChar(Xstart + Dx * 2 + Dx / 2         , Ystart, value[pTime->Min / 10] , Font, Color_Background, Color_Foreground);
 800a5c6:	8bfb      	ldrh	r3, [r7, #30]
 800a5c8:	005b      	lsls	r3, r3, #1
 800a5ca:	b29a      	uxth	r2, r3
 800a5cc:	89fb      	ldrh	r3, [r7, #14]
 800a5ce:	4413      	add	r3, r2
 800a5d0:	b29a      	uxth	r2, r3
 800a5d2:	8bfb      	ldrh	r3, [r7, #30]
 800a5d4:	085b      	lsrs	r3, r3, #1
 800a5d6:	b29b      	uxth	r3, r3
 800a5d8:	4413      	add	r3, r2
 800a5da:	b298      	uxth	r0, r3
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	795b      	ldrb	r3, [r3, #5]
 800a5e0:	4a48      	ldr	r2, [pc, #288]	@ (800a704 <Paint_DrawTime+0x1f0>)
 800a5e2:	fba2 2303 	umull	r2, r3, r2, r3
 800a5e6:	08db      	lsrs	r3, r3, #3
 800a5e8:	b2db      	uxtb	r3, r3
 800a5ea:	3320      	adds	r3, #32
 800a5ec:	443b      	add	r3, r7
 800a5ee:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800a5f2:	89b9      	ldrh	r1, [r7, #12]
 800a5f4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a5f6:	9301      	str	r3, [sp, #4]
 800a5f8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800a5fa:	9300      	str	r3, [sp, #0]
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f7ff fdbf 	bl	800a180 <Paint_DrawChar>
    Paint_DrawChar(Xstart + Dx * 3 + Dx / 2         , Ystart, value[pTime->Min % 10] , Font, Color_Background, Color_Foreground);
 800a602:	8bfb      	ldrh	r3, [r7, #30]
 800a604:	461a      	mov	r2, r3
 800a606:	0052      	lsls	r2, r2, #1
 800a608:	4413      	add	r3, r2
 800a60a:	b29a      	uxth	r2, r3
 800a60c:	89fb      	ldrh	r3, [r7, #14]
 800a60e:	4413      	add	r3, r2
 800a610:	b29a      	uxth	r2, r3
 800a612:	8bfb      	ldrh	r3, [r7, #30]
 800a614:	085b      	lsrs	r3, r3, #1
 800a616:	b29b      	uxth	r3, r3
 800a618:	4413      	add	r3, r2
 800a61a:	b298      	uxth	r0, r3
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	795a      	ldrb	r2, [r3, #5]
 800a620:	4b38      	ldr	r3, [pc, #224]	@ (800a704 <Paint_DrawTime+0x1f0>)
 800a622:	fba3 1302 	umull	r1, r3, r3, r2
 800a626:	08d9      	lsrs	r1, r3, #3
 800a628:	460b      	mov	r3, r1
 800a62a:	009b      	lsls	r3, r3, #2
 800a62c:	440b      	add	r3, r1
 800a62e:	005b      	lsls	r3, r3, #1
 800a630:	1ad3      	subs	r3, r2, r3
 800a632:	b2db      	uxtb	r3, r3
 800a634:	3320      	adds	r3, #32
 800a636:	443b      	add	r3, r7
 800a638:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800a63c:	89b9      	ldrh	r1, [r7, #12]
 800a63e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a640:	9301      	str	r3, [sp, #4]
 800a642:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800a644:	9300      	str	r3, [sp, #0]
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f7ff fd9a 	bl	800a180 <Paint_DrawChar>
    Paint_DrawChar(Xstart + Dx * 4 + Dx / 2 - Dx / 4, Ystart, ':'                    , Font, Color_Background, Color_Foreground);
 800a64c:	8bfb      	ldrh	r3, [r7, #30]
 800a64e:	009b      	lsls	r3, r3, #2
 800a650:	b29a      	uxth	r2, r3
 800a652:	89fb      	ldrh	r3, [r7, #14]
 800a654:	4413      	add	r3, r2
 800a656:	b29a      	uxth	r2, r3
 800a658:	8bfb      	ldrh	r3, [r7, #30]
 800a65a:	085b      	lsrs	r3, r3, #1
 800a65c:	b29b      	uxth	r3, r3
 800a65e:	4413      	add	r3, r2
 800a660:	b29a      	uxth	r2, r3
 800a662:	8bfb      	ldrh	r3, [r7, #30]
 800a664:	089b      	lsrs	r3, r3, #2
 800a666:	b29b      	uxth	r3, r3
 800a668:	1ad3      	subs	r3, r2, r3
 800a66a:	b298      	uxth	r0, r3
 800a66c:	89b9      	ldrh	r1, [r7, #12]
 800a66e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a670:	9301      	str	r3, [sp, #4]
 800a672:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800a674:	9300      	str	r3, [sp, #0]
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	223a      	movs	r2, #58	@ 0x3a
 800a67a:	f7ff fd81 	bl	800a180 <Paint_DrawChar>
    Paint_DrawChar(Xstart + Dx * 5                  , Ystart, value[pTime->Sec / 10] , Font, Color_Background, Color_Foreground);
 800a67e:	8bfb      	ldrh	r3, [r7, #30]
 800a680:	461a      	mov	r2, r3
 800a682:	0092      	lsls	r2, r2, #2
 800a684:	4413      	add	r3, r2
 800a686:	b29a      	uxth	r2, r3
 800a688:	89fb      	ldrh	r3, [r7, #14]
 800a68a:	4413      	add	r3, r2
 800a68c:	b298      	uxth	r0, r3
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	799b      	ldrb	r3, [r3, #6]
 800a692:	4a1c      	ldr	r2, [pc, #112]	@ (800a704 <Paint_DrawTime+0x1f0>)
 800a694:	fba2 2303 	umull	r2, r3, r2, r3
 800a698:	08db      	lsrs	r3, r3, #3
 800a69a:	b2db      	uxtb	r3, r3
 800a69c:	3320      	adds	r3, #32
 800a69e:	443b      	add	r3, r7
 800a6a0:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800a6a4:	89b9      	ldrh	r1, [r7, #12]
 800a6a6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a6a8:	9301      	str	r3, [sp, #4]
 800a6aa:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800a6ac:	9300      	str	r3, [sp, #0]
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f7ff fd66 	bl	800a180 <Paint_DrawChar>
    Paint_DrawChar(Xstart + Dx * 6                  , Ystart, value[pTime->Sec % 10] , Font, Color_Background, Color_Foreground);
 800a6b4:	8bfb      	ldrh	r3, [r7, #30]
 800a6b6:	461a      	mov	r2, r3
 800a6b8:	0052      	lsls	r2, r2, #1
 800a6ba:	4413      	add	r3, r2
 800a6bc:	005b      	lsls	r3, r3, #1
 800a6be:	b29a      	uxth	r2, r3
 800a6c0:	89fb      	ldrh	r3, [r7, #14]
 800a6c2:	4413      	add	r3, r2
 800a6c4:	b298      	uxth	r0, r3
 800a6c6:	68bb      	ldr	r3, [r7, #8]
 800a6c8:	799a      	ldrb	r2, [r3, #6]
 800a6ca:	4b0e      	ldr	r3, [pc, #56]	@ (800a704 <Paint_DrawTime+0x1f0>)
 800a6cc:	fba3 1302 	umull	r1, r3, r3, r2
 800a6d0:	08d9      	lsrs	r1, r3, #3
 800a6d2:	460b      	mov	r3, r1
 800a6d4:	009b      	lsls	r3, r3, #2
 800a6d6:	440b      	add	r3, r1
 800a6d8:	005b      	lsls	r3, r3, #1
 800a6da:	1ad3      	subs	r3, r2, r3
 800a6dc:	b2db      	uxtb	r3, r3
 800a6de:	3320      	adds	r3, #32
 800a6e0:	443b      	add	r3, r7
 800a6e2:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800a6e6:	89b9      	ldrh	r1, [r7, #12]
 800a6e8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a6ea:	9301      	str	r3, [sp, #4]
 800a6ec:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800a6ee:	9300      	str	r3, [sp, #0]
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f7ff fd45 	bl	800a180 <Paint_DrawChar>
}
 800a6f6:	bf00      	nop
 800a6f8:	3720      	adds	r7, #32
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}
 800a6fe:	bf00      	nop
 800a700:	0800bb20 	.word	0x0800bb20
 800a704:	cccccccd 	.word	0xcccccccd

0800a708 <malloc>:
 800a708:	4b02      	ldr	r3, [pc, #8]	@ (800a714 <malloc+0xc>)
 800a70a:	4601      	mov	r1, r0
 800a70c:	6818      	ldr	r0, [r3, #0]
 800a70e:	f000 b82d 	b.w	800a76c <_malloc_r>
 800a712:	bf00      	nop
 800a714:	20000298 	.word	0x20000298

0800a718 <free>:
 800a718:	4b02      	ldr	r3, [pc, #8]	@ (800a724 <free+0xc>)
 800a71a:	4601      	mov	r1, r0
 800a71c:	6818      	ldr	r0, [r3, #0]
 800a71e:	f000 bb47 	b.w	800adb0 <_free_r>
 800a722:	bf00      	nop
 800a724:	20000298 	.word	0x20000298

0800a728 <sbrk_aligned>:
 800a728:	b570      	push	{r4, r5, r6, lr}
 800a72a:	4e0f      	ldr	r6, [pc, #60]	@ (800a768 <sbrk_aligned+0x40>)
 800a72c:	460c      	mov	r4, r1
 800a72e:	6831      	ldr	r1, [r6, #0]
 800a730:	4605      	mov	r5, r0
 800a732:	b911      	cbnz	r1, 800a73a <sbrk_aligned+0x12>
 800a734:	f000 faec 	bl	800ad10 <_sbrk_r>
 800a738:	6030      	str	r0, [r6, #0]
 800a73a:	4621      	mov	r1, r4
 800a73c:	4628      	mov	r0, r5
 800a73e:	f000 fae7 	bl	800ad10 <_sbrk_r>
 800a742:	1c43      	adds	r3, r0, #1
 800a744:	d103      	bne.n	800a74e <sbrk_aligned+0x26>
 800a746:	f04f 34ff 	mov.w	r4, #4294967295
 800a74a:	4620      	mov	r0, r4
 800a74c:	bd70      	pop	{r4, r5, r6, pc}
 800a74e:	1cc4      	adds	r4, r0, #3
 800a750:	f024 0403 	bic.w	r4, r4, #3
 800a754:	42a0      	cmp	r0, r4
 800a756:	d0f8      	beq.n	800a74a <sbrk_aligned+0x22>
 800a758:	1a21      	subs	r1, r4, r0
 800a75a:	4628      	mov	r0, r5
 800a75c:	f000 fad8 	bl	800ad10 <_sbrk_r>
 800a760:	3001      	adds	r0, #1
 800a762:	d1f2      	bne.n	800a74a <sbrk_aligned+0x22>
 800a764:	e7ef      	b.n	800a746 <sbrk_aligned+0x1e>
 800a766:	bf00      	nop
 800a768:	20000570 	.word	0x20000570

0800a76c <_malloc_r>:
 800a76c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a770:	1ccd      	adds	r5, r1, #3
 800a772:	f025 0503 	bic.w	r5, r5, #3
 800a776:	3508      	adds	r5, #8
 800a778:	2d0c      	cmp	r5, #12
 800a77a:	bf38      	it	cc
 800a77c:	250c      	movcc	r5, #12
 800a77e:	2d00      	cmp	r5, #0
 800a780:	4606      	mov	r6, r0
 800a782:	db01      	blt.n	800a788 <_malloc_r+0x1c>
 800a784:	42a9      	cmp	r1, r5
 800a786:	d904      	bls.n	800a792 <_malloc_r+0x26>
 800a788:	230c      	movs	r3, #12
 800a78a:	6033      	str	r3, [r6, #0]
 800a78c:	2000      	movs	r0, #0
 800a78e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a792:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a868 <_malloc_r+0xfc>
 800a796:	f000 f869 	bl	800a86c <__malloc_lock>
 800a79a:	f8d8 3000 	ldr.w	r3, [r8]
 800a79e:	461c      	mov	r4, r3
 800a7a0:	bb44      	cbnz	r4, 800a7f4 <_malloc_r+0x88>
 800a7a2:	4629      	mov	r1, r5
 800a7a4:	4630      	mov	r0, r6
 800a7a6:	f7ff ffbf 	bl	800a728 <sbrk_aligned>
 800a7aa:	1c43      	adds	r3, r0, #1
 800a7ac:	4604      	mov	r4, r0
 800a7ae:	d158      	bne.n	800a862 <_malloc_r+0xf6>
 800a7b0:	f8d8 4000 	ldr.w	r4, [r8]
 800a7b4:	4627      	mov	r7, r4
 800a7b6:	2f00      	cmp	r7, #0
 800a7b8:	d143      	bne.n	800a842 <_malloc_r+0xd6>
 800a7ba:	2c00      	cmp	r4, #0
 800a7bc:	d04b      	beq.n	800a856 <_malloc_r+0xea>
 800a7be:	6823      	ldr	r3, [r4, #0]
 800a7c0:	4639      	mov	r1, r7
 800a7c2:	4630      	mov	r0, r6
 800a7c4:	eb04 0903 	add.w	r9, r4, r3
 800a7c8:	f000 faa2 	bl	800ad10 <_sbrk_r>
 800a7cc:	4581      	cmp	r9, r0
 800a7ce:	d142      	bne.n	800a856 <_malloc_r+0xea>
 800a7d0:	6821      	ldr	r1, [r4, #0]
 800a7d2:	4630      	mov	r0, r6
 800a7d4:	1a6d      	subs	r5, r5, r1
 800a7d6:	4629      	mov	r1, r5
 800a7d8:	f7ff ffa6 	bl	800a728 <sbrk_aligned>
 800a7dc:	3001      	adds	r0, #1
 800a7de:	d03a      	beq.n	800a856 <_malloc_r+0xea>
 800a7e0:	6823      	ldr	r3, [r4, #0]
 800a7e2:	442b      	add	r3, r5
 800a7e4:	6023      	str	r3, [r4, #0]
 800a7e6:	f8d8 3000 	ldr.w	r3, [r8]
 800a7ea:	685a      	ldr	r2, [r3, #4]
 800a7ec:	bb62      	cbnz	r2, 800a848 <_malloc_r+0xdc>
 800a7ee:	f8c8 7000 	str.w	r7, [r8]
 800a7f2:	e00f      	b.n	800a814 <_malloc_r+0xa8>
 800a7f4:	6822      	ldr	r2, [r4, #0]
 800a7f6:	1b52      	subs	r2, r2, r5
 800a7f8:	d420      	bmi.n	800a83c <_malloc_r+0xd0>
 800a7fa:	2a0b      	cmp	r2, #11
 800a7fc:	d917      	bls.n	800a82e <_malloc_r+0xc2>
 800a7fe:	1961      	adds	r1, r4, r5
 800a800:	42a3      	cmp	r3, r4
 800a802:	6025      	str	r5, [r4, #0]
 800a804:	bf18      	it	ne
 800a806:	6059      	strne	r1, [r3, #4]
 800a808:	6863      	ldr	r3, [r4, #4]
 800a80a:	bf08      	it	eq
 800a80c:	f8c8 1000 	streq.w	r1, [r8]
 800a810:	5162      	str	r2, [r4, r5]
 800a812:	604b      	str	r3, [r1, #4]
 800a814:	4630      	mov	r0, r6
 800a816:	f000 f82f 	bl	800a878 <__malloc_unlock>
 800a81a:	f104 000b 	add.w	r0, r4, #11
 800a81e:	1d23      	adds	r3, r4, #4
 800a820:	f020 0007 	bic.w	r0, r0, #7
 800a824:	1ac2      	subs	r2, r0, r3
 800a826:	bf1c      	itt	ne
 800a828:	1a1b      	subne	r3, r3, r0
 800a82a:	50a3      	strne	r3, [r4, r2]
 800a82c:	e7af      	b.n	800a78e <_malloc_r+0x22>
 800a82e:	6862      	ldr	r2, [r4, #4]
 800a830:	42a3      	cmp	r3, r4
 800a832:	bf0c      	ite	eq
 800a834:	f8c8 2000 	streq.w	r2, [r8]
 800a838:	605a      	strne	r2, [r3, #4]
 800a83a:	e7eb      	b.n	800a814 <_malloc_r+0xa8>
 800a83c:	4623      	mov	r3, r4
 800a83e:	6864      	ldr	r4, [r4, #4]
 800a840:	e7ae      	b.n	800a7a0 <_malloc_r+0x34>
 800a842:	463c      	mov	r4, r7
 800a844:	687f      	ldr	r7, [r7, #4]
 800a846:	e7b6      	b.n	800a7b6 <_malloc_r+0x4a>
 800a848:	461a      	mov	r2, r3
 800a84a:	685b      	ldr	r3, [r3, #4]
 800a84c:	42a3      	cmp	r3, r4
 800a84e:	d1fb      	bne.n	800a848 <_malloc_r+0xdc>
 800a850:	2300      	movs	r3, #0
 800a852:	6053      	str	r3, [r2, #4]
 800a854:	e7de      	b.n	800a814 <_malloc_r+0xa8>
 800a856:	230c      	movs	r3, #12
 800a858:	4630      	mov	r0, r6
 800a85a:	6033      	str	r3, [r6, #0]
 800a85c:	f000 f80c 	bl	800a878 <__malloc_unlock>
 800a860:	e794      	b.n	800a78c <_malloc_r+0x20>
 800a862:	6005      	str	r5, [r0, #0]
 800a864:	e7d6      	b.n	800a814 <_malloc_r+0xa8>
 800a866:	bf00      	nop
 800a868:	20000574 	.word	0x20000574

0800a86c <__malloc_lock>:
 800a86c:	4801      	ldr	r0, [pc, #4]	@ (800a874 <__malloc_lock+0x8>)
 800a86e:	f000 ba9c 	b.w	800adaa <__retarget_lock_acquire_recursive>
 800a872:	bf00      	nop
 800a874:	200006b8 	.word	0x200006b8

0800a878 <__malloc_unlock>:
 800a878:	4801      	ldr	r0, [pc, #4]	@ (800a880 <__malloc_unlock+0x8>)
 800a87a:	f000 ba97 	b.w	800adac <__retarget_lock_release_recursive>
 800a87e:	bf00      	nop
 800a880:	200006b8 	.word	0x200006b8

0800a884 <std>:
 800a884:	2300      	movs	r3, #0
 800a886:	b510      	push	{r4, lr}
 800a888:	4604      	mov	r4, r0
 800a88a:	e9c0 3300 	strd	r3, r3, [r0]
 800a88e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a892:	6083      	str	r3, [r0, #8]
 800a894:	8181      	strh	r1, [r0, #12]
 800a896:	6643      	str	r3, [r0, #100]	@ 0x64
 800a898:	81c2      	strh	r2, [r0, #14]
 800a89a:	6183      	str	r3, [r0, #24]
 800a89c:	4619      	mov	r1, r3
 800a89e:	2208      	movs	r2, #8
 800a8a0:	305c      	adds	r0, #92	@ 0x5c
 800a8a2:	f000 f9f9 	bl	800ac98 <memset>
 800a8a6:	4b0d      	ldr	r3, [pc, #52]	@ (800a8dc <std+0x58>)
 800a8a8:	6224      	str	r4, [r4, #32]
 800a8aa:	6263      	str	r3, [r4, #36]	@ 0x24
 800a8ac:	4b0c      	ldr	r3, [pc, #48]	@ (800a8e0 <std+0x5c>)
 800a8ae:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a8b0:	4b0c      	ldr	r3, [pc, #48]	@ (800a8e4 <std+0x60>)
 800a8b2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a8b4:	4b0c      	ldr	r3, [pc, #48]	@ (800a8e8 <std+0x64>)
 800a8b6:	6323      	str	r3, [r4, #48]	@ 0x30
 800a8b8:	4b0c      	ldr	r3, [pc, #48]	@ (800a8ec <std+0x68>)
 800a8ba:	429c      	cmp	r4, r3
 800a8bc:	d006      	beq.n	800a8cc <std+0x48>
 800a8be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a8c2:	4294      	cmp	r4, r2
 800a8c4:	d002      	beq.n	800a8cc <std+0x48>
 800a8c6:	33d0      	adds	r3, #208	@ 0xd0
 800a8c8:	429c      	cmp	r4, r3
 800a8ca:	d105      	bne.n	800a8d8 <std+0x54>
 800a8cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a8d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8d4:	f000 ba68 	b.w	800ada8 <__retarget_lock_init_recursive>
 800a8d8:	bd10      	pop	{r4, pc}
 800a8da:	bf00      	nop
 800a8dc:	0800aae9 	.word	0x0800aae9
 800a8e0:	0800ab0b 	.word	0x0800ab0b
 800a8e4:	0800ab43 	.word	0x0800ab43
 800a8e8:	0800ab67 	.word	0x0800ab67
 800a8ec:	20000578 	.word	0x20000578

0800a8f0 <stdio_exit_handler>:
 800a8f0:	4a02      	ldr	r2, [pc, #8]	@ (800a8fc <stdio_exit_handler+0xc>)
 800a8f2:	4903      	ldr	r1, [pc, #12]	@ (800a900 <stdio_exit_handler+0x10>)
 800a8f4:	4803      	ldr	r0, [pc, #12]	@ (800a904 <stdio_exit_handler+0x14>)
 800a8f6:	f000 b869 	b.w	800a9cc <_fwalk_sglue>
 800a8fa:	bf00      	nop
 800a8fc:	2000028c 	.word	0x2000028c
 800a900:	0800b4e1 	.word	0x0800b4e1
 800a904:	2000029c 	.word	0x2000029c

0800a908 <cleanup_stdio>:
 800a908:	6841      	ldr	r1, [r0, #4]
 800a90a:	4b0c      	ldr	r3, [pc, #48]	@ (800a93c <cleanup_stdio+0x34>)
 800a90c:	b510      	push	{r4, lr}
 800a90e:	4299      	cmp	r1, r3
 800a910:	4604      	mov	r4, r0
 800a912:	d001      	beq.n	800a918 <cleanup_stdio+0x10>
 800a914:	f000 fde4 	bl	800b4e0 <_fflush_r>
 800a918:	68a1      	ldr	r1, [r4, #8]
 800a91a:	4b09      	ldr	r3, [pc, #36]	@ (800a940 <cleanup_stdio+0x38>)
 800a91c:	4299      	cmp	r1, r3
 800a91e:	d002      	beq.n	800a926 <cleanup_stdio+0x1e>
 800a920:	4620      	mov	r0, r4
 800a922:	f000 fddd 	bl	800b4e0 <_fflush_r>
 800a926:	68e1      	ldr	r1, [r4, #12]
 800a928:	4b06      	ldr	r3, [pc, #24]	@ (800a944 <cleanup_stdio+0x3c>)
 800a92a:	4299      	cmp	r1, r3
 800a92c:	d004      	beq.n	800a938 <cleanup_stdio+0x30>
 800a92e:	4620      	mov	r0, r4
 800a930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a934:	f000 bdd4 	b.w	800b4e0 <_fflush_r>
 800a938:	bd10      	pop	{r4, pc}
 800a93a:	bf00      	nop
 800a93c:	20000578 	.word	0x20000578
 800a940:	200005e0 	.word	0x200005e0
 800a944:	20000648 	.word	0x20000648

0800a948 <global_stdio_init.part.0>:
 800a948:	b510      	push	{r4, lr}
 800a94a:	4b0b      	ldr	r3, [pc, #44]	@ (800a978 <global_stdio_init.part.0+0x30>)
 800a94c:	4c0b      	ldr	r4, [pc, #44]	@ (800a97c <global_stdio_init.part.0+0x34>)
 800a94e:	4a0c      	ldr	r2, [pc, #48]	@ (800a980 <global_stdio_init.part.0+0x38>)
 800a950:	4620      	mov	r0, r4
 800a952:	601a      	str	r2, [r3, #0]
 800a954:	2104      	movs	r1, #4
 800a956:	2200      	movs	r2, #0
 800a958:	f7ff ff94 	bl	800a884 <std>
 800a95c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a960:	2201      	movs	r2, #1
 800a962:	2109      	movs	r1, #9
 800a964:	f7ff ff8e 	bl	800a884 <std>
 800a968:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a96c:	2202      	movs	r2, #2
 800a96e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a972:	2112      	movs	r1, #18
 800a974:	f7ff bf86 	b.w	800a884 <std>
 800a978:	200006b0 	.word	0x200006b0
 800a97c:	20000578 	.word	0x20000578
 800a980:	0800a8f1 	.word	0x0800a8f1

0800a984 <__sfp_lock_acquire>:
 800a984:	4801      	ldr	r0, [pc, #4]	@ (800a98c <__sfp_lock_acquire+0x8>)
 800a986:	f000 ba10 	b.w	800adaa <__retarget_lock_acquire_recursive>
 800a98a:	bf00      	nop
 800a98c:	200006b9 	.word	0x200006b9

0800a990 <__sfp_lock_release>:
 800a990:	4801      	ldr	r0, [pc, #4]	@ (800a998 <__sfp_lock_release+0x8>)
 800a992:	f000 ba0b 	b.w	800adac <__retarget_lock_release_recursive>
 800a996:	bf00      	nop
 800a998:	200006b9 	.word	0x200006b9

0800a99c <__sinit>:
 800a99c:	b510      	push	{r4, lr}
 800a99e:	4604      	mov	r4, r0
 800a9a0:	f7ff fff0 	bl	800a984 <__sfp_lock_acquire>
 800a9a4:	6a23      	ldr	r3, [r4, #32]
 800a9a6:	b11b      	cbz	r3, 800a9b0 <__sinit+0x14>
 800a9a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9ac:	f7ff bff0 	b.w	800a990 <__sfp_lock_release>
 800a9b0:	4b04      	ldr	r3, [pc, #16]	@ (800a9c4 <__sinit+0x28>)
 800a9b2:	6223      	str	r3, [r4, #32]
 800a9b4:	4b04      	ldr	r3, [pc, #16]	@ (800a9c8 <__sinit+0x2c>)
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d1f5      	bne.n	800a9a8 <__sinit+0xc>
 800a9bc:	f7ff ffc4 	bl	800a948 <global_stdio_init.part.0>
 800a9c0:	e7f2      	b.n	800a9a8 <__sinit+0xc>
 800a9c2:	bf00      	nop
 800a9c4:	0800a909 	.word	0x0800a909
 800a9c8:	200006b0 	.word	0x200006b0

0800a9cc <_fwalk_sglue>:
 800a9cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9d0:	4607      	mov	r7, r0
 800a9d2:	4688      	mov	r8, r1
 800a9d4:	4614      	mov	r4, r2
 800a9d6:	2600      	movs	r6, #0
 800a9d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a9dc:	f1b9 0901 	subs.w	r9, r9, #1
 800a9e0:	d505      	bpl.n	800a9ee <_fwalk_sglue+0x22>
 800a9e2:	6824      	ldr	r4, [r4, #0]
 800a9e4:	2c00      	cmp	r4, #0
 800a9e6:	d1f7      	bne.n	800a9d8 <_fwalk_sglue+0xc>
 800a9e8:	4630      	mov	r0, r6
 800a9ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9ee:	89ab      	ldrh	r3, [r5, #12]
 800a9f0:	2b01      	cmp	r3, #1
 800a9f2:	d907      	bls.n	800aa04 <_fwalk_sglue+0x38>
 800a9f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a9f8:	3301      	adds	r3, #1
 800a9fa:	d003      	beq.n	800aa04 <_fwalk_sglue+0x38>
 800a9fc:	4629      	mov	r1, r5
 800a9fe:	4638      	mov	r0, r7
 800aa00:	47c0      	blx	r8
 800aa02:	4306      	orrs	r6, r0
 800aa04:	3568      	adds	r5, #104	@ 0x68
 800aa06:	e7e9      	b.n	800a9dc <_fwalk_sglue+0x10>

0800aa08 <iprintf>:
 800aa08:	b40f      	push	{r0, r1, r2, r3}
 800aa0a:	b507      	push	{r0, r1, r2, lr}
 800aa0c:	4906      	ldr	r1, [pc, #24]	@ (800aa28 <iprintf+0x20>)
 800aa0e:	ab04      	add	r3, sp, #16
 800aa10:	6808      	ldr	r0, [r1, #0]
 800aa12:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa16:	6881      	ldr	r1, [r0, #8]
 800aa18:	9301      	str	r3, [sp, #4]
 800aa1a:	f000 fa39 	bl	800ae90 <_vfiprintf_r>
 800aa1e:	b003      	add	sp, #12
 800aa20:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa24:	b004      	add	sp, #16
 800aa26:	4770      	bx	lr
 800aa28:	20000298 	.word	0x20000298

0800aa2c <_puts_r>:
 800aa2c:	6a03      	ldr	r3, [r0, #32]
 800aa2e:	b570      	push	{r4, r5, r6, lr}
 800aa30:	4605      	mov	r5, r0
 800aa32:	460e      	mov	r6, r1
 800aa34:	6884      	ldr	r4, [r0, #8]
 800aa36:	b90b      	cbnz	r3, 800aa3c <_puts_r+0x10>
 800aa38:	f7ff ffb0 	bl	800a99c <__sinit>
 800aa3c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aa3e:	07db      	lsls	r3, r3, #31
 800aa40:	d405      	bmi.n	800aa4e <_puts_r+0x22>
 800aa42:	89a3      	ldrh	r3, [r4, #12]
 800aa44:	0598      	lsls	r0, r3, #22
 800aa46:	d402      	bmi.n	800aa4e <_puts_r+0x22>
 800aa48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aa4a:	f000 f9ae 	bl	800adaa <__retarget_lock_acquire_recursive>
 800aa4e:	89a3      	ldrh	r3, [r4, #12]
 800aa50:	0719      	lsls	r1, r3, #28
 800aa52:	d502      	bpl.n	800aa5a <_puts_r+0x2e>
 800aa54:	6923      	ldr	r3, [r4, #16]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d135      	bne.n	800aac6 <_puts_r+0x9a>
 800aa5a:	4621      	mov	r1, r4
 800aa5c:	4628      	mov	r0, r5
 800aa5e:	f000 f8c5 	bl	800abec <__swsetup_r>
 800aa62:	b380      	cbz	r0, 800aac6 <_puts_r+0x9a>
 800aa64:	f04f 35ff 	mov.w	r5, #4294967295
 800aa68:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aa6a:	07da      	lsls	r2, r3, #31
 800aa6c:	d405      	bmi.n	800aa7a <_puts_r+0x4e>
 800aa6e:	89a3      	ldrh	r3, [r4, #12]
 800aa70:	059b      	lsls	r3, r3, #22
 800aa72:	d402      	bmi.n	800aa7a <_puts_r+0x4e>
 800aa74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aa76:	f000 f999 	bl	800adac <__retarget_lock_release_recursive>
 800aa7a:	4628      	mov	r0, r5
 800aa7c:	bd70      	pop	{r4, r5, r6, pc}
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	da04      	bge.n	800aa8c <_puts_r+0x60>
 800aa82:	69a2      	ldr	r2, [r4, #24]
 800aa84:	429a      	cmp	r2, r3
 800aa86:	dc17      	bgt.n	800aab8 <_puts_r+0x8c>
 800aa88:	290a      	cmp	r1, #10
 800aa8a:	d015      	beq.n	800aab8 <_puts_r+0x8c>
 800aa8c:	6823      	ldr	r3, [r4, #0]
 800aa8e:	1c5a      	adds	r2, r3, #1
 800aa90:	6022      	str	r2, [r4, #0]
 800aa92:	7019      	strb	r1, [r3, #0]
 800aa94:	68a3      	ldr	r3, [r4, #8]
 800aa96:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800aa9a:	3b01      	subs	r3, #1
 800aa9c:	60a3      	str	r3, [r4, #8]
 800aa9e:	2900      	cmp	r1, #0
 800aaa0:	d1ed      	bne.n	800aa7e <_puts_r+0x52>
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	da11      	bge.n	800aaca <_puts_r+0x9e>
 800aaa6:	4622      	mov	r2, r4
 800aaa8:	210a      	movs	r1, #10
 800aaaa:	4628      	mov	r0, r5
 800aaac:	f000 f85f 	bl	800ab6e <__swbuf_r>
 800aab0:	3001      	adds	r0, #1
 800aab2:	d0d7      	beq.n	800aa64 <_puts_r+0x38>
 800aab4:	250a      	movs	r5, #10
 800aab6:	e7d7      	b.n	800aa68 <_puts_r+0x3c>
 800aab8:	4622      	mov	r2, r4
 800aaba:	4628      	mov	r0, r5
 800aabc:	f000 f857 	bl	800ab6e <__swbuf_r>
 800aac0:	3001      	adds	r0, #1
 800aac2:	d1e7      	bne.n	800aa94 <_puts_r+0x68>
 800aac4:	e7ce      	b.n	800aa64 <_puts_r+0x38>
 800aac6:	3e01      	subs	r6, #1
 800aac8:	e7e4      	b.n	800aa94 <_puts_r+0x68>
 800aaca:	6823      	ldr	r3, [r4, #0]
 800aacc:	1c5a      	adds	r2, r3, #1
 800aace:	6022      	str	r2, [r4, #0]
 800aad0:	220a      	movs	r2, #10
 800aad2:	701a      	strb	r2, [r3, #0]
 800aad4:	e7ee      	b.n	800aab4 <_puts_r+0x88>
	...

0800aad8 <puts>:
 800aad8:	4b02      	ldr	r3, [pc, #8]	@ (800aae4 <puts+0xc>)
 800aada:	4601      	mov	r1, r0
 800aadc:	6818      	ldr	r0, [r3, #0]
 800aade:	f7ff bfa5 	b.w	800aa2c <_puts_r>
 800aae2:	bf00      	nop
 800aae4:	20000298 	.word	0x20000298

0800aae8 <__sread>:
 800aae8:	b510      	push	{r4, lr}
 800aaea:	460c      	mov	r4, r1
 800aaec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aaf0:	f000 f8fc 	bl	800acec <_read_r>
 800aaf4:	2800      	cmp	r0, #0
 800aaf6:	bfab      	itete	ge
 800aaf8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800aafa:	89a3      	ldrhlt	r3, [r4, #12]
 800aafc:	181b      	addge	r3, r3, r0
 800aafe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ab02:	bfac      	ite	ge
 800ab04:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ab06:	81a3      	strhlt	r3, [r4, #12]
 800ab08:	bd10      	pop	{r4, pc}

0800ab0a <__swrite>:
 800ab0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab0e:	461f      	mov	r7, r3
 800ab10:	898b      	ldrh	r3, [r1, #12]
 800ab12:	4605      	mov	r5, r0
 800ab14:	05db      	lsls	r3, r3, #23
 800ab16:	460c      	mov	r4, r1
 800ab18:	4616      	mov	r6, r2
 800ab1a:	d505      	bpl.n	800ab28 <__swrite+0x1e>
 800ab1c:	2302      	movs	r3, #2
 800ab1e:	2200      	movs	r2, #0
 800ab20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab24:	f000 f8d0 	bl	800acc8 <_lseek_r>
 800ab28:	89a3      	ldrh	r3, [r4, #12]
 800ab2a:	4632      	mov	r2, r6
 800ab2c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ab30:	81a3      	strh	r3, [r4, #12]
 800ab32:	4628      	mov	r0, r5
 800ab34:	463b      	mov	r3, r7
 800ab36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab3e:	f000 b8f7 	b.w	800ad30 <_write_r>

0800ab42 <__sseek>:
 800ab42:	b510      	push	{r4, lr}
 800ab44:	460c      	mov	r4, r1
 800ab46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab4a:	f000 f8bd 	bl	800acc8 <_lseek_r>
 800ab4e:	1c43      	adds	r3, r0, #1
 800ab50:	89a3      	ldrh	r3, [r4, #12]
 800ab52:	bf15      	itete	ne
 800ab54:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ab56:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ab5a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ab5e:	81a3      	strheq	r3, [r4, #12]
 800ab60:	bf18      	it	ne
 800ab62:	81a3      	strhne	r3, [r4, #12]
 800ab64:	bd10      	pop	{r4, pc}

0800ab66 <__sclose>:
 800ab66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab6a:	f000 b89d 	b.w	800aca8 <_close_r>

0800ab6e <__swbuf_r>:
 800ab6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab70:	460e      	mov	r6, r1
 800ab72:	4614      	mov	r4, r2
 800ab74:	4605      	mov	r5, r0
 800ab76:	b118      	cbz	r0, 800ab80 <__swbuf_r+0x12>
 800ab78:	6a03      	ldr	r3, [r0, #32]
 800ab7a:	b90b      	cbnz	r3, 800ab80 <__swbuf_r+0x12>
 800ab7c:	f7ff ff0e 	bl	800a99c <__sinit>
 800ab80:	69a3      	ldr	r3, [r4, #24]
 800ab82:	60a3      	str	r3, [r4, #8]
 800ab84:	89a3      	ldrh	r3, [r4, #12]
 800ab86:	071a      	lsls	r2, r3, #28
 800ab88:	d501      	bpl.n	800ab8e <__swbuf_r+0x20>
 800ab8a:	6923      	ldr	r3, [r4, #16]
 800ab8c:	b943      	cbnz	r3, 800aba0 <__swbuf_r+0x32>
 800ab8e:	4621      	mov	r1, r4
 800ab90:	4628      	mov	r0, r5
 800ab92:	f000 f82b 	bl	800abec <__swsetup_r>
 800ab96:	b118      	cbz	r0, 800aba0 <__swbuf_r+0x32>
 800ab98:	f04f 37ff 	mov.w	r7, #4294967295
 800ab9c:	4638      	mov	r0, r7
 800ab9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aba0:	6823      	ldr	r3, [r4, #0]
 800aba2:	6922      	ldr	r2, [r4, #16]
 800aba4:	b2f6      	uxtb	r6, r6
 800aba6:	1a98      	subs	r0, r3, r2
 800aba8:	6963      	ldr	r3, [r4, #20]
 800abaa:	4637      	mov	r7, r6
 800abac:	4283      	cmp	r3, r0
 800abae:	dc05      	bgt.n	800abbc <__swbuf_r+0x4e>
 800abb0:	4621      	mov	r1, r4
 800abb2:	4628      	mov	r0, r5
 800abb4:	f000 fc94 	bl	800b4e0 <_fflush_r>
 800abb8:	2800      	cmp	r0, #0
 800abba:	d1ed      	bne.n	800ab98 <__swbuf_r+0x2a>
 800abbc:	68a3      	ldr	r3, [r4, #8]
 800abbe:	3b01      	subs	r3, #1
 800abc0:	60a3      	str	r3, [r4, #8]
 800abc2:	6823      	ldr	r3, [r4, #0]
 800abc4:	1c5a      	adds	r2, r3, #1
 800abc6:	6022      	str	r2, [r4, #0]
 800abc8:	701e      	strb	r6, [r3, #0]
 800abca:	6962      	ldr	r2, [r4, #20]
 800abcc:	1c43      	adds	r3, r0, #1
 800abce:	429a      	cmp	r2, r3
 800abd0:	d004      	beq.n	800abdc <__swbuf_r+0x6e>
 800abd2:	89a3      	ldrh	r3, [r4, #12]
 800abd4:	07db      	lsls	r3, r3, #31
 800abd6:	d5e1      	bpl.n	800ab9c <__swbuf_r+0x2e>
 800abd8:	2e0a      	cmp	r6, #10
 800abda:	d1df      	bne.n	800ab9c <__swbuf_r+0x2e>
 800abdc:	4621      	mov	r1, r4
 800abde:	4628      	mov	r0, r5
 800abe0:	f000 fc7e 	bl	800b4e0 <_fflush_r>
 800abe4:	2800      	cmp	r0, #0
 800abe6:	d0d9      	beq.n	800ab9c <__swbuf_r+0x2e>
 800abe8:	e7d6      	b.n	800ab98 <__swbuf_r+0x2a>
	...

0800abec <__swsetup_r>:
 800abec:	b538      	push	{r3, r4, r5, lr}
 800abee:	4b29      	ldr	r3, [pc, #164]	@ (800ac94 <__swsetup_r+0xa8>)
 800abf0:	4605      	mov	r5, r0
 800abf2:	6818      	ldr	r0, [r3, #0]
 800abf4:	460c      	mov	r4, r1
 800abf6:	b118      	cbz	r0, 800ac00 <__swsetup_r+0x14>
 800abf8:	6a03      	ldr	r3, [r0, #32]
 800abfa:	b90b      	cbnz	r3, 800ac00 <__swsetup_r+0x14>
 800abfc:	f7ff fece 	bl	800a99c <__sinit>
 800ac00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac04:	0719      	lsls	r1, r3, #28
 800ac06:	d422      	bmi.n	800ac4e <__swsetup_r+0x62>
 800ac08:	06da      	lsls	r2, r3, #27
 800ac0a:	d407      	bmi.n	800ac1c <__swsetup_r+0x30>
 800ac0c:	2209      	movs	r2, #9
 800ac0e:	602a      	str	r2, [r5, #0]
 800ac10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac14:	f04f 30ff 	mov.w	r0, #4294967295
 800ac18:	81a3      	strh	r3, [r4, #12]
 800ac1a:	e033      	b.n	800ac84 <__swsetup_r+0x98>
 800ac1c:	0758      	lsls	r0, r3, #29
 800ac1e:	d512      	bpl.n	800ac46 <__swsetup_r+0x5a>
 800ac20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ac22:	b141      	cbz	r1, 800ac36 <__swsetup_r+0x4a>
 800ac24:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ac28:	4299      	cmp	r1, r3
 800ac2a:	d002      	beq.n	800ac32 <__swsetup_r+0x46>
 800ac2c:	4628      	mov	r0, r5
 800ac2e:	f000 f8bf 	bl	800adb0 <_free_r>
 800ac32:	2300      	movs	r3, #0
 800ac34:	6363      	str	r3, [r4, #52]	@ 0x34
 800ac36:	89a3      	ldrh	r3, [r4, #12]
 800ac38:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ac3c:	81a3      	strh	r3, [r4, #12]
 800ac3e:	2300      	movs	r3, #0
 800ac40:	6063      	str	r3, [r4, #4]
 800ac42:	6923      	ldr	r3, [r4, #16]
 800ac44:	6023      	str	r3, [r4, #0]
 800ac46:	89a3      	ldrh	r3, [r4, #12]
 800ac48:	f043 0308 	orr.w	r3, r3, #8
 800ac4c:	81a3      	strh	r3, [r4, #12]
 800ac4e:	6923      	ldr	r3, [r4, #16]
 800ac50:	b94b      	cbnz	r3, 800ac66 <__swsetup_r+0x7a>
 800ac52:	89a3      	ldrh	r3, [r4, #12]
 800ac54:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ac58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac5c:	d003      	beq.n	800ac66 <__swsetup_r+0x7a>
 800ac5e:	4621      	mov	r1, r4
 800ac60:	4628      	mov	r0, r5
 800ac62:	f000 fc8a 	bl	800b57a <__smakebuf_r>
 800ac66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac6a:	f013 0201 	ands.w	r2, r3, #1
 800ac6e:	d00a      	beq.n	800ac86 <__swsetup_r+0x9a>
 800ac70:	2200      	movs	r2, #0
 800ac72:	60a2      	str	r2, [r4, #8]
 800ac74:	6962      	ldr	r2, [r4, #20]
 800ac76:	4252      	negs	r2, r2
 800ac78:	61a2      	str	r2, [r4, #24]
 800ac7a:	6922      	ldr	r2, [r4, #16]
 800ac7c:	b942      	cbnz	r2, 800ac90 <__swsetup_r+0xa4>
 800ac7e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ac82:	d1c5      	bne.n	800ac10 <__swsetup_r+0x24>
 800ac84:	bd38      	pop	{r3, r4, r5, pc}
 800ac86:	0799      	lsls	r1, r3, #30
 800ac88:	bf58      	it	pl
 800ac8a:	6962      	ldrpl	r2, [r4, #20]
 800ac8c:	60a2      	str	r2, [r4, #8]
 800ac8e:	e7f4      	b.n	800ac7a <__swsetup_r+0x8e>
 800ac90:	2000      	movs	r0, #0
 800ac92:	e7f7      	b.n	800ac84 <__swsetup_r+0x98>
 800ac94:	20000298 	.word	0x20000298

0800ac98 <memset>:
 800ac98:	4603      	mov	r3, r0
 800ac9a:	4402      	add	r2, r0
 800ac9c:	4293      	cmp	r3, r2
 800ac9e:	d100      	bne.n	800aca2 <memset+0xa>
 800aca0:	4770      	bx	lr
 800aca2:	f803 1b01 	strb.w	r1, [r3], #1
 800aca6:	e7f9      	b.n	800ac9c <memset+0x4>

0800aca8 <_close_r>:
 800aca8:	b538      	push	{r3, r4, r5, lr}
 800acaa:	2300      	movs	r3, #0
 800acac:	4d05      	ldr	r5, [pc, #20]	@ (800acc4 <_close_r+0x1c>)
 800acae:	4604      	mov	r4, r0
 800acb0:	4608      	mov	r0, r1
 800acb2:	602b      	str	r3, [r5, #0]
 800acb4:	f7f7 fe45 	bl	8002942 <_close>
 800acb8:	1c43      	adds	r3, r0, #1
 800acba:	d102      	bne.n	800acc2 <_close_r+0x1a>
 800acbc:	682b      	ldr	r3, [r5, #0]
 800acbe:	b103      	cbz	r3, 800acc2 <_close_r+0x1a>
 800acc0:	6023      	str	r3, [r4, #0]
 800acc2:	bd38      	pop	{r3, r4, r5, pc}
 800acc4:	200006b4 	.word	0x200006b4

0800acc8 <_lseek_r>:
 800acc8:	b538      	push	{r3, r4, r5, lr}
 800acca:	4604      	mov	r4, r0
 800accc:	4608      	mov	r0, r1
 800acce:	4611      	mov	r1, r2
 800acd0:	2200      	movs	r2, #0
 800acd2:	4d05      	ldr	r5, [pc, #20]	@ (800ace8 <_lseek_r+0x20>)
 800acd4:	602a      	str	r2, [r5, #0]
 800acd6:	461a      	mov	r2, r3
 800acd8:	f7f7 fe57 	bl	800298a <_lseek>
 800acdc:	1c43      	adds	r3, r0, #1
 800acde:	d102      	bne.n	800ace6 <_lseek_r+0x1e>
 800ace0:	682b      	ldr	r3, [r5, #0]
 800ace2:	b103      	cbz	r3, 800ace6 <_lseek_r+0x1e>
 800ace4:	6023      	str	r3, [r4, #0]
 800ace6:	bd38      	pop	{r3, r4, r5, pc}
 800ace8:	200006b4 	.word	0x200006b4

0800acec <_read_r>:
 800acec:	b538      	push	{r3, r4, r5, lr}
 800acee:	4604      	mov	r4, r0
 800acf0:	4608      	mov	r0, r1
 800acf2:	4611      	mov	r1, r2
 800acf4:	2200      	movs	r2, #0
 800acf6:	4d05      	ldr	r5, [pc, #20]	@ (800ad0c <_read_r+0x20>)
 800acf8:	602a      	str	r2, [r5, #0]
 800acfa:	461a      	mov	r2, r3
 800acfc:	f7f7 fde8 	bl	80028d0 <_read>
 800ad00:	1c43      	adds	r3, r0, #1
 800ad02:	d102      	bne.n	800ad0a <_read_r+0x1e>
 800ad04:	682b      	ldr	r3, [r5, #0]
 800ad06:	b103      	cbz	r3, 800ad0a <_read_r+0x1e>
 800ad08:	6023      	str	r3, [r4, #0]
 800ad0a:	bd38      	pop	{r3, r4, r5, pc}
 800ad0c:	200006b4 	.word	0x200006b4

0800ad10 <_sbrk_r>:
 800ad10:	b538      	push	{r3, r4, r5, lr}
 800ad12:	2300      	movs	r3, #0
 800ad14:	4d05      	ldr	r5, [pc, #20]	@ (800ad2c <_sbrk_r+0x1c>)
 800ad16:	4604      	mov	r4, r0
 800ad18:	4608      	mov	r0, r1
 800ad1a:	602b      	str	r3, [r5, #0]
 800ad1c:	f7f7 fe42 	bl	80029a4 <_sbrk>
 800ad20:	1c43      	adds	r3, r0, #1
 800ad22:	d102      	bne.n	800ad2a <_sbrk_r+0x1a>
 800ad24:	682b      	ldr	r3, [r5, #0]
 800ad26:	b103      	cbz	r3, 800ad2a <_sbrk_r+0x1a>
 800ad28:	6023      	str	r3, [r4, #0]
 800ad2a:	bd38      	pop	{r3, r4, r5, pc}
 800ad2c:	200006b4 	.word	0x200006b4

0800ad30 <_write_r>:
 800ad30:	b538      	push	{r3, r4, r5, lr}
 800ad32:	4604      	mov	r4, r0
 800ad34:	4608      	mov	r0, r1
 800ad36:	4611      	mov	r1, r2
 800ad38:	2200      	movs	r2, #0
 800ad3a:	4d05      	ldr	r5, [pc, #20]	@ (800ad50 <_write_r+0x20>)
 800ad3c:	602a      	str	r2, [r5, #0]
 800ad3e:	461a      	mov	r2, r3
 800ad40:	f7f7 fde3 	bl	800290a <_write>
 800ad44:	1c43      	adds	r3, r0, #1
 800ad46:	d102      	bne.n	800ad4e <_write_r+0x1e>
 800ad48:	682b      	ldr	r3, [r5, #0]
 800ad4a:	b103      	cbz	r3, 800ad4e <_write_r+0x1e>
 800ad4c:	6023      	str	r3, [r4, #0]
 800ad4e:	bd38      	pop	{r3, r4, r5, pc}
 800ad50:	200006b4 	.word	0x200006b4

0800ad54 <__errno>:
 800ad54:	4b01      	ldr	r3, [pc, #4]	@ (800ad5c <__errno+0x8>)
 800ad56:	6818      	ldr	r0, [r3, #0]
 800ad58:	4770      	bx	lr
 800ad5a:	bf00      	nop
 800ad5c:	20000298 	.word	0x20000298

0800ad60 <__libc_init_array>:
 800ad60:	b570      	push	{r4, r5, r6, lr}
 800ad62:	2600      	movs	r6, #0
 800ad64:	4d0c      	ldr	r5, [pc, #48]	@ (800ad98 <__libc_init_array+0x38>)
 800ad66:	4c0d      	ldr	r4, [pc, #52]	@ (800ad9c <__libc_init_array+0x3c>)
 800ad68:	1b64      	subs	r4, r4, r5
 800ad6a:	10a4      	asrs	r4, r4, #2
 800ad6c:	42a6      	cmp	r6, r4
 800ad6e:	d109      	bne.n	800ad84 <__libc_init_array+0x24>
 800ad70:	f000 fc70 	bl	800b654 <_init>
 800ad74:	2600      	movs	r6, #0
 800ad76:	4d0a      	ldr	r5, [pc, #40]	@ (800ada0 <__libc_init_array+0x40>)
 800ad78:	4c0a      	ldr	r4, [pc, #40]	@ (800ada4 <__libc_init_array+0x44>)
 800ad7a:	1b64      	subs	r4, r4, r5
 800ad7c:	10a4      	asrs	r4, r4, #2
 800ad7e:	42a6      	cmp	r6, r4
 800ad80:	d105      	bne.n	800ad8e <__libc_init_array+0x2e>
 800ad82:	bd70      	pop	{r4, r5, r6, pc}
 800ad84:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad88:	4798      	blx	r3
 800ad8a:	3601      	adds	r6, #1
 800ad8c:	e7ee      	b.n	800ad6c <__libc_init_array+0xc>
 800ad8e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad92:	4798      	blx	r3
 800ad94:	3601      	adds	r6, #1
 800ad96:	e7f2      	b.n	800ad7e <__libc_init_array+0x1e>
 800ad98:	0800f570 	.word	0x0800f570
 800ad9c:	0800f570 	.word	0x0800f570
 800ada0:	0800f570 	.word	0x0800f570
 800ada4:	0800f574 	.word	0x0800f574

0800ada8 <__retarget_lock_init_recursive>:
 800ada8:	4770      	bx	lr

0800adaa <__retarget_lock_acquire_recursive>:
 800adaa:	4770      	bx	lr

0800adac <__retarget_lock_release_recursive>:
 800adac:	4770      	bx	lr
	...

0800adb0 <_free_r>:
 800adb0:	b538      	push	{r3, r4, r5, lr}
 800adb2:	4605      	mov	r5, r0
 800adb4:	2900      	cmp	r1, #0
 800adb6:	d040      	beq.n	800ae3a <_free_r+0x8a>
 800adb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800adbc:	1f0c      	subs	r4, r1, #4
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	bfb8      	it	lt
 800adc2:	18e4      	addlt	r4, r4, r3
 800adc4:	f7ff fd52 	bl	800a86c <__malloc_lock>
 800adc8:	4a1c      	ldr	r2, [pc, #112]	@ (800ae3c <_free_r+0x8c>)
 800adca:	6813      	ldr	r3, [r2, #0]
 800adcc:	b933      	cbnz	r3, 800addc <_free_r+0x2c>
 800adce:	6063      	str	r3, [r4, #4]
 800add0:	6014      	str	r4, [r2, #0]
 800add2:	4628      	mov	r0, r5
 800add4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800add8:	f7ff bd4e 	b.w	800a878 <__malloc_unlock>
 800addc:	42a3      	cmp	r3, r4
 800adde:	d908      	bls.n	800adf2 <_free_r+0x42>
 800ade0:	6820      	ldr	r0, [r4, #0]
 800ade2:	1821      	adds	r1, r4, r0
 800ade4:	428b      	cmp	r3, r1
 800ade6:	bf01      	itttt	eq
 800ade8:	6819      	ldreq	r1, [r3, #0]
 800adea:	685b      	ldreq	r3, [r3, #4]
 800adec:	1809      	addeq	r1, r1, r0
 800adee:	6021      	streq	r1, [r4, #0]
 800adf0:	e7ed      	b.n	800adce <_free_r+0x1e>
 800adf2:	461a      	mov	r2, r3
 800adf4:	685b      	ldr	r3, [r3, #4]
 800adf6:	b10b      	cbz	r3, 800adfc <_free_r+0x4c>
 800adf8:	42a3      	cmp	r3, r4
 800adfa:	d9fa      	bls.n	800adf2 <_free_r+0x42>
 800adfc:	6811      	ldr	r1, [r2, #0]
 800adfe:	1850      	adds	r0, r2, r1
 800ae00:	42a0      	cmp	r0, r4
 800ae02:	d10b      	bne.n	800ae1c <_free_r+0x6c>
 800ae04:	6820      	ldr	r0, [r4, #0]
 800ae06:	4401      	add	r1, r0
 800ae08:	1850      	adds	r0, r2, r1
 800ae0a:	4283      	cmp	r3, r0
 800ae0c:	6011      	str	r1, [r2, #0]
 800ae0e:	d1e0      	bne.n	800add2 <_free_r+0x22>
 800ae10:	6818      	ldr	r0, [r3, #0]
 800ae12:	685b      	ldr	r3, [r3, #4]
 800ae14:	4408      	add	r0, r1
 800ae16:	6010      	str	r0, [r2, #0]
 800ae18:	6053      	str	r3, [r2, #4]
 800ae1a:	e7da      	b.n	800add2 <_free_r+0x22>
 800ae1c:	d902      	bls.n	800ae24 <_free_r+0x74>
 800ae1e:	230c      	movs	r3, #12
 800ae20:	602b      	str	r3, [r5, #0]
 800ae22:	e7d6      	b.n	800add2 <_free_r+0x22>
 800ae24:	6820      	ldr	r0, [r4, #0]
 800ae26:	1821      	adds	r1, r4, r0
 800ae28:	428b      	cmp	r3, r1
 800ae2a:	bf01      	itttt	eq
 800ae2c:	6819      	ldreq	r1, [r3, #0]
 800ae2e:	685b      	ldreq	r3, [r3, #4]
 800ae30:	1809      	addeq	r1, r1, r0
 800ae32:	6021      	streq	r1, [r4, #0]
 800ae34:	6063      	str	r3, [r4, #4]
 800ae36:	6054      	str	r4, [r2, #4]
 800ae38:	e7cb      	b.n	800add2 <_free_r+0x22>
 800ae3a:	bd38      	pop	{r3, r4, r5, pc}
 800ae3c:	20000574 	.word	0x20000574

0800ae40 <__sfputc_r>:
 800ae40:	6893      	ldr	r3, [r2, #8]
 800ae42:	b410      	push	{r4}
 800ae44:	3b01      	subs	r3, #1
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	6093      	str	r3, [r2, #8]
 800ae4a:	da07      	bge.n	800ae5c <__sfputc_r+0x1c>
 800ae4c:	6994      	ldr	r4, [r2, #24]
 800ae4e:	42a3      	cmp	r3, r4
 800ae50:	db01      	blt.n	800ae56 <__sfputc_r+0x16>
 800ae52:	290a      	cmp	r1, #10
 800ae54:	d102      	bne.n	800ae5c <__sfputc_r+0x1c>
 800ae56:	bc10      	pop	{r4}
 800ae58:	f7ff be89 	b.w	800ab6e <__swbuf_r>
 800ae5c:	6813      	ldr	r3, [r2, #0]
 800ae5e:	1c58      	adds	r0, r3, #1
 800ae60:	6010      	str	r0, [r2, #0]
 800ae62:	7019      	strb	r1, [r3, #0]
 800ae64:	4608      	mov	r0, r1
 800ae66:	bc10      	pop	{r4}
 800ae68:	4770      	bx	lr

0800ae6a <__sfputs_r>:
 800ae6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae6c:	4606      	mov	r6, r0
 800ae6e:	460f      	mov	r7, r1
 800ae70:	4614      	mov	r4, r2
 800ae72:	18d5      	adds	r5, r2, r3
 800ae74:	42ac      	cmp	r4, r5
 800ae76:	d101      	bne.n	800ae7c <__sfputs_r+0x12>
 800ae78:	2000      	movs	r0, #0
 800ae7a:	e007      	b.n	800ae8c <__sfputs_r+0x22>
 800ae7c:	463a      	mov	r2, r7
 800ae7e:	4630      	mov	r0, r6
 800ae80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae84:	f7ff ffdc 	bl	800ae40 <__sfputc_r>
 800ae88:	1c43      	adds	r3, r0, #1
 800ae8a:	d1f3      	bne.n	800ae74 <__sfputs_r+0xa>
 800ae8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ae90 <_vfiprintf_r>:
 800ae90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae94:	460d      	mov	r5, r1
 800ae96:	4614      	mov	r4, r2
 800ae98:	4698      	mov	r8, r3
 800ae9a:	4606      	mov	r6, r0
 800ae9c:	b09d      	sub	sp, #116	@ 0x74
 800ae9e:	b118      	cbz	r0, 800aea8 <_vfiprintf_r+0x18>
 800aea0:	6a03      	ldr	r3, [r0, #32]
 800aea2:	b90b      	cbnz	r3, 800aea8 <_vfiprintf_r+0x18>
 800aea4:	f7ff fd7a 	bl	800a99c <__sinit>
 800aea8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aeaa:	07d9      	lsls	r1, r3, #31
 800aeac:	d405      	bmi.n	800aeba <_vfiprintf_r+0x2a>
 800aeae:	89ab      	ldrh	r3, [r5, #12]
 800aeb0:	059a      	lsls	r2, r3, #22
 800aeb2:	d402      	bmi.n	800aeba <_vfiprintf_r+0x2a>
 800aeb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aeb6:	f7ff ff78 	bl	800adaa <__retarget_lock_acquire_recursive>
 800aeba:	89ab      	ldrh	r3, [r5, #12]
 800aebc:	071b      	lsls	r3, r3, #28
 800aebe:	d501      	bpl.n	800aec4 <_vfiprintf_r+0x34>
 800aec0:	692b      	ldr	r3, [r5, #16]
 800aec2:	b99b      	cbnz	r3, 800aeec <_vfiprintf_r+0x5c>
 800aec4:	4629      	mov	r1, r5
 800aec6:	4630      	mov	r0, r6
 800aec8:	f7ff fe90 	bl	800abec <__swsetup_r>
 800aecc:	b170      	cbz	r0, 800aeec <_vfiprintf_r+0x5c>
 800aece:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aed0:	07dc      	lsls	r4, r3, #31
 800aed2:	d504      	bpl.n	800aede <_vfiprintf_r+0x4e>
 800aed4:	f04f 30ff 	mov.w	r0, #4294967295
 800aed8:	b01d      	add	sp, #116	@ 0x74
 800aeda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aede:	89ab      	ldrh	r3, [r5, #12]
 800aee0:	0598      	lsls	r0, r3, #22
 800aee2:	d4f7      	bmi.n	800aed4 <_vfiprintf_r+0x44>
 800aee4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aee6:	f7ff ff61 	bl	800adac <__retarget_lock_release_recursive>
 800aeea:	e7f3      	b.n	800aed4 <_vfiprintf_r+0x44>
 800aeec:	2300      	movs	r3, #0
 800aeee:	9309      	str	r3, [sp, #36]	@ 0x24
 800aef0:	2320      	movs	r3, #32
 800aef2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aef6:	2330      	movs	r3, #48	@ 0x30
 800aef8:	f04f 0901 	mov.w	r9, #1
 800aefc:	f8cd 800c 	str.w	r8, [sp, #12]
 800af00:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800b0ac <_vfiprintf_r+0x21c>
 800af04:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800af08:	4623      	mov	r3, r4
 800af0a:	469a      	mov	sl, r3
 800af0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af10:	b10a      	cbz	r2, 800af16 <_vfiprintf_r+0x86>
 800af12:	2a25      	cmp	r2, #37	@ 0x25
 800af14:	d1f9      	bne.n	800af0a <_vfiprintf_r+0x7a>
 800af16:	ebba 0b04 	subs.w	fp, sl, r4
 800af1a:	d00b      	beq.n	800af34 <_vfiprintf_r+0xa4>
 800af1c:	465b      	mov	r3, fp
 800af1e:	4622      	mov	r2, r4
 800af20:	4629      	mov	r1, r5
 800af22:	4630      	mov	r0, r6
 800af24:	f7ff ffa1 	bl	800ae6a <__sfputs_r>
 800af28:	3001      	adds	r0, #1
 800af2a:	f000 80a7 	beq.w	800b07c <_vfiprintf_r+0x1ec>
 800af2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af30:	445a      	add	r2, fp
 800af32:	9209      	str	r2, [sp, #36]	@ 0x24
 800af34:	f89a 3000 	ldrb.w	r3, [sl]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	f000 809f 	beq.w	800b07c <_vfiprintf_r+0x1ec>
 800af3e:	2300      	movs	r3, #0
 800af40:	f04f 32ff 	mov.w	r2, #4294967295
 800af44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af48:	f10a 0a01 	add.w	sl, sl, #1
 800af4c:	9304      	str	r3, [sp, #16]
 800af4e:	9307      	str	r3, [sp, #28]
 800af50:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800af54:	931a      	str	r3, [sp, #104]	@ 0x68
 800af56:	4654      	mov	r4, sl
 800af58:	2205      	movs	r2, #5
 800af5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af5e:	4853      	ldr	r0, [pc, #332]	@ (800b0ac <_vfiprintf_r+0x21c>)
 800af60:	f000 fb6a 	bl	800b638 <memchr>
 800af64:	9a04      	ldr	r2, [sp, #16]
 800af66:	b9d8      	cbnz	r0, 800afa0 <_vfiprintf_r+0x110>
 800af68:	06d1      	lsls	r1, r2, #27
 800af6a:	bf44      	itt	mi
 800af6c:	2320      	movmi	r3, #32
 800af6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af72:	0713      	lsls	r3, r2, #28
 800af74:	bf44      	itt	mi
 800af76:	232b      	movmi	r3, #43	@ 0x2b
 800af78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af7c:	f89a 3000 	ldrb.w	r3, [sl]
 800af80:	2b2a      	cmp	r3, #42	@ 0x2a
 800af82:	d015      	beq.n	800afb0 <_vfiprintf_r+0x120>
 800af84:	4654      	mov	r4, sl
 800af86:	2000      	movs	r0, #0
 800af88:	f04f 0c0a 	mov.w	ip, #10
 800af8c:	9a07      	ldr	r2, [sp, #28]
 800af8e:	4621      	mov	r1, r4
 800af90:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af94:	3b30      	subs	r3, #48	@ 0x30
 800af96:	2b09      	cmp	r3, #9
 800af98:	d94b      	bls.n	800b032 <_vfiprintf_r+0x1a2>
 800af9a:	b1b0      	cbz	r0, 800afca <_vfiprintf_r+0x13a>
 800af9c:	9207      	str	r2, [sp, #28]
 800af9e:	e014      	b.n	800afca <_vfiprintf_r+0x13a>
 800afa0:	eba0 0308 	sub.w	r3, r0, r8
 800afa4:	fa09 f303 	lsl.w	r3, r9, r3
 800afa8:	4313      	orrs	r3, r2
 800afaa:	46a2      	mov	sl, r4
 800afac:	9304      	str	r3, [sp, #16]
 800afae:	e7d2      	b.n	800af56 <_vfiprintf_r+0xc6>
 800afb0:	9b03      	ldr	r3, [sp, #12]
 800afb2:	1d19      	adds	r1, r3, #4
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	9103      	str	r1, [sp, #12]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	bfbb      	ittet	lt
 800afbc:	425b      	neglt	r3, r3
 800afbe:	f042 0202 	orrlt.w	r2, r2, #2
 800afc2:	9307      	strge	r3, [sp, #28]
 800afc4:	9307      	strlt	r3, [sp, #28]
 800afc6:	bfb8      	it	lt
 800afc8:	9204      	strlt	r2, [sp, #16]
 800afca:	7823      	ldrb	r3, [r4, #0]
 800afcc:	2b2e      	cmp	r3, #46	@ 0x2e
 800afce:	d10a      	bne.n	800afe6 <_vfiprintf_r+0x156>
 800afd0:	7863      	ldrb	r3, [r4, #1]
 800afd2:	2b2a      	cmp	r3, #42	@ 0x2a
 800afd4:	d132      	bne.n	800b03c <_vfiprintf_r+0x1ac>
 800afd6:	9b03      	ldr	r3, [sp, #12]
 800afd8:	3402      	adds	r4, #2
 800afda:	1d1a      	adds	r2, r3, #4
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	9203      	str	r2, [sp, #12]
 800afe0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800afe4:	9305      	str	r3, [sp, #20]
 800afe6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800b0b0 <_vfiprintf_r+0x220>
 800afea:	2203      	movs	r2, #3
 800afec:	4650      	mov	r0, sl
 800afee:	7821      	ldrb	r1, [r4, #0]
 800aff0:	f000 fb22 	bl	800b638 <memchr>
 800aff4:	b138      	cbz	r0, 800b006 <_vfiprintf_r+0x176>
 800aff6:	2240      	movs	r2, #64	@ 0x40
 800aff8:	9b04      	ldr	r3, [sp, #16]
 800affa:	eba0 000a 	sub.w	r0, r0, sl
 800affe:	4082      	lsls	r2, r0
 800b000:	4313      	orrs	r3, r2
 800b002:	3401      	adds	r4, #1
 800b004:	9304      	str	r3, [sp, #16]
 800b006:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b00a:	2206      	movs	r2, #6
 800b00c:	4829      	ldr	r0, [pc, #164]	@ (800b0b4 <_vfiprintf_r+0x224>)
 800b00e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b012:	f000 fb11 	bl	800b638 <memchr>
 800b016:	2800      	cmp	r0, #0
 800b018:	d03f      	beq.n	800b09a <_vfiprintf_r+0x20a>
 800b01a:	4b27      	ldr	r3, [pc, #156]	@ (800b0b8 <_vfiprintf_r+0x228>)
 800b01c:	bb1b      	cbnz	r3, 800b066 <_vfiprintf_r+0x1d6>
 800b01e:	9b03      	ldr	r3, [sp, #12]
 800b020:	3307      	adds	r3, #7
 800b022:	f023 0307 	bic.w	r3, r3, #7
 800b026:	3308      	adds	r3, #8
 800b028:	9303      	str	r3, [sp, #12]
 800b02a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b02c:	443b      	add	r3, r7
 800b02e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b030:	e76a      	b.n	800af08 <_vfiprintf_r+0x78>
 800b032:	460c      	mov	r4, r1
 800b034:	2001      	movs	r0, #1
 800b036:	fb0c 3202 	mla	r2, ip, r2, r3
 800b03a:	e7a8      	b.n	800af8e <_vfiprintf_r+0xfe>
 800b03c:	2300      	movs	r3, #0
 800b03e:	f04f 0c0a 	mov.w	ip, #10
 800b042:	4619      	mov	r1, r3
 800b044:	3401      	adds	r4, #1
 800b046:	9305      	str	r3, [sp, #20]
 800b048:	4620      	mov	r0, r4
 800b04a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b04e:	3a30      	subs	r2, #48	@ 0x30
 800b050:	2a09      	cmp	r2, #9
 800b052:	d903      	bls.n	800b05c <_vfiprintf_r+0x1cc>
 800b054:	2b00      	cmp	r3, #0
 800b056:	d0c6      	beq.n	800afe6 <_vfiprintf_r+0x156>
 800b058:	9105      	str	r1, [sp, #20]
 800b05a:	e7c4      	b.n	800afe6 <_vfiprintf_r+0x156>
 800b05c:	4604      	mov	r4, r0
 800b05e:	2301      	movs	r3, #1
 800b060:	fb0c 2101 	mla	r1, ip, r1, r2
 800b064:	e7f0      	b.n	800b048 <_vfiprintf_r+0x1b8>
 800b066:	ab03      	add	r3, sp, #12
 800b068:	9300      	str	r3, [sp, #0]
 800b06a:	462a      	mov	r2, r5
 800b06c:	4630      	mov	r0, r6
 800b06e:	4b13      	ldr	r3, [pc, #76]	@ (800b0bc <_vfiprintf_r+0x22c>)
 800b070:	a904      	add	r1, sp, #16
 800b072:	f3af 8000 	nop.w
 800b076:	4607      	mov	r7, r0
 800b078:	1c78      	adds	r0, r7, #1
 800b07a:	d1d6      	bne.n	800b02a <_vfiprintf_r+0x19a>
 800b07c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b07e:	07d9      	lsls	r1, r3, #31
 800b080:	d405      	bmi.n	800b08e <_vfiprintf_r+0x1fe>
 800b082:	89ab      	ldrh	r3, [r5, #12]
 800b084:	059a      	lsls	r2, r3, #22
 800b086:	d402      	bmi.n	800b08e <_vfiprintf_r+0x1fe>
 800b088:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b08a:	f7ff fe8f 	bl	800adac <__retarget_lock_release_recursive>
 800b08e:	89ab      	ldrh	r3, [r5, #12]
 800b090:	065b      	lsls	r3, r3, #25
 800b092:	f53f af1f 	bmi.w	800aed4 <_vfiprintf_r+0x44>
 800b096:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b098:	e71e      	b.n	800aed8 <_vfiprintf_r+0x48>
 800b09a:	ab03      	add	r3, sp, #12
 800b09c:	9300      	str	r3, [sp, #0]
 800b09e:	462a      	mov	r2, r5
 800b0a0:	4630      	mov	r0, r6
 800b0a2:	4b06      	ldr	r3, [pc, #24]	@ (800b0bc <_vfiprintf_r+0x22c>)
 800b0a4:	a904      	add	r1, sp, #16
 800b0a6:	f000 f87d 	bl	800b1a4 <_printf_i>
 800b0aa:	e7e4      	b.n	800b076 <_vfiprintf_r+0x1e6>
 800b0ac:	0800f53c 	.word	0x0800f53c
 800b0b0:	0800f542 	.word	0x0800f542
 800b0b4:	0800f546 	.word	0x0800f546
 800b0b8:	00000000 	.word	0x00000000
 800b0bc:	0800ae6b 	.word	0x0800ae6b

0800b0c0 <_printf_common>:
 800b0c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0c4:	4616      	mov	r6, r2
 800b0c6:	4698      	mov	r8, r3
 800b0c8:	688a      	ldr	r2, [r1, #8]
 800b0ca:	690b      	ldr	r3, [r1, #16]
 800b0cc:	4607      	mov	r7, r0
 800b0ce:	4293      	cmp	r3, r2
 800b0d0:	bfb8      	it	lt
 800b0d2:	4613      	movlt	r3, r2
 800b0d4:	6033      	str	r3, [r6, #0]
 800b0d6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b0da:	460c      	mov	r4, r1
 800b0dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b0e0:	b10a      	cbz	r2, 800b0e6 <_printf_common+0x26>
 800b0e2:	3301      	adds	r3, #1
 800b0e4:	6033      	str	r3, [r6, #0]
 800b0e6:	6823      	ldr	r3, [r4, #0]
 800b0e8:	0699      	lsls	r1, r3, #26
 800b0ea:	bf42      	ittt	mi
 800b0ec:	6833      	ldrmi	r3, [r6, #0]
 800b0ee:	3302      	addmi	r3, #2
 800b0f0:	6033      	strmi	r3, [r6, #0]
 800b0f2:	6825      	ldr	r5, [r4, #0]
 800b0f4:	f015 0506 	ands.w	r5, r5, #6
 800b0f8:	d106      	bne.n	800b108 <_printf_common+0x48>
 800b0fa:	f104 0a19 	add.w	sl, r4, #25
 800b0fe:	68e3      	ldr	r3, [r4, #12]
 800b100:	6832      	ldr	r2, [r6, #0]
 800b102:	1a9b      	subs	r3, r3, r2
 800b104:	42ab      	cmp	r3, r5
 800b106:	dc2b      	bgt.n	800b160 <_printf_common+0xa0>
 800b108:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b10c:	6822      	ldr	r2, [r4, #0]
 800b10e:	3b00      	subs	r3, #0
 800b110:	bf18      	it	ne
 800b112:	2301      	movne	r3, #1
 800b114:	0692      	lsls	r2, r2, #26
 800b116:	d430      	bmi.n	800b17a <_printf_common+0xba>
 800b118:	4641      	mov	r1, r8
 800b11a:	4638      	mov	r0, r7
 800b11c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b120:	47c8      	blx	r9
 800b122:	3001      	adds	r0, #1
 800b124:	d023      	beq.n	800b16e <_printf_common+0xae>
 800b126:	6823      	ldr	r3, [r4, #0]
 800b128:	6922      	ldr	r2, [r4, #16]
 800b12a:	f003 0306 	and.w	r3, r3, #6
 800b12e:	2b04      	cmp	r3, #4
 800b130:	bf14      	ite	ne
 800b132:	2500      	movne	r5, #0
 800b134:	6833      	ldreq	r3, [r6, #0]
 800b136:	f04f 0600 	mov.w	r6, #0
 800b13a:	bf08      	it	eq
 800b13c:	68e5      	ldreq	r5, [r4, #12]
 800b13e:	f104 041a 	add.w	r4, r4, #26
 800b142:	bf08      	it	eq
 800b144:	1aed      	subeq	r5, r5, r3
 800b146:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b14a:	bf08      	it	eq
 800b14c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b150:	4293      	cmp	r3, r2
 800b152:	bfc4      	itt	gt
 800b154:	1a9b      	subgt	r3, r3, r2
 800b156:	18ed      	addgt	r5, r5, r3
 800b158:	42b5      	cmp	r5, r6
 800b15a:	d11a      	bne.n	800b192 <_printf_common+0xd2>
 800b15c:	2000      	movs	r0, #0
 800b15e:	e008      	b.n	800b172 <_printf_common+0xb2>
 800b160:	2301      	movs	r3, #1
 800b162:	4652      	mov	r2, sl
 800b164:	4641      	mov	r1, r8
 800b166:	4638      	mov	r0, r7
 800b168:	47c8      	blx	r9
 800b16a:	3001      	adds	r0, #1
 800b16c:	d103      	bne.n	800b176 <_printf_common+0xb6>
 800b16e:	f04f 30ff 	mov.w	r0, #4294967295
 800b172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b176:	3501      	adds	r5, #1
 800b178:	e7c1      	b.n	800b0fe <_printf_common+0x3e>
 800b17a:	2030      	movs	r0, #48	@ 0x30
 800b17c:	18e1      	adds	r1, r4, r3
 800b17e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b182:	1c5a      	adds	r2, r3, #1
 800b184:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b188:	4422      	add	r2, r4
 800b18a:	3302      	adds	r3, #2
 800b18c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b190:	e7c2      	b.n	800b118 <_printf_common+0x58>
 800b192:	2301      	movs	r3, #1
 800b194:	4622      	mov	r2, r4
 800b196:	4641      	mov	r1, r8
 800b198:	4638      	mov	r0, r7
 800b19a:	47c8      	blx	r9
 800b19c:	3001      	adds	r0, #1
 800b19e:	d0e6      	beq.n	800b16e <_printf_common+0xae>
 800b1a0:	3601      	adds	r6, #1
 800b1a2:	e7d9      	b.n	800b158 <_printf_common+0x98>

0800b1a4 <_printf_i>:
 800b1a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b1a8:	7e0f      	ldrb	r7, [r1, #24]
 800b1aa:	4691      	mov	r9, r2
 800b1ac:	2f78      	cmp	r7, #120	@ 0x78
 800b1ae:	4680      	mov	r8, r0
 800b1b0:	460c      	mov	r4, r1
 800b1b2:	469a      	mov	sl, r3
 800b1b4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b1b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b1ba:	d807      	bhi.n	800b1cc <_printf_i+0x28>
 800b1bc:	2f62      	cmp	r7, #98	@ 0x62
 800b1be:	d80a      	bhi.n	800b1d6 <_printf_i+0x32>
 800b1c0:	2f00      	cmp	r7, #0
 800b1c2:	f000 80d1 	beq.w	800b368 <_printf_i+0x1c4>
 800b1c6:	2f58      	cmp	r7, #88	@ 0x58
 800b1c8:	f000 80b8 	beq.w	800b33c <_printf_i+0x198>
 800b1cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b1d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b1d4:	e03a      	b.n	800b24c <_printf_i+0xa8>
 800b1d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b1da:	2b15      	cmp	r3, #21
 800b1dc:	d8f6      	bhi.n	800b1cc <_printf_i+0x28>
 800b1de:	a101      	add	r1, pc, #4	@ (adr r1, 800b1e4 <_printf_i+0x40>)
 800b1e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b1e4:	0800b23d 	.word	0x0800b23d
 800b1e8:	0800b251 	.word	0x0800b251
 800b1ec:	0800b1cd 	.word	0x0800b1cd
 800b1f0:	0800b1cd 	.word	0x0800b1cd
 800b1f4:	0800b1cd 	.word	0x0800b1cd
 800b1f8:	0800b1cd 	.word	0x0800b1cd
 800b1fc:	0800b251 	.word	0x0800b251
 800b200:	0800b1cd 	.word	0x0800b1cd
 800b204:	0800b1cd 	.word	0x0800b1cd
 800b208:	0800b1cd 	.word	0x0800b1cd
 800b20c:	0800b1cd 	.word	0x0800b1cd
 800b210:	0800b34f 	.word	0x0800b34f
 800b214:	0800b27b 	.word	0x0800b27b
 800b218:	0800b309 	.word	0x0800b309
 800b21c:	0800b1cd 	.word	0x0800b1cd
 800b220:	0800b1cd 	.word	0x0800b1cd
 800b224:	0800b371 	.word	0x0800b371
 800b228:	0800b1cd 	.word	0x0800b1cd
 800b22c:	0800b27b 	.word	0x0800b27b
 800b230:	0800b1cd 	.word	0x0800b1cd
 800b234:	0800b1cd 	.word	0x0800b1cd
 800b238:	0800b311 	.word	0x0800b311
 800b23c:	6833      	ldr	r3, [r6, #0]
 800b23e:	1d1a      	adds	r2, r3, #4
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	6032      	str	r2, [r6, #0]
 800b244:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b248:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b24c:	2301      	movs	r3, #1
 800b24e:	e09c      	b.n	800b38a <_printf_i+0x1e6>
 800b250:	6833      	ldr	r3, [r6, #0]
 800b252:	6820      	ldr	r0, [r4, #0]
 800b254:	1d19      	adds	r1, r3, #4
 800b256:	6031      	str	r1, [r6, #0]
 800b258:	0606      	lsls	r6, r0, #24
 800b25a:	d501      	bpl.n	800b260 <_printf_i+0xbc>
 800b25c:	681d      	ldr	r5, [r3, #0]
 800b25e:	e003      	b.n	800b268 <_printf_i+0xc4>
 800b260:	0645      	lsls	r5, r0, #25
 800b262:	d5fb      	bpl.n	800b25c <_printf_i+0xb8>
 800b264:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b268:	2d00      	cmp	r5, #0
 800b26a:	da03      	bge.n	800b274 <_printf_i+0xd0>
 800b26c:	232d      	movs	r3, #45	@ 0x2d
 800b26e:	426d      	negs	r5, r5
 800b270:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b274:	230a      	movs	r3, #10
 800b276:	4858      	ldr	r0, [pc, #352]	@ (800b3d8 <_printf_i+0x234>)
 800b278:	e011      	b.n	800b29e <_printf_i+0xfa>
 800b27a:	6821      	ldr	r1, [r4, #0]
 800b27c:	6833      	ldr	r3, [r6, #0]
 800b27e:	0608      	lsls	r0, r1, #24
 800b280:	f853 5b04 	ldr.w	r5, [r3], #4
 800b284:	d402      	bmi.n	800b28c <_printf_i+0xe8>
 800b286:	0649      	lsls	r1, r1, #25
 800b288:	bf48      	it	mi
 800b28a:	b2ad      	uxthmi	r5, r5
 800b28c:	2f6f      	cmp	r7, #111	@ 0x6f
 800b28e:	6033      	str	r3, [r6, #0]
 800b290:	bf14      	ite	ne
 800b292:	230a      	movne	r3, #10
 800b294:	2308      	moveq	r3, #8
 800b296:	4850      	ldr	r0, [pc, #320]	@ (800b3d8 <_printf_i+0x234>)
 800b298:	2100      	movs	r1, #0
 800b29a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b29e:	6866      	ldr	r6, [r4, #4]
 800b2a0:	2e00      	cmp	r6, #0
 800b2a2:	60a6      	str	r6, [r4, #8]
 800b2a4:	db05      	blt.n	800b2b2 <_printf_i+0x10e>
 800b2a6:	6821      	ldr	r1, [r4, #0]
 800b2a8:	432e      	orrs	r6, r5
 800b2aa:	f021 0104 	bic.w	r1, r1, #4
 800b2ae:	6021      	str	r1, [r4, #0]
 800b2b0:	d04b      	beq.n	800b34a <_printf_i+0x1a6>
 800b2b2:	4616      	mov	r6, r2
 800b2b4:	fbb5 f1f3 	udiv	r1, r5, r3
 800b2b8:	fb03 5711 	mls	r7, r3, r1, r5
 800b2bc:	5dc7      	ldrb	r7, [r0, r7]
 800b2be:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b2c2:	462f      	mov	r7, r5
 800b2c4:	42bb      	cmp	r3, r7
 800b2c6:	460d      	mov	r5, r1
 800b2c8:	d9f4      	bls.n	800b2b4 <_printf_i+0x110>
 800b2ca:	2b08      	cmp	r3, #8
 800b2cc:	d10b      	bne.n	800b2e6 <_printf_i+0x142>
 800b2ce:	6823      	ldr	r3, [r4, #0]
 800b2d0:	07df      	lsls	r7, r3, #31
 800b2d2:	d508      	bpl.n	800b2e6 <_printf_i+0x142>
 800b2d4:	6923      	ldr	r3, [r4, #16]
 800b2d6:	6861      	ldr	r1, [r4, #4]
 800b2d8:	4299      	cmp	r1, r3
 800b2da:	bfde      	ittt	le
 800b2dc:	2330      	movle	r3, #48	@ 0x30
 800b2de:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b2e2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b2e6:	1b92      	subs	r2, r2, r6
 800b2e8:	6122      	str	r2, [r4, #16]
 800b2ea:	464b      	mov	r3, r9
 800b2ec:	4621      	mov	r1, r4
 800b2ee:	4640      	mov	r0, r8
 800b2f0:	f8cd a000 	str.w	sl, [sp]
 800b2f4:	aa03      	add	r2, sp, #12
 800b2f6:	f7ff fee3 	bl	800b0c0 <_printf_common>
 800b2fa:	3001      	adds	r0, #1
 800b2fc:	d14a      	bne.n	800b394 <_printf_i+0x1f0>
 800b2fe:	f04f 30ff 	mov.w	r0, #4294967295
 800b302:	b004      	add	sp, #16
 800b304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b308:	6823      	ldr	r3, [r4, #0]
 800b30a:	f043 0320 	orr.w	r3, r3, #32
 800b30e:	6023      	str	r3, [r4, #0]
 800b310:	2778      	movs	r7, #120	@ 0x78
 800b312:	4832      	ldr	r0, [pc, #200]	@ (800b3dc <_printf_i+0x238>)
 800b314:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b318:	6823      	ldr	r3, [r4, #0]
 800b31a:	6831      	ldr	r1, [r6, #0]
 800b31c:	061f      	lsls	r7, r3, #24
 800b31e:	f851 5b04 	ldr.w	r5, [r1], #4
 800b322:	d402      	bmi.n	800b32a <_printf_i+0x186>
 800b324:	065f      	lsls	r7, r3, #25
 800b326:	bf48      	it	mi
 800b328:	b2ad      	uxthmi	r5, r5
 800b32a:	6031      	str	r1, [r6, #0]
 800b32c:	07d9      	lsls	r1, r3, #31
 800b32e:	bf44      	itt	mi
 800b330:	f043 0320 	orrmi.w	r3, r3, #32
 800b334:	6023      	strmi	r3, [r4, #0]
 800b336:	b11d      	cbz	r5, 800b340 <_printf_i+0x19c>
 800b338:	2310      	movs	r3, #16
 800b33a:	e7ad      	b.n	800b298 <_printf_i+0xf4>
 800b33c:	4826      	ldr	r0, [pc, #152]	@ (800b3d8 <_printf_i+0x234>)
 800b33e:	e7e9      	b.n	800b314 <_printf_i+0x170>
 800b340:	6823      	ldr	r3, [r4, #0]
 800b342:	f023 0320 	bic.w	r3, r3, #32
 800b346:	6023      	str	r3, [r4, #0]
 800b348:	e7f6      	b.n	800b338 <_printf_i+0x194>
 800b34a:	4616      	mov	r6, r2
 800b34c:	e7bd      	b.n	800b2ca <_printf_i+0x126>
 800b34e:	6833      	ldr	r3, [r6, #0]
 800b350:	6825      	ldr	r5, [r4, #0]
 800b352:	1d18      	adds	r0, r3, #4
 800b354:	6961      	ldr	r1, [r4, #20]
 800b356:	6030      	str	r0, [r6, #0]
 800b358:	062e      	lsls	r6, r5, #24
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	d501      	bpl.n	800b362 <_printf_i+0x1be>
 800b35e:	6019      	str	r1, [r3, #0]
 800b360:	e002      	b.n	800b368 <_printf_i+0x1c4>
 800b362:	0668      	lsls	r0, r5, #25
 800b364:	d5fb      	bpl.n	800b35e <_printf_i+0x1ba>
 800b366:	8019      	strh	r1, [r3, #0]
 800b368:	2300      	movs	r3, #0
 800b36a:	4616      	mov	r6, r2
 800b36c:	6123      	str	r3, [r4, #16]
 800b36e:	e7bc      	b.n	800b2ea <_printf_i+0x146>
 800b370:	6833      	ldr	r3, [r6, #0]
 800b372:	2100      	movs	r1, #0
 800b374:	1d1a      	adds	r2, r3, #4
 800b376:	6032      	str	r2, [r6, #0]
 800b378:	681e      	ldr	r6, [r3, #0]
 800b37a:	6862      	ldr	r2, [r4, #4]
 800b37c:	4630      	mov	r0, r6
 800b37e:	f000 f95b 	bl	800b638 <memchr>
 800b382:	b108      	cbz	r0, 800b388 <_printf_i+0x1e4>
 800b384:	1b80      	subs	r0, r0, r6
 800b386:	6060      	str	r0, [r4, #4]
 800b388:	6863      	ldr	r3, [r4, #4]
 800b38a:	6123      	str	r3, [r4, #16]
 800b38c:	2300      	movs	r3, #0
 800b38e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b392:	e7aa      	b.n	800b2ea <_printf_i+0x146>
 800b394:	4632      	mov	r2, r6
 800b396:	4649      	mov	r1, r9
 800b398:	4640      	mov	r0, r8
 800b39a:	6923      	ldr	r3, [r4, #16]
 800b39c:	47d0      	blx	sl
 800b39e:	3001      	adds	r0, #1
 800b3a0:	d0ad      	beq.n	800b2fe <_printf_i+0x15a>
 800b3a2:	6823      	ldr	r3, [r4, #0]
 800b3a4:	079b      	lsls	r3, r3, #30
 800b3a6:	d413      	bmi.n	800b3d0 <_printf_i+0x22c>
 800b3a8:	68e0      	ldr	r0, [r4, #12]
 800b3aa:	9b03      	ldr	r3, [sp, #12]
 800b3ac:	4298      	cmp	r0, r3
 800b3ae:	bfb8      	it	lt
 800b3b0:	4618      	movlt	r0, r3
 800b3b2:	e7a6      	b.n	800b302 <_printf_i+0x15e>
 800b3b4:	2301      	movs	r3, #1
 800b3b6:	4632      	mov	r2, r6
 800b3b8:	4649      	mov	r1, r9
 800b3ba:	4640      	mov	r0, r8
 800b3bc:	47d0      	blx	sl
 800b3be:	3001      	adds	r0, #1
 800b3c0:	d09d      	beq.n	800b2fe <_printf_i+0x15a>
 800b3c2:	3501      	adds	r5, #1
 800b3c4:	68e3      	ldr	r3, [r4, #12]
 800b3c6:	9903      	ldr	r1, [sp, #12]
 800b3c8:	1a5b      	subs	r3, r3, r1
 800b3ca:	42ab      	cmp	r3, r5
 800b3cc:	dcf2      	bgt.n	800b3b4 <_printf_i+0x210>
 800b3ce:	e7eb      	b.n	800b3a8 <_printf_i+0x204>
 800b3d0:	2500      	movs	r5, #0
 800b3d2:	f104 0619 	add.w	r6, r4, #25
 800b3d6:	e7f5      	b.n	800b3c4 <_printf_i+0x220>
 800b3d8:	0800f54d 	.word	0x0800f54d
 800b3dc:	0800f55e 	.word	0x0800f55e

0800b3e0 <__sflush_r>:
 800b3e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3e6:	0716      	lsls	r6, r2, #28
 800b3e8:	4605      	mov	r5, r0
 800b3ea:	460c      	mov	r4, r1
 800b3ec:	d454      	bmi.n	800b498 <__sflush_r+0xb8>
 800b3ee:	684b      	ldr	r3, [r1, #4]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	dc02      	bgt.n	800b3fa <__sflush_r+0x1a>
 800b3f4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	dd48      	ble.n	800b48c <__sflush_r+0xac>
 800b3fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b3fc:	2e00      	cmp	r6, #0
 800b3fe:	d045      	beq.n	800b48c <__sflush_r+0xac>
 800b400:	2300      	movs	r3, #0
 800b402:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b406:	682f      	ldr	r7, [r5, #0]
 800b408:	6a21      	ldr	r1, [r4, #32]
 800b40a:	602b      	str	r3, [r5, #0]
 800b40c:	d030      	beq.n	800b470 <__sflush_r+0x90>
 800b40e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b410:	89a3      	ldrh	r3, [r4, #12]
 800b412:	0759      	lsls	r1, r3, #29
 800b414:	d505      	bpl.n	800b422 <__sflush_r+0x42>
 800b416:	6863      	ldr	r3, [r4, #4]
 800b418:	1ad2      	subs	r2, r2, r3
 800b41a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b41c:	b10b      	cbz	r3, 800b422 <__sflush_r+0x42>
 800b41e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b420:	1ad2      	subs	r2, r2, r3
 800b422:	2300      	movs	r3, #0
 800b424:	4628      	mov	r0, r5
 800b426:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b428:	6a21      	ldr	r1, [r4, #32]
 800b42a:	47b0      	blx	r6
 800b42c:	1c43      	adds	r3, r0, #1
 800b42e:	89a3      	ldrh	r3, [r4, #12]
 800b430:	d106      	bne.n	800b440 <__sflush_r+0x60>
 800b432:	6829      	ldr	r1, [r5, #0]
 800b434:	291d      	cmp	r1, #29
 800b436:	d82b      	bhi.n	800b490 <__sflush_r+0xb0>
 800b438:	4a28      	ldr	r2, [pc, #160]	@ (800b4dc <__sflush_r+0xfc>)
 800b43a:	40ca      	lsrs	r2, r1
 800b43c:	07d6      	lsls	r6, r2, #31
 800b43e:	d527      	bpl.n	800b490 <__sflush_r+0xb0>
 800b440:	2200      	movs	r2, #0
 800b442:	6062      	str	r2, [r4, #4]
 800b444:	6922      	ldr	r2, [r4, #16]
 800b446:	04d9      	lsls	r1, r3, #19
 800b448:	6022      	str	r2, [r4, #0]
 800b44a:	d504      	bpl.n	800b456 <__sflush_r+0x76>
 800b44c:	1c42      	adds	r2, r0, #1
 800b44e:	d101      	bne.n	800b454 <__sflush_r+0x74>
 800b450:	682b      	ldr	r3, [r5, #0]
 800b452:	b903      	cbnz	r3, 800b456 <__sflush_r+0x76>
 800b454:	6560      	str	r0, [r4, #84]	@ 0x54
 800b456:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b458:	602f      	str	r7, [r5, #0]
 800b45a:	b1b9      	cbz	r1, 800b48c <__sflush_r+0xac>
 800b45c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b460:	4299      	cmp	r1, r3
 800b462:	d002      	beq.n	800b46a <__sflush_r+0x8a>
 800b464:	4628      	mov	r0, r5
 800b466:	f7ff fca3 	bl	800adb0 <_free_r>
 800b46a:	2300      	movs	r3, #0
 800b46c:	6363      	str	r3, [r4, #52]	@ 0x34
 800b46e:	e00d      	b.n	800b48c <__sflush_r+0xac>
 800b470:	2301      	movs	r3, #1
 800b472:	4628      	mov	r0, r5
 800b474:	47b0      	blx	r6
 800b476:	4602      	mov	r2, r0
 800b478:	1c50      	adds	r0, r2, #1
 800b47a:	d1c9      	bne.n	800b410 <__sflush_r+0x30>
 800b47c:	682b      	ldr	r3, [r5, #0]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d0c6      	beq.n	800b410 <__sflush_r+0x30>
 800b482:	2b1d      	cmp	r3, #29
 800b484:	d001      	beq.n	800b48a <__sflush_r+0xaa>
 800b486:	2b16      	cmp	r3, #22
 800b488:	d11d      	bne.n	800b4c6 <__sflush_r+0xe6>
 800b48a:	602f      	str	r7, [r5, #0]
 800b48c:	2000      	movs	r0, #0
 800b48e:	e021      	b.n	800b4d4 <__sflush_r+0xf4>
 800b490:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b494:	b21b      	sxth	r3, r3
 800b496:	e01a      	b.n	800b4ce <__sflush_r+0xee>
 800b498:	690f      	ldr	r7, [r1, #16]
 800b49a:	2f00      	cmp	r7, #0
 800b49c:	d0f6      	beq.n	800b48c <__sflush_r+0xac>
 800b49e:	0793      	lsls	r3, r2, #30
 800b4a0:	bf18      	it	ne
 800b4a2:	2300      	movne	r3, #0
 800b4a4:	680e      	ldr	r6, [r1, #0]
 800b4a6:	bf08      	it	eq
 800b4a8:	694b      	ldreq	r3, [r1, #20]
 800b4aa:	1bf6      	subs	r6, r6, r7
 800b4ac:	600f      	str	r7, [r1, #0]
 800b4ae:	608b      	str	r3, [r1, #8]
 800b4b0:	2e00      	cmp	r6, #0
 800b4b2:	ddeb      	ble.n	800b48c <__sflush_r+0xac>
 800b4b4:	4633      	mov	r3, r6
 800b4b6:	463a      	mov	r2, r7
 800b4b8:	4628      	mov	r0, r5
 800b4ba:	6a21      	ldr	r1, [r4, #32]
 800b4bc:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800b4c0:	47e0      	blx	ip
 800b4c2:	2800      	cmp	r0, #0
 800b4c4:	dc07      	bgt.n	800b4d6 <__sflush_r+0xf6>
 800b4c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b4ce:	f04f 30ff 	mov.w	r0, #4294967295
 800b4d2:	81a3      	strh	r3, [r4, #12]
 800b4d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4d6:	4407      	add	r7, r0
 800b4d8:	1a36      	subs	r6, r6, r0
 800b4da:	e7e9      	b.n	800b4b0 <__sflush_r+0xd0>
 800b4dc:	20400001 	.word	0x20400001

0800b4e0 <_fflush_r>:
 800b4e0:	b538      	push	{r3, r4, r5, lr}
 800b4e2:	690b      	ldr	r3, [r1, #16]
 800b4e4:	4605      	mov	r5, r0
 800b4e6:	460c      	mov	r4, r1
 800b4e8:	b913      	cbnz	r3, 800b4f0 <_fflush_r+0x10>
 800b4ea:	2500      	movs	r5, #0
 800b4ec:	4628      	mov	r0, r5
 800b4ee:	bd38      	pop	{r3, r4, r5, pc}
 800b4f0:	b118      	cbz	r0, 800b4fa <_fflush_r+0x1a>
 800b4f2:	6a03      	ldr	r3, [r0, #32]
 800b4f4:	b90b      	cbnz	r3, 800b4fa <_fflush_r+0x1a>
 800b4f6:	f7ff fa51 	bl	800a99c <__sinit>
 800b4fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d0f3      	beq.n	800b4ea <_fflush_r+0xa>
 800b502:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b504:	07d0      	lsls	r0, r2, #31
 800b506:	d404      	bmi.n	800b512 <_fflush_r+0x32>
 800b508:	0599      	lsls	r1, r3, #22
 800b50a:	d402      	bmi.n	800b512 <_fflush_r+0x32>
 800b50c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b50e:	f7ff fc4c 	bl	800adaa <__retarget_lock_acquire_recursive>
 800b512:	4628      	mov	r0, r5
 800b514:	4621      	mov	r1, r4
 800b516:	f7ff ff63 	bl	800b3e0 <__sflush_r>
 800b51a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b51c:	4605      	mov	r5, r0
 800b51e:	07da      	lsls	r2, r3, #31
 800b520:	d4e4      	bmi.n	800b4ec <_fflush_r+0xc>
 800b522:	89a3      	ldrh	r3, [r4, #12]
 800b524:	059b      	lsls	r3, r3, #22
 800b526:	d4e1      	bmi.n	800b4ec <_fflush_r+0xc>
 800b528:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b52a:	f7ff fc3f 	bl	800adac <__retarget_lock_release_recursive>
 800b52e:	e7dd      	b.n	800b4ec <_fflush_r+0xc>

0800b530 <__swhatbuf_r>:
 800b530:	b570      	push	{r4, r5, r6, lr}
 800b532:	460c      	mov	r4, r1
 800b534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b538:	4615      	mov	r5, r2
 800b53a:	2900      	cmp	r1, #0
 800b53c:	461e      	mov	r6, r3
 800b53e:	b096      	sub	sp, #88	@ 0x58
 800b540:	da0c      	bge.n	800b55c <__swhatbuf_r+0x2c>
 800b542:	89a3      	ldrh	r3, [r4, #12]
 800b544:	2100      	movs	r1, #0
 800b546:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b54a:	bf14      	ite	ne
 800b54c:	2340      	movne	r3, #64	@ 0x40
 800b54e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b552:	2000      	movs	r0, #0
 800b554:	6031      	str	r1, [r6, #0]
 800b556:	602b      	str	r3, [r5, #0]
 800b558:	b016      	add	sp, #88	@ 0x58
 800b55a:	bd70      	pop	{r4, r5, r6, pc}
 800b55c:	466a      	mov	r2, sp
 800b55e:	f000 f849 	bl	800b5f4 <_fstat_r>
 800b562:	2800      	cmp	r0, #0
 800b564:	dbed      	blt.n	800b542 <__swhatbuf_r+0x12>
 800b566:	9901      	ldr	r1, [sp, #4]
 800b568:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b56c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b570:	4259      	negs	r1, r3
 800b572:	4159      	adcs	r1, r3
 800b574:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b578:	e7eb      	b.n	800b552 <__swhatbuf_r+0x22>

0800b57a <__smakebuf_r>:
 800b57a:	898b      	ldrh	r3, [r1, #12]
 800b57c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b57e:	079d      	lsls	r5, r3, #30
 800b580:	4606      	mov	r6, r0
 800b582:	460c      	mov	r4, r1
 800b584:	d507      	bpl.n	800b596 <__smakebuf_r+0x1c>
 800b586:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b58a:	6023      	str	r3, [r4, #0]
 800b58c:	6123      	str	r3, [r4, #16]
 800b58e:	2301      	movs	r3, #1
 800b590:	6163      	str	r3, [r4, #20]
 800b592:	b003      	add	sp, #12
 800b594:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b596:	466a      	mov	r2, sp
 800b598:	ab01      	add	r3, sp, #4
 800b59a:	f7ff ffc9 	bl	800b530 <__swhatbuf_r>
 800b59e:	9f00      	ldr	r7, [sp, #0]
 800b5a0:	4605      	mov	r5, r0
 800b5a2:	4639      	mov	r1, r7
 800b5a4:	4630      	mov	r0, r6
 800b5a6:	f7ff f8e1 	bl	800a76c <_malloc_r>
 800b5aa:	b948      	cbnz	r0, 800b5c0 <__smakebuf_r+0x46>
 800b5ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5b0:	059a      	lsls	r2, r3, #22
 800b5b2:	d4ee      	bmi.n	800b592 <__smakebuf_r+0x18>
 800b5b4:	f023 0303 	bic.w	r3, r3, #3
 800b5b8:	f043 0302 	orr.w	r3, r3, #2
 800b5bc:	81a3      	strh	r3, [r4, #12]
 800b5be:	e7e2      	b.n	800b586 <__smakebuf_r+0xc>
 800b5c0:	89a3      	ldrh	r3, [r4, #12]
 800b5c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b5c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b5ca:	81a3      	strh	r3, [r4, #12]
 800b5cc:	9b01      	ldr	r3, [sp, #4]
 800b5ce:	6020      	str	r0, [r4, #0]
 800b5d0:	b15b      	cbz	r3, 800b5ea <__smakebuf_r+0x70>
 800b5d2:	4630      	mov	r0, r6
 800b5d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b5d8:	f000 f81e 	bl	800b618 <_isatty_r>
 800b5dc:	b128      	cbz	r0, 800b5ea <__smakebuf_r+0x70>
 800b5de:	89a3      	ldrh	r3, [r4, #12]
 800b5e0:	f023 0303 	bic.w	r3, r3, #3
 800b5e4:	f043 0301 	orr.w	r3, r3, #1
 800b5e8:	81a3      	strh	r3, [r4, #12]
 800b5ea:	89a3      	ldrh	r3, [r4, #12]
 800b5ec:	431d      	orrs	r5, r3
 800b5ee:	81a5      	strh	r5, [r4, #12]
 800b5f0:	e7cf      	b.n	800b592 <__smakebuf_r+0x18>
	...

0800b5f4 <_fstat_r>:
 800b5f4:	b538      	push	{r3, r4, r5, lr}
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	4d06      	ldr	r5, [pc, #24]	@ (800b614 <_fstat_r+0x20>)
 800b5fa:	4604      	mov	r4, r0
 800b5fc:	4608      	mov	r0, r1
 800b5fe:	4611      	mov	r1, r2
 800b600:	602b      	str	r3, [r5, #0]
 800b602:	f7f7 f9a9 	bl	8002958 <_fstat>
 800b606:	1c43      	adds	r3, r0, #1
 800b608:	d102      	bne.n	800b610 <_fstat_r+0x1c>
 800b60a:	682b      	ldr	r3, [r5, #0]
 800b60c:	b103      	cbz	r3, 800b610 <_fstat_r+0x1c>
 800b60e:	6023      	str	r3, [r4, #0]
 800b610:	bd38      	pop	{r3, r4, r5, pc}
 800b612:	bf00      	nop
 800b614:	200006b4 	.word	0x200006b4

0800b618 <_isatty_r>:
 800b618:	b538      	push	{r3, r4, r5, lr}
 800b61a:	2300      	movs	r3, #0
 800b61c:	4d05      	ldr	r5, [pc, #20]	@ (800b634 <_isatty_r+0x1c>)
 800b61e:	4604      	mov	r4, r0
 800b620:	4608      	mov	r0, r1
 800b622:	602b      	str	r3, [r5, #0]
 800b624:	f7f7 f9a7 	bl	8002976 <_isatty>
 800b628:	1c43      	adds	r3, r0, #1
 800b62a:	d102      	bne.n	800b632 <_isatty_r+0x1a>
 800b62c:	682b      	ldr	r3, [r5, #0]
 800b62e:	b103      	cbz	r3, 800b632 <_isatty_r+0x1a>
 800b630:	6023      	str	r3, [r4, #0]
 800b632:	bd38      	pop	{r3, r4, r5, pc}
 800b634:	200006b4 	.word	0x200006b4

0800b638 <memchr>:
 800b638:	4603      	mov	r3, r0
 800b63a:	b510      	push	{r4, lr}
 800b63c:	b2c9      	uxtb	r1, r1
 800b63e:	4402      	add	r2, r0
 800b640:	4293      	cmp	r3, r2
 800b642:	4618      	mov	r0, r3
 800b644:	d101      	bne.n	800b64a <memchr+0x12>
 800b646:	2000      	movs	r0, #0
 800b648:	e003      	b.n	800b652 <memchr+0x1a>
 800b64a:	7804      	ldrb	r4, [r0, #0]
 800b64c:	3301      	adds	r3, #1
 800b64e:	428c      	cmp	r4, r1
 800b650:	d1f6      	bne.n	800b640 <memchr+0x8>
 800b652:	bd10      	pop	{r4, pc}

0800b654 <_init>:
 800b654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b656:	bf00      	nop
 800b658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b65a:	bc08      	pop	{r3}
 800b65c:	469e      	mov	lr, r3
 800b65e:	4770      	bx	lr

0800b660 <_fini>:
 800b660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b662:	bf00      	nop
 800b664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b666:	bc08      	pop	{r3}
 800b668:	469e      	mov	lr, r3
 800b66a:	4770      	bx	lr
